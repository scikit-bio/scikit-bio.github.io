Search.setIndex({"docnames": ["alignment", "development/coding_guidelines", "development/new_module", "diversity", "generated/generated/skbio.io.util.open", "generated/generated/skbio.io.util.open_file", "generated/generated/skbio.io.util.open_files", "generated/skbio.alignment.AlignmentStructure", "generated/skbio.alignment.AlignmentStructure.__eq__", "generated/skbio.alignment.AlignmentStructure.__ge__", "generated/skbio.alignment.AlignmentStructure.__getitem__", "generated/skbio.alignment.AlignmentStructure.__getstate__", "generated/skbio.alignment.AlignmentStructure.__gt__", "generated/skbio.alignment.AlignmentStructure.__hash__", "generated/skbio.alignment.AlignmentStructure.__le__", "generated/skbio.alignment.AlignmentStructure.__lt__", "generated/skbio.alignment.AlignmentStructure.__ne__", "generated/skbio.alignment.AlignmentStructure.__setstate__", "generated/skbio.alignment.AlignmentStructure.__str__", "generated/skbio.alignment.AlignmentStructure.is_zero_based", "generated/skbio.alignment.AlignmentStructure.set_zero_based", "generated/skbio.alignment.StripedSmithWaterman", "generated/skbio.alignment.StripedSmithWaterman.__call__", "generated/skbio.alignment.StripedSmithWaterman.__eq__", "generated/skbio.alignment.StripedSmithWaterman.__ge__", "generated/skbio.alignment.StripedSmithWaterman.__getstate__", "generated/skbio.alignment.StripedSmithWaterman.__gt__", "generated/skbio.alignment.StripedSmithWaterman.__hash__", "generated/skbio.alignment.StripedSmithWaterman.__le__", "generated/skbio.alignment.StripedSmithWaterman.__lt__", "generated/skbio.alignment.StripedSmithWaterman.__ne__", "generated/skbio.alignment.StripedSmithWaterman.__setstate__", "generated/skbio.alignment.StripedSmithWaterman.__str__", "generated/skbio.alignment.TabularMSA", "generated/skbio.alignment.TabularMSA.__bool__", "generated/skbio.alignment.TabularMSA.__contains__", "generated/skbio.alignment.TabularMSA.__copy__", "generated/skbio.alignment.TabularMSA.__deepcopy__", "generated/skbio.alignment.TabularMSA.__eq__", "generated/skbio.alignment.TabularMSA.__ge__", "generated/skbio.alignment.TabularMSA.__getitem__", "generated/skbio.alignment.TabularMSA.__getstate__", "generated/skbio.alignment.TabularMSA.__gt__", "generated/skbio.alignment.TabularMSA.__iter__", "generated/skbio.alignment.TabularMSA.__le__", "generated/skbio.alignment.TabularMSA.__len__", "generated/skbio.alignment.TabularMSA.__lt__", "generated/skbio.alignment.TabularMSA.__ne__", "generated/skbio.alignment.TabularMSA.__reversed__", "generated/skbio.alignment.TabularMSA.__str__", "generated/skbio.alignment.TabularMSA.append", "generated/skbio.alignment.TabularMSA.consensus", "generated/skbio.alignment.TabularMSA.conservation", "generated/skbio.alignment.TabularMSA.extend", "generated/skbio.alignment.TabularMSA.from_dict", "generated/skbio.alignment.TabularMSA.gap_frequencies", "generated/skbio.alignment.TabularMSA.has_metadata", "generated/skbio.alignment.TabularMSA.has_positional_metadata", "generated/skbio.alignment.TabularMSA.iter_positions", "generated/skbio.alignment.TabularMSA.join", "generated/skbio.alignment.TabularMSA.read", "generated/skbio.alignment.TabularMSA.reassign_index", "generated/skbio.alignment.TabularMSA.sort", "generated/skbio.alignment.TabularMSA.to_dict", "generated/skbio.alignment.TabularMSA.write", "generated/skbio.alignment.global_pairwise_align", "generated/skbio.alignment.global_pairwise_align_nucleotide", "generated/skbio.alignment.global_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align", "generated/skbio.alignment.local_pairwise_align_nucleotide", "generated/skbio.alignment.local_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align_ssw", "generated/skbio.alignment.make_identity_substitution_matrix", "generated/skbio.diversity.alpha", "generated/skbio.diversity.alpha.ace", "generated/skbio.diversity.alpha.berger_parker_d", "generated/skbio.diversity.alpha.brillouin_d", "generated/skbio.diversity.alpha.chao1", "generated/skbio.diversity.alpha.chao1_ci", "generated/skbio.diversity.alpha.dominance", "generated/skbio.diversity.alpha.doubles", "generated/skbio.diversity.alpha.enspie", "generated/skbio.diversity.alpha.esty_ci", "generated/skbio.diversity.alpha.faith_pd", "generated/skbio.diversity.alpha.fisher_alpha", "generated/skbio.diversity.alpha.gini_index", "generated/skbio.diversity.alpha.goods_coverage", "generated/skbio.diversity.alpha.heip_e", "generated/skbio.diversity.alpha.kempton_taylor_q", "generated/skbio.diversity.alpha.lladser_ci", "generated/skbio.diversity.alpha.lladser_pe", "generated/skbio.diversity.alpha.margalef", "generated/skbio.diversity.alpha.mcintosh_d", "generated/skbio.diversity.alpha.mcintosh_e", "generated/skbio.diversity.alpha.menhinick", "generated/skbio.diversity.alpha.michaelis_menten_fit", "generated/skbio.diversity.alpha.observed_otus", "generated/skbio.diversity.alpha.osd", "generated/skbio.diversity.alpha.pielou_e", "generated/skbio.diversity.alpha.robbins", "generated/skbio.diversity.alpha.shannon", "generated/skbio.diversity.alpha.simpson", "generated/skbio.diversity.alpha.simpson_e", "generated/skbio.diversity.alpha.singles", "generated/skbio.diversity.alpha.strong", "generated/skbio.diversity.alpha_diversity", "generated/skbio.diversity.beta", "generated/skbio.diversity.beta.unweighted_unifrac", "generated/skbio.diversity.beta.weighted_unifrac", "generated/skbio.diversity.beta_diversity", "generated/skbio.diversity.block_beta_diversity", "generated/skbio.diversity.get_alpha_diversity_metrics", "generated/skbio.diversity.get_beta_diversity_metrics", "generated/skbio.diversity.partial_beta_diversity", "generated/skbio.io.ArgumentOverrideWarning", "generated/skbio.io.BLAST7FormatError", "generated/skbio.io.ClustalFormatError", "generated/skbio.io.EMBLFormatError", "generated/skbio.io.FASTAFormatError", "generated/skbio.io.FASTQFormatError", "generated/skbio.io.FileFormatError", "generated/skbio.io.FormatIdentificationWarning", "generated/skbio.io.GFF3FormatError", "generated/skbio.io.GenBankFormatError", "generated/skbio.io.IOSourceError", "generated/skbio.io.LSMatFormatError", "generated/skbio.io.NewickFormatError", "generated/skbio.io.OrdinationFormatError", "generated/skbio.io.PhylipFormatError", "generated/skbio.io.QSeqFormatError", "generated/skbio.io.QUALFormatError", "generated/skbio.io.StockholmFormatError", "generated/skbio.io.UnrecognizedFormatError", "generated/skbio.io.format.binary_dm", "generated/skbio.io.format.blast6", "generated/skbio.io.format.blast7", "generated/skbio.io.format.clustal", "generated/skbio.io.format.embl", "generated/skbio.io.format.fasta", "generated/skbio.io.format.fastq", "generated/skbio.io.format.genbank", "generated/skbio.io.format.gff3", "generated/skbio.io.format.lsmat", "generated/skbio.io.format.newick", "generated/skbio.io.format.ordination", "generated/skbio.io.format.phylip", "generated/skbio.io.format.qseq", "generated/skbio.io.format.stockholm", "generated/skbio.io.format.taxdump", "generated/skbio.io.registry", "generated/skbio.io.registry.DuplicateRegistrationError", "generated/skbio.io.registry.Format", "generated/skbio.io.registry.Format.__eq__", "generated/skbio.io.registry.Format.__ge__", "generated/skbio.io.registry.Format.__getstate__", "generated/skbio.io.registry.Format.__gt__", "generated/skbio.io.registry.Format.__hash__", "generated/skbio.io.registry.Format.__le__", "generated/skbio.io.registry.Format.__lt__", "generated/skbio.io.registry.Format.__ne__", "generated/skbio.io.registry.Format.__str__", "generated/skbio.io.registry.Format.reader", "generated/skbio.io.registry.Format.sniffer", "generated/skbio.io.registry.Format.writer", "generated/skbio.io.registry.IORegistry", "generated/skbio.io.registry.IORegistry.__eq__", "generated/skbio.io.registry.IORegistry.__ge__", "generated/skbio.io.registry.IORegistry.__getstate__", "generated/skbio.io.registry.IORegistry.__gt__", "generated/skbio.io.registry.IORegistry.__hash__", "generated/skbio.io.registry.IORegistry.__le__", "generated/skbio.io.registry.IORegistry.__lt__", "generated/skbio.io.registry.IORegistry.__ne__", "generated/skbio.io.registry.IORegistry.__str__", "generated/skbio.io.registry.IORegistry.add_format", "generated/skbio.io.registry.IORegistry.create_format", "generated/skbio.io.registry.IORegistry.get_reader", "generated/skbio.io.registry.IORegistry.get_sniffer", "generated/skbio.io.registry.IORegistry.get_writer", "generated/skbio.io.registry.IORegistry.list_read_formats", "generated/skbio.io.registry.IORegistry.list_write_formats", "generated/skbio.io.registry.IORegistry.monkey_patch", "generated/skbio.io.registry.IORegistry.read", "generated/skbio.io.registry.IORegistry.sniff", "generated/skbio.io.registry.IORegistry.write", "generated/skbio.io.registry.InvalidRegistrationError", "generated/skbio.io.registry.create_format", "generated/skbio.io.registry.read", "generated/skbio.io.registry.sniff", "generated/skbio.io.registry.write", "generated/skbio.io.util", "generated/skbio.metadata.Interval", "generated/skbio.metadata.Interval.__eq__", "generated/skbio.metadata.Interval.__ge__", "generated/skbio.metadata.Interval.__getstate__", "generated/skbio.metadata.Interval.__gt__", "generated/skbio.metadata.Interval.__le__", "generated/skbio.metadata.Interval.__lt__", "generated/skbio.metadata.Interval.__ne__", "generated/skbio.metadata.Interval.__str__", "generated/skbio.metadata.Interval.drop", "generated/skbio.metadata.IntervalMetadata", "generated/skbio.metadata.IntervalMetadata.__copy__", "generated/skbio.metadata.IntervalMetadata.__deepcopy__", "generated/skbio.metadata.IntervalMetadata.__eq__", "generated/skbio.metadata.IntervalMetadata.__ge__", "generated/skbio.metadata.IntervalMetadata.__getstate__", "generated/skbio.metadata.IntervalMetadata.__gt__", "generated/skbio.metadata.IntervalMetadata.__le__", "generated/skbio.metadata.IntervalMetadata.__lt__", "generated/skbio.metadata.IntervalMetadata.__ne__", "generated/skbio.metadata.IntervalMetadata.__str__", "generated/skbio.metadata.IntervalMetadata.add", "generated/skbio.metadata.IntervalMetadata.concat", "generated/skbio.metadata.IntervalMetadata.drop", "generated/skbio.metadata.IntervalMetadata.merge", "generated/skbio.metadata.IntervalMetadata.query", "generated/skbio.metadata.IntervalMetadata.read", "generated/skbio.metadata.IntervalMetadata.sort", "generated/skbio.metadata.IntervalMetadata.write", "generated/skbio.sequence.DNA", "generated/skbio.sequence.DNA.__bool__", "generated/skbio.sequence.DNA.__contains__", "generated/skbio.sequence.DNA.__copy__", "generated/skbio.sequence.DNA.__deepcopy__", "generated/skbio.sequence.DNA.__eq__", "generated/skbio.sequence.DNA.__ge__", "generated/skbio.sequence.DNA.__getitem__", "generated/skbio.sequence.DNA.__getstate__", "generated/skbio.sequence.DNA.__gt__", "generated/skbio.sequence.DNA.__iter__", "generated/skbio.sequence.DNA.__le__", "generated/skbio.sequence.DNA.__len__", "generated/skbio.sequence.DNA.__lt__", "generated/skbio.sequence.DNA.__ne__", "generated/skbio.sequence.DNA.__reversed__", "generated/skbio.sequence.DNA.__str__", "generated/skbio.sequence.DNA.complement", "generated/skbio.sequence.DNA.concat", "generated/skbio.sequence.DNA.count", "generated/skbio.sequence.DNA.definites", "generated/skbio.sequence.DNA.degap", "generated/skbio.sequence.DNA.degenerates", "generated/skbio.sequence.DNA.distance", "generated/skbio.sequence.DNA.expand_degenerates", "generated/skbio.sequence.DNA.find_motifs", "generated/skbio.sequence.DNA.find_with_regex", "generated/skbio.sequence.DNA.frequencies", "generated/skbio.sequence.DNA.gaps", "generated/skbio.sequence.DNA.gc_content", "generated/skbio.sequence.DNA.gc_frequency", "generated/skbio.sequence.DNA.has_definites", "generated/skbio.sequence.DNA.has_degenerates", "generated/skbio.sequence.DNA.has_gaps", "generated/skbio.sequence.DNA.has_interval_metadata", "generated/skbio.sequence.DNA.has_metadata", "generated/skbio.sequence.DNA.has_nondegenerates", "generated/skbio.sequence.DNA.has_positional_metadata", "generated/skbio.sequence.DNA.index", "generated/skbio.sequence.DNA.is_reverse_complement", "generated/skbio.sequence.DNA.iter_contiguous", "generated/skbio.sequence.DNA.iter_kmers", "generated/skbio.sequence.DNA.kmer_frequencies", "generated/skbio.sequence.DNA.lowercase", "generated/skbio.sequence.DNA.match_frequency", "generated/skbio.sequence.DNA.matches", "generated/skbio.sequence.DNA.mismatch_frequency", "generated/skbio.sequence.DNA.mismatches", "generated/skbio.sequence.DNA.nondegenerates", "generated/skbio.sequence.DNA.read", "generated/skbio.sequence.DNA.replace", "generated/skbio.sequence.DNA.reverse_complement", "generated/skbio.sequence.DNA.to_regex", "generated/skbio.sequence.DNA.transcribe", "generated/skbio.sequence.DNA.translate", "generated/skbio.sequence.DNA.translate_six_frames", "generated/skbio.sequence.DNA.write", "generated/skbio.sequence.GeneticCode", "generated/skbio.sequence.GeneticCode.__eq__", "generated/skbio.sequence.GeneticCode.__ge__", "generated/skbio.sequence.GeneticCode.__getstate__", "generated/skbio.sequence.GeneticCode.__gt__", "generated/skbio.sequence.GeneticCode.__le__", "generated/skbio.sequence.GeneticCode.__lt__", "generated/skbio.sequence.GeneticCode.__ne__", "generated/skbio.sequence.GeneticCode.__str__", "generated/skbio.sequence.GeneticCode.from_ncbi", "generated/skbio.sequence.GeneticCode.translate", "generated/skbio.sequence.GeneticCode.translate_six_frames", "generated/skbio.sequence.GrammaredSequence", "generated/skbio.sequence.GrammaredSequence.__bool__", "generated/skbio.sequence.GrammaredSequence.__contains__", "generated/skbio.sequence.GrammaredSequence.__copy__", "generated/skbio.sequence.GrammaredSequence.__deepcopy__", "generated/skbio.sequence.GrammaredSequence.__eq__", "generated/skbio.sequence.GrammaredSequence.__ge__", "generated/skbio.sequence.GrammaredSequence.__getitem__", "generated/skbio.sequence.GrammaredSequence.__getstate__", "generated/skbio.sequence.GrammaredSequence.__gt__", "generated/skbio.sequence.GrammaredSequence.__iter__", "generated/skbio.sequence.GrammaredSequence.__le__", "generated/skbio.sequence.GrammaredSequence.__len__", "generated/skbio.sequence.GrammaredSequence.__lt__", "generated/skbio.sequence.GrammaredSequence.__ne__", "generated/skbio.sequence.GrammaredSequence.__reversed__", "generated/skbio.sequence.GrammaredSequence.__str__", "generated/skbio.sequence.GrammaredSequence.concat", "generated/skbio.sequence.GrammaredSequence.count", "generated/skbio.sequence.GrammaredSequence.definites", "generated/skbio.sequence.GrammaredSequence.degap", "generated/skbio.sequence.GrammaredSequence.degenerates", "generated/skbio.sequence.GrammaredSequence.distance", "generated/skbio.sequence.GrammaredSequence.expand_degenerates", "generated/skbio.sequence.GrammaredSequence.find_motifs", "generated/skbio.sequence.GrammaredSequence.find_with_regex", "generated/skbio.sequence.GrammaredSequence.frequencies", "generated/skbio.sequence.GrammaredSequence.gaps", "generated/skbio.sequence.GrammaredSequence.has_definites", "generated/skbio.sequence.GrammaredSequence.has_degenerates", "generated/skbio.sequence.GrammaredSequence.has_gaps", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata", "generated/skbio.sequence.GrammaredSequence.has_metadata", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata", "generated/skbio.sequence.GrammaredSequence.index", "generated/skbio.sequence.GrammaredSequence.iter_contiguous", "generated/skbio.sequence.GrammaredSequence.iter_kmers", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies", "generated/skbio.sequence.GrammaredSequence.lowercase", "generated/skbio.sequence.GrammaredSequence.match_frequency", "generated/skbio.sequence.GrammaredSequence.matches", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency", "generated/skbio.sequence.GrammaredSequence.mismatches", "generated/skbio.sequence.GrammaredSequence.nondegenerates", "generated/skbio.sequence.GrammaredSequence.read", "generated/skbio.sequence.GrammaredSequence.replace", "generated/skbio.sequence.GrammaredSequence.to_regex", "generated/skbio.sequence.GrammaredSequence.write", "generated/skbio.sequence.Protein", "generated/skbio.sequence.Protein.__bool__", "generated/skbio.sequence.Protein.__contains__", "generated/skbio.sequence.Protein.__copy__", "generated/skbio.sequence.Protein.__deepcopy__", "generated/skbio.sequence.Protein.__eq__", "generated/skbio.sequence.Protein.__ge__", "generated/skbio.sequence.Protein.__getitem__", "generated/skbio.sequence.Protein.__getstate__", "generated/skbio.sequence.Protein.__gt__", "generated/skbio.sequence.Protein.__iter__", "generated/skbio.sequence.Protein.__le__", "generated/skbio.sequence.Protein.__len__", "generated/skbio.sequence.Protein.__lt__", "generated/skbio.sequence.Protein.__ne__", "generated/skbio.sequence.Protein.__reversed__", "generated/skbio.sequence.Protein.__str__", "generated/skbio.sequence.Protein.concat", "generated/skbio.sequence.Protein.count", "generated/skbio.sequence.Protein.definites", "generated/skbio.sequence.Protein.degap", "generated/skbio.sequence.Protein.degenerates", "generated/skbio.sequence.Protein.distance", "generated/skbio.sequence.Protein.expand_degenerates", "generated/skbio.sequence.Protein.find_motifs", "generated/skbio.sequence.Protein.find_with_regex", "generated/skbio.sequence.Protein.frequencies", "generated/skbio.sequence.Protein.gaps", "generated/skbio.sequence.Protein.has_definites", "generated/skbio.sequence.Protein.has_degenerates", "generated/skbio.sequence.Protein.has_gaps", "generated/skbio.sequence.Protein.has_interval_metadata", "generated/skbio.sequence.Protein.has_metadata", "generated/skbio.sequence.Protein.has_nondegenerates", "generated/skbio.sequence.Protein.has_positional_metadata", "generated/skbio.sequence.Protein.has_stops", "generated/skbio.sequence.Protein.index", "generated/skbio.sequence.Protein.iter_contiguous", "generated/skbio.sequence.Protein.iter_kmers", "generated/skbio.sequence.Protein.kmer_frequencies", "generated/skbio.sequence.Protein.lowercase", "generated/skbio.sequence.Protein.match_frequency", "generated/skbio.sequence.Protein.matches", "generated/skbio.sequence.Protein.mismatch_frequency", "generated/skbio.sequence.Protein.mismatches", "generated/skbio.sequence.Protein.nondegenerates", "generated/skbio.sequence.Protein.read", "generated/skbio.sequence.Protein.replace", "generated/skbio.sequence.Protein.stops", "generated/skbio.sequence.Protein.to_regex", "generated/skbio.sequence.Protein.write", "generated/skbio.sequence.RNA", "generated/skbio.sequence.RNA.__bool__", "generated/skbio.sequence.RNA.__contains__", "generated/skbio.sequence.RNA.__copy__", "generated/skbio.sequence.RNA.__deepcopy__", "generated/skbio.sequence.RNA.__eq__", "generated/skbio.sequence.RNA.__ge__", "generated/skbio.sequence.RNA.__getitem__", "generated/skbio.sequence.RNA.__getstate__", "generated/skbio.sequence.RNA.__gt__", "generated/skbio.sequence.RNA.__iter__", "generated/skbio.sequence.RNA.__le__", "generated/skbio.sequence.RNA.__len__", "generated/skbio.sequence.RNA.__lt__", "generated/skbio.sequence.RNA.__ne__", "generated/skbio.sequence.RNA.__reversed__", "generated/skbio.sequence.RNA.__str__", "generated/skbio.sequence.RNA.complement", "generated/skbio.sequence.RNA.concat", "generated/skbio.sequence.RNA.count", "generated/skbio.sequence.RNA.definites", "generated/skbio.sequence.RNA.degap", "generated/skbio.sequence.RNA.degenerates", "generated/skbio.sequence.RNA.distance", "generated/skbio.sequence.RNA.expand_degenerates", "generated/skbio.sequence.RNA.find_motifs", "generated/skbio.sequence.RNA.find_with_regex", "generated/skbio.sequence.RNA.frequencies", "generated/skbio.sequence.RNA.gaps", "generated/skbio.sequence.RNA.gc_content", "generated/skbio.sequence.RNA.gc_frequency", "generated/skbio.sequence.RNA.has_definites", "generated/skbio.sequence.RNA.has_degenerates", "generated/skbio.sequence.RNA.has_gaps", "generated/skbio.sequence.RNA.has_interval_metadata", "generated/skbio.sequence.RNA.has_metadata", "generated/skbio.sequence.RNA.has_nondegenerates", "generated/skbio.sequence.RNA.has_positional_metadata", "generated/skbio.sequence.RNA.index", "generated/skbio.sequence.RNA.is_reverse_complement", "generated/skbio.sequence.RNA.iter_contiguous", "generated/skbio.sequence.RNA.iter_kmers", "generated/skbio.sequence.RNA.kmer_frequencies", "generated/skbio.sequence.RNA.lowercase", "generated/skbio.sequence.RNA.match_frequency", "generated/skbio.sequence.RNA.matches", "generated/skbio.sequence.RNA.mismatch_frequency", "generated/skbio.sequence.RNA.mismatches", "generated/skbio.sequence.RNA.nondegenerates", "generated/skbio.sequence.RNA.read", "generated/skbio.sequence.RNA.replace", "generated/skbio.sequence.RNA.reverse_complement", "generated/skbio.sequence.RNA.reverse_transcribe", "generated/skbio.sequence.RNA.to_regex", "generated/skbio.sequence.RNA.translate", "generated/skbio.sequence.RNA.translate_six_frames", "generated/skbio.sequence.RNA.write", "generated/skbio.sequence.Sequence", "generated/skbio.sequence.Sequence.__bool__", "generated/skbio.sequence.Sequence.__contains__", "generated/skbio.sequence.Sequence.__copy__", "generated/skbio.sequence.Sequence.__deepcopy__", "generated/skbio.sequence.Sequence.__eq__", "generated/skbio.sequence.Sequence.__ge__", "generated/skbio.sequence.Sequence.__getitem__", "generated/skbio.sequence.Sequence.__getstate__", "generated/skbio.sequence.Sequence.__gt__", "generated/skbio.sequence.Sequence.__iter__", "generated/skbio.sequence.Sequence.__le__", "generated/skbio.sequence.Sequence.__len__", "generated/skbio.sequence.Sequence.__lt__", "generated/skbio.sequence.Sequence.__ne__", "generated/skbio.sequence.Sequence.__reversed__", "generated/skbio.sequence.Sequence.__str__", "generated/skbio.sequence.Sequence.concat", "generated/skbio.sequence.Sequence.count", "generated/skbio.sequence.Sequence.distance", "generated/skbio.sequence.Sequence.find_with_regex", "generated/skbio.sequence.Sequence.frequencies", "generated/skbio.sequence.Sequence.has_interval_metadata", "generated/skbio.sequence.Sequence.has_metadata", "generated/skbio.sequence.Sequence.has_positional_metadata", "generated/skbio.sequence.Sequence.index", "generated/skbio.sequence.Sequence.iter_contiguous", "generated/skbio.sequence.Sequence.iter_kmers", "generated/skbio.sequence.Sequence.kmer_frequencies", "generated/skbio.sequence.Sequence.lowercase", "generated/skbio.sequence.Sequence.match_frequency", "generated/skbio.sequence.Sequence.matches", "generated/skbio.sequence.Sequence.mismatch_frequency", "generated/skbio.sequence.Sequence.mismatches", "generated/skbio.sequence.Sequence.read", "generated/skbio.sequence.Sequence.replace", "generated/skbio.sequence.Sequence.write", "generated/skbio.sequence.distance", "generated/skbio.sequence.distance.hamming", "generated/skbio.sequence.distance.kmer_distance", "generated/skbio.stats.composition", "generated/skbio.stats.composition.alr", "generated/skbio.stats.composition.alr_inv", "generated/skbio.stats.composition.ancom", "generated/skbio.stats.composition.centralize", "generated/skbio.stats.composition.closure", "generated/skbio.stats.composition.clr", "generated/skbio.stats.composition.clr_inv", "generated/skbio.stats.composition.ilr", "generated/skbio.stats.composition.ilr_inv", "generated/skbio.stats.composition.inner", "generated/skbio.stats.composition.multiplicative_replacement", "generated/skbio.stats.composition.perturb", "generated/skbio.stats.composition.perturb_inv", "generated/skbio.stats.composition.power", "generated/skbio.stats.composition.sbp_basis", "generated/skbio.stats.distance", "generated/skbio.stats.distance.DissimilarityMatrix", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__", "generated/skbio.stats.distance.DissimilarityMatrix.__le__", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__", "generated/skbio.stats.distance.DissimilarityMatrix.__str__", "generated/skbio.stats.distance.DissimilarityMatrix.between", "generated/skbio.stats.distance.DissimilarityMatrix.copy", "generated/skbio.stats.distance.DissimilarityMatrix.filter", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable", "generated/skbio.stats.distance.DissimilarityMatrix.index", "generated/skbio.stats.distance.DissimilarityMatrix.plot", "generated/skbio.stats.distance.DissimilarityMatrix.read", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame", "generated/skbio.stats.distance.DissimilarityMatrix.transpose", "generated/skbio.stats.distance.DissimilarityMatrix.within", "generated/skbio.stats.distance.DissimilarityMatrix.write", "generated/skbio.stats.distance.DissimilarityMatrixError", "generated/skbio.stats.distance.DistanceMatrix", "generated/skbio.stats.distance.DistanceMatrix.__contains__", "generated/skbio.stats.distance.DistanceMatrix.__eq__", "generated/skbio.stats.distance.DistanceMatrix.__ge__", "generated/skbio.stats.distance.DistanceMatrix.__getitem__", "generated/skbio.stats.distance.DistanceMatrix.__getstate__", "generated/skbio.stats.distance.DistanceMatrix.__gt__", "generated/skbio.stats.distance.DistanceMatrix.__le__", "generated/skbio.stats.distance.DistanceMatrix.__lt__", "generated/skbio.stats.distance.DistanceMatrix.__ne__", "generated/skbio.stats.distance.DistanceMatrix.__str__", "generated/skbio.stats.distance.DistanceMatrix.between", "generated/skbio.stats.distance.DistanceMatrix.condensed_form", "generated/skbio.stats.distance.DistanceMatrix.copy", "generated/skbio.stats.distance.DistanceMatrix.filter", "generated/skbio.stats.distance.DistanceMatrix.from_iterable", "generated/skbio.stats.distance.DistanceMatrix.index", "generated/skbio.stats.distance.DistanceMatrix.permute", "generated/skbio.stats.distance.DistanceMatrix.plot", "generated/skbio.stats.distance.DistanceMatrix.read", "generated/skbio.stats.distance.DistanceMatrix.redundant_form", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame", "generated/skbio.stats.distance.DistanceMatrix.to_series", "generated/skbio.stats.distance.DistanceMatrix.transpose", "generated/skbio.stats.distance.DistanceMatrix.within", "generated/skbio.stats.distance.DistanceMatrix.write", "generated/skbio.stats.distance.DistanceMatrixError", "generated/skbio.stats.distance.MissingIDError", "generated/skbio.stats.distance.anosim", "generated/skbio.stats.distance.bioenv", "generated/skbio.stats.distance.mantel", "generated/skbio.stats.distance.permanova", "generated/skbio.stats.distance.permdisp", "generated/skbio.stats.distance.pwmantel", "generated/skbio.stats.distance.randdm", "generated/skbio.stats.evolve", "generated/skbio.stats.evolve.hommola_cospeciation", "generated/skbio.stats.gradient", "generated/skbio.stats.gradient.AverageGradientANOVA", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.CategoryResults", "generated/skbio.stats.gradient.CategoryResults.__eq__", "generated/skbio.stats.gradient.CategoryResults.__ge__", "generated/skbio.stats.gradient.CategoryResults.__getstate__", "generated/skbio.stats.gradient.CategoryResults.__gt__", "generated/skbio.stats.gradient.CategoryResults.__hash__", "generated/skbio.stats.gradient.CategoryResults.__le__", "generated/skbio.stats.gradient.CategoryResults.__lt__", "generated/skbio.stats.gradient.CategoryResults.__ne__", "generated/skbio.stats.gradient.CategoryResults.__str__", "generated/skbio.stats.gradient.CategoryResults.to_files", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVA", "generated/skbio.stats.gradient.GradientANOVA.__eq__", "generated/skbio.stats.gradient.GradientANOVA.__ge__", "generated/skbio.stats.gradient.GradientANOVA.__getstate__", "generated/skbio.stats.gradient.GradientANOVA.__gt__", "generated/skbio.stats.gradient.GradientANOVA.__hash__", "generated/skbio.stats.gradient.GradientANOVA.__le__", "generated/skbio.stats.gradient.GradientANOVA.__lt__", "generated/skbio.stats.gradient.GradientANOVA.__ne__", "generated/skbio.stats.gradient.GradientANOVA.__str__", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVAResults", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__", "generated/skbio.stats.gradient.GradientANOVAResults.__le__", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__", "generated/skbio.stats.gradient.GradientANOVAResults.__str__", "generated/skbio.stats.gradient.GradientANOVAResults.to_files", "generated/skbio.stats.gradient.GroupResults", "generated/skbio.stats.gradient.GroupResults.__eq__", "generated/skbio.stats.gradient.GroupResults.__ge__", "generated/skbio.stats.gradient.GroupResults.__getstate__", "generated/skbio.stats.gradient.GroupResults.__gt__", "generated/skbio.stats.gradient.GroupResults.__hash__", "generated/skbio.stats.gradient.GroupResults.__le__", "generated/skbio.stats.gradient.GroupResults.__lt__", "generated/skbio.stats.gradient.GroupResults.__ne__", "generated/skbio.stats.gradient.GroupResults.__str__", "generated/skbio.stats.gradient.GroupResults.to_files", "generated/skbio.stats.gradient.TrajectoryGradientANOVA", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.isubsample", "generated/skbio.stats.ordination", "generated/skbio.stats.ordination.OrdinationResults", "generated/skbio.stats.ordination.OrdinationResults.__eq__", "generated/skbio.stats.ordination.OrdinationResults.__ge__", "generated/skbio.stats.ordination.OrdinationResults.__getstate__", "generated/skbio.stats.ordination.OrdinationResults.__gt__", "generated/skbio.stats.ordination.OrdinationResults.__hash__", "generated/skbio.stats.ordination.OrdinationResults.__le__", "generated/skbio.stats.ordination.OrdinationResults.__lt__", "generated/skbio.stats.ordination.OrdinationResults.__ne__", "generated/skbio.stats.ordination.OrdinationResults.__str__", "generated/skbio.stats.ordination.OrdinationResults.plot", "generated/skbio.stats.ordination.OrdinationResults.read", "generated/skbio.stats.ordination.OrdinationResults.write", "generated/skbio.stats.ordination.ca", "generated/skbio.stats.ordination.cca", "generated/skbio.stats.ordination.corr", "generated/skbio.stats.ordination.e_matrix", "generated/skbio.stats.ordination.f_matrix", "generated/skbio.stats.ordination.mean_and_std", "generated/skbio.stats.ordination.pcoa", "generated/skbio.stats.ordination.pcoa_biplot", "generated/skbio.stats.ordination.rda", "generated/skbio.stats.ordination.scale", "generated/skbio.stats.ordination.svd_rank", "generated/skbio.stats.power", "generated/skbio.stats.power.confidence_bound", "generated/skbio.stats.power.paired_subsamples", "generated/skbio.stats.power.subsample_paired_power", "generated/skbio.stats.power.subsample_power", "generated/skbio.stats.subsample_counts", "generated/skbio.tree.DuplicateNodeError", "generated/skbio.tree.MissingNodeError", "generated/skbio.tree.NoLengthError", "generated/skbio.tree.NoParentError", "generated/skbio.tree.TreeError", "generated/skbio.tree.TreeNode", "generated/skbio.tree.TreeNode.__copy__", "generated/skbio.tree.TreeNode.__deepcopy__", "generated/skbio.tree.TreeNode.__eq__", "generated/skbio.tree.TreeNode.__ge__", "generated/skbio.tree.TreeNode.__getitem__", "generated/skbio.tree.TreeNode.__getstate__", "generated/skbio.tree.TreeNode.__gt__", "generated/skbio.tree.TreeNode.__hash__", "generated/skbio.tree.TreeNode.__iter__", "generated/skbio.tree.TreeNode.__le__", "generated/skbio.tree.TreeNode.__len__", "generated/skbio.tree.TreeNode.__lt__", "generated/skbio.tree.TreeNode.__ne__", "generated/skbio.tree.TreeNode.__str__", "generated/skbio.tree.TreeNode.accumulate_to_ancestor", "generated/skbio.tree.TreeNode.ancestors", "generated/skbio.tree.TreeNode.append", "generated/skbio.tree.TreeNode.ascii_art", "generated/skbio.tree.TreeNode.assign_ids", "generated/skbio.tree.TreeNode.assign_supports", "generated/skbio.tree.TreeNode.bifurcate", "generated/skbio.tree.TreeNode.cache_attr", "generated/skbio.tree.TreeNode.compare_rfd", "generated/skbio.tree.TreeNode.compare_subsets", "generated/skbio.tree.TreeNode.compare_tip_distances", "generated/skbio.tree.TreeNode.copy", "generated/skbio.tree.TreeNode.count", "generated/skbio.tree.TreeNode.create_caches", "generated/skbio.tree.TreeNode.deepcopy", "generated/skbio.tree.TreeNode.descending_branch_length", "generated/skbio.tree.TreeNode.distance", "generated/skbio.tree.TreeNode.extend", "generated/skbio.tree.TreeNode.find", "generated/skbio.tree.TreeNode.find_all", "generated/skbio.tree.TreeNode.find_by_func", "generated/skbio.tree.TreeNode.find_by_id", "generated/skbio.tree.TreeNode.from_linkage_matrix", "generated/skbio.tree.TreeNode.from_taxdump", "generated/skbio.tree.TreeNode.from_taxonomy", "generated/skbio.tree.TreeNode.get_max_distance", "generated/skbio.tree.TreeNode.has_children", "generated/skbio.tree.TreeNode.index_tree", "generated/skbio.tree.TreeNode.invalidate_caches", "generated/skbio.tree.TreeNode.is_root", "generated/skbio.tree.TreeNode.is_tip", "generated/skbio.tree.TreeNode.lca", "generated/skbio.tree.TreeNode.levelorder", "generated/skbio.tree.TreeNode.lowest_common_ancestor", "generated/skbio.tree.TreeNode.neighbors", "generated/skbio.tree.TreeNode.non_tips", "generated/skbio.tree.TreeNode.observed_node_counts", "generated/skbio.tree.TreeNode.pop", "generated/skbio.tree.TreeNode.postorder", "generated/skbio.tree.TreeNode.pre_and_postorder", "generated/skbio.tree.TreeNode.preorder", "generated/skbio.tree.TreeNode.prune", "generated/skbio.tree.TreeNode.read", "generated/skbio.tree.TreeNode.remove", "generated/skbio.tree.TreeNode.remove_deleted", "generated/skbio.tree.TreeNode.root", "generated/skbio.tree.TreeNode.root_at", "generated/skbio.tree.TreeNode.root_at_midpoint", "generated/skbio.tree.TreeNode.shear", "generated/skbio.tree.TreeNode.shuffle", "generated/skbio.tree.TreeNode.siblings", "generated/skbio.tree.TreeNode.subset", "generated/skbio.tree.TreeNode.subsets", "generated/skbio.tree.TreeNode.subtree", "generated/skbio.tree.TreeNode.tip_tip_distances", "generated/skbio.tree.TreeNode.tips", "generated/skbio.tree.TreeNode.to_array", "generated/skbio.tree.TreeNode.to_taxonomy", "generated/skbio.tree.TreeNode.traverse", "generated/skbio.tree.TreeNode.unpack", "generated/skbio.tree.TreeNode.unpack_by_func", "generated/skbio.tree.TreeNode.unrooted_copy", "generated/skbio.tree.TreeNode.unrooted_deepcopy", "generated/skbio.tree.TreeNode.write", "generated/skbio.tree.majority_rule", "generated/skbio.tree.nj", "generated/skbio.util.EfficiencyWarning", "generated/skbio.util.RepresentationWarning", "generated/skbio.util.assert_data_frame_almost_equal", "generated/skbio.util.assert_ordination_results_equal", "generated/skbio.util.cardinal_to_ordinal", "generated/skbio.util.classproperty", "generated/skbio.util.classproperty.__delete__", "generated/skbio.util.classproperty.__eq__", "generated/skbio.util.classproperty.__ge__", "generated/skbio.util.classproperty.__get__", "generated/skbio.util.classproperty.__getstate__", "generated/skbio.util.classproperty.__gt__", "generated/skbio.util.classproperty.__hash__", "generated/skbio.util.classproperty.__le__", "generated/skbio.util.classproperty.__lt__", "generated/skbio.util.classproperty.__ne__", "generated/skbio.util.classproperty.__set__", "generated/skbio.util.classproperty.__set_name__", "generated/skbio.util.classproperty.__str__", "generated/skbio.util.classproperty.deleter", "generated/skbio.util.classproperty.getter", "generated/skbio.util.classproperty.setter", "generated/skbio.util.find_duplicates", "generated/skbio.util.get_data_path", "generated/skbio.util.safe_md5", "generated/skbio.workflow.Workflow", "generated/skbio.workflow.Workflow.__call__", "generated/skbio.workflow.Workflow.__eq__", "generated/skbio.workflow.Workflow.__ge__", "generated/skbio.workflow.Workflow.__getstate__", "generated/skbio.workflow.Workflow.__gt__", "generated/skbio.workflow.Workflow.__hash__", "generated/skbio.workflow.Workflow.__le__", "generated/skbio.workflow.Workflow.__lt__", "generated/skbio.workflow.Workflow.__ne__", "generated/skbio.workflow.Workflow.__str__", "generated/skbio.workflow.Workflow.initialize_state", "generated/skbio.workflow.method", "generated/skbio.workflow.method.__call__", "generated/skbio.workflow.method.__eq__", "generated/skbio.workflow.method.__ge__", "generated/skbio.workflow.method.__getstate__", "generated/skbio.workflow.method.__gt__", "generated/skbio.workflow.method.__hash__", "generated/skbio.workflow.method.__le__", "generated/skbio.workflow.method.__lt__", "generated/skbio.workflow.method.__ne__", "generated/skbio.workflow.method.__str__", "generated/skbio.workflow.requires", "generated/skbio.workflow.requires.__call__", "generated/skbio.workflow.requires.__eq__", "generated/skbio.workflow.requires.__ge__", "generated/skbio.workflow.requires.__getstate__", "generated/skbio.workflow.requires.__gt__", "generated/skbio.workflow.requires.__hash__", "generated/skbio.workflow.requires.__le__", "generated/skbio.workflow.requires.__lt__", "generated/skbio.workflow.requires.__ne__", "generated/skbio.workflow.requires.__str__", "index", "io", "metadata", "sequence", "stats", "tree", "user/api_stability", "util", "workflow"], "filenames": ["alignment.rst", "development/coding_guidelines.rst", "development/new_module.rst", "diversity.rst", "generated/generated/skbio.io.util.open.rst", "generated/generated/skbio.io.util.open_file.rst", "generated/generated/skbio.io.util.open_files.rst", "generated/skbio.alignment.AlignmentStructure.rst", "generated/skbio.alignment.AlignmentStructure.__eq__.rst", "generated/skbio.alignment.AlignmentStructure.__ge__.rst", "generated/skbio.alignment.AlignmentStructure.__getitem__.rst", "generated/skbio.alignment.AlignmentStructure.__getstate__.rst", "generated/skbio.alignment.AlignmentStructure.__gt__.rst", "generated/skbio.alignment.AlignmentStructure.__hash__.rst", "generated/skbio.alignment.AlignmentStructure.__le__.rst", "generated/skbio.alignment.AlignmentStructure.__lt__.rst", "generated/skbio.alignment.AlignmentStructure.__ne__.rst", "generated/skbio.alignment.AlignmentStructure.__setstate__.rst", "generated/skbio.alignment.AlignmentStructure.__str__.rst", "generated/skbio.alignment.AlignmentStructure.is_zero_based.rst", "generated/skbio.alignment.AlignmentStructure.set_zero_based.rst", "generated/skbio.alignment.StripedSmithWaterman.rst", "generated/skbio.alignment.StripedSmithWaterman.__call__.rst", "generated/skbio.alignment.StripedSmithWaterman.__eq__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ge__.rst", "generated/skbio.alignment.StripedSmithWaterman.__getstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__gt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__hash__.rst", "generated/skbio.alignment.StripedSmithWaterman.__le__.rst", "generated/skbio.alignment.StripedSmithWaterman.__lt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ne__.rst", "generated/skbio.alignment.StripedSmithWaterman.__setstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__str__.rst", "generated/skbio.alignment.TabularMSA.rst", "generated/skbio.alignment.TabularMSA.__bool__.rst", "generated/skbio.alignment.TabularMSA.__contains__.rst", "generated/skbio.alignment.TabularMSA.__copy__.rst", "generated/skbio.alignment.TabularMSA.__deepcopy__.rst", "generated/skbio.alignment.TabularMSA.__eq__.rst", "generated/skbio.alignment.TabularMSA.__ge__.rst", "generated/skbio.alignment.TabularMSA.__getitem__.rst", "generated/skbio.alignment.TabularMSA.__getstate__.rst", "generated/skbio.alignment.TabularMSA.__gt__.rst", "generated/skbio.alignment.TabularMSA.__iter__.rst", "generated/skbio.alignment.TabularMSA.__le__.rst", "generated/skbio.alignment.TabularMSA.__len__.rst", "generated/skbio.alignment.TabularMSA.__lt__.rst", "generated/skbio.alignment.TabularMSA.__ne__.rst", "generated/skbio.alignment.TabularMSA.__reversed__.rst", "generated/skbio.alignment.TabularMSA.__str__.rst", "generated/skbio.alignment.TabularMSA.append.rst", "generated/skbio.alignment.TabularMSA.consensus.rst", "generated/skbio.alignment.TabularMSA.conservation.rst", "generated/skbio.alignment.TabularMSA.extend.rst", "generated/skbio.alignment.TabularMSA.from_dict.rst", "generated/skbio.alignment.TabularMSA.gap_frequencies.rst", "generated/skbio.alignment.TabularMSA.has_metadata.rst", "generated/skbio.alignment.TabularMSA.has_positional_metadata.rst", "generated/skbio.alignment.TabularMSA.iter_positions.rst", "generated/skbio.alignment.TabularMSA.join.rst", "generated/skbio.alignment.TabularMSA.read.rst", "generated/skbio.alignment.TabularMSA.reassign_index.rst", "generated/skbio.alignment.TabularMSA.sort.rst", "generated/skbio.alignment.TabularMSA.to_dict.rst", "generated/skbio.alignment.TabularMSA.write.rst", "generated/skbio.alignment.global_pairwise_align.rst", "generated/skbio.alignment.global_pairwise_align_nucleotide.rst", "generated/skbio.alignment.global_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align.rst", "generated/skbio.alignment.local_pairwise_align_nucleotide.rst", "generated/skbio.alignment.local_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align_ssw.rst", "generated/skbio.alignment.make_identity_substitution_matrix.rst", "generated/skbio.diversity.alpha.rst", "generated/skbio.diversity.alpha.ace.rst", "generated/skbio.diversity.alpha.berger_parker_d.rst", "generated/skbio.diversity.alpha.brillouin_d.rst", "generated/skbio.diversity.alpha.chao1.rst", "generated/skbio.diversity.alpha.chao1_ci.rst", "generated/skbio.diversity.alpha.dominance.rst", "generated/skbio.diversity.alpha.doubles.rst", "generated/skbio.diversity.alpha.enspie.rst", "generated/skbio.diversity.alpha.esty_ci.rst", "generated/skbio.diversity.alpha.faith_pd.rst", "generated/skbio.diversity.alpha.fisher_alpha.rst", "generated/skbio.diversity.alpha.gini_index.rst", "generated/skbio.diversity.alpha.goods_coverage.rst", "generated/skbio.diversity.alpha.heip_e.rst", "generated/skbio.diversity.alpha.kempton_taylor_q.rst", "generated/skbio.diversity.alpha.lladser_ci.rst", "generated/skbio.diversity.alpha.lladser_pe.rst", "generated/skbio.diversity.alpha.margalef.rst", "generated/skbio.diversity.alpha.mcintosh_d.rst", "generated/skbio.diversity.alpha.mcintosh_e.rst", "generated/skbio.diversity.alpha.menhinick.rst", "generated/skbio.diversity.alpha.michaelis_menten_fit.rst", "generated/skbio.diversity.alpha.observed_otus.rst", "generated/skbio.diversity.alpha.osd.rst", "generated/skbio.diversity.alpha.pielou_e.rst", "generated/skbio.diversity.alpha.robbins.rst", "generated/skbio.diversity.alpha.shannon.rst", "generated/skbio.diversity.alpha.simpson.rst", "generated/skbio.diversity.alpha.simpson_e.rst", "generated/skbio.diversity.alpha.singles.rst", "generated/skbio.diversity.alpha.strong.rst", "generated/skbio.diversity.alpha_diversity.rst", "generated/skbio.diversity.beta.rst", "generated/skbio.diversity.beta.unweighted_unifrac.rst", "generated/skbio.diversity.beta.weighted_unifrac.rst", "generated/skbio.diversity.beta_diversity.rst", "generated/skbio.diversity.block_beta_diversity.rst", "generated/skbio.diversity.get_alpha_diversity_metrics.rst", "generated/skbio.diversity.get_beta_diversity_metrics.rst", "generated/skbio.diversity.partial_beta_diversity.rst", "generated/skbio.io.ArgumentOverrideWarning.rst", "generated/skbio.io.BLAST7FormatError.rst", "generated/skbio.io.ClustalFormatError.rst", "generated/skbio.io.EMBLFormatError.rst", "generated/skbio.io.FASTAFormatError.rst", "generated/skbio.io.FASTQFormatError.rst", "generated/skbio.io.FileFormatError.rst", "generated/skbio.io.FormatIdentificationWarning.rst", "generated/skbio.io.GFF3FormatError.rst", "generated/skbio.io.GenBankFormatError.rst", "generated/skbio.io.IOSourceError.rst", "generated/skbio.io.LSMatFormatError.rst", "generated/skbio.io.NewickFormatError.rst", "generated/skbio.io.OrdinationFormatError.rst", "generated/skbio.io.PhylipFormatError.rst", "generated/skbio.io.QSeqFormatError.rst", "generated/skbio.io.QUALFormatError.rst", "generated/skbio.io.StockholmFormatError.rst", "generated/skbio.io.UnrecognizedFormatError.rst", "generated/skbio.io.format.binary_dm.rst", "generated/skbio.io.format.blast6.rst", "generated/skbio.io.format.blast7.rst", "generated/skbio.io.format.clustal.rst", "generated/skbio.io.format.embl.rst", "generated/skbio.io.format.fasta.rst", "generated/skbio.io.format.fastq.rst", "generated/skbio.io.format.genbank.rst", "generated/skbio.io.format.gff3.rst", "generated/skbio.io.format.lsmat.rst", "generated/skbio.io.format.newick.rst", "generated/skbio.io.format.ordination.rst", "generated/skbio.io.format.phylip.rst", "generated/skbio.io.format.qseq.rst", "generated/skbio.io.format.stockholm.rst", "generated/skbio.io.format.taxdump.rst", "generated/skbio.io.registry.rst", "generated/skbio.io.registry.DuplicateRegistrationError.rst", "generated/skbio.io.registry.Format.rst", "generated/skbio.io.registry.Format.__eq__.rst", "generated/skbio.io.registry.Format.__ge__.rst", "generated/skbio.io.registry.Format.__getstate__.rst", "generated/skbio.io.registry.Format.__gt__.rst", "generated/skbio.io.registry.Format.__hash__.rst", "generated/skbio.io.registry.Format.__le__.rst", "generated/skbio.io.registry.Format.__lt__.rst", "generated/skbio.io.registry.Format.__ne__.rst", "generated/skbio.io.registry.Format.__str__.rst", "generated/skbio.io.registry.Format.reader.rst", "generated/skbio.io.registry.Format.sniffer.rst", "generated/skbio.io.registry.Format.writer.rst", "generated/skbio.io.registry.IORegistry.rst", "generated/skbio.io.registry.IORegistry.__eq__.rst", "generated/skbio.io.registry.IORegistry.__ge__.rst", "generated/skbio.io.registry.IORegistry.__getstate__.rst", "generated/skbio.io.registry.IORegistry.__gt__.rst", "generated/skbio.io.registry.IORegistry.__hash__.rst", "generated/skbio.io.registry.IORegistry.__le__.rst", "generated/skbio.io.registry.IORegistry.__lt__.rst", "generated/skbio.io.registry.IORegistry.__ne__.rst", "generated/skbio.io.registry.IORegistry.__str__.rst", "generated/skbio.io.registry.IORegistry.add_format.rst", "generated/skbio.io.registry.IORegistry.create_format.rst", "generated/skbio.io.registry.IORegistry.get_reader.rst", "generated/skbio.io.registry.IORegistry.get_sniffer.rst", "generated/skbio.io.registry.IORegistry.get_writer.rst", "generated/skbio.io.registry.IORegistry.list_read_formats.rst", "generated/skbio.io.registry.IORegistry.list_write_formats.rst", "generated/skbio.io.registry.IORegistry.monkey_patch.rst", "generated/skbio.io.registry.IORegistry.read.rst", "generated/skbio.io.registry.IORegistry.sniff.rst", "generated/skbio.io.registry.IORegistry.write.rst", "generated/skbio.io.registry.InvalidRegistrationError.rst", "generated/skbio.io.registry.create_format.rst", "generated/skbio.io.registry.read.rst", "generated/skbio.io.registry.sniff.rst", "generated/skbio.io.registry.write.rst", "generated/skbio.io.util.rst", "generated/skbio.metadata.Interval.rst", "generated/skbio.metadata.Interval.__eq__.rst", "generated/skbio.metadata.Interval.__ge__.rst", "generated/skbio.metadata.Interval.__getstate__.rst", "generated/skbio.metadata.Interval.__gt__.rst", "generated/skbio.metadata.Interval.__le__.rst", "generated/skbio.metadata.Interval.__lt__.rst", "generated/skbio.metadata.Interval.__ne__.rst", "generated/skbio.metadata.Interval.__str__.rst", "generated/skbio.metadata.Interval.drop.rst", "generated/skbio.metadata.IntervalMetadata.rst", "generated/skbio.metadata.IntervalMetadata.__copy__.rst", "generated/skbio.metadata.IntervalMetadata.__deepcopy__.rst", "generated/skbio.metadata.IntervalMetadata.__eq__.rst", "generated/skbio.metadata.IntervalMetadata.__ge__.rst", "generated/skbio.metadata.IntervalMetadata.__getstate__.rst", "generated/skbio.metadata.IntervalMetadata.__gt__.rst", "generated/skbio.metadata.IntervalMetadata.__le__.rst", "generated/skbio.metadata.IntervalMetadata.__lt__.rst", "generated/skbio.metadata.IntervalMetadata.__ne__.rst", "generated/skbio.metadata.IntervalMetadata.__str__.rst", "generated/skbio.metadata.IntervalMetadata.add.rst", "generated/skbio.metadata.IntervalMetadata.concat.rst", "generated/skbio.metadata.IntervalMetadata.drop.rst", "generated/skbio.metadata.IntervalMetadata.merge.rst", "generated/skbio.metadata.IntervalMetadata.query.rst", "generated/skbio.metadata.IntervalMetadata.read.rst", "generated/skbio.metadata.IntervalMetadata.sort.rst", "generated/skbio.metadata.IntervalMetadata.write.rst", "generated/skbio.sequence.DNA.rst", "generated/skbio.sequence.DNA.__bool__.rst", "generated/skbio.sequence.DNA.__contains__.rst", "generated/skbio.sequence.DNA.__copy__.rst", "generated/skbio.sequence.DNA.__deepcopy__.rst", "generated/skbio.sequence.DNA.__eq__.rst", "generated/skbio.sequence.DNA.__ge__.rst", "generated/skbio.sequence.DNA.__getitem__.rst", "generated/skbio.sequence.DNA.__getstate__.rst", "generated/skbio.sequence.DNA.__gt__.rst", "generated/skbio.sequence.DNA.__iter__.rst", "generated/skbio.sequence.DNA.__le__.rst", "generated/skbio.sequence.DNA.__len__.rst", "generated/skbio.sequence.DNA.__lt__.rst", "generated/skbio.sequence.DNA.__ne__.rst", "generated/skbio.sequence.DNA.__reversed__.rst", "generated/skbio.sequence.DNA.__str__.rst", "generated/skbio.sequence.DNA.complement.rst", "generated/skbio.sequence.DNA.concat.rst", "generated/skbio.sequence.DNA.count.rst", "generated/skbio.sequence.DNA.definites.rst", "generated/skbio.sequence.DNA.degap.rst", "generated/skbio.sequence.DNA.degenerates.rst", "generated/skbio.sequence.DNA.distance.rst", "generated/skbio.sequence.DNA.expand_degenerates.rst", "generated/skbio.sequence.DNA.find_motifs.rst", "generated/skbio.sequence.DNA.find_with_regex.rst", "generated/skbio.sequence.DNA.frequencies.rst", "generated/skbio.sequence.DNA.gaps.rst", "generated/skbio.sequence.DNA.gc_content.rst", "generated/skbio.sequence.DNA.gc_frequency.rst", "generated/skbio.sequence.DNA.has_definites.rst", "generated/skbio.sequence.DNA.has_degenerates.rst", "generated/skbio.sequence.DNA.has_gaps.rst", "generated/skbio.sequence.DNA.has_interval_metadata.rst", "generated/skbio.sequence.DNA.has_metadata.rst", "generated/skbio.sequence.DNA.has_nondegenerates.rst", "generated/skbio.sequence.DNA.has_positional_metadata.rst", "generated/skbio.sequence.DNA.index.rst", "generated/skbio.sequence.DNA.is_reverse_complement.rst", "generated/skbio.sequence.DNA.iter_contiguous.rst", "generated/skbio.sequence.DNA.iter_kmers.rst", "generated/skbio.sequence.DNA.kmer_frequencies.rst", "generated/skbio.sequence.DNA.lowercase.rst", "generated/skbio.sequence.DNA.match_frequency.rst", "generated/skbio.sequence.DNA.matches.rst", "generated/skbio.sequence.DNA.mismatch_frequency.rst", "generated/skbio.sequence.DNA.mismatches.rst", "generated/skbio.sequence.DNA.nondegenerates.rst", "generated/skbio.sequence.DNA.read.rst", "generated/skbio.sequence.DNA.replace.rst", "generated/skbio.sequence.DNA.reverse_complement.rst", "generated/skbio.sequence.DNA.to_regex.rst", "generated/skbio.sequence.DNA.transcribe.rst", "generated/skbio.sequence.DNA.translate.rst", "generated/skbio.sequence.DNA.translate_six_frames.rst", "generated/skbio.sequence.DNA.write.rst", "generated/skbio.sequence.GeneticCode.rst", "generated/skbio.sequence.GeneticCode.__eq__.rst", "generated/skbio.sequence.GeneticCode.__ge__.rst", "generated/skbio.sequence.GeneticCode.__getstate__.rst", "generated/skbio.sequence.GeneticCode.__gt__.rst", "generated/skbio.sequence.GeneticCode.__le__.rst", "generated/skbio.sequence.GeneticCode.__lt__.rst", "generated/skbio.sequence.GeneticCode.__ne__.rst", "generated/skbio.sequence.GeneticCode.__str__.rst", "generated/skbio.sequence.GeneticCode.from_ncbi.rst", "generated/skbio.sequence.GeneticCode.translate.rst", "generated/skbio.sequence.GeneticCode.translate_six_frames.rst", "generated/skbio.sequence.GrammaredSequence.rst", "generated/skbio.sequence.GrammaredSequence.__bool__.rst", "generated/skbio.sequence.GrammaredSequence.__contains__.rst", "generated/skbio.sequence.GrammaredSequence.__copy__.rst", "generated/skbio.sequence.GrammaredSequence.__deepcopy__.rst", "generated/skbio.sequence.GrammaredSequence.__eq__.rst", "generated/skbio.sequence.GrammaredSequence.__ge__.rst", "generated/skbio.sequence.GrammaredSequence.__getitem__.rst", "generated/skbio.sequence.GrammaredSequence.__getstate__.rst", "generated/skbio.sequence.GrammaredSequence.__gt__.rst", "generated/skbio.sequence.GrammaredSequence.__iter__.rst", "generated/skbio.sequence.GrammaredSequence.__le__.rst", "generated/skbio.sequence.GrammaredSequence.__len__.rst", "generated/skbio.sequence.GrammaredSequence.__lt__.rst", "generated/skbio.sequence.GrammaredSequence.__ne__.rst", "generated/skbio.sequence.GrammaredSequence.__reversed__.rst", "generated/skbio.sequence.GrammaredSequence.__str__.rst", "generated/skbio.sequence.GrammaredSequence.concat.rst", "generated/skbio.sequence.GrammaredSequence.count.rst", "generated/skbio.sequence.GrammaredSequence.definites.rst", "generated/skbio.sequence.GrammaredSequence.degap.rst", "generated/skbio.sequence.GrammaredSequence.degenerates.rst", "generated/skbio.sequence.GrammaredSequence.distance.rst", "generated/skbio.sequence.GrammaredSequence.expand_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.find_motifs.rst", "generated/skbio.sequence.GrammaredSequence.find_with_regex.rst", "generated/skbio.sequence.GrammaredSequence.frequencies.rst", "generated/skbio.sequence.GrammaredSequence.gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_definites.rst", "generated/skbio.sequence.GrammaredSequence.has_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata.rst", "generated/skbio.sequence.GrammaredSequence.index.rst", "generated/skbio.sequence.GrammaredSequence.iter_contiguous.rst", "generated/skbio.sequence.GrammaredSequence.iter_kmers.rst", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies.rst", "generated/skbio.sequence.GrammaredSequence.lowercase.rst", "generated/skbio.sequence.GrammaredSequence.match_frequency.rst", "generated/skbio.sequence.GrammaredSequence.matches.rst", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency.rst", "generated/skbio.sequence.GrammaredSequence.mismatches.rst", "generated/skbio.sequence.GrammaredSequence.nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.read.rst", "generated/skbio.sequence.GrammaredSequence.replace.rst", "generated/skbio.sequence.GrammaredSequence.to_regex.rst", "generated/skbio.sequence.GrammaredSequence.write.rst", "generated/skbio.sequence.Protein.rst", "generated/skbio.sequence.Protein.__bool__.rst", "generated/skbio.sequence.Protein.__contains__.rst", "generated/skbio.sequence.Protein.__copy__.rst", "generated/skbio.sequence.Protein.__deepcopy__.rst", "generated/skbio.sequence.Protein.__eq__.rst", "generated/skbio.sequence.Protein.__ge__.rst", "generated/skbio.sequence.Protein.__getitem__.rst", "generated/skbio.sequence.Protein.__getstate__.rst", "generated/skbio.sequence.Protein.__gt__.rst", "generated/skbio.sequence.Protein.__iter__.rst", "generated/skbio.sequence.Protein.__le__.rst", "generated/skbio.sequence.Protein.__len__.rst", "generated/skbio.sequence.Protein.__lt__.rst", "generated/skbio.sequence.Protein.__ne__.rst", "generated/skbio.sequence.Protein.__reversed__.rst", "generated/skbio.sequence.Protein.__str__.rst", "generated/skbio.sequence.Protein.concat.rst", "generated/skbio.sequence.Protein.count.rst", "generated/skbio.sequence.Protein.definites.rst", "generated/skbio.sequence.Protein.degap.rst", "generated/skbio.sequence.Protein.degenerates.rst", "generated/skbio.sequence.Protein.distance.rst", "generated/skbio.sequence.Protein.expand_degenerates.rst", "generated/skbio.sequence.Protein.find_motifs.rst", "generated/skbio.sequence.Protein.find_with_regex.rst", "generated/skbio.sequence.Protein.frequencies.rst", "generated/skbio.sequence.Protein.gaps.rst", "generated/skbio.sequence.Protein.has_definites.rst", "generated/skbio.sequence.Protein.has_degenerates.rst", "generated/skbio.sequence.Protein.has_gaps.rst", "generated/skbio.sequence.Protein.has_interval_metadata.rst", "generated/skbio.sequence.Protein.has_metadata.rst", "generated/skbio.sequence.Protein.has_nondegenerates.rst", "generated/skbio.sequence.Protein.has_positional_metadata.rst", "generated/skbio.sequence.Protein.has_stops.rst", "generated/skbio.sequence.Protein.index.rst", "generated/skbio.sequence.Protein.iter_contiguous.rst", "generated/skbio.sequence.Protein.iter_kmers.rst", "generated/skbio.sequence.Protein.kmer_frequencies.rst", "generated/skbio.sequence.Protein.lowercase.rst", "generated/skbio.sequence.Protein.match_frequency.rst", "generated/skbio.sequence.Protein.matches.rst", "generated/skbio.sequence.Protein.mismatch_frequency.rst", "generated/skbio.sequence.Protein.mismatches.rst", "generated/skbio.sequence.Protein.nondegenerates.rst", "generated/skbio.sequence.Protein.read.rst", "generated/skbio.sequence.Protein.replace.rst", "generated/skbio.sequence.Protein.stops.rst", "generated/skbio.sequence.Protein.to_regex.rst", "generated/skbio.sequence.Protein.write.rst", "generated/skbio.sequence.RNA.rst", "generated/skbio.sequence.RNA.__bool__.rst", "generated/skbio.sequence.RNA.__contains__.rst", "generated/skbio.sequence.RNA.__copy__.rst", "generated/skbio.sequence.RNA.__deepcopy__.rst", "generated/skbio.sequence.RNA.__eq__.rst", "generated/skbio.sequence.RNA.__ge__.rst", "generated/skbio.sequence.RNA.__getitem__.rst", "generated/skbio.sequence.RNA.__getstate__.rst", "generated/skbio.sequence.RNA.__gt__.rst", "generated/skbio.sequence.RNA.__iter__.rst", "generated/skbio.sequence.RNA.__le__.rst", "generated/skbio.sequence.RNA.__len__.rst", "generated/skbio.sequence.RNA.__lt__.rst", "generated/skbio.sequence.RNA.__ne__.rst", "generated/skbio.sequence.RNA.__reversed__.rst", "generated/skbio.sequence.RNA.__str__.rst", "generated/skbio.sequence.RNA.complement.rst", "generated/skbio.sequence.RNA.concat.rst", "generated/skbio.sequence.RNA.count.rst", "generated/skbio.sequence.RNA.definites.rst", "generated/skbio.sequence.RNA.degap.rst", "generated/skbio.sequence.RNA.degenerates.rst", "generated/skbio.sequence.RNA.distance.rst", "generated/skbio.sequence.RNA.expand_degenerates.rst", "generated/skbio.sequence.RNA.find_motifs.rst", "generated/skbio.sequence.RNA.find_with_regex.rst", "generated/skbio.sequence.RNA.frequencies.rst", "generated/skbio.sequence.RNA.gaps.rst", "generated/skbio.sequence.RNA.gc_content.rst", "generated/skbio.sequence.RNA.gc_frequency.rst", "generated/skbio.sequence.RNA.has_definites.rst", "generated/skbio.sequence.RNA.has_degenerates.rst", "generated/skbio.sequence.RNA.has_gaps.rst", "generated/skbio.sequence.RNA.has_interval_metadata.rst", "generated/skbio.sequence.RNA.has_metadata.rst", "generated/skbio.sequence.RNA.has_nondegenerates.rst", "generated/skbio.sequence.RNA.has_positional_metadata.rst", "generated/skbio.sequence.RNA.index.rst", "generated/skbio.sequence.RNA.is_reverse_complement.rst", "generated/skbio.sequence.RNA.iter_contiguous.rst", "generated/skbio.sequence.RNA.iter_kmers.rst", "generated/skbio.sequence.RNA.kmer_frequencies.rst", "generated/skbio.sequence.RNA.lowercase.rst", "generated/skbio.sequence.RNA.match_frequency.rst", "generated/skbio.sequence.RNA.matches.rst", "generated/skbio.sequence.RNA.mismatch_frequency.rst", "generated/skbio.sequence.RNA.mismatches.rst", "generated/skbio.sequence.RNA.nondegenerates.rst", "generated/skbio.sequence.RNA.read.rst", "generated/skbio.sequence.RNA.replace.rst", "generated/skbio.sequence.RNA.reverse_complement.rst", "generated/skbio.sequence.RNA.reverse_transcribe.rst", "generated/skbio.sequence.RNA.to_regex.rst", "generated/skbio.sequence.RNA.translate.rst", "generated/skbio.sequence.RNA.translate_six_frames.rst", "generated/skbio.sequence.RNA.write.rst", "generated/skbio.sequence.Sequence.rst", "generated/skbio.sequence.Sequence.__bool__.rst", "generated/skbio.sequence.Sequence.__contains__.rst", "generated/skbio.sequence.Sequence.__copy__.rst", "generated/skbio.sequence.Sequence.__deepcopy__.rst", "generated/skbio.sequence.Sequence.__eq__.rst", "generated/skbio.sequence.Sequence.__ge__.rst", "generated/skbio.sequence.Sequence.__getitem__.rst", "generated/skbio.sequence.Sequence.__getstate__.rst", "generated/skbio.sequence.Sequence.__gt__.rst", "generated/skbio.sequence.Sequence.__iter__.rst", "generated/skbio.sequence.Sequence.__le__.rst", "generated/skbio.sequence.Sequence.__len__.rst", "generated/skbio.sequence.Sequence.__lt__.rst", "generated/skbio.sequence.Sequence.__ne__.rst", "generated/skbio.sequence.Sequence.__reversed__.rst", "generated/skbio.sequence.Sequence.__str__.rst", "generated/skbio.sequence.Sequence.concat.rst", "generated/skbio.sequence.Sequence.count.rst", "generated/skbio.sequence.Sequence.distance.rst", "generated/skbio.sequence.Sequence.find_with_regex.rst", "generated/skbio.sequence.Sequence.frequencies.rst", "generated/skbio.sequence.Sequence.has_interval_metadata.rst", "generated/skbio.sequence.Sequence.has_metadata.rst", "generated/skbio.sequence.Sequence.has_positional_metadata.rst", "generated/skbio.sequence.Sequence.index.rst", "generated/skbio.sequence.Sequence.iter_contiguous.rst", "generated/skbio.sequence.Sequence.iter_kmers.rst", "generated/skbio.sequence.Sequence.kmer_frequencies.rst", "generated/skbio.sequence.Sequence.lowercase.rst", "generated/skbio.sequence.Sequence.match_frequency.rst", "generated/skbio.sequence.Sequence.matches.rst", "generated/skbio.sequence.Sequence.mismatch_frequency.rst", "generated/skbio.sequence.Sequence.mismatches.rst", "generated/skbio.sequence.Sequence.read.rst", "generated/skbio.sequence.Sequence.replace.rst", "generated/skbio.sequence.Sequence.write.rst", "generated/skbio.sequence.distance.rst", "generated/skbio.sequence.distance.hamming.rst", "generated/skbio.sequence.distance.kmer_distance.rst", "generated/skbio.stats.composition.rst", "generated/skbio.stats.composition.alr.rst", "generated/skbio.stats.composition.alr_inv.rst", "generated/skbio.stats.composition.ancom.rst", "generated/skbio.stats.composition.centralize.rst", "generated/skbio.stats.composition.closure.rst", "generated/skbio.stats.composition.clr.rst", "generated/skbio.stats.composition.clr_inv.rst", "generated/skbio.stats.composition.ilr.rst", "generated/skbio.stats.composition.ilr_inv.rst", "generated/skbio.stats.composition.inner.rst", "generated/skbio.stats.composition.multiplicative_replacement.rst", "generated/skbio.stats.composition.perturb.rst", "generated/skbio.stats.composition.perturb_inv.rst", "generated/skbio.stats.composition.power.rst", "generated/skbio.stats.composition.sbp_basis.rst", "generated/skbio.stats.distance.rst", "generated/skbio.stats.distance.DissimilarityMatrix.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__le__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__str__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.between.rst", "generated/skbio.stats.distance.DissimilarityMatrix.copy.rst", "generated/skbio.stats.distance.DissimilarityMatrix.filter.rst", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable.rst", "generated/skbio.stats.distance.DissimilarityMatrix.index.rst", "generated/skbio.stats.distance.DissimilarityMatrix.plot.rst", "generated/skbio.stats.distance.DissimilarityMatrix.read.rst", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form.rst", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DissimilarityMatrix.transpose.rst", "generated/skbio.stats.distance.DissimilarityMatrix.within.rst", "generated/skbio.stats.distance.DissimilarityMatrix.write.rst", "generated/skbio.stats.distance.DissimilarityMatrixError.rst", "generated/skbio.stats.distance.DistanceMatrix.rst", "generated/skbio.stats.distance.DistanceMatrix.__contains__.rst", "generated/skbio.stats.distance.DistanceMatrix.__eq__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ge__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getitem__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getstate__.rst", "generated/skbio.stats.distance.DistanceMatrix.__gt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__le__.rst", "generated/skbio.stats.distance.DistanceMatrix.__lt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ne__.rst", "generated/skbio.stats.distance.DistanceMatrix.__str__.rst", "generated/skbio.stats.distance.DistanceMatrix.between.rst", "generated/skbio.stats.distance.DistanceMatrix.condensed_form.rst", "generated/skbio.stats.distance.DistanceMatrix.copy.rst", "generated/skbio.stats.distance.DistanceMatrix.filter.rst", "generated/skbio.stats.distance.DistanceMatrix.from_iterable.rst", "generated/skbio.stats.distance.DistanceMatrix.index.rst", "generated/skbio.stats.distance.DistanceMatrix.permute.rst", "generated/skbio.stats.distance.DistanceMatrix.plot.rst", "generated/skbio.stats.distance.DistanceMatrix.read.rst", "generated/skbio.stats.distance.DistanceMatrix.redundant_form.rst", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DistanceMatrix.to_series.rst", "generated/skbio.stats.distance.DistanceMatrix.transpose.rst", "generated/skbio.stats.distance.DistanceMatrix.within.rst", "generated/skbio.stats.distance.DistanceMatrix.write.rst", "generated/skbio.stats.distance.DistanceMatrixError.rst", "generated/skbio.stats.distance.MissingIDError.rst", "generated/skbio.stats.distance.anosim.rst", "generated/skbio.stats.distance.bioenv.rst", "generated/skbio.stats.distance.mantel.rst", "generated/skbio.stats.distance.permanova.rst", "generated/skbio.stats.distance.permdisp.rst", "generated/skbio.stats.distance.pwmantel.rst", "generated/skbio.stats.distance.randdm.rst", "generated/skbio.stats.evolve.rst", "generated/skbio.stats.evolve.hommola_cospeciation.rst", "generated/skbio.stats.gradient.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.CategoryResults.rst", "generated/skbio.stats.gradient.CategoryResults.__eq__.rst", "generated/skbio.stats.gradient.CategoryResults.__ge__.rst", "generated/skbio.stats.gradient.CategoryResults.__getstate__.rst", "generated/skbio.stats.gradient.CategoryResults.__gt__.rst", "generated/skbio.stats.gradient.CategoryResults.__hash__.rst", "generated/skbio.stats.gradient.CategoryResults.__le__.rst", "generated/skbio.stats.gradient.CategoryResults.__lt__.rst", "generated/skbio.stats.gradient.CategoryResults.__ne__.rst", "generated/skbio.stats.gradient.CategoryResults.__str__.rst", "generated/skbio.stats.gradient.CategoryResults.to_files.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVA.rst", "generated/skbio.stats.gradient.GradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVA.__le__.rst", "generated/skbio.stats.gradient.GradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVA.__str__.rst", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVAResults.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__le__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__str__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.to_files.rst", "generated/skbio.stats.gradient.GroupResults.rst", "generated/skbio.stats.gradient.GroupResults.__eq__.rst", "generated/skbio.stats.gradient.GroupResults.__ge__.rst", "generated/skbio.stats.gradient.GroupResults.__getstate__.rst", "generated/skbio.stats.gradient.GroupResults.__gt__.rst", "generated/skbio.stats.gradient.GroupResults.__hash__.rst", "generated/skbio.stats.gradient.GroupResults.__le__.rst", "generated/skbio.stats.gradient.GroupResults.__lt__.rst", "generated/skbio.stats.gradient.GroupResults.__ne__.rst", "generated/skbio.stats.gradient.GroupResults.__str__.rst", "generated/skbio.stats.gradient.GroupResults.to_files.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.isubsample.rst", "generated/skbio.stats.ordination.rst", "generated/skbio.stats.ordination.OrdinationResults.rst", "generated/skbio.stats.ordination.OrdinationResults.__eq__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ge__.rst", "generated/skbio.stats.ordination.OrdinationResults.__getstate__.rst", "generated/skbio.stats.ordination.OrdinationResults.__gt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__hash__.rst", "generated/skbio.stats.ordination.OrdinationResults.__le__.rst", "generated/skbio.stats.ordination.OrdinationResults.__lt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ne__.rst", "generated/skbio.stats.ordination.OrdinationResults.__str__.rst", "generated/skbio.stats.ordination.OrdinationResults.plot.rst", "generated/skbio.stats.ordination.OrdinationResults.read.rst", "generated/skbio.stats.ordination.OrdinationResults.write.rst", "generated/skbio.stats.ordination.ca.rst", "generated/skbio.stats.ordination.cca.rst", "generated/skbio.stats.ordination.corr.rst", "generated/skbio.stats.ordination.e_matrix.rst", "generated/skbio.stats.ordination.f_matrix.rst", "generated/skbio.stats.ordination.mean_and_std.rst", "generated/skbio.stats.ordination.pcoa.rst", "generated/skbio.stats.ordination.pcoa_biplot.rst", "generated/skbio.stats.ordination.rda.rst", "generated/skbio.stats.ordination.scale.rst", "generated/skbio.stats.ordination.svd_rank.rst", "generated/skbio.stats.power.rst", "generated/skbio.stats.power.confidence_bound.rst", "generated/skbio.stats.power.paired_subsamples.rst", "generated/skbio.stats.power.subsample_paired_power.rst", "generated/skbio.stats.power.subsample_power.rst", "generated/skbio.stats.subsample_counts.rst", "generated/skbio.tree.DuplicateNodeError.rst", "generated/skbio.tree.MissingNodeError.rst", "generated/skbio.tree.NoLengthError.rst", "generated/skbio.tree.NoParentError.rst", "generated/skbio.tree.TreeError.rst", "generated/skbio.tree.TreeNode.rst", "generated/skbio.tree.TreeNode.__copy__.rst", "generated/skbio.tree.TreeNode.__deepcopy__.rst", "generated/skbio.tree.TreeNode.__eq__.rst", "generated/skbio.tree.TreeNode.__ge__.rst", "generated/skbio.tree.TreeNode.__getitem__.rst", "generated/skbio.tree.TreeNode.__getstate__.rst", "generated/skbio.tree.TreeNode.__gt__.rst", "generated/skbio.tree.TreeNode.__hash__.rst", "generated/skbio.tree.TreeNode.__iter__.rst", "generated/skbio.tree.TreeNode.__le__.rst", "generated/skbio.tree.TreeNode.__len__.rst", "generated/skbio.tree.TreeNode.__lt__.rst", "generated/skbio.tree.TreeNode.__ne__.rst", "generated/skbio.tree.TreeNode.__str__.rst", "generated/skbio.tree.TreeNode.accumulate_to_ancestor.rst", "generated/skbio.tree.TreeNode.ancestors.rst", "generated/skbio.tree.TreeNode.append.rst", "generated/skbio.tree.TreeNode.ascii_art.rst", "generated/skbio.tree.TreeNode.assign_ids.rst", "generated/skbio.tree.TreeNode.assign_supports.rst", "generated/skbio.tree.TreeNode.bifurcate.rst", "generated/skbio.tree.TreeNode.cache_attr.rst", "generated/skbio.tree.TreeNode.compare_rfd.rst", "generated/skbio.tree.TreeNode.compare_subsets.rst", "generated/skbio.tree.TreeNode.compare_tip_distances.rst", "generated/skbio.tree.TreeNode.copy.rst", "generated/skbio.tree.TreeNode.count.rst", "generated/skbio.tree.TreeNode.create_caches.rst", "generated/skbio.tree.TreeNode.deepcopy.rst", "generated/skbio.tree.TreeNode.descending_branch_length.rst", "generated/skbio.tree.TreeNode.distance.rst", "generated/skbio.tree.TreeNode.extend.rst", "generated/skbio.tree.TreeNode.find.rst", "generated/skbio.tree.TreeNode.find_all.rst", "generated/skbio.tree.TreeNode.find_by_func.rst", "generated/skbio.tree.TreeNode.find_by_id.rst", "generated/skbio.tree.TreeNode.from_linkage_matrix.rst", "generated/skbio.tree.TreeNode.from_taxdump.rst", "generated/skbio.tree.TreeNode.from_taxonomy.rst", "generated/skbio.tree.TreeNode.get_max_distance.rst", "generated/skbio.tree.TreeNode.has_children.rst", "generated/skbio.tree.TreeNode.index_tree.rst", "generated/skbio.tree.TreeNode.invalidate_caches.rst", "generated/skbio.tree.TreeNode.is_root.rst", "generated/skbio.tree.TreeNode.is_tip.rst", "generated/skbio.tree.TreeNode.lca.rst", "generated/skbio.tree.TreeNode.levelorder.rst", "generated/skbio.tree.TreeNode.lowest_common_ancestor.rst", "generated/skbio.tree.TreeNode.neighbors.rst", "generated/skbio.tree.TreeNode.non_tips.rst", "generated/skbio.tree.TreeNode.observed_node_counts.rst", "generated/skbio.tree.TreeNode.pop.rst", "generated/skbio.tree.TreeNode.postorder.rst", "generated/skbio.tree.TreeNode.pre_and_postorder.rst", "generated/skbio.tree.TreeNode.preorder.rst", "generated/skbio.tree.TreeNode.prune.rst", "generated/skbio.tree.TreeNode.read.rst", "generated/skbio.tree.TreeNode.remove.rst", "generated/skbio.tree.TreeNode.remove_deleted.rst", "generated/skbio.tree.TreeNode.root.rst", "generated/skbio.tree.TreeNode.root_at.rst", "generated/skbio.tree.TreeNode.root_at_midpoint.rst", "generated/skbio.tree.TreeNode.shear.rst", "generated/skbio.tree.TreeNode.shuffle.rst", "generated/skbio.tree.TreeNode.siblings.rst", "generated/skbio.tree.TreeNode.subset.rst", "generated/skbio.tree.TreeNode.subsets.rst", "generated/skbio.tree.TreeNode.subtree.rst", "generated/skbio.tree.TreeNode.tip_tip_distances.rst", "generated/skbio.tree.TreeNode.tips.rst", "generated/skbio.tree.TreeNode.to_array.rst", "generated/skbio.tree.TreeNode.to_taxonomy.rst", "generated/skbio.tree.TreeNode.traverse.rst", "generated/skbio.tree.TreeNode.unpack.rst", "generated/skbio.tree.TreeNode.unpack_by_func.rst", "generated/skbio.tree.TreeNode.unrooted_copy.rst", "generated/skbio.tree.TreeNode.unrooted_deepcopy.rst", "generated/skbio.tree.TreeNode.write.rst", "generated/skbio.tree.majority_rule.rst", "generated/skbio.tree.nj.rst", "generated/skbio.util.EfficiencyWarning.rst", "generated/skbio.util.RepresentationWarning.rst", "generated/skbio.util.assert_data_frame_almost_equal.rst", "generated/skbio.util.assert_ordination_results_equal.rst", "generated/skbio.util.cardinal_to_ordinal.rst", "generated/skbio.util.classproperty.rst", "generated/skbio.util.classproperty.__delete__.rst", "generated/skbio.util.classproperty.__eq__.rst", "generated/skbio.util.classproperty.__ge__.rst", "generated/skbio.util.classproperty.__get__.rst", "generated/skbio.util.classproperty.__getstate__.rst", "generated/skbio.util.classproperty.__gt__.rst", "generated/skbio.util.classproperty.__hash__.rst", "generated/skbio.util.classproperty.__le__.rst", "generated/skbio.util.classproperty.__lt__.rst", "generated/skbio.util.classproperty.__ne__.rst", "generated/skbio.util.classproperty.__set__.rst", "generated/skbio.util.classproperty.__set_name__.rst", "generated/skbio.util.classproperty.__str__.rst", "generated/skbio.util.classproperty.deleter.rst", "generated/skbio.util.classproperty.getter.rst", "generated/skbio.util.classproperty.setter.rst", "generated/skbio.util.find_duplicates.rst", "generated/skbio.util.get_data_path.rst", "generated/skbio.util.safe_md5.rst", "generated/skbio.workflow.Workflow.rst", "generated/skbio.workflow.Workflow.__call__.rst", "generated/skbio.workflow.Workflow.__eq__.rst", "generated/skbio.workflow.Workflow.__ge__.rst", "generated/skbio.workflow.Workflow.__getstate__.rst", "generated/skbio.workflow.Workflow.__gt__.rst", "generated/skbio.workflow.Workflow.__hash__.rst", "generated/skbio.workflow.Workflow.__le__.rst", "generated/skbio.workflow.Workflow.__lt__.rst", "generated/skbio.workflow.Workflow.__ne__.rst", "generated/skbio.workflow.Workflow.__str__.rst", "generated/skbio.workflow.Workflow.initialize_state.rst", "generated/skbio.workflow.method.rst", "generated/skbio.workflow.method.__call__.rst", "generated/skbio.workflow.method.__eq__.rst", "generated/skbio.workflow.method.__ge__.rst", "generated/skbio.workflow.method.__getstate__.rst", "generated/skbio.workflow.method.__gt__.rst", "generated/skbio.workflow.method.__hash__.rst", "generated/skbio.workflow.method.__le__.rst", "generated/skbio.workflow.method.__lt__.rst", "generated/skbio.workflow.method.__ne__.rst", "generated/skbio.workflow.method.__str__.rst", "generated/skbio.workflow.requires.rst", "generated/skbio.workflow.requires.__call__.rst", "generated/skbio.workflow.requires.__eq__.rst", "generated/skbio.workflow.requires.__ge__.rst", "generated/skbio.workflow.requires.__getstate__.rst", "generated/skbio.workflow.requires.__gt__.rst", "generated/skbio.workflow.requires.__hash__.rst", "generated/skbio.workflow.requires.__le__.rst", "generated/skbio.workflow.requires.__lt__.rst", "generated/skbio.workflow.requires.__ne__.rst", "generated/skbio.workflow.requires.__str__.rst", "index.rst", "io.rst", "metadata.rst", "sequence.rst", "stats.rst", "tree.rst", "user/api_stability.rst", "util.rst", "workflow.rst"], "titles": ["Alignments (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.alignment</span></code>)", "Coding guidelines", "Adding a new module to skbio", "Diversity calculations (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity</span></code>)", "skbio.io.util.open", "skbio.io.util.open_file", "skbio.io.util.open_files", "skbio.alignment.AlignmentStructure", "skbio.alignment.AlignmentStructure.__eq__", "skbio.alignment.AlignmentStructure.__ge__", "skbio.alignment.AlignmentStructure.__getitem__", "skbio.alignment.AlignmentStructure.__getstate__", "skbio.alignment.AlignmentStructure.__gt__", "skbio.alignment.AlignmentStructure.__hash__", "skbio.alignment.AlignmentStructure.__le__", "skbio.alignment.AlignmentStructure.__lt__", "skbio.alignment.AlignmentStructure.__ne__", "skbio.alignment.AlignmentStructure.__setstate__", "skbio.alignment.AlignmentStructure.__str__", "skbio.alignment.AlignmentStructure.is_zero_based", "skbio.alignment.AlignmentStructure.set_zero_based", "skbio.alignment.StripedSmithWaterman", "skbio.alignment.StripedSmithWaterman.__call__", "skbio.alignment.StripedSmithWaterman.__eq__", "skbio.alignment.StripedSmithWaterman.__ge__", "skbio.alignment.StripedSmithWaterman.__getstate__", "skbio.alignment.StripedSmithWaterman.__gt__", "skbio.alignment.StripedSmithWaterman.__hash__", "skbio.alignment.StripedSmithWaterman.__le__", "skbio.alignment.StripedSmithWaterman.__lt__", "skbio.alignment.StripedSmithWaterman.__ne__", "skbio.alignment.StripedSmithWaterman.__setstate__", "skbio.alignment.StripedSmithWaterman.__str__", "skbio.alignment.TabularMSA", "skbio.alignment.TabularMSA.__bool__", "skbio.alignment.TabularMSA.__contains__", "skbio.alignment.TabularMSA.__copy__", "skbio.alignment.TabularMSA.__deepcopy__", "skbio.alignment.TabularMSA.__eq__", "skbio.alignment.TabularMSA.__ge__", "skbio.alignment.TabularMSA.__getitem__", "skbio.alignment.TabularMSA.__getstate__", "skbio.alignment.TabularMSA.__gt__", "skbio.alignment.TabularMSA.__iter__", "skbio.alignment.TabularMSA.__le__", "skbio.alignment.TabularMSA.__len__", "skbio.alignment.TabularMSA.__lt__", "skbio.alignment.TabularMSA.__ne__", "skbio.alignment.TabularMSA.__reversed__", "skbio.alignment.TabularMSA.__str__", "skbio.alignment.TabularMSA.append", "skbio.alignment.TabularMSA.consensus", "skbio.alignment.TabularMSA.conservation", "skbio.alignment.TabularMSA.extend", "skbio.alignment.TabularMSA.from_dict", "skbio.alignment.TabularMSA.gap_frequencies", "skbio.alignment.TabularMSA.has_metadata", "skbio.alignment.TabularMSA.has_positional_metadata", "skbio.alignment.TabularMSA.iter_positions", "skbio.alignment.TabularMSA.join", "skbio.alignment.TabularMSA.read", "skbio.alignment.TabularMSA.reassign_index", "skbio.alignment.TabularMSA.sort", "skbio.alignment.TabularMSA.to_dict", "skbio.alignment.TabularMSA.write", "skbio.alignment.global_pairwise_align", "skbio.alignment.global_pairwise_align_nucleotide", "skbio.alignment.global_pairwise_align_protein", "skbio.alignment.local_pairwise_align", "skbio.alignment.local_pairwise_align_nucleotide", "skbio.alignment.local_pairwise_align_protein", "skbio.alignment.local_pairwise_align_ssw", "skbio.alignment.make_identity_substitution_matrix", "Alpha diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.alpha</span></code>)", "skbio.diversity.alpha.ace", "skbio.diversity.alpha.berger_parker_d", "skbio.diversity.alpha.brillouin_d", "skbio.diversity.alpha.chao1", "skbio.diversity.alpha.chao1_ci", "skbio.diversity.alpha.dominance", "skbio.diversity.alpha.doubles", "skbio.diversity.alpha.enspie", "skbio.diversity.alpha.esty_ci", "skbio.diversity.alpha.faith_pd", "skbio.diversity.alpha.fisher_alpha", "skbio.diversity.alpha.gini_index", "skbio.diversity.alpha.goods_coverage", "skbio.diversity.alpha.heip_e", "skbio.diversity.alpha.kempton_taylor_q", "skbio.diversity.alpha.lladser_ci", "skbio.diversity.alpha.lladser_pe", "skbio.diversity.alpha.margalef", "skbio.diversity.alpha.mcintosh_d", "skbio.diversity.alpha.mcintosh_e", "skbio.diversity.alpha.menhinick", "skbio.diversity.alpha.michaelis_menten_fit", "skbio.diversity.alpha.observed_otus", "skbio.diversity.alpha.osd", "skbio.diversity.alpha.pielou_e", "skbio.diversity.alpha.robbins", "skbio.diversity.alpha.shannon", "skbio.diversity.alpha.simpson", "skbio.diversity.alpha.simpson_e", "skbio.diversity.alpha.singles", "skbio.diversity.alpha.strong", "skbio.diversity.alpha_diversity", "Beta diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.beta</span></code>)", "skbio.diversity.beta.unweighted_unifrac", "skbio.diversity.beta.weighted_unifrac", "skbio.diversity.beta_diversity", "skbio.diversity.block_beta_diversity", "skbio.diversity.get_alpha_diversity_metrics", "skbio.diversity.get_beta_diversity_metrics", "skbio.diversity.partial_beta_diversity", "skbio.io.ArgumentOverrideWarning", "skbio.io.BLAST7FormatError", "skbio.io.ClustalFormatError", "skbio.io.EMBLFormatError", "skbio.io.FASTAFormatError", "skbio.io.FASTQFormatError", "skbio.io.FileFormatError", "skbio.io.FormatIdentificationWarning", "skbio.io.GFF3FormatError", "skbio.io.GenBankFormatError", "skbio.io.IOSourceError", "skbio.io.LSMatFormatError", "skbio.io.NewickFormatError", "skbio.io.OrdinationFormatError", "skbio.io.PhylipFormatError", "skbio.io.QSeqFormatError", "skbio.io.QUALFormatError", "skbio.io.StockholmFormatError", "skbio.io.UnrecognizedFormatError", "Simple binary dissimilarity matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.binary_dm</span></code>)", "BLAST+6 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast6</span></code>)", "BLAST+7 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast7</span></code>)", "Clustal format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.clustal</span></code>)", "EMBL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embl</span></code>)", "FASTA/QUAL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fasta</span></code>)", "FASTQ format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fastq</span></code>)", "GenBank format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.genbank</span></code>)", "GFF3 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.gff3</span></code>)", "Labeled square matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.lsmat</span></code>)", "Newick format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.newick</span></code>)", "Ordination results format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.ordination</span></code>)", "PHYLIP multiple sequence alignment format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.phylip</span></code>)", "QSeq format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.qseq</span></code>)", "Stockholm format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.stockholm</span></code>)", "Taxdump format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.taxdump</span></code>)", "I/O Registry (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.registry</span></code>)", "skbio.io.registry.DuplicateRegistrationError", "skbio.io.registry.Format", "skbio.io.registry.Format.__eq__", "skbio.io.registry.Format.__ge__", "skbio.io.registry.Format.__getstate__", "skbio.io.registry.Format.__gt__", "skbio.io.registry.Format.__hash__", "skbio.io.registry.Format.__le__", "skbio.io.registry.Format.__lt__", "skbio.io.registry.Format.__ne__", "skbio.io.registry.Format.__str__", "skbio.io.registry.Format.reader", "skbio.io.registry.Format.sniffer", "skbio.io.registry.Format.writer", "skbio.io.registry.IORegistry", "skbio.io.registry.IORegistry.__eq__", "skbio.io.registry.IORegistry.__ge__", "skbio.io.registry.IORegistry.__getstate__", "skbio.io.registry.IORegistry.__gt__", "skbio.io.registry.IORegistry.__hash__", "skbio.io.registry.IORegistry.__le__", "skbio.io.registry.IORegistry.__lt__", "skbio.io.registry.IORegistry.__ne__", "skbio.io.registry.IORegistry.__str__", "skbio.io.registry.IORegistry.add_format", "skbio.io.registry.IORegistry.create_format", "skbio.io.registry.IORegistry.get_reader", "skbio.io.registry.IORegistry.get_sniffer", "skbio.io.registry.IORegistry.get_writer", "skbio.io.registry.IORegistry.list_read_formats", "skbio.io.registry.IORegistry.list_write_formats", "skbio.io.registry.IORegistry.monkey_patch", "skbio.io.registry.IORegistry.read", "skbio.io.registry.IORegistry.sniff", "skbio.io.registry.IORegistry.write", "skbio.io.registry.InvalidRegistrationError", "skbio.io.registry.create_format", "skbio.io.registry.read", "skbio.io.registry.sniff", "skbio.io.registry.write", "I/O utils (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.util</span></code>)", "skbio.metadata.Interval", "skbio.metadata.Interval.__eq__", "skbio.metadata.Interval.__ge__", "skbio.metadata.Interval.__getstate__", "skbio.metadata.Interval.__gt__", "skbio.metadata.Interval.__le__", "skbio.metadata.Interval.__lt__", "skbio.metadata.Interval.__ne__", "skbio.metadata.Interval.__str__", "skbio.metadata.Interval.drop", "skbio.metadata.IntervalMetadata", "skbio.metadata.IntervalMetadata.__copy__", "skbio.metadata.IntervalMetadata.__deepcopy__", "skbio.metadata.IntervalMetadata.__eq__", "skbio.metadata.IntervalMetadata.__ge__", "skbio.metadata.IntervalMetadata.__getstate__", "skbio.metadata.IntervalMetadata.__gt__", "skbio.metadata.IntervalMetadata.__le__", "skbio.metadata.IntervalMetadata.__lt__", "skbio.metadata.IntervalMetadata.__ne__", "skbio.metadata.IntervalMetadata.__str__", "skbio.metadata.IntervalMetadata.add", "skbio.metadata.IntervalMetadata.concat", "skbio.metadata.IntervalMetadata.drop", "skbio.metadata.IntervalMetadata.merge", "skbio.metadata.IntervalMetadata.query", "skbio.metadata.IntervalMetadata.read", "skbio.metadata.IntervalMetadata.sort", "skbio.metadata.IntervalMetadata.write", "skbio.sequence.DNA", "skbio.sequence.DNA.__bool__", "skbio.sequence.DNA.__contains__", "skbio.sequence.DNA.__copy__", "skbio.sequence.DNA.__deepcopy__", "skbio.sequence.DNA.__eq__", "skbio.sequence.DNA.__ge__", "skbio.sequence.DNA.__getitem__", "skbio.sequence.DNA.__getstate__", "skbio.sequence.DNA.__gt__", "skbio.sequence.DNA.__iter__", "skbio.sequence.DNA.__le__", "skbio.sequence.DNA.__len__", "skbio.sequence.DNA.__lt__", "skbio.sequence.DNA.__ne__", "skbio.sequence.DNA.__reversed__", "skbio.sequence.DNA.__str__", "skbio.sequence.DNA.complement", "skbio.sequence.DNA.concat", "skbio.sequence.DNA.count", "skbio.sequence.DNA.definites", "skbio.sequence.DNA.degap", "skbio.sequence.DNA.degenerates", "skbio.sequence.DNA.distance", "skbio.sequence.DNA.expand_degenerates", "skbio.sequence.DNA.find_motifs", "skbio.sequence.DNA.find_with_regex", "skbio.sequence.DNA.frequencies", "skbio.sequence.DNA.gaps", "skbio.sequence.DNA.gc_content", "skbio.sequence.DNA.gc_frequency", "skbio.sequence.DNA.has_definites", "skbio.sequence.DNA.has_degenerates", "skbio.sequence.DNA.has_gaps", "skbio.sequence.DNA.has_interval_metadata", "skbio.sequence.DNA.has_metadata", "skbio.sequence.DNA.has_nondegenerates", "skbio.sequence.DNA.has_positional_metadata", "skbio.sequence.DNA.index", "skbio.sequence.DNA.is_reverse_complement", "skbio.sequence.DNA.iter_contiguous", "skbio.sequence.DNA.iter_kmers", "skbio.sequence.DNA.kmer_frequencies", "skbio.sequence.DNA.lowercase", "skbio.sequence.DNA.match_frequency", "skbio.sequence.DNA.matches", "skbio.sequence.DNA.mismatch_frequency", "skbio.sequence.DNA.mismatches", "skbio.sequence.DNA.nondegenerates", "skbio.sequence.DNA.read", "skbio.sequence.DNA.replace", "skbio.sequence.DNA.reverse_complement", "skbio.sequence.DNA.to_regex", "skbio.sequence.DNA.transcribe", "skbio.sequence.DNA.translate", "skbio.sequence.DNA.translate_six_frames", "skbio.sequence.DNA.write", "skbio.sequence.GeneticCode", "skbio.sequence.GeneticCode.__eq__", "skbio.sequence.GeneticCode.__ge__", "skbio.sequence.GeneticCode.__getstate__", "skbio.sequence.GeneticCode.__gt__", "skbio.sequence.GeneticCode.__le__", "skbio.sequence.GeneticCode.__lt__", "skbio.sequence.GeneticCode.__ne__", "skbio.sequence.GeneticCode.__str__", "skbio.sequence.GeneticCode.from_ncbi", "skbio.sequence.GeneticCode.translate", "skbio.sequence.GeneticCode.translate_six_frames", "skbio.sequence.GrammaredSequence", "skbio.sequence.GrammaredSequence.__bool__", "skbio.sequence.GrammaredSequence.__contains__", "skbio.sequence.GrammaredSequence.__copy__", "skbio.sequence.GrammaredSequence.__deepcopy__", "skbio.sequence.GrammaredSequence.__eq__", "skbio.sequence.GrammaredSequence.__ge__", "skbio.sequence.GrammaredSequence.__getitem__", "skbio.sequence.GrammaredSequence.__getstate__", "skbio.sequence.GrammaredSequence.__gt__", "skbio.sequence.GrammaredSequence.__iter__", "skbio.sequence.GrammaredSequence.__le__", "skbio.sequence.GrammaredSequence.__len__", "skbio.sequence.GrammaredSequence.__lt__", "skbio.sequence.GrammaredSequence.__ne__", "skbio.sequence.GrammaredSequence.__reversed__", "skbio.sequence.GrammaredSequence.__str__", "skbio.sequence.GrammaredSequence.concat", "skbio.sequence.GrammaredSequence.count", "skbio.sequence.GrammaredSequence.definites", "skbio.sequence.GrammaredSequence.degap", "skbio.sequence.GrammaredSequence.degenerates", "skbio.sequence.GrammaredSequence.distance", "skbio.sequence.GrammaredSequence.expand_degenerates", "skbio.sequence.GrammaredSequence.find_motifs", "skbio.sequence.GrammaredSequence.find_with_regex", "skbio.sequence.GrammaredSequence.frequencies", "skbio.sequence.GrammaredSequence.gaps", "skbio.sequence.GrammaredSequence.has_definites", "skbio.sequence.GrammaredSequence.has_degenerates", "skbio.sequence.GrammaredSequence.has_gaps", "skbio.sequence.GrammaredSequence.has_interval_metadata", "skbio.sequence.GrammaredSequence.has_metadata", "skbio.sequence.GrammaredSequence.has_nondegenerates", "skbio.sequence.GrammaredSequence.has_positional_metadata", "skbio.sequence.GrammaredSequence.index", "skbio.sequence.GrammaredSequence.iter_contiguous", "skbio.sequence.GrammaredSequence.iter_kmers", "skbio.sequence.GrammaredSequence.kmer_frequencies", "skbio.sequence.GrammaredSequence.lowercase", "skbio.sequence.GrammaredSequence.match_frequency", "skbio.sequence.GrammaredSequence.matches", "skbio.sequence.GrammaredSequence.mismatch_frequency", "skbio.sequence.GrammaredSequence.mismatches", "skbio.sequence.GrammaredSequence.nondegenerates", "skbio.sequence.GrammaredSequence.read", "skbio.sequence.GrammaredSequence.replace", "skbio.sequence.GrammaredSequence.to_regex", "skbio.sequence.GrammaredSequence.write", "skbio.sequence.Protein", "skbio.sequence.Protein.__bool__", "skbio.sequence.Protein.__contains__", "skbio.sequence.Protein.__copy__", "skbio.sequence.Protein.__deepcopy__", "skbio.sequence.Protein.__eq__", "skbio.sequence.Protein.__ge__", "skbio.sequence.Protein.__getitem__", "skbio.sequence.Protein.__getstate__", "skbio.sequence.Protein.__gt__", "skbio.sequence.Protein.__iter__", "skbio.sequence.Protein.__le__", "skbio.sequence.Protein.__len__", "skbio.sequence.Protein.__lt__", "skbio.sequence.Protein.__ne__", "skbio.sequence.Protein.__reversed__", "skbio.sequence.Protein.__str__", "skbio.sequence.Protein.concat", "skbio.sequence.Protein.count", "skbio.sequence.Protein.definites", "skbio.sequence.Protein.degap", "skbio.sequence.Protein.degenerates", "skbio.sequence.Protein.distance", "skbio.sequence.Protein.expand_degenerates", "skbio.sequence.Protein.find_motifs", "skbio.sequence.Protein.find_with_regex", "skbio.sequence.Protein.frequencies", "skbio.sequence.Protein.gaps", "skbio.sequence.Protein.has_definites", "skbio.sequence.Protein.has_degenerates", "skbio.sequence.Protein.has_gaps", "skbio.sequence.Protein.has_interval_metadata", "skbio.sequence.Protein.has_metadata", "skbio.sequence.Protein.has_nondegenerates", "skbio.sequence.Protein.has_positional_metadata", "skbio.sequence.Protein.has_stops", "skbio.sequence.Protein.index", "skbio.sequence.Protein.iter_contiguous", "skbio.sequence.Protein.iter_kmers", "skbio.sequence.Protein.kmer_frequencies", "skbio.sequence.Protein.lowercase", "skbio.sequence.Protein.match_frequency", "skbio.sequence.Protein.matches", "skbio.sequence.Protein.mismatch_frequency", "skbio.sequence.Protein.mismatches", "skbio.sequence.Protein.nondegenerates", "skbio.sequence.Protein.read", "skbio.sequence.Protein.replace", "skbio.sequence.Protein.stops", "skbio.sequence.Protein.to_regex", "skbio.sequence.Protein.write", "skbio.sequence.RNA", "skbio.sequence.RNA.__bool__", "skbio.sequence.RNA.__contains__", "skbio.sequence.RNA.__copy__", "skbio.sequence.RNA.__deepcopy__", "skbio.sequence.RNA.__eq__", "skbio.sequence.RNA.__ge__", "skbio.sequence.RNA.__getitem__", "skbio.sequence.RNA.__getstate__", "skbio.sequence.RNA.__gt__", "skbio.sequence.RNA.__iter__", "skbio.sequence.RNA.__le__", "skbio.sequence.RNA.__len__", "skbio.sequence.RNA.__lt__", "skbio.sequence.RNA.__ne__", "skbio.sequence.RNA.__reversed__", "skbio.sequence.RNA.__str__", "skbio.sequence.RNA.complement", "skbio.sequence.RNA.concat", "skbio.sequence.RNA.count", "skbio.sequence.RNA.definites", "skbio.sequence.RNA.degap", "skbio.sequence.RNA.degenerates", "skbio.sequence.RNA.distance", "skbio.sequence.RNA.expand_degenerates", "skbio.sequence.RNA.find_motifs", "skbio.sequence.RNA.find_with_regex", "skbio.sequence.RNA.frequencies", "skbio.sequence.RNA.gaps", "skbio.sequence.RNA.gc_content", "skbio.sequence.RNA.gc_frequency", "skbio.sequence.RNA.has_definites", "skbio.sequence.RNA.has_degenerates", "skbio.sequence.RNA.has_gaps", "skbio.sequence.RNA.has_interval_metadata", "skbio.sequence.RNA.has_metadata", "skbio.sequence.RNA.has_nondegenerates", "skbio.sequence.RNA.has_positional_metadata", "skbio.sequence.RNA.index", "skbio.sequence.RNA.is_reverse_complement", "skbio.sequence.RNA.iter_contiguous", "skbio.sequence.RNA.iter_kmers", "skbio.sequence.RNA.kmer_frequencies", "skbio.sequence.RNA.lowercase", "skbio.sequence.RNA.match_frequency", "skbio.sequence.RNA.matches", "skbio.sequence.RNA.mismatch_frequency", "skbio.sequence.RNA.mismatches", "skbio.sequence.RNA.nondegenerates", "skbio.sequence.RNA.read", "skbio.sequence.RNA.replace", "skbio.sequence.RNA.reverse_complement", "skbio.sequence.RNA.reverse_transcribe", "skbio.sequence.RNA.to_regex", "skbio.sequence.RNA.translate", "skbio.sequence.RNA.translate_six_frames", "skbio.sequence.RNA.write", "skbio.sequence.Sequence", "skbio.sequence.Sequence.__bool__", "skbio.sequence.Sequence.__contains__", "skbio.sequence.Sequence.__copy__", "skbio.sequence.Sequence.__deepcopy__", "skbio.sequence.Sequence.__eq__", "skbio.sequence.Sequence.__ge__", "skbio.sequence.Sequence.__getitem__", "skbio.sequence.Sequence.__getstate__", "skbio.sequence.Sequence.__gt__", "skbio.sequence.Sequence.__iter__", "skbio.sequence.Sequence.__le__", "skbio.sequence.Sequence.__len__", "skbio.sequence.Sequence.__lt__", "skbio.sequence.Sequence.__ne__", "skbio.sequence.Sequence.__reversed__", "skbio.sequence.Sequence.__str__", "skbio.sequence.Sequence.concat", "skbio.sequence.Sequence.count", "skbio.sequence.Sequence.distance", "skbio.sequence.Sequence.find_with_regex", "skbio.sequence.Sequence.frequencies", "skbio.sequence.Sequence.has_interval_metadata", "skbio.sequence.Sequence.has_metadata", "skbio.sequence.Sequence.has_positional_metadata", "skbio.sequence.Sequence.index", "skbio.sequence.Sequence.iter_contiguous", "skbio.sequence.Sequence.iter_kmers", "skbio.sequence.Sequence.kmer_frequencies", "skbio.sequence.Sequence.lowercase", "skbio.sequence.Sequence.match_frequency", "skbio.sequence.Sequence.matches", "skbio.sequence.Sequence.mismatch_frequency", "skbio.sequence.Sequence.mismatches", "skbio.sequence.Sequence.read", "skbio.sequence.Sequence.replace", "skbio.sequence.Sequence.write", "Sequence distance metrics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence.distance</span></code>)", "skbio.sequence.distance.hamming", "skbio.sequence.distance.kmer_distance", "Composition Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.composition</span></code>)", "skbio.stats.composition.alr", "skbio.stats.composition.alr_inv", "skbio.stats.composition.ancom", "skbio.stats.composition.centralize", "skbio.stats.composition.closure", "skbio.stats.composition.clr", "skbio.stats.composition.clr_inv", "skbio.stats.composition.ilr", "skbio.stats.composition.ilr_inv", "skbio.stats.composition.inner", "skbio.stats.composition.multiplicative_replacement", "skbio.stats.composition.perturb", "skbio.stats.composition.perturb_inv", "skbio.stats.composition.power", "skbio.stats.composition.sbp_basis", "Distance matrices and distance-based statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.distance</span></code>)", "skbio.stats.distance.DissimilarityMatrix", "skbio.stats.distance.DissimilarityMatrix.__contains__", "skbio.stats.distance.DissimilarityMatrix.__eq__", "skbio.stats.distance.DissimilarityMatrix.__ge__", "skbio.stats.distance.DissimilarityMatrix.__getitem__", "skbio.stats.distance.DissimilarityMatrix.__getstate__", "skbio.stats.distance.DissimilarityMatrix.__gt__", "skbio.stats.distance.DissimilarityMatrix.__le__", "skbio.stats.distance.DissimilarityMatrix.__lt__", "skbio.stats.distance.DissimilarityMatrix.__ne__", "skbio.stats.distance.DissimilarityMatrix.__str__", "skbio.stats.distance.DissimilarityMatrix.between", "skbio.stats.distance.DissimilarityMatrix.copy", "skbio.stats.distance.DissimilarityMatrix.filter", "skbio.stats.distance.DissimilarityMatrix.from_iterable", "skbio.stats.distance.DissimilarityMatrix.index", "skbio.stats.distance.DissimilarityMatrix.plot", "skbio.stats.distance.DissimilarityMatrix.read", "skbio.stats.distance.DissimilarityMatrix.redundant_form", "skbio.stats.distance.DissimilarityMatrix.to_data_frame", "skbio.stats.distance.DissimilarityMatrix.transpose", "skbio.stats.distance.DissimilarityMatrix.within", "skbio.stats.distance.DissimilarityMatrix.write", "skbio.stats.distance.DissimilarityMatrixError", "skbio.stats.distance.DistanceMatrix", "skbio.stats.distance.DistanceMatrix.__contains__", "skbio.stats.distance.DistanceMatrix.__eq__", "skbio.stats.distance.DistanceMatrix.__ge__", "skbio.stats.distance.DistanceMatrix.__getitem__", "skbio.stats.distance.DistanceMatrix.__getstate__", "skbio.stats.distance.DistanceMatrix.__gt__", "skbio.stats.distance.DistanceMatrix.__le__", "skbio.stats.distance.DistanceMatrix.__lt__", "skbio.stats.distance.DistanceMatrix.__ne__", "skbio.stats.distance.DistanceMatrix.__str__", "skbio.stats.distance.DistanceMatrix.between", "skbio.stats.distance.DistanceMatrix.condensed_form", "skbio.stats.distance.DistanceMatrix.copy", "skbio.stats.distance.DistanceMatrix.filter", "skbio.stats.distance.DistanceMatrix.from_iterable", "skbio.stats.distance.DistanceMatrix.index", "skbio.stats.distance.DistanceMatrix.permute", "skbio.stats.distance.DistanceMatrix.plot", "skbio.stats.distance.DistanceMatrix.read", "skbio.stats.distance.DistanceMatrix.redundant_form", "skbio.stats.distance.DistanceMatrix.to_data_frame", "skbio.stats.distance.DistanceMatrix.to_series", "skbio.stats.distance.DistanceMatrix.transpose", "skbio.stats.distance.DistanceMatrix.within", "skbio.stats.distance.DistanceMatrix.write", "skbio.stats.distance.DistanceMatrixError", "skbio.stats.distance.MissingIDError", "skbio.stats.distance.anosim", "skbio.stats.distance.bioenv", "skbio.stats.distance.mantel", "skbio.stats.distance.permanova", "skbio.stats.distance.permdisp", "skbio.stats.distance.pwmantel", "skbio.stats.distance.randdm", "Evolutionary statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.evolve</span></code>)", "skbio.stats.evolve.hommola_cospeciation", "Gradient analyses (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.gradient</span></code>)", "skbio.stats.gradient.AverageGradientANOVA", "skbio.stats.gradient.AverageGradientANOVA.__eq__", "skbio.stats.gradient.AverageGradientANOVA.__ge__", "skbio.stats.gradient.AverageGradientANOVA.__getstate__", "skbio.stats.gradient.AverageGradientANOVA.__gt__", "skbio.stats.gradient.AverageGradientANOVA.__hash__", "skbio.stats.gradient.AverageGradientANOVA.__le__", "skbio.stats.gradient.AverageGradientANOVA.__lt__", "skbio.stats.gradient.AverageGradientANOVA.__ne__", "skbio.stats.gradient.AverageGradientANOVA.__str__", "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "skbio.stats.gradient.CategoryResults", "skbio.stats.gradient.CategoryResults.__eq__", "skbio.stats.gradient.CategoryResults.__ge__", "skbio.stats.gradient.CategoryResults.__getstate__", "skbio.stats.gradient.CategoryResults.__gt__", "skbio.stats.gradient.CategoryResults.__hash__", "skbio.stats.gradient.CategoryResults.__le__", "skbio.stats.gradient.CategoryResults.__lt__", "skbio.stats.gradient.CategoryResults.__ne__", "skbio.stats.gradient.CategoryResults.__str__", "skbio.stats.gradient.CategoryResults.to_files", "skbio.stats.gradient.FirstDifferenceGradientANOVA", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVA", "skbio.stats.gradient.GradientANOVA.__eq__", "skbio.stats.gradient.GradientANOVA.__ge__", "skbio.stats.gradient.GradientANOVA.__getstate__", "skbio.stats.gradient.GradientANOVA.__gt__", "skbio.stats.gradient.GradientANOVA.__hash__", "skbio.stats.gradient.GradientANOVA.__le__", "skbio.stats.gradient.GradientANOVA.__lt__", "skbio.stats.gradient.GradientANOVA.__ne__", "skbio.stats.gradient.GradientANOVA.__str__", "skbio.stats.gradient.GradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVAResults", "skbio.stats.gradient.GradientANOVAResults.__eq__", "skbio.stats.gradient.GradientANOVAResults.__ge__", "skbio.stats.gradient.GradientANOVAResults.__getstate__", "skbio.stats.gradient.GradientANOVAResults.__gt__", "skbio.stats.gradient.GradientANOVAResults.__hash__", "skbio.stats.gradient.GradientANOVAResults.__le__", "skbio.stats.gradient.GradientANOVAResults.__lt__", "skbio.stats.gradient.GradientANOVAResults.__ne__", "skbio.stats.gradient.GradientANOVAResults.__str__", "skbio.stats.gradient.GradientANOVAResults.to_files", "skbio.stats.gradient.GroupResults", "skbio.stats.gradient.GroupResults.__eq__", "skbio.stats.gradient.GroupResults.__ge__", "skbio.stats.gradient.GroupResults.__getstate__", "skbio.stats.gradient.GroupResults.__gt__", "skbio.stats.gradient.GroupResults.__hash__", "skbio.stats.gradient.GroupResults.__le__", "skbio.stats.gradient.GroupResults.__lt__", "skbio.stats.gradient.GroupResults.__ne__", "skbio.stats.gradient.GroupResults.__str__", "skbio.stats.gradient.GroupResults.to_files", "skbio.stats.gradient.TrajectoryGradientANOVA", "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "skbio.stats.gradient.WindowDifferenceGradientANOVA", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "skbio.stats.isubsample", "Ordination methods (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.ordination</span></code>)", "skbio.stats.ordination.OrdinationResults", "skbio.stats.ordination.OrdinationResults.__eq__", "skbio.stats.ordination.OrdinationResults.__ge__", "skbio.stats.ordination.OrdinationResults.__getstate__", "skbio.stats.ordination.OrdinationResults.__gt__", "skbio.stats.ordination.OrdinationResults.__hash__", "skbio.stats.ordination.OrdinationResults.__le__", "skbio.stats.ordination.OrdinationResults.__lt__", "skbio.stats.ordination.OrdinationResults.__ne__", "skbio.stats.ordination.OrdinationResults.__str__", "skbio.stats.ordination.OrdinationResults.plot", "skbio.stats.ordination.OrdinationResults.read", "skbio.stats.ordination.OrdinationResults.write", "skbio.stats.ordination.ca", "skbio.stats.ordination.cca", "skbio.stats.ordination.corr", "skbio.stats.ordination.e_matrix", "skbio.stats.ordination.f_matrix", "skbio.stats.ordination.mean_and_std", "skbio.stats.ordination.pcoa", "skbio.stats.ordination.pcoa_biplot", "skbio.stats.ordination.rda", "skbio.stats.ordination.scale", "skbio.stats.ordination.svd_rank", "Empirical Power Estimation (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.power</span></code>)", "skbio.stats.power.confidence_bound", "skbio.stats.power.paired_subsamples", "skbio.stats.power.subsample_paired_power", "skbio.stats.power.subsample_power", "skbio.stats.subsample_counts", "skbio.tree.DuplicateNodeError", "skbio.tree.MissingNodeError", "skbio.tree.NoLengthError", "skbio.tree.NoParentError", "skbio.tree.TreeError", "skbio.tree.TreeNode", "skbio.tree.TreeNode.__copy__", "skbio.tree.TreeNode.__deepcopy__", "skbio.tree.TreeNode.__eq__", "skbio.tree.TreeNode.__ge__", "skbio.tree.TreeNode.__getitem__", "skbio.tree.TreeNode.__getstate__", "skbio.tree.TreeNode.__gt__", "skbio.tree.TreeNode.__hash__", "skbio.tree.TreeNode.__iter__", "skbio.tree.TreeNode.__le__", "skbio.tree.TreeNode.__len__", "skbio.tree.TreeNode.__lt__", "skbio.tree.TreeNode.__ne__", "skbio.tree.TreeNode.__str__", "skbio.tree.TreeNode.accumulate_to_ancestor", "skbio.tree.TreeNode.ancestors", "skbio.tree.TreeNode.append", "skbio.tree.TreeNode.ascii_art", "skbio.tree.TreeNode.assign_ids", "skbio.tree.TreeNode.assign_supports", "skbio.tree.TreeNode.bifurcate", "skbio.tree.TreeNode.cache_attr", "skbio.tree.TreeNode.compare_rfd", "skbio.tree.TreeNode.compare_subsets", "skbio.tree.TreeNode.compare_tip_distances", "skbio.tree.TreeNode.copy", "skbio.tree.TreeNode.count", "skbio.tree.TreeNode.create_caches", "skbio.tree.TreeNode.deepcopy", "skbio.tree.TreeNode.descending_branch_length", "skbio.tree.TreeNode.distance", "skbio.tree.TreeNode.extend", "skbio.tree.TreeNode.find", "skbio.tree.TreeNode.find_all", "skbio.tree.TreeNode.find_by_func", "skbio.tree.TreeNode.find_by_id", "skbio.tree.TreeNode.from_linkage_matrix", "skbio.tree.TreeNode.from_taxdump", "skbio.tree.TreeNode.from_taxonomy", "skbio.tree.TreeNode.get_max_distance", "skbio.tree.TreeNode.has_children", "skbio.tree.TreeNode.index_tree", "skbio.tree.TreeNode.invalidate_caches", "skbio.tree.TreeNode.is_root", "skbio.tree.TreeNode.is_tip", "skbio.tree.TreeNode.lca", "skbio.tree.TreeNode.levelorder", "skbio.tree.TreeNode.lowest_common_ancestor", "skbio.tree.TreeNode.neighbors", "skbio.tree.TreeNode.non_tips", "skbio.tree.TreeNode.observed_node_counts", "skbio.tree.TreeNode.pop", "skbio.tree.TreeNode.postorder", "skbio.tree.TreeNode.pre_and_postorder", "skbio.tree.TreeNode.preorder", "skbio.tree.TreeNode.prune", "skbio.tree.TreeNode.read", "skbio.tree.TreeNode.remove", "skbio.tree.TreeNode.remove_deleted", "skbio.tree.TreeNode.root", "skbio.tree.TreeNode.root_at", "skbio.tree.TreeNode.root_at_midpoint", "skbio.tree.TreeNode.shear", "skbio.tree.TreeNode.shuffle", "skbio.tree.TreeNode.siblings", "skbio.tree.TreeNode.subset", "skbio.tree.TreeNode.subsets", "skbio.tree.TreeNode.subtree", "skbio.tree.TreeNode.tip_tip_distances", "skbio.tree.TreeNode.tips", "skbio.tree.TreeNode.to_array", "skbio.tree.TreeNode.to_taxonomy", "skbio.tree.TreeNode.traverse", "skbio.tree.TreeNode.unpack", "skbio.tree.TreeNode.unpack_by_func", "skbio.tree.TreeNode.unrooted_copy", "skbio.tree.TreeNode.unrooted_deepcopy", "skbio.tree.TreeNode.write", "skbio.tree.majority_rule", "skbio.tree.nj", "skbio.util.EfficiencyWarning", "skbio.util.RepresentationWarning", "skbio.util.assert_data_frame_almost_equal", "skbio.util.assert_ordination_results_equal", "skbio.util.cardinal_to_ordinal", "skbio.util.classproperty", "skbio.util.classproperty.__delete__", "skbio.util.classproperty.__eq__", "skbio.util.classproperty.__ge__", "skbio.util.classproperty.__get__", "skbio.util.classproperty.__getstate__", "skbio.util.classproperty.__gt__", "skbio.util.classproperty.__hash__", "skbio.util.classproperty.__le__", "skbio.util.classproperty.__lt__", "skbio.util.classproperty.__ne__", "skbio.util.classproperty.__set__", "skbio.util.classproperty.__set_name__", "skbio.util.classproperty.__str__", "skbio.util.classproperty.deleter", "skbio.util.classproperty.getter", "skbio.util.classproperty.setter", "skbio.util.find_duplicates", "skbio.util.get_data_path", "skbio.util.safe_md5", "skbio.workflow.Workflow", "skbio.workflow.Workflow.__call__", "skbio.workflow.Workflow.__eq__", "skbio.workflow.Workflow.__ge__", "skbio.workflow.Workflow.__getstate__", "skbio.workflow.Workflow.__gt__", "skbio.workflow.Workflow.__hash__", "skbio.workflow.Workflow.__le__", "skbio.workflow.Workflow.__lt__", "skbio.workflow.Workflow.__ne__", "skbio.workflow.Workflow.__str__", "skbio.workflow.Workflow.initialize_state", "skbio.workflow.method", "skbio.workflow.method.__call__", "skbio.workflow.method.__eq__", "skbio.workflow.method.__ge__", "skbio.workflow.method.__getstate__", "skbio.workflow.method.__gt__", "skbio.workflow.method.__hash__", "skbio.workflow.method.__le__", "skbio.workflow.method.__lt__", "skbio.workflow.method.__ne__", "skbio.workflow.method.__str__", "skbio.workflow.requires", "skbio.workflow.requires.__call__", "skbio.workflow.requires.__eq__", "skbio.workflow.requires.__ge__", "skbio.workflow.requires.__getstate__", "skbio.workflow.requires.__gt__", "skbio.workflow.requires.__hash__", "skbio.workflow.requires.__le__", "skbio.workflow.requires.__lt__", "skbio.workflow.requires.__ne__", "skbio.workflow.requires.__str__", "scikit-bio", "File I/O (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io</span></code>)", "Metadata (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.metadata</span></code>)", "Sequences (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence</span></code>)", "Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats</span></code>)", "Tree representations (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.tree</span></code>)", "API Stability", "Utility functionality (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.util</span></code>)", "Constructing workflows (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.workflow</span></code>)"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 21, 35, 36, 37, 38, 40, 45, 47, 49, 50, 51, 52, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 83, 85, 88, 89, 90, 95, 97, 105, 106, 107, 108, 109, 110, 112, 113, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 161, 162, 163, 175, 183, 186, 188, 190, 191, 192, 198, 200, 201, 202, 203, 204, 210, 212, 213, 214, 215, 216, 217, 219, 222, 223, 224, 225, 227, 230, 232, 234, 235, 238, 239, 243, 247, 249, 250, 258, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 275, 276, 277, 286, 287, 288, 289, 291, 292, 293, 294, 296, 299, 301, 303, 304, 306, 307, 311, 315, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 340, 341, 342, 343, 345, 348, 350, 352, 353, 355, 356, 360, 364, 374, 375, 376, 377, 379, 380, 381, 382, 384, 385, 387, 388, 391, 392, 393, 394, 396, 399, 401, 403, 404, 407, 408, 412, 416, 418, 419, 427, 428, 429, 430, 431, 433, 434, 435, 436, 438, 439, 440, 442, 444, 445, 446, 448, 449, 450, 451, 453, 456, 458, 460, 461, 463, 464, 465, 467, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 505, 507, 520, 521, 522, 525, 527, 529, 531, 544, 546, 547, 548, 549, 552, 555, 556, 557, 559, 561, 562, 563, 564, 653, 654, 665, 666, 667, 669, 674, 675, 676, 679, 681, 682, 683, 690, 706, 708, 710, 712, 714, 715, 718, 720, 721, 723, 725, 726, 728, 732, 739, 743, 746, 747, 749, 751, 752, 754, 755, 756, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 794, 795, 796, 797, 807, 819, 831, 832, 833, 834, 835, 836, 837, 838], "modul": [0, 3, 147, 149, 190, 483, 486, 489, 564, 654, 679, 794, 795, 830, 832, 833, 835, 838], "provid": [0, 1, 3, 5, 21, 33, 50, 52, 53, 60, 61, 66, 69, 71, 73, 83, 88, 105, 106, 107, 108, 109, 114, 134, 138, 139, 143, 145, 147, 148, 149, 161, 163, 182, 183, 187, 188, 190, 217, 225, 247, 260, 263, 269, 294, 315, 325, 328, 334, 343, 364, 375, 378, 384, 394, 416, 429, 432, 438, 446, 451, 467, 472, 475, 480, 486, 502, 503, 517, 520, 524, 542, 546, 551, 555, 556, 557, 558, 559, 561, 564, 598, 653, 655, 665, 666, 670, 679, 681, 682, 712, 720, 728, 741, 747, 751, 754, 761, 769, 770, 797, 831, 832, 833, 835, 837, 838], "comput": [0, 2, 3, 51, 52, 55, 74, 77, 83, 90, 99, 104, 105, 106, 107, 108, 109, 110, 113, 201, 243, 247, 311, 315, 360, 364, 412, 416, 465, 467, 483, 484, 485, 489, 501, 502, 517, 542, 555, 556, 557, 558, 559, 560, 563, 564, 565, 575, 597, 598, 608, 609, 620, 631, 641, 642, 652, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 721, 757, 759, 769, 795, 833, 835], "manipul": [0, 56, 57, 255, 257, 321, 323, 370, 372, 424, 426, 446, 469, 470, 486, 502], "sequenc": [0, 1, 3, 21, 33, 34, 36, 37, 38, 43, 45, 47, 48, 50, 51, 53, 54, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 134, 135, 136, 137, 139, 140, 141, 146, 148, 191, 201, 213, 503, 561, 653, 683, 830, 831, 838], "dna": [0, 33, 34, 35, 36, 37, 38, 43, 45, 48, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 66, 69, 71, 136, 137, 138, 139, 140, 141, 145, 146, 147, 277, 289, 306, 308, 309, 310, 312, 313, 316, 317, 318, 319, 322, 323, 325, 333, 336, 355, 357, 358, 359, 361, 362, 365, 366, 367, 368, 371, 372, 375, 383, 387, 389, 406, 407, 409, 410, 411, 413, 414, 417, 418, 419, 420, 421, 422, 425, 426, 428, 429, 437, 440, 441, 442, 446, 463, 470, 472, 503, 831, 833], "rna": [0, 33, 38, 66, 69, 71, 136, 137, 138, 139, 140, 145, 146, 147, 220, 238, 273, 274, 275, 277, 287, 288, 289, 306, 355, 446, 463, 833], "protein": [0, 1, 21, 33, 52, 65, 67, 70, 71, 134, 136, 137, 138, 139, 140, 145, 146, 147, 260, 274, 275, 277, 287, 288, 289, 325, 429, 443, 444, 446, 472, 682, 833], "can": [0, 1, 2, 3, 4, 21, 33, 58, 61, 65, 66, 67, 71, 72, 79, 83, 105, 107, 108, 109, 111, 112, 113, 134, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 151, 191, 200, 201, 216, 238, 243, 245, 260, 270, 306, 311, 313, 325, 335, 355, 360, 362, 375, 385, 407, 412, 414, 429, 439, 446, 463, 465, 472, 481, 483, 486, 489, 501, 502, 503, 507, 527, 531, 555, 556, 557, 559, 560, 561, 564, 654, 665, 668, 673, 674, 675, 676, 679, 681, 682, 683, 690, 711, 713, 721, 751, 754, 761, 769, 770, 771, 775, 776, 796, 819, 833, 835, 836, 838], "well": [0, 1, 139, 149, 446, 502, 503, 556, 558, 559, 563, 655, 669, 769, 831, 835, 837], "custom": [0, 3, 148, 220, 243, 277, 278, 289, 311, 338, 360, 389, 412, 465, 665], "alphabet": [0, 62, 72, 111, 112, 134, 138, 220, 277, 289, 338, 389, 446, 484, 833], "load": [0, 138, 139, 144, 146, 489, 502, 503, 555, 556, 559, 560, 794, 795, 831], "two": [0, 1, 3, 65, 66, 67, 68, 69, 70, 71, 74, 107, 108, 134, 135, 138, 139, 140, 141, 143, 145, 146, 148, 191, 192, 198, 204, 210, 213, 218, 225, 238, 243, 260, 264, 266, 294, 306, 311, 325, 329, 331, 343, 355, 360, 375, 379, 381, 394, 407, 412, 429, 433, 435, 451, 463, 465, 472, 476, 478, 484, 485, 486, 489, 501, 502, 503, 505, 507, 512, 514, 517, 521, 529, 531, 536, 538, 542, 547, 555, 556, 557, 558, 559, 560, 561, 563, 669, 674, 679, 682, 683, 714, 715, 721, 730, 752, 754, 769, 774, 831, 833, 835, 836], "have": [0, 1, 3, 4, 21, 51, 54, 55, 58, 59, 71, 73, 83, 88, 107, 108, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 181, 191, 201, 202, 203, 225, 238, 244, 260, 287, 294, 306, 312, 325, 343, 355, 361, 375, 394, 407, 413, 429, 451, 463, 472, 489, 502, 505, 529, 557, 563, 564, 586, 598, 619, 630, 653, 665, 668, 669, 670, 673, 674, 676, 677, 679, 681, 682, 683, 684, 690, 709, 710, 711, 720, 722, 723, 746, 752, 759, 761, 762, 771, 773, 833, 835, 838], "been": [0, 1, 4, 65, 66, 67, 113, 138, 139, 140, 145, 181, 183, 188, 260, 325, 375, 429, 446, 472, 557, 563, 684, 746], "previous": [0, 263, 270, 328, 335, 378, 385, 432, 439, 475, 481, 838], "tabularmsa": [0, 65, 66, 67, 68, 69, 70, 71, 128, 136, 139, 145, 147, 201, 831], "object": [0, 1, 3, 21, 33, 36, 37, 38, 47, 50, 53, 54, 56, 57, 58, 59, 61, 62, 65, 66, 67, 68, 69, 70, 71, 110, 113, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 182, 184, 187, 189, 191, 192, 198, 200, 201, 202, 203, 204, 210, 212, 213, 214, 215, 216, 220, 222, 225, 227, 238, 239, 243, 246, 247, 254, 255, 257, 258, 259, 264, 265, 266, 267, 272, 291, 294, 296, 306, 307, 311, 314, 315, 320, 321, 323, 324, 329, 330, 331, 332, 336, 338, 340, 343, 345, 355, 356, 360, 363, 364, 369, 370, 372, 374, 379, 380, 381, 382, 387, 389, 391, 394, 396, 407, 408, 412, 415, 416, 423, 424, 426, 427, 428, 433, 434, 435, 436, 442, 446, 448, 451, 453, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 479, 483, 484, 489, 502, 503, 507, 516, 517, 519, 527, 531, 541, 542, 545, 555, 556, 558, 559, 560, 561, 586, 619, 630, 668, 669, 674, 675, 676, 690, 707, 715, 722, 754, 759, 761, 770, 773, 774, 795, 796, 819, 831, 833, 835, 838], "us": [0, 1, 2, 3, 4, 7, 21, 33, 40, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 65, 66, 67, 77, 78, 83, 84, 87, 88, 95, 97, 100, 105, 107, 108, 109, 110, 113, 133, 134, 136, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 151, 161, 162, 163, 179, 180, 183, 188, 201, 213, 220, 238, 243, 247, 255, 257, 260, 262, 263, 270, 274, 275, 277, 285, 286, 287, 288, 289, 306, 311, 315, 321, 323, 325, 327, 328, 335, 338, 355, 360, 364, 370, 372, 375, 377, 378, 385, 389, 407, 412, 416, 424, 426, 429, 431, 432, 439, 443, 444, 446, 463, 465, 467, 469, 470, 472, 474, 475, 481, 483, 484, 486, 487, 489, 494, 495, 497, 502, 503, 507, 517, 527, 531, 542, 549, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 587, 598, 609, 631, 642, 654, 665, 668, 674, 678, 679, 680, 681, 682, 683, 690, 691, 692, 708, 710, 711, 712, 715, 716, 719, 721, 727, 728, 746, 751, 752, 759, 761, 766, 767, 769, 770, 771, 772, 773, 774, 775, 796, 819, 833, 835, 836, 837, 838], "id": [0, 3, 33, 38, 56, 61, 62, 83, 105, 107, 108, 109, 110, 113, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 225, 234, 236, 255, 274, 275, 277, 286, 287, 288, 294, 303, 305, 321, 343, 352, 354, 370, 394, 403, 405, 424, 443, 444, 446, 451, 460, 462, 469, 502, 503, 504, 505, 507, 513, 514, 516, 517, 518, 522, 524, 527, 528, 529, 531, 537, 538, 541, 542, 543, 544, 548, 549, 551, 554, 555, 556, 557, 558, 559, 560, 561, 598, 642, 655, 664, 665, 681, 682, 683, 691, 692, 709, 716, 719, 726, 728, 729, 732, 759, 761, 770, 833], "msa": [0, 33, 34, 35, 36, 37, 38, 40, 43, 45, 47, 48, 49, 50, 51, 53, 54, 55, 58, 59, 61, 62, 63, 136, 138, 139, 145, 147], "": [0, 1, 2, 3, 21, 33, 50, 51, 52, 53, 56, 57, 58, 59, 61, 65, 66, 67, 70, 74, 76, 79, 81, 82, 83, 84, 86, 87, 91, 93, 94, 95, 98, 100, 101, 102, 104, 105, 107, 108, 110, 111, 112, 132, 134, 135, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 191, 201, 213, 222, 225, 227, 230, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 273, 274, 275, 277, 278, 284, 287, 288, 289, 291, 294, 296, 299, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 340, 343, 345, 348, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 391, 394, 396, 399, 401, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 441, 443, 444, 446, 448, 451, 453, 456, 458, 460, 461, 462, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 484, 487, 488, 489, 492, 493, 494, 495, 501, 503, 507, 514, 516, 524, 531, 538, 541, 551, 555, 556, 557, 558, 559, 586, 619, 630, 653, 665, 668, 669, 670, 674, 676, 678, 679, 681, 682, 683, 712, 720, 732, 748, 769, 819, 831, 833, 835, 836, 838], "index": [0, 1, 3, 33, 35, 38, 40, 47, 50, 53, 54, 57, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 75, 76, 79, 84, 85, 87, 88, 91, 92, 94, 98, 100, 101, 104, 105, 136, 138, 145, 146, 147, 227, 257, 296, 323, 345, 372, 396, 426, 453, 470, 487, 488, 489, 502, 504, 507, 522, 528, 531, 548, 549, 555, 556, 557, 558, 559, 564, 598, 642, 655, 665, 681, 729, 732, 742, 743, 761, 769, 773], "from": [0, 1, 2, 3, 21, 33, 34, 35, 36, 37, 38, 43, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 83, 88, 104, 107, 108, 114, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 161, 162, 163, 182, 187, 191, 200, 201, 213, 214, 217, 220, 221, 222, 225, 227, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 287, 288, 289, 290, 291, 294, 296, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 343, 345, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 394, 396, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 451, 453, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 507, 514, 517, 519, 520, 522, 524, 531, 538, 542, 545, 546, 548, 549, 551, 555, 556, 557, 559, 560, 561, 563, 564, 565, 653, 654, 665, 666, 668, 669, 671, 672, 674, 679, 681, 682, 683, 684, 691, 692, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 775, 795, 797, 833, 835, 836, 838], "import": [0, 1, 2, 3, 33, 34, 35, 36, 37, 38, 43, 45, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 83, 107, 108, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 161, 162, 163, 191, 201, 213, 220, 221, 222, 225, 227, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 277, 287, 288, 289, 290, 291, 294, 296, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 343, 345, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 394, 396, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 451, 453, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 514, 519, 522, 524, 538, 545, 548, 549, 551, 555, 556, 557, 559, 560, 563, 564, 653, 654, 665, 679, 681, 682, 683, 684, 691, 692, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 775, 795, 831, 833, 835, 838], "seq": [0, 1, 33, 43, 48, 54, 56, 57, 61, 62, 63, 65, 66, 67, 68, 69, 70, 134, 135, 136, 138, 139, 141, 145, 146, 223, 224, 237, 244, 247, 255, 257, 270, 271, 272, 275, 288, 289, 292, 293, 312, 315, 321, 323, 335, 336, 341, 342, 361, 364, 370, 372, 385, 387, 392, 393, 406, 413, 416, 424, 426, 439, 440, 442, 444, 446, 449, 450, 467, 469, 470, 481, 653, 838], "acc": [0, 135, 833], "g": [0, 1, 3, 21, 38, 52, 53, 59, 67, 70, 85, 88, 95, 110, 113, 128, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 148, 149, 191, 227, 230, 235, 238, 239, 246, 247, 248, 249, 250, 260, 296, 299, 304, 306, 307, 314, 315, 316, 325, 345, 348, 353, 355, 356, 363, 364, 365, 375, 396, 399, 404, 407, 408, 415, 416, 417, 418, 419, 429, 446, 453, 456, 461, 463, 464, 466, 467, 472, 484, 489, 501, 502, 503, 507, 527, 531, 549, 555, 556, 558, 559, 665, 682, 683, 690, 711, 712, 717, 720, 724, 751, 752, 753, 755, 756, 762, 765, 766, 767, 769, 796, 831, 833, 835, 838], "ggta": 0, "metadata": [0, 1, 3, 33, 38, 47, 50, 51, 53, 56, 57, 58, 59, 61, 62, 136, 137, 138, 139, 140, 141, 145, 146, 220, 225, 227, 234, 236, 237, 238, 241, 244, 254, 255, 257, 263, 270, 271, 273, 274, 275, 277, 287, 288, 289, 294, 296, 303, 305, 306, 309, 312, 320, 321, 323, 328, 335, 338, 343, 345, 352, 354, 355, 358, 361, 369, 370, 372, 378, 385, 389, 394, 396, 403, 405, 406, 407, 410, 413, 423, 424, 426, 432, 439, 440, 441, 443, 444, 446, 451, 453, 460, 462, 463, 468, 469, 470, 475, 481, 517, 542, 556, 564, 576, 598, 609, 620, 642, 665, 676, 679, 681, 682, 683, 830, 833], "seq1": [0, 33, 50, 53, 61, 65, 66, 67, 68, 69, 70, 136, 138, 139, 145, 147, 484, 485], "tcc": 0, "ggca": 0, "seq2": [0, 33, 50, 53, 61, 65, 66, 67, 68, 69, 70, 138, 139, 147, 484, 485], "minter": [0, 33, 38, 50, 53, 61, 62, 136, 145], "stat": [0, 1, 3, 33, 50, 51, 53, 58, 59, 62, 95, 99, 133, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 220, 227, 237, 238, 241, 244, 271, 273, 274, 275, 277, 287, 288, 289, 296, 306, 309, 312, 338, 345, 355, 358, 361, 389, 396, 406, 407, 410, 413, 440, 441, 443, 444, 446, 453, 463, 483, 830, 833], "count": [0, 1, 33, 50, 53, 55, 59, 62, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 113, 136, 138, 139, 145, 147, 247, 249, 250, 262, 264, 266, 315, 327, 329, 331, 364, 377, 379, 381, 416, 418, 419, 431, 433, 435, 467, 474, 476, 478, 485, 486, 489, 563, 669, 675, 682, 683, 684, 714, 715, 741, 769, 831], "2": [0, 1, 3, 21, 33, 38, 45, 50, 51, 52, 54, 55, 58, 59, 61, 65, 66, 67, 68, 69, 70, 74, 75, 77, 79, 81, 83, 85, 88, 89, 90, 92, 93, 95, 98, 100, 101, 104, 107, 108, 109, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 162, 201, 213, 216, 218, 237, 238, 239, 245, 246, 247, 250, 258, 260, 262, 271, 275, 278, 287, 288, 306, 307, 313, 314, 315, 324, 325, 327, 355, 356, 362, 363, 364, 374, 375, 377, 406, 407, 408, 414, 415, 416, 419, 427, 429, 431, 440, 444, 446, 463, 464, 466, 467, 471, 472, 474, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 514, 519, 522, 524, 527, 538, 545, 548, 549, 551, 555, 556, 557, 558, 559, 560, 561, 563, 564, 653, 654, 665, 668, 669, 671, 674, 676, 679, 681, 682, 683, 684, 705, 710, 711, 713, 715, 720, 721, 726, 728, 729, 730, 753, 754, 759, 761, 762, 764, 765, 769, 770, 775, 831, 833, 835, 836, 838], "posit": [0, 1, 21, 33, 34, 38, 47, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 66, 67, 68, 69, 70, 71, 72, 134, 135, 136, 138, 139, 140, 143, 145, 146, 147, 220, 225, 227, 230, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 248, 257, 258, 260, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 287, 288, 294, 296, 299, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 323, 324, 325, 328, 329, 330, 331, 332, 333, 335, 338, 343, 345, 348, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 372, 374, 375, 378, 379, 380, 381, 382, 383, 385, 386, 389, 394, 396, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 417, 426, 427, 429, 432, 433, 434, 435, 436, 437, 439, 440, 441, 443, 444, 446, 451, 453, 456, 460, 461, 462, 463, 464, 466, 470, 471, 472, 475, 476, 477, 478, 479, 481, 487, 488, 489, 497, 557, 563, 642, 655, 679, 680, 682, 683, 742, 833], "13": [0, 1, 78, 98, 135, 138, 144, 146, 220, 289, 338, 389, 446, 489, 654], "dtype": [0, 3, 33, 38, 50, 51, 52, 53, 55, 58, 59, 61, 62, 136, 138, 139, 145, 146, 147, 237, 238, 240, 241, 242, 248, 265, 267, 268, 271, 306, 308, 309, 310, 316, 330, 332, 333, 355, 357, 358, 359, 365, 380, 382, 383, 386, 406, 407, 409, 410, 411, 417, 434, 436, 437, 440, 446, 463, 477, 479, 489, 503, 549, 555, 559, 654, 761, 833], "conveni": [0, 2, 21, 60, 64, 97, 184, 189, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 666, 667, 747, 768, 837], "local_pairwise_align_ssw": [0, 65, 66, 67, 68, 69, 70], "score": [0, 21, 52, 65, 66, 67, 68, 69, 70, 71, 72, 78, 134, 135, 138, 140, 141, 146, 446, 655, 676], "start_end_posit": 0, "actaaggctctctacccctctcagaga": 0, "actaaggctcctaacccccttttctcaga": 0, "30": [0, 1, 135, 140, 141, 144, 146, 682, 683, 743], "actaaggctctct": 0, "acccc": 0, "tctcaga": 0, "actaaggctc": 0, "ctaacccccttttctcaga": 0, "27": [0, 83, 107, 108, 135, 557], "0": [0, 1, 3, 4, 5, 6, 19, 20, 21, 33, 34, 35, 36, 37, 38, 40, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 161, 162, 163, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 192, 198, 200, 202, 203, 204, 210, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 227, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 277, 278, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 345, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 528, 529, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 555, 556, 557, 558, 559, 560, 561, 563, 564, 575, 586, 597, 598, 608, 619, 630, 641, 652, 653, 654, 664, 665, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 695, 699, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 773, 774, 775, 793, 794, 795, 797, 807, 808, 809, 820, 831, 833, 835, 838], "24": [0, 135, 144, 682], "28": [0, 144, 679], "stripedsmithwaterman": [0, 71], "queri": [0, 21, 71, 134, 135, 201, 446], "aaaaaactctctaaactcactaaggctctctacccctcttcagagaagtcga": 0, "print": [0, 1, 3, 58, 83, 107, 108, 136, 138, 139, 140, 141, 143, 145, 146, 147, 244, 260, 275, 288, 312, 325, 361, 375, 413, 429, 444, 446, 472, 502, 557, 563, 564, 653, 679, 683, 691, 692, 707, 708, 711, 712, 715, 716, 717, 719, 720, 722, 723, 724, 726, 728, 729, 731, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 749, 751, 752, 753, 754, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 833, 835, 838], "49": [0, 141, 144], "length": [0, 3, 21, 33, 50, 51, 53, 58, 65, 66, 67, 83, 107, 108, 133, 134, 135, 137, 138, 139, 140, 141, 145, 146, 147, 201, 213, 220, 221, 227, 232, 237, 238, 239, 241, 244, 247, 249, 250, 260, 261, 262, 264, 265, 266, 267, 271, 273, 274, 275, 277, 287, 288, 289, 290, 296, 301, 306, 307, 309, 312, 315, 325, 326, 327, 329, 330, 331, 332, 338, 339, 345, 350, 355, 356, 358, 361, 364, 375, 376, 377, 379, 380, 381, 382, 389, 390, 396, 401, 406, 407, 408, 410, 413, 416, 418, 419, 429, 430, 431, 433, 434, 435, 436, 440, 441, 443, 444, 446, 447, 453, 458, 463, 464, 467, 472, 473, 474, 476, 477, 478, 479, 484, 485, 489, 517, 542, 555, 558, 559, 563, 673, 674, 682, 683, 687, 690, 705, 711, 720, 721, 730, 752, 759, 761, 764, 765, 770, 833, 835, 838], "multipl": [0, 33, 58, 83, 107, 108, 136, 137, 138, 139, 140, 141, 143, 148, 191, 213, 446, 486, 489, 497, 563, 676, 682, 762, 769, 831, 835], "target": [0, 1, 21, 71, 82, 141, 514, 524, 538, 551, 836], "an": [0, 1, 2, 3, 4, 5, 7, 21, 33, 35, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 71, 74, 83, 92, 105, 107, 108, 109, 113, 127, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 161, 162, 163, 176, 178, 179, 180, 182, 187, 191, 201, 212, 213, 215, 216, 218, 219, 227, 238, 245, 254, 255, 257, 264, 266, 270, 276, 277, 287, 289, 296, 306, 313, 320, 321, 323, 329, 331, 335, 337, 345, 355, 362, 369, 370, 372, 379, 381, 385, 388, 396, 407, 414, 423, 424, 426, 433, 435, 439, 445, 446, 453, 463, 468, 469, 470, 476, 478, 481, 482, 486, 489, 491, 492, 493, 494, 495, 497, 501, 502, 507, 514, 516, 517, 521, 524, 525, 531, 538, 539, 541, 542, 547, 551, 552, 555, 557, 558, 559, 563, 575, 597, 608, 620, 641, 652, 653, 654, 664, 667, 673, 674, 679, 681, 682, 683, 684, 691, 692, 705, 707, 708, 710, 712, 716, 718, 719, 723, 726, 727, 729, 736, 738, 741, 751, 754, 759, 761, 764, 766, 767, 768, 769, 770, 771, 776, 777, 780, 787, 793, 794, 795, 797, 819, 831, 833, 835, 838], "effici": [0, 142, 544], "wai": [0, 1, 3, 138, 139, 143, 145, 147, 149, 191, 489, 557, 674, 679, 831, 835], "find": [0, 1, 84, 240, 242, 245, 248, 258, 260, 265, 267, 268, 308, 310, 313, 316, 324, 325, 330, 332, 333, 357, 359, 362, 365, 374, 375, 380, 382, 383, 386, 409, 411, 414, 417, 427, 429, 434, 436, 437, 471, 472, 477, 479, 556, 559, 563, 669, 683, 705, 706, 718, 720, 721, 724, 725, 726, 731, 733, 734, 735, 736, 738, 739, 746, 750, 755, 764, 766, 767, 793, 836], "represent": [0, 3, 133, 138, 143, 201, 263, 285, 328, 378, 432, 475, 513, 537, 562, 655, 664, 690, 704, 761, 762, 830, 831], "target_sequ": [0, 7, 21, 22], "gctaactaggctcccttctacccctctcagaga": 0, "gcccagtagcttcccaatatgagagcatcaattgtagatcgggcc": 0, "tctataagattccgcatgcgttacttataagatgtctcaacgg": 0, "tagagattaattgccactgccaaaattctg": 0, "query_sequ": [0, 7, 21, 22], "append": [0, 53, 145, 149, 446, 722], "act": [0, 1, 59, 161, 162, 163], "aggctc": 0, "38": [0, 134, 139, 144, 679], "aligned_query_sequ": 0, "tctacccctctcagaga": 0, "aligned_target_sequ": 0, "aggctcccttctacccctctcagaga": 0, "scikit": [0, 1, 2, 3, 56, 57, 60, 64, 65, 68, 71, 72, 83, 107, 108, 109, 110, 111, 112, 113, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 217, 219, 255, 257, 269, 274, 275, 276, 277, 287, 288, 321, 323, 334, 337, 370, 372, 384, 388, 424, 426, 438, 443, 444, 445, 469, 470, 480, 482, 483, 520, 525, 546, 552, 666, 667, 747, 768, 771, 833, 836, 837], "bio": [0, 1, 2, 3, 56, 57, 60, 64, 65, 68, 71, 72, 83, 102, 107, 108, 109, 110, 111, 112, 113, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 217, 219, 255, 257, 269, 274, 275, 276, 277, 287, 288, 321, 323, 334, 337, 370, 372, 384, 388, 424, 426, 438, 443, 444, 445, 469, 470, 480, 482, 483, 520, 525, 546, 552, 556, 666, 667, 747, 768, 771, 833, 836, 837], "also": [0, 1, 2, 3, 51, 52, 79, 83, 106, 107, 108, 109, 128, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 151, 201, 250, 260, 270, 287, 325, 335, 375, 385, 419, 429, 439, 446, 472, 481, 489, 501, 502, 555, 556, 557, 559, 563, 669, 676, 679, 682, 683, 770, 773, 819, 831, 833, 838], "pure": [0, 771], "python": [0, 1, 3, 7, 446, 502, 527, 557, 771, 776, 830, 831, 833, 836], "implement": [0, 1, 2, 3, 4, 65, 68, 73, 74, 75, 76, 78, 79, 83, 84, 87, 88, 92, 93, 98, 100, 101, 102, 104, 106, 107, 108, 111, 112, 139, 143, 149, 161, 162, 163, 164, 668, 669, 674, 675, 713, 769, 770, 771], "smith": [0, 21, 68, 69, 70, 71, 563], "waterman": [0, 21, 68, 69, 70, 71], "needleman": [0, 65, 66, 67], "wunsch": [0, 65, 66, 67], "These": [0, 1, 3, 51, 56, 57, 73, 83, 107, 108, 140, 143, 147, 148, 255, 257, 321, 323, 370, 372, 424, 426, 469, 470, 483, 560, 562, 655, 675, 681, 836], "ar": [0, 3, 4, 21, 33, 34, 38, 43, 47, 48, 51, 52, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 77, 78, 83, 89, 90, 105, 107, 108, 109, 110, 112, 113, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 161, 162, 163, 175, 182, 186, 187, 191, 192, 198, 204, 210, 213, 215, 217, 218, 219, 220, 225, 227, 234, 237, 238, 244, 247, 251, 252, 253, 256, 264, 265, 266, 267, 269, 270, 273, 274, 275, 276, 277, 278, 284, 286, 287, 288, 289, 294, 296, 303, 306, 312, 315, 317, 318, 319, 322, 329, 330, 331, 332, 334, 335, 337, 338, 343, 345, 352, 355, 361, 364, 366, 367, 368, 371, 373, 379, 380, 381, 382, 384, 385, 388, 389, 394, 396, 403, 406, 407, 413, 416, 420, 421, 422, 425, 433, 434, 435, 436, 438, 439, 441, 443, 444, 445, 446, 451, 453, 460, 463, 467, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 489, 491, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 507, 512, 517, 520, 521, 524, 525, 527, 529, 531, 536, 542, 544, 546, 547, 549, 551, 552, 555, 556, 557, 558, 559, 560, 561, 563, 576, 598, 642, 653, 655, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 677, 679, 681, 682, 683, 690, 710, 713, 718, 728, 739, 741, 742, 746, 747, 754, 755, 759, 761, 762, 763, 768, 769, 771, 773, 774, 776, 793, 796, 797, 808, 819, 831, 833, 835, 836, 838], "much": [0, 1, 3, 83, 107, 108, 143, 831], "slower": [0, 771], "than": [0, 1, 3, 21, 51, 52, 74, 83, 88, 90, 107, 108, 138, 143, 145, 147, 183, 188, 201, 221, 222, 225, 239, 243, 247, 258, 259, 260, 261, 262, 264, 265, 266, 267, 275, 288, 290, 291, 294, 307, 311, 315, 324, 325, 326, 327, 329, 330, 331, 332, 339, 340, 343, 356, 360, 364, 374, 375, 376, 377, 379, 380, 381, 382, 390, 391, 394, 408, 412, 416, 427, 428, 429, 430, 431, 433, 434, 435, 436, 444, 447, 448, 451, 464, 465, 467, 471, 472, 473, 474, 476, 477, 478, 479, 485, 486, 489, 491, 502, 544, 555, 557, 558, 559, 563, 653, 668, 669, 682, 683, 684, 711, 728, 741, 770, 775, 831, 835], "method": [0, 1, 3, 7, 21, 33, 40, 52, 59, 60, 64, 65, 85, 105, 107, 109, 110, 113, 144, 151, 161, 163, 164, 181, 191, 201, 212, 217, 219, 220, 223, 224, 238, 247, 269, 271, 275, 276, 277, 286, 288, 289, 292, 293, 306, 315, 334, 337, 338, 341, 342, 355, 364, 384, 388, 389, 392, 393, 407, 416, 438, 440, 444, 445, 446, 449, 450, 463, 467, 480, 482, 489, 497, 501, 502, 503, 520, 525, 527, 544, 546, 552, 555, 556, 557, 558, 559, 560, 565, 576, 586, 587, 598, 609, 619, 620, 630, 631, 642, 653, 655, 665, 666, 667, 668, 669, 674, 690, 691, 692, 708, 710, 711, 712, 715, 716, 718, 719, 720, 721, 723, 725, 726, 746, 747, 752, 754, 766, 767, 768, 769, 770, 776, 788, 795, 796, 797, 807, 819, 833, 834, 835, 838], "describ": [0, 52, 65, 68, 83, 89, 90, 101, 107, 108, 113, 137, 138, 139, 140, 141, 144, 145, 147, 260, 263, 325, 328, 375, 378, 429, 432, 446, 472, 475, 502, 521, 539, 547, 557, 563, 675, 732, 770, 833, 835], "abov": [0, 3, 59, 138, 140, 144, 145, 146, 147, 149, 161, 163, 446, 502, 555, 557, 559, 563, 833], "serv": [0, 148, 665], "thei": [0, 1, 3, 43, 48, 52, 58, 74, 105, 109, 134, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 218, 225, 234, 237, 260, 278, 294, 303, 325, 343, 352, 375, 394, 403, 406, 429, 451, 460, 472, 486, 505, 516, 529, 541, 555, 556, 557, 558, 559, 560, 564, 664, 665, 668, 674, 679, 715, 722, 771, 773, 836, 838], "re": [0, 1, 3, 50, 53, 59, 83, 105, 107, 108, 109, 136, 138, 139, 145, 147, 220, 246, 272, 289, 314, 336, 338, 363, 387, 389, 415, 442, 446, 466, 560, 668, 676, 678, 679, 683, 761, 835, 838], "simpler": [0, 2], "experi": [0, 137, 140, 489, 682], "local": [0, 68, 69, 70, 134, 135, 140], "global": [0, 1, 65, 66, 67], "nucleotid": [0, 21, 66, 69, 135, 137, 138, 139, 140, 237, 259, 271, 406, 428, 440, 838], "The": [0, 1, 2, 3, 4, 5, 21, 22, 50, 51, 52, 53, 54, 56, 57, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 83, 84, 85, 87, 88, 92, 93, 95, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 161, 162, 163, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 191, 192, 201, 202, 203, 212, 213, 214, 215, 216, 217, 219, 222, 225, 227, 232, 237, 238, 239, 241, 243, 247, 255, 257, 258, 260, 261, 262, 269, 271, 275, 276, 277, 286, 287, 288, 291, 294, 296, 301, 306, 307, 309, 311, 315, 321, 323, 324, 325, 326, 327, 334, 337, 340, 343, 345, 350, 355, 356, 358, 360, 364, 370, 372, 374, 375, 376, 377, 384, 388, 391, 394, 396, 401, 406, 407, 408, 410, 412, 416, 424, 426, 427, 429, 430, 431, 438, 440, 444, 445, 446, 448, 451, 453, 458, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 480, 482, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 501, 503, 507, 514, 517, 520, 524, 525, 527, 531, 538, 539, 542, 544, 546, 549, 551, 552, 555, 556, 557, 558, 559, 561, 563, 564, 576, 598, 609, 620, 642, 653, 655, 666, 667, 668, 669, 673, 674, 675, 676, 679, 680, 681, 682, 683, 705, 706, 711, 712, 713, 714, 715, 717, 718, 720, 721, 723, 724, 726, 727, 728, 729, 730, 732, 736, 738, 739, 742, 747, 748, 750, 751, 753, 754, 755, 756, 759, 761, 768, 769, 770, 776, 794, 796, 830, 831, 833, 835, 836, 838], "differ": [0, 1, 2, 3, 38, 51, 52, 54, 65, 66, 67, 78, 83, 88, 98, 107, 108, 114, 135, 138, 139, 145, 147, 148, 149, 222, 225, 234, 238, 239, 243, 258, 259, 264, 265, 266, 267, 270, 274, 277, 284, 291, 294, 303, 306, 307, 311, 324, 329, 330, 331, 332, 335, 340, 343, 352, 355, 356, 360, 374, 379, 380, 381, 382, 385, 391, 394, 403, 407, 408, 412, 427, 428, 433, 434, 435, 436, 439, 443, 448, 451, 460, 463, 464, 465, 471, 476, 477, 478, 479, 481, 484, 489, 502, 507, 531, 555, 558, 559, 563, 587, 642, 654, 668, 669, 674, 682, 683, 713, 714, 773, 774, 790, 791, 792, 833, 835, 836], "underli": [0, 4, 225, 287, 294, 343, 394, 446, 451, 484, 679, 833], "appli": [0, 1, 3, 21, 33, 52, 56, 57, 105, 108, 109, 110, 113, 137, 138, 143, 148, 201, 220, 255, 257, 321, 323, 338, 370, 372, 389, 424, 426, 446, 469, 470, 486, 517, 542, 544, 557, 560, 564, 668, 682, 770, 797, 838], "while": [0, 3, 133, 137, 138, 139, 140, 145, 191, 277, 446, 489, 559, 598, 642, 665, 681, 690, 718, 796, 833, 838], "default": [0, 3, 21, 33, 50, 51, 53, 59, 61, 64, 65, 66, 67, 69, 70, 74, 78, 88, 95, 100, 105, 109, 134, 138, 140, 141, 142, 143, 145, 146, 149, 151, 161, 163, 176, 178, 216, 219, 243, 260, 274, 275, 276, 277, 287, 288, 311, 325, 337, 360, 375, 388, 412, 429, 443, 444, 445, 465, 472, 482, 487, 488, 489, 494, 495, 497, 503, 514, 517, 519, 525, 538, 542, 545, 552, 556, 557, 559, 560, 561, 598, 653, 665, 667, 673, 674, 676, 677, 684, 715, 740, 759, 768, 769, 770, 773, 794, 797, 819, 831, 833, 835, 836, 838], "match": [0, 4, 5, 21, 50, 53, 59, 66, 69, 72, 134, 138, 139, 225, 245, 246, 264, 266, 267, 272, 287, 294, 313, 314, 329, 331, 332, 336, 343, 362, 363, 379, 381, 382, 387, 394, 414, 415, 433, 435, 436, 442, 451, 466, 476, 478, 479, 503, 555, 557, 559, 560, 679, 681, 682, 683, 714, 715, 724, 726, 833, 838], "mismatch": [0, 21, 66, 69, 72, 134, 135, 264, 265, 266, 329, 330, 331, 379, 380, 381, 433, 434, 435, 476, 477, 478, 557, 714], "gap": [0, 21, 51, 52, 55, 59, 65, 66, 67, 68, 69, 70, 134, 135, 136, 137, 138, 139, 140, 141, 145, 220, 237, 238, 241, 244, 245, 249, 250, 253, 260, 271, 273, 274, 275, 277, 287, 288, 289, 306, 309, 312, 313, 319, 325, 338, 355, 358, 361, 362, 368, 375, 389, 406, 407, 410, 413, 414, 418, 419, 422, 429, 440, 441, 443, 444, 446, 463, 472, 484, 762, 833, 838], "here": [0, 1, 3, 5, 52, 74, 75, 76, 78, 79, 83, 84, 87, 88, 92, 93, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 137, 140, 145, 149, 161, 163, 260, 325, 375, 429, 472, 489, 563, 674, 676, 763, 770, 835], "we": [0, 1, 3, 5, 21, 50, 52, 53, 83, 88, 95, 107, 108, 110, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 191, 201, 247, 260, 270, 287, 315, 325, 335, 364, 375, 385, 416, 429, 439, 446, 467, 472, 481, 489, 502, 555, 556, 557, 559, 560, 563, 564, 654, 665, 668, 676, 678, 679, 681, 682, 683, 715, 769, 831, 835, 836, 838], "pair": [0, 3, 56, 65, 66, 67, 69, 72, 107, 108, 109, 113, 137, 139, 140, 141, 143, 147, 212, 216, 255, 321, 370, 424, 469, 485, 489, 507, 514, 524, 531, 538, 542, 549, 551, 560, 679, 730, 759, 833], "open": [0, 1, 5, 60, 64, 65, 66, 67, 68, 69, 70, 110, 134, 135, 139, 149, 161, 163, 182, 183, 184, 187, 188, 189, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 666, 667, 747, 768, 795, 830, 831], "penalti": [0, 21, 65, 66, 67, 68, 69, 70], "11": [0, 21, 67, 70, 71, 77, 82, 134, 137, 144, 146, 246, 314, 363, 415, 466, 489, 564, 654, 669, 676, 679], "extend": [0, 21, 50, 59, 65, 66, 67, 68, 69, 70, 682, 707, 720, 769, 831, 836], "1": [0, 1, 3, 7, 20, 21, 33, 34, 35, 36, 37, 38, 40, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 61, 63, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 161, 162, 191, 192, 198, 200, 201, 202, 203, 204, 210, 212, 213, 214, 215, 216, 218, 220, 225, 227, 237, 238, 239, 245, 247, 254, 260, 261, 262, 266, 271, 272, 274, 275, 277, 278, 285, 286, 287, 288, 289, 294, 296, 306, 307, 313, 315, 320, 325, 326, 327, 331, 336, 338, 343, 345, 355, 356, 362, 364, 369, 375, 376, 377, 381, 387, 389, 394, 396, 406, 407, 408, 414, 416, 423, 429, 430, 431, 435, 440, 441, 442, 443, 444, 446, 451, 453, 463, 464, 467, 468, 472, 473, 474, 478, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 514, 517, 519, 521, 522, 524, 527, 538, 539, 542, 545, 547, 548, 549, 551, 555, 556, 557, 558, 559, 560, 561, 563, 598, 620, 642, 653, 654, 665, 668, 669, 673, 676, 677, 679, 681, 682, 683, 684, 705, 710, 713, 715, 720, 721, 724, 728, 729, 730, 741, 742, 752, 753, 754, 759, 761, 762, 764, 765, 769, 770, 775, 833, 835, 838], "other": [0, 1, 3, 4, 21, 38, 47, 56, 57, 59, 97, 101, 110, 137, 138, 139, 140, 142, 143, 145, 147, 148, 192, 198, 204, 210, 215, 225, 234, 243, 249, 250, 255, 257, 259, 264, 265, 266, 267, 270, 278, 284, 294, 303, 311, 321, 323, 329, 330, 331, 332, 335, 343, 352, 360, 370, 372, 379, 380, 381, 382, 385, 394, 403, 412, 418, 419, 424, 426, 428, 433, 434, 435, 436, 439, 446, 451, 460, 465, 469, 470, 476, 477, 478, 479, 481, 483, 489, 502, 505, 512, 527, 529, 536, 559, 665, 668, 669, 674, 681, 683, 690, 713, 714, 715, 721, 723, 724, 773, 796, 807, 831, 833, 835, 838], "word": [0, 137, 138, 140, 143, 147, 216, 262, 327, 377, 431, 474], "more": [0, 1, 3, 51, 52, 53, 60, 64, 65, 71, 74, 85, 105, 112, 135, 137, 138, 139, 143, 144, 145, 146, 147, 183, 188, 217, 219, 251, 252, 253, 256, 269, 276, 317, 318, 319, 322, 334, 337, 366, 367, 368, 371, 373, 384, 388, 420, 421, 422, 425, 438, 445, 480, 482, 486, 489, 491, 502, 507, 520, 525, 531, 544, 546, 552, 555, 556, 557, 558, 559, 560, 563, 653, 665, 666, 667, 668, 669, 676, 682, 683, 711, 728, 747, 768, 769, 831, 835, 837], "costli": 0, "new": [0, 1, 50, 53, 60, 61, 62, 87, 89, 90, 98, 107, 148, 161, 162, 163, 175, 186, 201, 217, 227, 238, 241, 269, 270, 296, 306, 309, 334, 335, 345, 355, 358, 384, 385, 396, 407, 410, 438, 439, 446, 453, 463, 480, 481, 520, 544, 546, 557, 558, 560, 666, 669, 677, 691, 692, 716, 719, 746, 747, 751, 752, 766, 767, 770, 830, 833, 835, 838], "exist": [0, 1, 61, 74, 143, 149, 161, 162, 163, 179, 180, 287, 502, 517, 542, 554, 557, 560, 665, 690, 707, 715, 720, 722, 753, 794, 819, 833], "one": [0, 1, 2, 3, 50, 51, 52, 53, 56, 57, 59, 65, 66, 67, 83, 85, 88, 93, 105, 107, 108, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 162, 183, 188, 213, 216, 218, 230, 235, 238, 251, 252, 253, 254, 255, 256, 257, 287, 299, 304, 306, 317, 318, 319, 320, 321, 322, 323, 348, 353, 355, 366, 367, 368, 369, 370, 371, 372, 373, 399, 404, 407, 420, 421, 422, 423, 424, 425, 426, 456, 461, 463, 468, 469, 470, 489, 503, 507, 517, 531, 542, 549, 556, 557, 559, 560, 563, 564, 565, 654, 670, 673, 674, 681, 682, 683, 705, 707, 708, 714, 728, 741, 746, 754, 831, 835, 838], "local_pairwise_align_protein": [0, 65, 66, 67, 68, 69], "s1": [0, 3, 81, 220, 222, 238, 239, 243, 258, 259, 264, 265, 266, 267, 291, 306, 307, 311, 324, 329, 330, 331, 332, 338, 340, 355, 356, 360, 374, 379, 380, 381, 382, 389, 391, 407, 408, 412, 427, 428, 433, 434, 435, 436, 446, 448, 463, 464, 465, 471, 476, 477, 478, 479, 489, 555, 559], "heagawghe": 0, "s2": [0, 3, 238, 243, 306, 311, 355, 360, 407, 412, 463, 465, 489, 555, 559], "pawhea": 0, "return": [0, 1, 3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 42, 44, 45, 46, 47, 51, 52, 54, 55, 56, 57, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 134, 141, 149, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 217, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 447, 448, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 616, 617, 618, 621, 622, 624, 625, 626, 627, 628, 629, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 691, 692, 693, 694, 697, 698, 700, 702, 703, 704, 705, 706, 708, 712, 713, 714, 715, 716, 717, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 738, 739, 740, 741, 742, 747, 748, 750, 751, 752, 753, 755, 756, 757, 759, 761, 762, 763, 765, 766, 767, 769, 770, 775, 776, 778, 779, 780, 782, 783, 784, 785, 786, 789, 793, 794, 795, 798, 799, 801, 802, 803, 804, 805, 806, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 831, 833, 838], "start": [0, 1, 19, 20, 21, 33, 50, 53, 61, 65, 66, 67, 68, 69, 70, 71, 134, 135, 137, 140, 141, 142, 143, 145, 147, 148, 191, 212, 218, 239, 258, 277, 278, 284, 287, 288, 307, 324, 356, 374, 408, 427, 464, 471, 503, 560, 561, 679, 682, 683, 838], "end": [0, 1, 21, 65, 66, 67, 68, 69, 70, 71, 134, 135, 137, 138, 139, 140, 141, 147, 148, 191, 201, 212, 218, 239, 258, 287, 307, 324, 356, 374, 408, 427, 464, 471, 752], "each": [0, 1, 2, 3, 21, 33, 43, 48, 51, 52, 55, 58, 61, 65, 66, 67, 68, 69, 70, 71, 83, 95, 105, 107, 108, 109, 110, 113, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 191, 202, 203, 212, 230, 235, 238, 244, 247, 260, 262, 275, 288, 299, 304, 306, 312, 315, 325, 327, 348, 353, 355, 361, 364, 375, 377, 399, 404, 407, 413, 416, 429, 431, 444, 446, 456, 461, 463, 467, 472, 474, 484, 486, 489, 491, 497, 498, 499, 500, 501, 502, 507, 516, 517, 531, 541, 542, 555, 556, 557, 558, 559, 560, 563, 564, 565, 575, 576, 587, 597, 598, 608, 609, 631, 641, 642, 652, 653, 655, 665, 669, 670, 672, 673, 674, 676, 679, 682, 683, 763, 769, 831, 833, 836, 838], "5": [0, 1, 3, 21, 51, 59, 66, 69, 71, 78, 83, 85, 107, 108, 110, 113, 135, 137, 138, 139, 140, 141, 143, 145, 147, 148, 191, 192, 198, 200, 202, 203, 204, 210, 212, 213, 214, 215, 216, 218, 225, 227, 237, 238, 239, 240, 245, 247, 249, 250, 251, 254, 256, 262, 268, 270, 271, 287, 294, 296, 306, 307, 308, 313, 315, 317, 320, 322, 327, 333, 335, 343, 345, 355, 356, 357, 362, 364, 366, 369, 371, 377, 383, 385, 394, 396, 406, 407, 408, 409, 414, 416, 418, 419, 420, 423, 425, 431, 437, 439, 440, 451, 453, 463, 464, 467, 468, 474, 481, 484, 485, 486, 487, 488, 489, 497, 498, 501, 502, 514, 517, 524, 538, 549, 551, 555, 556, 559, 560, 563, 654, 669, 675, 679, 682, 683, 684, 705, 710, 714, 715, 717, 720, 721, 728, 729, 730, 752, 753, 754, 759, 761, 762, 764, 765, 769, 770, 835], "awgh": 0, "aw": 0, "he": 0, "25": [0, 3, 55, 68, 83, 88, 107, 108, 110, 137, 143, 144, 243, 247, 249, 262, 266, 273, 277, 311, 315, 327, 331, 360, 364, 377, 381, 412, 416, 418, 431, 435, 441, 465, 467, 474, 478, 486, 489, 498, 555, 556, 559, 564, 679, 682, 683, 833], "4": [0, 1, 3, 4, 5, 6, 33, 34, 35, 36, 37, 38, 40, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 134, 135, 137, 138, 140, 143, 144, 145, 147, 148, 161, 162, 163, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 201, 213, 218, 221, 222, 223, 224, 225, 227, 230, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 272, 273, 274, 275, 277, 278, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 299, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 315, 316, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 336, 339, 340, 341, 342, 343, 345, 348, 350, 352, 353, 354, 355, 356, 358, 359, 360, 361, 363, 364, 365, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 386, 387, 390, 391, 392, 393, 394, 396, 399, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 421, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 505, 507, 512, 513, 514, 515, 516, 518, 519, 521, 522, 523, 524, 528, 529, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 555, 556, 557, 558, 560, 561, 563, 575, 586, 597, 608, 619, 630, 641, 652, 653, 654, 664, 665, 668, 669, 670, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 695, 699, 701, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 773, 774, 775, 793, 794, 795, 797, 807, 809, 820, 833, 835], "8": [0, 1, 3, 71, 134, 135, 139, 140, 145, 147, 148, 162, 218, 238, 247, 270, 273, 289, 306, 315, 335, 355, 364, 385, 407, 416, 439, 441, 463, 467, 481, 524, 551, 556, 563, 654, 679, 683, 684, 720, 728, 729, 762, 770, 833, 835], "similarli": [0, 3, 138, 833], "perform": [0, 3, 21, 58, 59, 71, 83, 95, 105, 107, 108, 109, 110, 138, 139, 192, 220, 275, 288, 338, 389, 444, 446, 486, 487, 488, 489, 491, 492, 493, 494, 495, 498, 499, 500, 503, 505, 527, 529, 539, 542, 559, 560, 563, 564, 565, 587, 631, 642, 654, 674, 676, 677, 683, 684, 691, 692, 716, 719, 726, 737, 743, 744, 745, 754, 766, 767, 773, 831], "global_pairwise_align_nucleotid": 0, "gcgtgcctaaggtatgcaag": 0, "acgtgcctaggtacgcaag": 0, "20": [0, 1, 144, 489, 665, 671, 679, 682, 683], "acgtgccta": 0, "ggtacgcaag": 0, "As": [1, 3, 137, 140, 143, 446, 501, 521, 547, 557, 559, 669, 723, 831, 838], "project": [1, 110, 139, 487, 501, 555, 556, 557, 558, 559, 675], "size": [1, 45, 81, 555, 556, 557, 559, 642, 653, 665, 673, 679, 681, 682, 683, 795], "increas": [1, 502, 503, 560, 561, 563, 653, 679, 682], "consist": [1, 135, 138, 139, 141, 144, 145, 147, 148, 446, 682, 740, 760], "base": [1, 3, 59, 66, 69, 74, 75, 76, 77, 78, 79, 82, 83, 84, 87, 88, 91, 92, 93, 94, 95, 98, 100, 102, 104, 107, 108, 134, 138, 140, 144, 146, 191, 212, 220, 260, 289, 325, 338, 375, 389, 429, 446, 472, 503, 507, 531, 555, 557, 558, 559, 563, 598, 668, 669, 676, 679, 681, 682, 683, 713, 725, 726, 769, 795, 833, 834, 835, 836, 838], "document": [1, 2, 3, 40, 112, 138, 140, 145, 146, 181, 489, 665, 690, 831], "becom": [1, 138, 139, 143, 201, 836], "therefor": [1, 3, 50, 53, 59, 83, 107, 108, 113, 489], "contribut": [1, 51, 563, 668, 673, 830], "our": [1, 3, 5, 85, 139, 149, 162, 260, 325, 375, 429, 472, 654, 679, 682, 683, 684, 833, 836, 838], "goal": [1, 831], "creat": [1, 3, 4, 5, 21, 33, 50, 53, 54, 58, 60, 61, 62, 63, 137, 138, 141, 143, 145, 164, 175, 186, 191, 201, 212, 213, 217, 269, 270, 289, 334, 335, 384, 385, 438, 439, 446, 480, 481, 489, 497, 502, 517, 519, 520, 522, 542, 545, 546, 548, 549, 561, 563, 598, 654, 665, 666, 711, 712, 733, 747, 770, 833, 835, 838], "where": [1, 3, 72, 74, 75, 76, 77, 79, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 109, 110, 113, 133, 138, 142, 143, 144, 147, 149, 240, 242, 246, 248, 258, 260, 265, 267, 268, 270, 308, 310, 314, 316, 324, 325, 330, 332, 333, 335, 357, 359, 363, 365, 374, 375, 380, 382, 383, 385, 386, 409, 411, 415, 417, 427, 429, 434, 436, 437, 439, 466, 471, 472, 477, 479, 481, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 507, 531, 557, 563, 653, 665, 673, 675, 676, 677, 679, 683, 684, 690, 714, 715, 725, 729, 762, 765, 794, 835, 836, 838], "easi": [1, 138, 139], "relev": [1, 3, 21, 140, 682, 833], "function": [1, 2, 65, 66, 67, 83, 89, 90, 95, 97, 107, 108, 109, 110, 113, 138, 139, 146, 150, 161, 162, 163, 176, 177, 178, 181, 185, 191, 201, 213, 243, 277, 311, 360, 412, 465, 484, 487, 488, 489, 492, 493, 494, 495, 501, 517, 542, 556, 557, 558, 559, 560, 561, 564, 653, 669, 678, 681, 682, 683, 708, 712, 715, 720, 725, 749, 754, 762, 764, 765, 770, 771, 773, 774, 775, 776, 794, 796, 808, 819, 820, 830, 836], "determin": [1, 3, 4, 35, 38, 47, 56, 57, 83, 105, 107, 108, 109, 142, 149, 179, 180, 222, 225, 234, 251, 252, 253, 254, 255, 256, 257, 259, 278, 284, 291, 294, 303, 317, 318, 319, 320, 321, 322, 323, 340, 343, 352, 366, 367, 368, 369, 370, 371, 372, 373, 391, 394, 403, 420, 421, 422, 423, 424, 425, 426, 428, 448, 451, 460, 468, 469, 470, 489, 512, 536, 559, 563, 653, 674, 679, 681, 682, 769, 836, 838], "when": [1, 3, 4, 21, 50, 52, 53, 59, 62, 65, 66, 67, 74, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 145, 146, 147, 149, 150, 161, 162, 163, 182, 183, 184, 187, 188, 189, 201, 213, 238, 245, 246, 249, 250, 263, 306, 313, 314, 328, 355, 362, 363, 378, 407, 414, 415, 418, 419, 432, 446, 463, 466, 475, 484, 489, 502, 555, 557, 558, 559, 561, 563, 586, 619, 630, 668, 676, 679, 680, 681, 682, 683, 684, 687, 715, 749, 766, 767, 770, 775, 796, 831, 835, 836, 838], "you": [1, 3, 21, 65, 66, 67, 83, 105, 107, 108, 109, 110, 134, 136, 138, 139, 141, 145, 147, 149, 200, 201, 213, 215, 216, 220, 338, 389, 446, 542, 555, 559, 676, 679, 681, 682, 683, 712, 714, 715, 831, 833, 835, 836, 838], "look": [1, 2, 72, 142, 144, 145, 149, 216, 270, 335, 385, 439, 443, 444, 481, 489, 507, 531, 665, 681, 682, 683, 712, 819, 835, 836, 838], "doesn": [1, 2, 59, 138, 185, 287, 486, 554, 668, 674, 678, 752, 771, 837], "t": [1, 2, 3, 5, 21, 33, 50, 52, 53, 54, 58, 59, 63, 71, 83, 85, 105, 107, 108, 109, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 161, 163, 185, 191, 192, 225, 234, 239, 243, 247, 249, 250, 251, 252, 253, 256, 264, 265, 266, 267, 273, 287, 294, 303, 307, 311, 315, 317, 318, 319, 322, 329, 330, 331, 332, 343, 352, 356, 360, 364, 366, 367, 368, 371, 379, 380, 381, 382, 394, 403, 408, 412, 416, 418, 419, 420, 421, 422, 425, 433, 434, 435, 436, 441, 446, 451, 460, 464, 465, 467, 476, 477, 478, 479, 486, 487, 489, 494, 495, 554, 560, 668, 669, 674, 676, 678, 679, 681, 683, 684, 714, 715, 752, 753, 761, 769, 770, 771, 833, 836, 837, 838], "trust": [1, 139], "work": [1, 2, 3, 21, 110, 138, 145, 149, 220, 338, 389, 502, 557, 669, 683, 830, 832, 833, 835], "suffici": 1, "interfac": [1, 3, 56, 57, 106, 255, 257, 321, 323, 370, 372, 424, 426, 469, 470, 555, 556, 557, 558, 769, 831], "intuit": 1, "beta": [1, 3, 109, 110, 112, 137], "present": [1, 51, 52, 83, 107, 108, 134, 138, 144, 147, 202, 203, 220, 237, 240, 241, 242, 247, 248, 258, 268, 271, 287, 308, 309, 310, 315, 316, 324, 333, 338, 357, 358, 359, 364, 365, 374, 383, 386, 389, 406, 409, 410, 411, 416, 417, 427, 437, 440, 467, 471, 489, 516, 541, 555, 556, 558, 559, 598, 664, 674, 683, 684, 714, 769, 770, 772, 835], "draft": 1, "requir": [1, 21, 89, 90, 133, 135, 136, 138, 141, 145, 147, 148, 216, 274, 287, 288, 443, 502, 527, 557, 563, 653, 673, 681, 712, 718, 752, 772, 796, 831, 833, 838], "all": [1, 2, 3, 21, 33, 34, 51, 52, 56, 57, 59, 65, 66, 67, 72, 74, 82, 83, 85, 86, 95, 104, 105, 107, 108, 109, 110, 133, 134, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 151, 175, 186, 191, 201, 204, 213, 215, 216, 220, 238, 241, 244, 247, 255, 257, 260, 270, 272, 287, 306, 309, 312, 315, 321, 323, 325, 335, 336, 338, 355, 358, 361, 364, 370, 372, 375, 385, 387, 389, 407, 410, 413, 416, 424, 426, 429, 439, 442, 446, 463, 467, 469, 470, 472, 481, 489, 491, 497, 498, 499, 500, 501, 502, 514, 517, 524, 538, 542, 549, 551, 555, 556, 557, 558, 559, 560, 587, 598, 642, 653, 654, 665, 673, 674, 682, 683, 684, 690, 706, 709, 710, 711, 720, 723, 724, 725, 736, 738, 739, 742, 749, 754, 755, 757, 759, 769, 796, 797, 835, 836], "submit": [1, 137, 138, 683], "stage": 1, "themselv": [1, 833], "malleabl": 1, "If": [1, 3, 4, 21, 33, 50, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 71, 74, 77, 78, 83, 84, 85, 89, 95, 105, 107, 108, 109, 110, 113, 134, 138, 141, 142, 143, 144, 145, 146, 147, 149, 151, 161, 162, 163, 176, 178, 182, 183, 187, 188, 191, 200, 204, 217, 218, 220, 222, 227, 237, 238, 239, 241, 243, 245, 247, 250, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 271, 272, 287, 289, 291, 296, 306, 307, 309, 311, 313, 315, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 336, 338, 340, 345, 355, 356, 358, 360, 362, 364, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 389, 391, 396, 406, 407, 408, 410, 412, 414, 416, 419, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 442, 443, 444, 446, 448, 453, 463, 464, 465, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 484, 485, 489, 494, 495, 497, 503, 507, 514, 516, 517, 518, 519, 520, 524, 531, 538, 541, 542, 543, 544, 545, 546, 551, 555, 556, 557, 558, 559, 560, 561, 563, 598, 609, 642, 653, 664, 665, 666, 668, 669, 670, 673, 674, 677, 679, 680, 681, 682, 683, 684, 710, 712, 713, 717, 720, 723, 724, 728, 733, 736, 738, 741, 747, 752, 753, 754, 759, 761, 762, 763, 769, 770, 773, 774, 775, 776], "disagre": 1, "someth": [1, 60, 64, 149, 162, 182, 183, 184, 187, 188, 189, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 561, 666, 667, 747, 768, 838], "suggest": [1, 21, 162, 182, 183, 187, 188, 682], "includ": [1, 3, 52, 58, 60, 64, 72, 73, 83, 107, 108, 112, 113, 136, 137, 138, 139, 142, 143, 144, 145, 147, 217, 219, 227, 236, 241, 249, 250, 260, 269, 273, 274, 275, 276, 287, 288, 296, 305, 309, 325, 334, 337, 345, 354, 358, 375, 384, 388, 396, 405, 410, 418, 419, 429, 438, 441, 443, 444, 445, 453, 462, 472, 480, 482, 489, 502, 513, 520, 525, 537, 542, 546, 549, 552, 555, 556, 558, 559, 560, 564, 654, 664, 665, 666, 667, 669, 674, 675, 679, 683, 705, 706, 708, 737, 739, 740, 743, 744, 745, 747, 760, 762, 763, 768, 831, 833, 834, 835, 837], "issu": [1, 71, 72, 81, 137, 138, 139, 162, 770, 831], "initi": [1, 95, 138, 682, 737, 740, 743, 744, 745, 760, 763, 770, 807], "discuss": [1, 3, 107, 108, 838], "adher": 1, "pep": 1, "standard": [1, 138, 139, 141, 143, 274, 275, 277, 287, 288, 443, 444, 486, 489, 507, 531, 556, 557, 670, 673, 676, 677, 831, 833], "befor": [1, 3, 52, 138, 142, 147, 249, 250, 287, 418, 419, 556, 557, 683, 744, 763, 835, 836, 838], "ani": [1, 3, 4, 21, 51, 52, 59, 61, 71, 72, 75, 104, 138, 140, 142, 143, 147, 161, 162, 163, 183, 188, 191, 201, 215, 216, 446, 484, 489, 491, 557, 560, 564, 598, 620, 668, 673, 679, 681, 682, 707, 710, 711, 712, 722, 730, 759, 761, 769, 796, 797, 807, 819, 835, 838], "read": [1, 3, 4, 5, 21, 64, 83, 107, 108, 134, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 161, 162, 179, 181, 183, 188, 219, 220, 275, 276, 287, 288, 337, 338, 388, 389, 444, 445, 446, 482, 502, 525, 552, 560, 667, 691, 692, 704, 705, 706, 708, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 723, 724, 725, 726, 728, 730, 731, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 776, 835], "carefulli": 1, "your": [1, 21, 59, 83, 105, 107, 108, 109, 139, 149, 201, 559, 679, 682, 831, 835, 838], "choos": [1, 669, 679], "peopl": 1, "most": [1, 51, 75, 133, 136, 138, 139, 142, 143, 145, 148, 287, 446, 557, 653, 676, 679, 730, 732, 769, 835], "like": [1, 2, 3, 65, 66, 67, 110, 138, 140, 141, 142, 144, 149, 263, 328, 378, 432, 475, 502, 563, 586, 598, 619, 620, 630, 642, 674, 676, 682, 683, 795, 831, 838], "guess": [1, 60, 95, 114, 138, 182, 187, 217, 269, 334, 384, 438, 480, 520, 546, 666, 747, 772], "make": [1, 52, 59, 138, 143, 149, 220, 278, 338, 389, 484, 507, 531, 555, 559, 683, 758, 761, 762, 770, 776, 796, 836, 838], "descript": [1, 21, 74, 75, 76, 79, 83, 84, 87, 88, 91, 92, 93, 94, 98, 100, 102, 104, 105, 107, 108, 109, 133, 134, 138, 139, 140, 141, 143, 145, 148, 507, 531, 713, 769, 833, 835], "too": [1, 90, 674, 705], "long": [1, 136, 138, 145, 245, 313, 362, 414, 487, 556, 642, 668], "curr_record": 1, "better": [1, 138, 668, 669, 831], "c": [1, 2, 3, 7, 21, 33, 51, 58, 59, 61, 62, 71, 74, 83, 85, 87, 98, 107, 108, 113, 137, 138, 139, 143, 145, 147, 148, 163, 230, 235, 241, 247, 249, 250, 299, 304, 309, 315, 348, 353, 358, 364, 399, 404, 410, 416, 418, 419, 446, 456, 461, 467, 486, 488, 493, 498, 499, 500, 502, 514, 519, 522, 524, 538, 545, 548, 549, 551, 556, 557, 665, 675, 681, 682, 691, 692, 704, 705, 706, 708, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 723, 724, 725, 726, 730, 731, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 754, 755, 756, 757, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 833, 835], "curr": 1, "current_genbank_record_from_databas": 1, "good": [1, 86, 674], "hard": [1, 83, 105, 107, 108, 109], "don": [1, 3, 21, 59, 138, 249, 250, 418, 419, 487, 489, 560, 676, 679, 683, 714, 715, 752, 770, 836], "afraid": 1, "chang": [1, 88, 138, 200, 201, 220, 287, 338, 389, 446, 555, 653, 712, 746, 836, 838], "except": [1, 3, 100, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 138, 143, 144, 145, 150, 162, 185, 287, 516, 526, 541, 553, 554, 558, 669, 685, 686, 687, 688, 689, 718, 769, 771, 772, 807, 837], "part": [1, 134, 138, 140, 143, 146, 483, 487, 501, 653, 740, 796, 835, 836], "It": [1, 2, 3, 21, 79, 98, 134, 136, 138, 139, 140, 141, 143, 145, 148, 162, 191, 201, 204, 212, 213, 215, 216, 218, 441, 489, 492, 497, 502, 544, 557, 558, 563, 586, 587, 619, 630, 642, 668, 669, 673, 676, 679, 682, 683, 690, 691, 692, 716, 719, 773, 795, 819, 833], "mai": [1, 2, 3, 4, 7, 21, 52, 61, 90, 128, 135, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 162, 179, 180, 191, 215, 220, 247, 289, 315, 338, 364, 389, 416, 446, 467, 484, 489, 502, 507, 516, 531, 541, 557, 559, 563, 653, 668, 679, 681, 682, 683, 684, 728, 771, 794, 796, 831, 833, 836], "take": [1, 3, 109, 145, 149, 161, 162, 163, 243, 270, 311, 335, 360, 385, 412, 439, 465, 481, 489, 517, 527, 542, 556, 557, 631, 668, 676, 679, 680, 770, 796, 835, 838], "time": [1, 3, 21, 50, 53, 83, 95, 107, 108, 110, 138, 139, 501, 539, 555, 556, 557, 558, 560, 564, 587, 642, 676, 679, 682, 683, 690, 754, 838], "come": [1, 147, 563, 757], "up": [1, 4, 52, 72, 136, 145, 147, 201, 213, 443, 444, 491, 497, 498, 499, 500, 507, 531, 557, 653, 683, 707, 712, 715, 746, 752, 819, 835], "reason": [1, 3, 95, 137, 143, 682, 710, 836], "everyth": 1, "unit": [1, 3, 83, 107, 108, 140, 149, 674, 676, 677, 773, 774, 837], "them": [1, 3, 85, 140, 145, 192, 204, 213, 214, 446, 557, 598, 673, 674, 676, 797], "especi": [1, 133, 138, 563, 676], "search": [1, 35, 65, 134, 135, 138, 216, 245, 258, 313, 324, 362, 374, 414, 427, 471, 504, 528, 669, 718, 723, 724, 725, 726, 793, 833], "replac": [1, 71, 72, 95, 138, 273, 441, 486, 497, 653, 677, 684, 761], "singular": [1, 678, 746, 819], "individu": [1, 3, 74, 75, 76, 82, 83, 84, 86, 91, 92, 93, 94, 95, 104, 107, 108, 133, 138, 489, 681, 838], "thing": [1, 838], "plural": [1, 6], "collect": [1, 4, 21, 98, 501, 514, 538, 653], "For": [1, 2, 3, 33, 52, 60, 64, 71, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 201, 216, 217, 218, 219, 220, 269, 276, 334, 337, 338, 384, 388, 389, 438, 445, 446, 480, 482, 489, 520, 525, 546, 552, 555, 556, 557, 558, 559, 561, 563, 565, 631, 665, 666, 667, 668, 669, 679, 681, 682, 683, 710, 747, 768, 769, 771, 772, 831, 833, 835, 836], "d": [1, 3, 21, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 134, 135, 140, 143, 144, 486, 487, 488, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 514, 519, 524, 538, 545, 549, 551, 555, 556, 557, 558, 559, 563, 598, 620, 642, 655, 665, 673, 682, 683, 684, 691, 692, 705, 706, 708, 710, 711, 712, 713, 714, 716, 717, 719, 720, 721, 723, 724, 725, 726, 730, 736, 737, 738, 739, 740, 746, 750, 751, 752, 754, 755, 756, 757, 759, 760, 761, 764, 765, 766, 767, 769, 770, 831, 833, 835, 838], "expect": [1, 3, 110, 134, 149, 178, 185, 220, 338, 389, 494, 495, 502, 563, 668, 669, 676, 686, 687, 761, 838], "self": [1, 8, 9, 10, 12, 13, 14, 15, 16, 18, 23, 24, 26, 27, 28, 29, 30, 32, 39, 42, 44, 46, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 168, 169, 170, 171, 172, 173, 186, 187, 188, 189, 193, 195, 196, 197, 199, 201, 205, 207, 208, 209, 211, 215, 226, 227, 229, 231, 233, 271, 279, 281, 282, 283, 295, 296, 298, 300, 302, 344, 345, 347, 349, 351, 395, 396, 398, 400, 402, 440, 452, 453, 455, 457, 459, 505, 506, 509, 510, 511, 512, 514, 515, 523, 524, 529, 530, 533, 534, 535, 536, 538, 540, 550, 551, 566, 567, 569, 570, 571, 572, 573, 574, 577, 578, 580, 581, 582, 583, 584, 585, 588, 589, 591, 592, 593, 594, 595, 596, 599, 600, 602, 603, 604, 605, 606, 607, 610, 611, 613, 614, 615, 616, 617, 618, 621, 622, 624, 625, 626, 627, 628, 629, 632, 633, 635, 636, 637, 638, 639, 640, 643, 644, 646, 647, 648, 649, 650, 651, 656, 657, 659, 660, 661, 662, 663, 691, 692, 693, 694, 697, 698, 700, 702, 703, 704, 705, 706, 707, 709, 710, 713, 714, 715, 716, 719, 720, 721, 722, 739, 740, 741, 742, 748, 749, 750, 755, 756, 757, 760, 761, 762, 763, 764, 766, 767, 778, 779, 782, 783, 784, 785, 786, 789, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 810, 811, 813, 814, 815, 816, 817, 818, 821, 822, 824, 825, 826, 827, 828, 829, 835, 838], "hold": [1, 527, 575, 597, 608, 641, 652, 653, 674, 681, 718, 819], "singl": [1, 3, 33, 50, 53, 61, 83, 89, 90, 97, 107, 108, 110, 137, 138, 139, 140, 143, 145, 146, 147, 191, 201, 213, 227, 230, 235, 247, 260, 272, 296, 299, 304, 315, 325, 336, 345, 348, 353, 364, 375, 387, 396, 399, 404, 416, 429, 442, 453, 456, 461, 467, 472, 489, 501, 563, 680, 711, 819, 831, 835, 838], "string": [1, 3, 21, 49, 105, 109, 110, 113, 133, 136, 138, 139, 143, 145, 147, 236, 246, 247, 263, 270, 272, 277, 285, 305, 314, 315, 328, 335, 336, 354, 363, 364, 378, 385, 387, 405, 415, 416, 432, 439, 442, 462, 466, 467, 475, 481, 489, 502, 503, 507, 513, 517, 531, 537, 542, 555, 558, 559, 561, 664, 665, 704, 708, 762, 770, 775, 835], "could": [1, 3, 33, 90, 138, 139, 146, 149, 182, 184, 187, 189, 489, 503, 555, 557, 558, 559, 560, 563, 665, 681, 736, 738, 771, 772, 831], "loop": [1, 138, 766, 767], "through": [1, 3, 40, 65, 66, 67, 175, 181, 186, 507, 531, 674, 723, 836, 838], "list": [1, 3, 4, 71, 83, 107, 108, 111, 112, 134, 137, 139, 140, 141, 144, 147, 148, 149, 161, 163, 179, 180, 201, 270, 335, 385, 439, 446, 481, 502, 513, 516, 537, 541, 557, 559, 560, 576, 598, 609, 631, 664, 679, 681, 682, 683, 690, 706, 712, 720, 722, 724, 727, 736, 738, 739, 754, 755, 759, 761, 762, 769, 770, 831, 838], "dictionari": [1, 54, 56, 61, 63, 72, 147, 148, 191, 202, 203, 212, 216, 255, 321, 370, 424, 446, 469, 557, 728], "sometim": [1, 138, 140, 669, 831], "decis": 1, "tricki": 1, "integ": [1, 3, 21, 105, 109, 133, 134, 138, 139, 142, 143, 144, 145, 146, 227, 296, 345, 396, 453, 489, 502, 503, 555, 558, 559, 560, 561, 642, 684], "positon": 1, "record": [1, 135, 137, 138, 139, 140, 141, 146], "kei": [1, 10, 33, 50, 53, 54, 56, 61, 72, 137, 138, 140, 147, 212, 216, 220, 244, 255, 263, 270, 312, 321, 328, 335, 338, 361, 370, 378, 385, 389, 413, 424, 432, 439, 446, 469, 475, 481, 517, 542, 741, 761, 769, 838], "lookup": [1, 65, 66, 67, 68, 69, 70, 176, 177, 178, 507, 531, 554, 557, 560, 707, 718, 722, 732, 733, 742, 746, 761, 796], "yourself": 1, "wonder": 1, "probabl": [1, 89, 90, 99, 564, 576, 653, 668, 679, 683, 690], "avoid": [1, 21, 147, 149, 215, 654, 677, 766, 767], "problem": [1, 489, 674], "try": [1, 683, 684], "look_up": 1, "type": [1, 3, 4, 19, 21, 22, 33, 34, 35, 36, 37, 38, 45, 47, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 133, 136, 138, 139, 140, 141, 142, 145, 147, 148, 161, 163, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 192, 198, 204, 210, 212, 213, 217, 221, 222, 225, 227, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 284, 285, 286, 287, 290, 291, 294, 296, 301, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 343, 345, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 394, 396, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 451, 453, 458, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 487, 488, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 504, 505, 507, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 528, 529, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 556, 558, 559, 560, 561, 575, 576, 597, 608, 609, 620, 641, 652, 653, 654, 655, 664, 665, 666, 668, 669, 670, 673, 674, 675, 676, 677, 679, 680, 681, 684, 691, 692, 704, 705, 706, 708, 712, 713, 714, 715, 716, 717, 719, 720, 721, 723, 724, 726, 727, 728, 729, 731, 734, 735, 736, 738, 739, 741, 742, 747, 748, 750, 751, 753, 755, 756, 757, 759, 761, 766, 767, 769, 770, 773, 775, 776, 780, 793, 794, 795, 831, 833, 836], "might": [1, 3, 85, 142, 144, 556, 681, 682, 683, 715, 831], "want": [1, 65, 66, 67, 137, 140, 201, 679, 681, 682, 683, 714, 715, 831], "later": [1, 139, 681], "rather": [1, 3, 88, 143, 486, 563, 770], "recorddict": 1, "recordlist": 1, "etc": [1, 60, 64, 85, 138, 139, 182, 183, 184, 187, 188, 189, 191, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 666, 667, 674, 676, 690, 747, 768, 833], "hungarian": 1, "notat": [1, 143], "either": [1, 3, 33, 40, 59, 61, 65, 66, 67, 134, 147, 161, 162, 163, 250, 260, 289, 325, 375, 419, 429, 472, 485, 557, 559, 653, 665, 668, 673, 681, 683, 769, 836], "e": [1, 3, 21, 34, 45, 52, 55, 56, 62, 85, 87, 88, 91, 93, 94, 98, 99, 100, 102, 107, 108, 109, 110, 113, 128, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 191, 214, 238, 246, 247, 255, 287, 306, 314, 315, 321, 355, 363, 364, 370, 373, 386, 407, 415, 416, 424, 441, 446, 463, 466, 467, 469, 484, 489, 501, 502, 503, 507, 514, 519, 524, 527, 531, 538, 545, 549, 551, 555, 556, 557, 558, 559, 665, 671, 672, 681, 682, 684, 690, 691, 692, 705, 706, 708, 710, 711, 712, 716, 717, 719, 720, 721, 723, 724, 725, 726, 730, 734, 736, 737, 738, 739, 740, 746, 750, 751, 752, 755, 756, 757, 759, 760, 761, 762, 764, 765, 766, 767, 769, 770, 774, 793, 796, 831, 833, 835, 838], "prefix": [1, 148], "precis": 1, "possibl": [1, 3, 21, 40, 138, 139, 147, 215, 220, 244, 275, 288, 312, 338, 361, 389, 413, 444, 556, 560, 682, 715, 763, 769], "path": [1, 4, 138, 139, 146, 706, 794], "input": [1, 4, 5, 65, 66, 67, 68, 69, 70, 71, 83, 105, 107, 108, 109, 148, 161, 163, 201, 213, 243, 270, 287, 288, 311, 335, 360, 385, 412, 439, 465, 481, 483, 489, 503, 556, 557, 653, 665, 668, 669, 671, 675, 684, 764, 769, 770, 831, 833], "input_fp": 1, "which": [1, 3, 33, 65, 66, 67, 74, 83, 93, 107, 108, 110, 134, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 161, 162, 163, 164, 176, 178, 179, 180, 181, 182, 187, 220, 238, 239, 250, 258, 260, 263, 287, 306, 307, 324, 325, 328, 338, 355, 356, 374, 375, 378, 389, 407, 408, 419, 427, 429, 432, 446, 463, 464, 471, 472, 475, 486, 487, 489, 503, 514, 538, 555, 558, 559, 563, 669, 673, 674, 679, 680, 681, 682, 683, 715, 718, 749, 761, 762, 767, 769, 770, 780, 797, 819, 831, 833, 835, 836, 838], "shouldn": [1, 669], "anywai": 1, "sinc": [1, 3, 33, 50, 53, 62, 85, 137, 138, 140, 145, 148, 192, 247, 287, 315, 364, 416, 446, 467, 489, 557, 679, 683, 763, 776, 836, 838], "keyword": [1, 60, 64, 71, 137, 140, 142, 162, 182, 183, 184, 187, 188, 189, 216, 217, 219, 263, 269, 274, 275, 276, 328, 334, 337, 378, 384, 388, 432, 438, 443, 444, 445, 475, 480, 482, 520, 525, 546, 552, 666, 667, 747, 768], "infil": 1, "becaus": [1, 3, 52, 58, 59, 83, 107, 108, 134, 138, 139, 140, 143, 145, 146, 149, 220, 225, 260, 287, 294, 325, 338, 343, 375, 389, 394, 429, 446, 451, 472, 489, 557, 669, 674, 676, 678, 681, 710, 715, 718, 762, 836], "just": [1, 88, 89, 90, 95, 149, 753, 831, 835, 838], "its": [1, 4, 33, 50, 51, 53, 54, 56, 57, 58, 59, 65, 66, 67, 137, 138, 139, 140, 143, 144, 147, 149, 163, 185, 191, 201, 247, 254, 255, 257, 262, 315, 320, 321, 323, 327, 364, 369, 370, 372, 377, 416, 423, 424, 426, 431, 446, 467, 468, 469, 470, 474, 490, 507, 531, 556, 664, 668, 670, 673, 678, 690, 712, 742, 743, 752, 757, 762, 763, 769, 794, 831, 835, 836], "result": [1, 3, 4, 7, 21, 22, 52, 54, 59, 65, 66, 67, 83, 88, 105, 107, 108, 109, 113, 134, 135, 138, 149, 213, 220, 237, 238, 241, 271, 306, 309, 338, 355, 358, 389, 406, 407, 410, 440, 463, 486, 489, 496, 497, 542, 555, 557, 558, 559, 560, 561, 564, 575, 576, 586, 587, 597, 608, 609, 619, 620, 630, 631, 641, 652, 653, 654, 655, 664, 665, 668, 669, 674, 676, 679, 684, 723, 739, 753, 761, 762, 769, 770, 774, 831, 833, 838], "store": [1, 33, 43, 48, 56, 57, 58, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 191, 201, 220, 255, 257, 289, 321, 323, 338, 370, 372, 389, 424, 426, 446, 469, 470, 502, 503, 521, 527, 547, 560, 576, 609, 620, 655, 668, 669, 674, 676, 690, 832, 833], "valu": [1, 3, 4, 8, 9, 12, 14, 15, 16, 23, 24, 26, 28, 29, 30, 39, 42, 44, 46, 52, 56, 65, 66, 67, 68, 69, 70, 72, 74, 85, 95, 104, 105, 108, 133, 134, 135, 137, 138, 139, 140, 141, 147, 152, 153, 155, 157, 158, 159, 165, 166, 168, 170, 171, 172, 193, 195, 196, 197, 200, 205, 207, 208, 209, 212, 216, 220, 221, 226, 229, 231, 233, 237, 238, 255, 263, 270, 271, 279, 281, 282, 283, 290, 295, 298, 300, 302, 306, 321, 328, 335, 338, 339, 344, 347, 349, 351, 355, 370, 378, 385, 389, 390, 395, 398, 400, 402, 406, 407, 424, 432, 439, 440, 446, 447, 452, 455, 457, 459, 463, 469, 475, 481, 486, 489, 491, 493, 497, 498, 499, 500, 506, 509, 510, 511, 514, 524, 530, 533, 534, 535, 538, 551, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 569, 571, 572, 573, 577, 578, 580, 582, 583, 584, 586, 588, 589, 591, 593, 594, 595, 598, 599, 600, 602, 604, 605, 606, 610, 611, 613, 615, 616, 617, 619, 621, 622, 624, 626, 627, 628, 630, 632, 633, 635, 637, 638, 639, 643, 644, 646, 648, 649, 650, 653, 656, 657, 659, 661, 662, 663, 665, 668, 669, 673, 674, 676, 678, 679, 680, 681, 682, 683, 690, 693, 694, 697, 700, 702, 703, 710, 712, 715, 754, 761, 772, 773, 778, 779, 782, 784, 785, 786, 787, 796, 798, 799, 801, 803, 804, 805, 808, 810, 811, 813, 815, 816, 817, 819, 821, 822, 824, 826, 827, 828, 838], "data": [1, 3, 4, 59, 83, 85, 95, 105, 107, 108, 109, 110, 113, 134, 137, 139, 141, 142, 144, 146, 147, 148, 220, 289, 338, 389, 446, 486, 487, 488, 489, 490, 497, 501, 503, 505, 507, 521, 527, 529, 531, 547, 556, 563, 564, 586, 619, 630, 653, 665, 668, 669, 673, 679, 681, 682, 683, 728, 759, 763, 770, 794, 797, 830, 831, 833, 838], "case": [1, 3, 52, 65, 66, 67, 75, 110, 138, 143, 145, 148, 151, 250, 263, 328, 378, 419, 432, 475, 503, 557, 563, 668, 673, 675, 683, 710, 743, 769, 796, 797, 831, 835, 836], "arbitrari": [1, 33, 51, 54, 147, 220, 338, 389, 446, 653, 796, 833], "number": [1, 3, 4, 33, 45, 50, 53, 74, 75, 76, 77, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 107, 108, 109, 133, 134, 136, 137, 138, 140, 143, 145, 146, 147, 148, 191, 212, 232, 239, 247, 264, 266, 301, 307, 315, 329, 331, 350, 356, 364, 379, 381, 401, 408, 416, 433, 435, 458, 464, 467, 476, 478, 488, 489, 497, 498, 499, 500, 501, 503, 555, 556, 557, 558, 559, 560, 561, 563, 598, 642, 653, 669, 673, 674, 676, 677, 679, 680, 682, 683, 684, 710, 717, 754, 773], "unless": [1, 21, 33, 58, 77, 146, 797], "appropri": [1, 4, 133, 142, 238, 306, 355, 407, 463, 489, 831, 835], "One": [1, 145, 149, 539, 770], "letter": [1, 81, 138, 140], "onli": [1, 3, 4, 21, 59, 89, 113, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 201, 216, 220, 238, 245, 277, 306, 313, 338, 355, 362, 389, 407, 414, 446, 463, 486, 489, 516, 527, 541, 542, 544, 549, 555, 559, 560, 653, 669, 674, 676, 681, 682, 683, 711, 714, 715, 717, 720, 723, 746, 754, 759, 763, 776, 819, 835, 836, 838], "occur": [1, 4, 21, 135, 138, 139, 142, 143, 183, 188, 258, 324, 374, 427, 446, 471, 683, 714, 723], "math": [1, 487, 494], "iter": [1, 33, 43, 48, 53, 58, 65, 66, 67, 68, 69, 70, 71, 72, 105, 109, 110, 113, 146, 191, 212, 213, 214, 216, 227, 230, 235, 238, 246, 260, 270, 296, 299, 304, 306, 314, 325, 335, 345, 348, 353, 355, 363, 375, 385, 396, 399, 404, 407, 415, 429, 439, 453, 456, 461, 463, 466, 472, 481, 489, 514, 516, 517, 524, 538, 541, 542, 551, 556, 559, 560, 653, 665, 682, 683, 691, 692, 699, 716, 719, 720, 729, 737, 740, 743, 744, 745, 753, 754, 760, 763, 793, 795, 797, 819, 835, 838], "limit": [1, 82, 134, 143, 144, 145, 681, 682], "scope": [1, 838], "cover": [1, 201, 835], "k": [1, 21, 74, 110, 247, 261, 262, 315, 326, 327, 364, 376, 377, 416, 430, 431, 467, 473, 474, 485, 501, 556, 563, 720, 754, 761, 769], "surviv": 1, "line": [1, 4, 85, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 682, 708], "refer": [1, 3, 21, 40, 52, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 107, 108, 110, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 191, 220, 277, 285, 286, 289, 338, 389, 446, 486, 487, 489, 497, 501, 502, 503, 521, 527, 539, 547, 555, 556, 557, 558, 559, 563, 654, 665, 668, 669, 676, 713, 742, 769, 770], "item": [1, 65, 66, 67, 68, 69, 70, 71, 270, 335, 385, 439, 446, 481, 514, 524, 538, 551, 653, 684, 712, 754, 761, 762, 796, 797, 807, 838], "sever": [1, 143, 145, 654, 679], "activ": [1, 830], "same": [1, 3, 33, 51, 52, 53, 55, 59, 61, 83, 88, 107, 108, 138, 139, 140, 141, 143, 146, 147, 149, 204, 218, 225, 227, 234, 237, 238, 241, 243, 244, 260, 264, 265, 266, 267, 271, 274, 277, 278, 287, 294, 296, 303, 306, 309, 311, 312, 325, 329, 330, 331, 332, 343, 345, 352, 355, 358, 360, 361, 375, 379, 380, 381, 382, 394, 396, 403, 406, 407, 410, 412, 413, 429, 433, 434, 435, 436, 440, 443, 446, 451, 453, 460, 463, 465, 472, 476, 477, 478, 479, 484, 485, 489, 505, 507, 515, 516, 517, 523, 529, 531, 540, 541, 542, 544, 550, 555, 556, 557, 558, 559, 560, 563, 653, 668, 669, 673, 674, 676, 682, 683, 684, 724, 754, 769, 773, 833, 835], "renam": [1, 140, 256, 268, 322, 333, 371, 383, 425, 437], "A": [1, 2, 3, 6, 21, 33, 54, 55, 58, 59, 60, 63, 65, 67, 70, 74, 77, 82, 85, 87, 88, 91, 94, 98, 107, 108, 110, 133, 134, 136, 137, 138, 139, 140, 143, 145, 146, 147, 175, 179, 180, 186, 191, 212, 216, 217, 220, 241, 247, 253, 269, 278, 284, 289, 309, 315, 319, 334, 338, 358, 364, 368, 384, 389, 410, 416, 422, 438, 446, 467, 480, 486, 489, 491, 497, 498, 499, 500, 501, 502, 503, 514, 517, 519, 520, 523, 524, 527, 538, 542, 545, 546, 550, 551, 556, 557, 558, 559, 561, 563, 576, 598, 620, 664, 665, 666, 668, 669, 674, 676, 681, 682, 683, 690, 691, 692, 705, 710, 713, 715, 716, 719, 720, 721, 722, 725, 726, 727, 729, 730, 732, 739, 747, 749, 751, 752, 757, 759, 766, 767, 769, 819, 831, 835, 838], "few": [1, 83, 107, 108, 110, 831, 835, 838], "known": [1, 74, 143, 182, 187, 501, 669, 674, 833], "ok": 1, "back": [1, 138, 141, 184, 189, 706, 835], "6": [1, 3, 53, 71, 72, 77, 78, 83, 107, 108, 113, 135, 137, 138, 139, 140, 147, 148, 237, 238, 246, 247, 256, 268, 270, 271, 289, 306, 314, 315, 322, 333, 335, 355, 363, 364, 371, 383, 385, 406, 407, 415, 416, 425, 437, 439, 440, 463, 466, 467, 481, 489, 491, 495, 498, 499, 524, 549, 551, 557, 559, 560, 563, 654, 679, 705, 710, 720, 721, 729, 730, 759, 761, 762, 769, 833], "month": [1, 148], "figur": [1, 519, 545, 665], "out": [1, 52, 146, 149, 665, 714, 715, 836, 838], "sptxck2": 1, "worth": 1, "spend": 1, "extra": [1, 148, 149, 555, 556, 558, 559, 620], "species_taxon_check_2": 1, "still": [1, 4, 143, 144, 200, 489, 497, 557, 559], "horribl": 1, "check": [1, 21, 139, 162, 182, 187, 192, 201, 204, 215, 494, 495, 502, 503, 504, 505, 527, 528, 529, 564, 668, 669, 682, 773, 794, 838], "far": [1, 668], "go": [1, 683, 835, 838], "taxon_is_species_rank": 1, "need": [1, 2, 3, 4, 50, 53, 58, 83, 107, 108, 110, 133, 141, 143, 149, 161, 163, 201, 216, 220, 289, 338, 389, 489, 494, 495, 555, 556, 558, 559, 560, 653, 654, 669, 676, 679, 682, 683, 712, 715, 773, 774, 796, 838], "explan": [1, 668, 669], "onc": [1, 138, 149, 763], "twice": [1, 683], "follow": [1, 2, 3, 56, 57, 59, 71, 76, 78, 83, 84, 107, 108, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 191, 227, 255, 257, 296, 321, 323, 345, 370, 372, 396, 424, 426, 446, 453, 469, 470, 486, 487, 488, 489, 492, 493, 494, 495, 496, 500, 501, 502, 507, 531, 555, 556, 557, 559, 560, 564, 665, 668, 683, 709, 746, 797, 835, 836, 838], "consid": [1, 52, 74, 83, 88, 107, 108, 138, 143, 225, 260, 294, 325, 343, 375, 394, 429, 451, 472, 484, 486, 559, 560, 653, 681, 682, 683, 773, 796, 836], "impun": 1, "within": [1, 3, 52, 104, 110, 133, 135, 138, 139, 143, 145, 147, 220, 338, 389, 446, 514, 538, 559, 560, 620, 655, 665, 681, 682, 690, 732, 773, 776, 819, 835, 838], "mix": 1, "would": [1, 52, 83, 85, 88, 107, 108, 136, 138, 141, 143, 145, 147, 149, 238, 260, 306, 325, 355, 375, 407, 429, 463, 472, 486, 501, 514, 538, 563, 681, 682, 712, 762, 763, 769, 831], "conflict": [1, 718], "common": [1, 51, 56, 57, 68, 134, 138, 139, 140, 147, 148, 255, 257, 321, 323, 370, 372, 424, 426, 469, 470, 487, 488, 503, 598, 690, 715, 723, 736, 738, 761, 762, 770, 833, 835, 837], "built": [1, 7, 21, 33, 151, 164, 191, 201, 220, 277, 289, 338, 389, 446, 503, 527, 565, 576, 587, 598, 609, 620, 631, 642, 655, 690, 715, 754, 776, 796, 808, 819, 831], "rais": [1, 33, 50, 52, 53, 55, 59, 61, 63, 74, 83, 84, 85, 105, 107, 108, 109, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 138, 139, 145, 149, 150, 161, 162, 163, 182, 183, 184, 185, 187, 188, 189, 215, 222, 238, 239, 243, 245, 247, 258, 259, 261, 262, 264, 265, 266, 267, 287, 289, 291, 306, 307, 311, 313, 315, 324, 326, 327, 329, 330, 331, 332, 340, 355, 356, 360, 362, 364, 374, 376, 377, 379, 380, 381, 382, 391, 407, 408, 412, 414, 416, 427, 428, 430, 431, 433, 434, 435, 436, 448, 463, 464, 465, 467, 471, 473, 474, 476, 477, 478, 479, 484, 485, 491, 497, 507, 514, 516, 517, 518, 524, 531, 538, 541, 542, 543, 551, 555, 556, 557, 559, 560, 598, 642, 653, 665, 668, 669, 674, 682, 683, 684, 705, 712, 713, 715, 718, 720, 721, 723, 724, 726, 728, 730, 736, 738, 741, 751, 752, 753, 754, 759, 764, 773, 774, 775, 776, 836], "dir": 1, "exp": [1, 488, 493], "max": [1, 21, 74, 75, 95, 682, 683, 730], "min": [1, 683], "howev": [1, 3, 83, 105, 107, 108, 109, 138, 143, 148, 220, 338, 389, 446, 486, 559, 563, 674, 721, 776], "eg": 1, "matrix_exp": 1, "full": [1, 2, 89, 90, 136, 489, 726, 752, 794], "align": [1, 134, 135, 138, 139, 191, 201, 446, 830, 831, 833, 836], "aln": 1, "archaeal": 1, "arch": 1, "auxiliari": 1, "aux": 1, "bacteri": [1, 3, 489], "bact": 1, "citat": [1, 148], "cite": 1, "current": [1, 133, 134, 137, 138, 139, 140, 145, 147, 148, 201, 215, 275, 288, 444, 557, 642, 668, 674, 712, 725, 734, 735, 740, 830], "databas": [1, 134, 135, 137, 140, 148, 191, 728], "db": [1, 138], "dict": [1, 21, 33, 54, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 137, 140, 162, 182, 183, 184, 187, 188, 189, 191, 212, 216, 217, 219, 220, 247, 262, 269, 274, 275, 276, 315, 327, 334, 337, 338, 364, 377, 384, 388, 389, 416, 431, 438, 443, 444, 445, 446, 467, 474, 480, 482, 520, 525, 546, 552, 557, 560, 620, 666, 667, 728, 732, 741, 747, 761, 768, 796, 833, 838], "directori": 1, "distanc": [1, 3, 21, 106, 107, 108, 109, 110, 112, 113, 133, 142, 143, 264, 266, 329, 331, 379, 381, 433, 435, 476, 478, 487, 562, 563, 665, 668, 669, 671, 674, 676, 690, 704, 705, 713, 715, 730, 752, 759, 770, 833, 834, 835], "matrix": [1, 3, 21, 72, 105, 109, 110, 113, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 507, 512, 513, 514, 515, 516, 517, 518, 519, 523, 524, 526, 527, 528, 529, 531, 536, 537, 538, 540, 541, 542, 543, 544, 545, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 654, 665, 668, 670, 671, 672, 674, 675, 676, 678, 680, 727, 759, 770, 834], "dm": [1, 133, 502, 507, 514, 519, 522, 524, 531, 538, 545, 548, 549, 551, 555, 556, 559, 560, 665, 770], "eof": 1, "eukaryot": 1, "euk": 1, "filepath": [1, 4, 60, 64, 182, 183, 184, 187, 188, 189, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 560, 666, 667, 747, 768], "fp": 1, "frequenc": [1, 3, 52, 55, 74, 249, 250, 262, 264, 266, 327, 329, 331, 377, 379, 381, 418, 419, 431, 433, 435, 474, 476, 478, 679, 681, 683, 690, 710], "freq": [1, 247, 262, 315, 327, 364, 377, 416, 431, 467, 474], "idx": 1, "maximum": [1, 104, 138, 139, 489, 556, 598, 653, 669, 673, 677, 682, 683, 715], "minimum": [1, 148, 250, 260, 325, 375, 419, 429, 472, 489, 559, 653, 682, 683], "mitochondri": [1, 148, 274, 286, 443], "mt": 1, "num": 1, "observ": [1, 3, 83, 95, 97, 102, 107, 108, 113, 247, 315, 364, 416, 467, 489, 563, 654, 679, 682, 683, 741, 769, 838], "ob": [1, 77, 102], "origin": [1, 65, 67, 68, 70, 83, 107, 108, 110, 136, 138, 143, 145, 146, 238, 306, 355, 407, 446, 463, 501, 555, 556, 557, 558, 559, 563, 668, 676, 684, 713, 769, 770, 835, 838], "orig": 1, "output": [1, 59, 134, 135, 143, 145, 146, 147, 263, 328, 378, 432, 475, 488, 555, 559, 560, 598, 669, 762, 770, 838], "paramet": [1, 3, 4, 7, 21, 22, 33, 35, 38, 47, 50, 52, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 113, 149, 151, 161, 162, 163, 174, 176, 177, 178, 179, 180, 182, 183, 184, 187, 188, 189, 191, 192, 198, 201, 204, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 225, 227, 234, 237, 238, 239, 243, 245, 246, 247, 250, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 272, 274, 275, 276, 277, 278, 284, 286, 287, 288, 291, 294, 296, 303, 306, 307, 311, 313, 314, 315, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 340, 343, 345, 352, 355, 356, 360, 362, 363, 364, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 389, 391, 394, 396, 403, 406, 407, 408, 412, 414, 415, 416, 419, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 442, 443, 444, 445, 446, 448, 451, 453, 460, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 507, 512, 514, 516, 517, 518, 519, 520, 524, 525, 528, 529, 531, 536, 538, 541, 542, 543, 544, 545, 546, 551, 552, 555, 556, 557, 558, 559, 560, 561, 563, 586, 598, 619, 630, 642, 653, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 690, 705, 707, 708, 711, 712, 713, 714, 715, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 751, 753, 754, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 773, 774, 775, 776, 793, 794, 795, 796, 797, 807, 808, 819, 838], "param": 1, "phylogeni": [1, 145, 562, 563], "phylo": [1, 145], "previou": [1, 65, 66, 67, 68, 69, 70, 225, 294, 343, 394, 451, 555, 557, 559], "prev": 1, "prob": [1, 33, 38, 51, 58], "prot": [1, 137], "rec": 1, "ref": [1, 134, 707], "deviat": [1, 556, 673, 676, 677, 680], "stdev": 1, "statist": [1, 3, 74, 77, 82, 88, 95, 487, 489, 555, 557, 558, 559, 560, 563, 668, 669, 673, 679, 682, 683, 830], "str": [1, 4, 18, 22, 32, 38, 43, 48, 60, 64, 72, 105, 109, 110, 111, 112, 113, 134, 140, 141, 147, 151, 160, 173, 176, 177, 178, 182, 183, 184, 187, 188, 189, 199, 211, 217, 219, 220, 222, 230, 235, 236, 239, 243, 244, 245, 246, 247, 258, 259, 261, 263, 264, 265, 266, 267, 269, 270, 276, 277, 285, 291, 299, 304, 305, 307, 311, 312, 313, 314, 315, 324, 326, 328, 329, 330, 331, 332, 334, 335, 337, 338, 340, 348, 353, 354, 356, 360, 361, 362, 363, 364, 374, 376, 378, 379, 380, 381, 382, 384, 385, 388, 389, 391, 399, 404, 405, 408, 412, 413, 414, 415, 416, 427, 428, 430, 432, 433, 434, 435, 436, 438, 439, 445, 446, 448, 456, 461, 462, 464, 465, 466, 467, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 503, 504, 507, 513, 514, 516, 518, 519, 520, 524, 525, 528, 531, 537, 538, 541, 543, 545, 546, 551, 552, 555, 556, 558, 559, 560, 561, 574, 576, 585, 596, 598, 607, 609, 618, 620, 629, 640, 651, 655, 664, 665, 666, 667, 674, 681, 682, 690, 704, 708, 712, 723, 724, 736, 738, 747, 751, 753, 757, 759, 768, 769, 770, 775, 789, 794, 806, 818, 829], "struct": [1, 7, 140], "temporari": 1, "temp": 1, "taxa": [1, 148, 669, 683, 715], "tax": [1, 135], "taxon": [1, 137, 140, 728, 835], "taxonom": [1, 83, 107, 108], "taxonomi": [1, 134, 143, 148, 277, 285, 286, 728, 729, 762], "varianc": [1, 78, 556, 558, 559, 654, 670, 673, 677, 682], "var": [1, 556], "docstr": [1, 836], "first": [1, 3, 21, 65, 66, 67, 68, 69, 70, 71, 74, 83, 98, 107, 108, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 163, 213, 218, 258, 260, 274, 275, 287, 324, 325, 374, 375, 427, 429, 443, 446, 471, 472, 486, 487, 488, 489, 507, 531, 555, 557, 587, 642, 654, 670, 679, 682, 710, 714, 723, 724, 729, 732, 762, 763, 807, 831, 835, 836, 838], "short": [1, 836, 838], "summari": [1, 49, 489, 513, 537, 836], "sens": [1, 669, 683, 762, 770], "own": [1, 50, 53, 59, 133, 138, 144, 147, 149, 679], "separ": [1, 2, 3, 134, 135, 138, 139, 141, 142, 143, 144, 145, 559, 669], "rest": 1, "newlin": [1, 4, 138, 143, 145, 149, 151, 182, 183, 187, 188], "statement": 1, "otherwis": [1, 4, 21, 34, 50, 53, 62, 77, 78, 138, 140, 143, 146, 504, 505, 507, 512, 516, 528, 529, 531, 536, 541, 544, 560, 748, 833], "recogn": 1, "interpret": [1, 3, 52, 83, 105, 107, 108, 109, 133, 143, 486, 668, 669, 676], "access": [1, 2, 7, 56, 57, 133, 137, 138, 140, 148, 255, 257, 278, 284, 321, 323, 370, 372, 424, 426, 469, 470, 502, 770, 776], "interact": [1, 563], "session": 1, "obj": [1, 149, 163, 184, 189, 787, 838], "__doc__": 1, "gener": [1, 3, 50, 53, 65, 71, 72, 73, 110, 139, 140, 141, 143, 147, 148, 161, 163, 176, 178, 182, 187, 190, 246, 260, 261, 314, 325, 326, 363, 375, 376, 415, 429, 430, 446, 466, 472, 473, 502, 526, 553, 555, 556, 557, 561, 653, 655, 665, 668, 679, 682, 683, 689, 831, 833, 837], "autom": 1, "tool": [1, 65, 68, 134, 135, 138, 145, 148, 486, 665, 669, 836], "third": [1, 486, 502, 732, 838], "parti": 1, "addit": [1, 3, 71, 83, 106, 107, 108, 112, 137, 138, 139, 140, 141, 145, 146, 486, 487, 488, 502, 527, 690, 711, 723, 724, 769, 796, 836], "rapidli": [1, 838], "keep": [1, 140, 214, 227, 296, 345, 396, 453, 653, 752, 753], "place": [1, 62, 143, 147, 287, 488, 653, 674, 677, 707, 732, 764], "easier": [1, 191], "instead": [1, 2, 3, 55, 100, 137, 138, 140, 149, 151, 161, 162, 163, 214, 247, 260, 262, 264, 266, 315, 325, 327, 329, 331, 364, 375, 377, 379, 381, 416, 429, 431, 433, 435, 467, 472, 474, 476, 478, 503, 555, 557, 559, 673, 682, 683, 715, 770, 771, 831], "name2": 1, "name3": 1, "possibli": 1, "see": [1, 3, 58, 59, 60, 64, 71, 72, 83, 105, 107, 108, 109, 110, 112, 113, 135, 137, 138, 139, 143, 145, 146, 148, 149, 217, 219, 243, 269, 276, 277, 288, 311, 334, 337, 360, 384, 388, 412, 438, 445, 446, 465, 480, 482, 507, 520, 525, 531, 546, 552, 555, 556, 557, 558, 559, 560, 563, 654, 665, 666, 667, 674, 676, 678, 679, 683, 747, 768, 831, 836, 838], "collis": 1, "numpi": [1, 3, 109, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 507, 521, 531, 539, 547, 555, 559, 561, 563, 564, 598, 620, 642, 653, 654, 679, 681, 682, 683, 684, 715, 754, 833], "matplotlib": [1, 3, 519, 545, 655, 665], "anoth": [1, 3, 38, 47, 50, 59, 83, 107, 108, 140, 142, 143, 192, 198, 201, 204, 210, 215, 218, 225, 234, 243, 265, 267, 278, 284, 294, 303, 311, 330, 332, 343, 352, 360, 380, 382, 394, 403, 412, 434, 436, 446, 451, 460, 465, 477, 479, 505, 529, 563], "packag": [1, 2, 3, 21, 71, 73, 106, 136, 138, 143, 145, 501, 502, 555, 556, 557, 558, 559, 562, 668, 669, 676, 679, 831, 834, 835, 836, 837], "encourag": [1, 682, 836], "style": [1, 486, 766, 767], "np": [1, 52, 55, 83, 90, 107, 108, 134, 220, 222, 239, 240, 242, 243, 247, 248, 258, 259, 264, 265, 266, 267, 268, 291, 307, 308, 310, 311, 315, 316, 324, 329, 330, 331, 332, 333, 338, 340, 356, 357, 359, 360, 364, 365, 374, 379, 380, 381, 382, 383, 386, 389, 391, 408, 409, 411, 412, 416, 417, 427, 428, 433, 434, 435, 436, 437, 446, 448, 464, 465, 467, 471, 476, 477, 478, 479, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 555, 557, 558, 559, 560, 563, 564, 653, 654, 665, 678, 679, 681, 682, 683, 684, 732, 754, 769, 773], "npt": 1, "panda": [1, 3, 33, 57, 62, 109, 134, 135, 148, 220, 257, 323, 338, 372, 389, 426, 470, 489, 522, 548, 549, 555, 556, 558, 559, 560, 564, 598, 642, 654, 665, 681, 682, 728, 773, 833], "pd": [1, 3, 33, 53, 57, 62, 83, 105, 134, 135, 148, 257, 323, 372, 426, 446, 470, 489, 502, 514, 522, 524, 538, 548, 549, 551, 555, 556, 559, 564, 654, 655, 665, 668, 676, 681, 682, 728, 773], "pyplot": [1, 3], "plt": [1, 3], "similar": [1, 65, 66, 67, 68, 69, 70, 98, 106, 135, 137, 138, 139, 142, 145, 149, 446, 555, 556, 557, 558, 559, 669, 674, 676, 682, 683, 833, 835], "below": [1, 136, 138, 139, 143, 145, 147, 148, 277, 289, 446, 556, 557, 665, 682, 690], "doc": [1, 109, 136, 137, 138, 145, 191, 503, 521, 527, 539, 547, 769, 770, 836], "readm": 1, "md": [1, 138, 141], "explain": [1, 140, 141, 144, 501, 564, 598, 642, 654, 655, 668, 674, 676], "r": [1, 2, 3, 4, 21, 83, 88, 89, 90, 92, 107, 108, 139, 140, 148, 486, 487, 488, 492, 493, 494, 495, 501, 555, 556, 557, 558, 559, 563, 665, 668, 669, 676, 712, 753], "mod": [1, 2], "skbio": [1, 830], "currentmodul": [1, 2], "defin": [1, 3, 33, 59, 61, 67, 70, 74, 75, 76, 77, 79, 81, 82, 85, 86, 87, 88, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 113, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 151, 191, 201, 215, 225, 243, 261, 262, 277, 278, 285, 286, 294, 311, 326, 327, 343, 360, 376, 377, 394, 412, 430, 431, 451, 465, 473, 474, 485, 487, 488, 492, 493, 494, 495, 496, 498, 499, 500, 503, 519, 545, 557, 560, 665, 679, 766, 767, 770, 773, 807, 831, 833, 835, 836, 838], "oper": [1, 3, 50, 53, 59, 83, 107, 108, 134, 138, 143, 214, 220, 249, 250, 338, 389, 418, 419, 446, 486, 488, 498, 499, 500, 502, 503, 539, 557, 558, 674, 728, 752, 769, 797, 831, 833], "mean": [1, 4, 141, 143, 149, 201, 216, 249, 250, 418, 419, 486, 489, 492, 501, 514, 524, 538, 551, 620, 642, 668, 672, 673, 674, 677, 679, 680, 682, 683, 831, 835], "frequencydistribut": 1, "map": [1, 3, 54, 61, 110, 164, 557, 560, 563, 564, 598, 642, 665, 681, 683, 729, 732, 833], "necessarili": [1, 50, 53, 59, 144, 247, 315, 364, 416, 446, 467, 684], "shannon": [1, 52, 87, 98], "entropi": [1, 52, 87, 98, 100], "normal": [1, 3, 82, 108, 139, 140, 555, 559, 674, 675, 676, 679, 680, 682, 683, 712], "class": [1, 7, 21, 33, 56, 57, 72, 74, 77, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 161, 163, 164, 176, 178, 179, 180, 181, 191, 201, 220, 238, 255, 257, 277, 289, 306, 321, 323, 338, 355, 370, 372, 389, 407, 424, 426, 446, 463, 469, 470, 489, 503, 527, 565, 576, 587, 598, 609, 620, 631, 642, 655, 690, 712, 769, 776, 796, 808, 819, 831], "autosummari": 1, "toctre": 1, "copyright": [1, 2, 138, 145], "2013": [1, 2, 21, 71, 81, 501, 665], "develop": [1, 2, 3, 7, 110, 113, 137, 161, 162, 163, 489, 770, 831, 836, 838], "team": [1, 2], "distribut": [1, 2, 82, 137, 486, 561, 674, 679, 680, 682, 683], "under": [1, 2, 85, 109, 138, 220, 338, 389, 446, 598, 682, 830], "term": [1, 2, 3, 52, 140, 563], "modifi": [1, 2, 62, 138, 140, 147, 181, 446, 544, 642, 675, 754], "bsd": [1, 2, 830], "licens": [1, 2, 830], "txt": [1, 2, 137, 148], "softwar": [1, 2, 3, 138, 139, 830], "random": [1, 82, 95, 133, 555, 559, 561, 653, 669, 679, 681, 682, 683, 715, 754], "choic": [1, 50, 53, 142, 674], "util": [1, 2, 60, 64, 148, 161, 163, 217, 219, 269, 276, 277, 285, 286, 289, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 666, 667, 747, 768, 830, 831], "indic": [1, 3, 20, 34, 35, 38, 47, 56, 57, 74, 77, 78, 93, 113, 133, 138, 139, 149, 191, 192, 198, 201, 204, 210, 222, 225, 227, 234, 240, 242, 245, 246, 248, 251, 252, 253, 254, 255, 256, 257, 260, 265, 267, 268, 270, 277, 278, 284, 291, 294, 296, 303, 308, 310, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 330, 332, 333, 335, 340, 343, 345, 352, 357, 359, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 380, 382, 383, 385, 386, 391, 394, 396, 403, 409, 411, 414, 415, 417, 420, 421, 422, 423, 424, 425, 426, 429, 434, 436, 437, 439, 448, 451, 453, 460, 466, 468, 469, 470, 472, 477, 479, 481, 489, 555, 557, 558, 559, 563, 653, 664, 665, 681, 725, 727, 765, 808, 819, 835, 836, 838], "pass": [1, 3, 4, 33, 40, 53, 60, 61, 64, 105, 109, 110, 111, 112, 134, 136, 138, 140, 145, 146, 147, 161, 162, 163, 175, 181, 182, 183, 184, 186, 187, 188, 189, 217, 219, 220, 243, 245, 247, 269, 270, 276, 287, 311, 313, 315, 334, 335, 337, 338, 360, 362, 364, 384, 385, 388, 389, 412, 414, 416, 438, 439, 445, 446, 465, 467, 480, 481, 482, 507, 520, 525, 531, 542, 544, 546, 552, 557, 560, 598, 666, 667, 682, 736, 738, 747, 768, 770, 819, 835, 836, 838], "alwai": [1, 3, 4, 21, 137, 140, 143, 145, 162, 191, 212, 287, 720, 776, 838], "updat": [1, 137, 138, 148, 201, 215, 446], "incorrect": [1, 3], "wors": 1, "mislead": [1, 52, 113], "sai": [1, 191, 201, 683], "itself": [1, 5, 138, 145, 148, 191, 220, 277, 338, 389, 446, 563, 655, 690, 770, 833], "examin": [1, 797, 838], "off": [1, 88, 99, 220, 338, 389, 486, 682, 713, 753, 769, 773, 838], "rewrit": 1, "allow": [1, 4, 134, 138, 139, 143, 145, 146, 149, 161, 163, 201, 238, 247, 306, 315, 355, 364, 407, 416, 463, 467, 486, 507, 514, 531, 538, 555, 556, 558, 559, 560, 564, 674, 720, 762, 797, 838], "get": [1, 4, 5, 72, 200, 201, 277, 286, 502, 557, 653, 669, 717, 756], "rid": 1, "In": [1, 3, 21, 52, 83, 107, 108, 110, 138, 139, 140, 141, 143, 145, 148, 250, 287, 419, 486, 489, 502, 556, 557, 563, 653, 668, 669, 674, 679, 683, 690, 710, 723, 769, 831, 833, 835, 838], "particular": [1, 3, 690, 772, 838], "scatter": [1, 665], "magic": 1, "constant": [1, 82, 486, 489, 539, 557, 681], "whose": [1, 140, 146, 518, 543, 556, 557, 677], "think": 1, "about": [1, 3, 60, 64, 95, 136, 138, 139, 143, 147, 149, 201, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 484, 520, 525, 546, 552, 654, 666, 667, 676, 682, 683, 747, 768, 771, 772, 833, 836], "instanc": [1, 60, 64, 149, 163, 176, 178, 179, 180, 182, 187, 201, 216, 217, 219, 238, 269, 276, 306, 334, 337, 355, 384, 388, 407, 438, 445, 463, 480, 482, 484, 485, 503, 505, 520, 525, 527, 529, 544, 546, 552, 557, 559, 560, 561, 575, 597, 608, 641, 652, 665, 666, 667, 683, 690, 706, 747, 768, 769, 776, 777, 780, 787, 835, 838], "wrong": [1, 93], "win_siz": 1, "decrement": 1, "leav": [1, 88, 137], "space": [1, 3, 138, 143, 145, 147, 201, 204, 213, 486, 487, 488, 492, 493, 494, 495, 598, 655, 665, 668, 675], "scroll": 1, "bar": [1, 795, 838], "right": [1, 59, 74, 100, 143, 486, 487, 488, 492, 496, 498, 499, 500, 501, 732, 773, 774, 838], "_scroll_bar_s": 1, "insid": [1, 2, 140, 143], "block": [1, 67, 70, 110, 795], "tripl": 1, "doubl": [1, 74, 75, 76, 77, 79, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 182, 187, 668, 674], "quot": [1, 143], "sure": [1, 542, 683, 838], "outdat": 1, "wast": 1, "lot": [1, 668], "correct": [1, 77, 78, 85, 138, 489, 746, 752, 831], "priceless": 1, "worthless": 1, "jim": [1, 139], "fulton": 1, "There": [1, 3, 59, 95, 135, 140, 143, 146, 244, 312, 361, 413, 527, 674, 682, 683, 831, 835, 838], "approach": [1, 557, 682, 691, 692, 716, 719], "unittest": 1, "Their": 1, "purpos": [1, 3, 71, 74, 148, 277, 679, 838], "execut": [1, 149, 576, 620, 797, 819, 838], "given": [1, 3, 60, 64, 74, 75, 76, 79, 84, 85, 88, 92, 93, 95, 100, 102, 104, 105, 109, 110, 113, 138, 139, 143, 144, 161, 163, 179, 180, 182, 183, 187, 188, 214, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 501, 517, 520, 525, 542, 546, 552, 556, 557, 560, 666, 667, 669, 673, 678, 680, 682, 690, 725, 747, 768, 795, 796, 808, 838], "produc": [1, 134, 135, 145, 146, 161, 260, 325, 375, 429, 472, 668, 676], "specifi": [1, 4, 55, 59, 113, 134, 136, 138, 139, 140, 141, 142, 145, 147, 148, 149, 181, 191, 201, 214, 216, 220, 227, 245, 247, 263, 274, 286, 287, 289, 296, 313, 315, 328, 338, 345, 362, 364, 378, 389, 396, 414, 416, 432, 443, 446, 453, 467, 475, 487, 488, 489, 494, 495, 497, 504, 507, 514, 516, 518, 519, 524, 528, 531, 538, 541, 543, 545, 551, 555, 556, 557, 558, 559, 563, 642, 665, 673, 674, 680, 712, 720, 751, 754, 756, 759, 762, 769, 796, 808, 819, 838], "lend": 1, "whatev": [1, 149], "emploi": [1, 78], "principl": [1, 679], "everi": [1, 74, 148, 488, 498, 499, 500, 501, 560, 711, 726, 732, 836], "critic": [1, 679, 680, 682, 683, 710], "fulli": [1, 140, 831], "draw": [1, 679, 681, 682, 683, 708, 751], "conclus": 1, "scientif": [1, 134, 527, 836], "bug": 1, "unhappi": 1, "user": [1, 2, 3, 52, 106, 114, 134, 148, 149, 151, 161, 162, 163, 182, 184, 187, 189, 489, 669, 674, 771, 833, 836], "who": [1, 143, 683], "ll": [1, 3, 83, 107, 108, 556, 557, 560, 654, 679, 682, 683, 835, 838], "never": [1, 138, 147], "actual": [1, 149, 181, 557], "meet": [1, 71, 185, 216, 765], "retract": 1, "public": [1, 139, 665, 836], "opportun": 1, "invent": [1, 139], "often": [1, 3, 83, 105, 109, 137, 138, 140, 502, 563, 669, 674, 679, 794], "help": [1, 75, 148], "idea": [1, 682], "ve": [1, 3, 138, 139, 683, 835], "told": 1, "spirit": 1, "shortest": 1, "alia": [1, 7, 141, 521, 547, 736, 738], "api": [1, 138, 185, 483], "caus": [1, 4, 21, 287], "break": 1, "rightli": 1, "so": [1, 2, 3, 4, 5, 7, 52, 65, 66, 67, 68, 69, 70, 72, 83, 105, 107, 108, 109, 138, 143, 149, 201, 204, 249, 250, 418, 419, 557, 631, 654, 668, 669, 670, 674, 676, 679, 681, 682, 683, 769, 831, 835, 838], "treat": [1, 50, 51, 52, 53, 138, 142, 220, 263, 328, 338, 378, 389, 432, 446, 475, 484, 682], "prototyp": 1, "product": [1, 191, 496, 557], "fine": [1, 2], "without": [1, 50, 53, 59, 61, 95, 108, 135, 143, 145, 147, 446, 486, 653, 665, 683, 684, 721, 730, 762, 795, 796, 831, 836], "algorithm": [1, 65, 68, 140, 555, 556, 557, 559, 564, 565, 576, 587, 598, 609, 620, 631, 642, 668, 669, 676, 713, 770, 771], "must": [1, 21, 33, 50, 53, 59, 60, 64, 83, 85, 107, 108, 109, 110, 113, 134, 136, 138, 139, 142, 143, 144, 145, 147, 162, 216, 217, 219, 220, 238, 243, 263, 269, 274, 276, 306, 311, 328, 334, 337, 338, 355, 360, 378, 384, 388, 389, 407, 412, 432, 438, 443, 445, 446, 463, 465, 475, 480, 482, 489, 503, 516, 520, 525, 541, 546, 552, 555, 556, 557, 558, 559, 561, 563, 586, 619, 630, 653, 665, 666, 667, 668, 673, 682, 683, 684, 712, 747, 754, 762, 768, 769, 770, 773, 775, 795, 796, 819, 838], "finish": 1, "decid": [1, 674, 838], "littl": 1, "coupl": [1, 201], "mayb": 1, "huge": 1, "amount": [1, 560, 690, 838], "closer": [1, 3, 838], "done": [1, 52, 489, 559, 586, 619, 630], "90": [1, 52, 141, 838], "vastli": 1, "reduc": [1, 110, 559, 653, 674], "spent": 1, "debug": [1, 74, 796, 807, 838], "went": 1, "ha": [1, 3, 4, 21, 33, 51, 56, 57, 65, 66, 67, 113, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 183, 188, 220, 237, 238, 241, 244, 254, 255, 257, 271, 273, 274, 275, 277, 287, 288, 289, 306, 309, 312, 320, 321, 323, 338, 355, 358, 361, 369, 370, 372, 389, 406, 407, 410, 413, 423, 424, 426, 440, 441, 443, 444, 446, 463, 468, 469, 470, 491, 502, 653, 668, 670, 681, 682, 683, 711, 731, 734, 735, 749, 753, 769, 796, 833, 835, 836], "wrote": 1, "last": [1, 51, 137, 145, 260, 287, 325, 375, 429, 446, 472, 557, 654, 838], "suit": [1, 669], "And": [1, 141, 486, 833], "rememb": [1, 2, 191], "quick": [1, 507, 531, 539, 665, 668], "syntax": 1, "run": [1, 2, 3, 83, 105, 107, 108, 109, 139, 146, 245, 313, 362, 414, 489, 555, 556, 557, 559, 560, 563, 575, 597, 608, 641, 652, 665, 833, 838], "anyth": [1, 3, 138, 139, 146, 149, 446, 796, 807, 819, 838], "even": [1, 65, 66, 67, 73, 87, 93, 98, 102, 138, 143, 287, 555, 559, 683, 763], "seem": [1, 682], "trivial": 1, "second": [1, 3, 21, 65, 66, 67, 68, 69, 70, 71, 139, 145, 149, 163, 191, 213, 278, 489, 507, 531, 683, 729, 732, 762, 831, 838], "elimin": 1, "frustrat": 1, "turn": [1, 220, 338, 389, 676, 773, 838], "made": [1, 2, 33, 95, 446, 489, 503, 527, 653, 706, 723, 724, 746, 772], "ago": 1, "didn": [1, 138, 838], "signific": [1, 3, 489, 555, 557, 558, 559, 560, 563, 682, 683], "note": [1, 7, 21, 33, 40, 45, 50, 51, 52, 53, 54, 55, 58, 59, 61, 62, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 107, 108, 110, 112, 137, 138, 139, 140, 141, 143, 145, 146, 191, 201, 202, 203, 215, 220, 223, 224, 227, 238, 241, 244, 247, 249, 260, 271, 273, 274, 275, 277, 278, 285, 286, 287, 288, 289, 292, 293, 296, 306, 309, 312, 315, 325, 338, 341, 342, 345, 355, 358, 361, 364, 375, 389, 392, 393, 396, 407, 410, 413, 416, 418, 429, 440, 441, 443, 444, 446, 449, 450, 453, 463, 467, 472, 484, 485, 489, 494, 495, 497, 503, 507, 514, 521, 523, 524, 527, 531, 538, 539, 544, 547, 550, 551, 555, 556, 557, 558, 559, 560, 563, 653, 665, 668, 669, 674, 676, 677, 682, 683, 684, 708, 710, 711, 712, 713, 715, 720, 726, 728, 754, 759, 761, 762, 763, 764, 769, 770, 773, 775, 794, 795, 833, 835, 836, 838], "travi": 1, "ci": [1, 73, 82, 89], "section": [1, 59, 138, 139, 144, 147, 277, 446, 556, 557, 668, 669, 836], "further": [1, 149, 682, 835], "framework": [1, 486], "test_module_nam": 1, "py": [1, 2, 139, 149], "folder": [1, 2, 794], "temptat": 1, "verifi": [1, 137, 149, 182, 187], "complet": [1, 71, 89, 90, 139, 140, 143, 679, 772, 831], "behav": [1, 220, 338, 389, 557], "old": 1, "__init__": [1, 2, 149, 161, 163], "instal": [1, 2, 771], "via": [1, 50, 53, 61, 74, 89, 90, 138, 145, 243, 277, 278, 284, 311, 360, 412, 465, 555, 557, 558], "setup": [1, 838], "minim": [1, 143], "deep": [1, 37, 203, 223, 224, 292, 293, 341, 342, 392, 393, 446, 449, 450, 515, 523, 540, 550], "That": [1, 143, 263, 328, 378, 432, 475], "distancematrix": [1, 109, 110, 113, 133, 142, 483, 503, 522, 555, 556, 557, 558, 559, 560, 561, 563, 665, 674, 759, 770], "u": [1, 3, 67, 70, 83, 89, 92, 107, 108, 137, 138, 140, 148, 225, 230, 234, 235, 273, 294, 299, 303, 304, 343, 348, 352, 353, 394, 399, 403, 404, 441, 451, 456, 460, 461, 489, 492, 493, 557, 678, 683, 833, 838], "prevent": [1, 21], "accident": [1, 771], "regress": [1, 486, 557, 676, 683], "float": [1, 52, 55, 65, 66, 67, 68, 69, 70, 71, 72, 83, 88, 89, 105, 107, 108, 109, 110, 113, 133, 134, 140, 142, 143, 243, 249, 250, 264, 266, 311, 329, 331, 360, 379, 381, 412, 418, 419, 433, 435, 465, 476, 478, 484, 485, 489, 490, 492, 493, 494, 495, 497, 498, 500, 502, 503, 517, 542, 557, 559, 561, 563, 576, 620, 665, 680, 682, 683, 690, 705, 713, 714, 715, 720, 721, 730, 761, 769, 773], "point": [1, 52, 85, 88, 90, 133, 136, 149, 162, 191, 263, 270, 328, 335, 378, 385, 432, 439, 475, 481, 559, 565, 587, 642, 665, 682, 683, 752, 773, 794], "arrai": [1, 3, 21, 52, 55, 83, 107, 108, 138, 144, 220, 237, 240, 242, 248, 265, 267, 268, 271, 308, 310, 316, 330, 332, 333, 338, 357, 359, 365, 380, 382, 383, 386, 389, 406, 409, 411, 417, 434, 436, 437, 440, 446, 477, 479, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 513, 521, 529, 537, 539, 547, 563, 564, 598, 620, 642, 654, 673, 677, 679, 680, 681, 682, 683, 684, 732, 761, 769, 833], "permut": [1, 3, 192, 555, 557, 558, 559, 560, 563], "assert_almost_equ": 1, "compar": [1, 3, 93, 107, 113, 134, 135, 218, 259, 264, 265, 266, 267, 270, 329, 330, 331, 332, 335, 379, 380, 381, 382, 385, 428, 433, 434, 435, 436, 439, 476, 477, 478, 479, 481, 489, 502, 505, 512, 529, 536, 557, 563, 681, 682, 683, 713, 714, 715, 743, 773, 774, 833, 835], "assertequ": 1, "saniti": 1, "least": [1, 56, 57, 95, 143, 245, 254, 255, 257, 313, 320, 321, 323, 362, 369, 370, 372, 414, 423, 424, 426, 468, 469, 470, 489, 557, 665, 682, 683, 772, 836, 838], "testcas": 1, "classnametest": 1, "contain": [1, 2, 3, 21, 33, 51, 53, 59, 65, 66, 67, 68, 69, 70, 71, 74, 105, 106, 109, 110, 113, 133, 134, 136, 137, 138, 139, 141, 142, 144, 145, 147, 148, 149, 181, 222, 227, 240, 242, 247, 248, 251, 252, 253, 256, 260, 261, 262, 268, 270, 277, 291, 296, 308, 310, 315, 316, 317, 318, 319, 322, 325, 326, 327, 333, 335, 340, 345, 357, 359, 364, 365, 366, 367, 368, 371, 373, 375, 376, 377, 383, 385, 386, 391, 396, 409, 411, 416, 417, 420, 421, 422, 425, 429, 430, 431, 437, 439, 448, 453, 467, 472, 473, 474, 481, 483, 484, 489, 501, 502, 516, 517, 519, 541, 542, 545, 549, 555, 556, 557, 558, 559, 560, 562, 564, 654, 665, 669, 708, 712, 720, 769, 770, 794, 819, 830, 833, 834, 835], "complic": [1, 831], "classnametests_test_typ": 1, "subclass": [1, 59, 136, 138, 145, 147, 149, 220, 238, 306, 338, 355, 389, 407, 446, 463, 502, 503, 561, 769, 796], "order": [1, 3, 21, 43, 48, 54, 58, 59, 62, 105, 109, 133, 134, 138, 142, 143, 144, 145, 147, 213, 220, 235, 244, 247, 262, 275, 277, 288, 304, 312, 315, 327, 338, 353, 361, 364, 377, 389, 404, 413, 416, 431, 444, 446, 461, 467, 474, 489, 505, 507, 514, 516, 524, 529, 531, 538, 541, 544, 549, 551, 555, 556, 557, 558, 559, 560, 563, 668, 677, 681, 682, 740, 759, 760, 761, 769, 771, 773, 835, 838], "share": [1, 21, 56, 57, 59, 74, 238, 255, 257, 306, 321, 323, 355, 370, 372, 407, 424, 426, 446, 463, 469, 470, 835], "privat": [1, 140, 708], "classnametests_priv": 1, "why": [1, 81], "after": [1, 2, 21, 50, 53, 65, 66, 67, 138, 139, 147, 148, 149, 204, 215, 556, 557, 560, 563, 668, 683, 744, 746, 763], "though": [1, 85, 138, 139, 145, 146, 489, 539, 555, 559, 770, 838], "assum": [1, 3, 74, 83, 85, 91, 94, 107, 108, 136, 138, 139, 142, 144, 161, 163, 227, 273, 274, 275, 296, 345, 396, 453, 502, 503, 507, 531, 542, 563, 564, 669, 673, 679, 680, 682, 683], "haven": 1, "test_method_nam": 1, "lead": [1, 83, 105, 107, 108, 109, 138, 139, 142], "trail": [1, 138, 139, 142], "underscor": [1, 143, 145], "ignor": [1, 21, 52, 74, 83, 107, 108, 135, 136, 137, 138, 139, 142, 143, 149, 245, 246, 287, 288, 313, 314, 362, 363, 414, 415, 466, 516, 541, 555, 556, 557, 558, 559, 674, 681, 682, 720, 739, 774, 796, 797, 833, 835, 838], "liter": [1, 143], "substr": 1, "particularli": [1, 712], "complex": [1, 143, 838], "discret": 1, "test_method_name_suffix": 1, "test_init_empti": 1, "test_init_singl": 1, "test_init_wrong_typ": 1, "option": [1, 4, 21, 33, 50, 52, 53, 55, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 74, 77, 78, 83, 88, 89, 90, 95, 100, 105, 107, 108, 109, 110, 113, 136, 138, 139, 144, 145, 147, 148, 151, 161, 162, 163, 182, 183, 184, 187, 188, 189, 191, 201, 212, 216, 217, 218, 219, 220, 225, 237, 238, 239, 243, 245, 246, 247, 250, 258, 260, 261, 262, 264, 266, 269, 276, 277, 286, 287, 288, 294, 306, 307, 311, 313, 314, 315, 324, 325, 326, 327, 329, 331, 334, 337, 338, 343, 355, 356, 360, 362, 363, 364, 374, 375, 376, 377, 379, 381, 384, 388, 389, 394, 406, 407, 408, 412, 414, 415, 416, 419, 427, 429, 430, 431, 433, 435, 438, 443, 444, 445, 446, 451, 463, 464, 465, 466, 467, 471, 472, 473, 474, 476, 478, 480, 482, 485, 489, 494, 495, 497, 503, 514, 516, 517, 519, 520, 525, 538, 541, 542, 544, 545, 546, 552, 555, 556, 557, 558, 559, 560, 561, 563, 598, 653, 665, 666, 667, 669, 670, 673, 674, 676, 677, 680, 681, 682, 683, 684, 690, 711, 728, 733, 747, 754, 761, 762, 768, 769, 770, 774, 795, 796, 819, 833, 838], "doe": [1, 4, 33, 50, 51, 53, 59, 62, 71, 134, 136, 138, 139, 141, 143, 145, 147, 238, 277, 278, 284, 287, 306, 355, 407, 463, 484, 502, 521, 544, 547, 555, 557, 559, 598, 674, 682, 683, 706, 715, 726, 739, 752, 759, 762, 769, 773, 831], "enough": [1, 81, 138, 143, 683], "verbos": 1, "mode": [1, 4, 52, 149, 287, 683, 796], "immedi": [1, 138, 145, 732], "fail": [1, 83, 84, 105, 107, 108, 109, 215, 559, 679, 796, 797, 838], "true": [1, 3, 4, 5, 19, 20, 21, 34, 35, 36, 37, 38, 50, 51, 53, 54, 55, 56, 57, 58, 62, 63, 65, 66, 67, 77, 78, 83, 105, 107, 108, 109, 110, 113, 134, 137, 138, 139, 140, 141, 143, 146, 161, 162, 163, 182, 187, 191, 201, 213, 218, 220, 221, 222, 224, 225, 227, 234, 237, 238, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 277, 278, 287, 288, 289, 290, 291, 293, 294, 296, 303, 306, 308, 309, 310, 312, 315, 316, 317, 318, 319, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 342, 343, 345, 352, 355, 357, 358, 359, 361, 364, 365, 366, 367, 368, 370, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 393, 394, 396, 403, 406, 407, 409, 410, 411, 413, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 453, 460, 463, 467, 469, 470, 473, 474, 475, 476, 477, 478, 479, 481, 485, 489, 494, 495, 502, 503, 504, 505, 512, 514, 516, 527, 528, 529, 536, 538, 541, 542, 544, 555, 557, 559, 560, 563, 598, 609, 673, 674, 676, 677, 681, 682, 684, 708, 710, 712, 717, 725, 731, 733, 734, 735, 737, 740, 743, 744, 745, 748, 749, 750, 751, 760, 762, 763, 765, 769, 770, 796, 797, 807, 819, 833, 835, 838], "divers": [1, 502, 684, 830], "alpha": [1, 3, 105, 111, 489, 679, 680, 684], "test_ac": 1, "test_berger_parker_d": 1, "test_bas": 1, "basetest": 1, "ran": 1, "1234": 1, "level": [1, 3, 4, 62, 89, 143, 489, 681, 682, 728, 776, 830, 833], "modulenametest": 1, "simpl": [1, 2, 134, 135, 138, 139, 143, 147, 149, 175, 186, 486, 489, 556, 563, 831, 835], "advertis": 1, "small": [1, 3, 142, 147, 486, 497, 676], "hand": [1, 3, 674], "larg": [1, 21, 88, 107, 108, 133, 138, 145, 497, 556, 676, 682, 708, 715], "calcul": [1, 21, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 110, 113, 133, 249, 250, 418, 419, 489, 496, 555, 556, 557, 558, 559, 563, 587, 598, 642, 673, 677, 680, 682, 683, 713, 720, 759, 830, 833], "spreadsheet": [1, 142], "numer": [1, 3, 88, 134, 142, 148, 501, 556, 557, 598, 654, 665, 668, 669, 675, 676, 683], "edg": [1, 143, 563, 668, 708, 761], "happen": [1, 143, 260, 325, 375, 429, 472, 769, 838], "none": [1, 4, 21, 33, 50, 52, 53, 60, 61, 62, 66, 67, 69, 70, 71, 95, 105, 109, 110, 134, 138, 149, 151, 161, 163, 176, 177, 178, 182, 187, 191, 201, 212, 214, 216, 217, 220, 239, 243, 245, 246, 247, 258, 269, 272, 289, 307, 311, 313, 314, 315, 324, 334, 336, 338, 356, 360, 362, 363, 364, 374, 384, 387, 389, 408, 412, 414, 415, 416, 427, 438, 442, 446, 464, 465, 466, 467, 471, 480, 489, 494, 495, 497, 503, 517, 519, 520, 527, 542, 545, 546, 555, 556, 557, 558, 559, 560, 561, 565, 587, 598, 631, 653, 655, 665, 666, 670, 673, 674, 677, 678, 680, 681, 682, 683, 690, 710, 711, 715, 718, 720, 728, 737, 739, 742, 743, 744, 745, 747, 754, 758, 759, 761, 762, 763, 766, 767, 769, 770, 796, 797, 819, 833, 835, 838], "neg": [1, 3, 21, 66, 69, 72, 85, 287, 491, 497, 527, 668, 669, 674, 679, 683, 770], "condit": [1, 3, 89, 90, 682], "superclass": 1, "veri": [1, 3, 65, 66, 67, 88, 138, 143, 149, 486, 715], "To": [1, 3, 4, 40, 72, 83, 107, 108, 138, 139, 140, 143, 146, 149, 220, 338, 389, 489, 527, 549, 555, 557, 559, 563, 679, 710, 831, 838], "shuffl": [1, 715], "version": [1, 3, 77, 78, 83, 105, 107, 108, 109, 133, 134, 136, 137, 140, 141, 145, 162, 244, 272, 312, 336, 361, 387, 413, 442, 501, 704, 708, 771, 775, 833, 836], "sort": [1, 54, 59, 111, 112, 192, 201, 204, 244, 247, 262, 312, 315, 327, 361, 364, 377, 413, 416, 431, 446, 467, 474, 598, 631, 653, 756, 761, 762, 769, 833, 838], "repeat": [1, 3, 139, 679, 793], "mani": [1, 3, 74, 97, 112, 143, 486, 489, 563, 668, 674, 682, 683, 838], "sampl": [1, 3, 74, 75, 76, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 98, 104, 105, 106, 107, 108, 109, 110, 113, 133, 489, 503, 555, 556, 558, 559, 565, 598, 631, 642, 653, 655, 664, 665, 668, 669, 674, 675, 676, 679, 681, 682, 683, 715, 774], "1000": [1, 216, 653], "million": [1, 110], "binomi": [1, 682, 683], "approxim": [1, 676, 679], "3": [1, 3, 21, 33, 38, 50, 51, 53, 55, 58, 59, 61, 62, 65, 69, 74, 82, 83, 98, 104, 107, 108, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 191, 201, 213, 218, 225, 227, 237, 238, 239, 244, 245, 261, 262, 264, 270, 271, 274, 275, 287, 288, 294, 296, 306, 307, 312, 313, 326, 327, 329, 335, 338, 343, 345, 355, 356, 361, 362, 376, 377, 379, 385, 394, 396, 406, 407, 408, 413, 414, 430, 431, 433, 439, 440, 443, 444, 446, 451, 453, 463, 464, 473, 474, 476, 481, 485, 486, 487, 488, 490, 492, 493, 494, 495, 496, 498, 499, 500, 503, 514, 519, 522, 524, 538, 545, 548, 549, 551, 555, 556, 557, 559, 560, 561, 563, 564, 565, 587, 598, 631, 654, 655, 665, 668, 669, 674, 675, 679, 681, 682, 683, 684, 705, 715, 720, 721, 728, 729, 730, 753, 757, 759, 761, 762, 764, 765, 770, 775, 830, 833, 835, 838], "depend": [1, 4, 7, 78, 81, 82, 83, 105, 107, 108, 109, 138, 139, 147, 161, 162, 163, 250, 419, 507, 531, 557, 559, 561, 620, 674, 691, 692, 715, 716, 719, 763, 769, 796, 807, 831, 835, 838], "seed": [1, 555, 559, 653, 679, 682, 683], "between": [1, 3, 21, 66, 69, 79, 85, 89, 104, 107, 108, 109, 113, 133, 138, 139, 140, 142, 145, 147, 148, 204, 218, 238, 243, 264, 265, 266, 267, 306, 311, 329, 330, 331, 332, 355, 360, 379, 380, 381, 382, 407, 412, 433, 434, 435, 436, 463, 465, 476, 477, 478, 479, 483, 484, 485, 489, 501, 502, 503, 507, 517, 527, 531, 542, 555, 556, 557, 558, 559, 560, 562, 563, 598, 668, 669, 670, 676, 679, 682, 683, 690, 705, 713, 714, 715, 721, 730, 740, 759, 760, 770, 833, 835], "prefer": [1, 52, 105, 109, 139, 668, 669], "stochast": 1, "failur": [1, 74, 526, 553, 797, 838], "less": [1, 21, 74, 83, 90, 107, 108, 110, 145, 261, 262, 326, 327, 376, 377, 430, 431, 473, 474, 485, 557, 560, 653, 668, 684, 741, 775], "10": [1, 21, 52, 71, 74, 89, 90, 135, 137, 138, 139, 140, 141, 143, 144, 145, 191, 201, 216, 220, 245, 289, 313, 338, 362, 389, 414, 446, 489, 501, 559, 654, 679, 682, 683, 770, 838], "risk": [1, 683], "ad": [1, 21, 65, 66, 67, 68, 69, 70, 138, 147, 212, 446, 489, 669, 672, 796, 830, 835], "total": [1, 75, 76, 82, 84, 86, 91, 92, 93, 94, 95, 104, 133, 134, 247, 315, 364, 416, 467, 556, 720], "assert_rais": 1, "ac": [1, 34, 35, 36, 37, 38, 43, 45, 48, 51, 53, 55, 59, 61, 62, 65, 68, 137, 139, 140, 147, 191, 248, 316, 365, 417, 833], "def": [1, 136, 149, 161, 162, 163, 243, 289, 311, 360, 412, 465, 683, 838], "12": [1, 3, 137, 144, 446, 489, 679, 833], "9": [1, 3, 4, 134, 135, 136, 138, 141, 144, 147, 191, 201, 220, 241, 245, 289, 309, 313, 338, 358, 362, 389, 410, 414, 446, 489, 563, 564, 654, 668, 669, 671, 672, 674, 675, 676, 679, 717, 720, 729, 759, 762, 769, 770, 833], "7": [1, 3, 68, 78, 110, 138, 139, 140, 147, 148, 191, 201, 213, 218, 220, 227, 238, 287, 296, 306, 345, 355, 389, 396, 407, 453, 463, 489, 524, 551, 556, 557, 559, 560, 563, 654, 679, 715, 729, 753, 761, 762, 770, 774, 833, 836], "62749672": 1, "otu": [1, 3, 74, 75, 76, 79, 81, 82, 83, 84, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 113, 486, 489, 770], "abund": [1, 3, 74, 75, 82, 83, 85, 86, 88, 95, 104, 105, 107, 108, 109, 110, 113, 489, 654, 668, 669, 675, 676, 683], "14": [1, 3, 78, 88, 137, 139, 144, 241, 245, 309, 313, 358, 362, 410, 414, 489, 564, 683, 721, 759], "border": 1, "singleton": [1, 3, 74, 77, 78, 82, 86, 99, 103, 149], "ton": [1, 3], "35681818182": 1, "test_ace_only_rare_singleton": 1, "valueerror": [1, 33, 50, 52, 53, 55, 59, 61, 63, 74, 83, 85, 105, 107, 108, 109, 113, 182, 187, 238, 239, 245, 247, 258, 261, 262, 264, 265, 266, 267, 287, 289, 306, 307, 313, 315, 324, 326, 327, 329, 330, 331, 332, 355, 356, 362, 364, 374, 376, 377, 379, 380, 381, 382, 407, 408, 414, 416, 427, 430, 431, 433, 434, 435, 436, 446, 463, 464, 467, 471, 473, 474, 476, 477, 478, 479, 484, 485, 491, 497, 517, 542, 556, 557, 559, 560, 598, 642, 653, 665, 668, 669, 682, 683, 684, 713, 715, 720, 728, 736, 738, 741, 753, 754, 759, 764, 775], "43": [1, 59, 95, 144, 769], "42": [1, 3, 59, 135, 138, 144, 145, 220, 243, 311, 360, 389, 412, 465, 556, 559], "__name__": 1, "__main__": 1, "runmodul": 1, "being": [1, 3, 21, 50, 52, 53, 65, 66, 67, 105, 109, 138, 139, 145, 148, 501, 559, 563, 653, 682, 691, 692, 712, 716, 719, 752, 831, 833, 836], "addition": [1, 3, 4, 143, 201, 833, 835], "trace": 1, "arguabl": 1, "mail": 1, "github": [1, 71, 72, 107, 108, 137, 141, 665], "inform": [1, 21, 52, 60, 64, 134, 135, 136, 137, 138, 139, 140, 146, 148, 191, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 576, 620, 654, 666, 667, 676, 682, 683, 747, 768, 796, 830, 833, 836, 838], "attribut": [1, 7, 33, 61, 133, 137, 138, 140, 141, 144, 146, 147, 151, 191, 200, 201, 216, 220, 225, 277, 289, 294, 338, 343, 389, 394, 446, 451, 503, 514, 524, 527, 538, 551, 655, 664, 675, 682, 690, 691, 692, 705, 709, 712, 716, 719, 733, 761, 769, 774, 776, 777, 780, 787, 808, 833], "contributor": 1, "guid": 1, "set": [1, 4, 20, 21, 51, 54, 58, 59, 83, 107, 108, 113, 138, 140, 142, 145, 151, 201, 214, 220, 238, 247, 260, 263, 289, 306, 315, 325, 328, 338, 355, 364, 375, 378, 389, 407, 416, 429, 432, 446, 463, 467, 472, 475, 486, 497, 519, 524, 545, 551, 563, 653, 674, 676, 679, 681, 682, 683, 691, 692, 707, 709, 712, 716, 719, 720, 722, 742, 756, 757, 769, 776, 787, 788, 793, 833, 838], "system": [1, 60, 64, 148, 149, 201, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 666, 667, 682, 747, 768], "step": [1, 3, 33, 50, 53, 61, 83, 105, 107, 108, 109, 145, 149, 672, 679], "associ": [1, 3, 40, 74, 139, 147, 148, 176, 177, 178, 191, 212, 214, 216, 220, 338, 389, 446, 556, 563, 653, 673, 677, 680, 681, 682, 720, 726, 759, 831, 836], "account": [1, 272, 336, 387, 442, 598, 668, 676, 683, 835], "command": [1, 148, 287], "config": 1, "yoshiki": 1, "v\u00e1zquez": 1, "baeza": [1, 665], "email": 1, "yoshiki89": 1, "gmail": 1, "com": [1, 71, 72, 75, 76, 84, 88, 92, 100, 101, 104, 107, 108, 134, 135, 136, 137, 141, 556, 795], "correctli": 1, "fix": [1, 89, 145], "handi": [1, 796, 838], "featur": [1, 3, 85, 138, 141, 147, 191, 201, 204, 213, 215, 216, 218, 220, 338, 389, 446, 489, 501, 655, 664, 668, 669, 675, 676, 774, 833], "link": [1, 109, 200, 556, 563, 690], "togeth": [1, 59, 137, 138, 140, 147, 489, 796], "ticket": 1, "tracker": [1, 138, 162], "special": [1, 21, 149], "close": [1, 3, 4, 5, 60, 64, 138, 139, 143, 145, 147, 217, 219, 269, 276, 287, 334, 337, 384, 388, 438, 445, 480, 482, 489, 520, 525, 546, 552, 586, 619, 630, 666, 667, 747, 768, 795], "automat": [1, 21, 50, 53, 59, 60, 64, 146, 175, 186, 191, 217, 219, 263, 269, 276, 328, 334, 337, 378, 384, 388, 432, 438, 445, 475, 480, 482, 502, 520, 525, 546, 552, 655, 666, 667, 715, 747, 768, 831], "merg": 1, "main": 1, "repositori": 1, "file": [2, 4, 5, 6, 60, 64, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 162, 175, 182, 183, 184, 186, 187, 188, 189, 190, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 489, 502, 519, 520, 525, 545, 546, 552, 586, 619, 630, 665, 666, 667, 681, 710, 747, 768, 794, 795, 830, 835], "test": [2, 3, 38, 47, 149, 192, 198, 204, 210, 225, 234, 278, 284, 294, 303, 343, 352, 394, 403, 451, 460, 486, 489, 502, 555, 557, 558, 559, 560, 562, 563, 575, 597, 608, 641, 652, 679, 682, 683, 773, 774, 794], "i": [2, 3, 4, 7, 21, 33, 34, 35, 36, 37, 38, 40, 45, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 113, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 161, 162, 163, 175, 176, 178, 182, 183, 184, 186, 187, 188, 189, 191, 192, 198, 200, 201, 204, 210, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 227, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 284, 287, 288, 289, 290, 291, 292, 293, 294, 296, 303, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 352, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 370, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 460, 463, 464, 465, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 512, 514, 516, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 531, 536, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 555, 556, 557, 558, 559, 561, 563, 586, 598, 619, 630, 631, 642, 653, 654, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 690, 691, 692, 695, 705, 708, 710, 712, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 728, 729, 730, 732, 734, 735, 736, 738, 740, 741, 743, 746, 747, 750, 751, 754, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 780, 793, 794, 795, 796, 797, 807, 808, 819, 830, 833, 835, 836, 837, 838], "testrunn": 2, "__file__": 2, "usual": [2, 137, 140, 148, 710], "some": [2, 3, 21, 73, 85, 95, 138, 140, 143, 146, 161, 162, 163, 191, 215, 488, 498, 499, 500, 669, 679, 682, 796, 835, 838], "explicit": [2, 139], "rel": [2, 55, 137, 140, 247, 249, 250, 262, 264, 266, 315, 327, 329, 331, 364, 377, 379, 381, 416, 418, 419, 431, 433, 435, 467, 474, 476, 478, 539, 755, 808, 833], "neatli": 2, "face": 2, "deepli": 2, "nest": [2, 143, 502, 557, 757, 835], "necessari": [2, 3, 59, 134, 145, 201, 446, 489, 503, 555, 556, 557, 586, 619, 630, 715, 794, 831], "final": [2, 147, 563, 838], "guidelin": [2, 830], "analyz": [3, 486, 669, 682], "biolog": [3, 58, 65, 66, 67, 91, 94, 98, 138, 139, 141, 143, 146, 191, 240, 241, 242, 244, 245, 248, 251, 252, 253, 256, 268, 308, 309, 310, 312, 313, 316, 317, 318, 319, 322, 333, 357, 358, 359, 361, 362, 365, 366, 367, 368, 371, 383, 409, 410, 411, 413, 414, 417, 420, 421, 422, 425, 437, 446, 682, 830], "intend": [3, 89, 90, 289, 653, 665, 773, 774], "primari": [3, 149, 833], "support": [3, 4, 52, 60, 64, 85, 217, 219, 220, 269, 276, 334, 337, 338, 384, 388, 389, 438, 445, 480, 482, 520, 525, 546, 552, 557, 655, 666, 667, 674, 679, 690, 710, 747, 765, 768, 769, 776, 796, 819, 835, 837, 838], "discoveri": 3, "avail": [3, 109, 134, 138, 139, 140, 144, 148, 179, 180, 277, 286, 527, 555, 556, 557, 558, 559, 598, 679, 683, 771, 831, 838], "high": [3, 83, 107, 108, 138, 139, 665, 668, 674, 830], "how": [3, 4, 48, 58, 59, 95, 138, 140, 238, 260, 287, 288, 306, 325, 355, 375, 407, 429, 463, 472, 557, 674, 679, 681, 682, 683, 830, 831, 836, 838], "should": [3, 21, 52, 72, 83, 95, 105, 106, 107, 108, 109, 134, 140, 144, 148, 149, 161, 162, 163, 201, 243, 260, 261, 262, 277, 311, 325, 326, 327, 360, 375, 376, 377, 412, 429, 430, 431, 465, 472, 473, 474, 485, 487, 488, 489, 539, 557, 559, 563, 653, 668, 669, 674, 675, 676, 679, 682, 683, 728, 749, 836], "alpha_divers": [3, 83, 109, 111], "beta_divers": [3, 105, 107, 108, 110, 112, 113], "design": [3, 110, 133, 137, 502, 681], "accept": [3, 33, 61, 110, 270, 274, 275, 335, 385, 439, 443, 444, 481, 483, 489, 557, 561, 563, 679, 682, 683, 725, 754, 762, 765, 819], "loos": [3, 563], "practic": [3, 59, 138, 139, 146, 653, 718, 723], "repres": [3, 51, 79, 81, 83, 95, 100, 101, 107, 108, 110, 133, 134, 135, 137, 138, 142, 143, 145, 147, 148, 191, 212, 220, 338, 389, 446, 494, 495, 501, 507, 514, 517, 524, 531, 538, 542, 551, 563, 654, 665, 679, 690, 757, 762, 769, 770, 833, 835], "speci": [3, 74, 88, 93, 104, 144, 148, 486, 654, 669, 674, 676, 690], "gene": [3, 141, 191, 201, 213, 216, 220, 446], "metabolit": [3, 683], "what": [3, 83, 105, 107, 108, 109, 143, 149, 151, 179, 180, 184, 189, 216, 260, 325, 375, 429, 472, 563, 653, 682, 835, 836, 838], "vari": [3, 559, 679, 681, 682], "wide": [3, 59, 238, 306, 355, 407, 463], "exampl": [3, 5, 33, 34, 35, 36, 37, 38, 43, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 83, 107, 108, 109, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 161, 162, 163, 191, 201, 213, 218, 220, 221, 222, 225, 227, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 277, 278, 286, 287, 288, 289, 290, 291, 294, 296, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 343, 345, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 394, 396, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 451, 453, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 514, 519, 522, 524, 538, 545, 548, 549, 551, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 653, 654, 665, 674, 679, 681, 682, 683, 684, 691, 692, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 795, 831, 833, 835, 836, 838], "microbiom": [3, 110, 489, 674], "survei": 3, "16": [3, 81, 136, 138, 139, 140, 144, 145, 237, 246, 271, 314, 363, 406, 415, 440, 466, 665, 679, 683, 730, 759], "rrna": 3, "oral": 3, "swab": 3, "genom": [3, 201], "studi": [3, 486, 489, 668, 676, 683], "organ": [3, 137, 140, 148], "throughout": [3, 142, 277, 286, 682, 837], "array_lik": [3, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 113, 227, 245, 246, 260, 270, 296, 313, 314, 325, 335, 345, 362, 363, 375, 385, 396, 414, 415, 429, 439, 453, 466, 472, 481, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 503, 555, 557, 558, 559, 560, 563, 670, 673, 677, 680, 683, 684], "convert": [3, 4, 134, 136, 137, 138, 140, 143, 145, 147, 220, 243, 311, 338, 360, 389, 412, 446, 465, 503, 544, 556, 684, 710, 775], "nativ": [3, 521, 547, 674], "ident": [3, 134, 135, 143, 507, 527, 531, 563, 685, 715, 748, 835], "mention": [3, 143], "row": [3, 33, 105, 109, 110, 113, 133, 145, 191, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 507, 518, 531, 543, 544, 549, 555, 556, 557, 558, 559, 560, 561, 563, 655, 668, 669, 672, 676, 682, 683, 773], "column": [3, 21, 33, 57, 58, 59, 109, 133, 138, 140, 141, 144, 145, 147, 148, 238, 257, 263, 306, 323, 328, 355, 372, 378, 407, 426, 432, 446, 463, 470, 475, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 507, 518, 522, 531, 543, 544, 548, 555, 556, 557, 558, 559, 560, 561, 563, 598, 642, 654, 665, 668, 669, 670, 672, 676, 677, 681, 682, 728, 732, 773, 774], "incorpor": [3, 485], "relationship": [3, 143, 668, 669, 676, 679, 683, 770], "phylogenet": [3, 83, 107, 108, 143, 145, 502, 563, 690, 713, 723, 770, 833], "tree": [3, 83, 107, 108, 143, 147, 148, 201, 830, 831], "treenod": [3, 83, 107, 108, 143, 769, 770, 831, 835], "identifi": [3, 62, 105, 109, 110, 113, 133, 136, 138, 139, 140, 141, 142, 145, 147, 148, 216, 245, 362, 414, 502, 560, 679, 683, 831], "tip": [3, 83, 107, 108, 690, 708, 710, 712, 713, 714, 715, 717, 718, 720, 721, 723, 730, 735, 736, 737, 738, 740, 741, 743, 744, 745, 751, 752, 753, 754, 756, 757, 759, 762, 763, 764, 769, 831, 835], "optim": [3, 21, 84, 105, 107, 108, 109, 559, 721, 771], "faster": [3, 83, 107, 108, 110, 247, 275, 288, 315, 364, 416, 444, 467, 559, 674, 743], "call": [3, 4, 59, 83, 89, 90, 107, 108, 136, 138, 145, 147, 149, 191, 238, 246, 249, 270, 287, 306, 314, 335, 355, 363, 385, 407, 415, 418, 439, 446, 463, 466, 481, 544, 556, 557, 653, 669, 679, 706, 708, 709, 712, 723, 724, 726, 739, 740, 746, 755, 760, 767, 794, 796, 797, 807, 831, 838], "matric": [3, 67, 70, 133, 142, 503, 505, 512, 529, 536, 556, 557, 560, 562, 563, 670, 674, 715], "thu": [3, 138, 139, 143, 247, 315, 364, 416, 446, 467, 507, 527, 531, 555, 557, 559, 563, 674], "slow": [3, 83, 105, 107, 108, 109], "disabl": [3, 83, 105, 107, 108, 109, 220, 338, 389, 838], "fals": [3, 4, 5, 19, 20, 21, 34, 35, 36, 37, 38, 50, 51, 53, 55, 56, 57, 58, 62, 65, 66, 67, 77, 78, 83, 105, 107, 108, 109, 134, 137, 138, 139, 140, 141, 143, 146, 161, 162, 163, 191, 201, 213, 214, 220, 221, 222, 223, 225, 227, 234, 237, 238, 240, 241, 242, 244, 247, 248, 250, 251, 252, 253, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 277, 278, 287, 288, 289, 290, 291, 292, 294, 296, 303, 306, 308, 309, 310, 312, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 343, 345, 352, 355, 357, 358, 359, 361, 364, 365, 366, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 394, 396, 403, 406, 407, 409, 410, 411, 413, 416, 417, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 451, 453, 460, 463, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 489, 504, 505, 512, 514, 528, 529, 536, 538, 542, 544, 557, 560, 563, 564, 565, 587, 598, 631, 674, 676, 679, 681, 682, 684, 708, 713, 714, 717, 725, 731, 734, 735, 740, 748, 760, 762, 763, 765, 774, 796, 819, 833, 835, 838], "danger": 3, "invalid": [3, 55, 59, 83, 105, 107, 108, 109, 138, 220, 338, 389, 556, 557, 665, 707, 712, 722, 733, 742, 746, 836], "encount": [3, 721, 723, 730], "difficult": 3, "error": [3, 4, 52, 83, 84, 95, 105, 107, 108, 109, 138, 139, 145, 149, 215, 491, 497, 526, 553, 554, 555, 557, 559, 679, 683, 689, 775, 831], "messag": [3, 83, 105, 107, 108, 109, 576, 620, 775, 831], "recommend": [3, 88, 145, 147, 220, 289, 338, 389, 446, 489, 502, 665, 668, 676, 682, 836], "care": [3, 52, 138, 140, 559], "ensur": [3, 21, 52, 83, 107, 108, 149, 220, 338, 389, 491, 497, 505, 527, 529, 711, 773], "confid": [3, 73, 78, 82, 89, 679, 680, 690, 710, 836], "met": [3, 819], "safe": [3, 83, 105, 107, 108, 109, 674, 684, 708], "cast": [3, 143, 238, 306, 355, 407, 463, 502, 503, 561, 665], "dimension": [3, 488, 498, 499, 500, 503, 521, 539, 547, 668, 675, 676, 682, 683], "equal": [3, 38, 47, 52, 72, 74, 107, 108, 109, 138, 192, 198, 204, 210, 225, 234, 278, 284, 294, 303, 343, 352, 394, 403, 446, 451, 460, 484, 486, 505, 512, 529, 536, 555, 557, 558, 559, 561, 563, 653, 668, 673, 674, 677, 682, 683, 684, 713, 769, 773, 774], "confirm": [3, 121, 555, 559, 683], "uniqu": [3, 59, 63, 134, 138, 142, 143, 147, 148, 485, 502, 559, 665, 709, 718, 723], "root": [3, 83, 94, 107, 108, 143, 148, 691, 692, 705, 706, 707, 708, 710, 711, 712, 716, 719, 720, 721, 722, 725, 726, 728, 730, 734, 736, 738, 739, 746, 751, 752, 755, 757, 759, 761, 762, 764, 766, 767, 769, 770, 835], "node": [3, 83, 107, 108, 685, 686, 690, 691, 692, 695, 699, 705, 706, 707, 709, 710, 711, 712, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 751, 752, 755, 756, 759, 760, 761, 762, 763, 764, 765, 769, 831, 835], "branch": [3, 108, 690, 710, 711, 720, 761, 764, 770, 835], "name": [3, 60, 64, 83, 107, 108, 134, 135, 139, 140, 141, 143, 144, 146, 147, 149, 151, 176, 177, 178, 183, 188, 191, 217, 219, 263, 269, 276, 277, 278, 284, 286, 328, 334, 337, 378, 384, 388, 432, 438, 445, 475, 480, 482, 489, 520, 525, 546, 552, 555, 556, 558, 559, 564, 576, 620, 655, 665, 666, 667, 685, 690, 704, 706, 707, 708, 710, 712, 713, 714, 715, 718, 722, 723, 724, 725, 726, 728, 730, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 749, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 768, 769, 788, 794, 831, 835], "correspond": [3, 58, 83, 107, 108, 138, 139, 141, 146, 147, 183, 188, 250, 263, 277, 287, 328, 378, 419, 432, 443, 444, 475, 489, 501, 507, 531, 654, 655, 668, 669, 672, 683, 690, 723, 728, 732, 741, 762, 769], "ecolog": [3, 81, 669, 674], "literatur": [3, 683], "relat": [3, 83, 92, 107, 108, 110, 137, 138, 142, 147, 502, 549, 668, 669, 676], "measur": [3, 81, 87, 89, 90, 91, 93, 94, 97, 98, 102, 107, 108, 489, 502, 668, 681, 682, 690, 710], "three": [3, 33, 97, 145, 148, 502, 527, 560, 654, 665, 682, 683, 715, 838], "were": [3, 67, 70, 83, 88, 105, 107, 108, 109, 143, 145, 146, 225, 260, 294, 325, 343, 375, 394, 429, 451, 472, 555, 557, 559, 665, 682, 683, 736, 738, 772, 838], "wa": [3, 4, 65, 68, 74, 83, 85, 92, 98, 105, 107, 108, 109, 110, 136, 138, 139, 143, 145, 260, 287, 325, 375, 429, 446, 472, 489, 501, 557, 609, 673, 681, 683, 706, 748, 769, 770, 831, 835, 836, 838], "form": [3, 6, 33, 65, 503, 507, 527, 531, 549, 761], "among": [3, 140, 524, 551, 565, 669, 676], "tripleton": 3, "do": [3, 4, 50, 53, 95, 133, 138, 145, 149, 225, 267, 294, 332, 343, 382, 394, 436, 446, 451, 479, 484, 489, 557, 560, 598, 676, 710, 723, 753, 754, 835, 838], "doubleton": [3, 77, 78, 80, 82], "faith_pd": 3, "ten": 3, "faith": [3, 83, 502], "100": [3, 134, 135, 138, 141, 216, 489, 683, 838], "unweighted_unifrac": [3, 108], "hundr": [3, 110], "unweight": [3, 107, 108, 677], "unifrac": [3, 83, 107, 108, 110, 113, 674], "latter": 3, "neglig": 3, "know": [3, 21, 83, 107, 108, 136, 138, 145, 147, 149, 489, 679, 771, 831], "discov": [3, 718, 836], "get_alpha_diversity_metric": 3, "get_beta_diversity_metr": [3, 109, 111, 113], "respect": [3, 4, 33, 77, 138, 141, 144, 148, 161, 162, 163, 181, 182, 184, 187, 189, 247, 315, 364, 416, 446, 467, 489, 501, 514, 517, 524, 538, 542, 549, 551, 563, 655], "won": [3, 83, 105, 107, 108, 109, 139, 192, 669], "those": [3, 106, 563, 653, 668, 683, 720, 754, 759, 770, 796, 833], "scipi": [3, 84, 106, 109, 112, 484, 489, 503, 521, 527, 539, 547, 549, 556, 557, 559, 563, 674, 679, 682, 683, 727], "spatial": [3, 106, 109, 112, 484, 503, 521, 527, 539, 547, 549, 559], "pdist": [3, 106, 109, 112, 563], "23": [3, 144, 147, 286, 489, 833], "64": [3, 110, 139, 277, 278, 765], "35": [3, 137, 139, 140, 146, 486, 683], "40": [3, 138, 148, 501, 681, 683], "44": [3, 98, 135, 559, 769], "45": [3, 144, 683], "19": [3, 137, 144, 679], "abcdef": 3, "adiv_obs_otu": 3, "observed_otu": [3, 97], "b": [3, 5, 21, 54, 59, 61, 62, 63, 85, 95, 113, 139, 142, 143, 446, 502, 507, 514, 519, 522, 524, 531, 538, 545, 548, 549, 551, 556, 557, 653, 665, 681, 682, 691, 692, 704, 705, 706, 708, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 723, 724, 725, 726, 730, 731, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 754, 755, 756, 757, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 795, 831, 833, 835], "f": [3, 5, 21, 59, 89, 110, 134, 135, 139, 143, 146, 147, 148, 557, 558, 559, 669, 672, 679, 682, 691, 692, 705, 706, 708, 710, 711, 712, 716, 717, 719, 720, 721, 723, 724, 725, 726, 730, 736, 737, 738, 739, 740, 746, 750, 751, 752, 755, 756, 757, 759, 760, 764, 765, 766, 767, 769, 835], "int64": [3, 33, 51, 59, 237, 241, 271, 309, 358, 406, 410, 440, 446, 489, 833], "next": [3, 83, 89, 90, 107, 108, 137, 143, 149, 446, 489, 642, 668, 769, 835, 838], "io": [3, 60, 64, 83, 107, 108, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 502, 520, 525, 546, 552, 665, 666, 667, 728, 747, 768, 769, 795, 830, 835], "stringio": [3, 4, 83, 107, 108, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 502, 769, 770, 831, 835], "otu1": [3, 83, 107, 108], "otu2": [3, 83, 107, 108], "otu3": [3, 83, 107, 108], "otu4": [3, 83, 107, 108], "75": [3, 55, 83, 88, 107, 108, 264, 329, 379, 433, 476, 489, 502, 556, 559, 765], "otu5": [3, 83, 107, 108], "otu6": [3, 83, 107, 108], "otu7": [3, 83, 107, 108], "otu_id": [3, 83, 107, 108], "adiv_faith_pd": 3, "00": [3, 134, 135, 138, 141, 144, 238, 273, 306, 355, 407, 441, 463, 770, 833], "50": [3, 67, 70, 138, 141, 144, 238, 306, 355, 407, 463, 489, 564, 665, 682, 683, 833], "float64": [3, 59, 133, 238, 306, 355, 407, 463, 489, 491, 497, 498, 499, 500, 549, 559, 654], "now": [3, 88, 137, 138, 140, 145, 446, 486, 489, 556, 653, 654, 679, 682, 683, 835, 838], "brai": 3, "curti": 3, "notic": [3, 138, 143, 145, 683, 838], "bc_dm": 3, "braycurti": 3, "6x6": [3, 559], "78787879": 3, "86666667": 3, "30927835": 3, "85714286": 3, "81521739": 3, "78142077": 3, "86813187": 3, "1627907": 3, "87709497": 3, "09392265": 3, "71597633": 3, "87777778": 3, "89285714": 3, "68235294": 3, "weight": [3, 107, 108, 143, 564, 565, 587, 598, 609, 631, 673, 677, 769], "again": [3, 138, 139, 501, 770], "wu_dm": 3, "weighted_unifrac": [3, 107], "77549923": 3, "82857143": 3, "42512039": 3, "8547619": 3, "10937312": 3, "26433692": 3, "98435423": 3, "24270353": 3, "46774194": 3, "95224719": 3, "16025641": 3, "86111111": 3, "98796148": 3, "30870431": 3, "82967033": 3, "significantli": [3, 58, 489, 555, 558, 559], "correl": [3, 502, 556, 557, 560, 562, 563, 655, 669, 670, 676, 679, 683, 715, 835], "mantel": [3, 502, 560, 563], "Then": [3, 486, 489, 564, 654], "p": [3, 21, 71, 83, 92, 93, 489, 501, 502, 555, 557, 558, 559, 560, 563, 654, 668, 669, 670, 676, 679, 682, 683], "05": [3, 144, 489, 563, 679, 680, 682, 683, 773], "p_valu": [3, 557, 563], "n": [3, 4, 5, 21, 75, 76, 82, 84, 85, 86, 91, 92, 93, 94, 95, 99, 104, 133, 134, 135, 136, 138, 139, 140, 144, 145, 146, 147, 148, 149, 161, 162, 163, 260, 325, 362, 375, 429, 472, 497, 502, 557, 560, 563, 653, 668, 669, 670, 673, 675, 676, 677, 679, 683, 684, 691, 692, 704, 712, 716, 719, 725, 730, 732, 739, 754, 755, 762, 769, 770, 775, 833], "922404392093": 3, "princip": [3, 559, 654, 665, 668, 674, 675], "coordin": [3, 140, 146, 191, 201, 204, 212, 213, 218, 559, 564, 598, 631, 642, 654, 655, 665, 668, 674, 675, 676], "analysi": [3, 83, 95, 107, 108, 138, 145, 486, 487, 489, 501, 555, 558, 559, 564, 565, 586, 587, 619, 630, 631, 642, 654, 665, 668, 669, 674, 675, 676, 679, 682, 683], "pcoa": [3, 144, 559, 655, 665, 675], "ordin": [3, 127, 559, 774, 775, 834], "wu_pc": 3, "plot": [3, 655], "realli": 3, "interest": [3, 446, 489, 502, 563, 668, 676, 682, 736, 738, 838], "context": [3, 5, 21, 484, 665, 770], "let": [3, 138, 139, 141, 145, 146, 147, 191, 201, 270, 335, 385, 439, 446, 481, 489, 557, 653, 678, 679, 682, 683, 771, 833, 835, 838], "visual": [3, 665], "sample_md": 3, "datafram": [3, 33, 57, 109, 134, 135, 148, 220, 257, 323, 338, 372, 389, 426, 446, 470, 489, 514, 522, 524, 538, 548, 551, 555, 556, 558, 559, 560, 564, 598, 642, 654, 655, 665, 668, 669, 675, 676, 681, 682, 728, 773, 833], "gut": [3, 665], "skin": [3, 665], "tongu": 3, "body_sit": [3, 665], "subject": [3, 134, 135, 838], "color": [3, 89, 90, 519, 545, 665], "taken": [3, 134, 135, 138, 145, 147, 148, 489, 563, 795], "fig": [3, 519, 545, 665], "axis_label": [3, 665], "pc": [3, 564, 665], "titl": [3, 134, 135, 140, 147, 519, 545, 665], "cmap": [3, 519, 545, 665], "jet": 3, "sourc": [3, 4, 5, 6, 33, 34, 35, 36, 37, 38, 40, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 138, 140, 141, 150, 151, 161, 162, 163, 164, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 198, 200, 201, 202, 203, 204, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 507, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 575, 576, 586, 587, 597, 598, 608, 609, 619, 620, 630, 631, 641, 642, 652, 653, 655, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 699, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 780, 787, 793, 794, 795, 796, 797, 807, 808, 809, 819, 820, 830], "code": [3, 136, 138, 139, 140, 148, 216, 273, 274, 275, 277, 278, 284, 285, 286, 287, 288, 441, 443, 444, 519, 545, 563, 665, 684, 713, 769, 771, 830, 833, 836], "png": [3, 519, 545, 655, 665], "cluster": [3, 557, 559, 727, 833], "group": [3, 272, 336, 387, 442, 489, 501, 514, 538, 555, 558, 559, 564, 565, 575, 576, 597, 608, 620, 630, 631, 641, 652, 681, 682, 683, 796, 835], "bodi": [3, 665], "site": [3, 140, 144, 260, 325, 375, 429, 472, 654, 655, 665, 674], "appear": [3, 74, 134, 145, 147, 516, 541, 556, 668, 669, 674, 679, 836], "techniqu": [3, 486, 668, 669, 834], "exploratori": 3, "quantifi": 3, "strength": 3, "accomplish": [3, 486, 831], "anosim": [3, 558, 559], "999": [3, 446, 555, 557, 558, 559, 560, 563], "33333333333333331": 3, "anti": [3, 555], "insignific": 3, "strong": [3, 555, 557, 563], "explor": [3, 106, 654], "add": [3, 66, 69, 147, 149, 174, 191, 201, 213, 215, 225, 294, 343, 394, 446, 451, 491, 497, 498, 499, 500, 707, 720, 722], "straight": 3, "forward": [3, 275, 287, 288, 444], "beaus": 3, "seri": [3, 62, 105, 141, 489, 549, 555, 556, 558, 559, 564, 655, 679], "investig": 3, "categori": [3, 147, 564, 565, 575, 576, 586, 597, 598, 608, 609, 620, 630, 631, 641, 642, 652, 665, 679, 681, 682], "boxplot": 3, "show": [3, 201, 679, 835], "spearman": [3, 556, 557, 560], "give": [3, 143, 668, 669, 676, 715], "symmetr": [3, 502, 503, 507, 527, 531, 542, 557, 561, 563, 668, 713], "2x2": [3, 142], "corr": 3, "000000": [3, 770], "939336": 3, "encod": [4, 133, 138, 139, 146, 149, 151, 501, 654], "compress": [4, 149], "auto": 4, "compresslevel": [4, 149], "filehandl": [4, 5, 60, 64, 149, 161, 162, 163, 182, 183, 184, 187, 188, 189, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 666, 667, 747, 768], "state": [4, 5, 6, 34, 35, 36, 37, 38, 40, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 134, 135, 136, 137, 140, 141, 145, 147, 148, 161, 162, 163, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 192, 198, 200, 202, 203, 204, 210, 212, 213, 214, 215, 216, 218, 221, 222, 223, 224, 225, 227, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 278, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 339, 340, 341, 342, 343, 345, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 387, 390, 391, 392, 393, 394, 396, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 453, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 505, 507, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 528, 529, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 555, 556, 557, 558, 559, 560, 561, 563, 575, 586, 597, 608, 619, 630, 641, 652, 653, 664, 665, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 691, 692, 695, 699, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 773, 774, 775, 793, 794, 795, 796, 797, 807, 809, 819, 820, 836, 838], "stabl": [4, 5, 6, 56, 57, 161, 162, 163, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 221, 222, 223, 224, 225, 227, 230, 232, 234, 235, 236, 237, 239, 240, 241, 242, 244, 246, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 272, 273, 274, 275, 278, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 299, 301, 303, 304, 305, 307, 308, 309, 310, 312, 314, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 336, 339, 340, 341, 342, 343, 345, 348, 350, 352, 353, 354, 356, 357, 358, 359, 361, 363, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 386, 387, 390, 391, 392, 393, 394, 396, 399, 401, 403, 404, 405, 406, 408, 409, 410, 411, 413, 415, 417, 418, 419, 420, 421, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 453, 456, 458, 460, 461, 462, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 514, 524, 538, 551, 709], "write": [4, 60, 136, 137, 139, 141, 142, 143, 145, 147, 149, 163, 180, 181, 217, 269, 334, 384, 438, 480, 502, 520, 546, 586, 619, 630, 666, 704, 747, 775], "binari": [4, 149, 151, 161, 162, 163, 501, 563, 668, 676, 763, 795], "url": [4, 60, 64, 182, 183, 184, 187, 188, 189, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 666, 667, 747, 768], "text": [4, 76, 92, 93, 104, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 161, 162, 163, 502, 586, 619, 630], "bytesio": [4, 5, 795], "textiowrapp": 4, "bufferedread": [4, 151, 161, 162], "bufferedwrit": [4, 151, 163], "bufferedrandom": 4, "tempfil": 4, "temporaryfil": 4, "namedtemporaryfil": 4, "unicod": [4, 133], "handl": [4, 52, 59, 138, 139, 146, 147, 148, 149, 151, 161, 163, 287, 288, 489, 557, 559, 560, 679, 763, 770, 795, 838], "element": [4, 21, 142, 491, 494, 495, 507, 517, 531, 542, 642, 665, 668, 672, 673, 677, 680, 682, 683, 684, 793], "composit": [4, 669], "readlin": [4, 161], "w": [4, 21, 52, 74, 82, 95, 104, 134, 135, 136, 489, 501], "whether": [4, 19, 34, 35, 38, 47, 56, 57, 77, 78, 141, 149, 161, 163, 222, 225, 234, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 278, 284, 291, 294, 303, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 340, 343, 352, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 391, 394, 403, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 448, 451, 460, 468, 469, 470, 472, 473, 474, 485, 489, 512, 536, 555, 557, 558, 559, 664, 676, 677], "readabl": [4, 133, 138, 139, 142, 143, 144, 145, 775], "writabl": 4, "convers": [4, 139, 539], "impli": [4, 52, 563], "unwrit": 4, "unread": 4, "scheme": [4, 148, 519, 545], "byte": [4, 270, 335, 385, 439, 481], "translat": [4, 137, 140, 143, 148, 273, 275, 277, 288, 441, 444, 833], "behavior": [4, 56, 57, 59, 65, 66, 67, 138, 139, 140, 255, 257, 287, 321, 323, 370, 372, 424, 426, 446, 469, 470, 555, 557, 559, 714, 838], "decod": [4, 139], "effect": [4, 21, 71, 81, 107, 108, 514, 538, 679, 681, 682, 683], "gzip": 4, "bz2": 4, "Will": [4, 55, 72, 181, 184, 189, 515, 523, 540, 550, 655, 684], "decompress": 4, "attempt": [4, 60, 138, 217, 269, 334, 384, 438, 480, 520, 546, 666, 710, 723, 747], "transpar": 4, "noth": [4, 62, 272, 336, 387, 442, 796], "legal": 4, "cannot": [4, 21, 33, 50, 53, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 139, 143, 182, 183, 187, 188, 238, 289, 306, 355, 407, 463, 489, 555, 556, 557, 558, 559, 653, 665, 681, 683, 684, 723, 726, 754, 831], "int": [4, 21, 45, 55, 62, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 113, 134, 140, 141, 146, 162, 191, 201, 212, 216, 227, 232, 239, 245, 246, 250, 258, 260, 261, 262, 264, 266, 270, 286, 296, 301, 307, 313, 314, 324, 325, 326, 327, 329, 331, 335, 345, 350, 356, 362, 363, 374, 375, 376, 377, 379, 381, 385, 396, 401, 408, 414, 415, 419, 427, 429, 430, 431, 433, 435, 439, 443, 444, 453, 458, 464, 466, 471, 472, 473, 474, 476, 478, 481, 485, 487, 488, 501, 518, 543, 555, 557, 558, 559, 560, 561, 563, 598, 642, 653, 665, 669, 673, 674, 676, 677, 680, 682, 683, 684, 690, 711, 715, 717, 726, 732, 741, 742, 754, 769, 775, 795, 808], "inclus": [4, 191, 212, 239, 258, 307, 324, 356, 374, 408, 427, 464, 471, 556], "handler": [4, 151, 182, 184, 187, 189], "textiobas": [4, 151, 161, 162, 163], "resourc": [4, 148], "manag": [4, 5], "closeabl": 4, "garbag": 4, "reflect": [4, 563, 746, 751], "flush": 4, "buffer": [4, 149, 653], "clean": [4, 707, 746], "properli": [4, 143], "NOT": [4, 21, 93], "writer": [4, 64, 133, 134, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 151, 178, 181, 184, 189, 219, 276, 337, 388, 445, 482, 525, 552, 667, 768], "kwarg": [5, 6, 60, 64, 71, 105, 109, 110, 113, 114, 161, 163, 175, 182, 183, 184, 186, 187, 188, 189, 217, 219, 269, 274, 275, 276, 334, 337, 384, 388, 438, 443, 444, 445, 480, 482, 520, 525, 546, 552, 642, 666, 667, 747, 768, 796, 831], "signatur": [5, 110], "did": [5, 74, 138, 146, 182, 187, 838], "isn": [5, 33, 50, 53, 59, 85, 147, 161, 163, 191, 494, 495, 684], "neither": [5, 33, 61, 754, 763], "bzh91ai": 5, "sy": 5, "x03": 5, "x89": 5, "x0c": 5, "xa6": 5, "x00": 5, "x01": 5, "xc1": 5, "x108": 5, "x9ah3m": 5, "x1c": 5, "xb7": 5, "x8b": 5, "xb9": 5, "x9c": 5, "h": [5, 21, 74, 87, 98, 99, 100, 138, 145, 147, 711, 712, 717, 720, 751, 752, 753, 756, 757, 766, 767, 769, 835], "xc4": 5, "x86": 5, "nb": 5, "nc": 5, "wrap": [7, 145, 147, 820], "cigar": [7, 21], "empti": [7, 34, 56, 135, 138, 141, 145, 179, 180, 247, 255, 315, 321, 364, 370, 416, 424, 467, 469, 489, 516, 541, 681, 712, 762, 773, 831], "target_begin": 7, "query_begin": 7, "read_sequ": 7, "ssw": [7, 21, 71], "reference_sequ": 7, "ins": [7, 21, 33, 151, 164, 191, 201, 220, 277, 289, 338, 389, 446, 503, 527, 565, 576, 587, 598, 609, 620, 631, 642, 655, 690, 776, 796, 808, 819], "helper": [11, 25, 41, 154, 167, 194, 206, 228, 280, 297, 346, 397, 454, 508, 532, 568, 579, 590, 601, 612, 623, 634, 645, 658, 696, 773, 774, 781, 800, 812, 823, 835], "pickl": [11, 25, 41, 154, 167, 194, 206, 228, 280, 297, 346, 397, 454, 508, 532, 568, 579, 590, 601, 612, 623, 634, 645, 658, 696, 781, 800, 812, 823], "hash": [13, 27, 156, 169, 570, 581, 592, 603, 614, 625, 636, 647, 660, 698, 783, 802, 814, 825], "inidic": [19, 21], "els": [19, 20, 143, 149, 162, 182, 187, 221, 272, 290, 336, 339, 387, 390, 442, 446, 447, 670, 712], "bool": [19, 21, 34, 35, 38, 47, 50, 53, 55, 56, 57, 58, 62, 65, 66, 67, 77, 78, 83, 105, 107, 108, 109, 110, 113, 161, 162, 163, 182, 187, 191, 192, 198, 204, 210, 212, 214, 218, 220, 221, 222, 225, 227, 234, 237, 238, 240, 242, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 272, 278, 284, 290, 291, 294, 296, 303, 306, 308, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 343, 345, 352, 355, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 394, 396, 403, 406, 407, 409, 411, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 433, 434, 435, 436, 437, 439, 442, 446, 447, 448, 451, 453, 460, 463, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 481, 485, 489, 494, 495, 503, 504, 505, 512, 514, 516, 528, 529, 536, 538, 541, 544, 557, 560, 563, 598, 609, 673, 674, 676, 677, 681, 682, 684, 708, 713, 714, 717, 731, 733, 734, 735, 737, 740, 743, 744, 745, 748, 760, 762, 763, 770, 774, 796], "alig": 20, "stripe": [21, 71], "band": 21, "instanti": [21, 137, 149, 289, 838], "callabl": [21, 33, 50, 53, 61, 105, 109, 110, 113, 517, 542], "reus": [21, 678], "upper": [21, 88, 89, 138, 145, 191, 201, 213, 215, 542, 549, 557], "lowercas": [21, 137, 138, 139, 140, 146, 220, 238, 289, 306, 338, 355, 389, 407, 446, 463], "q": [21, 88, 135, 669, 670], "l": [21, 88, 89, 104, 137, 139, 148, 287, 501, 557, 654, 668, 669, 676, 762], "m": [21, 68, 74, 83, 107, 108, 134, 135, 137, 139, 145, 148, 277, 278, 287, 556, 563, 665, 668, 669, 675, 676, 678, 681, 753, 770], "y": [21, 74, 85, 139, 146, 496, 498, 499, 557, 560, 563, 654, 665, 669, 670, 675, 676, 681, 715, 761], "v": [21, 107, 108, 225, 234, 294, 303, 343, 352, 394, 403, 451, 460, 486, 501, 681, 682, 761], "z": [21, 59, 82, 560, 665, 715, 761], "x": [21, 85, 99, 139, 146, 289, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 557, 560, 563, 654, 655, 665, 668, 669, 670, 676, 679, 682, 683, 715, 725, 746, 749, 761, 765, 770, 795, 838], "gap_open_penalti": [21, 65, 66, 67, 68, 69, 70], "gap_extend_penalti": [21, 65, 66, 67, 68, 69, 70], "score_s": 21, "estim": [21, 74, 77, 78, 82, 84, 86, 88, 89, 90, 95, 99, 673, 681, 682, 683], "best": [21, 65, 66, 67, 68, 69, 70, 89, 90, 486, 556, 668, 772], "255": [21, 669], "mask_length": 21, "suboptim": 21, "len": [21, 33, 45, 232, 301, 350, 401, 458, 561, 683, 691, 692, 716, 719, 757, 769, 838], "concern": [21, 142], "detail": [21, 58, 59, 71, 110, 112, 113, 137, 138, 139, 140, 141, 145, 146, 147, 148, 149, 288, 446, 507, 531, 556, 560, 665, 668, 669, 676, 831, 836], "locat": [21, 60, 64, 137, 143, 147, 176, 177, 178, 191, 217, 219, 245, 246, 269, 276, 313, 314, 334, 337, 362, 363, 384, 388, 414, 415, 438, 445, 466, 480, 482, 520, 525, 546, 552, 666, 667, 747, 751, 768, 773, 837], "heurist": [21, 559, 674], "found": [21, 135, 137, 138, 139, 140, 143, 145, 147, 182, 184, 187, 189, 501, 516, 541, 556, 557, 559, 683, 713, 723, 724, 725, 726, 736, 738, 754, 769], "largest": [21, 104], "maxim": [21, 556, 669], "sw": [21, 681], "pick": [21, 682], "belong": [21, 75, 141, 489, 555, 558, 559], "partial": [21, 215], "librari": [21, 71, 107, 108, 138, 830, 831], "mask": 21, "loci": 21, "nearbi": 21, "unmask": 21, "15": [21, 67, 70, 88, 135, 144, 564, 679, 682, 683, 759], "mask_auto": 21, "score_onli": 21, "begin": [21, 137, 138, 139, 140, 144, 147, 162, 191, 287, 683], "babp": 21, "overrid": [21, 66, 69, 151, 161, 162, 163, 182, 187, 746, 838], "score_filt": 21, "distance_filt": 21, "override_skip_babp": 21, "highest": [21, 143], "preced": [21, 136, 143, 145], "save": [21, 201, 503, 586, 619, 630, 743], "computation": 21, "filter": [21, 52, 71, 146, 241, 309, 358, 410, 560, 762, 838], "overridden": [21, 33, 140, 770], "regardless": [21, 51, 58, 59, 147, 287, 561], "argument": [21, 33, 60, 61, 64, 71, 142, 161, 162, 163, 175, 182, 183, 184, 186, 187, 188, 189, 217, 219, 263, 269, 274, 275, 276, 328, 334, 337, 378, 384, 388, 432, 438, 443, 444, 445, 475, 480, 482, 487, 489, 517, 520, 525, 542, 546, 552, 561, 666, 667, 747, 768, 796, 819], "substitution_matrix": [21, 65, 66, 67, 68, 69, 70], "suppli": [21, 134, 138, 146, 182, 187, 243, 311, 360, 412, 465, 483, 683, 720], "match_scor": [21, 66, 69, 72], "mismatch_scor": [21, 66, 69, 72], "subtract": [21, 642], "2d": [21, 65, 66, 67, 68, 69, 70, 105, 109, 110, 113, 487, 488, 489, 496, 561, 670, 677], "substitut": [21, 65, 66, 67, 68, 69, 70, 72, 142, 486, 772], "charact": [21, 38, 51, 52, 55, 59, 72, 134, 135, 136, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 220, 225, 227, 230, 232, 234, 235, 236, 240, 241, 242, 245, 247, 248, 249, 250, 251, 252, 253, 256, 263, 268, 270, 277, 287, 289, 294, 296, 299, 301, 303, 304, 305, 308, 309, 310, 313, 315, 316, 317, 318, 319, 322, 328, 333, 335, 338, 343, 345, 348, 350, 352, 353, 354, 357, 358, 359, 362, 364, 365, 366, 367, 368, 371, 373, 378, 383, 385, 386, 389, 394, 396, 399, 401, 403, 404, 405, 409, 410, 411, 414, 416, 417, 418, 419, 420, 421, 422, 425, 432, 437, 439, 446, 451, 453, 456, 458, 460, 461, 462, 467, 475, 481, 484, 833], "entir": [21, 33, 79, 220, 338, 389, 446], "combin": [21, 33, 50, 53, 140, 556, 655, 669], "enumer": 21, "suppress_sequ": [21, 71], "zero_index": [21, 71], "wrapper": [21, 71, 89, 90, 773], "meaning": [21, 50, 53, 59, 674, 833], "zhao": [21, 71], "mengyao": [21, 71], "wan": [21, 71], "ping": [21, 71], "lee": [21, 71, 74], "erik": [21, 71], "garrison": [21, 71], "gabor": [21, 71], "marth": [21, 71], "simd": [21, 71], "applic": [21, 52, 65, 71, 715, 838], "plo": [21, 71, 89, 90], "ONE": [21, 71], "web": [21, 65, 68, 71, 136, 148, 555, 556, 557, 558, 559], "juli": [21, 71], "2014": [21, 71, 134, 145, 501], "http": [21, 52, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 84, 88, 92, 98, 100, 101, 102, 104, 107, 108, 110, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 277, 285, 286, 501, 503, 521, 527, 539, 547, 555, 556, 557, 558, 559, 665, 769, 770, 795], "www": [21, 65, 68, 71, 75, 76, 84, 88, 92, 100, 101, 102, 104, 110, 133, 134, 135, 136, 137, 138, 139, 140, 145, 148, 277, 285, 286, 556], "ploson": [21, 71], "org": [21, 71, 98, 110, 133, 138, 139, 140, 145, 147, 501, 503, 521, 527, 539, 547, 555, 556, 557, 558, 559, 665, 770], "articl": [21, 71, 136], "info": [21, 71, 201, 564, 620], "doi": [21, 71, 137, 139, 501], "1371": [21, 71], "journal": [21, 71, 74, 77, 98, 140, 489, 555], "pone": [21, 71], "0082138": [21, 71], "alignmentstructur": 22, "positional_metadata": [33, 38, 51, 57, 58, 59, 138, 147, 220, 225, 237, 238, 241, 257, 263, 270, 271, 289, 294, 306, 309, 323, 328, 335, 338, 343, 355, 358, 372, 378, 385, 389, 394, 406, 407, 410, 426, 432, 439, 440, 446, 451, 463, 470, 475, 481, 833], "tabular": [33, 134, 135, 148], "grammaredsequ": [33, 43, 48, 50, 53, 54, 65, 68, 136, 138, 145, 147, 220, 241, 244, 338, 358, 361, 389, 410, 413], "shallow": [33, 36, 201, 202, 223, 292, 341, 392, 446, 449], "copi": [33, 36, 37, 138, 145, 147, 201, 202, 203, 223, 224, 270, 292, 293, 335, 341, 342, 385, 392, 393, 439, 446, 449, 450, 481, 503, 521, 523, 547, 550, 677, 684, 691, 692, 719, 751, 752, 758, 766, 767, 790, 791, 792], "consum": [33, 53, 163, 220, 277, 338, 389, 446], "abl": [33, 53, 110, 220, 338, 389, 446, 489, 682, 720], "directli": [33, 50, 53, 220, 277, 338, 389, 446, 483, 563, 796, 836, 838], "constructor": [33, 50, 53, 61, 136, 138, 139, 140, 145, 146, 147, 162, 175, 186, 220, 263, 277, 328, 338, 378, 389, 432, 446, 475, 561], "label": [33, 35, 38, 40, 50, 53, 54, 59, 61, 62, 63, 136, 138, 140, 145, 147, 501, 502, 519, 545, 555, 556, 558, 559, 560, 655, 665, 710, 774], "content": [33, 51, 137, 138, 139, 140, 141, 143, 149, 161, 162, 163, 220, 237, 238, 241, 244, 271, 273, 306, 309, 312, 355, 358, 361, 389, 406, 407, 410, 413, 440, 441, 463, 833], "hashabl": [33, 35, 653, 819], "both": [33, 51, 59, 61, 72, 77, 78, 133, 134, 135, 138, 139, 145, 148, 182, 187, 216, 287, 492, 493, 494, 495, 502, 517, 542, 544, 549, 556, 557, 558, 559, 674, 714, 715, 754, 763, 831, 833], "typeerror": [33, 50, 53, 59, 105, 109, 182, 183, 187, 188, 222, 238, 239, 243, 247, 258, 259, 264, 265, 266, 267, 291, 306, 307, 311, 315, 324, 329, 330, 331, 332, 340, 355, 356, 360, 364, 374, 379, 380, 381, 382, 391, 407, 408, 412, 416, 427, 428, 433, 434, 435, 436, 448, 463, 464, 465, 467, 471, 476, 477, 478, 479, 484, 485, 556, 557, 559, 682, 683, 684, 712], "exactli": [33, 50, 53, 58, 68, 69, 70, 138, 139, 145, 149, 225, 234, 278, 294, 303, 343, 352, 394, 403, 451, 460, 665, 708], "reassign_index": [33, 50, 53, 62, 63, 145], "nor": [33, 50, 53, 61, 145, 503, 754], "rangeindex": [33, 50, 53, 61, 145], "stop": [33, 50, 53, 61, 74, 145, 239, 258, 274, 275, 277, 287, 288, 307, 324, 338, 356, 373, 374, 408, 427, 443, 444, 464, 471, 710, 797, 833], "four": [33, 139, 147, 489, 665], "acgt": [33, 50, 53, 54, 56, 57, 63, 221, 225, 234, 238, 249, 250, 255, 257, 259, 263, 290, 294, 303, 306, 321, 323, 328, 339, 343, 352, 355, 370, 372, 378, 390, 394, 403, 407, 418, 419, 424, 426, 428, 432, 446, 447, 451, 460, 463, 469, 470, 475], "ag": [33, 50, 53, 55, 502, 681, 682], "wasn": [33, 139], "non": [33, 77, 85, 134, 136, 137, 141, 191, 256, 268, 322, 333, 371, 383, 425, 437, 487, 488, 489, 497, 527, 555, 558, 559, 563, 668, 674, 679, 714, 715, 720], "seq3": [33, 53, 138, 145], "boolean": [34, 108, 138, 141, 146, 220, 227, 240, 242, 245, 248, 260, 263, 265, 267, 268, 270, 296, 308, 310, 313, 316, 325, 328, 330, 332, 333, 335, 338, 345, 357, 359, 362, 365, 375, 378, 380, 382, 383, 385, 386, 389, 396, 409, 411, 414, 417, 429, 432, 434, 436, 437, 439, 446, 453, 472, 475, 477, 479, 481, 542], "experiment": [34, 35, 36, 37, 38, 40, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 61, 63, 65, 66, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 134, 135, 137, 140, 141, 147, 148, 192, 198, 200, 202, 203, 204, 210, 212, 213, 214, 215, 216, 218, 238, 243, 247, 254, 270, 306, 311, 315, 320, 335, 355, 360, 364, 369, 385, 407, 412, 416, 423, 439, 463, 465, 467, 468, 481, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 505, 507, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 528, 529, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 555, 556, 557, 558, 559, 560, 561, 563, 575, 586, 597, 608, 619, 630, 641, 652, 653, 664, 665, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 691, 692, 695, 699, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 773, 774, 775, 793, 794, 795, 797, 807, 809, 820], "OR": 34, "acg": [34, 35, 36, 37, 38, 43, 45, 48, 55, 58, 59, 61, 62, 146, 147, 258, 261, 324, 326, 374, 376, 427, 430, 471, 473], "No": [34, 78, 134, 135, 137, 146, 148, 201, 236, 305, 354, 405, 462, 557], "l1": 35, "l2": 35, "l3": 35, "__deepcopy__": [36, 202], "msa_copi": [36, 37], "memo": [37, 203, 224, 293, 342, 393, 450], "__copy__": [37, 203], "deepcopi": [37, 691, 692, 716, 766, 767], "against": [38, 47, 65, 68, 139, 192, 198, 204, 210, 225, 234, 278, 284, 294, 303, 343, 352, 394, 403, 451, 460, 489, 563, 713], "slice": [40, 227, 245, 246, 260, 270, 296, 313, 314, 325, 335, 345, 362, 363, 375, 385, 396, 414, 415, 429, 439, 453, 466, 472, 481, 502, 507, 531, 695, 833], "axi": [40, 55, 85, 99, 142, 598, 642, 655, 665, 673, 680, 683, 774], "iloc": 40, "pleas": [40, 60, 64, 138, 146, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 666, 667, 747, 768], "loc": [40, 446, 489, 682], "restrict": [40, 83, 107, 108, 145, 833], "over": [43, 48, 58, 110, 138, 139, 146, 147, 230, 235, 299, 304, 348, 353, 399, 404, 456, 461, 561, 575, 597, 608, 641, 652, 679, 680, 699, 737, 740, 743, 744, 745, 757, 760, 763, 835], "yield": [43, 48, 58, 138, 216, 230, 235, 244, 245, 246, 260, 261, 275, 288, 299, 304, 312, 313, 314, 325, 326, 348, 353, 361, 362, 363, 375, 376, 399, 404, 413, 414, 415, 429, 430, 444, 456, 461, 466, 472, 473, 559, 725, 737, 740, 743, 744, 745, 754, 760, 762, 763, 797, 831, 838], "1st": [45, 631, 775], "dimens": [45, 144, 145, 487, 491, 494, 495, 513, 537, 559, 655, 664, 665, 674, 675], "equival": [45, 81, 139, 223, 224, 247, 249, 270, 271, 275, 288, 292, 293, 315, 335, 341, 342, 364, 385, 392, 393, 416, 418, 439, 440, 444, 449, 450, 467, 481, 484, 486, 489, 514, 524, 538, 551, 557, 833], "shape": [45, 54, 133, 144, 505, 529, 557, 670, 673, 684], "inequ": [47, 198, 210, 234, 284, 303, 352, 403, 460, 527, 674], "__eq__": [47, 210, 512, 536], "revers": [48, 58, 62, 149, 235, 237, 259, 271, 275, 287, 288, 304, 353, 404, 406, 428, 440, 441, 444, 461, 555, 559, 754, 833, 838], "reset_index": [50, 53], "recomput": [50, 53, 59], "reset": [50, 53, 61], "acga": [50, 53, 225, 234, 294, 303, 343, 352, 394, 403, 451, 460], "major": [51, 486, 549, 769], "ti": [51, 75, 769], "broken": [51, 769], "manner": [51, 138, 145, 227, 241, 296, 309, 345, 358, 396, 410, 453, 557, 674], "default_gap_char": [51, 52, 59, 289], "distinct": [51, 96, 484, 502], "AT": [51, 138, 139, 145], "tt": [51, 260, 325, 375, 429, 472], "cg": [51, 270, 335, 385, 439, 446, 481], "degener": [51, 52, 137, 138, 139, 140, 141, 220, 237, 238, 240, 241, 244, 249, 250, 251, 252, 256, 268, 271, 272, 273, 274, 275, 277, 287, 288, 289, 306, 308, 309, 312, 317, 318, 322, 333, 336, 338, 355, 357, 358, 361, 366, 367, 371, 383, 387, 389, 406, 407, 409, 410, 413, 418, 419, 420, 421, 425, 437, 440, 441, 442, 443, 444, 463, 833], "definit": [51, 137, 138, 139, 140, 141, 148, 220, 237, 238, 241, 242, 244, 251, 252, 256, 268, 271, 272, 273, 274, 275, 277, 287, 288, 289, 306, 309, 310, 312, 317, 318, 322, 333, 336, 338, 355, 358, 359, 361, 366, 367, 371, 383, 387, 389, 406, 407, 410, 411, 413, 420, 421, 425, 437, 440, 441, 442, 443, 444, 463, 770, 833, 836, 837, 838], "gc": [51, 137, 138, 139, 140, 141, 148, 220, 237, 238, 241, 244, 250, 271, 273, 278, 288, 306, 309, 312, 355, 358, 361, 389, 406, 407, 410, 413, 419, 440, 441, 463, 833], "33": [51, 83, 107, 108, 139, 244, 312, 361, 413, 556, 559, 679, 682, 833], "metric": [52, 74, 83, 84, 105, 106, 107, 108, 109, 110, 111, 112, 113, 139, 243, 311, 360, 412, 465, 485, 517, 527, 542, 690, 833], "inverse_shannon_uncertainti": 52, "degenerate_mod": 52, "gap_mod": 52, "nan": [52, 55, 59, 90, 134, 238, 247, 306, 315, 355, 364, 407, 416, 463, 467, 484, 485, 555, 556, 557, 558, 559, 560, 563, 665, 681, 682, 761, 773], "larger": [52, 682], "assign": [52, 61, 72, 105, 109, 145, 192, 270, 335, 385, 439, 446, 481, 489, 555, 558, 559, 653, 683, 709, 710, 711], "remov": [52, 71, 72, 113, 138, 142, 145, 214, 241, 256, 268, 309, 322, 333, 358, 371, 383, 410, 425, 437, 707, 722, 742, 746, 749, 753, 764, 833, 836], "unknown": [52, 89, 90, 132, 140, 191, 245, 313, 362, 414, 653], "compos": [52, 139, 146], "tryptophan": 52, "highli": 52, "alanin": 52, "glycin": 52, "recod": 52, "awar": [52, 446, 836], "simpli": [52, 59, 149, 277, 521, 547, 674, 679, 723, 838], "minu": [52, 140, 147, 631], "uncertainti": [52, 563], "invers": [52, 488, 493, 495, 499], "higher": [52, 489, 808], "symbol": [52, 138], "valdar": 52, "residu": [52, 676], "2002": [52, 104, 135, 138], "schneider": 52, "pitfal": 52, "theori": 52, "websit": 52, "ca": [52, 144, 655, 669, 676], "2015": [52, 486, 489], "ncifcrf": 52, "gov": [52, 66, 67, 69, 70, 134, 135, 138, 140, 146, 148, 277, 285, 286], "glossari": 52, "html": [52, 75, 76, 79, 84, 88, 92, 100, 101, 102, 104, 134, 136, 138, 140, 143, 145, 147, 191, 503, 521, 527, 539, 547, 555, 556, 557, 558, 559, 665, 769, 770], "shannon_entropi": 52, "classmethod": [54, 60, 213, 217, 238, 269, 286, 306, 334, 355, 384, 407, 438, 463, 480, 517, 520, 542, 546, 666, 727, 728, 729, 747], "construct": [54, 63, 140, 148, 191, 192, 502, 654, 718, 728, 729, 770, 830, 831, 835], "to_dict": 54, "across": [55, 138, 139, 145, 201, 489, 557, 682, 769], "vector": [55, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 142, 240, 242, 245, 248, 260, 263, 265, 267, 268, 270, 277, 308, 310, 313, 316, 325, 328, 330, 332, 333, 335, 357, 359, 362, 365, 375, 378, 380, 382, 383, 385, 386, 409, 411, 414, 417, 429, 432, 434, 436, 437, 439, 472, 475, 477, 479, 481, 486, 487, 488, 489, 494, 495, 498, 499, 500, 502, 503, 507, 527, 531, 555, 558, 559, 609, 669, 683, 684, 761], "1d": [55, 105, 220, 222, 227, 239, 240, 242, 243, 245, 246, 248, 258, 259, 260, 264, 265, 266, 267, 268, 270, 291, 296, 307, 308, 310, 311, 313, 314, 316, 324, 325, 329, 330, 331, 332, 333, 335, 338, 340, 345, 356, 357, 359, 360, 362, 363, 365, 374, 375, 379, 380, 381, 382, 383, 385, 386, 389, 391, 396, 408, 409, 411, 412, 414, 415, 417, 427, 428, 429, 433, 434, 435, 436, 437, 439, 446, 448, 453, 464, 465, 466, 471, 472, 476, 477, 478, 479, 481, 488, 489], "ndarrai": [55, 109, 220, 222, 239, 240, 242, 243, 248, 258, 259, 264, 265, 266, 267, 268, 291, 307, 308, 310, 311, 316, 324, 329, 330, 331, 332, 333, 338, 340, 356, 357, 359, 360, 365, 374, 379, 380, 381, 382, 383, 386, 389, 391, 408, 409, 411, 412, 417, 427, 428, 433, 434, 435, 436, 437, 446, 448, 464, 465, 471, 476, 477, 478, 479, 487, 488, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 507, 521, 531, 539, 544, 547, 561, 563, 677, 684, 727], "demonstr": [56, 57, 149, 255, 257, 321, 323, 370, 372, 424, 426, 469, 470], "rang": [57, 79, 88, 108, 139, 140, 237, 241, 247, 257, 260, 271, 309, 315, 323, 325, 358, 364, 372, 375, 406, 410, 416, 426, 429, 440, 467, 470, 472, 555, 556, 665, 683, 732, 838], "qualiti": [57, 138, 146, 220, 225, 237, 241, 257, 271, 294, 309, 323, 338, 343, 358, 372, 389, 394, 406, 410, 426, 440, 446, 451, 470, 665, 833], "ignore_metadata": 58, "improv": [58, 143, 145, 220, 338, 389, 542], "__iter__": 58, "__reversed__": 58, "concat": [58, 59], "artifact": [58, 65, 66, 67], "real": [58, 138, 139, 146, 486, 487, 488, 492, 493, 494, 495, 498, 499, 500], "concaten": [58, 147, 213, 238, 306, 355, 407, 463], "outer": [58, 59, 238, 306, 355, 407, 463], "join": [58, 134, 135, 139, 146, 147, 148, 238, 306, 355, 407, 463, 762, 769, 770], "aa": [58, 138, 140, 145, 277], "gt": 58, "strict": [59, 145, 238, 306, 355, 407, 463, 516, 541, 557, 560, 563], "horizont": 59, "control": [59, 138, 555, 557, 558, 564, 676, 679, 681, 682, 683], "dure": [59, 138, 192, 238, 306, 355, 407, 463, 559, 794], "inner": [59, 143, 238, 306, 355, 407, 463], "left": [59, 74, 100, 143, 487, 488, 492, 496, 498, 499, 500, 501, 710, 732, 773, 774, 835], "unshar": 59, "pad": [59, 145, 238, 306, 355, 407, 463], "guarante": [59, 90, 220, 244, 312, 338, 361, 389, 413, 503, 561, 720], "duplic": [59, 113, 139, 147, 215, 516, 541, 685, 793], "likewis": [59, 147], "per": [59, 134, 135, 146, 147, 220, 338, 389, 446, 560, 563, 653, 676, 682, 683, 708, 795], "retain": [59, 238, 270, 306, 335, 355, 385, 407, 439, 463, 481, 516, 541, 653], "reproduc": [59, 83, 107, 108], "msa1": 59, "msa2": 59, "unnecessari": 59, "By": [59, 88, 105, 109, 138, 140, 487, 488, 489, 559, 673, 674, 677, 759, 770, 797], "col1": 59, "col2": 59, "col3": 59, "o": [59, 60, 64, 137, 138, 139, 146, 147, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 666, 667, 747, 768, 830, 837], "format": [60, 64, 115, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 164, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 217, 219, 269, 272, 276, 277, 285, 334, 336, 337, 384, 387, 388, 438, 442, 445, 480, 482, 503, 520, 521, 525, 527, 539, 544, 546, 547, 552, 586, 619, 630, 666, 667, 708, 728, 747, 768, 770, 835, 836], "registri": [60, 64, 138, 139, 146, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 666, 667, 747, 768, 831], "clustal": [60, 64, 116, 831], "fasta": [60, 64, 118, 139, 141, 146, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 831], "fastq": [60, 64, 119, 146, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 831], "phylip": [60, 64, 128, 138, 143, 769, 770, 831, 835], "stockholm": [60, 64, 131], "understood": [60, 64, 143, 182, 183, 184, 187, 188, 189, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 666, 667, 747, 768], "respons": [60, 64, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 586, 619, 630, 654, 666, 667, 669, 676, 747, 768], "caller": [60, 64, 217, 219, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482, 520, 525, 546, 552, 586, 619, 630, 666, 667, 747, 768], "reader": [60, 133, 134, 135, 136, 137, 139, 142, 143, 144, 145, 146, 147, 148, 149, 151, 162, 176, 181, 182, 183, 187, 188, 217, 269, 334, 384, 438, 480, 520, 546, 666, 747], "reassign": [61, 145, 557], "remain": [61, 138], "ccg": 61, "altern": [61, 148, 149, 287, 486, 517, 542, 557, 559, 560, 563, 674, 679, 728, 754], "ascend": [62, 218], "multiindex": [62, 549], "descend": [62, 218, 690, 720, 732, 740, 749, 756, 757, 760, 763, 835], "sort_index": 62, "passthrough": 62, "intern": [62, 140, 143, 708, 710, 712, 718, 720, 723, 732, 741, 746, 752, 762, 764, 765, 831, 835], "from_dict": [63, 555, 559, 564, 665, 681, 682], "regist": [64, 149, 150, 151, 161, 162, 163, 175, 181, 183, 186, 188, 219, 276, 337, 388, 445, 482, 525, 552, 667, 768], "penalize_terminal_gap": [65, 66, 67], "unalign": [65, 66, 67, 68, 69, 70, 71, 833], "substract": [65, 66, 67, 68, 69, 70, 672], "typic": [65, 66, 67, 68, 69, 70, 72, 138, 139, 146, 147, 191, 201, 674, 710, 836], "continu": [65, 66, 67, 654], "penal": [65, 66, 67], "irrelev": [65, 66, 67], "nearli": [65, 66, 67], "tupl": [65, 66, 67, 68, 69, 70, 71, 78, 82, 89, 95, 97, 113, 141, 162, 191, 212, 216, 274, 275, 443, 444, 507, 531, 729, 730, 761, 762], "local_pairwise_align": [65, 66, 67, 69, 70], "local_pairwise_align_nucleotid": [65, 66, 67, 68, 70], "global_pairwise_align_protein": [65, 66, 68, 69, 70], "global_pairwise_align_nucelotid": [65, 67, 68, 69, 70], "slightli": [65, 88, 559], "basic": [65, 85, 134, 135, 563, 655, 665], "valid": [65, 68, 83, 105, 107, 108, 109, 110, 113, 138, 139, 143, 145, 220, 289, 338, 389, 503, 526, 527, 542, 553, 833, 838], "emboss": [65, 68], "needl": 65, "server": [65, 66, 67, 68, 69, 70, 148], "amino": [65, 67, 70, 137, 138, 142, 277, 287], "acid": [65, 67, 70, 137, 138, 139, 142, 145, 148, 220, 277, 287, 289, 338, 389, 446], "sb": 65, "cd": [65, 137, 140, 287], "j": [65, 67, 68, 70, 83, 87, 95, 98, 107, 108, 133, 134, 135, 138, 139, 140, 147, 148, 486, 494, 495, 496, 497, 501, 514, 524, 538, 551, 557, 558, 559, 669, 720, 769], "mol": [65, 68, 134, 135, 137, 140], "biol": [65, 68, 83, 87, 98, 134, 135, 137, 140], "1970": [65, 75], "mar": [65, 68, 87, 98], "48": [65, 92], "443": 65, "53": [65, 144, 713], "ebi": [65, 68, 137, 140, 191], "uk": [65, 68, 87, 98, 137, 140, 191, 486], "psa": [65, 68], "emboss_needl": 65, "global_pairwise_align": [66, 67, 68, 69, 70], "deriv": [66, 67, 69, 70, 137, 260, 325, 375, 429, 446, 472, 494, 495, 501, 682, 770], "ncbi": [66, 67, 69, 70, 134, 135, 138, 140, 148, 274, 275, 277, 278, 285, 286, 287, 288, 443, 444, 728, 833], "blast": [66, 67, 69, 70, 138], "nlm": [66, 67, 69, 70, 134, 135, 138, 140, 148, 277, 285, 286], "nih": [66, 67, 69, 70, 134, 135, 138, 140, 146, 148, 277, 285, 286], "cgi": [66, 67, 69, 70, 277, 285, 286], "blosum": [67, 70], "henikoff": [67, 70], "proc": [67, 70], "natl": [67, 70], "acad": [67, 70], "sci": [67, 70, 135, 501], "nov": [67, 70, 137, 665], "1992": [67, 70, 74, 83, 502], "89": [67, 70, 140], "22": [67, 70, 144, 148, 489, 679, 833], "10915": [67, 70], "10919": [67, 70], "water": 68, "identif": 68, "molecular": [68, 563, 710, 770], "subsequ": [68, 136, 138, 222, 230, 235, 239, 258, 260, 291, 299, 304, 307, 324, 325, 340, 348, 353, 356, 374, 375, 391, 399, 404, 408, 427, 429, 446, 448, 456, 461, 464, 471, 472, 796, 833], "tf": 68, "1981": [68, 713, 769], "147": 68, "195": 68, "emboss_wat": 68, "sequence1": 71, "sequence2": 71, "deprec": [71, 72, 113, 256, 268, 322, 333, 371, 383, 425, 437], "favor": 71, "biocor": [71, 72, 107, 108, 137, 665], "1814": 71, "acgtu": 72, "substitutionmatrix": 72, "track": [72, 137], "progress": [72, 556], "161": [72, 134], "rich": [73, 77, 91, 94], "domin": [73, 75, 81, 92, 101, 102, 104], "interv": [73, 78, 82, 89, 137, 140, 141, 201, 202, 203, 204, 210, 212, 213, 214, 215, 216, 218, 220, 225, 237, 254, 273, 294, 320, 338, 343, 369, 389, 394, 406, 423, 446, 451, 468, 680], "suffix": 73, "_ci": 73, "rare_threshold": 74, "coverag": [74, 82, 86, 90, 134, 135], "s_": [74, 76, 77, 95, 102], "frac": [74, 75, 76, 77, 81, 82, 84, 85, 86, 87, 91, 92, 93, 94, 95, 98, 99, 102, 104, 487, 488, 492, 496, 497, 498, 499, 500, 501, 557, 676], "rare": [74, 683, 836], "c_": 74, "f_1": [74, 77, 82, 86, 99], "gamma": 74, "2_": 74, "pool": 74, "coeffici": [74, 556, 557, 563, 655, 676, 679, 715], "variat": [74, 557, 669], "sum": [74, 76, 79, 82, 86, 92, 93, 95, 101, 213, 247, 315, 364, 416, 467, 488, 492, 493, 496, 683, 684, 705, 761, 795], "_": [74, 136, 138, 139, 143, 147, 213, 225, 294, 343, 394, 451, 502, 557], "f_i": 74, "n_": [74, 75], "threshold": [74, 773], "fewer": [74, 145, 682, 683], "introduc": [74, 85, 136, 138, 486], "manual": [74, 75, 76, 78, 84, 88, 92, 93, 100, 104, 769, 770], "zero": [74, 113, 133, 191, 212, 247, 315, 364, 416, 467, 486, 489, 491, 497, 503, 555, 556, 557, 558, 559, 560, 563, 668, 674, 677, 682, 684, 770, 838], "environ": [74, 107, 108, 486, 669], "chao": [74, 77], "american": 74, "87": [74, 144], "210": 74, "217": 74, "ma": 74, "yang": 74, "1993": [74, 555, 556], "rule": [74, 138, 145, 147, 769], "recaptur": 74, "unequ": [74, 278], "rate": [74, 679], "biometrika": 74, "80": [74, 138, 654, 682, 683, 710, 765, 838], "193": 74, "201": 74, "viceroi": [74, 78], "eeb": [74, 78], "uconn": [74, 78], "edu": [74, 78, 102, 136, 138, 143, 145, 769, 770], "hwang": 74, "chen": 74, "kuo": 74, "2000": [74, 683], "commun": [74, 79, 81, 83, 100, 101, 104, 107, 108, 502, 555, 556, 558, 559, 665, 669, 676, 683], "statistica": [74, 85], "sinica": 74, "227": [74, 138], "246": [74, 104, 147], "berger": 75, "parker": 75, "fraction": [75, 485, 683, 714, 835], "sdr": [75, 76, 84, 88, 92, 93, 100, 104], "iv": [75, 76, 84, 88, 92, 93, 100, 104], "onlin": [75, 76, 84, 88, 92, 93, 100, 104, 139], "pisc": [75, 76, 84, 88, 92, 100, 101, 104], "conserv": [75, 76, 83, 84, 88, 89, 92, 100, 101, 104, 136, 238, 306, 355, 407, 463, 489, 502], "sdrhelp": [75, 76, 84, 88, 92, 100, 101, 104], "brillouin": 76, "hb": 76, "ln": [76, 84, 91, 98, 487, 489, 492, 496, 501], "n_i": [76, 92, 93], "th": [76, 92, 93, 104], "bias_correct": [77, 78], "bia": [77, 78], "equat": [77, 78, 84, 95, 557], "uncorrect": [77, 78], "bias": [77, 78], "chao1_ci": 77, "2f_2": 77, "f_2": [77, 82], "1984": [77, 220, 289, 338, 389, 446], "parametr": [77, 486, 489, 555, 558], "popul": [77, 146, 147, 263, 328, 378, 432, 475, 486, 561, 679, 683], "scandinavian": [77, 489], "265": 77, "270": 77, "zscore": 78, "96": [78, 141], "chao1": 78, "scalar": [78, 100, 500, 502, 507, 531, 665], "95": [78, 82, 83, 89, 139, 144, 710], "lower_bound": [78, 82, 89], "upper_bound": [78, 82, 89, 201, 213], "presenc": [78, 278, 287, 683], "absenc": [78, 683], "specif": [78, 83, 88, 105, 107, 108, 109, 110, 113, 149, 216, 446, 563, 598, 682, 683, 754, 831, 836, 837, 838], "p_i": [79, 81, 100, 101], "proport": [79, 81, 85, 95, 100, 101, 144, 250, 419, 484, 486, 487, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 555, 557, 558, 564, 598, 642, 655, 668, 674, 676, 713], "simpson": [79, 102], "folk": [79, 101], "uio": [79, 101], "ohamm": [79, 101], "past": [79, 101], "occurr": [80, 103, 239, 251, 252, 253, 256, 307, 317, 318, 319, 322, 356, 366, 367, 368, 371, 373, 408, 420, 421, 422, 425, 464], "ens_pi": 81, "ens_": 81, "pie": 81, "sum_": [81, 85, 100, 486, 488, 498, 499, 500, 557], "chase": 81, "knight": [81, 83, 107, 108, 665], "scale": [81, 556, 654, 668, 669, 670, 676], "driver": 81, "biodivers": 81, "standardis": 81, "ecologi": [81, 92, 104, 489, 555, 556, 557, 558, 654, 668, 669, 674, 675, 676], "volum": 81, "supplement": 81, "pg": 81, "17": [81, 83, 107, 108, 137, 144, 654, 682], "26": [81, 135, 143, 489, 558, 563, 665], "esti": 82, "pm": 82, "sqrt": [82, 92, 93, 94, 501, 676], "2nf_2": 82, "hardcod": 82, "1983": 82, "law": 82, "nonparametr": [82, 486, 489, 497], "ann": [82, 99], "905": 82, "912": 82, "superset": [83, 107, 108, 555, 559], "subset": [83, 107, 108, 113, 133, 137, 556, 714, 720, 835], "elsewher": [83, 105, 107, 108, 109], "bypass": [83, 105, 107, 108, 109], "certain": [83, 92, 105, 107, 108, 109, 220, 338, 389, 484, 765], "entail": [83, 105, 107, 108, 109], "missingnodeerror": [83, 105, 107, 108, 109, 723, 724, 726, 741, 754], "duplicatenodeerror": [83, 105, 107, 108, 109, 718], "exact": [83, 105, 107, 108, 109, 191, 238, 306, 355, 407, 463, 559, 674, 831], "pycog": [83, 107, 108, 769], "qiim": [83, 107, 108], "impos": [83, 107, 108], "unroot": [83, 107, 108, 143, 727, 751, 766, 767, 770], "had": [83, 107, 108, 555, 559, 683], "trifurc": [83, 107, 108, 143], "newick": [83, 107, 108, 126, 704, 710, 747, 768, 770, 831, 835], "convent": [83, 107, 108, 134, 137, 140], "silent": [83, 107, 108], "evalu": [83, 134, 135, 227, 296, 345, 396, 453, 502, 556, 653, 679, 712, 749, 752, 835, 838], "hamadi": [83, 107, 108], "lozupon": [83, 107, 108], "fast": [83, 107, 108, 564, 674], "facilit": [83, 107, 108, 110, 133, 527, 679, 718, 770], "throughput": [83, 107, 108, 138, 139, 665, 682], "analys": [83, 107, 108, 555], "microbi": [83, 89, 90, 107, 108, 489, 555, 556, 558, 559, 665], "pyrosequenc": [83, 107, 108], "phylochip": [83, 107, 108], "ism": [83, 107, 108], "2010": [83, 107, 108, 139], "u_count": [83, 107, 108], "otu8": [83, 107, 108], "62": [83, 107, 108, 136, 139, 559, 833], "round": [83, 88, 95, 107, 108, 557, 679, 682, 683, 720], "fisher": 84, "solv": [84, 679], "runtimeerror": 84, "converg": 84, "minimize_scalar": 84, "rectangl": 85, "gini": 85, "area": 85, "lorenz": 85, "curv": [85, 88, 95, 669, 679, 682, 683], "simplifi": 85, "2b": 85, "entri": [85, 133, 137, 148, 653], "trapezoid": 85, "connect": [85, 143, 690, 739, 746], "parallel": [85, 110], "opinion": 85, "desir": [85, 89, 134, 142, 674, 753, 838], "circumst": [85, 682], "linear": [85, 137, 140, 655, 669], "segment": 85, "accur": [85, 89, 90], "fall": [85, 88, 108, 653], "gradient": [85, 668, 669, 674, 676], "formula": [85, 559], "dx": [85, 501], "h_i": 85, "h_0": 85, "h_n": 85, "1912": 85, "variabl": [85, 133, 270, 335, 385, 439, 446, 481, 489, 556, 559, 654, 655, 665, 669, 674, 675, 676, 679, 681, 682, 796, 819, 838], "mutabl": [85, 446, 776, 833], "cuppini": 85, "bologna": 85, "156": 85, "page": [85, 489, 770, 835], "reprint": 85, "memori": [85, 136, 138, 139, 140, 145, 146, 147, 502, 560, 653, 674, 795, 831], "di": [85, 833], "metodologica": 85, "ed": 85, "pizetti": 85, "salvemini": 85, "rome": 85, "libreria": 85, "eredi": 85, "virgilio": 85, "veschi": 85, "1955": 85, "heip": [87, 93, 98], "wiener": [87, 98, 100], "logarithm": [87, 100, 489], "pielou_": 87, "1974": [87, 93, 98], "ass": [87, 98], "54": [87, 98, 108], "555": [87, 98], "557": [87, 98], "lower_quantil": 88, "upper_quantil": 88, "kempton": 88, "taylor": 88, "slope": 88, "cumul": [88, 104, 136], "interquantil": 88, "lower": [88, 89, 138, 145, 191, 489, 542, 549, 557, 653, 683], "quartil": 88, "inward": 88, "bound": [88, 89, 140, 141, 149, 191, 192, 200, 201, 204, 212, 213, 215, 216, 446, 489, 680, 683], "magurran": [88, 91, 94], "1998": [88, 654, 668, 669, 671, 672, 674, 676], "half": [88, 486], "uq": 88, "lq": 88, "justif": 88, "unclear": 88, "overlap": [88, 216, 261, 262, 326, 327, 376, 377, 430, 431, 473, 474, 485, 514, 538, 714], "quantil": 88, "consider": [88, 682], "1976": 88, "model": [88, 89, 90, 95, 486, 502, 683], "natur": 88, "262": 88, "818": 88, "820": 88, "ci_typ": 89, "ulcl": 89, "uncov": [89, 90], "predict": [89, 90, 147, 682], "ratio": [89, 486, 487, 488, 489, 492, 493, 494, 495, 683], "ulcu": 89, "lladser_p": 89, "around": [89, 90, 110, 138, 145, 147, 490, 557, 680, 835], "theorem": [89, 90], "iii": 89, "lladser": [89, 90, 107, 108], "gouet": [89, 90], "reeder": [89, 90], "extrapol": [89, 90, 679], "urn": [89, 90], "poisson": [89, 90], "2011": [89, 90, 107, 108], "lladser_ci": 90, "low": [90, 674, 682], "log": [91, 486, 487, 488, 489, 492, 493, 494, 495], "accumul": [91, 94, 705], "2004": [91, 94], "blackwel": [91, 94], "pp": [91, 94, 99, 669], "76": [91, 94, 144], "77": [91, 94, 559], "mcintosh": [92, 93], "mcintosh_": 92, "propos": [92, 98, 770], "1967": [92, 557], "concept": [92, 501], "1115": 92, "1126": 92, "mcintosh_d": 93, "engel": 93, "560": 93, "d_": 94, "mn": 94, "squar": [94, 95, 109, 143, 503, 527, 671], "num_repeat": 95, "params_guess": 95, "micha": 95, "menten": 95, "fit": [95, 653, 655, 676, 837], "rarefact": 95, "ns_": 95, "datapoint": 95, "subsampl": [95, 653, 679, 682, 683, 684, 715], "s_max": 95, "subsample_count": [95, 653], "controversi": 95, "ml": 95, "assumpt": [95, 143, 484, 489, 723, 724, 772], "roughli": 95, "magnitud": [95, 557, 559, 674, 771], "enzym": 95, "kinet": 95, "nonlinear": 95, "raaijmak": 95, "1987": [95, 770], "biometr": [95, 559], "793": 95, "803": 95, "reli": [97, 220, 338, 389, 836], "pielou": 98, "heip_": 98, "wikipedia": [98, 138, 139, 147, 770, 835], "en": [98, 138, 139, 147, 770], "wiki": [98, 138, 139, 145, 147, 770], "species_even": 98, "1966": 98, "theoret": 98, "biologi": [98, 287, 563, 710, 723, 769, 770], "131": [98, 713], "unobserv": 99, "outcom": [99, 682], "1968": 99, "vol": 99, "36": [99, 144, 679], "256": [99, 679], "257": 99, "bit": [100, 134, 135], "log_2": 100, "enspi": 102, "tiem": 102, "utk": 102, "gross": 102, "bealsmodul": 102, "simpsondi": 102, "d_w": 104, "max_i": 104, "b_i": [104, 501], "sequenti": [104, 138, 139, 145, 489, 501, 665, 764], "rank": [104, 148, 489, 555, 556, 557, 678, 728], "smallest": [104, 145, 682, 683], "express": [104, 246, 272, 314, 336, 363, 387, 415, 442, 466, 682, 833], "bracket": [104, 143], "denot": [104, 138, 489, 555, 558, 559], "dw": 104, "assess": [104, 555, 557, 558, 559, 563], "uneven": 104, "plant": [104, 137, 501], "237": 104, "get_alpha_diversity_metr": [105, 112], "dissimilar": [106, 109, 142, 502, 503, 504, 505, 507, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 526, 528, 529, 531, 536, 537, 538, 540, 541, 543, 545, 547, 550, 551, 554], "v_count": [107, 108], "qualit": [107, 108, 665], "versu": [107, 108], "quantit": [107, 108, 668, 683], "deeper": [107, 108], "mathemat": [107, 486, 710, 713, 769], "advis": [107, 108, 113], "appl": [107, 108], "microbiol": [107, 108], "71": [107, 144, 147], "8228": 107, "8235": 107, "2005": [107, 137], "kellei": [107, 108], "insight": [107, 108], "factor": [107, 108, 555, 558, 563, 669, 683], "structur": [107, 108, 135, 140, 143, 148, 503, 555, 556, 563, 752, 796], "73": [107, 108], "1576": [107, 108], "1585": [107, 108], "2007": [107, 108], "stombaugh": [107, 108], "comparison": [107, 108, 489, 563, 681, 713, 770, 773, 835], "169": [107, 108], "172": [107, 108], "uu": 107, "37": [107, 147], "quantiti": 108, "mathemt": 108, "wu": 108, "pairwise_func": 109, "pairwis": [109, 110, 113, 489, 517, 542, 560, 563, 721, 759, 835], "hollow": [109, 133, 503, 542, 544, 561], "sklearn": 109, "pairwise_dist": 109, "reduce_f": 110, "map_f": 110, "decomposit": 110, "resolv": [110, 113, 124, 563], "partialdistancematrix": 110, "_block_comput": 110, "ipyparallel": 110, "map_async": 110, "blocksiz": 110, "process": [110, 138, 147, 215, 676, 772, 797, 838], "motiv": 110, "earth": 110, "dataset": [110, 133, 486, 559, 654, 669, 674], "span": [110, 138, 140, 143, 191, 216], "000": 110, "partial_beta_divers": 110, "earthmicrobiom": 110, "id_pair": 113, "unstabl": 113, "caution": 113, "unresolv": 113, "warn": [114, 121, 139, 674, 712, 766, 771, 772, 836, 837], "blast7": 115, "pars": [115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 138, 139, 140, 142, 149, 831], "embl": [117, 140, 148, 191, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482], "sniffer": [121, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 177, 182, 183, 187, 188, 831], "gff3": [122, 140, 217, 219, 269, 276, 334, 337, 480, 482], "genbank": [123, 137, 141, 148, 269, 276, 334, 337, 384, 388, 438, 445, 480, 482], "lsmat": [125, 520, 525, 546, 552], "written": [128, 136, 138, 139, 143, 145, 769, 831, 835], "qseq": [129, 134, 135, 269, 334, 384, 438, 480], "qual": [130, 139], "ambigu": [132, 183, 188], "unidentifi": 132, "rapid": [133, 138, 732], "ye": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "dissimilaritymatrix": [133, 142, 527, 529, 531, 536, 538, 540, 541, 545, 548, 550, 551, 561], "hdf5": 133, "datatyp": [133, 653, 684], "diagon": [133, 542, 549], "float32": [133, 559], "human": [133, 138, 139, 142, 143, 144, 775], "hdfgroup": 133, "header": [134, 135, 136, 139, 140, 142, 144], "tab": [134, 135, 141, 142, 143, 144, 146, 148], "moac": 134, "gi": [134, 135, 140], "15800534": 134, "np_286546": 134, "3e": [134, 135, 679], "114": 134, "330": 134, "170768970": 134, "zp_02903423": 134, "99": [134, 135, 137, 144, 555, 559, 563], "9e": 134, "329": 134, "outfmt": [134, 135], "legaci": [134, 135, 138], "With": [134, 486, 497], "qseqid": [134, 135], "sseqid": [134, 135], "bitscor": [134, 135], "qstart": [134, 135], "sstart": [134, 135], "qgi": [134, 135], "qacc": [134, 135], "acces": 134, "qaccver": [134, 135], "qlen": [134, 135], "sallseqid": [134, 135], "sgi": [134, 135], "sallgi": [134, 135], "sacc": [134, 135], "saccver": [134, 135], "sallacc": [134, 135], "slen": [134, 135], "qend": [134, 135], "send": [134, 135], "sseq": [134, 135], "raw": [134, 586, 619], "pident": [134, 135], "percent": [134, 833], "nident": [134, 135], "gapopen": [134, 135], "ppo": [134, 135], "percentag": [134, 486], "frame": [134, 135, 275, 287, 288, 444, 556, 728], "qframe": [134, 135], "sframe": [134, 135], "btop": [134, 135], "traceback": [134, 145, 287, 446, 557], "staxid": [134, 135], "sscinam": [134, 135], "scomnam": [134, 135], "sblastnam": [134, 135], "sskingdom": [134, 135], "super": [134, 135], "kingdom": [134, 135, 148], "stitl": [134, 135], "sstrand": [134, 135], "strand": [134, 135, 140, 141, 147, 191, 273, 274, 275, 441], "salltitl": [134, 135], "qcov": [134, 135], "qcovhsp": [134, 135], "hsp": [134, 135], "miss": [134, 138, 147, 238, 306, 355, 407, 463, 486, 497, 556, 665, 681, 682, 687, 688, 838], "default_column": 134, "suppos": [134, 135, 137, 138, 139, 140, 143, 146, 147, 486, 679, 683], "tgi": 134, "t100": [134, 135], "t161": 134, "t0": [134, 135, 141, 144, 146, 502], "t1": [134, 135, 144, 146, 148, 502], "t3e": [134, 135], "t330": 134, "t99": 134, "t9e": 134, "t329": 134, "fh": [134, 135, 136, 138, 139, 140, 141, 145, 146, 147, 148, 149, 161, 162, 163], "df": [134, 135, 148, 522, 548, 555, 556, 559, 665, 680], "000000e": [134, 135], "altschul": [134, 135], "gish": [134, 135], "miller": [134, 135], "myer": [134, 135], "lipman": [134, 135, 138], "1990": [134, 135, 137], "215": [134, 135], "403": [134, 135], "410": [134, 135], "blastedbio": 134, "blogspot": 134, "csv": [134, 142, 831], "book": [134, 135, 138], "nbk279675": 134, "blastn": 135, "18": [135, 144, 147, 555, 679, 833], "1786181": 135, "gb": [135, 140], "ae000111": 135, "ecoli": 135, "field": [135, 139, 146, 277], "hit": 135, "10596": 135, "ae000174": 135, "8e": 135, "5565": 135, "5671": 135, "6928": 135, "6821": 135, "ae000394": 135, "1e": [135, 143, 773], "5587": 135, "135": 135, "219": [135, 137, 556], "ae000425": 135, "6e": 135, "8552": 135, "8468": 135, "ae000171": 135, "2214": 135, "2130": 135, "minor": 135, "blastp": 135, "31": 135, "query1": 135, "subject2": 135, "sbjctframe": 135, "ver": 135, "subject1": 135, "other_vertebr": 135, "af178033": 135, "emorg": 135, "811": 135, "1566": 135, "af031394": 135, "63": [135, 144], "909": 135, "1542": [135, 710], "blast6": 135, "sbjct": 135, "tae000111": 135, "t10596": 135, "tae000174": 135, "t8e": 135, "t5565": 135, "t5671": 135, "t6928": 135, "t6821": 135, "tae000171": 135, "t5587": 135, "t2214": 135, "t2130": 135, "tae000425": 135, "t6e": 135, "t8552": 135, "t8468": 135, "temorg": 135, "t811": 135, "t1566": 135, "af178032": 135, "t94": 135, "57": [135, 144, 669], "t44": 135, "t1217": 135, "af178031": 135, "82": [135, 136, 147], "t42": 135, "t1233": 135, "94": [135, 144], "1217": 135, "1233": 135, "nbk279682": 135, "plain": [136, 138, 139, 140, 143, 145, 146], "degre": [136, 673, 680, 682], "divid": [136, 501, 671, 673, 677], "60": [136, 137, 141, 564, 682], "properti": [136, 145, 148, 278, 284, 289, 517, 527, 542, 679, 710, 746, 776, 788, 790, 791, 792], "abc": [136, 225, 289, 294, 343, 394, 451], "gcaugcaucugcauacguacguacgcaugcauca": 136, "xyz": 136, "gucgauacauacguacgucguacguacgu": 136, "cgac": 136, "cgcgaugcaugcau": 136, "cgau": 136, "caugcaucguacguacgcaugac": 136, "clustal_f": 136, "gcaugcaucugcauacguacguacgcaugca": 136, "gucgauacauacguacgucgguacgu": 136, "cgugcaugcau": 136, "cauucguacguacgcaugac": 136, "gcaugcaucugcauacguacguacgcaugcagucgauacauacguacgucgguacgu": 136, "accgttgta": [136, 145], "gtagct": [136, 145], "gtcgaa": [136, 145], "gtacct": [136, 145], "agagttgaaggtatct": [136, 145], "getvalu": [136, 138, 139, 140, 141, 145, 147, 502], "sciencedirect": 136, "scienc": [136, 138, 669], "pii": 136, "0378111988903307": 136, "mit": 136, "meme_v4": 136, "clustalw": 136, "annot": [137, 140, 141, 201], "mark": [137, 140, 147, 838], "termin": [137, 274, 287, 443, 763], "comment": [137, 138, 140, 141, 142, 147, 148], "extens": 137, "seen": [137, 140, 683], "ena": [137, 140], "assembl": 137, "flatfil": 137, "parent": [137, 141, 143, 148, 446, 501, 688, 690, 707, 710, 722, 725, 734, 742, 746, 755, 761, 764, 766, 767, 835], "metatdata": 137, "moment": [137, 557, 838], "1499": 137, "rn": [137, 147], "download": [137, 140, 148], "molecul": [137, 138, 140, 446, 833], "thymin": [137, 140, 273, 441], "uracil": [137, 140, 273, 441], "embl_str": 137, "x56734": 137, "sv": 137, "mrna": 137, "std": [137, 673, 677, 682], "pln": [137, 148], "1859": 137, "bp": [137, 140], "xx": 137, "s46826": 137, "dt": 137, "sep": 137, "1991": 137, "29": [137, 139, 140], "85": [137, 144, 683, 765], "de": [137, 147], "trifolium": 137, "repen": 137, "cyanogen": 137, "glucosidas": 137, "kw": 137, "white": 137, "clover": 137, "oc": 137, "eukaryota": 137, "viridiplanta": 137, "streptophyta": 137, "embryophyta": 137, "tracheophyta": 137, "spermatophyta": 137, "magnoliophyta": 137, "eudicotyledon": 137, "gunnerida": 137, "pentapetala": 137, "rosid": 137, "fabid": 137, "fabal": 137, "fabacea": 137, "papilionoidea": 137, "trifoliea": 137, "rp": 137, "rx": 137, "1007": 137, "bf00039495": 137, "pubm": [137, 140, 446], "1907511": 137, "ra": [137, 147], "oxtobi": 137, "dunn": 137, "pancoro": 137, "hugh": 137, "rt": [137, 147], "linamaras": 137, "rl": [137, 147], "209": [137, 140, 557], "insdc": [137, 140, 191], "univers": [137, 138, 145, 151], "newcastl": 137, "upon": 137, "tyne": 137, "medic": 137, "school": 137, "ne2": 137, "4hh": 137, "dr": 137, "md5": [137, 795], "1e51ca3a5450c43524b9185c236cc5cc": 137, "qualifi": [137, 140], "mol_typ": [137, 140], "clone_lib": 137, "lambda": [137, 653, 679, 682, 683, 712, 725, 746, 749, 754, 765, 769, 770, 838], "gt10": 137, "clone": 137, "tre361": 137, "tissue_typ": 137, "db_xref": [137, 140], "3899": 137, "evid": [137, 143], "1495": 137, "ec_numb": 137, "21": [137, 144, 489, 672, 683], "goa": 137, "p26204": 137, "interpro": 137, "ipr001360": 137, "ipr013781": 137, "ipr017853": 137, "ipr033132": 137, "uniprotkb": 137, "swiss": 137, "protein_id": 137, "caa40058": 137, "mdfivaifalfvissftitstnaveastlldignlsr": 137, "sfprgfifgagssayqfegavneggrgpsiwdtfthkypekirdgsnaditv": 137, "dqyhrykedvgimkdqnmdsyrfsiswprilpkgklsgginhegikyynnli": 137, "nellangiqpfvtlfhwdlpqvledeyggflnsgvindfrdytdlcfkefgd": 137, "rvrywstlnepwvfsnsgyalgtnapgrcsasnvakpgdsgtgpyivthnqi": 137, "lahaeavhvyktkyqayqkgkigitlvsnwlmplddnsipdikaaersldfq": 137, "fglfmeqlttgdysksmrrivknrlpkfskfesslvngsfdfiginyysssi": 137, "isnapshgnakpsystnpmtnisfekhgiplgpraasiwiyvypymfiqedf": 137, "eifcyilkinitilqfsitengmnefndatlpveeallntyridyyyrhlyi": 137, "irsairagsnvkgfyawsfldcnewfagftvrfglnfvd": 137, "609": 137, "314": 137, "355": [137, 564], "581": 137, "aaacaaacca": 137, "aatatggatt": 137, "ttattgtagc": 137, "catatttgct": 137, "ctgtttgtta": 137, "ttagctcatt": 137, "cacaattact": 137, "tccacaaatg": 137, "cagttgaagc": 137, "ttctactctt": 137, "cttgacatag": 137, "gtaacctgag": 137, "tcggagcagt": 137, "tttcctcgtg": 137, "gcttcatctt": 137, "tggtgctgga": 137, "tcttcagcat": 137, "accaatttga": 137, "aggtgcagta": 137, "aacgaaggcg": 137, "gtagaggacc": 137, "aagtatttgg": 137, "gataccttca": 137, "cccataaata": 137, "tccagaaaaa": 137, "ataagggatg": 137, "gaagcaatgc": 137, "agacatcacg": 137, "gttgaccaat": 137, "atcaccgcta": 137, "caaggaagat": 137, "gttgggatta": 137, "tgaaggatca": 137, "aaatatggat": 137, "tcgtatagat": 137, "tctcaatctc": 137, "ttggccaaga": 137, "atactcccaa": 137, "agggaaagtt": 137, "gagcggaggc": 137, "ataaatcacg": 137, "aaggaatcaa": 137, "atattacaac": 137, "aaccttatca": 137, "acgaactatt": 137, "ggctaacggt": 137, "atacaaccat": 137, "ttgtaactct": 137, "ttttcattgg": 137, "gatcttcccc": 137, "aagtcttaga": 137, "agatgagtat": 137, "ggtggtttct": 137, "taaactccgg": 137, "tgtaataaat": 137, "gattttcgag": 137, "actatacgga": 137, "tctttgcttc": 137, "aaggaatttg": 137, "gagatagagt": 137, "gaggtattgg": 137, "agtactctaa": 137, "atgagccatg": 137, "ggtgtttagc": 137, "aattctggat": 137, "atgcactagg": 137, "aacaaatgca": 137, "ccaggtcgat": 137, "gttcggcctc": 137, "caacgtggcc": 137, "aagcctggtg": 137, "attctggaac": 137, "aggaccttat": 137, "atagttacac": 137, "acaatcaaat": 137, "tcttgctcat": 137, "gcagaagctg": 137, "tacatgtgta": 137, "taagactaaa": 137, "taccaggcat": 137, "atcaaaaggg": 137, "aaagataggc": 137, "ataacgttgg": 137, "tatctaactg": 137, "gttaatgcca": 137, "cttgatgata": 137, "atagcatacc": 137, "agatataaag": 137, "gctgccgaga": 137, "gatcacttga": 137, "cttccaattt": 137, "ggattgttta": 137, "tggaacaatt": 137, "aacaacagga": 137, "gattattcta": 137, "agagcatgcg": 137, "gcgtatagtt": 137, "aaaaaccgat": 137, "tacctaagtt": 137, "ctcaaaattc": 137, "gaatcaagcc": 137, "tagtgaatgg": 137, "ttcatttgat": 137, "tttattggta": 137, "taaactatta": 137, "ctcttctagt": 137, "tatattagca": 137, "atgccccttc": 137, "acatggcaat": 137, "gccaaaccca": 137, "gttactcaac": 137, "aaatcctatg": 137, "accaatattt": 137, "catttgaaaa": 137, "acatgggata": 137, "cccttaggtc": 137, "caagggctgc": 137, "ttcaatttgg": 137, "atatatgttt": 137, "atccatatat": 137, "gtttatccaa": 137, "gaggacttcg": 137, "agatcttttg": 137, "ttacatatta": 137, "aaaataaata": 137, "taacaatcct": 137, "gcaattttca": 137, "atcactgaaa": 137, "atggtatgaa": 137, "tgaattcaac": 137, "gatgcaacac": 137, "ttccagtaga": 137, "agaagctctt": 137, "ttgaatactt": 137, "acagaattga": 137, "ttactattac": 137, "cgtcacttat": 137, "actacattcg": 137, "ttctgcaatc": 137, "agggctggct": 137, "caaatgtgaa": 137, "gggtttttac": 137, "gcatggtcat": 137, "ttttggactg": 137, "taatgaatgg": 137, "tttgcaggct": 137, "ttactgttcg": 137, "ttttggatta": 137, "aactttgtag": 137, "attagaaaga": 137, "tggattaaaa": 137, "aggtacccta": 137, "agctttctgc": 137, "ccaatggtac": 137, "aagaactttc": 137, "tcaaaagaaa": 137, "ctagctagta": 137, "ttattaaaag": 137, "tagattacag": 137, "tacatcgttt": 137, "gaagttgagt": 137, "tggtgcacct": 137, "aattaaataa": 137, "aagaggttac": 137, "tcttaacata": 137, "tttttaggcc": 137, "attcgttgtg": 137, "aagttgttag": 137, "gctgttattt": 137, "ctattatact": 137, "atgttgtagt": 137, "aataagtgca": 137, "ttgttgtacc": 137, "agaagctatg": 137, "atcataacta": 137, "taggttgatc": 137, "cttcatgtat": 137, "cagtttgatg": 137, "ttgagaatac": 137, "tttgaattaa": 137, "aagtcttttt": 137, "ttattttttt": 137, "aaaaaaaaaa": 137, "aaaaaaaaa": 137, "dna_seq": [137, 138, 140], "cross_refer": 137, "date": 137, "dbsourc": 137, "locu": [137, 140, 148], "1740": 137, "1800": 137, "rna_seq": [137, 140], "aauauggauu": 137, "uuauuguagc": 137, "cauauuugcu": 137, "cuguuuguua": 137, "uuagcucauu": 137, "cacaauuacu": 137, "uccacaaaug": 137, "caguugaagc": 137, "uucuacucuu": 137, "cuugacauag": 137, "guaaccugag": 137, "agaagcuaug": 137, "aucauaacua": 137, "uagguugauc": 137, "cuucauguau": 137, "caguuugaug": 137, "uugagaauac": 137, "uuugaauuaa": 137, "aagucuuuuu": 137, "uuauuuuuuu": 137, "trascrib": 137, "transcrib": [137, 140, 274, 275, 441, 833], "soppos": 137, "deal": [137, 190, 486, 497, 674, 831], "embl_gen": 137, "ftp": [137, 148, 191], "pub": [137, 148, 191], "releas": [137, 148, 836], "usrman": 137, "view": 137, "displai": [137, 247, 262, 270, 277, 315, 327, 335, 364, 377, 385, 416, 431, 439, 446, 467, 474, 481, 560, 655, 836], "brows": 137, "149855": 138, "cgatgtcgatcgatcgatcgatcag": 138, "34989": 138, "catcgatcgatcgatgcatgcatgcatg": 138, "accompani": [138, 503, 772], "particuarli": 138, "instrument": 138, "phred": [138, 139], "nonneg": 138, "deflin": 138, "split": [138, 139, 145, 147], "blank": [138, 139, 143, 144, 145, 519, 545], "whitespac": [138, 139, 142, 144, 147], "semicolon": [138, 141], "resembl": 138, "request": [138, 514, 524, 538, 551, 720, 794, 831], "pull": 138, "welcom": 138, "greater": [138, 201, 221, 290, 339, 390, 447, 555, 557, 558, 559, 560, 563, 682, 683, 684], "repect": 138, "strictli": [138, 489, 711], "enforc": [138, 446], "remaind": 138, "iupac": [138, 139, 145, 146, 220, 250, 277, 287, 338, 389, 419, 446, 833], "lexicon": [138, 139, 145], "sciki": 138, "additon": 138, "maintain": [138, 143, 149, 544, 668, 669, 679, 682, 836], "futur": 138, "seq_num": [138, 139, 140, 141, 146], "50th": [138, 489], "id_whitespace_replac": [138, 139], "disk": [138, 503], "potenti": [138, 260, 325, 375, 429, 472, 653, 749, 771, 838], "description_newline_replac": [138, 139], "max_width": 138, "width": [138, 145], "longer": [138, 145, 486, 683], "caveat": [138, 486], "exce": [138, 145], "12345": [138, 446], "runtim": [138, 220, 338, 389, 796, 838], "affect": [138, 143, 277, 278, 284, 446, 555, 559], "five": [138, 148, 489, 519, 545, 770], "turkei": [138, 145], "aagctngggcatttcagggtgagcccgggcaatacagggtat": 138, "salmo": [138, 145], "gair": 138, "aagccttggcagtgcagggtgagccgtgg": 138, "ccgggcacggtat": 138, "sapien": 138, "accggttggccgttcagggtacaggttggccgttcagggtaa": 138, "seq4": 138, "chimp": [138, 145], "aaacccttgccg": 138, "ttacgcttaaac": 138, "cgaggccgggac": 138, "actcat": 138, "seq5": 138, "gorilla": [138, 145], "aaacccttgccggtacgcttaaaccattgccggtacgcttaa": 138, "1986": [138, 143, 145, 669], "2008": [138, 145], "washington": [138, 143, 145, 769, 770], "joseph": [138, 145, 835], "felsenstein": [138, 145, 835], "permiss": [138, 143, 145], "grant": [138, 145], "fee": [138, 145], "charg": [138, 145], "fl": 138, "presum": 138, "aagccttggcagtgcagggtgagccgtggccgggcacggtat": 138, "aaacccttgccgttacgcttaaaccgaggccgggacactcat": 138, "detect": [138, 140, 183, 188, 489, 557, 683], "infeas": 138, "stream": [138, 141, 831], "aagctngggc": [138, 145], "atttcagggt": [138, 145], "gagcccgggc": [138, 145], "aatacagggt": [138, 145], "aagccttggc": 138, "agtgcagggt": [138, 145], "gagccgtggc": [138, 145], "cgggcacggt": [138, 145], "accggttggc": 138, "cgttcagggt": [138, 145], "acaggttggc": [138, 145], "aaacccttgc": [138, 145], "cgttacgctt": [138, 145], "aaaccgaggc": [138, 145], "cgggacactc": [138, 145], "cggtacgctt": [138, 145], "aaaccattgc": [138, 145], "fifth": 138, "standalon": 138, "cgatgtc": 138, "catcgtc": 138, "39": [138, 144, 501], "79": [138, 141, 144], "fasta_fl": 138, "qual_fl": 138, "uint8": [138, 139, 146, 220, 222, 239, 243, 258, 259, 264, 265, 266, 267, 291, 307, 311, 324, 329, 330, 331, 332, 338, 340, 356, 360, 374, 379, 380, 381, 382, 389, 391, 408, 412, 427, 428, 433, 434, 435, 436, 446, 448, 464, 465, 471, 476, 477, 478, 479], "new_fasta_fh": 138, "new_qual_fh": 138, "dj": 138, "pearson": [138, 557, 560, 563, 715], "wr": [138, 563], "1985": [138, 220, 289, 338, 389, 446], "sensit": [138, 263, 328, 378, 432, 475], "4693": 138, "1435": 138, "41": [138, 144], "fasta_format": 138, "blastcgihelp": 138, "shtml": 138, "broadinstitut": 138, "crd": 138, "php": 138, "madden": 138, "oct": [138, 140], "2003": [138, 486], "aug": 138, "mcentyr": 138, "ostel": 138, "editor": 138, "handbook": 138, "internet": [138, 148], "bethesda": 138, "nation": [138, 148], "center": [138, 148, 490, 556, 668, 670, 674, 677], "biotechnologi": [138, 148], "chapter": [138, 675], "nbk21097": 138, "evolut": [138, 143, 145, 562, 563, 710, 769, 770], "genet": [138, 143, 145, 148, 274, 275, 277, 278, 284, 285, 286, 287, 288, 443, 444, 562, 769, 770, 833], "mullikin": 139, "wellcom": 139, "sanger": 139, "institut": 139, "formal": [139, 148, 486], "conceptu": [139, 558], "aacaccaaacttctccaccacgtgagctacaaaag": 139, "cabcacc": 139, "lb": 139, "ccyt": 139, "wf": [139, 838], "tatgtatatataacatatacatatatacatacata": 139, "kz": 139, "yy": 139, "bt": 139, "aT": 139, "bbb": 139, "printabl": [139, 146], "ascii": [139, 146, 149, 708, 835], "excel": 139, "supplementari": [139, 489], "solexa": 139, "unfortun": [139, 682], "notabl": 139, "illumina": [139, 146], "tabl": [139, 140, 148, 274, 275, 277, 286, 287, 288, 443, 444, 489, 654, 668, 669, 675, 676, 796, 833], "highlight": 139, "bioinformat": [139, 145, 710], "foundat": 139, "obf": 139, "biopython": 139, "bioperl": [139, 145], "offset": [139, 140], "126": 139, "93": 139, "illumina1": [139, 146], "59": 139, "Not": [139, 559], "truncat": [139, 513, 537, 664, 770, 838], "outsid": [139, 191, 215, 247, 315, 364, 416, 467], "phred_offset": [139, 146], "whenev": [139, 674], "aacaccaaacttctccacc": 139, "acgtgagctacaaaag": 139, "reload": 139, "tatgtatata": 139, "taacatatac": 139, "atatatacat": 139, "acata": 139, "new_fh": 139, "ffffx": 139, "ab": [139, 289], "bbf": 139, "ka": 139, "bbx": 139, "jyzox": 139, "zxx": 139, "fff": 139, "fasffbf": 139, "sffaaa": 139, "peter": 139, "cock": 139, "christoph": 139, "naohisa": 139, "goto": 139, "michael": 139, "heuer": 139, "rice": 139, "nucl": 139, "1767": 139, "1771": 139, "publish": [139, 147], "decemb": 139, "2009": [139, 140, 563], "1093": 139, "nar": 139, "gkp1137": 139, "oxfordjourn": 139, "fastq_format": 139, "flat": [140, 260, 325, 375, 429, 472], "gbk": 140, "genpept": 140, "essenti": 140, "collabor": 140, "joint": 140, "effort": [140, 836], "ddbj": 140, "organis": 140, "layout": 140, "webpag": 140, "interval_metadata": [140, 141, 191, 201, 213, 216, 220, 225, 227, 254, 289, 294, 296, 320, 338, 343, 345, 369, 389, 394, 396, 423, 446, 451, 453, 468], "sub": [140, 141, 191, 684], "vocabulari": [140, 141], "infer": [140, 182, 187, 794, 831], "stranded": 140, "codon_start": 140, "phase": [140, 141, 836], "codon": [140, 148, 274, 277, 287, 288, 443], "dbxref": [140, 141], "cross": 140, "descriptor": [140, 675, 790, 791, 792], "67": [140, 144, 237, 244, 271, 312, 361, 406, 413, 440, 555, 559, 669, 679, 833], "66": [140, 144, 244, 312, 361, 413, 559, 833], "neighbor": [140, 755, 770], "68": [140, 564, 682], "remot": 140, "j00123": 140, "discard": [140, 557], "200": 140, "kept": 140, "199": 140, "__locat": 140, "__": 140, "gb_str": 140, "3k1v_a": 140, "34": [140, 146, 710], "syn": 140, "2012": [140, 148, 557], "chain": 140, "Of": 140, "mutant": 140, "preq1": 140, "260656459": 140, "synthet": 140, "artifici": [140, 654], "author": [140, 147, 446, 489], "klein": 140, "edward": 140, "ferr": 140, "amar": 140, "cocryst": 140, "riboswitch": [140, 191], "nat": 140, "343": 140, "344": 140, "19234468": 140, "seqr": 140, "32630": 140, "misc_bind": 140, "bound_moieti": 140, "agaggttcta": 140, "gcacatccct": 140, "ctataaaaaa": 140, "ctaa": 140, "agagguucua": 140, "gcacaucccu": 140, "cuauaaaaaa": 140, "cuaa": 140, "sitemap": 140, "samplerecord": 140, "feature_t": 140, "webfeat": 140, "nuccor": 140, "delimit": [141, 142, 144, 146, 148, 502], "intervalmetadata": [141, 191, 200, 220, 338, 389, 446], "seq_id": 141, "seqid": 141, "attr": [141, 733, 761], "tag": [141, 147, 244, 272, 312, 336, 361, 387, 413, 442, 501], "comma": [141, 143], "predefin": [141, 243, 311, 360, 412, 465], "derives_from": 141, "ontology_term": 141, "is_circular": 141, "parser": [141, 143], "skip_subregion": 141, "contigu": [141, 191, 260, 325, 375, 429, 472], "region": [141, 191, 201, 260, 325, 375, 429, 472], "exon": [141, 191, 263, 328, 378, 389, 432, 446, 475], "gff_str": 141, "gff": 141, "seq_1": 141, "tgene": 141, "t10": [141, 144], "t90": 141, "tid": 141, "gen1": 141, "texon": 141, "t30": [141, 146], "tparent": 141, "t50": 141, "seq_2": 141, "t80": 141, "t96": 141, "gen2": 141, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 141, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 141, "im": [141, 201, 213], "4604421736": 141, "fuzzi": [141, 191, 192, 200, 201, 212, 213, 446], "foo": [141, 201, 446, 795, 838], "gen": [141, 838], "4603377592": 141, "4603378712": 141, "atgcatgcat": 141, "gcatgcatgc": 141, "120": 141, "ontologi": 141, "blob": 141, "master": 141, "along": [142, 665, 673, 674], "tsv": 142, "varieti": 142, "serial": [142, 502, 655, 831], "del": [142, 654], "anywher": [142, 143, 489], "easili": [142, 833], "program": [142, 143, 148], "june": 143, "english": [143, 557], "subtre": [143, 148, 725, 835], "node_info": 143, "children": [143, 690, 695, 699, 707, 711, 722, 724, 731, 735, 742, 746, 748, 755], "null": [143, 489, 563, 679], "comment_char": 143, "all_char": 143, "safe_char": 143, "decim": [143, 774], "vice": [143, 563], "versa": [143, 563], "escap": 143, "semi": 143, "colon": 143, "recal": 143, "alon": [143, 556], "imagin": 143, "parenthesi": 143, "insert": [143, 212, 711], "abil": 143, "child": [143, 201, 238, 306, 355, 407, 463, 501, 690, 711, 742, 746, 764, 835], "bifurc": [143, 727], "alreadi": [143, 147, 149, 150, 161, 162, 163, 446, 503, 557], "sibl": [143, 238, 306, 355, 407, 463], "multifurc": [143, 835], "recurs": [143, 708, 766, 767], "infinitum": 143, "clariti": 143, "estrang": 143, "omit": [143, 502, 728, 762, 764, 769, 831], "technic": 143, "expon": 143, "due": [143, 215, 497, 556, 559, 669, 682], "disallow": [143, 147, 557], "stricter": [143, 773], "obviou": 143, "yet": [143, 148, 149], "regular": [143, 246, 272, 314, 336, 363, 387, 415, 442, 466, 833], "surround": 143, "a_1": 143, "_1": 143, "commonli": [143, 559, 676, 835], "unpair": 143, "worri": 143, "un": 143, "permit": [143, 162], "isomorph": [143, 492, 493, 494, 495], "convert_underscor": 143, "unescap": 143, "extern": 143, "ascii_art": [143, 711, 728, 729, 770, 835], "b_b": 143, "d_d": 143, "becam": 143, "preserv": [143, 668, 669, 674, 752], "newick_doc": 143, "newicktre": 143, "variou": [144, 502, 655, 679, 834, 837], "rda": [144, 655, 668, 669], "cca": [144, 654, 655, 668, 676], "ordinationresult": [144, 559, 668, 669, 674, 675, 676, 774], "six": [144, 275, 288, 444], "eigval": [144, 655], "biplot": [144, 668, 676], "constraint": [144, 655, 669, 676], "07": 144, "08": [144, 679, 682], "46": [144, 558, 683], "species0": 144, "species1": 144, "species2": 144, "01": [144, 679], "09": 144, "species3": 144, "03": [144, 559], "species4": 144, "species5": 144, "species6": 144, "species7": 144, "species8": 144, "70": 144, "69": 144, "site0": 144, "site1": [144, 654], "58": [144, 679], "site2": [144, 654], "site3": [144, 654], "site4": [144, 654], "97": 144, "06": 144, "61": [144, 559, 683], "site5": [144, 654], "04": [144, 679], "site6": [144, 654], "site7": [144, 654], "52": 144, "site8": [144, 654], "47": [144, 679], "site9": [144, 654], "74": 144, "32": [144, 558], "78": [144, 765], "55": [144, 241, 309, 358, 410, 559, 564, 679, 770], "02": [144, 148, 489], "declar": 144, "or_f": 144, "t4": 144, "t9": 144, "t2": [144, 146], "ord_r": 144, "joe": 145, "raxml": 145, "gairaagccttggc": 145, "sapiensaccggttggc": 145, "relax": 145, "interleav": [145, 147], "1x1": 145, "reach": 145, "11th": 145, "reserv": 145, "explicitli": [145, 654], "nucleic": [145, 148, 220, 289, 338, 389, 446], "older": 145, "chunk": 145, "2a": 145, "agagttgaag": 145, "gtatct": 145, "surpass": 145, "recent": [145, 287, 446, 557], "_except": 145, "phylipformaterror": 145, "shorter": 145, "post": [145, 679, 683], "obsolet": 145, "phylip_multiple_alignment_format": 145, "machin": 146, "lane": 146, "tile": 146, "casava": 146, "ommit": 146, "clear": 146, "variant": [146, 148], "exclud": [146, 501, 542, 549, 755], "acgtac": 146, "rubbbbrbcefgh": 146, "cgggcattgca": 146, "cgggcasdgca": 146, "acgta": 146, "aataaac": 146, "getaaafhwqaaf": 146, "catttagga": 146, "tgca": 146, "tjflkafnkkghvm": 146, "t3": 146, "t34": 146, "tacg": 146, "trubbbbrbcefgh": 146, "tcgggcattgca": 146, "tcgggcasdgca": 146, "t35": 146, "tacgta": 146, "tgetaaafhwqaaf": 146, "tcatttagga": 146, "ttjflkafnkkghvm": 146, "illumina_1": 146, "lane_numb": 146, "machine_nam": 146, "read_numb": 146, "run_numb": 146, "tile_numb": 146, "tac": 146, "aata": 146, "aac": 146, "biowulf": 146, "app": 146, "casava_ug_15011196b": 146, "pdf": 146, "upsk": 147, "se": 147, "infern": 147, "ss": 147, "pmid": [147, 557, 770], "9223489": 147, "rm": [147, 565, 631], "role": [147, 682], "pseudoknot": 147, "turnip": 147, "yellow": 147, "mosaic": 147, "viru": 147, "synthesi": 147, "viral": 147, "polymeras": 147, "deiman": 147, "ba": 147, "kortlev": 147, "pleij": 147, "cw": 147, "virol": 147, "1997": 147, "5990": 147, "5996": 147, "af035635": 147, "619": 147, "641": 147, "ugaguucucgaucucuaaaaucg": 147, "m24804": 147, "104": 147, "ugaguucucuaucucuaaaaucg": 147, "j04373": 147, "6212": 147, "6234": 147, "uaaguucucgaucuuuaaaaucg": 147, "m24803": 147, "uaaguucucgaucucuaaaaucg": 147, "ss_con": 147, "aaa": [147, 260, 325, 375, 429, 472], "ggt": [147, 270, 335, 385, 439, 481], "accgttcg": 147, "pfam": 147, "rfam": 147, "whole": [147, 672, 680], "cb": [147, 681], "domain": [147, 338, 728, 762], "nh": 147, "tn": 147, "unlik": [147, 653], "nhx": 147, "rc": [147, 237, 406, 519, 545, 665], "kestrel": 147, "gorlick": 147, "medlin": 147, "o83071": 147, "259": 147, "312": 147, "083071": 147, "o31698": 147, "ccchhhhhhhhhhhhhhh": 147, "eeeeeeee": 147, "eeeeeeeehhh": 147, "ccccchhhhhhhhhhhhh": 147, "eeeeeeeeeeh": 147, "cc": [147, 270, 277, 335, 385, 439, 481], "intracellular": 147, "mostli": 147, "192": 147, "88": [147, 559, 682], "139": 147, "bacillu": 147, "subtili": 147, "mtcraqliavprassla": 147, "aiacaqkm": 147, "rvsrv": 147, "sa": 147, "999887756453524252": 147, "55152525": 147, "36463": 147, "mqhvsapvfvfectrlai": 147, "vqhklrah": 147, "srava": 147, "mieadkvahvqvgnnleh": 147, "allvltkt": 147, "gytai": 147, "evmltdiprlhindpimk": 147, "gfgmvinn": 147, "gfv": 147, "o31699": 147, "AS": 147, "________________": 147, "____________________": 147, "IN": 147, "____________1______________2_________": 147, "eeeee": 147, "ordereddict": 147, "stockholm_format": 147, "sonnhamm": 147, "sbc": 147, "su": 147, "dump": [148, 835, 838], "classif": [148, 665], "pipe": 148, "host": [148, 563], "portal": 148, "daili": 148, "archiv": [148, 795], "pattern": [148, 246, 272, 314, 336, 363, 387, 415, 442, 466, 833, 838], "taxid": 148, "hierarch": [148, 501], "tax_id": [148, 728], "superkingdom": 148, "inherit": [148, 220, 289, 338, 389, 446], "div": 148, "flag": [148, 835], "mgc": 148, "hidden": 148, "suppress": [148, 555, 559, 560], "lineag": [148, 682, 729, 762], "free": [148, 796, 838], "2018": 148, "new_taxdump": 148, "compat": [148, 277, 836], "classic": 148, "plu": 148, "aforement": 148, "plastid": 148, "pgc": 148, "specified_": 148, "hydrogenosom": 148, "hgc": 148, "name_txt": 148, "synonym": 148, "cde": 148, "bct": 148, "vrt": 148, "mam": 148, "pri": 148, "abbrevi": [148, 655], "nodes_new": 148, "nodes_slim": 148, "parent_tax_id": [148, 728], "leftmost": 148, "till": 148, "crop": 148, "tno": 148, "t131567": 148, "tsuperkingdom": 148, "t335928": 148, "tgenu": 148, "131567": 148, "335928": 148, "genu": 148, "federhen": 148, "research": [148, 557, 674], "d1": [148, 833], "d136": 148, "d143": 148, "schoch": 148, "ciufo": 148, "domrachev": 148, "hotton": 148, "kannan": 148, "khovanskaya": 148, "karsch": 148, "mizrachi": 148, "2020": 148, "comprehens": 148, "curat": 148, "kan": 148, "2022": 148, "entrez": 148, "direct": [148, 669, 690], "unix": 148, "taxdump_readm": 148, "ncbiinsight": 148, "ioregistri": [149, 161, 163], "io_registri": 149, "focu": 149, "tutori": 149, "submodul": 149, "myformat": [149, 161, 162, 163], "create_format": [149, 161, 162, 163], "factori": [149, 161, 162, 163, 175, 186], "ideal": 149, "At": 149, "evaul": 149, "readi": 149, "decor": [149, 161, 162, 163, 201, 289, 712, 769, 776, 796, 808, 819], "onto": [149, 181, 675, 769], "_myformat_sniff": 149, "membership": 149, "futher": 149, "someskbioclass": [149, 831], "_myformat_to_some_skbio_class": 149, "kwarg1": 149, "filesentinel": [149, 161, 163], "auxilari": 149, "_some_skbio_class_to_myformat": 149, "receiv": [149, 151, 162, 247, 315, 364, 416, 467, 769], "fileformaterror": 149, "satisfi": [149, 216, 681, 819], "import_modul": 149, "boilerpl": 149, "busi": 149, "logic": [149, 796], "arg": [149, 175, 186, 274, 275, 443, 444], "auth": 149, "password": 149, "buffer_s": 149, "closefd": 149, "exclus": [149, 191, 201, 212, 239, 258, 307, 324, 356, 374, 408, 427, 464, 471, 489], "unabl": 151, "cl": [161, 163, 176, 178, 179, 180, 289, 780], "monkey_patch": [161, 163], "transform": [161, 163, 260, 325, 375, 429, 472, 486, 487, 488, 492, 493, 494, 495, 668, 674, 676], "attach": [161, 163, 710], "overriden": [161, 162, 163], "duplicateregistrationerror": [161, 162, 163], "add_format": [161, 163], "myobject": [161, 163], "myformat_read": [161, 163], "myformat2": [161, 162, 163], "thrown": [162, 730], "ask": 162, "report": [162, 563, 676], "myformat_sniff": 162, "default_write_format": 163, "format_object": 174, "regsistri": [175, 186], "format_nam": [176, 177, 178], "monkei": 181, "patch": 181, "useabl": 181, "unrecognizedformaterror": [182, 183, 184, 187, 188, 189], "formatidentificationwarn": [182, 187], "agre": [182, 187], "member": [182, 187, 796, 819, 838], "argumentoverridewarn": [182, 187], "claim": [183, 188], "registr": 185, "entiti": 191, "transcript": 191, "operon": 191, "accommod": 191, "gene_nam": 191, "ft_current": 191, "hypothet": 191, "gena": 191, "nt": 191, "shown": [191, 489, 668], "diagram": [191, 836], "tggattctgc": 191, "0123456789": 191, "matter": [192, 213, 507, 531], "setter": 200, "copy_from": 201, "storag": 201, "modif": [201, 563], "unbound": [201, 215], "speed": [201, 674], "build": [201, 501], "defer": 201, "until": [201, 501, 753], "fetch": [201, 835], "_interval_tre": 201, "_rebuild_tre": 201, "stale": 201, "delet": [201, 733, 749, 777], "_is_stale_tre": 201, "sagb": [201, 213], "sagc": 201, "saga": [201, 213, 446], "intvl": 201, "drop": [201, 227, 296, 345, 396, 453, 560, 654, 669, 749, 769], "interablemetadata": 213, "shift": 213, "im1": 213, "im2": 213, "negat": 214, "middl": 215, "live": 215, "reca": 216, "900": 216, "criteria": [216, 681, 765], "front": [218, 501], "uppercas": [220, 338, 389, 446], "compliant": [220, 338, 389], "nomenclatur": [220, 289, 338, 389, 446], "incomplet": [220, 289, 338, 389, 446], "3021": [220, 289, 338, 389, 446], "3030": [220, 289, 338, 389, 446], "cornish": [220, 289, 338, 389, 446], "bowden": [220, 289, 338, 389, 446], "accgaat": 220, "86": [220, 389], "truth": [221, 290, 339, 390, 447], "truthi": [221, 290, 339, 390, 447], "put": [222, 291, 340, 391, 448], "ggucgugaagga": [222, 227, 291, 296, 340, 345, 391, 396, 446, 448, 453], "ggu": [222, 291, 340, 391, 448], "ccc": [222, 291, 340, 391, 448], "obtain": [227, 296, 345, 396, 446, 453, 489, 502, 514, 524, 538, 549, 551, 555, 557, 559, 790, 791, 792], "aagga": [227, 296, 345, 396, 453], "cgagc": [227, 296, 345, 396, 453], "ggucg": [227, 239, 296, 307, 345, 356, 396, 408, 453, 464], "guc": [227, 296, 345, 396, 453], "gguc": [230, 232, 235, 243, 264, 265, 266, 267, 299, 301, 304, 311, 329, 330, 331, 332, 348, 350, 353, 360, 379, 380, 381, 382, 399, 401, 404, 412, 433, 434, 435, 436, 456, 458, 461, 465, 476, 477, 478, 479], "ggucguaaagga": [236, 305, 354, 405, 462], "hello": [236, 305, 354, 405, 462], "nucleotidemixin": [237, 271, 406, 440], "reverse_compl": [237, 259, 406, 428, 833], "complement_map": [237, 406], "ttcatt": [237, 259, 271, 406, 428, 440], "aagtaa": [237, 406], "aatgaa": [237, 259, 271, 406, 428, 440], "intersect": [238, 306, 355, 407, 463, 691, 692, 716, 719], "ancestor": [238, 306, 355, 407, 463, 705, 736, 738], "ggaa": [238, 306, 355, 407, 463], "acgtggaa": [238, 306, 355, 407, 463], "coercion": [238, 306, 355, 407, 463], "gg": [239, 245, 307, 313, 356, 362, 408, 414, 464], "has_definit": [240, 242, 252, 256, 268, 308, 310, 318, 322, 333, 357, 359, 367, 371, 383, 409, 411, 421, 425, 437], "acwgn": [240, 242, 268, 308, 310, 333, 357, 359, 383, 409, 411, 437], "gap_char": [241, 289, 309, 358, 410], "ggtc": [241, 309, 358, 410], "att": [241, 309, 358, 410], "56": [241, 309, 358, 410], "ggtccattc": [241, 309, 358, 410], "has_degener": [242, 251, 256, 310, 317, 322, 359, 366, 371, 411, 420, 425], "ham": [243, 311, 360, 412, 465, 502, 833], "fraction_diff": [243, 311, 360, 412, 465], "fraction_sam": [243, 311, 360, 412, 465], "aguc": [243, 264, 266, 311, 329, 331, 360, 379, 381, 412, 433, 435, 465, 476, 478], "custom_metr": [243, 311, 360, 412, 465], "degenerate_map": [244, 289, 312, 361, 413, 833], "trg": [244, 272, 312, 336, 361, 387, 413, 442], "seq_gener": [244, 312, 361, 413], "tgg": [244, 272, 312, 336, 361, 387, 413, 442], "motif_typ": [245, 313, 362, 414], "min_length": [245, 260, 313, 325, 362, 375, 414, 429, 472, 833], "motif": [245, 313, 362, 414, 833], "purin": [245, 313, 362, 414, 833], "pyrimidin": [245, 414], "acggggaggcggag": [245, 313, 362, 414], "motif_slic": [245, 313, 362, 414], "ggggagg": [245, 313, 362, 414], "ggag": [245, 313, 362, 414], "disrupt": [245, 313, 362, 414, 833], "regex": [246, 272, 314, 336, 363, 387, 415, 442, 466], "compil": [246, 272, 314, 336, 363, 387, 415, 442, 466, 684], "pre": [246, 272, 314, 336, 363, 387, 415, 442, 466, 683], "aatataccggttataa": [246, 314, 363, 415, 466], "tata": [246, 314, 363, 415, 466], "tataa": [246, 314, 363, 415, 466], "char": [247, 272, 315, 336, 364, 387, 416, 442, 467], "kmer_frequ": [247, 315, 364, 416, 467], "iter_km": [247, 315, 364, 416, 467], "observed_char": [247, 315, 364, 416, 467], "pprint": [247, 262, 315, 327, 364, 377, 416, 431, 446, 467, 474, 761], "agaagacc": [247, 315, 364, 416, 467], "has_gap": [248, 316, 365, 417], "gc_frequenc": [249, 418], "degap": [249, 250, 418, 419, 833], "acgtacgt": [249, 418], "acttagtt": [249, 418], "asst": [249, 250, 418, 419], "rykmbdhvn": [249, 250, 418, 419], "stand": [250, 419, 557], "ie": [250, 419], "gc_content": [250, 419], "nwnnnnnn": [251, 256, 317, 322, 366, 371, 420, 425], "ancacwwgacgtt": [251, 252, 256, 317, 318, 322, 366, 367, 371, 420, 421, 425], "acac": [252, 261, 318, 326, 367, 376, 421, 430, 473], "gacgtt": [252, 253, 318, 319, 367, 368, 421, 422], "acacgacgtt": [253, 258, 261, 319, 324, 326, 368, 374, 376, 422, 427, 430, 471, 473], "cac": [253, 261, 319, 326, 368, 376, 422, 430, 473], "complement": [259, 271, 287, 428, 440, 833], "aatgtt": [259, 428], "invert": [260, 325, 375, 429, 472], "skip": [260, 325, 375, 429, 472, 555, 557, 558, 559, 563], "adjac": [260, 325, 375, 429, 472], "ungap": [260, 325, 375, 429, 472], "cccc": [260, 325, 375, 429, 472], "no_gap": [260, 325, 375, 429, 472], "ungapped_subsequ": [260, 325, 375, 429, 472], "smaller": [260, 325, 375, 429, 472, 560], "find_motif": [260, 325, 375, 429, 472, 833], "find_with_regex": [260, 325, 375, 429, 472, 833], "acdfnasanftacgnpnrtesl": [260, 325, 375, 429, 472], "subseq": [260, 325, 375, 429, 446, 472], "glycosyl": [260, 325, 362, 375, 429, 472, 833], "nasanfta": [260, 325, 375, 429, 472], "nrte": [260, 325, 375, 429, 472], "kmer": [261, 262, 326, 327, 376, 377, 430, 431, 473, 474, 485], "gacg": [261, 326, 376, 430, 473], "aca": [261, 262, 326, 327, 376, 377, 430, 431, 473, 474], "cga": [261, 326, 376, 430, 473], "gac": [261, 326, 376, 430, 473], "cgt": [261, 326, 376, 430, 473], "gtt": [261, 326, 376, 430, 473], "acacatttatta": [262, 327, 377, 431, 474], "cat": [262, 327, 377, 431, 474, 681, 682], "tta": [262, 327, 377, 431, 474], "intron": [263, 328, 378, 389, 432, 475], "mismatch_frequ": [264, 329, 379, 433, 476, 833], "gauu": [265, 267, 330, 332, 380, 382, 434, 436, 477, 479], "match_frequ": [266, 331, 381, 435, 478, 833], "chosen": [270, 335, 385, 439, 481, 497, 556, 665, 676, 684], "ggtaccaacg": [270, 335, 385, 439, 481], "is_reverse_compl": [271, 440], "within_captur": [272, 336, 387, 442], "captur": [272, 336, 387, 442], "tcg": [272, 336, 387, 442], "translate_six_fram": [273, 274, 287, 441, 443], "taacgtta": [273, 441], "uaacguua": [273, 441], "reverse_transcrib": 274, "atgccactttaa": [274, 275], "mpl": [274, 275, 277, 287, 288, 443, 444], "yeast": [274, 443], "mpt": [274, 443], "independ": [275, 288, 444, 563, 575, 576, 597, 608, 641, 652, 763], "reading_fram": [275, 287, 288, 444], "rf": [275, 288, 444], "geneticcod": [275, 443, 444, 833], "chf": [275, 288, 444], "atl": [275, 288, 444], "lkwh": [275, 288, 444], "sg": [275, 288, 444], "kva": [275, 288, 444], "amino_acid": [277, 278, 284], "from_ncbi": [277, 278, 287, 288, 443, 444], "uuuuuuuuuuuuuuuuccccccccccccccccaaaaaaaaaaaaaaaagggggggggggggggg": 277, "uuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggg": 277, "ucagucagucagucagucagucagucagucagucagucagucagucagucagucagucagucag": 277, "histor": [277, 710], "wprintgc": [277, 285, 286], "ffllssssyi": 277, "wllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 277, "base1": 277, "base2": 277, "base3": 277, "candid": [277, 683], "divis": [277, 501, 677], "sr1": 277, "gracilibacteria": 277, "ccgwllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 277, "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm": 277, "augccacuuuaa": [277, 288, 443, 444], "named_gc": 278, "table_id": 286, "thraustochytrium": 286, "tmgc": 286, "prior": [287, 557, 560, 728, 797, 807, 838], "methionin": 287, "fmet": 287, "aguauucugccacuguaagaa": 287, "sgc": [287, 288], "silpl": 287, "cug": 287, "trim": 287, "fact": 287, "conform": 289, "abstract": 289, "grammar": [289, 446], "static": 289, "classproperti": 289, "customsequ": 289, "definite_char": 289, "ababacac": 289, "xxxxxx": 289, "paw": [338, 373, 386], "has_stop": 386, "accgaau": 389, "genetic_cod": [443, 444], "immut": [446, 833], "metdata": 446, "ncrna": 446, "ggucgugaag": 446, "ga": [446, 833], "alic": 446, "desc": 446, "retriev": [446, 527], "attributeerror": [446, 776], "destin": 446, "Be": 446, "illustr": [446, 555, 559, 836], "hasn": [446, 684], "bob": 446, "propag": 446, "carol": 446, "from_iter": 483, "agggta": 484, "cgttta": 484, "atcggcgat": 485, "gcagatgtg": 485, "9230769230": 485, "omic": 486, "inher": [486, 563], "absolut": [486, 557, 794], "x_": [486, 487, 501, 679, 683], "leq": 486, "compon": [486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 631, 655, 668, 674, 838], "aitchison": [486, 487, 488, 492, 493, 494, 495, 501], "geometri": [486, 488, 492, 493, 495], "euclidean": [486, 502, 556, 668, 674, 676], "perturb": [486, 499], "power": [486, 831], "simul": [486, 679, 682, 683], "strategi": [486, 497, 770], "centr": [486, 492, 493, 672], "clr": [486, 493], "isometr": [486, 487, 488, 494, 495], "ilr": [486, 495], "hypothesi": [486, 489, 557, 560, 563, 679], "nonzero": [486, 491, 497, 498, 499, 500], "pseudocount": [486, 489], "distort": 486, "pawlowski": 486, "glahn": 486, "egozcu": [486, 494, 495, 501], "tolosana": [486, 501], "delgado": [486, 501], "wilei": 486, "chichest": 486, "logratio": 486, "geologi": 486, "martin": [486, 497], "fernandez": [486, 497], "imput": [486, 497], "antibiot": [486, 681], "kill": 486, "harm": 486, "mat": [487, 488, 490, 491, 492, 493, 494, 495, 497, 759], "denominator_idx": [487, 488], "simplex": [487, 494, 495, 501], "denominator_col": 487, "denomin": [487, 488, 501], "amen": 487, "multivari": [487, 555, 556, 558, 559, 668, 669], "involv": 487, "rightarrow": [487, 488, 492, 493, 494, 495], "mathbb": [487, 488, 489, 492, 493, 494, 495], "x_1": [487, 488, 492, 493, 498, 499, 500], "x_d": [487, 488, 492, 493, 498, 499, 500], "ldot": [487, 488, 492, 493, 494, 495, 498, 499, 500], "09861229": 487, "38629436": 487, "69314718": 487, "alr": 488, "y_1": [488, 498, 499], "y_2": 488, "y_": [488, 683], "closur": [488, 498, 499, 500], "x_i": [488, 492, 496, 498, 499, 500, 501], "tau": 489, "theta": 489, "multiple_comparisons_correct": 489, "holm": 489, "bonferroni": 489, "significance_test": 489, "percentil": 489, "differenti": 489, "treatment": [489, 564, 682], "h_": 489, "0i": 489, "u_i": 489, "cutoff": [489, 769], "procedur": [489, 559, 831], "boniferroni": 489, "f_onewai": 489, "25th": 489, "median": [489, 559], "75th": 489, "reject": [489, 679], "multi": 489, "multiplicative_replac": 489, "ttest_ind": 489, "wilcoxon": 489, "kruskal": [489, 682, 683], "top": [489, 728], "mann": 489, "whitnei": 489, "mannwhitneyu": 489, "ttest_rel": 489, "sign": [489, 774], "anova": [489, 558, 575, 576, 597, 608, 641, 652], "walli": [489, 682, 683], "friedman": 489, "friedmanchisquar": 489, "understand": 489, "unsolv": 489, "promis": [489, 836], "001": [489, 679], "address": [489, 831], "1979": 489, "mandal": 489, "et": [489, 563], "al": [489, 563], "novel": 489, "health": [489, 681, 682], "diseas": [489, 557], "s3": [489, 555, 559], "s4": [489, 555, 559], "s5": [489, 555, 559], "s6": [489, 559], "b1": 489, "b2": 489, "b3": 489, "b4": 489, "b5": 489, "b6": 489, "b7": 489, "placebo": 489, "ancom_df": 489, "percentile_df": 489, "scenario": 489, "summar": 489, "conclud": 489, "tell": 489, "geometr": [490, 492, 501, 559], "averag": [490, 564, 565, 673, 677, 743, 769], "17445763": 490, "30216948": 490, "34891526": 490, "32495488": 490, "18761279": 490, "16247744": 490, "isometri": [492, 493, 494, 495], "limits_": [492, 493, 495, 496, 501], "foral": [492, 493], "g_m": 492, "prod": [492, 501], "79451346": 492, "30409883": 492, "5917809": 492, "10136628": 492, "21383822": 493, "26118259": 493, "28865141": 493, "23632778": 493, "basi": [494, 495, 501], "langl": [494, 496], "e_1": [494, 495], "rangle_a": [494, 496], "e_": [494, 495], "orthonorm": [494, 495, 501], "orthornorm": 494, "gram": [494, 495], "schmidt": [494, 495], "orthogon": [494, 495, 501], "7768362": 494, "68339802": 494, "11704769": 494, "bigoplu": 495, "odot": [495, 500], "e_i": 495, "34180297": 495, "29672718": 495, "22054469": 495, "14092516": 495, "aitchson": 496, "x_j": 496, "y_i": 496, "y_j": 496, "2107852473": 496, "delta": [497, 673], "1875": [497, 498], "375": 497, "0625": [497, 498], "4375": 497, "oplu": 498, "y_d": [498, 499], "ominu": 499, "14285714": 499, "42857143": 499, "28571429": 499, "23059566": 500, "25737316": 500, "26488486": 500, "24714631": 500, "sbp": 501, "partit": 501, "gsi": 501, "buildilrbas": 501, "ith": 501, "balanc": 501, "r_i": 501, "s_i": 501, "contrast": 501, "31209907": 501, "12526729": 501, "36733337": 501, "08930489": 501, "18112058": 501, "17882092": 501, "40459293": 501, "11888261": 501, "\u00e9": 501, "rozan": 501, "hernand": 501, "lapoint": 501, "h\u00e9bert": 501, "gentil": 501, "naess": 501, "marchand": 501, "lafond": 501, "matto": 501, "barlow": 501, "natal": 501, "ionom": 501, "revisit": 501, "nutrient": 501, "3389": 501, "fpl": 501, "00039": 501, "van": 501, "den": 501, "boogaart": 501, "gerald": 501, "raimon": 501, "bren": 501, "matevz": 501, "cran": [501, 555, 556, 557, 558, 559], "subpackag": 502, "deseri": [502, 655], "gender": [502, 681, 682], "gain": [502, 674], "symmetri": [502, 503, 527, 542, 544], "ta": [502, 833], "tb": 502, "tc": 502, "dm_fh": 502, "3x3": [502, 557, 560, 561], "extract": [502, 503, 507, 531, 555, 559, 669, 710, 833], "out_fh": 502, "dm_from_np": 502, "monoton": [502, 503, 560, 561], "asarrai": 503, "squareform": [503, 549], "col": 503, "redund": [503, 521, 527, 547, 654, 676], "lookup_id": [504, 518, 528, 543], "asymmetr": [507, 531], "missingiderror": [507, 514, 516, 518, 524, 531, 538, 541, 543, 551], "from_": [514, 538], "to_": [514, 538], "allow_overlap": [514, 538], "heatmap": [519, 545], "colormap": [519, 545, 665], "colorbar": [519, 545, 665], "red": [519, 545], "binary_dm": [520, 525, 546, 552], "gather": [524, 551, 835], "advantag": [527, 796], "routin": 527, "condens": [527, 539, 544, 549], "condensed_form": [527, 544, 549], "indiscern": 527, "triangl": [527, 542, 549, 557, 674], "planetmath": 527, "metricspac": 527, "randomli": [544, 555, 557, 558, 561, 653, 684, 715, 754], "to_data_fram": 549, "missing_id": 554, "distance_matrix": [555, 556, 558, 559, 671, 674], "categor": [555, 558, 654, 665], "statis": [555, 558], "unpermut": [555, 557, 558], "permanova": [555, 559], "vegan": [555, 556, 557, 558, 559, 668, 669, 676], "clark": [555, 556], "kr": 555, "australian": 555, "117": 555, "143": 555, "4x4": [555, 556, 759], "group1": 555, "group2": 555, "determinist": [555, 559], "group3": 555, "data_fram": 556, "environment": [556, 654, 669, 674, 675], "ph": 556, "rho": 556, "spearmanr": [556, 557], "env": 556, "primer": 556, "ainsworth": 556, "marin": 556, "92": 556, "205": 556, "htm": 556, "elev": 556, "400": 556, "530": 556, "450": 556, "810": 556, "771517": 556, "714286": 556, "side": [557, 560, 563], "triangular": 557, "portion": 557, "r_m": 557, "d_x": 557, "d_y": 557, "ij": 557, "extrem": 557, "reorder": [557, 560, 711, 715], "kendalltau": 557, "nonmatch": [557, 560], "corr_coeff": [557, 563], "pearsonr": [557, 563, 679], "pwmantel": 557, "legendr": [557, 654, 668, 669, 671, 672, 674, 675, 676], "3rd": [557, 631, 675, 775, 838], "edit": [557, 675], "elsevi": [557, 654, 668, 669, 676], "cancer": 557, "220": 557, "6018555": 557, "coeff": 557, "7559": 557, "moder": 557, "rerun": 557, "notifi": 557, "redefin": [557, 776], "henc": 557, "notion": 557, "pseudo": [558, 679], "adoni": 558, "anderson": [558, 559], "marti": [558, 559], "austral": 558, "2001": 558, "usag": 558, "eigh": [559, 674], "number_of_dimens": [559, 674], "homogen": [559, 668, 676], "disperison": 559, "permdisp2": 559, "analogu": 559, "leven": 559, "dispers": 559, "centroid": 559, "spaitial": 559, "eigendecomposit": [559, 674], "eigenvector": [559, 669, 674], "eigenvalu": [559, 655, 668, 674, 676], "fsvd": [559, 674], "lose": [559, 674], "accuraci": [559, 674], "lost": [559, 674], "select": [559, 681, 682, 754], "keyerror": 559, "betadisp": 559, "2006": 559, "245": 559, "253": 559, "g1": 559, "g2": 559, "calucul": 559, "thought": 559, "robust": [559, 563], "yeild": 559, "s7": 559, "conjunct": 559, "collat": 560, "consumpt": [560, 674], "oppos": [560, 838], "dm1": 560, "dm2": 560, "755929": 560, "142857": 560, "num_object": 561, "random_fn": 561, "drawn": [561, 679, 682, 683], "uniform": 561, "rand": 561, "pertain": 562, "host_dist": 563, "par_dist": 563, "hommola": 563, "parasit": 563, "cospeci": 563, "expand": [563, 762], "symbiont": 563, "somewhat": [563, 743], "weaker": 563, "incid": 563, "speciat": 563, "recapitul": 563, "co": 563, "cladogenesi": 563, "although": [563, 682], "loss": 563, "explanatori": [563, 654, 655, 669, 676], "poorli": [563, 674], "perm_stat": 563, "je": 563, "qiu": 563, "gilk": 563, "1457": 563, "1468": 563, "hdist": 563, "3f": 563, "832": 563, "fairli": 563, "inde": 563, "chanc": 563, "mainli": 564, "volatil": 564, "averagegradientanova": 564, "coord_data": 564, "354": 564, "2761": 564, "0341": 564, "0633": 564, "1004": 564, "2364": 564, "2186": 564, "0301": 564, "0225": 564, "356": 564, "2208": 564, "0874": 564, "3519": 564, "0031": 564, "607": 564, "1055": 564, "4140": 564, "116": 564, "634": 564, "3716": 564, "1154": 564, "0721": 564, "0898": 564, "coord": [564, 565, 587, 598, 631, 642], "orient": [564, 665, 681, 751, 831], "metadata_map": [564, 565, 587, 598, 631, 642], "65": 564, "prop_expl": [564, 565, 587, 598, 631, 642], "6216": 564, "7715": 564, "1215": 564, "6913": 564, "8304": 564, "trajectori": [564, 565, 575, 576, 586, 587, 597, 598, 608, 609, 619, 620, 630, 631, 641, 642, 652], "av": 564, "trajectory_categori": [564, 565, 587, 598, 631], "sort_categori": [564, 565, 587, 598, 631], "trajectory_result": 564, "get_trajectori": 564, "avg": 564, "0118478282382": 564, "52199973": 564, "29597001": 564, "20309816": 564, "007022633956606": 564, "ax": [565, 587, 598, 631, 654, 665, 668, 669], "norm": [565, 587, 631, 642], "gradientanova": [565, 587, 631, 642], "gradientanovaresult": [575, 597, 608, 641, 652], "groupresult": 576, "out_f": [586, 619, 630], "raw_f": [586, 619, 630], "categoryresult": 609, "2nd": [631, 775], "window_s": 642, "window": 642, "buf_siz": 653, "bin_f": 653, "bin": 653, "unsign": [653, 741], "resid": 653, "prng": 653, "wherea": 653, "decreas": 653, "overhead": 653, "demultiplex": 653, "123": 653, "samplea": 653, "aattgg": 653, "sampleb": 653, "atatatat": 653, "samplec": 653, "atggcc": 653, "atggct": 653, "atggcg": 653, "atggca": 653, "bin_": 653, "canon": [654, 669, 676, 830], "fish": 654, "transect": 654, "depth": [654, 679, 682, 683, 763, 835], "substrate_cor": 654, "substrate_sand": 654, "substrate_oth": 654, "site10": 654, "specie1": 654, "specie2": 654, "specie3": 654, "specie4": 654, "specie5": 654, "specie6": 654, "specie7": 654, "specie8": 654, "specie9": 654, "substrat": 654, "hot": 654, "perfect": [654, 669], "collinear": [654, 669], "ordination_result": 654, "proportion_explain": [654, 655], "cca1": 654, "466911": 654, "cca2": 654, "238327": 654, "cca3": 654, "100548": 654, "cca4": 654, "104937": 654, "cca5": 654, "044805": 654, "cca6": 654, "029747": 654, "cca7": 654, "012631": 654, "cca8": 654, "001562": 654, "cca9": 654, "000532": 654, "amsterdam": [654, 668, 669, 676], "short_method_nam": [655, 774], "long_method_nam": [655, 774], "biplot_scor": [655, 774], "sample_constraint": 655, "scatterplot": [655, 665], "svg": 655, "ipython": [655, 665], "notebook": [655, 665], "constrain": [655, 669], "legend": 665, "evenli": 665, "set1": 665, "grei": 665, "axes3d": 665, "situat": [665, 681], "mpl_toolkit": 665, "mplot3d": 665, "emperor": 665, "colormaps_refer": 665, "vazquez": 665, "pirrung": 665, "gonzalez": 665, "gigasci": 665, "21712454": 665, "5007512": 665, "91769271": 665, "45995501": 665, "80332382": 665, "65463348": 665, "pcoa_result": 665, "chi": [668, 669], "pca": [668, 674, 676], "steep": 668, "kind": 668, "ecologist": 668, "456": 668, "exhibit": 668, "multimod": 668, "spars": [668, 676], "notimplementederror": [668, 669], "nich": 669, "unimod": [669, 674], "habitat": 669, "unconstrain": 669, "deem": 669, "ones": [669, 682], "confus": 669, "ccora": 669, "cajo": 669, "ter": 669, "braak": 669, "1167": 669, "1179": 669, "piet": 669, "verdonschot": 669, "aquat": 669, "1995": 669, "289": 669, "covari": 670, "columnwis": 670, "elementwis": 671, "eq": [671, 672], "e_matrix": 672, "with_mean": [673, 677], "with_std": [673, 677], "ddof": [673, 677], "flatten": 673, "accord": [673, 677], "freedom": [673, 680], "likelyhood": [673, 677], "inplac": [674, 754], "euclidian": 674, "absent": 674, "On": 674, "semimetr": 674, "heterogen": 675, "physic": [675, 683], "scale_i": 676, "conting": 676, "Its": 676, "geq": 676, "focus": 676, "stimat": 677, "wherev": 677, "m_shape": 678, "tol": 678, "linalg": 678, "matrix_rank": 678, "rational": 678, "toler": 678, "precomput": 678, "svd": 678, "hoc": 679, "mont": 679, "carlo": 679, "k_": 679, "mu": 679, "mu_": 679, "neq": 679, "approx": 679, "commit": 679, "ii": 679, "repeatedli": 679, "underpow": 679, "statsmodel": 679, "ind": [679, 683], "dep": 679, "randint": 679, "randn": [679, 682, 683], "617": 679, "533": 679, "788": 679, "602": 679, "229": 679, "779": 679, "838": 679, "032": 679, "157": 679, "051": 679, "601": 679, "664": 679, "783": 679, "646e": 679, "subsample_pow": 679, "draw_mod": [679, 683], "pwr_100": 679, "counts_100": 679, "max_count": [679, 682, 683], "min_count": [679, 682, 683], "counts_interv": [679, 682, 683], "alpha_pwr": [679, 682, 683], "num_it": [679, 682, 683], "pwr_010": 679, "counts_010": 679, "pwr_001": 679, "counts_001": 679, "484": 679, "844": 679, "932": 679, "984": 679, "044": 679, "224": 679, "572": 679, "836": 679, "928": 679, "996": [679, 683], "016": 679, "108": 679, "332": 679, "848": 679, "956": 679, "vec": 680, "meta": [681, 682], "control_cat": [681, 682], "strict_match": [681, 682], "sex": [681, 682], "educ": 681, "diet": 681, "exercis": 681, "statu": [681, 682], "healthi": [681, 682, 683], "undefin": [681, 682, 715], "hous": 681, "abx": 681, "bb": 681, "hstack": [681, 682], "500": [682, 683], "num_run": [682, 683], "sample_count": [682, 683], "cytokin": 682, "transloc": 682, "myeloid": 682, "cell": 682, "cultur": 682, "macrophag": 682, "bone": 682, "marrow": 682, "phagocyt": 682, "periton": 682, "growth": 682, "media": 682, "acquir": 682, "lab": 682, "compani": 682, "labor": 682, "intens": 682, "assai": 682, "preliminari": 682, "cell_lin": 682, "incub": 682, "untreat": 682, "treatment_stat": 682, "groupbi": 682, "00193863362662502": 682, "receptor": 682, "temperatur": 682, "co2": 682, "pwr": 682, "cnt": 682, "528": 682, "088": 682, "127": 682, "168": 682, "adequ": 682, "sublist": 683, "reciproc": 683, "bacteria": [683, 728, 729, 762], "gardnerella": 683, "vaginali": 683, "vagin": 683, "menopaus": 683, "woman": 683, "experienc": 683, "urinari": 683, "tract": 683, "infect": 683, "uti": 683, "women": 683, "enrol": 683, "eight": 683, "week": 683, "particip": 683, "fecal": 683, "clinic": 683, "symptom": 683, "endpoint": [683, 759], "premenopaus": 683, "postmenopaus": 683, "pcr": 683, "pre_rat": 683, "pos_rat": 683, "chisquar": 683, "003": 683, "reproduct": 683, "histori": 683, "bmi": 683, "tobacco": 683, "subsample_paired_pow": 683, "linkag": [683, 727], "pwr_est": 683, "nanmean": 683, "056": 683, "074": 683, "226": 683, "806": 683, "952": 683, "stool": 683, "secondari": 683, "met_po": 683, "2500": 683, "met_neg": 683, "concentr": 683, "chemic": 683, "metabolite_test": 683, "005": 683, "pwr_est2": 683, "counts2": 683, "272": 683, "426": 683, "646": 683, "824": 683, "efficiencywarn": 684, "acceler": 684, "isubsampl": 684, "frequent": [690, 712], "grand": 690, "ellaps": 690, "mutat": 690, "evolutionari": [690, 770], "bootstrap": 690, "posterior": 690, "assur": [691, 692, 716, 719], "unrooted_deepcopi": [691, 692, 716, 719, 751, 752, 766], "unrooted_copi": [691, 692, 716, 719, 752, 767], "tree_copi": [691, 692, 716, 719], "tree_nod": [691, 692, 716, 719], "travers": [691, 692, 712, 716, 719, 723, 726, 737, 740, 743, 744, 745, 760, 766, 767, 835], "tree_copy_nod": [691, 692, 716, 719], "deleg": 695, "noparenterror": 705, "nolengtherror": [705, 721, 730], "lack": 705, "toward": 706, "cach": [707, 712, 718, 722, 723, 724, 726, 733, 742, 746], "child1": [707, 722], "child2": [707, 722], "show_intern": 708, "compact": 708, "topolog": 709, "incom": 710, "species_a": 710, "successfulli": 710, "strip": [710, 714, 715], "czech": 710, "luca": 710, "jaim": 710, "huerta": 710, "cepa": 710, "alexandro": 710, "stamataki": 710, "review": 710, "viewer": 710, "toolkit": 710, "2017": 710, "1535": 710, "speciesa": 710, "lca": [710, 738], "insert_length": 711, "intermedi": 711, "prune": [711, 753, 764, 765], "collaps": 711, "func": [712, 725, 749, 754, 765, 776, 809, 820], "cache_attrnam": 712, "cache_typ": 712, "frozenset": [712, 756, 757], "topologi": [712, 746, 835], "invalidate_cach": [712, 718], "is_tip": [712, 731, 734, 835], "tip_nam": 712, "include_self": [712, 737, 740, 743, 744, 745, 760, 763, 835], "robinson": 713, "fould": 713, "julia": 713, "goodrich": 713, "compare_subset": [713, 715, 756, 757, 835], "compare_tip_dist": [713, 714, 721, 730, 759, 835], "bioscienc": 713, "141": 713, "tree1": [713, 714, 715, 835], "tree2": [713, 714, 715, 835], "exclude_absent_taxa": 714, "compare_rfd": [714, 715], "dist_f": 715, "distance_from_r": 715, "shuffle_f": [715, 754], "mtrand": [715, 754], "randomst": [715, 754], "m1": 715, "m2": 715, "distance_from_r_squar": 715, "dist": [715, 730], "9f": 715, "000133446": 715, "cache_attr": [718, 733], "tip_subset": 720, "replic": 720, "cogent": 720, "totaldescendingbranch": 720, "postord": [720, 723, 737, 740, 744, 745, 760, 763, 835], "tr": 720, "tdbl": 720, "sdbl": 720, "tip_tip_dist": [721, 730], "accumulate_to_ancestor": 721, "get_max_dist": 721, "tip_a": [721, 750], "tip_d": 721, "find_al": [723, 725, 726], "find_by_id": [723, 724, 725], "find_by_func": [723, 724, 726], "node_id": [726, 732, 761], "linkage_matrix": 727, "id_list": 727, "hierarchi": [727, 728, 835], "dmp": 728, "from_taxonomi": [728, 762], "taxdump": 728, "phylum": 728, "set_index": 728, "archaea": [728, 729, 762], "firmicut": [728, 729, 762], "bacteroidet": [728, 729, 762], "lineage_map": 729, "from_taxdump": 729, "clostridia": [729, 762], "bacilli": [729, 762], "sphingobacteria": [729, 762], "euryarchaeota": [729, 762], "thermoplasmata": [729, 762], "halobacteria": [729, 762], "cytophagia": [729, 762], "distant": 730, "is_root": [731, 735, 835], "_leaf_index": 732, "create_cach": 733, "has_children": [734, 735], "tipnam": [736, 738], "lowest": [736, 738], "lowest_common_ancestor": 736, "convienc": [736, 738], "preorder": [737, 740, 743, 744, 760, 763, 835], "pre_and_postord": [737, 740, 743, 745, 760, 763], "non_tip": [737, 743, 744, 745, 760, 763, 769, 835], "node_c": 739, "nontip": 740, "levelord": [740, 743, 744, 745, 760, 763], "tip_count": 741, "remove_delet": [742, 746, 748, 753], "ineleg": 743, "stack": 743, "3x": 743, "worst": 743, "comb": 743, "visit": 744, "reconstruct": [746, 770, 833], "shear": 746, "pop": [746, 748, 749, 753], "to_delet": 746, "clade": [749, 756, 769, 835], "knowledg": [751, 831], "treeerror": [751, 752], "root_at_midpoint": [751, 770], "midpoint": [752, 770], "farthest": 752, "apart": 752, "mid": 752, "lengtherror": 752, "indirectli": 752, "root_at": [752, 766, 767], "lop": 753, "inf": 754, "infinit": [754, 766, 767], "rev": 754, "shuffler": 754, "shuffled_tre": 754, "tip_": 755, "tip_list": 758, "representationwarn": 759, "nan_length_valu": 761, "attribute_nam": 761, "aris": [761, 769], "problemat": 761, "id_index": 761, "child_index": 761, "left_child_id": 761, "right_child_id": 761, "attr_1": 761, "attr_n": 761, "allow_empti": 762, "filter_f": 762, "self_befor": 763, "self_aft": 763, "inord": 763, "elong": 764, "graft": 764, "unpack_by_func": 764, "unpack": 765, "assign_support": 765, "walk": [766, 767, 835, 838], "_not_": 766, "new_tre": [766, 767], "support_attr": 769, "tree_node_class": 769, "_tree": 769, "consensu": 769, "arbitrarili": [769, 838], "usefulli": 769, "disjoint": 769, "adapt": [769, 836], "matthew": 769, "wakefield": 769, "margush": 769, "mcmorri": 769, "fr": 769, "bulletin": 769, "239": 769, "consens": 769, "support_valu": 769, "consensus_tre": 769, "disallow_negative_branch_length": 770, "result_constructor": 770, "saitou": 770, "nei": 770, "3447015": 770, "neighbour_join": 770, "abcd": 770, "contstruct": 770, "render": 770, "newick_str": 770, "ineffici": 771, "success": [772, 797, 838], "alter": 772, "task": [772, 831], "deleteri": 772, "rtol": 773, "assertionerror": [773, 774], "almost": 773, "assert_frame_equ": 773, "ignore_method_nam": 774, "ignore_axis_label": 774, "ignore_direction": 774, "assert": 774, "direction": 774, "cardin": 775, "0th": 775, "owner": 780, "fn": 794, "subfold": 794, "filenam": 794, "open_fil": 795, "block_siz": 795, "1048576": 795, "checksum": 795, "hashlib": 795, "answer": 795, "stackoverflow": 795, "1131255": 795, "379593": 795, "fd": 795, "baz": 795, "hexdigest": 795, "ab07acbb1e496801937adfa772424bf7": 795, "short_circuit": 796, "offer": 796, "mechan": [796, 838], "prealloc": 796, "enabl": [796, 836, 838], "interrog": 796, "contextu": 796, "iter_": 797, "success_callback": [797, 838], "fail_callback": [797, 838], "engin": 797, "callback": [797, 838], "short_cicruit": 797, "aspect": 797, "_setup_debug_trac": 807, "prioriti": [808, 838], "not_non": [819, 838], "pronounc": 830, "sigh": 830, "kit": 830, "bui": 830, "oh": 830, "workflow": 830, "stabil": 830, "writeabl": 831, "snif": 831, "my_obj": 831, "someformat": 831, "oo": 831, "open_filehandl": 831, "unnam": 831, "twofold": 831, "nonbiolog": 833, "accgggta": 833, "my": 833, "gfp": 833, "ggg": 833, "d2": 833, "d3": 833, "tacccggt": 833, "straightforward": 833, "r1": 833, "gacccgcuuu": 833, "r2": 833, "gccccccuuu": 833, "r3": 833, "accguuaguc": 833, "r4": 833, "acgggu": 833, "uc": 833, "r5": 833, "agg": 833, "ggacugaa": 833, "gga": 833, "gaa": 833, "achiev": 833, "agggga": 833, "ut": 833, "atgtgtatttga": 833, "auguguauuu": 833, "protein_from_dna": 833, "mci": 833, "protein_from_rna": 833, "parenthes": 835, "traver": 835, "wish": 835, "tree3": 835, "6666666666666667": 835, "120492524415": 835, "extent": 836, "numpydoc": 836, "lifecycl": 836, "backward": 836, "cycl": 836, "seriou": 836, "methodolog": 836, "flaw": 836, "aim": 836, "move": 836, "quickli": 836, "philosophi": 836, "transit": 836, "awai": 836, "deprecationwarn": 836, "silenc": 836, "upcom": 836, "circuit": 838, "processor": 838, "nuc_pattern": 838, "aattg": 838, "has_nuc_pattern": 838, "sequenceprocessor": 838, "initialize_st": 838, "check_length": 838, "indicatd": 838, "specfi": 838, "aaaaaaattttttt": 838, "atagacc": 838, "aattgccggac": 838, "atatgaacaaa": 838, "fun": 838, "excit": 838, "success_f": 838, "fail_f": 838, "ccggac": 838, "assist": 838, "ahead": 838, "tttttttaaaaaaa": 838, "debug_trac": 838, "earlier": 838, "caggcc": 838, "anticip": 838, "debug_pre_st": 838, "debug_post_st": 838, "awesom": 838, "piec": 838, "debug_runtim": 838, "diagnos": 838, "aggreg": 838, "cprofil": 838, "quit": 838, "ex": 838, "do_someth": 838, "do_something_els": 838, "foobar": 838, "do_something_awesom": 838}, "objects": {"skbio": [[0, 0, 0, "-", "alignment"], [3, 0, 0, "-", "diversity"], [831, 0, 0, "-", "io"], [832, 0, 0, "-", "metadata"], [833, 0, 0, "-", "sequence"], [834, 0, 0, "-", "stats"], [835, 0, 0, "-", "tree"], [837, 0, 0, "-", "util"], [838, 0, 0, "-", "workflow"]], "skbio.alignment": [[7, 1, 1, "", "AlignmentStructure"], [21, 1, 1, "", "StripedSmithWaterman"], [33, 1, 1, "", "TabularMSA"], [65, 3, 1, "", "global_pairwise_align"], [66, 3, 1, "", "global_pairwise_align_nucleotide"], [67, 3, 1, "", "global_pairwise_align_protein"], [68, 3, 1, "", "local_pairwise_align"], [69, 3, 1, "", "local_pairwise_align_nucleotide"], [70, 3, 1, "", "local_pairwise_align_protein"], [71, 3, 1, "", "local_pairwise_align_ssw"], [72, 3, 1, "", "make_identity_substitution_matrix"]], "skbio.alignment.AlignmentStructure": [[8, 2, 1, "", "__eq__"], [9, 2, 1, "", "__ge__"], [10, 2, 1, "", "__getitem__"], [11, 2, 1, "", "__getstate__"], [12, 2, 1, "", "__gt__"], [13, 2, 1, "", "__hash__"], [14, 2, 1, "", "__le__"], [15, 2, 1, "", "__lt__"], [16, 2, 1, "", "__ne__"], [17, 2, 1, "", "__setstate__"], [18, 2, 1, "", "__str__"], [19, 2, 1, "", "is_zero_based"], [20, 2, 1, "", "set_zero_based"]], "skbio.alignment.StripedSmithWaterman": [[22, 2, 1, "", "__call__"], [23, 2, 1, "", "__eq__"], [24, 2, 1, "", "__ge__"], [25, 2, 1, "", "__getstate__"], [26, 2, 1, "", "__gt__"], [27, 2, 1, "", "__hash__"], [28, 2, 1, "", "__le__"], [29, 2, 1, "", "__lt__"], [30, 2, 1, "", "__ne__"], [31, 2, 1, "", "__setstate__"], [32, 2, 1, "", "__str__"]], "skbio.alignment.TabularMSA": [[34, 2, 1, "", "__bool__"], [35, 2, 1, "", "__contains__"], [36, 2, 1, "", "__copy__"], [37, 2, 1, "", "__deepcopy__"], [38, 2, 1, "", "__eq__"], [39, 2, 1, "", "__ge__"], [40, 2, 1, "", "__getitem__"], [41, 2, 1, "", "__getstate__"], [42, 2, 1, "", "__gt__"], [43, 2, 1, "", "__iter__"], [44, 2, 1, "", "__le__"], [45, 2, 1, "", "__len__"], [46, 2, 1, "", "__lt__"], [47, 2, 1, "", "__ne__"], [48, 2, 1, "", "__reversed__"], [49, 2, 1, "", "__str__"], [50, 2, 1, "", "append"], [51, 2, 1, "", "consensus"], [52, 2, 1, "", "conservation"], [53, 2, 1, "", "extend"], [54, 2, 1, "", "from_dict"], [55, 2, 1, "", "gap_frequencies"], [56, 2, 1, "", "has_metadata"], [57, 2, 1, "", "has_positional_metadata"], [58, 2, 1, "", "iter_positions"], [59, 2, 1, "", "join"], [60, 2, 1, "", "read"], [61, 2, 1, "", "reassign_index"], [62, 2, 1, "", "sort"], [63, 2, 1, "", "to_dict"], [64, 2, 1, "", "write"]], "skbio.diversity": [[73, 0, 0, "-", "alpha"], [105, 3, 1, "", "alpha_diversity"], [106, 0, 0, "-", "beta"], [109, 3, 1, "", "beta_diversity"], [110, 3, 1, "", "block_beta_diversity"], [111, 3, 1, "", "get_alpha_diversity_metrics"], [112, 3, 1, "", "get_beta_diversity_metrics"], [113, 3, 1, "", "partial_beta_diversity"]], "skbio.diversity.alpha": [[74, 3, 1, "", "ace"], [75, 3, 1, "", "berger_parker_d"], [76, 3, 1, "", "brillouin_d"], [77, 3, 1, "", "chao1"], [78, 3, 1, "", "chao1_ci"], [79, 3, 1, "", "dominance"], [80, 3, 1, "", "doubles"], [81, 3, 1, "", "enspie"], [82, 3, 1, "", "esty_ci"], [83, 3, 1, "", "faith_pd"], [84, 3, 1, "", "fisher_alpha"], [85, 3, 1, "", "gini_index"], [86, 3, 1, "", "goods_coverage"], [87, 3, 1, "", "heip_e"], [88, 3, 1, "", "kempton_taylor_q"], [89, 3, 1, "", "lladser_ci"], [90, 3, 1, "", "lladser_pe"], [91, 3, 1, "", "margalef"], [92, 3, 1, "", "mcintosh_d"], [93, 3, 1, "", "mcintosh_e"], [94, 3, 1, "", "menhinick"], [95, 3, 1, "", "michaelis_menten_fit"], [96, 3, 1, "", "observed_otus"], [97, 3, 1, "", "osd"], [98, 3, 1, "", "pielou_e"], [99, 3, 1, "", "robbins"], [100, 3, 1, "", "shannon"], [101, 3, 1, "", "simpson"], [102, 3, 1, "", "simpson_e"], [103, 3, 1, "", "singles"], [104, 3, 1, "", "strong"]], "skbio.diversity.beta": [[107, 3, 1, "", "unweighted_unifrac"], [108, 3, 1, "", "weighted_unifrac"]], "skbio.io": [[114, 4, 1, "", "ArgumentOverrideWarning"], [115, 4, 1, "", "BLAST7FormatError"], [116, 4, 1, "", "ClustalFormatError"], [117, 4, 1, "", "EMBLFormatError"], [118, 4, 1, "", "FASTAFormatError"], [119, 4, 1, "", "FASTQFormatError"], [120, 4, 1, "", "FileFormatError"], [121, 4, 1, "", "FormatIdentificationWarning"], [122, 4, 1, "", "GFF3FormatError"], [123, 4, 1, "", "GenBankFormatError"], [124, 4, 1, "", "IOSourceError"], [125, 4, 1, "", "LSMatFormatError"], [126, 4, 1, "", "NewickFormatError"], [127, 4, 1, "", "OrdinationFormatError"], [128, 4, 1, "", "PhylipFormatError"], [129, 4, 1, "", "QSeqFormatError"], [130, 4, 1, "", "QUALFormatError"], [131, 4, 1, "", "StockholmFormatError"], [132, 4, 1, "", "UnrecognizedFormatError"], [149, 0, 0, "-", "registry"], [190, 0, 0, "-", "util"]], "skbio.io.format": [[133, 0, 0, "-", "binary_dm"], [134, 0, 0, "-", "blast6"], [135, 0, 0, "-", "blast7"], [136, 0, 0, "-", "clustal"], [137, 0, 0, "-", "embl"], [138, 0, 0, "-", "fasta"], [139, 0, 0, "-", "fastq"], [140, 0, 0, "-", "genbank"], [141, 0, 0, "-", "gff3"], [142, 0, 0, "-", "lsmat"], [143, 0, 0, "-", "newick"], [144, 0, 0, "-", "ordination"], [145, 0, 0, "-", "phylip"], [146, 0, 0, "-", "qseq"], [147, 0, 0, "-", "stockholm"], [148, 0, 0, "-", "taxdump"]], "skbio.io.registry": [[150, 4, 1, "", "DuplicateRegistrationError"], [151, 1, 1, "", "Format"], [164, 1, 1, "", "IORegistry"], [185, 4, 1, "", "InvalidRegistrationError"], [186, 3, 1, "", "create_format"], [187, 3, 1, "", "read"], [188, 3, 1, "", "sniff"], [189, 3, 1, "", "write"]], "skbio.io.registry.Format": [[152, 2, 1, "", "__eq__"], [153, 2, 1, "", "__ge__"], [154, 2, 1, "", "__getstate__"], [155, 2, 1, "", "__gt__"], [156, 2, 1, "", "__hash__"], [157, 2, 1, "", "__le__"], [158, 2, 1, "", "__lt__"], [159, 2, 1, "", "__ne__"], [160, 2, 1, "", "__str__"], [161, 2, 1, "", "reader"], [162, 2, 1, "", "sniffer"], [163, 2, 1, "", "writer"]], "skbio.io.registry.IORegistry": [[165, 2, 1, "", "__eq__"], [166, 2, 1, "", "__ge__"], [167, 2, 1, "", "__getstate__"], [168, 2, 1, "", "__gt__"], [169, 2, 1, "", "__hash__"], [170, 2, 1, "", "__le__"], [171, 2, 1, "", "__lt__"], [172, 2, 1, "", "__ne__"], [173, 2, 1, "", "__str__"], [174, 2, 1, "", "add_format"], [175, 2, 1, "", "create_format"], [176, 2, 1, "", "get_reader"], [177, 2, 1, "", "get_sniffer"], [178, 2, 1, "", "get_writer"], [179, 2, 1, "", "list_read_formats"], [180, 2, 1, "", "list_write_formats"], [181, 2, 1, "", "monkey_patch"], [182, 2, 1, "", "read"], [183, 2, 1, "", "sniff"], [184, 2, 1, "", "write"]], "skbio.io.util": [[4, 3, 1, "", "open"], [5, 3, 1, "", "open_file"], [6, 3, 1, "", "open_files"]], "skbio.metadata": [[191, 1, 1, "", "Interval"], [201, 1, 1, "", "IntervalMetadata"]], "skbio.metadata.Interval": [[192, 2, 1, "", "__eq__"], [193, 2, 1, "", "__ge__"], [194, 2, 1, "", "__getstate__"], [195, 2, 1, "", "__gt__"], [196, 2, 1, "", "__le__"], [197, 2, 1, "", "__lt__"], [198, 2, 1, "", "__ne__"], [199, 2, 1, "", "__str__"], [200, 2, 1, "", "drop"]], "skbio.metadata.IntervalMetadata": [[202, 2, 1, "", "__copy__"], [203, 2, 1, "", "__deepcopy__"], [204, 2, 1, "", "__eq__"], [205, 2, 1, "", "__ge__"], [206, 2, 1, "", "__getstate__"], [207, 2, 1, "", "__gt__"], [208, 2, 1, "", "__le__"], [209, 2, 1, "", "__lt__"], [210, 2, 1, "", "__ne__"], [211, 2, 1, "", "__str__"], [212, 2, 1, "", "add"], [213, 2, 1, "", "concat"], [214, 2, 1, "", "drop"], [215, 2, 1, "", "merge"], [216, 2, 1, "", "query"], [217, 2, 1, "", "read"], [218, 2, 1, "", "sort"], [219, 2, 1, "", "write"]], "skbio.sequence": [[220, 1, 1, "", "DNA"], [277, 1, 1, "", "GeneticCode"], [289, 1, 1, "", "GrammaredSequence"], [338, 1, 1, "", "Protein"], [389, 1, 1, "", "RNA"], [446, 1, 1, "", "Sequence"], [483, 0, 0, "-", "distance"]], "skbio.sequence.DNA": [[221, 2, 1, "", "__bool__"], [222, 2, 1, "", "__contains__"], [223, 2, 1, "", "__copy__"], [224, 2, 1, "", "__deepcopy__"], [225, 2, 1, "", "__eq__"], [226, 2, 1, "", "__ge__"], [227, 2, 1, "", "__getitem__"], [228, 2, 1, "", "__getstate__"], [229, 2, 1, "", "__gt__"], [230, 2, 1, "", "__iter__"], [231, 2, 1, "", "__le__"], [232, 2, 1, "", "__len__"], [233, 2, 1, "", "__lt__"], [234, 2, 1, "", "__ne__"], [235, 2, 1, "", "__reversed__"], [236, 2, 1, "", "__str__"], [237, 2, 1, "", "complement"], [238, 2, 1, "", "concat"], [239, 2, 1, "", "count"], [240, 2, 1, "", "definites"], [241, 2, 1, "", "degap"], [242, 2, 1, "", "degenerates"], [243, 2, 1, "", "distance"], [244, 2, 1, "", "expand_degenerates"], [245, 2, 1, "", "find_motifs"], [246, 2, 1, "", "find_with_regex"], [247, 2, 1, "", "frequencies"], [248, 2, 1, "", "gaps"], [249, 2, 1, "", "gc_content"], [250, 2, 1, "", "gc_frequency"], [251, 2, 1, "", "has_definites"], [252, 2, 1, "", "has_degenerates"], [253, 2, 1, "", "has_gaps"], [254, 2, 1, "", "has_interval_metadata"], [255, 2, 1, "", "has_metadata"], [256, 2, 1, "", "has_nondegenerates"], [257, 2, 1, "", "has_positional_metadata"], [258, 2, 1, "", "index"], [259, 2, 1, "", "is_reverse_complement"], [260, 2, 1, "", "iter_contiguous"], [261, 2, 1, "", "iter_kmers"], [262, 2, 1, "", "kmer_frequencies"], [263, 2, 1, "", "lowercase"], [264, 2, 1, "", "match_frequency"], [265, 2, 1, "", "matches"], [266, 2, 1, "", "mismatch_frequency"], [267, 2, 1, "", "mismatches"], [268, 2, 1, "", "nondegenerates"], [269, 2, 1, "", "read"], [270, 2, 1, "", "replace"], [271, 2, 1, "", "reverse_complement"], [272, 2, 1, "", "to_regex"], [273, 2, 1, "", "transcribe"], [274, 2, 1, "", "translate"], [275, 2, 1, "", "translate_six_frames"], [276, 2, 1, "", "write"]], "skbio.sequence.GeneticCode": [[278, 2, 1, "", "__eq__"], [279, 2, 1, "", "__ge__"], [280, 2, 1, "", "__getstate__"], [281, 2, 1, "", "__gt__"], [282, 2, 1, "", "__le__"], [283, 2, 1, "", "__lt__"], [284, 2, 1, "", "__ne__"], [285, 2, 1, "", "__str__"], [286, 2, 1, "", "from_ncbi"], [287, 2, 1, "", "translate"], [288, 2, 1, "", "translate_six_frames"]], "skbio.sequence.GrammaredSequence": [[290, 2, 1, "", "__bool__"], [291, 2, 1, "", "__contains__"], [292, 2, 1, "", "__copy__"], [293, 2, 1, "", "__deepcopy__"], [294, 2, 1, "", "__eq__"], [295, 2, 1, "", "__ge__"], [296, 2, 1, "", "__getitem__"], [297, 2, 1, "", "__getstate__"], [298, 2, 1, "", "__gt__"], [299, 2, 1, "", "__iter__"], [300, 2, 1, "", "__le__"], [301, 2, 1, "", "__len__"], [302, 2, 1, "", "__lt__"], [303, 2, 1, "", "__ne__"], [304, 2, 1, "", "__reversed__"], [305, 2, 1, "", "__str__"], [306, 2, 1, "", "concat"], [307, 2, 1, "", "count"], [308, 2, 1, "", "definites"], [309, 2, 1, "", "degap"], [310, 2, 1, "", "degenerates"], [311, 2, 1, "", "distance"], [312, 2, 1, "", "expand_degenerates"], [313, 2, 1, "", "find_motifs"], [314, 2, 1, "", "find_with_regex"], [315, 2, 1, "", "frequencies"], [316, 2, 1, "", "gaps"], [317, 2, 1, "", "has_definites"], [318, 2, 1, "", "has_degenerates"], [319, 2, 1, "", "has_gaps"], [320, 2, 1, "", "has_interval_metadata"], [321, 2, 1, "", "has_metadata"], [322, 2, 1, "", "has_nondegenerates"], [323, 2, 1, "", "has_positional_metadata"], [324, 2, 1, "", "index"], [325, 2, 1, "", "iter_contiguous"], [326, 2, 1, "", "iter_kmers"], [327, 2, 1, "", "kmer_frequencies"], [328, 2, 1, "", "lowercase"], [329, 2, 1, "", "match_frequency"], [330, 2, 1, "", "matches"], [331, 2, 1, "", "mismatch_frequency"], [332, 2, 1, "", "mismatches"], [333, 2, 1, "", "nondegenerates"], [334, 2, 1, "", "read"], [335, 2, 1, "", "replace"], [336, 2, 1, "", "to_regex"], [337, 2, 1, "", "write"]], "skbio.sequence.Protein": [[339, 2, 1, "", "__bool__"], [340, 2, 1, "", "__contains__"], [341, 2, 1, "", "__copy__"], [342, 2, 1, "", "__deepcopy__"], [343, 2, 1, "", "__eq__"], [344, 2, 1, "", "__ge__"], [345, 2, 1, "", "__getitem__"], [346, 2, 1, "", "__getstate__"], [347, 2, 1, "", "__gt__"], [348, 2, 1, "", "__iter__"], [349, 2, 1, "", "__le__"], [350, 2, 1, "", "__len__"], [351, 2, 1, "", "__lt__"], [352, 2, 1, "", "__ne__"], [353, 2, 1, "", "__reversed__"], [354, 2, 1, "", "__str__"], [355, 2, 1, "", "concat"], [356, 2, 1, "", "count"], [357, 2, 1, "", "definites"], [358, 2, 1, "", "degap"], [359, 2, 1, "", "degenerates"], [360, 2, 1, "", "distance"], [361, 2, 1, "", "expand_degenerates"], [362, 2, 1, "", "find_motifs"], [363, 2, 1, "", "find_with_regex"], [364, 2, 1, "", "frequencies"], [365, 2, 1, "", "gaps"], [366, 2, 1, "", "has_definites"], [367, 2, 1, "", "has_degenerates"], [368, 2, 1, "", "has_gaps"], [369, 2, 1, "", "has_interval_metadata"], [370, 2, 1, "", "has_metadata"], [371, 2, 1, "", "has_nondegenerates"], [372, 2, 1, "", "has_positional_metadata"], [373, 2, 1, "", "has_stops"], [374, 2, 1, "", "index"], [375, 2, 1, "", "iter_contiguous"], [376, 2, 1, "", "iter_kmers"], [377, 2, 1, "", "kmer_frequencies"], [378, 2, 1, "", "lowercase"], [379, 2, 1, "", "match_frequency"], [380, 2, 1, "", "matches"], [381, 2, 1, "", "mismatch_frequency"], [382, 2, 1, "", "mismatches"], [383, 2, 1, "", "nondegenerates"], [384, 2, 1, "", "read"], [385, 2, 1, "", "replace"], [386, 2, 1, "", "stops"], [387, 2, 1, "", "to_regex"], [388, 2, 1, "", "write"]], "skbio.sequence.RNA": [[390, 2, 1, "", "__bool__"], [391, 2, 1, "", "__contains__"], [392, 2, 1, "", "__copy__"], [393, 2, 1, "", "__deepcopy__"], [394, 2, 1, "", "__eq__"], [395, 2, 1, "", "__ge__"], [396, 2, 1, "", "__getitem__"], [397, 2, 1, "", "__getstate__"], [398, 2, 1, "", "__gt__"], [399, 2, 1, "", "__iter__"], [400, 2, 1, "", "__le__"], [401, 2, 1, "", "__len__"], [402, 2, 1, "", "__lt__"], [403, 2, 1, "", "__ne__"], [404, 2, 1, "", "__reversed__"], [405, 2, 1, "", "__str__"], [406, 2, 1, "", "complement"], [407, 2, 1, "", "concat"], [408, 2, 1, "", "count"], [409, 2, 1, "", "definites"], [410, 2, 1, "", "degap"], [411, 2, 1, "", "degenerates"], [412, 2, 1, "", "distance"], [413, 2, 1, "", "expand_degenerates"], [414, 2, 1, "", "find_motifs"], [415, 2, 1, "", "find_with_regex"], [416, 2, 1, "", "frequencies"], [417, 2, 1, "", "gaps"], [418, 2, 1, "", "gc_content"], [419, 2, 1, "", "gc_frequency"], [420, 2, 1, "", "has_definites"], [421, 2, 1, "", "has_degenerates"], [422, 2, 1, "", "has_gaps"], [423, 2, 1, "", "has_interval_metadata"], [424, 2, 1, "", "has_metadata"], [425, 2, 1, "", "has_nondegenerates"], [426, 2, 1, "", "has_positional_metadata"], [427, 2, 1, "", "index"], [428, 2, 1, "", "is_reverse_complement"], [429, 2, 1, "", "iter_contiguous"], [430, 2, 1, "", "iter_kmers"], [431, 2, 1, "", "kmer_frequencies"], [432, 2, 1, "", "lowercase"], [433, 2, 1, "", "match_frequency"], [434, 2, 1, "", "matches"], [435, 2, 1, "", "mismatch_frequency"], [436, 2, 1, "", "mismatches"], [437, 2, 1, "", "nondegenerates"], [438, 2, 1, "", "read"], [439, 2, 1, "", "replace"], [440, 2, 1, "", "reverse_complement"], [441, 2, 1, "", "reverse_transcribe"], [442, 2, 1, "", "to_regex"], [443, 2, 1, "", "translate"], [444, 2, 1, "", "translate_six_frames"], [445, 2, 1, "", "write"]], "skbio.sequence.Sequence": [[447, 2, 1, "", "__bool__"], [448, 2, 1, "", "__contains__"], [449, 2, 1, "", "__copy__"], [450, 2, 1, "", "__deepcopy__"], [451, 2, 1, "", "__eq__"], [452, 2, 1, "", "__ge__"], [453, 2, 1, "", "__getitem__"], [454, 2, 1, "", "__getstate__"], [455, 2, 1, "", "__gt__"], [456, 2, 1, "", "__iter__"], [457, 2, 1, "", "__le__"], [458, 2, 1, "", "__len__"], [459, 2, 1, "", "__lt__"], [460, 2, 1, "", "__ne__"], [461, 2, 1, "", "__reversed__"], [462, 2, 1, "", "__str__"], [463, 2, 1, "", "concat"], [464, 2, 1, "", "count"], [465, 2, 1, "", "distance"], [466, 2, 1, "", "find_with_regex"], [467, 2, 1, "", "frequencies"], [468, 2, 1, "", "has_interval_metadata"], [469, 2, 1, "", "has_metadata"], [470, 2, 1, "", "has_positional_metadata"], [471, 2, 1, "", "index"], [472, 2, 1, "", "iter_contiguous"], [473, 2, 1, "", "iter_kmers"], [474, 2, 1, "", "kmer_frequencies"], [475, 2, 1, "", "lowercase"], [476, 2, 1, "", "match_frequency"], [477, 2, 1, "", "matches"], [478, 2, 1, "", "mismatch_frequency"], [479, 2, 1, "", "mismatches"], [480, 2, 1, "", "read"], [481, 2, 1, "", "replace"], [482, 2, 1, "", "write"]], "skbio.sequence.distance": [[484, 3, 1, "", "hamming"], [485, 3, 1, "", "kmer_distance"]], "skbio.stats": [[486, 0, 0, "-", "composition"], [502, 0, 0, "-", "distance"], [562, 0, 0, "-", "evolve"], [564, 0, 0, "-", "gradient"], [653, 3, 1, "", "isubsample"], [654, 0, 0, "-", "ordination"], [679, 0, 0, "-", "power"], [684, 3, 1, "", "subsample_counts"]], "skbio.stats.composition": [[487, 3, 1, "", "alr"], [488, 3, 1, "", "alr_inv"], [489, 3, 1, "", "ancom"], [490, 3, 1, "", "centralize"], [491, 3, 1, "", "closure"], [492, 3, 1, "", "clr"], [493, 3, 1, "", "clr_inv"], [494, 3, 1, "", "ilr"], [495, 3, 1, "", "ilr_inv"], [496, 3, 1, "", "inner"], [497, 3, 1, "", "multiplicative_replacement"], [498, 3, 1, "", "perturb"], [499, 3, 1, "", "perturb_inv"], [500, 3, 1, "", "power"], [501, 3, 1, "", "sbp_basis"]], "skbio.stats.distance": [[503, 1, 1, "", "DissimilarityMatrix"], [526, 4, 1, "", "DissimilarityMatrixError"], [527, 1, 1, "", "DistanceMatrix"], [553, 4, 1, "", "DistanceMatrixError"], [554, 4, 1, "", "MissingIDError"], [555, 3, 1, "", "anosim"], [556, 3, 1, "", "bioenv"], [557, 3, 1, "", "mantel"], [558, 3, 1, "", "permanova"], [559, 3, 1, "", "permdisp"], [560, 3, 1, "", "pwmantel"], [561, 3, 1, "", "randdm"]], "skbio.stats.distance.DissimilarityMatrix": [[504, 2, 1, "", "__contains__"], [505, 2, 1, "", "__eq__"], [506, 2, 1, "", "__ge__"], [507, 2, 1, "", "__getitem__"], [508, 2, 1, "", "__getstate__"], [509, 2, 1, "", "__gt__"], [510, 2, 1, "", "__le__"], [511, 2, 1, "", "__lt__"], [512, 2, 1, "", "__ne__"], [513, 2, 1, "", "__str__"], [514, 2, 1, "", "between"], [515, 2, 1, "", "copy"], [516, 2, 1, "", "filter"], [517, 2, 1, "", "from_iterable"], [518, 2, 1, "", "index"], [519, 2, 1, "", "plot"], [520, 2, 1, "", "read"], [521, 2, 1, "", "redundant_form"], [522, 2, 1, "", "to_data_frame"], [523, 2, 1, "", "transpose"], [524, 2, 1, "", "within"], [525, 2, 1, "", "write"]], "skbio.stats.distance.DistanceMatrix": [[528, 2, 1, "", "__contains__"], [529, 2, 1, "", "__eq__"], [530, 2, 1, "", "__ge__"], [531, 2, 1, "", "__getitem__"], [532, 2, 1, "", "__getstate__"], [533, 2, 1, "", "__gt__"], [534, 2, 1, "", "__le__"], [535, 2, 1, "", "__lt__"], [536, 2, 1, "", "__ne__"], [537, 2, 1, "", "__str__"], [538, 2, 1, "", "between"], [539, 2, 1, "", "condensed_form"], [540, 2, 1, "", "copy"], [541, 2, 1, "", "filter"], [542, 2, 1, "", "from_iterable"], [543, 2, 1, "", "index"], [544, 2, 1, "", "permute"], [545, 2, 1, "", "plot"], [546, 2, 1, "", "read"], [547, 2, 1, "", "redundant_form"], [548, 2, 1, "", "to_data_frame"], [549, 2, 1, "", "to_series"], [550, 2, 1, "", "transpose"], [551, 2, 1, "", "within"], [552, 2, 1, "", "write"]], "skbio.stats.evolve": [[563, 3, 1, "", "hommola_cospeciation"]], "skbio.stats.gradient": [[565, 1, 1, "", "AverageGradientANOVA"], [576, 1, 1, "", "CategoryResults"], [587, 1, 1, "", "FirstDifferenceGradientANOVA"], [598, 1, 1, "", "GradientANOVA"], [609, 1, 1, "", "GradientANOVAResults"], [620, 1, 1, "", "GroupResults"], [631, 1, 1, "", "TrajectoryGradientANOVA"], [642, 1, 1, "", "WindowDifferenceGradientANOVA"]], "skbio.stats.gradient.AverageGradientANOVA": [[566, 2, 1, "", "__eq__"], [567, 2, 1, "", "__ge__"], [568, 2, 1, "", "__getstate__"], [569, 2, 1, "", "__gt__"], [570, 2, 1, "", "__hash__"], [571, 2, 1, "", "__le__"], [572, 2, 1, "", "__lt__"], [573, 2, 1, "", "__ne__"], [574, 2, 1, "", "__str__"], [575, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.CategoryResults": [[577, 2, 1, "", "__eq__"], [578, 2, 1, "", "__ge__"], [579, 2, 1, "", "__getstate__"], [580, 2, 1, "", "__gt__"], [581, 2, 1, "", "__hash__"], [582, 2, 1, "", "__le__"], [583, 2, 1, "", "__lt__"], [584, 2, 1, "", "__ne__"], [585, 2, 1, "", "__str__"], [576, 5, 1, "", "category"], [576, 5, 1, "", "groups"], [576, 5, 1, "", "message"], [576, 5, 1, "", "probability"], [586, 2, 1, "", "to_files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[588, 2, 1, "", "__eq__"], [589, 2, 1, "", "__ge__"], [590, 2, 1, "", "__getstate__"], [591, 2, 1, "", "__gt__"], [592, 2, 1, "", "__hash__"], [593, 2, 1, "", "__le__"], [594, 2, 1, "", "__lt__"], [595, 2, 1, "", "__ne__"], [596, 2, 1, "", "__str__"], [597, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVA": [[599, 2, 1, "", "__eq__"], [600, 2, 1, "", "__ge__"], [601, 2, 1, "", "__getstate__"], [602, 2, 1, "", "__gt__"], [603, 2, 1, "", "__hash__"], [604, 2, 1, "", "__le__"], [605, 2, 1, "", "__lt__"], [606, 2, 1, "", "__ne__"], [607, 2, 1, "", "__str__"], [608, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[610, 2, 1, "", "__eq__"], [611, 2, 1, "", "__ge__"], [612, 2, 1, "", "__getstate__"], [613, 2, 1, "", "__gt__"], [614, 2, 1, "", "__hash__"], [615, 2, 1, "", "__le__"], [616, 2, 1, "", "__lt__"], [617, 2, 1, "", "__ne__"], [618, 2, 1, "", "__str__"], [609, 5, 1, "", "algorithm"], [609, 5, 1, "", "categories"], [619, 2, 1, "", "to_files"], [609, 5, 1, "", "weighted"]], "skbio.stats.gradient.GroupResults": [[621, 2, 1, "", "__eq__"], [622, 2, 1, "", "__ge__"], [623, 2, 1, "", "__getstate__"], [624, 2, 1, "", "__gt__"], [625, 2, 1, "", "__hash__"], [626, 2, 1, "", "__le__"], [627, 2, 1, "", "__lt__"], [628, 2, 1, "", "__ne__"], [629, 2, 1, "", "__str__"], [620, 5, 1, "", "info"], [620, 5, 1, "", "mean"], [620, 5, 1, "", "message"], [620, 5, 1, "", "name"], [630, 2, 1, "", "to_files"], [620, 5, 1, "", "trajectory"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[632, 2, 1, "", "__eq__"], [633, 2, 1, "", "__ge__"], [634, 2, 1, "", "__getstate__"], [635, 2, 1, "", "__gt__"], [636, 2, 1, "", "__hash__"], [637, 2, 1, "", "__le__"], [638, 2, 1, "", "__lt__"], [639, 2, 1, "", "__ne__"], [640, 2, 1, "", "__str__"], [641, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[643, 2, 1, "", "__eq__"], [644, 2, 1, "", "__ge__"], [645, 2, 1, "", "__getstate__"], [646, 2, 1, "", "__gt__"], [647, 2, 1, "", "__hash__"], [648, 2, 1, "", "__le__"], [649, 2, 1, "", "__lt__"], [650, 2, 1, "", "__ne__"], [651, 2, 1, "", "__str__"], [652, 2, 1, "", "get_trajectories"]], "skbio.stats.ordination": [[655, 1, 1, "", "OrdinationResults"], [668, 3, 1, "", "ca"], [669, 3, 1, "", "cca"], [670, 3, 1, "", "corr"], [671, 3, 1, "", "e_matrix"], [672, 3, 1, "", "f_matrix"], [673, 3, 1, "", "mean_and_std"], [674, 3, 1, "", "pcoa"], [675, 3, 1, "", "pcoa_biplot"], [676, 3, 1, "", "rda"], [677, 3, 1, "", "scale"], [678, 3, 1, "", "svd_rank"]], "skbio.stats.ordination.OrdinationResults": [[656, 2, 1, "", "__eq__"], [657, 2, 1, "", "__ge__"], [658, 2, 1, "", "__getstate__"], [659, 2, 1, "", "__gt__"], [660, 2, 1, "", "__hash__"], [661, 2, 1, "", "__le__"], [662, 2, 1, "", "__lt__"], [663, 2, 1, "", "__ne__"], [664, 2, 1, "", "__str__"], [655, 5, 1, "", "biplot_scores"], [655, 5, 1, "", "eigvals"], [655, 5, 1, "", "features"], [655, 5, 1, "", "long_method_name"], [665, 2, 1, "", "plot"], [655, 5, 1, "", "proportion_explained"], [666, 2, 1, "", "read"], [655, 5, 1, "", "sample_constraints"], [655, 5, 1, "", "samples"], [655, 5, 1, "", "short_method_name"], [667, 2, 1, "", "write"]], "skbio.stats.power": [[680, 3, 1, "", "confidence_bound"], [681, 3, 1, "", "paired_subsamples"], [682, 3, 1, "", "subsample_paired_power"], [683, 3, 1, "", "subsample_power"]], "skbio.tree": [[685, 4, 1, "", "DuplicateNodeError"], [686, 4, 1, "", "MissingNodeError"], [687, 4, 1, "", "NoLengthError"], [688, 4, 1, "", "NoParentError"], [689, 4, 1, "", "TreeError"], [690, 1, 1, "", "TreeNode"], [769, 3, 1, "", "majority_rule"], [770, 3, 1, "", "nj"]], "skbio.tree.TreeNode": [[691, 2, 1, "", "__copy__"], [692, 2, 1, "", "__deepcopy__"], [693, 2, 1, "", "__eq__"], [694, 2, 1, "", "__ge__"], [695, 2, 1, "", "__getitem__"], [696, 2, 1, "", "__getstate__"], [697, 2, 1, "", "__gt__"], [698, 2, 1, "", "__hash__"], [699, 2, 1, "", "__iter__"], [700, 2, 1, "", "__le__"], [701, 2, 1, "", "__len__"], [702, 2, 1, "", "__lt__"], [703, 2, 1, "", "__ne__"], [704, 2, 1, "", "__str__"], [705, 2, 1, "", "accumulate_to_ancestor"], [706, 2, 1, "", "ancestors"], [707, 2, 1, "", "append"], [708, 2, 1, "", "ascii_art"], [709, 2, 1, "", "assign_ids"], [710, 2, 1, "", "assign_supports"], [711, 2, 1, "", "bifurcate"], [712, 2, 1, "", "cache_attr"], [713, 2, 1, "", "compare_rfd"], [714, 2, 1, "", "compare_subsets"], [715, 2, 1, "", "compare_tip_distances"], [716, 2, 1, "", "copy"], [717, 2, 1, "", "count"], [718, 2, 1, "", "create_caches"], [719, 2, 1, "", "deepcopy"], [720, 2, 1, "", "descending_branch_length"], [721, 2, 1, "", "distance"], [722, 2, 1, "", "extend"], [723, 2, 1, "", "find"], [724, 2, 1, "", "find_all"], [725, 2, 1, "", "find_by_func"], [726, 2, 1, "", "find_by_id"], [727, 2, 1, "", "from_linkage_matrix"], [728, 2, 1, "", "from_taxdump"], [729, 2, 1, "", "from_taxonomy"], [730, 2, 1, "", "get_max_distance"], [731, 2, 1, "", "has_children"], [732, 2, 1, "", "index_tree"], [733, 2, 1, "", "invalidate_caches"], [734, 2, 1, "", "is_root"], [735, 2, 1, "", "is_tip"], [736, 2, 1, "", "lca"], [737, 2, 1, "", "levelorder"], [738, 2, 1, "", "lowest_common_ancestor"], [739, 2, 1, "", "neighbors"], [740, 2, 1, "", "non_tips"], [741, 2, 1, "", "observed_node_counts"], [742, 2, 1, "", "pop"], [743, 2, 1, "", "postorder"], [744, 2, 1, "", "pre_and_postorder"], [745, 2, 1, "", "preorder"], [746, 2, 1, "", "prune"], [747, 2, 1, "", "read"], [748, 2, 1, "", "remove"], [749, 2, 1, "", "remove_deleted"], [750, 2, 1, "", "root"], [751, 2, 1, "", "root_at"], [752, 2, 1, "", "root_at_midpoint"], [753, 2, 1, "", "shear"], [754, 2, 1, "", "shuffle"], [755, 2, 1, "", "siblings"], [756, 2, 1, "", "subset"], [757, 2, 1, "", "subsets"], [758, 2, 1, "", "subtree"], [759, 2, 1, "", "tip_tip_distances"], [760, 2, 1, "", "tips"], [761, 2, 1, "", "to_array"], [762, 2, 1, "", "to_taxonomy"], [763, 2, 1, "", "traverse"], [764, 2, 1, "", "unpack"], [765, 2, 1, "", "unpack_by_func"], [766, 2, 1, "", "unrooted_copy"], [767, 2, 1, "", "unrooted_deepcopy"], [768, 2, 1, "", "write"]], "skbio.util": [[771, 4, 1, "", "EfficiencyWarning"], [772, 4, 1, "", "RepresentationWarning"], [773, 3, 1, "", "assert_data_frame_almost_equal"], [774, 3, 1, "", "assert_ordination_results_equal"], [775, 3, 1, "", "cardinal_to_ordinal"], [776, 1, 1, "", "classproperty"], [793, 3, 1, "", "find_duplicates"], [794, 3, 1, "", "get_data_path"], [795, 3, 1, "", "safe_md5"]], "skbio.util.classproperty": [[777, 2, 1, "", "__delete__"], [778, 2, 1, "", "__eq__"], [779, 2, 1, "", "__ge__"], [780, 2, 1, "", "__get__"], [781, 2, 1, "", "__getstate__"], [782, 2, 1, "", "__gt__"], [783, 2, 1, "", "__hash__"], [784, 2, 1, "", "__le__"], [785, 2, 1, "", "__lt__"], [786, 2, 1, "", "__ne__"], [787, 2, 1, "", "__set__"], [788, 2, 1, "", "__set_name__"], [789, 2, 1, "", "__str__"], [790, 2, 1, "", "deleter"], [791, 2, 1, "", "getter"], [792, 2, 1, "", "setter"]], "skbio.workflow": [[796, 1, 1, "", "Workflow"], [808, 1, 1, "", "method"], [819, 1, 1, "", "requires"]], "skbio.workflow.Workflow": [[797, 2, 1, "", "__call__"], [798, 2, 1, "", "__eq__"], [799, 2, 1, "", "__ge__"], [800, 2, 1, "", "__getstate__"], [801, 2, 1, "", "__gt__"], [802, 2, 1, "", "__hash__"], [803, 2, 1, "", "__le__"], [804, 2, 1, "", "__lt__"], [805, 2, 1, "", "__ne__"], [806, 2, 1, "", "__str__"], [807, 2, 1, "", "initialize_state"]], "skbio.workflow.method": [[809, 2, 1, "", "__call__"], [810, 2, 1, "", "__eq__"], [811, 2, 1, "", "__ge__"], [812, 2, 1, "", "__getstate__"], [813, 2, 1, "", "__gt__"], [814, 2, 1, "", "__hash__"], [815, 2, 1, "", "__le__"], [816, 2, 1, "", "__lt__"], [817, 2, 1, "", "__ne__"], [818, 2, 1, "", "__str__"]], "skbio.workflow.requires": [[820, 2, 1, "", "__call__"], [821, 2, 1, "", "__eq__"], [822, 2, 1, "", "__ge__"], [823, 2, 1, "", "__getstate__"], [824, 2, 1, "", "__gt__"], [825, 2, 1, "", "__hash__"], [826, 2, 1, "", "__le__"], [827, 2, 1, "", "__lt__"], [828, 2, 1, "", "__ne__"], [829, 2, 1, "", "__str__"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:exception", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"align": [0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 136, 145, 147], "skbio": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 837, 838], "data": [0, 138, 502], "structur": [0, 1, 502], "optim": 0, "i": [0, 1, 149, 190, 831], "e": 0, "product": [0, 137], "readi": 0, "algorithm": 0, "slow": 0, "educ": 0, "purpos": 0, "onli": [0, 146], "gener": [0, 137, 138, 146], "function": [0, 3, 73, 106, 149, 190, 483, 486, 502, 562, 654, 679, 831, 834, 835, 837], "exampl": [0, 1], "code": 1, "guidelin": 1, "what": [1, 831], "ar": 1, "name": [1, 148], "convent": 1, "how": 1, "should": 1, "format": [1, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 831], "my": 1, "call": 1, "variabl": [1, 502], "accept": 1, "abbrevi": 1, "do": 1, "organ": 1, "modul": [1, 2], "sourc": 1, "file": [1, 137, 138, 140, 831], "write": [1, 64, 138, 140, 184, 189, 219, 276, 337, 388, 445, 482, 525, 552, 667, 768, 831], "comment": [1, 143], "test": [1, 837], "some": 1, "pointer": 1, "nose": 1, "git": 1, "author": 1, "commit": 1, "messag": 1, "ad": [2, 143], "new": [2, 149], "divers": [3, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "calcul": 3, "driver": 3, "input": 3, "valid": 3, "count": [3, 239, 307, 356, 408, 464, 717], "vector": 3, "specifi": 3, "metric": [3, 483], "subpackag": [3, 831, 833, 834], "io": [4, 5, 6, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 831], "util": [4, 5, 6, 190, 654, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 835, 837], "open": 4, "open_fil": [5, 6], "alignmentstructur": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "__eq__": [8, 23, 38, 152, 165, 192, 204, 225, 278, 294, 343, 394, 451, 505, 529, 566, 577, 588, 599, 610, 621, 632, 643, 656, 693, 778, 798, 810, 821], "__ge__": [9, 24, 39, 153, 166, 193, 205, 226, 279, 295, 344, 395, 452, 506, 530, 567, 578, 589, 600, 611, 622, 633, 644, 657, 694, 779, 799, 811, 822], "__getitem__": [10, 40, 227, 296, 345, 396, 453, 507, 531, 695], "__getstate__": [11, 25, 41, 154, 167, 194, 206, 228, 280, 297, 346, 397, 454, 508, 532, 568, 579, 590, 601, 612, 623, 634, 645, 658, 696, 781, 800, 812, 823], "__gt__": [12, 26, 42, 155, 168, 195, 207, 229, 281, 298, 347, 398, 455, 509, 533, 569, 580, 591, 602, 613, 624, 635, 646, 659, 697, 782, 801, 813, 824], "__hash__": [13, 27, 156, 169, 570, 581, 592, 603, 614, 625, 636, 647, 660, 698, 783, 802, 814, 825], "__le__": [14, 28, 44, 157, 170, 196, 208, 231, 282, 300, 349, 400, 457, 510, 534, 571, 582, 593, 604, 615, 626, 637, 648, 661, 700, 784, 803, 815, 826], "__lt__": [15, 29, 46, 158, 171, 197, 209, 233, 283, 302, 351, 402, 459, 511, 535, 572, 583, 594, 605, 616, 627, 638, 649, 662, 702, 785, 804, 816, 827], "__ne__": [16, 30, 47, 159, 172, 198, 210, 234, 284, 303, 352, 403, 460, 512, 536, 573, 584, 595, 606, 617, 628, 639, 650, 663, 703, 786, 805, 817, 828], "__setstate__": [17, 31], "__str__": [18, 32, 49, 160, 173, 199, 211, 236, 285, 305, 354, 405, 462, 513, 537, 574, 585, 596, 607, 618, 629, 640, 651, 664, 704, 789, 806, 818, 829], "is_zero_bas": 19, "set_zero_bas": 20, "stripedsmithwaterman": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "__call__": [22, 797, 809, 820], "tabularmsa": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 138], "__bool__": [34, 221, 290, 339, 390, 447], "__contains__": [35, 222, 291, 340, 391, 448, 504, 528], "__copy__": [36, 202, 223, 292, 341, 392, 449, 691], "__deepcopy__": [37, 203, 224, 293, 342, 393, 450, 692], "__iter__": [43, 230, 299, 348, 399, 456, 699], "__len__": [45, 232, 301, 350, 401, 458, 701], "__reversed__": [48, 235, 304, 353, 404, 461], "append": [50, 707], "consensu": 51, "conserv": 52, "extend": [53, 722], "from_dict": 54, "gap_frequ": 55, "has_metadata": [56, 255, 321, 370, 424, 469], "has_positional_metadata": [57, 257, 323, 372, 426, 470], "iter_posit": 58, "join": 59, "read": [60, 137, 138, 140, 182, 187, 217, 269, 334, 384, 438, 480, 520, 546, 666, 747, 831], "reassign_index": 61, "sort": [62, 218], "to_dict": 63, "global_pairwise_align": 65, "global_pairwise_align_nucleotid": 66, "global_pairwise_align_protein": 67, "local_pairwise_align": 68, "local_pairwise_align_nucleotid": 69, "local_pairwise_align_protein": 70, "local_pairwise_align_ssw": 71, "make_identity_substitution_matrix": 72, "alpha": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "measur": [73, 106], "ac": 74, "berger_parker_d": 75, "brillouin_d": 76, "chao1": 77, "chao1_ci": 78, "domin": 79, "doubl": 80, "enspi": 81, "esty_ci": 82, "faith_pd": 83, "fisher_alpha": 84, "gini_index": 85, "goods_coverag": 86, "heip_": 87, "kempton_taylor_q": 88, "lladser_ci": 89, "lladser_p": 90, "margalef": 91, "mcintosh_d": 92, "mcintosh_": 93, "menhinick": 94, "michaelis_menten_fit": 95, "observed_otu": 96, "osd": 97, "pielou_": 98, "robbin": 99, "shannon": 100, "simpson": 101, "simpson_": 102, "singl": 103, "strong": 104, "alpha_divers": 105, "beta": [106, 107, 108], "unweighted_unifrac": 107, "weighted_unifrac": 108, "beta_divers": 109, "block_beta_divers": 110, "get_alpha_diversity_metr": 111, "get_beta_diversity_metr": 112, "partial_beta_divers": 113, "argumentoverridewarn": 114, "blast7formaterror": 115, "clustalformaterror": 116, "emblformaterror": 117, "fastaformaterror": 118, "fastqformaterror": 119, "fileformaterror": 120, "formatidentificationwarn": 121, "gff3formaterror": 122, "genbankformaterror": 123, "iosourceerror": 124, "lsmatformaterror": 125, "newickformaterror": 126, "ordinationformaterror": 127, "phylipformaterror": 128, "qseqformaterror": 129, "qualformaterror": 130, "stockholmformaterror": 131, "unrecognizedformaterror": 132, "simpl": 133, "binari": 133, "dissimilar": 133, "matrix": [133, 142, 502], "binary_dm": 133, "support": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 831], "specif": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "blast": [134, 135], "6": 134, "blast6": 134, "column": [134, 135], "type": [134, 135], "paramet": [134, 136, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148], "7": 135, "blast7": 135, "clustal": 136, "section": [136, 137, 140, 145], "embl": 137, "featur": [137, 140], "level": 137, "befor": [137, 140], "fh": 137, "header": [137, 138, 145, 147], "ft": 137, "sq": 137, "us": [137, 831], "fasta": 138, "qual": 138, "sequenc": [138, 145, 147, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 833], "reader": [138, 140, 141, 161], "writer": [138, 141, 163], "fastq": 139, "qualiti": 139, "score": 139, "variant": 139, "genbank": 140, "locat": 140, "string": 140, "origin": 140, "gff3": 141, "label": [142, 143], "squar": 142, "lsmat": 142, "newick": 143, "formal": 143, "grammar": 143, "explan": 143, "basic": 143, "symbol": 143, "applic": 143, "rule": 143, "node": [143, 148], "inform": 143, "advanc": 143, "length": 143, "inlin": 143, "whitespac": 143, "caveat": 143, "ordin": [144, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678], "result": 144, "phylip": 145, "multipl": [145, 147], "qseq": 146, "stockholm": 147, "metadata": [147, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 832], "gf": 147, "g": 147, "gr": 147, "gc": 147, "footer": 147, "taxdump": 148, "dmp": 148, "divis": 148, "gencod": 148, "o": [149, 190, 831], "registri": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "class": [149, 502, 564, 654, 832, 833, 835, 838], "except": [149, 502, 831, 835], "creat": 149, "scikit": [149, 830, 831], "bio": [149, 830, 831], "reserv": 149, "keyword": 149, "argument": 149, "duplicateregistrationerror": 150, "sniffer": 162, "ioregistri": [164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "add_format": 174, "create_format": [175, 186], "get_read": 176, "get_sniff": 177, "get_writ": 178, "list_read_format": 179, "list_write_format": 180, "monkey_patch": 181, "sniff": [183, 188], "invalidregistrationerror": 185, "interv": [191, 192, 193, 194, 195, 196, 197, 198, 199, 200], "drop": [200, 214], "intervalmetadata": [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219], "add": 212, "concat": [213, 238, 306, 355, 407, 463], "merg": 215, "queri": 216, "dna": [220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "complement": [237, 406], "definit": [240, 308, 357, 409], "degap": [241, 309, 358, 410], "degener": [242, 310, 359, 411], "distanc": [243, 311, 360, 412, 465, 483, 484, 485, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 721], "expand_degener": [244, 312, 361, 413], "find_motif": [245, 313, 362, 414], "find_with_regex": [246, 314, 363, 415, 466], "frequenc": [247, 315, 364, 416, 467], "gap": [248, 316, 365, 417], "gc_content": [249, 418], "gc_frequenc": [250, 419], "has_definit": [251, 317, 366, 420], "has_degener": [252, 318, 367, 421], "has_gap": [253, 319, 368, 422], "has_interval_metadata": [254, 320, 369, 423, 468], "has_nondegener": [256, 322, 371, 425], "index": [258, 324, 374, 427, 471, 518, 543], "is_reverse_compl": [259, 428], "iter_contigu": [260, 325, 375, 429, 472], "iter_km": [261, 326, 376, 430, 473], "kmer_frequ": [262, 327, 377, 431, 474], "lowercas": [263, 328, 378, 432, 475], "match_frequ": [264, 329, 379, 433, 476], "match": [265, 330, 380, 434, 477], "mismatch_frequ": [266, 331, 381, 435, 478], "mismatch": [267, 332, 382, 436, 479], "nondegener": [268, 333, 383, 437], "replac": [270, 335, 385, 439, 481], "reverse_compl": [271, 440], "to_regex": [272, 336, 387, 442], "transcrib": 273, "translat": [274, 287, 443], "translate_six_fram": [275, 288, 444], "geneticcod": [277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "from_ncbi": 286, "grammaredsequ": [289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337], "protein": [338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], "has_stop": 373, "stop": 386, "rna": [389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445], "reverse_transcrib": 441, "ham": 484, "kmer_dist": 485, "composit": [486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501], "statist": [486, 502, 562, 834], "stat": [486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 834], "alr": 487, "alr_inv": 488, "ancom": 489, "central": 490, "closur": 491, "clr": 492, "clr_inv": 493, "ilr": 494, "ilr_inv": 495, "inner": 496, "multiplicative_replac": 497, "perturb": 498, "perturb_inv": 499, "power": [500, 679, 680, 681, 682, 683], "sbp_basi": 501, "matric": 502, "base": 502, "dissimilaritymatrix": [502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525], "distancematrix": [502, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552], "categor": 502, "continu": 502, "comparison": 502, "between": [514, 538], "copi": [515, 540, 716], "filter": [516, 541], "from_iter": [517, 542], "plot": [519, 545, 665], "redundant_form": [521, 547], "to_data_fram": [522, 548], "transpos": [523, 550], "within": [524, 551], "dissimilaritymatrixerror": 526, "condensed_form": 539, "permut": 544, "to_seri": 549, "distancematrixerror": 553, "missingiderror": 554, "anosim": 555, "bioenv": 556, "mantel": 557, "permanova": 558, "permdisp": 559, "pwmantel": 560, "randdm": 561, "evolutionari": 562, "evolv": [562, 563], "cophylogenet": 562, "method": [562, 654, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818], "hommola_cospeci": 563, "gradient": [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652], "analys": 564, "averagegradientanova": [565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575], "get_trajectori": [575, 597, 608, 641, 652], "categoryresult": [576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "to_fil": [586, 619, 630], "firstdifferencegradientanova": [587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "gradientanova": [598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608], "gradientanovaresult": [609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619], "groupresult": [620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630], "trajectorygradientanova": [631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641], "windowdifferencegradientanova": [642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652], "isubsampl": 653, "ordinationresult": [655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667], "ca": 668, "cca": 669, "corr": 670, "e_matrix": 671, "f_matrix": 672, "mean_and_std": 673, "pcoa": 674, "pcoa_biplot": 675, "rda": 676, "scale": 677, "svd_rank": 678, "empir": 679, "estim": 679, "confidence_bound": 680, "paired_subsampl": 681, "subsample_paired_pow": 682, "subsample_pow": 683, "subsample_count": 684, "tree": [685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 835], "duplicatenodeerror": 685, "missingnodeerror": 686, "nolengtherror": 687, "noparenterror": 688, "treeerror": 689, "treenod": [690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768], "accumulate_to_ancestor": 705, "ancestor": 706, "ascii_art": 708, "assign_id": 709, "assign_support": 710, "bifurc": 711, "cache_attr": 712, "compare_rfd": 713, "compare_subset": 714, "compare_tip_dist": 715, "create_cach": 718, "deepcopi": 719, "descending_branch_length": 720, "find": 723, "find_al": 724, "find_by_func": 725, "find_by_id": 726, "from_linkage_matrix": 727, "from_taxdump": 728, "from_taxonomi": 729, "get_max_dist": 730, "has_children": 731, "index_tre": 732, "invalidate_cach": 733, "is_root": 734, "is_tip": 735, "lca": 736, "levelord": 737, "lowest_common_ancestor": 738, "neighbor": 739, "non_tip": 740, "observed_node_count": 741, "pop": 742, "postord": 743, "pre_and_postord": 744, "preorder": 745, "prune": 746, "remov": 748, "remove_delet": 749, "root": 750, "root_at": 751, "root_at_midpoint": 752, "shear": 753, "shuffl": 754, "sibl": 755, "subset": [756, 757], "subtre": 758, "tip_tip_dist": 759, "tip": 760, "to_arrai": 761, "to_taxonomi": 762, "travers": 763, "unpack": 764, "unpack_by_func": 765, "unrooted_copi": 766, "unrooted_deepcopi": 767, "majority_rul": 769, "nj": 770, "efficiencywarn": 771, "representationwarn": 772, "assert_data_frame_almost_equ": 773, "assert_ordination_results_equ": 774, "cardinal_to_ordin": 775, "classproperti": [776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792], "__delete__": 777, "__get__": 780, "__set__": 787, "__set_name__": 788, "delet": 790, "getter": 791, "setter": 792, "find_dupl": 793, "get_data_path": 794, "safe_md5": 795, "workflow": [796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 838], "initialize_st": 807, "requir": [819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829], "api": [830, 836], "refer": 830, "user": [830, 831], "document": 830, "develop": 830, "warn": 831, "introduct": 831, "kind": 831, "can": 831, "from": 831, "represent": 835, "phylogenet": 835, "reconstruct": 835, "stabil": 836, "stabl": 836, "experiment": 836, "deprec": 836, "miscellan": 837, "construct": 838, "decor": 838}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Alignments (skbio.alignment)": [[0, "alignments-skbio-alignment"]], "Data Structures": [[0, "data-structures"]], "Optimized (i.e., production-ready) Alignment Algorithms": [[0, "optimized-i-e-production-ready-alignment-algorithms"]], "Slow (i.e., educational-purposes only) Alignment Algorithms": [[0, "slow-i-e-educational-purposes-only-alignment-algorithms"]], "General functionality": [[0, "general-functionality"]], "Data Structure Examples": [[0, "data-structure-examples"]], "Alignment Algorithm Examples": [[0, "alignment-algorithm-examples"]], "Optimized Alignment Algorithm Examples": [[0, "optimized-alignment-algorithm-examples"]], "Slow Alignment Algorithm Examples": [[0, "slow-alignment-algorithm-examples"]], "Coding guidelines": [[1, "coding-guidelines"]], "What are the naming conventions? and How should I format my code?": [[1, "what-are-the-naming-conventions-and-how-should-i-format-my-code"]], "What should I call my variables?": [[1, "what-should-i-call-my-variables"]], "Acceptable abbreviations": [[1, "acceptable-abbreviations"]], "How do I organize my modules (source files)?": [[1, "how-do-i-organize-my-modules-source-files"]], "Example of module structure": [[1, "example-of-module-structure"]], "How should I write comments?": [[1, "how-should-i-write-comments"]], "How should I test my code ?": [[1, "how-should-i-test-my-code"]], "Some pointers": [[1, "some-pointers"]], "Example of a nose test module structure": [[1, "example-of-a-nose-test-module-structure"]], "Git pointers": [[1, "git-pointers"]], "Authoring a commit message": [[1, "authoring-a-commit-message"]], "Writing a commit message": [[1, "writing-a-commit-message"]], "Adding a new module to skbio": [[2, "adding-a-new-module-to-skbio"]], "Diversity calculations (skbio.diversity)": [[3, "diversity-calculations-skbio-diversity"]], "Driver functions": [[3, "driver-functions"]], "Input validation": [[3, "input-validation"]], "Count vectors": [[3, "count-vectors"]], "Specifying a diversity metric": [[3, "specifying-a-diversity-metric"]], "Subpackages": [[3, "subpackages"], [831, "subpackages"], [833, "subpackages"], [834, "subpackages"]], "Functions": [[3, "functions"], [73, "functions"], [106, "functions"], [149, "functions"], [190, "functions"], [483, "functions"], [486, "functions"], [502, "functions"], [562, "functions"], [679, "functions"], [834, "functions"]], "skbio.io.util.open": [[4, "skbio-io-util-open"]], "skbio.io.util.open_file": [[5, "skbio-io-util-open-file"]], "skbio.io.util.open_files": [[6, "skbio-io-util-open-files"]], "skbio.alignment.AlignmentStructure": [[7, "skbio-alignment-alignmentstructure"]], "skbio.alignment.AlignmentStructure.__eq__": [[8, "skbio-alignment-alignmentstructure-eq"]], "skbio.alignment.AlignmentStructure.__ge__": [[9, "skbio-alignment-alignmentstructure-ge"]], "skbio.alignment.AlignmentStructure.__getitem__": [[10, "skbio-alignment-alignmentstructure-getitem"]], "skbio.alignment.AlignmentStructure.__getstate__": [[11, "skbio-alignment-alignmentstructure-getstate"]], "skbio.alignment.AlignmentStructure.__gt__": [[12, "skbio-alignment-alignmentstructure-gt"]], "skbio.alignment.AlignmentStructure.__hash__": [[13, "skbio-alignment-alignmentstructure-hash"]], "skbio.alignment.AlignmentStructure.__le__": [[14, "skbio-alignment-alignmentstructure-le"]], "skbio.alignment.AlignmentStructure.__lt__": [[15, "skbio-alignment-alignmentstructure-lt"]], "skbio.alignment.AlignmentStructure.__ne__": [[16, "skbio-alignment-alignmentstructure-ne"]], "skbio.alignment.AlignmentStructure.__setstate__": [[17, "skbio-alignment-alignmentstructure-setstate"]], "skbio.alignment.AlignmentStructure.__str__": [[18, "skbio-alignment-alignmentstructure-str"]], "skbio.alignment.AlignmentStructure.is_zero_based": [[19, "skbio-alignment-alignmentstructure-is-zero-based"]], "skbio.alignment.AlignmentStructure.set_zero_based": [[20, "skbio-alignment-alignmentstructure-set-zero-based"]], "skbio.alignment.StripedSmithWaterman": [[21, "skbio-alignment-stripedsmithwaterman"]], "skbio.alignment.StripedSmithWaterman.__call__": [[22, "skbio-alignment-stripedsmithwaterman-call"]], "skbio.alignment.StripedSmithWaterman.__eq__": [[23, "skbio-alignment-stripedsmithwaterman-eq"]], "skbio.alignment.StripedSmithWaterman.__ge__": [[24, "skbio-alignment-stripedsmithwaterman-ge"]], "skbio.alignment.StripedSmithWaterman.__getstate__": [[25, "skbio-alignment-stripedsmithwaterman-getstate"]], "skbio.alignment.StripedSmithWaterman.__gt__": [[26, "skbio-alignment-stripedsmithwaterman-gt"]], "skbio.alignment.StripedSmithWaterman.__hash__": [[27, "skbio-alignment-stripedsmithwaterman-hash"]], "skbio.alignment.StripedSmithWaterman.__le__": [[28, "skbio-alignment-stripedsmithwaterman-le"]], "skbio.alignment.StripedSmithWaterman.__lt__": [[29, "skbio-alignment-stripedsmithwaterman-lt"]], "skbio.alignment.StripedSmithWaterman.__ne__": [[30, "skbio-alignment-stripedsmithwaterman-ne"]], "skbio.alignment.StripedSmithWaterman.__setstate__": [[31, "skbio-alignment-stripedsmithwaterman-setstate"]], "skbio.alignment.StripedSmithWaterman.__str__": [[32, "skbio-alignment-stripedsmithwaterman-str"]], "skbio.alignment.TabularMSA": [[33, "skbio-alignment-tabularmsa"]], "skbio.alignment.TabularMSA.__bool__": [[34, "skbio-alignment-tabularmsa-bool"]], "skbio.alignment.TabularMSA.__contains__": [[35, "skbio-alignment-tabularmsa-contains"]], "skbio.alignment.TabularMSA.__copy__": [[36, "skbio-alignment-tabularmsa-copy"]], "skbio.alignment.TabularMSA.__deepcopy__": [[37, "skbio-alignment-tabularmsa-deepcopy"]], "skbio.alignment.TabularMSA.__eq__": [[38, "skbio-alignment-tabularmsa-eq"]], "skbio.alignment.TabularMSA.__ge__": [[39, "skbio-alignment-tabularmsa-ge"]], "skbio.alignment.TabularMSA.__getitem__": [[40, "skbio-alignment-tabularmsa-getitem"]], "skbio.alignment.TabularMSA.__getstate__": [[41, "skbio-alignment-tabularmsa-getstate"]], "skbio.alignment.TabularMSA.__gt__": [[42, "skbio-alignment-tabularmsa-gt"]], "skbio.alignment.TabularMSA.__iter__": [[43, "skbio-alignment-tabularmsa-iter"]], "skbio.alignment.TabularMSA.__le__": [[44, "skbio-alignment-tabularmsa-le"]], "skbio.alignment.TabularMSA.__len__": [[45, "skbio-alignment-tabularmsa-len"]], "skbio.alignment.TabularMSA.__lt__": [[46, "skbio-alignment-tabularmsa-lt"]], "skbio.alignment.TabularMSA.__ne__": [[47, "skbio-alignment-tabularmsa-ne"]], "skbio.alignment.TabularMSA.__reversed__": [[48, "skbio-alignment-tabularmsa-reversed"]], "skbio.alignment.TabularMSA.__str__": [[49, "skbio-alignment-tabularmsa-str"]], "skbio.alignment.TabularMSA.append": [[50, "skbio-alignment-tabularmsa-append"]], "skbio.alignment.TabularMSA.consensus": [[51, "skbio-alignment-tabularmsa-consensus"]], "skbio.alignment.TabularMSA.conservation": [[52, "skbio-alignment-tabularmsa-conservation"]], "skbio.alignment.TabularMSA.extend": [[53, "skbio-alignment-tabularmsa-extend"]], "skbio.alignment.TabularMSA.from_dict": [[54, "skbio-alignment-tabularmsa-from-dict"]], "skbio.alignment.TabularMSA.gap_frequencies": [[55, "skbio-alignment-tabularmsa-gap-frequencies"]], "skbio.alignment.TabularMSA.has_metadata": [[56, "skbio-alignment-tabularmsa-has-metadata"]], "skbio.alignment.TabularMSA.has_positional_metadata": [[57, "skbio-alignment-tabularmsa-has-positional-metadata"]], "skbio.alignment.TabularMSA.iter_positions": [[58, "skbio-alignment-tabularmsa-iter-positions"]], "skbio.alignment.TabularMSA.join": [[59, "skbio-alignment-tabularmsa-join"]], "skbio.alignment.TabularMSA.read": [[60, "skbio-alignment-tabularmsa-read"]], "skbio.alignment.TabularMSA.reassign_index": [[61, "skbio-alignment-tabularmsa-reassign-index"]], "skbio.alignment.TabularMSA.sort": [[62, "skbio-alignment-tabularmsa-sort"]], "skbio.alignment.TabularMSA.to_dict": [[63, "skbio-alignment-tabularmsa-to-dict"]], "skbio.alignment.TabularMSA.write": [[64, "skbio-alignment-tabularmsa-write"]], "skbio.alignment.global_pairwise_align": [[65, "skbio-alignment-global-pairwise-align"]], "skbio.alignment.global_pairwise_align_nucleotide": [[66, "skbio-alignment-global-pairwise-align-nucleotide"]], "skbio.alignment.global_pairwise_align_protein": [[67, "skbio-alignment-global-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align": [[68, "skbio-alignment-local-pairwise-align"]], "skbio.alignment.local_pairwise_align_nucleotide": [[69, "skbio-alignment-local-pairwise-align-nucleotide"]], "skbio.alignment.local_pairwise_align_protein": [[70, "skbio-alignment-local-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align_ssw": [[71, "skbio-alignment-local-pairwise-align-ssw"]], "skbio.alignment.make_identity_substitution_matrix": [[72, "skbio-alignment-make-identity-substitution-matrix"]], "Alpha diversity measures (skbio.diversity.alpha)": [[73, "alpha-diversity-measures-skbio-diversity-alpha"]], "skbio.diversity.alpha.ace": [[74, "skbio-diversity-alpha-ace"]], "skbio.diversity.alpha.berger_parker_d": [[75, "skbio-diversity-alpha-berger-parker-d"]], "skbio.diversity.alpha.brillouin_d": [[76, "skbio-diversity-alpha-brillouin-d"]], "skbio.diversity.alpha.chao1": [[77, "skbio-diversity-alpha-chao1"]], "skbio.diversity.alpha.chao1_ci": [[78, "skbio-diversity-alpha-chao1-ci"]], "skbio.diversity.alpha.dominance": [[79, "skbio-diversity-alpha-dominance"]], "skbio.diversity.alpha.doubles": [[80, "skbio-diversity-alpha-doubles"]], "skbio.diversity.alpha.enspie": [[81, "skbio-diversity-alpha-enspie"]], "skbio.diversity.alpha.esty_ci": [[82, "skbio-diversity-alpha-esty-ci"]], "skbio.diversity.alpha.faith_pd": [[83, "skbio-diversity-alpha-faith-pd"]], "skbio.diversity.alpha.fisher_alpha": [[84, "skbio-diversity-alpha-fisher-alpha"]], "skbio.diversity.alpha.gini_index": [[85, "skbio-diversity-alpha-gini-index"]], "skbio.diversity.alpha.goods_coverage": [[86, "skbio-diversity-alpha-goods-coverage"]], "skbio.diversity.alpha.heip_e": [[87, "skbio-diversity-alpha-heip-e"]], "skbio.diversity.alpha.kempton_taylor_q": [[88, "skbio-diversity-alpha-kempton-taylor-q"]], "skbio.diversity.alpha.lladser_ci": [[89, "skbio-diversity-alpha-lladser-ci"]], "skbio.diversity.alpha.lladser_pe": [[90, "skbio-diversity-alpha-lladser-pe"]], "skbio.diversity.alpha.margalef": [[91, "skbio-diversity-alpha-margalef"]], "skbio.diversity.alpha.mcintosh_d": [[92, "skbio-diversity-alpha-mcintosh-d"]], "skbio.diversity.alpha.mcintosh_e": [[93, "skbio-diversity-alpha-mcintosh-e"]], "skbio.diversity.alpha.menhinick": [[94, "skbio-diversity-alpha-menhinick"]], "skbio.diversity.alpha.michaelis_menten_fit": [[95, "skbio-diversity-alpha-michaelis-menten-fit"]], "skbio.diversity.alpha.observed_otus": [[96, "skbio-diversity-alpha-observed-otus"]], "skbio.diversity.alpha.osd": [[97, "skbio-diversity-alpha-osd"]], "skbio.diversity.alpha.pielou_e": [[98, "skbio-diversity-alpha-pielou-e"]], "skbio.diversity.alpha.robbins": [[99, "skbio-diversity-alpha-robbins"]], "skbio.diversity.alpha.shannon": [[100, "skbio-diversity-alpha-shannon"]], "skbio.diversity.alpha.simpson": [[101, "skbio-diversity-alpha-simpson"]], "skbio.diversity.alpha.simpson_e": [[102, "skbio-diversity-alpha-simpson-e"]], "skbio.diversity.alpha.singles": [[103, "skbio-diversity-alpha-singles"]], "skbio.diversity.alpha.strong": [[104, "skbio-diversity-alpha-strong"]], "skbio.diversity.alpha_diversity": [[105, "skbio-diversity-alpha-diversity"]], "Beta diversity measures (skbio.diversity.beta)": [[106, "beta-diversity-measures-skbio-diversity-beta"]], "skbio.diversity.beta.unweighted_unifrac": [[107, "skbio-diversity-beta-unweighted-unifrac"]], "skbio.diversity.beta.weighted_unifrac": [[108, "skbio-diversity-beta-weighted-unifrac"]], "skbio.diversity.beta_diversity": [[109, "skbio-diversity-beta-diversity"]], "skbio.diversity.block_beta_diversity": [[110, "skbio-diversity-block-beta-diversity"]], "skbio.diversity.get_alpha_diversity_metrics": [[111, "skbio-diversity-get-alpha-diversity-metrics"]], "skbio.diversity.get_beta_diversity_metrics": [[112, "skbio-diversity-get-beta-diversity-metrics"]], "skbio.diversity.partial_beta_diversity": [[113, "skbio-diversity-partial-beta-diversity"]], "skbio.io.ArgumentOverrideWarning": [[114, "skbio-io-argumentoverridewarning"]], "skbio.io.BLAST7FormatError": [[115, "skbio-io-blast7formaterror"]], "skbio.io.ClustalFormatError": [[116, "skbio-io-clustalformaterror"]], "skbio.io.EMBLFormatError": [[117, "skbio-io-emblformaterror"]], "skbio.io.FASTAFormatError": [[118, "skbio-io-fastaformaterror"]], "skbio.io.FASTQFormatError": [[119, "skbio-io-fastqformaterror"]], "skbio.io.FileFormatError": [[120, "skbio-io-fileformaterror"]], "skbio.io.FormatIdentificationWarning": [[121, "skbio-io-formatidentificationwarning"]], "skbio.io.GFF3FormatError": [[122, "skbio-io-gff3formaterror"]], "skbio.io.GenBankFormatError": [[123, "skbio-io-genbankformaterror"]], "skbio.io.IOSourceError": [[124, "skbio-io-iosourceerror"]], "skbio.io.LSMatFormatError": [[125, "skbio-io-lsmatformaterror"]], "skbio.io.NewickFormatError": [[126, "skbio-io-newickformaterror"]], "skbio.io.OrdinationFormatError": [[127, "skbio-io-ordinationformaterror"]], "skbio.io.PhylipFormatError": [[128, "skbio-io-phylipformaterror"]], "skbio.io.QSeqFormatError": [[129, "skbio-io-qseqformaterror"]], "skbio.io.QUALFormatError": [[130, "skbio-io-qualformaterror"]], "skbio.io.StockholmFormatError": [[131, "skbio-io-stockholmformaterror"]], "skbio.io.UnrecognizedFormatError": [[132, "skbio-io-unrecognizedformaterror"]], "Simple binary dissimilarity matrix format (skbio.io.format.binary_dm)": [[133, "simple-binary-dissimilarity-matrix-format-skbio-io-format-binary-dm"]], "Format Support": [[133, "format-support"], [134, "format-support"], [135, "format-support"], [136, "format-support"], [137, "format-support"], [138, "format-support"], [139, "format-support"], [140, "format-support"], [141, "format-support"], [142, "format-support"], [143, "format-support"], [144, "format-support"], [145, "format-support"], [146, "format-support"], [147, "format-support"], [148, "format-support"]], "Format Specification": [[133, "format-specification"], [134, "format-specification"], [135, "format-specification"], [136, "format-specification"], [137, "format-specification"], [138, "format-specification"], [139, "format-specification"], [140, "format-specification"], [141, "format-specification"], [142, "format-specification"], [143, "format-specification"], [144, "format-specification"], [145, "format-specification"], [146, "format-specification"], [147, "format-specification"], [148, "format-specification"]], "BLAST+6 format (skbio.io.format.blast6)": [[134, "blast-6-format-skbio-io-format-blast6"]], "BLAST Column Types": [[134, "blast-column-types"], [135, "blast-column-types"]], "Format Parameters": [[134, "format-parameters"], [136, "format-parameters"], [138, "format-parameters"], [139, "format-parameters"], [140, "format-parameters"], [141, "format-parameters"], [142, "format-parameters"], [143, "format-parameters"], [145, "format-parameters"], [146, "format-parameters"], [147, "format-parameters"], [148, "format-parameters"]], "BLAST+7 format (skbio.io.format.blast7)": [[135, "blast-7-format-skbio-io-format-blast7"]], "Clustal format (skbio.io.format.clustal)": [[136, "clustal-format-skbio-io-format-clustal"]], "Alignment Section": [[136, "alignment-section"], [145, "alignment-section"]], "EMBL format (skbio.io.format.embl)": [[137, "embl-format-skbio-io-format-embl"]], "Feature Level Products": [[137, "feature-level-products"]], "Sections before FH (Feature Header)": [[137, "sections-before-fh-feature-header"]], "FT section": [[137, "ft-section"]], "SQ section": [[137, "sq-section"]], "Reading EMBL Files": [[137, "reading-embl-files"]], "Reading EMBL Files using generators": [[137, "reading-embl-files-using-generators"]], "FASTA/QUAL format (skbio.io.format.fasta)": [[138, "fasta-qual-format-skbio-io-format-fasta"]], "FASTA Format": [[138, "fasta-format"]], "Sequence Header": [[138, "sequence-header"]], "Sequence Data": [[138, "sequence-data"]], "QUAL Format": [[138, "qual-format"]], "QUAL File Parameter (Readers and Writers)": [[138, "qual-file-parameter-readers-and-writers"]], "Reader-specific Parameters": [[138, "reader-specific-parameters"], [140, "reader-specific-parameters"], [141, "reader-specific-parameters"]], "Generator and TabularMSA Reader Parameters": [[138, "generator-and-tabularmsa-reader-parameters"]], "Sequence Reader Parameters": [[138, "sequence-reader-parameters"]], "Writer-specific Parameters": [[138, "writer-specific-parameters"], [141, "writer-specific-parameters"]], "Reading and Writing FASTA Files": [[138, "reading-and-writing-fasta-files"]], "Reading and Writing FASTA/QUAL Files": [[138, "reading-and-writing-fasta-qual-files"]], "FASTQ format (skbio.io.format.fastq)": [[139, "fastq-format-skbio-io-format-fastq"]], "Quality Score Variants": [[139, "quality-score-variants"]], "GenBank format (skbio.io.format.genbank)": [[140, "genbank-format-skbio-io-format-genbank"]], "Sections before FEATURES": [[140, "sections-before-features"]], "FEATURES section": [[140, "features-section"]], "Location string": [[140, "location-string"]], "ORIGIN section": [[140, "origin-section"]], "Reading and Writing GenBank Files": [[140, "reading-and-writing-genbank-files"]], "GFF3 format (skbio.io.format.gff3)": [[141, "gff3-format-skbio-io-format-gff3"]], "Labeled square matrix format (skbio.io.format.lsmat)": [[142, "labeled-square-matrix-format-skbio-io-format-lsmat"]], "Newick format (skbio.io.format.newick)": [[143, "newick-format-skbio-io-format-newick"]], "Formal Grammar": [[143, "formal-grammar"]], "Explanation": [[143, "explanation"]], "Basic Symbols": [[143, "basic-symbols"]], "Application of Rules": [[143, "application-of-rules"]], "Adding Node Information": [[143, "adding-node-information"]], "Advanced Label and Length Rules": [[143, "advanced-label-and-length-rules"]], "Inline Comments": [[143, "inline-comments"]], "Whitespace": [[143, "whitespace"]], "Caveats": [[143, "caveats"]], "Ordination results format (skbio.io.format.ordination)": [[144, "ordination-results-format-skbio-io-format-ordination"]], "PHYLIP multiple sequence alignment format (skbio.io.format.phylip)": [[145, "phylip-multiple-sequence-alignment-format-skbio-io-format-phylip"]], "Header Section": [[145, "header-section"]], "QSeq format (skbio.io.format.qseq)": [[146, "qseq-format-skbio-io-format-qseq"]], "Generators Only": [[146, "generators-only"]], "Stockholm format (skbio.io.format.stockholm)": [[147, "stockholm-format-skbio-io-format-stockholm"]], "Header": [[147, "header"]], "Multiple Sequence Alignment": [[147, "multiple-sequence-alignment"]], "Metadata": [[147, "metadata"]], "GF metadata": [[147, "gf-metadata"]], "GS metadata": [[147, "gs-metadata"]], "GR metadata": [[147, "gr-metadata"]], "GC metadata": [[147, "gc-metadata"]], "Footer": [[147, "footer"]], "Taxdump format (skbio.io.format.taxdump)": [[148, "taxdump-format-skbio-io-format-taxdump"]], "nodes.dmp": [[148, "nodes-dmp"]], "names.dmp": [[148, "names-dmp"]], "division.dmp": [[148, "division-dmp"]], "gencode.dmp": [[148, "gencode-dmp"]], "I/O Registry (skbio.io.registry)": [[149, "i-o-registry-skbio-io-registry"]], "Classes": [[149, "classes"], [502, "classes"], [564, "classes"], [654, "classes"], [832, "classes"], [833, "classes"], [835, "classes"], [838, "classes"]], "Exceptions": [[149, "exceptions"], [502, "exceptions"], [835, "exceptions"]], "Creating a new format for scikit-bio": [[149, "creating-a-new-format-for-scikit-bio"]], "Reserved Keyword Arguments": [[149, "reserved-keyword-arguments"]], "skbio.io.registry.DuplicateRegistrationError": [[150, "skbio-io-registry-duplicateregistrationerror"]], "skbio.io.registry.Format": [[151, "skbio-io-registry-format"]], "skbio.io.registry.Format.__eq__": [[152, "skbio-io-registry-format-eq"]], "skbio.io.registry.Format.__ge__": [[153, "skbio-io-registry-format-ge"]], "skbio.io.registry.Format.__getstate__": [[154, "skbio-io-registry-format-getstate"]], "skbio.io.registry.Format.__gt__": [[155, "skbio-io-registry-format-gt"]], "skbio.io.registry.Format.__hash__": [[156, "skbio-io-registry-format-hash"]], "skbio.io.registry.Format.__le__": [[157, "skbio-io-registry-format-le"]], "skbio.io.registry.Format.__lt__": [[158, "skbio-io-registry-format-lt"]], "skbio.io.registry.Format.__ne__": [[159, "skbio-io-registry-format-ne"]], "skbio.io.registry.Format.__str__": [[160, "skbio-io-registry-format-str"]], "skbio.io.registry.Format.reader": [[161, "skbio-io-registry-format-reader"]], "skbio.io.registry.Format.sniffer": [[162, "skbio-io-registry-format-sniffer"]], "skbio.io.registry.Format.writer": [[163, "skbio-io-registry-format-writer"]], "skbio.io.registry.IORegistry": [[164, "skbio-io-registry-ioregistry"]], "skbio.io.registry.IORegistry.__eq__": [[165, "skbio-io-registry-ioregistry-eq"]], "skbio.io.registry.IORegistry.__ge__": [[166, "skbio-io-registry-ioregistry-ge"]], "skbio.io.registry.IORegistry.__getstate__": [[167, "skbio-io-registry-ioregistry-getstate"]], "skbio.io.registry.IORegistry.__gt__": [[168, "skbio-io-registry-ioregistry-gt"]], "skbio.io.registry.IORegistry.__hash__": [[169, "skbio-io-registry-ioregistry-hash"]], "skbio.io.registry.IORegistry.__le__": [[170, "skbio-io-registry-ioregistry-le"]], "skbio.io.registry.IORegistry.__lt__": [[171, "skbio-io-registry-ioregistry-lt"]], "skbio.io.registry.IORegistry.__ne__": [[172, "skbio-io-registry-ioregistry-ne"]], "skbio.io.registry.IORegistry.__str__": [[173, "skbio-io-registry-ioregistry-str"]], "skbio.io.registry.IORegistry.add_format": [[174, "skbio-io-registry-ioregistry-add-format"]], "skbio.io.registry.IORegistry.create_format": [[175, "skbio-io-registry-ioregistry-create-format"]], "skbio.io.registry.IORegistry.get_reader": [[176, "skbio-io-registry-ioregistry-get-reader"]], "skbio.io.registry.IORegistry.get_sniffer": [[177, "skbio-io-registry-ioregistry-get-sniffer"]], "skbio.io.registry.IORegistry.get_writer": [[178, "skbio-io-registry-ioregistry-get-writer"]], "skbio.io.registry.IORegistry.list_read_formats": [[179, "skbio-io-registry-ioregistry-list-read-formats"]], "skbio.io.registry.IORegistry.list_write_formats": [[180, "skbio-io-registry-ioregistry-list-write-formats"]], "skbio.io.registry.IORegistry.monkey_patch": [[181, "skbio-io-registry-ioregistry-monkey-patch"]], "skbio.io.registry.IORegistry.read": [[182, "skbio-io-registry-ioregistry-read"]], "skbio.io.registry.IORegistry.sniff": [[183, "skbio-io-registry-ioregistry-sniff"]], "skbio.io.registry.IORegistry.write": [[184, "skbio-io-registry-ioregistry-write"]], "skbio.io.registry.InvalidRegistrationError": [[185, "skbio-io-registry-invalidregistrationerror"]], "skbio.io.registry.create_format": [[186, "skbio-io-registry-create-format"]], "skbio.io.registry.read": [[187, "skbio-io-registry-read"]], "skbio.io.registry.sniff": [[188, "skbio-io-registry-sniff"]], "skbio.io.registry.write": [[189, "skbio-io-registry-write"]], "I/O utils (skbio.io.util)": [[190, "i-o-utils-skbio-io-util"]], "skbio.metadata.Interval": [[191, "skbio-metadata-interval"]], "skbio.metadata.Interval.__eq__": [[192, "skbio-metadata-interval-eq"]], "skbio.metadata.Interval.__ge__": [[193, "skbio-metadata-interval-ge"]], "skbio.metadata.Interval.__getstate__": [[194, "skbio-metadata-interval-getstate"]], "skbio.metadata.Interval.__gt__": [[195, "skbio-metadata-interval-gt"]], "skbio.metadata.Interval.__le__": [[196, "skbio-metadata-interval-le"]], "skbio.metadata.Interval.__lt__": [[197, "skbio-metadata-interval-lt"]], "skbio.metadata.Interval.__ne__": [[198, "skbio-metadata-interval-ne"]], "skbio.metadata.Interval.__str__": [[199, "skbio-metadata-interval-str"]], "skbio.metadata.Interval.drop": [[200, "skbio-metadata-interval-drop"]], "skbio.metadata.IntervalMetadata": [[201, "skbio-metadata-intervalmetadata"]], "skbio.metadata.IntervalMetadata.__copy__": [[202, "skbio-metadata-intervalmetadata-copy"]], "skbio.metadata.IntervalMetadata.__deepcopy__": [[203, "skbio-metadata-intervalmetadata-deepcopy"]], "skbio.metadata.IntervalMetadata.__eq__": [[204, "skbio-metadata-intervalmetadata-eq"]], "skbio.metadata.IntervalMetadata.__ge__": [[205, "skbio-metadata-intervalmetadata-ge"]], "skbio.metadata.IntervalMetadata.__getstate__": [[206, "skbio-metadata-intervalmetadata-getstate"]], "skbio.metadata.IntervalMetadata.__gt__": [[207, "skbio-metadata-intervalmetadata-gt"]], "skbio.metadata.IntervalMetadata.__le__": [[208, "skbio-metadata-intervalmetadata-le"]], "skbio.metadata.IntervalMetadata.__lt__": [[209, "skbio-metadata-intervalmetadata-lt"]], "skbio.metadata.IntervalMetadata.__ne__": [[210, "skbio-metadata-intervalmetadata-ne"]], "skbio.metadata.IntervalMetadata.__str__": [[211, "skbio-metadata-intervalmetadata-str"]], "skbio.metadata.IntervalMetadata.add": [[212, "skbio-metadata-intervalmetadata-add"]], "skbio.metadata.IntervalMetadata.concat": [[213, "skbio-metadata-intervalmetadata-concat"]], "skbio.metadata.IntervalMetadata.drop": [[214, "skbio-metadata-intervalmetadata-drop"]], "skbio.metadata.IntervalMetadata.merge": [[215, "skbio-metadata-intervalmetadata-merge"]], "skbio.metadata.IntervalMetadata.query": [[216, "skbio-metadata-intervalmetadata-query"]], "skbio.metadata.IntervalMetadata.read": [[217, "skbio-metadata-intervalmetadata-read"]], "skbio.metadata.IntervalMetadata.sort": [[218, "skbio-metadata-intervalmetadata-sort"]], "skbio.metadata.IntervalMetadata.write": [[219, "skbio-metadata-intervalmetadata-write"]], "skbio.sequence.DNA": [[220, "skbio-sequence-dna"]], "skbio.sequence.DNA.__bool__": [[221, "skbio-sequence-dna-bool"]], "skbio.sequence.DNA.__contains__": [[222, "skbio-sequence-dna-contains"]], "skbio.sequence.DNA.__copy__": [[223, "skbio-sequence-dna-copy"]], "skbio.sequence.DNA.__deepcopy__": [[224, "skbio-sequence-dna-deepcopy"]], "skbio.sequence.DNA.__eq__": [[225, "skbio-sequence-dna-eq"]], "skbio.sequence.DNA.__ge__": [[226, "skbio-sequence-dna-ge"]], "skbio.sequence.DNA.__getitem__": [[227, "skbio-sequence-dna-getitem"]], "skbio.sequence.DNA.__getstate__": [[228, "skbio-sequence-dna-getstate"]], "skbio.sequence.DNA.__gt__": [[229, "skbio-sequence-dna-gt"]], "skbio.sequence.DNA.__iter__": [[230, "skbio-sequence-dna-iter"]], "skbio.sequence.DNA.__le__": [[231, "skbio-sequence-dna-le"]], "skbio.sequence.DNA.__len__": [[232, "skbio-sequence-dna-len"]], "skbio.sequence.DNA.__lt__": [[233, "skbio-sequence-dna-lt"]], "skbio.sequence.DNA.__ne__": [[234, "skbio-sequence-dna-ne"]], "skbio.sequence.DNA.__reversed__": [[235, "skbio-sequence-dna-reversed"]], "skbio.sequence.DNA.__str__": [[236, "skbio-sequence-dna-str"]], "skbio.sequence.DNA.complement": [[237, "skbio-sequence-dna-complement"]], "skbio.sequence.DNA.concat": [[238, "skbio-sequence-dna-concat"]], "skbio.sequence.DNA.count": [[239, "skbio-sequence-dna-count"]], "skbio.sequence.DNA.definites": [[240, "skbio-sequence-dna-definites"]], "skbio.sequence.DNA.degap": [[241, "skbio-sequence-dna-degap"]], "skbio.sequence.DNA.degenerates": [[242, "skbio-sequence-dna-degenerates"]], "skbio.sequence.DNA.distance": [[243, "skbio-sequence-dna-distance"]], "skbio.sequence.DNA.expand_degenerates": [[244, "skbio-sequence-dna-expand-degenerates"]], "skbio.sequence.DNA.find_motifs": [[245, "skbio-sequence-dna-find-motifs"]], "skbio.sequence.DNA.find_with_regex": [[246, "skbio-sequence-dna-find-with-regex"]], "skbio.sequence.DNA.frequencies": [[247, "skbio-sequence-dna-frequencies"]], "skbio.sequence.DNA.gaps": [[248, "skbio-sequence-dna-gaps"]], "skbio.sequence.DNA.gc_content": [[249, "skbio-sequence-dna-gc-content"]], "skbio.sequence.DNA.gc_frequency": [[250, "skbio-sequence-dna-gc-frequency"]], "skbio.sequence.DNA.has_definites": [[251, "skbio-sequence-dna-has-definites"]], "skbio.sequence.DNA.has_degenerates": [[252, "skbio-sequence-dna-has-degenerates"]], "skbio.sequence.DNA.has_gaps": [[253, "skbio-sequence-dna-has-gaps"]], "skbio.sequence.DNA.has_interval_metadata": [[254, "skbio-sequence-dna-has-interval-metadata"]], "skbio.sequence.DNA.has_metadata": [[255, "skbio-sequence-dna-has-metadata"]], "skbio.sequence.DNA.has_nondegenerates": [[256, "skbio-sequence-dna-has-nondegenerates"]], "skbio.sequence.DNA.has_positional_metadata": [[257, "skbio-sequence-dna-has-positional-metadata"]], "skbio.sequence.DNA.index": [[258, "skbio-sequence-dna-index"]], "skbio.sequence.DNA.is_reverse_complement": [[259, "skbio-sequence-dna-is-reverse-complement"]], "skbio.sequence.DNA.iter_contiguous": [[260, "skbio-sequence-dna-iter-contiguous"]], "skbio.sequence.DNA.iter_kmers": [[261, "skbio-sequence-dna-iter-kmers"]], "skbio.sequence.DNA.kmer_frequencies": [[262, "skbio-sequence-dna-kmer-frequencies"]], "skbio.sequence.DNA.lowercase": [[263, "skbio-sequence-dna-lowercase"]], "skbio.sequence.DNA.match_frequency": [[264, "skbio-sequence-dna-match-frequency"]], "skbio.sequence.DNA.matches": [[265, "skbio-sequence-dna-matches"]], "skbio.sequence.DNA.mismatch_frequency": [[266, "skbio-sequence-dna-mismatch-frequency"]], "skbio.sequence.DNA.mismatches": [[267, "skbio-sequence-dna-mismatches"]], "skbio.sequence.DNA.nondegenerates": [[268, "skbio-sequence-dna-nondegenerates"]], "skbio.sequence.DNA.read": [[269, "skbio-sequence-dna-read"]], "skbio.sequence.DNA.replace": [[270, "skbio-sequence-dna-replace"]], "skbio.sequence.DNA.reverse_complement": [[271, "skbio-sequence-dna-reverse-complement"]], "skbio.sequence.DNA.to_regex": [[272, "skbio-sequence-dna-to-regex"]], "skbio.sequence.DNA.transcribe": [[273, "skbio-sequence-dna-transcribe"]], "skbio.sequence.DNA.translate": [[274, "skbio-sequence-dna-translate"]], "skbio.sequence.DNA.translate_six_frames": [[275, "skbio-sequence-dna-translate-six-frames"]], "skbio.sequence.DNA.write": [[276, "skbio-sequence-dna-write"]], "skbio.sequence.GeneticCode": [[277, "skbio-sequence-geneticcode"]], "skbio.sequence.GeneticCode.__eq__": [[278, "skbio-sequence-geneticcode-eq"]], "skbio.sequence.GeneticCode.__ge__": [[279, "skbio-sequence-geneticcode-ge"]], "skbio.sequence.GeneticCode.__getstate__": [[280, "skbio-sequence-geneticcode-getstate"]], "skbio.sequence.GeneticCode.__gt__": [[281, "skbio-sequence-geneticcode-gt"]], "skbio.sequence.GeneticCode.__le__": [[282, "skbio-sequence-geneticcode-le"]], "skbio.sequence.GeneticCode.__lt__": [[283, "skbio-sequence-geneticcode-lt"]], "skbio.sequence.GeneticCode.__ne__": [[284, "skbio-sequence-geneticcode-ne"]], "skbio.sequence.GeneticCode.__str__": [[285, "skbio-sequence-geneticcode-str"]], "skbio.sequence.GeneticCode.from_ncbi": [[286, "skbio-sequence-geneticcode-from-ncbi"]], "skbio.sequence.GeneticCode.translate": [[287, "skbio-sequence-geneticcode-translate"]], "skbio.sequence.GeneticCode.translate_six_frames": [[288, "skbio-sequence-geneticcode-translate-six-frames"]], "skbio.sequence.GrammaredSequence": [[289, "skbio-sequence-grammaredsequence"]], "skbio.sequence.GrammaredSequence.__bool__": [[290, "skbio-sequence-grammaredsequence-bool"]], "skbio.sequence.GrammaredSequence.__contains__": [[291, "skbio-sequence-grammaredsequence-contains"]], "skbio.sequence.GrammaredSequence.__copy__": [[292, "skbio-sequence-grammaredsequence-copy"]], "skbio.sequence.GrammaredSequence.__deepcopy__": [[293, "skbio-sequence-grammaredsequence-deepcopy"]], "skbio.sequence.GrammaredSequence.__eq__": [[294, "skbio-sequence-grammaredsequence-eq"]], "skbio.sequence.GrammaredSequence.__ge__": [[295, "skbio-sequence-grammaredsequence-ge"]], "skbio.sequence.GrammaredSequence.__getitem__": [[296, "skbio-sequence-grammaredsequence-getitem"]], "skbio.sequence.GrammaredSequence.__getstate__": [[297, "skbio-sequence-grammaredsequence-getstate"]], "skbio.sequence.GrammaredSequence.__gt__": [[298, "skbio-sequence-grammaredsequence-gt"]], "skbio.sequence.GrammaredSequence.__iter__": [[299, "skbio-sequence-grammaredsequence-iter"]], "skbio.sequence.GrammaredSequence.__le__": [[300, "skbio-sequence-grammaredsequence-le"]], "skbio.sequence.GrammaredSequence.__len__": [[301, "skbio-sequence-grammaredsequence-len"]], "skbio.sequence.GrammaredSequence.__lt__": [[302, "skbio-sequence-grammaredsequence-lt"]], "skbio.sequence.GrammaredSequence.__ne__": [[303, "skbio-sequence-grammaredsequence-ne"]], "skbio.sequence.GrammaredSequence.__reversed__": [[304, "skbio-sequence-grammaredsequence-reversed"]], "skbio.sequence.GrammaredSequence.__str__": [[305, "skbio-sequence-grammaredsequence-str"]], "skbio.sequence.GrammaredSequence.concat": [[306, "skbio-sequence-grammaredsequence-concat"]], "skbio.sequence.GrammaredSequence.count": [[307, "skbio-sequence-grammaredsequence-count"]], "skbio.sequence.GrammaredSequence.definites": [[308, "skbio-sequence-grammaredsequence-definites"]], "skbio.sequence.GrammaredSequence.degap": [[309, "skbio-sequence-grammaredsequence-degap"]], "skbio.sequence.GrammaredSequence.degenerates": [[310, "skbio-sequence-grammaredsequence-degenerates"]], "skbio.sequence.GrammaredSequence.distance": [[311, "skbio-sequence-grammaredsequence-distance"]], "skbio.sequence.GrammaredSequence.expand_degenerates": [[312, "skbio-sequence-grammaredsequence-expand-degenerates"]], "skbio.sequence.GrammaredSequence.find_motifs": [[313, "skbio-sequence-grammaredsequence-find-motifs"]], "skbio.sequence.GrammaredSequence.find_with_regex": [[314, "skbio-sequence-grammaredsequence-find-with-regex"]], "skbio.sequence.GrammaredSequence.frequencies": [[315, "skbio-sequence-grammaredsequence-frequencies"]], "skbio.sequence.GrammaredSequence.gaps": [[316, "skbio-sequence-grammaredsequence-gaps"]], "skbio.sequence.GrammaredSequence.has_definites": [[317, "skbio-sequence-grammaredsequence-has-definites"]], "skbio.sequence.GrammaredSequence.has_degenerates": [[318, "skbio-sequence-grammaredsequence-has-degenerates"]], "skbio.sequence.GrammaredSequence.has_gaps": [[319, "skbio-sequence-grammaredsequence-has-gaps"]], "skbio.sequence.GrammaredSequence.has_interval_metadata": [[320, "skbio-sequence-grammaredsequence-has-interval-metadata"]], "skbio.sequence.GrammaredSequence.has_metadata": [[321, "skbio-sequence-grammaredsequence-has-metadata"]], "skbio.sequence.GrammaredSequence.has_nondegenerates": [[322, "skbio-sequence-grammaredsequence-has-nondegenerates"]], "skbio.sequence.GrammaredSequence.has_positional_metadata": [[323, "skbio-sequence-grammaredsequence-has-positional-metadata"]], "skbio.sequence.GrammaredSequence.index": [[324, "skbio-sequence-grammaredsequence-index"]], "skbio.sequence.GrammaredSequence.iter_contiguous": [[325, "skbio-sequence-grammaredsequence-iter-contiguous"]], "skbio.sequence.GrammaredSequence.iter_kmers": [[326, "skbio-sequence-grammaredsequence-iter-kmers"]], "skbio.sequence.GrammaredSequence.kmer_frequencies": [[327, "skbio-sequence-grammaredsequence-kmer-frequencies"]], "skbio.sequence.GrammaredSequence.lowercase": [[328, "skbio-sequence-grammaredsequence-lowercase"]], "skbio.sequence.GrammaredSequence.match_frequency": [[329, "skbio-sequence-grammaredsequence-match-frequency"]], "skbio.sequence.GrammaredSequence.matches": [[330, "skbio-sequence-grammaredsequence-matches"]], "skbio.sequence.GrammaredSequence.mismatch_frequency": [[331, "skbio-sequence-grammaredsequence-mismatch-frequency"]], "skbio.sequence.GrammaredSequence.mismatches": [[332, "skbio-sequence-grammaredsequence-mismatches"]], "skbio.sequence.GrammaredSequence.nondegenerates": [[333, "skbio-sequence-grammaredsequence-nondegenerates"]], "skbio.sequence.GrammaredSequence.read": [[334, "skbio-sequence-grammaredsequence-read"]], "skbio.sequence.GrammaredSequence.replace": [[335, "skbio-sequence-grammaredsequence-replace"]], "skbio.sequence.GrammaredSequence.to_regex": [[336, "skbio-sequence-grammaredsequence-to-regex"]], "skbio.sequence.GrammaredSequence.write": [[337, "skbio-sequence-grammaredsequence-write"]], "skbio.sequence.Protein": [[338, "skbio-sequence-protein"]], "skbio.sequence.Protein.__bool__": [[339, "skbio-sequence-protein-bool"]], "skbio.sequence.Protein.__contains__": [[340, "skbio-sequence-protein-contains"]], "skbio.sequence.Protein.__copy__": [[341, "skbio-sequence-protein-copy"]], "skbio.sequence.Protein.__deepcopy__": [[342, "skbio-sequence-protein-deepcopy"]], "skbio.sequence.Protein.__eq__": [[343, "skbio-sequence-protein-eq"]], "skbio.sequence.Protein.__ge__": [[344, "skbio-sequence-protein-ge"]], "skbio.sequence.Protein.__getitem__": [[345, "skbio-sequence-protein-getitem"]], "skbio.sequence.Protein.__getstate__": [[346, "skbio-sequence-protein-getstate"]], "skbio.sequence.Protein.__gt__": [[347, "skbio-sequence-protein-gt"]], "skbio.sequence.Protein.__iter__": [[348, "skbio-sequence-protein-iter"]], "skbio.sequence.Protein.__le__": [[349, "skbio-sequence-protein-le"]], "skbio.sequence.Protein.__len__": [[350, "skbio-sequence-protein-len"]], "skbio.sequence.Protein.__lt__": [[351, "skbio-sequence-protein-lt"]], "skbio.sequence.Protein.__ne__": [[352, "skbio-sequence-protein-ne"]], "skbio.sequence.Protein.__reversed__": [[353, "skbio-sequence-protein-reversed"]], "skbio.sequence.Protein.__str__": [[354, "skbio-sequence-protein-str"]], "skbio.sequence.Protein.concat": [[355, "skbio-sequence-protein-concat"]], "skbio.sequence.Protein.count": [[356, "skbio-sequence-protein-count"]], "skbio.sequence.Protein.definites": [[357, "skbio-sequence-protein-definites"]], "skbio.sequence.Protein.degap": [[358, "skbio-sequence-protein-degap"]], "skbio.sequence.Protein.degenerates": [[359, "skbio-sequence-protein-degenerates"]], "skbio.sequence.Protein.distance": [[360, "skbio-sequence-protein-distance"]], "skbio.sequence.Protein.expand_degenerates": [[361, "skbio-sequence-protein-expand-degenerates"]], "skbio.sequence.Protein.find_motifs": [[362, "skbio-sequence-protein-find-motifs"]], "skbio.sequence.Protein.find_with_regex": [[363, "skbio-sequence-protein-find-with-regex"]], "skbio.sequence.Protein.frequencies": [[364, "skbio-sequence-protein-frequencies"]], "skbio.sequence.Protein.gaps": [[365, "skbio-sequence-protein-gaps"]], "skbio.sequence.Protein.has_definites": [[366, "skbio-sequence-protein-has-definites"]], "skbio.sequence.Protein.has_degenerates": [[367, "skbio-sequence-protein-has-degenerates"]], "skbio.sequence.Protein.has_gaps": [[368, "skbio-sequence-protein-has-gaps"]], "skbio.sequence.Protein.has_interval_metadata": [[369, "skbio-sequence-protein-has-interval-metadata"]], "skbio.sequence.Protein.has_metadata": [[370, "skbio-sequence-protein-has-metadata"]], "skbio.sequence.Protein.has_nondegenerates": [[371, "skbio-sequence-protein-has-nondegenerates"]], "skbio.sequence.Protein.has_positional_metadata": [[372, "skbio-sequence-protein-has-positional-metadata"]], "skbio.sequence.Protein.has_stops": [[373, "skbio-sequence-protein-has-stops"]], "skbio.sequence.Protein.index": [[374, "skbio-sequence-protein-index"]], "skbio.sequence.Protein.iter_contiguous": [[375, "skbio-sequence-protein-iter-contiguous"]], "skbio.sequence.Protein.iter_kmers": [[376, "skbio-sequence-protein-iter-kmers"]], "skbio.sequence.Protein.kmer_frequencies": [[377, "skbio-sequence-protein-kmer-frequencies"]], "skbio.sequence.Protein.lowercase": [[378, "skbio-sequence-protein-lowercase"]], "skbio.sequence.Protein.match_frequency": [[379, "skbio-sequence-protein-match-frequency"]], "skbio.sequence.Protein.matches": [[380, "skbio-sequence-protein-matches"]], "skbio.sequence.Protein.mismatch_frequency": [[381, "skbio-sequence-protein-mismatch-frequency"]], "skbio.sequence.Protein.mismatches": [[382, "skbio-sequence-protein-mismatches"]], "skbio.sequence.Protein.nondegenerates": [[383, "skbio-sequence-protein-nondegenerates"]], "skbio.sequence.Protein.read": [[384, "skbio-sequence-protein-read"]], "skbio.sequence.Protein.replace": [[385, "skbio-sequence-protein-replace"]], "skbio.sequence.Protein.stops": [[386, "skbio-sequence-protein-stops"]], "skbio.sequence.Protein.to_regex": [[387, "skbio-sequence-protein-to-regex"]], "skbio.sequence.Protein.write": [[388, "skbio-sequence-protein-write"]], "skbio.sequence.RNA": [[389, "skbio-sequence-rna"]], "skbio.sequence.RNA.__bool__": [[390, "skbio-sequence-rna-bool"]], "skbio.sequence.RNA.__contains__": [[391, "skbio-sequence-rna-contains"]], "skbio.sequence.RNA.__copy__": [[392, "skbio-sequence-rna-copy"]], "skbio.sequence.RNA.__deepcopy__": [[393, "skbio-sequence-rna-deepcopy"]], "skbio.sequence.RNA.__eq__": [[394, "skbio-sequence-rna-eq"]], "skbio.sequence.RNA.__ge__": [[395, "skbio-sequence-rna-ge"]], "skbio.sequence.RNA.__getitem__": [[396, "skbio-sequence-rna-getitem"]], "skbio.sequence.RNA.__getstate__": [[397, "skbio-sequence-rna-getstate"]], "skbio.sequence.RNA.__gt__": [[398, "skbio-sequence-rna-gt"]], "skbio.sequence.RNA.__iter__": [[399, "skbio-sequence-rna-iter"]], "skbio.sequence.RNA.__le__": [[400, "skbio-sequence-rna-le"]], "skbio.sequence.RNA.__len__": [[401, "skbio-sequence-rna-len"]], "skbio.sequence.RNA.__lt__": [[402, "skbio-sequence-rna-lt"]], "skbio.sequence.RNA.__ne__": [[403, "skbio-sequence-rna-ne"]], "skbio.sequence.RNA.__reversed__": [[404, "skbio-sequence-rna-reversed"]], "skbio.sequence.RNA.__str__": [[405, "skbio-sequence-rna-str"]], "skbio.sequence.RNA.complement": [[406, "skbio-sequence-rna-complement"]], "skbio.sequence.RNA.concat": [[407, "skbio-sequence-rna-concat"]], "skbio.sequence.RNA.count": [[408, "skbio-sequence-rna-count"]], "skbio.sequence.RNA.definites": [[409, "skbio-sequence-rna-definites"]], "skbio.sequence.RNA.degap": [[410, "skbio-sequence-rna-degap"]], "skbio.sequence.RNA.degenerates": [[411, "skbio-sequence-rna-degenerates"]], "skbio.sequence.RNA.distance": [[412, "skbio-sequence-rna-distance"]], "skbio.sequence.RNA.expand_degenerates": [[413, "skbio-sequence-rna-expand-degenerates"]], "skbio.sequence.RNA.find_motifs": [[414, "skbio-sequence-rna-find-motifs"]], "skbio.sequence.RNA.find_with_regex": [[415, "skbio-sequence-rna-find-with-regex"]], "skbio.sequence.RNA.frequencies": [[416, "skbio-sequence-rna-frequencies"]], "skbio.sequence.RNA.gaps": [[417, "skbio-sequence-rna-gaps"]], "skbio.sequence.RNA.gc_content": [[418, "skbio-sequence-rna-gc-content"]], "skbio.sequence.RNA.gc_frequency": [[419, "skbio-sequence-rna-gc-frequency"]], "skbio.sequence.RNA.has_definites": [[420, "skbio-sequence-rna-has-definites"]], "skbio.sequence.RNA.has_degenerates": [[421, "skbio-sequence-rna-has-degenerates"]], "skbio.sequence.RNA.has_gaps": [[422, "skbio-sequence-rna-has-gaps"]], "skbio.sequence.RNA.has_interval_metadata": [[423, "skbio-sequence-rna-has-interval-metadata"]], "skbio.sequence.RNA.has_metadata": [[424, "skbio-sequence-rna-has-metadata"]], "skbio.sequence.RNA.has_nondegenerates": [[425, "skbio-sequence-rna-has-nondegenerates"]], "skbio.sequence.RNA.has_positional_metadata": [[426, "skbio-sequence-rna-has-positional-metadata"]], "skbio.sequence.RNA.index": [[427, "skbio-sequence-rna-index"]], "skbio.sequence.RNA.is_reverse_complement": [[428, "skbio-sequence-rna-is-reverse-complement"]], "skbio.sequence.RNA.iter_contiguous": [[429, "skbio-sequence-rna-iter-contiguous"]], "skbio.sequence.RNA.iter_kmers": [[430, "skbio-sequence-rna-iter-kmers"]], "skbio.sequence.RNA.kmer_frequencies": [[431, "skbio-sequence-rna-kmer-frequencies"]], "skbio.sequence.RNA.lowercase": [[432, "skbio-sequence-rna-lowercase"]], "skbio.sequence.RNA.match_frequency": [[433, "skbio-sequence-rna-match-frequency"]], "skbio.sequence.RNA.matches": [[434, "skbio-sequence-rna-matches"]], "skbio.sequence.RNA.mismatch_frequency": [[435, "skbio-sequence-rna-mismatch-frequency"]], "skbio.sequence.RNA.mismatches": [[436, "skbio-sequence-rna-mismatches"]], "skbio.sequence.RNA.nondegenerates": [[437, "skbio-sequence-rna-nondegenerates"]], "skbio.sequence.RNA.read": [[438, "skbio-sequence-rna-read"]], "skbio.sequence.RNA.replace": [[439, "skbio-sequence-rna-replace"]], "skbio.sequence.RNA.reverse_complement": [[440, "skbio-sequence-rna-reverse-complement"]], "skbio.sequence.RNA.reverse_transcribe": [[441, "skbio-sequence-rna-reverse-transcribe"]], "skbio.sequence.RNA.to_regex": [[442, "skbio-sequence-rna-to-regex"]], "skbio.sequence.RNA.translate": [[443, "skbio-sequence-rna-translate"]], "skbio.sequence.RNA.translate_six_frames": [[444, "skbio-sequence-rna-translate-six-frames"]], "skbio.sequence.RNA.write": [[445, "skbio-sequence-rna-write"]], "skbio.sequence.Sequence": [[446, "skbio-sequence-sequence"]], "skbio.sequence.Sequence.__bool__": [[447, "skbio-sequence-sequence-bool"]], "skbio.sequence.Sequence.__contains__": [[448, "skbio-sequence-sequence-contains"]], "skbio.sequence.Sequence.__copy__": [[449, "skbio-sequence-sequence-copy"]], "skbio.sequence.Sequence.__deepcopy__": [[450, "skbio-sequence-sequence-deepcopy"]], "skbio.sequence.Sequence.__eq__": [[451, "skbio-sequence-sequence-eq"]], "skbio.sequence.Sequence.__ge__": [[452, "skbio-sequence-sequence-ge"]], "skbio.sequence.Sequence.__getitem__": [[453, "skbio-sequence-sequence-getitem"]], "skbio.sequence.Sequence.__getstate__": [[454, "skbio-sequence-sequence-getstate"]], "skbio.sequence.Sequence.__gt__": [[455, "skbio-sequence-sequence-gt"]], "skbio.sequence.Sequence.__iter__": [[456, "skbio-sequence-sequence-iter"]], "skbio.sequence.Sequence.__le__": [[457, "skbio-sequence-sequence-le"]], "skbio.sequence.Sequence.__len__": [[458, "skbio-sequence-sequence-len"]], "skbio.sequence.Sequence.__lt__": [[459, "skbio-sequence-sequence-lt"]], "skbio.sequence.Sequence.__ne__": [[460, "skbio-sequence-sequence-ne"]], "skbio.sequence.Sequence.__reversed__": [[461, "skbio-sequence-sequence-reversed"]], "skbio.sequence.Sequence.__str__": [[462, "skbio-sequence-sequence-str"]], "skbio.sequence.Sequence.concat": [[463, "skbio-sequence-sequence-concat"]], "skbio.sequence.Sequence.count": [[464, "skbio-sequence-sequence-count"]], "skbio.sequence.Sequence.distance": [[465, "skbio-sequence-sequence-distance"]], "skbio.sequence.Sequence.find_with_regex": [[466, "skbio-sequence-sequence-find-with-regex"]], "skbio.sequence.Sequence.frequencies": [[467, "skbio-sequence-sequence-frequencies"]], "skbio.sequence.Sequence.has_interval_metadata": [[468, "skbio-sequence-sequence-has-interval-metadata"]], "skbio.sequence.Sequence.has_metadata": [[469, "skbio-sequence-sequence-has-metadata"]], "skbio.sequence.Sequence.has_positional_metadata": [[470, "skbio-sequence-sequence-has-positional-metadata"]], "skbio.sequence.Sequence.index": [[471, "skbio-sequence-sequence-index"]], "skbio.sequence.Sequence.iter_contiguous": [[472, "skbio-sequence-sequence-iter-contiguous"]], "skbio.sequence.Sequence.iter_kmers": [[473, "skbio-sequence-sequence-iter-kmers"]], "skbio.sequence.Sequence.kmer_frequencies": [[474, "skbio-sequence-sequence-kmer-frequencies"]], "skbio.sequence.Sequence.lowercase": [[475, "skbio-sequence-sequence-lowercase"]], "skbio.sequence.Sequence.match_frequency": [[476, "skbio-sequence-sequence-match-frequency"]], "skbio.sequence.Sequence.matches": [[477, "skbio-sequence-sequence-matches"]], "skbio.sequence.Sequence.mismatch_frequency": [[478, "skbio-sequence-sequence-mismatch-frequency"]], "skbio.sequence.Sequence.mismatches": [[479, "skbio-sequence-sequence-mismatches"]], "skbio.sequence.Sequence.read": [[480, "skbio-sequence-sequence-read"]], "skbio.sequence.Sequence.replace": [[481, "skbio-sequence-sequence-replace"]], "skbio.sequence.Sequence.write": [[482, "skbio-sequence-sequence-write"]], "Sequence distance metrics (skbio.sequence.distance)": [[483, "sequence-distance-metrics-skbio-sequence-distance"]], "skbio.sequence.distance.hamming": [[484, "skbio-sequence-distance-hamming"]], "skbio.sequence.distance.kmer_distance": [[485, "skbio-sequence-distance-kmer-distance"]], "Composition Statistics (skbio.stats.composition)": [[486, "composition-statistics-skbio-stats-composition"]], "skbio.stats.composition.alr": [[487, "skbio-stats-composition-alr"]], "skbio.stats.composition.alr_inv": [[488, "skbio-stats-composition-alr-inv"]], "skbio.stats.composition.ancom": [[489, "skbio-stats-composition-ancom"]], "skbio.stats.composition.centralize": [[490, "skbio-stats-composition-centralize"]], "skbio.stats.composition.closure": [[491, "skbio-stats-composition-closure"]], "skbio.stats.composition.clr": [[492, "skbio-stats-composition-clr"]], "skbio.stats.composition.clr_inv": [[493, "skbio-stats-composition-clr-inv"]], "skbio.stats.composition.ilr": [[494, "skbio-stats-composition-ilr"]], "skbio.stats.composition.ilr_inv": [[495, "skbio-stats-composition-ilr-inv"]], "skbio.stats.composition.inner": [[496, "skbio-stats-composition-inner"]], "skbio.stats.composition.multiplicative_replacement": [[497, "skbio-stats-composition-multiplicative-replacement"]], "skbio.stats.composition.perturb": [[498, "skbio-stats-composition-perturb"]], "skbio.stats.composition.perturb_inv": [[499, "skbio-stats-composition-perturb-inv"]], "skbio.stats.composition.power": [[500, "skbio-stats-composition-power"]], "skbio.stats.composition.sbp_basis": [[501, "skbio-stats-composition-sbp-basis"]], "Distance matrices and distance-based statistics (skbio.stats.distance)": [[502, "distance-matrices-and-distance-based-statistics-skbio-stats-distance"]], "Data Structures: DissimilarityMatrix and DistanceMatrix": [[502, "data-structures-dissimilaritymatrix-and-distancematrix"]], "Distance-based statistics": [[502, "distance-based-statistics"]], "Categorical Variable Stats": [[502, "categorical-variable-stats"]], "Continuous Variable Stats": [[502, "continuous-variable-stats"]], "Distance Matrix Comparisons": [[502, "distance-matrix-comparisons"]], "skbio.stats.distance.DissimilarityMatrix": [[503, "skbio-stats-distance-dissimilaritymatrix"]], "skbio.stats.distance.DissimilarityMatrix.__contains__": [[504, "skbio-stats-distance-dissimilaritymatrix-contains"]], "skbio.stats.distance.DissimilarityMatrix.__eq__": [[505, "skbio-stats-distance-dissimilaritymatrix-eq"]], "skbio.stats.distance.DissimilarityMatrix.__ge__": [[506, "skbio-stats-distance-dissimilaritymatrix-ge"]], "skbio.stats.distance.DissimilarityMatrix.__getitem__": [[507, "skbio-stats-distance-dissimilaritymatrix-getitem"]], "skbio.stats.distance.DissimilarityMatrix.__getstate__": [[508, "skbio-stats-distance-dissimilaritymatrix-getstate"]], "skbio.stats.distance.DissimilarityMatrix.__gt__": [[509, "skbio-stats-distance-dissimilaritymatrix-gt"]], "skbio.stats.distance.DissimilarityMatrix.__le__": [[510, "skbio-stats-distance-dissimilaritymatrix-le"]], "skbio.stats.distance.DissimilarityMatrix.__lt__": [[511, "skbio-stats-distance-dissimilaritymatrix-lt"]], "skbio.stats.distance.DissimilarityMatrix.__ne__": [[512, "skbio-stats-distance-dissimilaritymatrix-ne"]], "skbio.stats.distance.DissimilarityMatrix.__str__": [[513, "skbio-stats-distance-dissimilaritymatrix-str"]], "skbio.stats.distance.DissimilarityMatrix.between": [[514, "skbio-stats-distance-dissimilaritymatrix-between"]], "skbio.stats.distance.DissimilarityMatrix.copy": [[515, "skbio-stats-distance-dissimilaritymatrix-copy"]], "skbio.stats.distance.DissimilarityMatrix.filter": [[516, "skbio-stats-distance-dissimilaritymatrix-filter"]], "skbio.stats.distance.DissimilarityMatrix.from_iterable": [[517, "skbio-stats-distance-dissimilaritymatrix-from-iterable"]], "skbio.stats.distance.DissimilarityMatrix.index": [[518, "skbio-stats-distance-dissimilaritymatrix-index"]], "skbio.stats.distance.DissimilarityMatrix.plot": [[519, "skbio-stats-distance-dissimilaritymatrix-plot"]], "skbio.stats.distance.DissimilarityMatrix.read": [[520, "skbio-stats-distance-dissimilaritymatrix-read"]], "skbio.stats.distance.DissimilarityMatrix.redundant_form": [[521, "skbio-stats-distance-dissimilaritymatrix-redundant-form"]], "skbio.stats.distance.DissimilarityMatrix.to_data_frame": [[522, "skbio-stats-distance-dissimilaritymatrix-to-data-frame"]], "skbio.stats.distance.DissimilarityMatrix.transpose": [[523, "skbio-stats-distance-dissimilaritymatrix-transpose"]], "skbio.stats.distance.DissimilarityMatrix.within": [[524, "skbio-stats-distance-dissimilaritymatrix-within"]], "skbio.stats.distance.DissimilarityMatrix.write": [[525, "skbio-stats-distance-dissimilaritymatrix-write"]], "skbio.stats.distance.DissimilarityMatrixError": [[526, "skbio-stats-distance-dissimilaritymatrixerror"]], "skbio.stats.distance.DistanceMatrix": [[527, "skbio-stats-distance-distancematrix"]], "skbio.stats.distance.DistanceMatrix.__contains__": [[528, "skbio-stats-distance-distancematrix-contains"]], "skbio.stats.distance.DistanceMatrix.__eq__": [[529, "skbio-stats-distance-distancematrix-eq"]], "skbio.stats.distance.DistanceMatrix.__ge__": [[530, "skbio-stats-distance-distancematrix-ge"]], "skbio.stats.distance.DistanceMatrix.__getitem__": [[531, "skbio-stats-distance-distancematrix-getitem"]], "skbio.stats.distance.DistanceMatrix.__getstate__": [[532, "skbio-stats-distance-distancematrix-getstate"]], "skbio.stats.distance.DistanceMatrix.__gt__": [[533, "skbio-stats-distance-distancematrix-gt"]], "skbio.stats.distance.DistanceMatrix.__le__": [[534, "skbio-stats-distance-distancematrix-le"]], "skbio.stats.distance.DistanceMatrix.__lt__": [[535, "skbio-stats-distance-distancematrix-lt"]], "skbio.stats.distance.DistanceMatrix.__ne__": [[536, "skbio-stats-distance-distancematrix-ne"]], "skbio.stats.distance.DistanceMatrix.__str__": [[537, "skbio-stats-distance-distancematrix-str"]], "skbio.stats.distance.DistanceMatrix.between": [[538, "skbio-stats-distance-distancematrix-between"]], "skbio.stats.distance.DistanceMatrix.condensed_form": [[539, "skbio-stats-distance-distancematrix-condensed-form"]], "skbio.stats.distance.DistanceMatrix.copy": [[540, "skbio-stats-distance-distancematrix-copy"]], "skbio.stats.distance.DistanceMatrix.filter": [[541, "skbio-stats-distance-distancematrix-filter"]], "skbio.stats.distance.DistanceMatrix.from_iterable": [[542, "skbio-stats-distance-distancematrix-from-iterable"]], "skbio.stats.distance.DistanceMatrix.index": [[543, "skbio-stats-distance-distancematrix-index"]], "skbio.stats.distance.DistanceMatrix.permute": [[544, "skbio-stats-distance-distancematrix-permute"]], "skbio.stats.distance.DistanceMatrix.plot": [[545, "skbio-stats-distance-distancematrix-plot"]], "skbio.stats.distance.DistanceMatrix.read": [[546, "skbio-stats-distance-distancematrix-read"]], "skbio.stats.distance.DistanceMatrix.redundant_form": [[547, "skbio-stats-distance-distancematrix-redundant-form"]], "skbio.stats.distance.DistanceMatrix.to_data_frame": [[548, "skbio-stats-distance-distancematrix-to-data-frame"]], "skbio.stats.distance.DistanceMatrix.to_series": [[549, "skbio-stats-distance-distancematrix-to-series"]], "skbio.stats.distance.DistanceMatrix.transpose": [[550, "skbio-stats-distance-distancematrix-transpose"]], "skbio.stats.distance.DistanceMatrix.within": [[551, "skbio-stats-distance-distancematrix-within"]], "skbio.stats.distance.DistanceMatrix.write": [[552, "skbio-stats-distance-distancematrix-write"]], "skbio.stats.distance.DistanceMatrixError": [[553, "skbio-stats-distance-distancematrixerror"]], "skbio.stats.distance.MissingIDError": [[554, "skbio-stats-distance-missingiderror"]], "skbio.stats.distance.anosim": [[555, "skbio-stats-distance-anosim"]], "skbio.stats.distance.bioenv": [[556, "skbio-stats-distance-bioenv"]], "skbio.stats.distance.mantel": [[557, "skbio-stats-distance-mantel"]], "skbio.stats.distance.permanova": [[558, "skbio-stats-distance-permanova"]], "skbio.stats.distance.permdisp": [[559, "skbio-stats-distance-permdisp"]], "skbio.stats.distance.pwmantel": [[560, "skbio-stats-distance-pwmantel"]], "skbio.stats.distance.randdm": [[561, "skbio-stats-distance-randdm"]], "Evolutionary statistics (skbio.stats.evolve)": [[562, "evolutionary-statistics-skbio-stats-evolve"]], "Cophylogenetic methods": [[562, "cophylogenetic-methods"]], "skbio.stats.evolve.hommola_cospeciation": [[563, "skbio-stats-evolve-hommola-cospeciation"]], "Gradient analyses (skbio.stats.gradient)": [[564, "gradient-analyses-skbio-stats-gradient"]], "skbio.stats.gradient.AverageGradientANOVA": [[565, "skbio-stats-gradient-averagegradientanova"]], "skbio.stats.gradient.AverageGradientANOVA.__eq__": [[566, "skbio-stats-gradient-averagegradientanova-eq"]], "skbio.stats.gradient.AverageGradientANOVA.__ge__": [[567, "skbio-stats-gradient-averagegradientanova-ge"]], "skbio.stats.gradient.AverageGradientANOVA.__getstate__": [[568, "skbio-stats-gradient-averagegradientanova-getstate"]], "skbio.stats.gradient.AverageGradientANOVA.__gt__": [[569, "skbio-stats-gradient-averagegradientanova-gt"]], "skbio.stats.gradient.AverageGradientANOVA.__hash__": [[570, "skbio-stats-gradient-averagegradientanova-hash"]], "skbio.stats.gradient.AverageGradientANOVA.__le__": [[571, "skbio-stats-gradient-averagegradientanova-le"]], "skbio.stats.gradient.AverageGradientANOVA.__lt__": [[572, "skbio-stats-gradient-averagegradientanova-lt"]], "skbio.stats.gradient.AverageGradientANOVA.__ne__": [[573, "skbio-stats-gradient-averagegradientanova-ne"]], "skbio.stats.gradient.AverageGradientANOVA.__str__": [[574, "skbio-stats-gradient-averagegradientanova-str"]], "skbio.stats.gradient.AverageGradientANOVA.get_trajectories": [[575, "skbio-stats-gradient-averagegradientanova-get-trajectories"]], "skbio.stats.gradient.CategoryResults": [[576, "skbio-stats-gradient-categoryresults"]], "skbio.stats.gradient.CategoryResults.__eq__": [[577, "skbio-stats-gradient-categoryresults-eq"]], "skbio.stats.gradient.CategoryResults.__ge__": [[578, "skbio-stats-gradient-categoryresults-ge"]], "skbio.stats.gradient.CategoryResults.__getstate__": [[579, "skbio-stats-gradient-categoryresults-getstate"]], "skbio.stats.gradient.CategoryResults.__gt__": [[580, "skbio-stats-gradient-categoryresults-gt"]], "skbio.stats.gradient.CategoryResults.__hash__": [[581, "skbio-stats-gradient-categoryresults-hash"]], "skbio.stats.gradient.CategoryResults.__le__": [[582, "skbio-stats-gradient-categoryresults-le"]], "skbio.stats.gradient.CategoryResults.__lt__": [[583, "skbio-stats-gradient-categoryresults-lt"]], "skbio.stats.gradient.CategoryResults.__ne__": [[584, "skbio-stats-gradient-categoryresults-ne"]], "skbio.stats.gradient.CategoryResults.__str__": [[585, "skbio-stats-gradient-categoryresults-str"]], "skbio.stats.gradient.CategoryResults.to_files": [[586, "skbio-stats-gradient-categoryresults-to-files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[587, "skbio-stats-gradient-firstdifferencegradientanova"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__": [[588, "skbio-stats-gradient-firstdifferencegradientanova-eq"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__": [[589, "skbio-stats-gradient-firstdifferencegradientanova-ge"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__": [[590, "skbio-stats-gradient-firstdifferencegradientanova-getstate"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__": [[591, "skbio-stats-gradient-firstdifferencegradientanova-gt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__": [[592, "skbio-stats-gradient-firstdifferencegradientanova-hash"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__": [[593, "skbio-stats-gradient-firstdifferencegradientanova-le"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__": [[594, "skbio-stats-gradient-firstdifferencegradientanova-lt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__": [[595, "skbio-stats-gradient-firstdifferencegradientanova-ne"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__": [[596, "skbio-stats-gradient-firstdifferencegradientanova-str"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories": [[597, "skbio-stats-gradient-firstdifferencegradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVA": [[598, "skbio-stats-gradient-gradientanova"]], "skbio.stats.gradient.GradientANOVA.__eq__": [[599, "skbio-stats-gradient-gradientanova-eq"]], "skbio.stats.gradient.GradientANOVA.__ge__": [[600, "skbio-stats-gradient-gradientanova-ge"]], "skbio.stats.gradient.GradientANOVA.__getstate__": [[601, "skbio-stats-gradient-gradientanova-getstate"]], "skbio.stats.gradient.GradientANOVA.__gt__": [[602, "skbio-stats-gradient-gradientanova-gt"]], "skbio.stats.gradient.GradientANOVA.__hash__": [[603, "skbio-stats-gradient-gradientanova-hash"]], "skbio.stats.gradient.GradientANOVA.__le__": [[604, "skbio-stats-gradient-gradientanova-le"]], "skbio.stats.gradient.GradientANOVA.__lt__": [[605, "skbio-stats-gradient-gradientanova-lt"]], "skbio.stats.gradient.GradientANOVA.__ne__": [[606, "skbio-stats-gradient-gradientanova-ne"]], "skbio.stats.gradient.GradientANOVA.__str__": [[607, "skbio-stats-gradient-gradientanova-str"]], "skbio.stats.gradient.GradientANOVA.get_trajectories": [[608, "skbio-stats-gradient-gradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[609, "skbio-stats-gradient-gradientanovaresults"]], "skbio.stats.gradient.GradientANOVAResults.__eq__": [[610, "skbio-stats-gradient-gradientanovaresults-eq"]], "skbio.stats.gradient.GradientANOVAResults.__ge__": [[611, "skbio-stats-gradient-gradientanovaresults-ge"]], "skbio.stats.gradient.GradientANOVAResults.__getstate__": [[612, "skbio-stats-gradient-gradientanovaresults-getstate"]], "skbio.stats.gradient.GradientANOVAResults.__gt__": [[613, "skbio-stats-gradient-gradientanovaresults-gt"]], "skbio.stats.gradient.GradientANOVAResults.__hash__": [[614, "skbio-stats-gradient-gradientanovaresults-hash"]], "skbio.stats.gradient.GradientANOVAResults.__le__": [[615, "skbio-stats-gradient-gradientanovaresults-le"]], "skbio.stats.gradient.GradientANOVAResults.__lt__": [[616, "skbio-stats-gradient-gradientanovaresults-lt"]], "skbio.stats.gradient.GradientANOVAResults.__ne__": [[617, "skbio-stats-gradient-gradientanovaresults-ne"]], "skbio.stats.gradient.GradientANOVAResults.__str__": [[618, "skbio-stats-gradient-gradientanovaresults-str"]], "skbio.stats.gradient.GradientANOVAResults.to_files": [[619, "skbio-stats-gradient-gradientanovaresults-to-files"]], "skbio.stats.gradient.GroupResults": [[620, "skbio-stats-gradient-groupresults"]], "skbio.stats.gradient.GroupResults.__eq__": [[621, "skbio-stats-gradient-groupresults-eq"]], "skbio.stats.gradient.GroupResults.__ge__": [[622, "skbio-stats-gradient-groupresults-ge"]], "skbio.stats.gradient.GroupResults.__getstate__": [[623, "skbio-stats-gradient-groupresults-getstate"]], "skbio.stats.gradient.GroupResults.__gt__": [[624, "skbio-stats-gradient-groupresults-gt"]], "skbio.stats.gradient.GroupResults.__hash__": [[625, "skbio-stats-gradient-groupresults-hash"]], "skbio.stats.gradient.GroupResults.__le__": [[626, "skbio-stats-gradient-groupresults-le"]], "skbio.stats.gradient.GroupResults.__lt__": [[627, "skbio-stats-gradient-groupresults-lt"]], "skbio.stats.gradient.GroupResults.__ne__": [[628, "skbio-stats-gradient-groupresults-ne"]], "skbio.stats.gradient.GroupResults.__str__": [[629, "skbio-stats-gradient-groupresults-str"]], "skbio.stats.gradient.GroupResults.to_files": [[630, "skbio-stats-gradient-groupresults-to-files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[631, "skbio-stats-gradient-trajectorygradientanova"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__": [[632, "skbio-stats-gradient-trajectorygradientanova-eq"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__": [[633, "skbio-stats-gradient-trajectorygradientanova-ge"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__": [[634, "skbio-stats-gradient-trajectorygradientanova-getstate"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__": [[635, "skbio-stats-gradient-trajectorygradientanova-gt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__": [[636, "skbio-stats-gradient-trajectorygradientanova-hash"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__le__": [[637, "skbio-stats-gradient-trajectorygradientanova-le"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__": [[638, "skbio-stats-gradient-trajectorygradientanova-lt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__": [[639, "skbio-stats-gradient-trajectorygradientanova-ne"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__str__": [[640, "skbio-stats-gradient-trajectorygradientanova-str"]], "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories": [[641, "skbio-stats-gradient-trajectorygradientanova-get-trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[642, "skbio-stats-gradient-windowdifferencegradientanova"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__": [[643, "skbio-stats-gradient-windowdifferencegradientanova-eq"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__": [[644, "skbio-stats-gradient-windowdifferencegradientanova-ge"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__": [[645, "skbio-stats-gradient-windowdifferencegradientanova-getstate"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__": [[646, "skbio-stats-gradient-windowdifferencegradientanova-gt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__": [[647, "skbio-stats-gradient-windowdifferencegradientanova-hash"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__": [[648, "skbio-stats-gradient-windowdifferencegradientanova-le"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__": [[649, "skbio-stats-gradient-windowdifferencegradientanova-lt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__": [[650, "skbio-stats-gradient-windowdifferencegradientanova-ne"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__": [[651, "skbio-stats-gradient-windowdifferencegradientanova-str"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories": [[652, "skbio-stats-gradient-windowdifferencegradientanova-get-trajectories"]], "skbio.stats.isubsample": [[653, "skbio-stats-isubsample"]], "Ordination methods (skbio.stats.ordination)": [[654, "ordination-methods-skbio-stats-ordination"]], "Ordination Functions": [[654, "ordination-functions"]], "Utility Functions": [[654, "utility-functions"], [835, "utility-functions"]], "skbio.stats.ordination.OrdinationResults": [[655, "skbio-stats-ordination-ordinationresults"]], "skbio.stats.ordination.OrdinationResults.__eq__": [[656, "skbio-stats-ordination-ordinationresults-eq"]], "skbio.stats.ordination.OrdinationResults.__ge__": [[657, "skbio-stats-ordination-ordinationresults-ge"]], "skbio.stats.ordination.OrdinationResults.__getstate__": [[658, "skbio-stats-ordination-ordinationresults-getstate"]], "skbio.stats.ordination.OrdinationResults.__gt__": [[659, "skbio-stats-ordination-ordinationresults-gt"]], "skbio.stats.ordination.OrdinationResults.__hash__": [[660, "skbio-stats-ordination-ordinationresults-hash"]], "skbio.stats.ordination.OrdinationResults.__le__": [[661, "skbio-stats-ordination-ordinationresults-le"]], "skbio.stats.ordination.OrdinationResults.__lt__": [[662, "skbio-stats-ordination-ordinationresults-lt"]], "skbio.stats.ordination.OrdinationResults.__ne__": [[663, "skbio-stats-ordination-ordinationresults-ne"]], "skbio.stats.ordination.OrdinationResults.__str__": [[664, "skbio-stats-ordination-ordinationresults-str"]], "skbio.stats.ordination.OrdinationResults.plot": [[665, "skbio-stats-ordination-ordinationresults-plot"]], "skbio.stats.ordination.OrdinationResults.read": [[666, "skbio-stats-ordination-ordinationresults-read"]], "skbio.stats.ordination.OrdinationResults.write": [[667, "skbio-stats-ordination-ordinationresults-write"]], "skbio.stats.ordination.ca": [[668, "skbio-stats-ordination-ca"]], "skbio.stats.ordination.cca": [[669, "skbio-stats-ordination-cca"]], "skbio.stats.ordination.corr": [[670, "skbio-stats-ordination-corr"]], "skbio.stats.ordination.e_matrix": [[671, "skbio-stats-ordination-e-matrix"]], "skbio.stats.ordination.f_matrix": [[672, "skbio-stats-ordination-f-matrix"]], "skbio.stats.ordination.mean_and_std": [[673, "skbio-stats-ordination-mean-and-std"]], "skbio.stats.ordination.pcoa": [[674, "skbio-stats-ordination-pcoa"]], "skbio.stats.ordination.pcoa_biplot": [[675, "skbio-stats-ordination-pcoa-biplot"]], "skbio.stats.ordination.rda": [[676, "skbio-stats-ordination-rda"]], "skbio.stats.ordination.scale": [[677, "skbio-stats-ordination-scale"]], "skbio.stats.ordination.svd_rank": [[678, "skbio-stats-ordination-svd-rank"]], "Empirical Power Estimation (skbio.stats.power)": [[679, "empirical-power-estimation-skbio-stats-power"]], "skbio.stats.power.confidence_bound": [[680, "skbio-stats-power-confidence-bound"]], "skbio.stats.power.paired_subsamples": [[681, "skbio-stats-power-paired-subsamples"]], "skbio.stats.power.subsample_paired_power": [[682, "skbio-stats-power-subsample-paired-power"]], "skbio.stats.power.subsample_power": [[683, "skbio-stats-power-subsample-power"]], "skbio.stats.subsample_counts": [[684, "skbio-stats-subsample-counts"]], "skbio.tree.DuplicateNodeError": [[685, "skbio-tree-duplicatenodeerror"]], "skbio.tree.MissingNodeError": [[686, "skbio-tree-missingnodeerror"]], "skbio.tree.NoLengthError": [[687, "skbio-tree-nolengtherror"]], "skbio.tree.NoParentError": [[688, "skbio-tree-noparenterror"]], "skbio.tree.TreeError": [[689, "skbio-tree-treeerror"]], "skbio.tree.TreeNode": [[690, "skbio-tree-treenode"]], "skbio.tree.TreeNode.__copy__": [[691, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.__deepcopy__": [[692, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.__eq__": [[693, "skbio-tree-treenode-eq"]], "skbio.tree.TreeNode.__ge__": [[694, "skbio-tree-treenode-ge"]], "skbio.tree.TreeNode.__getitem__": [[695, "skbio-tree-treenode-getitem"]], "skbio.tree.TreeNode.__getstate__": [[696, "skbio-tree-treenode-getstate"]], "skbio.tree.TreeNode.__gt__": [[697, "skbio-tree-treenode-gt"]], "skbio.tree.TreeNode.__hash__": [[698, "skbio-tree-treenode-hash"]], "skbio.tree.TreeNode.__iter__": [[699, "skbio-tree-treenode-iter"]], "skbio.tree.TreeNode.__le__": [[700, "skbio-tree-treenode-le"]], "skbio.tree.TreeNode.__len__": [[701, "skbio-tree-treenode-len"]], "skbio.tree.TreeNode.__lt__": [[702, "skbio-tree-treenode-lt"]], "skbio.tree.TreeNode.__ne__": [[703, "skbio-tree-treenode-ne"]], "skbio.tree.TreeNode.__str__": [[704, "skbio-tree-treenode-str"]], "skbio.tree.TreeNode.accumulate_to_ancestor": [[705, "skbio-tree-treenode-accumulate-to-ancestor"]], "skbio.tree.TreeNode.ancestors": [[706, "skbio-tree-treenode-ancestors"]], "skbio.tree.TreeNode.append": [[707, "skbio-tree-treenode-append"]], "skbio.tree.TreeNode.ascii_art": [[708, "skbio-tree-treenode-ascii-art"]], "skbio.tree.TreeNode.assign_ids": [[709, "skbio-tree-treenode-assign-ids"]], "skbio.tree.TreeNode.assign_supports": [[710, "skbio-tree-treenode-assign-supports"]], "skbio.tree.TreeNode.bifurcate": [[711, "skbio-tree-treenode-bifurcate"]], "skbio.tree.TreeNode.cache_attr": [[712, "skbio-tree-treenode-cache-attr"]], "skbio.tree.TreeNode.compare_rfd": [[713, "skbio-tree-treenode-compare-rfd"]], "skbio.tree.TreeNode.compare_subsets": [[714, "skbio-tree-treenode-compare-subsets"]], "skbio.tree.TreeNode.compare_tip_distances": [[715, "skbio-tree-treenode-compare-tip-distances"]], "skbio.tree.TreeNode.copy": [[716, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.count": [[717, "skbio-tree-treenode-count"]], "skbio.tree.TreeNode.create_caches": [[718, "skbio-tree-treenode-create-caches"]], "skbio.tree.TreeNode.deepcopy": [[719, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.descending_branch_length": [[720, "skbio-tree-treenode-descending-branch-length"]], "skbio.tree.TreeNode.distance": [[721, "skbio-tree-treenode-distance"]], "skbio.tree.TreeNode.extend": [[722, "skbio-tree-treenode-extend"]], "skbio.tree.TreeNode.find": [[723, "skbio-tree-treenode-find"]], "skbio.tree.TreeNode.find_all": [[724, "skbio-tree-treenode-find-all"]], "skbio.tree.TreeNode.find_by_func": [[725, "skbio-tree-treenode-find-by-func"]], "skbio.tree.TreeNode.find_by_id": [[726, "skbio-tree-treenode-find-by-id"]], "skbio.tree.TreeNode.from_linkage_matrix": [[727, "skbio-tree-treenode-from-linkage-matrix"]], "skbio.tree.TreeNode.from_taxdump": [[728, "skbio-tree-treenode-from-taxdump"]], "skbio.tree.TreeNode.from_taxonomy": [[729, "skbio-tree-treenode-from-taxonomy"]], "skbio.tree.TreeNode.get_max_distance": [[730, "skbio-tree-treenode-get-max-distance"]], "skbio.tree.TreeNode.has_children": [[731, "skbio-tree-treenode-has-children"]], "skbio.tree.TreeNode.index_tree": [[732, "skbio-tree-treenode-index-tree"]], "skbio.tree.TreeNode.invalidate_caches": [[733, "skbio-tree-treenode-invalidate-caches"]], "skbio.tree.TreeNode.is_root": [[734, "skbio-tree-treenode-is-root"]], "skbio.tree.TreeNode.is_tip": [[735, "skbio-tree-treenode-is-tip"]], "skbio.tree.TreeNode.lca": [[736, "skbio-tree-treenode-lca"]], "skbio.tree.TreeNode.levelorder": [[737, "skbio-tree-treenode-levelorder"]], "skbio.tree.TreeNode.lowest_common_ancestor": [[738, "skbio-tree-treenode-lowest-common-ancestor"]], "skbio.tree.TreeNode.neighbors": [[739, "skbio-tree-treenode-neighbors"]], "skbio.tree.TreeNode.non_tips": [[740, "skbio-tree-treenode-non-tips"]], "skbio.tree.TreeNode.observed_node_counts": [[741, "skbio-tree-treenode-observed-node-counts"]], "skbio.tree.TreeNode.pop": [[742, "skbio-tree-treenode-pop"]], "skbio.tree.TreeNode.postorder": [[743, "skbio-tree-treenode-postorder"]], "skbio.tree.TreeNode.pre_and_postorder": [[744, "skbio-tree-treenode-pre-and-postorder"]], "skbio.tree.TreeNode.preorder": [[745, "skbio-tree-treenode-preorder"]], "skbio.tree.TreeNode.prune": [[746, "skbio-tree-treenode-prune"]], "skbio.tree.TreeNode.read": [[747, "skbio-tree-treenode-read"]], "skbio.tree.TreeNode.remove": [[748, "skbio-tree-treenode-remove"]], "skbio.tree.TreeNode.remove_deleted": [[749, "skbio-tree-treenode-remove-deleted"]], "skbio.tree.TreeNode.root": [[750, "skbio-tree-treenode-root"]], "skbio.tree.TreeNode.root_at": [[751, "skbio-tree-treenode-root-at"]], "skbio.tree.TreeNode.root_at_midpoint": [[752, "skbio-tree-treenode-root-at-midpoint"]], "skbio.tree.TreeNode.shear": [[753, "skbio-tree-treenode-shear"]], "skbio.tree.TreeNode.shuffle": [[754, "skbio-tree-treenode-shuffle"]], "skbio.tree.TreeNode.siblings": [[755, "skbio-tree-treenode-siblings"]], "skbio.tree.TreeNode.subset": [[756, "skbio-tree-treenode-subset"]], "skbio.tree.TreeNode.subsets": [[757, "skbio-tree-treenode-subsets"]], "skbio.tree.TreeNode.subtree": [[758, "skbio-tree-treenode-subtree"]], "skbio.tree.TreeNode.tip_tip_distances": [[759, "skbio-tree-treenode-tip-tip-distances"]], "skbio.tree.TreeNode.tips": [[760, "skbio-tree-treenode-tips"]], "skbio.tree.TreeNode.to_array": [[761, "skbio-tree-treenode-to-array"]], "skbio.tree.TreeNode.to_taxonomy": [[762, "skbio-tree-treenode-to-taxonomy"]], "skbio.tree.TreeNode.traverse": [[763, "skbio-tree-treenode-traverse"]], "skbio.tree.TreeNode.unpack": [[764, "skbio-tree-treenode-unpack"]], "skbio.tree.TreeNode.unpack_by_func": [[765, "skbio-tree-treenode-unpack-by-func"]], "skbio.tree.TreeNode.unrooted_copy": [[766, "skbio-tree-treenode-unrooted-copy"]], "skbio.tree.TreeNode.unrooted_deepcopy": [[767, "skbio-tree-treenode-unrooted-deepcopy"]], "skbio.tree.TreeNode.write": [[768, "skbio-tree-treenode-write"]], "skbio.tree.majority_rule": [[769, "skbio-tree-majority-rule"]], "skbio.tree.nj": [[770, "skbio-tree-nj"]], "skbio.util.EfficiencyWarning": [[771, "skbio-util-efficiencywarning"]], "skbio.util.RepresentationWarning": [[772, "skbio-util-representationwarning"]], "skbio.util.assert_data_frame_almost_equal": [[773, "skbio-util-assert-data-frame-almost-equal"]], "skbio.util.assert_ordination_results_equal": [[774, "skbio-util-assert-ordination-results-equal"]], "skbio.util.cardinal_to_ordinal": [[775, "skbio-util-cardinal-to-ordinal"]], "skbio.util.classproperty": [[776, "skbio-util-classproperty"]], "skbio.util.classproperty.__delete__": [[777, "skbio-util-classproperty-delete"]], "skbio.util.classproperty.__eq__": [[778, "skbio-util-classproperty-eq"]], "skbio.util.classproperty.__ge__": [[779, "skbio-util-classproperty-ge"]], "skbio.util.classproperty.__get__": [[780, "skbio-util-classproperty-get"]], "skbio.util.classproperty.__getstate__": [[781, "skbio-util-classproperty-getstate"]], "skbio.util.classproperty.__gt__": [[782, "skbio-util-classproperty-gt"]], "skbio.util.classproperty.__hash__": [[783, "skbio-util-classproperty-hash"]], "skbio.util.classproperty.__le__": [[784, "skbio-util-classproperty-le"]], "skbio.util.classproperty.__lt__": [[785, "skbio-util-classproperty-lt"]], "skbio.util.classproperty.__ne__": [[786, "skbio-util-classproperty-ne"]], "skbio.util.classproperty.__set__": [[787, "skbio-util-classproperty-set"]], "skbio.util.classproperty.__set_name__": [[788, "skbio-util-classproperty-set-name"]], "skbio.util.classproperty.__str__": [[789, "skbio-util-classproperty-str"]], "skbio.util.classproperty.deleter": [[790, "skbio-util-classproperty-deleter"]], "skbio.util.classproperty.getter": [[791, "skbio-util-classproperty-getter"]], "skbio.util.classproperty.setter": [[792, "skbio-util-classproperty-setter"]], "skbio.util.find_duplicates": [[793, "skbio-util-find-duplicates"]], "skbio.util.get_data_path": [[794, "skbio-util-get-data-path"]], "skbio.util.safe_md5": [[795, "skbio-util-safe-md5"]], "skbio.workflow.Workflow": [[796, "skbio-workflow-workflow"]], "skbio.workflow.Workflow.__call__": [[797, "skbio-workflow-workflow-call"]], "skbio.workflow.Workflow.__eq__": [[798, "skbio-workflow-workflow-eq"]], "skbio.workflow.Workflow.__ge__": [[799, "skbio-workflow-workflow-ge"]], "skbio.workflow.Workflow.__getstate__": [[800, "skbio-workflow-workflow-getstate"]], "skbio.workflow.Workflow.__gt__": [[801, "skbio-workflow-workflow-gt"]], "skbio.workflow.Workflow.__hash__": [[802, "skbio-workflow-workflow-hash"]], "skbio.workflow.Workflow.__le__": [[803, "skbio-workflow-workflow-le"]], "skbio.workflow.Workflow.__lt__": [[804, "skbio-workflow-workflow-lt"]], "skbio.workflow.Workflow.__ne__": [[805, "skbio-workflow-workflow-ne"]], "skbio.workflow.Workflow.__str__": [[806, "skbio-workflow-workflow-str"]], "skbio.workflow.Workflow.initialize_state": [[807, "skbio-workflow-workflow-initialize-state"]], "skbio.workflow.method": [[808, "skbio-workflow-method"]], "skbio.workflow.method.__call__": [[809, "skbio-workflow-method-call"]], "skbio.workflow.method.__eq__": [[810, "skbio-workflow-method-eq"]], "skbio.workflow.method.__ge__": [[811, "skbio-workflow-method-ge"]], "skbio.workflow.method.__getstate__": [[812, "skbio-workflow-method-getstate"]], "skbio.workflow.method.__gt__": [[813, "skbio-workflow-method-gt"]], "skbio.workflow.method.__hash__": [[814, "skbio-workflow-method-hash"]], "skbio.workflow.method.__le__": [[815, "skbio-workflow-method-le"]], "skbio.workflow.method.__lt__": [[816, "skbio-workflow-method-lt"]], "skbio.workflow.method.__ne__": [[817, "skbio-workflow-method-ne"]], "skbio.workflow.method.__str__": [[818, "skbio-workflow-method-str"]], "skbio.workflow.requires": [[819, "skbio-workflow-requires"]], "skbio.workflow.requires.__call__": [[820, "skbio-workflow-requires-call"]], "skbio.workflow.requires.__eq__": [[821, "skbio-workflow-requires-eq"]], "skbio.workflow.requires.__ge__": [[822, "skbio-workflow-requires-ge"]], "skbio.workflow.requires.__getstate__": [[823, "skbio-workflow-requires-getstate"]], "skbio.workflow.requires.__gt__": [[824, "skbio-workflow-requires-gt"]], "skbio.workflow.requires.__hash__": [[825, "skbio-workflow-requires-hash"]], "skbio.workflow.requires.__le__": [[826, "skbio-workflow-requires-le"]], "skbio.workflow.requires.__lt__": [[827, "skbio-workflow-requires-lt"]], "skbio.workflow.requires.__ne__": [[828, "skbio-workflow-requires-ne"]], "skbio.workflow.requires.__str__": [[829, "skbio-workflow-requires-str"]], "scikit-bio": [[830, "scikit-bio"]], "API Reference": [[830, "api-reference"]], "User Documentation": [[830, "user-documentation"]], "Developer Documentation": [[830, "developer-documentation"]], "File I/O (skbio.io)": [[831, "file-i-o-skbio-io"]], "Supported file formats": [[831, "supported-file-formats"]], "User functions": [[831, "user-functions"]], "User exceptions and warnings": [[831, "user-exceptions-and-warnings"]], "Introduction to I/O": [[831, "introduction-to-i-o"]], "What kinds of files scikit-bio can use": [[831, "what-kinds-of-files-scikit-bio-can-use"]], "Reading files into scikit-bio": [[831, "reading-files-into-scikit-bio"]], "Writing files from scikit-bio": [[831, "writing-files-from-scikit-bio"]], "Metadata (skbio.metadata)": [[832, "metadata-skbio-metadata"]], "Sequences (skbio.sequence)": [[833, "sequences-skbio-sequence"]], "Statistics (skbio.stats)": [[834, "statistics-skbio-stats"]], "Tree representations (skbio.tree)": [[835, "tree-representations-skbio-tree"]], "Phylogenetic Reconstruction": [[835, "phylogenetic-reconstruction"]], "API Stability": [[836, "api-stability"]], "Stable": [[836, "stable"]], "Experimental": [[836, "experimental"]], "Deprecated": [[836, "deprecated"]], "Utility functionality (skbio.util)": [[837, "utility-functionality-skbio-util"]], "Testing functionality": [[837, "testing-functionality"]], "Miscellaneous functionality": [[837, "miscellaneous-functionality"]], "Constructing workflows (skbio.workflow)": [[838, "constructing-workflows-skbio-workflow"]], "Decorators": [[838, "decorators"]]}, "indexentries": {"module": [[0, "module-skbio.alignment"], [3, "module-skbio.diversity"], [73, "module-skbio.diversity.alpha"], [106, "module-skbio.diversity.beta"], [133, "module-skbio.io.format.binary_dm"], [134, "module-skbio.io.format.blast6"], [135, "module-skbio.io.format.blast7"], [136, "module-skbio.io.format.clustal"], [137, "module-skbio.io.format.embl"], [138, "module-skbio.io.format.fasta"], [139, "module-skbio.io.format.fastq"], [140, "module-skbio.io.format.genbank"], [141, "module-skbio.io.format.gff3"], [142, "module-skbio.io.format.lsmat"], [143, "module-skbio.io.format.newick"], [144, "module-skbio.io.format.ordination"], [145, "module-skbio.io.format.phylip"], [146, "module-skbio.io.format.qseq"], [147, "module-skbio.io.format.stockholm"], [148, "module-skbio.io.format.taxdump"], [149, "module-skbio.io.registry"], [190, "module-skbio.io.util"], [483, "module-skbio.sequence.distance"], [486, "module-skbio.stats.composition"], [502, "module-skbio.stats.distance"], [562, "module-skbio.stats.evolve"], [564, "module-skbio.stats.gradient"], [654, "module-skbio.stats.ordination"], [679, "module-skbio.stats.power"], [831, "module-skbio.io"], [832, "module-skbio.metadata"], [833, "module-skbio.sequence"], [834, "module-skbio.stats"], [835, "module-skbio.tree"], [837, "module-skbio.util"], [838, "module-skbio.workflow"]], "skbio.alignment": [[0, "module-skbio.alignment"]], "skbio.diversity": [[3, "module-skbio.diversity"]], "open() (in module skbio.io.util)": [[4, "skbio.io.util.open"]], "open_file() (in module skbio.io.util)": [[5, "skbio.io.util.open_file"]], "open_files() (in module skbio.io.util)": [[6, "skbio.io.util.open_files"]], "alignmentstructure (class in skbio.alignment)": [[7, "skbio.alignment.AlignmentStructure"]], "__eq__() (skbio.alignment.alignmentstructure method)": [[8, "skbio.alignment.AlignmentStructure.__eq__"]], "__ge__() (skbio.alignment.alignmentstructure method)": [[9, "skbio.alignment.AlignmentStructure.__ge__"]], "__getitem__() (skbio.alignment.alignmentstructure method)": [[10, "skbio.alignment.AlignmentStructure.__getitem__"]], "__getstate__() (skbio.alignment.alignmentstructure method)": [[11, "skbio.alignment.AlignmentStructure.__getstate__"]], "__gt__() (skbio.alignment.alignmentstructure method)": [[12, "skbio.alignment.AlignmentStructure.__gt__"]], "__hash__() (skbio.alignment.alignmentstructure method)": [[13, "skbio.alignment.AlignmentStructure.__hash__"]], "__le__() (skbio.alignment.alignmentstructure method)": [[14, "skbio.alignment.AlignmentStructure.__le__"]], "__lt__() (skbio.alignment.alignmentstructure method)": [[15, "skbio.alignment.AlignmentStructure.__lt__"]], "__ne__() (skbio.alignment.alignmentstructure method)": [[16, "skbio.alignment.AlignmentStructure.__ne__"]], "__setstate__() (skbio.alignment.alignmentstructure method)": [[17, "skbio.alignment.AlignmentStructure.__setstate__"]], "__str__() (skbio.alignment.alignmentstructure method)": [[18, "skbio.alignment.AlignmentStructure.__str__"]], "is_zero_based() (skbio.alignment.alignmentstructure method)": [[19, "skbio.alignment.AlignmentStructure.is_zero_based"]], "set_zero_based() (skbio.alignment.alignmentstructure method)": [[20, "skbio.alignment.AlignmentStructure.set_zero_based"]], "stripedsmithwaterman (class in skbio.alignment)": [[21, "skbio.alignment.StripedSmithWaterman"]], "__call__() (skbio.alignment.stripedsmithwaterman method)": [[22, "skbio.alignment.StripedSmithWaterman.__call__"]], "__eq__() (skbio.alignment.stripedsmithwaterman method)": [[23, "skbio.alignment.StripedSmithWaterman.__eq__"]], "__ge__() (skbio.alignment.stripedsmithwaterman method)": [[24, "skbio.alignment.StripedSmithWaterman.__ge__"]], "__getstate__() (skbio.alignment.stripedsmithwaterman method)": [[25, "skbio.alignment.StripedSmithWaterman.__getstate__"]], "__gt__() (skbio.alignment.stripedsmithwaterman method)": [[26, "skbio.alignment.StripedSmithWaterman.__gt__"]], "__hash__() (skbio.alignment.stripedsmithwaterman method)": [[27, "skbio.alignment.StripedSmithWaterman.__hash__"]], "__le__() (skbio.alignment.stripedsmithwaterman method)": [[28, "skbio.alignment.StripedSmithWaterman.__le__"]], "__lt__() (skbio.alignment.stripedsmithwaterman method)": [[29, "skbio.alignment.StripedSmithWaterman.__lt__"]], "__ne__() (skbio.alignment.stripedsmithwaterman method)": [[30, "skbio.alignment.StripedSmithWaterman.__ne__"]], "__setstate__() (skbio.alignment.stripedsmithwaterman method)": [[31, "skbio.alignment.StripedSmithWaterman.__setstate__"]], "__str__() (skbio.alignment.stripedsmithwaterman method)": [[32, "skbio.alignment.StripedSmithWaterman.__str__"]], "tabularmsa (class in skbio.alignment)": [[33, "skbio.alignment.TabularMSA"]], "__bool__() (skbio.alignment.tabularmsa method)": [[34, "skbio.alignment.TabularMSA.__bool__"]], "__contains__() (skbio.alignment.tabularmsa method)": [[35, "skbio.alignment.TabularMSA.__contains__"]], "__copy__() (skbio.alignment.tabularmsa method)": [[36, "skbio.alignment.TabularMSA.__copy__"]], "__deepcopy__() (skbio.alignment.tabularmsa method)": [[37, "skbio.alignment.TabularMSA.__deepcopy__"]], "__eq__() (skbio.alignment.tabularmsa method)": [[38, "skbio.alignment.TabularMSA.__eq__"]], "__ge__() (skbio.alignment.tabularmsa method)": [[39, "skbio.alignment.TabularMSA.__ge__"]], "__getitem__() (skbio.alignment.tabularmsa method)": [[40, "skbio.alignment.TabularMSA.__getitem__"]], "__getstate__() (skbio.alignment.tabularmsa method)": [[41, "skbio.alignment.TabularMSA.__getstate__"]], "__gt__() (skbio.alignment.tabularmsa method)": [[42, "skbio.alignment.TabularMSA.__gt__"]], "__iter__() (skbio.alignment.tabularmsa method)": [[43, "skbio.alignment.TabularMSA.__iter__"]], "__le__() (skbio.alignment.tabularmsa method)": [[44, "skbio.alignment.TabularMSA.__le__"]], "__len__() (skbio.alignment.tabularmsa method)": [[45, "skbio.alignment.TabularMSA.__len__"]], "__lt__() (skbio.alignment.tabularmsa method)": [[46, "skbio.alignment.TabularMSA.__lt__"]], "__ne__() (skbio.alignment.tabularmsa method)": [[47, "skbio.alignment.TabularMSA.__ne__"]], "__reversed__() (skbio.alignment.tabularmsa method)": [[48, "skbio.alignment.TabularMSA.__reversed__"]], "__str__() (skbio.alignment.tabularmsa method)": [[49, "skbio.alignment.TabularMSA.__str__"]], "append() (skbio.alignment.tabularmsa method)": [[50, "skbio.alignment.TabularMSA.append"]], "consensus() (skbio.alignment.tabularmsa method)": [[51, "skbio.alignment.TabularMSA.consensus"]], "conservation() (skbio.alignment.tabularmsa method)": [[52, "skbio.alignment.TabularMSA.conservation"]], "extend() (skbio.alignment.tabularmsa method)": [[53, "skbio.alignment.TabularMSA.extend"]], "from_dict() (skbio.alignment.tabularmsa class method)": [[54, "skbio.alignment.TabularMSA.from_dict"]], "gap_frequencies() (skbio.alignment.tabularmsa method)": [[55, "skbio.alignment.TabularMSA.gap_frequencies"]], "has_metadata() (skbio.alignment.tabularmsa method)": [[56, "skbio.alignment.TabularMSA.has_metadata"]], "has_positional_metadata() (skbio.alignment.tabularmsa method)": [[57, "skbio.alignment.TabularMSA.has_positional_metadata"]], "iter_positions() (skbio.alignment.tabularmsa method)": [[58, "skbio.alignment.TabularMSA.iter_positions"]], "join() (skbio.alignment.tabularmsa method)": [[59, "skbio.alignment.TabularMSA.join"]], "read() (skbio.alignment.tabularmsa class method)": [[60, "skbio.alignment.TabularMSA.read"]], "reassign_index() (skbio.alignment.tabularmsa method)": [[61, "skbio.alignment.TabularMSA.reassign_index"]], "sort() (skbio.alignment.tabularmsa method)": [[62, "skbio.alignment.TabularMSA.sort"]], "to_dict() (skbio.alignment.tabularmsa method)": [[63, "skbio.alignment.TabularMSA.to_dict"]], "write() (skbio.alignment.tabularmsa method)": [[64, "skbio.alignment.TabularMSA.write"]], "global_pairwise_align() (in module skbio.alignment)": [[65, "skbio.alignment.global_pairwise_align"]], "global_pairwise_align_nucleotide() (in module skbio.alignment)": [[66, "skbio.alignment.global_pairwise_align_nucleotide"]], "global_pairwise_align_protein() (in module skbio.alignment)": [[67, "skbio.alignment.global_pairwise_align_protein"]], "local_pairwise_align() (in module skbio.alignment)": [[68, "skbio.alignment.local_pairwise_align"]], "local_pairwise_align_nucleotide() (in module skbio.alignment)": [[69, "skbio.alignment.local_pairwise_align_nucleotide"]], "local_pairwise_align_protein() (in module skbio.alignment)": [[70, "skbio.alignment.local_pairwise_align_protein"]], "local_pairwise_align_ssw() (in module skbio.alignment)": [[71, "skbio.alignment.local_pairwise_align_ssw"]], "make_identity_substitution_matrix() (in module skbio.alignment)": [[72, "skbio.alignment.make_identity_substitution_matrix"]], "skbio.diversity.alpha": [[73, "module-skbio.diversity.alpha"]], "ace() (in module skbio.diversity.alpha)": [[74, "skbio.diversity.alpha.ace"]], "berger_parker_d() (in module skbio.diversity.alpha)": [[75, "skbio.diversity.alpha.berger_parker_d"]], "brillouin_d() (in module skbio.diversity.alpha)": [[76, "skbio.diversity.alpha.brillouin_d"]], "chao1() (in module skbio.diversity.alpha)": [[77, "skbio.diversity.alpha.chao1"]], "chao1_ci() (in module skbio.diversity.alpha)": [[78, "skbio.diversity.alpha.chao1_ci"]], "dominance() (in module skbio.diversity.alpha)": [[79, "skbio.diversity.alpha.dominance"]], "doubles() (in module skbio.diversity.alpha)": [[80, "skbio.diversity.alpha.doubles"]], "enspie() (in module skbio.diversity.alpha)": [[81, "skbio.diversity.alpha.enspie"]], "esty_ci() (in module skbio.diversity.alpha)": [[82, "skbio.diversity.alpha.esty_ci"]], "faith_pd() (in module skbio.diversity.alpha)": [[83, "skbio.diversity.alpha.faith_pd"]], "fisher_alpha() (in module skbio.diversity.alpha)": [[84, "skbio.diversity.alpha.fisher_alpha"]], "gini_index() (in module skbio.diversity.alpha)": [[85, "skbio.diversity.alpha.gini_index"]], "goods_coverage() (in module skbio.diversity.alpha)": [[86, "skbio.diversity.alpha.goods_coverage"]], "heip_e() (in module skbio.diversity.alpha)": [[87, "skbio.diversity.alpha.heip_e"]], "kempton_taylor_q() (in module skbio.diversity.alpha)": [[88, "skbio.diversity.alpha.kempton_taylor_q"]], "lladser_ci() (in module skbio.diversity.alpha)": [[89, "skbio.diversity.alpha.lladser_ci"]], "lladser_pe() (in module skbio.diversity.alpha)": [[90, "skbio.diversity.alpha.lladser_pe"]], "margalef() (in module skbio.diversity.alpha)": [[91, "skbio.diversity.alpha.margalef"]], "mcintosh_d() (in module skbio.diversity.alpha)": [[92, "skbio.diversity.alpha.mcintosh_d"]], "mcintosh_e() (in module skbio.diversity.alpha)": [[93, "skbio.diversity.alpha.mcintosh_e"]], "menhinick() (in module skbio.diversity.alpha)": [[94, "skbio.diversity.alpha.menhinick"]], "michaelis_menten_fit() (in module skbio.diversity.alpha)": [[95, "skbio.diversity.alpha.michaelis_menten_fit"]], "observed_otus() (in module skbio.diversity.alpha)": [[96, "skbio.diversity.alpha.observed_otus"]], "osd() (in module skbio.diversity.alpha)": [[97, "skbio.diversity.alpha.osd"]], "pielou_e() (in module skbio.diversity.alpha)": [[98, "skbio.diversity.alpha.pielou_e"]], "robbins() (in module skbio.diversity.alpha)": [[99, "skbio.diversity.alpha.robbins"]], "shannon() (in module skbio.diversity.alpha)": [[100, "skbio.diversity.alpha.shannon"]], "simpson() (in module skbio.diversity.alpha)": [[101, "skbio.diversity.alpha.simpson"]], "simpson_e() (in module skbio.diversity.alpha)": [[102, "skbio.diversity.alpha.simpson_e"]], "singles() (in module skbio.diversity.alpha)": [[103, "skbio.diversity.alpha.singles"]], "strong() (in module skbio.diversity.alpha)": [[104, "skbio.diversity.alpha.strong"]], "alpha_diversity() (in module skbio.diversity)": [[105, "skbio.diversity.alpha_diversity"]], "skbio.diversity.beta": [[106, "module-skbio.diversity.beta"]], "unweighted_unifrac() (in module skbio.diversity.beta)": [[107, "skbio.diversity.beta.unweighted_unifrac"]], "weighted_unifrac() (in module skbio.diversity.beta)": [[108, "skbio.diversity.beta.weighted_unifrac"]], "beta_diversity() (in module skbio.diversity)": [[109, "skbio.diversity.beta_diversity"]], "block_beta_diversity() (in module skbio.diversity)": [[110, "skbio.diversity.block_beta_diversity"]], "get_alpha_diversity_metrics() (in module skbio.diversity)": [[111, "skbio.diversity.get_alpha_diversity_metrics"]], "get_beta_diversity_metrics() (in module skbio.diversity)": [[112, "skbio.diversity.get_beta_diversity_metrics"]], "partial_beta_diversity() (in module skbio.diversity)": [[113, "skbio.diversity.partial_beta_diversity"]], "argumentoverridewarning": [[114, "skbio.io.ArgumentOverrideWarning"]], "blast7formaterror": [[115, "skbio.io.BLAST7FormatError"]], "clustalformaterror": [[116, "skbio.io.ClustalFormatError"]], "emblformaterror": [[117, "skbio.io.EMBLFormatError"]], "fastaformaterror": [[118, "skbio.io.FASTAFormatError"]], "fastqformaterror": [[119, "skbio.io.FASTQFormatError"]], "fileformaterror": [[120, "skbio.io.FileFormatError"]], "formatidentificationwarning": [[121, "skbio.io.FormatIdentificationWarning"]], "gff3formaterror": [[122, "skbio.io.GFF3FormatError"]], "genbankformaterror": [[123, "skbio.io.GenBankFormatError"]], "iosourceerror": [[124, "skbio.io.IOSourceError"]], "lsmatformaterror": [[125, "skbio.io.LSMatFormatError"]], "newickformaterror": [[126, "skbio.io.NewickFormatError"]], "ordinationformaterror": [[127, "skbio.io.OrdinationFormatError"]], "phylipformaterror": [[128, "skbio.io.PhylipFormatError"]], "qseqformaterror": [[129, "skbio.io.QSeqFormatError"]], "qualformaterror": [[130, "skbio.io.QUALFormatError"]], "stockholmformaterror": [[131, "skbio.io.StockholmFormatError"]], "unrecognizedformaterror": [[132, "skbio.io.UnrecognizedFormatError"]], "skbio.io.format.binary_dm": [[133, "module-skbio.io.format.binary_dm"]], "skbio.io.format.blast6": [[134, "module-skbio.io.format.blast6"]], "skbio.io.format.blast7": [[135, "module-skbio.io.format.blast7"]], "skbio.io.format.clustal": [[136, "module-skbio.io.format.clustal"]], "skbio.io.format.embl": [[137, "module-skbio.io.format.embl"]], "skbio.io.format.fasta": [[138, "module-skbio.io.format.fasta"]], "skbio.io.format.fastq": [[139, "module-skbio.io.format.fastq"]], "skbio.io.format.genbank": [[140, "module-skbio.io.format.genbank"]], "skbio.io.format.gff3": [[141, "module-skbio.io.format.gff3"]], "skbio.io.format.lsmat": [[142, "module-skbio.io.format.lsmat"]], "skbio.io.format.newick": [[143, "module-skbio.io.format.newick"]], "skbio.io.format.ordination": [[144, "module-skbio.io.format.ordination"]], "skbio.io.format.phylip": [[145, "module-skbio.io.format.phylip"]], "skbio.io.format.qseq": [[146, "module-skbio.io.format.qseq"]], "skbio.io.format.stockholm": [[147, "module-skbio.io.format.stockholm"]], "skbio.io.format.taxdump": [[148, "module-skbio.io.format.taxdump"]], "skbio.io.registry": [[149, "module-skbio.io.registry"]], "duplicateregistrationerror": [[150, "skbio.io.registry.DuplicateRegistrationError"]], "format (class in skbio.io.registry)": [[151, "skbio.io.registry.Format"]], "__eq__() (skbio.io.registry.format method)": [[152, "skbio.io.registry.Format.__eq__"]], "__ge__() (skbio.io.registry.format method)": [[153, "skbio.io.registry.Format.__ge__"]], "__getstate__() (skbio.io.registry.format method)": [[154, "skbio.io.registry.Format.__getstate__"]], "__gt__() (skbio.io.registry.format method)": [[155, "skbio.io.registry.Format.__gt__"]], "__hash__() (skbio.io.registry.format method)": [[156, "skbio.io.registry.Format.__hash__"]], "__le__() (skbio.io.registry.format method)": [[157, "skbio.io.registry.Format.__le__"]], "__lt__() (skbio.io.registry.format method)": [[158, "skbio.io.registry.Format.__lt__"]], "__ne__() (skbio.io.registry.format method)": [[159, "skbio.io.registry.Format.__ne__"]], "__str__() (skbio.io.registry.format method)": [[160, "skbio.io.registry.Format.__str__"]], "reader() (skbio.io.registry.format method)": [[161, "skbio.io.registry.Format.reader"]], "sniffer() (skbio.io.registry.format method)": [[162, "skbio.io.registry.Format.sniffer"]], "writer() (skbio.io.registry.format method)": [[163, "skbio.io.registry.Format.writer"]], "ioregistry (class in skbio.io.registry)": [[164, "skbio.io.registry.IORegistry"]], "__eq__() (skbio.io.registry.ioregistry method)": [[165, "skbio.io.registry.IORegistry.__eq__"]], "__ge__() (skbio.io.registry.ioregistry method)": [[166, "skbio.io.registry.IORegistry.__ge__"]], "__getstate__() (skbio.io.registry.ioregistry method)": [[167, "skbio.io.registry.IORegistry.__getstate__"]], "__gt__() (skbio.io.registry.ioregistry method)": [[168, "skbio.io.registry.IORegistry.__gt__"]], "__hash__() (skbio.io.registry.ioregistry method)": [[169, "skbio.io.registry.IORegistry.__hash__"]], "__le__() (skbio.io.registry.ioregistry method)": [[170, "skbio.io.registry.IORegistry.__le__"]], "__lt__() (skbio.io.registry.ioregistry method)": [[171, "skbio.io.registry.IORegistry.__lt__"]], "__ne__() (skbio.io.registry.ioregistry method)": [[172, "skbio.io.registry.IORegistry.__ne__"]], "__str__() (skbio.io.registry.ioregistry method)": [[173, "skbio.io.registry.IORegistry.__str__"]], "add_format() (skbio.io.registry.ioregistry method)": [[174, "skbio.io.registry.IORegistry.add_format"]], "create_format() (skbio.io.registry.ioregistry method)": [[175, "skbio.io.registry.IORegistry.create_format"]], "get_reader() (skbio.io.registry.ioregistry method)": [[176, "skbio.io.registry.IORegistry.get_reader"]], "get_sniffer() (skbio.io.registry.ioregistry method)": [[177, "skbio.io.registry.IORegistry.get_sniffer"]], "get_writer() (skbio.io.registry.ioregistry method)": [[178, "skbio.io.registry.IORegistry.get_writer"]], "list_read_formats() (skbio.io.registry.ioregistry method)": [[179, "skbio.io.registry.IORegistry.list_read_formats"]], "list_write_formats() (skbio.io.registry.ioregistry method)": [[180, "skbio.io.registry.IORegistry.list_write_formats"]], "monkey_patch() (skbio.io.registry.ioregistry method)": [[181, "skbio.io.registry.IORegistry.monkey_patch"]], "read() (skbio.io.registry.ioregistry method)": [[182, "skbio.io.registry.IORegistry.read"]], "sniff() (skbio.io.registry.ioregistry method)": [[183, "skbio.io.registry.IORegistry.sniff"]], "write() (skbio.io.registry.ioregistry method)": [[184, "skbio.io.registry.IORegistry.write"]], "invalidregistrationerror": [[185, "skbio.io.registry.InvalidRegistrationError"]], "create_format() (in module skbio.io.registry)": [[186, "skbio.io.registry.create_format"]], "read() (in module skbio.io.registry)": [[187, "skbio.io.registry.read"]], "sniff() (in module skbio.io.registry)": [[188, "skbio.io.registry.sniff"]], "write() (in module skbio.io.registry)": [[189, "skbio.io.registry.write"]], "skbio.io.util": [[190, "module-skbio.io.util"]], "interval (class in skbio.metadata)": [[191, "skbio.metadata.Interval"]], "__eq__() (skbio.metadata.interval method)": [[192, "skbio.metadata.Interval.__eq__"]], "__ge__() (skbio.metadata.interval method)": [[193, "skbio.metadata.Interval.__ge__"]], "__getstate__() (skbio.metadata.interval method)": [[194, "skbio.metadata.Interval.__getstate__"]], "__gt__() (skbio.metadata.interval method)": [[195, "skbio.metadata.Interval.__gt__"]], "__le__() (skbio.metadata.interval method)": [[196, "skbio.metadata.Interval.__le__"]], "__lt__() (skbio.metadata.interval method)": [[197, "skbio.metadata.Interval.__lt__"]], "__ne__() (skbio.metadata.interval method)": [[198, "skbio.metadata.Interval.__ne__"]], "__str__() (skbio.metadata.interval method)": [[199, "skbio.metadata.Interval.__str__"]], "drop() (skbio.metadata.interval method)": [[200, "skbio.metadata.Interval.drop"]], "intervalmetadata (class in skbio.metadata)": [[201, "skbio.metadata.IntervalMetadata"]], "__copy__() (skbio.metadata.intervalmetadata method)": [[202, "skbio.metadata.IntervalMetadata.__copy__"]], "__deepcopy__() (skbio.metadata.intervalmetadata method)": [[203, "skbio.metadata.IntervalMetadata.__deepcopy__"]], "__eq__() (skbio.metadata.intervalmetadata method)": [[204, "skbio.metadata.IntervalMetadata.__eq__"]], "__ge__() (skbio.metadata.intervalmetadata method)": [[205, "skbio.metadata.IntervalMetadata.__ge__"]], "__getstate__() (skbio.metadata.intervalmetadata method)": [[206, "skbio.metadata.IntervalMetadata.__getstate__"]], "__gt__() (skbio.metadata.intervalmetadata method)": [[207, "skbio.metadata.IntervalMetadata.__gt__"]], "__le__() (skbio.metadata.intervalmetadata method)": [[208, "skbio.metadata.IntervalMetadata.__le__"]], "__lt__() (skbio.metadata.intervalmetadata method)": [[209, "skbio.metadata.IntervalMetadata.__lt__"]], "__ne__() (skbio.metadata.intervalmetadata method)": [[210, "skbio.metadata.IntervalMetadata.__ne__"]], "__str__() (skbio.metadata.intervalmetadata method)": [[211, "skbio.metadata.IntervalMetadata.__str__"]], "add() (skbio.metadata.intervalmetadata method)": [[212, "skbio.metadata.IntervalMetadata.add"]], "concat() (skbio.metadata.intervalmetadata class method)": [[213, "skbio.metadata.IntervalMetadata.concat"]], "drop() (skbio.metadata.intervalmetadata method)": [[214, "skbio.metadata.IntervalMetadata.drop"]], "merge() (skbio.metadata.intervalmetadata method)": [[215, "skbio.metadata.IntervalMetadata.merge"]], "query() (skbio.metadata.intervalmetadata method)": [[216, "skbio.metadata.IntervalMetadata.query"]], "read() (skbio.metadata.intervalmetadata class method)": [[217, "skbio.metadata.IntervalMetadata.read"]], "sort() (skbio.metadata.intervalmetadata method)": [[218, "skbio.metadata.IntervalMetadata.sort"]], "write() (skbio.metadata.intervalmetadata method)": [[219, "skbio.metadata.IntervalMetadata.write"]], "dna (class in skbio.sequence)": [[220, "skbio.sequence.DNA"]], "__bool__() (skbio.sequence.dna method)": [[221, "skbio.sequence.DNA.__bool__"]], "__contains__() (skbio.sequence.dna method)": [[222, "skbio.sequence.DNA.__contains__"]], "__copy__() (skbio.sequence.dna method)": [[223, "skbio.sequence.DNA.__copy__"]], "__deepcopy__() (skbio.sequence.dna method)": [[224, "skbio.sequence.DNA.__deepcopy__"]], "__eq__() (skbio.sequence.dna method)": [[225, "skbio.sequence.DNA.__eq__"]], "__ge__() (skbio.sequence.dna method)": [[226, "skbio.sequence.DNA.__ge__"]], "__getitem__() (skbio.sequence.dna method)": [[227, "skbio.sequence.DNA.__getitem__"]], "__getstate__() (skbio.sequence.dna method)": [[228, "skbio.sequence.DNA.__getstate__"]], "__gt__() (skbio.sequence.dna method)": [[229, "skbio.sequence.DNA.__gt__"]], "__iter__() (skbio.sequence.dna method)": [[230, "skbio.sequence.DNA.__iter__"]], "__le__() (skbio.sequence.dna method)": [[231, "skbio.sequence.DNA.__le__"]], "__len__() (skbio.sequence.dna method)": [[232, "skbio.sequence.DNA.__len__"]], "__lt__() (skbio.sequence.dna method)": [[233, "skbio.sequence.DNA.__lt__"]], "__ne__() (skbio.sequence.dna method)": [[234, "skbio.sequence.DNA.__ne__"]], "__reversed__() (skbio.sequence.dna method)": [[235, "skbio.sequence.DNA.__reversed__"]], "__str__() (skbio.sequence.dna method)": [[236, "skbio.sequence.DNA.__str__"]], "complement() (skbio.sequence.dna method)": [[237, "skbio.sequence.DNA.complement"]], "concat() (skbio.sequence.dna class method)": [[238, "skbio.sequence.DNA.concat"]], "count() (skbio.sequence.dna method)": [[239, "skbio.sequence.DNA.count"]], "definites() (skbio.sequence.dna method)": [[240, "skbio.sequence.DNA.definites"]], "degap() (skbio.sequence.dna method)": [[241, "skbio.sequence.DNA.degap"]], "degenerates() (skbio.sequence.dna method)": [[242, "skbio.sequence.DNA.degenerates"]], "distance() (skbio.sequence.dna method)": [[243, "skbio.sequence.DNA.distance"]], "expand_degenerates() (skbio.sequence.dna method)": [[244, "skbio.sequence.DNA.expand_degenerates"]], "find_motifs() (skbio.sequence.dna method)": [[245, "skbio.sequence.DNA.find_motifs"]], "find_with_regex() (skbio.sequence.dna method)": [[246, "skbio.sequence.DNA.find_with_regex"]], "frequencies() (skbio.sequence.dna method)": [[247, "skbio.sequence.DNA.frequencies"]], "gaps() (skbio.sequence.dna method)": [[248, "skbio.sequence.DNA.gaps"]], "gc_content() (skbio.sequence.dna method)": [[249, "skbio.sequence.DNA.gc_content"]], "gc_frequency() (skbio.sequence.dna method)": [[250, "skbio.sequence.DNA.gc_frequency"]], "has_definites() (skbio.sequence.dna method)": [[251, "skbio.sequence.DNA.has_definites"]], "has_degenerates() (skbio.sequence.dna method)": [[252, "skbio.sequence.DNA.has_degenerates"]], "has_gaps() (skbio.sequence.dna method)": [[253, "skbio.sequence.DNA.has_gaps"]], "has_interval_metadata() (skbio.sequence.dna method)": [[254, "skbio.sequence.DNA.has_interval_metadata"]], "has_metadata() (skbio.sequence.dna method)": [[255, "skbio.sequence.DNA.has_metadata"]], "has_nondegenerates() (skbio.sequence.dna method)": [[256, "skbio.sequence.DNA.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.dna method)": [[257, "skbio.sequence.DNA.has_positional_metadata"]], "index() (skbio.sequence.dna method)": [[258, "skbio.sequence.DNA.index"]], "is_reverse_complement() (skbio.sequence.dna method)": [[259, "skbio.sequence.DNA.is_reverse_complement"]], "iter_contiguous() (skbio.sequence.dna method)": [[260, "skbio.sequence.DNA.iter_contiguous"]], "iter_kmers() (skbio.sequence.dna method)": [[261, "skbio.sequence.DNA.iter_kmers"]], "kmer_frequencies() (skbio.sequence.dna method)": [[262, "skbio.sequence.DNA.kmer_frequencies"]], "lowercase() (skbio.sequence.dna method)": [[263, "skbio.sequence.DNA.lowercase"]], "match_frequency() (skbio.sequence.dna method)": [[264, "skbio.sequence.DNA.match_frequency"]], "matches() (skbio.sequence.dna method)": [[265, "skbio.sequence.DNA.matches"]], "mismatch_frequency() (skbio.sequence.dna method)": [[266, "skbio.sequence.DNA.mismatch_frequency"]], "mismatches() (skbio.sequence.dna method)": [[267, "skbio.sequence.DNA.mismatches"]], "nondegenerates() (skbio.sequence.dna method)": [[268, "skbio.sequence.DNA.nondegenerates"]], "read() (skbio.sequence.dna class method)": [[269, "skbio.sequence.DNA.read"]], "replace() (skbio.sequence.dna method)": [[270, "skbio.sequence.DNA.replace"]], "reverse_complement() (skbio.sequence.dna method)": [[271, "skbio.sequence.DNA.reverse_complement"]], "to_regex() (skbio.sequence.dna method)": [[272, "skbio.sequence.DNA.to_regex"]], "transcribe() (skbio.sequence.dna method)": [[273, "skbio.sequence.DNA.transcribe"]], "translate() (skbio.sequence.dna method)": [[274, "skbio.sequence.DNA.translate"]], "translate_six_frames() (skbio.sequence.dna method)": [[275, "skbio.sequence.DNA.translate_six_frames"]], "write() (skbio.sequence.dna method)": [[276, "skbio.sequence.DNA.write"]], "geneticcode (class in skbio.sequence)": [[277, "skbio.sequence.GeneticCode"]], "__eq__() (skbio.sequence.geneticcode method)": [[278, "skbio.sequence.GeneticCode.__eq__"]], "__ge__() (skbio.sequence.geneticcode method)": [[279, "skbio.sequence.GeneticCode.__ge__"]], "__getstate__() (skbio.sequence.geneticcode method)": [[280, "skbio.sequence.GeneticCode.__getstate__"]], "__gt__() (skbio.sequence.geneticcode method)": [[281, "skbio.sequence.GeneticCode.__gt__"]], "__le__() (skbio.sequence.geneticcode method)": [[282, "skbio.sequence.GeneticCode.__le__"]], "__lt__() (skbio.sequence.geneticcode method)": [[283, "skbio.sequence.GeneticCode.__lt__"]], "__ne__() (skbio.sequence.geneticcode method)": [[284, "skbio.sequence.GeneticCode.__ne__"]], "__str__() (skbio.sequence.geneticcode method)": [[285, "skbio.sequence.GeneticCode.__str__"]], "from_ncbi() (skbio.sequence.geneticcode class method)": [[286, "skbio.sequence.GeneticCode.from_ncbi"]], "translate() (skbio.sequence.geneticcode method)": [[287, "skbio.sequence.GeneticCode.translate"]], "translate_six_frames() (skbio.sequence.geneticcode method)": [[288, "skbio.sequence.GeneticCode.translate_six_frames"]], "grammaredsequence (class in skbio.sequence)": [[289, "skbio.sequence.GrammaredSequence"]], "__bool__() (skbio.sequence.grammaredsequence method)": [[290, "skbio.sequence.GrammaredSequence.__bool__"]], "__contains__() (skbio.sequence.grammaredsequence method)": [[291, "skbio.sequence.GrammaredSequence.__contains__"]], "__copy__() (skbio.sequence.grammaredsequence method)": [[292, "skbio.sequence.GrammaredSequence.__copy__"]], "__deepcopy__() (skbio.sequence.grammaredsequence method)": [[293, "skbio.sequence.GrammaredSequence.__deepcopy__"]], "__eq__() (skbio.sequence.grammaredsequence method)": [[294, "skbio.sequence.GrammaredSequence.__eq__"]], "__ge__() (skbio.sequence.grammaredsequence method)": [[295, "skbio.sequence.GrammaredSequence.__ge__"]], "__getitem__() (skbio.sequence.grammaredsequence method)": [[296, "skbio.sequence.GrammaredSequence.__getitem__"]], "__getstate__() (skbio.sequence.grammaredsequence method)": [[297, "skbio.sequence.GrammaredSequence.__getstate__"]], "__gt__() (skbio.sequence.grammaredsequence method)": [[298, "skbio.sequence.GrammaredSequence.__gt__"]], "__iter__() (skbio.sequence.grammaredsequence method)": [[299, "skbio.sequence.GrammaredSequence.__iter__"]], "__le__() (skbio.sequence.grammaredsequence method)": [[300, "skbio.sequence.GrammaredSequence.__le__"]], "__len__() (skbio.sequence.grammaredsequence method)": [[301, "skbio.sequence.GrammaredSequence.__len__"]], "__lt__() (skbio.sequence.grammaredsequence method)": [[302, "skbio.sequence.GrammaredSequence.__lt__"]], "__ne__() (skbio.sequence.grammaredsequence method)": [[303, "skbio.sequence.GrammaredSequence.__ne__"]], "__reversed__() (skbio.sequence.grammaredsequence method)": [[304, "skbio.sequence.GrammaredSequence.__reversed__"]], "__str__() (skbio.sequence.grammaredsequence method)": [[305, "skbio.sequence.GrammaredSequence.__str__"]], "concat() (skbio.sequence.grammaredsequence class method)": [[306, "skbio.sequence.GrammaredSequence.concat"]], "count() (skbio.sequence.grammaredsequence method)": [[307, "skbio.sequence.GrammaredSequence.count"]], "definites() (skbio.sequence.grammaredsequence method)": [[308, "skbio.sequence.GrammaredSequence.definites"]], "degap() (skbio.sequence.grammaredsequence method)": [[309, "skbio.sequence.GrammaredSequence.degap"]], "degenerates() (skbio.sequence.grammaredsequence method)": [[310, "skbio.sequence.GrammaredSequence.degenerates"]], "distance() (skbio.sequence.grammaredsequence method)": [[311, "skbio.sequence.GrammaredSequence.distance"]], "expand_degenerates() (skbio.sequence.grammaredsequence method)": [[312, "skbio.sequence.GrammaredSequence.expand_degenerates"]], "find_motifs() (skbio.sequence.grammaredsequence method)": [[313, "skbio.sequence.GrammaredSequence.find_motifs"]], "find_with_regex() (skbio.sequence.grammaredsequence method)": [[314, "skbio.sequence.GrammaredSequence.find_with_regex"]], "frequencies() (skbio.sequence.grammaredsequence method)": [[315, "skbio.sequence.GrammaredSequence.frequencies"]], "gaps() (skbio.sequence.grammaredsequence method)": [[316, "skbio.sequence.GrammaredSequence.gaps"]], "has_definites() (skbio.sequence.grammaredsequence method)": [[317, "skbio.sequence.GrammaredSequence.has_definites"]], "has_degenerates() (skbio.sequence.grammaredsequence method)": [[318, "skbio.sequence.GrammaredSequence.has_degenerates"]], "has_gaps() (skbio.sequence.grammaredsequence method)": [[319, "skbio.sequence.GrammaredSequence.has_gaps"]], "has_interval_metadata() (skbio.sequence.grammaredsequence method)": [[320, "skbio.sequence.GrammaredSequence.has_interval_metadata"]], "has_metadata() (skbio.sequence.grammaredsequence method)": [[321, "skbio.sequence.GrammaredSequence.has_metadata"]], "has_nondegenerates() (skbio.sequence.grammaredsequence method)": [[322, "skbio.sequence.GrammaredSequence.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.grammaredsequence method)": [[323, "skbio.sequence.GrammaredSequence.has_positional_metadata"]], "index() (skbio.sequence.grammaredsequence method)": [[324, "skbio.sequence.GrammaredSequence.index"]], "iter_contiguous() (skbio.sequence.grammaredsequence method)": [[325, "skbio.sequence.GrammaredSequence.iter_contiguous"]], "iter_kmers() (skbio.sequence.grammaredsequence method)": [[326, "skbio.sequence.GrammaredSequence.iter_kmers"]], "kmer_frequencies() (skbio.sequence.grammaredsequence method)": [[327, "skbio.sequence.GrammaredSequence.kmer_frequencies"]], "lowercase() (skbio.sequence.grammaredsequence method)": [[328, "skbio.sequence.GrammaredSequence.lowercase"]], "match_frequency() (skbio.sequence.grammaredsequence method)": [[329, "skbio.sequence.GrammaredSequence.match_frequency"]], "matches() (skbio.sequence.grammaredsequence method)": [[330, "skbio.sequence.GrammaredSequence.matches"]], "mismatch_frequency() (skbio.sequence.grammaredsequence method)": [[331, "skbio.sequence.GrammaredSequence.mismatch_frequency"]], "mismatches() (skbio.sequence.grammaredsequence method)": [[332, "skbio.sequence.GrammaredSequence.mismatches"]], "nondegenerates() (skbio.sequence.grammaredsequence method)": [[333, "skbio.sequence.GrammaredSequence.nondegenerates"]], "read() (skbio.sequence.grammaredsequence class method)": [[334, "skbio.sequence.GrammaredSequence.read"]], "replace() (skbio.sequence.grammaredsequence method)": [[335, "skbio.sequence.GrammaredSequence.replace"]], "to_regex() (skbio.sequence.grammaredsequence method)": [[336, "skbio.sequence.GrammaredSequence.to_regex"]], "write() (skbio.sequence.grammaredsequence method)": [[337, "skbio.sequence.GrammaredSequence.write"]], "protein (class in skbio.sequence)": [[338, "skbio.sequence.Protein"]], "__bool__() (skbio.sequence.protein method)": [[339, "skbio.sequence.Protein.__bool__"]], "__contains__() (skbio.sequence.protein method)": [[340, "skbio.sequence.Protein.__contains__"]], "__copy__() (skbio.sequence.protein method)": [[341, "skbio.sequence.Protein.__copy__"]], "__deepcopy__() (skbio.sequence.protein method)": [[342, "skbio.sequence.Protein.__deepcopy__"]], "__eq__() (skbio.sequence.protein method)": [[343, "skbio.sequence.Protein.__eq__"]], "__ge__() (skbio.sequence.protein method)": [[344, "skbio.sequence.Protein.__ge__"]], "__getitem__() (skbio.sequence.protein method)": [[345, "skbio.sequence.Protein.__getitem__"]], "__getstate__() (skbio.sequence.protein method)": [[346, "skbio.sequence.Protein.__getstate__"]], "__gt__() (skbio.sequence.protein method)": [[347, "skbio.sequence.Protein.__gt__"]], "__iter__() (skbio.sequence.protein method)": [[348, "skbio.sequence.Protein.__iter__"]], "__le__() (skbio.sequence.protein method)": [[349, "skbio.sequence.Protein.__le__"]], "__len__() (skbio.sequence.protein method)": [[350, "skbio.sequence.Protein.__len__"]], "__lt__() (skbio.sequence.protein method)": [[351, "skbio.sequence.Protein.__lt__"]], "__ne__() (skbio.sequence.protein method)": [[352, "skbio.sequence.Protein.__ne__"]], "__reversed__() (skbio.sequence.protein method)": [[353, "skbio.sequence.Protein.__reversed__"]], "__str__() (skbio.sequence.protein method)": [[354, "skbio.sequence.Protein.__str__"]], "concat() (skbio.sequence.protein class method)": [[355, "skbio.sequence.Protein.concat"]], "count() (skbio.sequence.protein method)": [[356, "skbio.sequence.Protein.count"]], "definites() (skbio.sequence.protein method)": [[357, "skbio.sequence.Protein.definites"]], "degap() (skbio.sequence.protein method)": [[358, "skbio.sequence.Protein.degap"]], "degenerates() (skbio.sequence.protein method)": [[359, "skbio.sequence.Protein.degenerates"]], "distance() (skbio.sequence.protein method)": [[360, "skbio.sequence.Protein.distance"]], "expand_degenerates() (skbio.sequence.protein method)": [[361, "skbio.sequence.Protein.expand_degenerates"]], "find_motifs() (skbio.sequence.protein method)": [[362, "skbio.sequence.Protein.find_motifs"]], "find_with_regex() (skbio.sequence.protein method)": [[363, "skbio.sequence.Protein.find_with_regex"]], "frequencies() (skbio.sequence.protein method)": [[364, "skbio.sequence.Protein.frequencies"]], "gaps() (skbio.sequence.protein method)": [[365, "skbio.sequence.Protein.gaps"]], "has_definites() (skbio.sequence.protein method)": [[366, "skbio.sequence.Protein.has_definites"]], "has_degenerates() (skbio.sequence.protein method)": [[367, "skbio.sequence.Protein.has_degenerates"]], "has_gaps() (skbio.sequence.protein method)": [[368, "skbio.sequence.Protein.has_gaps"]], "has_interval_metadata() (skbio.sequence.protein method)": [[369, "skbio.sequence.Protein.has_interval_metadata"]], "has_metadata() (skbio.sequence.protein method)": [[370, "skbio.sequence.Protein.has_metadata"]], "has_nondegenerates() (skbio.sequence.protein method)": [[371, "skbio.sequence.Protein.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.protein method)": [[372, "skbio.sequence.Protein.has_positional_metadata"]], "has_stops() (skbio.sequence.protein method)": [[373, "skbio.sequence.Protein.has_stops"]], "index() (skbio.sequence.protein method)": [[374, "skbio.sequence.Protein.index"]], "iter_contiguous() (skbio.sequence.protein method)": [[375, "skbio.sequence.Protein.iter_contiguous"]], "iter_kmers() (skbio.sequence.protein method)": [[376, "skbio.sequence.Protein.iter_kmers"]], "kmer_frequencies() (skbio.sequence.protein method)": [[377, "skbio.sequence.Protein.kmer_frequencies"]], "lowercase() (skbio.sequence.protein method)": [[378, "skbio.sequence.Protein.lowercase"]], "match_frequency() (skbio.sequence.protein method)": [[379, "skbio.sequence.Protein.match_frequency"]], "matches() (skbio.sequence.protein method)": [[380, "skbio.sequence.Protein.matches"]], "mismatch_frequency() (skbio.sequence.protein method)": [[381, "skbio.sequence.Protein.mismatch_frequency"]], "mismatches() (skbio.sequence.protein method)": [[382, "skbio.sequence.Protein.mismatches"]], "nondegenerates() (skbio.sequence.protein method)": [[383, "skbio.sequence.Protein.nondegenerates"]], "read() (skbio.sequence.protein class method)": [[384, "skbio.sequence.Protein.read"]], "replace() (skbio.sequence.protein method)": [[385, "skbio.sequence.Protein.replace"]], "stops() (skbio.sequence.protein method)": [[386, "skbio.sequence.Protein.stops"]], "to_regex() (skbio.sequence.protein method)": [[387, "skbio.sequence.Protein.to_regex"]], "write() (skbio.sequence.protein method)": [[388, "skbio.sequence.Protein.write"]], "rna (class in skbio.sequence)": [[389, "skbio.sequence.RNA"]], "__bool__() (skbio.sequence.rna method)": [[390, "skbio.sequence.RNA.__bool__"]], "__contains__() (skbio.sequence.rna method)": [[391, "skbio.sequence.RNA.__contains__"]], "__copy__() (skbio.sequence.rna method)": [[392, "skbio.sequence.RNA.__copy__"]], "__deepcopy__() (skbio.sequence.rna method)": [[393, "skbio.sequence.RNA.__deepcopy__"]], "__eq__() (skbio.sequence.rna method)": [[394, "skbio.sequence.RNA.__eq__"]], "__ge__() (skbio.sequence.rna method)": [[395, "skbio.sequence.RNA.__ge__"]], "__getitem__() (skbio.sequence.rna method)": [[396, "skbio.sequence.RNA.__getitem__"]], "__getstate__() (skbio.sequence.rna method)": [[397, "skbio.sequence.RNA.__getstate__"]], "__gt__() (skbio.sequence.rna method)": [[398, "skbio.sequence.RNA.__gt__"]], "__iter__() (skbio.sequence.rna method)": [[399, "skbio.sequence.RNA.__iter__"]], "__le__() (skbio.sequence.rna method)": [[400, "skbio.sequence.RNA.__le__"]], "__len__() (skbio.sequence.rna method)": [[401, "skbio.sequence.RNA.__len__"]], "__lt__() (skbio.sequence.rna method)": [[402, "skbio.sequence.RNA.__lt__"]], "__ne__() (skbio.sequence.rna method)": [[403, "skbio.sequence.RNA.__ne__"]], "__reversed__() (skbio.sequence.rna method)": [[404, "skbio.sequence.RNA.__reversed__"]], "__str__() (skbio.sequence.rna method)": [[405, "skbio.sequence.RNA.__str__"]], "complement() (skbio.sequence.rna method)": [[406, "skbio.sequence.RNA.complement"]], "concat() (skbio.sequence.rna class method)": [[407, "skbio.sequence.RNA.concat"]], "count() (skbio.sequence.rna method)": [[408, "skbio.sequence.RNA.count"]], "definites() (skbio.sequence.rna method)": [[409, "skbio.sequence.RNA.definites"]], "degap() (skbio.sequence.rna method)": [[410, "skbio.sequence.RNA.degap"]], "degenerates() (skbio.sequence.rna method)": [[411, "skbio.sequence.RNA.degenerates"]], "distance() (skbio.sequence.rna method)": [[412, "skbio.sequence.RNA.distance"]], "expand_degenerates() (skbio.sequence.rna method)": [[413, "skbio.sequence.RNA.expand_degenerates"]], "find_motifs() (skbio.sequence.rna method)": [[414, "skbio.sequence.RNA.find_motifs"]], "find_with_regex() (skbio.sequence.rna method)": [[415, "skbio.sequence.RNA.find_with_regex"]], "frequencies() (skbio.sequence.rna method)": [[416, "skbio.sequence.RNA.frequencies"]], "gaps() (skbio.sequence.rna method)": [[417, "skbio.sequence.RNA.gaps"]], "gc_content() (skbio.sequence.rna method)": [[418, "skbio.sequence.RNA.gc_content"]], "gc_frequency() (skbio.sequence.rna method)": [[419, "skbio.sequence.RNA.gc_frequency"]], "has_definites() (skbio.sequence.rna method)": [[420, "skbio.sequence.RNA.has_definites"]], "has_degenerates() (skbio.sequence.rna method)": [[421, "skbio.sequence.RNA.has_degenerates"]], "has_gaps() (skbio.sequence.rna method)": [[422, "skbio.sequence.RNA.has_gaps"]], "has_interval_metadata() (skbio.sequence.rna method)": [[423, "skbio.sequence.RNA.has_interval_metadata"]], "has_metadata() (skbio.sequence.rna method)": [[424, "skbio.sequence.RNA.has_metadata"]], "has_nondegenerates() (skbio.sequence.rna method)": [[425, "skbio.sequence.RNA.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.rna method)": [[426, "skbio.sequence.RNA.has_positional_metadata"]], "index() (skbio.sequence.rna method)": [[427, "skbio.sequence.RNA.index"]], "is_reverse_complement() (skbio.sequence.rna method)": [[428, "skbio.sequence.RNA.is_reverse_complement"]], "iter_contiguous() (skbio.sequence.rna method)": [[429, "skbio.sequence.RNA.iter_contiguous"]], "iter_kmers() (skbio.sequence.rna method)": [[430, "skbio.sequence.RNA.iter_kmers"]], "kmer_frequencies() (skbio.sequence.rna method)": [[431, "skbio.sequence.RNA.kmer_frequencies"]], "lowercase() (skbio.sequence.rna method)": [[432, "skbio.sequence.RNA.lowercase"]], "match_frequency() (skbio.sequence.rna method)": [[433, "skbio.sequence.RNA.match_frequency"]], "matches() (skbio.sequence.rna method)": [[434, "skbio.sequence.RNA.matches"]], "mismatch_frequency() (skbio.sequence.rna method)": [[435, "skbio.sequence.RNA.mismatch_frequency"]], "mismatches() (skbio.sequence.rna method)": [[436, "skbio.sequence.RNA.mismatches"]], "nondegenerates() (skbio.sequence.rna method)": [[437, "skbio.sequence.RNA.nondegenerates"]], "read() (skbio.sequence.rna class method)": [[438, "skbio.sequence.RNA.read"]], "replace() (skbio.sequence.rna method)": [[439, "skbio.sequence.RNA.replace"]], "reverse_complement() (skbio.sequence.rna method)": [[440, "skbio.sequence.RNA.reverse_complement"]], "reverse_transcribe() (skbio.sequence.rna method)": [[441, "skbio.sequence.RNA.reverse_transcribe"]], "to_regex() (skbio.sequence.rna method)": [[442, "skbio.sequence.RNA.to_regex"]], "translate() (skbio.sequence.rna method)": [[443, "skbio.sequence.RNA.translate"]], "translate_six_frames() (skbio.sequence.rna method)": [[444, "skbio.sequence.RNA.translate_six_frames"]], "write() (skbio.sequence.rna method)": [[445, "skbio.sequence.RNA.write"]], "sequence (class in skbio.sequence)": [[446, "skbio.sequence.Sequence"]], "__bool__() (skbio.sequence.sequence method)": [[447, "skbio.sequence.Sequence.__bool__"]], "__contains__() (skbio.sequence.sequence method)": [[448, "skbio.sequence.Sequence.__contains__"]], "__copy__() (skbio.sequence.sequence method)": [[449, "skbio.sequence.Sequence.__copy__"]], "__deepcopy__() (skbio.sequence.sequence method)": [[450, "skbio.sequence.Sequence.__deepcopy__"]], "__eq__() (skbio.sequence.sequence method)": [[451, "skbio.sequence.Sequence.__eq__"]], "__ge__() (skbio.sequence.sequence method)": [[452, "skbio.sequence.Sequence.__ge__"]], "__getitem__() (skbio.sequence.sequence method)": [[453, "skbio.sequence.Sequence.__getitem__"]], "__getstate__() (skbio.sequence.sequence method)": [[454, "skbio.sequence.Sequence.__getstate__"]], "__gt__() (skbio.sequence.sequence method)": [[455, "skbio.sequence.Sequence.__gt__"]], "__iter__() (skbio.sequence.sequence method)": [[456, "skbio.sequence.Sequence.__iter__"]], "__le__() (skbio.sequence.sequence method)": [[457, "skbio.sequence.Sequence.__le__"]], "__len__() (skbio.sequence.sequence method)": [[458, "skbio.sequence.Sequence.__len__"]], "__lt__() (skbio.sequence.sequence method)": [[459, "skbio.sequence.Sequence.__lt__"]], "__ne__() (skbio.sequence.sequence method)": [[460, "skbio.sequence.Sequence.__ne__"]], "__reversed__() (skbio.sequence.sequence method)": [[461, "skbio.sequence.Sequence.__reversed__"]], "__str__() (skbio.sequence.sequence method)": [[462, "skbio.sequence.Sequence.__str__"]], "concat() (skbio.sequence.sequence class method)": [[463, "skbio.sequence.Sequence.concat"]], "count() (skbio.sequence.sequence method)": [[464, "skbio.sequence.Sequence.count"]], "distance() (skbio.sequence.sequence method)": [[465, "skbio.sequence.Sequence.distance"]], "find_with_regex() (skbio.sequence.sequence method)": [[466, "skbio.sequence.Sequence.find_with_regex"]], "frequencies() (skbio.sequence.sequence method)": [[467, "skbio.sequence.Sequence.frequencies"]], "has_interval_metadata() (skbio.sequence.sequence method)": [[468, "skbio.sequence.Sequence.has_interval_metadata"]], "has_metadata() (skbio.sequence.sequence method)": [[469, "skbio.sequence.Sequence.has_metadata"]], "has_positional_metadata() (skbio.sequence.sequence method)": [[470, "skbio.sequence.Sequence.has_positional_metadata"]], "index() (skbio.sequence.sequence method)": [[471, "skbio.sequence.Sequence.index"]], "iter_contiguous() (skbio.sequence.sequence method)": [[472, "skbio.sequence.Sequence.iter_contiguous"]], "iter_kmers() (skbio.sequence.sequence method)": [[473, "skbio.sequence.Sequence.iter_kmers"]], "kmer_frequencies() (skbio.sequence.sequence method)": [[474, "skbio.sequence.Sequence.kmer_frequencies"]], "lowercase() (skbio.sequence.sequence method)": [[475, "skbio.sequence.Sequence.lowercase"]], "match_frequency() (skbio.sequence.sequence method)": [[476, "skbio.sequence.Sequence.match_frequency"]], "matches() (skbio.sequence.sequence method)": [[477, "skbio.sequence.Sequence.matches"]], "mismatch_frequency() (skbio.sequence.sequence method)": [[478, "skbio.sequence.Sequence.mismatch_frequency"]], "mismatches() (skbio.sequence.sequence method)": [[479, "skbio.sequence.Sequence.mismatches"]], "read() (skbio.sequence.sequence class method)": [[480, "skbio.sequence.Sequence.read"]], "replace() (skbio.sequence.sequence method)": [[481, "skbio.sequence.Sequence.replace"]], "write() (skbio.sequence.sequence method)": [[482, "skbio.sequence.Sequence.write"]], "skbio.sequence.distance": [[483, "module-skbio.sequence.distance"]], "hamming() (in module skbio.sequence.distance)": [[484, "skbio.sequence.distance.hamming"]], "kmer_distance() (in module skbio.sequence.distance)": [[485, "skbio.sequence.distance.kmer_distance"]], "skbio.stats.composition": [[486, "module-skbio.stats.composition"]], "alr() (in module skbio.stats.composition)": [[487, "skbio.stats.composition.alr"]], "alr_inv() (in module skbio.stats.composition)": [[488, "skbio.stats.composition.alr_inv"]], "ancom() (in module skbio.stats.composition)": [[489, "skbio.stats.composition.ancom"]], "centralize() (in module skbio.stats.composition)": [[490, "skbio.stats.composition.centralize"]], "closure() (in module skbio.stats.composition)": [[491, "skbio.stats.composition.closure"]], "clr() (in module skbio.stats.composition)": [[492, "skbio.stats.composition.clr"]], "clr_inv() (in module skbio.stats.composition)": [[493, "skbio.stats.composition.clr_inv"]], "ilr() (in module skbio.stats.composition)": [[494, "skbio.stats.composition.ilr"]], "ilr_inv() (in module skbio.stats.composition)": [[495, "skbio.stats.composition.ilr_inv"]], "inner() (in module skbio.stats.composition)": [[496, "skbio.stats.composition.inner"]], "multiplicative_replacement() (in module skbio.stats.composition)": [[497, "skbio.stats.composition.multiplicative_replacement"]], "perturb() (in module skbio.stats.composition)": [[498, "skbio.stats.composition.perturb"]], "perturb_inv() (in module skbio.stats.composition)": [[499, "skbio.stats.composition.perturb_inv"]], "power() (in module skbio.stats.composition)": [[500, "skbio.stats.composition.power"]], "sbp_basis() (in module skbio.stats.composition)": [[501, "skbio.stats.composition.sbp_basis"]], "skbio.stats.distance": [[502, "module-skbio.stats.distance"]], "dissimilaritymatrix (class in skbio.stats.distance)": [[503, "skbio.stats.distance.DissimilarityMatrix"]], "__contains__() (skbio.stats.distance.dissimilaritymatrix method)": [[504, "skbio.stats.distance.DissimilarityMatrix.__contains__"]], "__eq__() (skbio.stats.distance.dissimilaritymatrix method)": [[505, "skbio.stats.distance.DissimilarityMatrix.__eq__"]], "__ge__() (skbio.stats.distance.dissimilaritymatrix method)": [[506, "skbio.stats.distance.DissimilarityMatrix.__ge__"]], "__getitem__() (skbio.stats.distance.dissimilaritymatrix method)": [[507, "skbio.stats.distance.DissimilarityMatrix.__getitem__"]], "__getstate__() (skbio.stats.distance.dissimilaritymatrix method)": [[508, "skbio.stats.distance.DissimilarityMatrix.__getstate__"]], "__gt__() (skbio.stats.distance.dissimilaritymatrix method)": [[509, "skbio.stats.distance.DissimilarityMatrix.__gt__"]], "__le__() (skbio.stats.distance.dissimilaritymatrix method)": [[510, "skbio.stats.distance.DissimilarityMatrix.__le__"]], "__lt__() (skbio.stats.distance.dissimilaritymatrix method)": [[511, "skbio.stats.distance.DissimilarityMatrix.__lt__"]], "__ne__() (skbio.stats.distance.dissimilaritymatrix method)": [[512, "skbio.stats.distance.DissimilarityMatrix.__ne__"]], "__str__() (skbio.stats.distance.dissimilaritymatrix method)": [[513, "skbio.stats.distance.DissimilarityMatrix.__str__"]], "between() (skbio.stats.distance.dissimilaritymatrix method)": [[514, "skbio.stats.distance.DissimilarityMatrix.between"]], "copy() (skbio.stats.distance.dissimilaritymatrix method)": [[515, "skbio.stats.distance.DissimilarityMatrix.copy"]], "filter() (skbio.stats.distance.dissimilaritymatrix method)": [[516, "skbio.stats.distance.DissimilarityMatrix.filter"]], "from_iterable() (skbio.stats.distance.dissimilaritymatrix class method)": [[517, "skbio.stats.distance.DissimilarityMatrix.from_iterable"]], "index() (skbio.stats.distance.dissimilaritymatrix method)": [[518, "skbio.stats.distance.DissimilarityMatrix.index"]], "plot() (skbio.stats.distance.dissimilaritymatrix method)": [[519, "skbio.stats.distance.DissimilarityMatrix.plot"]], "read() (skbio.stats.distance.dissimilaritymatrix class method)": [[520, "skbio.stats.distance.DissimilarityMatrix.read"]], "redundant_form() (skbio.stats.distance.dissimilaritymatrix method)": [[521, "skbio.stats.distance.DissimilarityMatrix.redundant_form"]], "to_data_frame() (skbio.stats.distance.dissimilaritymatrix method)": [[522, "skbio.stats.distance.DissimilarityMatrix.to_data_frame"]], "transpose() (skbio.stats.distance.dissimilaritymatrix method)": [[523, "skbio.stats.distance.DissimilarityMatrix.transpose"]], "within() (skbio.stats.distance.dissimilaritymatrix method)": [[524, "skbio.stats.distance.DissimilarityMatrix.within"]], "write() (skbio.stats.distance.dissimilaritymatrix method)": [[525, "skbio.stats.distance.DissimilarityMatrix.write"]], "dissimilaritymatrixerror": [[526, "skbio.stats.distance.DissimilarityMatrixError"]], "distancematrix (class in skbio.stats.distance)": [[527, "skbio.stats.distance.DistanceMatrix"]], "__contains__() (skbio.stats.distance.distancematrix method)": [[528, "skbio.stats.distance.DistanceMatrix.__contains__"]], "__eq__() (skbio.stats.distance.distancematrix method)": [[529, "skbio.stats.distance.DistanceMatrix.__eq__"]], "__ge__() (skbio.stats.distance.distancematrix method)": [[530, "skbio.stats.distance.DistanceMatrix.__ge__"]], "__getitem__() (skbio.stats.distance.distancematrix method)": [[531, "skbio.stats.distance.DistanceMatrix.__getitem__"]], "__getstate__() (skbio.stats.distance.distancematrix method)": [[532, "skbio.stats.distance.DistanceMatrix.__getstate__"]], "__gt__() (skbio.stats.distance.distancematrix method)": [[533, "skbio.stats.distance.DistanceMatrix.__gt__"]], "__le__() (skbio.stats.distance.distancematrix method)": [[534, "skbio.stats.distance.DistanceMatrix.__le__"]], "__lt__() (skbio.stats.distance.distancematrix method)": [[535, "skbio.stats.distance.DistanceMatrix.__lt__"]], "__ne__() (skbio.stats.distance.distancematrix method)": [[536, "skbio.stats.distance.DistanceMatrix.__ne__"]], "__str__() (skbio.stats.distance.distancematrix method)": [[537, "skbio.stats.distance.DistanceMatrix.__str__"]], "between() (skbio.stats.distance.distancematrix method)": [[538, "skbio.stats.distance.DistanceMatrix.between"]], "condensed_form() (skbio.stats.distance.distancematrix method)": [[539, "skbio.stats.distance.DistanceMatrix.condensed_form"]], "copy() (skbio.stats.distance.distancematrix method)": [[540, "skbio.stats.distance.DistanceMatrix.copy"]], "filter() (skbio.stats.distance.distancematrix method)": [[541, "skbio.stats.distance.DistanceMatrix.filter"]], "from_iterable() (skbio.stats.distance.distancematrix class method)": [[542, "skbio.stats.distance.DistanceMatrix.from_iterable"]], "index() (skbio.stats.distance.distancematrix method)": [[543, "skbio.stats.distance.DistanceMatrix.index"]], "permute() (skbio.stats.distance.distancematrix method)": [[544, "skbio.stats.distance.DistanceMatrix.permute"]], "plot() (skbio.stats.distance.distancematrix method)": [[545, "skbio.stats.distance.DistanceMatrix.plot"]], "read() (skbio.stats.distance.distancematrix class method)": [[546, "skbio.stats.distance.DistanceMatrix.read"]], "redundant_form() (skbio.stats.distance.distancematrix method)": [[547, "skbio.stats.distance.DistanceMatrix.redundant_form"]], "to_data_frame() (skbio.stats.distance.distancematrix method)": [[548, "skbio.stats.distance.DistanceMatrix.to_data_frame"]], "to_series() (skbio.stats.distance.distancematrix method)": [[549, "skbio.stats.distance.DistanceMatrix.to_series"]], "transpose() (skbio.stats.distance.distancematrix method)": [[550, "skbio.stats.distance.DistanceMatrix.transpose"]], "within() (skbio.stats.distance.distancematrix method)": [[551, "skbio.stats.distance.DistanceMatrix.within"]], "write() (skbio.stats.distance.distancematrix method)": [[552, "skbio.stats.distance.DistanceMatrix.write"]], "distancematrixerror": [[553, "skbio.stats.distance.DistanceMatrixError"]], "missingiderror": [[554, "skbio.stats.distance.MissingIDError"]], "anosim() (in module skbio.stats.distance)": [[555, "skbio.stats.distance.anosim"]], "bioenv() (in module skbio.stats.distance)": [[556, "skbio.stats.distance.bioenv"]], "mantel() (in module skbio.stats.distance)": [[557, "skbio.stats.distance.mantel"]], "permanova() (in module skbio.stats.distance)": [[558, "skbio.stats.distance.permanova"]], "permdisp() (in module skbio.stats.distance)": [[559, "skbio.stats.distance.permdisp"]], "pwmantel() (in module skbio.stats.distance)": [[560, "skbio.stats.distance.pwmantel"]], "randdm() (in module skbio.stats.distance)": [[561, "skbio.stats.distance.randdm"]], "skbio.stats.evolve": [[562, "module-skbio.stats.evolve"]], "hommola_cospeciation() (in module skbio.stats.evolve)": [[563, "skbio.stats.evolve.hommola_cospeciation"]], "skbio.stats.gradient": [[564, "module-skbio.stats.gradient"]], "averagegradientanova (class in skbio.stats.gradient)": [[565, "skbio.stats.gradient.AverageGradientANOVA"]], "__eq__() (skbio.stats.gradient.averagegradientanova method)": [[566, "skbio.stats.gradient.AverageGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.averagegradientanova method)": [[567, "skbio.stats.gradient.AverageGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.averagegradientanova method)": [[568, "skbio.stats.gradient.AverageGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.averagegradientanova method)": [[569, "skbio.stats.gradient.AverageGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.averagegradientanova method)": [[570, "skbio.stats.gradient.AverageGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.averagegradientanova method)": [[571, "skbio.stats.gradient.AverageGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.averagegradientanova method)": [[572, "skbio.stats.gradient.AverageGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.averagegradientanova method)": [[573, "skbio.stats.gradient.AverageGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.averagegradientanova method)": [[574, "skbio.stats.gradient.AverageGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.averagegradientanova method)": [[575, "skbio.stats.gradient.AverageGradientANOVA.get_trajectories"]], "categoryresults (class in skbio.stats.gradient)": [[576, "skbio.stats.gradient.CategoryResults"]], "category (skbio.stats.gradient.categoryresults attribute)": [[576, "skbio.stats.gradient.CategoryResults.category"]], "groups (skbio.stats.gradient.categoryresults attribute)": [[576, "skbio.stats.gradient.CategoryResults.groups"]], "message (skbio.stats.gradient.categoryresults attribute)": [[576, "skbio.stats.gradient.CategoryResults.message"]], "probability (skbio.stats.gradient.categoryresults attribute)": [[576, "skbio.stats.gradient.CategoryResults.probability"]], "__eq__() (skbio.stats.gradient.categoryresults method)": [[577, "skbio.stats.gradient.CategoryResults.__eq__"]], "__ge__() (skbio.stats.gradient.categoryresults method)": [[578, "skbio.stats.gradient.CategoryResults.__ge__"]], "__getstate__() (skbio.stats.gradient.categoryresults method)": [[579, "skbio.stats.gradient.CategoryResults.__getstate__"]], "__gt__() (skbio.stats.gradient.categoryresults method)": [[580, "skbio.stats.gradient.CategoryResults.__gt__"]], "__hash__() (skbio.stats.gradient.categoryresults method)": [[581, "skbio.stats.gradient.CategoryResults.__hash__"]], "__le__() (skbio.stats.gradient.categoryresults method)": [[582, "skbio.stats.gradient.CategoryResults.__le__"]], "__lt__() (skbio.stats.gradient.categoryresults method)": [[583, "skbio.stats.gradient.CategoryResults.__lt__"]], "__ne__() (skbio.stats.gradient.categoryresults method)": [[584, "skbio.stats.gradient.CategoryResults.__ne__"]], "__str__() (skbio.stats.gradient.categoryresults method)": [[585, "skbio.stats.gradient.CategoryResults.__str__"]], "to_files() (skbio.stats.gradient.categoryresults method)": [[586, "skbio.stats.gradient.CategoryResults.to_files"]], "firstdifferencegradientanova (class in skbio.stats.gradient)": [[587, "skbio.stats.gradient.FirstDifferenceGradientANOVA"]], "__eq__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[588, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[589, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[590, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[591, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[592, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[593, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[594, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[595, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[596, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.firstdifferencegradientanova method)": [[597, "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories"]], "gradientanova (class in skbio.stats.gradient)": [[598, "skbio.stats.gradient.GradientANOVA"]], "__eq__() (skbio.stats.gradient.gradientanova method)": [[599, "skbio.stats.gradient.GradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.gradientanova method)": [[600, "skbio.stats.gradient.GradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.gradientanova method)": [[601, "skbio.stats.gradient.GradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.gradientanova method)": [[602, "skbio.stats.gradient.GradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.gradientanova method)": [[603, "skbio.stats.gradient.GradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.gradientanova method)": [[604, "skbio.stats.gradient.GradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.gradientanova method)": [[605, "skbio.stats.gradient.GradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.gradientanova method)": [[606, "skbio.stats.gradient.GradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.gradientanova method)": [[607, "skbio.stats.gradient.GradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.gradientanova method)": [[608, "skbio.stats.gradient.GradientANOVA.get_trajectories"]], "gradientanovaresults (class in skbio.stats.gradient)": [[609, "skbio.stats.gradient.GradientANOVAResults"]], "algorithm (skbio.stats.gradient.gradientanovaresults attribute)": [[609, "skbio.stats.gradient.GradientANOVAResults.algorithm"]], "categories (skbio.stats.gradient.gradientanovaresults attribute)": [[609, "skbio.stats.gradient.GradientANOVAResults.categories"]], "weighted (skbio.stats.gradient.gradientanovaresults attribute)": [[609, "skbio.stats.gradient.GradientANOVAResults.weighted"]], "__eq__() (skbio.stats.gradient.gradientanovaresults method)": [[610, "skbio.stats.gradient.GradientANOVAResults.__eq__"]], "__ge__() (skbio.stats.gradient.gradientanovaresults method)": [[611, "skbio.stats.gradient.GradientANOVAResults.__ge__"]], "__getstate__() (skbio.stats.gradient.gradientanovaresults method)": [[612, "skbio.stats.gradient.GradientANOVAResults.__getstate__"]], "__gt__() (skbio.stats.gradient.gradientanovaresults method)": [[613, "skbio.stats.gradient.GradientANOVAResults.__gt__"]], "__hash__() (skbio.stats.gradient.gradientanovaresults method)": [[614, "skbio.stats.gradient.GradientANOVAResults.__hash__"]], "__le__() (skbio.stats.gradient.gradientanovaresults method)": [[615, "skbio.stats.gradient.GradientANOVAResults.__le__"]], "__lt__() (skbio.stats.gradient.gradientanovaresults method)": [[616, "skbio.stats.gradient.GradientANOVAResults.__lt__"]], "__ne__() (skbio.stats.gradient.gradientanovaresults method)": [[617, "skbio.stats.gradient.GradientANOVAResults.__ne__"]], "__str__() (skbio.stats.gradient.gradientanovaresults method)": [[618, "skbio.stats.gradient.GradientANOVAResults.__str__"]], "to_files() (skbio.stats.gradient.gradientanovaresults method)": [[619, "skbio.stats.gradient.GradientANOVAResults.to_files"]], "groupresults (class in skbio.stats.gradient)": [[620, "skbio.stats.gradient.GroupResults"]], "info (skbio.stats.gradient.groupresults attribute)": [[620, "skbio.stats.gradient.GroupResults.info"]], "mean (skbio.stats.gradient.groupresults attribute)": [[620, "skbio.stats.gradient.GroupResults.mean"]], "message (skbio.stats.gradient.groupresults attribute)": [[620, "skbio.stats.gradient.GroupResults.message"]], "name (skbio.stats.gradient.groupresults attribute)": [[620, "skbio.stats.gradient.GroupResults.name"]], "trajectory (skbio.stats.gradient.groupresults attribute)": [[620, "skbio.stats.gradient.GroupResults.trajectory"]], "__eq__() (skbio.stats.gradient.groupresults method)": [[621, "skbio.stats.gradient.GroupResults.__eq__"]], "__ge__() (skbio.stats.gradient.groupresults method)": [[622, "skbio.stats.gradient.GroupResults.__ge__"]], "__getstate__() (skbio.stats.gradient.groupresults method)": [[623, "skbio.stats.gradient.GroupResults.__getstate__"]], "__gt__() (skbio.stats.gradient.groupresults method)": [[624, "skbio.stats.gradient.GroupResults.__gt__"]], "__hash__() (skbio.stats.gradient.groupresults method)": [[625, "skbio.stats.gradient.GroupResults.__hash__"]], "__le__() (skbio.stats.gradient.groupresults method)": [[626, "skbio.stats.gradient.GroupResults.__le__"]], "__lt__() (skbio.stats.gradient.groupresults method)": [[627, "skbio.stats.gradient.GroupResults.__lt__"]], "__ne__() (skbio.stats.gradient.groupresults method)": [[628, "skbio.stats.gradient.GroupResults.__ne__"]], "__str__() (skbio.stats.gradient.groupresults method)": [[629, "skbio.stats.gradient.GroupResults.__str__"]], "to_files() (skbio.stats.gradient.groupresults method)": [[630, "skbio.stats.gradient.GroupResults.to_files"]], "trajectorygradientanova (class in skbio.stats.gradient)": [[631, "skbio.stats.gradient.TrajectoryGradientANOVA"]], "__eq__() (skbio.stats.gradient.trajectorygradientanova method)": [[632, "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.trajectorygradientanova method)": [[633, "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.trajectorygradientanova method)": [[634, "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.trajectorygradientanova method)": [[635, "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.trajectorygradientanova method)": [[636, "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.trajectorygradientanova method)": [[637, "skbio.stats.gradient.TrajectoryGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.trajectorygradientanova method)": [[638, "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.trajectorygradientanova method)": [[639, "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.trajectorygradientanova method)": [[640, "skbio.stats.gradient.TrajectoryGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.trajectorygradientanova method)": [[641, "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories"]], "windowdifferencegradientanova (class in skbio.stats.gradient)": [[642, "skbio.stats.gradient.WindowDifferenceGradientANOVA"]], "__eq__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[643, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[644, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[645, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[646, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[647, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[648, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[649, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[650, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[651, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.windowdifferencegradientanova method)": [[652, "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories"]], "isubsample() (in module skbio.stats)": [[653, "skbio.stats.isubsample"]], "skbio.stats.ordination": [[654, "module-skbio.stats.ordination"]], "ordinationresults (class in skbio.stats.ordination)": [[655, "skbio.stats.ordination.OrdinationResults"]], "biplot_scores (skbio.stats.ordination.ordinationresults attribute)": [[655, "skbio.stats.ordination.OrdinationResults.biplot_scores"]], "eigvals (skbio.stats.ordination.ordinationresults attribute)": [[655, "skbio.stats.ordination.OrdinationResults.eigvals"]], "features (skbio.stats.ordination.ordinationresults attribute)": [[655, "skbio.stats.ordination.OrdinationResults.features"]], "long_method_name (skbio.stats.ordination.ordinationresults attribute)": [[655, "skbio.stats.ordination.OrdinationResults.long_method_name"]], "proportion_explained (skbio.stats.ordination.ordinationresults attribute)": [[655, "skbio.stats.ordination.OrdinationResults.proportion_explained"]], "sample_constraints (skbio.stats.ordination.ordinationresults attribute)": [[655, "skbio.stats.ordination.OrdinationResults.sample_constraints"]], "samples (skbio.stats.ordination.ordinationresults attribute)": [[655, "skbio.stats.ordination.OrdinationResults.samples"]], "short_method_name (skbio.stats.ordination.ordinationresults attribute)": [[655, "skbio.stats.ordination.OrdinationResults.short_method_name"]], "__eq__() (skbio.stats.ordination.ordinationresults method)": [[656, "skbio.stats.ordination.OrdinationResults.__eq__"]], "__ge__() (skbio.stats.ordination.ordinationresults method)": [[657, "skbio.stats.ordination.OrdinationResults.__ge__"]], "__getstate__() (skbio.stats.ordination.ordinationresults method)": [[658, "skbio.stats.ordination.OrdinationResults.__getstate__"]], "__gt__() (skbio.stats.ordination.ordinationresults method)": [[659, "skbio.stats.ordination.OrdinationResults.__gt__"]], "__hash__() (skbio.stats.ordination.ordinationresults method)": [[660, "skbio.stats.ordination.OrdinationResults.__hash__"]], "__le__() (skbio.stats.ordination.ordinationresults method)": [[661, "skbio.stats.ordination.OrdinationResults.__le__"]], "__lt__() (skbio.stats.ordination.ordinationresults method)": [[662, "skbio.stats.ordination.OrdinationResults.__lt__"]], "__ne__() (skbio.stats.ordination.ordinationresults method)": [[663, "skbio.stats.ordination.OrdinationResults.__ne__"]], "__str__() (skbio.stats.ordination.ordinationresults method)": [[664, "skbio.stats.ordination.OrdinationResults.__str__"]], "plot() (skbio.stats.ordination.ordinationresults method)": [[665, "skbio.stats.ordination.OrdinationResults.plot"]], "read() (skbio.stats.ordination.ordinationresults class method)": [[666, "skbio.stats.ordination.OrdinationResults.read"]], "write() (skbio.stats.ordination.ordinationresults method)": [[667, "skbio.stats.ordination.OrdinationResults.write"]], "ca() (in module skbio.stats.ordination)": [[668, "skbio.stats.ordination.ca"]], "cca() (in module skbio.stats.ordination)": [[669, "skbio.stats.ordination.cca"]], "corr() (in module skbio.stats.ordination)": [[670, "skbio.stats.ordination.corr"]], "e_matrix() (in module skbio.stats.ordination)": [[671, "skbio.stats.ordination.e_matrix"]], "f_matrix() (in module skbio.stats.ordination)": [[672, "skbio.stats.ordination.f_matrix"]], "mean_and_std() (in module skbio.stats.ordination)": [[673, "skbio.stats.ordination.mean_and_std"]], "pcoa() (in module skbio.stats.ordination)": [[674, "skbio.stats.ordination.pcoa"]], "pcoa_biplot() (in module skbio.stats.ordination)": [[675, "skbio.stats.ordination.pcoa_biplot"]], "rda() (in module skbio.stats.ordination)": [[676, "skbio.stats.ordination.rda"]], "scale() (in module skbio.stats.ordination)": [[677, "skbio.stats.ordination.scale"]], "svd_rank() (in module skbio.stats.ordination)": [[678, "skbio.stats.ordination.svd_rank"]], "skbio.stats.power": [[679, "module-skbio.stats.power"]], "confidence_bound() (in module skbio.stats.power)": [[680, "skbio.stats.power.confidence_bound"]], "paired_subsamples() (in module skbio.stats.power)": [[681, "skbio.stats.power.paired_subsamples"]], "subsample_paired_power() (in module skbio.stats.power)": [[682, "skbio.stats.power.subsample_paired_power"]], "subsample_power() (in module skbio.stats.power)": [[683, "skbio.stats.power.subsample_power"]], "subsample_counts() (in module skbio.stats)": [[684, "skbio.stats.subsample_counts"]], "duplicatenodeerror": [[685, "skbio.tree.DuplicateNodeError"]], "missingnodeerror": [[686, "skbio.tree.MissingNodeError"]], "nolengtherror": [[687, "skbio.tree.NoLengthError"]], "noparenterror": [[688, "skbio.tree.NoParentError"]], "treeerror": [[689, "skbio.tree.TreeError"]], "treenode (class in skbio.tree)": [[690, "skbio.tree.TreeNode"]], "__copy__() (skbio.tree.treenode method)": [[691, "skbio.tree.TreeNode.__copy__"]], "__deepcopy__() (skbio.tree.treenode method)": [[692, "skbio.tree.TreeNode.__deepcopy__"]], "__eq__() (skbio.tree.treenode method)": [[693, "skbio.tree.TreeNode.__eq__"]], "__ge__() (skbio.tree.treenode method)": [[694, "skbio.tree.TreeNode.__ge__"]], "__getitem__() (skbio.tree.treenode method)": [[695, "skbio.tree.TreeNode.__getitem__"]], "__getstate__() (skbio.tree.treenode method)": [[696, "skbio.tree.TreeNode.__getstate__"]], "__gt__() (skbio.tree.treenode method)": [[697, "skbio.tree.TreeNode.__gt__"]], "__hash__() (skbio.tree.treenode method)": [[698, "skbio.tree.TreeNode.__hash__"]], "__iter__() (skbio.tree.treenode method)": [[699, "skbio.tree.TreeNode.__iter__"]], "__le__() (skbio.tree.treenode method)": [[700, "skbio.tree.TreeNode.__le__"]], "__len__() (skbio.tree.treenode method)": [[701, "skbio.tree.TreeNode.__len__"]], "__lt__() (skbio.tree.treenode method)": [[702, "skbio.tree.TreeNode.__lt__"]], "__ne__() (skbio.tree.treenode method)": [[703, "skbio.tree.TreeNode.__ne__"]], "__str__() (skbio.tree.treenode method)": [[704, "skbio.tree.TreeNode.__str__"]], "accumulate_to_ancestor() (skbio.tree.treenode method)": [[705, "skbio.tree.TreeNode.accumulate_to_ancestor"]], "ancestors() (skbio.tree.treenode method)": [[706, "skbio.tree.TreeNode.ancestors"]], "append() (skbio.tree.treenode method)": [[707, "skbio.tree.TreeNode.append"]], "ascii_art() (skbio.tree.treenode method)": [[708, "skbio.tree.TreeNode.ascii_art"]], "assign_ids() (skbio.tree.treenode method)": [[709, "skbio.tree.TreeNode.assign_ids"]], "assign_supports() (skbio.tree.treenode method)": [[710, "skbio.tree.TreeNode.assign_supports"]], "bifurcate() (skbio.tree.treenode method)": [[711, "skbio.tree.TreeNode.bifurcate"]], "cache_attr() (skbio.tree.treenode method)": [[712, "skbio.tree.TreeNode.cache_attr"]], "compare_rfd() (skbio.tree.treenode method)": [[713, "skbio.tree.TreeNode.compare_rfd"]], "compare_subsets() (skbio.tree.treenode method)": [[714, "skbio.tree.TreeNode.compare_subsets"]], "compare_tip_distances() (skbio.tree.treenode method)": [[715, "skbio.tree.TreeNode.compare_tip_distances"]], "copy() (skbio.tree.treenode method)": [[716, "skbio.tree.TreeNode.copy"]], "count() (skbio.tree.treenode method)": [[717, "skbio.tree.TreeNode.count"]], "create_caches() (skbio.tree.treenode method)": [[718, "skbio.tree.TreeNode.create_caches"]], "deepcopy() (skbio.tree.treenode method)": [[719, "skbio.tree.TreeNode.deepcopy"]], "descending_branch_length() (skbio.tree.treenode method)": [[720, "skbio.tree.TreeNode.descending_branch_length"]], "distance() (skbio.tree.treenode method)": [[721, "skbio.tree.TreeNode.distance"]], "extend() (skbio.tree.treenode method)": [[722, "skbio.tree.TreeNode.extend"]], "find() (skbio.tree.treenode method)": [[723, "skbio.tree.TreeNode.find"]], "find_all() (skbio.tree.treenode method)": [[724, "skbio.tree.TreeNode.find_all"]], "find_by_func() (skbio.tree.treenode method)": [[725, "skbio.tree.TreeNode.find_by_func"]], "find_by_id() (skbio.tree.treenode method)": [[726, "skbio.tree.TreeNode.find_by_id"]], "from_linkage_matrix() (skbio.tree.treenode class method)": [[727, "skbio.tree.TreeNode.from_linkage_matrix"]], "from_taxdump() (skbio.tree.treenode class method)": [[728, "skbio.tree.TreeNode.from_taxdump"]], "from_taxonomy() (skbio.tree.treenode class method)": [[729, "skbio.tree.TreeNode.from_taxonomy"]], "get_max_distance() (skbio.tree.treenode method)": [[730, "skbio.tree.TreeNode.get_max_distance"]], "has_children() (skbio.tree.treenode method)": [[731, "skbio.tree.TreeNode.has_children"]], "index_tree() (skbio.tree.treenode method)": [[732, "skbio.tree.TreeNode.index_tree"]], "invalidate_caches() (skbio.tree.treenode method)": [[733, "skbio.tree.TreeNode.invalidate_caches"]], "is_root() (skbio.tree.treenode method)": [[734, "skbio.tree.TreeNode.is_root"]], "is_tip() (skbio.tree.treenode method)": [[735, "skbio.tree.TreeNode.is_tip"]], "lca() (skbio.tree.treenode method)": [[736, "skbio.tree.TreeNode.lca"]], "levelorder() (skbio.tree.treenode method)": [[737, "skbio.tree.TreeNode.levelorder"]], "lowest_common_ancestor() (skbio.tree.treenode method)": [[738, "skbio.tree.TreeNode.lowest_common_ancestor"]], "neighbors() (skbio.tree.treenode method)": [[739, "skbio.tree.TreeNode.neighbors"]], "non_tips() (skbio.tree.treenode method)": [[740, "skbio.tree.TreeNode.non_tips"]], "observed_node_counts() (skbio.tree.treenode method)": [[741, "skbio.tree.TreeNode.observed_node_counts"]], "pop() (skbio.tree.treenode method)": [[742, "skbio.tree.TreeNode.pop"]], "postorder() (skbio.tree.treenode method)": [[743, "skbio.tree.TreeNode.postorder"]], "pre_and_postorder() (skbio.tree.treenode method)": [[744, "skbio.tree.TreeNode.pre_and_postorder"]], "preorder() (skbio.tree.treenode method)": [[745, "skbio.tree.TreeNode.preorder"]], "prune() (skbio.tree.treenode method)": [[746, "skbio.tree.TreeNode.prune"]], "read() (skbio.tree.treenode class method)": [[747, "skbio.tree.TreeNode.read"]], "remove() (skbio.tree.treenode method)": [[748, "skbio.tree.TreeNode.remove"]], "remove_deleted() (skbio.tree.treenode method)": [[749, "skbio.tree.TreeNode.remove_deleted"]], "root() (skbio.tree.treenode method)": [[750, "skbio.tree.TreeNode.root"]], "root_at() (skbio.tree.treenode method)": [[751, "skbio.tree.TreeNode.root_at"]], "root_at_midpoint() (skbio.tree.treenode method)": [[752, "skbio.tree.TreeNode.root_at_midpoint"]], "shear() (skbio.tree.treenode method)": [[753, "skbio.tree.TreeNode.shear"]], "shuffle() (skbio.tree.treenode method)": [[754, "skbio.tree.TreeNode.shuffle"]], "siblings() (skbio.tree.treenode method)": [[755, "skbio.tree.TreeNode.siblings"]], "subset() (skbio.tree.treenode method)": [[756, "skbio.tree.TreeNode.subset"]], "subsets() (skbio.tree.treenode method)": [[757, "skbio.tree.TreeNode.subsets"]], "subtree() (skbio.tree.treenode method)": [[758, "skbio.tree.TreeNode.subtree"]], "tip_tip_distances() (skbio.tree.treenode method)": [[759, "skbio.tree.TreeNode.tip_tip_distances"]], "tips() (skbio.tree.treenode method)": [[760, "skbio.tree.TreeNode.tips"]], "to_array() (skbio.tree.treenode method)": [[761, "skbio.tree.TreeNode.to_array"]], "to_taxonomy() (skbio.tree.treenode method)": [[762, "skbio.tree.TreeNode.to_taxonomy"]], "traverse() (skbio.tree.treenode method)": [[763, "skbio.tree.TreeNode.traverse"]], "unpack() (skbio.tree.treenode method)": [[764, "skbio.tree.TreeNode.unpack"]], "unpack_by_func() (skbio.tree.treenode method)": [[765, "skbio.tree.TreeNode.unpack_by_func"]], "unrooted_copy() (skbio.tree.treenode method)": [[766, "skbio.tree.TreeNode.unrooted_copy"]], "unrooted_deepcopy() (skbio.tree.treenode method)": [[767, "skbio.tree.TreeNode.unrooted_deepcopy"]], "write() (skbio.tree.treenode method)": [[768, "skbio.tree.TreeNode.write"]], "majority_rule() (in module skbio.tree)": [[769, "skbio.tree.majority_rule"]], "nj() (in module skbio.tree)": [[770, "skbio.tree.nj"]], "efficiencywarning": [[771, "skbio.util.EfficiencyWarning"]], "representationwarning": [[772, "skbio.util.RepresentationWarning"]], "assert_data_frame_almost_equal() (in module skbio.util)": [[773, "skbio.util.assert_data_frame_almost_equal"]], "assert_ordination_results_equal() (in module skbio.util)": [[774, "skbio.util.assert_ordination_results_equal"]], "cardinal_to_ordinal() (in module skbio.util)": [[775, "skbio.util.cardinal_to_ordinal"]], "classproperty (class in skbio.util)": [[776, "skbio.util.classproperty"]], "__delete__() (skbio.util.classproperty method)": [[777, "skbio.util.classproperty.__delete__"]], "__eq__() (skbio.util.classproperty method)": [[778, "skbio.util.classproperty.__eq__"]], "__ge__() (skbio.util.classproperty method)": [[779, "skbio.util.classproperty.__ge__"]], "__get__() (skbio.util.classproperty method)": [[780, "skbio.util.classproperty.__get__"]], "__getstate__() (skbio.util.classproperty method)": [[781, "skbio.util.classproperty.__getstate__"]], "__gt__() (skbio.util.classproperty method)": [[782, "skbio.util.classproperty.__gt__"]], "__hash__() (skbio.util.classproperty method)": [[783, "skbio.util.classproperty.__hash__"]], "__le__() (skbio.util.classproperty method)": [[784, "skbio.util.classproperty.__le__"]], "__lt__() (skbio.util.classproperty method)": [[785, "skbio.util.classproperty.__lt__"]], "__ne__() (skbio.util.classproperty method)": [[786, "skbio.util.classproperty.__ne__"]], "__set__() (skbio.util.classproperty method)": [[787, "skbio.util.classproperty.__set__"]], "__set_name__() (skbio.util.classproperty method)": [[788, "skbio.util.classproperty.__set_name__"]], "__str__() (skbio.util.classproperty method)": [[789, "skbio.util.classproperty.__str__"]], "deleter() (skbio.util.classproperty method)": [[790, "skbio.util.classproperty.deleter"]], "getter() (skbio.util.classproperty method)": [[791, "skbio.util.classproperty.getter"]], "setter() (skbio.util.classproperty method)": [[792, "skbio.util.classproperty.setter"]], "find_duplicates() (in module skbio.util)": [[793, "skbio.util.find_duplicates"]], "get_data_path() (in module skbio.util)": [[794, "skbio.util.get_data_path"]], "safe_md5() (in module skbio.util)": [[795, "skbio.util.safe_md5"]], "workflow (class in skbio.workflow)": [[796, "skbio.workflow.Workflow"]], "__call__() (skbio.workflow.workflow method)": [[797, "skbio.workflow.Workflow.__call__"]], "__eq__() (skbio.workflow.workflow method)": [[798, "skbio.workflow.Workflow.__eq__"]], "__ge__() (skbio.workflow.workflow method)": [[799, "skbio.workflow.Workflow.__ge__"]], "__getstate__() (skbio.workflow.workflow method)": [[800, "skbio.workflow.Workflow.__getstate__"]], "__gt__() (skbio.workflow.workflow method)": [[801, "skbio.workflow.Workflow.__gt__"]], "__hash__() (skbio.workflow.workflow method)": [[802, "skbio.workflow.Workflow.__hash__"]], "__le__() (skbio.workflow.workflow method)": [[803, "skbio.workflow.Workflow.__le__"]], "__lt__() (skbio.workflow.workflow method)": [[804, "skbio.workflow.Workflow.__lt__"]], "__ne__() (skbio.workflow.workflow method)": [[805, "skbio.workflow.Workflow.__ne__"]], "__str__() (skbio.workflow.workflow method)": [[806, "skbio.workflow.Workflow.__str__"]], "initialize_state() (skbio.workflow.workflow method)": [[807, "skbio.workflow.Workflow.initialize_state"]], "method (class in skbio.workflow)": [[808, "skbio.workflow.method"]], "__call__() (skbio.workflow.method method)": [[809, "skbio.workflow.method.__call__"]], "__eq__() (skbio.workflow.method method)": [[810, "skbio.workflow.method.__eq__"]], "__ge__() (skbio.workflow.method method)": [[811, "skbio.workflow.method.__ge__"]], "__getstate__() (skbio.workflow.method method)": [[812, "skbio.workflow.method.__getstate__"]], "__gt__() (skbio.workflow.method method)": [[813, "skbio.workflow.method.__gt__"]], "__hash__() (skbio.workflow.method method)": [[814, "skbio.workflow.method.__hash__"]], "__le__() (skbio.workflow.method method)": [[815, "skbio.workflow.method.__le__"]], "__lt__() (skbio.workflow.method method)": [[816, "skbio.workflow.method.__lt__"]], "__ne__() (skbio.workflow.method method)": [[817, "skbio.workflow.method.__ne__"]], "__str__() (skbio.workflow.method method)": [[818, "skbio.workflow.method.__str__"]], "requires (class in skbio.workflow)": [[819, "skbio.workflow.requires"]], "__call__() (skbio.workflow.requires method)": [[820, "skbio.workflow.requires.__call__"]], "__eq__() (skbio.workflow.requires method)": [[821, "skbio.workflow.requires.__eq__"]], "__ge__() (skbio.workflow.requires method)": [[822, "skbio.workflow.requires.__ge__"]], "__getstate__() (skbio.workflow.requires method)": [[823, "skbio.workflow.requires.__getstate__"]], "__gt__() (skbio.workflow.requires method)": [[824, "skbio.workflow.requires.__gt__"]], "__hash__() (skbio.workflow.requires method)": [[825, "skbio.workflow.requires.__hash__"]], "__le__() (skbio.workflow.requires method)": [[826, "skbio.workflow.requires.__le__"]], "__lt__() (skbio.workflow.requires method)": [[827, "skbio.workflow.requires.__lt__"]], "__ne__() (skbio.workflow.requires method)": [[828, "skbio.workflow.requires.__ne__"]], "__str__() (skbio.workflow.requires method)": [[829, "skbio.workflow.requires.__str__"]], "skbio.io": [[831, "module-skbio.io"]], "skbio.metadata": [[832, "module-skbio.metadata"]], "skbio.sequence": [[833, "module-skbio.sequence"]], "skbio.stats": [[834, "module-skbio.stats"]], "skbio.tree": [[835, "module-skbio.tree"]], "skbio.util": [[837, "module-skbio.util"]], "skbio.workflow": [[838, "module-skbio.workflow"]]}})