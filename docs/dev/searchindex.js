Search.setIndex({"alltitles": {"Adding Node Information": [[137, "adding-node-information"]], "Advanced Label and Length Rules": [[137, "advanced-label-and-length-rules"]], "Alignment Section": [[129, "alignment-section"], [139, "alignment-section"]], "Alignment algorithms": [[0, "alignment-algorithms"]], "Alignment data structure": [[0, "alignment-data-structure"]], "Alignment structure": [[0, "alignment-structure"]], "Alpha diversity": [[1, "alpha-diversity"]], "Alpha diversity measures (skbio.diversity.alpha)": [[69, "alpha-diversity-measures-skbio-diversity-alpha"]], "Application of Rules": [[137, "application-of-rules"]], "BIOM table": [[1006, "biom-table"]], "BIOM-Format (skbio.io.format.biom)": [[126, "biom-format-skbio-io-format-biom"]], "BLAST Column Types": [[127, "blast-column-types"], [128, "blast-column-types"]], "BLAST+6 format (skbio.io.format.blast6)": [[127, "blast-6-format-skbio-io-format-blast6"]], "BLAST+7 format (skbio.io.format.blast7)": [[128, "blast-7-format-skbio-io-format-blast7"]], "Basic Symbols": [[137, "basic-symbols"]], "Beta diversity": [[1, "beta-diversity"]], "Beta diversity measures (skbio.diversity.beta)": [[105, "beta-diversity-measures-skbio-diversity-beta"]], "Biological Embeddings (skbio.embedding)": [[2, "biological-embeddings-skbio-embedding"]], "Biological Sequences (skbio.sequence)": [[1004, "biological-sequences-skbio-sequence"]], "Canonical analysis": [[762, "canonical-analysis"]], "Categorical Variable Stats": [[613, "categorical-variable-stats"]], "Caveats": [[137, "caveats"]], "Classes": [[144, "classes"], [613, "classes"], [672, "classes"], [1009, "classes"]], "Clustal format (skbio.io.format.clustal)": [[129, "clustal-format-skbio-io-format-clustal"]], "Column Types": [[141, "column-types"]], "Comments and Empty Rows": [[141, "comments-and-empty-rows"]], "Community Diversity (skbio.diversity)": [[1, "community-diversity-skbio-diversity"]], "Composition Statistics (skbio.stats.composition)": [[592, "composition-statistics-skbio-stats-composition"]], "Composition statistics": [[1005, "composition-statistics"]], "Continuous Variable Stats": [[613, "continuous-variable-stats"]], "Cophylogenetic methods": [[670, "cophylogenetic-methods"]], "Correspondence analysis": [[762, "correspondence-analysis"]], "Count vectors": [[1, "count-vectors"]], "Creating a new format for scikit-bio": [[144, "creating-a-new-format-for-scikit-bio"]], "Data Table (skbio.table)": [[1006, "data-table-skbio-table"]], "Data structures": [[613, "data-structures"]], "Data subsampling": [[1005, "data-subsampling"]], "Decorators": [[1009, "decorators"]], "Deprecated functionality": [[0, "deprecated-functionality"]], "Develop custom formats": [[1002, "develop-custom-formats"]], "Developer warnings": [[1008, "developer-warnings"]], "Distance Matrix Comparisons": [[613, "distance-matrix-comparisons"]], "Distance calculation": [[1004, "distance-calculation"]], "Distance matrix statistics": [[1005, "distance-matrix-statistics"]], "Distance matrix-based statistics (skbio.stats.distance)": [[613, "distance-matrix-based-statistics-skbio-stats-distance"]], "Distance-based statistics": [[613, "distance-based-statistics"]], "EMBL format (skbio.io.format.embl)": [[131, "embl-format-skbio-io-format-embl"]], "Embedding format (skbio.io.format.embed).": [[130, "embedding-format-skbio-io-format-embed"]], "Embedding types": [[2, "embedding-types"]], "Empirical Power Estimation (skbio.stats.power)": [[787, "empirical-power-estimation-skbio-stats-power"]], "Evolutionary statistics (skbio.stats.evolve)": [[670, "evolutionary-statistics-skbio-stats-evolve"]], "Example data": [[1006, "example-data"]], "Examples": [[126, "examples"], [127, "examples"], [128, "examples"], [129, "examples"], [130, "examples"], [131, "examples"], [132, "examples"], [133, "examples"], [134, "examples"], [135, "examples"], [137, "examples"], [138, "examples"], [139, "examples"], [140, "examples"], [142, "examples"], [143, "examples"], [613, "examples"], [672, "examples"], [762, "examples"], [787, "examples"]], "Exceptions": [[144, "exceptions"], [613, "exceptions"], [1007, "exceptions"]], "Exceptions and warnings": [[1002, "exceptions-and-warnings"]], "Explanation": [[137, "explanation"]], "FASTA Format": [[132, "fasta-format"]], "FASTA/QUAL format (skbio.io.format.fasta)": [[132, "fasta-qual-format-skbio-io-format-fasta"]], "FASTQ format (skbio.io.format.fastq)": [[133, "fastq-format-skbio-io-format-fastq"]], "FEATURES section": [[134, "features-section"]], "FT section": [[131, "ft-section"]], "Feature Level Products": [[131, "feature-level-products"]], "Footer": [[142, "footer"]], "Formal Grammar": [[137, "formal-grammar"]], "Format Parameters": [[127, "format-parameters"], [129, "format-parameters"], [132, "format-parameters"], [133, "format-parameters"], [134, "format-parameters"], [135, "format-parameters"], [136, "format-parameters"], [137, "format-parameters"], [139, "format-parameters"], [140, "format-parameters"], [142, "format-parameters"], [143, "format-parameters"]], "Format Specification": [[125, "format-specification"], [126, "format-specification"], [127, "format-specification"], [128, "format-specification"], [129, "format-specification"], [130, "format-specification"], [131, "format-specification"], [132, "format-specification"], [133, "format-specification"], [134, "format-specification"], [135, "format-specification"], [136, "format-specification"], [137, "format-specification"], [138, "format-specification"], [139, "format-specification"], [140, "format-specification"], [141, "format-specification"], [142, "format-specification"], [143, "format-specification"]], "Format Support": [[125, "format-support"], [126, "format-support"], [127, "format-support"], [128, "format-support"], [129, "format-support"], [130, "format-support"], [131, "format-support"], [132, "format-support"], [133, "format-support"], [134, "format-support"], [135, "format-support"], [136, "format-support"], [137, "format-support"], [138, "format-support"], [139, "format-support"], [140, "format-support"], [141, "format-support"], [142, "format-support"], [143, "format-support"]], "Functions": [[69, "functions"], [105, "functions"], [144, "functions"], [183, "functions"], [589, "functions"], [592, "functions"], [613, "functions"], [670, "functions"], [787, "functions"]], "GC metadata": [[142, "gc-metadata"]], "GF metadata": [[142, "gf-metadata"]], "GFF3 format (skbio.io.format.gff3)": [[135, "gff3-format-skbio-io-format-gff3"]], "GR metadata": [[142, "gr-metadata"]], "GS metadata": [[142, "gs-metadata"]], "GenBank format (skbio.io.format.genbank)": [[134, "genbank-format-skbio-io-format-genbank"]], "Generator and TabularMSA Reader Parameters": [[132, "generator-and-tabularmsa-reader-parameters"]], "Generators Only": [[140, "generators-only"]], "Gradient analyses (skbio.stats.gradient)": [[672, "gradient-analyses-skbio-stats-gradient"]], "Header": [[142, "header"]], "Header Section": [[139, "header-section"]], "I/O Registry (skbio.io.registry)": [[144, "i-o-registry-skbio-io-registry"]], "I/O utilities (skbio.io.util)": [[183, "i-o-utilities-skbio-io-util"]], "Identifier Column": [[141, "identifier-column"]], "Inline Comments": [[137, "inline-comments"]], "Input and Output (skbio.io)": [[1002, "input-and-output-skbio-io"]], "Input validation": [[1, "input-validation"]], "Interval metadata": [[1003, "interval-metadata"]], "Introduction": [[1, "introduction"]], "Labeled square matrix format (skbio.io.format.lsmat)": [[136, "labeled-square-matrix-format-skbio-io-format-lsmat"]], "Leading and trailing whitespace characters": [[141, "leading-and-trailing-whitespace-characters"]], "Location string": [[134, "location-string"]], "Metadata": [[142, "metadata"]], "Metadata (skbio.metadata)": [[1003, "metadata-skbio-metadata"]], "Metadata Columns": [[141, "metadata-columns"]], "Metadata Formatting Requirements": [[141, "metadata-formatting-requirements"]], "Metadata Validation": [[141, "metadata-validation"]], "Metadata columns": [[1003, "metadata-columns"]], "Miscellaneous functionality": [[1008, "miscellaneous-functionality"]], "Multidimensional scaling": [[762, "multidimensional-scaling"]], "Multiple Sequence Alignment": [[142, "multiple-sequence-alignment"]], "Multivariate Statistics (skbio.stats)": [[1005, "multivariate-statistics-skbio-stats"]], "Newick format (skbio.io.format.newick)": [[137, "newick-format-skbio-io-format-newick"]], "Number Formatting": [[141, "number-formatting"]], "ORIGIN section": [[134, "origin-section"]], "Ordination methods": [[1005, "ordination-methods"]], "Ordination methods (skbio.stats.ordination)": [[762, "ordination-methods-skbio-stats-ordination"]], "Ordination results": [[762, "ordination-results"]], "Ordination results format (skbio.io.format.ordination)": [[138, "ordination-results-format-skbio-io-format-ordination"]], "Other statistical methods": [[1005, "other-statistical-methods"]], "PHYLIP multiple sequence alignment format (skbio.io.format.phylip)": [[139, "phylip-multiple-sequence-alignment-format-skbio-io-format-phylip"]], "Phylogenetic reconstruction": [[1007, "phylogenetic-reconstruction"]], "QSeq format (skbio.io.format.qseq)": [[140, "qseq-format-skbio-io-format-qseq"]], "QUAL File Parameter (Readers and Writers)": [[132, "qual-file-parameter-readers-and-writers"]], "QUAL Format": [[132, "qual-format"]], "Quality Score Variants": [[133, "quality-score-variants"]], "Read/write files": [[1002, "read-write-files"]], "Reader-specific Parameters": [[132, "reader-specific-parameters"], [134, "reader-specific-parameters"], [135, "reader-specific-parameters"]], "Reading EMBL Files": [[131, "reading-embl-files"]], "Reading EMBL Files using generators": [[131, "reading-embl-files-using-generators"]], "Reading and Writing FASTA Files": [[132, "reading-and-writing-fasta-files"]], "Reading and Writing FASTA/QUAL Files": [[132, "reading-and-writing-fasta-qual-files"]], "Reading and Writing GenBank Files": [[134, "reading-and-writing-genbank-files"]], "Reading files into scikit-bio": [[1002, "reading-files-into-scikit-bio"]], "Recommendations for Identifiers": [[141, "recommendations-for-identifiers"]], "References": [[125, "references"], [126, "references"], [127, "references"], [128, "references"], [129, "references"], [131, "references"], [132, "references"], [133, "references"], [134, "references"], [135, "references"], [137, "references"], [139, "references"], [140, "references"], [142, "references"], [143, "references"], [592, "references"], [613, "references"], [762, "references"]], "Reserved Keyword Arguments": [[144, "reserved-keyword-arguments"]], "SQ section": [[131, "sq-section"]], "Sample metadata": [[1003, "sample-metadata"]], "Sections before FEATURES": [[134, "sections-before-features"]], "Sections before FH (Feature Header)": [[131, "sections-before-fh-feature-header"]], "Sequence Alignments (skbio.alignment)": [[0, "sequence-alignments-skbio-alignment"]], "Sequence Data": [[132, "sequence-data"]], "Sequence Header": [[132, "sequence-header"]], "Sequence Reader Parameters": [[132, "sequence-reader-parameters"]], "Sequence distance metrics (skbio.sequence.distance)": [[589, "sequence-distance-metrics-skbio-sequence-distance"]], "Sequence types": [[1004, "sequence-types"]], "Sequence utilities": [[1004, "sequence-utilities"]], "Simple binary dissimilarity matrix format (skbio.io.format.binary_dm)": [[125, "simple-binary-dissimilarity-matrix-format-skbio-io-format-binary-dm"]], "Specifying a diversity metric": [[1, "specifying-a-diversity-metric"]], "Stockholm format (skbio.io.format.stockholm)": [[142, "stockholm-format-skbio-io-format-stockholm"]], "Supported file formats": [[1002, "supported-file-formats"]], "Taxdump format (skbio.io.format.taxdump)": [[143, "taxdump-format-skbio-io-format-taxdump"]], "Testing functionality": [[1008, "testing-functionality"]], "Tree structure and operations": [[1007, "tree-structure-and-operations"]], "Tree utilities": [[1007, "tree-utilities"]], "Trees and Phylogenetics (skbio.tree)": [[1007, "trees-and-phylogenetics-skbio-tree"]], "Tutorial": [[0, "tutorial"], [1, "tutorial"], [1002, "tutorial"], [1004, "tutorial"], [1007, "tutorial"], [1009, "tutorial"]], "Using the optimized alignment algorithm": [[0, "using-the-optimized-alignment-algorithm"]], "Using the slow alignment algorithm": [[0, "using-the-slow-alignment-algorithm"]], "Utilities for Developers (skbio.util)": [[1008, "utilities-for-developers-skbio-util"]], "Utility functions": [[762, "utility-functions"]], "What kinds of files scikit-bio can use": [[1002, "what-kinds-of-files-scikit-bio-can-use"]], "Whitespace": [[137, "whitespace"]], "Workflow construction (skbio.workflow)": [[1009, "workflow-construction-skbio-workflow"]], "Writer-specific Parameters": [[132, "writer-specific-parameters"], [135, "writer-specific-parameters"]], "Writing files from scikit-bio": [[1002, "writing-files-from-scikit-bio"]], "division.dmp": [[143, "division-dmp"]], "gencode.dmp": [[143, "gencode-dmp"]], "names.dmp": [[143, "names-dmp"]], "nodes.dmp": [[143, "nodes-dmp"]], "scikit-bio 0.6.1-dev documentation": [[1001, "scikit-bio-version-documentation"]], "skbio.alignment.AlignmentStructure": [[3, "skbio-alignment-alignmentstructure"]], "skbio.alignment.AlignmentStructure.__eq__": [[4, "skbio-alignment-alignmentstructure-eq"]], "skbio.alignment.AlignmentStructure.__ge__": [[5, "skbio-alignment-alignmentstructure-ge"]], "skbio.alignment.AlignmentStructure.__getitem__": [[6, "skbio-alignment-alignmentstructure-getitem"]], "skbio.alignment.AlignmentStructure.__getstate__": [[7, "skbio-alignment-alignmentstructure-getstate"]], "skbio.alignment.AlignmentStructure.__gt__": [[8, "skbio-alignment-alignmentstructure-gt"]], "skbio.alignment.AlignmentStructure.__hash__": [[9, "skbio-alignment-alignmentstructure-hash"]], "skbio.alignment.AlignmentStructure.__le__": [[10, "skbio-alignment-alignmentstructure-le"]], "skbio.alignment.AlignmentStructure.__lt__": [[11, "skbio-alignment-alignmentstructure-lt"]], "skbio.alignment.AlignmentStructure.__ne__": [[12, "skbio-alignment-alignmentstructure-ne"]], "skbio.alignment.AlignmentStructure.__setstate__": [[13, "skbio-alignment-alignmentstructure-setstate"]], "skbio.alignment.AlignmentStructure.__str__": [[14, "skbio-alignment-alignmentstructure-str"]], "skbio.alignment.AlignmentStructure.is_zero_based": [[15, "skbio-alignment-alignmentstructure-is-zero-based"]], "skbio.alignment.AlignmentStructure.set_zero_based": [[16, "skbio-alignment-alignmentstructure-set-zero-based"]], "skbio.alignment.StripedSmithWaterman": [[17, "skbio-alignment-stripedsmithwaterman"]], "skbio.alignment.StripedSmithWaterman.__call__": [[18, "skbio-alignment-stripedsmithwaterman-call"]], "skbio.alignment.StripedSmithWaterman.__eq__": [[19, "skbio-alignment-stripedsmithwaterman-eq"]], "skbio.alignment.StripedSmithWaterman.__ge__": [[20, "skbio-alignment-stripedsmithwaterman-ge"]], "skbio.alignment.StripedSmithWaterman.__getstate__": [[21, "skbio-alignment-stripedsmithwaterman-getstate"]], "skbio.alignment.StripedSmithWaterman.__gt__": [[22, "skbio-alignment-stripedsmithwaterman-gt"]], "skbio.alignment.StripedSmithWaterman.__hash__": [[23, "skbio-alignment-stripedsmithwaterman-hash"]], "skbio.alignment.StripedSmithWaterman.__le__": [[24, "skbio-alignment-stripedsmithwaterman-le"]], "skbio.alignment.StripedSmithWaterman.__lt__": [[25, "skbio-alignment-stripedsmithwaterman-lt"]], "skbio.alignment.StripedSmithWaterman.__ne__": [[26, "skbio-alignment-stripedsmithwaterman-ne"]], "skbio.alignment.StripedSmithWaterman.__setstate__": [[27, "skbio-alignment-stripedsmithwaterman-setstate"]], "skbio.alignment.StripedSmithWaterman.__str__": [[28, "skbio-alignment-stripedsmithwaterman-str"]], "skbio.alignment.TabularMSA": [[29, "skbio-alignment-tabularmsa"]], "skbio.alignment.TabularMSA.__bool__": [[30, "skbio-alignment-tabularmsa-bool"]], "skbio.alignment.TabularMSA.__contains__": [[31, "skbio-alignment-tabularmsa-contains"]], "skbio.alignment.TabularMSA.__copy__": [[32, "skbio-alignment-tabularmsa-copy"]], "skbio.alignment.TabularMSA.__deepcopy__": [[33, "skbio-alignment-tabularmsa-deepcopy"]], "skbio.alignment.TabularMSA.__eq__": [[34, "skbio-alignment-tabularmsa-eq"]], "skbio.alignment.TabularMSA.__ge__": [[35, "skbio-alignment-tabularmsa-ge"]], "skbio.alignment.TabularMSA.__getitem__": [[36, "skbio-alignment-tabularmsa-getitem"]], "skbio.alignment.TabularMSA.__getstate__": [[37, "skbio-alignment-tabularmsa-getstate"]], "skbio.alignment.TabularMSA.__gt__": [[38, "skbio-alignment-tabularmsa-gt"]], "skbio.alignment.TabularMSA.__iter__": [[39, "skbio-alignment-tabularmsa-iter"]], "skbio.alignment.TabularMSA.__le__": [[40, "skbio-alignment-tabularmsa-le"]], "skbio.alignment.TabularMSA.__len__": [[41, "skbio-alignment-tabularmsa-len"]], "skbio.alignment.TabularMSA.__lt__": [[42, "skbio-alignment-tabularmsa-lt"]], "skbio.alignment.TabularMSA.__ne__": [[43, "skbio-alignment-tabularmsa-ne"]], "skbio.alignment.TabularMSA.__reversed__": [[44, "skbio-alignment-tabularmsa-reversed"]], "skbio.alignment.TabularMSA.__str__": [[45, "skbio-alignment-tabularmsa-str"]], "skbio.alignment.TabularMSA.append": [[46, "skbio-alignment-tabularmsa-append"]], "skbio.alignment.TabularMSA.consensus": [[47, "skbio-alignment-tabularmsa-consensus"]], "skbio.alignment.TabularMSA.conservation": [[48, "skbio-alignment-tabularmsa-conservation"]], "skbio.alignment.TabularMSA.extend": [[49, "skbio-alignment-tabularmsa-extend"]], "skbio.alignment.TabularMSA.from_dict": [[50, "skbio-alignment-tabularmsa-from-dict"]], "skbio.alignment.TabularMSA.gap_frequencies": [[51, "skbio-alignment-tabularmsa-gap-frequencies"]], "skbio.alignment.TabularMSA.has_metadata": [[52, "skbio-alignment-tabularmsa-has-metadata"]], "skbio.alignment.TabularMSA.has_positional_metadata": [[53, "skbio-alignment-tabularmsa-has-positional-metadata"]], "skbio.alignment.TabularMSA.iter_positions": [[54, "skbio-alignment-tabularmsa-iter-positions"]], "skbio.alignment.TabularMSA.join": [[55, "skbio-alignment-tabularmsa-join"]], "skbio.alignment.TabularMSA.read": [[56, "skbio-alignment-tabularmsa-read"]], "skbio.alignment.TabularMSA.reassign_index": [[57, "skbio-alignment-tabularmsa-reassign-index"]], "skbio.alignment.TabularMSA.sort": [[58, "skbio-alignment-tabularmsa-sort"]], "skbio.alignment.TabularMSA.to_dict": [[59, "skbio-alignment-tabularmsa-to-dict"]], "skbio.alignment.TabularMSA.write": [[60, "skbio-alignment-tabularmsa-write"]], "skbio.alignment.global_pairwise_align": [[61, "skbio-alignment-global-pairwise-align"]], "skbio.alignment.global_pairwise_align_nucleotide": [[62, "skbio-alignment-global-pairwise-align-nucleotide"]], "skbio.alignment.global_pairwise_align_protein": [[63, "skbio-alignment-global-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align": [[64, "skbio-alignment-local-pairwise-align"]], "skbio.alignment.local_pairwise_align_nucleotide": [[65, "skbio-alignment-local-pairwise-align-nucleotide"]], "skbio.alignment.local_pairwise_align_protein": [[66, "skbio-alignment-local-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align_ssw": [[67, "skbio-alignment-local-pairwise-align-ssw"]], "skbio.alignment.make_identity_substitution_matrix": [[68, "skbio-alignment-make-identity-substitution-matrix"]], "skbio.diversity.alpha.ace": [[70, "skbio-diversity-alpha-ace"]], "skbio.diversity.alpha.berger_parker_d": [[71, "skbio-diversity-alpha-berger-parker-d"]], "skbio.diversity.alpha.brillouin_d": [[72, "skbio-diversity-alpha-brillouin-d"]], "skbio.diversity.alpha.chao1": [[73, "skbio-diversity-alpha-chao1"]], "skbio.diversity.alpha.chao1_ci": [[74, "skbio-diversity-alpha-chao1-ci"]], "skbio.diversity.alpha.dominance": [[75, "skbio-diversity-alpha-dominance"]], "skbio.diversity.alpha.doubles": [[76, "skbio-diversity-alpha-doubles"]], "skbio.diversity.alpha.enspie": [[77, "skbio-diversity-alpha-enspie"]], "skbio.diversity.alpha.esty_ci": [[78, "skbio-diversity-alpha-esty-ci"]], "skbio.diversity.alpha.faith_pd": [[79, "skbio-diversity-alpha-faith-pd"]], "skbio.diversity.alpha.fisher_alpha": [[80, "skbio-diversity-alpha-fisher-alpha"]], "skbio.diversity.alpha.gini_index": [[81, "skbio-diversity-alpha-gini-index"]], "skbio.diversity.alpha.goods_coverage": [[82, "skbio-diversity-alpha-goods-coverage"]], "skbio.diversity.alpha.heip_e": [[83, "skbio-diversity-alpha-heip-e"]], "skbio.diversity.alpha.kempton_taylor_q": [[84, "skbio-diversity-alpha-kempton-taylor-q"]], "skbio.diversity.alpha.lladser_ci": [[85, "skbio-diversity-alpha-lladser-ci"]], "skbio.diversity.alpha.lladser_pe": [[86, "skbio-diversity-alpha-lladser-pe"]], "skbio.diversity.alpha.margalef": [[87, "skbio-diversity-alpha-margalef"]], "skbio.diversity.alpha.mcintosh_d": [[88, "skbio-diversity-alpha-mcintosh-d"]], "skbio.diversity.alpha.mcintosh_e": [[89, "skbio-diversity-alpha-mcintosh-e"]], "skbio.diversity.alpha.menhinick": [[90, "skbio-diversity-alpha-menhinick"]], "skbio.diversity.alpha.michaelis_menten_fit": [[91, "skbio-diversity-alpha-michaelis-menten-fit"]], "skbio.diversity.alpha.observed_features": [[92, "skbio-diversity-alpha-observed-features"]], "skbio.diversity.alpha.observed_otus": [[93, "skbio-diversity-alpha-observed-otus"]], "skbio.diversity.alpha.osd": [[94, "skbio-diversity-alpha-osd"]], "skbio.diversity.alpha.phydiv": [[95, "skbio-diversity-alpha-phydiv"]], "skbio.diversity.alpha.pielou_e": [[96, "skbio-diversity-alpha-pielou-e"]], "skbio.diversity.alpha.robbins": [[97, "skbio-diversity-alpha-robbins"]], "skbio.diversity.alpha.shannon": [[98, "skbio-diversity-alpha-shannon"]], "skbio.diversity.alpha.simpson": [[99, "skbio-diversity-alpha-simpson"]], "skbio.diversity.alpha.simpson_e": [[100, "skbio-diversity-alpha-simpson-e"]], "skbio.diversity.alpha.singles": [[101, "skbio-diversity-alpha-singles"]], "skbio.diversity.alpha.sobs": [[102, "skbio-diversity-alpha-sobs"]], "skbio.diversity.alpha.strong": [[103, "skbio-diversity-alpha-strong"]], "skbio.diversity.alpha_diversity": [[104, "skbio-diversity-alpha-diversity"]], "skbio.diversity.beta.unweighted_unifrac": [[106, "skbio-diversity-beta-unweighted-unifrac"]], "skbio.diversity.beta.weighted_unifrac": [[107, "skbio-diversity-beta-weighted-unifrac"]], "skbio.diversity.beta_diversity": [[108, "skbio-diversity-beta-diversity"]], "skbio.diversity.block_beta_diversity": [[109, "skbio-diversity-block-beta-diversity"]], "skbio.diversity.get_alpha_diversity_metrics": [[110, "skbio-diversity-get-alpha-diversity-metrics"]], "skbio.diversity.get_beta_diversity_metrics": [[111, "skbio-diversity-get-beta-diversity-metrics"]], "skbio.diversity.partial_beta_diversity": [[112, "skbio-diversity-partial-beta-diversity"]], "skbio.embedding.ProteinEmbedding": [[113, "skbio-embedding-proteinembedding"]], "skbio.embedding.ProteinEmbedding.__eq__": [[114, "skbio-embedding-proteinembedding-eq"]], "skbio.embedding.ProteinEmbedding.__ge__": [[115, "skbio-embedding-proteinembedding-ge"]], "skbio.embedding.ProteinEmbedding.__getstate__": [[116, "skbio-embedding-proteinembedding-getstate"]], "skbio.embedding.ProteinEmbedding.__gt__": [[117, "skbio-embedding-proteinembedding-gt"]], "skbio.embedding.ProteinEmbedding.__hash__": [[118, "skbio-embedding-proteinembedding-hash"]], "skbio.embedding.ProteinEmbedding.__le__": [[119, "skbio-embedding-proteinembedding-le"]], "skbio.embedding.ProteinEmbedding.__lt__": [[120, "skbio-embedding-proteinembedding-lt"]], "skbio.embedding.ProteinEmbedding.__ne__": [[121, "skbio-embedding-proteinembedding-ne"]], "skbio.embedding.ProteinEmbedding.__str__": [[122, "skbio-embedding-proteinembedding-str"]], "skbio.embedding.ProteinEmbedding.read": [[123, "skbio-embedding-proteinembedding-read"]], "skbio.embedding.ProteinEmbedding.write": [[124, "skbio-embedding-proteinembedding-write"]], "skbio.io.registry.Format": [[145, "skbio-io-registry-format"]], "skbio.io.registry.Format.__eq__": [[146, "skbio-io-registry-format-eq"]], "skbio.io.registry.Format.__ge__": [[147, "skbio-io-registry-format-ge"]], "skbio.io.registry.Format.__getstate__": [[148, "skbio-io-registry-format-getstate"]], "skbio.io.registry.Format.__gt__": [[149, "skbio-io-registry-format-gt"]], "skbio.io.registry.Format.__hash__": [[150, "skbio-io-registry-format-hash"]], "skbio.io.registry.Format.__le__": [[151, "skbio-io-registry-format-le"]], "skbio.io.registry.Format.__lt__": [[152, "skbio-io-registry-format-lt"]], "skbio.io.registry.Format.__ne__": [[153, "skbio-io-registry-format-ne"]], "skbio.io.registry.Format.__str__": [[154, "skbio-io-registry-format-str"]], "skbio.io.registry.Format.reader": [[155, "skbio-io-registry-format-reader"]], "skbio.io.registry.Format.sniffer": [[156, "skbio-io-registry-format-sniffer"]], "skbio.io.registry.Format.writer": [[157, "skbio-io-registry-format-writer"]], "skbio.io.registry.IORegistry": [[158, "skbio-io-registry-ioregistry"]], "skbio.io.registry.IORegistry.__eq__": [[159, "skbio-io-registry-ioregistry-eq"]], "skbio.io.registry.IORegistry.__ge__": [[160, "skbio-io-registry-ioregistry-ge"]], "skbio.io.registry.IORegistry.__getstate__": [[161, "skbio-io-registry-ioregistry-getstate"]], "skbio.io.registry.IORegistry.__gt__": [[162, "skbio-io-registry-ioregistry-gt"]], "skbio.io.registry.IORegistry.__hash__": [[163, "skbio-io-registry-ioregistry-hash"]], "skbio.io.registry.IORegistry.__le__": [[164, "skbio-io-registry-ioregistry-le"]], "skbio.io.registry.IORegistry.__lt__": [[165, "skbio-io-registry-ioregistry-lt"]], "skbio.io.registry.IORegistry.__ne__": [[166, "skbio-io-registry-ioregistry-ne"]], "skbio.io.registry.IORegistry.__str__": [[167, "skbio-io-registry-ioregistry-str"]], "skbio.io.registry.IORegistry.add_format": [[168, "skbio-io-registry-ioregistry-add-format"]], "skbio.io.registry.IORegistry.create_format": [[169, "skbio-io-registry-ioregistry-create-format"]], "skbio.io.registry.IORegistry.get_reader": [[170, "skbio-io-registry-ioregistry-get-reader"]], "skbio.io.registry.IORegistry.get_sniffer": [[171, "skbio-io-registry-ioregistry-get-sniffer"]], "skbio.io.registry.IORegistry.get_writer": [[172, "skbio-io-registry-ioregistry-get-writer"]], "skbio.io.registry.IORegistry.list_read_formats": [[173, "skbio-io-registry-ioregistry-list-read-formats"]], "skbio.io.registry.IORegistry.list_write_formats": [[174, "skbio-io-registry-ioregistry-list-write-formats"]], "skbio.io.registry.IORegistry.monkey_patch": [[175, "skbio-io-registry-ioregistry-monkey-patch"]], "skbio.io.registry.IORegistry.read": [[176, "skbio-io-registry-ioregistry-read"]], "skbio.io.registry.IORegistry.sniff": [[177, "skbio-io-registry-ioregistry-sniff"]], "skbio.io.registry.IORegistry.write": [[178, "skbio-io-registry-ioregistry-write"]], "skbio.io.registry.create_format": [[179, "skbio-io-registry-create-format"]], "skbio.io.registry.read": [[180, "skbio-io-registry-read"]], "skbio.io.registry.sniff": [[181, "skbio-io-registry-sniff"]], "skbio.io.registry.write": [[182, "skbio-io-registry-write"]], "skbio.io.util.open": [[184, "skbio-io-util-open"]], "skbio.io.util.open_file": [[185, "skbio-io-util-open-file"]], "skbio.io.util.open_files": [[186, "skbio-io-util-open-files"]], "skbio.metadata.CategoricalMetadataColumn": [[187, "skbio-metadata-categoricalmetadatacolumn"]], "skbio.metadata.CategoricalMetadataColumn.__eq__": [[188, "skbio-metadata-categoricalmetadatacolumn-eq"]], "skbio.metadata.CategoricalMetadataColumn.__ge__": [[189, "skbio-metadata-categoricalmetadatacolumn-ge"]], "skbio.metadata.CategoricalMetadataColumn.__getstate__": [[190, "skbio-metadata-categoricalmetadatacolumn-getstate"]], "skbio.metadata.CategoricalMetadataColumn.__gt__": [[191, "skbio-metadata-categoricalmetadatacolumn-gt"]], "skbio.metadata.CategoricalMetadataColumn.__le__": [[192, "skbio-metadata-categoricalmetadatacolumn-le"]], "skbio.metadata.CategoricalMetadataColumn.__lt__": [[193, "skbio-metadata-categoricalmetadatacolumn-lt"]], "skbio.metadata.CategoricalMetadataColumn.__ne__": [[194, "skbio-metadata-categoricalmetadatacolumn-ne"]], "skbio.metadata.CategoricalMetadataColumn.__str__": [[195, "skbio-metadata-categoricalmetadatacolumn-str"]], "skbio.metadata.CategoricalMetadataColumn.drop_missing_values": [[196, "skbio-metadata-categoricalmetadatacolumn-drop-missing-values"]], "skbio.metadata.CategoricalMetadataColumn.filter_ids": [[197, "skbio-metadata-categoricalmetadatacolumn-filter-ids"]], "skbio.metadata.CategoricalMetadataColumn.get_ids": [[198, "skbio-metadata-categoricalmetadatacolumn-get-ids"]], "skbio.metadata.CategoricalMetadataColumn.get_missing": [[199, "skbio-metadata-categoricalmetadatacolumn-get-missing"]], "skbio.metadata.CategoricalMetadataColumn.get_value": [[200, "skbio-metadata-categoricalmetadatacolumn-get-value"]], "skbio.metadata.CategoricalMetadataColumn.has_missing_values": [[201, "skbio-metadata-categoricalmetadatacolumn-has-missing-values"]], "skbio.metadata.CategoricalMetadataColumn.save": [[202, "skbio-metadata-categoricalmetadatacolumn-save"]], "skbio.metadata.CategoricalMetadataColumn.to_dataframe": [[203, "skbio-metadata-categoricalmetadatacolumn-to-dataframe"]], "skbio.metadata.CategoricalMetadataColumn.to_series": [[204, "skbio-metadata-categoricalmetadatacolumn-to-series"]], "skbio.metadata.Interval": [[205, "skbio-metadata-interval"]], "skbio.metadata.Interval.__eq__": [[206, "skbio-metadata-interval-eq"]], "skbio.metadata.Interval.__ge__": [[207, "skbio-metadata-interval-ge"]], "skbio.metadata.Interval.__getstate__": [[208, "skbio-metadata-interval-getstate"]], "skbio.metadata.Interval.__gt__": [[209, "skbio-metadata-interval-gt"]], "skbio.metadata.Interval.__le__": [[210, "skbio-metadata-interval-le"]], "skbio.metadata.Interval.__lt__": [[211, "skbio-metadata-interval-lt"]], "skbio.metadata.Interval.__ne__": [[212, "skbio-metadata-interval-ne"]], "skbio.metadata.Interval.__str__": [[213, "skbio-metadata-interval-str"]], "skbio.metadata.Interval.drop": [[214, "skbio-metadata-interval-drop"]], "skbio.metadata.IntervalMetadata": [[215, "skbio-metadata-intervalmetadata"]], "skbio.metadata.IntervalMetadata.__copy__": [[216, "skbio-metadata-intervalmetadata-copy"]], "skbio.metadata.IntervalMetadata.__deepcopy__": [[217, "skbio-metadata-intervalmetadata-deepcopy"]], "skbio.metadata.IntervalMetadata.__eq__": [[218, "skbio-metadata-intervalmetadata-eq"]], "skbio.metadata.IntervalMetadata.__ge__": [[219, "skbio-metadata-intervalmetadata-ge"]], "skbio.metadata.IntervalMetadata.__getstate__": [[220, "skbio-metadata-intervalmetadata-getstate"]], "skbio.metadata.IntervalMetadata.__gt__": [[221, "skbio-metadata-intervalmetadata-gt"]], "skbio.metadata.IntervalMetadata.__le__": [[222, "skbio-metadata-intervalmetadata-le"]], "skbio.metadata.IntervalMetadata.__lt__": [[223, "skbio-metadata-intervalmetadata-lt"]], "skbio.metadata.IntervalMetadata.__ne__": [[224, "skbio-metadata-intervalmetadata-ne"]], "skbio.metadata.IntervalMetadata.__str__": [[225, "skbio-metadata-intervalmetadata-str"]], "skbio.metadata.IntervalMetadata.add": [[226, "skbio-metadata-intervalmetadata-add"]], "skbio.metadata.IntervalMetadata.concat": [[227, "skbio-metadata-intervalmetadata-concat"]], "skbio.metadata.IntervalMetadata.drop": [[228, "skbio-metadata-intervalmetadata-drop"]], "skbio.metadata.IntervalMetadata.merge": [[229, "skbio-metadata-intervalmetadata-merge"]], "skbio.metadata.IntervalMetadata.query": [[230, "skbio-metadata-intervalmetadata-query"]], "skbio.metadata.IntervalMetadata.read": [[231, "skbio-metadata-intervalmetadata-read"]], "skbio.metadata.IntervalMetadata.sort": [[232, "skbio-metadata-intervalmetadata-sort"]], "skbio.metadata.IntervalMetadata.write": [[233, "skbio-metadata-intervalmetadata-write"]], "skbio.metadata.MetadataColumn": [[234, "skbio-metadata-metadatacolumn"]], "skbio.metadata.MetadataColumn.__eq__": [[235, "skbio-metadata-metadatacolumn-eq"]], "skbio.metadata.MetadataColumn.__ge__": [[236, "skbio-metadata-metadatacolumn-ge"]], "skbio.metadata.MetadataColumn.__getstate__": [[237, "skbio-metadata-metadatacolumn-getstate"]], "skbio.metadata.MetadataColumn.__gt__": [[238, "skbio-metadata-metadatacolumn-gt"]], "skbio.metadata.MetadataColumn.__le__": [[239, "skbio-metadata-metadatacolumn-le"]], "skbio.metadata.MetadataColumn.__lt__": [[240, "skbio-metadata-metadatacolumn-lt"]], "skbio.metadata.MetadataColumn.__ne__": [[241, "skbio-metadata-metadatacolumn-ne"]], "skbio.metadata.MetadataColumn.__str__": [[242, "skbio-metadata-metadatacolumn-str"]], "skbio.metadata.MetadataColumn.drop_missing_values": [[243, "skbio-metadata-metadatacolumn-drop-missing-values"]], "skbio.metadata.MetadataColumn.filter_ids": [[244, "skbio-metadata-metadatacolumn-filter-ids"]], "skbio.metadata.MetadataColumn.get_ids": [[245, "skbio-metadata-metadatacolumn-get-ids"]], "skbio.metadata.MetadataColumn.get_missing": [[246, "skbio-metadata-metadatacolumn-get-missing"]], "skbio.metadata.MetadataColumn.get_value": [[247, "skbio-metadata-metadatacolumn-get-value"]], "skbio.metadata.MetadataColumn.has_missing_values": [[248, "skbio-metadata-metadatacolumn-has-missing-values"]], "skbio.metadata.MetadataColumn.save": [[249, "skbio-metadata-metadatacolumn-save"]], "skbio.metadata.MetadataColumn.to_dataframe": [[250, "skbio-metadata-metadatacolumn-to-dataframe"]], "skbio.metadata.MetadataColumn.to_series": [[251, "skbio-metadata-metadatacolumn-to-series"]], "skbio.metadata.NumericMetadataColumn": [[252, "skbio-metadata-numericmetadatacolumn"]], "skbio.metadata.NumericMetadataColumn.__eq__": [[253, "skbio-metadata-numericmetadatacolumn-eq"]], "skbio.metadata.NumericMetadataColumn.__ge__": [[254, "skbio-metadata-numericmetadatacolumn-ge"]], "skbio.metadata.NumericMetadataColumn.__getstate__": [[255, "skbio-metadata-numericmetadatacolumn-getstate"]], "skbio.metadata.NumericMetadataColumn.__gt__": [[256, "skbio-metadata-numericmetadatacolumn-gt"]], "skbio.metadata.NumericMetadataColumn.__le__": [[257, "skbio-metadata-numericmetadatacolumn-le"]], "skbio.metadata.NumericMetadataColumn.__lt__": [[258, "skbio-metadata-numericmetadatacolumn-lt"]], "skbio.metadata.NumericMetadataColumn.__ne__": [[259, "skbio-metadata-numericmetadatacolumn-ne"]], "skbio.metadata.NumericMetadataColumn.__str__": [[260, "skbio-metadata-numericmetadatacolumn-str"]], "skbio.metadata.NumericMetadataColumn.drop_missing_values": [[261, "skbio-metadata-numericmetadatacolumn-drop-missing-values"]], "skbio.metadata.NumericMetadataColumn.filter_ids": [[262, "skbio-metadata-numericmetadatacolumn-filter-ids"]], "skbio.metadata.NumericMetadataColumn.get_ids": [[263, "skbio-metadata-numericmetadatacolumn-get-ids"]], "skbio.metadata.NumericMetadataColumn.get_missing": [[264, "skbio-metadata-numericmetadatacolumn-get-missing"]], "skbio.metadata.NumericMetadataColumn.get_value": [[265, "skbio-metadata-numericmetadatacolumn-get-value"]], "skbio.metadata.NumericMetadataColumn.has_missing_values": [[266, "skbio-metadata-numericmetadatacolumn-has-missing-values"]], "skbio.metadata.NumericMetadataColumn.save": [[267, "skbio-metadata-numericmetadatacolumn-save"]], "skbio.metadata.NumericMetadataColumn.to_dataframe": [[268, "skbio-metadata-numericmetadatacolumn-to-dataframe"]], "skbio.metadata.NumericMetadataColumn.to_series": [[269, "skbio-metadata-numericmetadatacolumn-to-series"]], "skbio.metadata.SampleMetadata": [[270, "skbio-metadata-samplemetadata"]], "skbio.metadata.SampleMetadata.__eq__": [[271, "skbio-metadata-samplemetadata-eq"]], "skbio.metadata.SampleMetadata.__ge__": [[272, "skbio-metadata-samplemetadata-ge"]], "skbio.metadata.SampleMetadata.__getstate__": [[273, "skbio-metadata-samplemetadata-getstate"]], "skbio.metadata.SampleMetadata.__gt__": [[274, "skbio-metadata-samplemetadata-gt"]], "skbio.metadata.SampleMetadata.__le__": [[275, "skbio-metadata-samplemetadata-le"]], "skbio.metadata.SampleMetadata.__lt__": [[276, "skbio-metadata-samplemetadata-lt"]], "skbio.metadata.SampleMetadata.__ne__": [[277, "skbio-metadata-samplemetadata-ne"]], "skbio.metadata.SampleMetadata.__str__": [[278, "skbio-metadata-samplemetadata-str"]], "skbio.metadata.SampleMetadata.filter_columns": [[279, "skbio-metadata-samplemetadata-filter-columns"]], "skbio.metadata.SampleMetadata.filter_ids": [[280, "skbio-metadata-samplemetadata-filter-ids"]], "skbio.metadata.SampleMetadata.get_column": [[281, "skbio-metadata-samplemetadata-get-column"]], "skbio.metadata.SampleMetadata.get_ids": [[282, "skbio-metadata-samplemetadata-get-ids"]], "skbio.metadata.SampleMetadata.load": [[283, "skbio-metadata-samplemetadata-load"]], "skbio.metadata.SampleMetadata.merge": [[284, "skbio-metadata-samplemetadata-merge"]], "skbio.metadata.SampleMetadata.read": [[285, "skbio-metadata-samplemetadata-read"]], "skbio.metadata.SampleMetadata.save": [[286, "skbio-metadata-samplemetadata-save"]], "skbio.metadata.SampleMetadata.to_dataframe": [[287, "skbio-metadata-samplemetadata-to-dataframe"]], "skbio.metadata.SampleMetadata.write": [[288, "skbio-metadata-samplemetadata-write"]], "skbio.sequence.DNA": [[289, "skbio-sequence-dna"]], "skbio.sequence.DNA.__bool__": [[290, "skbio-sequence-dna-bool"]], "skbio.sequence.DNA.__contains__": [[291, "skbio-sequence-dna-contains"]], "skbio.sequence.DNA.__copy__": [[292, "skbio-sequence-dna-copy"]], "skbio.sequence.DNA.__deepcopy__": [[293, "skbio-sequence-dna-deepcopy"]], "skbio.sequence.DNA.__eq__": [[294, "skbio-sequence-dna-eq"]], "skbio.sequence.DNA.__ge__": [[295, "skbio-sequence-dna-ge"]], "skbio.sequence.DNA.__getitem__": [[296, "skbio-sequence-dna-getitem"]], "skbio.sequence.DNA.__getstate__": [[297, "skbio-sequence-dna-getstate"]], "skbio.sequence.DNA.__gt__": [[298, "skbio-sequence-dna-gt"]], "skbio.sequence.DNA.__iter__": [[299, "skbio-sequence-dna-iter"]], "skbio.sequence.DNA.__le__": [[300, "skbio-sequence-dna-le"]], "skbio.sequence.DNA.__len__": [[301, "skbio-sequence-dna-len"]], "skbio.sequence.DNA.__lt__": [[302, "skbio-sequence-dna-lt"]], "skbio.sequence.DNA.__ne__": [[303, "skbio-sequence-dna-ne"]], "skbio.sequence.DNA.__reversed__": [[304, "skbio-sequence-dna-reversed"]], "skbio.sequence.DNA.__str__": [[305, "skbio-sequence-dna-str"]], "skbio.sequence.DNA.complement": [[306, "skbio-sequence-dna-complement"]], "skbio.sequence.DNA.concat": [[307, "skbio-sequence-dna-concat"]], "skbio.sequence.DNA.count": [[308, "skbio-sequence-dna-count"]], "skbio.sequence.DNA.definites": [[309, "skbio-sequence-dna-definites"]], "skbio.sequence.DNA.degap": [[310, "skbio-sequence-dna-degap"]], "skbio.sequence.DNA.degenerates": [[311, "skbio-sequence-dna-degenerates"]], "skbio.sequence.DNA.distance": [[312, "skbio-sequence-dna-distance"]], "skbio.sequence.DNA.expand_degenerates": [[313, "skbio-sequence-dna-expand-degenerates"]], "skbio.sequence.DNA.find_motifs": [[314, "skbio-sequence-dna-find-motifs"]], "skbio.sequence.DNA.find_with_regex": [[315, "skbio-sequence-dna-find-with-regex"]], "skbio.sequence.DNA.frequencies": [[316, "skbio-sequence-dna-frequencies"]], "skbio.sequence.DNA.gaps": [[317, "skbio-sequence-dna-gaps"]], "skbio.sequence.DNA.gc_content": [[318, "skbio-sequence-dna-gc-content"]], "skbio.sequence.DNA.gc_frequency": [[319, "skbio-sequence-dna-gc-frequency"]], "skbio.sequence.DNA.has_definites": [[320, "skbio-sequence-dna-has-definites"]], "skbio.sequence.DNA.has_degenerates": [[321, "skbio-sequence-dna-has-degenerates"]], "skbio.sequence.DNA.has_gaps": [[322, "skbio-sequence-dna-has-gaps"]], "skbio.sequence.DNA.has_interval_metadata": [[323, "skbio-sequence-dna-has-interval-metadata"]], "skbio.sequence.DNA.has_metadata": [[324, "skbio-sequence-dna-has-metadata"]], "skbio.sequence.DNA.has_nondegenerates": [[325, "skbio-sequence-dna-has-nondegenerates"]], "skbio.sequence.DNA.has_positional_metadata": [[326, "skbio-sequence-dna-has-positional-metadata"]], "skbio.sequence.DNA.index": [[327, "skbio-sequence-dna-index"]], "skbio.sequence.DNA.is_reverse_complement": [[328, "skbio-sequence-dna-is-reverse-complement"]], "skbio.sequence.DNA.iter_contiguous": [[329, "skbio-sequence-dna-iter-contiguous"]], "skbio.sequence.DNA.iter_kmers": [[330, "skbio-sequence-dna-iter-kmers"]], "skbio.sequence.DNA.kmer_frequencies": [[331, "skbio-sequence-dna-kmer-frequencies"]], "skbio.sequence.DNA.lowercase": [[332, "skbio-sequence-dna-lowercase"]], "skbio.sequence.DNA.match_frequency": [[333, "skbio-sequence-dna-match-frequency"]], "skbio.sequence.DNA.matches": [[334, "skbio-sequence-dna-matches"]], "skbio.sequence.DNA.mismatch_frequency": [[335, "skbio-sequence-dna-mismatch-frequency"]], "skbio.sequence.DNA.mismatches": [[336, "skbio-sequence-dna-mismatches"]], "skbio.sequence.DNA.nondegenerates": [[337, "skbio-sequence-dna-nondegenerates"]], "skbio.sequence.DNA.read": [[338, "skbio-sequence-dna-read"]], "skbio.sequence.DNA.replace": [[339, "skbio-sequence-dna-replace"]], "skbio.sequence.DNA.reverse_complement": [[340, "skbio-sequence-dna-reverse-complement"]], "skbio.sequence.DNA.to_definites": [[341, "skbio-sequence-dna-to-definites"]], "skbio.sequence.DNA.to_indices": [[342, "skbio-sequence-dna-to-indices"]], "skbio.sequence.DNA.to_regex": [[343, "skbio-sequence-dna-to-regex"]], "skbio.sequence.DNA.transcribe": [[344, "skbio-sequence-dna-transcribe"]], "skbio.sequence.DNA.translate": [[345, "skbio-sequence-dna-translate"]], "skbio.sequence.DNA.translate_six_frames": [[346, "skbio-sequence-dna-translate-six-frames"]], "skbio.sequence.DNA.write": [[347, "skbio-sequence-dna-write"]], "skbio.sequence.GeneticCode": [[348, "skbio-sequence-geneticcode"]], "skbio.sequence.GeneticCode.__eq__": [[349, "skbio-sequence-geneticcode-eq"]], "skbio.sequence.GeneticCode.__ge__": [[350, "skbio-sequence-geneticcode-ge"]], "skbio.sequence.GeneticCode.__getstate__": [[351, "skbio-sequence-geneticcode-getstate"]], "skbio.sequence.GeneticCode.__gt__": [[352, "skbio-sequence-geneticcode-gt"]], "skbio.sequence.GeneticCode.__le__": [[353, "skbio-sequence-geneticcode-le"]], "skbio.sequence.GeneticCode.__lt__": [[354, "skbio-sequence-geneticcode-lt"]], "skbio.sequence.GeneticCode.__ne__": [[355, "skbio-sequence-geneticcode-ne"]], "skbio.sequence.GeneticCode.__str__": [[356, "skbio-sequence-geneticcode-str"]], "skbio.sequence.GeneticCode.from_ncbi": [[357, "skbio-sequence-geneticcode-from-ncbi"]], "skbio.sequence.GeneticCode.translate": [[358, "skbio-sequence-geneticcode-translate"]], "skbio.sequence.GeneticCode.translate_six_frames": [[359, "skbio-sequence-geneticcode-translate-six-frames"]], "skbio.sequence.GrammaredSequence": [[360, "skbio-sequence-grammaredsequence"]], "skbio.sequence.GrammaredSequence.__bool__": [[361, "skbio-sequence-grammaredsequence-bool"]], "skbio.sequence.GrammaredSequence.__contains__": [[362, "skbio-sequence-grammaredsequence-contains"]], "skbio.sequence.GrammaredSequence.__copy__": [[363, "skbio-sequence-grammaredsequence-copy"]], "skbio.sequence.GrammaredSequence.__deepcopy__": [[364, "skbio-sequence-grammaredsequence-deepcopy"]], "skbio.sequence.GrammaredSequence.__eq__": [[365, "skbio-sequence-grammaredsequence-eq"]], "skbio.sequence.GrammaredSequence.__ge__": [[366, "skbio-sequence-grammaredsequence-ge"]], "skbio.sequence.GrammaredSequence.__getitem__": [[367, "skbio-sequence-grammaredsequence-getitem"]], "skbio.sequence.GrammaredSequence.__getstate__": [[368, "skbio-sequence-grammaredsequence-getstate"]], "skbio.sequence.GrammaredSequence.__gt__": [[369, "skbio-sequence-grammaredsequence-gt"]], "skbio.sequence.GrammaredSequence.__iter__": [[370, "skbio-sequence-grammaredsequence-iter"]], "skbio.sequence.GrammaredSequence.__le__": [[371, "skbio-sequence-grammaredsequence-le"]], "skbio.sequence.GrammaredSequence.__len__": [[372, "skbio-sequence-grammaredsequence-len"]], "skbio.sequence.GrammaredSequence.__lt__": [[373, "skbio-sequence-grammaredsequence-lt"]], "skbio.sequence.GrammaredSequence.__ne__": [[374, "skbio-sequence-grammaredsequence-ne"]], "skbio.sequence.GrammaredSequence.__reversed__": [[375, "skbio-sequence-grammaredsequence-reversed"]], "skbio.sequence.GrammaredSequence.__str__": [[376, "skbio-sequence-grammaredsequence-str"]], "skbio.sequence.GrammaredSequence.concat": [[377, "skbio-sequence-grammaredsequence-concat"]], "skbio.sequence.GrammaredSequence.count": [[378, "skbio-sequence-grammaredsequence-count"]], "skbio.sequence.GrammaredSequence.definites": [[379, "skbio-sequence-grammaredsequence-definites"]], "skbio.sequence.GrammaredSequence.degap": [[380, "skbio-sequence-grammaredsequence-degap"]], "skbio.sequence.GrammaredSequence.degenerates": [[381, "skbio-sequence-grammaredsequence-degenerates"]], "skbio.sequence.GrammaredSequence.distance": [[382, "skbio-sequence-grammaredsequence-distance"]], "skbio.sequence.GrammaredSequence.expand_degenerates": [[383, "skbio-sequence-grammaredsequence-expand-degenerates"]], "skbio.sequence.GrammaredSequence.find_motifs": [[384, "skbio-sequence-grammaredsequence-find-motifs"]], "skbio.sequence.GrammaredSequence.find_with_regex": [[385, "skbio-sequence-grammaredsequence-find-with-regex"]], "skbio.sequence.GrammaredSequence.frequencies": [[386, "skbio-sequence-grammaredsequence-frequencies"]], "skbio.sequence.GrammaredSequence.gaps": [[387, "skbio-sequence-grammaredsequence-gaps"]], "skbio.sequence.GrammaredSequence.has_definites": [[388, "skbio-sequence-grammaredsequence-has-definites"]], "skbio.sequence.GrammaredSequence.has_degenerates": [[389, "skbio-sequence-grammaredsequence-has-degenerates"]], "skbio.sequence.GrammaredSequence.has_gaps": [[390, "skbio-sequence-grammaredsequence-has-gaps"]], "skbio.sequence.GrammaredSequence.has_interval_metadata": [[391, "skbio-sequence-grammaredsequence-has-interval-metadata"]], "skbio.sequence.GrammaredSequence.has_metadata": [[392, "skbio-sequence-grammaredsequence-has-metadata"]], "skbio.sequence.GrammaredSequence.has_nondegenerates": [[393, "skbio-sequence-grammaredsequence-has-nondegenerates"]], "skbio.sequence.GrammaredSequence.has_positional_metadata": [[394, "skbio-sequence-grammaredsequence-has-positional-metadata"]], "skbio.sequence.GrammaredSequence.index": [[395, "skbio-sequence-grammaredsequence-index"]], "skbio.sequence.GrammaredSequence.iter_contiguous": [[396, "skbio-sequence-grammaredsequence-iter-contiguous"]], "skbio.sequence.GrammaredSequence.iter_kmers": [[397, "skbio-sequence-grammaredsequence-iter-kmers"]], "skbio.sequence.GrammaredSequence.kmer_frequencies": [[398, "skbio-sequence-grammaredsequence-kmer-frequencies"]], "skbio.sequence.GrammaredSequence.lowercase": [[399, "skbio-sequence-grammaredsequence-lowercase"]], "skbio.sequence.GrammaredSequence.match_frequency": [[400, "skbio-sequence-grammaredsequence-match-frequency"]], "skbio.sequence.GrammaredSequence.matches": [[401, "skbio-sequence-grammaredsequence-matches"]], "skbio.sequence.GrammaredSequence.mismatch_frequency": [[402, "skbio-sequence-grammaredsequence-mismatch-frequency"]], "skbio.sequence.GrammaredSequence.mismatches": [[403, "skbio-sequence-grammaredsequence-mismatches"]], "skbio.sequence.GrammaredSequence.nondegenerates": [[404, "skbio-sequence-grammaredsequence-nondegenerates"]], "skbio.sequence.GrammaredSequence.read": [[405, "skbio-sequence-grammaredsequence-read"]], "skbio.sequence.GrammaredSequence.replace": [[406, "skbio-sequence-grammaredsequence-replace"]], "skbio.sequence.GrammaredSequence.to_definites": [[407, "skbio-sequence-grammaredsequence-to-definites"]], "skbio.sequence.GrammaredSequence.to_indices": [[408, "skbio-sequence-grammaredsequence-to-indices"]], "skbio.sequence.GrammaredSequence.to_regex": [[409, "skbio-sequence-grammaredsequence-to-regex"]], "skbio.sequence.GrammaredSequence.write": [[410, "skbio-sequence-grammaredsequence-write"]], "skbio.sequence.Protein": [[411, "skbio-sequence-protein"]], "skbio.sequence.Protein.__bool__": [[412, "skbio-sequence-protein-bool"]], "skbio.sequence.Protein.__contains__": [[413, "skbio-sequence-protein-contains"]], "skbio.sequence.Protein.__copy__": [[414, "skbio-sequence-protein-copy"]], "skbio.sequence.Protein.__deepcopy__": [[415, "skbio-sequence-protein-deepcopy"]], "skbio.sequence.Protein.__eq__": [[416, "skbio-sequence-protein-eq"]], "skbio.sequence.Protein.__ge__": [[417, "skbio-sequence-protein-ge"]], "skbio.sequence.Protein.__getitem__": [[418, "skbio-sequence-protein-getitem"]], "skbio.sequence.Protein.__getstate__": [[419, "skbio-sequence-protein-getstate"]], "skbio.sequence.Protein.__gt__": [[420, "skbio-sequence-protein-gt"]], "skbio.sequence.Protein.__iter__": [[421, "skbio-sequence-protein-iter"]], "skbio.sequence.Protein.__le__": [[422, "skbio-sequence-protein-le"]], "skbio.sequence.Protein.__len__": [[423, "skbio-sequence-protein-len"]], "skbio.sequence.Protein.__lt__": [[424, "skbio-sequence-protein-lt"]], "skbio.sequence.Protein.__ne__": [[425, "skbio-sequence-protein-ne"]], "skbio.sequence.Protein.__reversed__": [[426, "skbio-sequence-protein-reversed"]], "skbio.sequence.Protein.__str__": [[427, "skbio-sequence-protein-str"]], "skbio.sequence.Protein.concat": [[428, "skbio-sequence-protein-concat"]], "skbio.sequence.Protein.count": [[429, "skbio-sequence-protein-count"]], "skbio.sequence.Protein.definites": [[430, "skbio-sequence-protein-definites"]], "skbio.sequence.Protein.degap": [[431, "skbio-sequence-protein-degap"]], "skbio.sequence.Protein.degenerates": [[432, "skbio-sequence-protein-degenerates"]], "skbio.sequence.Protein.distance": [[433, "skbio-sequence-protein-distance"]], "skbio.sequence.Protein.expand_degenerates": [[434, "skbio-sequence-protein-expand-degenerates"]], "skbio.sequence.Protein.find_motifs": [[435, "skbio-sequence-protein-find-motifs"]], "skbio.sequence.Protein.find_with_regex": [[436, "skbio-sequence-protein-find-with-regex"]], "skbio.sequence.Protein.frequencies": [[437, "skbio-sequence-protein-frequencies"]], "skbio.sequence.Protein.gaps": [[438, "skbio-sequence-protein-gaps"]], "skbio.sequence.Protein.has_definites": [[439, "skbio-sequence-protein-has-definites"]], "skbio.sequence.Protein.has_degenerates": [[440, "skbio-sequence-protein-has-degenerates"]], "skbio.sequence.Protein.has_gaps": [[441, "skbio-sequence-protein-has-gaps"]], "skbio.sequence.Protein.has_interval_metadata": [[442, "skbio-sequence-protein-has-interval-metadata"]], "skbio.sequence.Protein.has_metadata": [[443, "skbio-sequence-protein-has-metadata"]], "skbio.sequence.Protein.has_nondegenerates": [[444, "skbio-sequence-protein-has-nondegenerates"]], "skbio.sequence.Protein.has_positional_metadata": [[445, "skbio-sequence-protein-has-positional-metadata"]], "skbio.sequence.Protein.has_stops": [[446, "skbio-sequence-protein-has-stops"]], "skbio.sequence.Protein.index": [[447, "skbio-sequence-protein-index"]], "skbio.sequence.Protein.iter_contiguous": [[448, "skbio-sequence-protein-iter-contiguous"]], "skbio.sequence.Protein.iter_kmers": [[449, "skbio-sequence-protein-iter-kmers"]], "skbio.sequence.Protein.kmer_frequencies": [[450, "skbio-sequence-protein-kmer-frequencies"]], "skbio.sequence.Protein.lowercase": [[451, "skbio-sequence-protein-lowercase"]], "skbio.sequence.Protein.match_frequency": [[452, "skbio-sequence-protein-match-frequency"]], "skbio.sequence.Protein.matches": [[453, "skbio-sequence-protein-matches"]], "skbio.sequence.Protein.mismatch_frequency": [[454, "skbio-sequence-protein-mismatch-frequency"]], "skbio.sequence.Protein.mismatches": [[455, "skbio-sequence-protein-mismatches"]], "skbio.sequence.Protein.nondegenerates": [[456, "skbio-sequence-protein-nondegenerates"]], "skbio.sequence.Protein.read": [[457, "skbio-sequence-protein-read"]], "skbio.sequence.Protein.replace": [[458, "skbio-sequence-protein-replace"]], "skbio.sequence.Protein.stops": [[459, "skbio-sequence-protein-stops"]], "skbio.sequence.Protein.to_definites": [[460, "skbio-sequence-protein-to-definites"]], "skbio.sequence.Protein.to_indices": [[461, "skbio-sequence-protein-to-indices"]], "skbio.sequence.Protein.to_regex": [[462, "skbio-sequence-protein-to-regex"]], "skbio.sequence.Protein.write": [[463, "skbio-sequence-protein-write"]], "skbio.sequence.RNA": [[464, "skbio-sequence-rna"]], "skbio.sequence.RNA.__bool__": [[465, "skbio-sequence-rna-bool"]], "skbio.sequence.RNA.__contains__": [[466, "skbio-sequence-rna-contains"]], "skbio.sequence.RNA.__copy__": [[467, "skbio-sequence-rna-copy"]], "skbio.sequence.RNA.__deepcopy__": [[468, "skbio-sequence-rna-deepcopy"]], "skbio.sequence.RNA.__eq__": [[469, "skbio-sequence-rna-eq"]], "skbio.sequence.RNA.__ge__": [[470, "skbio-sequence-rna-ge"]], "skbio.sequence.RNA.__getitem__": [[471, "skbio-sequence-rna-getitem"]], "skbio.sequence.RNA.__getstate__": [[472, "skbio-sequence-rna-getstate"]], "skbio.sequence.RNA.__gt__": [[473, "skbio-sequence-rna-gt"]], "skbio.sequence.RNA.__iter__": [[474, "skbio-sequence-rna-iter"]], "skbio.sequence.RNA.__le__": [[475, "skbio-sequence-rna-le"]], "skbio.sequence.RNA.__len__": [[476, "skbio-sequence-rna-len"]], "skbio.sequence.RNA.__lt__": [[477, "skbio-sequence-rna-lt"]], "skbio.sequence.RNA.__ne__": [[478, "skbio-sequence-rna-ne"]], "skbio.sequence.RNA.__reversed__": [[479, "skbio-sequence-rna-reversed"]], "skbio.sequence.RNA.__str__": [[480, "skbio-sequence-rna-str"]], "skbio.sequence.RNA.complement": [[481, "skbio-sequence-rna-complement"]], "skbio.sequence.RNA.concat": [[482, "skbio-sequence-rna-concat"]], "skbio.sequence.RNA.count": [[483, "skbio-sequence-rna-count"]], "skbio.sequence.RNA.definites": [[484, "skbio-sequence-rna-definites"]], "skbio.sequence.RNA.degap": [[485, "skbio-sequence-rna-degap"]], "skbio.sequence.RNA.degenerates": [[486, "skbio-sequence-rna-degenerates"]], "skbio.sequence.RNA.distance": [[487, "skbio-sequence-rna-distance"]], "skbio.sequence.RNA.expand_degenerates": [[488, "skbio-sequence-rna-expand-degenerates"]], "skbio.sequence.RNA.find_motifs": [[489, "skbio-sequence-rna-find-motifs"]], "skbio.sequence.RNA.find_with_regex": [[490, "skbio-sequence-rna-find-with-regex"]], "skbio.sequence.RNA.frequencies": [[491, "skbio-sequence-rna-frequencies"]], "skbio.sequence.RNA.gaps": [[492, "skbio-sequence-rna-gaps"]], "skbio.sequence.RNA.gc_content": [[493, "skbio-sequence-rna-gc-content"]], "skbio.sequence.RNA.gc_frequency": [[494, "skbio-sequence-rna-gc-frequency"]], "skbio.sequence.RNA.has_definites": [[495, "skbio-sequence-rna-has-definites"]], "skbio.sequence.RNA.has_degenerates": [[496, "skbio-sequence-rna-has-degenerates"]], "skbio.sequence.RNA.has_gaps": [[497, "skbio-sequence-rna-has-gaps"]], "skbio.sequence.RNA.has_interval_metadata": [[498, "skbio-sequence-rna-has-interval-metadata"]], "skbio.sequence.RNA.has_metadata": [[499, "skbio-sequence-rna-has-metadata"]], "skbio.sequence.RNA.has_nondegenerates": [[500, "skbio-sequence-rna-has-nondegenerates"]], "skbio.sequence.RNA.has_positional_metadata": [[501, "skbio-sequence-rna-has-positional-metadata"]], "skbio.sequence.RNA.index": [[502, "skbio-sequence-rna-index"]], "skbio.sequence.RNA.is_reverse_complement": [[503, "skbio-sequence-rna-is-reverse-complement"]], "skbio.sequence.RNA.iter_contiguous": [[504, "skbio-sequence-rna-iter-contiguous"]], "skbio.sequence.RNA.iter_kmers": [[505, "skbio-sequence-rna-iter-kmers"]], "skbio.sequence.RNA.kmer_frequencies": [[506, "skbio-sequence-rna-kmer-frequencies"]], "skbio.sequence.RNA.lowercase": [[507, "skbio-sequence-rna-lowercase"]], "skbio.sequence.RNA.match_frequency": [[508, "skbio-sequence-rna-match-frequency"]], "skbio.sequence.RNA.matches": [[509, "skbio-sequence-rna-matches"]], "skbio.sequence.RNA.mismatch_frequency": [[510, "skbio-sequence-rna-mismatch-frequency"]], "skbio.sequence.RNA.mismatches": [[511, "skbio-sequence-rna-mismatches"]], "skbio.sequence.RNA.nondegenerates": [[512, "skbio-sequence-rna-nondegenerates"]], "skbio.sequence.RNA.read": [[513, "skbio-sequence-rna-read"]], "skbio.sequence.RNA.replace": [[514, "skbio-sequence-rna-replace"]], "skbio.sequence.RNA.reverse_complement": [[515, "skbio-sequence-rna-reverse-complement"]], "skbio.sequence.RNA.reverse_transcribe": [[516, "skbio-sequence-rna-reverse-transcribe"]], "skbio.sequence.RNA.to_definites": [[517, "skbio-sequence-rna-to-definites"]], "skbio.sequence.RNA.to_indices": [[518, "skbio-sequence-rna-to-indices"]], "skbio.sequence.RNA.to_regex": [[519, "skbio-sequence-rna-to-regex"]], "skbio.sequence.RNA.translate": [[520, "skbio-sequence-rna-translate"]], "skbio.sequence.RNA.translate_six_frames": [[521, "skbio-sequence-rna-translate-six-frames"]], "skbio.sequence.RNA.write": [[522, "skbio-sequence-rna-write"]], "skbio.sequence.Sequence": [[523, "skbio-sequence-sequence"]], "skbio.sequence.Sequence.__bool__": [[524, "skbio-sequence-sequence-bool"]], "skbio.sequence.Sequence.__contains__": [[525, "skbio-sequence-sequence-contains"]], "skbio.sequence.Sequence.__copy__": [[526, "skbio-sequence-sequence-copy"]], "skbio.sequence.Sequence.__deepcopy__": [[527, "skbio-sequence-sequence-deepcopy"]], "skbio.sequence.Sequence.__eq__": [[528, "skbio-sequence-sequence-eq"]], "skbio.sequence.Sequence.__ge__": [[529, "skbio-sequence-sequence-ge"]], "skbio.sequence.Sequence.__getitem__": [[530, "skbio-sequence-sequence-getitem"]], "skbio.sequence.Sequence.__getstate__": [[531, "skbio-sequence-sequence-getstate"]], "skbio.sequence.Sequence.__gt__": [[532, "skbio-sequence-sequence-gt"]], "skbio.sequence.Sequence.__iter__": [[533, "skbio-sequence-sequence-iter"]], "skbio.sequence.Sequence.__le__": [[534, "skbio-sequence-sequence-le"]], "skbio.sequence.Sequence.__len__": [[535, "skbio-sequence-sequence-len"]], "skbio.sequence.Sequence.__lt__": [[536, "skbio-sequence-sequence-lt"]], "skbio.sequence.Sequence.__ne__": [[537, "skbio-sequence-sequence-ne"]], "skbio.sequence.Sequence.__reversed__": [[538, "skbio-sequence-sequence-reversed"]], "skbio.sequence.Sequence.__str__": [[539, "skbio-sequence-sequence-str"]], "skbio.sequence.Sequence.concat": [[540, "skbio-sequence-sequence-concat"]], "skbio.sequence.Sequence.count": [[541, "skbio-sequence-sequence-count"]], "skbio.sequence.Sequence.distance": [[542, "skbio-sequence-sequence-distance"]], "skbio.sequence.Sequence.find_with_regex": [[543, "skbio-sequence-sequence-find-with-regex"]], "skbio.sequence.Sequence.frequencies": [[544, "skbio-sequence-sequence-frequencies"]], "skbio.sequence.Sequence.has_interval_metadata": [[545, "skbio-sequence-sequence-has-interval-metadata"]], "skbio.sequence.Sequence.has_metadata": [[546, "skbio-sequence-sequence-has-metadata"]], "skbio.sequence.Sequence.has_positional_metadata": [[547, "skbio-sequence-sequence-has-positional-metadata"]], "skbio.sequence.Sequence.index": [[548, "skbio-sequence-sequence-index"]], "skbio.sequence.Sequence.iter_contiguous": [[549, "skbio-sequence-sequence-iter-contiguous"]], "skbio.sequence.Sequence.iter_kmers": [[550, "skbio-sequence-sequence-iter-kmers"]], "skbio.sequence.Sequence.kmer_frequencies": [[551, "skbio-sequence-sequence-kmer-frequencies"]], "skbio.sequence.Sequence.lowercase": [[552, "skbio-sequence-sequence-lowercase"]], "skbio.sequence.Sequence.match_frequency": [[553, "skbio-sequence-sequence-match-frequency"]], "skbio.sequence.Sequence.matches": [[554, "skbio-sequence-sequence-matches"]], "skbio.sequence.Sequence.mismatch_frequency": [[555, "skbio-sequence-sequence-mismatch-frequency"]], "skbio.sequence.Sequence.mismatches": [[556, "skbio-sequence-sequence-mismatches"]], "skbio.sequence.Sequence.read": [[557, "skbio-sequence-sequence-read"]], "skbio.sequence.Sequence.replace": [[558, "skbio-sequence-sequence-replace"]], "skbio.sequence.Sequence.to_indices": [[559, "skbio-sequence-sequence-to-indices"]], "skbio.sequence.Sequence.write": [[560, "skbio-sequence-sequence-write"]], "skbio.sequence.SubstitutionMatrix": [[561, "skbio-sequence-substitutionmatrix"]], "skbio.sequence.SubstitutionMatrix.__contains__": [[562, "skbio-sequence-substitutionmatrix-contains"]], "skbio.sequence.SubstitutionMatrix.__eq__": [[563, "skbio-sequence-substitutionmatrix-eq"]], "skbio.sequence.SubstitutionMatrix.__ge__": [[564, "skbio-sequence-substitutionmatrix-ge"]], "skbio.sequence.SubstitutionMatrix.__getitem__": [[565, "skbio-sequence-substitutionmatrix-getitem"]], "skbio.sequence.SubstitutionMatrix.__getstate__": [[566, "skbio-sequence-substitutionmatrix-getstate"]], "skbio.sequence.SubstitutionMatrix.__gt__": [[567, "skbio-sequence-substitutionmatrix-gt"]], "skbio.sequence.SubstitutionMatrix.__le__": [[568, "skbio-sequence-substitutionmatrix-le"]], "skbio.sequence.SubstitutionMatrix.__lt__": [[569, "skbio-sequence-substitutionmatrix-lt"]], "skbio.sequence.SubstitutionMatrix.__ne__": [[570, "skbio-sequence-substitutionmatrix-ne"]], "skbio.sequence.SubstitutionMatrix.__str__": [[571, "skbio-sequence-substitutionmatrix-str"]], "skbio.sequence.SubstitutionMatrix.between": [[572, "skbio-sequence-substitutionmatrix-between"]], "skbio.sequence.SubstitutionMatrix.by_name": [[573, "skbio-sequence-substitutionmatrix-by-name"]], "skbio.sequence.SubstitutionMatrix.copy": [[574, "skbio-sequence-substitutionmatrix-copy"]], "skbio.sequence.SubstitutionMatrix.filter": [[575, "skbio-sequence-substitutionmatrix-filter"]], "skbio.sequence.SubstitutionMatrix.from_dict": [[576, "skbio-sequence-substitutionmatrix-from-dict"]], "skbio.sequence.SubstitutionMatrix.from_iterable": [[577, "skbio-sequence-substitutionmatrix-from-iterable"]], "skbio.sequence.SubstitutionMatrix.get_names": [[578, "skbio-sequence-substitutionmatrix-get-names"]], "skbio.sequence.SubstitutionMatrix.identity": [[579, "skbio-sequence-substitutionmatrix-identity"]], "skbio.sequence.SubstitutionMatrix.index": [[580, "skbio-sequence-substitutionmatrix-index"]], "skbio.sequence.SubstitutionMatrix.plot": [[581, "skbio-sequence-substitutionmatrix-plot"]], "skbio.sequence.SubstitutionMatrix.read": [[582, "skbio-sequence-substitutionmatrix-read"]], "skbio.sequence.SubstitutionMatrix.redundant_form": [[583, "skbio-sequence-substitutionmatrix-redundant-form"]], "skbio.sequence.SubstitutionMatrix.to_data_frame": [[584, "skbio-sequence-substitutionmatrix-to-data-frame"]], "skbio.sequence.SubstitutionMatrix.to_dict": [[585, "skbio-sequence-substitutionmatrix-to-dict"]], "skbio.sequence.SubstitutionMatrix.transpose": [[586, "skbio-sequence-substitutionmatrix-transpose"]], "skbio.sequence.SubstitutionMatrix.within": [[587, "skbio-sequence-substitutionmatrix-within"]], "skbio.sequence.SubstitutionMatrix.write": [[588, "skbio-sequence-substitutionmatrix-write"]], "skbio.sequence.distance.hamming": [[590, "skbio-sequence-distance-hamming"]], "skbio.sequence.distance.kmer_distance": [[591, "skbio-sequence-distance-kmer-distance"]], "skbio.stats.composition.alr": [[593, "skbio-stats-composition-alr"]], "skbio.stats.composition.alr_inv": [[594, "skbio-stats-composition-alr-inv"]], "skbio.stats.composition.ancom": [[595, "skbio-stats-composition-ancom"]], "skbio.stats.composition.centralize": [[596, "skbio-stats-composition-centralize"]], "skbio.stats.composition.closure": [[597, "skbio-stats-composition-closure"]], "skbio.stats.composition.clr": [[598, "skbio-stats-composition-clr"]], "skbio.stats.composition.clr_inv": [[599, "skbio-stats-composition-clr-inv"]], "skbio.stats.composition.dirmult_ttest": [[600, "skbio-stats-composition-dirmult-ttest"]], "skbio.stats.composition.ilr": [[601, "skbio-stats-composition-ilr"]], "skbio.stats.composition.ilr_inv": [[602, "skbio-stats-composition-ilr-inv"]], "skbio.stats.composition.inner": [[603, "skbio-stats-composition-inner"]], "skbio.stats.composition.multi_replace": [[604, "skbio-stats-composition-multi-replace"]], "skbio.stats.composition.multiplicative_replacement": [[605, "skbio-stats-composition-multiplicative-replacement"]], "skbio.stats.composition.pairwise_vlr": [[606, "skbio-stats-composition-pairwise-vlr"]], "skbio.stats.composition.perturb": [[607, "skbio-stats-composition-perturb"]], "skbio.stats.composition.perturb_inv": [[608, "skbio-stats-composition-perturb-inv"]], "skbio.stats.composition.power": [[609, "skbio-stats-composition-power"]], "skbio.stats.composition.sbp_basis": [[610, "skbio-stats-composition-sbp-basis"]], "skbio.stats.composition.tree_basis": [[611, "skbio-stats-composition-tree-basis"]], "skbio.stats.composition.vlr": [[612, "skbio-stats-composition-vlr"]], "skbio.stats.distance.DissimilarityMatrix": [[614, "skbio-stats-distance-dissimilaritymatrix"]], "skbio.stats.distance.DissimilarityMatrix.__contains__": [[615, "skbio-stats-distance-dissimilaritymatrix-contains"]], "skbio.stats.distance.DissimilarityMatrix.__eq__": [[616, "skbio-stats-distance-dissimilaritymatrix-eq"]], "skbio.stats.distance.DissimilarityMatrix.__ge__": [[617, "skbio-stats-distance-dissimilaritymatrix-ge"]], "skbio.stats.distance.DissimilarityMatrix.__getitem__": [[618, "skbio-stats-distance-dissimilaritymatrix-getitem"]], "skbio.stats.distance.DissimilarityMatrix.__getstate__": [[619, "skbio-stats-distance-dissimilaritymatrix-getstate"]], "skbio.stats.distance.DissimilarityMatrix.__gt__": [[620, "skbio-stats-distance-dissimilaritymatrix-gt"]], "skbio.stats.distance.DissimilarityMatrix.__le__": [[621, "skbio-stats-distance-dissimilaritymatrix-le"]], "skbio.stats.distance.DissimilarityMatrix.__lt__": [[622, "skbio-stats-distance-dissimilaritymatrix-lt"]], "skbio.stats.distance.DissimilarityMatrix.__ne__": [[623, "skbio-stats-distance-dissimilaritymatrix-ne"]], "skbio.stats.distance.DissimilarityMatrix.__str__": [[624, "skbio-stats-distance-dissimilaritymatrix-str"]], "skbio.stats.distance.DissimilarityMatrix.between": [[625, "skbio-stats-distance-dissimilaritymatrix-between"]], "skbio.stats.distance.DissimilarityMatrix.copy": [[626, "skbio-stats-distance-dissimilaritymatrix-copy"]], "skbio.stats.distance.DissimilarityMatrix.filter": [[627, "skbio-stats-distance-dissimilaritymatrix-filter"]], "skbio.stats.distance.DissimilarityMatrix.from_iterable": [[628, "skbio-stats-distance-dissimilaritymatrix-from-iterable"]], "skbio.stats.distance.DissimilarityMatrix.index": [[629, "skbio-stats-distance-dissimilaritymatrix-index"]], "skbio.stats.distance.DissimilarityMatrix.plot": [[630, "skbio-stats-distance-dissimilaritymatrix-plot"]], "skbio.stats.distance.DissimilarityMatrix.read": [[631, "skbio-stats-distance-dissimilaritymatrix-read"]], "skbio.stats.distance.DissimilarityMatrix.redundant_form": [[632, "skbio-stats-distance-dissimilaritymatrix-redundant-form"]], "skbio.stats.distance.DissimilarityMatrix.to_data_frame": [[633, "skbio-stats-distance-dissimilaritymatrix-to-data-frame"]], "skbio.stats.distance.DissimilarityMatrix.transpose": [[634, "skbio-stats-distance-dissimilaritymatrix-transpose"]], "skbio.stats.distance.DissimilarityMatrix.within": [[635, "skbio-stats-distance-dissimilaritymatrix-within"]], "skbio.stats.distance.DissimilarityMatrix.write": [[636, "skbio-stats-distance-dissimilaritymatrix-write"]], "skbio.stats.distance.DistanceMatrix": [[637, "skbio-stats-distance-distancematrix"]], "skbio.stats.distance.DistanceMatrix.__contains__": [[638, "skbio-stats-distance-distancematrix-contains"]], "skbio.stats.distance.DistanceMatrix.__eq__": [[639, "skbio-stats-distance-distancematrix-eq"]], "skbio.stats.distance.DistanceMatrix.__ge__": [[640, "skbio-stats-distance-distancematrix-ge"]], "skbio.stats.distance.DistanceMatrix.__getitem__": [[641, "skbio-stats-distance-distancematrix-getitem"]], "skbio.stats.distance.DistanceMatrix.__getstate__": [[642, "skbio-stats-distance-distancematrix-getstate"]], "skbio.stats.distance.DistanceMatrix.__gt__": [[643, "skbio-stats-distance-distancematrix-gt"]], "skbio.stats.distance.DistanceMatrix.__le__": [[644, "skbio-stats-distance-distancematrix-le"]], "skbio.stats.distance.DistanceMatrix.__lt__": [[645, "skbio-stats-distance-distancematrix-lt"]], "skbio.stats.distance.DistanceMatrix.__ne__": [[646, "skbio-stats-distance-distancematrix-ne"]], "skbio.stats.distance.DistanceMatrix.__str__": [[647, "skbio-stats-distance-distancematrix-str"]], "skbio.stats.distance.DistanceMatrix.between": [[648, "skbio-stats-distance-distancematrix-between"]], "skbio.stats.distance.DistanceMatrix.condensed_form": [[649, "skbio-stats-distance-distancematrix-condensed-form"]], "skbio.stats.distance.DistanceMatrix.copy": [[650, "skbio-stats-distance-distancematrix-copy"]], "skbio.stats.distance.DistanceMatrix.filter": [[651, "skbio-stats-distance-distancematrix-filter"]], "skbio.stats.distance.DistanceMatrix.from_iterable": [[652, "skbio-stats-distance-distancematrix-from-iterable"]], "skbio.stats.distance.DistanceMatrix.index": [[653, "skbio-stats-distance-distancematrix-index"]], "skbio.stats.distance.DistanceMatrix.permute": [[654, "skbio-stats-distance-distancematrix-permute"]], "skbio.stats.distance.DistanceMatrix.plot": [[655, "skbio-stats-distance-distancematrix-plot"]], "skbio.stats.distance.DistanceMatrix.read": [[656, "skbio-stats-distance-distancematrix-read"]], "skbio.stats.distance.DistanceMatrix.redundant_form": [[657, "skbio-stats-distance-distancematrix-redundant-form"]], "skbio.stats.distance.DistanceMatrix.to_data_frame": [[658, "skbio-stats-distance-distancematrix-to-data-frame"]], "skbio.stats.distance.DistanceMatrix.to_series": [[659, "skbio-stats-distance-distancematrix-to-series"]], "skbio.stats.distance.DistanceMatrix.transpose": [[660, "skbio-stats-distance-distancematrix-transpose"]], "skbio.stats.distance.DistanceMatrix.within": [[661, "skbio-stats-distance-distancematrix-within"]], "skbio.stats.distance.DistanceMatrix.write": [[662, "skbio-stats-distance-distancematrix-write"]], "skbio.stats.distance.anosim": [[663, "skbio-stats-distance-anosim"]], "skbio.stats.distance.bioenv": [[664, "skbio-stats-distance-bioenv"]], "skbio.stats.distance.mantel": [[665, "skbio-stats-distance-mantel"]], "skbio.stats.distance.permanova": [[666, "skbio-stats-distance-permanova"]], "skbio.stats.distance.permdisp": [[667, "skbio-stats-distance-permdisp"]], "skbio.stats.distance.pwmantel": [[668, "skbio-stats-distance-pwmantel"]], "skbio.stats.distance.randdm": [[669, "skbio-stats-distance-randdm"]], "skbio.stats.evolve.hommola_cospeciation": [[671, "skbio-stats-evolve-hommola-cospeciation"]], "skbio.stats.gradient.AverageGradientANOVA": [[673, "skbio-stats-gradient-averagegradientanova"]], "skbio.stats.gradient.AverageGradientANOVA.__eq__": [[674, "skbio-stats-gradient-averagegradientanova-eq"]], "skbio.stats.gradient.AverageGradientANOVA.__ge__": [[675, "skbio-stats-gradient-averagegradientanova-ge"]], "skbio.stats.gradient.AverageGradientANOVA.__getstate__": [[676, "skbio-stats-gradient-averagegradientanova-getstate"]], "skbio.stats.gradient.AverageGradientANOVA.__gt__": [[677, "skbio-stats-gradient-averagegradientanova-gt"]], "skbio.stats.gradient.AverageGradientANOVA.__hash__": [[678, "skbio-stats-gradient-averagegradientanova-hash"]], "skbio.stats.gradient.AverageGradientANOVA.__le__": [[679, "skbio-stats-gradient-averagegradientanova-le"]], "skbio.stats.gradient.AverageGradientANOVA.__lt__": [[680, "skbio-stats-gradient-averagegradientanova-lt"]], "skbio.stats.gradient.AverageGradientANOVA.__ne__": [[681, "skbio-stats-gradient-averagegradientanova-ne"]], "skbio.stats.gradient.AverageGradientANOVA.__str__": [[682, "skbio-stats-gradient-averagegradientanova-str"]], "skbio.stats.gradient.AverageGradientANOVA.get_trajectories": [[683, "skbio-stats-gradient-averagegradientanova-get-trajectories"]], "skbio.stats.gradient.CategoryResults": [[684, "skbio-stats-gradient-categoryresults"]], "skbio.stats.gradient.CategoryResults.__eq__": [[685, "skbio-stats-gradient-categoryresults-eq"]], "skbio.stats.gradient.CategoryResults.__ge__": [[686, "skbio-stats-gradient-categoryresults-ge"]], "skbio.stats.gradient.CategoryResults.__getstate__": [[687, "skbio-stats-gradient-categoryresults-getstate"]], "skbio.stats.gradient.CategoryResults.__gt__": [[688, "skbio-stats-gradient-categoryresults-gt"]], "skbio.stats.gradient.CategoryResults.__hash__": [[689, "skbio-stats-gradient-categoryresults-hash"]], "skbio.stats.gradient.CategoryResults.__le__": [[690, "skbio-stats-gradient-categoryresults-le"]], "skbio.stats.gradient.CategoryResults.__lt__": [[691, "skbio-stats-gradient-categoryresults-lt"]], "skbio.stats.gradient.CategoryResults.__ne__": [[692, "skbio-stats-gradient-categoryresults-ne"]], "skbio.stats.gradient.CategoryResults.__str__": [[693, "skbio-stats-gradient-categoryresults-str"]], "skbio.stats.gradient.CategoryResults.to_files": [[694, "skbio-stats-gradient-categoryresults-to-files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[695, "skbio-stats-gradient-firstdifferencegradientanova"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__": [[696, "skbio-stats-gradient-firstdifferencegradientanova-eq"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__": [[697, "skbio-stats-gradient-firstdifferencegradientanova-ge"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__": [[698, "skbio-stats-gradient-firstdifferencegradientanova-getstate"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__": [[699, "skbio-stats-gradient-firstdifferencegradientanova-gt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__": [[700, "skbio-stats-gradient-firstdifferencegradientanova-hash"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__": [[701, "skbio-stats-gradient-firstdifferencegradientanova-le"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__": [[702, "skbio-stats-gradient-firstdifferencegradientanova-lt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__": [[703, "skbio-stats-gradient-firstdifferencegradientanova-ne"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__": [[704, "skbio-stats-gradient-firstdifferencegradientanova-str"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories": [[705, "skbio-stats-gradient-firstdifferencegradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVA": [[706, "skbio-stats-gradient-gradientanova"]], "skbio.stats.gradient.GradientANOVA.__eq__": [[707, "skbio-stats-gradient-gradientanova-eq"]], "skbio.stats.gradient.GradientANOVA.__ge__": [[708, "skbio-stats-gradient-gradientanova-ge"]], "skbio.stats.gradient.GradientANOVA.__getstate__": [[709, "skbio-stats-gradient-gradientanova-getstate"]], "skbio.stats.gradient.GradientANOVA.__gt__": [[710, "skbio-stats-gradient-gradientanova-gt"]], "skbio.stats.gradient.GradientANOVA.__hash__": [[711, "skbio-stats-gradient-gradientanova-hash"]], "skbio.stats.gradient.GradientANOVA.__le__": [[712, "skbio-stats-gradient-gradientanova-le"]], "skbio.stats.gradient.GradientANOVA.__lt__": [[713, "skbio-stats-gradient-gradientanova-lt"]], "skbio.stats.gradient.GradientANOVA.__ne__": [[714, "skbio-stats-gradient-gradientanova-ne"]], "skbio.stats.gradient.GradientANOVA.__str__": [[715, "skbio-stats-gradient-gradientanova-str"]], "skbio.stats.gradient.GradientANOVA.get_trajectories": [[716, "skbio-stats-gradient-gradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[717, "skbio-stats-gradient-gradientanovaresults"]], "skbio.stats.gradient.GradientANOVAResults.__eq__": [[718, "skbio-stats-gradient-gradientanovaresults-eq"]], "skbio.stats.gradient.GradientANOVAResults.__ge__": [[719, "skbio-stats-gradient-gradientanovaresults-ge"]], "skbio.stats.gradient.GradientANOVAResults.__getstate__": [[720, "skbio-stats-gradient-gradientanovaresults-getstate"]], "skbio.stats.gradient.GradientANOVAResults.__gt__": [[721, "skbio-stats-gradient-gradientanovaresults-gt"]], "skbio.stats.gradient.GradientANOVAResults.__hash__": [[722, "skbio-stats-gradient-gradientanovaresults-hash"]], "skbio.stats.gradient.GradientANOVAResults.__le__": [[723, "skbio-stats-gradient-gradientanovaresults-le"]], "skbio.stats.gradient.GradientANOVAResults.__lt__": [[724, "skbio-stats-gradient-gradientanovaresults-lt"]], "skbio.stats.gradient.GradientANOVAResults.__ne__": [[725, "skbio-stats-gradient-gradientanovaresults-ne"]], "skbio.stats.gradient.GradientANOVAResults.__str__": [[726, "skbio-stats-gradient-gradientanovaresults-str"]], "skbio.stats.gradient.GradientANOVAResults.to_files": [[727, "skbio-stats-gradient-gradientanovaresults-to-files"]], "skbio.stats.gradient.GroupResults": [[728, "skbio-stats-gradient-groupresults"]], "skbio.stats.gradient.GroupResults.__eq__": [[729, "skbio-stats-gradient-groupresults-eq"]], "skbio.stats.gradient.GroupResults.__ge__": [[730, "skbio-stats-gradient-groupresults-ge"]], "skbio.stats.gradient.GroupResults.__getstate__": [[731, "skbio-stats-gradient-groupresults-getstate"]], "skbio.stats.gradient.GroupResults.__gt__": [[732, "skbio-stats-gradient-groupresults-gt"]], "skbio.stats.gradient.GroupResults.__hash__": [[733, "skbio-stats-gradient-groupresults-hash"]], "skbio.stats.gradient.GroupResults.__le__": [[734, "skbio-stats-gradient-groupresults-le"]], "skbio.stats.gradient.GroupResults.__lt__": [[735, "skbio-stats-gradient-groupresults-lt"]], "skbio.stats.gradient.GroupResults.__ne__": [[736, "skbio-stats-gradient-groupresults-ne"]], "skbio.stats.gradient.GroupResults.__str__": [[737, "skbio-stats-gradient-groupresults-str"]], "skbio.stats.gradient.GroupResults.to_files": [[738, "skbio-stats-gradient-groupresults-to-files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[739, "skbio-stats-gradient-trajectorygradientanova"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__": [[740, "skbio-stats-gradient-trajectorygradientanova-eq"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__": [[741, "skbio-stats-gradient-trajectorygradientanova-ge"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__": [[742, "skbio-stats-gradient-trajectorygradientanova-getstate"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__": [[743, "skbio-stats-gradient-trajectorygradientanova-gt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__": [[744, "skbio-stats-gradient-trajectorygradientanova-hash"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__le__": [[745, "skbio-stats-gradient-trajectorygradientanova-le"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__": [[746, "skbio-stats-gradient-trajectorygradientanova-lt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__": [[747, "skbio-stats-gradient-trajectorygradientanova-ne"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__str__": [[748, "skbio-stats-gradient-trajectorygradientanova-str"]], "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories": [[749, "skbio-stats-gradient-trajectorygradientanova-get-trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[750, "skbio-stats-gradient-windowdifferencegradientanova"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__": [[751, "skbio-stats-gradient-windowdifferencegradientanova-eq"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__": [[752, "skbio-stats-gradient-windowdifferencegradientanova-ge"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__": [[753, "skbio-stats-gradient-windowdifferencegradientanova-getstate"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__": [[754, "skbio-stats-gradient-windowdifferencegradientanova-gt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__": [[755, "skbio-stats-gradient-windowdifferencegradientanova-hash"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__": [[756, "skbio-stats-gradient-windowdifferencegradientanova-le"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__": [[757, "skbio-stats-gradient-windowdifferencegradientanova-lt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__": [[758, "skbio-stats-gradient-windowdifferencegradientanova-ne"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__": [[759, "skbio-stats-gradient-windowdifferencegradientanova-str"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories": [[760, "skbio-stats-gradient-windowdifferencegradientanova-get-trajectories"]], "skbio.stats.isubsample": [[761, "skbio-stats-isubsample"]], "skbio.stats.ordination.OrdinationResults": [[763, "skbio-stats-ordination-ordinationresults"]], "skbio.stats.ordination.OrdinationResults.__eq__": [[764, "skbio-stats-ordination-ordinationresults-eq"]], "skbio.stats.ordination.OrdinationResults.__ge__": [[765, "skbio-stats-ordination-ordinationresults-ge"]], "skbio.stats.ordination.OrdinationResults.__getstate__": [[766, "skbio-stats-ordination-ordinationresults-getstate"]], "skbio.stats.ordination.OrdinationResults.__gt__": [[767, "skbio-stats-ordination-ordinationresults-gt"]], "skbio.stats.ordination.OrdinationResults.__hash__": [[768, "skbio-stats-ordination-ordinationresults-hash"]], "skbio.stats.ordination.OrdinationResults.__le__": [[769, "skbio-stats-ordination-ordinationresults-le"]], "skbio.stats.ordination.OrdinationResults.__lt__": [[770, "skbio-stats-ordination-ordinationresults-lt"]], "skbio.stats.ordination.OrdinationResults.__ne__": [[771, "skbio-stats-ordination-ordinationresults-ne"]], "skbio.stats.ordination.OrdinationResults.__str__": [[772, "skbio-stats-ordination-ordinationresults-str"]], "skbio.stats.ordination.OrdinationResults.plot": [[773, "skbio-stats-ordination-ordinationresults-plot"]], "skbio.stats.ordination.OrdinationResults.read": [[774, "skbio-stats-ordination-ordinationresults-read"]], "skbio.stats.ordination.OrdinationResults.write": [[775, "skbio-stats-ordination-ordinationresults-write"]], "skbio.stats.ordination.ca": [[776, "skbio-stats-ordination-ca"]], "skbio.stats.ordination.cca": [[777, "skbio-stats-ordination-cca"]], "skbio.stats.ordination.corr": [[778, "skbio-stats-ordination-corr"]], "skbio.stats.ordination.e_matrix": [[779, "skbio-stats-ordination-e-matrix"]], "skbio.stats.ordination.f_matrix": [[780, "skbio-stats-ordination-f-matrix"]], "skbio.stats.ordination.mean_and_std": [[781, "skbio-stats-ordination-mean-and-std"]], "skbio.stats.ordination.pcoa": [[782, "skbio-stats-ordination-pcoa"]], "skbio.stats.ordination.pcoa_biplot": [[783, "skbio-stats-ordination-pcoa-biplot"]], "skbio.stats.ordination.rda": [[784, "skbio-stats-ordination-rda"]], "skbio.stats.ordination.scale": [[785, "skbio-stats-ordination-scale"]], "skbio.stats.ordination.svd_rank": [[786, "skbio-stats-ordination-svd-rank"]], "skbio.stats.power.confidence_bound": [[788, "skbio-stats-power-confidence-bound"]], "skbio.stats.power.paired_subsamples": [[789, "skbio-stats-power-paired-subsamples"]], "skbio.stats.power.subsample_paired_power": [[790, "skbio-stats-power-subsample-paired-power"]], "skbio.stats.power.subsample_power": [[791, "skbio-stats-power-subsample-power"]], "skbio.stats.subsample_counts": [[792, "skbio-stats-subsample-counts"]], "skbio.table.Table": [[793, "skbio-table-table"]], "skbio.table.Table.__eq__": [[794, "skbio-table-table-eq"]], "skbio.table.Table.__ge__": [[795, "skbio-table-table-ge"]], "skbio.table.Table.__getitem__": [[796, "skbio-table-table-getitem"]], "skbio.table.Table.__getstate__": [[797, "skbio-table-table-getstate"]], "skbio.table.Table.__gt__": [[798, "skbio-table-table-gt"]], "skbio.table.Table.__iter__": [[799, "skbio-table-table-iter"]], "skbio.table.Table.__le__": [[800, "skbio-table-table-le"]], "skbio.table.Table.__lt__": [[801, "skbio-table-table-lt"]], "skbio.table.Table.__ne__": [[802, "skbio-table-table-ne"]], "skbio.table.Table.__str__": [[803, "skbio-table-table-str"]], "skbio.table.Table.add_group_metadata": [[804, "skbio-table-table-add-group-metadata"]], "skbio.table.Table.add_metadata": [[805, "skbio-table-table-add-metadata"]], "skbio.table.Table.align_to": [[806, "skbio-table-table-align-to"]], "skbio.table.Table.align_to_dataframe": [[807, "skbio-table-table-align-to-dataframe"]], "skbio.table.Table.align_tree": [[808, "skbio-table-table-align-tree"]], "skbio.table.Table.collapse": [[809, "skbio-table-table-collapse"]], "skbio.table.Table.concat": [[810, "skbio-table-table-concat"]], "skbio.table.Table.copy": [[811, "skbio-table-table-copy"]], "skbio.table.Table.data": [[812, "skbio-table-table-data"]], "skbio.table.Table.del_metadata": [[813, "skbio-table-table-del-metadata"]], "skbio.table.Table.delimited_self": [[814, "skbio-table-table-delimited-self"]], "skbio.table.Table.descriptive_equality": [[815, "skbio-table-table-descriptive-equality"]], "skbio.table.Table.exists": [[816, "skbio-table-table-exists"]], "skbio.table.Table.filter": [[817, "skbio-table-table-filter"]], "skbio.table.Table.from_adjacency": [[818, "skbio-table-table-from-adjacency"]], "skbio.table.Table.from_hdf5": [[819, "skbio-table-table-from-hdf5"]], "skbio.table.Table.from_json": [[820, "skbio-table-table-from-json"]], "skbio.table.Table.from_tsv": [[821, "skbio-table-table-from-tsv"]], "skbio.table.Table.get_table_density": [[822, "skbio-table-table-get-table-density"]], "skbio.table.Table.get_value_by_ids": [[823, "skbio-table-table-get-value-by-ids"]], "skbio.table.Table.group_metadata": [[824, "skbio-table-table-group-metadata"]], "skbio.table.Table.head": [[825, "skbio-table-table-head"]], "skbio.table.Table.ids": [[826, "skbio-table-table-ids"]], "skbio.table.Table.index": [[827, "skbio-table-table-index"]], "skbio.table.Table.is_empty": [[828, "skbio-table-table-is-empty"]], "skbio.table.Table.iter": [[829, "skbio-table-table-iter"]], "skbio.table.Table.iter_data": [[830, "skbio-table-table-iter-data"]], "skbio.table.Table.iter_pairwise": [[831, "skbio-table-table-iter-pairwise"]], "skbio.table.Table.length": [[832, "skbio-table-table-length"]], "skbio.table.Table.max": [[833, "skbio-table-table-max"]], "skbio.table.Table.merge": [[834, "skbio-table-table-merge"]], "skbio.table.Table.metadata": [[835, "skbio-table-table-metadata"]], "skbio.table.Table.metadata_to_dataframe": [[836, "skbio-table-table-metadata-to-dataframe"]], "skbio.table.Table.min": [[837, "skbio-table-table-min"]], "skbio.table.Table.nonzero": [[838, "skbio-table-table-nonzero"]], "skbio.table.Table.nonzero_counts": [[839, "skbio-table-table-nonzero-counts"]], "skbio.table.Table.norm": [[840, "skbio-table-table-norm"]], "skbio.table.Table.pa": [[841, "skbio-table-table-pa"]], "skbio.table.Table.partition": [[842, "skbio-table-table-partition"]], "skbio.table.Table.rankdata": [[843, "skbio-table-table-rankdata"]], "skbio.table.Table.read": [[844, "skbio-table-table-read"]], "skbio.table.Table.reduce": [[845, "skbio-table-table-reduce"]], "skbio.table.Table.remove_empty": [[846, "skbio-table-table-remove-empty"]], "skbio.table.Table.sort": [[847, "skbio-table-table-sort"]], "skbio.table.Table.sort_order": [[848, "skbio-table-table-sort-order"]], "skbio.table.Table.subsample": [[849, "skbio-table-table-subsample"]], "skbio.table.Table.sum": [[850, "skbio-table-table-sum"]], "skbio.table.Table.to_anndata": [[851, "skbio-table-table-to-anndata"]], "skbio.table.Table.to_dataframe": [[852, "skbio-table-table-to-dataframe"]], "skbio.table.Table.to_hdf5": [[853, "skbio-table-table-to-hdf5"]], "skbio.table.Table.to_json": [[854, "skbio-table-table-to-json"]], "skbio.table.Table.to_tsv": [[855, "skbio-table-table-to-tsv"]], "skbio.table.Table.transform": [[856, "skbio-table-table-transform"]], "skbio.table.Table.transpose": [[857, "skbio-table-table-transpose"]], "skbio.table.Table.update_ids": [[858, "skbio-table-table-update-ids"]], "skbio.table.Table.write": [[859, "skbio-table-table-write"]], "skbio.table.example_table": [[860, "skbio-table-example-table"]], "skbio.tree.TreeNode": [[861, "skbio-tree-treenode"]], "skbio.tree.TreeNode.__copy__": [[862, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.__deepcopy__": [[863, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.__eq__": [[864, "skbio-tree-treenode-eq"]], "skbio.tree.TreeNode.__ge__": [[865, "skbio-tree-treenode-ge"]], "skbio.tree.TreeNode.__getitem__": [[866, "skbio-tree-treenode-getitem"]], "skbio.tree.TreeNode.__getstate__": [[867, "skbio-tree-treenode-getstate"]], "skbio.tree.TreeNode.__gt__": [[868, "skbio-tree-treenode-gt"]], "skbio.tree.TreeNode.__hash__": [[869, "skbio-tree-treenode-hash"]], "skbio.tree.TreeNode.__iter__": [[870, "skbio-tree-treenode-iter"]], "skbio.tree.TreeNode.__le__": [[871, "skbio-tree-treenode-le"]], "skbio.tree.TreeNode.__len__": [[872, "skbio-tree-treenode-len"]], "skbio.tree.TreeNode.__lt__": [[873, "skbio-tree-treenode-lt"]], "skbio.tree.TreeNode.__ne__": [[874, "skbio-tree-treenode-ne"]], "skbio.tree.TreeNode.__str__": [[875, "skbio-tree-treenode-str"]], "skbio.tree.TreeNode.accumulate_to_ancestor": [[876, "skbio-tree-treenode-accumulate-to-ancestor"]], "skbio.tree.TreeNode.ancestors": [[877, "skbio-tree-treenode-ancestors"]], "skbio.tree.TreeNode.append": [[878, "skbio-tree-treenode-append"]], "skbio.tree.TreeNode.ascii_art": [[879, "skbio-tree-treenode-ascii-art"]], "skbio.tree.TreeNode.assign_ids": [[880, "skbio-tree-treenode-assign-ids"]], "skbio.tree.TreeNode.assign_supports": [[881, "skbio-tree-treenode-assign-supports"]], "skbio.tree.TreeNode.bifurcate": [[882, "skbio-tree-treenode-bifurcate"]], "skbio.tree.TreeNode.cache_attr": [[883, "skbio-tree-treenode-cache-attr"]], "skbio.tree.TreeNode.compare_rfd": [[884, "skbio-tree-treenode-compare-rfd"]], "skbio.tree.TreeNode.compare_subsets": [[885, "skbio-tree-treenode-compare-subsets"]], "skbio.tree.TreeNode.compare_tip_distances": [[886, "skbio-tree-treenode-compare-tip-distances"]], "skbio.tree.TreeNode.copy": [[887, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.count": [[888, "skbio-tree-treenode-count"]], "skbio.tree.TreeNode.create_caches": [[889, "skbio-tree-treenode-create-caches"]], "skbio.tree.TreeNode.deepcopy": [[890, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.descending_branch_length": [[891, "skbio-tree-treenode-descending-branch-length"]], "skbio.tree.TreeNode.distance": [[892, "skbio-tree-treenode-distance"]], "skbio.tree.TreeNode.extend": [[893, "skbio-tree-treenode-extend"]], "skbio.tree.TreeNode.find": [[894, "skbio-tree-treenode-find"]], "skbio.tree.TreeNode.find_all": [[895, "skbio-tree-treenode-find-all"]], "skbio.tree.TreeNode.find_by_func": [[896, "skbio-tree-treenode-find-by-func"]], "skbio.tree.TreeNode.find_by_id": [[897, "skbio-tree-treenode-find-by-id"]], "skbio.tree.TreeNode.from_linkage_matrix": [[898, "skbio-tree-treenode-from-linkage-matrix"]], "skbio.tree.TreeNode.from_taxdump": [[899, "skbio-tree-treenode-from-taxdump"]], "skbio.tree.TreeNode.from_taxonomy": [[900, "skbio-tree-treenode-from-taxonomy"]], "skbio.tree.TreeNode.get_max_distance": [[901, "skbio-tree-treenode-get-max-distance"]], "skbio.tree.TreeNode.has_children": [[902, "skbio-tree-treenode-has-children"]], "skbio.tree.TreeNode.index_tree": [[903, "skbio-tree-treenode-index-tree"]], "skbio.tree.TreeNode.invalidate_caches": [[904, "skbio-tree-treenode-invalidate-caches"]], "skbio.tree.TreeNode.is_root": [[905, "skbio-tree-treenode-is-root"]], "skbio.tree.TreeNode.is_tip": [[906, "skbio-tree-treenode-is-tip"]], "skbio.tree.TreeNode.lca": [[907, "skbio-tree-treenode-lca"]], "skbio.tree.TreeNode.levelorder": [[908, "skbio-tree-treenode-levelorder"]], "skbio.tree.TreeNode.lowest_common_ancestor": [[909, "skbio-tree-treenode-lowest-common-ancestor"]], "skbio.tree.TreeNode.neighbors": [[910, "skbio-tree-treenode-neighbors"]], "skbio.tree.TreeNode.non_tips": [[911, "skbio-tree-treenode-non-tips"]], "skbio.tree.TreeNode.observed_node_counts": [[912, "skbio-tree-treenode-observed-node-counts"]], "skbio.tree.TreeNode.pop": [[913, "skbio-tree-treenode-pop"]], "skbio.tree.TreeNode.postorder": [[914, "skbio-tree-treenode-postorder"]], "skbio.tree.TreeNode.pre_and_postorder": [[915, "skbio-tree-treenode-pre-and-postorder"]], "skbio.tree.TreeNode.preorder": [[916, "skbio-tree-treenode-preorder"]], "skbio.tree.TreeNode.prune": [[917, "skbio-tree-treenode-prune"]], "skbio.tree.TreeNode.read": [[918, "skbio-tree-treenode-read"]], "skbio.tree.TreeNode.remove": [[919, "skbio-tree-treenode-remove"]], "skbio.tree.TreeNode.remove_deleted": [[920, "skbio-tree-treenode-remove-deleted"]], "skbio.tree.TreeNode.root": [[921, "skbio-tree-treenode-root"]], "skbio.tree.TreeNode.root_at": [[922, "skbio-tree-treenode-root-at"]], "skbio.tree.TreeNode.root_at_midpoint": [[923, "skbio-tree-treenode-root-at-midpoint"]], "skbio.tree.TreeNode.shear": [[924, "skbio-tree-treenode-shear"]], "skbio.tree.TreeNode.shuffle": [[925, "skbio-tree-treenode-shuffle"]], "skbio.tree.TreeNode.siblings": [[926, "skbio-tree-treenode-siblings"]], "skbio.tree.TreeNode.subset": [[927, "skbio-tree-treenode-subset"]], "skbio.tree.TreeNode.subsets": [[928, "skbio-tree-treenode-subsets"]], "skbio.tree.TreeNode.subtree": [[929, "skbio-tree-treenode-subtree"]], "skbio.tree.TreeNode.tip_tip_distances": [[930, "skbio-tree-treenode-tip-tip-distances"]], "skbio.tree.TreeNode.tips": [[931, "skbio-tree-treenode-tips"]], "skbio.tree.TreeNode.to_array": [[932, "skbio-tree-treenode-to-array"]], "skbio.tree.TreeNode.to_taxonomy": [[933, "skbio-tree-treenode-to-taxonomy"]], "skbio.tree.TreeNode.traverse": [[934, "skbio-tree-treenode-traverse"]], "skbio.tree.TreeNode.unpack": [[935, "skbio-tree-treenode-unpack"]], "skbio.tree.TreeNode.unpack_by_func": [[936, "skbio-tree-treenode-unpack-by-func"]], "skbio.tree.TreeNode.unrooted_copy": [[937, "skbio-tree-treenode-unrooted-copy"]], "skbio.tree.TreeNode.unrooted_deepcopy": [[938, "skbio-tree-treenode-unrooted-deepcopy"]], "skbio.tree.TreeNode.write": [[939, "skbio-tree-treenode-write"]], "skbio.tree.majority_rule": [[940, "skbio-tree-majority-rule"]], "skbio.tree.nj": [[941, "skbio-tree-nj"]], "skbio.util.EfficiencyWarning": [[942, "skbio-util-efficiencywarning"]], "skbio.util.RepresentationWarning": [[943, "skbio-util-representationwarning"]], "skbio.util.assert_data_frame_almost_equal": [[944, "skbio-util-assert-data-frame-almost-equal"]], "skbio.util.assert_ordination_results_equal": [[945, "skbio-util-assert-ordination-results-equal"]], "skbio.util.cardinal_to_ordinal": [[946, "skbio-util-cardinal-to-ordinal"]], "skbio.util.classproperty": [[947, "skbio-util-classproperty"]], "skbio.util.classproperty.__delete__": [[948, "skbio-util-classproperty-delete"]], "skbio.util.classproperty.__eq__": [[949, "skbio-util-classproperty-eq"]], "skbio.util.classproperty.__ge__": [[950, "skbio-util-classproperty-ge"]], "skbio.util.classproperty.__get__": [[951, "skbio-util-classproperty-get"]], "skbio.util.classproperty.__getstate__": [[952, "skbio-util-classproperty-getstate"]], "skbio.util.classproperty.__gt__": [[953, "skbio-util-classproperty-gt"]], "skbio.util.classproperty.__hash__": [[954, "skbio-util-classproperty-hash"]], "skbio.util.classproperty.__le__": [[955, "skbio-util-classproperty-le"]], "skbio.util.classproperty.__lt__": [[956, "skbio-util-classproperty-lt"]], "skbio.util.classproperty.__ne__": [[957, "skbio-util-classproperty-ne"]], "skbio.util.classproperty.__set__": [[958, "skbio-util-classproperty-set"]], "skbio.util.classproperty.__set_name__": [[959, "skbio-util-classproperty-set-name"]], "skbio.util.classproperty.__str__": [[960, "skbio-util-classproperty-str"]], "skbio.util.classproperty.deleter": [[961, "skbio-util-classproperty-deleter"]], "skbio.util.classproperty.getter": [[962, "skbio-util-classproperty-getter"]], "skbio.util.classproperty.setter": [[963, "skbio-util-classproperty-setter"]], "skbio.util.find_duplicates": [[964, "skbio-util-find-duplicates"]], "skbio.util.get_data_path": [[965, "skbio-util-get-data-path"]], "skbio.util.safe_md5": [[966, "skbio-util-safe-md5"]], "skbio.workflow.Workflow": [[967, "skbio-workflow-workflow"]], "skbio.workflow.Workflow.__call__": [[968, "skbio-workflow-workflow-call"]], "skbio.workflow.Workflow.__eq__": [[969, "skbio-workflow-workflow-eq"]], "skbio.workflow.Workflow.__ge__": [[970, "skbio-workflow-workflow-ge"]], "skbio.workflow.Workflow.__getstate__": [[971, "skbio-workflow-workflow-getstate"]], "skbio.workflow.Workflow.__gt__": [[972, "skbio-workflow-workflow-gt"]], "skbio.workflow.Workflow.__hash__": [[973, "skbio-workflow-workflow-hash"]], "skbio.workflow.Workflow.__le__": [[974, "skbio-workflow-workflow-le"]], "skbio.workflow.Workflow.__lt__": [[975, "skbio-workflow-workflow-lt"]], "skbio.workflow.Workflow.__ne__": [[976, "skbio-workflow-workflow-ne"]], "skbio.workflow.Workflow.__str__": [[977, "skbio-workflow-workflow-str"]], "skbio.workflow.Workflow.initialize_state": [[978, "skbio-workflow-workflow-initialize-state"]], "skbio.workflow.method": [[979, "skbio-workflow-method"]], "skbio.workflow.method.__call__": [[980, "skbio-workflow-method-call"]], "skbio.workflow.method.__eq__": [[981, "skbio-workflow-method-eq"]], "skbio.workflow.method.__ge__": [[982, "skbio-workflow-method-ge"]], "skbio.workflow.method.__getstate__": [[983, "skbio-workflow-method-getstate"]], "skbio.workflow.method.__gt__": [[984, "skbio-workflow-method-gt"]], "skbio.workflow.method.__hash__": [[985, "skbio-workflow-method-hash"]], "skbio.workflow.method.__le__": [[986, "skbio-workflow-method-le"]], "skbio.workflow.method.__lt__": [[987, "skbio-workflow-method-lt"]], "skbio.workflow.method.__ne__": [[988, "skbio-workflow-method-ne"]], "skbio.workflow.method.__str__": [[989, "skbio-workflow-method-str"]], "skbio.workflow.requires": [[990, "skbio-workflow-requires"]], "skbio.workflow.requires.__call__": [[991, "skbio-workflow-requires-call"]], "skbio.workflow.requires.__eq__": [[992, "skbio-workflow-requires-eq"]], "skbio.workflow.requires.__ge__": [[993, "skbio-workflow-requires-ge"]], "skbio.workflow.requires.__getstate__": [[994, "skbio-workflow-requires-getstate"]], "skbio.workflow.requires.__gt__": [[995, "skbio-workflow-requires-gt"]], "skbio.workflow.requires.__hash__": [[996, "skbio-workflow-requires-hash"]], "skbio.workflow.requires.__le__": [[997, "skbio-workflow-requires-le"]], "skbio.workflow.requires.__lt__": [[998, "skbio-workflow-requires-lt"]], "skbio.workflow.requires.__ne__": [[999, "skbio-workflow-requires-ne"]], "skbio.workflow.requires.__str__": [[1000, "skbio-workflow-requires-str"]]}, "docnames": ["alignment", "diversity", "embedding", "generated/skbio.alignment.AlignmentStructure", "generated/skbio.alignment.AlignmentStructure.__eq__", "generated/skbio.alignment.AlignmentStructure.__ge__", "generated/skbio.alignment.AlignmentStructure.__getitem__", "generated/skbio.alignment.AlignmentStructure.__getstate__", "generated/skbio.alignment.AlignmentStructure.__gt__", "generated/skbio.alignment.AlignmentStructure.__hash__", "generated/skbio.alignment.AlignmentStructure.__le__", "generated/skbio.alignment.AlignmentStructure.__lt__", "generated/skbio.alignment.AlignmentStructure.__ne__", "generated/skbio.alignment.AlignmentStructure.__setstate__", "generated/skbio.alignment.AlignmentStructure.__str__", "generated/skbio.alignment.AlignmentStructure.is_zero_based", "generated/skbio.alignment.AlignmentStructure.set_zero_based", "generated/skbio.alignment.StripedSmithWaterman", "generated/skbio.alignment.StripedSmithWaterman.__call__", "generated/skbio.alignment.StripedSmithWaterman.__eq__", "generated/skbio.alignment.StripedSmithWaterman.__ge__", "generated/skbio.alignment.StripedSmithWaterman.__getstate__", "generated/skbio.alignment.StripedSmithWaterman.__gt__", "generated/skbio.alignment.StripedSmithWaterman.__hash__", "generated/skbio.alignment.StripedSmithWaterman.__le__", "generated/skbio.alignment.StripedSmithWaterman.__lt__", "generated/skbio.alignment.StripedSmithWaterman.__ne__", "generated/skbio.alignment.StripedSmithWaterman.__setstate__", "generated/skbio.alignment.StripedSmithWaterman.__str__", "generated/skbio.alignment.TabularMSA", "generated/skbio.alignment.TabularMSA.__bool__", "generated/skbio.alignment.TabularMSA.__contains__", "generated/skbio.alignment.TabularMSA.__copy__", "generated/skbio.alignment.TabularMSA.__deepcopy__", "generated/skbio.alignment.TabularMSA.__eq__", "generated/skbio.alignment.TabularMSA.__ge__", "generated/skbio.alignment.TabularMSA.__getitem__", "generated/skbio.alignment.TabularMSA.__getstate__", "generated/skbio.alignment.TabularMSA.__gt__", "generated/skbio.alignment.TabularMSA.__iter__", "generated/skbio.alignment.TabularMSA.__le__", "generated/skbio.alignment.TabularMSA.__len__", "generated/skbio.alignment.TabularMSA.__lt__", "generated/skbio.alignment.TabularMSA.__ne__", "generated/skbio.alignment.TabularMSA.__reversed__", "generated/skbio.alignment.TabularMSA.__str__", "generated/skbio.alignment.TabularMSA.append", "generated/skbio.alignment.TabularMSA.consensus", "generated/skbio.alignment.TabularMSA.conservation", "generated/skbio.alignment.TabularMSA.extend", "generated/skbio.alignment.TabularMSA.from_dict", "generated/skbio.alignment.TabularMSA.gap_frequencies", "generated/skbio.alignment.TabularMSA.has_metadata", "generated/skbio.alignment.TabularMSA.has_positional_metadata", "generated/skbio.alignment.TabularMSA.iter_positions", "generated/skbio.alignment.TabularMSA.join", "generated/skbio.alignment.TabularMSA.read", "generated/skbio.alignment.TabularMSA.reassign_index", "generated/skbio.alignment.TabularMSA.sort", "generated/skbio.alignment.TabularMSA.to_dict", "generated/skbio.alignment.TabularMSA.write", "generated/skbio.alignment.global_pairwise_align", "generated/skbio.alignment.global_pairwise_align_nucleotide", "generated/skbio.alignment.global_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align", "generated/skbio.alignment.local_pairwise_align_nucleotide", "generated/skbio.alignment.local_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align_ssw", "generated/skbio.alignment.make_identity_substitution_matrix", "generated/skbio.diversity.alpha", "generated/skbio.diversity.alpha.ace", "generated/skbio.diversity.alpha.berger_parker_d", "generated/skbio.diversity.alpha.brillouin_d", "generated/skbio.diversity.alpha.chao1", "generated/skbio.diversity.alpha.chao1_ci", "generated/skbio.diversity.alpha.dominance", "generated/skbio.diversity.alpha.doubles", "generated/skbio.diversity.alpha.enspie", "generated/skbio.diversity.alpha.esty_ci", "generated/skbio.diversity.alpha.faith_pd", "generated/skbio.diversity.alpha.fisher_alpha", "generated/skbio.diversity.alpha.gini_index", "generated/skbio.diversity.alpha.goods_coverage", "generated/skbio.diversity.alpha.heip_e", "generated/skbio.diversity.alpha.kempton_taylor_q", "generated/skbio.diversity.alpha.lladser_ci", "generated/skbio.diversity.alpha.lladser_pe", "generated/skbio.diversity.alpha.margalef", "generated/skbio.diversity.alpha.mcintosh_d", "generated/skbio.diversity.alpha.mcintosh_e", "generated/skbio.diversity.alpha.menhinick", "generated/skbio.diversity.alpha.michaelis_menten_fit", "generated/skbio.diversity.alpha.observed_features", "generated/skbio.diversity.alpha.observed_otus", "generated/skbio.diversity.alpha.osd", "generated/skbio.diversity.alpha.phydiv", "generated/skbio.diversity.alpha.pielou_e", "generated/skbio.diversity.alpha.robbins", "generated/skbio.diversity.alpha.shannon", "generated/skbio.diversity.alpha.simpson", "generated/skbio.diversity.alpha.simpson_e", "generated/skbio.diversity.alpha.singles", "generated/skbio.diversity.alpha.sobs", "generated/skbio.diversity.alpha.strong", "generated/skbio.diversity.alpha_diversity", "generated/skbio.diversity.beta", "generated/skbio.diversity.beta.unweighted_unifrac", "generated/skbio.diversity.beta.weighted_unifrac", "generated/skbio.diversity.beta_diversity", "generated/skbio.diversity.block_beta_diversity", "generated/skbio.diversity.get_alpha_diversity_metrics", "generated/skbio.diversity.get_beta_diversity_metrics", "generated/skbio.diversity.partial_beta_diversity", "generated/skbio.embedding.ProteinEmbedding", "generated/skbio.embedding.ProteinEmbedding.__eq__", "generated/skbio.embedding.ProteinEmbedding.__ge__", "generated/skbio.embedding.ProteinEmbedding.__getstate__", "generated/skbio.embedding.ProteinEmbedding.__gt__", "generated/skbio.embedding.ProteinEmbedding.__hash__", "generated/skbio.embedding.ProteinEmbedding.__le__", "generated/skbio.embedding.ProteinEmbedding.__lt__", "generated/skbio.embedding.ProteinEmbedding.__ne__", "generated/skbio.embedding.ProteinEmbedding.__str__", "generated/skbio.embedding.ProteinEmbedding.read", "generated/skbio.embedding.ProteinEmbedding.write", "generated/skbio.io.format.binary_dm", "generated/skbio.io.format.biom", "generated/skbio.io.format.blast6", "generated/skbio.io.format.blast7", "generated/skbio.io.format.clustal", "generated/skbio.io.format.embedding", "generated/skbio.io.format.embl", "generated/skbio.io.format.fasta", "generated/skbio.io.format.fastq", "generated/skbio.io.format.genbank", "generated/skbio.io.format.gff3", "generated/skbio.io.format.lsmat", "generated/skbio.io.format.newick", "generated/skbio.io.format.ordination", "generated/skbio.io.format.phylip", "generated/skbio.io.format.qseq", "generated/skbio.io.format.sample_metadata", "generated/skbio.io.format.stockholm", "generated/skbio.io.format.taxdump", "generated/skbio.io.registry", "generated/skbio.io.registry.Format", "generated/skbio.io.registry.Format.__eq__", "generated/skbio.io.registry.Format.__ge__", "generated/skbio.io.registry.Format.__getstate__", "generated/skbio.io.registry.Format.__gt__", "generated/skbio.io.registry.Format.__hash__", "generated/skbio.io.registry.Format.__le__", "generated/skbio.io.registry.Format.__lt__", "generated/skbio.io.registry.Format.__ne__", "generated/skbio.io.registry.Format.__str__", "generated/skbio.io.registry.Format.reader", "generated/skbio.io.registry.Format.sniffer", "generated/skbio.io.registry.Format.writer", "generated/skbio.io.registry.IORegistry", "generated/skbio.io.registry.IORegistry.__eq__", "generated/skbio.io.registry.IORegistry.__ge__", "generated/skbio.io.registry.IORegistry.__getstate__", "generated/skbio.io.registry.IORegistry.__gt__", "generated/skbio.io.registry.IORegistry.__hash__", "generated/skbio.io.registry.IORegistry.__le__", "generated/skbio.io.registry.IORegistry.__lt__", "generated/skbio.io.registry.IORegistry.__ne__", "generated/skbio.io.registry.IORegistry.__str__", "generated/skbio.io.registry.IORegistry.add_format", "generated/skbio.io.registry.IORegistry.create_format", "generated/skbio.io.registry.IORegistry.get_reader", "generated/skbio.io.registry.IORegistry.get_sniffer", "generated/skbio.io.registry.IORegistry.get_writer", "generated/skbio.io.registry.IORegistry.list_read_formats", "generated/skbio.io.registry.IORegistry.list_write_formats", "generated/skbio.io.registry.IORegistry.monkey_patch", "generated/skbio.io.registry.IORegistry.read", "generated/skbio.io.registry.IORegistry.sniff", "generated/skbio.io.registry.IORegistry.write", "generated/skbio.io.registry.create_format", "generated/skbio.io.registry.read", "generated/skbio.io.registry.sniff", "generated/skbio.io.registry.write", "generated/skbio.io.util", "generated/skbio.io.util.open", "generated/skbio.io.util.open_file", "generated/skbio.io.util.open_files", "generated/skbio.metadata.CategoricalMetadataColumn", "generated/skbio.metadata.CategoricalMetadataColumn.__eq__", "generated/skbio.metadata.CategoricalMetadataColumn.__ge__", "generated/skbio.metadata.CategoricalMetadataColumn.__getstate__", "generated/skbio.metadata.CategoricalMetadataColumn.__gt__", "generated/skbio.metadata.CategoricalMetadataColumn.__le__", "generated/skbio.metadata.CategoricalMetadataColumn.__lt__", "generated/skbio.metadata.CategoricalMetadataColumn.__ne__", "generated/skbio.metadata.CategoricalMetadataColumn.__str__", "generated/skbio.metadata.CategoricalMetadataColumn.drop_missing_values", "generated/skbio.metadata.CategoricalMetadataColumn.filter_ids", "generated/skbio.metadata.CategoricalMetadataColumn.get_ids", "generated/skbio.metadata.CategoricalMetadataColumn.get_missing", "generated/skbio.metadata.CategoricalMetadataColumn.get_value", "generated/skbio.metadata.CategoricalMetadataColumn.has_missing_values", "generated/skbio.metadata.CategoricalMetadataColumn.save", "generated/skbio.metadata.CategoricalMetadataColumn.to_dataframe", "generated/skbio.metadata.CategoricalMetadataColumn.to_series", "generated/skbio.metadata.Interval", "generated/skbio.metadata.Interval.__eq__", "generated/skbio.metadata.Interval.__ge__", "generated/skbio.metadata.Interval.__getstate__", "generated/skbio.metadata.Interval.__gt__", "generated/skbio.metadata.Interval.__le__", "generated/skbio.metadata.Interval.__lt__", "generated/skbio.metadata.Interval.__ne__", "generated/skbio.metadata.Interval.__str__", "generated/skbio.metadata.Interval.drop", "generated/skbio.metadata.IntervalMetadata", "generated/skbio.metadata.IntervalMetadata.__copy__", "generated/skbio.metadata.IntervalMetadata.__deepcopy__", "generated/skbio.metadata.IntervalMetadata.__eq__", "generated/skbio.metadata.IntervalMetadata.__ge__", "generated/skbio.metadata.IntervalMetadata.__getstate__", "generated/skbio.metadata.IntervalMetadata.__gt__", "generated/skbio.metadata.IntervalMetadata.__le__", "generated/skbio.metadata.IntervalMetadata.__lt__", "generated/skbio.metadata.IntervalMetadata.__ne__", "generated/skbio.metadata.IntervalMetadata.__str__", "generated/skbio.metadata.IntervalMetadata.add", "generated/skbio.metadata.IntervalMetadata.concat", "generated/skbio.metadata.IntervalMetadata.drop", "generated/skbio.metadata.IntervalMetadata.merge", "generated/skbio.metadata.IntervalMetadata.query", "generated/skbio.metadata.IntervalMetadata.read", "generated/skbio.metadata.IntervalMetadata.sort", "generated/skbio.metadata.IntervalMetadata.write", "generated/skbio.metadata.MetadataColumn", "generated/skbio.metadata.MetadataColumn.__eq__", "generated/skbio.metadata.MetadataColumn.__ge__", "generated/skbio.metadata.MetadataColumn.__getstate__", "generated/skbio.metadata.MetadataColumn.__gt__", "generated/skbio.metadata.MetadataColumn.__le__", "generated/skbio.metadata.MetadataColumn.__lt__", "generated/skbio.metadata.MetadataColumn.__ne__", "generated/skbio.metadata.MetadataColumn.__str__", "generated/skbio.metadata.MetadataColumn.drop_missing_values", "generated/skbio.metadata.MetadataColumn.filter_ids", "generated/skbio.metadata.MetadataColumn.get_ids", "generated/skbio.metadata.MetadataColumn.get_missing", "generated/skbio.metadata.MetadataColumn.get_value", "generated/skbio.metadata.MetadataColumn.has_missing_values", "generated/skbio.metadata.MetadataColumn.save", "generated/skbio.metadata.MetadataColumn.to_dataframe", "generated/skbio.metadata.MetadataColumn.to_series", "generated/skbio.metadata.NumericMetadataColumn", "generated/skbio.metadata.NumericMetadataColumn.__eq__", "generated/skbio.metadata.NumericMetadataColumn.__ge__", "generated/skbio.metadata.NumericMetadataColumn.__getstate__", "generated/skbio.metadata.NumericMetadataColumn.__gt__", "generated/skbio.metadata.NumericMetadataColumn.__le__", "generated/skbio.metadata.NumericMetadataColumn.__lt__", "generated/skbio.metadata.NumericMetadataColumn.__ne__", "generated/skbio.metadata.NumericMetadataColumn.__str__", "generated/skbio.metadata.NumericMetadataColumn.drop_missing_values", "generated/skbio.metadata.NumericMetadataColumn.filter_ids", "generated/skbio.metadata.NumericMetadataColumn.get_ids", "generated/skbio.metadata.NumericMetadataColumn.get_missing", "generated/skbio.metadata.NumericMetadataColumn.get_value", "generated/skbio.metadata.NumericMetadataColumn.has_missing_values", "generated/skbio.metadata.NumericMetadataColumn.save", "generated/skbio.metadata.NumericMetadataColumn.to_dataframe", "generated/skbio.metadata.NumericMetadataColumn.to_series", "generated/skbio.metadata.SampleMetadata", "generated/skbio.metadata.SampleMetadata.__eq__", "generated/skbio.metadata.SampleMetadata.__ge__", "generated/skbio.metadata.SampleMetadata.__getstate__", "generated/skbio.metadata.SampleMetadata.__gt__", "generated/skbio.metadata.SampleMetadata.__le__", "generated/skbio.metadata.SampleMetadata.__lt__", "generated/skbio.metadata.SampleMetadata.__ne__", "generated/skbio.metadata.SampleMetadata.__str__", "generated/skbio.metadata.SampleMetadata.filter_columns", "generated/skbio.metadata.SampleMetadata.filter_ids", "generated/skbio.metadata.SampleMetadata.get_column", "generated/skbio.metadata.SampleMetadata.get_ids", "generated/skbio.metadata.SampleMetadata.load", "generated/skbio.metadata.SampleMetadata.merge", "generated/skbio.metadata.SampleMetadata.read", "generated/skbio.metadata.SampleMetadata.save", "generated/skbio.metadata.SampleMetadata.to_dataframe", "generated/skbio.metadata.SampleMetadata.write", "generated/skbio.sequence.DNA", "generated/skbio.sequence.DNA.__bool__", "generated/skbio.sequence.DNA.__contains__", "generated/skbio.sequence.DNA.__copy__", "generated/skbio.sequence.DNA.__deepcopy__", "generated/skbio.sequence.DNA.__eq__", "generated/skbio.sequence.DNA.__ge__", "generated/skbio.sequence.DNA.__getitem__", "generated/skbio.sequence.DNA.__getstate__", "generated/skbio.sequence.DNA.__gt__", "generated/skbio.sequence.DNA.__iter__", "generated/skbio.sequence.DNA.__le__", "generated/skbio.sequence.DNA.__len__", "generated/skbio.sequence.DNA.__lt__", "generated/skbio.sequence.DNA.__ne__", "generated/skbio.sequence.DNA.__reversed__", "generated/skbio.sequence.DNA.__str__", "generated/skbio.sequence.DNA.complement", "generated/skbio.sequence.DNA.concat", "generated/skbio.sequence.DNA.count", "generated/skbio.sequence.DNA.definites", "generated/skbio.sequence.DNA.degap", "generated/skbio.sequence.DNA.degenerates", "generated/skbio.sequence.DNA.distance", "generated/skbio.sequence.DNA.expand_degenerates", "generated/skbio.sequence.DNA.find_motifs", "generated/skbio.sequence.DNA.find_with_regex", "generated/skbio.sequence.DNA.frequencies", "generated/skbio.sequence.DNA.gaps", "generated/skbio.sequence.DNA.gc_content", "generated/skbio.sequence.DNA.gc_frequency", "generated/skbio.sequence.DNA.has_definites", "generated/skbio.sequence.DNA.has_degenerates", "generated/skbio.sequence.DNA.has_gaps", "generated/skbio.sequence.DNA.has_interval_metadata", "generated/skbio.sequence.DNA.has_metadata", "generated/skbio.sequence.DNA.has_nondegenerates", "generated/skbio.sequence.DNA.has_positional_metadata", "generated/skbio.sequence.DNA.index", "generated/skbio.sequence.DNA.is_reverse_complement", "generated/skbio.sequence.DNA.iter_contiguous", "generated/skbio.sequence.DNA.iter_kmers", "generated/skbio.sequence.DNA.kmer_frequencies", "generated/skbio.sequence.DNA.lowercase", "generated/skbio.sequence.DNA.match_frequency", "generated/skbio.sequence.DNA.matches", "generated/skbio.sequence.DNA.mismatch_frequency", "generated/skbio.sequence.DNA.mismatches", "generated/skbio.sequence.DNA.nondegenerates", "generated/skbio.sequence.DNA.read", "generated/skbio.sequence.DNA.replace", "generated/skbio.sequence.DNA.reverse_complement", "generated/skbio.sequence.DNA.to_definites", "generated/skbio.sequence.DNA.to_indices", "generated/skbio.sequence.DNA.to_regex", "generated/skbio.sequence.DNA.transcribe", "generated/skbio.sequence.DNA.translate", "generated/skbio.sequence.DNA.translate_six_frames", "generated/skbio.sequence.DNA.write", "generated/skbio.sequence.GeneticCode", "generated/skbio.sequence.GeneticCode.__eq__", "generated/skbio.sequence.GeneticCode.__ge__", "generated/skbio.sequence.GeneticCode.__getstate__", "generated/skbio.sequence.GeneticCode.__gt__", "generated/skbio.sequence.GeneticCode.__le__", "generated/skbio.sequence.GeneticCode.__lt__", "generated/skbio.sequence.GeneticCode.__ne__", "generated/skbio.sequence.GeneticCode.__str__", "generated/skbio.sequence.GeneticCode.from_ncbi", "generated/skbio.sequence.GeneticCode.translate", "generated/skbio.sequence.GeneticCode.translate_six_frames", "generated/skbio.sequence.GrammaredSequence", "generated/skbio.sequence.GrammaredSequence.__bool__", "generated/skbio.sequence.GrammaredSequence.__contains__", "generated/skbio.sequence.GrammaredSequence.__copy__", "generated/skbio.sequence.GrammaredSequence.__deepcopy__", "generated/skbio.sequence.GrammaredSequence.__eq__", "generated/skbio.sequence.GrammaredSequence.__ge__", "generated/skbio.sequence.GrammaredSequence.__getitem__", "generated/skbio.sequence.GrammaredSequence.__getstate__", "generated/skbio.sequence.GrammaredSequence.__gt__", "generated/skbio.sequence.GrammaredSequence.__iter__", "generated/skbio.sequence.GrammaredSequence.__le__", "generated/skbio.sequence.GrammaredSequence.__len__", "generated/skbio.sequence.GrammaredSequence.__lt__", "generated/skbio.sequence.GrammaredSequence.__ne__", "generated/skbio.sequence.GrammaredSequence.__reversed__", "generated/skbio.sequence.GrammaredSequence.__str__", "generated/skbio.sequence.GrammaredSequence.concat", "generated/skbio.sequence.GrammaredSequence.count", "generated/skbio.sequence.GrammaredSequence.definites", "generated/skbio.sequence.GrammaredSequence.degap", "generated/skbio.sequence.GrammaredSequence.degenerates", "generated/skbio.sequence.GrammaredSequence.distance", "generated/skbio.sequence.GrammaredSequence.expand_degenerates", "generated/skbio.sequence.GrammaredSequence.find_motifs", "generated/skbio.sequence.GrammaredSequence.find_with_regex", "generated/skbio.sequence.GrammaredSequence.frequencies", "generated/skbio.sequence.GrammaredSequence.gaps", "generated/skbio.sequence.GrammaredSequence.has_definites", "generated/skbio.sequence.GrammaredSequence.has_degenerates", "generated/skbio.sequence.GrammaredSequence.has_gaps", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata", "generated/skbio.sequence.GrammaredSequence.has_metadata", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata", "generated/skbio.sequence.GrammaredSequence.index", "generated/skbio.sequence.GrammaredSequence.iter_contiguous", "generated/skbio.sequence.GrammaredSequence.iter_kmers", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies", "generated/skbio.sequence.GrammaredSequence.lowercase", "generated/skbio.sequence.GrammaredSequence.match_frequency", "generated/skbio.sequence.GrammaredSequence.matches", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency", "generated/skbio.sequence.GrammaredSequence.mismatches", "generated/skbio.sequence.GrammaredSequence.nondegenerates", "generated/skbio.sequence.GrammaredSequence.read", "generated/skbio.sequence.GrammaredSequence.replace", "generated/skbio.sequence.GrammaredSequence.to_definites", "generated/skbio.sequence.GrammaredSequence.to_indices", "generated/skbio.sequence.GrammaredSequence.to_regex", "generated/skbio.sequence.GrammaredSequence.write", "generated/skbio.sequence.Protein", "generated/skbio.sequence.Protein.__bool__", "generated/skbio.sequence.Protein.__contains__", "generated/skbio.sequence.Protein.__copy__", "generated/skbio.sequence.Protein.__deepcopy__", "generated/skbio.sequence.Protein.__eq__", "generated/skbio.sequence.Protein.__ge__", "generated/skbio.sequence.Protein.__getitem__", "generated/skbio.sequence.Protein.__getstate__", "generated/skbio.sequence.Protein.__gt__", "generated/skbio.sequence.Protein.__iter__", "generated/skbio.sequence.Protein.__le__", "generated/skbio.sequence.Protein.__len__", "generated/skbio.sequence.Protein.__lt__", "generated/skbio.sequence.Protein.__ne__", "generated/skbio.sequence.Protein.__reversed__", "generated/skbio.sequence.Protein.__str__", "generated/skbio.sequence.Protein.concat", "generated/skbio.sequence.Protein.count", "generated/skbio.sequence.Protein.definites", "generated/skbio.sequence.Protein.degap", "generated/skbio.sequence.Protein.degenerates", "generated/skbio.sequence.Protein.distance", "generated/skbio.sequence.Protein.expand_degenerates", "generated/skbio.sequence.Protein.find_motifs", "generated/skbio.sequence.Protein.find_with_regex", "generated/skbio.sequence.Protein.frequencies", "generated/skbio.sequence.Protein.gaps", "generated/skbio.sequence.Protein.has_definites", "generated/skbio.sequence.Protein.has_degenerates", "generated/skbio.sequence.Protein.has_gaps", "generated/skbio.sequence.Protein.has_interval_metadata", "generated/skbio.sequence.Protein.has_metadata", "generated/skbio.sequence.Protein.has_nondegenerates", "generated/skbio.sequence.Protein.has_positional_metadata", "generated/skbio.sequence.Protein.has_stops", "generated/skbio.sequence.Protein.index", "generated/skbio.sequence.Protein.iter_contiguous", "generated/skbio.sequence.Protein.iter_kmers", "generated/skbio.sequence.Protein.kmer_frequencies", "generated/skbio.sequence.Protein.lowercase", "generated/skbio.sequence.Protein.match_frequency", "generated/skbio.sequence.Protein.matches", "generated/skbio.sequence.Protein.mismatch_frequency", "generated/skbio.sequence.Protein.mismatches", "generated/skbio.sequence.Protein.nondegenerates", "generated/skbio.sequence.Protein.read", "generated/skbio.sequence.Protein.replace", "generated/skbio.sequence.Protein.stops", "generated/skbio.sequence.Protein.to_definites", "generated/skbio.sequence.Protein.to_indices", "generated/skbio.sequence.Protein.to_regex", "generated/skbio.sequence.Protein.write", "generated/skbio.sequence.RNA", "generated/skbio.sequence.RNA.__bool__", "generated/skbio.sequence.RNA.__contains__", "generated/skbio.sequence.RNA.__copy__", "generated/skbio.sequence.RNA.__deepcopy__", "generated/skbio.sequence.RNA.__eq__", "generated/skbio.sequence.RNA.__ge__", "generated/skbio.sequence.RNA.__getitem__", "generated/skbio.sequence.RNA.__getstate__", "generated/skbio.sequence.RNA.__gt__", "generated/skbio.sequence.RNA.__iter__", "generated/skbio.sequence.RNA.__le__", "generated/skbio.sequence.RNA.__len__", "generated/skbio.sequence.RNA.__lt__", "generated/skbio.sequence.RNA.__ne__", "generated/skbio.sequence.RNA.__reversed__", "generated/skbio.sequence.RNA.__str__", "generated/skbio.sequence.RNA.complement", "generated/skbio.sequence.RNA.concat", "generated/skbio.sequence.RNA.count", "generated/skbio.sequence.RNA.definites", "generated/skbio.sequence.RNA.degap", "generated/skbio.sequence.RNA.degenerates", "generated/skbio.sequence.RNA.distance", "generated/skbio.sequence.RNA.expand_degenerates", "generated/skbio.sequence.RNA.find_motifs", "generated/skbio.sequence.RNA.find_with_regex", "generated/skbio.sequence.RNA.frequencies", "generated/skbio.sequence.RNA.gaps", "generated/skbio.sequence.RNA.gc_content", "generated/skbio.sequence.RNA.gc_frequency", "generated/skbio.sequence.RNA.has_definites", "generated/skbio.sequence.RNA.has_degenerates", "generated/skbio.sequence.RNA.has_gaps", "generated/skbio.sequence.RNA.has_interval_metadata", "generated/skbio.sequence.RNA.has_metadata", "generated/skbio.sequence.RNA.has_nondegenerates", "generated/skbio.sequence.RNA.has_positional_metadata", "generated/skbio.sequence.RNA.index", "generated/skbio.sequence.RNA.is_reverse_complement", "generated/skbio.sequence.RNA.iter_contiguous", "generated/skbio.sequence.RNA.iter_kmers", "generated/skbio.sequence.RNA.kmer_frequencies", "generated/skbio.sequence.RNA.lowercase", "generated/skbio.sequence.RNA.match_frequency", "generated/skbio.sequence.RNA.matches", "generated/skbio.sequence.RNA.mismatch_frequency", "generated/skbio.sequence.RNA.mismatches", "generated/skbio.sequence.RNA.nondegenerates", "generated/skbio.sequence.RNA.read", "generated/skbio.sequence.RNA.replace", "generated/skbio.sequence.RNA.reverse_complement", "generated/skbio.sequence.RNA.reverse_transcribe", "generated/skbio.sequence.RNA.to_definites", "generated/skbio.sequence.RNA.to_indices", "generated/skbio.sequence.RNA.to_regex", "generated/skbio.sequence.RNA.translate", "generated/skbio.sequence.RNA.translate_six_frames", "generated/skbio.sequence.RNA.write", "generated/skbio.sequence.Sequence", "generated/skbio.sequence.Sequence.__bool__", "generated/skbio.sequence.Sequence.__contains__", "generated/skbio.sequence.Sequence.__copy__", "generated/skbio.sequence.Sequence.__deepcopy__", "generated/skbio.sequence.Sequence.__eq__", "generated/skbio.sequence.Sequence.__ge__", "generated/skbio.sequence.Sequence.__getitem__", "generated/skbio.sequence.Sequence.__getstate__", "generated/skbio.sequence.Sequence.__gt__", "generated/skbio.sequence.Sequence.__iter__", "generated/skbio.sequence.Sequence.__le__", "generated/skbio.sequence.Sequence.__len__", "generated/skbio.sequence.Sequence.__lt__", "generated/skbio.sequence.Sequence.__ne__", "generated/skbio.sequence.Sequence.__reversed__", "generated/skbio.sequence.Sequence.__str__", "generated/skbio.sequence.Sequence.concat", "generated/skbio.sequence.Sequence.count", "generated/skbio.sequence.Sequence.distance", "generated/skbio.sequence.Sequence.find_with_regex", "generated/skbio.sequence.Sequence.frequencies", "generated/skbio.sequence.Sequence.has_interval_metadata", "generated/skbio.sequence.Sequence.has_metadata", "generated/skbio.sequence.Sequence.has_positional_metadata", "generated/skbio.sequence.Sequence.index", "generated/skbio.sequence.Sequence.iter_contiguous", "generated/skbio.sequence.Sequence.iter_kmers", "generated/skbio.sequence.Sequence.kmer_frequencies", "generated/skbio.sequence.Sequence.lowercase", "generated/skbio.sequence.Sequence.match_frequency", "generated/skbio.sequence.Sequence.matches", "generated/skbio.sequence.Sequence.mismatch_frequency", "generated/skbio.sequence.Sequence.mismatches", "generated/skbio.sequence.Sequence.read", "generated/skbio.sequence.Sequence.replace", "generated/skbio.sequence.Sequence.to_indices", "generated/skbio.sequence.Sequence.write", "generated/skbio.sequence.SubstitutionMatrix", "generated/skbio.sequence.SubstitutionMatrix.__contains__", "generated/skbio.sequence.SubstitutionMatrix.__eq__", "generated/skbio.sequence.SubstitutionMatrix.__ge__", "generated/skbio.sequence.SubstitutionMatrix.__getitem__", "generated/skbio.sequence.SubstitutionMatrix.__getstate__", "generated/skbio.sequence.SubstitutionMatrix.__gt__", "generated/skbio.sequence.SubstitutionMatrix.__le__", "generated/skbio.sequence.SubstitutionMatrix.__lt__", "generated/skbio.sequence.SubstitutionMatrix.__ne__", "generated/skbio.sequence.SubstitutionMatrix.__str__", "generated/skbio.sequence.SubstitutionMatrix.between", "generated/skbio.sequence.SubstitutionMatrix.by_name", "generated/skbio.sequence.SubstitutionMatrix.copy", "generated/skbio.sequence.SubstitutionMatrix.filter", "generated/skbio.sequence.SubstitutionMatrix.from_dict", "generated/skbio.sequence.SubstitutionMatrix.from_iterable", "generated/skbio.sequence.SubstitutionMatrix.get_names", "generated/skbio.sequence.SubstitutionMatrix.identity", "generated/skbio.sequence.SubstitutionMatrix.index", "generated/skbio.sequence.SubstitutionMatrix.plot", "generated/skbio.sequence.SubstitutionMatrix.read", "generated/skbio.sequence.SubstitutionMatrix.redundant_form", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame", "generated/skbio.sequence.SubstitutionMatrix.to_dict", "generated/skbio.sequence.SubstitutionMatrix.transpose", "generated/skbio.sequence.SubstitutionMatrix.within", "generated/skbio.sequence.SubstitutionMatrix.write", "generated/skbio.sequence.distance", "generated/skbio.sequence.distance.hamming", "generated/skbio.sequence.distance.kmer_distance", "generated/skbio.stats.composition", "generated/skbio.stats.composition.alr", "generated/skbio.stats.composition.alr_inv", "generated/skbio.stats.composition.ancom", "generated/skbio.stats.composition.centralize", "generated/skbio.stats.composition.closure", "generated/skbio.stats.composition.clr", "generated/skbio.stats.composition.clr_inv", "generated/skbio.stats.composition.dirmult_ttest", "generated/skbio.stats.composition.ilr", "generated/skbio.stats.composition.ilr_inv", "generated/skbio.stats.composition.inner", "generated/skbio.stats.composition.multi_replace", "generated/skbio.stats.composition.multiplicative_replacement", "generated/skbio.stats.composition.pairwise_vlr", "generated/skbio.stats.composition.perturb", "generated/skbio.stats.composition.perturb_inv", "generated/skbio.stats.composition.power", "generated/skbio.stats.composition.sbp_basis", "generated/skbio.stats.composition.tree_basis", "generated/skbio.stats.composition.vlr", "generated/skbio.stats.distance", "generated/skbio.stats.distance.DissimilarityMatrix", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__", "generated/skbio.stats.distance.DissimilarityMatrix.__le__", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__", "generated/skbio.stats.distance.DissimilarityMatrix.__str__", "generated/skbio.stats.distance.DissimilarityMatrix.between", "generated/skbio.stats.distance.DissimilarityMatrix.copy", "generated/skbio.stats.distance.DissimilarityMatrix.filter", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable", "generated/skbio.stats.distance.DissimilarityMatrix.index", "generated/skbio.stats.distance.DissimilarityMatrix.plot", "generated/skbio.stats.distance.DissimilarityMatrix.read", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame", "generated/skbio.stats.distance.DissimilarityMatrix.transpose", "generated/skbio.stats.distance.DissimilarityMatrix.within", "generated/skbio.stats.distance.DissimilarityMatrix.write", "generated/skbio.stats.distance.DistanceMatrix", "generated/skbio.stats.distance.DistanceMatrix.__contains__", "generated/skbio.stats.distance.DistanceMatrix.__eq__", "generated/skbio.stats.distance.DistanceMatrix.__ge__", "generated/skbio.stats.distance.DistanceMatrix.__getitem__", "generated/skbio.stats.distance.DistanceMatrix.__getstate__", "generated/skbio.stats.distance.DistanceMatrix.__gt__", "generated/skbio.stats.distance.DistanceMatrix.__le__", "generated/skbio.stats.distance.DistanceMatrix.__lt__", "generated/skbio.stats.distance.DistanceMatrix.__ne__", "generated/skbio.stats.distance.DistanceMatrix.__str__", "generated/skbio.stats.distance.DistanceMatrix.between", "generated/skbio.stats.distance.DistanceMatrix.condensed_form", "generated/skbio.stats.distance.DistanceMatrix.copy", "generated/skbio.stats.distance.DistanceMatrix.filter", "generated/skbio.stats.distance.DistanceMatrix.from_iterable", "generated/skbio.stats.distance.DistanceMatrix.index", "generated/skbio.stats.distance.DistanceMatrix.permute", "generated/skbio.stats.distance.DistanceMatrix.plot", "generated/skbio.stats.distance.DistanceMatrix.read", "generated/skbio.stats.distance.DistanceMatrix.redundant_form", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame", "generated/skbio.stats.distance.DistanceMatrix.to_series", "generated/skbio.stats.distance.DistanceMatrix.transpose", "generated/skbio.stats.distance.DistanceMatrix.within", "generated/skbio.stats.distance.DistanceMatrix.write", "generated/skbio.stats.distance.anosim", "generated/skbio.stats.distance.bioenv", "generated/skbio.stats.distance.mantel", "generated/skbio.stats.distance.permanova", "generated/skbio.stats.distance.permdisp", "generated/skbio.stats.distance.pwmantel", "generated/skbio.stats.distance.randdm", "generated/skbio.stats.evolve", "generated/skbio.stats.evolve.hommola_cospeciation", "generated/skbio.stats.gradient", "generated/skbio.stats.gradient.AverageGradientANOVA", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.CategoryResults", "generated/skbio.stats.gradient.CategoryResults.__eq__", "generated/skbio.stats.gradient.CategoryResults.__ge__", "generated/skbio.stats.gradient.CategoryResults.__getstate__", "generated/skbio.stats.gradient.CategoryResults.__gt__", "generated/skbio.stats.gradient.CategoryResults.__hash__", "generated/skbio.stats.gradient.CategoryResults.__le__", "generated/skbio.stats.gradient.CategoryResults.__lt__", "generated/skbio.stats.gradient.CategoryResults.__ne__", "generated/skbio.stats.gradient.CategoryResults.__str__", "generated/skbio.stats.gradient.CategoryResults.to_files", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVA", "generated/skbio.stats.gradient.GradientANOVA.__eq__", "generated/skbio.stats.gradient.GradientANOVA.__ge__", "generated/skbio.stats.gradient.GradientANOVA.__getstate__", "generated/skbio.stats.gradient.GradientANOVA.__gt__", "generated/skbio.stats.gradient.GradientANOVA.__hash__", "generated/skbio.stats.gradient.GradientANOVA.__le__", "generated/skbio.stats.gradient.GradientANOVA.__lt__", "generated/skbio.stats.gradient.GradientANOVA.__ne__", "generated/skbio.stats.gradient.GradientANOVA.__str__", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVAResults", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__", "generated/skbio.stats.gradient.GradientANOVAResults.__le__", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__", "generated/skbio.stats.gradient.GradientANOVAResults.__str__", "generated/skbio.stats.gradient.GradientANOVAResults.to_files", "generated/skbio.stats.gradient.GroupResults", "generated/skbio.stats.gradient.GroupResults.__eq__", "generated/skbio.stats.gradient.GroupResults.__ge__", "generated/skbio.stats.gradient.GroupResults.__getstate__", "generated/skbio.stats.gradient.GroupResults.__gt__", "generated/skbio.stats.gradient.GroupResults.__hash__", "generated/skbio.stats.gradient.GroupResults.__le__", "generated/skbio.stats.gradient.GroupResults.__lt__", "generated/skbio.stats.gradient.GroupResults.__ne__", "generated/skbio.stats.gradient.GroupResults.__str__", "generated/skbio.stats.gradient.GroupResults.to_files", "generated/skbio.stats.gradient.TrajectoryGradientANOVA", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.isubsample", "generated/skbio.stats.ordination", "generated/skbio.stats.ordination.OrdinationResults", "generated/skbio.stats.ordination.OrdinationResults.__eq__", "generated/skbio.stats.ordination.OrdinationResults.__ge__", "generated/skbio.stats.ordination.OrdinationResults.__getstate__", "generated/skbio.stats.ordination.OrdinationResults.__gt__", "generated/skbio.stats.ordination.OrdinationResults.__hash__", "generated/skbio.stats.ordination.OrdinationResults.__le__", "generated/skbio.stats.ordination.OrdinationResults.__lt__", "generated/skbio.stats.ordination.OrdinationResults.__ne__", "generated/skbio.stats.ordination.OrdinationResults.__str__", "generated/skbio.stats.ordination.OrdinationResults.plot", "generated/skbio.stats.ordination.OrdinationResults.read", "generated/skbio.stats.ordination.OrdinationResults.write", "generated/skbio.stats.ordination.ca", "generated/skbio.stats.ordination.cca", "generated/skbio.stats.ordination.corr", "generated/skbio.stats.ordination.e_matrix", "generated/skbio.stats.ordination.f_matrix", "generated/skbio.stats.ordination.mean_and_std", "generated/skbio.stats.ordination.pcoa", "generated/skbio.stats.ordination.pcoa_biplot", "generated/skbio.stats.ordination.rda", "generated/skbio.stats.ordination.scale", "generated/skbio.stats.ordination.svd_rank", "generated/skbio.stats.power", "generated/skbio.stats.power.confidence_bound", "generated/skbio.stats.power.paired_subsamples", "generated/skbio.stats.power.subsample_paired_power", "generated/skbio.stats.power.subsample_power", "generated/skbio.stats.subsample_counts", "generated/skbio.table.Table", "generated/skbio.table.Table.__eq__", "generated/skbio.table.Table.__ge__", "generated/skbio.table.Table.__getitem__", "generated/skbio.table.Table.__getstate__", "generated/skbio.table.Table.__gt__", "generated/skbio.table.Table.__iter__", "generated/skbio.table.Table.__le__", "generated/skbio.table.Table.__lt__", "generated/skbio.table.Table.__ne__", "generated/skbio.table.Table.__str__", "generated/skbio.table.Table.add_group_metadata", "generated/skbio.table.Table.add_metadata", "generated/skbio.table.Table.align_to", "generated/skbio.table.Table.align_to_dataframe", "generated/skbio.table.Table.align_tree", "generated/skbio.table.Table.collapse", "generated/skbio.table.Table.concat", "generated/skbio.table.Table.copy", "generated/skbio.table.Table.data", "generated/skbio.table.Table.del_metadata", "generated/skbio.table.Table.delimited_self", "generated/skbio.table.Table.descriptive_equality", "generated/skbio.table.Table.exists", "generated/skbio.table.Table.filter", "generated/skbio.table.Table.from_adjacency", "generated/skbio.table.Table.from_hdf5", "generated/skbio.table.Table.from_json", "generated/skbio.table.Table.from_tsv", "generated/skbio.table.Table.get_table_density", "generated/skbio.table.Table.get_value_by_ids", "generated/skbio.table.Table.group_metadata", "generated/skbio.table.Table.head", "generated/skbio.table.Table.ids", "generated/skbio.table.Table.index", "generated/skbio.table.Table.is_empty", "generated/skbio.table.Table.iter", "generated/skbio.table.Table.iter_data", "generated/skbio.table.Table.iter_pairwise", "generated/skbio.table.Table.length", "generated/skbio.table.Table.max", "generated/skbio.table.Table.merge", "generated/skbio.table.Table.metadata", "generated/skbio.table.Table.metadata_to_dataframe", "generated/skbio.table.Table.min", "generated/skbio.table.Table.nonzero", "generated/skbio.table.Table.nonzero_counts", "generated/skbio.table.Table.norm", "generated/skbio.table.Table.pa", "generated/skbio.table.Table.partition", "generated/skbio.table.Table.rankdata", "generated/skbio.table.Table.read", "generated/skbio.table.Table.reduce", "generated/skbio.table.Table.remove_empty", "generated/skbio.table.Table.sort", "generated/skbio.table.Table.sort_order", "generated/skbio.table.Table.subsample", "generated/skbio.table.Table.sum", "generated/skbio.table.Table.to_anndata", "generated/skbio.table.Table.to_dataframe", "generated/skbio.table.Table.to_hdf5", "generated/skbio.table.Table.to_json", "generated/skbio.table.Table.to_tsv", "generated/skbio.table.Table.transform", "generated/skbio.table.Table.transpose", "generated/skbio.table.Table.update_ids", "generated/skbio.table.Table.write", "generated/skbio.table.example_table", "generated/skbio.tree.TreeNode", "generated/skbio.tree.TreeNode.__copy__", "generated/skbio.tree.TreeNode.__deepcopy__", "generated/skbio.tree.TreeNode.__eq__", "generated/skbio.tree.TreeNode.__ge__", "generated/skbio.tree.TreeNode.__getitem__", "generated/skbio.tree.TreeNode.__getstate__", "generated/skbio.tree.TreeNode.__gt__", "generated/skbio.tree.TreeNode.__hash__", "generated/skbio.tree.TreeNode.__iter__", "generated/skbio.tree.TreeNode.__le__", "generated/skbio.tree.TreeNode.__len__", "generated/skbio.tree.TreeNode.__lt__", "generated/skbio.tree.TreeNode.__ne__", "generated/skbio.tree.TreeNode.__str__", "generated/skbio.tree.TreeNode.accumulate_to_ancestor", "generated/skbio.tree.TreeNode.ancestors", "generated/skbio.tree.TreeNode.append", "generated/skbio.tree.TreeNode.ascii_art", "generated/skbio.tree.TreeNode.assign_ids", "generated/skbio.tree.TreeNode.assign_supports", "generated/skbio.tree.TreeNode.bifurcate", "generated/skbio.tree.TreeNode.cache_attr", "generated/skbio.tree.TreeNode.compare_rfd", "generated/skbio.tree.TreeNode.compare_subsets", "generated/skbio.tree.TreeNode.compare_tip_distances", "generated/skbio.tree.TreeNode.copy", "generated/skbio.tree.TreeNode.count", "generated/skbio.tree.TreeNode.create_caches", "generated/skbio.tree.TreeNode.deepcopy", "generated/skbio.tree.TreeNode.descending_branch_length", "generated/skbio.tree.TreeNode.distance", "generated/skbio.tree.TreeNode.extend", "generated/skbio.tree.TreeNode.find", "generated/skbio.tree.TreeNode.find_all", "generated/skbio.tree.TreeNode.find_by_func", "generated/skbio.tree.TreeNode.find_by_id", "generated/skbio.tree.TreeNode.from_linkage_matrix", "generated/skbio.tree.TreeNode.from_taxdump", "generated/skbio.tree.TreeNode.from_taxonomy", "generated/skbio.tree.TreeNode.get_max_distance", "generated/skbio.tree.TreeNode.has_children", "generated/skbio.tree.TreeNode.index_tree", "generated/skbio.tree.TreeNode.invalidate_caches", "generated/skbio.tree.TreeNode.is_root", "generated/skbio.tree.TreeNode.is_tip", "generated/skbio.tree.TreeNode.lca", "generated/skbio.tree.TreeNode.levelorder", "generated/skbio.tree.TreeNode.lowest_common_ancestor", "generated/skbio.tree.TreeNode.neighbors", "generated/skbio.tree.TreeNode.non_tips", "generated/skbio.tree.TreeNode.observed_node_counts", "generated/skbio.tree.TreeNode.pop", "generated/skbio.tree.TreeNode.postorder", "generated/skbio.tree.TreeNode.pre_and_postorder", "generated/skbio.tree.TreeNode.preorder", "generated/skbio.tree.TreeNode.prune", "generated/skbio.tree.TreeNode.read", "generated/skbio.tree.TreeNode.remove", "generated/skbio.tree.TreeNode.remove_deleted", "generated/skbio.tree.TreeNode.root", "generated/skbio.tree.TreeNode.root_at", "generated/skbio.tree.TreeNode.root_at_midpoint", "generated/skbio.tree.TreeNode.shear", "generated/skbio.tree.TreeNode.shuffle", "generated/skbio.tree.TreeNode.siblings", "generated/skbio.tree.TreeNode.subset", "generated/skbio.tree.TreeNode.subsets", "generated/skbio.tree.TreeNode.subtree", "generated/skbio.tree.TreeNode.tip_tip_distances", "generated/skbio.tree.TreeNode.tips", "generated/skbio.tree.TreeNode.to_array", "generated/skbio.tree.TreeNode.to_taxonomy", "generated/skbio.tree.TreeNode.traverse", "generated/skbio.tree.TreeNode.unpack", "generated/skbio.tree.TreeNode.unpack_by_func", "generated/skbio.tree.TreeNode.unrooted_copy", "generated/skbio.tree.TreeNode.unrooted_deepcopy", "generated/skbio.tree.TreeNode.write", "generated/skbio.tree.majority_rule", "generated/skbio.tree.nj", "generated/skbio.util.EfficiencyWarning", "generated/skbio.util.RepresentationWarning", "generated/skbio.util.assert_data_frame_almost_equal", "generated/skbio.util.assert_ordination_results_equal", "generated/skbio.util.cardinal_to_ordinal", "generated/skbio.util.classproperty", "generated/skbio.util.classproperty.__delete__", "generated/skbio.util.classproperty.__eq__", "generated/skbio.util.classproperty.__ge__", "generated/skbio.util.classproperty.__get__", "generated/skbio.util.classproperty.__getstate__", "generated/skbio.util.classproperty.__gt__", "generated/skbio.util.classproperty.__hash__", "generated/skbio.util.classproperty.__le__", "generated/skbio.util.classproperty.__lt__", "generated/skbio.util.classproperty.__ne__", "generated/skbio.util.classproperty.__set__", "generated/skbio.util.classproperty.__set_name__", "generated/skbio.util.classproperty.__str__", "generated/skbio.util.classproperty.deleter", "generated/skbio.util.classproperty.getter", "generated/skbio.util.classproperty.setter", "generated/skbio.util.find_duplicates", "generated/skbio.util.get_data_path", "generated/skbio.util.safe_md5", "generated/skbio.workflow.Workflow", "generated/skbio.workflow.Workflow.__call__", "generated/skbio.workflow.Workflow.__eq__", "generated/skbio.workflow.Workflow.__ge__", "generated/skbio.workflow.Workflow.__getstate__", "generated/skbio.workflow.Workflow.__gt__", "generated/skbio.workflow.Workflow.__hash__", "generated/skbio.workflow.Workflow.__le__", "generated/skbio.workflow.Workflow.__lt__", "generated/skbio.workflow.Workflow.__ne__", "generated/skbio.workflow.Workflow.__str__", "generated/skbio.workflow.Workflow.initialize_state", "generated/skbio.workflow.method", "generated/skbio.workflow.method.__call__", "generated/skbio.workflow.method.__eq__", "generated/skbio.workflow.method.__ge__", "generated/skbio.workflow.method.__getstate__", "generated/skbio.workflow.method.__gt__", "generated/skbio.workflow.method.__hash__", "generated/skbio.workflow.method.__le__", "generated/skbio.workflow.method.__lt__", "generated/skbio.workflow.method.__ne__", "generated/skbio.workflow.method.__str__", "generated/skbio.workflow.requires", "generated/skbio.workflow.requires.__call__", "generated/skbio.workflow.requires.__eq__", "generated/skbio.workflow.requires.__ge__", "generated/skbio.workflow.requires.__getstate__", "generated/skbio.workflow.requires.__gt__", "generated/skbio.workflow.requires.__hash__", "generated/skbio.workflow.requires.__le__", "generated/skbio.workflow.requires.__lt__", "generated/skbio.workflow.requires.__ne__", "generated/skbio.workflow.requires.__str__", "index", "io", "metadata", "sequence", "stats", "table", "tree", "util", "workflow"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["alignment.rst", "diversity.rst", "embedding.rst", "generated/skbio.alignment.AlignmentStructure.rst", "generated/skbio.alignment.AlignmentStructure.__eq__.rst", "generated/skbio.alignment.AlignmentStructure.__ge__.rst", "generated/skbio.alignment.AlignmentStructure.__getitem__.rst", "generated/skbio.alignment.AlignmentStructure.__getstate__.rst", "generated/skbio.alignment.AlignmentStructure.__gt__.rst", "generated/skbio.alignment.AlignmentStructure.__hash__.rst", "generated/skbio.alignment.AlignmentStructure.__le__.rst", "generated/skbio.alignment.AlignmentStructure.__lt__.rst", "generated/skbio.alignment.AlignmentStructure.__ne__.rst", "generated/skbio.alignment.AlignmentStructure.__setstate__.rst", "generated/skbio.alignment.AlignmentStructure.__str__.rst", "generated/skbio.alignment.AlignmentStructure.is_zero_based.rst", "generated/skbio.alignment.AlignmentStructure.set_zero_based.rst", "generated/skbio.alignment.StripedSmithWaterman.rst", "generated/skbio.alignment.StripedSmithWaterman.__call__.rst", "generated/skbio.alignment.StripedSmithWaterman.__eq__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ge__.rst", "generated/skbio.alignment.StripedSmithWaterman.__getstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__gt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__hash__.rst", "generated/skbio.alignment.StripedSmithWaterman.__le__.rst", "generated/skbio.alignment.StripedSmithWaterman.__lt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ne__.rst", "generated/skbio.alignment.StripedSmithWaterman.__setstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__str__.rst", "generated/skbio.alignment.TabularMSA.rst", "generated/skbio.alignment.TabularMSA.__bool__.rst", "generated/skbio.alignment.TabularMSA.__contains__.rst", "generated/skbio.alignment.TabularMSA.__copy__.rst", "generated/skbio.alignment.TabularMSA.__deepcopy__.rst", "generated/skbio.alignment.TabularMSA.__eq__.rst", "generated/skbio.alignment.TabularMSA.__ge__.rst", "generated/skbio.alignment.TabularMSA.__getitem__.rst", "generated/skbio.alignment.TabularMSA.__getstate__.rst", "generated/skbio.alignment.TabularMSA.__gt__.rst", "generated/skbio.alignment.TabularMSA.__iter__.rst", "generated/skbio.alignment.TabularMSA.__le__.rst", "generated/skbio.alignment.TabularMSA.__len__.rst", "generated/skbio.alignment.TabularMSA.__lt__.rst", "generated/skbio.alignment.TabularMSA.__ne__.rst", "generated/skbio.alignment.TabularMSA.__reversed__.rst", "generated/skbio.alignment.TabularMSA.__str__.rst", "generated/skbio.alignment.TabularMSA.append.rst", "generated/skbio.alignment.TabularMSA.consensus.rst", "generated/skbio.alignment.TabularMSA.conservation.rst", "generated/skbio.alignment.TabularMSA.extend.rst", "generated/skbio.alignment.TabularMSA.from_dict.rst", "generated/skbio.alignment.TabularMSA.gap_frequencies.rst", "generated/skbio.alignment.TabularMSA.has_metadata.rst", "generated/skbio.alignment.TabularMSA.has_positional_metadata.rst", "generated/skbio.alignment.TabularMSA.iter_positions.rst", "generated/skbio.alignment.TabularMSA.join.rst", "generated/skbio.alignment.TabularMSA.read.rst", "generated/skbio.alignment.TabularMSA.reassign_index.rst", "generated/skbio.alignment.TabularMSA.sort.rst", "generated/skbio.alignment.TabularMSA.to_dict.rst", "generated/skbio.alignment.TabularMSA.write.rst", "generated/skbio.alignment.global_pairwise_align.rst", "generated/skbio.alignment.global_pairwise_align_nucleotide.rst", "generated/skbio.alignment.global_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align.rst", "generated/skbio.alignment.local_pairwise_align_nucleotide.rst", "generated/skbio.alignment.local_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align_ssw.rst", "generated/skbio.alignment.make_identity_substitution_matrix.rst", "generated/skbio.diversity.alpha.rst", "generated/skbio.diversity.alpha.ace.rst", "generated/skbio.diversity.alpha.berger_parker_d.rst", "generated/skbio.diversity.alpha.brillouin_d.rst", "generated/skbio.diversity.alpha.chao1.rst", "generated/skbio.diversity.alpha.chao1_ci.rst", "generated/skbio.diversity.alpha.dominance.rst", "generated/skbio.diversity.alpha.doubles.rst", "generated/skbio.diversity.alpha.enspie.rst", "generated/skbio.diversity.alpha.esty_ci.rst", "generated/skbio.diversity.alpha.faith_pd.rst", "generated/skbio.diversity.alpha.fisher_alpha.rst", "generated/skbio.diversity.alpha.gini_index.rst", "generated/skbio.diversity.alpha.goods_coverage.rst", "generated/skbio.diversity.alpha.heip_e.rst", "generated/skbio.diversity.alpha.kempton_taylor_q.rst", "generated/skbio.diversity.alpha.lladser_ci.rst", "generated/skbio.diversity.alpha.lladser_pe.rst", "generated/skbio.diversity.alpha.margalef.rst", "generated/skbio.diversity.alpha.mcintosh_d.rst", "generated/skbio.diversity.alpha.mcintosh_e.rst", "generated/skbio.diversity.alpha.menhinick.rst", "generated/skbio.diversity.alpha.michaelis_menten_fit.rst", "generated/skbio.diversity.alpha.observed_features.rst", "generated/skbio.diversity.alpha.observed_otus.rst", "generated/skbio.diversity.alpha.osd.rst", "generated/skbio.diversity.alpha.phydiv.rst", "generated/skbio.diversity.alpha.pielou_e.rst", "generated/skbio.diversity.alpha.robbins.rst", "generated/skbio.diversity.alpha.shannon.rst", "generated/skbio.diversity.alpha.simpson.rst", "generated/skbio.diversity.alpha.simpson_e.rst", "generated/skbio.diversity.alpha.singles.rst", "generated/skbio.diversity.alpha.sobs.rst", "generated/skbio.diversity.alpha.strong.rst", "generated/skbio.diversity.alpha_diversity.rst", "generated/skbio.diversity.beta.rst", "generated/skbio.diversity.beta.unweighted_unifrac.rst", "generated/skbio.diversity.beta.weighted_unifrac.rst", "generated/skbio.diversity.beta_diversity.rst", "generated/skbio.diversity.block_beta_diversity.rst", "generated/skbio.diversity.get_alpha_diversity_metrics.rst", "generated/skbio.diversity.get_beta_diversity_metrics.rst", "generated/skbio.diversity.partial_beta_diversity.rst", "generated/skbio.embedding.ProteinEmbedding.rst", "generated/skbio.embedding.ProteinEmbedding.__eq__.rst", "generated/skbio.embedding.ProteinEmbedding.__ge__.rst", "generated/skbio.embedding.ProteinEmbedding.__getstate__.rst", "generated/skbio.embedding.ProteinEmbedding.__gt__.rst", "generated/skbio.embedding.ProteinEmbedding.__hash__.rst", "generated/skbio.embedding.ProteinEmbedding.__le__.rst", "generated/skbio.embedding.ProteinEmbedding.__lt__.rst", "generated/skbio.embedding.ProteinEmbedding.__ne__.rst", "generated/skbio.embedding.ProteinEmbedding.__str__.rst", "generated/skbio.embedding.ProteinEmbedding.read.rst", "generated/skbio.embedding.ProteinEmbedding.write.rst", "generated/skbio.io.format.binary_dm.rst", "generated/skbio.io.format.biom.rst", "generated/skbio.io.format.blast6.rst", "generated/skbio.io.format.blast7.rst", "generated/skbio.io.format.clustal.rst", "generated/skbio.io.format.embedding.rst", "generated/skbio.io.format.embl.rst", "generated/skbio.io.format.fasta.rst", "generated/skbio.io.format.fastq.rst", "generated/skbio.io.format.genbank.rst", "generated/skbio.io.format.gff3.rst", "generated/skbio.io.format.lsmat.rst", "generated/skbio.io.format.newick.rst", "generated/skbio.io.format.ordination.rst", "generated/skbio.io.format.phylip.rst", "generated/skbio.io.format.qseq.rst", "generated/skbio.io.format.sample_metadata.rst", "generated/skbio.io.format.stockholm.rst", "generated/skbio.io.format.taxdump.rst", "generated/skbio.io.registry.rst", "generated/skbio.io.registry.Format.rst", "generated/skbio.io.registry.Format.__eq__.rst", "generated/skbio.io.registry.Format.__ge__.rst", "generated/skbio.io.registry.Format.__getstate__.rst", "generated/skbio.io.registry.Format.__gt__.rst", "generated/skbio.io.registry.Format.__hash__.rst", "generated/skbio.io.registry.Format.__le__.rst", "generated/skbio.io.registry.Format.__lt__.rst", "generated/skbio.io.registry.Format.__ne__.rst", "generated/skbio.io.registry.Format.__str__.rst", "generated/skbio.io.registry.Format.reader.rst", "generated/skbio.io.registry.Format.sniffer.rst", "generated/skbio.io.registry.Format.writer.rst", "generated/skbio.io.registry.IORegistry.rst", "generated/skbio.io.registry.IORegistry.__eq__.rst", "generated/skbio.io.registry.IORegistry.__ge__.rst", "generated/skbio.io.registry.IORegistry.__getstate__.rst", "generated/skbio.io.registry.IORegistry.__gt__.rst", "generated/skbio.io.registry.IORegistry.__hash__.rst", "generated/skbio.io.registry.IORegistry.__le__.rst", "generated/skbio.io.registry.IORegistry.__lt__.rst", "generated/skbio.io.registry.IORegistry.__ne__.rst", "generated/skbio.io.registry.IORegistry.__str__.rst", "generated/skbio.io.registry.IORegistry.add_format.rst", "generated/skbio.io.registry.IORegistry.create_format.rst", "generated/skbio.io.registry.IORegistry.get_reader.rst", "generated/skbio.io.registry.IORegistry.get_sniffer.rst", "generated/skbio.io.registry.IORegistry.get_writer.rst", "generated/skbio.io.registry.IORegistry.list_read_formats.rst", "generated/skbio.io.registry.IORegistry.list_write_formats.rst", "generated/skbio.io.registry.IORegistry.monkey_patch.rst", "generated/skbio.io.registry.IORegistry.read.rst", "generated/skbio.io.registry.IORegistry.sniff.rst", "generated/skbio.io.registry.IORegistry.write.rst", "generated/skbio.io.registry.create_format.rst", "generated/skbio.io.registry.read.rst", "generated/skbio.io.registry.sniff.rst", "generated/skbio.io.registry.write.rst", "generated/skbio.io.util.rst", "generated/skbio.io.util.open.rst", "generated/skbio.io.util.open_file.rst", "generated/skbio.io.util.open_files.rst", "generated/skbio.metadata.CategoricalMetadataColumn.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__eq__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__ge__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__getstate__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__gt__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__le__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__lt__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__ne__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__str__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.drop_missing_values.rst", "generated/skbio.metadata.CategoricalMetadataColumn.filter_ids.rst", "generated/skbio.metadata.CategoricalMetadataColumn.get_ids.rst", "generated/skbio.metadata.CategoricalMetadataColumn.get_missing.rst", "generated/skbio.metadata.CategoricalMetadataColumn.get_value.rst", "generated/skbio.metadata.CategoricalMetadataColumn.has_missing_values.rst", "generated/skbio.metadata.CategoricalMetadataColumn.save.rst", "generated/skbio.metadata.CategoricalMetadataColumn.to_dataframe.rst", "generated/skbio.metadata.CategoricalMetadataColumn.to_series.rst", "generated/skbio.metadata.Interval.rst", "generated/skbio.metadata.Interval.__eq__.rst", "generated/skbio.metadata.Interval.__ge__.rst", "generated/skbio.metadata.Interval.__getstate__.rst", "generated/skbio.metadata.Interval.__gt__.rst", "generated/skbio.metadata.Interval.__le__.rst", "generated/skbio.metadata.Interval.__lt__.rst", "generated/skbio.metadata.Interval.__ne__.rst", "generated/skbio.metadata.Interval.__str__.rst", "generated/skbio.metadata.Interval.drop.rst", "generated/skbio.metadata.IntervalMetadata.rst", "generated/skbio.metadata.IntervalMetadata.__copy__.rst", "generated/skbio.metadata.IntervalMetadata.__deepcopy__.rst", "generated/skbio.metadata.IntervalMetadata.__eq__.rst", "generated/skbio.metadata.IntervalMetadata.__ge__.rst", "generated/skbio.metadata.IntervalMetadata.__getstate__.rst", "generated/skbio.metadata.IntervalMetadata.__gt__.rst", "generated/skbio.metadata.IntervalMetadata.__le__.rst", "generated/skbio.metadata.IntervalMetadata.__lt__.rst", "generated/skbio.metadata.IntervalMetadata.__ne__.rst", "generated/skbio.metadata.IntervalMetadata.__str__.rst", "generated/skbio.metadata.IntervalMetadata.add.rst", "generated/skbio.metadata.IntervalMetadata.concat.rst", "generated/skbio.metadata.IntervalMetadata.drop.rst", "generated/skbio.metadata.IntervalMetadata.merge.rst", "generated/skbio.metadata.IntervalMetadata.query.rst", "generated/skbio.metadata.IntervalMetadata.read.rst", "generated/skbio.metadata.IntervalMetadata.sort.rst", "generated/skbio.metadata.IntervalMetadata.write.rst", "generated/skbio.metadata.MetadataColumn.rst", "generated/skbio.metadata.MetadataColumn.__eq__.rst", "generated/skbio.metadata.MetadataColumn.__ge__.rst", "generated/skbio.metadata.MetadataColumn.__getstate__.rst", "generated/skbio.metadata.MetadataColumn.__gt__.rst", "generated/skbio.metadata.MetadataColumn.__le__.rst", "generated/skbio.metadata.MetadataColumn.__lt__.rst", "generated/skbio.metadata.MetadataColumn.__ne__.rst", "generated/skbio.metadata.MetadataColumn.__str__.rst", "generated/skbio.metadata.MetadataColumn.drop_missing_values.rst", "generated/skbio.metadata.MetadataColumn.filter_ids.rst", "generated/skbio.metadata.MetadataColumn.get_ids.rst", "generated/skbio.metadata.MetadataColumn.get_missing.rst", "generated/skbio.metadata.MetadataColumn.get_value.rst", "generated/skbio.metadata.MetadataColumn.has_missing_values.rst", "generated/skbio.metadata.MetadataColumn.save.rst", "generated/skbio.metadata.MetadataColumn.to_dataframe.rst", "generated/skbio.metadata.MetadataColumn.to_series.rst", "generated/skbio.metadata.NumericMetadataColumn.rst", "generated/skbio.metadata.NumericMetadataColumn.__eq__.rst", "generated/skbio.metadata.NumericMetadataColumn.__ge__.rst", "generated/skbio.metadata.NumericMetadataColumn.__getstate__.rst", "generated/skbio.metadata.NumericMetadataColumn.__gt__.rst", "generated/skbio.metadata.NumericMetadataColumn.__le__.rst", "generated/skbio.metadata.NumericMetadataColumn.__lt__.rst", "generated/skbio.metadata.NumericMetadataColumn.__ne__.rst", "generated/skbio.metadata.NumericMetadataColumn.__str__.rst", "generated/skbio.metadata.NumericMetadataColumn.drop_missing_values.rst", "generated/skbio.metadata.NumericMetadataColumn.filter_ids.rst", "generated/skbio.metadata.NumericMetadataColumn.get_ids.rst", "generated/skbio.metadata.NumericMetadataColumn.get_missing.rst", "generated/skbio.metadata.NumericMetadataColumn.get_value.rst", "generated/skbio.metadata.NumericMetadataColumn.has_missing_values.rst", "generated/skbio.metadata.NumericMetadataColumn.save.rst", "generated/skbio.metadata.NumericMetadataColumn.to_dataframe.rst", "generated/skbio.metadata.NumericMetadataColumn.to_series.rst", "generated/skbio.metadata.SampleMetadata.rst", "generated/skbio.metadata.SampleMetadata.__eq__.rst", "generated/skbio.metadata.SampleMetadata.__ge__.rst", "generated/skbio.metadata.SampleMetadata.__getstate__.rst", "generated/skbio.metadata.SampleMetadata.__gt__.rst", "generated/skbio.metadata.SampleMetadata.__le__.rst", "generated/skbio.metadata.SampleMetadata.__lt__.rst", "generated/skbio.metadata.SampleMetadata.__ne__.rst", "generated/skbio.metadata.SampleMetadata.__str__.rst", "generated/skbio.metadata.SampleMetadata.filter_columns.rst", "generated/skbio.metadata.SampleMetadata.filter_ids.rst", "generated/skbio.metadata.SampleMetadata.get_column.rst", "generated/skbio.metadata.SampleMetadata.get_ids.rst", "generated/skbio.metadata.SampleMetadata.load.rst", "generated/skbio.metadata.SampleMetadata.merge.rst", "generated/skbio.metadata.SampleMetadata.read.rst", "generated/skbio.metadata.SampleMetadata.save.rst", "generated/skbio.metadata.SampleMetadata.to_dataframe.rst", "generated/skbio.metadata.SampleMetadata.write.rst", "generated/skbio.sequence.DNA.rst", "generated/skbio.sequence.DNA.__bool__.rst", "generated/skbio.sequence.DNA.__contains__.rst", "generated/skbio.sequence.DNA.__copy__.rst", "generated/skbio.sequence.DNA.__deepcopy__.rst", "generated/skbio.sequence.DNA.__eq__.rst", "generated/skbio.sequence.DNA.__ge__.rst", "generated/skbio.sequence.DNA.__getitem__.rst", "generated/skbio.sequence.DNA.__getstate__.rst", "generated/skbio.sequence.DNA.__gt__.rst", "generated/skbio.sequence.DNA.__iter__.rst", "generated/skbio.sequence.DNA.__le__.rst", "generated/skbio.sequence.DNA.__len__.rst", "generated/skbio.sequence.DNA.__lt__.rst", "generated/skbio.sequence.DNA.__ne__.rst", "generated/skbio.sequence.DNA.__reversed__.rst", "generated/skbio.sequence.DNA.__str__.rst", "generated/skbio.sequence.DNA.complement.rst", "generated/skbio.sequence.DNA.concat.rst", "generated/skbio.sequence.DNA.count.rst", "generated/skbio.sequence.DNA.definites.rst", "generated/skbio.sequence.DNA.degap.rst", "generated/skbio.sequence.DNA.degenerates.rst", "generated/skbio.sequence.DNA.distance.rst", "generated/skbio.sequence.DNA.expand_degenerates.rst", "generated/skbio.sequence.DNA.find_motifs.rst", "generated/skbio.sequence.DNA.find_with_regex.rst", "generated/skbio.sequence.DNA.frequencies.rst", "generated/skbio.sequence.DNA.gaps.rst", "generated/skbio.sequence.DNA.gc_content.rst", "generated/skbio.sequence.DNA.gc_frequency.rst", "generated/skbio.sequence.DNA.has_definites.rst", "generated/skbio.sequence.DNA.has_degenerates.rst", "generated/skbio.sequence.DNA.has_gaps.rst", "generated/skbio.sequence.DNA.has_interval_metadata.rst", "generated/skbio.sequence.DNA.has_metadata.rst", "generated/skbio.sequence.DNA.has_nondegenerates.rst", "generated/skbio.sequence.DNA.has_positional_metadata.rst", "generated/skbio.sequence.DNA.index.rst", "generated/skbio.sequence.DNA.is_reverse_complement.rst", "generated/skbio.sequence.DNA.iter_contiguous.rst", "generated/skbio.sequence.DNA.iter_kmers.rst", "generated/skbio.sequence.DNA.kmer_frequencies.rst", "generated/skbio.sequence.DNA.lowercase.rst", "generated/skbio.sequence.DNA.match_frequency.rst", "generated/skbio.sequence.DNA.matches.rst", "generated/skbio.sequence.DNA.mismatch_frequency.rst", "generated/skbio.sequence.DNA.mismatches.rst", "generated/skbio.sequence.DNA.nondegenerates.rst", "generated/skbio.sequence.DNA.read.rst", "generated/skbio.sequence.DNA.replace.rst", "generated/skbio.sequence.DNA.reverse_complement.rst", "generated/skbio.sequence.DNA.to_definites.rst", "generated/skbio.sequence.DNA.to_indices.rst", "generated/skbio.sequence.DNA.to_regex.rst", "generated/skbio.sequence.DNA.transcribe.rst", "generated/skbio.sequence.DNA.translate.rst", "generated/skbio.sequence.DNA.translate_six_frames.rst", "generated/skbio.sequence.DNA.write.rst", "generated/skbio.sequence.GeneticCode.rst", "generated/skbio.sequence.GeneticCode.__eq__.rst", "generated/skbio.sequence.GeneticCode.__ge__.rst", "generated/skbio.sequence.GeneticCode.__getstate__.rst", "generated/skbio.sequence.GeneticCode.__gt__.rst", "generated/skbio.sequence.GeneticCode.__le__.rst", "generated/skbio.sequence.GeneticCode.__lt__.rst", "generated/skbio.sequence.GeneticCode.__ne__.rst", "generated/skbio.sequence.GeneticCode.__str__.rst", "generated/skbio.sequence.GeneticCode.from_ncbi.rst", "generated/skbio.sequence.GeneticCode.translate.rst", "generated/skbio.sequence.GeneticCode.translate_six_frames.rst", "generated/skbio.sequence.GrammaredSequence.rst", "generated/skbio.sequence.GrammaredSequence.__bool__.rst", "generated/skbio.sequence.GrammaredSequence.__contains__.rst", "generated/skbio.sequence.GrammaredSequence.__copy__.rst", "generated/skbio.sequence.GrammaredSequence.__deepcopy__.rst", "generated/skbio.sequence.GrammaredSequence.__eq__.rst", "generated/skbio.sequence.GrammaredSequence.__ge__.rst", "generated/skbio.sequence.GrammaredSequence.__getitem__.rst", "generated/skbio.sequence.GrammaredSequence.__getstate__.rst", "generated/skbio.sequence.GrammaredSequence.__gt__.rst", "generated/skbio.sequence.GrammaredSequence.__iter__.rst", "generated/skbio.sequence.GrammaredSequence.__le__.rst", "generated/skbio.sequence.GrammaredSequence.__len__.rst", "generated/skbio.sequence.GrammaredSequence.__lt__.rst", "generated/skbio.sequence.GrammaredSequence.__ne__.rst", "generated/skbio.sequence.GrammaredSequence.__reversed__.rst", "generated/skbio.sequence.GrammaredSequence.__str__.rst", "generated/skbio.sequence.GrammaredSequence.concat.rst", "generated/skbio.sequence.GrammaredSequence.count.rst", "generated/skbio.sequence.GrammaredSequence.definites.rst", "generated/skbio.sequence.GrammaredSequence.degap.rst", "generated/skbio.sequence.GrammaredSequence.degenerates.rst", "generated/skbio.sequence.GrammaredSequence.distance.rst", "generated/skbio.sequence.GrammaredSequence.expand_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.find_motifs.rst", "generated/skbio.sequence.GrammaredSequence.find_with_regex.rst", "generated/skbio.sequence.GrammaredSequence.frequencies.rst", "generated/skbio.sequence.GrammaredSequence.gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_definites.rst", "generated/skbio.sequence.GrammaredSequence.has_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata.rst", "generated/skbio.sequence.GrammaredSequence.index.rst", "generated/skbio.sequence.GrammaredSequence.iter_contiguous.rst", "generated/skbio.sequence.GrammaredSequence.iter_kmers.rst", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies.rst", "generated/skbio.sequence.GrammaredSequence.lowercase.rst", "generated/skbio.sequence.GrammaredSequence.match_frequency.rst", "generated/skbio.sequence.GrammaredSequence.matches.rst", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency.rst", "generated/skbio.sequence.GrammaredSequence.mismatches.rst", "generated/skbio.sequence.GrammaredSequence.nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.read.rst", "generated/skbio.sequence.GrammaredSequence.replace.rst", "generated/skbio.sequence.GrammaredSequence.to_definites.rst", "generated/skbio.sequence.GrammaredSequence.to_indices.rst", "generated/skbio.sequence.GrammaredSequence.to_regex.rst", "generated/skbio.sequence.GrammaredSequence.write.rst", "generated/skbio.sequence.Protein.rst", "generated/skbio.sequence.Protein.__bool__.rst", "generated/skbio.sequence.Protein.__contains__.rst", "generated/skbio.sequence.Protein.__copy__.rst", "generated/skbio.sequence.Protein.__deepcopy__.rst", "generated/skbio.sequence.Protein.__eq__.rst", "generated/skbio.sequence.Protein.__ge__.rst", "generated/skbio.sequence.Protein.__getitem__.rst", "generated/skbio.sequence.Protein.__getstate__.rst", "generated/skbio.sequence.Protein.__gt__.rst", "generated/skbio.sequence.Protein.__iter__.rst", "generated/skbio.sequence.Protein.__le__.rst", "generated/skbio.sequence.Protein.__len__.rst", "generated/skbio.sequence.Protein.__lt__.rst", "generated/skbio.sequence.Protein.__ne__.rst", "generated/skbio.sequence.Protein.__reversed__.rst", "generated/skbio.sequence.Protein.__str__.rst", "generated/skbio.sequence.Protein.concat.rst", "generated/skbio.sequence.Protein.count.rst", "generated/skbio.sequence.Protein.definites.rst", "generated/skbio.sequence.Protein.degap.rst", "generated/skbio.sequence.Protein.degenerates.rst", "generated/skbio.sequence.Protein.distance.rst", "generated/skbio.sequence.Protein.expand_degenerates.rst", "generated/skbio.sequence.Protein.find_motifs.rst", "generated/skbio.sequence.Protein.find_with_regex.rst", "generated/skbio.sequence.Protein.frequencies.rst", "generated/skbio.sequence.Protein.gaps.rst", "generated/skbio.sequence.Protein.has_definites.rst", "generated/skbio.sequence.Protein.has_degenerates.rst", "generated/skbio.sequence.Protein.has_gaps.rst", "generated/skbio.sequence.Protein.has_interval_metadata.rst", "generated/skbio.sequence.Protein.has_metadata.rst", "generated/skbio.sequence.Protein.has_nondegenerates.rst", "generated/skbio.sequence.Protein.has_positional_metadata.rst", "generated/skbio.sequence.Protein.has_stops.rst", "generated/skbio.sequence.Protein.index.rst", "generated/skbio.sequence.Protein.iter_contiguous.rst", "generated/skbio.sequence.Protein.iter_kmers.rst", "generated/skbio.sequence.Protein.kmer_frequencies.rst", "generated/skbio.sequence.Protein.lowercase.rst", "generated/skbio.sequence.Protein.match_frequency.rst", "generated/skbio.sequence.Protein.matches.rst", "generated/skbio.sequence.Protein.mismatch_frequency.rst", "generated/skbio.sequence.Protein.mismatches.rst", "generated/skbio.sequence.Protein.nondegenerates.rst", "generated/skbio.sequence.Protein.read.rst", "generated/skbio.sequence.Protein.replace.rst", "generated/skbio.sequence.Protein.stops.rst", "generated/skbio.sequence.Protein.to_definites.rst", "generated/skbio.sequence.Protein.to_indices.rst", "generated/skbio.sequence.Protein.to_regex.rst", "generated/skbio.sequence.Protein.write.rst", "generated/skbio.sequence.RNA.rst", "generated/skbio.sequence.RNA.__bool__.rst", "generated/skbio.sequence.RNA.__contains__.rst", "generated/skbio.sequence.RNA.__copy__.rst", "generated/skbio.sequence.RNA.__deepcopy__.rst", "generated/skbio.sequence.RNA.__eq__.rst", "generated/skbio.sequence.RNA.__ge__.rst", "generated/skbio.sequence.RNA.__getitem__.rst", "generated/skbio.sequence.RNA.__getstate__.rst", "generated/skbio.sequence.RNA.__gt__.rst", "generated/skbio.sequence.RNA.__iter__.rst", "generated/skbio.sequence.RNA.__le__.rst", "generated/skbio.sequence.RNA.__len__.rst", "generated/skbio.sequence.RNA.__lt__.rst", "generated/skbio.sequence.RNA.__ne__.rst", "generated/skbio.sequence.RNA.__reversed__.rst", "generated/skbio.sequence.RNA.__str__.rst", "generated/skbio.sequence.RNA.complement.rst", "generated/skbio.sequence.RNA.concat.rst", "generated/skbio.sequence.RNA.count.rst", "generated/skbio.sequence.RNA.definites.rst", "generated/skbio.sequence.RNA.degap.rst", "generated/skbio.sequence.RNA.degenerates.rst", "generated/skbio.sequence.RNA.distance.rst", "generated/skbio.sequence.RNA.expand_degenerates.rst", "generated/skbio.sequence.RNA.find_motifs.rst", "generated/skbio.sequence.RNA.find_with_regex.rst", "generated/skbio.sequence.RNA.frequencies.rst", "generated/skbio.sequence.RNA.gaps.rst", "generated/skbio.sequence.RNA.gc_content.rst", "generated/skbio.sequence.RNA.gc_frequency.rst", "generated/skbio.sequence.RNA.has_definites.rst", "generated/skbio.sequence.RNA.has_degenerates.rst", "generated/skbio.sequence.RNA.has_gaps.rst", "generated/skbio.sequence.RNA.has_interval_metadata.rst", "generated/skbio.sequence.RNA.has_metadata.rst", "generated/skbio.sequence.RNA.has_nondegenerates.rst", "generated/skbio.sequence.RNA.has_positional_metadata.rst", "generated/skbio.sequence.RNA.index.rst", "generated/skbio.sequence.RNA.is_reverse_complement.rst", "generated/skbio.sequence.RNA.iter_contiguous.rst", "generated/skbio.sequence.RNA.iter_kmers.rst", "generated/skbio.sequence.RNA.kmer_frequencies.rst", "generated/skbio.sequence.RNA.lowercase.rst", "generated/skbio.sequence.RNA.match_frequency.rst", "generated/skbio.sequence.RNA.matches.rst", "generated/skbio.sequence.RNA.mismatch_frequency.rst", "generated/skbio.sequence.RNA.mismatches.rst", "generated/skbio.sequence.RNA.nondegenerates.rst", "generated/skbio.sequence.RNA.read.rst", "generated/skbio.sequence.RNA.replace.rst", "generated/skbio.sequence.RNA.reverse_complement.rst", "generated/skbio.sequence.RNA.reverse_transcribe.rst", "generated/skbio.sequence.RNA.to_definites.rst", "generated/skbio.sequence.RNA.to_indices.rst", "generated/skbio.sequence.RNA.to_regex.rst", "generated/skbio.sequence.RNA.translate.rst", "generated/skbio.sequence.RNA.translate_six_frames.rst", "generated/skbio.sequence.RNA.write.rst", "generated/skbio.sequence.Sequence.rst", "generated/skbio.sequence.Sequence.__bool__.rst", "generated/skbio.sequence.Sequence.__contains__.rst", "generated/skbio.sequence.Sequence.__copy__.rst", "generated/skbio.sequence.Sequence.__deepcopy__.rst", "generated/skbio.sequence.Sequence.__eq__.rst", "generated/skbio.sequence.Sequence.__ge__.rst", "generated/skbio.sequence.Sequence.__getitem__.rst", "generated/skbio.sequence.Sequence.__getstate__.rst", "generated/skbio.sequence.Sequence.__gt__.rst", "generated/skbio.sequence.Sequence.__iter__.rst", "generated/skbio.sequence.Sequence.__le__.rst", "generated/skbio.sequence.Sequence.__len__.rst", "generated/skbio.sequence.Sequence.__lt__.rst", "generated/skbio.sequence.Sequence.__ne__.rst", "generated/skbio.sequence.Sequence.__reversed__.rst", "generated/skbio.sequence.Sequence.__str__.rst", "generated/skbio.sequence.Sequence.concat.rst", "generated/skbio.sequence.Sequence.count.rst", "generated/skbio.sequence.Sequence.distance.rst", "generated/skbio.sequence.Sequence.find_with_regex.rst", "generated/skbio.sequence.Sequence.frequencies.rst", "generated/skbio.sequence.Sequence.has_interval_metadata.rst", "generated/skbio.sequence.Sequence.has_metadata.rst", "generated/skbio.sequence.Sequence.has_positional_metadata.rst", "generated/skbio.sequence.Sequence.index.rst", "generated/skbio.sequence.Sequence.iter_contiguous.rst", "generated/skbio.sequence.Sequence.iter_kmers.rst", "generated/skbio.sequence.Sequence.kmer_frequencies.rst", "generated/skbio.sequence.Sequence.lowercase.rst", "generated/skbio.sequence.Sequence.match_frequency.rst", "generated/skbio.sequence.Sequence.matches.rst", "generated/skbio.sequence.Sequence.mismatch_frequency.rst", "generated/skbio.sequence.Sequence.mismatches.rst", "generated/skbio.sequence.Sequence.read.rst", "generated/skbio.sequence.Sequence.replace.rst", "generated/skbio.sequence.Sequence.to_indices.rst", "generated/skbio.sequence.Sequence.write.rst", "generated/skbio.sequence.SubstitutionMatrix.rst", "generated/skbio.sequence.SubstitutionMatrix.__contains__.rst", "generated/skbio.sequence.SubstitutionMatrix.__eq__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ge__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getitem__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getstate__.rst", "generated/skbio.sequence.SubstitutionMatrix.__gt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__le__.rst", "generated/skbio.sequence.SubstitutionMatrix.__lt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ne__.rst", "generated/skbio.sequence.SubstitutionMatrix.__str__.rst", "generated/skbio.sequence.SubstitutionMatrix.between.rst", "generated/skbio.sequence.SubstitutionMatrix.by_name.rst", "generated/skbio.sequence.SubstitutionMatrix.copy.rst", "generated/skbio.sequence.SubstitutionMatrix.filter.rst", "generated/skbio.sequence.SubstitutionMatrix.from_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.from_iterable.rst", "generated/skbio.sequence.SubstitutionMatrix.get_names.rst", "generated/skbio.sequence.SubstitutionMatrix.identity.rst", "generated/skbio.sequence.SubstitutionMatrix.index.rst", "generated/skbio.sequence.SubstitutionMatrix.plot.rst", "generated/skbio.sequence.SubstitutionMatrix.read.rst", "generated/skbio.sequence.SubstitutionMatrix.redundant_form.rst", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame.rst", "generated/skbio.sequence.SubstitutionMatrix.to_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.transpose.rst", "generated/skbio.sequence.SubstitutionMatrix.within.rst", "generated/skbio.sequence.SubstitutionMatrix.write.rst", "generated/skbio.sequence.distance.rst", "generated/skbio.sequence.distance.hamming.rst", "generated/skbio.sequence.distance.kmer_distance.rst", "generated/skbio.stats.composition.rst", "generated/skbio.stats.composition.alr.rst", "generated/skbio.stats.composition.alr_inv.rst", "generated/skbio.stats.composition.ancom.rst", "generated/skbio.stats.composition.centralize.rst", "generated/skbio.stats.composition.closure.rst", "generated/skbio.stats.composition.clr.rst", "generated/skbio.stats.composition.clr_inv.rst", "generated/skbio.stats.composition.dirmult_ttest.rst", "generated/skbio.stats.composition.ilr.rst", "generated/skbio.stats.composition.ilr_inv.rst", "generated/skbio.stats.composition.inner.rst", "generated/skbio.stats.composition.multi_replace.rst", "generated/skbio.stats.composition.multiplicative_replacement.rst", "generated/skbio.stats.composition.pairwise_vlr.rst", "generated/skbio.stats.composition.perturb.rst", "generated/skbio.stats.composition.perturb_inv.rst", "generated/skbio.stats.composition.power.rst", "generated/skbio.stats.composition.sbp_basis.rst", "generated/skbio.stats.composition.tree_basis.rst", "generated/skbio.stats.composition.vlr.rst", "generated/skbio.stats.distance.rst", "generated/skbio.stats.distance.DissimilarityMatrix.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__le__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__str__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.between.rst", "generated/skbio.stats.distance.DissimilarityMatrix.copy.rst", "generated/skbio.stats.distance.DissimilarityMatrix.filter.rst", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable.rst", "generated/skbio.stats.distance.DissimilarityMatrix.index.rst", "generated/skbio.stats.distance.DissimilarityMatrix.plot.rst", "generated/skbio.stats.distance.DissimilarityMatrix.read.rst", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form.rst", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DissimilarityMatrix.transpose.rst", "generated/skbio.stats.distance.DissimilarityMatrix.within.rst", "generated/skbio.stats.distance.DissimilarityMatrix.write.rst", "generated/skbio.stats.distance.DistanceMatrix.rst", "generated/skbio.stats.distance.DistanceMatrix.__contains__.rst", "generated/skbio.stats.distance.DistanceMatrix.__eq__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ge__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getitem__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getstate__.rst", "generated/skbio.stats.distance.DistanceMatrix.__gt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__le__.rst", "generated/skbio.stats.distance.DistanceMatrix.__lt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ne__.rst", "generated/skbio.stats.distance.DistanceMatrix.__str__.rst", "generated/skbio.stats.distance.DistanceMatrix.between.rst", "generated/skbio.stats.distance.DistanceMatrix.condensed_form.rst", "generated/skbio.stats.distance.DistanceMatrix.copy.rst", "generated/skbio.stats.distance.DistanceMatrix.filter.rst", "generated/skbio.stats.distance.DistanceMatrix.from_iterable.rst", "generated/skbio.stats.distance.DistanceMatrix.index.rst", "generated/skbio.stats.distance.DistanceMatrix.permute.rst", "generated/skbio.stats.distance.DistanceMatrix.plot.rst", "generated/skbio.stats.distance.DistanceMatrix.read.rst", "generated/skbio.stats.distance.DistanceMatrix.redundant_form.rst", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DistanceMatrix.to_series.rst", "generated/skbio.stats.distance.DistanceMatrix.transpose.rst", "generated/skbio.stats.distance.DistanceMatrix.within.rst", "generated/skbio.stats.distance.DistanceMatrix.write.rst", "generated/skbio.stats.distance.anosim.rst", "generated/skbio.stats.distance.bioenv.rst", "generated/skbio.stats.distance.mantel.rst", "generated/skbio.stats.distance.permanova.rst", "generated/skbio.stats.distance.permdisp.rst", "generated/skbio.stats.distance.pwmantel.rst", "generated/skbio.stats.distance.randdm.rst", "generated/skbio.stats.evolve.rst", "generated/skbio.stats.evolve.hommola_cospeciation.rst", "generated/skbio.stats.gradient.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.CategoryResults.rst", "generated/skbio.stats.gradient.CategoryResults.__eq__.rst", "generated/skbio.stats.gradient.CategoryResults.__ge__.rst", "generated/skbio.stats.gradient.CategoryResults.__getstate__.rst", "generated/skbio.stats.gradient.CategoryResults.__gt__.rst", "generated/skbio.stats.gradient.CategoryResults.__hash__.rst", "generated/skbio.stats.gradient.CategoryResults.__le__.rst", "generated/skbio.stats.gradient.CategoryResults.__lt__.rst", "generated/skbio.stats.gradient.CategoryResults.__ne__.rst", "generated/skbio.stats.gradient.CategoryResults.__str__.rst", "generated/skbio.stats.gradient.CategoryResults.to_files.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVA.rst", "generated/skbio.stats.gradient.GradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVA.__le__.rst", "generated/skbio.stats.gradient.GradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVA.__str__.rst", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVAResults.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__le__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__str__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.to_files.rst", "generated/skbio.stats.gradient.GroupResults.rst", "generated/skbio.stats.gradient.GroupResults.__eq__.rst", "generated/skbio.stats.gradient.GroupResults.__ge__.rst", "generated/skbio.stats.gradient.GroupResults.__getstate__.rst", "generated/skbio.stats.gradient.GroupResults.__gt__.rst", "generated/skbio.stats.gradient.GroupResults.__hash__.rst", "generated/skbio.stats.gradient.GroupResults.__le__.rst", "generated/skbio.stats.gradient.GroupResults.__lt__.rst", "generated/skbio.stats.gradient.GroupResults.__ne__.rst", "generated/skbio.stats.gradient.GroupResults.__str__.rst", "generated/skbio.stats.gradient.GroupResults.to_files.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.isubsample.rst", "generated/skbio.stats.ordination.rst", "generated/skbio.stats.ordination.OrdinationResults.rst", "generated/skbio.stats.ordination.OrdinationResults.__eq__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ge__.rst", "generated/skbio.stats.ordination.OrdinationResults.__getstate__.rst", "generated/skbio.stats.ordination.OrdinationResults.__gt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__hash__.rst", "generated/skbio.stats.ordination.OrdinationResults.__le__.rst", "generated/skbio.stats.ordination.OrdinationResults.__lt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ne__.rst", "generated/skbio.stats.ordination.OrdinationResults.__str__.rst", "generated/skbio.stats.ordination.OrdinationResults.plot.rst", "generated/skbio.stats.ordination.OrdinationResults.read.rst", "generated/skbio.stats.ordination.OrdinationResults.write.rst", "generated/skbio.stats.ordination.ca.rst", "generated/skbio.stats.ordination.cca.rst", "generated/skbio.stats.ordination.corr.rst", "generated/skbio.stats.ordination.e_matrix.rst", "generated/skbio.stats.ordination.f_matrix.rst", "generated/skbio.stats.ordination.mean_and_std.rst", "generated/skbio.stats.ordination.pcoa.rst", "generated/skbio.stats.ordination.pcoa_biplot.rst", "generated/skbio.stats.ordination.rda.rst", "generated/skbio.stats.ordination.scale.rst", "generated/skbio.stats.ordination.svd_rank.rst", "generated/skbio.stats.power.rst", "generated/skbio.stats.power.confidence_bound.rst", "generated/skbio.stats.power.paired_subsamples.rst", "generated/skbio.stats.power.subsample_paired_power.rst", "generated/skbio.stats.power.subsample_power.rst", "generated/skbio.stats.subsample_counts.rst", "generated/skbio.table.Table.rst", "generated/skbio.table.Table.__eq__.rst", "generated/skbio.table.Table.__ge__.rst", "generated/skbio.table.Table.__getitem__.rst", "generated/skbio.table.Table.__getstate__.rst", "generated/skbio.table.Table.__gt__.rst", "generated/skbio.table.Table.__iter__.rst", "generated/skbio.table.Table.__le__.rst", "generated/skbio.table.Table.__lt__.rst", "generated/skbio.table.Table.__ne__.rst", "generated/skbio.table.Table.__str__.rst", "generated/skbio.table.Table.add_group_metadata.rst", "generated/skbio.table.Table.add_metadata.rst", "generated/skbio.table.Table.align_to.rst", "generated/skbio.table.Table.align_to_dataframe.rst", "generated/skbio.table.Table.align_tree.rst", "generated/skbio.table.Table.collapse.rst", "generated/skbio.table.Table.concat.rst", "generated/skbio.table.Table.copy.rst", "generated/skbio.table.Table.data.rst", "generated/skbio.table.Table.del_metadata.rst", "generated/skbio.table.Table.delimited_self.rst", "generated/skbio.table.Table.descriptive_equality.rst", "generated/skbio.table.Table.exists.rst", "generated/skbio.table.Table.filter.rst", "generated/skbio.table.Table.from_adjacency.rst", "generated/skbio.table.Table.from_hdf5.rst", "generated/skbio.table.Table.from_json.rst", "generated/skbio.table.Table.from_tsv.rst", "generated/skbio.table.Table.get_table_density.rst", "generated/skbio.table.Table.get_value_by_ids.rst", "generated/skbio.table.Table.group_metadata.rst", "generated/skbio.table.Table.head.rst", "generated/skbio.table.Table.ids.rst", "generated/skbio.table.Table.index.rst", "generated/skbio.table.Table.is_empty.rst", "generated/skbio.table.Table.iter.rst", "generated/skbio.table.Table.iter_data.rst", "generated/skbio.table.Table.iter_pairwise.rst", "generated/skbio.table.Table.length.rst", "generated/skbio.table.Table.max.rst", "generated/skbio.table.Table.merge.rst", "generated/skbio.table.Table.metadata.rst", "generated/skbio.table.Table.metadata_to_dataframe.rst", "generated/skbio.table.Table.min.rst", "generated/skbio.table.Table.nonzero.rst", "generated/skbio.table.Table.nonzero_counts.rst", "generated/skbio.table.Table.norm.rst", "generated/skbio.table.Table.pa.rst", "generated/skbio.table.Table.partition.rst", "generated/skbio.table.Table.rankdata.rst", "generated/skbio.table.Table.read.rst", "generated/skbio.table.Table.reduce.rst", "generated/skbio.table.Table.remove_empty.rst", "generated/skbio.table.Table.sort.rst", "generated/skbio.table.Table.sort_order.rst", "generated/skbio.table.Table.subsample.rst", "generated/skbio.table.Table.sum.rst", "generated/skbio.table.Table.to_anndata.rst", "generated/skbio.table.Table.to_dataframe.rst", "generated/skbio.table.Table.to_hdf5.rst", "generated/skbio.table.Table.to_json.rst", "generated/skbio.table.Table.to_tsv.rst", "generated/skbio.table.Table.transform.rst", "generated/skbio.table.Table.transpose.rst", "generated/skbio.table.Table.update_ids.rst", "generated/skbio.table.Table.write.rst", "generated/skbio.table.example_table.rst", "generated/skbio.tree.TreeNode.rst", "generated/skbio.tree.TreeNode.__copy__.rst", "generated/skbio.tree.TreeNode.__deepcopy__.rst", "generated/skbio.tree.TreeNode.__eq__.rst", "generated/skbio.tree.TreeNode.__ge__.rst", "generated/skbio.tree.TreeNode.__getitem__.rst", "generated/skbio.tree.TreeNode.__getstate__.rst", "generated/skbio.tree.TreeNode.__gt__.rst", "generated/skbio.tree.TreeNode.__hash__.rst", "generated/skbio.tree.TreeNode.__iter__.rst", "generated/skbio.tree.TreeNode.__le__.rst", "generated/skbio.tree.TreeNode.__len__.rst", "generated/skbio.tree.TreeNode.__lt__.rst", "generated/skbio.tree.TreeNode.__ne__.rst", "generated/skbio.tree.TreeNode.__str__.rst", "generated/skbio.tree.TreeNode.accumulate_to_ancestor.rst", "generated/skbio.tree.TreeNode.ancestors.rst", "generated/skbio.tree.TreeNode.append.rst", "generated/skbio.tree.TreeNode.ascii_art.rst", "generated/skbio.tree.TreeNode.assign_ids.rst", "generated/skbio.tree.TreeNode.assign_supports.rst", "generated/skbio.tree.TreeNode.bifurcate.rst", "generated/skbio.tree.TreeNode.cache_attr.rst", "generated/skbio.tree.TreeNode.compare_rfd.rst", "generated/skbio.tree.TreeNode.compare_subsets.rst", "generated/skbio.tree.TreeNode.compare_tip_distances.rst", "generated/skbio.tree.TreeNode.copy.rst", "generated/skbio.tree.TreeNode.count.rst", "generated/skbio.tree.TreeNode.create_caches.rst", "generated/skbio.tree.TreeNode.deepcopy.rst", "generated/skbio.tree.TreeNode.descending_branch_length.rst", "generated/skbio.tree.TreeNode.distance.rst", "generated/skbio.tree.TreeNode.extend.rst", "generated/skbio.tree.TreeNode.find.rst", "generated/skbio.tree.TreeNode.find_all.rst", "generated/skbio.tree.TreeNode.find_by_func.rst", "generated/skbio.tree.TreeNode.find_by_id.rst", "generated/skbio.tree.TreeNode.from_linkage_matrix.rst", "generated/skbio.tree.TreeNode.from_taxdump.rst", "generated/skbio.tree.TreeNode.from_taxonomy.rst", "generated/skbio.tree.TreeNode.get_max_distance.rst", "generated/skbio.tree.TreeNode.has_children.rst", "generated/skbio.tree.TreeNode.index_tree.rst", "generated/skbio.tree.TreeNode.invalidate_caches.rst", "generated/skbio.tree.TreeNode.is_root.rst", "generated/skbio.tree.TreeNode.is_tip.rst", "generated/skbio.tree.TreeNode.lca.rst", "generated/skbio.tree.TreeNode.levelorder.rst", "generated/skbio.tree.TreeNode.lowest_common_ancestor.rst", "generated/skbio.tree.TreeNode.neighbors.rst", "generated/skbio.tree.TreeNode.non_tips.rst", "generated/skbio.tree.TreeNode.observed_node_counts.rst", "generated/skbio.tree.TreeNode.pop.rst", "generated/skbio.tree.TreeNode.postorder.rst", "generated/skbio.tree.TreeNode.pre_and_postorder.rst", "generated/skbio.tree.TreeNode.preorder.rst", "generated/skbio.tree.TreeNode.prune.rst", "generated/skbio.tree.TreeNode.read.rst", "generated/skbio.tree.TreeNode.remove.rst", "generated/skbio.tree.TreeNode.remove_deleted.rst", "generated/skbio.tree.TreeNode.root.rst", "generated/skbio.tree.TreeNode.root_at.rst", "generated/skbio.tree.TreeNode.root_at_midpoint.rst", "generated/skbio.tree.TreeNode.shear.rst", "generated/skbio.tree.TreeNode.shuffle.rst", "generated/skbio.tree.TreeNode.siblings.rst", "generated/skbio.tree.TreeNode.subset.rst", "generated/skbio.tree.TreeNode.subsets.rst", "generated/skbio.tree.TreeNode.subtree.rst", "generated/skbio.tree.TreeNode.tip_tip_distances.rst", "generated/skbio.tree.TreeNode.tips.rst", "generated/skbio.tree.TreeNode.to_array.rst", "generated/skbio.tree.TreeNode.to_taxonomy.rst", "generated/skbio.tree.TreeNode.traverse.rst", "generated/skbio.tree.TreeNode.unpack.rst", "generated/skbio.tree.TreeNode.unpack_by_func.rst", "generated/skbio.tree.TreeNode.unrooted_copy.rst", "generated/skbio.tree.TreeNode.unrooted_deepcopy.rst", "generated/skbio.tree.TreeNode.write.rst", "generated/skbio.tree.majority_rule.rst", "generated/skbio.tree.nj.rst", "generated/skbio.util.EfficiencyWarning.rst", "generated/skbio.util.RepresentationWarning.rst", "generated/skbio.util.assert_data_frame_almost_equal.rst", "generated/skbio.util.assert_ordination_results_equal.rst", "generated/skbio.util.cardinal_to_ordinal.rst", "generated/skbio.util.classproperty.rst", "generated/skbio.util.classproperty.__delete__.rst", "generated/skbio.util.classproperty.__eq__.rst", "generated/skbio.util.classproperty.__ge__.rst", "generated/skbio.util.classproperty.__get__.rst", "generated/skbio.util.classproperty.__getstate__.rst", "generated/skbio.util.classproperty.__gt__.rst", "generated/skbio.util.classproperty.__hash__.rst", "generated/skbio.util.classproperty.__le__.rst", "generated/skbio.util.classproperty.__lt__.rst", "generated/skbio.util.classproperty.__ne__.rst", "generated/skbio.util.classproperty.__set__.rst", "generated/skbio.util.classproperty.__set_name__.rst", "generated/skbio.util.classproperty.__str__.rst", "generated/skbio.util.classproperty.deleter.rst", "generated/skbio.util.classproperty.getter.rst", "generated/skbio.util.classproperty.setter.rst", "generated/skbio.util.find_duplicates.rst", "generated/skbio.util.get_data_path.rst", "generated/skbio.util.safe_md5.rst", "generated/skbio.workflow.Workflow.rst", "generated/skbio.workflow.Workflow.__call__.rst", "generated/skbio.workflow.Workflow.__eq__.rst", "generated/skbio.workflow.Workflow.__ge__.rst", "generated/skbio.workflow.Workflow.__getstate__.rst", "generated/skbio.workflow.Workflow.__gt__.rst", "generated/skbio.workflow.Workflow.__hash__.rst", "generated/skbio.workflow.Workflow.__le__.rst", "generated/skbio.workflow.Workflow.__lt__.rst", "generated/skbio.workflow.Workflow.__ne__.rst", "generated/skbio.workflow.Workflow.__str__.rst", "generated/skbio.workflow.Workflow.initialize_state.rst", "generated/skbio.workflow.method.rst", "generated/skbio.workflow.method.__call__.rst", "generated/skbio.workflow.method.__eq__.rst", "generated/skbio.workflow.method.__ge__.rst", "generated/skbio.workflow.method.__getstate__.rst", "generated/skbio.workflow.method.__gt__.rst", "generated/skbio.workflow.method.__hash__.rst", "generated/skbio.workflow.method.__le__.rst", "generated/skbio.workflow.method.__lt__.rst", "generated/skbio.workflow.method.__ne__.rst", "generated/skbio.workflow.method.__str__.rst", "generated/skbio.workflow.requires.rst", "generated/skbio.workflow.requires.__call__.rst", "generated/skbio.workflow.requires.__eq__.rst", "generated/skbio.workflow.requires.__ge__.rst", "generated/skbio.workflow.requires.__getstate__.rst", "generated/skbio.workflow.requires.__gt__.rst", "generated/skbio.workflow.requires.__hash__.rst", "generated/skbio.workflow.requires.__le__.rst", "generated/skbio.workflow.requires.__lt__.rst", "generated/skbio.workflow.requires.__ne__.rst", "generated/skbio.workflow.requires.__str__.rst", "index.rst", "io.rst", "metadata.rst", "sequence.rst", "stats.rst", "table.rst", "tree.rst", "util.rst", "workflow.rst"], "indexentries": {"__bool__() (skbio.alignment.tabularmsa method)": [[30, "skbio.alignment.TabularMSA.__bool__", false]], "__bool__() (skbio.sequence.dna method)": [[290, "skbio.sequence.DNA.__bool__", false]], "__bool__() (skbio.sequence.grammaredsequence method)": [[361, "skbio.sequence.GrammaredSequence.__bool__", false]], "__bool__() (skbio.sequence.protein method)": [[412, "skbio.sequence.Protein.__bool__", false]], "__bool__() (skbio.sequence.rna method)": [[465, "skbio.sequence.RNA.__bool__", false]], "__bool__() (skbio.sequence.sequence method)": [[524, "skbio.sequence.Sequence.__bool__", false]], "__call__() (skbio.alignment.stripedsmithwaterman method)": [[18, "skbio.alignment.StripedSmithWaterman.__call__", false]], "__call__() (skbio.workflow.method method)": [[980, "skbio.workflow.method.__call__", false]], "__call__() (skbio.workflow.requires method)": [[991, "skbio.workflow.requires.__call__", false]], "__call__() (skbio.workflow.workflow method)": [[968, "skbio.workflow.Workflow.__call__", false]], "__contains__() (skbio.alignment.tabularmsa method)": [[31, "skbio.alignment.TabularMSA.__contains__", false]], "__contains__() (skbio.sequence.dna method)": [[291, "skbio.sequence.DNA.__contains__", false]], "__contains__() (skbio.sequence.grammaredsequence method)": [[362, "skbio.sequence.GrammaredSequence.__contains__", false]], "__contains__() (skbio.sequence.protein method)": [[413, "skbio.sequence.Protein.__contains__", false]], "__contains__() (skbio.sequence.rna method)": [[466, "skbio.sequence.RNA.__contains__", false]], "__contains__() (skbio.sequence.sequence method)": [[525, "skbio.sequence.Sequence.__contains__", false]], "__contains__() (skbio.sequence.substitutionmatrix method)": [[562, "skbio.sequence.SubstitutionMatrix.__contains__", false]], "__contains__() (skbio.stats.distance.dissimilaritymatrix method)": [[615, "skbio.stats.distance.DissimilarityMatrix.__contains__", false]], "__contains__() (skbio.stats.distance.distancematrix method)": [[638, "skbio.stats.distance.DistanceMatrix.__contains__", false]], "__copy__() (skbio.alignment.tabularmsa method)": [[32, "skbio.alignment.TabularMSA.__copy__", false]], "__copy__() (skbio.metadata.intervalmetadata method)": [[216, "skbio.metadata.IntervalMetadata.__copy__", false]], "__copy__() (skbio.sequence.dna method)": [[292, "skbio.sequence.DNA.__copy__", false]], "__copy__() (skbio.sequence.grammaredsequence method)": [[363, "skbio.sequence.GrammaredSequence.__copy__", false]], "__copy__() (skbio.sequence.protein method)": [[414, "skbio.sequence.Protein.__copy__", false]], "__copy__() (skbio.sequence.rna method)": [[467, "skbio.sequence.RNA.__copy__", false]], "__copy__() (skbio.sequence.sequence method)": [[526, "skbio.sequence.Sequence.__copy__", false]], "__copy__() (skbio.tree.treenode method)": [[862, "skbio.tree.TreeNode.__copy__", false]], "__deepcopy__() (skbio.alignment.tabularmsa method)": [[33, "skbio.alignment.TabularMSA.__deepcopy__", false]], "__deepcopy__() (skbio.metadata.intervalmetadata method)": [[217, "skbio.metadata.IntervalMetadata.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.dna method)": [[293, "skbio.sequence.DNA.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.grammaredsequence method)": [[364, "skbio.sequence.GrammaredSequence.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.protein method)": [[415, "skbio.sequence.Protein.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.rna method)": [[468, "skbio.sequence.RNA.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.sequence method)": [[527, "skbio.sequence.Sequence.__deepcopy__", false]], "__deepcopy__() (skbio.tree.treenode method)": [[863, "skbio.tree.TreeNode.__deepcopy__", false]], "__delete__() (skbio.util.classproperty method)": [[948, "skbio.util.classproperty.__delete__", false]], "__eq__() (skbio.alignment.alignmentstructure method)": [[4, "skbio.alignment.AlignmentStructure.__eq__", false]], "__eq__() (skbio.alignment.stripedsmithwaterman method)": [[19, "skbio.alignment.StripedSmithWaterman.__eq__", false]], "__eq__() (skbio.alignment.tabularmsa method)": [[34, "skbio.alignment.TabularMSA.__eq__", false]], "__eq__() (skbio.embedding.proteinembedding method)": [[114, "skbio.embedding.ProteinEmbedding.__eq__", false]], "__eq__() (skbio.io.registry.format method)": [[146, "skbio.io.registry.Format.__eq__", false]], "__eq__() (skbio.io.registry.ioregistry method)": [[159, "skbio.io.registry.IORegistry.__eq__", false]], "__eq__() (skbio.metadata.categoricalmetadatacolumn method)": [[188, "skbio.metadata.CategoricalMetadataColumn.__eq__", false]], "__eq__() (skbio.metadata.interval method)": [[206, "skbio.metadata.Interval.__eq__", false]], "__eq__() (skbio.metadata.intervalmetadata method)": [[218, "skbio.metadata.IntervalMetadata.__eq__", false]], "__eq__() (skbio.metadata.metadatacolumn method)": [[235, "skbio.metadata.MetadataColumn.__eq__", false]], "__eq__() (skbio.metadata.numericmetadatacolumn method)": [[253, "skbio.metadata.NumericMetadataColumn.__eq__", false]], "__eq__() (skbio.metadata.samplemetadata method)": [[271, "skbio.metadata.SampleMetadata.__eq__", false]], "__eq__() (skbio.sequence.dna method)": [[294, "skbio.sequence.DNA.__eq__", false]], "__eq__() (skbio.sequence.geneticcode method)": [[349, "skbio.sequence.GeneticCode.__eq__", false]], "__eq__() (skbio.sequence.grammaredsequence method)": [[365, "skbio.sequence.GrammaredSequence.__eq__", false]], "__eq__() (skbio.sequence.protein method)": [[416, "skbio.sequence.Protein.__eq__", false]], "__eq__() (skbio.sequence.rna method)": [[469, "skbio.sequence.RNA.__eq__", false]], "__eq__() (skbio.sequence.sequence method)": [[528, "skbio.sequence.Sequence.__eq__", false]], "__eq__() (skbio.sequence.substitutionmatrix method)": [[563, "skbio.sequence.SubstitutionMatrix.__eq__", false]], "__eq__() (skbio.stats.distance.dissimilaritymatrix method)": [[616, "skbio.stats.distance.DissimilarityMatrix.__eq__", false]], "__eq__() (skbio.stats.distance.distancematrix method)": [[639, "skbio.stats.distance.DistanceMatrix.__eq__", false]], "__eq__() (skbio.stats.gradient.averagegradientanova method)": [[674, "skbio.stats.gradient.AverageGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.categoryresults method)": [[685, "skbio.stats.gradient.CategoryResults.__eq__", false]], "__eq__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[696, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.gradientanova method)": [[707, "skbio.stats.gradient.GradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.gradientanovaresults method)": [[718, "skbio.stats.gradient.GradientANOVAResults.__eq__", false]], "__eq__() (skbio.stats.gradient.groupresults method)": [[729, "skbio.stats.gradient.GroupResults.__eq__", false]], "__eq__() (skbio.stats.gradient.trajectorygradientanova method)": [[740, "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[751, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.ordination.ordinationresults method)": [[764, "skbio.stats.ordination.OrdinationResults.__eq__", false]], "__eq__() (skbio.table.table method)": [[794, "skbio.table.Table.__eq__", false]], "__eq__() (skbio.tree.treenode method)": [[864, "skbio.tree.TreeNode.__eq__", false]], "__eq__() (skbio.util.classproperty method)": [[949, "skbio.util.classproperty.__eq__", false]], "__eq__() (skbio.workflow.method method)": [[981, "skbio.workflow.method.__eq__", false]], "__eq__() (skbio.workflow.requires method)": [[992, "skbio.workflow.requires.__eq__", false]], "__eq__() (skbio.workflow.workflow method)": [[969, "skbio.workflow.Workflow.__eq__", false]], "__ge__() (skbio.alignment.alignmentstructure method)": [[5, "skbio.alignment.AlignmentStructure.__ge__", false]], "__ge__() (skbio.alignment.stripedsmithwaterman method)": [[20, "skbio.alignment.StripedSmithWaterman.__ge__", false]], "__ge__() (skbio.alignment.tabularmsa method)": [[35, "skbio.alignment.TabularMSA.__ge__", false]], "__ge__() (skbio.embedding.proteinembedding method)": [[115, "skbio.embedding.ProteinEmbedding.__ge__", false]], "__ge__() (skbio.io.registry.format method)": [[147, "skbio.io.registry.Format.__ge__", false]], "__ge__() (skbio.io.registry.ioregistry method)": [[160, "skbio.io.registry.IORegistry.__ge__", false]], "__ge__() (skbio.metadata.categoricalmetadatacolumn method)": [[189, "skbio.metadata.CategoricalMetadataColumn.__ge__", false]], "__ge__() (skbio.metadata.interval method)": [[207, "skbio.metadata.Interval.__ge__", false]], "__ge__() (skbio.metadata.intervalmetadata method)": [[219, "skbio.metadata.IntervalMetadata.__ge__", false]], "__ge__() (skbio.metadata.metadatacolumn method)": [[236, "skbio.metadata.MetadataColumn.__ge__", false]], "__ge__() (skbio.metadata.numericmetadatacolumn method)": [[254, "skbio.metadata.NumericMetadataColumn.__ge__", false]], "__ge__() (skbio.metadata.samplemetadata method)": [[272, "skbio.metadata.SampleMetadata.__ge__", false]], "__ge__() (skbio.sequence.dna method)": [[295, "skbio.sequence.DNA.__ge__", false]], "__ge__() (skbio.sequence.geneticcode method)": [[350, "skbio.sequence.GeneticCode.__ge__", false]], "__ge__() (skbio.sequence.grammaredsequence method)": [[366, "skbio.sequence.GrammaredSequence.__ge__", false]], "__ge__() (skbio.sequence.protein method)": [[417, "skbio.sequence.Protein.__ge__", false]], "__ge__() (skbio.sequence.rna method)": [[470, "skbio.sequence.RNA.__ge__", false]], "__ge__() (skbio.sequence.sequence method)": [[529, "skbio.sequence.Sequence.__ge__", false]], "__ge__() (skbio.sequence.substitutionmatrix method)": [[564, "skbio.sequence.SubstitutionMatrix.__ge__", false]], "__ge__() (skbio.stats.distance.dissimilaritymatrix method)": [[617, "skbio.stats.distance.DissimilarityMatrix.__ge__", false]], "__ge__() (skbio.stats.distance.distancematrix method)": [[640, "skbio.stats.distance.DistanceMatrix.__ge__", false]], "__ge__() (skbio.stats.gradient.averagegradientanova method)": [[675, "skbio.stats.gradient.AverageGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.categoryresults method)": [[686, "skbio.stats.gradient.CategoryResults.__ge__", false]], "__ge__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[697, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.gradientanova method)": [[708, "skbio.stats.gradient.GradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.gradientanovaresults method)": [[719, "skbio.stats.gradient.GradientANOVAResults.__ge__", false]], "__ge__() (skbio.stats.gradient.groupresults method)": [[730, "skbio.stats.gradient.GroupResults.__ge__", false]], "__ge__() (skbio.stats.gradient.trajectorygradientanova method)": [[741, "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[752, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.ordination.ordinationresults method)": [[765, "skbio.stats.ordination.OrdinationResults.__ge__", false]], "__ge__() (skbio.table.table method)": [[795, "skbio.table.Table.__ge__", false]], "__ge__() (skbio.tree.treenode method)": [[865, "skbio.tree.TreeNode.__ge__", false]], "__ge__() (skbio.util.classproperty method)": [[950, "skbio.util.classproperty.__ge__", false]], "__ge__() (skbio.workflow.method method)": [[982, "skbio.workflow.method.__ge__", false]], "__ge__() (skbio.workflow.requires method)": [[993, "skbio.workflow.requires.__ge__", false]], "__ge__() (skbio.workflow.workflow method)": [[970, "skbio.workflow.Workflow.__ge__", false]], "__get__() (skbio.util.classproperty method)": [[951, "skbio.util.classproperty.__get__", false]], "__getitem__() (skbio.alignment.alignmentstructure method)": [[6, "skbio.alignment.AlignmentStructure.__getitem__", false]], "__getitem__() (skbio.alignment.tabularmsa method)": [[36, "skbio.alignment.TabularMSA.__getitem__", false]], "__getitem__() (skbio.sequence.dna method)": [[296, "skbio.sequence.DNA.__getitem__", false]], "__getitem__() (skbio.sequence.grammaredsequence method)": [[367, "skbio.sequence.GrammaredSequence.__getitem__", false]], "__getitem__() (skbio.sequence.protein method)": [[418, "skbio.sequence.Protein.__getitem__", false]], "__getitem__() (skbio.sequence.rna method)": [[471, "skbio.sequence.RNA.__getitem__", false]], "__getitem__() (skbio.sequence.sequence method)": [[530, "skbio.sequence.Sequence.__getitem__", false]], "__getitem__() (skbio.sequence.substitutionmatrix method)": [[565, "skbio.sequence.SubstitutionMatrix.__getitem__", false]], "__getitem__() (skbio.stats.distance.dissimilaritymatrix method)": [[618, "skbio.stats.distance.DissimilarityMatrix.__getitem__", false]], "__getitem__() (skbio.stats.distance.distancematrix method)": [[641, "skbio.stats.distance.DistanceMatrix.__getitem__", false]], "__getitem__() (skbio.table.table method)": [[796, "skbio.table.Table.__getitem__", false]], "__getitem__() (skbio.tree.treenode method)": [[866, "skbio.tree.TreeNode.__getitem__", false]], "__getstate__() (skbio.alignment.alignmentstructure method)": [[7, "skbio.alignment.AlignmentStructure.__getstate__", false]], "__getstate__() (skbio.alignment.stripedsmithwaterman method)": [[21, "skbio.alignment.StripedSmithWaterman.__getstate__", false]], "__getstate__() (skbio.alignment.tabularmsa method)": [[37, "skbio.alignment.TabularMSA.__getstate__", false]], "__getstate__() (skbio.embedding.proteinembedding method)": [[116, "skbio.embedding.ProteinEmbedding.__getstate__", false]], "__getstate__() (skbio.io.registry.format method)": [[148, "skbio.io.registry.Format.__getstate__", false]], "__getstate__() (skbio.io.registry.ioregistry method)": [[161, "skbio.io.registry.IORegistry.__getstate__", false]], "__getstate__() (skbio.metadata.categoricalmetadatacolumn method)": [[190, "skbio.metadata.CategoricalMetadataColumn.__getstate__", false]], "__getstate__() (skbio.metadata.interval method)": [[208, "skbio.metadata.Interval.__getstate__", false]], "__getstate__() (skbio.metadata.intervalmetadata method)": [[220, "skbio.metadata.IntervalMetadata.__getstate__", false]], "__getstate__() (skbio.metadata.metadatacolumn method)": [[237, "skbio.metadata.MetadataColumn.__getstate__", false]], "__getstate__() (skbio.metadata.numericmetadatacolumn method)": [[255, "skbio.metadata.NumericMetadataColumn.__getstate__", false]], "__getstate__() (skbio.metadata.samplemetadata method)": [[273, "skbio.metadata.SampleMetadata.__getstate__", false]], "__getstate__() (skbio.sequence.dna method)": [[297, "skbio.sequence.DNA.__getstate__", false]], "__getstate__() (skbio.sequence.geneticcode method)": [[351, "skbio.sequence.GeneticCode.__getstate__", false]], "__getstate__() (skbio.sequence.grammaredsequence method)": [[368, "skbio.sequence.GrammaredSequence.__getstate__", false]], "__getstate__() (skbio.sequence.protein method)": [[419, "skbio.sequence.Protein.__getstate__", false]], "__getstate__() (skbio.sequence.rna method)": [[472, "skbio.sequence.RNA.__getstate__", false]], "__getstate__() (skbio.sequence.sequence method)": [[531, "skbio.sequence.Sequence.__getstate__", false]], "__getstate__() (skbio.sequence.substitutionmatrix method)": [[566, "skbio.sequence.SubstitutionMatrix.__getstate__", false]], "__getstate__() (skbio.stats.distance.dissimilaritymatrix method)": [[619, "skbio.stats.distance.DissimilarityMatrix.__getstate__", false]], "__getstate__() (skbio.stats.distance.distancematrix method)": [[642, "skbio.stats.distance.DistanceMatrix.__getstate__", false]], "__getstate__() (skbio.stats.gradient.averagegradientanova method)": [[676, "skbio.stats.gradient.AverageGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.categoryresults method)": [[687, "skbio.stats.gradient.CategoryResults.__getstate__", false]], "__getstate__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[698, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.gradientanova method)": [[709, "skbio.stats.gradient.GradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.gradientanovaresults method)": [[720, "skbio.stats.gradient.GradientANOVAResults.__getstate__", false]], "__getstate__() (skbio.stats.gradient.groupresults method)": [[731, "skbio.stats.gradient.GroupResults.__getstate__", false]], "__getstate__() (skbio.stats.gradient.trajectorygradientanova method)": [[742, "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[753, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.ordination.ordinationresults method)": [[766, "skbio.stats.ordination.OrdinationResults.__getstate__", false]], "__getstate__() (skbio.table.table method)": [[797, "skbio.table.Table.__getstate__", false]], "__getstate__() (skbio.tree.treenode method)": [[867, "skbio.tree.TreeNode.__getstate__", false]], "__getstate__() (skbio.util.classproperty method)": [[952, "skbio.util.classproperty.__getstate__", false]], "__getstate__() (skbio.workflow.method method)": [[983, "skbio.workflow.method.__getstate__", false]], "__getstate__() (skbio.workflow.requires method)": [[994, "skbio.workflow.requires.__getstate__", false]], "__getstate__() (skbio.workflow.workflow method)": [[971, "skbio.workflow.Workflow.__getstate__", false]], "__gt__() (skbio.alignment.alignmentstructure method)": [[8, "skbio.alignment.AlignmentStructure.__gt__", false]], "__gt__() (skbio.alignment.stripedsmithwaterman method)": [[22, "skbio.alignment.StripedSmithWaterman.__gt__", false]], "__gt__() (skbio.alignment.tabularmsa method)": [[38, "skbio.alignment.TabularMSA.__gt__", false]], "__gt__() (skbio.embedding.proteinembedding method)": [[117, "skbio.embedding.ProteinEmbedding.__gt__", false]], "__gt__() (skbio.io.registry.format method)": [[149, "skbio.io.registry.Format.__gt__", false]], "__gt__() (skbio.io.registry.ioregistry method)": [[162, "skbio.io.registry.IORegistry.__gt__", false]], "__gt__() (skbio.metadata.categoricalmetadatacolumn method)": [[191, "skbio.metadata.CategoricalMetadataColumn.__gt__", false]], "__gt__() (skbio.metadata.interval method)": [[209, "skbio.metadata.Interval.__gt__", false]], "__gt__() (skbio.metadata.intervalmetadata method)": [[221, "skbio.metadata.IntervalMetadata.__gt__", false]], "__gt__() (skbio.metadata.metadatacolumn method)": [[238, "skbio.metadata.MetadataColumn.__gt__", false]], "__gt__() (skbio.metadata.numericmetadatacolumn method)": [[256, "skbio.metadata.NumericMetadataColumn.__gt__", false]], "__gt__() (skbio.metadata.samplemetadata method)": [[274, "skbio.metadata.SampleMetadata.__gt__", false]], "__gt__() (skbio.sequence.dna method)": [[298, "skbio.sequence.DNA.__gt__", false]], "__gt__() (skbio.sequence.geneticcode method)": [[352, "skbio.sequence.GeneticCode.__gt__", false]], "__gt__() (skbio.sequence.grammaredsequence method)": [[369, "skbio.sequence.GrammaredSequence.__gt__", false]], "__gt__() (skbio.sequence.protein method)": [[420, "skbio.sequence.Protein.__gt__", false]], "__gt__() (skbio.sequence.rna method)": [[473, "skbio.sequence.RNA.__gt__", false]], "__gt__() (skbio.sequence.sequence method)": [[532, "skbio.sequence.Sequence.__gt__", false]], "__gt__() (skbio.sequence.substitutionmatrix method)": [[567, "skbio.sequence.SubstitutionMatrix.__gt__", false]], "__gt__() (skbio.stats.distance.dissimilaritymatrix method)": [[620, "skbio.stats.distance.DissimilarityMatrix.__gt__", false]], "__gt__() (skbio.stats.distance.distancematrix method)": [[643, "skbio.stats.distance.DistanceMatrix.__gt__", false]], "__gt__() (skbio.stats.gradient.averagegradientanova method)": [[677, "skbio.stats.gradient.AverageGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.categoryresults method)": [[688, "skbio.stats.gradient.CategoryResults.__gt__", false]], "__gt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[699, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.gradientanova method)": [[710, "skbio.stats.gradient.GradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.gradientanovaresults method)": [[721, "skbio.stats.gradient.GradientANOVAResults.__gt__", false]], "__gt__() (skbio.stats.gradient.groupresults method)": [[732, "skbio.stats.gradient.GroupResults.__gt__", false]], "__gt__() (skbio.stats.gradient.trajectorygradientanova method)": [[743, "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[754, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.ordination.ordinationresults method)": [[767, "skbio.stats.ordination.OrdinationResults.__gt__", false]], "__gt__() (skbio.table.table method)": [[798, "skbio.table.Table.__gt__", false]], "__gt__() (skbio.tree.treenode method)": [[868, "skbio.tree.TreeNode.__gt__", false]], "__gt__() (skbio.util.classproperty method)": [[953, "skbio.util.classproperty.__gt__", false]], "__gt__() (skbio.workflow.method method)": [[984, "skbio.workflow.method.__gt__", false]], "__gt__() (skbio.workflow.requires method)": [[995, "skbio.workflow.requires.__gt__", false]], "__gt__() (skbio.workflow.workflow method)": [[972, "skbio.workflow.Workflow.__gt__", false]], "__hash__() (skbio.alignment.alignmentstructure method)": [[9, "skbio.alignment.AlignmentStructure.__hash__", false]], "__hash__() (skbio.alignment.stripedsmithwaterman method)": [[23, "skbio.alignment.StripedSmithWaterman.__hash__", false]], "__hash__() (skbio.embedding.proteinembedding method)": [[118, "skbio.embedding.ProteinEmbedding.__hash__", false]], "__hash__() (skbio.io.registry.format method)": [[150, "skbio.io.registry.Format.__hash__", false]], "__hash__() (skbio.io.registry.ioregistry method)": [[163, "skbio.io.registry.IORegistry.__hash__", false]], "__hash__() (skbio.stats.gradient.averagegradientanova method)": [[678, "skbio.stats.gradient.AverageGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.categoryresults method)": [[689, "skbio.stats.gradient.CategoryResults.__hash__", false]], "__hash__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[700, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.gradientanova method)": [[711, "skbio.stats.gradient.GradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.gradientanovaresults method)": [[722, "skbio.stats.gradient.GradientANOVAResults.__hash__", false]], "__hash__() (skbio.stats.gradient.groupresults method)": [[733, "skbio.stats.gradient.GroupResults.__hash__", false]], "__hash__() (skbio.stats.gradient.trajectorygradientanova method)": [[744, "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[755, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.ordination.ordinationresults method)": [[768, "skbio.stats.ordination.OrdinationResults.__hash__", false]], "__hash__() (skbio.tree.treenode method)": [[869, "skbio.tree.TreeNode.__hash__", false]], "__hash__() (skbio.util.classproperty method)": [[954, "skbio.util.classproperty.__hash__", false]], "__hash__() (skbio.workflow.method method)": [[985, "skbio.workflow.method.__hash__", false]], "__hash__() (skbio.workflow.requires method)": [[996, "skbio.workflow.requires.__hash__", false]], "__hash__() (skbio.workflow.workflow method)": [[973, "skbio.workflow.Workflow.__hash__", false]], "__iter__() (skbio.alignment.tabularmsa method)": [[39, "skbio.alignment.TabularMSA.__iter__", false]], "__iter__() (skbio.sequence.dna method)": [[299, "skbio.sequence.DNA.__iter__", false]], "__iter__() (skbio.sequence.grammaredsequence method)": [[370, "skbio.sequence.GrammaredSequence.__iter__", false]], "__iter__() (skbio.sequence.protein method)": [[421, "skbio.sequence.Protein.__iter__", false]], "__iter__() (skbio.sequence.rna method)": [[474, "skbio.sequence.RNA.__iter__", false]], "__iter__() (skbio.sequence.sequence method)": [[533, "skbio.sequence.Sequence.__iter__", false]], "__iter__() (skbio.table.table method)": [[799, "skbio.table.Table.__iter__", false]], "__iter__() (skbio.tree.treenode method)": [[870, "skbio.tree.TreeNode.__iter__", false]], "__le__() (skbio.alignment.alignmentstructure method)": [[10, "skbio.alignment.AlignmentStructure.__le__", false]], "__le__() (skbio.alignment.stripedsmithwaterman method)": [[24, "skbio.alignment.StripedSmithWaterman.__le__", false]], "__le__() (skbio.alignment.tabularmsa method)": [[40, "skbio.alignment.TabularMSA.__le__", false]], "__le__() (skbio.embedding.proteinembedding method)": [[119, "skbio.embedding.ProteinEmbedding.__le__", false]], "__le__() (skbio.io.registry.format method)": [[151, "skbio.io.registry.Format.__le__", false]], "__le__() (skbio.io.registry.ioregistry method)": [[164, "skbio.io.registry.IORegistry.__le__", false]], "__le__() (skbio.metadata.categoricalmetadatacolumn method)": [[192, "skbio.metadata.CategoricalMetadataColumn.__le__", false]], "__le__() (skbio.metadata.interval method)": [[210, "skbio.metadata.Interval.__le__", false]], "__le__() (skbio.metadata.intervalmetadata method)": [[222, "skbio.metadata.IntervalMetadata.__le__", false]], "__le__() (skbio.metadata.metadatacolumn method)": [[239, "skbio.metadata.MetadataColumn.__le__", false]], "__le__() (skbio.metadata.numericmetadatacolumn method)": [[257, "skbio.metadata.NumericMetadataColumn.__le__", false]], "__le__() (skbio.metadata.samplemetadata method)": [[275, "skbio.metadata.SampleMetadata.__le__", false]], "__le__() (skbio.sequence.dna method)": [[300, "skbio.sequence.DNA.__le__", false]], "__le__() (skbio.sequence.geneticcode method)": [[353, "skbio.sequence.GeneticCode.__le__", false]], "__le__() (skbio.sequence.grammaredsequence method)": [[371, "skbio.sequence.GrammaredSequence.__le__", false]], "__le__() (skbio.sequence.protein method)": [[422, "skbio.sequence.Protein.__le__", false]], "__le__() (skbio.sequence.rna method)": [[475, "skbio.sequence.RNA.__le__", false]], "__le__() (skbio.sequence.sequence method)": [[534, "skbio.sequence.Sequence.__le__", false]], "__le__() (skbio.sequence.substitutionmatrix method)": [[568, "skbio.sequence.SubstitutionMatrix.__le__", false]], "__le__() (skbio.stats.distance.dissimilaritymatrix method)": [[621, "skbio.stats.distance.DissimilarityMatrix.__le__", false]], "__le__() (skbio.stats.distance.distancematrix method)": [[644, "skbio.stats.distance.DistanceMatrix.__le__", false]], "__le__() (skbio.stats.gradient.averagegradientanova method)": [[679, "skbio.stats.gradient.AverageGradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.categoryresults method)": [[690, "skbio.stats.gradient.CategoryResults.__le__", false]], "__le__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[701, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.gradientanova method)": [[712, "skbio.stats.gradient.GradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.gradientanovaresults method)": [[723, "skbio.stats.gradient.GradientANOVAResults.__le__", false]], "__le__() (skbio.stats.gradient.groupresults method)": [[734, "skbio.stats.gradient.GroupResults.__le__", false]], "__le__() (skbio.stats.gradient.trajectorygradientanova method)": [[745, "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[756, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", false]], "__le__() (skbio.stats.ordination.ordinationresults method)": [[769, "skbio.stats.ordination.OrdinationResults.__le__", false]], "__le__() (skbio.table.table method)": [[800, "skbio.table.Table.__le__", false]], "__le__() (skbio.tree.treenode method)": [[871, "skbio.tree.TreeNode.__le__", false]], "__le__() (skbio.util.classproperty method)": [[955, "skbio.util.classproperty.__le__", false]], "__le__() (skbio.workflow.method method)": [[986, "skbio.workflow.method.__le__", false]], "__le__() (skbio.workflow.requires method)": [[997, "skbio.workflow.requires.__le__", false]], "__le__() (skbio.workflow.workflow method)": [[974, "skbio.workflow.Workflow.__le__", false]], "__len__() (skbio.alignment.tabularmsa method)": [[41, "skbio.alignment.TabularMSA.__len__", false]], "__len__() (skbio.sequence.dna method)": [[301, "skbio.sequence.DNA.__len__", false]], "__len__() (skbio.sequence.grammaredsequence method)": [[372, "skbio.sequence.GrammaredSequence.__len__", false]], "__len__() (skbio.sequence.protein method)": [[423, "skbio.sequence.Protein.__len__", false]], "__len__() (skbio.sequence.rna method)": [[476, "skbio.sequence.RNA.__len__", false]], "__len__() (skbio.sequence.sequence method)": [[535, "skbio.sequence.Sequence.__len__", false]], "__len__() (skbio.tree.treenode method)": [[872, "skbio.tree.TreeNode.__len__", false]], "__lt__() (skbio.alignment.alignmentstructure method)": [[11, "skbio.alignment.AlignmentStructure.__lt__", false]], "__lt__() (skbio.alignment.stripedsmithwaterman method)": [[25, "skbio.alignment.StripedSmithWaterman.__lt__", false]], "__lt__() (skbio.alignment.tabularmsa method)": [[42, "skbio.alignment.TabularMSA.__lt__", false]], "__lt__() (skbio.embedding.proteinembedding method)": [[120, "skbio.embedding.ProteinEmbedding.__lt__", false]], "__lt__() (skbio.io.registry.format method)": [[152, "skbio.io.registry.Format.__lt__", false]], "__lt__() (skbio.io.registry.ioregistry method)": [[165, "skbio.io.registry.IORegistry.__lt__", false]], "__lt__() (skbio.metadata.categoricalmetadatacolumn method)": [[193, "skbio.metadata.CategoricalMetadataColumn.__lt__", false]], "__lt__() (skbio.metadata.interval method)": [[211, "skbio.metadata.Interval.__lt__", false]], "__lt__() (skbio.metadata.intervalmetadata method)": [[223, "skbio.metadata.IntervalMetadata.__lt__", false]], "__lt__() (skbio.metadata.metadatacolumn method)": [[240, "skbio.metadata.MetadataColumn.__lt__", false]], "__lt__() (skbio.metadata.numericmetadatacolumn method)": [[258, "skbio.metadata.NumericMetadataColumn.__lt__", false]], "__lt__() (skbio.metadata.samplemetadata method)": [[276, "skbio.metadata.SampleMetadata.__lt__", false]], "__lt__() (skbio.sequence.dna method)": [[302, "skbio.sequence.DNA.__lt__", false]], "__lt__() (skbio.sequence.geneticcode method)": [[354, "skbio.sequence.GeneticCode.__lt__", false]], "__lt__() (skbio.sequence.grammaredsequence method)": [[373, "skbio.sequence.GrammaredSequence.__lt__", false]], "__lt__() (skbio.sequence.protein method)": [[424, "skbio.sequence.Protein.__lt__", false]], "__lt__() (skbio.sequence.rna method)": [[477, "skbio.sequence.RNA.__lt__", false]], "__lt__() (skbio.sequence.sequence method)": [[536, "skbio.sequence.Sequence.__lt__", false]], "__lt__() (skbio.sequence.substitutionmatrix method)": [[569, "skbio.sequence.SubstitutionMatrix.__lt__", false]], "__lt__() (skbio.stats.distance.dissimilaritymatrix method)": [[622, "skbio.stats.distance.DissimilarityMatrix.__lt__", false]], "__lt__() (skbio.stats.distance.distancematrix method)": [[645, "skbio.stats.distance.DistanceMatrix.__lt__", false]], "__lt__() (skbio.stats.gradient.averagegradientanova method)": [[680, "skbio.stats.gradient.AverageGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.categoryresults method)": [[691, "skbio.stats.gradient.CategoryResults.__lt__", false]], "__lt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[702, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.gradientanova method)": [[713, "skbio.stats.gradient.GradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.gradientanovaresults method)": [[724, "skbio.stats.gradient.GradientANOVAResults.__lt__", false]], "__lt__() (skbio.stats.gradient.groupresults method)": [[735, "skbio.stats.gradient.GroupResults.__lt__", false]], "__lt__() (skbio.stats.gradient.trajectorygradientanova method)": [[746, "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[757, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.ordination.ordinationresults method)": [[770, "skbio.stats.ordination.OrdinationResults.__lt__", false]], "__lt__() (skbio.table.table method)": [[801, "skbio.table.Table.__lt__", false]], "__lt__() (skbio.tree.treenode method)": [[873, "skbio.tree.TreeNode.__lt__", false]], "__lt__() (skbio.util.classproperty method)": [[956, "skbio.util.classproperty.__lt__", false]], "__lt__() (skbio.workflow.method method)": [[987, "skbio.workflow.method.__lt__", false]], "__lt__() (skbio.workflow.requires method)": [[998, "skbio.workflow.requires.__lt__", false]], "__lt__() (skbio.workflow.workflow method)": [[975, "skbio.workflow.Workflow.__lt__", false]], "__ne__() (skbio.alignment.alignmentstructure method)": [[12, "skbio.alignment.AlignmentStructure.__ne__", false]], "__ne__() (skbio.alignment.stripedsmithwaterman method)": [[26, "skbio.alignment.StripedSmithWaterman.__ne__", false]], "__ne__() (skbio.alignment.tabularmsa method)": [[43, "skbio.alignment.TabularMSA.__ne__", false]], "__ne__() (skbio.embedding.proteinembedding method)": [[121, "skbio.embedding.ProteinEmbedding.__ne__", false]], "__ne__() (skbio.io.registry.format method)": [[153, "skbio.io.registry.Format.__ne__", false]], "__ne__() (skbio.io.registry.ioregistry method)": [[166, "skbio.io.registry.IORegistry.__ne__", false]], "__ne__() (skbio.metadata.categoricalmetadatacolumn method)": [[194, "skbio.metadata.CategoricalMetadataColumn.__ne__", false]], "__ne__() (skbio.metadata.interval method)": [[212, "skbio.metadata.Interval.__ne__", false]], "__ne__() (skbio.metadata.intervalmetadata method)": [[224, "skbio.metadata.IntervalMetadata.__ne__", false]], "__ne__() (skbio.metadata.metadatacolumn method)": [[241, "skbio.metadata.MetadataColumn.__ne__", false]], "__ne__() (skbio.metadata.numericmetadatacolumn method)": [[259, "skbio.metadata.NumericMetadataColumn.__ne__", false]], "__ne__() (skbio.metadata.samplemetadata method)": [[277, "skbio.metadata.SampleMetadata.__ne__", false]], "__ne__() (skbio.sequence.dna method)": [[303, "skbio.sequence.DNA.__ne__", false]], "__ne__() (skbio.sequence.geneticcode method)": [[355, "skbio.sequence.GeneticCode.__ne__", false]], "__ne__() (skbio.sequence.grammaredsequence method)": [[374, "skbio.sequence.GrammaredSequence.__ne__", false]], "__ne__() (skbio.sequence.protein method)": [[425, "skbio.sequence.Protein.__ne__", false]], "__ne__() (skbio.sequence.rna method)": [[478, "skbio.sequence.RNA.__ne__", false]], "__ne__() (skbio.sequence.sequence method)": [[537, "skbio.sequence.Sequence.__ne__", false]], "__ne__() (skbio.sequence.substitutionmatrix method)": [[570, "skbio.sequence.SubstitutionMatrix.__ne__", false]], "__ne__() (skbio.stats.distance.dissimilaritymatrix method)": [[623, "skbio.stats.distance.DissimilarityMatrix.__ne__", false]], "__ne__() (skbio.stats.distance.distancematrix method)": [[646, "skbio.stats.distance.DistanceMatrix.__ne__", false]], "__ne__() (skbio.stats.gradient.averagegradientanova method)": [[681, "skbio.stats.gradient.AverageGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.categoryresults method)": [[692, "skbio.stats.gradient.CategoryResults.__ne__", false]], "__ne__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[703, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.gradientanova method)": [[714, "skbio.stats.gradient.GradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.gradientanovaresults method)": [[725, "skbio.stats.gradient.GradientANOVAResults.__ne__", false]], "__ne__() (skbio.stats.gradient.groupresults method)": [[736, "skbio.stats.gradient.GroupResults.__ne__", false]], "__ne__() (skbio.stats.gradient.trajectorygradientanova method)": [[747, "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[758, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.ordination.ordinationresults method)": [[771, "skbio.stats.ordination.OrdinationResults.__ne__", false]], "__ne__() (skbio.table.table method)": [[802, "skbio.table.Table.__ne__", false]], "__ne__() (skbio.tree.treenode method)": [[874, "skbio.tree.TreeNode.__ne__", false]], "__ne__() (skbio.util.classproperty method)": [[957, "skbio.util.classproperty.__ne__", false]], "__ne__() (skbio.workflow.method method)": [[988, "skbio.workflow.method.__ne__", false]], "__ne__() (skbio.workflow.requires method)": [[999, "skbio.workflow.requires.__ne__", false]], "__ne__() (skbio.workflow.workflow method)": [[976, "skbio.workflow.Workflow.__ne__", false]], "__reversed__() (skbio.alignment.tabularmsa method)": [[44, "skbio.alignment.TabularMSA.__reversed__", false]], "__reversed__() (skbio.sequence.dna method)": [[304, "skbio.sequence.DNA.__reversed__", false]], "__reversed__() (skbio.sequence.grammaredsequence method)": [[375, "skbio.sequence.GrammaredSequence.__reversed__", false]], "__reversed__() (skbio.sequence.protein method)": [[426, "skbio.sequence.Protein.__reversed__", false]], "__reversed__() (skbio.sequence.rna method)": [[479, "skbio.sequence.RNA.__reversed__", false]], "__reversed__() (skbio.sequence.sequence method)": [[538, "skbio.sequence.Sequence.__reversed__", false]], "__set__() (skbio.util.classproperty method)": [[958, "skbio.util.classproperty.__set__", false]], "__set_name__() (skbio.util.classproperty method)": [[959, "skbio.util.classproperty.__set_name__", false]], "__setstate__() (skbio.alignment.alignmentstructure method)": [[13, "skbio.alignment.AlignmentStructure.__setstate__", false]], "__setstate__() (skbio.alignment.stripedsmithwaterman method)": [[27, "skbio.alignment.StripedSmithWaterman.__setstate__", false]], "__str__() (skbio.alignment.alignmentstructure method)": [[14, "skbio.alignment.AlignmentStructure.__str__", false]], "__str__() (skbio.alignment.stripedsmithwaterman method)": [[28, "skbio.alignment.StripedSmithWaterman.__str__", false]], "__str__() (skbio.alignment.tabularmsa method)": [[45, "skbio.alignment.TabularMSA.__str__", false]], "__str__() (skbio.embedding.proteinembedding method)": [[122, "skbio.embedding.ProteinEmbedding.__str__", false]], "__str__() (skbio.io.registry.format method)": [[154, "skbio.io.registry.Format.__str__", false]], "__str__() (skbio.io.registry.ioregistry method)": [[167, "skbio.io.registry.IORegistry.__str__", false]], "__str__() (skbio.metadata.categoricalmetadatacolumn method)": [[195, "skbio.metadata.CategoricalMetadataColumn.__str__", false]], "__str__() (skbio.metadata.interval method)": [[213, "skbio.metadata.Interval.__str__", false]], "__str__() (skbio.metadata.intervalmetadata method)": [[225, "skbio.metadata.IntervalMetadata.__str__", false]], "__str__() (skbio.metadata.metadatacolumn method)": [[242, "skbio.metadata.MetadataColumn.__str__", false]], "__str__() (skbio.metadata.numericmetadatacolumn method)": [[260, "skbio.metadata.NumericMetadataColumn.__str__", false]], "__str__() (skbio.metadata.samplemetadata method)": [[278, "skbio.metadata.SampleMetadata.__str__", false]], "__str__() (skbio.sequence.dna method)": [[305, "skbio.sequence.DNA.__str__", false]], "__str__() (skbio.sequence.geneticcode method)": [[356, "skbio.sequence.GeneticCode.__str__", false]], "__str__() (skbio.sequence.grammaredsequence method)": [[376, "skbio.sequence.GrammaredSequence.__str__", false]], "__str__() (skbio.sequence.protein method)": [[427, "skbio.sequence.Protein.__str__", false]], "__str__() (skbio.sequence.rna method)": [[480, "skbio.sequence.RNA.__str__", false]], "__str__() (skbio.sequence.sequence method)": [[539, "skbio.sequence.Sequence.__str__", false]], "__str__() (skbio.sequence.substitutionmatrix method)": [[571, "skbio.sequence.SubstitutionMatrix.__str__", false]], "__str__() (skbio.stats.distance.dissimilaritymatrix method)": [[624, "skbio.stats.distance.DissimilarityMatrix.__str__", false]], "__str__() (skbio.stats.distance.distancematrix method)": [[647, "skbio.stats.distance.DistanceMatrix.__str__", false]], "__str__() (skbio.stats.gradient.averagegradientanova method)": [[682, "skbio.stats.gradient.AverageGradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.categoryresults method)": [[693, "skbio.stats.gradient.CategoryResults.__str__", false]], "__str__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[704, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.gradientanova method)": [[715, "skbio.stats.gradient.GradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.gradientanovaresults method)": [[726, "skbio.stats.gradient.GradientANOVAResults.__str__", false]], "__str__() (skbio.stats.gradient.groupresults method)": [[737, "skbio.stats.gradient.GroupResults.__str__", false]], "__str__() (skbio.stats.gradient.trajectorygradientanova method)": [[748, "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[759, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", false]], "__str__() (skbio.stats.ordination.ordinationresults method)": [[772, "skbio.stats.ordination.OrdinationResults.__str__", false]], "__str__() (skbio.table.table method)": [[803, "skbio.table.Table.__str__", false]], "__str__() (skbio.tree.treenode method)": [[875, "skbio.tree.TreeNode.__str__", false]], "__str__() (skbio.util.classproperty method)": [[960, "skbio.util.classproperty.__str__", false]], "__str__() (skbio.workflow.method method)": [[989, "skbio.workflow.method.__str__", false]], "__str__() (skbio.workflow.requires method)": [[1000, "skbio.workflow.requires.__str__", false]], "__str__() (skbio.workflow.workflow method)": [[977, "skbio.workflow.Workflow.__str__", false]], "accumulate_to_ancestor() (skbio.tree.treenode method)": [[876, "skbio.tree.TreeNode.accumulate_to_ancestor", false]], "ace() (in module skbio.diversity.alpha)": [[70, "skbio.diversity.alpha.ace", false]], "add() (skbio.metadata.intervalmetadata method)": [[226, "skbio.metadata.IntervalMetadata.add", false]], "add_format() (skbio.io.registry.ioregistry method)": [[168, "skbio.io.registry.IORegistry.add_format", false]], "add_group_metadata() (skbio.table.table method)": [[804, "skbio.table.Table.add_group_metadata", false]], "add_metadata() (skbio.table.table method)": [[805, "skbio.table.Table.add_metadata", false]], "align_to() (skbio.table.table method)": [[806, "skbio.table.Table.align_to", false]], "align_to_dataframe() (skbio.table.table method)": [[807, "skbio.table.Table.align_to_dataframe", false]], "align_tree() (skbio.table.table method)": [[808, "skbio.table.Table.align_tree", false]], "alignmentstructure (class in skbio.alignment)": [[3, "skbio.alignment.AlignmentStructure", false]], "alpha_diversity() (in module skbio.diversity)": [[104, "skbio.diversity.alpha_diversity", false]], "alr() (in module skbio.stats.composition)": [[593, "skbio.stats.composition.alr", false]], "alr_inv() (in module skbio.stats.composition)": [[594, "skbio.stats.composition.alr_inv", false]], "ancestors() (skbio.tree.treenode method)": [[877, "skbio.tree.TreeNode.ancestors", false]], "ancom() (in module skbio.stats.composition)": [[595, "skbio.stats.composition.ancom", false]], "anosim() (in module skbio.stats.distance)": [[663, "skbio.stats.distance.anosim", false]], "append() (skbio.alignment.tabularmsa method)": [[46, "skbio.alignment.TabularMSA.append", false]], "append() (skbio.tree.treenode method)": [[878, "skbio.tree.TreeNode.append", false]], "ascii_art() (skbio.tree.treenode method)": [[879, "skbio.tree.TreeNode.ascii_art", false]], "assert_data_frame_almost_equal() (in module skbio.util)": [[944, "skbio.util.assert_data_frame_almost_equal", false]], "assert_ordination_results_equal() (in module skbio.util)": [[945, "skbio.util.assert_ordination_results_equal", false]], "assign_ids() (skbio.tree.treenode method)": [[880, "skbio.tree.TreeNode.assign_ids", false]], "assign_supports() (skbio.tree.treenode method)": [[881, "skbio.tree.TreeNode.assign_supports", false]], "averagegradientanova (class in skbio.stats.gradient)": [[673, "skbio.stats.gradient.AverageGradientANOVA", false]], "berger_parker_d() (in module skbio.diversity.alpha)": [[71, "skbio.diversity.alpha.berger_parker_d", false]], "beta_diversity() (in module skbio.diversity)": [[108, "skbio.diversity.beta_diversity", false]], "between() (skbio.sequence.substitutionmatrix method)": [[572, "skbio.sequence.SubstitutionMatrix.between", false]], "between() (skbio.stats.distance.dissimilaritymatrix method)": [[625, "skbio.stats.distance.DissimilarityMatrix.between", false]], "between() (skbio.stats.distance.distancematrix method)": [[648, "skbio.stats.distance.DistanceMatrix.between", false]], "bifurcate() (skbio.tree.treenode method)": [[882, "skbio.tree.TreeNode.bifurcate", false]], "bioenv() (in module skbio.stats.distance)": [[664, "skbio.stats.distance.bioenv", false]], "block_beta_diversity() (in module skbio.diversity)": [[109, "skbio.diversity.block_beta_diversity", false]], "brillouin_d() (in module skbio.diversity.alpha)": [[72, "skbio.diversity.alpha.brillouin_d", false]], "by_name() (skbio.sequence.substitutionmatrix class method)": [[573, "skbio.sequence.SubstitutionMatrix.by_name", false]], "ca() (in module skbio.stats.ordination)": [[776, "skbio.stats.ordination.ca", false]], "cache_attr() (skbio.tree.treenode method)": [[883, "skbio.tree.TreeNode.cache_attr", false]], "cardinal_to_ordinal() (in module skbio.util)": [[946, "skbio.util.cardinal_to_ordinal", false]], "categoricalmetadatacolumn (class in skbio.metadata)": [[187, "skbio.metadata.CategoricalMetadataColumn", false]], "categoryresults (class in skbio.stats.gradient)": [[684, "skbio.stats.gradient.CategoryResults", false]], "cca() (in module skbio.stats.ordination)": [[777, "skbio.stats.ordination.cca", false]], "centralize() (in module skbio.stats.composition)": [[596, "skbio.stats.composition.centralize", false]], "chao1() (in module skbio.diversity.alpha)": [[73, "skbio.diversity.alpha.chao1", false]], "chao1_ci() (in module skbio.diversity.alpha)": [[74, "skbio.diversity.alpha.chao1_ci", false]], "classproperty (class in skbio.util)": [[947, "skbio.util.classproperty", false]], "closure() (in module skbio.stats.composition)": [[597, "skbio.stats.composition.closure", false]], "clr() (in module skbio.stats.composition)": [[598, "skbio.stats.composition.clr", false]], "clr_inv() (in module skbio.stats.composition)": [[599, "skbio.stats.composition.clr_inv", false]], "collapse() (skbio.table.table method)": [[809, "skbio.table.Table.collapse", false]], "compare_rfd() (skbio.tree.treenode method)": [[884, "skbio.tree.TreeNode.compare_rfd", false]], "compare_subsets() (skbio.tree.treenode method)": [[885, "skbio.tree.TreeNode.compare_subsets", false]], "compare_tip_distances() (skbio.tree.treenode method)": [[886, "skbio.tree.TreeNode.compare_tip_distances", false]], "complement() (skbio.sequence.dna method)": [[306, "skbio.sequence.DNA.complement", false]], "complement() (skbio.sequence.rna method)": [[481, "skbio.sequence.RNA.complement", false]], "concat() (skbio.metadata.intervalmetadata class method)": [[227, "skbio.metadata.IntervalMetadata.concat", false]], "concat() (skbio.sequence.dna class method)": [[307, "skbio.sequence.DNA.concat", false]], "concat() (skbio.sequence.grammaredsequence class method)": [[377, "skbio.sequence.GrammaredSequence.concat", false]], "concat() (skbio.sequence.protein class method)": [[428, "skbio.sequence.Protein.concat", false]], "concat() (skbio.sequence.rna class method)": [[482, "skbio.sequence.RNA.concat", false]], "concat() (skbio.sequence.sequence class method)": [[540, "skbio.sequence.Sequence.concat", false]], "concat() (skbio.table.table method)": [[810, "skbio.table.Table.concat", false]], "condensed_form() (skbio.stats.distance.distancematrix method)": [[649, "skbio.stats.distance.DistanceMatrix.condensed_form", false]], "confidence_bound() (in module skbio.stats.power)": [[788, "skbio.stats.power.confidence_bound", false]], "consensus() (skbio.alignment.tabularmsa method)": [[47, "skbio.alignment.TabularMSA.consensus", false]], "conservation() (skbio.alignment.tabularmsa method)": [[48, "skbio.alignment.TabularMSA.conservation", false]], "copy() (skbio.sequence.substitutionmatrix method)": [[574, "skbio.sequence.SubstitutionMatrix.copy", false]], "copy() (skbio.stats.distance.dissimilaritymatrix method)": [[626, "skbio.stats.distance.DissimilarityMatrix.copy", false]], "copy() (skbio.stats.distance.distancematrix method)": [[650, "skbio.stats.distance.DistanceMatrix.copy", false]], "copy() (skbio.table.table method)": [[811, "skbio.table.Table.copy", false]], "copy() (skbio.tree.treenode method)": [[887, "skbio.tree.TreeNode.copy", false]], "corr() (in module skbio.stats.ordination)": [[778, "skbio.stats.ordination.corr", false]], "count() (skbio.sequence.dna method)": [[308, "skbio.sequence.DNA.count", false]], "count() (skbio.sequence.grammaredsequence method)": [[378, "skbio.sequence.GrammaredSequence.count", false]], "count() (skbio.sequence.protein method)": [[429, "skbio.sequence.Protein.count", false]], "count() (skbio.sequence.rna method)": [[483, "skbio.sequence.RNA.count", false]], "count() (skbio.sequence.sequence method)": [[541, "skbio.sequence.Sequence.count", false]], "count() (skbio.tree.treenode method)": [[888, "skbio.tree.TreeNode.count", false]], "create_caches() (skbio.tree.treenode method)": [[889, "skbio.tree.TreeNode.create_caches", false]], "create_format() (in module skbio.io.registry)": [[179, "skbio.io.registry.create_format", false]], "create_format() (skbio.io.registry.ioregistry method)": [[169, "skbio.io.registry.IORegistry.create_format", false]], "data() (skbio.table.table method)": [[812, "skbio.table.Table.data", false]], "deepcopy() (skbio.tree.treenode method)": [[890, "skbio.tree.TreeNode.deepcopy", false]], "definites() (skbio.sequence.dna method)": [[309, "skbio.sequence.DNA.definites", false]], "definites() (skbio.sequence.grammaredsequence method)": [[379, "skbio.sequence.GrammaredSequence.definites", false]], "definites() (skbio.sequence.protein method)": [[430, "skbio.sequence.Protein.definites", false]], "definites() (skbio.sequence.rna method)": [[484, "skbio.sequence.RNA.definites", false]], "degap() (skbio.sequence.dna method)": [[310, "skbio.sequence.DNA.degap", false]], "degap() (skbio.sequence.grammaredsequence method)": [[380, "skbio.sequence.GrammaredSequence.degap", false]], "degap() (skbio.sequence.protein method)": [[431, "skbio.sequence.Protein.degap", false]], "degap() (skbio.sequence.rna method)": [[485, "skbio.sequence.RNA.degap", false]], "degenerates() (skbio.sequence.dna method)": [[311, "skbio.sequence.DNA.degenerates", false]], "degenerates() (skbio.sequence.grammaredsequence method)": [[381, "skbio.sequence.GrammaredSequence.degenerates", false]], "degenerates() (skbio.sequence.protein method)": [[432, "skbio.sequence.Protein.degenerates", false]], "degenerates() (skbio.sequence.rna method)": [[486, "skbio.sequence.RNA.degenerates", false]], "del_metadata() (skbio.table.table method)": [[813, "skbio.table.Table.del_metadata", false]], "deleter() (skbio.util.classproperty method)": [[961, "skbio.util.classproperty.deleter", false]], "delimited_self() (skbio.table.table method)": [[814, "skbio.table.Table.delimited_self", false]], "descending_branch_length() (skbio.tree.treenode method)": [[891, "skbio.tree.TreeNode.descending_branch_length", false]], "descriptive_equality() (skbio.table.table method)": [[815, "skbio.table.Table.descriptive_equality", false]], "dirmult_ttest() (in module skbio.stats.composition)": [[600, "skbio.stats.composition.dirmult_ttest", false]], "dissimilaritymatrix (class in skbio.stats.distance)": [[614, "skbio.stats.distance.DissimilarityMatrix", false]], "distance() (skbio.sequence.dna method)": [[312, "skbio.sequence.DNA.distance", false]], "distance() (skbio.sequence.grammaredsequence method)": [[382, "skbio.sequence.GrammaredSequence.distance", false]], "distance() (skbio.sequence.protein method)": [[433, "skbio.sequence.Protein.distance", false]], "distance() (skbio.sequence.rna method)": [[487, "skbio.sequence.RNA.distance", false]], "distance() (skbio.sequence.sequence method)": [[542, "skbio.sequence.Sequence.distance", false]], "distance() (skbio.tree.treenode method)": [[892, "skbio.tree.TreeNode.distance", false]], "distancematrix (class in skbio.stats.distance)": [[637, "skbio.stats.distance.DistanceMatrix", false]], "dna (class in skbio.sequence)": [[289, "skbio.sequence.DNA", false]], "dominance() (in module skbio.diversity.alpha)": [[75, "skbio.diversity.alpha.dominance", false]], "doubles() (in module skbio.diversity.alpha)": [[76, "skbio.diversity.alpha.doubles", false]], "drop() (skbio.metadata.interval method)": [[214, "skbio.metadata.Interval.drop", false]], "drop() (skbio.metadata.intervalmetadata method)": [[228, "skbio.metadata.IntervalMetadata.drop", false]], "drop_missing_values() (skbio.metadata.categoricalmetadatacolumn method)": [[196, "skbio.metadata.CategoricalMetadataColumn.drop_missing_values", false]], "drop_missing_values() (skbio.metadata.metadatacolumn method)": [[243, "skbio.metadata.MetadataColumn.drop_missing_values", false]], "drop_missing_values() (skbio.metadata.numericmetadatacolumn method)": [[261, "skbio.metadata.NumericMetadataColumn.drop_missing_values", false]], "e_matrix() (in module skbio.stats.ordination)": [[779, "skbio.stats.ordination.e_matrix", false]], "efficiencywarning": [[942, "skbio.util.EfficiencyWarning", false]], "enspie() (in module skbio.diversity.alpha)": [[77, "skbio.diversity.alpha.enspie", false]], "esty_ci() (in module skbio.diversity.alpha)": [[78, "skbio.diversity.alpha.esty_ci", false]], "example_table (in module skbio.table)": [[860, "skbio.table.example_table", false]], "exists() (skbio.table.table method)": [[816, "skbio.table.Table.exists", false]], "expand_degenerates() (skbio.sequence.dna method)": [[313, "skbio.sequence.DNA.expand_degenerates", false]], "expand_degenerates() (skbio.sequence.grammaredsequence method)": [[383, "skbio.sequence.GrammaredSequence.expand_degenerates", false]], "expand_degenerates() (skbio.sequence.protein method)": [[434, "skbio.sequence.Protein.expand_degenerates", false]], "expand_degenerates() (skbio.sequence.rna method)": [[488, "skbio.sequence.RNA.expand_degenerates", false]], "extend() (skbio.alignment.tabularmsa method)": [[49, "skbio.alignment.TabularMSA.extend", false]], "extend() (skbio.tree.treenode method)": [[893, "skbio.tree.TreeNode.extend", false]], "f_matrix() (in module skbio.stats.ordination)": [[780, "skbio.stats.ordination.f_matrix", false]], "faith_pd() (in module skbio.diversity.alpha)": [[79, "skbio.diversity.alpha.faith_pd", false]], "filter() (skbio.sequence.substitutionmatrix method)": [[575, "skbio.sequence.SubstitutionMatrix.filter", false]], "filter() (skbio.stats.distance.dissimilaritymatrix method)": [[627, "skbio.stats.distance.DissimilarityMatrix.filter", false]], "filter() (skbio.stats.distance.distancematrix method)": [[651, "skbio.stats.distance.DistanceMatrix.filter", false]], "filter() (skbio.table.table method)": [[817, "skbio.table.Table.filter", false]], "filter_columns() (skbio.metadata.samplemetadata method)": [[279, "skbio.metadata.SampleMetadata.filter_columns", false]], "filter_ids() (skbio.metadata.categoricalmetadatacolumn method)": [[197, "skbio.metadata.CategoricalMetadataColumn.filter_ids", false]], "filter_ids() (skbio.metadata.metadatacolumn method)": [[244, "skbio.metadata.MetadataColumn.filter_ids", false]], "filter_ids() (skbio.metadata.numericmetadatacolumn method)": [[262, "skbio.metadata.NumericMetadataColumn.filter_ids", false]], "filter_ids() (skbio.metadata.samplemetadata method)": [[280, "skbio.metadata.SampleMetadata.filter_ids", false]], "find() (skbio.tree.treenode method)": [[894, "skbio.tree.TreeNode.find", false]], "find_all() (skbio.tree.treenode method)": [[895, "skbio.tree.TreeNode.find_all", false]], "find_by_func() (skbio.tree.treenode method)": [[896, "skbio.tree.TreeNode.find_by_func", false]], "find_by_id() (skbio.tree.treenode method)": [[897, "skbio.tree.TreeNode.find_by_id", false]], "find_duplicates() (in module skbio.util)": [[964, "skbio.util.find_duplicates", false]], "find_motifs() (skbio.sequence.dna method)": [[314, "skbio.sequence.DNA.find_motifs", false]], "find_motifs() (skbio.sequence.grammaredsequence method)": [[384, "skbio.sequence.GrammaredSequence.find_motifs", false]], "find_motifs() (skbio.sequence.protein method)": [[435, "skbio.sequence.Protein.find_motifs", false]], "find_motifs() (skbio.sequence.rna method)": [[489, "skbio.sequence.RNA.find_motifs", false]], "find_with_regex() (skbio.sequence.dna method)": [[315, "skbio.sequence.DNA.find_with_regex", false]], "find_with_regex() (skbio.sequence.grammaredsequence method)": [[385, "skbio.sequence.GrammaredSequence.find_with_regex", false]], "find_with_regex() (skbio.sequence.protein method)": [[436, "skbio.sequence.Protein.find_with_regex", false]], "find_with_regex() (skbio.sequence.rna method)": [[490, "skbio.sequence.RNA.find_with_regex", false]], "find_with_regex() (skbio.sequence.sequence method)": [[543, "skbio.sequence.Sequence.find_with_regex", false]], "firstdifferencegradientanova (class in skbio.stats.gradient)": [[695, "skbio.stats.gradient.FirstDifferenceGradientANOVA", false]], "fisher_alpha() (in module skbio.diversity.alpha)": [[80, "skbio.diversity.alpha.fisher_alpha", false]], "format (class in skbio.io.registry)": [[145, "skbio.io.registry.Format", false]], "frequencies() (skbio.sequence.dna method)": [[316, "skbio.sequence.DNA.frequencies", false]], "frequencies() (skbio.sequence.grammaredsequence method)": [[386, "skbio.sequence.GrammaredSequence.frequencies", false]], "frequencies() (skbio.sequence.protein method)": [[437, "skbio.sequence.Protein.frequencies", false]], "frequencies() (skbio.sequence.rna method)": [[491, "skbio.sequence.RNA.frequencies", false]], "frequencies() (skbio.sequence.sequence method)": [[544, "skbio.sequence.Sequence.frequencies", false]], "from_adjacency() (skbio.table.table static method)": [[818, "skbio.table.Table.from_adjacency", false]], "from_dict() (skbio.alignment.tabularmsa class method)": [[50, "skbio.alignment.TabularMSA.from_dict", false]], "from_dict() (skbio.sequence.substitutionmatrix class method)": [[576, "skbio.sequence.SubstitutionMatrix.from_dict", false]], "from_hdf5() (skbio.table.table class method)": [[819, "skbio.table.Table.from_hdf5", false]], "from_iterable() (skbio.sequence.substitutionmatrix class method)": [[577, "skbio.sequence.SubstitutionMatrix.from_iterable", false]], "from_iterable() (skbio.stats.distance.dissimilaritymatrix class method)": [[628, "skbio.stats.distance.DissimilarityMatrix.from_iterable", false]], "from_iterable() (skbio.stats.distance.distancematrix class method)": [[652, "skbio.stats.distance.DistanceMatrix.from_iterable", false]], "from_json() (skbio.table.table class method)": [[820, "skbio.table.Table.from_json", false]], "from_linkage_matrix() (skbio.tree.treenode class method)": [[898, "skbio.tree.TreeNode.from_linkage_matrix", false]], "from_ncbi() (skbio.sequence.geneticcode class method)": [[357, "skbio.sequence.GeneticCode.from_ncbi", false]], "from_taxdump() (skbio.tree.treenode class method)": [[899, "skbio.tree.TreeNode.from_taxdump", false]], "from_taxonomy() (skbio.tree.treenode class method)": [[900, "skbio.tree.TreeNode.from_taxonomy", false]], "from_tsv() (skbio.table.table static method)": [[821, "skbio.table.Table.from_tsv", false]], "gap_frequencies() (skbio.alignment.tabularmsa method)": [[51, "skbio.alignment.TabularMSA.gap_frequencies", false]], "gaps() (skbio.sequence.dna method)": [[317, "skbio.sequence.DNA.gaps", false]], "gaps() (skbio.sequence.grammaredsequence method)": [[387, "skbio.sequence.GrammaredSequence.gaps", false]], "gaps() (skbio.sequence.protein method)": [[438, "skbio.sequence.Protein.gaps", false]], "gaps() (skbio.sequence.rna method)": [[492, "skbio.sequence.RNA.gaps", false]], "gc_content() (skbio.sequence.dna method)": [[318, "skbio.sequence.DNA.gc_content", false]], "gc_content() (skbio.sequence.rna method)": [[493, "skbio.sequence.RNA.gc_content", false]], "gc_frequency() (skbio.sequence.dna method)": [[319, "skbio.sequence.DNA.gc_frequency", false]], "gc_frequency() (skbio.sequence.rna method)": [[494, "skbio.sequence.RNA.gc_frequency", false]], "geneticcode (class in skbio.sequence)": [[348, "skbio.sequence.GeneticCode", false]], "get_alpha_diversity_metrics() (in module skbio.diversity)": [[110, "skbio.diversity.get_alpha_diversity_metrics", false]], "get_beta_diversity_metrics() (in module skbio.diversity)": [[111, "skbio.diversity.get_beta_diversity_metrics", false]], "get_column() (skbio.metadata.samplemetadata method)": [[281, "skbio.metadata.SampleMetadata.get_column", false]], "get_data_path() (in module skbio.util)": [[965, "skbio.util.get_data_path", false]], "get_ids() (skbio.metadata.categoricalmetadatacolumn method)": [[198, "skbio.metadata.CategoricalMetadataColumn.get_ids", false]], "get_ids() (skbio.metadata.metadatacolumn method)": [[245, "skbio.metadata.MetadataColumn.get_ids", false]], "get_ids() (skbio.metadata.numericmetadatacolumn method)": [[263, "skbio.metadata.NumericMetadataColumn.get_ids", false]], "get_ids() (skbio.metadata.samplemetadata method)": [[282, "skbio.metadata.SampleMetadata.get_ids", false]], "get_max_distance() (skbio.tree.treenode method)": [[901, "skbio.tree.TreeNode.get_max_distance", false]], "get_missing() (skbio.metadata.categoricalmetadatacolumn method)": [[199, "skbio.metadata.CategoricalMetadataColumn.get_missing", false]], "get_missing() (skbio.metadata.metadatacolumn method)": [[246, "skbio.metadata.MetadataColumn.get_missing", false]], "get_missing() (skbio.metadata.numericmetadatacolumn method)": [[264, "skbio.metadata.NumericMetadataColumn.get_missing", false]], "get_names() (skbio.sequence.substitutionmatrix class method)": [[578, "skbio.sequence.SubstitutionMatrix.get_names", false]], "get_reader() (skbio.io.registry.ioregistry method)": [[170, "skbio.io.registry.IORegistry.get_reader", false]], "get_sniffer() (skbio.io.registry.ioregistry method)": [[171, "skbio.io.registry.IORegistry.get_sniffer", false]], "get_table_density() (skbio.table.table method)": [[822, "skbio.table.Table.get_table_density", false]], "get_trajectories() (skbio.stats.gradient.averagegradientanova method)": [[683, "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.firstdifferencegradientanova method)": [[705, "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.gradientanova method)": [[716, "skbio.stats.gradient.GradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.trajectorygradientanova method)": [[749, "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.windowdifferencegradientanova method)": [[760, "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", false]], "get_value() (skbio.metadata.categoricalmetadatacolumn method)": [[200, "skbio.metadata.CategoricalMetadataColumn.get_value", false]], "get_value() (skbio.metadata.metadatacolumn method)": [[247, "skbio.metadata.MetadataColumn.get_value", false]], "get_value() (skbio.metadata.numericmetadatacolumn method)": [[265, "skbio.metadata.NumericMetadataColumn.get_value", false]], "get_value_by_ids() (skbio.table.table method)": [[823, "skbio.table.Table.get_value_by_ids", false]], "get_writer() (skbio.io.registry.ioregistry method)": [[172, "skbio.io.registry.IORegistry.get_writer", false]], "getter() (skbio.util.classproperty method)": [[962, "skbio.util.classproperty.getter", false]], "gini_index() (in module skbio.diversity.alpha)": [[81, "skbio.diversity.alpha.gini_index", false]], "global_pairwise_align() (in module skbio.alignment)": [[61, "skbio.alignment.global_pairwise_align", false]], "global_pairwise_align_nucleotide() (in module skbio.alignment)": [[62, "skbio.alignment.global_pairwise_align_nucleotide", false]], "global_pairwise_align_protein() (in module skbio.alignment)": [[63, "skbio.alignment.global_pairwise_align_protein", false]], "goods_coverage() (in module skbio.diversity.alpha)": [[82, "skbio.diversity.alpha.goods_coverage", false]], "gradientanova (class in skbio.stats.gradient)": [[706, "skbio.stats.gradient.GradientANOVA", false]], "gradientanovaresults (class in skbio.stats.gradient)": [[717, "skbio.stats.gradient.GradientANOVAResults", false]], "grammaredsequence (class in skbio.sequence)": [[360, "skbio.sequence.GrammaredSequence", false]], "group_metadata() (skbio.table.table method)": [[824, "skbio.table.Table.group_metadata", false]], "groupresults (class in skbio.stats.gradient)": [[728, "skbio.stats.gradient.GroupResults", false]], "hamming() (in module skbio.sequence.distance)": [[590, "skbio.sequence.distance.hamming", false]], "has_children() (skbio.tree.treenode method)": [[902, "skbio.tree.TreeNode.has_children", false]], "has_definites() (skbio.sequence.dna method)": [[320, "skbio.sequence.DNA.has_definites", false]], "has_definites() (skbio.sequence.grammaredsequence method)": [[388, "skbio.sequence.GrammaredSequence.has_definites", false]], "has_definites() (skbio.sequence.protein method)": [[439, "skbio.sequence.Protein.has_definites", false]], "has_definites() (skbio.sequence.rna method)": [[495, "skbio.sequence.RNA.has_definites", false]], "has_degenerates() (skbio.sequence.dna method)": [[321, "skbio.sequence.DNA.has_degenerates", false]], "has_degenerates() (skbio.sequence.grammaredsequence method)": [[389, "skbio.sequence.GrammaredSequence.has_degenerates", false]], "has_degenerates() (skbio.sequence.protein method)": [[440, "skbio.sequence.Protein.has_degenerates", false]], "has_degenerates() (skbio.sequence.rna method)": [[496, "skbio.sequence.RNA.has_degenerates", false]], "has_gaps() (skbio.sequence.dna method)": [[322, "skbio.sequence.DNA.has_gaps", false]], "has_gaps() (skbio.sequence.grammaredsequence method)": [[390, "skbio.sequence.GrammaredSequence.has_gaps", false]], "has_gaps() (skbio.sequence.protein method)": [[441, "skbio.sequence.Protein.has_gaps", false]], "has_gaps() (skbio.sequence.rna method)": [[497, "skbio.sequence.RNA.has_gaps", false]], "has_interval_metadata() (skbio.sequence.dna method)": [[323, "skbio.sequence.DNA.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.grammaredsequence method)": [[391, "skbio.sequence.GrammaredSequence.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.protein method)": [[442, "skbio.sequence.Protein.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.rna method)": [[498, "skbio.sequence.RNA.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.sequence method)": [[545, "skbio.sequence.Sequence.has_interval_metadata", false]], "has_metadata() (skbio.alignment.tabularmsa method)": [[52, "skbio.alignment.TabularMSA.has_metadata", false]], "has_metadata() (skbio.sequence.dna method)": [[324, "skbio.sequence.DNA.has_metadata", false]], "has_metadata() (skbio.sequence.grammaredsequence method)": [[392, "skbio.sequence.GrammaredSequence.has_metadata", false]], "has_metadata() (skbio.sequence.protein method)": [[443, "skbio.sequence.Protein.has_metadata", false]], "has_metadata() (skbio.sequence.rna method)": [[499, "skbio.sequence.RNA.has_metadata", false]], "has_metadata() (skbio.sequence.sequence method)": [[546, "skbio.sequence.Sequence.has_metadata", false]], "has_missing_values() (skbio.metadata.categoricalmetadatacolumn method)": [[201, "skbio.metadata.CategoricalMetadataColumn.has_missing_values", false]], "has_missing_values() (skbio.metadata.metadatacolumn method)": [[248, "skbio.metadata.MetadataColumn.has_missing_values", false]], "has_missing_values() (skbio.metadata.numericmetadatacolumn method)": [[266, "skbio.metadata.NumericMetadataColumn.has_missing_values", false]], "has_nondegenerates() (skbio.sequence.dna method)": [[325, "skbio.sequence.DNA.has_nondegenerates", false]], "has_nondegenerates() (skbio.sequence.grammaredsequence method)": [[393, "skbio.sequence.GrammaredSequence.has_nondegenerates", false]], "has_nondegenerates() (skbio.sequence.protein method)": [[444, "skbio.sequence.Protein.has_nondegenerates", false]], "has_nondegenerates() (skbio.sequence.rna method)": [[500, "skbio.sequence.RNA.has_nondegenerates", false]], "has_positional_metadata() (skbio.alignment.tabularmsa method)": [[53, "skbio.alignment.TabularMSA.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.dna method)": [[326, "skbio.sequence.DNA.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.grammaredsequence method)": [[394, "skbio.sequence.GrammaredSequence.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.protein method)": [[445, "skbio.sequence.Protein.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.rna method)": [[501, "skbio.sequence.RNA.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.sequence method)": [[547, "skbio.sequence.Sequence.has_positional_metadata", false]], "has_stops() (skbio.sequence.protein method)": [[446, "skbio.sequence.Protein.has_stops", false]], "head() (skbio.table.table method)": [[825, "skbio.table.Table.head", false]], "heip_e() (in module skbio.diversity.alpha)": [[83, "skbio.diversity.alpha.heip_e", false]], "hommola_cospeciation() (in module skbio.stats.evolve)": [[671, "skbio.stats.evolve.hommola_cospeciation", false]], "identity() (skbio.sequence.substitutionmatrix class method)": [[579, "skbio.sequence.SubstitutionMatrix.identity", false]], "ids() (skbio.table.table method)": [[826, "skbio.table.Table.ids", false]], "ilr() (in module skbio.stats.composition)": [[601, "skbio.stats.composition.ilr", false]], "ilr_inv() (in module skbio.stats.composition)": [[602, "skbio.stats.composition.ilr_inv", false]], "index() (skbio.sequence.dna method)": [[327, "skbio.sequence.DNA.index", false]], "index() (skbio.sequence.grammaredsequence method)": [[395, "skbio.sequence.GrammaredSequence.index", false]], "index() (skbio.sequence.protein method)": [[447, "skbio.sequence.Protein.index", false]], "index() (skbio.sequence.rna method)": [[502, "skbio.sequence.RNA.index", false]], "index() (skbio.sequence.sequence method)": [[548, "skbio.sequence.Sequence.index", false]], "index() (skbio.sequence.substitutionmatrix method)": [[580, "skbio.sequence.SubstitutionMatrix.index", false]], "index() (skbio.stats.distance.dissimilaritymatrix method)": [[629, "skbio.stats.distance.DissimilarityMatrix.index", false]], "index() (skbio.stats.distance.distancematrix method)": [[653, "skbio.stats.distance.DistanceMatrix.index", false]], "index() (skbio.table.table method)": [[827, "skbio.table.Table.index", false]], "index_tree() (skbio.tree.treenode method)": [[903, "skbio.tree.TreeNode.index_tree", false]], "initialize_state() (skbio.workflow.workflow method)": [[978, "skbio.workflow.Workflow.initialize_state", false]], "inner() (in module skbio.stats.composition)": [[603, "skbio.stats.composition.inner", false]], "interval (class in skbio.metadata)": [[205, "skbio.metadata.Interval", false]], "intervalmetadata (class in skbio.metadata)": [[215, "skbio.metadata.IntervalMetadata", false]], "invalidate_caches() (skbio.tree.treenode method)": [[904, "skbio.tree.TreeNode.invalidate_caches", false]], "ioregistry (class in skbio.io.registry)": [[158, "skbio.io.registry.IORegistry", false]], "is_empty() (skbio.table.table method)": [[828, "skbio.table.Table.is_empty", false]], "is_reverse_complement() (skbio.sequence.dna method)": [[328, "skbio.sequence.DNA.is_reverse_complement", false]], "is_reverse_complement() (skbio.sequence.rna method)": [[503, "skbio.sequence.RNA.is_reverse_complement", false]], "is_root() (skbio.tree.treenode method)": [[905, "skbio.tree.TreeNode.is_root", false]], "is_tip() (skbio.tree.treenode method)": [[906, "skbio.tree.TreeNode.is_tip", false]], "is_zero_based() (skbio.alignment.alignmentstructure method)": [[15, "skbio.alignment.AlignmentStructure.is_zero_based", false]], "isubsample() (in module skbio.stats)": [[761, "skbio.stats.isubsample", false]], "iter() (skbio.table.table method)": [[829, "skbio.table.Table.iter", false]], "iter_contiguous() (skbio.sequence.dna method)": [[329, "skbio.sequence.DNA.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.grammaredsequence method)": [[396, "skbio.sequence.GrammaredSequence.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.protein method)": [[448, "skbio.sequence.Protein.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.rna method)": [[504, "skbio.sequence.RNA.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.sequence method)": [[549, "skbio.sequence.Sequence.iter_contiguous", false]], "iter_data() (skbio.table.table method)": [[830, "skbio.table.Table.iter_data", false]], "iter_kmers() (skbio.sequence.dna method)": [[330, "skbio.sequence.DNA.iter_kmers", false]], "iter_kmers() (skbio.sequence.grammaredsequence method)": [[397, "skbio.sequence.GrammaredSequence.iter_kmers", false]], "iter_kmers() (skbio.sequence.protein method)": [[449, "skbio.sequence.Protein.iter_kmers", false]], "iter_kmers() (skbio.sequence.rna method)": [[505, "skbio.sequence.RNA.iter_kmers", false]], "iter_kmers() (skbio.sequence.sequence method)": [[550, "skbio.sequence.Sequence.iter_kmers", false]], "iter_pairwise() (skbio.table.table method)": [[831, "skbio.table.Table.iter_pairwise", false]], "iter_positions() (skbio.alignment.tabularmsa method)": [[54, "skbio.alignment.TabularMSA.iter_positions", false]], "join() (skbio.alignment.tabularmsa method)": [[55, "skbio.alignment.TabularMSA.join", false]], "kempton_taylor_q() (in module skbio.diversity.alpha)": [[84, "skbio.diversity.alpha.kempton_taylor_q", false]], "kmer_distance() (in module skbio.sequence.distance)": [[591, "skbio.sequence.distance.kmer_distance", false]], "kmer_frequencies() (skbio.sequence.dna method)": [[331, "skbio.sequence.DNA.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.grammaredsequence method)": [[398, "skbio.sequence.GrammaredSequence.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.protein method)": [[450, "skbio.sequence.Protein.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.rna method)": [[506, "skbio.sequence.RNA.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.sequence method)": [[551, "skbio.sequence.Sequence.kmer_frequencies", false]], "lca() (skbio.tree.treenode method)": [[907, "skbio.tree.TreeNode.lca", false]], "length() (skbio.table.table method)": [[832, "skbio.table.Table.length", false]], "levelorder() (skbio.tree.treenode method)": [[908, "skbio.tree.TreeNode.levelorder", false]], "list_read_formats() (skbio.io.registry.ioregistry method)": [[173, "skbio.io.registry.IORegistry.list_read_formats", false]], "list_write_formats() (skbio.io.registry.ioregistry method)": [[174, "skbio.io.registry.IORegistry.list_write_formats", false]], "lladser_ci() (in module skbio.diversity.alpha)": [[85, "skbio.diversity.alpha.lladser_ci", false]], "lladser_pe() (in module skbio.diversity.alpha)": [[86, "skbio.diversity.alpha.lladser_pe", false]], "load() (skbio.metadata.samplemetadata class method)": [[283, "skbio.metadata.SampleMetadata.load", false]], "local_pairwise_align() (in module skbio.alignment)": [[64, "skbio.alignment.local_pairwise_align", false]], "local_pairwise_align_nucleotide() (in module skbio.alignment)": [[65, "skbio.alignment.local_pairwise_align_nucleotide", false]], "local_pairwise_align_protein() (in module skbio.alignment)": [[66, "skbio.alignment.local_pairwise_align_protein", false]], "local_pairwise_align_ssw() (in module skbio.alignment)": [[67, "skbio.alignment.local_pairwise_align_ssw", false]], "lowercase() (skbio.sequence.dna method)": [[332, "skbio.sequence.DNA.lowercase", false]], "lowercase() (skbio.sequence.grammaredsequence method)": [[399, "skbio.sequence.GrammaredSequence.lowercase", false]], "lowercase() (skbio.sequence.protein method)": [[451, "skbio.sequence.Protein.lowercase", false]], "lowercase() (skbio.sequence.rna method)": [[507, "skbio.sequence.RNA.lowercase", false]], "lowercase() (skbio.sequence.sequence method)": [[552, "skbio.sequence.Sequence.lowercase", false]], "lowest_common_ancestor() (skbio.tree.treenode method)": [[909, "skbio.tree.TreeNode.lowest_common_ancestor", false]], "majority_rule() (in module skbio.tree)": [[940, "skbio.tree.majority_rule", false]], "make_identity_substitution_matrix() (in module skbio.alignment)": [[68, "skbio.alignment.make_identity_substitution_matrix", false]], "mantel() (in module skbio.stats.distance)": [[665, "skbio.stats.distance.mantel", false]], "margalef() (in module skbio.diversity.alpha)": [[87, "skbio.diversity.alpha.margalef", false]], "match_frequency() (skbio.sequence.dna method)": [[333, "skbio.sequence.DNA.match_frequency", false]], "match_frequency() (skbio.sequence.grammaredsequence method)": [[400, "skbio.sequence.GrammaredSequence.match_frequency", false]], "match_frequency() (skbio.sequence.protein method)": [[452, "skbio.sequence.Protein.match_frequency", false]], "match_frequency() (skbio.sequence.rna method)": [[508, "skbio.sequence.RNA.match_frequency", false]], "match_frequency() (skbio.sequence.sequence method)": [[553, "skbio.sequence.Sequence.match_frequency", false]], "matches() (skbio.sequence.dna method)": [[334, "skbio.sequence.DNA.matches", false]], "matches() (skbio.sequence.grammaredsequence method)": [[401, "skbio.sequence.GrammaredSequence.matches", false]], "matches() (skbio.sequence.protein method)": [[453, "skbio.sequence.Protein.matches", false]], "matches() (skbio.sequence.rna method)": [[509, "skbio.sequence.RNA.matches", false]], "matches() (skbio.sequence.sequence method)": [[554, "skbio.sequence.Sequence.matches", false]], "max() (skbio.table.table method)": [[833, "skbio.table.Table.max", false]], "mcintosh_d() (in module skbio.diversity.alpha)": [[88, "skbio.diversity.alpha.mcintosh_d", false]], "mcintosh_e() (in module skbio.diversity.alpha)": [[89, "skbio.diversity.alpha.mcintosh_e", false]], "mean_and_std() (in module skbio.stats.ordination)": [[781, "skbio.stats.ordination.mean_and_std", false]], "menhinick() (in module skbio.diversity.alpha)": [[90, "skbio.diversity.alpha.menhinick", false]], "merge() (skbio.metadata.intervalmetadata method)": [[229, "skbio.metadata.IntervalMetadata.merge", false]], "merge() (skbio.metadata.samplemetadata method)": [[284, "skbio.metadata.SampleMetadata.merge", false]], "merge() (skbio.table.table method)": [[834, "skbio.table.Table.merge", false]], "metadata() (skbio.table.table method)": [[835, "skbio.table.Table.metadata", false]], "metadata_to_dataframe() (skbio.table.table method)": [[836, "skbio.table.Table.metadata_to_dataframe", false]], "metadatacolumn (class in skbio.metadata)": [[234, "skbio.metadata.MetadataColumn", false]], "method (class in skbio.workflow)": [[979, "skbio.workflow.method", false]], "michaelis_menten_fit() (in module skbio.diversity.alpha)": [[91, "skbio.diversity.alpha.michaelis_menten_fit", false]], "min() (skbio.table.table method)": [[837, "skbio.table.Table.min", false]], "mismatch_frequency() (skbio.sequence.dna method)": [[335, "skbio.sequence.DNA.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.grammaredsequence method)": [[402, "skbio.sequence.GrammaredSequence.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.protein method)": [[454, "skbio.sequence.Protein.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.rna method)": [[510, "skbio.sequence.RNA.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.sequence method)": [[555, "skbio.sequence.Sequence.mismatch_frequency", false]], "mismatches() (skbio.sequence.dna method)": [[336, "skbio.sequence.DNA.mismatches", false]], "mismatches() (skbio.sequence.grammaredsequence method)": [[403, "skbio.sequence.GrammaredSequence.mismatches", false]], "mismatches() (skbio.sequence.protein method)": [[455, "skbio.sequence.Protein.mismatches", false]], "mismatches() (skbio.sequence.rna method)": [[511, "skbio.sequence.RNA.mismatches", false]], "mismatches() (skbio.sequence.sequence method)": [[556, "skbio.sequence.Sequence.mismatches", false]], "module": [[0, "module-skbio.alignment", false], [1, "module-skbio.diversity", false], [2, "module-skbio.embedding", false], [69, "module-skbio.diversity.alpha", false], [105, "module-skbio.diversity.beta", false], [125, "module-skbio.io.format.binary_dm", false], [126, "module-skbio.io.format.biom", false], [127, "module-skbio.io.format.blast6", false], [128, "module-skbio.io.format.blast7", false], [129, "module-skbio.io.format.clustal", false], [130, "module-skbio.io.format.embedding", false], [131, "module-skbio.io.format.embl", false], [132, "module-skbio.io.format.fasta", false], [133, "module-skbio.io.format.fastq", false], [134, "module-skbio.io.format.genbank", false], [135, "module-skbio.io.format.gff3", false], [136, "module-skbio.io.format.lsmat", false], [137, "module-skbio.io.format.newick", false], [138, "module-skbio.io.format.ordination", false], [139, "module-skbio.io.format.phylip", false], [140, "module-skbio.io.format.qseq", false], [141, "module-skbio.io.format.sample_metadata", false], [142, "module-skbio.io.format.stockholm", false], [143, "module-skbio.io.format.taxdump", false], [144, "module-skbio.io.registry", false], [183, "module-skbio.io.util", false], [589, "module-skbio.sequence.distance", false], [592, "module-skbio.stats.composition", false], [613, "module-skbio.stats.distance", false], [670, "module-skbio.stats.evolve", false], [672, "module-skbio.stats.gradient", false], [762, "module-skbio.stats.ordination", false], [787, "module-skbio.stats.power", false], [1002, "module-skbio.io", false], [1003, "module-skbio.metadata", false], [1004, "module-skbio.sequence", false], [1005, "module-skbio.stats", false], [1006, "module-skbio.table", false], [1007, "module-skbio.tree", false], [1008, "module-skbio.util", false], [1009, "module-skbio.workflow", false]], "monkey_patch() (skbio.io.registry.ioregistry method)": [[175, "skbio.io.registry.IORegistry.monkey_patch", false]], "multi_replace() (in module skbio.stats.composition)": [[604, "skbio.stats.composition.multi_replace", false]], "multiplicative_replacement() (in module skbio.stats.composition)": [[605, "skbio.stats.composition.multiplicative_replacement", false]], "neighbors() (skbio.tree.treenode method)": [[910, "skbio.tree.TreeNode.neighbors", false]], "nj() (in module skbio.tree)": [[941, "skbio.tree.nj", false]], "non_tips() (skbio.tree.treenode method)": [[911, "skbio.tree.TreeNode.non_tips", false]], "nondegenerates() (skbio.sequence.dna method)": [[337, "skbio.sequence.DNA.nondegenerates", false]], "nondegenerates() (skbio.sequence.grammaredsequence method)": [[404, "skbio.sequence.GrammaredSequence.nondegenerates", false]], "nondegenerates() (skbio.sequence.protein method)": [[456, "skbio.sequence.Protein.nondegenerates", false]], "nondegenerates() (skbio.sequence.rna method)": [[512, "skbio.sequence.RNA.nondegenerates", false]], "nonzero() (skbio.table.table method)": [[838, "skbio.table.Table.nonzero", false]], "nonzero_counts() (skbio.table.table method)": [[839, "skbio.table.Table.nonzero_counts", false]], "norm() (skbio.table.table method)": [[840, "skbio.table.Table.norm", false]], "numericmetadatacolumn (class in skbio.metadata)": [[252, "skbio.metadata.NumericMetadataColumn", false]], "observed_features() (in module skbio.diversity.alpha)": [[92, "skbio.diversity.alpha.observed_features", false]], "observed_node_counts() (skbio.tree.treenode method)": [[912, "skbio.tree.TreeNode.observed_node_counts", false]], "observed_otus() (in module skbio.diversity.alpha)": [[93, "skbio.diversity.alpha.observed_otus", false]], "open() (in module skbio.io.util)": [[184, "skbio.io.util.open", false]], "open_file() (in module skbio.io.util)": [[185, "skbio.io.util.open_file", false]], "open_files() (in module skbio.io.util)": [[186, "skbio.io.util.open_files", false]], "ordinationresults (class in skbio.stats.ordination)": [[763, "skbio.stats.ordination.OrdinationResults", false]], "osd() (in module skbio.diversity.alpha)": [[94, "skbio.diversity.alpha.osd", false]], "pa() (skbio.table.table method)": [[841, "skbio.table.Table.pa", false]], "paired_subsamples() (in module skbio.stats.power)": [[789, "skbio.stats.power.paired_subsamples", false]], "pairwise_vlr() (in module skbio.stats.composition)": [[606, "skbio.stats.composition.pairwise_vlr", false]], "partial_beta_diversity() (in module skbio.diversity)": [[112, "skbio.diversity.partial_beta_diversity", false]], "partition() (skbio.table.table method)": [[842, "skbio.table.Table.partition", false]], "pcoa() (in module skbio.stats.ordination)": [[782, "skbio.stats.ordination.pcoa", false]], "pcoa_biplot() (in module skbio.stats.ordination)": [[783, "skbio.stats.ordination.pcoa_biplot", false]], "permanova() (in module skbio.stats.distance)": [[666, "skbio.stats.distance.permanova", false]], "permdisp() (in module skbio.stats.distance)": [[667, "skbio.stats.distance.permdisp", false]], "permute() (skbio.stats.distance.distancematrix method)": [[654, "skbio.stats.distance.DistanceMatrix.permute", false]], "perturb() (in module skbio.stats.composition)": [[607, "skbio.stats.composition.perturb", false]], "perturb_inv() (in module skbio.stats.composition)": [[608, "skbio.stats.composition.perturb_inv", false]], "phydiv() (in module skbio.diversity.alpha)": [[95, "skbio.diversity.alpha.phydiv", false]], "pielou_e() (in module skbio.diversity.alpha)": [[96, "skbio.diversity.alpha.pielou_e", false]], "plot() (skbio.sequence.substitutionmatrix method)": [[581, "skbio.sequence.SubstitutionMatrix.plot", false]], "plot() (skbio.stats.distance.dissimilaritymatrix method)": [[630, "skbio.stats.distance.DissimilarityMatrix.plot", false]], "plot() (skbio.stats.distance.distancematrix method)": [[655, "skbio.stats.distance.DistanceMatrix.plot", false]], "plot() (skbio.stats.ordination.ordinationresults method)": [[773, "skbio.stats.ordination.OrdinationResults.plot", false]], "pop() (skbio.tree.treenode method)": [[913, "skbio.tree.TreeNode.pop", false]], "postorder() (skbio.tree.treenode method)": [[914, "skbio.tree.TreeNode.postorder", false]], "power() (in module skbio.stats.composition)": [[609, "skbio.stats.composition.power", false]], "pre_and_postorder() (skbio.tree.treenode method)": [[915, "skbio.tree.TreeNode.pre_and_postorder", false]], "preorder() (skbio.tree.treenode method)": [[916, "skbio.tree.TreeNode.preorder", false]], "protein (class in skbio.sequence)": [[411, "skbio.sequence.Protein", false]], "proteinembedding (class in skbio.embedding)": [[113, "skbio.embedding.ProteinEmbedding", false]], "prune() (skbio.tree.treenode method)": [[917, "skbio.tree.TreeNode.prune", false]], "pwmantel() (in module skbio.stats.distance)": [[668, "skbio.stats.distance.pwmantel", false]], "query() (skbio.metadata.intervalmetadata method)": [[230, "skbio.metadata.IntervalMetadata.query", false]], "randdm() (in module skbio.stats.distance)": [[669, "skbio.stats.distance.randdm", false]], "rankdata() (skbio.table.table method)": [[843, "skbio.table.Table.rankdata", false]], "rda() (in module skbio.stats.ordination)": [[784, "skbio.stats.ordination.rda", false]], "read() (in module skbio.io.registry)": [[180, "skbio.io.registry.read", false]], "read() (skbio.alignment.tabularmsa class method)": [[56, "skbio.alignment.TabularMSA.read", false]], "read() (skbio.embedding.proteinembedding class method)": [[123, "skbio.embedding.ProteinEmbedding.read", false]], "read() (skbio.io.registry.ioregistry method)": [[176, "skbio.io.registry.IORegistry.read", false]], "read() (skbio.metadata.intervalmetadata class method)": [[231, "skbio.metadata.IntervalMetadata.read", false]], "read() (skbio.metadata.samplemetadata class method)": [[285, "skbio.metadata.SampleMetadata.read", false]], "read() (skbio.sequence.dna class method)": [[338, "skbio.sequence.DNA.read", false]], "read() (skbio.sequence.grammaredsequence class method)": [[405, "skbio.sequence.GrammaredSequence.read", false]], "read() (skbio.sequence.protein class method)": [[457, "skbio.sequence.Protein.read", false]], "read() (skbio.sequence.rna class method)": [[513, "skbio.sequence.RNA.read", false]], "read() (skbio.sequence.sequence class method)": [[557, "skbio.sequence.Sequence.read", false]], "read() (skbio.sequence.substitutionmatrix class method)": [[582, "skbio.sequence.SubstitutionMatrix.read", false]], "read() (skbio.stats.distance.dissimilaritymatrix class method)": [[631, "skbio.stats.distance.DissimilarityMatrix.read", false]], "read() (skbio.stats.distance.distancematrix class method)": [[656, "skbio.stats.distance.DistanceMatrix.read", false]], "read() (skbio.stats.ordination.ordinationresults class method)": [[774, "skbio.stats.ordination.OrdinationResults.read", false]], "read() (skbio.table.table class method)": [[844, "skbio.table.Table.read", false]], "read() (skbio.tree.treenode class method)": [[918, "skbio.tree.TreeNode.read", false]], "reader() (skbio.io.registry.format method)": [[155, "skbio.io.registry.Format.reader", false]], "reassign_index() (skbio.alignment.tabularmsa method)": [[57, "skbio.alignment.TabularMSA.reassign_index", false]], "reduce() (skbio.table.table method)": [[845, "skbio.table.Table.reduce", false]], "redundant_form() (skbio.sequence.substitutionmatrix method)": [[583, "skbio.sequence.SubstitutionMatrix.redundant_form", false]], "redundant_form() (skbio.stats.distance.dissimilaritymatrix method)": [[632, "skbio.stats.distance.DissimilarityMatrix.redundant_form", false]], "redundant_form() (skbio.stats.distance.distancematrix method)": [[657, "skbio.stats.distance.DistanceMatrix.redundant_form", false]], "remove() (skbio.tree.treenode method)": [[919, "skbio.tree.TreeNode.remove", false]], "remove_deleted() (skbio.tree.treenode method)": [[920, "skbio.tree.TreeNode.remove_deleted", false]], "remove_empty() (skbio.table.table method)": [[846, "skbio.table.Table.remove_empty", false]], "replace() (skbio.sequence.dna method)": [[339, "skbio.sequence.DNA.replace", false]], "replace() (skbio.sequence.grammaredsequence method)": [[406, "skbio.sequence.GrammaredSequence.replace", false]], "replace() (skbio.sequence.protein method)": [[458, "skbio.sequence.Protein.replace", false]], "replace() (skbio.sequence.rna method)": [[514, "skbio.sequence.RNA.replace", false]], "replace() (skbio.sequence.sequence method)": [[558, "skbio.sequence.Sequence.replace", false]], "representationwarning": [[943, "skbio.util.RepresentationWarning", false]], "requires (class in skbio.workflow)": [[990, "skbio.workflow.requires", false]], "reverse_complement() (skbio.sequence.dna method)": [[340, "skbio.sequence.DNA.reverse_complement", false]], "reverse_complement() (skbio.sequence.rna method)": [[515, "skbio.sequence.RNA.reverse_complement", false]], "reverse_transcribe() (skbio.sequence.rna method)": [[516, "skbio.sequence.RNA.reverse_transcribe", false]], "rna (class in skbio.sequence)": [[464, "skbio.sequence.RNA", false]], "robbins() (in module skbio.diversity.alpha)": [[97, "skbio.diversity.alpha.robbins", false]], "root() (skbio.tree.treenode method)": [[921, "skbio.tree.TreeNode.root", false]], "root_at() (skbio.tree.treenode method)": [[922, "skbio.tree.TreeNode.root_at", false]], "root_at_midpoint() (skbio.tree.treenode method)": [[923, "skbio.tree.TreeNode.root_at_midpoint", false]], "safe_md5() (in module skbio.util)": [[966, "skbio.util.safe_md5", false]], "samplemetadata (class in skbio.metadata)": [[270, "skbio.metadata.SampleMetadata", false]], "save() (skbio.metadata.categoricalmetadatacolumn method)": [[202, "skbio.metadata.CategoricalMetadataColumn.save", false]], "save() (skbio.metadata.metadatacolumn method)": [[249, "skbio.metadata.MetadataColumn.save", false]], "save() (skbio.metadata.numericmetadatacolumn method)": [[267, "skbio.metadata.NumericMetadataColumn.save", false]], "save() (skbio.metadata.samplemetadata method)": [[286, "skbio.metadata.SampleMetadata.save", false]], "sbp_basis() (in module skbio.stats.composition)": [[610, "skbio.stats.composition.sbp_basis", false]], "scale() (in module skbio.stats.ordination)": [[785, "skbio.stats.ordination.scale", false]], "sequence (class in skbio.sequence)": [[523, "skbio.sequence.Sequence", false]], "set_zero_based() (skbio.alignment.alignmentstructure method)": [[16, "skbio.alignment.AlignmentStructure.set_zero_based", false]], "setter() (skbio.util.classproperty method)": [[963, "skbio.util.classproperty.setter", false]], "shannon() (in module skbio.diversity.alpha)": [[98, "skbio.diversity.alpha.shannon", false]], "shear() (skbio.tree.treenode method)": [[924, "skbio.tree.TreeNode.shear", false]], "shuffle() (skbio.tree.treenode method)": [[925, "skbio.tree.TreeNode.shuffle", false]], "siblings() (skbio.tree.treenode method)": [[926, "skbio.tree.TreeNode.siblings", false]], "simpson() (in module skbio.diversity.alpha)": [[99, "skbio.diversity.alpha.simpson", false]], "simpson_e() (in module skbio.diversity.alpha)": [[100, "skbio.diversity.alpha.simpson_e", false]], "singles() (in module skbio.diversity.alpha)": [[101, "skbio.diversity.alpha.singles", false]], "skbio.alignment": [[0, "module-skbio.alignment", false]], "skbio.diversity": [[1, "module-skbio.diversity", false]], "skbio.diversity.alpha": [[69, "module-skbio.diversity.alpha", false]], "skbio.diversity.beta": [[105, "module-skbio.diversity.beta", false]], "skbio.embedding": [[2, "module-skbio.embedding", false]], "skbio.io": [[1002, "module-skbio.io", false]], "skbio.io.format.binary_dm": [[125, "module-skbio.io.format.binary_dm", false]], "skbio.io.format.biom": [[126, "module-skbio.io.format.biom", false]], "skbio.io.format.blast6": [[127, "module-skbio.io.format.blast6", false]], "skbio.io.format.blast7": [[128, "module-skbio.io.format.blast7", false]], "skbio.io.format.clustal": [[129, "module-skbio.io.format.clustal", false]], "skbio.io.format.embedding": [[130, "module-skbio.io.format.embedding", false]], "skbio.io.format.embl": [[131, "module-skbio.io.format.embl", false]], "skbio.io.format.fasta": [[132, "module-skbio.io.format.fasta", false]], "skbio.io.format.fastq": [[133, "module-skbio.io.format.fastq", false]], "skbio.io.format.genbank": [[134, "module-skbio.io.format.genbank", false]], "skbio.io.format.gff3": [[135, "module-skbio.io.format.gff3", false]], "skbio.io.format.lsmat": [[136, "module-skbio.io.format.lsmat", false]], "skbio.io.format.newick": [[137, "module-skbio.io.format.newick", false]], "skbio.io.format.ordination": [[138, "module-skbio.io.format.ordination", false]], "skbio.io.format.phylip": [[139, "module-skbio.io.format.phylip", false]], "skbio.io.format.qseq": [[140, "module-skbio.io.format.qseq", false]], "skbio.io.format.sample_metadata": [[141, "module-skbio.io.format.sample_metadata", false]], "skbio.io.format.stockholm": [[142, "module-skbio.io.format.stockholm", false]], "skbio.io.format.taxdump": [[143, "module-skbio.io.format.taxdump", false]], "skbio.io.registry": [[144, "module-skbio.io.registry", false]], "skbio.io.util": [[183, "module-skbio.io.util", false]], "skbio.metadata": [[1003, "module-skbio.metadata", false]], "skbio.sequence": [[1004, "module-skbio.sequence", false]], "skbio.sequence.distance": [[589, "module-skbio.sequence.distance", false]], "skbio.stats": [[1005, "module-skbio.stats", false]], "skbio.stats.composition": [[592, "module-skbio.stats.composition", false]], "skbio.stats.distance": [[613, "module-skbio.stats.distance", false]], "skbio.stats.evolve": [[670, "module-skbio.stats.evolve", false]], "skbio.stats.gradient": [[672, "module-skbio.stats.gradient", false]], "skbio.stats.ordination": [[762, "module-skbio.stats.ordination", false]], "skbio.stats.power": [[787, "module-skbio.stats.power", false]], "skbio.table": [[1006, "module-skbio.table", false]], "skbio.tree": [[1007, "module-skbio.tree", false]], "skbio.util": [[1008, "module-skbio.util", false]], "skbio.workflow": [[1009, "module-skbio.workflow", false]], "sniff() (in module skbio.io.registry)": [[181, "skbio.io.registry.sniff", false]], "sniff() (skbio.io.registry.ioregistry method)": [[177, "skbio.io.registry.IORegistry.sniff", false]], "sniffer() (skbio.io.registry.format method)": [[156, "skbio.io.registry.Format.sniffer", false]], "sobs() (in module skbio.diversity.alpha)": [[102, "skbio.diversity.alpha.sobs", false]], "sort() (skbio.alignment.tabularmsa method)": [[58, "skbio.alignment.TabularMSA.sort", false]], "sort() (skbio.metadata.intervalmetadata method)": [[232, "skbio.metadata.IntervalMetadata.sort", false]], "sort() (skbio.table.table method)": [[847, "skbio.table.Table.sort", false]], "sort_order() (skbio.table.table method)": [[848, "skbio.table.Table.sort_order", false]], "stops() (skbio.sequence.protein method)": [[459, "skbio.sequence.Protein.stops", false]], "stripedsmithwaterman (class in skbio.alignment)": [[17, "skbio.alignment.StripedSmithWaterman", false]], "strong() (in module skbio.diversity.alpha)": [[103, "skbio.diversity.alpha.strong", false]], "subsample() (skbio.table.table method)": [[849, "skbio.table.Table.subsample", false]], "subsample_counts() (in module skbio.stats)": [[792, "skbio.stats.subsample_counts", false]], "subsample_paired_power() (in module skbio.stats.power)": [[790, "skbio.stats.power.subsample_paired_power", false]], "subsample_power() (in module skbio.stats.power)": [[791, "skbio.stats.power.subsample_power", false]], "subset() (skbio.tree.treenode method)": [[927, "skbio.tree.TreeNode.subset", false]], "subsets() (skbio.tree.treenode method)": [[928, "skbio.tree.TreeNode.subsets", false]], "substitutionmatrix (class in skbio.sequence)": [[561, "skbio.sequence.SubstitutionMatrix", false]], "subtree() (skbio.tree.treenode method)": [[929, "skbio.tree.TreeNode.subtree", false]], "sum() (skbio.table.table method)": [[850, "skbio.table.Table.sum", false]], "svd_rank() (in module skbio.stats.ordination)": [[786, "skbio.stats.ordination.svd_rank", false]], "table (class in skbio.table)": [[793, "skbio.table.Table", false]], "tabularmsa (class in skbio.alignment)": [[29, "skbio.alignment.TabularMSA", false]], "tip_tip_distances() (skbio.tree.treenode method)": [[930, "skbio.tree.TreeNode.tip_tip_distances", false]], "tips() (skbio.tree.treenode method)": [[931, "skbio.tree.TreeNode.tips", false]], "to_anndata() (skbio.table.table method)": [[851, "skbio.table.Table.to_anndata", false]], "to_array() (skbio.tree.treenode method)": [[932, "skbio.tree.TreeNode.to_array", false]], "to_data_frame() (skbio.sequence.substitutionmatrix method)": [[584, "skbio.sequence.SubstitutionMatrix.to_data_frame", false]], "to_data_frame() (skbio.stats.distance.dissimilaritymatrix method)": [[633, "skbio.stats.distance.DissimilarityMatrix.to_data_frame", false]], "to_data_frame() (skbio.stats.distance.distancematrix method)": [[658, "skbio.stats.distance.DistanceMatrix.to_data_frame", false]], "to_dataframe() (skbio.metadata.categoricalmetadatacolumn method)": [[203, "skbio.metadata.CategoricalMetadataColumn.to_dataframe", false]], "to_dataframe() (skbio.metadata.metadatacolumn method)": [[250, "skbio.metadata.MetadataColumn.to_dataframe", false]], "to_dataframe() (skbio.metadata.numericmetadatacolumn method)": [[268, "skbio.metadata.NumericMetadataColumn.to_dataframe", false]], "to_dataframe() (skbio.metadata.samplemetadata method)": [[287, "skbio.metadata.SampleMetadata.to_dataframe", false]], "to_dataframe() (skbio.table.table method)": [[852, "skbio.table.Table.to_dataframe", false]], "to_definites() (skbio.sequence.dna method)": [[341, "skbio.sequence.DNA.to_definites", false]], "to_definites() (skbio.sequence.grammaredsequence method)": [[407, "skbio.sequence.GrammaredSequence.to_definites", false]], "to_definites() (skbio.sequence.protein method)": [[460, "skbio.sequence.Protein.to_definites", false]], "to_definites() (skbio.sequence.rna method)": [[517, "skbio.sequence.RNA.to_definites", false]], "to_dict() (skbio.alignment.tabularmsa method)": [[59, "skbio.alignment.TabularMSA.to_dict", false]], "to_dict() (skbio.sequence.substitutionmatrix method)": [[585, "skbio.sequence.SubstitutionMatrix.to_dict", false]], "to_files() (skbio.stats.gradient.categoryresults method)": [[694, "skbio.stats.gradient.CategoryResults.to_files", false]], "to_files() (skbio.stats.gradient.gradientanovaresults method)": [[727, "skbio.stats.gradient.GradientANOVAResults.to_files", false]], "to_files() (skbio.stats.gradient.groupresults method)": [[738, "skbio.stats.gradient.GroupResults.to_files", false]], "to_hdf5() (skbio.table.table method)": [[853, "skbio.table.Table.to_hdf5", false]], "to_indices() (skbio.sequence.dna method)": [[342, "skbio.sequence.DNA.to_indices", false]], "to_indices() (skbio.sequence.grammaredsequence method)": [[408, "skbio.sequence.GrammaredSequence.to_indices", false]], "to_indices() (skbio.sequence.protein method)": [[461, "skbio.sequence.Protein.to_indices", false]], "to_indices() (skbio.sequence.rna method)": [[518, "skbio.sequence.RNA.to_indices", false]], "to_indices() (skbio.sequence.sequence method)": [[559, "skbio.sequence.Sequence.to_indices", false]], "to_json() (skbio.table.table method)": [[854, "skbio.table.Table.to_json", false]], "to_regex() (skbio.sequence.dna method)": [[343, "skbio.sequence.DNA.to_regex", false]], "to_regex() (skbio.sequence.grammaredsequence method)": [[409, "skbio.sequence.GrammaredSequence.to_regex", false]], "to_regex() (skbio.sequence.protein method)": [[462, "skbio.sequence.Protein.to_regex", false]], "to_regex() (skbio.sequence.rna method)": [[519, "skbio.sequence.RNA.to_regex", false]], "to_series() (skbio.metadata.categoricalmetadatacolumn method)": [[204, "skbio.metadata.CategoricalMetadataColumn.to_series", false]], "to_series() (skbio.metadata.metadatacolumn method)": [[251, "skbio.metadata.MetadataColumn.to_series", false]], "to_series() (skbio.metadata.numericmetadatacolumn method)": [[269, "skbio.metadata.NumericMetadataColumn.to_series", false]], "to_series() (skbio.stats.distance.distancematrix method)": [[659, "skbio.stats.distance.DistanceMatrix.to_series", false]], "to_taxonomy() (skbio.tree.treenode method)": [[933, "skbio.tree.TreeNode.to_taxonomy", false]], "to_tsv() (skbio.table.table method)": [[855, "skbio.table.Table.to_tsv", false]], "trajectorygradientanova (class in skbio.stats.gradient)": [[739, "skbio.stats.gradient.TrajectoryGradientANOVA", false]], "transcribe() (skbio.sequence.dna method)": [[344, "skbio.sequence.DNA.transcribe", false]], "transform() (skbio.table.table method)": [[856, "skbio.table.Table.transform", false]], "translate() (skbio.sequence.dna method)": [[345, "skbio.sequence.DNA.translate", false]], "translate() (skbio.sequence.geneticcode method)": [[358, "skbio.sequence.GeneticCode.translate", false]], "translate() (skbio.sequence.rna method)": [[520, "skbio.sequence.RNA.translate", false]], "translate_six_frames() (skbio.sequence.dna method)": [[346, "skbio.sequence.DNA.translate_six_frames", false]], "translate_six_frames() (skbio.sequence.geneticcode method)": [[359, "skbio.sequence.GeneticCode.translate_six_frames", false]], "translate_six_frames() (skbio.sequence.rna method)": [[521, "skbio.sequence.RNA.translate_six_frames", false]], "transpose() (skbio.sequence.substitutionmatrix method)": [[586, "skbio.sequence.SubstitutionMatrix.transpose", false]], "transpose() (skbio.stats.distance.dissimilaritymatrix method)": [[634, "skbio.stats.distance.DissimilarityMatrix.transpose", false]], "transpose() (skbio.stats.distance.distancematrix method)": [[660, "skbio.stats.distance.DistanceMatrix.transpose", false]], "transpose() (skbio.table.table method)": [[857, "skbio.table.Table.transpose", false]], "traverse() (skbio.tree.treenode method)": [[934, "skbio.tree.TreeNode.traverse", false]], "tree_basis() (in module skbio.stats.composition)": [[611, "skbio.stats.composition.tree_basis", false]], "treenode (class in skbio.tree)": [[861, "skbio.tree.TreeNode", false]], "unpack() (skbio.tree.treenode method)": [[935, "skbio.tree.TreeNode.unpack", false]], "unpack_by_func() (skbio.tree.treenode method)": [[936, "skbio.tree.TreeNode.unpack_by_func", false]], "unrooted_copy() (skbio.tree.treenode method)": [[937, "skbio.tree.TreeNode.unrooted_copy", false]], "unrooted_deepcopy() (skbio.tree.treenode method)": [[938, "skbio.tree.TreeNode.unrooted_deepcopy", false]], "unweighted_unifrac() (in module skbio.diversity.beta)": [[106, "skbio.diversity.beta.unweighted_unifrac", false]], "update_ids() (skbio.table.table method)": [[858, "skbio.table.Table.update_ids", false]], "vlr() (in module skbio.stats.composition)": [[612, "skbio.stats.composition.vlr", false]], "weighted_unifrac() (in module skbio.diversity.beta)": [[107, "skbio.diversity.beta.weighted_unifrac", false]], "windowdifferencegradientanova (class in skbio.stats.gradient)": [[750, "skbio.stats.gradient.WindowDifferenceGradientANOVA", false]], "within() (skbio.sequence.substitutionmatrix method)": [[587, "skbio.sequence.SubstitutionMatrix.within", false]], "within() (skbio.stats.distance.dissimilaritymatrix method)": [[635, "skbio.stats.distance.DissimilarityMatrix.within", false]], "within() (skbio.stats.distance.distancematrix method)": [[661, "skbio.stats.distance.DistanceMatrix.within", false]], "workflow (class in skbio.workflow)": [[967, "skbio.workflow.Workflow", false]], "write() (in module skbio.io.registry)": [[182, "skbio.io.registry.write", false]], "write() (skbio.alignment.tabularmsa method)": [[60, "skbio.alignment.TabularMSA.write", false]], "write() (skbio.embedding.proteinembedding method)": [[124, "skbio.embedding.ProteinEmbedding.write", false]], "write() (skbio.io.registry.ioregistry method)": [[178, "skbio.io.registry.IORegistry.write", false]], "write() (skbio.metadata.intervalmetadata method)": [[233, "skbio.metadata.IntervalMetadata.write", false]], "write() (skbio.metadata.samplemetadata method)": [[288, "skbio.metadata.SampleMetadata.write", false]], "write() (skbio.sequence.dna method)": [[347, "skbio.sequence.DNA.write", false]], "write() (skbio.sequence.grammaredsequence method)": [[410, "skbio.sequence.GrammaredSequence.write", false]], "write() (skbio.sequence.protein method)": [[463, "skbio.sequence.Protein.write", false]], "write() (skbio.sequence.rna method)": [[522, "skbio.sequence.RNA.write", false]], "write() (skbio.sequence.sequence method)": [[560, "skbio.sequence.Sequence.write", false]], "write() (skbio.sequence.substitutionmatrix method)": [[588, "skbio.sequence.SubstitutionMatrix.write", false]], "write() (skbio.stats.distance.dissimilaritymatrix method)": [[636, "skbio.stats.distance.DissimilarityMatrix.write", false]], "write() (skbio.stats.distance.distancematrix method)": [[662, "skbio.stats.distance.DistanceMatrix.write", false]], "write() (skbio.stats.ordination.ordinationresults method)": [[775, "skbio.stats.ordination.OrdinationResults.write", false]], "write() (skbio.table.table method)": [[859, "skbio.table.Table.write", false]], "write() (skbio.tree.treenode method)": [[939, "skbio.tree.TreeNode.write", false]], "writer() (skbio.io.registry.format method)": [[157, "skbio.io.registry.Format.writer", false]]}, "objects": {"skbio": [[0, 0, 0, "-", "alignment"], [1, 0, 0, "-", "diversity"], [2, 0, 0, "-", "embedding"], [1002, 0, 0, "-", "io"], [1003, 0, 0, "-", "metadata"], [1004, 0, 0, "-", "sequence"], [1005, 0, 0, "-", "stats"], [1006, 0, 0, "-", "table"], [1007, 0, 0, "-", "tree"], [1008, 0, 0, "-", "util"], [1009, 0, 0, "-", "workflow"]], "skbio.alignment": [[3, 1, 1, "", "AlignmentStructure"], [17, 1, 1, "", "StripedSmithWaterman"], [29, 1, 1, "", "TabularMSA"], [61, 3, 1, "", "global_pairwise_align"], [62, 3, 1, "", "global_pairwise_align_nucleotide"], [63, 3, 1, "", "global_pairwise_align_protein"], [64, 3, 1, "", "local_pairwise_align"], [65, 3, 1, "", "local_pairwise_align_nucleotide"], [66, 3, 1, "", "local_pairwise_align_protein"], [67, 3, 1, "", "local_pairwise_align_ssw"], [68, 3, 1, "", "make_identity_substitution_matrix"]], "skbio.alignment.AlignmentStructure": [[4, 2, 1, "", "__eq__"], [5, 2, 1, "", "__ge__"], [6, 2, 1, "", "__getitem__"], [7, 2, 1, "", "__getstate__"], [8, 2, 1, "", "__gt__"], [9, 2, 1, "", "__hash__"], [10, 2, 1, "", "__le__"], [11, 2, 1, "", "__lt__"], [12, 2, 1, "", "__ne__"], [13, 2, 1, "", "__setstate__"], [14, 2, 1, "", "__str__"], [15, 2, 1, "", "is_zero_based"], [16, 2, 1, "", "set_zero_based"]], "skbio.alignment.StripedSmithWaterman": [[18, 2, 1, "", "__call__"], [19, 2, 1, "", "__eq__"], [20, 2, 1, "", "__ge__"], [21, 2, 1, "", "__getstate__"], [22, 2, 1, "", "__gt__"], [23, 2, 1, "", "__hash__"], [24, 2, 1, "", "__le__"], [25, 2, 1, "", "__lt__"], [26, 2, 1, "", "__ne__"], [27, 2, 1, "", "__setstate__"], [28, 2, 1, "", "__str__"]], "skbio.alignment.TabularMSA": [[30, 2, 1, "", "__bool__"], [31, 2, 1, "", "__contains__"], [32, 2, 1, "", "__copy__"], [33, 2, 1, "", "__deepcopy__"], [34, 2, 1, "", "__eq__"], [35, 2, 1, "", "__ge__"], [36, 2, 1, "", "__getitem__"], [37, 2, 1, "", "__getstate__"], [38, 2, 1, "", "__gt__"], [39, 2, 1, "", "__iter__"], [40, 2, 1, "", "__le__"], [41, 2, 1, "", "__len__"], [42, 2, 1, "", "__lt__"], [43, 2, 1, "", "__ne__"], [44, 2, 1, "", "__reversed__"], [45, 2, 1, "", "__str__"], [46, 2, 1, "", "append"], [47, 2, 1, "", "consensus"], [48, 2, 1, "", "conservation"], [49, 2, 1, "", "extend"], [50, 2, 1, "", "from_dict"], [51, 2, 1, "", "gap_frequencies"], [52, 2, 1, "", "has_metadata"], [53, 2, 1, "", "has_positional_metadata"], [54, 2, 1, "", "iter_positions"], [55, 2, 1, "", "join"], [56, 2, 1, "", "read"], [57, 2, 1, "", "reassign_index"], [58, 2, 1, "", "sort"], [59, 2, 1, "", "to_dict"], [60, 2, 1, "", "write"]], "skbio.diversity": [[69, 0, 0, "-", "alpha"], [104, 3, 1, "", "alpha_diversity"], [105, 0, 0, "-", "beta"], [108, 3, 1, "", "beta_diversity"], [109, 3, 1, "", "block_beta_diversity"], [110, 3, 1, "", "get_alpha_diversity_metrics"], [111, 3, 1, "", "get_beta_diversity_metrics"], [112, 3, 1, "", "partial_beta_diversity"]], "skbio.diversity.alpha": [[70, 3, 1, "", "ace"], [71, 3, 1, "", "berger_parker_d"], [72, 3, 1, "", "brillouin_d"], [73, 3, 1, "", "chao1"], [74, 3, 1, "", "chao1_ci"], [75, 3, 1, "", "dominance"], [76, 3, 1, "", "doubles"], [77, 3, 1, "", "enspie"], [78, 3, 1, "", "esty_ci"], [79, 3, 1, "", "faith_pd"], [80, 3, 1, "", "fisher_alpha"], [81, 3, 1, "", "gini_index"], [82, 3, 1, "", "goods_coverage"], [83, 3, 1, "", "heip_e"], [84, 3, 1, "", "kempton_taylor_q"], [85, 3, 1, "", "lladser_ci"], [86, 3, 1, "", "lladser_pe"], [87, 3, 1, "", "margalef"], [88, 3, 1, "", "mcintosh_d"], [89, 3, 1, "", "mcintosh_e"], [90, 3, 1, "", "menhinick"], [91, 3, 1, "", "michaelis_menten_fit"], [92, 3, 1, "", "observed_features"], [93, 3, 1, "", "observed_otus"], [94, 3, 1, "", "osd"], [95, 3, 1, "", "phydiv"], [96, 3, 1, "", "pielou_e"], [97, 3, 1, "", "robbins"], [98, 3, 1, "", "shannon"], [99, 3, 1, "", "simpson"], [100, 3, 1, "", "simpson_e"], [101, 3, 1, "", "singles"], [102, 3, 1, "", "sobs"], [103, 3, 1, "", "strong"]], "skbio.diversity.beta": [[106, 3, 1, "", "unweighted_unifrac"], [107, 3, 1, "", "weighted_unifrac"]], "skbio.embedding": [[113, 1, 1, "", "ProteinEmbedding"]], "skbio.embedding.ProteinEmbedding": [[114, 2, 1, "", "__eq__"], [115, 2, 1, "", "__ge__"], [116, 2, 1, "", "__getstate__"], [117, 2, 1, "", "__gt__"], [118, 2, 1, "", "__hash__"], [119, 2, 1, "", "__le__"], [120, 2, 1, "", "__lt__"], [121, 2, 1, "", "__ne__"], [122, 2, 1, "", "__str__"], [123, 2, 1, "", "read"], [124, 2, 1, "", "write"]], "skbio.io": [[144, 0, 0, "-", "registry"], [183, 0, 0, "-", "util"]], "skbio.io.format": [[125, 0, 0, "-", "binary_dm"], [126, 0, 0, "-", "biom"], [127, 0, 0, "-", "blast6"], [128, 0, 0, "-", "blast7"], [129, 0, 0, "-", "clustal"], [130, 0, 0, "-", "embedding"], [131, 0, 0, "-", "embl"], [132, 0, 0, "-", "fasta"], [133, 0, 0, "-", "fastq"], [134, 0, 0, "-", "genbank"], [135, 0, 0, "-", "gff3"], [136, 0, 0, "-", "lsmat"], [137, 0, 0, "-", "newick"], [138, 0, 0, "-", "ordination"], [139, 0, 0, "-", "phylip"], [140, 0, 0, "-", "qseq"], [141, 0, 0, "-", "sample_metadata"], [142, 0, 0, "-", "stockholm"], [143, 0, 0, "-", "taxdump"]], "skbio.io.registry": [[145, 1, 1, "", "Format"], [158, 1, 1, "", "IORegistry"], [179, 3, 1, "", "create_format"], [180, 3, 1, "", "read"], [181, 3, 1, "", "sniff"], [182, 3, 1, "", "write"]], "skbio.io.registry.Format": [[146, 2, 1, "", "__eq__"], [147, 2, 1, "", "__ge__"], [148, 2, 1, "", "__getstate__"], [149, 2, 1, "", "__gt__"], [150, 2, 1, "", "__hash__"], [151, 2, 1, "", "__le__"], [152, 2, 1, "", "__lt__"], [153, 2, 1, "", "__ne__"], [154, 2, 1, "", "__str__"], [155, 2, 1, "", "reader"], [156, 2, 1, "", "sniffer"], [157, 2, 1, "", "writer"]], "skbio.io.registry.IORegistry": [[159, 2, 1, "", "__eq__"], [160, 2, 1, "", "__ge__"], [161, 2, 1, "", "__getstate__"], [162, 2, 1, "", "__gt__"], [163, 2, 1, "", "__hash__"], [164, 2, 1, "", "__le__"], [165, 2, 1, "", "__lt__"], [166, 2, 1, "", "__ne__"], [167, 2, 1, "", "__str__"], [168, 2, 1, "", "add_format"], [169, 2, 1, "", "create_format"], [170, 2, 1, "", "get_reader"], [171, 2, 1, "", "get_sniffer"], [172, 2, 1, "", "get_writer"], [173, 2, 1, "", "list_read_formats"], [174, 2, 1, "", "list_write_formats"], [175, 2, 1, "", "monkey_patch"], [176, 2, 1, "", "read"], [177, 2, 1, "", "sniff"], [178, 2, 1, "", "write"]], "skbio.io.util": [[184, 3, 1, "", "open"], [185, 3, 1, "", "open_file"], [186, 3, 1, "", "open_files"]], "skbio.metadata": [[187, 1, 1, "", "CategoricalMetadataColumn"], [205, 1, 1, "", "Interval"], [215, 1, 1, "", "IntervalMetadata"], [234, 1, 1, "", "MetadataColumn"], [252, 1, 1, "", "NumericMetadataColumn"], [270, 1, 1, "", "SampleMetadata"]], "skbio.metadata.CategoricalMetadataColumn": [[188, 2, 1, "", "__eq__"], [189, 2, 1, "", "__ge__"], [190, 2, 1, "", "__getstate__"], [191, 2, 1, "", "__gt__"], [192, 2, 1, "", "__le__"], [193, 2, 1, "", "__lt__"], [194, 2, 1, "", "__ne__"], [195, 2, 1, "", "__str__"], [196, 2, 1, "", "drop_missing_values"], [197, 2, 1, "", "filter_ids"], [198, 2, 1, "", "get_ids"], [199, 2, 1, "", "get_missing"], [200, 2, 1, "", "get_value"], [201, 2, 1, "", "has_missing_values"], [202, 2, 1, "", "save"], [203, 2, 1, "", "to_dataframe"], [204, 2, 1, "", "to_series"]], "skbio.metadata.Interval": [[206, 2, 1, "", "__eq__"], [207, 2, 1, "", "__ge__"], [208, 2, 1, "", "__getstate__"], [209, 2, 1, "", "__gt__"], [210, 2, 1, "", "__le__"], [211, 2, 1, "", "__lt__"], [212, 2, 1, "", "__ne__"], [213, 2, 1, "", "__str__"], [214, 2, 1, "", "drop"]], "skbio.metadata.IntervalMetadata": [[216, 2, 1, "", "__copy__"], [217, 2, 1, "", "__deepcopy__"], [218, 2, 1, "", "__eq__"], [219, 2, 1, "", "__ge__"], [220, 2, 1, "", "__getstate__"], [221, 2, 1, "", "__gt__"], [222, 2, 1, "", "__le__"], [223, 2, 1, "", "__lt__"], [224, 2, 1, "", "__ne__"], [225, 2, 1, "", "__str__"], [226, 2, 1, "", "add"], [227, 2, 1, "", "concat"], [228, 2, 1, "", "drop"], [229, 2, 1, "", "merge"], [230, 2, 1, "", "query"], [231, 2, 1, "", "read"], [232, 2, 1, "", "sort"], [233, 2, 1, "", "write"]], "skbio.metadata.MetadataColumn": [[235, 2, 1, "", "__eq__"], [236, 2, 1, "", "__ge__"], [237, 2, 1, "", "__getstate__"], [238, 2, 1, "", "__gt__"], [239, 2, 1, "", "__le__"], [240, 2, 1, "", "__lt__"], [241, 2, 1, "", "__ne__"], [242, 2, 1, "", "__str__"], [243, 2, 1, "", "drop_missing_values"], [244, 2, 1, "", "filter_ids"], [245, 2, 1, "", "get_ids"], [246, 2, 1, "", "get_missing"], [247, 2, 1, "", "get_value"], [248, 2, 1, "", "has_missing_values"], [249, 2, 1, "", "save"], [250, 2, 1, "", "to_dataframe"], [251, 2, 1, "", "to_series"]], "skbio.metadata.NumericMetadataColumn": [[253, 2, 1, "", "__eq__"], [254, 2, 1, "", "__ge__"], [255, 2, 1, "", "__getstate__"], [256, 2, 1, "", "__gt__"], [257, 2, 1, "", "__le__"], [258, 2, 1, "", "__lt__"], [259, 2, 1, "", "__ne__"], [260, 2, 1, "", "__str__"], [261, 2, 1, "", "drop_missing_values"], [262, 2, 1, "", "filter_ids"], [263, 2, 1, "", "get_ids"], [264, 2, 1, "", "get_missing"], [265, 2, 1, "", "get_value"], [266, 2, 1, "", "has_missing_values"], [267, 2, 1, "", "save"], [268, 2, 1, "", "to_dataframe"], [269, 2, 1, "", "to_series"]], "skbio.metadata.SampleMetadata": [[271, 2, 1, "", "__eq__"], [272, 2, 1, "", "__ge__"], [273, 2, 1, "", "__getstate__"], [274, 2, 1, "", "__gt__"], [275, 2, 1, "", "__le__"], [276, 2, 1, "", "__lt__"], [277, 2, 1, "", "__ne__"], [278, 2, 1, "", "__str__"], [279, 2, 1, "", "filter_columns"], [280, 2, 1, "", "filter_ids"], [281, 2, 1, "", "get_column"], [282, 2, 1, "", "get_ids"], [283, 2, 1, "", "load"], [284, 2, 1, "", "merge"], [285, 2, 1, "", "read"], [286, 2, 1, "", "save"], [287, 2, 1, "", "to_dataframe"], [288, 2, 1, "", "write"]], "skbio.sequence": [[289, 1, 1, "", "DNA"], [348, 1, 1, "", "GeneticCode"], [360, 1, 1, "", "GrammaredSequence"], [411, 1, 1, "", "Protein"], [464, 1, 1, "", "RNA"], [523, 1, 1, "", "Sequence"], [561, 1, 1, "", "SubstitutionMatrix"], [589, 0, 0, "-", "distance"]], "skbio.sequence.DNA": [[290, 2, 1, "", "__bool__"], [291, 2, 1, "", "__contains__"], [292, 2, 1, "", "__copy__"], [293, 2, 1, "", "__deepcopy__"], [294, 2, 1, "", "__eq__"], [295, 2, 1, "", "__ge__"], [296, 2, 1, "", "__getitem__"], [297, 2, 1, "", "__getstate__"], [298, 2, 1, "", "__gt__"], [299, 2, 1, "", "__iter__"], [300, 2, 1, "", "__le__"], [301, 2, 1, "", "__len__"], [302, 2, 1, "", "__lt__"], [303, 2, 1, "", "__ne__"], [304, 2, 1, "", "__reversed__"], [305, 2, 1, "", "__str__"], [306, 2, 1, "", "complement"], [307, 2, 1, "", "concat"], [308, 2, 1, "", "count"], [309, 2, 1, "", "definites"], [310, 2, 1, "", "degap"], [311, 2, 1, "", "degenerates"], [312, 2, 1, "", "distance"], [313, 2, 1, "", "expand_degenerates"], [314, 2, 1, "", "find_motifs"], [315, 2, 1, "", "find_with_regex"], [316, 2, 1, "", "frequencies"], [317, 2, 1, "", "gaps"], [318, 2, 1, "", "gc_content"], [319, 2, 1, "", "gc_frequency"], [320, 2, 1, "", "has_definites"], [321, 2, 1, "", "has_degenerates"], [322, 2, 1, "", "has_gaps"], [323, 2, 1, "", "has_interval_metadata"], [324, 2, 1, "", "has_metadata"], [325, 2, 1, "", "has_nondegenerates"], [326, 2, 1, "", "has_positional_metadata"], [327, 2, 1, "", "index"], [328, 2, 1, "", "is_reverse_complement"], [329, 2, 1, "", "iter_contiguous"], [330, 2, 1, "", "iter_kmers"], [331, 2, 1, "", "kmer_frequencies"], [332, 2, 1, "", "lowercase"], [333, 2, 1, "", "match_frequency"], [334, 2, 1, "", "matches"], [335, 2, 1, "", "mismatch_frequency"], [336, 2, 1, "", "mismatches"], [337, 2, 1, "", "nondegenerates"], [338, 2, 1, "", "read"], [339, 2, 1, "", "replace"], [340, 2, 1, "", "reverse_complement"], [341, 2, 1, "", "to_definites"], [342, 2, 1, "", "to_indices"], [343, 2, 1, "", "to_regex"], [344, 2, 1, "", "transcribe"], [345, 2, 1, "", "translate"], [346, 2, 1, "", "translate_six_frames"], [347, 2, 1, "", "write"]], "skbio.sequence.GeneticCode": [[349, 2, 1, "", "__eq__"], [350, 2, 1, "", "__ge__"], [351, 2, 1, "", "__getstate__"], [352, 2, 1, "", "__gt__"], [353, 2, 1, "", "__le__"], [354, 2, 1, "", "__lt__"], [355, 2, 1, "", "__ne__"], [356, 2, 1, "", "__str__"], [357, 2, 1, "", "from_ncbi"], [358, 2, 1, "", "translate"], [359, 2, 1, "", "translate_six_frames"]], "skbio.sequence.GrammaredSequence": [[361, 2, 1, "", "__bool__"], [362, 2, 1, "", "__contains__"], [363, 2, 1, "", "__copy__"], [364, 2, 1, "", "__deepcopy__"], [365, 2, 1, "", "__eq__"], [366, 2, 1, "", "__ge__"], [367, 2, 1, "", "__getitem__"], [368, 2, 1, "", "__getstate__"], [369, 2, 1, "", "__gt__"], [370, 2, 1, "", "__iter__"], [371, 2, 1, "", "__le__"], [372, 2, 1, "", "__len__"], [373, 2, 1, "", "__lt__"], [374, 2, 1, "", "__ne__"], [375, 2, 1, "", "__reversed__"], [376, 2, 1, "", "__str__"], [377, 2, 1, "", "concat"], [378, 2, 1, "", "count"], [379, 2, 1, "", "definites"], [380, 2, 1, "", "degap"], [381, 2, 1, "", "degenerates"], [382, 2, 1, "", "distance"], [383, 2, 1, "", "expand_degenerates"], [384, 2, 1, "", "find_motifs"], [385, 2, 1, "", "find_with_regex"], [386, 2, 1, "", "frequencies"], [387, 2, 1, "", "gaps"], [388, 2, 1, "", "has_definites"], [389, 2, 1, "", "has_degenerates"], [390, 2, 1, "", "has_gaps"], [391, 2, 1, "", "has_interval_metadata"], [392, 2, 1, "", "has_metadata"], [393, 2, 1, "", "has_nondegenerates"], [394, 2, 1, "", "has_positional_metadata"], [395, 2, 1, "", "index"], [396, 2, 1, "", "iter_contiguous"], [397, 2, 1, "", "iter_kmers"], [398, 2, 1, "", "kmer_frequencies"], [399, 2, 1, "", "lowercase"], [400, 2, 1, "", "match_frequency"], [401, 2, 1, "", "matches"], [402, 2, 1, "", "mismatch_frequency"], [403, 2, 1, "", "mismatches"], [404, 2, 1, "", "nondegenerates"], [405, 2, 1, "", "read"], [406, 2, 1, "", "replace"], [407, 2, 1, "", "to_definites"], [408, 2, 1, "", "to_indices"], [409, 2, 1, "", "to_regex"], [410, 2, 1, "", "write"]], "skbio.sequence.Protein": [[412, 2, 1, "", "__bool__"], [413, 2, 1, "", "__contains__"], [414, 2, 1, "", "__copy__"], [415, 2, 1, "", "__deepcopy__"], [416, 2, 1, "", "__eq__"], [417, 2, 1, "", "__ge__"], [418, 2, 1, "", "__getitem__"], [419, 2, 1, "", "__getstate__"], [420, 2, 1, "", "__gt__"], [421, 2, 1, "", "__iter__"], [422, 2, 1, "", "__le__"], [423, 2, 1, "", "__len__"], [424, 2, 1, "", "__lt__"], [425, 2, 1, "", "__ne__"], [426, 2, 1, "", "__reversed__"], [427, 2, 1, "", "__str__"], [428, 2, 1, "", "concat"], [429, 2, 1, "", "count"], [430, 2, 1, "", "definites"], [431, 2, 1, "", "degap"], [432, 2, 1, "", "degenerates"], [433, 2, 1, "", "distance"], [434, 2, 1, "", "expand_degenerates"], [435, 2, 1, "", "find_motifs"], [436, 2, 1, "", "find_with_regex"], [437, 2, 1, "", "frequencies"], [438, 2, 1, "", "gaps"], [439, 2, 1, "", "has_definites"], [440, 2, 1, "", "has_degenerates"], [441, 2, 1, "", "has_gaps"], [442, 2, 1, "", "has_interval_metadata"], [443, 2, 1, "", "has_metadata"], [444, 2, 1, "", "has_nondegenerates"], [445, 2, 1, "", "has_positional_metadata"], [446, 2, 1, "", "has_stops"], [447, 2, 1, "", "index"], [448, 2, 1, "", "iter_contiguous"], [449, 2, 1, "", "iter_kmers"], [450, 2, 1, "", "kmer_frequencies"], [451, 2, 1, "", "lowercase"], [452, 2, 1, "", "match_frequency"], [453, 2, 1, "", "matches"], [454, 2, 1, "", "mismatch_frequency"], [455, 2, 1, "", "mismatches"], [456, 2, 1, "", "nondegenerates"], [457, 2, 1, "", "read"], [458, 2, 1, "", "replace"], [459, 2, 1, "", "stops"], [460, 2, 1, "", "to_definites"], [461, 2, 1, "", "to_indices"], [462, 2, 1, "", "to_regex"], [463, 2, 1, "", "write"]], "skbio.sequence.RNA": [[465, 2, 1, "", "__bool__"], [466, 2, 1, "", "__contains__"], [467, 2, 1, "", "__copy__"], [468, 2, 1, "", "__deepcopy__"], [469, 2, 1, "", "__eq__"], [470, 2, 1, "", "__ge__"], [471, 2, 1, "", "__getitem__"], [472, 2, 1, "", "__getstate__"], [473, 2, 1, "", "__gt__"], [474, 2, 1, "", "__iter__"], [475, 2, 1, "", "__le__"], [476, 2, 1, "", "__len__"], [477, 2, 1, "", "__lt__"], [478, 2, 1, "", "__ne__"], [479, 2, 1, "", "__reversed__"], [480, 2, 1, "", "__str__"], [481, 2, 1, "", "complement"], [482, 2, 1, "", "concat"], [483, 2, 1, "", "count"], [484, 2, 1, "", "definites"], [485, 2, 1, "", "degap"], [486, 2, 1, "", "degenerates"], [487, 2, 1, "", "distance"], [488, 2, 1, "", "expand_degenerates"], [489, 2, 1, "", "find_motifs"], [490, 2, 1, "", "find_with_regex"], [491, 2, 1, "", "frequencies"], [492, 2, 1, "", "gaps"], [493, 2, 1, "", "gc_content"], [494, 2, 1, "", "gc_frequency"], [495, 2, 1, "", "has_definites"], [496, 2, 1, "", "has_degenerates"], [497, 2, 1, "", "has_gaps"], [498, 2, 1, "", "has_interval_metadata"], [499, 2, 1, "", "has_metadata"], [500, 2, 1, "", "has_nondegenerates"], [501, 2, 1, "", "has_positional_metadata"], [502, 2, 1, "", "index"], [503, 2, 1, "", "is_reverse_complement"], [504, 2, 1, "", "iter_contiguous"], [505, 2, 1, "", "iter_kmers"], [506, 2, 1, "", "kmer_frequencies"], [507, 2, 1, "", "lowercase"], [508, 2, 1, "", "match_frequency"], [509, 2, 1, "", "matches"], [510, 2, 1, "", "mismatch_frequency"], [511, 2, 1, "", "mismatches"], [512, 2, 1, "", "nondegenerates"], [513, 2, 1, "", "read"], [514, 2, 1, "", "replace"], [515, 2, 1, "", "reverse_complement"], [516, 2, 1, "", "reverse_transcribe"], [517, 2, 1, "", "to_definites"], [518, 2, 1, "", "to_indices"], [519, 2, 1, "", "to_regex"], [520, 2, 1, "", "translate"], [521, 2, 1, "", "translate_six_frames"], [522, 2, 1, "", "write"]], "skbio.sequence.Sequence": [[524, 2, 1, "", "__bool__"], [525, 2, 1, "", "__contains__"], [526, 2, 1, "", "__copy__"], [527, 2, 1, "", "__deepcopy__"], [528, 2, 1, "", "__eq__"], [529, 2, 1, "", "__ge__"], [530, 2, 1, "", "__getitem__"], [531, 2, 1, "", "__getstate__"], [532, 2, 1, "", "__gt__"], [533, 2, 1, "", "__iter__"], [534, 2, 1, "", "__le__"], [535, 2, 1, "", "__len__"], [536, 2, 1, "", "__lt__"], [537, 2, 1, "", "__ne__"], [538, 2, 1, "", "__reversed__"], [539, 2, 1, "", "__str__"], [540, 2, 1, "", "concat"], [541, 2, 1, "", "count"], [542, 2, 1, "", "distance"], [543, 2, 1, "", "find_with_regex"], [544, 2, 1, "", "frequencies"], [545, 2, 1, "", "has_interval_metadata"], [546, 2, 1, "", "has_metadata"], [547, 2, 1, "", "has_positional_metadata"], [548, 2, 1, "", "index"], [549, 2, 1, "", "iter_contiguous"], [550, 2, 1, "", "iter_kmers"], [551, 2, 1, "", "kmer_frequencies"], [552, 2, 1, "", "lowercase"], [553, 2, 1, "", "match_frequency"], [554, 2, 1, "", "matches"], [555, 2, 1, "", "mismatch_frequency"], [556, 2, 1, "", "mismatches"], [557, 2, 1, "", "read"], [558, 2, 1, "", "replace"], [559, 2, 1, "", "to_indices"], [560, 2, 1, "", "write"]], "skbio.sequence.SubstitutionMatrix": [[562, 2, 1, "", "__contains__"], [563, 2, 1, "", "__eq__"], [564, 2, 1, "", "__ge__"], [565, 2, 1, "", "__getitem__"], [566, 2, 1, "", "__getstate__"], [567, 2, 1, "", "__gt__"], [568, 2, 1, "", "__le__"], [569, 2, 1, "", "__lt__"], [570, 2, 1, "", "__ne__"], [571, 2, 1, "", "__str__"], [572, 2, 1, "", "between"], [573, 2, 1, "", "by_name"], [574, 2, 1, "", "copy"], [575, 2, 1, "", "filter"], [576, 2, 1, "", "from_dict"], [577, 2, 1, "", "from_iterable"], [578, 2, 1, "", "get_names"], [579, 2, 1, "", "identity"], [580, 2, 1, "", "index"], [581, 2, 1, "", "plot"], [582, 2, 1, "", "read"], [583, 2, 1, "", "redundant_form"], [584, 2, 1, "", "to_data_frame"], [585, 2, 1, "", "to_dict"], [586, 2, 1, "", "transpose"], [587, 2, 1, "", "within"], [588, 2, 1, "", "write"]], "skbio.sequence.distance": [[590, 3, 1, "", "hamming"], [591, 3, 1, "", "kmer_distance"]], "skbio.stats": [[592, 0, 0, "-", "composition"], [613, 0, 0, "-", "distance"], [670, 0, 0, "-", "evolve"], [672, 0, 0, "-", "gradient"], [761, 3, 1, "", "isubsample"], [762, 0, 0, "-", "ordination"], [787, 0, 0, "-", "power"], [792, 3, 1, "", "subsample_counts"]], "skbio.stats.composition": [[593, 3, 1, "", "alr"], [594, 3, 1, "", "alr_inv"], [595, 3, 1, "", "ancom"], [596, 3, 1, "", "centralize"], [597, 3, 1, "", "closure"], [598, 3, 1, "", "clr"], [599, 3, 1, "", "clr_inv"], [600, 3, 1, "", "dirmult_ttest"], [601, 3, 1, "", "ilr"], [602, 3, 1, "", "ilr_inv"], [603, 3, 1, "", "inner"], [604, 3, 1, "", "multi_replace"], [605, 3, 1, "", "multiplicative_replacement"], [606, 3, 1, "", "pairwise_vlr"], [607, 3, 1, "", "perturb"], [608, 3, 1, "", "perturb_inv"], [609, 3, 1, "", "power"], [610, 3, 1, "", "sbp_basis"], [611, 3, 1, "", "tree_basis"], [612, 3, 1, "", "vlr"]], "skbio.stats.distance": [[614, 1, 1, "", "DissimilarityMatrix"], [637, 1, 1, "", "DistanceMatrix"], [663, 3, 1, "", "anosim"], [664, 3, 1, "", "bioenv"], [665, 3, 1, "", "mantel"], [666, 3, 1, "", "permanova"], [667, 3, 1, "", "permdisp"], [668, 3, 1, "", "pwmantel"], [669, 3, 1, "", "randdm"]], "skbio.stats.distance.DissimilarityMatrix": [[615, 2, 1, "", "__contains__"], [616, 2, 1, "", "__eq__"], [617, 2, 1, "", "__ge__"], [618, 2, 1, "", "__getitem__"], [619, 2, 1, "", "__getstate__"], [620, 2, 1, "", "__gt__"], [621, 2, 1, "", "__le__"], [622, 2, 1, "", "__lt__"], [623, 2, 1, "", "__ne__"], [624, 2, 1, "", "__str__"], [625, 2, 1, "", "between"], [626, 2, 1, "", "copy"], [627, 2, 1, "", "filter"], [628, 2, 1, "", "from_iterable"], [629, 2, 1, "", "index"], [630, 2, 1, "", "plot"], [631, 2, 1, "", "read"], [632, 2, 1, "", "redundant_form"], [633, 2, 1, "", "to_data_frame"], [634, 2, 1, "", "transpose"], [635, 2, 1, "", "within"], [636, 2, 1, "", "write"]], "skbio.stats.distance.DistanceMatrix": [[638, 2, 1, "", "__contains__"], [639, 2, 1, "", "__eq__"], [640, 2, 1, "", "__ge__"], [641, 2, 1, "", "__getitem__"], [642, 2, 1, "", "__getstate__"], [643, 2, 1, "", "__gt__"], [644, 2, 1, "", "__le__"], [645, 2, 1, "", "__lt__"], [646, 2, 1, "", "__ne__"], [647, 2, 1, "", "__str__"], [648, 2, 1, "", "between"], [649, 2, 1, "", "condensed_form"], [650, 2, 1, "", "copy"], [651, 2, 1, "", "filter"], [652, 2, 1, "", "from_iterable"], [653, 2, 1, "", "index"], [654, 2, 1, "", "permute"], [655, 2, 1, "", "plot"], [656, 2, 1, "", "read"], [657, 2, 1, "", "redundant_form"], [658, 2, 1, "", "to_data_frame"], [659, 2, 1, "", "to_series"], [660, 2, 1, "", "transpose"], [661, 2, 1, "", "within"], [662, 2, 1, "", "write"]], "skbio.stats.evolve": [[671, 3, 1, "", "hommola_cospeciation"]], "skbio.stats.gradient": [[673, 1, 1, "", "AverageGradientANOVA"], [684, 1, 1, "", "CategoryResults"], [695, 1, 1, "", "FirstDifferenceGradientANOVA"], [706, 1, 1, "", "GradientANOVA"], [717, 1, 1, "", "GradientANOVAResults"], [728, 1, 1, "", "GroupResults"], [739, 1, 1, "", "TrajectoryGradientANOVA"], [750, 1, 1, "", "WindowDifferenceGradientANOVA"]], "skbio.stats.gradient.AverageGradientANOVA": [[674, 2, 1, "", "__eq__"], [675, 2, 1, "", "__ge__"], [676, 2, 1, "", "__getstate__"], [677, 2, 1, "", "__gt__"], [678, 2, 1, "", "__hash__"], [679, 2, 1, "", "__le__"], [680, 2, 1, "", "__lt__"], [681, 2, 1, "", "__ne__"], [682, 2, 1, "", "__str__"], [683, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.CategoryResults": [[685, 2, 1, "", "__eq__"], [686, 2, 1, "", "__ge__"], [687, 2, 1, "", "__getstate__"], [688, 2, 1, "", "__gt__"], [689, 2, 1, "", "__hash__"], [690, 2, 1, "", "__le__"], [691, 2, 1, "", "__lt__"], [692, 2, 1, "", "__ne__"], [693, 2, 1, "", "__str__"], [694, 2, 1, "", "to_files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[696, 2, 1, "", "__eq__"], [697, 2, 1, "", "__ge__"], [698, 2, 1, "", "__getstate__"], [699, 2, 1, "", "__gt__"], [700, 2, 1, "", "__hash__"], [701, 2, 1, "", "__le__"], [702, 2, 1, "", "__lt__"], [703, 2, 1, "", "__ne__"], [704, 2, 1, "", "__str__"], [705, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVA": [[707, 2, 1, "", "__eq__"], [708, 2, 1, "", "__ge__"], [709, 2, 1, "", "__getstate__"], [710, 2, 1, "", "__gt__"], [711, 2, 1, "", "__hash__"], [712, 2, 1, "", "__le__"], [713, 2, 1, "", "__lt__"], [714, 2, 1, "", "__ne__"], [715, 2, 1, "", "__str__"], [716, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[718, 2, 1, "", "__eq__"], [719, 2, 1, "", "__ge__"], [720, 2, 1, "", "__getstate__"], [721, 2, 1, "", "__gt__"], [722, 2, 1, "", "__hash__"], [723, 2, 1, "", "__le__"], [724, 2, 1, "", "__lt__"], [725, 2, 1, "", "__ne__"], [726, 2, 1, "", "__str__"], [727, 2, 1, "", "to_files"]], "skbio.stats.gradient.GroupResults": [[729, 2, 1, "", "__eq__"], [730, 2, 1, "", "__ge__"], [731, 2, 1, "", "__getstate__"], [732, 2, 1, "", "__gt__"], [733, 2, 1, "", "__hash__"], [734, 2, 1, "", "__le__"], [735, 2, 1, "", "__lt__"], [736, 2, 1, "", "__ne__"], [737, 2, 1, "", "__str__"], [738, 2, 1, "", "to_files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[740, 2, 1, "", "__eq__"], [741, 2, 1, "", "__ge__"], [742, 2, 1, "", "__getstate__"], [743, 2, 1, "", "__gt__"], [744, 2, 1, "", "__hash__"], [745, 2, 1, "", "__le__"], [746, 2, 1, "", "__lt__"], [747, 2, 1, "", "__ne__"], [748, 2, 1, "", "__str__"], [749, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[751, 2, 1, "", "__eq__"], [752, 2, 1, "", "__ge__"], [753, 2, 1, "", "__getstate__"], [754, 2, 1, "", "__gt__"], [755, 2, 1, "", "__hash__"], [756, 2, 1, "", "__le__"], [757, 2, 1, "", "__lt__"], [758, 2, 1, "", "__ne__"], [759, 2, 1, "", "__str__"], [760, 2, 1, "", "get_trajectories"]], "skbio.stats.ordination": [[763, 1, 1, "", "OrdinationResults"], [776, 3, 1, "", "ca"], [777, 3, 1, "", "cca"], [778, 3, 1, "", "corr"], [779, 3, 1, "", "e_matrix"], [780, 3, 1, "", "f_matrix"], [781, 3, 1, "", "mean_and_std"], [782, 3, 1, "", "pcoa"], [783, 3, 1, "", "pcoa_biplot"], [784, 3, 1, "", "rda"], [785, 3, 1, "", "scale"], [786, 3, 1, "", "svd_rank"]], "skbio.stats.ordination.OrdinationResults": [[764, 2, 1, "", "__eq__"], [765, 2, 1, "", "__ge__"], [766, 2, 1, "", "__getstate__"], [767, 2, 1, "", "__gt__"], [768, 2, 1, "", "__hash__"], [769, 2, 1, "", "__le__"], [770, 2, 1, "", "__lt__"], [771, 2, 1, "", "__ne__"], [772, 2, 1, "", "__str__"], [773, 2, 1, "", "plot"], [774, 2, 1, "", "read"], [775, 2, 1, "", "write"]], "skbio.stats.power": [[788, 3, 1, "", "confidence_bound"], [789, 3, 1, "", "paired_subsamples"], [790, 3, 1, "", "subsample_paired_power"], [791, 3, 1, "", "subsample_power"]], "skbio.table": [[793, 1, 1, "", "Table"], [860, 4, 1, "", "example_table"]], "skbio.table.Table": [[794, 2, 1, "", "__eq__"], [795, 2, 1, "", "__ge__"], [796, 2, 1, "", "__getitem__"], [797, 2, 1, "", "__getstate__"], [798, 2, 1, "", "__gt__"], [799, 2, 1, "", "__iter__"], [800, 2, 1, "", "__le__"], [801, 2, 1, "", "__lt__"], [802, 2, 1, "", "__ne__"], [803, 2, 1, "", "__str__"], [804, 2, 1, "", "add_group_metadata"], [805, 2, 1, "", "add_metadata"], [806, 2, 1, "", "align_to"], [807, 2, 1, "", "align_to_dataframe"], [808, 2, 1, "", "align_tree"], [809, 2, 1, "", "collapse"], [810, 2, 1, "", "concat"], [811, 2, 1, "", "copy"], [812, 2, 1, "", "data"], [813, 2, 1, "", "del_metadata"], [814, 2, 1, "", "delimited_self"], [815, 2, 1, "", "descriptive_equality"], [816, 2, 1, "", "exists"], [817, 2, 1, "", "filter"], [818, 2, 1, "", "from_adjacency"], [819, 2, 1, "", "from_hdf5"], [820, 2, 1, "", "from_json"], [821, 2, 1, "", "from_tsv"], [822, 2, 1, "", "get_table_density"], [823, 2, 1, "", "get_value_by_ids"], [824, 2, 1, "", "group_metadata"], [825, 2, 1, "", "head"], [826, 2, 1, "", "ids"], [827, 2, 1, "", "index"], [828, 2, 1, "", "is_empty"], [829, 2, 1, "", "iter"], [830, 2, 1, "", "iter_data"], [831, 2, 1, "", "iter_pairwise"], [832, 2, 1, "", "length"], [833, 2, 1, "", "max"], [834, 2, 1, "", "merge"], [835, 2, 1, "", "metadata"], [836, 2, 1, "", "metadata_to_dataframe"], [837, 2, 1, "", "min"], [838, 2, 1, "", "nonzero"], [839, 2, 1, "", "nonzero_counts"], [840, 2, 1, "", "norm"], [841, 2, 1, "", "pa"], [842, 2, 1, "", "partition"], [843, 2, 1, "", "rankdata"], [844, 2, 1, "", "read"], [845, 2, 1, "", "reduce"], [846, 2, 1, "", "remove_empty"], [847, 2, 1, "", "sort"], [848, 2, 1, "", "sort_order"], [849, 2, 1, "", "subsample"], [850, 2, 1, "", "sum"], [851, 2, 1, "", "to_anndata"], [852, 2, 1, "", "to_dataframe"], [853, 2, 1, "", "to_hdf5"], [854, 2, 1, "", "to_json"], [855, 2, 1, "", "to_tsv"], [856, 2, 1, "", "transform"], [857, 2, 1, "", "transpose"], [858, 2, 1, "", "update_ids"], [859, 2, 1, "", "write"]], "skbio.tree": [[861, 1, 1, "", "TreeNode"], [940, 3, 1, "", "majority_rule"], [941, 3, 1, "", "nj"]], "skbio.tree.TreeNode": [[862, 2, 1, "", "__copy__"], [863, 2, 1, "", "__deepcopy__"], [864, 2, 1, "", "__eq__"], [865, 2, 1, "", "__ge__"], [866, 2, 1, "", "__getitem__"], [867, 2, 1, "", "__getstate__"], [868, 2, 1, "", "__gt__"], [869, 2, 1, "", "__hash__"], [870, 2, 1, "", "__iter__"], [871, 2, 1, "", "__le__"], [872, 2, 1, "", "__len__"], [873, 2, 1, "", "__lt__"], [874, 2, 1, "", "__ne__"], [875, 2, 1, "", "__str__"], [876, 2, 1, "", "accumulate_to_ancestor"], [877, 2, 1, "", "ancestors"], [878, 2, 1, "", "append"], [879, 2, 1, "", "ascii_art"], [880, 2, 1, "", "assign_ids"], [881, 2, 1, "", "assign_supports"], [882, 2, 1, "", "bifurcate"], [883, 2, 1, "", "cache_attr"], [884, 2, 1, "", "compare_rfd"], [885, 2, 1, "", "compare_subsets"], [886, 2, 1, "", "compare_tip_distances"], [887, 2, 1, "", "copy"], [888, 2, 1, "", "count"], [889, 2, 1, "", "create_caches"], [890, 2, 1, "", "deepcopy"], [891, 2, 1, "", "descending_branch_length"], [892, 2, 1, "", "distance"], [893, 2, 1, "", "extend"], [894, 2, 1, "", "find"], [895, 2, 1, "", "find_all"], [896, 2, 1, "", "find_by_func"], [897, 2, 1, "", "find_by_id"], [898, 2, 1, "", "from_linkage_matrix"], [899, 2, 1, "", "from_taxdump"], [900, 2, 1, "", "from_taxonomy"], [901, 2, 1, "", "get_max_distance"], [902, 2, 1, "", "has_children"], [903, 2, 1, "", "index_tree"], [904, 2, 1, "", "invalidate_caches"], [905, 2, 1, "", "is_root"], [906, 2, 1, "", "is_tip"], [907, 2, 1, "", "lca"], [908, 2, 1, "", "levelorder"], [909, 2, 1, "", "lowest_common_ancestor"], [910, 2, 1, "", "neighbors"], [911, 2, 1, "", "non_tips"], [912, 2, 1, "", "observed_node_counts"], [913, 2, 1, "", "pop"], [914, 2, 1, "", "postorder"], [915, 2, 1, "", "pre_and_postorder"], [916, 2, 1, "", "preorder"], [917, 2, 1, "", "prune"], [918, 2, 1, "", "read"], [919, 2, 1, "", "remove"], [920, 2, 1, "", "remove_deleted"], [921, 2, 1, "", "root"], [922, 2, 1, "", "root_at"], [923, 2, 1, "", "root_at_midpoint"], [924, 2, 1, "", "shear"], [925, 2, 1, "", "shuffle"], [926, 2, 1, "", "siblings"], [927, 2, 1, "", "subset"], [928, 2, 1, "", "subsets"], [929, 2, 1, "", "subtree"], [930, 2, 1, "", "tip_tip_distances"], [931, 2, 1, "", "tips"], [932, 2, 1, "", "to_array"], [933, 2, 1, "", "to_taxonomy"], [934, 2, 1, "", "traverse"], [935, 2, 1, "", "unpack"], [936, 2, 1, "", "unpack_by_func"], [937, 2, 1, "", "unrooted_copy"], [938, 2, 1, "", "unrooted_deepcopy"], [939, 2, 1, "", "write"]], "skbio.util": [[942, 5, 1, "", "EfficiencyWarning"], [943, 5, 1, "", "RepresentationWarning"], [944, 3, 1, "", "assert_data_frame_almost_equal"], [945, 3, 1, "", "assert_ordination_results_equal"], [946, 3, 1, "", "cardinal_to_ordinal"], [947, 1, 1, "", "classproperty"], [964, 3, 1, "", "find_duplicates"], [965, 3, 1, "", "get_data_path"], [966, 3, 1, "", "safe_md5"]], "skbio.util.classproperty": [[948, 2, 1, "", "__delete__"], [949, 2, 1, "", "__eq__"], [950, 2, 1, "", "__ge__"], [951, 2, 1, "", "__get__"], [952, 2, 1, "", "__getstate__"], [953, 2, 1, "", "__gt__"], [954, 2, 1, "", "__hash__"], [955, 2, 1, "", "__le__"], [956, 2, 1, "", "__lt__"], [957, 2, 1, "", "__ne__"], [958, 2, 1, "", "__set__"], [959, 2, 1, "", "__set_name__"], [960, 2, 1, "", "__str__"], [961, 2, 1, "", "deleter"], [962, 2, 1, "", "getter"], [963, 2, 1, "", "setter"]], "skbio.workflow": [[967, 1, 1, "", "Workflow"], [979, 1, 1, "", "method"], [990, 1, 1, "", "requires"]], "skbio.workflow.Workflow": [[968, 2, 1, "", "__call__"], [969, 2, 1, "", "__eq__"], [970, 2, 1, "", "__ge__"], [971, 2, 1, "", "__getstate__"], [972, 2, 1, "", "__gt__"], [973, 2, 1, "", "__hash__"], [974, 2, 1, "", "__le__"], [975, 2, 1, "", "__lt__"], [976, 2, 1, "", "__ne__"], [977, 2, 1, "", "__str__"], [978, 2, 1, "", "initialize_state"]], "skbio.workflow.method": [[980, 2, 1, "", "__call__"], [981, 2, 1, "", "__eq__"], [982, 2, 1, "", "__ge__"], [983, 2, 1, "", "__getstate__"], [984, 2, 1, "", "__gt__"], [985, 2, 1, "", "__hash__"], [986, 2, 1, "", "__le__"], [987, 2, 1, "", "__lt__"], [988, 2, 1, "", "__ne__"], [989, 2, 1, "", "__str__"]], "skbio.workflow.requires": [[991, 2, 1, "", "__call__"], [992, 2, 1, "", "__eq__"], [993, 2, 1, "", "__ge__"], [994, 2, 1, "", "__getstate__"], [995, 2, 1, "", "__gt__"], [996, 2, 1, "", "__hash__"], [997, 2, 1, "", "__le__"], [998, 2, 1, "", "__lt__"], [999, 2, 1, "", "__ne__"], [1000, 2, 1, "", "__str__"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "data", "Python data"], "5": ["py", "exception", "Python exception"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:data", "5": "py:exception"}, "terms": {"": [0, 1, 17, 29, 46, 47, 48, 49, 52, 53, 54, 55, 57, 61, 62, 63, 66, 70, 72, 75, 77, 78, 79, 80, 82, 83, 87, 89, 90, 91, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 109, 110, 111, 127, 128, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 203, 204, 205, 215, 227, 250, 251, 268, 269, 270, 282, 283, 287, 289, 291, 294, 296, 299, 301, 303, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 342, 344, 345, 346, 348, 349, 355, 358, 359, 360, 362, 365, 367, 370, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 411, 413, 416, 418, 421, 423, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 464, 466, 469, 471, 474, 476, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 516, 518, 520, 521, 523, 525, 528, 530, 533, 535, 537, 538, 539, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 565, 572, 573, 575, 587, 590, 593, 594, 595, 598, 599, 601, 602, 606, 610, 612, 614, 618, 625, 627, 635, 641, 648, 651, 661, 663, 664, 665, 666, 667, 694, 727, 738, 761, 773, 776, 777, 778, 782, 784, 786, 787, 789, 790, 791, 809, 817, 825, 830, 845, 848, 883, 891, 903, 919, 940, 990, 1002, 1004, 1007, 1009], "0": [0, 1, 15, 16, 17, 29, 41, 46, 47, 49, 51, 54, 55, 57, 67, 68, 70, 75, 79, 80, 81, 84, 85, 93, 95, 96, 106, 107, 112, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 184, 227, 289, 290, 294, 296, 306, 307, 308, 310, 312, 313, 314, 316, 318, 319, 325, 331, 333, 335, 337, 340, 342, 343, 344, 345, 346, 348, 358, 359, 360, 361, 365, 367, 377, 378, 380, 382, 383, 384, 386, 393, 398, 400, 402, 404, 408, 409, 411, 412, 416, 418, 428, 429, 431, 433, 434, 435, 437, 444, 450, 452, 454, 456, 461, 462, 464, 465, 469, 471, 481, 482, 483, 485, 487, 488, 489, 491, 493, 494, 500, 506, 508, 510, 512, 515, 516, 518, 519, 520, 521, 523, 524, 528, 530, 540, 541, 542, 544, 551, 553, 555, 559, 561, 572, 573, 576, 581, 584, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 625, 630, 633, 635, 648, 655, 658, 659, 661, 663, 664, 665, 667, 668, 669, 671, 672, 706, 761, 762, 773, 777, 781, 782, 785, 787, 788, 790, 791, 792, 793, 796, 806, 807, 808, 809, 810, 812, 816, 817, 820, 823, 824, 825, 826, 827, 829, 830, 834, 835, 840, 841, 842, 843, 845, 847, 848, 849, 850, 852, 853, 855, 856, 858, 860, 862, 863, 876, 881, 884, 885, 886, 887, 890, 891, 892, 895, 901, 913, 919, 923, 924, 925, 930, 932, 935, 936, 940, 941, 946, 979, 1002, 1004, 1007, 1009], "00": [1, 127, 128, 132, 135, 138, 307, 344, 377, 428, 482, 516, 540, 941, 1004], "000": 109, "000000": [1, 941], "000000e": [127, 128], "000123": 141, "000133446": 886, "000532": 762, "001": [595, 787], "001562": 762, "00193863362662502": 790, "003": 791, "0031": 672, "005": 791, "007022633956606": 672, "007446": 600, "0082138": [17, 67], "01": [138, 787], "0118478282382": 672, "0123": 141, "0123456789": 205, "012631": 762, "015": [606, 612], "016": 787, "02": [138, 143, 595], "020131": 600, "0220": [606, 612], "0225": 672, "029747": 762, "03": [138, 667], "0301": 672, "032": 787, "0341": 672, "036910": 600, "0378111988903307": 129, "03t14": 820, "04": [138, 787], "043888": 600, "044": 787, "044805": 762, "048219": 600, "05": [1, 138, 595, 600, 671, 787, 788, 790, 791, 944], "051": 787, "056": 791, "06": [138, 820], "0625": 604, "0633": 672, "065613": 600, "068310": 600, "07": 138, "0721": 672, "074": 791, "08": [138, 141, 787, 790], "083071": 142, "0874": 672, "088": 790, "0898": 672, "09": 138, "09392265": 1, "09861229": 593, "0i": 595, "0th": [836, 946], "1": [0, 1, 3, 16, 17, 29, 34, 46, 47, 48, 49, 51, 54, 55, 57, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 155, 156, 205, 215, 227, 230, 232, 289, 294, 296, 306, 307, 308, 314, 316, 329, 330, 331, 335, 340, 341, 342, 345, 346, 348, 349, 356, 357, 358, 359, 360, 365, 367, 377, 378, 384, 386, 396, 397, 398, 402, 407, 408, 411, 416, 418, 428, 429, 435, 437, 448, 449, 450, 454, 460, 461, 464, 469, 471, 481, 482, 483, 489, 491, 504, 505, 506, 510, 515, 517, 518, 520, 521, 523, 528, 530, 540, 541, 544, 549, 550, 551, 555, 559, 561, 572, 573, 576, 579, 581, 583, 584, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 625, 630, 632, 633, 635, 637, 648, 649, 655, 657, 658, 659, 661, 663, 664, 665, 666, 667, 668, 669, 671, 706, 728, 750, 761, 762, 773, 776, 777, 781, 784, 785, 787, 789, 790, 791, 792, 793, 806, 807, 808, 809, 810, 813, 816, 817, 819, 820, 823, 824, 825, 826, 827, 829, 830, 834, 835, 837, 840, 841, 842, 843, 845, 847, 848, 849, 850, 852, 853, 855, 856, 858, 860, 876, 881, 884, 886, 891, 892, 895, 899, 900, 901, 913, 923, 924, 925, 930, 932, 933, 935, 936, 940, 941, 946, 1004, 1007, 1009], "10": [17, 48, 67, 70, 85, 86, 128, 131, 132, 133, 134, 135, 137, 138, 139, 205, 215, 230, 289, 314, 360, 384, 411, 435, 464, 489, 523, 595, 600, 606, 612, 667, 762, 787, 790, 791, 796, 806, 809, 810, 814, 830, 834, 941, 1009], "100": [1, 127, 128, 132, 135, 230, 595, 600, 791, 825, 849, 1009], "1000": [230, 761], "1004": 672, "1004075": [606, 612], "100548": 762, "1007": [131, 606, 612], "101": 600, "10136628": 598, "102": 600, "1024": 130, "103": 600, "104": [142, 600], "1048576": 966, "104937": 762, "1055": 672, "10596": 128, "108": 787, "10915": [63, 66, 573], "10919": [63, 66, 573], "1093": [133, 941], "10937312": 1, "11": [0, 17, 63, 66, 67, 73, 78, 79, 127, 131, 138, 140, 289, 315, 385, 436, 464, 490, 543, 595, 600, 606, 612, 672, 762, 777, 784, 787, 806, 809, 810, 830, 941], "110": 600, "1115": 88, "112": 843, "1126": 88, "1131255": 966, "114": 127, "1154": 672, "116": 672, "1167": 777, "117": 663, "11704769": 601, "117693430600200007": 79, "1179": 777, "11th": 139, "12": [1, 131, 138, 523, 595, 600, 606, 787, 809, 810, 843, 1004], "120": [135, 600], "120492524415": 1007, "1215": 672, "123": [141, 761], "12345": [132, 523], "126": 133, "127": 790, "128": 600, "13": [0, 74, 96, 100, 128, 132, 138, 140, 289, 360, 411, 464, 523, 595, 600, 762, 809, 810, 853], "131": [96, 100, 884], "131567": 143, "1345": 71, "1347": 71, "135": [128, 606, 612], "1371": [17, 67, 606, 612], "139": 142, "14": [1, 74, 84, 95, 131, 133, 138, 310, 314, 380, 384, 431, 435, 485, 489, 595, 600, 672, 791, 810, 892, 930], "14092516": 602, "141": [95, 884], "142857": 668, "14285714": 608, "142857142857": 840, "143": 663, "1435": 132, "144": 100, "1457": 671, "1468": 671, "147": 64, "1495": 131, "149855": 132, "1499": 131, "15": [17, 63, 66, 84, 128, 138, 141, 672, 787, 790, 791, 810, 930], "1535": 881, "1542": [128, 881], "156": 81, "1566": 128, "157": 787, "1576": [106, 107], "15800534": 127, "1585": [106, 107], "16": [1, 77, 95, 129, 132, 133, 134, 138, 139, 306, 315, 340, 385, 436, 481, 490, 515, 543, 600, 773, 787, 791, 806, 810, 901, 930], "16025641": 1, "161": 127, "16247744": 596, "1627907": 1, "163": [75, 99, 100], "164998": 600, "165": 95, "168": [71, 790], "169": [106, 107], "17": [77, 79, 106, 107, 131, 138, 289, 464, 762, 790, 810], "170768970": 127, "172": [106, 107], "1740": 131, "17445763": 596, "1767": 133, "1771": 133, "1786181": 128, "18": [128, 138, 142, 663, 787, 1004], "1800": 131, "1814": 67, "182343": 600, "1859": 131, "1875": 604, "18761279": 596, "19": [1, 131, 138, 787, 809], "1907511": 131, "1912": 81, "1913": 68, "192": 142, "19234468": 134, "193": 70, "194": 95, "1943": 80, "1948": 98, "1949": [75, 99, 100], "195": 64, "1953": 82, "1955": 81, "1956": 72, "1958": 87, "1966": [96, 100], "1967": [88, 665], "1968": 97, "1970": [61, 71], "1974": [83, 89], "1976": 84, "1978": 573, "1981": [64, 884, 940], "1983": 78, "1984": [73, 289, 360, 411, 464, 523], "1985": [132, 289, 360, 411, 464, 523], "1986": [132, 137, 139, 777], "1987": [91, 941], "199": 134, "1990": [127, 128, 131], "1991": 131, "1992": [63, 66, 70, 79, 95, 573, 613], "1993": [70, 663, 664], "1995": 777, "1997": [79, 142, 941], "1998": [84, 762, 776, 777, 779, 780, 782, 784], "1d": [51, 104, 113, 289, 291, 296, 308, 309, 311, 312, 314, 315, 317, 327, 328, 329, 333, 334, 335, 336, 337, 339, 342, 362, 367, 378, 379, 381, 382, 384, 385, 387, 395, 396, 400, 401, 402, 403, 404, 406, 408, 411, 413, 418, 429, 430, 432, 433, 435, 436, 438, 447, 448, 452, 453, 454, 455, 456, 458, 459, 461, 464, 466, 471, 483, 484, 486, 487, 489, 490, 492, 502, 503, 504, 508, 509, 510, 511, 512, 514, 518, 523, 525, 530, 541, 542, 543, 548, 549, 553, 554, 555, 556, 558, 559], "1e": [128, 137, 944], "1e51ca3a5450c43524b9185c236cc5cc": 131, "1e9": 141, "1st": [41, 739, 946], "1x1": 139, "2": [0, 1, 17, 29, 34, 41, 46, 47, 48, 50, 51, 54, 55, 57, 61, 62, 63, 64, 65, 66, 70, 73, 75, 77, 79, 81, 84, 85, 86, 88, 89, 91, 95, 98, 99, 100, 106, 107, 108, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 156, 215, 227, 230, 232, 270, 289, 306, 307, 308, 314, 315, 316, 319, 327, 329, 331, 340, 342, 346, 349, 358, 359, 377, 378, 384, 385, 386, 395, 396, 398, 408, 428, 429, 435, 436, 437, 447, 448, 450, 461, 481, 482, 483, 489, 490, 491, 494, 502, 504, 506, 515, 518, 521, 523, 540, 541, 543, 544, 548, 549, 551, 559, 561, 572, 573, 579, 581, 584, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 625, 630, 633, 635, 637, 648, 655, 658, 659, 661, 663, 664, 665, 666, 667, 668, 669, 671, 672, 761, 762, 773, 776, 777, 779, 782, 784, 787, 789, 790, 791, 792, 793, 806, 807, 808, 809, 810, 813, 814, 817, 819, 820, 825, 832, 833, 834, 837, 840, 843, 849, 851, 852, 853, 856, 858, 860, 876, 881, 882, 884, 886, 891, 892, 897, 899, 900, 901, 924, 925, 930, 932, 933, 935, 936, 940, 941, 946, 1002, 1004, 1007, 1009], "20": [0, 138, 411, 595, 600, 773, 779, 787, 790, 791, 825], "200": [134, 600], "2000": [70, 791, 941], "2001": 666, "2002": [48, 79, 95, 103, 128, 132], "2003": [132, 592], "2004": 90, "2005": [106, 131], "2006": [79, 667, 941], "2007": [95, 106, 107], "2008": [132, 139], "2009": [133, 134, 671], "201": [70, 600], "2010": [79, 106, 107, 133], "2011": [85, 86, 95, 106, 107], "2012": [95, 134, 143, 665, 793, 860], "2013": [17, 67, 77, 95, 610, 773], "2014": [17, 67, 127, 139, 600, 610, 820], "2015": [48, 592, 595, 606, 612], "2016": [95, 606, 612], "2017": 881, "2018": 143, "202": 600, "2020": 143, "2022": 143, "2024": 141, "203": 600, "20309816": 672, "205": 664, "207": 95, "209": [131, 134, 665], "21": [131, 138, 595, 606, 612, 780, 791, 809, 825, 856], "210": 70, "2106": 95, "2107852473": 603, "2113": 95, "2130": 128, "21383822": 599, "215": [127, 128], "217": 70, "21712454": 773, "2186": 672, "219": [128, 131, 664], "22": [63, 66, 138, 143, 573, 595, 787, 825, 1004], "220": 665, "22054469": 602, "2208": 672, "2214": 128, "224": 787, "226": 791, "227": [70, 132], "229": 787, "23": [1, 138, 141, 142, 357, 595, 809, 825, 941, 1004], "23059566": 609, "23632778": 599, "2364": 672, "237": [82, 103], "238327": 762, "239": 940, "23e": 141, "24": [0, 128, 138, 573, 790, 820, 825], "24270353": 1, "245": 667, "246": [70, 103, 142], "24714631": 609, "25": [0, 1, 51, 64, 79, 84, 95, 106, 107, 109, 131, 137, 138, 312, 316, 318, 331, 335, 344, 348, 382, 386, 398, 402, 433, 437, 450, 454, 487, 491, 493, 506, 510, 516, 542, 544, 551, 555, 595, 607, 663, 664, 667, 672, 787, 790, 791, 840, 1004], "2500": 791, "253": 667, "255": [17, 777], "256": [97, 787], "257": 97, "25737316": 609, "259": 142, "25th": 595, "26": [77, 128, 137, 595, 666, 671, 773], "260656459": 134, "26118259": 599, "262": 84, "264": 82, "26433692": 1, "26488486": 609, "265": 73, "27": [0, 79, 98, 106, 107, 128, 411, 606, 665], "270": 73, "272": 791, "2761": 672, "278": 79, "28": [0, 95, 138, 787], "28571429": 608, "28865141": 599, "289": 777, "29": [131, 133, 134], "293463": 600, "29597001": 672, "29672718": 602, "2_": 70, "2a": 139, "2b": 81, "2d": [17, 61, 62, 63, 64, 65, 66, 104, 108, 109, 112, 561, 576, 585, 603, 669, 778, 785], "2e": 141, "2f_2": 73, "2nd": [739, 829, 946], "2nf_2": 78, "2x2": [1, 136, 834, 840], "2x3": [816, 817, 823, 824, 826, 827, 829, 835, 841, 842, 845, 847, 848, 850, 855, 856, 858], "3": [1, 17, 29, 34, 46, 47, 49, 51, 54, 55, 57, 58, 61, 65, 70, 78, 79, 82, 87, 95, 98, 103, 106, 107, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 205, 215, 227, 232, 294, 296, 306, 307, 308, 313, 314, 330, 331, 333, 339, 340, 342, 345, 346, 358, 359, 365, 367, 377, 378, 383, 384, 397, 398, 400, 406, 408, 411, 416, 418, 428, 429, 434, 435, 449, 450, 452, 458, 461, 469, 471, 481, 482, 483, 488, 489, 505, 506, 508, 514, 515, 518, 520, 521, 523, 528, 530, 540, 541, 550, 551, 553, 558, 559, 572, 581, 584, 587, 591, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 612, 614, 625, 630, 633, 635, 648, 655, 658, 659, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 695, 706, 739, 762, 763, 773, 776, 777, 782, 787, 789, 790, 791, 792, 806, 807, 808, 809, 810, 812, 813, 816, 817, 820, 823, 824, 825, 826, 827, 829, 830, 832, 834, 835, 837, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 858, 860, 876, 886, 891, 892, 899, 900, 901, 924, 928, 930, 932, 933, 935, 936, 941, 946, 1001, 1004, 1007, 1009], "30": [0, 128, 134, 135, 138, 140, 790, 791, 830, 914], "3021": [289, 360, 411, 464, 523], "30216948": 596, "3030": [289, 360, 411, 464, 523], "30409883": 598, "30870431": 1, "30927835": 1, "31": 128, "312": 142, "314": 131, "32": [138, 666], "32495488": 596, "32630": 134, "329": 127, "33": [47, 79, 106, 107, 133, 313, 383, 434, 488, 600, 664, 667, 787, 790, 1004], "330": 127, "332": 787, "33333333333333331": 1, "335928": 143, "34": [134, 140, 881], "34180297": 602, "343": 134, "344": 134, "3447015": 941, "345": 573, "34891526": 596, "34989": 132, "35": [1, 131, 133, 134, 140, 592, 791], "3519": 672, "352": 573, "354": 672, "355": [131, 672], "356": 672, "36": [87, 97, 138, 141, 606, 612, 787], "36463": 142, "36514837": 610, "37": [106, 142], "3716": 672, "375": 604, "379": 98, "379593": 966, "38": [0, 127, 133, 138, 787], "38629436": 593, "3899": 131, "39": [132, 138, 610], "3937": 71, "3e": [127, 128, 787], "3f": 671, "3k1v_a": 134, "3rd": [665, 739, 783, 946, 1009], "3x": 914, "3x2": 834, "3x3": [613, 665, 668, 669], "4": [0, 1, 29, 46, 49, 50, 53, 55, 68, 70, 79, 82, 95, 106, 107, 131, 132, 134, 137, 138, 139, 141, 142, 143, 205, 215, 227, 232, 289, 296, 301, 306, 307, 316, 326, 330, 340, 342, 345, 346, 348, 359, 367, 372, 377, 386, 394, 397, 408, 418, 423, 428, 437, 445, 449, 461, 471, 476, 481, 482, 491, 501, 505, 515, 518, 520, 521, 523, 530, 535, 540, 544, 547, 550, 559, 561, 572, 573, 581, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 608, 609, 610, 612, 625, 630, 635, 648, 655, 659, 661, 663, 665, 671, 762, 776, 777, 784, 787, 792, 806, 807, 808, 810, 813, 814, 820, 824, 825, 834, 843, 847, 848, 852, 853, 876, 886, 891, 892, 899, 900, 901, 930, 932, 933, 935, 936, 940, 941, 1004, 1007], "40": [1, 82, 132, 141, 143, 610, 789, 791, 820, 825], "400": 664, "402": 79, "403": [127, 128], "40824829": [610, 611], "41": [132, 138, 825], "410": [127, 128], "4140": 672, "4148": [75, 99, 100], "42": [1, 55, 80, 132, 138, 139, 141, 289, 312, 382, 433, 464, 487, 542, 664, 667, 816, 817, 823, 824, 825, 826, 827, 829, 835, 841, 842, 843, 845, 850, 855, 856, 858], "423": 98, "42512039": 1, "426": 791, "42857143": 608, "43": [55, 91, 138, 825, 845, 850, 940], "431": 95, "4375": 604, "44": [1, 96, 667, 825, 940], "443": 61, "444": 95, "45": [1, 138, 141, 791], "450": 664, "456": 776, "45995501": 773, "46": [138, 666, 791, 829, 845, 850], "4603377592": 135, "4603378712": 135, "4604421736": 135, "462339": 600, "466911": 762, "467481": 600, "46774194": 1, "4693": 132, "47": [138, 787, 850], "48": [61, 88], "480232": 600, "484": 787, "49": [0, 135, 138], "4hh": 131, "4x4": [663, 664, 930], "5": [0, 1, 17, 47, 55, 62, 65, 67, 74, 79, 81, 95, 106, 107, 109, 112, 126, 128, 131, 132, 133, 134, 137, 139, 142, 143, 205, 294, 296, 306, 307, 308, 314, 316, 318, 319, 325, 331, 337, 340, 342, 358, 365, 367, 377, 378, 384, 386, 393, 398, 404, 408, 416, 418, 428, 429, 435, 437, 444, 450, 456, 461, 469, 471, 481, 482, 483, 489, 491, 493, 494, 500, 506, 512, 515, 518, 528, 530, 540, 541, 544, 551, 559, 572, 573, 587, 590, 595, 600, 604, 607, 613, 625, 635, 648, 659, 661, 663, 664, 667, 668, 671, 762, 777, 787, 790, 791, 792, 796, 806, 807, 808, 809, 810, 820, 825, 833, 834, 843, 852, 856, 860, 876, 881, 885, 886, 888, 891, 892, 899, 900, 901, 923, 924, 925, 930, 932, 933, 940, 941, 944, 1007], "50": [1, 63, 66, 132, 135, 138, 307, 377, 428, 482, 540, 595, 600, 672, 773, 790, 791, 817, 1004], "500": [790, 791], "5007512": 773, "50th": [132, 595], "52": 138, "52199973": 672, "528": 790, "528243": 600, "53": [61, 138, 884], "530": 664, "533": 787, "533729": 600, "5338": 79, "54": [83, 107], "54772256": 610, "55": [138, 310, 380, 431, 485, 667, 672, 787, 941], "55152525": 142, "555": 83, "556061": 600, "5565": 128, "557": 83, "5587": 128, "56": [95, 310, 380, 431, 485], "560": 89, "5671": 128, "57": [128, 138, 777, 830], "572": 787, "58": [80, 138, 787], "581": 131, "59": 133, "5917809": 598, "594590": 600, "5990": 142, "5996": 142, "5e": 141, "6": [1, 49, 73, 74, 79, 93, 95, 106, 107, 128, 131, 132, 133, 134, 141, 142, 143, 306, 307, 315, 316, 339, 340, 342, 360, 377, 385, 386, 406, 408, 428, 436, 437, 458, 461, 481, 482, 490, 491, 514, 515, 518, 540, 543, 544, 558, 559, 587, 595, 597, 602, 605, 606, 608, 635, 659, 661, 665, 667, 668, 671, 762, 787, 806, 809, 810, 820, 825, 834, 840, 843, 876, 881, 891, 892, 900, 901, 930, 932, 933, 940, 1004], "60": [129, 130, 131, 135, 672, 790, 825], "601": 787, "601277": 600, "6018555": 665, "602": 787, "607": 672, "609": 131, "61": [138, 667, 791, 825], "617": 787, "619": 142, "62": [79, 106, 107, 129, 130, 133, 667, 825, 1004], "6212": 142, "6216": 672, "6234": 142, "627677": 600, "63": [128, 138, 825], "634": 672, "64": [1, 109, 133, 141, 348, 349, 825, 936], "641": 142, "646": 791, "646e": 787, "65": 672, "65463348": 773, "66": [134, 138, 313, 383, 434, 488, 667, 1004], "664": 787, "6666666666666667": 1007, "67": [134, 138, 306, 313, 340, 383, 434, 481, 488, 515, 663, 667, 777, 787, 1004], "68": [134, 672, 790], "6821": 128, "68235294": 1, "68339802": 601, "688": [75, 99, 100], "69": 138, "6913": 672, "692": 79, "6928": 128, "69314718": 593, "694": 79, "6e": 128, "6x6": [1, 667], "7": [1, 64, 74, 95, 109, 132, 133, 134, 142, 143, 205, 215, 227, 232, 289, 296, 307, 358, 367, 377, 418, 428, 464, 471, 482, 530, 540, 587, 600, 635, 661, 664, 665, 667, 668, 671, 762, 787, 793, 806, 809, 810, 843, 860, 886, 900, 924, 932, 933, 941, 945, 1004], "70": 138, "702656": 600, "70710678": [610, 611], "707221": 600, "71": [87, 106, 138, 142], "714286": 664, "71597633": 1, "72": 95, "73": [106, 107], "74": 138, "75": [1, 51, 79, 84, 106, 107, 333, 400, 452, 508, 553, 595, 613, 664, 667, 840, 843, 936], "750792": 600, "7559": 665, "755929": 668, "75th": 595, "76": [90, 95, 138], "77": [90, 667], "7715": 672, "771517": 664, "77549923": 1, "7768362": 601, "779": 787, "78": [138, 936], "78142077": 1, "783": 787, "78787879": 1, "788": 787, "79": [132, 135, 138], "793": 91, "79451346": 598, "8": [0, 1, 67, 127, 128, 133, 134, 139, 142, 143, 156, 232, 307, 316, 339, 344, 360, 377, 386, 406, 428, 437, 458, 482, 491, 514, 516, 540, 544, 558, 587, 606, 612, 635, 661, 664, 671, 762, 787, 791, 792, 806, 809, 810, 814, 843, 891, 900, 933, 941, 1004, 1007], "80": [70, 132, 762, 790, 791, 825, 881, 936, 1009], "803": 91, "80332382": 773, "806": 791, "81": 825, "810": 664, "811": 128, "81521739": 1, "81649658": [610, 611], "818": 84, "82": [128, 129, 142, 825], "820": 84, "8228": 106, "8235": 106, "824": 791, "82857143": 1, "82967033": 1, "83": [126, 825, 860], "8304": 672, "832": 671, "836": 787, "838": 787, "84": 825, "844": 787, "8468": 128, "848": 787, "85": [131, 138, 791, 936], "8547619": 1, "8552": 128, "857142857143": 840, "85714286": 1, "86": [289, 464], "86111111": 1, "86666667": 1, "86813187": 1, "87": [70, 138], "87709497": 1, "87777778": 1, "88": [142, 667, 790], "884420": 820, "884498": 600, "89": [63, 66, 134, 573], "89285714": 1, "8e": 128, "9": [1, 127, 128, 129, 132, 135, 138, 141, 142, 184, 205, 215, 289, 310, 314, 360, 380, 384, 411, 431, 435, 464, 485, 489, 523, 595, 600, 671, 672, 762, 776, 777, 779, 780, 782, 783, 784, 787, 806, 809, 810, 888, 891, 900, 930, 933, 940, 941, 1004], "90": [48, 135, 600, 1009], "900": 230, "905": 78, "909": 128, "912": 78, "91769271": 773, "92": 664, "9223489": 142, "922404392093": 1, "9230769230": 591, "928": 787, "93": 133, "932": 787, "939336": 1, "94": [128, 138], "95": [74, 78, 79, 85, 133, 138, 881], "952": 791, "95224719": 1, "956": 787, "96": [74, 135], "97": [138, 600], "978387": 600, "984": 787, "98435423": 1, "98796148": 1, "99": [127, 128, 131, 138, 663, 667, 671, 843], "991987": 600, "996": [787, 791], "999": [1, 523, 663, 665, 666, 667, 668, 671], "999887756453524252": 142, "9e": 127, "9f": 886, "A": [1, 17, 29, 50, 51, 54, 55, 56, 59, 61, 63, 66, 70, 73, 78, 79, 80, 81, 83, 84, 90, 95, 98, 106, 107, 109, 123, 125, 127, 129, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 169, 173, 174, 179, 186, 187, 205, 226, 230, 231, 252, 270, 285, 289, 310, 316, 322, 338, 342, 349, 355, 360, 380, 386, 390, 405, 408, 411, 431, 437, 441, 457, 461, 464, 485, 491, 497, 513, 518, 523, 544, 557, 559, 561, 572, 573, 577, 579, 581, 582, 586, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 625, 628, 630, 631, 634, 635, 637, 648, 652, 655, 656, 660, 661, 664, 665, 666, 667, 669, 671, 684, 706, 728, 772, 773, 774, 776, 777, 782, 784, 789, 790, 791, 796, 807, 808, 809, 813, 818, 819, 820, 821, 829, 836, 842, 844, 845, 846, 847, 848, 849, 852, 853, 854, 856, 861, 862, 863, 876, 881, 884, 886, 887, 890, 891, 892, 893, 896, 897, 898, 900, 901, 903, 910, 918, 920, 922, 923, 928, 930, 937, 938, 940, 990, 1002, 1007, 1009], "AS": 142, "AT": [47, 132, 133, 139], "And": [135, 289, 411, 607, 1004], "As": [1, 131, 134, 137, 141, 523, 583, 632, 657, 665, 667, 777, 894, 1002, 1009], "At": [141, 144, 809], "Be": 523, "By": [55, 84, 95, 104, 108, 132, 134, 141, 595, 667, 781, 782, 785, 819, 831, 930, 941, 968], "For": [1, 29, 48, 56, 60, 67, 95, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 215, 230, 231, 232, 233, 270, 285, 288, 289, 338, 347, 405, 410, 411, 457, 463, 464, 513, 522, 523, 557, 560, 573, 582, 588, 595, 600, 631, 636, 656, 662, 663, 664, 665, 666, 667, 669, 671, 673, 739, 773, 774, 775, 776, 777, 787, 789, 790, 791, 793, 809, 814, 815, 836, 844, 849, 859, 860, 881, 918, 939, 940, 942, 943, 1002, 1004, 1007], "IF": 836, "IN": 142, "If": [1, 17, 29, 46, 48, 49, 51, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 70, 73, 74, 79, 80, 81, 85, 91, 95, 104, 106, 107, 108, 109, 112, 113, 123, 127, 130, 132, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 155, 156, 157, 170, 172, 176, 177, 180, 181, 184, 197, 198, 199, 205, 214, 218, 231, 232, 244, 245, 246, 262, 263, 264, 270, 279, 280, 283, 284, 285, 289, 291, 296, 306, 307, 308, 310, 312, 314, 316, 319, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 340, 342, 343, 358, 360, 362, 367, 377, 378, 380, 382, 384, 386, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 408, 409, 411, 413, 418, 428, 429, 431, 433, 435, 437, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 461, 462, 464, 466, 471, 481, 482, 483, 485, 487, 489, 491, 494, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 515, 518, 519, 520, 521, 523, 525, 530, 540, 541, 542, 544, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 565, 572, 573, 575, 576, 577, 580, 581, 582, 587, 590, 591, 595, 597, 600, 601, 602, 604, 605, 611, 614, 618, 625, 627, 628, 629, 630, 631, 635, 641, 648, 651, 652, 653, 654, 655, 656, 661, 663, 664, 665, 666, 667, 668, 669, 671, 706, 717, 750, 761, 772, 773, 774, 776, 777, 778, 781, 782, 785, 787, 788, 789, 790, 791, 792, 796, 804, 806, 809, 810, 812, 813, 814, 817, 818, 819, 820, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 858, 881, 883, 884, 888, 891, 894, 895, 899, 904, 907, 909, 912, 918, 923, 924, 925, 930, 932, 933, 934, 940, 941, 944, 945, 946, 947], "In": [1, 17, 48, 79, 95, 106, 107, 109, 132, 133, 134, 135, 137, 139, 143, 270, 289, 319, 358, 411, 464, 494, 561, 592, 595, 600, 613, 664, 665, 671, 761, 776, 777, 782, 787, 791, 806, 861, 881, 894, 940, 1002, 1004, 1007, 1009], "It": [1, 17, 68, 75, 79, 80, 82, 95, 102, 126, 127, 129, 132, 133, 134, 135, 137, 139, 141, 143, 156, 205, 215, 218, 226, 227, 229, 230, 232, 289, 325, 337, 393, 404, 411, 444, 456, 464, 500, 512, 516, 595, 598, 600, 604, 613, 654, 665, 666, 671, 694, 695, 727, 738, 750, 776, 777, 781, 784, 787, 790, 791, 817, 856, 861, 862, 863, 887, 890, 944, 966, 990, 1004], "Its": 784, "NOT": [17, 89, 184], "No": [30, 74, 127, 128, 131, 140, 143, 215, 305, 376, 427, 480, 539, 665], "Not": [133, 289, 342, 408, 461, 518, 559, 667], "ONE": [17, 67], "OR": 30, "Of": 134, "On": 782, "One": [79, 139, 144, 284, 600, 649, 941], "That": [96, 100, 137, 332, 399, 451, 507, 552], "The": [0, 1, 17, 18, 46, 47, 48, 49, 50, 52, 53, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 79, 80, 81, 82, 84, 89, 91, 95, 96, 97, 98, 100, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 155, 156, 157, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 197, 202, 203, 204, 205, 206, 215, 216, 217, 226, 227, 228, 229, 230, 231, 233, 234, 244, 249, 250, 251, 262, 267, 268, 269, 270, 279, 280, 282, 283, 284, 285, 286, 287, 288, 291, 294, 296, 301, 306, 307, 308, 310, 312, 316, 324, 326, 327, 329, 330, 331, 338, 340, 342, 346, 347, 348, 357, 358, 359, 362, 365, 367, 372, 377, 378, 380, 382, 386, 392, 394, 395, 396, 397, 398, 405, 408, 410, 413, 416, 418, 423, 428, 429, 431, 433, 437, 443, 445, 447, 448, 449, 450, 457, 461, 463, 464, 466, 469, 471, 476, 481, 482, 483, 485, 487, 491, 499, 501, 502, 504, 505, 506, 513, 515, 518, 521, 522, 523, 525, 528, 530, 535, 540, 541, 542, 544, 546, 547, 548, 549, 550, 551, 557, 559, 560, 561, 565, 572, 577, 582, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 604, 605, 607, 609, 610, 611, 614, 618, 625, 628, 631, 635, 636, 637, 641, 648, 649, 652, 654, 656, 659, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 684, 706, 717, 728, 750, 761, 763, 774, 775, 776, 777, 781, 782, 783, 784, 787, 788, 789, 790, 791, 793, 796, 804, 805, 806, 807, 808, 809, 810, 813, 816, 818, 819, 821, 822, 823, 824, 825, 826, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 855, 856, 857, 859, 860, 876, 877, 882, 883, 884, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 899, 900, 901, 903, 907, 909, 910, 913, 918, 919, 921, 922, 924, 925, 926, 927, 930, 932, 939, 940, 941, 944, 947, 965, 967, 968, 1002, 1004, 1007, 1009], "Then": [1, 595, 607, 672, 762], "There": [1, 55, 80, 91, 128, 134, 137, 140, 313, 383, 434, 488, 637, 782, 790, 791, 809, 834, 1002, 1007, 1009], "These": [0, 1, 47, 52, 53, 69, 79, 106, 107, 134, 137, 141, 142, 143, 234, 324, 326, 392, 394, 443, 445, 499, 501, 546, 547, 589, 668, 670, 763, 783, 789, 796, 834], "To": [1, 36, 79, 106, 107, 132, 133, 134, 137, 140, 141, 144, 184, 270, 289, 411, 464, 595, 600, 637, 659, 663, 665, 667, 671, 787, 881, 1002, 1009], "Will": [51, 175, 178, 182, 184, 202, 249, 267, 286, 574, 586, 626, 634, 650, 660, 763, 792], "With": [127, 592, 604], "_": [70, 129, 132, 133, 137, 142, 227, 294, 365, 416, 469, 528, 613, 665, 841], "_1": 137, "__": 134, "____________1______________2_________": 142, "________________": 142, "____________________": 142, "__copy__": [33, 217], "__deepcopy__": [32, 216], "__eq__": [43, 194, 224, 241, 259, 277, 570, 623, 646], "__init__": [144, 155, 157], "__iter__": 54, "__locat": 134, "__ne__": [188, 235, 253, 271], "__reversed__": 54, "_block_comput": 109, "_ci": 69, "_except": 139, "_interval_tre": 215, "_io": [126, 130], "_is_stale_tre": 215, "_leaf_index": 903, "_myformat_sniff": 144, "_myformat_to_some_skbio_class": 144, "_not_": [809, 937], "_rebuild_tre": 215, "_setup_debug_trac": 978, "_some_skbio_class_to_myformat": 144, "_tree": 940, "aT": 133, "a_1": 137, "aa": [54, 132, 134, 139, 348], "aaa": [142, 329, 396, 448, 504, 549], "aaaaaaaaa": 131, "aaaaaaaaaa": 131, "aaaaaaattttttt": 1009, "aaaaaactctctaaactcactaaggctctctacccctcttcagagaagtcga": 0, "aaaaaccgat": 131, "aaaataaata": 131, "aaacaaacca": 131, "aaaccattgc": [132, 139], "aaacccttgc": [132, 139], "aaacccttgccg": 132, "aaacccttgccggtacgcttaaaccattgccggtacgcttaa": 132, "aaacccttgccgttacgcttaaaccgaggccgggacactcat": 132, "aaaccgaggc": [132, 139], "aaagataggc": 131, "aaatatggat": 131, "aaatcctatg": 131, "aac": 140, "aacaaatgca": 131, "aacaacagga": 131, "aacaccaaacttctccacc": 133, "aacaccaaacttctccaccacgtgagctacaaaag": 133, "aaccttatca": 131, "aacgaaggcg": 131, "aactttgtag": 131, "aagaactttc": 131, "aagaggttac": 131, "aagcctggtg": 131, "aagccttggc": 132, "aagccttggcagtgcagggtgagccgtgg": 132, "aagccttggcagtgcagggtgagccgtggccgggcacggtat": 132, "aagctngggc": [132, 139], "aagctngggcatttcagggtgagcccgggcaatacagggtat": 132, "aagga": [296, 367, 418, 471, 530], "aaggaatcaa": 131, "aaggaatttg": 131, "aagtaa": [306, 481], "aagtatttgg": 131, "aagtcttaga": 131, "aagtcttttt": 131, "aagttgttag": 131, "aagucuuuuu": 131, "aata": 140, "aataaac": 140, "aataagtgca": 131, "aatacagggt": [132, 139], "aatataccggttataa": [315, 385, 436, 490, 543], "aatatggatt": 131, "aatgaa": [306, 328, 340, 481, 503, 515], "aatgtt": [328, 503], "aatt": 809, "aattaaataa": 131, "aattctggat": 131, "aattg": 1009, "aattgccggac": 1009, "aattgg": 761, "aauauggauu": 131, "ab": [133, 360], "ab07acbb1e496801937adfa772424bf7": 966, "ababacac": 360, "abbrevi": [143, 763], "abc": [129, 294, 360, 365, 416, 469, 528], "abcd": 941, "abcdef": 1, "abil": 137, "abl": [29, 49, 109, 289, 411, 464, 523, 595, 790, 891], "about": [1, 56, 60, 91, 123, 124, 129, 132, 133, 137, 141, 142, 144, 187, 215, 231, 233, 234, 252, 270, 285, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 590, 631, 636, 656, 662, 762, 774, 775, 784, 790, 791, 809, 839, 844, 849, 859, 918, 939, 942, 943, 1003, 1004], "abov": [0, 1, 55, 132, 134, 138, 139, 140, 141, 142, 144, 155, 157, 289, 411, 464, 523, 613, 663, 665, 667, 671, 1004], "absenc": [74, 791, 841], "absent": [342, 408, 461, 518, 559, 782], "absolut": [592, 600, 665, 849, 965], "abstract": [234, 360], "abund": [1, 70, 71, 79, 81, 84, 91, 95, 103, 104, 106, 107, 108, 109, 112, 126, 595, 600, 762, 776, 777, 783, 784, 791, 843, 849], "abx": 789, "ac": [30, 31, 32, 33, 34, 39, 41, 44, 47, 49, 51, 55, 57, 58, 61, 64, 131, 133, 134, 142, 205, 317, 387, 438, 492, 1004], "aca": [330, 331, 397, 398, 449, 450, 505, 506, 550, 551], "acaatcaaat": 131, "acac": [321, 330, 389, 397, 440, 449, 496, 505, 550], "acacatttatta": [331, 398, 450, 506, 551], "acacgacgtt": [322, 327, 330, 390, 395, 397, 441, 447, 449, 497, 502, 505, 548, 550], "acad": [63, 66], "academ": 72, "academi": 573, "acagaattga": 131, "acaggttggc": [132, 139], "acata": 133, "acatggcaat": 131, "acatgggata": 131, "acc": [0, 128, 1004], "accaatattt": 131, "accaatttga": 131, "acccc": 0, "acceler": 792, "accept": [1, 29, 57, 109, 339, 345, 346, 406, 458, 514, 520, 521, 558, 573, 589, 595, 665, 669, 671, 787, 790, 791, 896, 925, 933, 936, 990], "acces": 127, "access": [3, 52, 53, 125, 131, 132, 134, 143, 270, 324, 326, 349, 355, 392, 394, 443, 445, 499, 501, 546, 547, 613, 941, 947], "accgaat": 289, "accgaau": 464, "accgggta": 1004, "accggttggc": 132, "accggttggccgttcagggtacaggttggccgttcagggtaa": 132, "accgttcg": 142, "accgttgta": [129, 139], "accguuaguc": 1004, "accident": 942, "accommod": 205, "accompani": [132, 614, 943], "accomplish": [1, 592, 1002], "accord": [75, 79, 289, 411, 464, 781, 785, 847, 848], "account": [113, 343, 409, 462, 519, 706, 776, 784, 791, 1007], "accumul": [87, 90, 876], "accumulate_to_ancestor": 892, "accur": [81, 85, 86], "accuraci": [667, 782], "acdfnasanftacgnpnrtesl": [329, 396, 448, 504, 549], "acg": [30, 31, 32, 33, 34, 39, 41, 44, 51, 54, 55, 57, 58, 140, 142, 327, 330, 395, 397, 447, 449, 502, 505, 548, 550], "acga": [46, 49, 294, 303, 365, 374, 416, 425, 469, 478, 528, 537], "acgaactatt": 131, "acggggaggcggag": [314, 384, 435, 489], "acgggu": 1004, "acgt": [29, 46, 49, 50, 52, 53, 59, 290, 294, 303, 307, 318, 319, 324, 326, 328, 332, 361, 365, 374, 377, 392, 394, 399, 412, 416, 425, 428, 443, 445, 451, 465, 469, 478, 482, 493, 494, 499, 501, 503, 507, 523, 524, 528, 537, 540, 546, 547, 552, 561, 579], "acgta": 140, "acgtac": 140, "acgtacgt": [318, 493], "acgtgagctacaaaag": 133, "acgtgccta": 0, "acgtgcctaggtacgcaag": 0, "acgtggaa": [307, 377, 428, 482, 540], "acgtn": [342, 408, 461, 518, 559], "acgtu": 68, "achiev": [95, 1004], "acid": [61, 63, 66, 131, 132, 133, 136, 139, 143, 289, 342, 348, 358, 360, 408, 411, 461, 464, 518, 523, 559, 561, 573], "acquir": 790, "across": [51, 95, 132, 133, 139, 215, 284, 595, 600, 665, 790, 810, 940], "act": [0, 55, 155, 156, 157], "actaaggctc": 0, "actaaggctcctaacccccttttctcaga": 0, "actaaggctctct": 0, "actaaggctctctacccctctcagaga": 0, "actacattcg": 131, "actatacgga": 131, "actcat": 132, "action": 234, "activ": 1001, "acttagtt": [318, 493], "actual": [96, 100, 141, 144, 175, 665], "acwgn": [309, 311, 337, 379, 381, 404, 430, 432, 456, 484, 486, 512], "ad": [17, 61, 62, 63, 64, 65, 66, 132, 142, 226, 523, 595, 600, 777, 780, 809, 834, 967, 1007], "adapt": [849, 940], "adata": 851, "add": [1, 62, 65, 141, 142, 144, 168, 205, 215, 227, 229, 294, 365, 416, 469, 523, 528, 597, 604, 605, 607, 608, 609, 804, 805, 809, 829, 850, 878, 891, 893], "add_format": [155, 157], "addit": [1, 67, 68, 79, 105, 106, 107, 111, 131, 132, 133, 134, 135, 139, 140, 141, 202, 249, 267, 270, 286, 289, 411, 464, 561, 592, 593, 594, 595, 613, 637, 861, 882, 894, 895, 940, 967, 1002], "addition": [1, 126, 137, 184, 215, 848, 1004, 1007], "additon": 132, "address": [595, 1002], "adenin": [289, 464], "adequ": 790, "adher": 141, "adiv_faith_pd": 1, "adiv_sob": 1, "adjac": [329, 396, 448, 504, 549, 818], "adjust": 95, "adoni": 666, "adopt": [95, 342, 408, 461, 518, 559], "advanc": 1, "advantag": [95, 637, 967], "advis": [106, 107, 112], "ae000111": 128, "ae000171": 128, "ae000174": 128, "ae000394": 128, "ae000425": 128, "af031394": 128, "af035635": 142, "af178031": 128, "af178032": 128, "af178033": 128, "affect": [132, 137, 348, 349, 355, 523, 663, 667], "aforement": 143, "after": [17, 46, 49, 61, 62, 63, 132, 133, 141, 142, 143, 144, 218, 229, 284, 600, 606, 607, 664, 665, 668, 671, 776, 791, 915, 917, 934], "ag": [29, 46, 49, 51, 613, 789, 790], "agaagacc": [316, 386, 437, 491, 544], "agaagctatg": 131, "agaagctctt": 131, "agaagcuaug": 131, "agacatcacg": 131, "agagcatgcg": 131, "agaggttcta": 134, "agagguucua": 134, "agagttgaag": 139, "agagttgaaggtatct": [129, 139], "again": [1, 132, 133, 270, 610, 840, 941], "against": [34, 43, 61, 64, 133, 206, 212, 218, 224, 294, 303, 349, 355, 365, 374, 416, 425, 469, 478, 528, 537, 595, 671, 807, 808, 884], "agatataaag": 131, "agatcttttg": 131, "agatgagtat": 131, "agctttctgc": 131, "agg": 1004, "aggaccttat": 131, "aggctc": 0, "aggctcccttctacccctctcagaga": 0, "agggaaagtt": 131, "agggctggct": 131, "agggga": 1004, "agggta": 590, "aggreg": 1009, "aggtacccta": 131, "aggtgcagta": 131, "agre": [176, 180], "agtactctaa": 131, "agtgcagggt": [132, 139], "aguauucugccacuguaagaa": 358, "aguc": [312, 333, 335, 382, 400, 402, 433, 452, 454, 487, 508, 510, 542, 553, 555], "ahead": 1009, "aiacaqkm": 142, "aim": 762, "ainsworth": 664, "aitchison": [592, 593, 594, 598, 599, 601, 602, 610], "aitchson": 603, "al": [595, 600, 671, 793, 860], "ala": 411, "alanin": [48, 411], "aldex2": 600, "alexandro": 881, "algorithm": [61, 64, 134, 663, 664, 665, 667, 672, 673, 684, 695, 706, 717, 728, 739, 750, 776, 777, 784, 884, 941, 942, 1001], "alia": [3, 79, 92, 93, 95, 106, 107, 135, 583, 595, 605, 632, 657, 907, 909], "alic": 523, "alig": 16, "align": [127, 128, 132, 133, 205, 215, 523, 561, 806, 807, 808, 1001, 1002, 1004], "aligned_query_sequ": 0, "aligned_target_sequ": 0, "alignmentstructur": 18, "all": [1, 17, 29, 30, 47, 48, 52, 53, 55, 61, 62, 63, 68, 70, 79, 80, 81, 91, 95, 96, 100, 103, 104, 106, 107, 108, 109, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 145, 169, 179, 198, 205, 215, 218, 227, 229, 230, 245, 263, 282, 284, 289, 307, 310, 313, 316, 324, 326, 329, 339, 343, 358, 377, 380, 383, 386, 392, 394, 396, 406, 409, 411, 428, 431, 434, 437, 443, 445, 448, 458, 462, 464, 482, 485, 488, 491, 499, 501, 504, 514, 519, 523, 540, 544, 546, 547, 549, 558, 561, 572, 573, 577, 579, 587, 595, 597, 600, 604, 605, 607, 608, 609, 610, 613, 625, 628, 635, 648, 652, 659, 661, 663, 664, 665, 666, 667, 668, 695, 706, 750, 761, 762, 773, 781, 782, 790, 791, 792, 809, 810, 813, 817, 850, 858, 861, 877, 880, 881, 882, 891, 894, 895, 896, 907, 909, 910, 913, 920, 925, 926, 928, 930, 940, 967, 968, 1007], "all_char": 137, "allow": [127, 132, 133, 137, 139, 140, 141, 144, 155, 157, 184, 215, 289, 307, 316, 377, 386, 411, 428, 437, 464, 482, 491, 540, 544, 565, 572, 592, 618, 625, 641, 648, 663, 664, 666, 667, 668, 672, 782, 793, 809, 860, 891, 933, 968, 1009], "allow_empti": 933, "allow_overlap": [572, 625, 648], "allvltkt": 142, "almost": 944, "alon": [137, 664], "along": [136, 773, 781, 782, 826, 847, 858], "alpha": [104, 110, 595, 787, 788, 792, 1001], "alpha_divers": [1, 79, 95, 108, 110], "alpha_pwr": [787, 790, 791], "alphabet": [0, 58, 68, 110, 111, 127, 132, 289, 342, 348, 360, 408, 411, 461, 464, 518, 523, 559, 561, 573, 576, 579, 590, 1004], "alphanumer": 141, "alr": 594, "alreadi": [137, 142, 144, 155, 156, 157, 523, 614, 665], "also": [0, 1, 47, 48, 75, 79, 99, 105, 106, 107, 108, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 215, 270, 319, 329, 339, 342, 358, 396, 406, 408, 448, 458, 461, 494, 504, 514, 518, 523, 549, 558, 559, 561, 595, 610, 611, 613, 663, 664, 665, 667, 671, 762, 777, 784, 787, 790, 791, 814, 819, 831, 944, 990, 1002, 1004, 1009], "alter": 943, "altern": [57, 143, 144, 341, 358, 407, 460, 517, 577, 592, 606, 612, 628, 652, 665, 667, 668, 671, 782, 787, 899, 925], "although": [95, 671, 790, 810], "altschul": [127, 128], "alwai": [1, 17, 131, 134, 137, 139, 141, 156, 184, 202, 205, 226, 249, 267, 270, 284, 286, 358, 834, 891, 947, 1009], "amar": 134, "ambigu": [177, 181], "amen": 593, "american": 70, "amino": [61, 63, 66, 131, 132, 136, 289, 342, 348, 358, 408, 411, 461, 518, 559, 561, 573], "amino_acid": [348, 349, 355], "among": [1, 75, 95, 134, 587, 635, 661, 673, 777, 784, 1005], "amount": [668, 861, 1009], "amplicon": [1, 806], "amsterdam": [762, 776, 777, 784], "an": [0, 1, 3, 17, 29, 31, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 67, 79, 80, 82, 88, 92, 93, 104, 106, 107, 108, 112, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 155, 156, 157, 170, 172, 173, 174, 176, 178, 180, 182, 184, 185, 199, 200, 205, 215, 226, 227, 229, 230, 232, 233, 246, 247, 264, 265, 270, 284, 288, 296, 307, 314, 323, 324, 326, 333, 335, 339, 342, 347, 348, 358, 360, 367, 377, 384, 391, 392, 394, 400, 402, 406, 408, 410, 418, 428, 435, 442, 443, 445, 452, 454, 458, 461, 463, 464, 471, 482, 489, 498, 499, 501, 508, 510, 514, 518, 522, 523, 530, 540, 545, 546, 547, 553, 555, 558, 559, 560, 561, 565, 572, 575, 577, 579, 583, 587, 588, 595, 598, 599, 601, 602, 605, 607, 610, 611, 613, 618, 625, 627, 628, 632, 635, 636, 641, 648, 649, 651, 652, 657, 661, 662, 663, 665, 666, 667, 671, 683, 705, 716, 728, 749, 760, 761, 762, 772, 775, 781, 782, 787, 789, 790, 791, 792, 793, 796, 804, 805, 806, 812, 813, 816, 817, 818, 819, 824, 826, 827, 829, 832, 833, 834, 835, 837, 839, 840, 850, 853, 856, 857, 858, 859, 860, 862, 863, 876, 878, 879, 881, 883, 887, 889, 890, 894, 897, 898, 900, 907, 909, 912, 922, 925, 930, 932, 935, 937, 938, 939, 940, 941, 942, 947, 948, 951, 958, 964, 965, 966, 968, 990, 1002, 1004, 1007, 1009], "analog": 95, "analogu": 667, "analys": [79, 106, 107, 663, 1005], "analysi": [1, 79, 91, 106, 107, 132, 139, 592, 593, 595, 600, 610, 663, 666, 667, 672, 673, 694, 695, 727, 738, 739, 750, 773, 776, 777, 782, 783, 784, 787, 790, 791], "analyt": 80, "analyz": [1, 592, 777, 790], "ancacwwgacgtt": [320, 321, 325, 388, 389, 393, 439, 440, 444, 495, 496, 500], "ancestor": [79, 95, 307, 377, 428, 482, 540, 876, 907, 909], "ancestr": 79, "ancom_df": 595, "anderson": [666, 667], "ani": [1, 17, 47, 48, 55, 57, 67, 68, 71, 102, 103, 132, 134, 136, 137, 141, 142, 155, 156, 157, 177, 181, 184, 197, 202, 205, 215, 229, 230, 244, 249, 262, 267, 270, 280, 283, 286, 289, 411, 464, 523, 561, 590, 595, 597, 665, 668, 672, 706, 728, 776, 781, 787, 789, 790, 814, 819, 843, 853, 855, 878, 881, 882, 883, 893, 901, 930, 932, 940, 967, 968, 978, 990, 1007, 1009], "anim": 80, "ann": [78, 97], "anndata": 851, "annot": [131, 134, 135, 141, 215], "announc": 141, "anosim": [1, 666, 667], "anoth": [1, 34, 43, 46, 55, 79, 106, 107, 134, 136, 137, 188, 194, 206, 212, 215, 218, 224, 229, 232, 235, 241, 253, 259, 271, 277, 294, 303, 312, 334, 336, 349, 355, 365, 374, 382, 401, 403, 416, 425, 433, 453, 455, 469, 478, 487, 509, 511, 523, 528, 537, 542, 554, 556, 561, 563, 616, 639, 671, 806], "anova": [595, 666, 683, 684, 705, 716, 749, 760], "answer": 966, "anti": [1, 663], "antibiot": [607, 789], "anticip": 1009, "anyon": 141, "anyth": [1, 132, 133, 140, 144, 523, 853, 967, 978, 990, 1009], "anytim": 141, "anywher": [136, 137, 141, 595], "apart": 923, "api": [132, 270, 589], "app": 140, "appear": [1, 70, 127, 139, 141, 142, 575, 627, 651, 664, 776, 777, 782, 787, 796], "append": [0, 49, 139, 144, 523, 893], "appl": [106, 107], "appli": [0, 1, 17, 29, 48, 52, 53, 104, 107, 108, 109, 112, 131, 132, 137, 141, 143, 215, 234, 289, 324, 326, 392, 394, 411, 443, 445, 464, 499, 501, 523, 546, 547, 561, 577, 592, 628, 652, 654, 665, 668, 672, 776, 790, 813, 834, 840, 843, 856, 941, 968, 1009], "applic": [17, 48, 61, 67, 270, 762, 886, 1009], "approach": [600, 665, 790, 862, 863, 887, 890], "appropri": [1, 125, 136, 184, 307, 377, 428, 482, 540, 595, 1002, 1007], "approx": 787, "approxim": [784, 787], "aqfvdhwkel": 130, "aquat": 777, "ar": [0, 1, 17, 29, 30, 34, 39, 43, 44, 47, 48, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 75, 79, 80, 85, 86, 95, 104, 106, 107, 108, 109, 111, 112, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 155, 156, 157, 169, 176, 179, 180, 184, 188, 194, 197, 198, 205, 206, 212, 218, 224, 227, 229, 231, 232, 233, 234, 235, 241, 244, 245, 253, 259, 262, 263, 270, 271, 277, 279, 280, 282, 283, 284, 285, 288, 289, 294, 296, 303, 306, 307, 313, 316, 320, 321, 322, 325, 333, 334, 335, 336, 338, 339, 342, 344, 345, 346, 347, 348, 349, 355, 357, 358, 359, 360, 365, 367, 374, 377, 383, 386, 388, 389, 390, 393, 400, 401, 402, 403, 405, 406, 408, 410, 411, 416, 418, 425, 428, 434, 437, 439, 440, 441, 444, 446, 452, 453, 454, 455, 457, 458, 461, 463, 464, 469, 471, 478, 481, 482, 488, 491, 495, 496, 497, 500, 508, 509, 510, 511, 513, 514, 516, 518, 520, 521, 522, 523, 528, 530, 537, 540, 544, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 570, 573, 576, 577, 582, 583, 587, 588, 590, 591, 592, 593, 595, 597, 600, 601, 602, 604, 605, 607, 608, 609, 610, 613, 614, 616, 618, 623, 628, 631, 632, 635, 636, 637, 639, 641, 646, 652, 654, 656, 657, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 684, 706, 750, 761, 762, 763, 772, 773, 774, 775, 776, 777, 780, 781, 782, 784, 785, 787, 789, 790, 791, 793, 796, 809, 810, 813, 815, 819, 825, 834, 836, 844, 846, 847, 848, 849, 851, 852, 853, 858, 859, 860, 861, 881, 884, 889, 899, 910, 912, 913, 917, 918, 925, 926, 930, 932, 933, 934, 939, 940, 942, 944, 945, 947, 964, 967, 968, 979, 990, 1002, 1004, 1007, 1009], "arang": [825, 830], "arbitrari": [29, 47, 50, 136, 141, 142, 289, 411, 464, 523, 761, 819, 853, 967, 1004], "arbitrarili": [940, 1009], "archaea": [899, 900, 933], "archiv": [143, 966], "area": [1, 81], "arg": [144, 169, 179, 345, 346, 411, 520, 521, 796], "arginin": 411, "argument": [17, 29, 56, 57, 60, 67, 123, 124, 136, 155, 156, 157, 169, 176, 177, 178, 179, 180, 181, 182, 231, 233, 285, 288, 332, 338, 345, 346, 347, 399, 405, 410, 451, 457, 463, 507, 513, 520, 521, 522, 552, 557, 560, 561, 577, 582, 588, 593, 628, 631, 636, 652, 656, 662, 669, 774, 775, 796, 844, 859, 918, 939, 967, 990], "argumentoverridewarn": [176, 180], "aris": [932, 940], "around": [85, 86, 109, 132, 139, 142, 561, 596, 665, 788, 1007], "arrai": [1, 17, 48, 51, 79, 95, 106, 107, 132, 138, 289, 306, 309, 311, 317, 334, 336, 337, 340, 342, 379, 381, 387, 401, 403, 404, 408, 411, 430, 432, 438, 453, 455, 456, 459, 461, 464, 481, 484, 486, 492, 509, 511, 512, 515, 518, 523, 554, 556, 559, 561, 563, 571, 576, 579, 583, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 616, 624, 632, 639, 647, 649, 657, 671, 672, 706, 728, 750, 762, 781, 785, 787, 788, 789, 790, 791, 792, 806, 807, 808, 809, 810, 812, 813, 826, 829, 833, 837, 839, 843, 845, 849, 850, 853, 856, 903, 932, 940, 1004], "arrang": 762, "array_lik": [1, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 109, 112, 296, 314, 315, 329, 339, 367, 384, 385, 396, 406, 418, 435, 436, 448, 458, 471, 489, 490, 504, 514, 530, 543, 549, 558, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 614, 663, 665, 666, 667, 668, 671, 778, 781, 785, 788, 791, 792], "articl": [17, 67, 129], "artifact": [54, 61, 62, 63], "artifici": [134, 762], "asarrai": [614, 816, 817, 823, 824, 826, 827, 829, 834, 835, 840, 841, 842, 845, 847, 848, 850, 855, 856, 858], "ascend": [58, 232], "ascii": [133, 140, 141, 144, 342, 408, 461, 518, 559, 879, 1007], "ascii_art": [137, 808, 882, 899, 900, 941, 1007], "ask": 156, "asn": 411, "asp": 411, "asparagin": 411, "aspart": 411, "aspect": 968, "ass": 83, "assai": 790, "assembl": 131, "assert": 945, "assert_frame_equ": 944, "assertionerror": [944, 945], "assess": [95, 103, 663, 665, 666, 667, 671], "assign": [48, 57, 68, 104, 108, 139, 141, 206, 339, 406, 458, 514, 523, 558, 579, 595, 600, 663, 666, 667, 761, 791, 880, 881, 882], "assign_support": 936, "assist": [141, 1009], "associ": [1, 36, 70, 95, 133, 141, 142, 143, 170, 171, 172, 198, 200, 205, 226, 228, 230, 245, 247, 263, 265, 270, 289, 411, 464, 523, 664, 671, 761, 781, 785, 788, 789, 790, 809, 812, 819, 834, 851, 853, 891, 897, 930, 1002], "asst": [318, 319, 493, 494], "assum": [1, 70, 79, 81, 87, 90, 106, 107, 129, 132, 133, 136, 138, 155, 157, 270, 296, 344, 345, 346, 367, 418, 471, 530, 565, 600, 613, 614, 618, 641, 652, 671, 672, 777, 781, 787, 788, 790, 791, 849], "assumpt": [91, 137, 590, 595, 600, 894, 895, 943], "assur": [862, 863, 887, 890], "asv": 1, "asx": 411, "asymmetr": [561, 565, 618, 641], "ataaatcacg": 131, "ataacgttgg": 131, "ataagggatg": 131, "atacaaccat": 131, "atactcccaa": 131, "atagacc": 1009, "atagcatacc": 131, "atagttacac": 131, "atatatacat": 133, "atatatat": 761, "atatatgttt": 131, "atatgaacaaa": 1009, "atattacaac": 131, "atcaaaaggg": 131, "atcaccgcta": 131, "atcactgaaa": 131, "atcataacta": 131, "atccatatat": 131, "atcggcgat": 591, "atgagccatg": 131, "atgc": 813, "atgcactagg": 131, "atgcatgcat": 135, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 135, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 135, "atgccactttaa": [345, 346], "atgccccttc": 131, "atggca": 761, "atggcc": 761, "atggcg": 761, "atggct": 761, "atggtatgaa": 131, "atgtgtatttga": 1004, "atgttgtagt": 131, "atl": [346, 359, 521], "atla": 573, "atom": [819, 853], "att": [310, 380, 431, 485], "attach": [155, 157, 881], "attagaaaga": 131, "attcgttgtg": 131, "attctggaac": 131, "attempt": [56, 123, 132, 141, 184, 231, 285, 338, 405, 457, 513, 557, 582, 631, 656, 774, 844, 881, 894, 918], "attr": [135, 819, 853, 904, 932], "attr_1": 932, "attr_n": 932, "attribut": [3, 29, 57, 113, 125, 130, 131, 132, 134, 135, 138, 140, 141, 142, 145, 187, 205, 214, 215, 230, 234, 252, 270, 289, 294, 342, 348, 360, 365, 408, 411, 416, 461, 464, 469, 518, 523, 528, 559, 561, 572, 587, 614, 625, 635, 637, 648, 661, 684, 717, 728, 763, 772, 783, 790, 793, 819, 853, 860, 861, 862, 863, 876, 880, 883, 887, 890, 904, 932, 940, 945, 947, 948, 951, 958, 979, 1004], "attribute_nam": 932, "attributeerror": [523, 947], "atttcagggt": [132, 139], "aucauaacua": 131, "aug": 132, "augccacuuuaa": [348, 359, 520, 521], "auguguauuu": 1004, "austral": 666, "australian": 663, "auth": 144, "author": [95, 134, 142, 523, 595], "auto": [184, 342, 408, 461, 518, 559], "automat": [17, 46, 49, 55, 56, 60, 123, 124, 136, 140, 141, 169, 179, 205, 231, 233, 285, 288, 332, 338, 347, 399, 405, 410, 451, 457, 463, 507, 513, 522, 552, 557, 560, 582, 588, 613, 631, 636, 656, 662, 763, 774, 775, 844, 859, 886, 918, 939, 1002], "auxilari": 144, "av": 672, "avail": [1, 108, 127, 132, 133, 134, 138, 141, 143, 173, 174, 342, 348, 357, 408, 461, 518, 559, 573, 637, 663, 664, 665, 666, 667, 706, 787, 791, 819, 853, 942, 1002, 1009], "averag": [596, 600, 672, 673, 781, 785, 843, 914, 940], "averagegradientanova": 672, "avg": 672, "avoid": [17, 130, 141, 142, 144, 229, 762, 785, 937, 938], "aw": [0, 95], "awar": [48, 95, 141, 523], "awesom": 1009, "awgh": 0, "ax": [673, 695, 706, 739, 762, 773, 776, 777, 796, 806, 813, 834], "axes3d": 773, "axi": [36, 51, 81, 97, 136, 561, 706, 750, 763, 773, 781, 788, 791, 796, 804, 805, 806, 807, 808, 809, 810, 812, 813, 816, 817, 819, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 842, 843, 845, 846, 847, 848, 849, 850, 853, 856, 858, 945], "axis_label": [1, 773], "b": [1, 17, 50, 55, 57, 58, 59, 79, 80, 81, 91, 95, 112, 133, 136, 137, 141, 185, 289, 411, 464, 523, 565, 572, 573, 576, 581, 584, 587, 611, 613, 618, 625, 630, 633, 635, 641, 648, 655, 658, 659, 661, 664, 665, 761, 773, 789, 790, 807, 809, 810, 813, 817, 842, 853, 862, 863, 875, 876, 877, 879, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 895, 896, 897, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 940, 941, 966, 1002, 1004, 1007], "b1": [595, 600], "b2": [595, 600], "b3": [595, 600], "b4": [595, 600], "b5": [595, 600], "b6": [595, 600], "b7": [595, 600], "b_b": 137, "b_i": [103, 610], "ba": 142, "babp": 17, "bacilli": [900, 933], "bacillu": 142, "back": [95, 130, 132, 135, 178, 182, 203, 204, 250, 251, 268, 269, 287, 877, 1007], "backward": [79, 95, 106, 107, 141, 595], "bacteri": 595, "bacteria": [791, 836, 899, 900, 933], "bacteroidet": [836, 899, 900, 933], "baeza": 773, "baker": 79, "balanc": [95, 610], "band": 17, "bar": [141, 810, 835, 845, 855, 856, 966, 1009], "barcod": [807, 809, 813], "barker": 95, "barlow": 610, "base": [1, 55, 62, 65, 70, 73, 74, 78, 79, 83, 84, 89, 90, 91, 95, 98, 100, 106, 107, 126, 127, 132, 134, 138, 140, 141, 205, 226, 234, 270, 281, 289, 329, 360, 396, 411, 448, 464, 504, 523, 549, 565, 614, 618, 641, 663, 665, 666, 667, 671, 706, 776, 777, 784, 787, 789, 790, 791, 793, 809, 817, 849, 860, 884, 896, 897, 940, 966, 1004, 1005, 1007, 1009], "base1": 348, "base2": 348, "base3": 348, "basi": [601, 602, 610, 611], "basic": [61, 81, 127, 128, 671, 763, 773, 819, 853], "baz": [810, 966], "bb": 789, "bbb": 133, "bbf": 133, "bbx": 133, "bc_dm": 1, "bct": 143, "becam": 137, "becaus": [1, 48, 54, 55, 79, 106, 107, 127, 132, 133, 134, 137, 139, 140, 141, 144, 270, 294, 329, 358, 365, 396, 416, 448, 469, 504, 523, 528, 549, 595, 665, 777, 782, 784, 786, 789, 881, 886, 889, 933], "becom": [1, 80, 132, 133, 137, 141, 215, 809, 836], "been": [0, 61, 62, 63, 68, 112, 132, 133, 134, 139, 175, 177, 181, 184, 270, 283, 325, 329, 337, 393, 396, 404, 444, 448, 456, 500, 504, 512, 523, 549, 595, 665, 671, 792, 819, 853, 858, 917], "befor": [1, 48, 132, 136, 141, 142, 318, 319, 358, 493, 494, 607, 664, 665, 791, 809, 915, 934, 1007, 1009], "begin": [17, 131, 132, 133, 134, 138, 141, 142, 156, 205, 270, 358, 791], "behav": [289, 411, 464, 665], "behavior": [52, 53, 55, 61, 62, 63, 132, 133, 134, 141, 184, 324, 326, 342, 358, 392, 394, 408, 443, 445, 461, 499, 501, 518, 523, 546, 547, 559, 663, 665, 667, 885, 1009], "being": [1, 17, 46, 48, 49, 61, 62, 63, 79, 104, 108, 132, 133, 139, 143, 270, 284, 610, 667, 671, 761, 790, 809, 853, 862, 863, 883, 887, 890, 923, 1002, 1004], "bell": 98, "belong": [17, 71, 75, 135, 595, 600, 663, 666, 667, 809], "below": [129, 132, 133, 137, 139, 141, 142, 143, 270, 348, 360, 523, 664, 665, 773, 790, 819, 853, 861], "benefit": 600, "benjamini": [595, 600], "berger": 71, "best": [17, 61, 62, 63, 64, 65, 66, 85, 86, 592, 664, 776, 943], "beta": [108, 109, 111, 131, 1001], "beta_divers": [1, 104, 106, 107, 109, 111, 112], "betadisp": 667, "bethesda": 132, "better": [132, 776, 777, 1002], "between": [1, 17, 62, 65, 75, 80, 81, 85, 96, 103, 106, 107, 108, 112, 125, 132, 133, 134, 136, 139, 142, 143, 218, 232, 307, 312, 333, 334, 335, 336, 377, 382, 400, 401, 402, 403, 428, 433, 452, 453, 454, 455, 482, 487, 508, 509, 510, 511, 540, 542, 553, 554, 555, 556, 561, 565, 577, 589, 590, 591, 595, 600, 610, 613, 614, 618, 628, 637, 641, 652, 663, 664, 665, 666, 667, 668, 670, 671, 706, 776, 777, 778, 784, 787, 790, 791, 796, 834, 861, 876, 884, 885, 886, 892, 901, 911, 930, 931, 941, 1004, 1007], "bf00039495": 131, "bh": [595, 600], "bia": [73, 74, 600], "bias": [73, 74, 600], "bias_correct": [73, 74], "bifurc": [137, 611, 898], "bigoplu": 602, "bin": [761, 809, 842], "bin_": 761, "bin_f": [761, 809], "binari": [144, 145, 155, 156, 157, 184, 610, 611, 671, 776, 784, 839, 934, 966], "binary_dm": [582, 588, 631, 636, 656, 662], "binomi": [790, 791], "bio": [0, 1, 52, 53, 56, 60, 61, 64, 67, 68, 79, 106, 107, 108, 109, 110, 111, 112, 123, 124, 126, 127, 128, 129, 131, 132, 133, 137, 138, 139, 140, 142, 143, 231, 233, 285, 288, 324, 326, 338, 345, 346, 347, 348, 358, 359, 392, 394, 405, 410, 443, 445, 457, 463, 499, 501, 513, 520, 521, 522, 546, 547, 557, 560, 582, 588, 589, 631, 636, 656, 662, 664, 762, 774, 775, 844, 849, 859, 918, 939, 942, 1004, 1008], "biocor": [106, 107, 773], "biodivers": [1, 77, 79, 95], "bioinformat": [79, 95, 133, 139, 141, 881], "biol": [61, 64, 79, 83, 95, 127, 128, 131, 134, 606, 612], "biolog": [1, 54, 61, 62, 63, 90, 95, 96, 100, 102, 132, 133, 135, 137, 140, 205, 309, 310, 311, 313, 314, 317, 320, 321, 322, 325, 337, 379, 380, 381, 383, 384, 387, 388, 389, 390, 393, 404, 430, 431, 432, 434, 435, 438, 439, 440, 441, 444, 456, 484, 485, 486, 488, 489, 492, 495, 496, 497, 500, 512, 523, 561, 790, 793, 820, 860, 941, 1001, 1005, 1006], "biologi": [95, 96, 100, 358, 671, 881, 894, 940, 941], "biom": [141, 793, 799, 806, 807, 808, 809, 810, 812, 813, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 1001], "biom_format": [793, 860], "biom_open": [819, 853], "biometr": [91, 667], "biometrika": [70, 82], "bioperl": [133, 139], "biopython": 133, "biosci": [606, 612], "bioscienc": 884, "biotechnologi": [132, 143], "biowulf": 140, "biplot": [138, 776, 784], "biplot_scor": [763, 945], "bit": [98, 127, 128, 141], "bitscor": [127, 128], "bitting": 95, "biz": 810, "blackwel": 90, "blank": [132, 133, 137, 138, 139, 141, 187, 202, 234, 249, 252, 267, 270, 283, 286, 581, 630, 655], "blast": [62, 63, 65, 66, 132], "blast6": 128, "blastcgihelp": 132, "blastedbio": 127, "blastn": 128, "blastp": 128, "block": [63, 66, 109, 573, 966], "block_siz": 966, "blocksiz": 109, "blogspot": 127, "blosum": [63, 66, 411, 561, 573], "blosum45": 573, "blosum50": 573, "blosum62": [561, 573], "blosum80": 573, "blosum90": 573, "bmi": 791, "bob": 523, "bodi": [1, 773], "body_sit": [1, 773], "boilerpl": 144, "bologna": 81, "bone": 790, "bonferroni": [595, 600], "boniferroni": [595, 600], "boogaart": 610, "book": [127, 128, 132], "bool": [15, 17, 30, 31, 34, 43, 46, 49, 51, 52, 53, 54, 58, 61, 62, 63, 73, 74, 79, 95, 104, 106, 107, 108, 109, 112, 113, 155, 156, 157, 176, 180, 188, 194, 198, 201, 203, 204, 205, 206, 212, 218, 224, 226, 228, 232, 235, 241, 245, 248, 250, 251, 253, 259, 263, 266, 268, 269, 271, 277, 279, 287, 289, 290, 291, 294, 296, 303, 306, 307, 309, 311, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 339, 341, 342, 343, 349, 355, 361, 362, 365, 367, 374, 377, 379, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 416, 418, 425, 428, 430, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 469, 471, 478, 481, 482, 484, 486, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 517, 518, 519, 523, 524, 525, 528, 530, 537, 540, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 556, 558, 559, 562, 563, 570, 572, 575, 591, 595, 601, 602, 606, 612, 614, 615, 616, 623, 625, 627, 638, 639, 646, 648, 651, 654, 665, 668, 671, 706, 717, 781, 782, 784, 785, 789, 790, 792, 809, 812, 816, 817, 819, 820, 828, 829, 830, 831, 839, 840, 841, 843, 846, 851, 852, 853, 856, 858, 879, 884, 885, 888, 902, 904, 905, 906, 908, 911, 914, 915, 916, 919, 931, 933, 934, 941, 945, 967], "boolean": [30, 107, 132, 135, 140, 289, 296, 309, 311, 314, 317, 329, 332, 334, 336, 337, 339, 367, 379, 381, 384, 387, 396, 399, 401, 403, 404, 406, 411, 418, 430, 432, 435, 438, 448, 451, 453, 455, 456, 458, 459, 464, 471, 484, 486, 489, 492, 504, 507, 509, 511, 512, 514, 523, 530, 549, 552, 554, 556, 558, 652, 817, 849], "bootstrap": 861, "both": [29, 47, 55, 57, 68, 73, 74, 75, 79, 95, 125, 126, 127, 128, 130, 132, 133, 139, 141, 143, 176, 180, 230, 358, 577, 598, 599, 601, 602, 613, 628, 652, 654, 659, 664, 665, 666, 667, 782, 796, 806, 809, 813, 819, 834, 849, 853, 885, 886, 925, 934, 1002, 1004], "bound": [84, 85, 134, 135, 144, 205, 206, 214, 215, 218, 226, 227, 229, 230, 523, 595, 600, 788, 791], "bound_moieti": 134, "bowden": [289, 360, 411, 464, 523], "boxplot": 1, "bp": [131, 134], "braak": 777, "bracket": [103, 137], "brai": 1, "branch": [1, 79, 95, 107, 611, 861, 881, 882, 891, 932, 935, 941, 1007], "braycurti": 1, "break": [289, 411, 464], "bren": 610, "brillouin": 72, "broader": 762, "broadinstitut": 132, "broken": [47, 940], "brows": 131, "bsd": 1001, "bt": [133, 830], "btop": [127, 128], "buf_siz": 761, "buffer": [144, 184, 761], "buffer_s": 144, "bufferedrandom": 184, "bufferedread": [145, 155, 156, 184], "bufferedwrit": [145, 157, 184], "bui": 1001, "build": [215, 610, 854], "buildilrbas": 610, "built": [3, 17, 29, 113, 145, 158, 187, 205, 215, 234, 252, 270, 289, 348, 360, 411, 464, 523, 561, 614, 637, 673, 684, 695, 706, 717, 728, 739, 750, 763, 793, 861, 886, 925, 947, 967, 979, 990, 1002], "bulletin": 940, "busi": 144, "bwpd_": 95, "by_id": 849, "by_nam": [342, 408, 461, 518, 559, 561, 578], "bypass": [79, 104, 106, 107, 108], "byte": [184, 339, 406, 458, 514, 558], "byteio": [126, 130], "bytesio": [126, 130, 184, 185, 966], "bz2": 184, "bzh91ai": 185, "b\u00e4hler": [606, 612], "c": [1, 3, 17, 29, 47, 54, 55, 57, 58, 67, 70, 79, 80, 81, 82, 83, 95, 96, 98, 100, 106, 107, 112, 131, 132, 133, 137, 139, 141, 142, 143, 157, 289, 299, 304, 310, 316, 318, 319, 370, 375, 380, 386, 411, 421, 426, 431, 437, 464, 474, 479, 485, 491, 493, 494, 523, 533, 538, 544, 561, 572, 576, 579, 581, 584, 587, 592, 594, 599, 606, 607, 608, 609, 611, 612, 613, 625, 630, 633, 635, 648, 655, 658, 659, 661, 664, 665, 773, 783, 789, 790, 807, 809, 810, 862, 863, 875, 876, 877, 879, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 895, 896, 897, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 940, 941, 1004, 1007], "c_": 70, "ca": [48, 138, 763, 777, 784], "caa40058": 131, "caaatgtgaa": 131, "caacgtggcc": 131, "caaggaagat": 131, "caagggctgc": 131, "cabcacc": 133, "cac": [322, 330, 390, 397, 441, 449, 497, 505, 550], "cacaattact": 131, "cacaauuacu": 131, "cach": [878, 883, 889, 893, 894, 895, 897, 904, 913, 917], "cache_attr": [889, 904], "cache_attrnam": 883, "cache_typ": 883, "caggcc": 1009, "cagttgaagc": 131, "cagtttgatg": 131, "caguugaagc": 131, "caguuugaug": 131, "cajo": 777, "calcul": [17, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 112, 125, 318, 319, 493, 494, 595, 600, 603, 611, 612, 663, 664, 665, 666, 667, 671, 695, 706, 750, 781, 785, 788, 790, 791, 833, 837, 884, 891, 930, 1001], "call": [1, 55, 79, 80, 85, 86, 106, 107, 129, 132, 139, 142, 144, 184, 205, 307, 315, 318, 339, 358, 377, 385, 406, 428, 436, 458, 482, 490, 493, 514, 523, 540, 543, 558, 654, 664, 665, 761, 777, 787, 817, 877, 879, 880, 883, 894, 895, 897, 910, 911, 917, 926, 931, 938, 965, 967, 968, 978, 1002, 1009], "callabl": [17, 29, 46, 49, 57, 104, 108, 109, 112, 577, 595, 628, 652], "callback": [968, 1009], "caller": [56, 60, 123, 124, 231, 233, 285, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 694, 727, 738, 774, 775, 844, 857, 859, 918, 939], "calucul": 667, "can": [0, 1, 17, 29, 54, 57, 61, 62, 63, 67, 68, 75, 79, 80, 95, 104, 106, 107, 108, 110, 111, 112, 113, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 184, 205, 214, 215, 230, 270, 307, 312, 314, 329, 339, 377, 382, 384, 396, 406, 428, 433, 435, 448, 458, 482, 487, 489, 504, 514, 523, 540, 542, 549, 558, 561, 565, 573, 589, 592, 595, 600, 610, 613, 614, 618, 637, 641, 663, 664, 665, 667, 668, 669, 672, 762, 773, 776, 781, 782, 783, 784, 787, 789, 790, 791, 796, 806, 810, 819, 831, 834, 843, 853, 856, 861, 882, 884, 892, 922, 925, 932, 940, 941, 942, 946, 947, 967, 990, 1004, 1007, 1009], "cancer": 665, "candid": [348, 791], "cannot": [17, 29, 46, 49, 132, 133, 136, 137, 141, 176, 177, 180, 181, 184, 270, 307, 360, 377, 428, 482, 540, 595, 663, 664, 665, 666, 667, 761, 773, 789, 791, 792, 894, 897, 925, 1002], "canon": [289, 341, 407, 411, 460, 464, 517, 561, 777, 784, 793, 860, 1001], "captur": [343, 409, 462, 519], "cardin": 946, "care": [1, 48, 132, 134, 667], "carlo": 787, "carol": 523, "casava": 140, "casava_ug_15011196b": 140, "case": [1, 48, 61, 62, 63, 71, 109, 126, 130, 132, 137, 139, 141, 143, 145, 270, 284, 289, 319, 332, 342, 399, 408, 451, 461, 464, 494, 507, 518, 552, 559, 573, 595, 600, 614, 665, 671, 776, 781, 783, 791, 881, 914, 940, 967, 968, 1002, 1007], "cast": [1, 137, 270, 307, 377, 428, 482, 540, 613, 614, 669, 773, 835], "cat": [331, 398, 450, 506, 551, 789, 790], "catatttgct": 131, "catcgatcgatcgatgcatgcatgcatg": 132, "catcgtc": 132, "categor": [141, 187, 270, 279, 283, 287, 663, 666, 762, 773], "categori": [1, 141, 142, 672, 673, 683, 684, 694, 705, 706, 716, 717, 728, 738, 739, 749, 750, 760, 762, 773, 787, 789, 790, 804, 809, 853, 1003], "categoricalmetadatacolumn": [234, 270, 281], "categoryresult": 717, "catttagga": 140, "catttgaaaa": 131, "cauauuugcu": 131, "caugcaucguacguacgcaugac": 129, "caus": [17, 141, 184, 358], "caution": 112, "cauucguacguacgcaugac": 129, "caveat": [132, 592], "cb": [142, 789], "cc": [142, 339, 348, 406, 458, 514, 558], "cca": [138, 762, 763, 776, 784], "cca1": 762, "cca2": 762, "cca3": 762, "cca4": 762, "cca5": 762, "cca6": 762, "cca7": 762, "cca8": 762, "cca9": 762, "ccaatggtac": 131, "ccaggtcgat": 131, "ccc": [291, 362, 413, 466, 525], "cccataaata": 131, "cccc": [329, 396, 448, 504, 549], "ccccchhhhhhhhhhhhh": 142, "ccchhhhhhhhhhhhhhh": 142, "cccttaggtc": 131, "ccg": 57, "ccggac": 1009, "ccgggcacggtat": 132, "ccgwllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 348, "ccora": 777, "ccyt": 133, "cd": [61, 131, 134, 358], "cde": 143, "cell": [141, 790], "cell_lin": 790, "center": [132, 143, 596, 664, 776, 778, 782, 785], "centr": [592, 598, 599, 780], "centroid": 667, "cepa": 881, "certain": [79, 88, 104, 106, 107, 108, 176, 178, 180, 182, 270, 289, 411, 464, 590, 936], "cg": [47, 339, 406, 458, 514, 523, 558], "cga": [330, 397, 449, 505, 550], "cgac": 129, "cgagc": [296, 367, 418, 471, 530], "cgaggccgggac": 132, "cgatgtc": 132, "cgatgtcgatcgatcgatcgatcag": 132, "cgau": 129, "cgcgaugcaugcau": 129, "cgggacactc": [132, 139], "cgggcacggt": [132, 139], "cgggcasdgca": 140, "cgggcattgca": 140, "cggtacgctt": [132, 139], "cgi": [62, 63, 65, 66, 348, 356, 357], "cgt": [330, 397, 449, 505, 550], "cgtcacttat": 131, "cgttacgctt": [132, 139], "cgttcagggt": [132, 139], "cgttta": 590, "cgugcaugcau": 129, "chain": 134, "challeng": 79, "chanc": [561, 671], "chang": [84, 132, 214, 215, 358, 523, 573, 595, 600, 663, 761, 856, 883, 917, 1009], "chao": [70, 73, 95], "chao1": 74, "chao1_ci": 73, "chapter": [132, 783], "char": [316, 343, 386, 409, 437, 462, 491, 519, 544], "charact": [17, 34, 47, 48, 51, 55, 68, 113, 127, 128, 129, 132, 133, 136, 137, 138, 139, 140, 142, 143, 144, 270, 289, 294, 296, 299, 301, 303, 304, 305, 309, 310, 311, 314, 316, 317, 318, 319, 320, 321, 322, 325, 332, 337, 339, 341, 342, 348, 358, 360, 365, 367, 370, 372, 374, 375, 376, 379, 380, 381, 384, 386, 387, 388, 389, 390, 393, 399, 404, 406, 407, 408, 411, 416, 418, 421, 423, 425, 426, 427, 430, 431, 432, 435, 437, 438, 439, 440, 441, 444, 446, 451, 456, 458, 459, 460, 461, 464, 469, 471, 474, 476, 478, 479, 480, 484, 485, 486, 489, 491, 492, 493, 494, 495, 496, 497, 500, 507, 512, 514, 517, 518, 523, 528, 530, 533, 535, 537, 538, 539, 544, 552, 558, 559, 561, 576, 579, 590, 819, 853, 1004], "character": 600, "charg": [132, 139], "charlson": 95, "chase": 77, "check": [17, 133, 156, 176, 180, 206, 215, 218, 229, 562, 563, 601, 602, 613, 614, 615, 616, 637, 638, 639, 672, 776, 777, 790, 816, 828, 944, 945, 965, 1009], "check_length": 1009, "checksum": 966, "chemic": [561, 791], "chen": [70, 95], "chf": [346, 359, 521], "chi": [776, 777], "chichest": 592, "child": [137, 215, 307, 377, 428, 482, 540, 610, 861, 882, 913, 917, 935, 1007], "child1": [878, 893], "child2": [878, 893], "child_index": 932, "children": [137, 611, 861, 866, 870, 878, 882, 893, 895, 902, 906, 913, 917, 919, 926], "chimp": [132, 139], "chisquar": 791, "chiu": 95, "choic": [46, 49, 136, 782], "choos": [79, 141, 777, 787], "chosen": [339, 406, 458, 514, 558, 604, 664, 773, 784, 792], "christoph": 133, "chunk": 139, "ci": [69, 85, 600], "ci_typ": 85, "cigar": [3, 17], "circuit": 1009, "circumst": [81, 411, 790], "citat": 143, "ciufo": 143, "cl": [155, 157, 170, 172, 173, 174, 360, 951], "clade": [920, 927, 940, 1007], "cladogenesi": 671, "claim": [177, 181], "clarifi": 79, "clariti": 137, "clark": [663, 664], "class": [3, 17, 29, 52, 53, 68, 70, 73, 113, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 155, 157, 158, 170, 172, 173, 174, 175, 187, 205, 215, 234, 252, 270, 289, 307, 324, 326, 348, 360, 377, 392, 394, 411, 428, 443, 445, 464, 482, 499, 501, 523, 540, 546, 547, 561, 595, 614, 637, 673, 684, 695, 706, 717, 728, 739, 750, 763, 793, 814, 817, 840, 855, 860, 861, 883, 940, 947, 967, 979, 990, 1001, 1002, 1004], "classic": 143, "classif": [143, 773], "classmethod": [50, 56, 123, 227, 231, 283, 285, 307, 338, 357, 377, 405, 428, 457, 482, 513, 540, 557, 573, 576, 577, 578, 579, 582, 628, 631, 652, 656, 774, 819, 820, 844, 898, 899, 900, 918], "classproperti": 360, "claus": 282, "clean": [184, 878, 917], "clear": 140, "clinic": [791, 1003], "clip_end": 113, "clip_head": 113, "clip_tail": 113, "clone": 131, "clone_lib": 131, "close": [56, 60, 80, 123, 124, 132, 133, 137, 139, 142, 184, 185, 231, 233, 270, 285, 288, 338, 347, 358, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 595, 631, 636, 656, 662, 694, 727, 738, 774, 775, 844, 859, 918, 939, 966], "closeabl": 184, "closefd": 144, "closer": [1, 1009], "clostridia": [900, 933], "closur": [594, 607, 608, 609], "clover": 131, "clr": [592, 599, 600, 611], "clustal": [56, 60, 1002], "clustal_f": 129, "clustalw": 129, "cluster": [1, 665, 667, 898, 1004], "cmap": [1, 581, 630, 655, 773], "cnt": 790, "co": 671, "co2": 790, "cock": 133, "cocryst": 134, "code": [129, 132, 133, 134, 143, 230, 289, 342, 344, 345, 346, 348, 349, 355, 356, 357, 358, 359, 408, 411, 461, 464, 516, 518, 520, 521, 559, 671, 792, 849, 884, 940, 942, 1004], "codon": [134, 143, 345, 348, 358, 359, 520, 561], "codon_start": 134, "coeff": 665, "coeffici": [70, 664, 665, 671, 763, 784, 787, 886], "coercion": [307, 377, 428, 482, 540], "cogent": 891, "col": [614, 803, 814, 829, 855], "col1": [55, 141], "col2": [55, 141], "col3": [55, 141], "collabor": 134, "collaps": [141, 882], "collapse_f": 809, "collapsed_id": [809, 819, 853], "collat": 668, "collect": [17, 96, 100, 102, 184, 270, 572, 610, 625, 648, 761], "collinear": [762, 777], "colon": 137, "color": [1, 85, 86, 581, 630, 655, 773], "colorbar": [581, 630, 655, 773], "colormap": [581, 630, 655, 773], "colormaps_refer": 773, "column": [1, 17, 29, 53, 54, 55, 108, 125, 126, 132, 134, 135, 138, 139, 142, 143, 187, 188, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 234, 235, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 277, 279, 281, 282, 283, 284, 286, 287, 307, 326, 332, 377, 394, 399, 428, 445, 451, 482, 501, 507, 523, 540, 547, 552, 561, 565, 580, 584, 593, 594, 595, 600, 601, 602, 613, 618, 629, 633, 641, 653, 654, 658, 663, 664, 665, 666, 667, 668, 669, 671, 706, 750, 762, 773, 776, 777, 778, 780, 784, 785, 789, 790, 796, 807, 809, 814, 819, 820, 825, 829, 830, 831, 836, 845, 846, 851, 852, 853, 855, 899, 903, 944, 945, 1001], "column_missing_schem": [270, 283], "column_typ": [279, 283], "columnwis": 778, "com": [84, 127, 128, 129, 664, 966], "comb": 914, "combin": [17, 29, 46, 49, 134, 600, 664, 763, 777, 831], "come": [142, 671, 928], "comma": [135, 136, 137], "command": [141, 143, 358], "comment": [131, 132, 134, 135, 136, 142, 143, 270], "comment_char": 137, "commit": 787, "common": [47, 52, 53, 64, 79, 95, 127, 132, 133, 134, 141, 142, 143, 324, 326, 392, 394, 443, 445, 499, 501, 546, 547, 593, 614, 706, 807, 808, 861, 886, 894, 907, 909, 932, 933, 941, 1004, 1007, 1008], "commonli": [137, 141, 561, 667, 784, 1007], "commun": [70, 75, 79, 95, 98, 103, 106, 107, 600, 613, 663, 664, 666, 667, 762, 773, 777, 784, 791, 1001], "compact": 879, "compani": 790, "compar": [1, 89, 106, 112, 127, 128, 232, 328, 333, 334, 335, 336, 339, 400, 401, 402, 403, 406, 452, 453, 454, 455, 458, 503, 508, 509, 510, 511, 514, 553, 554, 555, 556, 558, 563, 570, 595, 613, 616, 623, 639, 646, 665, 671, 789, 790, 791, 884, 885, 886, 914, 944, 945, 1004, 1007], "compare_rfd": [885, 886], "compare_subset": [884, 886, 927, 928, 1007], "compare_tip_dist": [884, 885, 892, 901, 930, 1007], "comparison": [106, 107, 595, 600, 671, 789, 884, 944, 1007], "compat": [79, 95, 106, 107, 141, 143, 348, 595], "compil": [315, 343, 385, 409, 436, 462, 490, 519, 543, 792], "complement": [328, 340, 358, 503, 515, 1004], "complement_map": [306, 481], "complet": [67, 85, 86, 133, 134, 137, 787, 943, 1002], "complex": [137, 1009], "compliant": [289, 411, 464], "complic": [561, 1002], "compon": [592, 594, 604, 605, 606, 607, 608, 609, 739, 763, 776, 782, 1009], "compos": [48, 133, 140, 270], "composit": [75, 79, 95, 184, 777, 1001], "compound": 600, "comprehens": 143, "compress": [126, 144, 184, 819, 829, 830, 831, 853], "compresslevel": [144, 184], "comput": [0, 1, 47, 48, 51, 70, 73, 79, 86, 97, 103, 104, 105, 106, 107, 108, 109, 112, 215, 312, 316, 382, 386, 433, 437, 487, 491, 542, 544, 577, 589, 590, 591, 595, 600, 606, 610, 611, 612, 613, 628, 652, 663, 664, 665, 666, 667, 668, 671, 672, 673, 683, 705, 706, 716, 717, 728, 739, 749, 750, 760, 762, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 892, 928, 930, 940, 966, 1004, 1007], "computation": 17, "concat": [54, 55], "concaten": [54, 142, 227, 307, 377, 428, 482, 540, 810], "concentr": [75, 791], "concept": [88, 610], "conceptu": [133, 666], "concern": [17, 136], "concis": 595, "conclud": 595, "concret": 234, "condens": [637, 649, 654, 659], "condensed_form": [637, 654, 659], "condit": [1, 85, 86, 790], "confid": [1, 69, 74, 78, 85, 600, 787, 788, 861, 881], "confirm": [1, 663, 667, 791], "conflict": 889, "conform": 360, "confus": 777, "conjunct": 667, "connect": [79, 81, 95, 137, 861, 910, 917], "consens": 940, "consensu": 940, "consensus_tre": 940, "conserv": [79, 84, 85, 95, 129, 307, 377, 428, 482, 540, 595, 613], "consid": [48, 70, 79, 84, 95, 106, 107, 132, 137, 270, 294, 329, 365, 396, 416, 448, 469, 504, 528, 549, 590, 592, 607, 667, 668, 761, 789, 790, 791, 944, 967], "consider": [84, 95, 234, 270, 790], "consist": [128, 132, 133, 135, 138, 139, 141, 142, 143, 279, 342, 408, 461, 518, 523, 559, 561, 790, 911, 931], "constant": [78, 592, 595, 649, 665, 789], "constitut": [1, 561, 579], "constrain": [763, 777], "constraint": [138, 763, 777, 784], "construct": [50, 59, 134, 143, 199, 203, 204, 205, 206, 234, 246, 250, 251, 264, 268, 269, 270, 287, 561, 576, 579, 585, 606, 613, 762, 806, 807, 808, 809, 810, 825, 834, 840, 842, 843, 847, 848, 855, 856, 889, 899, 900, 941, 1001, 1002, 1007], "constructor": [29, 46, 49, 57, 129, 132, 133, 134, 139, 140, 142, 156, 169, 179, 289, 332, 348, 399, 411, 451, 464, 507, 523, 552, 561, 669], "consum": [29, 49, 157, 289, 348, 411, 464, 523], "consumpt": [668, 782, 809], "contain": [1, 17, 29, 47, 49, 55, 61, 62, 63, 64, 65, 66, 67, 70, 104, 105, 108, 109, 112, 125, 127, 129, 130, 131, 132, 133, 135, 136, 138, 139, 141, 142, 143, 144, 175, 187, 197, 199, 203, 204, 244, 246, 250, 251, 252, 262, 264, 268, 269, 270, 279, 280, 284, 287, 289, 291, 296, 309, 311, 316, 317, 320, 321, 322, 325, 329, 330, 331, 337, 339, 342, 348, 362, 367, 379, 381, 386, 387, 388, 389, 390, 393, 396, 397, 398, 404, 406, 408, 411, 413, 418, 430, 432, 437, 438, 439, 440, 441, 444, 446, 448, 449, 450, 456, 458, 459, 461, 464, 466, 471, 484, 486, 491, 492, 495, 496, 497, 500, 504, 505, 506, 512, 514, 518, 525, 530, 544, 549, 550, 551, 558, 559, 575, 577, 581, 589, 590, 595, 610, 611, 613, 627, 628, 630, 651, 652, 655, 659, 663, 664, 665, 666, 667, 668, 670, 672, 762, 773, 777, 809, 819, 820, 849, 853, 879, 883, 891, 921, 940, 941, 965, 968, 990, 1004, 1007], "content": [29, 47, 131, 132, 133, 134, 135, 137, 141, 144, 155, 156, 157, 284, 289, 306, 307, 310, 313, 340, 344, 377, 380, 383, 428, 431, 434, 464, 481, 482, 485, 488, 515, 516, 540, 1004], "context": [1, 17, 185, 186, 590, 773, 941], "contextu": 967, "contigu": [135, 205, 329, 396, 448, 504, 549], "conting": [600, 784, 793, 857], "continu": [61, 62, 63, 762], "contrast": [95, 610], "contribut": [47, 95, 671, 776, 781], "control": [55, 132, 663, 665, 666, 672, 784, 787, 789, 790, 791, 807, 817, 834], "control_cat": [789, 790], "controversi": 91, "conveni": [0, 17, 56, 60, 94, 123, 124, 178, 182, 231, 233, 285, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 774, 775, 844, 859, 918, 939, 1008], "convent": [79, 106, 107, 127, 131, 134], "convers": [133, 184, 649, 834], "convert": [1, 127, 129, 131, 132, 134, 137, 139, 142, 184, 203, 204, 234, 250, 251, 268, 269, 287, 289, 312, 341, 342, 382, 407, 408, 411, 433, 460, 461, 464, 487, 517, 518, 523, 542, 559, 614, 654, 664, 792, 836, 841, 843, 851, 852, 881, 946], "convert_underscor": 137, "convienc": [907, 909], "coo_matrix": 611, "coord": [672, 673, 695, 706, 739, 750], "coord_data": 672, "coordin": [1, 113, 134, 140, 205, 215, 218, 226, 227, 232, 600, 611, 667, 672, 706, 739, 750, 763, 773, 776, 782, 783, 784], "copi": [29, 32, 33, 132, 139, 142, 215, 216, 217, 292, 293, 339, 363, 364, 406, 414, 415, 458, 467, 468, 514, 523, 526, 527, 558, 583, 586, 614, 632, 634, 657, 660, 785, 792, 857, 862, 863, 890, 922, 923, 929, 937, 938, 961, 962, 963], "copy_from": 215, "copyright": [132, 139], "corbet": 80, "cornish": [289, 360, 411, 464, 523], "cornwel": 95, "corr": 1, "corr_coeff": [665, 671], "correct": [73, 74, 81, 132, 595, 600, 917, 923, 1002], "correl": [1, 606, 612, 613, 664, 665, 668, 670, 671, 763, 777, 778, 784, 787, 791, 886, 1007], "correspond": [1, 54, 79, 95, 106, 107, 113, 130, 132, 133, 135, 140, 142, 177, 181, 200, 247, 265, 270, 319, 332, 348, 358, 399, 451, 494, 507, 520, 521, 552, 565, 595, 610, 618, 641, 763, 776, 777, 780, 791, 809, 814, 819, 821, 823, 824, 835, 836, 853, 855, 856, 861, 894, 899, 903, 912, 933, 940], "cospeci": 671, "cost": [606, 612], "costli": 0, "could": [1, 29, 86, 132, 133, 140, 144, 176, 178, 180, 182, 595, 600, 614, 663, 665, 666, 667, 668, 671, 773, 789, 848, 907, 909, 942, 943, 1002], "count": [0, 29, 46, 49, 51, 55, 58, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 112, 126, 129, 132, 133, 139, 142, 316, 318, 319, 331, 333, 335, 386, 398, 400, 402, 437, 450, 452, 454, 491, 493, 494, 506, 508, 510, 544, 551, 553, 555, 591, 592, 595, 600, 671, 777, 783, 790, 791, 792, 809, 823, 839, 843, 849, 885, 886, 912, 940, 1002], "counts2": 791, "counts_001": 787, "counts_010": 787, "counts_100": 787, "counts_interv": [787, 790, 791], "coupl": 215, "covari": [95, 778], "cover": [215, 573, 1007], "coverag": [70, 78, 82, 86, 127, 128], "cprofil": 1009, "cran": [610, 663, 664, 665, 666, 667], "crd": 132, "creat": [1, 17, 29, 46, 49, 50, 54, 56, 57, 58, 59, 123, 131, 132, 135, 137, 139, 141, 158, 169, 179, 184, 185, 203, 204, 205, 215, 226, 227, 231, 250, 251, 268, 269, 285, 287, 289, 338, 339, 360, 405, 406, 411, 457, 458, 464, 513, 514, 523, 557, 558, 576, 577, 579, 581, 582, 584, 585, 595, 604, 605, 613, 628, 630, 631, 633, 652, 655, 656, 658, 659, 669, 671, 706, 762, 773, 774, 793, 809, 816, 817, 823, 824, 826, 827, 829, 834, 835, 840, 841, 842, 844, 845, 847, 848, 850, 855, 856, 858, 860, 882, 883, 904, 918, 941, 1004, 1007, 1009], "create_cach": 904, "create_d": [793, 860], "create_format": [144, 155, 156, 157], "creation": [819, 853, 854], "creation_d": [853, 854], "credibl": 600, "criteria": [198, 230, 245, 263, 282, 789, 936], "critic": [787, 788, 790, 791, 881], "crop": 143, "cross": 134, "cross_refer": 131, "csc": [796, 853], "csc_matrix": 853, "csr": [796, 853], "csr_matrix": 853, "csv": [127, 136, 1002], "ctaa": 134, "ctaacccccttttctcaga": 0, "ctagctagta": 131, "ctataaaaaa": 134, "ctattatact": 131, "ctc": [342, 408, 461, 518, 559], "ctcaaaagtc": [342, 408, 461, 518, 559], "ctcaaaattc": 131, "ctcttctagt": 131, "ctgtttgtta": 131, "cttcatgtat": 131, "cttccaattt": 131, "cttgacatag": 131, "cttgatgata": 131, "cuaa": 134, "cual": 141, "cuauaaaaaa": 134, "cug": 358, "cuguuuguua": 131, "cultur": 790, "cumbersom": 141, "cumul": [84, 103, 129, 130], "cuppini": 81, "curat": 143, "current": [125, 127, 130, 131, 132, 133, 134, 139, 141, 142, 143, 215, 229, 270, 279, 346, 359, 521, 573, 595, 665, 750, 776, 782, 819, 853, 883, 896, 905, 906, 911, 1001], "curti": 1, "curv": [81, 84, 91, 777, 787, 790, 791], "custom": [0, 1, 143, 289, 312, 348, 349, 360, 382, 411, 433, 464, 487, 542, 773, 819, 847, 853, 1001, 1004], "custom_metr": [312, 382, 433, 487, 542], "customsequ": 360, "cutoff": [595, 940], "cuucauguau": 131, "cuugacauag": 131, "cw": 142, "cy": 411, "cyanogen": 131, "cystein": 411, "cytokin": 790, "cytophagia": [900, 933], "cytosin": [289, 464], "czech": 881, "d": [1, 17, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 127, 128, 134, 137, 138, 289, 411, 464, 572, 576, 581, 587, 592, 593, 594, 595, 598, 599, 601, 602, 603, 606, 607, 608, 609, 610, 611, 612, 613, 625, 630, 635, 648, 655, 659, 661, 663, 664, 665, 666, 667, 671, 706, 728, 750, 763, 773, 781, 790, 791, 792, 793, 810, 825, 826, 846, 860, 862, 863, 876, 877, 879, 881, 882, 883, 884, 885, 887, 888, 890, 891, 892, 894, 895, 896, 897, 901, 907, 908, 909, 910, 911, 917, 921, 922, 923, 925, 926, 927, 928, 930, 931, 932, 935, 936, 937, 938, 940, 941, 1002, 1004, 1007, 1009], "d1": [143, 1004], "d136": 143, "d143": 143, "d2": 1004, "d3": 1004, "d_": [90, 100], "d_a": 834, "d_b": 834, "d_d": 137, "d_w": 103, "d_x": 665, "d_y": 665, "daili": 143, "danger": 1, "dash": 141, "data": [1, 55, 79, 81, 91, 95, 104, 106, 107, 108, 109, 112, 126, 127, 130, 131, 133, 135, 136, 138, 140, 141, 142, 143, 184, 187, 234, 252, 270, 279, 289, 360, 411, 464, 523, 563, 565, 583, 592, 593, 594, 595, 596, 599, 600, 602, 604, 606, 610, 612, 614, 616, 618, 632, 637, 639, 641, 657, 664, 671, 672, 694, 727, 738, 761, 762, 773, 776, 777, 781, 787, 789, 790, 791, 793, 794, 796, 803, 804, 806, 809, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 835, 838, 840, 841, 842, 843, 845, 847, 848, 850, 851, 852, 853, 855, 856, 857, 858, 899, 930, 934, 941, 965, 968, 1001, 1002, 1003, 1004, 1009], "data_fh": 818, "data_fram": 664, "data_pump": 820, "data_typ": [819, 853], "databas": [127, 128, 131, 134, 141, 143, 205, 899], "datafram": [1, 29, 53, 108, 127, 128, 143, 203, 234, 250, 268, 270, 287, 289, 326, 394, 411, 445, 464, 501, 523, 547, 572, 584, 587, 595, 600, 625, 633, 635, 648, 658, 661, 663, 664, 666, 667, 668, 672, 706, 750, 762, 763, 773, 776, 777, 783, 784, 789, 790, 807, 836, 852, 899, 944, 1004], "datapoint": 91, "dataset": [109, 125, 130, 592, 600, 667, 762, 777, 782, 819, 853], "datatyp": [125, 761, 792], "date": [131, 819, 820, 853, 854], "datetim": [853, 854], "dayhoff": 573, "db": 132, "db_xref": [131, 134], "dbsourc": 131, "dbxref": [134, 135], "ddbj": 134, "ddl": [819, 853], "ddof": [606, 612, 781, 785], "de": [131, 142], "deal": [131, 183, 592, 604, 782, 1002], "debug": [70, 967, 978, 1009], "debug_post_st": 1009, "debug_pre_st": 1009, "debug_runtim": 1009, "debug_trac": 1009, "decemb": 133, "decid": [782, 1009], "decim": [137, 141, 945], "declar": [138, 141], "decod": [133, 184], "decomposit": [95, 109], "decompress": 184, "decor": [144, 155, 156, 157, 215, 360, 883, 940, 947, 967, 979, 980, 990, 1001], "decreas": 761, "deem": 777, "deep": [33, 71, 217, 292, 293, 363, 364, 414, 415, 467, 468, 523, 526, 527, 574, 586, 626, 634, 650, 660], "deepcopi": [33, 862, 863, 887, 937, 938], "deeper": [106, 107], "def": [129, 144, 155, 156, 157, 312, 360, 382, 433, 487, 542, 791, 1009], "default": [0, 1, 17, 29, 46, 47, 49, 55, 57, 60, 61, 62, 63, 65, 66, 70, 74, 84, 91, 95, 98, 104, 108, 124, 127, 132, 134, 135, 136, 137, 139, 140, 141, 144, 145, 155, 157, 170, 172, 198, 230, 233, 234, 245, 263, 270, 282, 288, 312, 329, 341, 342, 345, 346, 347, 348, 358, 359, 382, 396, 407, 408, 410, 433, 448, 460, 461, 463, 487, 504, 517, 518, 520, 521, 522, 542, 549, 559, 560, 572, 577, 581, 588, 593, 594, 595, 600, 601, 602, 604, 605, 614, 625, 628, 630, 636, 648, 652, 655, 662, 664, 665, 667, 668, 669, 706, 761, 773, 775, 781, 782, 784, 785, 792, 803, 809, 814, 817, 819, 824, 826, 829, 830, 831, 833, 834, 837, 839, 840, 841, 843, 847, 849, 853, 854, 855, 856, 858, 859, 886, 911, 930, 939, 940, 941, 944, 945, 965, 968, 990, 1002, 1004, 1007, 1009], "default_column": 127, "default_gap_char": [47, 48, 55, 360], "default_missing_schem": [270, 283], "default_write_format": 157, "defaultdict": 835, "defer": 215, "defin": [1, 29, 55, 57, 63, 66, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 103, 112, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 205, 215, 229, 270, 294, 312, 330, 331, 341, 342, 348, 349, 356, 357, 365, 382, 397, 398, 407, 408, 416, 433, 449, 450, 460, 461, 469, 487, 505, 506, 517, 518, 528, 542, 550, 551, 559, 561, 573, 578, 581, 591, 593, 594, 598, 599, 601, 602, 603, 607, 608, 609, 614, 630, 655, 665, 668, 773, 787, 817, 819, 834, 842, 853, 858, 937, 938, 941, 944, 978, 1002, 1004, 1007, 1009], "definit": [1, 47, 75, 130, 131, 132, 133, 134, 135, 143, 289, 306, 307, 310, 311, 313, 320, 321, 325, 337, 340, 343, 344, 345, 346, 348, 358, 359, 360, 377, 380, 381, 383, 388, 389, 393, 404, 409, 411, 428, 431, 432, 434, 439, 440, 444, 456, 462, 464, 481, 482, 485, 486, 488, 495, 496, 500, 512, 515, 516, 519, 520, 521, 540, 573, 819, 853, 941, 1004, 1008, 1009], "definite_char": 360, "deflin": 132, "degap": [318, 319, 493, 494, 1004], "degener": [47, 48, 130, 131, 132, 133, 134, 135, 289, 306, 307, 309, 310, 313, 318, 319, 320, 321, 325, 337, 340, 341, 343, 344, 345, 346, 348, 358, 359, 360, 377, 379, 380, 383, 388, 389, 393, 404, 407, 409, 411, 428, 430, 431, 434, 439, 440, 444, 456, 460, 462, 464, 481, 482, 484, 485, 488, 493, 494, 495, 496, 500, 512, 515, 516, 517, 519, 520, 521, 540, 573, 1004], "degenerate_map": [313, 360, 383, 434, 488, 1004], "degenerate_mod": 48, "degre": [75, 95, 129, 600, 606, 612, 781, 788, 790], "deiman": 142, "del": [136, 341, 407, 460, 517, 762], "deleg": 866, "delet": [215, 904, 920, 948], "deleteri": 943, "delgado": [592, 610], "delim": 814, "delimit": [135, 136, 138, 140, 143, 202, 249, 267, 286, 613, 814, 818, 821, 855], "delta": [95, 604, 605, 781], "demograph": 1003, "demonstr": [52, 53, 144, 324, 326, 392, 394, 443, 445, 499, 501, 546, 547], "dempqsv": [342, 408, 461, 518, 559], "demultiplex": 761, "den": 610, "denomin": [593, 610], "denominator_col": 593, "denominator_idx": [593, 594], "denot": [75, 95, 99, 102, 103, 132, 595, 600, 663, 666, 667], "dens": [126, 809, 812, 817, 820, 829, 830, 831, 840, 851, 852, 860], "densiti": 856, "dep": 787, "depend": [3, 74, 77, 78, 79, 95, 104, 106, 107, 108, 132, 133, 142, 155, 156, 157, 184, 319, 494, 565, 618, 641, 665, 667, 669, 728, 782, 819, 862, 863, 886, 887, 890, 934, 940, 967, 978, 1002, 1007, 1009], "deprec": [67, 68, 79, 93, 95, 106, 107, 112, 325, 337, 393, 404, 444, 456, 500, 512, 595, 605], "depth": [95, 762, 787, 790, 791, 934, 1007], "deriv": [62, 63, 65, 66, 131, 329, 396, 448, 504, 523, 549, 601, 602, 610, 790, 941], "derives_from": 135, "desc": 523, "descend": [58, 95, 232, 861, 891, 903, 911, 920, 927, 928, 931, 934, 1007], "describ": [0, 1, 48, 61, 64, 71, 72, 75, 78, 79, 82, 83, 85, 86, 87, 88, 95, 96, 99, 106, 107, 112, 126, 131, 132, 133, 134, 135, 138, 139, 141, 142, 202, 249, 267, 270, 283, 286, 329, 332, 396, 399, 448, 451, 504, 507, 523, 549, 552, 583, 606, 612, 613, 632, 649, 657, 665, 671, 783, 809, 815, 819, 853, 854, 903, 941, 1003, 1004, 1007], "descript": [17, 70, 79, 84, 89, 90, 100, 104, 106, 107, 108, 125, 127, 132, 133, 134, 135, 137, 139, 141, 143, 187, 234, 252, 565, 618, 641, 853, 884, 940, 1004, 1007], "description_newline_replac": [132, 133], "descriptor": [134, 783, 961, 962, 963], "deseri": [613, 763], "design": [1, 109, 125, 126, 131, 141, 270, 613, 789], "desir": [81, 85, 127, 136, 782, 836, 848, 924, 1009], "destin": 523, "detail": [17, 54, 55, 67, 68, 95, 109, 111, 112, 131, 132, 133, 134, 135, 139, 140, 142, 143, 144, 187, 234, 252, 270, 359, 523, 565, 618, 641, 664, 668, 773, 776, 777, 784, 941, 1002], "detect": [132, 134, 141, 177, 181, 595, 665, 791, 806], "determin": [1, 31, 34, 43, 52, 53, 79, 95, 104, 106, 107, 108, 136, 144, 173, 174, 184, 188, 194, 197, 201, 235, 241, 244, 248, 253, 259, 262, 266, 270, 271, 277, 279, 280, 291, 294, 303, 320, 321, 322, 323, 324, 325, 326, 328, 349, 355, 362, 365, 374, 388, 389, 390, 391, 392, 393, 394, 413, 416, 425, 439, 440, 441, 442, 443, 444, 445, 446, 466, 469, 478, 495, 496, 497, 498, 499, 500, 501, 503, 525, 528, 537, 545, 546, 547, 570, 595, 623, 646, 667, 671, 761, 782, 787, 789, 790, 794, 809, 940, 1009], "determinist": [80, 663, 667], "develop": [1, 3, 109, 112, 131, 141, 155, 156, 157, 595, 941, 1001, 1009], "deviat": [664, 781, 784, 785, 788], "df": [127, 128, 143, 584, 600, 633, 658, 663, 664, 667, 773, 788, 852], "di": [81, 1004], "diag": 831, "diagnos": 1009, "diagon": [125, 652, 659, 831], "diagram": 205, "dict": [17, 29, 50, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 123, 124, 131, 134, 156, 176, 177, 178, 180, 181, 182, 205, 226, 230, 231, 233, 270, 283, 285, 288, 289, 316, 331, 338, 345, 346, 347, 386, 398, 405, 410, 411, 437, 450, 457, 463, 464, 491, 506, 513, 520, 521, 522, 523, 544, 551, 557, 560, 561, 576, 582, 585, 588, 631, 636, 656, 662, 665, 668, 728, 774, 775, 804, 805, 819, 820, 821, 824, 834, 835, 844, 853, 858, 859, 899, 903, 912, 918, 932, 939, 967, 1004, 1009], "dict_of_metadata": 805, "dictionari": [50, 52, 57, 59, 68, 142, 143, 205, 216, 217, 226, 230, 324, 392, 443, 499, 523, 546, 576, 585, 665, 817, 899], "did": [70, 132, 140, 176, 180, 185, 1009], "didn": [132, 1009], "diet": 789, "differ": [0, 1, 34, 47, 48, 50, 61, 62, 63, 74, 79, 84, 96, 100, 106, 107, 128, 130, 132, 133, 139, 142, 143, 144, 234, 291, 294, 303, 307, 308, 312, 327, 328, 333, 334, 335, 336, 339, 345, 348, 355, 362, 365, 374, 377, 378, 382, 395, 400, 401, 402, 403, 406, 413, 416, 425, 428, 429, 433, 447, 452, 453, 454, 455, 458, 466, 469, 478, 482, 483, 487, 502, 503, 508, 509, 510, 511, 514, 520, 525, 528, 537, 540, 541, 542, 548, 553, 554, 555, 556, 558, 565, 590, 595, 600, 613, 618, 641, 663, 666, 667, 671, 695, 750, 762, 776, 777, 782, 790, 791, 856, 884, 885, 944, 945, 961, 962, 963, 1004, 1007], "differenti": [595, 600], "difficult": 1, "digit": 141, "dim": 130, "dimens": [41, 130, 138, 139, 571, 593, 597, 601, 602, 624, 647, 667, 763, 772, 773, 782, 783], "dimension": [1, 130, 583, 594, 607, 608, 609, 614, 632, 649, 657, 762, 776, 783, 784, 790, 791, 845, 1005], "direct": [141, 143, 202, 249, 267, 286, 777, 861], "direct_io": [814, 854, 855], "direction": 945, "directli": [29, 46, 49, 141, 289, 348, 411, 464, 523, 589, 595, 671, 854, 855, 967, 1009], "dirichilet": 600, "dirichlet": 600, "disabl": [1, 79, 104, 106, 107, 108, 1009], "disallow": [137, 142, 665], "disallow_negative_branch_length": 941, "discard": [134, 665, 817], "discov": [1, 889], "discoveri": 1, "discrep": 75, "discret": 102, "discuss": [95, 106, 107, 141, 1009], "diseas": [595, 665, 807], "disjoint": [810, 940], "disjointiderror": [806, 810], "disk": [132, 270, 614], "dism": 606, "disperison": 667, "dispers": 667, "displai": [131, 316, 339, 348, 386, 406, 437, 458, 491, 514, 544, 558, 668, 763], "disrupt": [314, 384, 435, 489, 1004], "dissimilar": [105, 108, 136, 562, 563, 565, 570, 571, 572, 574, 575, 577, 580, 581, 583, 586, 587, 606, 613, 614, 615, 616, 618, 623, 624, 625, 626, 627, 628, 629, 630, 632, 634, 635, 638, 639, 641, 646, 647, 648, 650, 651, 653, 655, 657, 660, 661], "dissimilaritymatrix": [125, 136, 561, 563, 565, 570, 572, 574, 575, 577, 581, 582, 584, 586, 587, 588, 606, 613, 637, 639, 641, 646, 648, 650, 651, 655, 658, 660, 661, 669], "dist": [886, 901], "dist_f": 886, "distanc": [1, 17, 95, 105, 106, 107, 108, 109, 111, 112, 125, 136, 137, 333, 335, 400, 402, 452, 454, 508, 510, 553, 555, 561, 572, 575, 581, 583, 587, 593, 606, 670, 671, 773, 776, 777, 779, 782, 784, 861, 875, 876, 884, 886, 901, 923, 930, 941, 1001, 1007], "distance_filt": 17, "distance_from_r": 886, "distance_from_r_squar": 886, "distance_matrix": [663, 664, 666, 667, 779, 782], "distancematrix": [108, 109, 112, 125, 136, 584, 589, 606, 613, 614, 633, 663, 664, 665, 666, 667, 668, 669, 671, 773, 782, 930, 941], "distant": 901, "distinct": [47, 92, 93, 102, 590, 613], "distinguish": [75, 95], "distort": 592, "distribut": [78, 131, 600, 607, 669, 782, 787, 788, 790, 791, 849], "div": 143, "diverg": 1, "divers": [613, 792, 1001], "divid": [129, 610, 779, 781, 785, 809], "divis": [348, 610, 785], "dj": 132, "dm": [125, 565, 572, 581, 584, 587, 613, 618, 625, 630, 633, 635, 641, 648, 655, 658, 659, 661, 663, 664, 667, 668, 773, 941], "dm1": 668, "dm2": 668, "dm_fh": 613, "dm_from_np": 613, "dmp": 899, "dna": [0, 29, 30, 31, 32, 33, 34, 39, 41, 44, 46, 47, 49, 50, 51, 53, 54, 55, 57, 58, 59, 62, 65, 67, 129, 131, 132, 133, 134, 135, 139, 140, 142, 348, 360, 377, 379, 380, 381, 383, 384, 387, 388, 389, 390, 393, 394, 396, 404, 408, 409, 428, 430, 431, 432, 434, 435, 438, 439, 440, 441, 444, 445, 448, 456, 461, 462, 464, 481, 482, 484, 485, 486, 488, 489, 492, 493, 494, 495, 496, 497, 500, 501, 503, 504, 512, 515, 516, 518, 519, 523, 540, 547, 549, 559, 614, 1002, 1004], "dna_seq": [131, 132, 134], "dnaful": 573, "do": [1, 46, 49, 91, 125, 132, 139, 141, 144, 184, 289, 294, 336, 365, 403, 411, 416, 455, 464, 469, 511, 523, 528, 556, 590, 595, 665, 668, 706, 784, 796, 817, 840, 849, 881, 894, 924, 925, 1007, 1009], "do_someth": 1009, "do_something_awesom": 1009, "do_something_els": 1009, "doc": [108, 129, 131, 132, 139, 141, 202, 205, 249, 267, 270, 283, 286, 583, 614, 632, 637, 649, 657, 853, 940], "docstr": [187, 234, 252], "doctest": 819, "document": [1, 36, 111, 126, 132, 134, 139, 140, 175, 595, 773, 793, 819, 853, 860, 861, 1002, 1006], "doe": [29, 46, 47, 49, 55, 58, 67, 79, 95, 127, 129, 130, 132, 133, 135, 137, 139, 142, 184, 197, 244, 262, 280, 307, 348, 349, 355, 358, 377, 428, 482, 540, 573, 583, 590, 613, 632, 654, 657, 663, 665, 667, 706, 782, 790, 791, 813, 835, 836, 853, 877, 886, 897, 910, 923, 930, 933, 940, 944, 1002], "doesn": [55, 132, 141, 283, 358, 607, 611, 776, 782, 786, 923, 942, 1008], "doi": [17, 67, 131, 133, 606, 612, 941], "domain": [142, 411, 899, 933], "domin": [69, 71, 77, 88, 99, 100, 103], "domrachev": 143, "don": [1, 17, 55, 132, 141, 318, 319, 493, 494, 593, 595, 668, 784, 787, 791, 885, 886, 923, 941], "done": [48, 595, 667, 694, 727, 738, 796], "doubl": [70, 71, 72, 73, 75, 77, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 96, 97, 98, 99, 100, 103, 176, 180, 776, 782], "doubleton": [1, 73, 74, 76, 78, 94], "doubt": 141, "download": [131, 134, 143], "dqyhrykedvgimkdqnmdsyrfsiswprilpkgklsgginhegikyynnli": 131, "dr": 131, "draw": [600, 787, 789, 790, 791, 879, 922], "draw_mod": [787, 791], "drawn": [600, 669, 787, 790, 791], "driver": [1, 77], "drop": [215, 279, 296, 367, 418, 471, 530, 668, 762, 777, 817, 920, 940], "drop_all_miss": 279, "drop_all_uniqu": 279, "drop_missing_valu": [198, 201, 245, 248, 263, 266], "drop_zero_vari": 279, "dt": 131, "dt_rich": 809, "dtype": [0, 1, 29, 34, 46, 47, 48, 49, 51, 54, 55, 57, 58, 129, 130, 132, 133, 139, 140, 142, 270, 287, 306, 307, 309, 310, 311, 317, 334, 336, 337, 340, 342, 377, 379, 380, 381, 387, 401, 403, 404, 408, 428, 430, 431, 432, 438, 453, 455, 456, 459, 461, 481, 482, 484, 485, 486, 492, 509, 511, 512, 515, 518, 523, 540, 554, 556, 559, 595, 614, 659, 663, 667, 762, 793, 833, 837, 851, 860, 932, 1004], "due": [93, 137, 229, 604, 605, 664, 667, 777, 790], "dump": [143, 1007, 1009], "dunn": 131, "duplic": [55, 112, 133, 141, 142, 229, 342, 408, 461, 518, 559, 575, 627, 651, 964], "duplicatenodeerror": [79, 95, 104, 106, 107, 108, 889], "duplicateregistrationerror": [155, 156, 157], "dure": [55, 132, 206, 307, 377, 428, 482, 540, 667, 834, 854, 855, 965], "dx": 81, "e": [0, 1, 17, 30, 41, 48, 51, 52, 58, 75, 80, 81, 82, 83, 84, 89, 90, 95, 96, 97, 98, 99, 100, 102, 106, 107, 108, 109, 112, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 205, 228, 234, 270, 283, 284, 307, 315, 316, 324, 358, 377, 385, 386, 392, 411, 428, 436, 437, 443, 446, 459, 482, 490, 491, 499, 516, 523, 540, 543, 544, 546, 561, 565, 572, 581, 587, 590, 595, 600, 610, 611, 613, 614, 618, 625, 630, 635, 637, 641, 648, 655, 659, 661, 663, 664, 665, 666, 667, 773, 779, 780, 789, 790, 792, 810, 814, 819, 836, 849, 853, 861, 862, 863, 876, 877, 879, 881, 882, 883, 887, 888, 890, 891, 892, 894, 895, 896, 897, 901, 905, 907, 908, 909, 910, 911, 917, 921, 922, 923, 926, 927, 928, 930, 931, 932, 933, 935, 936, 937, 938, 940, 941, 945, 964, 967, 1002, 1004, 1007, 1009], "e1004075": [606, 612], "e157": 95, "e_": [601, 602], "e_1": [601, 602], "e_d": 100, "e_h": 96, "e_i": 602, "e_matrix": 780, "each": [0, 1, 17, 29, 39, 44, 47, 48, 51, 54, 57, 61, 62, 63, 64, 65, 66, 67, 79, 91, 104, 106, 107, 108, 109, 112, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 205, 216, 217, 226, 270, 284, 289, 299, 304, 307, 313, 316, 329, 331, 346, 359, 370, 375, 377, 383, 386, 396, 398, 411, 421, 426, 428, 434, 437, 448, 450, 474, 479, 482, 488, 491, 504, 506, 521, 523, 533, 538, 540, 544, 549, 551, 561, 565, 575, 577, 590, 595, 597, 600, 604, 605, 607, 608, 609, 610, 613, 618, 627, 628, 641, 651, 652, 663, 664, 665, 666, 667, 668, 671, 672, 673, 683, 684, 695, 705, 706, 716, 717, 739, 749, 750, 760, 761, 762, 763, 773, 777, 778, 780, 781, 782, 784, 787, 790, 791, 809, 817, 819, 830, 836, 838, 850, 853, 856, 934, 940, 1002, 1004, 1009], "earlier": 1009, "earth": 109, "earthmicrobiom": 109, "easi": [132, 133, 141], "easier": [205, 561], "easili": [136, 1004], "ebi": [61, 64, 131, 134, 205], "ec_numb": 131, "ecoli": [128, 806], "ecolog": [1, 77, 762, 777, 782], "ecologi": [1, 77, 79, 80, 87, 88, 103, 595, 663, 664, 665, 666, 762, 776, 777, 782, 783, 784], "ecologist": 776, "ed": [81, 130], "edg": [137, 671, 776, 879, 932], "edit": [141, 665, 783], "editor": 132, "edu": [70, 74, 129, 132, 137, 139, 940], "educ": [0, 789], "edward": 134, "eeb": [70, 74], "eeeee": 142, "eeeeeeee": 142, "eeeeeeeeeeh": 142, "eeeeeeeehhh": 142, "effect": [17, 67, 77, 106, 107, 141, 184, 342, 408, 461, 518, 559, 572, 625, 648, 787, 789, 790, 791], "effici": [0, 136, 654], "efficiencywarn": 792, "effort": 134, "egozcu": [592, 601, 602, 606, 610, 612], "eh": 79, "eifcyilkinitilqfsitengmnefndatlpveeallntyridyyyrhlyi": 131, "eigendecomposit": [667, 782], "eigenvalu": [667, 763, 776, 782, 784], "eigenvector": [667, 777, 782], "eigh": [667, 782], "eight": 791, "eigval": [138, 763], "either": [1, 29, 36, 55, 57, 61, 62, 63, 95, 127, 141, 142, 155, 156, 157, 270, 319, 329, 360, 396, 448, 494, 504, 549, 591, 665, 667, 761, 773, 776, 781, 789, 791, 807, 808, 834, 850, 940], "elem": [819, 853], "element": [17, 136, 184, 565, 577, 597, 601, 602, 618, 628, 641, 652, 750, 773, 776, 780, 781, 785, 788, 790, 791, 792, 793, 796, 819, 822, 838, 853, 964], "elementwis": 779, "elev": 664, "ellaps": 861, "elong": 935, "els": [15, 16, 137, 144, 156, 176, 180, 290, 343, 361, 409, 412, 462, 465, 519, 523, 524, 778, 817, 841, 856, 883], "elsevi": [665, 762, 776, 777, 784], "elsewher": [79, 104, 106, 107, 108], "emb": [123, 124], "embed": [762, 1001], "embl": [134, 143, 205, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560], "embl_gen": 131, "embl_str": 131, "emboss": [61, 64], "emboss_needl": 61, "emboss_wat": 64, "embryophyta": 131, "emorg": 128, "emperor": 773, "emploi": 74, "empti": [3, 30, 52, 80, 128, 132, 135, 139, 173, 174, 316, 324, 386, 392, 437, 443, 491, 499, 544, 546, 575, 595, 627, 651, 789, 796, 828, 845, 846, 883, 933, 944, 1002], "en": [132, 133, 142, 941], "ena": [131, 134], "enabl": [853, 967, 1009], "encod": [125, 132, 133, 140, 144, 145, 184, 270, 610, 762], "encode_miss": [203, 204, 250, 251, 268, 269, 287], "encount": [1, 141, 892, 894, 901], "encourag": 790, "end": [0, 17, 61, 62, 63, 64, 65, 66, 67, 113, 127, 128, 131, 132, 133, 134, 135, 142, 143, 205, 215, 226, 232, 308, 327, 358, 378, 395, 429, 447, 483, 502, 541, 548, 923], "endpoint": [791, 930], "enforc": [132, 270, 523], "engel": 89, "engin": 968, "english": [137, 665], "enough": [77, 132, 137, 791], "enrol": 791, "ens_": 77, "ens_pi": 77, "enspi": 100, "ensur": [1, 17, 48, 79, 106, 107, 144, 289, 411, 464, 563, 597, 600, 604, 616, 637, 639, 882, 944], "entail": [79, 104, 106, 107, 108], "entir": [1, 17, 29, 75, 289, 411, 464, 523, 796, 853, 857], "entiti": [102, 205, 853], "entrez": 143, "entri": [81, 125, 126, 131, 143, 761, 814, 817, 839, 840, 855, 856, 860], "entropi": [48, 83, 98], "enumer": 17, "env": [664, 813], "environ": [70, 106, 107, 607, 777, 851], "environment": [95, 664, 762, 777, 782, 783], "enzym": 91, "eq": [779, 780], "equal": [1, 34, 43, 48, 68, 70, 102, 106, 107, 108, 132, 188, 194, 206, 212, 218, 224, 235, 241, 253, 259, 271, 277, 294, 303, 349, 355, 365, 374, 416, 425, 469, 478, 523, 528, 537, 561, 563, 570, 590, 607, 616, 623, 639, 646, 663, 665, 666, 667, 669, 671, 761, 776, 781, 782, 785, 790, 791, 792, 794, 815, 884, 940, 944, 945], "equat": [73, 74, 80, 91, 665], "equit": [96, 100], "equival": [41, 77, 79, 95, 133, 141, 292, 293, 316, 318, 339, 340, 346, 359, 363, 364, 386, 406, 414, 415, 437, 458, 467, 468, 491, 493, 514, 515, 521, 526, 527, 544, 558, 572, 587, 590, 595, 625, 635, 648, 661, 665, 762, 1004], "erb": [606, 612], "eredi": 81, "erik": [17, 67], "error": [1, 48, 79, 91, 95, 104, 106, 107, 108, 132, 133, 139, 141, 144, 184, 229, 270, 284, 342, 408, 461, 518, 559, 663, 665, 667, 787, 791, 858, 946, 1002], "escap": 137, "especi": [125, 132, 141, 671, 784], "essenti": 134, "esti": 78, "estim": [17, 70, 73, 74, 78, 80, 82, 84, 85, 86, 91, 97, 600, 781, 789, 790, 791], "estrang": 137, "et": [595, 600, 671, 793, 860], "etc": [56, 60, 81, 123, 124, 132, 133, 141, 176, 177, 178, 180, 181, 182, 202, 205, 231, 233, 249, 267, 285, 286, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 561, 582, 588, 631, 636, 656, 662, 774, 775, 782, 784, 836, 844, 859, 861, 918, 939, 1003, 1004], "euclidean": [592, 613, 664, 776, 782, 784], "euclidian": 782, "eudicotyledon": 131, "eukaryota": 131, "euryarchaeota": [900, 933], "evalu": [79, 95, 127, 128, 296, 367, 418, 471, 530, 613, 664, 761, 787, 883, 920, 923, 1007, 1009], "evaul": 144, "even": [61, 62, 63, 69, 83, 89, 96, 100, 132, 137, 358, 663, 667, 791, 934], "evenli": [607, 773], "everi": [70, 141, 143, 279, 594, 607, 608, 609, 610, 611, 668, 882, 897, 903], "evid": [131, 137], "evmltdiprlhindpimk": 142, "evolut": [132, 137, 139, 670, 671, 881, 940, 941], "evolutionari": [79, 561, 573, 861, 941], "ex": 1009, "exact": [79, 95, 104, 106, 107, 108, 141, 205, 307, 377, 428, 482, 540, 667, 782, 1002], "exactli": [29, 46, 49, 54, 64, 65, 66, 132, 133, 139, 144, 203, 250, 268, 270, 294, 303, 349, 365, 374, 416, 425, 469, 478, 528, 537, 611, 773, 879], "examin": [968, 1009], "exampl": [0, 1, 29, 30, 31, 32, 33, 34, 39, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 79, 106, 107, 108, 136, 141, 144, 155, 156, 157, 185, 205, 215, 227, 232, 270, 289, 290, 291, 294, 296, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 348, 349, 357, 358, 359, 360, 361, 362, 365, 367, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 411, 412, 413, 416, 418, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 464, 465, 466, 469, 471, 474, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 528, 530, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 572, 573, 576, 579, 581, 584, 587, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 614, 625, 630, 633, 635, 648, 655, 658, 659, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 761, 773, 782, 789, 790, 791, 792, 806, 807, 808, 809, 810, 812, 813, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 858, 862, 863, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 946, 966, 1002, 1003, 1004, 1005, 1007, 1009], "example_protein_embed": 130, "example_t": [126, 812, 831, 832, 833, 836, 837, 851, 852], "exce": [132, 139], "exceed": 141, "excel": [133, 141], "except": [1, 132, 137, 138, 139, 141, 156, 358, 575, 627, 651, 666, 777, 889, 940, 942, 943, 978, 1008], "excit": 1009, "exclud": [140, 610, 652, 659, 926], "exclude_absent_taxa": 885, "exclus": [144, 205, 215, 226, 308, 327, 378, 395, 429, 447, 483, 502, 541, 548, 595], "execut": [144, 684, 728, 968, 990, 1009], "exercis": 789, "exhibit": 776, "exist": [0, 57, 70, 75, 126, 137, 144, 155, 156, 157, 173, 174, 358, 561, 573, 577, 613, 628, 652, 665, 668, 773, 813, 819, 825, 861, 878, 886, 891, 893, 924, 965, 990, 1004], "exon": [135, 205, 332, 399, 451, 464, 507, 523, 552], "exp": [594, 599, 606, 612], "expand": [671, 836, 933], "expect": [1, 109, 127, 144, 172, 289, 411, 464, 600, 601, 602, 613, 671, 776, 777, 784, 809, 818, 819, 834, 853, 932, 1009], "expens": 796, "experi": [0, 131, 134, 141, 595, 600, 790], "experienc": 791, "experiment": [131, 667, 1003], "explain": [134, 135, 138, 672, 706, 750, 762, 763, 776, 782, 784], "explan": [776, 777], "explanatori": [671, 762, 763, 777, 784], "explicit": 133, "explicitli": [95, 139, 141, 342, 408, 461, 518, 559, 762], "explor": [1, 105, 762], "exploratori": 1, "expon": [137, 609], "export": 141, "expos": 819, "express": [103, 315, 343, 385, 409, 436, 462, 490, 519, 543, 600, 606, 612, 790, 1004], "ext": [202, 249, 267, 286], "extend": [0, 17, 46, 55, 61, 62, 63, 64, 65, 66, 79, 790, 878, 891, 940, 1002], "extens": [131, 141, 202, 249, 267, 286], "extern": 137, "extinct": 79, "extra": [143, 144, 663, 664, 666, 667, 728], "extract": [565, 600, 613, 614, 618, 641, 663, 667, 777, 881, 1004], "extrapol": [85, 86, 787], "extrem": 665, "f": [1, 17, 55, 71, 85, 95, 109, 126, 127, 128, 130, 133, 137, 140, 142, 143, 185, 411, 665, 666, 667, 777, 780, 787, 790, 808, 809, 819, 842, 845, 853, 855, 856, 862, 863, 876, 877, 879, 881, 882, 883, 887, 888, 890, 891, 892, 894, 895, 896, 897, 901, 907, 908, 909, 910, 911, 917, 921, 922, 923, 926, 927, 928, 930, 931, 935, 936, 937, 938, 940, 1007], "f_1": [70, 73, 78, 82, 97], "f_2": [73, 78], "f_i": 70, "f_onewai": 595, "fabacea": 131, "fabal": 131, "fabid": 131, "facilit": [79, 106, 107, 109, 125, 637, 762, 787, 889, 941], "fact": 358, "factor": [95, 106, 107, 663, 666, 671, 777, 791], "factori": [144, 155, 156, 157, 169, 179], "fail": [79, 80, 95, 104, 106, 107, 108, 229, 667, 787, 967, 968, 1009], "fail_callback": [968, 1009], "fail_f": 1009, "failur": [70, 968, 1009], "fairli": 671, "faith": [1, 79, 95, 613], "faith_pd": [1, 95], "fall": [81, 84, 95, 107, 761], "fals": [1, 15, 16, 17, 30, 31, 32, 33, 34, 46, 47, 49, 51, 52, 53, 54, 58, 61, 62, 63, 73, 74, 79, 95, 104, 106, 107, 108, 113, 127, 130, 131, 132, 133, 134, 135, 137, 140, 155, 156, 157, 184, 185, 198, 201, 203, 204, 205, 215, 227, 228, 245, 248, 250, 251, 263, 266, 268, 269, 279, 287, 289, 290, 291, 292, 294, 296, 303, 306, 307, 309, 310, 311, 313, 316, 317, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 358, 359, 360, 361, 362, 363, 365, 367, 374, 377, 379, 380, 381, 383, 386, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 416, 418, 425, 428, 430, 431, 432, 434, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 469, 471, 478, 481, 482, 484, 485, 486, 488, 491, 492, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 528, 530, 537, 540, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 562, 563, 570, 572, 595, 600, 606, 612, 615, 616, 623, 625, 638, 639, 646, 648, 652, 654, 665, 668, 671, 672, 673, 695, 706, 739, 782, 784, 787, 789, 790, 792, 809, 816, 817, 820, 828, 829, 830, 831, 839, 840, 842, 846, 849, 851, 852, 853, 856, 858, 879, 884, 885, 888, 896, 902, 905, 906, 911, 919, 931, 933, 934, 936, 945, 967, 990, 1004, 1007, 1009], "famili": 1, "far": 776, "farthest": 923, "fasffbf": 133, "fast": [79, 106, 107, 672, 782, 834], "fasta": [56, 60, 133, 135, 140, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 1002], "fasta_fl": 132, "fasta_format": 132, "faster": [1, 79, 106, 107, 109, 316, 346, 359, 386, 437, 491, 521, 544, 667, 782, 914], "fastq": [56, 60, 140, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 1002], "fastq_format": 133, "favor": [67, 605], "fc": 600, "fd": [79, 966], "fdr_bh": [595, 600], "featur": [1, 81, 92, 126, 132, 135, 141, 142, 205, 215, 218, 227, 229, 230, 232, 270, 289, 411, 464, 523, 592, 595, 600, 610, 763, 772, 776, 777, 783, 784, 945, 1003, 1004, 1005], "feature_t": 134, "fecal": 791, "federhen": 143, "fee": [132, 139], "felsenstein": [132, 139, 1007], "fernand": 600, "fernandez": [592, 604], "ferr": 134, "fetch": [215, 849, 1007], "fetureid": 141, "few": [79, 106, 107, 109, 819, 853, 1002, 1007, 1009], "fewer": [70, 139, 790, 791], "fff": 133, "ffffx": 133, "ffllssssyi": 348, "fglfmeqlttgdysksmrrivknrlpkfskfesslvngsfdfiginyysssi": 131, "fh": [127, 128, 129, 132, 133, 134, 135, 139, 140, 142, 143, 144, 155, 156, 157], "field": [1, 128, 133, 140, 348, 762, 819, 853], "fifth": 132, "fig": [1, 581, 630, 655, 773], "figur": [581, 630, 655, 773], "file": [56, 60, 123, 124, 125, 126, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 156, 169, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 202, 231, 233, 249, 267, 270, 283, 285, 286, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 581, 582, 588, 595, 613, 630, 631, 636, 655, 656, 662, 694, 727, 738, 773, 774, 775, 789, 793, 806, 807, 808, 809, 810, 814, 818, 819, 821, 825, 834, 840, 842, 843, 844, 847, 848, 853, 854, 855, 856, 859, 860, 881, 918, 939, 965, 966, 1001, 1007], "fileformaterror": 144, "filehandl": [56, 60, 123, 124, 144, 155, 156, 157, 176, 177, 178, 180, 181, 182, 184, 185, 231, 233, 285, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 774, 775, 844, 859, 918, 939], "filenam": 965, "filepath": [56, 60, 123, 124, 176, 177, 178, 180, 181, 182, 184, 202, 231, 233, 249, 267, 283, 285, 286, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 668, 774, 775, 844, 859, 918, 939], "filesentinel": [144, 155, 157], "filter": [17, 48, 67, 140, 196, 197, 243, 244, 261, 262, 270, 279, 280, 310, 380, 431, 485, 668, 807, 808, 849, 933, 1009], "filter_column": 280, "filter_f": 933, "filter_fn": 817, "filter_id": [198, 245, 263, 279, 282], "final": [142, 671, 809, 854, 855, 1009], "find": [0, 80, 309, 311, 314, 317, 327, 329, 334, 336, 337, 379, 381, 384, 387, 395, 396, 401, 403, 404, 430, 432, 435, 438, 447, 448, 453, 455, 456, 459, 484, 486, 489, 492, 502, 504, 509, 511, 512, 548, 549, 554, 556, 664, 667, 671, 777, 791, 830, 876, 877, 889, 891, 892, 895, 896, 897, 902, 904, 905, 906, 907, 909, 910, 917, 921, 926, 935, 937, 938, 964], "find_al": [894, 896, 897], "find_by_func": [894, 895, 897], "find_by_id": [894, 895, 896], "find_motif": [329, 396, 448, 504, 549, 1004], "find_with_regex": [329, 396, 448, 504, 549, 1004], "fine": 856, "firmicut": [836, 899, 900, 933], "first": [1, 17, 61, 62, 63, 64, 65, 66, 67, 70, 79, 106, 107, 113, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 157, 227, 232, 327, 329, 345, 346, 358, 395, 396, 447, 448, 502, 504, 520, 523, 548, 549, 565, 593, 594, 595, 600, 607, 618, 641, 663, 665, 695, 750, 762, 778, 787, 790, 814, 825, 855, 881, 885, 894, 895, 900, 903, 933, 934, 978, 1002, 1007, 1009], "fish": 762, "fisher": 80, "fit": [91, 600, 761, 763, 784, 1008], "five": [132, 143, 581, 595, 630, 655, 941], "fix": [85, 136, 139], "fl": 132, "flag": [143, 1007], "flat": [134, 329, 396, 448, 504, 549], "flatfil": 131, "flatten": 781, "float": [48, 51, 61, 62, 63, 64, 65, 66, 67, 68, 79, 84, 85, 95, 104, 106, 107, 108, 109, 112, 125, 127, 134, 136, 137, 141, 270, 287, 312, 318, 319, 333, 335, 382, 400, 402, 433, 452, 454, 487, 493, 494, 508, 510, 542, 553, 555, 577, 579, 590, 591, 595, 600, 604, 605, 609, 612, 613, 614, 628, 652, 665, 667, 669, 671, 684, 728, 773, 788, 790, 791, 796, 819, 820, 822, 823, 834, 850, 853, 861, 876, 884, 885, 886, 891, 892, 901, 932, 940, 944], "float32": [125, 130, 667, 851], "float64": [1, 55, 125, 130, 307, 377, 428, 482, 540, 595, 659, 667, 762, 819, 853], "flush": 184, "fmet": 358, "fn": 965, "focu": 144, "focus": [270, 784], "fold": [600, 1002], "folder": 965, "follow": [1, 52, 53, 55, 67, 74, 79, 80, 95, 106, 107, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 205, 270, 289, 296, 324, 326, 367, 392, 394, 411, 418, 443, 445, 464, 471, 499, 501, 523, 530, 546, 547, 565, 573, 593, 594, 595, 598, 599, 601, 602, 603, 607, 609, 610, 613, 618, 641, 663, 664, 665, 667, 668, 672, 773, 776, 791, 880, 917, 968, 1002, 1007, 1009], "foo": [135, 141, 215, 523, 796, 809, 810, 819, 820, 835, 845, 853, 855, 856, 966, 1009], "foobar": [810, 1009], "foral": [598, 599], "foraminifera": 71, "ford": 95, "form": [1, 29, 61, 186, 565, 614, 618, 637, 641, 659, 804, 805, 814, 818, 855, 932], "formal": [133, 143, 592], "format": [56, 60, 123, 124, 158, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 187, 202, 205, 231, 233, 249, 252, 267, 270, 283, 285, 286, 288, 338, 343, 347, 348, 356, 405, 409, 410, 457, 462, 463, 513, 519, 522, 557, 560, 582, 583, 588, 614, 631, 632, 636, 637, 649, 654, 656, 657, 662, 694, 727, 738, 774, 775, 793, 814, 818, 819, 820, 821, 844, 849, 851, 853, 854, 855, 859, 860, 879, 899, 918, 939, 941, 1001, 1006, 1007], "format_f": 853, "format_nam": [170, 171, 172], "format_object": 168, "format_url": 820, "format_vers": [126, 793, 819, 853, 860], "formatidentificationwarn": [176, 180], "former": 561, "formula": [81, 667], "forum": 141, "forward": [1, 346, 358, 359, 521], "fould": 884, "found": [17, 102, 126, 128, 131, 132, 133, 134, 137, 139, 142, 176, 178, 180, 182, 342, 408, 461, 518, 559, 575, 627, 651, 664, 665, 667, 791, 819, 853, 884, 894, 895, 896, 897, 907, 909, 925, 940], "foundat": 133, "four": [29, 133, 142, 289, 411, 464, 595, 773], "fr": 940, "frac": [70, 71, 72, 73, 77, 78, 80, 81, 82, 83, 87, 88, 89, 90, 91, 96, 97, 100, 103, 593, 594, 598, 603, 604, 605, 607, 608, 609, 610, 665, 784], "fraction": [71, 591, 791, 822, 885, 1007], "fraction_diff": [312, 382, 433, 487, 542], "fraction_sam": [312, 382, 433, 487, 542], "frame": [127, 128, 346, 358, 359, 521, 600, 664, 899], "framework": [95, 592], "free": [143, 967, 1009], "freedom": [600, 606, 612, 781, 788], "freq": [316, 331, 386, 398, 437, 450, 491, 506, 544, 551], "frequenc": [1, 48, 51, 70, 82, 318, 319, 331, 333, 335, 398, 400, 402, 450, 452, 454, 493, 494, 506, 508, 510, 551, 553, 555, 787, 789, 791, 861, 881], "frequent": [796, 861, 883], "friedman": 595, "friedmanchisquar": 595, "from": [0, 1, 2, 17, 29, 30, 31, 32, 33, 34, 39, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 75, 79, 84, 95, 102, 103, 106, 107, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 155, 156, 157, 176, 180, 196, 203, 204, 205, 214, 215, 227, 228, 231, 234, 243, 250, 251, 261, 268, 269, 270, 283, 284, 285, 287, 289, 290, 291, 294, 296, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 348, 358, 359, 360, 361, 362, 365, 367, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 411, 412, 413, 416, 418, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 464, 465, 466, 469, 471, 474, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 528, 530, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 565, 572, 573, 576, 577, 579, 581, 582, 584, 585, 587, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 618, 625, 628, 630, 631, 633, 635, 641, 648, 652, 655, 656, 658, 659, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 761, 762, 773, 774, 776, 777, 779, 780, 782, 787, 789, 790, 791, 792, 806, 807, 808, 809, 810, 812, 813, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 858, 862, 863, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 946, 966, 968, 1004, 1007, 1009], "from_": [572, 625, 648], "from_dict": [59, 663, 667, 672, 773, 789, 790], "from_hdf5": 853, "from_iter": 589, "from_ncbi": [348, 349, 358, 359, 520, 521], "from_taxdump": 900, "from_taxonomi": [899, 933], "front": [232, 610], "frontier": 95, "frozenset": [883, 927, 928], "fsvd": [667, 782], "ft_current": 205, "ftp": [131, 143, 205], "full": [85, 86, 129, 595, 796, 809, 831, 897, 923, 965], "full_genome_avail": [817, 842], "fulli": [95, 134, 1002], "fun": 1009, "func": [821, 845, 883, 896, 920, 925, 936, 947, 980, 991], "function": [1, 61, 62, 63, 79, 80, 85, 86, 91, 94, 106, 107, 108, 109, 112, 132, 133, 140, 155, 156, 157, 170, 171, 172, 175, 205, 215, 227, 289, 312, 348, 382, 411, 433, 464, 487, 542, 561, 577, 590, 593, 594, 595, 598, 599, 601, 602, 605, 610, 628, 652, 664, 665, 666, 667, 668, 669, 672, 761, 777, 786, 789, 790, 791, 793, 809, 814, 817, 819, 821, 834, 842, 845, 847, 853, 854, 855, 856, 860, 879, 883, 886, 891, 896, 920, 925, 933, 935, 936, 941, 942, 944, 945, 946, 947, 965, 967, 979, 980, 990, 991, 1001, 1002, 1003, 1004, 1007], "further": [144, 270, 790, 1007], "futher": 144, "futur": [79, 95, 106, 107, 132], "fuzzi": [135, 205, 206, 214, 215, 226, 227, 523], "g": [0, 1, 17, 34, 48, 49, 55, 63, 66, 81, 84, 91, 95, 109, 112, 127, 129, 131, 132, 133, 134, 136, 137, 138, 139, 141, 143, 144, 205, 234, 270, 283, 289, 296, 299, 304, 307, 308, 315, 316, 317, 318, 319, 329, 367, 370, 375, 377, 378, 385, 386, 387, 396, 411, 418, 421, 426, 428, 429, 436, 437, 438, 448, 464, 471, 474, 479, 482, 483, 490, 491, 492, 493, 494, 504, 523, 530, 533, 538, 540, 541, 543, 544, 549, 561, 565, 573, 579, 590, 595, 610, 613, 614, 618, 637, 641, 659, 663, 664, 666, 667, 773, 790, 791, 819, 836, 849, 853, 861, 882, 883, 888, 891, 895, 922, 923, 924, 926, 927, 933, 936, 937, 938, 940, 967, 1002, 1004, 1007, 1009], "g1": 667, "g2": 667, "g_m": 598, "ga": [523, 1004], "gaa": 1004, "gaagcaatgc": 131, "gaagttgagt": 131, "gaatcaagcc": 131, "gabor": [17, 67], "gac": [330, 397, 449, 505, 550], "gacccgcuuu": 1004, "gacg": [330, 397, 449, 505, 550], "gacgtt": [321, 322, 389, 390, 440, 441, 496, 497], "gag": [342, 408, 461, 518, 559], "gagatagagt": 131, "gagcccgggc": [132, 139], "gagccgtggc": [132, 139], "gagcggaggc": 131, "gaggacttcg": 131, "gaggtattgg": 131, "gagrctc": [342, 408, 461, 518, 559], "gain": [270, 613, 782], "gair": 132, "gairaagccttggc": 139, "gamma": 70, "gap": [0, 17, 47, 48, 51, 55, 61, 62, 63, 64, 65, 66, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 289, 306, 307, 310, 313, 314, 318, 319, 322, 329, 340, 341, 342, 344, 345, 346, 348, 358, 359, 360, 377, 380, 383, 384, 390, 396, 407, 408, 411, 428, 431, 434, 435, 441, 448, 460, 461, 464, 481, 482, 485, 488, 489, 493, 494, 497, 504, 515, 516, 517, 518, 520, 521, 523, 540, 549, 559, 590, 933, 1004, 1009], "gap_char": [310, 360, 380, 431, 485], "gap_charact": [342, 408, 461, 518, 559], "gap_extend_penalti": [17, 61, 62, 63, 64, 65, 66], "gap_mod": 48, "gap_open_penalti": [17, 61, 62, 63, 64, 65, 66], "gapopen": [127, 128], "garbag": 184, "gardnerella": 791, "garrison": [17, 67], "gascuel": 941, "gaston": 79, "gataccttca": 131, "gatcacttga": 131, "gatcttcccc": 131, "gatgcaacac": 131, "gather": [587, 635, 661, 1007], "gattattcta": 131, "gattttcgag": 131, "gauu": [334, 336, 401, 403, 453, 455, 509, 511, 554, 556], "gb": [128, 134], "gb_str": 134, "gbk": 134, "gc": [47, 131, 132, 133, 134, 135, 143, 289, 306, 307, 310, 313, 319, 340, 344, 349, 359, 377, 380, 383, 428, 431, 434, 464, 481, 482, 485, 488, 494, 515, 516, 540, 1004], "gc_content": [319, 494], "gc_frequenc": [318, 493], "gcaattttca": 131, "gcacatccct": 134, "gcacaucccu": 134, "gcagaagctg": 131, "gcagatgtg": 591, "gcatgcatgc": 135, "gcatggtcat": 131, "gcaugcaucugcauacguacguacgcaugca": 129, "gcaugcaucugcauacguacguacgcaugcagucgauacauacguacgucgguacgu": 129, "gcaugcaucugcauacguacguacgcaugcauca": 129, "gccaaaccca": 131, "gcccagtagcttcccaatatgagagcatcaattgtagatcgggcc": 0, "gccccccuuu": 1004, "gcgtatagtt": 131, "gcgtgcctaaggtatgcaag": 0, "gctaactaggctcccttctacccctctcagaga": 0, "gctgccgaga": 131, "gctgttattt": 131, "gcttcatctt": 131, "gen": [135, 1009], "gen1": 135, "gen2": 135, "gena": 205, "genbank": [131, 135, 143, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560], "gender": [613, 789, 790], "gene": [1, 135, 205, 215, 227, 230, 289, 523, 600, 606, 612, 793, 860, 1003], "gene_nam": 205, "genea": 806, "geneb": 806, "gener": [1, 46, 49, 61, 67, 68, 69, 87, 95, 109, 130, 133, 134, 135, 137, 142, 143, 155, 157, 170, 172, 176, 180, 183, 315, 329, 330, 385, 396, 397, 436, 448, 449, 490, 504, 505, 523, 543, 549, 550, 561, 600, 613, 663, 664, 665, 669, 761, 763, 773, 776, 787, 790, 791, 819, 829, 830, 838, 842, 853, 1002, 1004, 1008], "generated_bi": [793, 820, 853, 854, 860], "generatortyp": [829, 831, 842], "genet": [132, 137, 139, 143, 345, 346, 348, 349, 355, 356, 357, 358, 359, 520, 521, 670, 940, 1004], "genetic_cod": [520, 521], "geneticcod": [346, 520, 521, 1004], "genom": [1, 215], "genpept": 134, "gentil": 610, "genu": [1, 143], "geologi": 592, "geometr": [596, 598, 600, 610, 667], "geometri": [592, 594, 598, 599, 602], "geq": 784, "gerald": 610, "get": [68, 126, 130, 141, 184, 185, 214, 215, 348, 357, 613, 665, 761, 777, 817, 824, 825, 826, 827, 833, 835, 837, 839, 840, 858, 888, 927], "get_alpha_diversity_metr": [1, 104, 111], "get_beta_diversity_metr": [1, 108, 110, 112], "get_column": 282, "get_id": [196, 197, 201, 243, 244, 248, 261, 262, 266, 280, 281], "get_max_dist": 892, "get_nam": 573, "get_trajectori": 672, "get_value_by_id": 812, "getaaafhwqaaf": 140, "getvalu": [129, 132, 133, 134, 135, 139, 142, 613], "gff": 135, "gff3": [134, 231, 233, 338, 347, 405, 410, 557, 560], "gff_str": 135, "gfgmvinn": 142, "gfp": 1004, "gfv": 142, "gg": [308, 314, 378, 384, 429, 435, 483, 489, 541], "gg_otu_1": [819, 820], "gg_otu_2": 820, "gg_otu_3": 820, "gg_otu_4": 820, "gg_otu_5": 820, "gga": 1004, "ggaa": [307, 377, 428, 482, 540], "ggacugaa": 1004, "ggag": [314, 384, 435, 489], "ggattgttta": 131, "ggca": 0, "ggctaacggt": 131, "ggg": 1004, "ggggagg": [314, 384, 435, 489], "gggtttttac": 131, "ggt": [142, 339, 406, 458, 514, 558], "ggta": 0, "ggtaccaacg": [339, 406, 458, 514, 558], "ggtacgcaag": 0, "ggtc": [310, 380, 431, 485], "ggtccattc": [310, 380, 431, 485], "ggtggtttct": 131, "ggtgtttagc": 131, "ggtt": 813, "ggu": [291, 362, 413, 466, 525], "gguc": [299, 301, 304, 312, 333, 334, 335, 336, 370, 372, 375, 382, 400, 401, 402, 403, 421, 423, 426, 433, 452, 453, 454, 455, 474, 476, 479, 487, 508, 509, 510, 511, 533, 535, 538, 542, 553, 554, 555, 556], "ggucg": [296, 308, 367, 378, 418, 429, 471, 483, 530, 541], "ggucguaaagga": [305, 376, 427, 480, 539], "ggucgugaag": 523, "ggucgugaagga": [291, 296, 362, 367, 413, 418, 466, 471, 523, 525, 530], "gi": [127, 128, 134], "gigasci": [773, 793, 860], "gilk": 671, "gini": [81, 99], "gish": [127, 128], "github": 773, "give": [1, 137, 776, 777, 784, 793, 860, 886], "given": [1, 56, 60, 70, 81, 84, 89, 91, 100, 104, 108, 109, 112, 123, 124, 132, 133, 137, 138, 141, 155, 157, 173, 174, 176, 177, 180, 181, 228, 231, 233, 285, 288, 338, 342, 347, 405, 408, 410, 457, 461, 463, 513, 518, 522, 557, 559, 560, 577, 582, 588, 610, 628, 631, 636, 652, 656, 662, 664, 665, 668, 774, 775, 777, 781, 786, 788, 790, 824, 826, 834, 842, 844, 849, 858, 859, 861, 896, 918, 939, 966, 967, 979, 1009], "gkp1137": 133, "glahn": [592, 606, 612], "gln": 411, "global": [0, 61, 62, 63], "global_pairwise_align": [62, 63, 64, 65, 66], "global_pairwise_align_nucelotid": [61, 63, 64, 65, 66], "global_pairwise_align_nucleotid": 0, "global_pairwise_align_protein": [61, 62, 64, 65, 66], "glossari": 48, "glu": 411, "glucosidas": 131, "glutam": 411, "glutamin": 411, "glx": 411, "gly": 411, "glycin": [48, 411], "glycosyl": [329, 396, 435, 448, 504, 549, 1004], "go": [791, 849, 1007, 1009], "goa": 131, "goal": [141, 1002], "goldman": 95, "gonzalez": 773, "good": [78, 82, 782], "goodrich": 884, "googl": 141, "gorilla": [132, 139], "gorlick": 142, "goto": 133, "gouet": [85, 86], "gov": [48, 62, 63, 65, 66, 127, 128, 132, 134, 140, 143, 348, 356, 357], "gracilibacteria": 348, "gradient": [81, 762, 776, 777, 782, 784], "gradientanova": [673, 695, 739, 750], "gradientanovaresult": [683, 705, 716, 749, 760], "graft": 935, "gram": [601, 602], "grammar": [360, 523], "grammaredsequ": [29, 39, 44, 46, 49, 50, 61, 64, 129, 132, 139, 142, 289, 310, 313, 341, 411, 431, 434, 460, 464, 485, 488, 517, 1004], "grand": 861, "grant": [132, 139], "greater": [132, 215, 290, 361, 412, 465, 524, 600, 663, 665, 666, 667, 668, 671, 790, 791, 792, 825, 849], "grei": 773, "group": [1, 102, 141, 343, 409, 462, 519, 572, 595, 600, 610, 625, 648, 663, 666, 667, 672, 673, 683, 684, 705, 716, 728, 738, 739, 749, 760, 762, 789, 790, 791, 804, 819, 824, 853, 967, 1003, 1007], "group1": 663, "group2": 663, "group3": 663, "group_md": 804, "group_observation_md": 824, "groupbi": 790, "groupresult": 684, "growth": [600, 790], "gsi": 610, "gt": 54, "gt10": 131, "gtaacctgag": 131, "gtacct": [129, 139], "gtagaggacc": 131, "gtagct": [129, 139], "gtatct": 139, "gtcgaa": [129, 139], "gtt": [330, 397, 449, 505, 550], "gttaatgcca": 131, "gttactcaac": 131, "gttcggcctc": 131, "gttgaccaat": 131, "gttgggatta": 131, "gtttatccaa": 131, "guaaccugag": 131, "guanin": [289, 464], "guarante": [55, 86, 141, 289, 313, 383, 411, 434, 464, 488, 614, 669, 891], "guc": [296, 367, 418, 471, 530], "gucgauacauacguacgucgguacgu": 129, "gucgauacauacguacgucguacguacgu": 129, "guess": [56, 91, 123, 132, 176, 180, 231, 285, 338, 405, 457, 513, 557, 582, 631, 656, 774, 844, 918, 943], "gunnerida": 131, "gut": [1, 141, 773], "gytai": 142, "gzip": [184, 853], "h": [17, 70, 71, 75, 83, 95, 96, 97, 98, 99, 100, 132, 139, 142, 185, 289, 411, 464, 882, 883, 888, 891, 922, 923, 924, 927, 928, 937, 938, 940, 1007], "h5grp": [819, 853], "h5py": [819, 853], "h_": 595, "h_0": 81, "h_b": 72, "h_i": 81, "h_n": 81, "ha": [1, 17, 29, 47, 52, 53, 61, 62, 63, 68, 112, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 177, 181, 184, 201, 248, 266, 270, 283, 289, 306, 307, 310, 313, 323, 324, 325, 326, 337, 340, 344, 345, 346, 348, 358, 359, 360, 377, 380, 383, 391, 392, 393, 394, 404, 411, 428, 431, 434, 442, 443, 444, 445, 456, 464, 481, 482, 485, 488, 498, 499, 500, 501, 512, 515, 516, 520, 521, 523, 540, 545, 546, 547, 595, 597, 613, 761, 776, 778, 789, 790, 791, 809, 817, 834, 882, 902, 905, 906, 920, 924, 940, 967, 1004, 1007], "habitat": 777, "had": [79, 106, 107, 663, 667, 791], "half": [84, 607], "halobacteria": [900, 933], "ham": [312, 382, 433, 487, 542, 613, 1004], "hamadi": [79, 106, 107], "hand": [1, 782], "handbook": 132, "handi": [967, 1009], "handl": [48, 55, 132, 133, 140, 142, 143, 144, 145, 155, 157, 184, 270, 283, 358, 359, 595, 665, 667, 668, 787, 796, 809, 834, 843, 934, 941, 966, 1009], "handler": [145, 176, 178, 180, 182, 184], "happen": [137, 329, 396, 448, 504, 549, 940, 1009], "hard": [79, 104, 106, 107, 108], "hardcod": 78, "harm": 607, "has_children": [905, 906], "has_definit": [309, 311, 321, 325, 337, 379, 381, 389, 393, 404, 430, 432, 440, 444, 456, 484, 486, 496, 500, 512], "has_degener": [311, 320, 325, 381, 388, 393, 432, 439, 444, 486, 495, 500], "has_gap": [317, 387, 438, 492], "has_missing_valu": [196, 198, 243, 245, 261, 263], "has_nuc_pattern": 1009, "has_stop": 459, "hash": [9, 23, 118, 150, 163, 678, 689, 700, 711, 722, 733, 744, 755, 768, 869, 954, 973, 985, 996], "hashabl": [29, 31, 761, 990], "hashlib": 966, "hasn": [523, 792, 856], "have": [0, 1, 17, 47, 50, 51, 54, 55, 67, 69, 79, 84, 96, 100, 106, 107, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 175, 184, 205, 215, 216, 217, 270, 279, 284, 294, 307, 313, 329, 358, 365, 377, 383, 396, 416, 428, 434, 448, 469, 482, 488, 504, 528, 540, 549, 563, 579, 595, 611, 613, 616, 639, 665, 671, 672, 694, 706, 727, 738, 761, 773, 776, 777, 778, 781, 782, 784, 785, 787, 789, 790, 791, 792, 817, 819, 834, 835, 836, 853, 858, 861, 880, 881, 882, 891, 893, 894, 917, 923, 930, 932, 933, 942, 944, 1007, 1009], "hdf5": [125, 126, 130, 793, 819, 853, 860], "hdfgroup": 125, "hdist": 671, "he": 0, "header": [127, 128, 129, 133, 134, 136, 138, 141, 188, 194, 235, 241, 253, 259, 270, 271, 277, 282, 814, 818], "header_kei": [814, 855], "header_valu": [814, 855], "heagawghe": 0, "health": [595, 789, 790], "healthi": [789, 790, 791], "heatmap": [581, 630, 655], "heip": [83, 89], "heip_": 96, "hello": [305, 376, 427, 480, 539], "help": [141, 143], "helper": [7, 21, 37, 116, 148, 161, 190, 208, 220, 237, 255, 273, 297, 351, 368, 419, 472, 531, 566, 619, 642, 676, 687, 698, 709, 720, 731, 742, 753, 766, 797, 867, 944, 945, 952, 971, 983, 994, 1007], "henc": 665, "henikoff": [63, 66, 573], "here": [0, 1, 48, 70, 74, 79, 84, 89, 91, 97, 98, 100, 104, 105, 106, 107, 108, 109, 110, 111, 126, 130, 131, 134, 139, 144, 155, 157, 185, 329, 396, 448, 504, 549, 595, 600, 671, 782, 784, 819, 853, 934, 941, 1007], "hernand": 610, "heterogen": 783, "heuer": 133, "heurist": [17, 667, 782], "hexdigest": 966, "hgc": 143, "hi": 411, "hidden": 143, "hierarch": [143, 610], "hierarchi": [809, 898, 899, 1007], "high": [79, 106, 107, 132, 133, 600, 762, 773, 776, 782, 1005], "higher": [48, 561, 595, 600, 979], "highest": [17, 137], "highli": 48, "highlight": 133, "hill": 95, "histidin": 411, "histor": [1, 93, 348, 881], "histori": [79, 791], "hit": 128, "hoc": 787, "hochberg": [595, 600], "hoffmann": 95, "hold": [637, 683, 705, 716, 749, 760, 761, 782, 789, 850, 889, 990], "hollow": [108, 125, 614, 652, 654, 669], "holm": [595, 600], "hommola": 671, "homogen": [667, 776, 784], "homolog": 561, "horizont": 55, "host": [143, 671], "host_dist": 671, "hot": 762, "hotton": 143, "hous": 789, "how": [44, 54, 55, 91, 132, 134, 141, 184, 234, 270, 307, 329, 341, 358, 359, 377, 396, 407, 428, 448, 460, 482, 504, 517, 540, 549, 606, 612, 665, 782, 787, 789, 790, 791, 793, 815, 834, 860, 1002, 1009], "howev": [1, 79, 80, 95, 104, 106, 107, 108, 132, 136, 137, 141, 143, 289, 411, 464, 523, 592, 600, 667, 671, 762, 782, 796, 856, 892, 947], "hsp": [127, 128], "hstack": [789, 790], "htm": 664, "html": [48, 84, 126, 127, 129, 132, 134, 137, 139, 142, 205, 583, 614, 632, 637, 649, 657, 663, 664, 665, 666, 667, 773, 793, 819, 853, 860, 940], "http": [17, 48, 61, 62, 63, 64, 65, 66, 67, 70, 74, 84, 109, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 141, 142, 143, 202, 249, 267, 270, 283, 286, 348, 356, 357, 583, 606, 610, 612, 614, 632, 637, 649, 657, 663, 664, 665, 666, 667, 773, 793, 819, 820, 853, 860, 940, 941, 966], "huerta": 881, "hugh": 131, "human": [125, 132, 133, 136, 137, 138, 946], "hundr": [1, 109], "hwang": 70, "hydrogenosom": 143, "hypothesi": [592, 595, 600, 665, 668, 671, 787], "hypothet": 205, "h\u00e9bert": 610, "i": [0, 1, 3, 17, 29, 30, 31, 32, 33, 34, 36, 41, 43, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 112, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 155, 156, 157, 169, 170, 172, 176, 177, 178, 179, 180, 181, 182, 184, 188, 194, 202, 205, 206, 212, 214, 215, 218, 224, 226, 227, 228, 229, 231, 233, 234, 235, 241, 249, 253, 259, 267, 270, 271, 277, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 296, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 358, 359, 360, 361, 362, 363, 364, 365, 367, 374, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 425, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 530, 537, 540, 541, 542, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 570, 572, 575, 580, 581, 582, 583, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 623, 625, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 646, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 694, 706, 727, 738, 739, 750, 761, 762, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 796, 803, 806, 809, 810, 813, 814, 816, 817, 818, 819, 825, 828, 829, 830, 831, 834, 835, 836, 842, 843, 844, 845, 846, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 876, 879, 881, 883, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 903, 905, 906, 907, 909, 911, 912, 914, 917, 918, 922, 925, 927, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 951, 964, 965, 966, 967, 968, 978, 979, 990, 1001, 1002, 1004, 1007, 1008, 1009], "id": [0, 1, 29, 34, 52, 57, 58, 79, 95, 104, 106, 107, 108, 109, 112, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 188, 194, 197, 198, 200, 203, 204, 235, 241, 244, 245, 247, 250, 251, 253, 259, 262, 263, 265, 268, 269, 270, 271, 277, 279, 280, 282, 284, 287, 294, 303, 305, 324, 345, 346, 348, 357, 358, 359, 365, 374, 376, 392, 416, 425, 427, 443, 469, 478, 480, 499, 520, 521, 523, 528, 537, 539, 546, 562, 563, 565, 571, 572, 575, 577, 580, 584, 587, 606, 613, 614, 615, 616, 618, 624, 625, 627, 628, 629, 633, 635, 637, 638, 639, 641, 647, 648, 651, 652, 653, 654, 658, 659, 661, 663, 664, 665, 666, 667, 668, 669, 706, 750, 763, 772, 773, 789, 790, 791, 794, 803, 805, 806, 807, 808, 809, 810, 812, 813, 814, 816, 817, 818, 819, 820, 823, 825, 827, 829, 834, 835, 836, 840, 842, 843, 847, 848, 849, 852, 853, 855, 856, 857, 858, 862, 863, 880, 887, 890, 897, 899, 900, 903, 930, 932, 941, 1004], "id1": 141, "id2": 141, "id3": 141, "id_": [809, 817, 842, 856], "id_head": [203, 204, 250, 251, 268, 269, 282, 284, 287], "id_i": 831, "id_index": 932, "id_j": 831, "id_list": 898, "id_map": 858, "id_pair": 112, "id_whitespace_replac": [132, 133], "idea": 790, "ideal": 144, "ident": [1, 127, 128, 137, 141, 565, 618, 637, 641, 671, 886, 919, 1007], "identif": 64, "identifi": [58, 104, 108, 109, 112, 125, 129, 132, 133, 134, 135, 136, 139, 142, 143, 230, 270, 314, 435, 489, 613, 668, 787, 791, 827, 835, 858, 1002], "idptr": 130, "ids_to_keep": [197, 244, 262, 280, 817], "idx": [342, 408, 461, 518, 559], "ie": [319, 494], "igkeeiqqrl": 130, "ignor": [17, 48, 70, 79, 106, 107, 128, 129, 131, 132, 133, 136, 137, 141, 144, 279, 314, 315, 358, 359, 384, 385, 435, 436, 489, 490, 543, 575, 627, 651, 663, 664, 665, 666, 667, 782, 789, 790, 853, 891, 910, 945, 967, 968, 1004, 1007, 1009], "ignore_axis_label": 945, "ignore_direction": 945, "ignore_metadata": 54, "ignore_method_nam": 945, "ii": 787, "iii": 85, "ij": 665, "il": 411, "illumina": [133, 140], "illumina1": [133, 140], "illumina_1": 140, "illustr": [523, 663, 667], "iloc": 36, "ilr": [592, 602, 611], "ilr_inv": 611, "im": [135, 215, 227], "im1": 227, "im2": 227, "imagin": 137, "immedi": [132, 139, 903], "immut": [523, 1004], "implement": [0, 1, 61, 64, 69, 70, 74, 79, 84, 89, 100, 105, 106, 107, 110, 111, 133, 137, 141, 144, 155, 156, 157, 158, 184, 270, 610, 762, 776, 777, 782, 783, 854, 855, 884, 940, 942], "impli": [48, 184, 671], "implicit": 834, "implicitli": [126, 130], "import": [0, 1, 29, 30, 31, 32, 33, 34, 39, 41, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 75, 79, 95, 106, 107, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 155, 156, 157, 205, 215, 227, 289, 290, 291, 294, 296, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 344, 345, 346, 348, 358, 359, 360, 361, 362, 365, 367, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 411, 412, 413, 416, 418, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 464, 465, 466, 469, 471, 474, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 528, 530, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 561, 572, 573, 576, 579, 581, 584, 587, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 625, 630, 633, 635, 648, 655, 658, 659, 661, 663, 664, 665, 667, 668, 671, 672, 761, 762, 773, 787, 789, 790, 791, 792, 806, 807, 808, 809, 810, 812, 813, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 862, 863, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 946, 966, 1002, 1004, 1007, 1009], "import_modul": 144, "impos": [79, 106, 107], "improv": [54, 137, 139, 289, 411, 464, 652], "impur": 99, "imput": [592, 604], "incid": 671, "includ": [1, 48, 54, 56, 60, 68, 69, 79, 95, 106, 107, 111, 112, 123, 124, 129, 130, 131, 132, 133, 136, 137, 138, 139, 141, 142, 187, 202, 231, 233, 234, 249, 252, 267, 270, 271, 277, 282, 284, 285, 286, 288, 296, 305, 310, 318, 319, 329, 338, 342, 344, 345, 346, 347, 358, 359, 367, 376, 380, 396, 405, 408, 410, 418, 427, 431, 448, 457, 461, 463, 464, 471, 480, 485, 493, 494, 504, 513, 516, 518, 520, 521, 522, 530, 539, 549, 557, 559, 560, 561, 571, 573, 582, 588, 595, 613, 624, 631, 636, 647, 652, 656, 659, 662, 663, 664, 666, 667, 668, 672, 772, 773, 774, 775, 777, 782, 783, 787, 791, 809, 814, 844, 851, 852, 857, 859, 876, 877, 879, 908, 910, 911, 914, 915, 916, 918, 931, 933, 934, 939, 1002, 1003, 1004, 1005, 1007, 1008], "include_collapsed_metadata": 809, "include_self": [883, 908, 911, 914, 915, 916, 931, 934, 1007], "inclus": [184, 205, 226, 308, 327, 378, 395, 429, 447, 483, 502, 541, 548, 664], "incom": 881, "incomplet": [289, 360, 411, 464, 523], "inconsist": 576, "incorpor": [1, 95, 591], "incorrect": 1, "incorrectli": 818, "increas": [600, 613, 614, 668, 669, 671, 761, 787, 790, 809, 856], "incub": 790, "ind": [787, 791], "inde": 671, "independ": [346, 359, 521, 671, 683, 684, 705, 716, 749, 760, 834, 934], "index": [0, 1, 29, 31, 34, 36, 43, 46, 49, 50, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 71, 72, 75, 81, 83, 84, 87, 88, 90, 96, 98, 99, 100, 103, 104, 129, 130, 132, 139, 140, 142, 199, 203, 204, 246, 250, 251, 264, 268, 269, 270, 287, 296, 326, 367, 394, 418, 445, 471, 501, 530, 547, 562, 565, 584, 593, 594, 595, 600, 613, 615, 618, 633, 638, 641, 658, 659, 663, 664, 665, 666, 667, 672, 706, 750, 763, 773, 789, 796, 807, 809, 819, 835, 836, 839, 852, 853, 900, 903, 913, 914, 932, 940, 944], "indexerror": [796, 825], "indic": [1, 16, 30, 31, 34, 43, 52, 53, 70, 73, 74, 89, 95, 112, 125, 132, 133, 141, 144, 188, 194, 205, 206, 212, 215, 218, 224, 235, 241, 253, 259, 270, 271, 277, 291, 294, 296, 303, 309, 311, 314, 315, 317, 320, 321, 322, 323, 324, 325, 326, 329, 334, 336, 337, 339, 342, 348, 349, 355, 362, 365, 367, 374, 379, 381, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 401, 403, 404, 406, 408, 413, 416, 418, 425, 430, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 453, 455, 456, 458, 459, 461, 466, 469, 471, 478, 484, 486, 489, 490, 492, 495, 496, 497, 498, 499, 500, 501, 504, 509, 511, 512, 514, 518, 525, 528, 530, 537, 543, 545, 546, 547, 549, 554, 556, 558, 559, 561, 595, 600, 611, 663, 665, 666, 667, 671, 761, 772, 773, 789, 819, 853, 896, 898, 936, 979, 990, 1007, 1009], "indicatd": 1009, "indirectli": 923, "indiscern": 637, "individu": [1, 70, 71, 72, 75, 78, 79, 80, 82, 87, 88, 89, 90, 91, 96, 100, 103, 106, 107, 125, 132, 270, 561, 595, 789, 796, 1009], "indptr": [819, 853], "ineffici": [796, 942], "inekmtlva": 130, "ineleg": 914, "inequ": [43, 194, 212, 224, 241, 259, 277, 303, 355, 374, 425, 478, 537, 637, 782], "inf": [80, 141, 925], "infeas": 132, "infect": 791, "infer": [134, 141, 176, 180, 202, 249, 267, 283, 286, 965, 1002], "infern": 142, "infin": 141, "infinit": [925, 937, 938], "infinitum": 137, "info": [17, 67, 215, 672, 728], "inform": [17, 48, 56, 60, 72, 87, 95, 123, 124, 127, 128, 129, 131, 132, 133, 134, 140, 141, 143, 205, 231, 233, 285, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 684, 728, 762, 774, 775, 784, 790, 791, 793, 809, 844, 849, 859, 860, 918, 939, 967, 1003, 1004, 1009], "inher": [592, 671], "inherit": [143, 360, 523, 810], "inidic": [15, 17], "initi": [91, 132, 790, 908, 911, 914, 915, 916, 931, 934, 941, 978], "initialize_st": 1009, "inlin": 141, "inner": [55, 137, 284, 307, 377, 428, 482, 540, 576], "inord": 934, "inosin": 289, "inplac": [782, 817, 840, 841, 843, 846, 856, 858, 925], "input": [61, 62, 63, 64, 65, 66, 67, 79, 95, 104, 106, 107, 108, 143, 155, 157, 184, 185, 215, 227, 312, 339, 358, 359, 382, 406, 433, 458, 487, 514, 542, 558, 589, 595, 600, 611, 614, 664, 665, 761, 773, 776, 777, 779, 783, 792, 818, 935, 940, 941, 1001, 1004], "input_is_dens": 820, "ins": [3, 17, 29, 113, 145, 158, 187, 205, 215, 234, 252, 270, 289, 348, 360, 411, 464, 523, 561, 614, 637, 673, 684, 695, 706, 717, 728, 739, 750, 763, 793, 861, 947, 967, 979, 990], "insdc": [131, 134, 205, 234, 270, 283], "insensit": [141, 573, 595, 600], "insert": [137, 226, 882], "insert_length": 882, "insid": [134, 137], "insight": [106, 107], "insignific": 1, "instal": 942, "instanc": [56, 60, 123, 124, 144, 157, 170, 172, 173, 174, 176, 180, 215, 230, 231, 233, 285, 288, 307, 338, 347, 377, 405, 410, 428, 457, 463, 482, 513, 522, 540, 557, 560, 563, 573, 582, 588, 590, 591, 600, 614, 616, 631, 636, 637, 639, 654, 656, 662, 665, 667, 668, 669, 683, 705, 716, 749, 760, 773, 774, 775, 791, 806, 810, 836, 844, 859, 861, 877, 918, 939, 940, 947, 948, 951, 958, 1007, 1009], "instanti": [17, 131, 144, 360, 1009], "instead": [1, 51, 98, 131, 132, 134, 141, 144, 145, 155, 156, 157, 199, 228, 234, 246, 264, 316, 329, 331, 333, 335, 342, 386, 396, 398, 400, 402, 408, 437, 448, 450, 452, 454, 461, 491, 504, 506, 508, 510, 518, 544, 549, 551, 553, 555, 559, 614, 663, 665, 667, 781, 790, 791, 851, 852, 886, 941, 942, 1002], "institut": 133, "instruct": 1006, "instrument": 132, "int": [17, 41, 51, 58, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 109, 112, 127, 134, 135, 140, 156, 184, 205, 215, 226, 230, 270, 296, 301, 308, 314, 315, 319, 327, 329, 330, 331, 333, 335, 339, 357, 367, 372, 378, 384, 385, 395, 396, 397, 398, 400, 402, 406, 418, 423, 429, 435, 436, 447, 448, 449, 450, 452, 454, 458, 471, 476, 483, 489, 490, 494, 502, 504, 505, 506, 508, 510, 514, 520, 521, 530, 535, 541, 543, 548, 549, 550, 551, 553, 555, 558, 579, 580, 591, 593, 594, 600, 606, 612, 629, 653, 663, 665, 666, 667, 668, 669, 671, 706, 750, 761, 773, 777, 781, 782, 784, 785, 788, 790, 791, 792, 809, 819, 825, 827, 849, 853, 861, 882, 886, 888, 897, 903, 912, 913, 925, 940, 945, 946, 966, 979], "int32": [819, 853], "int64": [1, 29, 47, 55, 306, 310, 340, 380, 431, 481, 485, 515, 523, 595, 819, 853, 1004], "integ": [1, 17, 104, 108, 125, 127, 130, 132, 133, 136, 137, 138, 139, 140, 270, 296, 367, 418, 471, 530, 595, 600, 613, 614, 663, 666, 667, 668, 669, 750, 792], "intend": [1, 85, 86, 141, 289, 360, 411, 761, 773, 944, 945], "intens": 790, "interablemetadata": 227, "interact": [671, 1006], "interest": [1, 141, 523, 595, 613, 671, 776, 784, 790, 907, 909, 1009], "interfac": [52, 53, 105, 141, 324, 326, 392, 394, 443, 445, 499, 501, 546, 547, 561, 663, 664, 665, 666, 940, 1002], "interleav": [139, 142], "intermedi": 882, "intern": [58, 126, 134, 137, 611, 879, 881, 883, 889, 891, 894, 903, 912, 917, 923, 933, 935, 936, 1002, 1007], "internet": [132, 143], "interpret": [1, 48, 75, 79, 104, 106, 107, 108, 125, 137, 141, 234, 270, 592, 776, 777, 784, 820], "interpro": 131, "interquantil": 84, "interrog": 967, "intersect": [307, 377, 428, 482, 540, 834, 862, 863, 887, 890], "interv": [69, 74, 78, 85, 131, 134, 135, 215, 216, 217, 218, 224, 226, 227, 228, 229, 230, 232, 289, 294, 306, 323, 344, 365, 391, 411, 416, 442, 464, 469, 481, 498, 523, 528, 545, 600, 788, 1001], "interval_metadata": [134, 135, 205, 215, 227, 230, 289, 294, 296, 323, 360, 365, 367, 391, 411, 416, 418, 442, 464, 469, 471, 498, 523, 528, 530, 545], "intervalmetadata": [135, 205, 214, 289, 411, 464, 523], "intracellular": 142, "introduc": [70, 81, 129, 132, 592], "introduct": 1001, "intron": [332, 399, 451, 464, 507, 552], "intvl": 215, "invalid": [1, 51, 55, 79, 95, 104, 106, 107, 108, 132, 283, 289, 411, 464, 664, 665, 773, 793, 860, 878, 883, 893, 904, 913, 917], "invalidate_cach": [883, 889], "invent": 133, "invers": [48, 594, 599, 602, 608], "inverse_shannon_uncertainti": 48, "invert": [329, 396, 448, 504, 549, 817], "investig": 1, "involv": [95, 593], "inward": 84, "io": [1, 56, 60, 79, 106, 107, 123, 124, 231, 233, 285, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 613, 631, 636, 656, 662, 773, 774, 775, 818, 821, 844, 859, 899, 918, 939, 940, 966, 1001, 1007], "io_registri": 144, "ionom": 610, "ioregistri": [144, 155, 157], "ipr001360": 131, "ipr013781": 131, "ipr017853": 131, "ipr033132": 131, "ipyparallel": 109, "ipython": 763, "irrelev": [61, 62, 63], "irsairagsnvkgfyawsfldcnewfagftvrfglnfvd": 131, "is_circular": 135, "is_reverse_compl": [340, 515], "is_root": [902, 906, 1007], "is_tip": [883, 902, 905, 1007], "is_zero_bas": 16, "ism": [79, 106, 107], "isn": [29, 46, 49, 55, 81, 141, 142, 155, 157, 185, 205, 601, 602, 792, 836], "isnapshgnakpsystnpmtnisfekhgiplgpraasiwiyvypymfiqedf": 131, "iso": [819, 853], "isoleucin": 411, "isometr": [592, 593, 594, 601, 602], "isometri": [598, 599, 601, 602], "isomorph": [137, 598, 599, 601, 602], "issu": [77, 131, 132, 133, 141, 156, 941, 1002], "isubsampl": 792, "item": [61, 62, 63, 64, 65, 66, 67, 142, 316, 339, 386, 406, 437, 458, 491, 514, 523, 544, 558, 572, 587, 625, 635, 648, 661, 761, 792, 813, 849, 883, 925, 932, 933, 967, 968, 978, 1009], "iter": [29, 39, 44, 49, 54, 61, 62, 63, 64, 65, 66, 67, 68, 104, 108, 109, 112, 130, 140, 197, 205, 226, 227, 228, 230, 244, 262, 280, 296, 299, 304, 307, 315, 329, 339, 342, 367, 370, 375, 377, 385, 396, 406, 408, 418, 421, 426, 428, 436, 448, 458, 461, 471, 474, 479, 482, 490, 504, 514, 518, 530, 533, 538, 540, 543, 549, 558, 559, 561, 572, 575, 577, 579, 587, 595, 625, 627, 628, 635, 648, 651, 652, 661, 664, 667, 668, 761, 773, 790, 791, 799, 809, 810, 817, 818, 819, 830, 831, 834, 842, 848, 856, 862, 863, 870, 887, 890, 891, 900, 908, 911, 914, 915, 916, 924, 925, 931, 934, 964, 966, 968, 990, 1007, 1009], "iter_": [831, 968], "iter_km": [316, 386, 437, 491, 544], "its": [1, 29, 46, 47, 49, 50, 52, 53, 54, 55, 61, 62, 63, 93, 131, 132, 133, 134, 137, 138, 142, 144, 157, 184, 205, 215, 270, 284, 316, 323, 324, 326, 331, 386, 391, 392, 394, 398, 437, 442, 443, 445, 450, 491, 498, 499, 501, 506, 523, 544, 545, 546, 547, 551, 565, 573, 596, 618, 641, 664, 772, 776, 778, 781, 786, 817, 861, 883, 913, 914, 923, 928, 933, 934, 940, 941, 965, 1002, 1007], "itself": [113, 132, 139, 143, 185, 205, 289, 348, 411, 464, 523, 561, 671, 763, 817, 841, 856, 861, 1004], "itypeerror": 108, "iupac": [132, 133, 139, 140, 289, 319, 348, 358, 411, 464, 494, 523, 1004], "iv": [84, 89, 95], "j": [61, 63, 64, 66, 79, 82, 83, 91, 95, 96, 106, 107, 125, 127, 128, 132, 133, 134, 142, 143, 411, 572, 573, 587, 592, 601, 602, 603, 604, 606, 610, 612, 625, 635, 648, 661, 665, 666, 667, 777, 831, 891, 940], "j00123": 134, "j04373": 142, "jag": 836, "jaim": 881, "je": 671, "jet": 1, "jim": 133, "jj": [606, 612], "joe": 139, "join": [54, 127, 128, 133, 140, 142, 143, 284, 307, 377, 428, 482, 540, 810, 933, 940, 941], "joint": 134, "joseph": [132, 139, 1007], "jost": 95, "journal": [17, 67, 70, 73, 80, 95, 96, 98, 100, 134, 606, 612, 663], "json": [793, 820, 854, 860], "json_obj": 820, "json_tabl": 820, "juli": [17, 67], "julia": 884, "june": 137, "jupyt": 773, "just": [84, 85, 86, 91, 144, 803, 814, 831, 834, 855, 924, 1002, 1007, 1009], "justif": 84, "jyzox": 133, "k": [17, 70, 75, 95, 96, 98, 99, 100, 109, 289, 316, 330, 331, 386, 397, 398, 411, 437, 449, 450, 464, 491, 505, 506, 544, 550, 551, 561, 573, 591, 610, 664, 671, 891, 925, 932, 940], "k_": 787, "k__a": 809, "ka": 133, "kan": 143, "kannan": 143, "karsch": 143, "keemei": 141, "keep": [134, 141, 228, 296, 367, 418, 471, 530, 761, 807, 808, 817, 829, 834, 923, 924], "kegg_pathwai": [819, 836, 853], "kei": [6, 29, 46, 49, 50, 52, 57, 68, 131, 132, 134, 142, 226, 230, 289, 313, 324, 332, 339, 383, 392, 399, 406, 411, 434, 443, 451, 458, 464, 488, 499, 507, 514, 523, 546, 552, 558, 577, 628, 652, 809, 813, 836, 858, 912, 932, 940, 1009], "kellei": [106, 107], "kempton": 84, "kendalltau": 665, "kept": 134, "kestrel": 142, "keto": 289, "keyerror": [667, 836], "keyword": [56, 60, 67, 123, 124, 131, 134, 136, 156, 176, 177, 178, 180, 181, 182, 230, 231, 233, 285, 288, 332, 338, 345, 346, 347, 399, 405, 410, 451, 457, 463, 507, 513, 520, 521, 522, 552, 557, 560, 582, 588, 631, 636, 656, 662, 774, 775, 844, 859, 918, 939], "khovanskaya": 143, "kill": 607, "kind": 776, "kinet": 91, "kingdom": [127, 128, 143], "kit": 1001, "kj": 79, "klein": 134, "kmer": [330, 331, 397, 398, 449, 450, 505, 506, 550, 551, 591], "kmer_frequ": [316, 386, 437, 491, 544], "knight": [77, 79, 106, 107, 773], "know": [1, 17, 79, 106, 107, 129, 132, 139, 142, 144, 595, 787, 942, 1002], "knowledg": [922, 1002], "known": [70, 137, 176, 180, 610, 611, 777, 782, 1004], "kortlev": 142, "kqlaaargqr": 130, "kr": 663, "kruskal": [595, 790, 791], "kuo": 70, "kva": [346, 359, 521], "kw": 131, "kwarg": [56, 60, 67, 104, 108, 109, 112, 113, 123, 124, 155, 157, 169, 176, 177, 178, 179, 180, 181, 182, 185, 186, 231, 233, 285, 288, 338, 345, 346, 347, 405, 410, 457, 463, 513, 520, 521, 522, 557, 560, 561, 582, 588, 631, 636, 656, 662, 750, 774, 775, 793, 821, 844, 859, 918, 939, 967, 1002], "kwarg1": 144, "kz": 133, "l": [17, 71, 72, 79, 84, 85, 95, 103, 131, 133, 143, 358, 411, 610, 665, 762, 776, 777, 784, 933], "l1": 31, "l2": 31, "l3": 31, "lab": [773, 790], "label": [29, 31, 34, 36, 46, 49, 50, 55, 57, 58, 59, 129, 132, 134, 139, 141, 142, 581, 610, 613, 630, 655, 663, 664, 666, 667, 668, 763, 773, 881, 945], "labor": 790, "lack": 876, "lafond": 610, "lahaeavhvyktkyqayqkgkigitlvsnwlmplddnsipdikaaersldfq": 131, "lambda": [131, 761, 787, 790, 791, 809, 817, 821, 842, 845, 847, 856, 883, 896, 917, 920, 925, 936, 940, 941, 1009], "lane": 140, "lane_numb": 140, "langl": [601, 603], "languag": [2, 113, 130], "lapoint": 610, "larg": [17, 80, 84, 106, 107, 125, 132, 139, 604, 605, 664, 784, 790, 819, 879, 886], "larger": [48, 790], "largest": [17, 103, 830, 843], "last": [47, 113, 131, 139, 329, 358, 396, 448, 504, 523, 549, 665, 762, 1009], "latent": 113, "later": [133, 789], "latter": [1, 561], "law": 78, "layout": 134, "lb": 133, "lca": [79, 95, 881, 909], "ldot": [593, 594, 598, 599, 601, 602, 607, 608, 609], "lead": [79, 104, 106, 107, 108, 132, 133, 136], "learn": [793, 860], "least": [52, 53, 91, 137, 141, 270, 314, 323, 324, 326, 384, 391, 392, 394, 435, 442, 443, 445, 489, 498, 499, 501, 545, 546, 547, 595, 665, 773, 790, 791, 943, 1009], "leav": [84, 131, 341, 407, 460, 517, 817, 840], "lee": [17, 67, 70], "leesleyqqf": 130, "left": [55, 70, 98, 137, 202, 249, 267, 284, 286, 593, 594, 598, 603, 607, 608, 609, 610, 881, 903, 944, 945, 1007], "left_child_id": 932, "leftmost": 143, "legaci": [127, 128, 132], "legal": 184, "legend": 773, "legendr": [665, 762, 776, 777, 779, 780, 782, 783, 784], "len": [17, 29, 41, 301, 372, 423, 476, 535, 573, 669, 791, 862, 863, 887, 890, 928, 940, 1009], "length": [0, 1, 17, 29, 46, 47, 49, 54, 61, 62, 63, 79, 95, 106, 107, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 142, 215, 227, 289, 290, 296, 301, 306, 307, 308, 310, 313, 316, 318, 319, 329, 330, 331, 333, 334, 335, 336, 340, 341, 342, 344, 345, 346, 348, 358, 359, 360, 361, 367, 372, 377, 378, 380, 383, 386, 396, 397, 398, 400, 401, 402, 403, 407, 408, 411, 412, 418, 423, 428, 429, 431, 434, 437, 448, 449, 450, 452, 453, 454, 455, 460, 461, 464, 465, 471, 476, 481, 482, 483, 485, 488, 491, 493, 494, 504, 505, 506, 508, 509, 510, 511, 515, 516, 517, 518, 520, 521, 523, 524, 530, 535, 540, 541, 544, 549, 550, 551, 553, 554, 555, 556, 559, 577, 590, 591, 595, 600, 628, 652, 663, 666, 667, 671, 781, 782, 790, 791, 819, 853, 861, 876, 882, 891, 892, 901, 923, 930, 932, 935, 936, 941, 1004, 1007, 1009], "lengtherror": 923, "leq": 592, "less": [17, 70, 79, 86, 106, 107, 109, 139, 141, 330, 331, 397, 398, 449, 450, 505, 506, 550, 551, 591, 665, 668, 761, 776, 792, 809, 849, 912, 946], "lesser": 95, "let": [1, 132, 133, 135, 139, 140, 142, 205, 215, 339, 406, 458, 514, 523, 558, 595, 665, 761, 786, 787, 790, 791, 830, 942, 1004, 1007, 1009], "letter": [77, 79, 132, 134, 411], "leu": 411, "leucin": 411, "level": [58, 85, 137, 184, 270, 595, 789, 790, 899, 947, 1004], "levelord": [911, 914, 915, 916, 931, 934], "leven": 667, "lewi": 95, "lexicon": [132, 133, 139], "lfc_result": 600, "li": 95, "librari": [17, 67, 106, 107, 132, 1001, 1002], "libreria": 81, "licens": [849, 1001], "life": 79, "like": [1, 61, 62, 63, 109, 132, 134, 135, 136, 138, 141, 144, 332, 399, 451, 507, 552, 561, 613, 671, 694, 706, 727, 728, 738, 750, 782, 784, 790, 791, 814, 818, 821, 825, 854, 855, 966, 1002, 1009], "likelihood": 561, "likelyhood": [781, 785], "likewis": [55, 95, 142], "limit": [1, 78, 127, 137, 138, 139, 789, 790, 941], "limits_": [598, 599, 602, 603, 610], "linalg": 786, "linamaras": 131, "line": [81, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 184, 790, 818, 821, 879], "lineag": [143, 790, 900, 933], "lineage_map": 900, "linear": [81, 131, 134, 763, 777], "link": [108, 214, 270, 664, 671, 861], "linkag": [791, 898], "linkage_matrix": 898, "linnean": 95, "linux": 825, "lipman": [127, 128, 132], "list": [1, 67, 79, 95, 106, 107, 110, 111, 127, 131, 133, 134, 135, 138, 141, 142, 143, 144, 155, 157, 173, 174, 184, 215, 339, 406, 458, 514, 523, 558, 571, 575, 578, 611, 613, 624, 627, 647, 651, 665, 667, 668, 684, 706, 717, 739, 772, 787, 789, 790, 791, 809, 813, 817, 818, 819, 821, 830, 836, 847, 848, 853, 861, 877, 883, 891, 893, 895, 898, 907, 909, 910, 925, 926, 930, 932, 933, 940, 941, 1002, 1009], "liter": 137, "literatur": [1, 75, 791], "live": [1, 229], "lkwh": [346, 359, 521], "ll": [1, 79, 106, 107, 664, 665, 668, 762, 787, 790, 791, 1007, 1009], "lladser": [85, 86, 106, 107], "lladser_ci": 86, "lladser_p": 85, "ln": [72, 80, 87, 96, 593, 595, 598, 603, 610], "load": [0, 130, 132, 133, 138, 140, 141, 202, 249, 267, 270, 286, 573, 595, 613, 614, 663, 664, 667, 668, 819, 965, 966, 1002], "loc": [36, 523, 595, 790], "local": [0, 64, 65, 66, 127, 128, 134], "local_pairwise_align": [61, 62, 63, 65, 66], "local_pairwise_align_nucleotid": [61, 62, 63, 64, 66], "local_pairwise_align_protein": [0, 61, 62, 63, 64, 65], "local_pairwise_align_ssw": [0, 61, 62, 63, 64, 65, 66], "locat": [17, 56, 60, 123, 124, 131, 137, 142, 170, 171, 172, 205, 231, 233, 285, 288, 314, 315, 338, 347, 384, 385, 405, 410, 435, 436, 457, 463, 489, 490, 513, 522, 543, 557, 560, 582, 588, 631, 636, 656, 662, 774, 775, 838, 844, 859, 918, 922, 939, 944, 1008], "loci": 17, "locu": [131, 134, 143], "log": [87, 592, 593, 594, 595, 598, 599, 600, 601, 602, 606, 612], "log2": 600, "log_2": 98, "logarithm": [83, 98, 595], "logic": [144, 967], "logratio": 592, "long": [129, 132, 139, 141, 314, 384, 435, 489, 593, 664, 750, 776], "long_method_nam": [763, 945], "longer": [132, 139, 592, 791], "look": [68, 136, 138, 139, 144, 230, 339, 406, 458, 514, 520, 521, 558, 565, 595, 618, 641, 773, 789, 790, 791, 814, 883, 990, 1007, 1009], "lookup": [61, 62, 63, 64, 65, 66, 170, 171, 172, 565, 618, 641, 665, 668, 878, 889, 893, 903, 904, 913, 917, 932, 967], "lookup_id": [562, 580, 615, 629, 638, 653], "loop": [132, 937, 938], "loos": [1, 671], "lorenz": 81, "lose": [667, 782], "loss": [79, 671], "lost": [667, 782], "lot": 776, "love": [793, 860], "lovel": [606, 612], "low": [86, 762, 782, 790], "lower": [84, 85, 132, 139, 205, 270, 595, 600, 652, 659, 665, 761, 762, 791], "lower_bound": [74, 78, 85], "lower_quantil": 84, "lowercas": [17, 131, 132, 133, 134, 140, 289, 307, 360, 377, 411, 428, 464, 482, 523, 540], "lowest": [79, 95, 907, 909], "lowest_common_ancestor": 907, "lozupon": [79, 106, 107], "lq": 84, "lsmat": [582, 588, 631, 636, 656, 662], "luca": 881, "ly": 411, "lysin": 411, "m": [17, 64, 70, 79, 95, 106, 107, 127, 128, 131, 133, 139, 143, 289, 348, 349, 358, 411, 464, 573, 664, 667, 671, 773, 776, 777, 783, 784, 786, 789, 819, 825, 853, 924, 941], "m1": 886, "m2": 886, "m24803": 142, "m24804": 142, "m_shape": 786, "ma": [70, 342, 408, 461, 518, 559], "machin": 140, "machine_nam": 140, "macrophag": 790, "madden": 132, "made": [29, 91, 523, 595, 614, 637, 761, 809, 877, 894, 895, 917, 943], "magnitud": [91, 600, 665, 667, 782, 942], "magnoliophyta": 131, "magnuson": 95, "magurran": [84, 90], "mai": [1, 3, 17, 48, 57, 79, 86, 128, 131, 132, 133, 134, 136, 137, 139, 141, 142, 143, 144, 156, 173, 174, 184, 205, 229, 270, 282, 283, 289, 316, 360, 386, 411, 437, 464, 491, 523, 544, 561, 565, 575, 590, 595, 613, 618, 627, 641, 651, 665, 667, 671, 761, 776, 787, 789, 790, 791, 792, 809, 899, 942, 965, 967, 1002, 1004], "main": 234, "mainli": [672, 762], "maintain": [132, 137, 144, 654, 776, 777, 787, 790], "major": [47, 592, 659, 819, 853, 940], "make": [48, 55, 132, 137, 141, 144, 202, 249, 267, 270, 286, 349, 565, 590, 618, 641, 663, 667, 791, 929, 932, 933, 941, 947, 967, 1009], "mam": 143, "manag": [184, 185, 186], "mandal": 595, "mani": [1, 70, 94, 111, 137, 141, 561, 592, 595, 671, 776, 782, 790, 791, 809, 1009], "manipul": [0, 52, 53, 141, 270, 324, 326, 392, 394, 443, 445, 499, 501, 523, 546, 547, 592, 613, 819], "mann": 595, "manner": [47, 132, 139, 296, 310, 367, 380, 418, 431, 471, 485, 530, 665, 782], "mannwhitneyu": 595, "mantel": [1, 613, 668, 671], "manual": [70, 74, 84, 89, 141, 940], "map": [1, 50, 57, 109, 158, 270, 283, 665, 668, 671, 672, 706, 750, 773, 789, 791, 809, 858, 900, 903, 1004], "map_async": 109, "map_f": 109, "mar": [61, 64, 83], "marchand": 610, "marguerat": [606, 612], "margush": 940, "marin": 664, "mark": [131, 134, 142, 1009], "marrow": 790, "marth": [17, 67], "marti": [666, 667], "martin": [592, 604], "mask": [17, 342, 408, 461, 518, 559, 606, 612], "mask_auto": 17, "mask_gap": [342, 408, 461, 518, 559], "mask_length": 17, "mat": [561, 573, 576, 579, 593, 594, 596, 597, 598, 599, 601, 602, 604, 605, 606, 930], "match": [0, 17, 46, 49, 55, 62, 65, 68, 127, 132, 133, 141, 184, 185, 198, 203, 204, 245, 250, 251, 263, 268, 269, 270, 282, 284, 287, 294, 314, 315, 333, 335, 336, 343, 358, 365, 384, 385, 400, 402, 403, 409, 416, 435, 436, 452, 454, 455, 462, 469, 489, 490, 508, 510, 511, 519, 528, 543, 553, 555, 556, 579, 614, 663, 665, 667, 668, 787, 789, 790, 791, 885, 886, 895, 897, 1004, 1009], "match_frequ": [335, 402, 454, 510, 555, 1004], "match_scor": [17, 62, 65, 68], "matevz": 610, "math": 849, "mathbb": [593, 594, 595, 598, 599, 601, 602], "mathemat": [75, 98, 106, 592, 762, 881, 884, 940], "mathemt": 107, "matplotlib": [581, 630, 655, 763, 773], "matric": [1, 63, 66, 125, 136, 411, 561, 563, 570, 573, 578, 613, 614, 616, 623, 639, 646, 664, 665, 668, 670, 671, 778, 782, 886], "matrix": [1, 17, 68, 104, 108, 109, 112, 342, 408, 461, 518, 559, 561, 562, 563, 565, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 585, 586, 587, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 618, 623, 624, 625, 626, 627, 628, 629, 630, 634, 635, 637, 638, 639, 641, 646, 647, 648, 650, 651, 652, 653, 654, 655, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 671, 762, 773, 776, 778, 779, 780, 782, 783, 784, 786, 788, 793, 794, 796, 809, 819, 820, 823, 838, 845, 849, 851, 852, 853, 860, 898, 930, 941, 1001, 1006], "matrix_data": [793, 860], "matrix_element_typ": 820, "matrix_rank": 786, "matsen": 95, "matter": [141, 206, 227, 565, 618, 641], "matthew": 940, "matto": 610, "max": [17, 70, 71, 91, 790, 791, 830, 901], "max_count": [787, 790, 791], "max_i": 103, "max_sample_count": 830, "max_width": 132, "maxim": [17, 95, 664, 777], "maxima": 833, "maximum": [96, 103, 132, 133, 595, 600, 664, 706, 761, 777, 781, 785, 790, 791, 833, 886], "mccoi": 95, "mcdonald": [793, 860], "mcentyr": 132, "mci": 1004, "mcintosh": [88, 89], "mcintosh_": 88, "mcintosh_d": 89, "mcmorri": 940, "md": [132, 805, 813, 817, 842, 856], "md5": [131, 966], "md_i": 831, "md_j": 831, "mdfivaifalfvissftitstnaveastlldignlsr": 131, "mean": [135, 137, 144, 184, 215, 230, 289, 318, 319, 493, 494, 572, 587, 592, 595, 598, 600, 610, 625, 635, 648, 661, 728, 750, 776, 780, 781, 782, 785, 787, 788, 790, 791, 819, 853, 1002, 1007], "meaning": [17, 46, 49, 55, 782, 1004], "measur": [1, 75, 77, 83, 85, 86, 89, 90, 94, 95, 96, 98, 99, 100, 106, 107, 561, 595, 606, 612, 613, 776, 789, 790, 861, 881, 1003], "mechan": [967, 1009], "media": 790, "median": [595, 667], "medic": 131, "medlin": 142, "meepqsdpsv": [342, 408, 461, 518, 559], "meet": [67, 141, 230, 282, 283, 936], "member": [176, 180, 967, 990, 1009], "membership": 144, "meme_v4": 129, "memo": [33, 217, 293, 364, 415, 468, 527], "memori": [81, 129, 130, 132, 133, 134, 139, 140, 142, 270, 613, 668, 761, 782, 793, 860, 966, 1002], "mengyao": [17, 67], "menopaus": 791, "menten": 91, "mention": 137, "merg": 270, "merged_t": 834, "messag": [1, 79, 104, 106, 107, 108, 684, 728, 946, 1002], "met": [1, 411, 990], "met_neg": 791, "met_po": 791, "meta": [141, 789, 790], "metabolit": [1, 791, 793, 860, 1003], "metabolite_test": 791, "metadata": [0, 1, 29, 34, 43, 46, 47, 49, 52, 53, 54, 55, 57, 58, 126, 129, 131, 132, 133, 134, 135, 139, 140, 289, 294, 296, 303, 305, 306, 307, 310, 313, 323, 324, 326, 332, 339, 340, 344, 345, 346, 348, 358, 359, 360, 365, 367, 374, 376, 377, 380, 383, 391, 392, 394, 399, 406, 411, 416, 418, 425, 427, 428, 431, 434, 442, 443, 445, 451, 458, 464, 469, 471, 478, 480, 481, 482, 485, 488, 498, 499, 501, 507, 514, 515, 516, 520, 521, 523, 528, 530, 537, 539, 540, 545, 546, 547, 552, 558, 577, 628, 652, 664, 672, 684, 706, 717, 728, 750, 773, 784, 787, 789, 790, 791, 794, 804, 805, 807, 808, 809, 813, 814, 817, 819, 820, 821, 824, 829, 834, 836, 842, 851, 852, 853, 855, 856, 857, 1001, 1004, 1005], "metadata_f": 809, "metadata_field": [819, 853], "metadata_formatt": [814, 855], "metadata_i": 831, "metadata_j": 831, "metadata_map": [672, 673, 695, 706, 739, 750], "metadatacolumn": [187, 188, 194, 196, 197, 252, 253, 259, 261, 262, 270, 281], "metadatafileerror": 283, "metag": 806, "metagenom": 806, "metatdata": 131, "metdata": [523, 834], "methionin": [358, 411], "method": [0, 1, 3, 17, 29, 36, 48, 55, 56, 60, 61, 81, 104, 106, 108, 109, 112, 113, 123, 124, 126, 130, 138, 141, 145, 155, 157, 158, 175, 187, 205, 215, 226, 231, 233, 234, 252, 270, 285, 288, 289, 292, 293, 307, 316, 338, 340, 346, 347, 348, 357, 359, 360, 363, 364, 377, 386, 405, 410, 411, 414, 415, 428, 437, 457, 463, 464, 467, 468, 482, 491, 513, 515, 521, 522, 523, 526, 527, 540, 544, 557, 560, 561, 582, 588, 592, 595, 600, 604, 610, 613, 614, 631, 636, 637, 654, 656, 662, 663, 664, 665, 666, 667, 668, 673, 684, 694, 695, 706, 717, 727, 728, 738, 739, 750, 761, 763, 773, 774, 775, 776, 777, 782, 793, 843, 844, 853, 859, 861, 862, 863, 879, 881, 882, 883, 886, 887, 889, 890, 891, 892, 894, 896, 897, 917, 918, 923, 925, 937, 938, 939, 940, 941, 947, 959, 966, 967, 968, 978, 990, 1001, 1004, 1007, 1009], "metodologica": 81, "metric": [48, 70, 75, 79, 80, 95, 104, 105, 106, 107, 108, 109, 110, 111, 112, 133, 312, 382, 433, 487, 542, 577, 591, 628, 637, 652, 861, 1004], "metricspac": 637, "mgc": 143, "micha": 91, "michael": 133, "microbi": [79, 85, 86, 95, 106, 107, 595, 663, 664, 666, 667, 773], "microbiol": [106, 107], "microbiom": [1, 95, 109, 595, 600, 782], "microsoft": 141, "mid": 923, "middl": 229, "midpoint": [923, 941], "mieadkvahvqvgnnleh": 142, "might": [1, 81, 136, 138, 664, 789, 790, 791, 886, 1002], "miller": [127, 128], "million": 109, "min": [95, 100, 791], "min_count": [787, 790, 791], "min_group_s": 809, "min_length": [314, 329, 384, 396, 435, 448, 489, 504, 549, 1004], "minim": 137, "minima": 837, "minimize_scalar": 80, "minimum": [79, 95, 100, 143, 319, 329, 396, 448, 494, 504, 549, 595, 667, 761, 790, 791, 809, 837], "mininum": 600, "minor": [128, 819, 853], "minter": [0, 29, 34, 46, 49, 57, 58, 129, 139], "minu": [48, 134, 142, 739], "mirror": 600, "misc_bind": 134, "miscellan": 1001, "mislead": [48, 112], "mismatch": [0, 17, 62, 65, 68, 127, 128, 333, 334, 335, 400, 401, 402, 452, 453, 454, 508, 509, 510, 553, 554, 555, 579, 665, 885], "mismatch_frequ": [333, 400, 452, 508, 553, 1004], "mismatch_scor": [17, 62, 65, 68], "miss": [127, 132, 141, 142, 196, 198, 199, 201, 203, 204, 234, 243, 245, 246, 248, 250, 251, 261, 263, 264, 266, 268, 269, 270, 279, 283, 287, 307, 377, 428, 482, 540, 592, 604, 664, 773, 789, 790, 1009], "missing_schem": [187, 234, 252], "missingiderror": [565, 572, 575, 580, 587, 618, 625, 627, 629, 635, 641, 648, 651, 653, 661], "missingnodeerror": [79, 95, 104, 106, 107, 108, 894, 895, 897, 912, 925], "mit": 129, "mitochondri": [143, 345, 357, 520], "mix": 141, "mizrachi": 143, "ml": 91, "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm": 348, "mn": 90, "moac": 127, "mode": [48, 144, 184, 358, 791, 809, 967], "model": [2, 84, 85, 86, 91, 113, 130, 573, 592, 600, 613, 791], "moder": 665, "modif": [215, 671], "modifi": [58, 132, 134, 142, 175, 289, 411, 464, 523, 654, 750, 783, 817, 856, 925], "modul": [0, 1, 2, 130, 142, 144, 183, 589, 592, 613, 672, 762, 787, 965, 966, 1002, 1003, 1004, 1005, 1006, 1007, 1009], "mol": [61, 64, 127, 128, 131, 134], "mol_typ": [131, 134], "molbev": 941, "molecul": [131, 132, 134, 523, 561, 1004], "molecular": [64, 671, 881, 941, 1004], "moment": [131, 665, 1009], "monkei": 175, "monkey_patch": [155, 157], "monoton": [613, 614, 668, 669], "mont": 787, "month": 143, "mooer": 95, "more": [0, 1, 47, 48, 49, 56, 60, 61, 67, 70, 81, 104, 111, 123, 124, 128, 131, 132, 133, 137, 138, 139, 140, 141, 142, 177, 181, 201, 231, 233, 248, 266, 270, 284, 285, 288, 320, 321, 322, 325, 338, 347, 388, 389, 390, 393, 405, 410, 411, 439, 440, 441, 444, 446, 457, 463, 495, 496, 497, 500, 513, 522, 557, 560, 565, 582, 588, 592, 595, 597, 600, 613, 618, 631, 636, 641, 654, 656, 662, 663, 664, 665, 666, 667, 668, 671, 683, 705, 716, 749, 760, 761, 773, 774, 775, 776, 777, 784, 790, 791, 793, 809, 825, 844, 849, 859, 860, 882, 899, 918, 939, 940, 1002, 1007, 1008], "mosaic": 142, "most": [47, 71, 80, 95, 125, 129, 132, 133, 136, 137, 139, 141, 143, 358, 523, 665, 761, 784, 787, 901, 903, 940, 1007], "mostli": [141, 142], "motif": [314, 384, 435, 489, 1004], "motif_slic": [314, 384, 435, 489], "motif_typ": [314, 384, 435, 489], "motiv": 109, "mpl": [345, 346, 348, 358, 359, 520, 521], "mpt": [345, 520], "mqhvsapvfvfectrlai": 142, "mrna": 131, "msa": [0, 29, 30, 31, 32, 33, 34, 36, 39, 41, 43, 44, 45, 46, 47, 49, 50, 51, 54, 55, 57, 58, 59, 129, 132, 133, 139, 142], "msa1": 55, "msa2": 55, "msa_copi": [32, 33], "msl072": 941, "mtcraqliavprassla": 142, "mtrand": [886, 925], "mu": 787, "mu_": 787, "much": [0, 1, 79, 106, 107, 137, 1002], "mullikin": 133, "multi": 595, "multi_replac": [595, 605], "multifurc": [137, 1007], "multiindex": [58, 659], "multimod": 776, "multinomi": [600, 849], "multipl": [0, 29, 54, 79, 106, 107, 129, 131, 132, 133, 134, 135, 137, 143, 205, 227, 523, 561, 592, 595, 600, 604, 671, 762, 784, 790, 809, 933, 940, 1002, 1007], "multiple_comparisons_correct": 595, "multipli": 95, "multivari": [593, 663, 664, 666, 667, 776, 777, 1001], "must": [17, 29, 46, 49, 55, 56, 60, 79, 81, 95, 106, 107, 108, 109, 112, 123, 124, 127, 129, 132, 133, 136, 137, 138, 139, 141, 142, 156, 230, 231, 233, 270, 282, 284, 285, 288, 289, 307, 312, 332, 338, 345, 347, 377, 382, 399, 405, 410, 411, 428, 433, 451, 457, 463, 464, 482, 487, 507, 513, 520, 522, 523, 540, 542, 552, 557, 560, 575, 582, 588, 595, 600, 611, 614, 627, 631, 636, 651, 656, 662, 663, 664, 665, 666, 667, 669, 671, 694, 727, 738, 761, 773, 774, 775, 776, 781, 790, 791, 792, 809, 817, 818, 825, 834, 842, 844, 854, 855, 856, 859, 883, 918, 925, 933, 939, 940, 941, 944, 946, 966, 967, 990, 1009], "mutabl": [81, 523, 947, 1004], "mutant": 134, "mutat": [561, 573, 861], "my": 1004, "my_obj": 1002, "myeloid": 790, "myer": [127, 128], "myformat": [144, 155, 156, 157], "myformat2": [155, 156, 157], "myformat_read": [155, 157], "myformat_sniff": 156, "myobject": [155, 157], "n": [1, 17, 71, 72, 78, 80, 81, 82, 87, 88, 89, 90, 91, 95, 97, 103, 125, 127, 128, 129, 132, 133, 134, 138, 139, 140, 142, 143, 144, 155, 156, 157, 184, 185, 289, 329, 342, 396, 408, 411, 435, 448, 461, 464, 504, 518, 549, 559, 604, 605, 613, 665, 668, 671, 761, 776, 777, 778, 781, 783, 784, 785, 787, 791, 792, 819, 825, 849, 853, 862, 863, 875, 883, 887, 890, 896, 901, 903, 910, 925, 926, 933, 940, 941, 946, 1004], "n1": 821, "n4": 821, "n_": [70, 71], "n_compon": [593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612], "n_composit": [593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609], "n_featur": 610, "n_i": [72, 88, 89], "n_ob": 851, "n_partit": 610, "n_var": 851, "na": [141, 818], "naess": 610, "name": [1, 56, 60, 79, 95, 106, 107, 123, 124, 127, 128, 133, 134, 135, 137, 138, 140, 141, 142, 144, 145, 170, 171, 172, 177, 181, 188, 194, 203, 204, 205, 231, 233, 235, 241, 250, 251, 253, 259, 268, 269, 270, 271, 277, 281, 283, 284, 285, 287, 288, 332, 338, 347, 348, 349, 355, 357, 399, 405, 410, 451, 457, 463, 507, 513, 522, 552, 557, 560, 561, 573, 578, 582, 588, 595, 600, 606, 611, 631, 636, 656, 662, 663, 664, 666, 667, 672, 684, 728, 763, 773, 774, 775, 809, 814, 844, 852, 855, 859, 861, 875, 877, 878, 879, 881, 883, 884, 885, 886, 889, 893, 894, 895, 896, 897, 899, 901, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 939, 940, 959, 965, 1002, 1007], "name_txt": 143, "named_gc": 349, "namedtemporaryfil": 184, "nan": [48, 51, 55, 86, 127, 141, 198, 199, 201, 203, 204, 234, 245, 246, 248, 250, 251, 263, 264, 266, 268, 269, 270, 279, 287, 307, 316, 377, 386, 428, 437, 482, 491, 540, 544, 590, 591, 663, 664, 665, 666, 667, 668, 671, 773, 789, 790, 932, 944], "nan_length_valu": 932, "nanmean": 791, "naohisa": 133, "nar": 133, "nasanfta": [329, 396, 448, 504, 549], "nat": 134, "natal": 610, "nation": [132, 143, 573], "nativ": [1, 583, 632, 657, 782], "natl": [63, 66], "natsort": 847, "natur": [75, 84, 99, 100, 270, 847], "nb": 185, "nbk21097": 132, "nbk279675": 127, "nbk279682": 128, "nc": 185, "ncbi": [62, 63, 65, 66, 127, 128, 132, 134, 143, 345, 346, 348, 349, 356, 357, 358, 359, 520, 521, 899, 1004], "ncbiinsight": 143, "ncifcrf": 48, "ncrna": 523, "nd": 818, "ndarrai": [51, 108, 113, 289, 291, 308, 309, 311, 312, 317, 327, 328, 333, 334, 335, 336, 337, 342, 362, 378, 379, 381, 382, 387, 395, 400, 401, 402, 403, 404, 408, 411, 413, 429, 430, 432, 433, 438, 447, 452, 453, 454, 455, 456, 459, 461, 464, 466, 483, 484, 486, 487, 492, 502, 503, 508, 509, 510, 511, 512, 518, 523, 525, 541, 542, 548, 553, 554, 555, 556, 559, 565, 583, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 614, 618, 632, 641, 649, 654, 657, 669, 671, 785, 792, 812, 851, 898], "ne2": 131, "nearbi": 17, "nearli": [61, 62, 63], "necessari": [55, 127, 139, 215, 523, 614, 663, 664, 665, 694, 727, 738, 886, 965, 1002], "necessarili": [46, 49, 55, 138, 316, 386, 437, 491, 523, 544, 792], "nee": 79, "need": [1, 46, 49, 54, 79, 106, 107, 109, 125, 130, 135, 137, 144, 155, 157, 184, 215, 230, 360, 595, 600, 601, 602, 611, 663, 664, 666, 667, 668, 761, 762, 777, 784, 787, 790, 791, 819, 883, 886, 944, 945, 967, 1009], "needl": 61, "needleman": [0, 61, 62, 63], "neg": [1, 17, 62, 65, 68, 81, 141, 358, 597, 604, 605, 637, 776, 777, 782, 787, 791, 941], "negat": 228, "neglig": 1, "nei": 941, "neighbor": [134, 926, 941], "neighbour_join": 941, "neither": [29, 57, 185, 845, 925, 934], "nellangiqpfvtlfhwdlpqvledeyggflnsgvindfrdytdlcfkefgd": 131, "neq": 787, "nest": [137, 613, 665, 836, 851, 928, 1007], "never": [132, 142], "new": [0, 46, 49, 56, 57, 58, 72, 83, 85, 86, 106, 123, 143, 155, 156, 157, 169, 179, 215, 231, 284, 285, 296, 307, 310, 338, 339, 367, 377, 380, 405, 406, 418, 428, 431, 457, 458, 471, 482, 485, 513, 514, 523, 530, 540, 557, 558, 582, 631, 654, 656, 665, 666, 668, 774, 777, 785, 817, 840, 841, 843, 844, 846, 848, 856, 857, 858, 862, 863, 887, 890, 917, 918, 922, 923, 937, 938, 941, 1004, 1007, 1009], "new_fasta_fh": 132, "new_fh": 133, "new_qual_fh": 132, "new_tabl": [817, 840, 847], "new_taxdump": 143, "new_tre": [937, 938], "newcastl": 131, "newick": [79, 106, 107, 819, 824, 853, 875, 881, 918, 939, 941, 1002, 1007], "newick_doc": 137, "newick_str": 941, "newicktre": 137, "newlin": [132, 137, 139, 144, 145, 176, 177, 180, 181, 184], "next": [1, 79, 85, 86, 106, 107, 131, 137, 144, 523, 595, 750, 776, 940, 1007, 1009], "nh": 142, "nhx": 142, "nich": 777, "nident": [127, 128], "nih": [62, 63, 65, 66, 127, 128, 132, 134, 140, 143, 348, 356, 357], "nlm": [62, 63, 65, 66, 127, 128, 132, 134, 143, 348, 356, 357], "nnz": [793, 819, 853, 860], "no_gap": [329, 396, 448, 504, 549], "node": [1, 79, 106, 107, 611, 861, 862, 863, 866, 870, 876, 877, 878, 880, 881, 882, 883, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 922, 923, 926, 927, 930, 931, 932, 933, 934, 935, 936, 940, 1002, 1007], "node_c": 910, "node_id": [897, 903, 932], "node_info": 137, "nodes_new": 143, "nodes_slim": 143, "nolengtherror": [876, 892, 901], "nomenclatur": [289, 360, 411, 464, 523], "non": [29, 73, 81, 127, 129, 131, 135, 141, 205, 289, 325, 337, 341, 393, 404, 407, 411, 444, 456, 460, 500, 512, 517, 561, 592, 593, 594, 595, 597, 600, 604, 605, 607, 608, 609, 637, 663, 666, 667, 671, 776, 782, 787, 793, 819, 834, 853, 856, 885, 886, 891, 1004], "non_tip": [908, 914, 915, 916, 931, 934, 940, 1007], "noncanon": [341, 407, 460, 517], "none": [17, 29, 46, 48, 49, 56, 57, 58, 62, 63, 65, 66, 67, 79, 91, 95, 104, 106, 107, 108, 109, 123, 127, 132, 136, 144, 145, 155, 157, 170, 171, 172, 176, 180, 184, 202, 205, 215, 226, 228, 230, 231, 249, 267, 270, 279, 282, 283, 285, 286, 289, 308, 312, 314, 315, 316, 327, 338, 342, 343, 360, 378, 382, 384, 385, 386, 395, 405, 408, 409, 411, 429, 433, 435, 436, 437, 447, 457, 461, 462, 464, 483, 487, 489, 490, 491, 502, 513, 518, 519, 523, 541, 542, 543, 544, 548, 557, 559, 577, 581, 582, 595, 600, 601, 602, 604, 605, 606, 614, 628, 630, 631, 637, 652, 655, 656, 663, 664, 665, 666, 667, 668, 669, 673, 695, 706, 739, 761, 763, 773, 774, 778, 781, 782, 785, 786, 788, 789, 790, 791, 793, 809, 813, 814, 819, 820, 821, 824, 829, 834, 835, 844, 845, 849, 853, 854, 855, 856, 860, 861, 881, 882, 886, 889, 891, 899, 908, 910, 913, 914, 915, 916, 918, 925, 929, 930, 932, 933, 934, 937, 938, 940, 941, 967, 968, 990, 1004, 1007, 1009], "nonlinear": 91, "nonmatch": [665, 668], "nonneg": 132, "nonparametr": [78, 592, 604], "nontip": 911, "nonzero": [126, 817, 822, 833, 837, 839, 840, 856, 860], "noparenterror": 876, "noqa": 819, "nor": [29, 46, 49, 57, 136, 139, 614, 845, 925], "norm": [673, 695, 739, 750, 809], "normal": [78, 107, 133, 134, 234, 270, 663, 667, 782, 783, 784, 787, 788, 790, 791, 809, 840, 883], "not_non": [990, 1009], "notabl": 133, "notat": [137, 141, 411], "note": [3, 17, 29, 36, 41, 46, 47, 48, 49, 50, 51, 54, 55, 57, 58, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 106, 107, 109, 111, 126, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 205, 215, 216, 217, 229, 282, 284, 289, 292, 293, 296, 307, 310, 313, 316, 318, 329, 340, 342, 344, 345, 346, 348, 349, 356, 357, 358, 359, 360, 363, 364, 367, 377, 380, 383, 386, 396, 408, 411, 414, 415, 418, 428, 431, 434, 437, 448, 461, 464, 467, 468, 471, 482, 485, 488, 491, 493, 504, 515, 516, 518, 520, 521, 523, 526, 527, 530, 540, 544, 549, 559, 561, 565, 572, 573, 583, 586, 587, 590, 591, 595, 600, 601, 602, 604, 606, 610, 611, 612, 614, 618, 625, 632, 634, 635, 637, 641, 648, 649, 654, 657, 660, 661, 663, 664, 665, 666, 667, 668, 671, 761, 773, 776, 777, 782, 784, 785, 790, 791, 792, 793, 796, 809, 810, 818, 819, 825, 834, 836, 849, 851, 852, 853, 860, 879, 881, 882, 883, 884, 886, 891, 897, 899, 925, 930, 932, 933, 934, 935, 940, 941, 944, 946, 965, 966, 1004, 1007, 1009], "notebook": 763, "noth": [58, 184, 284, 343, 409, 462, 519, 967], "notic": [1, 132, 137, 139, 791, 1009], "notifi": 665, "notimplementederror": [776, 777], "notion": 665, "notredam": [606, 612], "notstart": 141, "nov": [63, 66, 131, 773], "novel": 595, "novemb": 941, "now": [1, 84, 131, 132, 134, 139, 523, 592, 595, 664, 761, 762, 787, 790, 791, 856, 1007, 1009], "np": [48, 51, 79, 86, 95, 106, 107, 113, 127, 198, 201, 245, 248, 263, 266, 270, 279, 289, 291, 308, 309, 311, 312, 316, 317, 327, 328, 333, 334, 335, 336, 337, 342, 362, 378, 379, 381, 382, 386, 387, 395, 400, 401, 402, 403, 404, 408, 411, 413, 429, 430, 432, 433, 437, 438, 447, 452, 453, 454, 455, 456, 459, 461, 464, 466, 483, 484, 486, 487, 491, 492, 502, 503, 508, 509, 510, 511, 512, 518, 523, 525, 541, 542, 544, 548, 553, 554, 555, 556, 559, 561, 590, 591, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 612, 613, 663, 665, 666, 667, 668, 671, 672, 761, 762, 773, 786, 787, 789, 790, 791, 792, 806, 807, 808, 809, 810, 812, 813, 816, 817, 823, 824, 825, 826, 827, 829, 830, 833, 834, 835, 837, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 855, 856, 858, 903, 925, 940, 944], "np_286546": 127, "npd": 95, "nrte": [329, 396, 448, 504, 549], "ns_": 91, "nt": 205, "nuc": [342, 408, 461, 518, 559, 561, 573], "nuc_pattern": 1009, "nuccor": 134, "nucl": 133, "nucleic": [139, 143, 289, 360, 411, 464, 523], "nucleobas": [289, 464], "nucleotid": [0, 17, 62, 65, 128, 131, 132, 133, 134, 289, 306, 328, 340, 342, 408, 461, 464, 481, 503, 515, 518, 559, 561, 573, 1009], "nucleotidemixin": [306, 340, 481, 515], "null": [137, 595, 600, 671, 787, 856], "num_it": [787, 790, 791], "num_object": 669, "num_repeat": 91, "num_run": [790, 791], "number": [1, 29, 41, 46, 49, 70, 71, 72, 73, 76, 77, 78, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 106, 107, 108, 125, 127, 129, 131, 132, 134, 137, 139, 140, 142, 143, 184, 205, 226, 270, 301, 308, 316, 333, 335, 372, 378, 386, 400, 402, 423, 429, 437, 452, 454, 476, 483, 491, 508, 510, 535, 541, 544, 553, 555, 561, 576, 594, 595, 600, 604, 605, 607, 608, 609, 610, 614, 663, 664, 665, 666, 667, 668, 669, 671, 706, 750, 761, 777, 781, 782, 784, 785, 787, 788, 790, 791, 792, 793, 809, 819, 823, 825, 839, 849, 853, 881, 888, 925, 944, 945], "number_of_dimens": [667, 782], "numer": [1, 80, 84, 127, 136, 141, 143, 252, 270, 279, 283, 287, 610, 664, 665, 706, 762, 773, 776, 777, 783, 784, 791, 945], "numeric_onli": 1, "numericmetadatacolumn": [234, 270, 281], "numpi": [1, 108, 565, 583, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 612, 613, 614, 618, 632, 641, 649, 657, 663, 667, 669, 671, 672, 706, 728, 750, 761, 762, 787, 789, 790, 791, 792, 806, 807, 808, 809, 810, 813, 816, 817, 823, 824, 825, 826, 827, 829, 830, 834, 835, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 853, 855, 856, 886, 925, 1004], "nutrient": 610, "nwnnnnnn": [320, 325, 388, 393, 439, 444, 495, 500], "o": [55, 56, 60, 95, 123, 124, 131, 132, 133, 140, 142, 231, 233, 285, 288, 338, 347, 405, 410, 411, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 774, 775, 825, 844, 859, 918, 939, 941, 1002, 1008], "o1": [807, 808, 810, 813, 816, 817, 823, 824, 825, 826, 827, 829, 830, 834, 835, 836, 840, 841, 842, 843, 845, 847, 848, 849, 850, 852, 855, 856, 858], "o2": [807, 808, 810, 813, 816, 817, 823, 824, 825, 826, 827, 829, 830, 834, 835, 836, 840, 841, 842, 843, 845, 847, 848, 849, 850, 852, 855, 856, 858], "o3": [807, 808, 810, 816, 825, 830, 834, 843], "o31698": 142, "o31699": 142, "o4": [807, 808, 810, 825, 843], "o5": [810, 825], "o83071": 142, "ob": [1, 73, 102, 851], "obesrvation_metadata_f": 834, "obf": 133, "obj": [144, 157, 178, 182, 958, 1009], "object": [0, 1, 2, 17, 29, 32, 33, 34, 43, 46, 49, 50, 52, 53, 54, 55, 57, 58, 61, 62, 63, 64, 65, 66, 67, 109, 112, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 176, 178, 180, 182, 187, 188, 194, 197, 200, 205, 206, 212, 214, 215, 216, 217, 218, 224, 226, 227, 228, 229, 230, 234, 235, 241, 244, 247, 252, 253, 259, 262, 265, 270, 271, 277, 280, 283, 284, 287, 289, 291, 294, 296, 307, 308, 312, 315, 316, 323, 324, 326, 327, 328, 333, 334, 335, 336, 343, 362, 365, 367, 377, 378, 382, 385, 386, 391, 392, 394, 395, 400, 401, 402, 403, 409, 411, 413, 416, 418, 428, 429, 433, 436, 437, 442, 443, 445, 447, 452, 453, 454, 455, 462, 464, 466, 469, 471, 482, 483, 487, 490, 491, 498, 499, 501, 502, 503, 508, 509, 510, 511, 519, 523, 525, 528, 530, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 565, 575, 577, 581, 589, 590, 595, 613, 614, 618, 627, 628, 630, 637, 641, 651, 652, 655, 663, 664, 666, 667, 668, 669, 694, 727, 738, 776, 777, 782, 783, 784, 793, 796, 808, 818, 819, 820, 821, 846, 851, 853, 854, 855, 858, 861, 878, 886, 893, 925, 930, 932, 941, 944, 945, 966, 967, 990, 1002, 1004, 1007, 1009], "obs_id": [823, 825, 830], "obs_map": 821, "obs_phi": 809, "observ": [1, 79, 82, 91, 94, 102, 106, 107, 112, 126, 316, 342, 386, 408, 437, 461, 491, 518, 544, 559, 595, 671, 762, 787, 790, 791, 793, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 912, 940, 1006, 1009], "observation_column_nam": [814, 855], "observation_group_metadata": [793, 824], "observation_id": [793, 830, 838, 843], "observation_index": 793, "observation_metadata": 793, "observation_metadata_f": 834, "observed_char": [316, 386, 437, 491, 544], "observed_featur": 102, "obsolet": 139, "obtain": [80, 270, 296, 367, 418, 471, 523, 530, 572, 573, 587, 595, 613, 625, 635, 648, 659, 661, 663, 665, 667, 961, 962, 963], "obviou": 137, "oc": 131, "occur": [17, 128, 132, 133, 136, 137, 177, 181, 184, 327, 395, 447, 502, 523, 548, 791, 885, 894], "occurr": [76, 101, 308, 320, 321, 322, 325, 378, 388, 389, 390, 393, 429, 439, 440, 441, 444, 446, 483, 495, 496, 497, 500, 541], "oct": [132, 134], "odot": [602, 609], "off": [84, 97, 289, 411, 464, 607, 790, 884, 940, 944, 1009], "offer": 967, "offici": 126, "offset": [133, 134], "often": [1, 79, 104, 108, 131, 132, 134, 613, 671, 777, 782, 787, 965], "oh": 1001, "ol": 79, "old": 858, "older": 139, "om": [793, 860], "omic": 592, "ominu": 608, "omit": [137, 270, 283, 613, 849, 899, 933, 935, 940, 1002], "ommit": 140, "onc": [82, 132, 144, 934], "one": [0, 1, 46, 47, 48, 49, 52, 53, 55, 61, 62, 63, 79, 80, 81, 84, 89, 95, 104, 106, 107, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 156, 177, 181, 201, 203, 227, 230, 232, 248, 250, 266, 268, 270, 299, 304, 307, 320, 321, 322, 323, 324, 325, 326, 358, 370, 375, 377, 388, 389, 390, 391, 392, 393, 394, 411, 421, 426, 428, 439, 440, 441, 442, 443, 444, 445, 446, 474, 479, 482, 495, 496, 497, 498, 499, 500, 501, 533, 538, 540, 545, 546, 547, 561, 565, 577, 595, 614, 618, 628, 641, 652, 659, 664, 665, 667, 668, 671, 672, 673, 762, 778, 781, 782, 789, 790, 791, 806, 809, 834, 845, 876, 878, 879, 885, 899, 912, 917, 925, 1002, 1007, 1009], "one_to_mani": 809, "one_to_many_md_kei": 809, "one_to_many_mod": 809, "ones": [777, 790, 834], "onli": [0, 1, 17, 55, 82, 85, 95, 112, 129, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 184, 198, 199, 215, 230, 245, 246, 263, 264, 270, 279, 284, 289, 307, 314, 348, 377, 384, 411, 428, 435, 464, 482, 489, 523, 540, 561, 575, 592, 595, 607, 627, 637, 651, 652, 654, 659, 663, 667, 668, 761, 762, 777, 782, 784, 789, 790, 791, 807, 808, 809, 817, 819, 831, 856, 882, 885, 886, 888, 891, 894, 917, 925, 930, 934, 947, 990, 1007, 1009], "onlin": [84, 89, 133], "ons": 141, "onto": [144, 175, 783, 940], "ontologi": 135, "ontology_term": 135, "oo": 1002, "open": [0, 56, 60, 61, 62, 63, 64, 65, 66, 109, 123, 124, 127, 128, 133, 144, 155, 157, 176, 177, 178, 180, 181, 182, 185, 186, 231, 233, 285, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 774, 775, 819, 844, 855, 859, 918, 939, 966, 1001, 1002], "open_fil": 966, "open_filehandl": 1002, "oper": [1, 46, 49, 55, 106, 127, 132, 137, 228, 289, 318, 319, 411, 464, 493, 494, 523, 592, 594, 607, 608, 609, 613, 614, 649, 665, 666, 782, 804, 805, 807, 808, 809, 813, 819, 832, 836, 845, 846, 847, 848, 850, 853, 856, 899, 923, 940, 968, 1001, 1002, 1004], "operon": 205, "opinion": 81, "oplu": 607, "oppos": [668, 1009], "optim": [1, 17, 80, 104, 106, 107, 108, 667, 892, 942], "option": [17, 29, 46, 48, 49, 51, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 70, 73, 74, 79, 84, 85, 86, 91, 95, 98, 104, 106, 107, 108, 109, 112, 113, 123, 124, 129, 132, 133, 138, 139, 141, 142, 143, 145, 155, 156, 157, 176, 177, 178, 180, 181, 182, 184, 198, 202, 203, 204, 205, 215, 226, 230, 231, 232, 233, 245, 249, 250, 251, 263, 267, 268, 269, 270, 279, 282, 283, 285, 286, 287, 288, 289, 294, 306, 307, 308, 312, 314, 315, 316, 319, 327, 329, 330, 331, 333, 335, 338, 341, 342, 347, 348, 357, 358, 359, 365, 377, 378, 382, 384, 385, 386, 395, 396, 397, 398, 400, 402, 405, 407, 408, 410, 411, 416, 428, 429, 433, 435, 436, 437, 447, 448, 449, 450, 452, 454, 457, 460, 461, 463, 464, 469, 481, 482, 483, 487, 489, 490, 491, 494, 502, 504, 505, 506, 508, 510, 513, 517, 518, 520, 521, 522, 523, 528, 540, 541, 542, 543, 544, 548, 549, 550, 551, 553, 555, 557, 559, 560, 572, 575, 577, 581, 582, 588, 591, 595, 600, 601, 602, 604, 605, 614, 625, 627, 628, 630, 631, 636, 648, 651, 652, 654, 655, 656, 662, 663, 664, 665, 666, 667, 668, 669, 671, 706, 761, 773, 774, 775, 777, 778, 781, 782, 784, 785, 788, 789, 790, 791, 792, 804, 805, 806, 809, 810, 812, 813, 816, 817, 819, 824, 825, 826, 829, 830, 831, 832, 833, 834, 837, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 861, 882, 899, 904, 918, 925, 932, 933, 939, 940, 941, 944, 945, 966, 967, 968, 990, 1004, 1009], "or_f": 138, "oral": 1, "orcutt": 573, "ord_r": 138, "order": [1, 17, 39, 44, 50, 54, 55, 58, 104, 108, 125, 127, 132, 136, 137, 138, 139, 142, 197, 202, 227, 244, 249, 262, 267, 270, 271, 277, 280, 284, 286, 289, 304, 313, 316, 342, 346, 348, 359, 375, 383, 386, 408, 411, 426, 434, 437, 461, 464, 479, 488, 491, 518, 521, 538, 544, 559, 563, 565, 572, 575, 587, 595, 600, 611, 616, 618, 625, 627, 635, 639, 641, 648, 651, 654, 659, 661, 663, 664, 665, 666, 667, 668, 671, 776, 785, 789, 790, 819, 839, 847, 848, 853, 911, 930, 931, 932, 940, 942, 944, 1007, 1009], "ordin": [1, 667, 945, 946, 1001], "ordination_result": 762, "ordinationresult": [138, 667, 776, 777, 782, 783, 784, 945], "org": [17, 67, 109, 125, 126, 132, 133, 134, 139, 141, 142, 202, 249, 267, 270, 283, 286, 583, 606, 610, 612, 614, 632, 637, 649, 657, 663, 664, 665, 666, 667, 773, 793, 819, 820, 853, 860, 941], "organ": [1, 131, 134, 143], "organis": 134, "orient": [672, 773, 789, 819, 853, 922, 1002], "origin": [1, 61, 63, 64, 66, 71, 72, 75, 78, 79, 82, 83, 87, 88, 95, 96, 98, 99, 106, 107, 109, 129, 130, 132, 137, 139, 140, 199, 203, 204, 246, 250, 251, 264, 268, 269, 287, 307, 377, 428, 482, 523, 540, 663, 664, 665, 666, 667, 671, 776, 784, 792, 809, 817, 840, 856, 884, 940, 941, 1007, 1009], "orthogon": [601, 602, 610], "ortholog": [793, 860], "orthonorm": [601, 602, 610, 611], "orthornorm": 601, "ostel": 132, "other": [0, 1, 17, 34, 43, 52, 53, 55, 79, 94, 109, 131, 132, 133, 134, 136, 137, 139, 141, 142, 143, 184, 188, 194, 206, 212, 218, 224, 229, 235, 241, 253, 259, 270, 271, 277, 284, 289, 294, 303, 312, 318, 319, 324, 326, 328, 333, 334, 335, 336, 339, 349, 355, 365, 374, 382, 392, 394, 400, 401, 402, 403, 406, 411, 416, 425, 433, 443, 445, 452, 453, 454, 455, 458, 464, 469, 478, 487, 493, 494, 499, 501, 503, 508, 509, 510, 511, 514, 523, 528, 537, 542, 546, 547, 553, 554, 555, 556, 558, 561, 563, 570, 589, 595, 600, 613, 616, 623, 637, 639, 646, 667, 762, 773, 776, 777, 782, 789, 791, 794, 802, 806, 810, 815, 830, 834, 861, 884, 885, 886, 892, 894, 895, 944, 967, 978, 1001, 1002, 1003, 1004, 1007, 1009], "other_vertebr": 128, "otherwis": [17, 30, 46, 49, 58, 73, 74, 132, 134, 137, 140, 141, 184, 201, 234, 248, 266, 342, 408, 461, 518, 559, 562, 563, 565, 570, 575, 615, 616, 618, 623, 627, 638, 639, 641, 646, 651, 654, 668, 796, 812, 816, 828, 834, 840, 843, 919, 1004], "otu": [1, 93, 141, 793, 806, 807, 808, 809, 810, 814, 818, 819, 820, 825, 830, 834, 840, 842, 843, 847, 848, 853, 855, 856, 860], "otu1": 814, "otu2": 814, "otu_id": [79, 95, 106, 107], "otuid": 141, "our": [1, 81, 133, 141, 144, 156, 185, 329, 396, 448, 504, 549, 762, 787, 790, 791, 792, 1004, 1009], "out": [48, 130, 140, 141, 144, 196, 243, 261, 773, 817, 849, 885, 886, 1009], "out_f": [694, 727, 738], "out_fh": 613, "outcom": [97, 790], "outer": [54, 55, 307, 377, 428, 482, 540, 576], "outfmt": [127, 128], "output": [2, 55, 127, 128, 130, 137, 139, 140, 142, 332, 399, 451, 507, 552, 600, 663, 667, 668, 706, 777, 803, 809, 814, 854, 855, 933, 941, 1001, 1009], "outsid": [133, 205, 229, 316, 386, 437, 491, 544], "over": [39, 44, 54, 109, 132, 133, 140, 141, 142, 299, 304, 370, 375, 421, 426, 474, 479, 533, 538, 561, 600, 669, 683, 705, 716, 749, 760, 787, 788, 796, 806, 809, 810, 829, 830, 831, 833, 836, 837, 842, 845, 849, 856, 870, 908, 911, 914, 915, 916, 928, 931, 934, 1007], "overal": [793, 860], "overhead": [761, 819], "overlap": [84, 230, 284, 330, 331, 397, 398, 449, 450, 505, 506, 550, 551, 572, 591, 600, 625, 648, 834, 885], "overrid": [17, 62, 65, 95, 145, 155, 156, 157, 176, 180, 283, 917, 1009], "overridden": [17, 29, 134, 941], "override_skip_babp": 17, "overriden": [155, 156, 157], "overview": 941, "own": [46, 49, 55, 125, 132, 138, 142, 144, 787], "owner": 951, "oxfordjourn": 133, "oxtobi": 131, "p": [1, 17, 67, 79, 88, 89, 95, 411, 595, 600, 610, 613, 663, 665, 666, 667, 668, 671, 762, 776, 777, 778, 784, 787, 790, 791], "p26204": 131, "p__b": 809, "p__c": 809, "p_adjust": [595, 600], "p_i": [75, 77, 98, 99], "p_valu": [1, 665, 671], "packag": [17, 67, 69, 105, 129, 132, 137, 139, 600, 610, 613, 663, 664, 665, 666, 667, 670, 776, 777, 784, 787, 1007, 1008], "pad": [55, 139, 307, 377, 428, 482, 540], "page": [81, 595, 941, 1007], "pair": [0, 1, 52, 61, 62, 63, 65, 68, 106, 107, 108, 112, 131, 133, 134, 135, 137, 142, 226, 230, 324, 392, 443, 499, 546, 561, 565, 572, 587, 591, 595, 618, 625, 635, 641, 648, 652, 659, 661, 668, 787, 901, 930, 1004], "pairwis": [108, 109, 112, 577, 595, 606, 628, 652, 668, 671, 809, 831, 892, 930, 1007], "pairwise_dist": 108, "pairwise_func": 108, "pam": [411, 561, 573], "pam250": 573, "pam30": 573, "pam70": 573, "pancoro": 131, "panda": [1, 29, 53, 58, 108, 127, 128, 143, 203, 204, 234, 250, 251, 268, 269, 270, 287, 289, 326, 394, 411, 445, 464, 501, 547, 584, 595, 600, 633, 658, 659, 663, 664, 666, 667, 668, 672, 706, 750, 762, 773, 789, 790, 807, 836, 852, 899, 944, 1004], "paper": 141, "papilionoidea": 131, "par_dist": 671, "parallel": [81, 109], "paramet": [1, 3, 17, 18, 29, 31, 34, 43, 46, 48, 49, 50, 51, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 112, 113, 123, 124, 144, 145, 155, 156, 157, 168, 170, 171, 172, 173, 174, 176, 177, 178, 180, 181, 182, 184, 188, 194, 197, 198, 200, 202, 203, 204, 205, 206, 212, 215, 218, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 244, 245, 247, 249, 250, 251, 253, 259, 262, 263, 265, 267, 268, 269, 270, 271, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 294, 296, 303, 306, 307, 308, 312, 314, 315, 316, 319, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 341, 342, 343, 345, 346, 347, 348, 349, 355, 357, 358, 359, 362, 365, 367, 374, 377, 378, 382, 384, 385, 386, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 413, 416, 418, 425, 428, 429, 433, 435, 436, 437, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 460, 461, 462, 463, 464, 466, 469, 471, 478, 481, 482, 483, 487, 489, 490, 491, 494, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 523, 525, 528, 530, 537, 540, 541, 542, 543, 544, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 570, 572, 573, 575, 576, 577, 579, 580, 581, 582, 587, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 618, 623, 625, 627, 628, 629, 630, 631, 635, 636, 638, 639, 641, 646, 648, 651, 652, 653, 654, 655, 656, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 694, 706, 727, 738, 750, 761, 773, 774, 775, 776, 777, 778, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 796, 804, 805, 806, 807, 808, 809, 810, 812, 813, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 861, 876, 878, 879, 882, 883, 884, 885, 886, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 922, 924, 925, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 944, 945, 946, 947, 964, 965, 966, 967, 968, 978, 979, 990, 1009], "parametr": [73, 592, 595, 663, 666], "params_guess": 91, "parasit": 671, "pardi": 95, "parent": [131, 135, 137, 143, 523, 610, 861, 878, 881, 893, 896, 905, 913, 917, 926, 932, 935, 937, 938, 1007], "parent_tax_id": [143, 899], "parenthes": 1007, "parenthesi": 137, "parker": 71, "pars": [132, 133, 134, 136, 144, 818, 819, 820, 821, 1002], "parse_biom_t": 819, "parse_f": 819, "parser": [135, 137, 1002], "part": [127, 132, 134, 137, 140, 589, 593, 610, 761, 842, 911, 967, 1007], "partial": [17, 95, 229, 796], "partial_beta_divers": 109, "partialdistancematrix": 109, "particip": 791, "particuarli": 132, "particular": [1, 861, 943, 1009], "particularli": 883, "partit": [610, 611, 809], "pass": [1, 29, 36, 49, 56, 57, 60, 67, 104, 108, 109, 110, 111, 123, 124, 127, 129, 132, 134, 139, 140, 142, 155, 156, 157, 169, 175, 176, 177, 178, 179, 180, 181, 182, 184, 231, 233, 285, 288, 289, 312, 314, 316, 338, 339, 347, 358, 382, 384, 386, 405, 406, 410, 411, 433, 435, 437, 457, 458, 463, 464, 487, 489, 491, 513, 514, 522, 523, 542, 544, 557, 558, 560, 565, 582, 588, 618, 631, 636, 641, 652, 654, 656, 662, 665, 668, 706, 774, 775, 790, 830, 843, 844, 859, 907, 909, 918, 939, 941, 990, 1007, 1009], "passthrough": 58, "password": 144, "patch": 175, "path": [126, 130, 132, 133, 140, 184, 202, 249, 267, 283, 286, 809, 877, 965], "pathwai": [793, 809, 860], "pattern": [143, 315, 343, 385, 409, 436, 462, 490, 519, 543, 762, 1004, 1009], "paw": [411, 446, 459], "pawhea": 0, "pawlowski": [592, 606, 612], "pc": [1, 672, 773], "pca": [776, 782, 784], "pcbi": [606, 612], "pcoa": [1, 138, 667, 763, 773, 783], "pcoa_result": 773, "pcr": 791, "pd": [1, 29, 49, 53, 58, 79, 95, 104, 127, 128, 143, 234, 326, 394, 445, 501, 523, 547, 572, 584, 587, 595, 600, 613, 625, 633, 635, 648, 658, 659, 661, 663, 664, 667, 672, 762, 763, 773, 776, 784, 789, 790, 807, 836, 852, 899, 944], "pd_": 95, "pdf": 140, "pdist": [1, 105, 108, 111, 671], "pearson": [132, 665, 668, 671, 886], "pearsonr": [665, 671, 787], "peerj": 95, "penal": [61, 62, 63], "penalize_terminal_gap": [61, 62, 63], "penalti": [0, 17, 61, 62, 63, 64, 65, 66], "pentapetala": 131, "per": [55, 127, 128, 140, 142, 289, 411, 464, 523, 600, 668, 671, 761, 784, 790, 791, 850, 879, 966], "percent": [127, 1004], "percentag": [127, 592], "percentil": 595, "percentile_df": 595, "perfect": [762, 777], "perform": [0, 1, 17, 54, 55, 67, 79, 91, 104, 106, 107, 108, 109, 132, 133, 141, 206, 284, 289, 346, 359, 411, 464, 521, 523, 563, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 606, 607, 608, 609, 611, 612, 614, 616, 637, 639, 649, 652, 667, 668, 671, 672, 673, 695, 739, 750, 762, 782, 784, 785, 791, 792, 796, 809, 840, 843, 849, 862, 863, 887, 890, 897, 908, 914, 915, 916, 925, 937, 938, 944, 1002], "period": [141, 202, 249, 267, 286], "periton": 790, "perm_stat": 671, "permanova": [663, 667], "permdisp2": 667, "permiss": [132, 137, 139], "permit": [137, 156], "permut": [1, 206, 663, 665, 666, 667, 668, 671], "perspect": 95, "pertain": 670, "perturb": [592, 608], "petchei": 79, "peter": 133, "pfam": 142, "pg": 77, "pgc": 143, "ph": 664, "phagocyt": 790, "phase": [134, 135], "phe": 411, "phenylalanin": 411, "php": 132, "phred": [132, 133], "phred_offset": [133, 140], "phydiv": 79, "phylip": [56, 60, 132, 137, 940, 1002, 1007], "phylip_multiple_alignment_format": 139, "phylipformaterror": 139, "phylo": 139, "phylochip": [79, 106, 107], "phylogenet": [1, 79, 95, 106, 107, 137, 139, 613, 671, 861, 884, 894, 941, 1001, 1004], "phylogeni": [139, 670, 671], "phylum": 899, "physic": [783, 791], "pick": [17, 790], "pickl": [7, 21, 37, 116, 148, 161, 190, 208, 220, 237, 255, 273, 297, 351, 368, 419, 472, 531, 566, 619, 642, 676, 687, 698, 709, 720, 731, 742, 753, 766, 797, 867, 952, 971, 983, 994], "pident": [127, 128], "pie": 77, "piec": 1009, "pielou": [96, 100], "pielou_": 83, "piet": 777, "pii": 129, "ping": [17, 67], "pipe": 143, "pirrung": 773, "pisc": 84, "pitfal": 48, "pizetti": 81, "place": [58, 137, 142, 284, 358, 761, 782, 785, 817, 840, 843, 853, 856, 878, 903, 935, 945], "placebo": [595, 600], "plain": [129, 132, 133, 134, 137, 139, 140], "plan": 141, "planetmath": 637, "plankton": 71, "plant": [103, 131, 610], "plastid": 143, "pleas": [36, 56, 60, 123, 124, 132, 140, 231, 233, 285, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 774, 775, 844, 859, 918, 939, 1006], "pleij": 142, "plm": [2, 130], "pln": [131, 143], "plo": [17, 67, 85, 86, 606, 612], "ploson": [17, 67], "plot": [1, 763], "plu": [143, 289, 411, 464], "plugin": 141, "plural": [1, 186], "pm": 78, "pmid": [142, 665, 941], "png": 763, "point": [48, 81, 84, 86, 125, 129, 141, 144, 156, 205, 270, 332, 339, 342, 399, 406, 408, 451, 458, 461, 507, 514, 518, 552, 558, 559, 573, 667, 673, 695, 750, 762, 773, 790, 791, 923, 944, 965], "poisson": [85, 86], "polymeras": 142, "pone": [17, 67], "pool": 70, "poorli": [671, 782], "pop": [917, 919, 920, 924], "popul": [73, 80, 82, 102, 140, 142, 332, 399, 451, 507, 552, 607, 669, 787, 791], "port": 141, "portal": 143, "portion": 665, "pos_rat": 791, "posit": [0, 17, 29, 30, 34, 43, 46, 47, 48, 49, 50, 51, 53, 54, 55, 58, 61, 62, 63, 64, 65, 66, 67, 68, 127, 128, 129, 132, 133, 134, 137, 139, 140, 141, 142, 289, 294, 296, 299, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 326, 327, 329, 332, 333, 334, 335, 336, 337, 339, 340, 344, 345, 346, 358, 359, 365, 367, 370, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 394, 395, 396, 399, 400, 401, 402, 403, 404, 406, 411, 416, 418, 421, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 438, 445, 447, 448, 451, 452, 453, 454, 455, 456, 458, 459, 464, 469, 471, 474, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 492, 501, 502, 504, 507, 508, 509, 510, 511, 512, 514, 515, 516, 520, 521, 523, 528, 530, 533, 537, 538, 539, 540, 541, 543, 547, 548, 549, 552, 553, 554, 555, 556, 558, 593, 594, 595, 604, 665, 671, 750, 763, 787, 788, 790, 791, 796, 823, 836, 913, 1004], "positional_metadata": [29, 34, 47, 53, 54, 55, 132, 142, 289, 294, 306, 307, 310, 326, 332, 339, 340, 360, 365, 377, 380, 394, 399, 406, 411, 416, 428, 431, 445, 451, 458, 464, 469, 481, 482, 485, 501, 507, 514, 515, 523, 528, 540, 547, 552, 558, 1004], "possibl": [1, 17, 36, 96, 100, 132, 133, 141, 142, 229, 313, 346, 359, 383, 434, 488, 521, 664, 668, 790, 886, 934, 940], "post": [139, 787, 791], "posterior": [600, 861], "postmenopaus": 791, "postord": [891, 894, 908, 911, 915, 916, 931, 934, 1007], "potenti": [132, 329, 396, 448, 504, 549, 761, 920, 942, 1009], "pound": [141, 270], "power": [592, 600, 793, 860, 1002], "pp": [80, 90, 97, 777], "ppo": [127, 128], "practic": [1, 55, 95, 132, 133, 140, 761, 889, 894], "pre": [315, 343, 385, 409, 436, 462, 490, 519, 543, 561, 573, 578, 791], "pre_and_postord": [908, 911, 914, 916, 931, 934], "pre_rat": 791, "prealloc": 967, "preced": [17, 129, 137, 139], "precomput": 786, "predefin": [135, 312, 382, 433, 487, 542], "predict": [85, 86, 142, 790], "prefer": [48, 104, 108, 133, 202, 249, 267, 286, 776, 777], "prefer_self": 834, "prefix": 143, "preliminari": 790, "premenopaus": 791, "preorder": [908, 911, 914, 915, 931, 934, 1007], "prepar": 141, "preq1": 134, "presenc": [74, 95, 349, 358, 791, 841], "present": [47, 48, 79, 106, 107, 127, 130, 132, 138, 141, 142, 216, 217, 270, 289, 306, 309, 310, 311, 316, 317, 327, 337, 340, 358, 379, 380, 381, 386, 387, 395, 404, 411, 430, 431, 432, 437, 438, 447, 456, 459, 464, 481, 484, 485, 486, 491, 492, 502, 512, 515, 544, 548, 575, 595, 627, 651, 663, 664, 666, 667, 706, 772, 782, 791, 792, 809, 818, 819, 858, 885, 940, 941, 943, 1007], "preserv": [137, 270, 762, 776, 777, 782, 923], "press": 72, "presum": 132, "prevent": 17, "previou": [1, 61, 62, 63, 64, 65, 66, 294, 365, 416, 469, 528, 663, 665, 667], "previous": [0, 332, 339, 399, 406, 451, 458, 507, 514, 552, 558, 1009], "pri": 143, "primari": [144, 1004], "primer": 664, "princip": [1, 667, 773, 776, 782, 783], "principl": 787, "print": [0, 1, 54, 79, 106, 107, 129, 132, 133, 134, 135, 137, 139, 140, 142, 313, 329, 342, 346, 359, 383, 396, 408, 434, 448, 461, 488, 504, 518, 521, 523, 549, 559, 613, 665, 671, 672, 761, 787, 791, 806, 807, 808, 809, 810, 813, 817, 823, 825, 826, 830, 831, 832, 833, 834, 837, 840, 841, 842, 843, 847, 848, 849, 855, 856, 858, 862, 863, 878, 879, 882, 883, 886, 887, 888, 890, 891, 893, 894, 895, 897, 899, 900, 902, 905, 906, 907, 908, 909, 911, 913, 914, 915, 916, 917, 920, 922, 923, 924, 925, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 1004, 1007, 1009], "printabl": [133, 140], "prior": [358, 665, 668, 899, 968, 978, 1009], "prioriti": [95, 979, 980, 1009], "privat": [134, 879], "prng": 761, "pro": 411, "prob": [29, 34, 47, 54], "probabl": [75, 85, 86, 97, 600, 672, 684, 761, 776, 787, 791, 861], "problem": [141, 595, 782], "problemat": [141, 932], "proc": [63, 66], "procedur": [667, 1002], "proceed": 573, "process": [109, 132, 142, 229, 600, 784, 854, 855, 943, 968, 1009], "process_func": 821, "processor": 1009, "prod": [598, 610], "produc": [127, 128, 139, 140, 155, 329, 396, 448, 504, 549, 776, 784], "product": [0, 205, 603, 665], "program": [136, 137, 141, 143], "progress": 664, "project": [109, 133, 593, 610, 663, 664, 665, 666, 667, 783], "prolin": 411, "promis": 595, "pronounc": [793, 860, 1001], "prop_expl": [672, 673, 695, 706, 739, 750], "propag": 523, "properli": [137, 184], "properti": [129, 139, 143, 284, 349, 355, 360, 561, 577, 628, 637, 652, 787, 881, 917, 947, 959, 961, 962, 963, 1003], "proport": [75, 77, 81, 82, 91, 95, 98, 99, 138, 319, 494, 590, 592, 593, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 663, 665, 666, 672, 706, 750, 763, 776, 782, 784, 884], "proportion": [606, 612], "proportion_explain": [762, 763], "propos": [98, 941], "prot": 131, "protein": [0, 2, 17, 29, 48, 61, 63, 66, 67, 113, 127, 129, 130, 131, 132, 133, 134, 139, 140, 142, 329, 342, 345, 346, 348, 358, 359, 360, 396, 408, 504, 518, 520, 521, 523, 549, 559, 573, 790, 1004], "protein_from_dna": 1004, "protein_from_rna": 1004, "protein_id": 131, "proteinembed": 130, "provid": [0, 1, 2, 17, 29, 46, 48, 49, 56, 57, 62, 65, 67, 69, 79, 84, 95, 104, 105, 106, 107, 108, 123, 127, 130, 132, 133, 137, 139, 141, 142, 143, 144, 155, 157, 176, 177, 180, 181, 183, 185, 200, 202, 231, 247, 249, 265, 267, 270, 283, 284, 285, 286, 294, 316, 329, 332, 338, 342, 365, 386, 396, 399, 405, 408, 416, 437, 448, 451, 457, 461, 464, 469, 491, 504, 507, 513, 518, 523, 528, 544, 549, 552, 557, 559, 561, 577, 582, 587, 592, 600, 613, 614, 628, 631, 635, 652, 656, 661, 663, 664, 665, 666, 667, 669, 672, 706, 761, 762, 763, 773, 774, 778, 787, 789, 790, 793, 804, 812, 814, 817, 819, 824, 826, 827, 832, 833, 835, 837, 843, 844, 849, 853, 854, 856, 858, 860, 883, 891, 899, 912, 918, 922, 925, 932, 940, 941, 968, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "proxim": 762, "prune": [882, 924, 935, 936], "psa": [61, 64], "pseudo": [666, 787], "pseudocount": [592, 595, 600], "pseudoknot": 142, "pub": [131, 143, 205], "public": [95, 133, 773], "publish": [133, 142], "pubm": [131, 134, 523], "pull": 132, "pure": [0, 942], "purin": [289, 314, 384, 435, 489, 1004], "purpos": [0, 1, 67, 70, 141, 143, 348, 787, 1009], "put": [291, 362, 413, 466, 525], "pvalu": 600, "pwmantel": 665, "pwr": 790, "pwr_001": 787, "pwr_010": 787, "pwr_100": 787, "pwr_est": 791, "pwr_est2": 791, "py": [133, 144], "pycog": [79, 106, 107, 940], "pyl": 411, "pyrimidin": [289, 314, 489], "pyrosequenc": [79, 106, 107], "pyrrolysin": 411, "python": [0, 1, 3, 523, 613, 637, 665, 942, 947, 1001, 1002, 1004], "q": [17, 84, 128, 411, 777, 778], "q2": 141, "q2cli": 141, "qacc": [127, 128], "qaccver": [127, 128], "qcov": [127, 128], "qcovhsp": [127, 128], "qend": [127, 128], "qframe": [127, 128], "qgi": [127, 128], "qiim": [79, 106, 107, 141, 270], "qiime2": [141, 202, 249, 267, 270, 283, 286], "qiita": 141, "qiu": 671, "qlen": [127, 128], "qseq": [127, 128, 338, 405, 457, 513, 557], "qseqid": [127, 128], "qstart": [127, 128], "qual": 133, "qual_fl": 132, "qualifi": [131, 134], "qualit": [106, 107, 773], "qualiti": [53, 132, 140, 289, 294, 306, 310, 326, 340, 365, 380, 394, 411, 416, 431, 445, 464, 469, 481, 485, 501, 515, 523, 528, 547, 773, 1004], "quantifi": 1, "quantil": [84, 600], "quantit": [95, 106, 107, 776, 791], "quantiti": 107, "quartil": 84, "queri": [0, 17, 67, 127, 128, 215, 282, 523], "query1": 128, "query_begin": 3, "query_sequ": [0, 3, 17, 18], "quick": [565, 618, 641, 649, 773, 776], "quit": 1009, "quot": 137, "qvalu": 600, "r": [1, 17, 79, 80, 84, 85, 86, 87, 88, 95, 106, 107, 133, 134, 143, 184, 289, 411, 464, 573, 592, 593, 594, 598, 599, 600, 601, 602, 610, 663, 664, 665, 666, 667, 671, 773, 776, 777, 784, 808, 883, 924], "r1": 1004, "r2": 1004, "r3": 1004, "r4": 1004, "r5": 1004, "r_i": 610, "r_m": 665, "ra": [131, 142], "raaijmak": 91, "raimon": 610, "rais": [29, 46, 48, 49, 51, 55, 57, 59, 70, 79, 80, 81, 95, 104, 106, 107, 108, 112, 132, 133, 139, 144, 155, 156, 157, 176, 177, 178, 180, 181, 182, 197, 229, 244, 262, 280, 283, 284, 291, 307, 308, 312, 314, 316, 327, 328, 330, 331, 333, 334, 335, 336, 342, 358, 360, 362, 377, 378, 382, 384, 386, 395, 397, 398, 400, 401, 402, 403, 408, 413, 428, 429, 433, 435, 437, 447, 449, 450, 452, 453, 454, 455, 461, 466, 482, 483, 487, 489, 491, 502, 503, 505, 506, 508, 509, 510, 511, 518, 525, 540, 541, 542, 544, 548, 550, 551, 553, 554, 555, 556, 559, 565, 572, 573, 575, 576, 577, 580, 587, 590, 591, 597, 604, 605, 611, 618, 625, 627, 628, 629, 635, 641, 648, 651, 652, 653, 661, 663, 664, 665, 667, 668, 706, 750, 761, 773, 776, 777, 782, 790, 791, 792, 793, 796, 804, 806, 810, 812, 813, 817, 818, 819, 824, 825, 826, 827, 830, 831, 832, 833, 835, 836, 837, 843, 845, 846, 849, 856, 858, 860, 876, 883, 884, 886, 889, 891, 892, 894, 895, 897, 899, 901, 907, 909, 912, 922, 923, 924, 925, 930, 935, 944, 945, 946, 947], "rand": 669, "randint": 787, "randn": [787, 790, 791], "random": [78, 80, 91, 125, 600, 663, 667, 669, 761, 777, 787, 789, 790, 791, 849, 886, 925], "random_fn": 669, "randomli": [75, 654, 663, 665, 666, 669, 761, 792, 849, 886, 925], "randomst": [886, 925], "rang": [53, 75, 84, 96, 107, 133, 134, 141, 306, 310, 316, 326, 329, 340, 380, 386, 394, 396, 431, 437, 445, 448, 481, 485, 491, 501, 504, 515, 544, 547, 549, 663, 664, 773, 791, 825, 830, 849, 903, 1009], "rangeindex": [29, 46, 49, 57, 139], "rangle_a": [601, 603], "rank": [1, 103, 143, 595, 663, 664, 665, 786, 843, 899], "rapid": [125, 132, 903], "rapidli": 1009, "rare": [70, 791], "rare_threshold": 70, "rarefact": [91, 849], "rate": [70, 561, 787], "rather": [1, 84, 137, 561, 592, 671, 941], "ratio": [85, 96, 100, 592, 593, 594, 595, 598, 599, 601, 602, 606, 612, 791], "rational": 786, "raw": [127, 694, 727], "raw_f": [694, 727, 738], "raxml": 139, "rbwpd_": 95, "rc": [142, 306, 481, 581, 630, 655, 773], "rda": [138, 763, 776, 777], "re": [0, 1, 46, 49, 55, 79, 104, 106, 107, 108, 126, 129, 132, 133, 139, 142, 289, 315, 343, 360, 385, 409, 411, 436, 462, 464, 490, 519, 523, 543, 668, 776, 784, 786, 787, 791, 806, 849, 932, 1007, 1009], "reach": 139, "read": [1, 17, 60, 79, 106, 107, 124, 126, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 142, 143, 155, 156, 173, 175, 177, 181, 184, 185, 233, 283, 288, 289, 346, 347, 358, 359, 410, 411, 463, 464, 521, 522, 523, 560, 588, 611, 613, 636, 662, 668, 775, 808, 859, 862, 863, 875, 876, 877, 879, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 895, 896, 897, 899, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 947, 1001, 1007], "read_numb": 140, "read_sequ": 3, "readabl": [125, 132, 133, 136, 137, 138, 139, 184, 946], "reader": [56, 123, 125, 126, 127, 128, 129, 130, 131, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 156, 170, 175, 176, 177, 180, 181, 231, 285, 338, 405, 457, 513, 557, 582, 631, 656, 774, 844, 918], "readi": [0, 144], "reading_fram": [346, 358, 359, 521], "readlin": [155, 184], "real": [54, 132, 133, 140, 592, 593, 594, 598, 599, 601, 602, 607, 608, 609], "realli": 1, "reason": [1, 80, 91, 131, 137, 790, 819, 881], "reassign": [57, 139, 665], "reassign_index": [29, 46, 49, 58, 59, 139], "reca": 230, "recal": 137, "recapitul": 671, "recaptur": 70, "receiv": [144, 145, 156, 316, 386, 437, 491, 544, 940], "recent": [139, 358, 523, 665], "receptor": 790, "reciproc": [75, 791], "recod": 48, "recogn": [141, 836, 846], "recommend": [1, 84, 95, 139, 142, 289, 360, 411, 464, 523, 595, 613, 773, 776, 784, 790], "recomput": [46, 49, 55], "reconstruct": [917, 941, 1001, 1004], "record": [128, 131, 132, 133, 134, 135, 140], "rectangl": 81, "recurs": [137, 879, 937, 938], "red": [581, 630, 655], "redefin": [665, 947], "reduc": [109, 202, 249, 267, 286, 667, 761, 782, 809], "reduce_f": 109, "reduct": 762, "redund": [583, 614, 632, 637, 657, 784], "redundant_form": 606, "reeder": [85, 86], "ref": [127, 878], "refer": [1, 17, 36, 48, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 103, 106, 107, 109, 205, 289, 348, 356, 357, 360, 411, 464, 523, 561, 573, 583, 593, 594, 595, 600, 604, 606, 610, 612, 614, 632, 637, 649, 657, 663, 664, 665, 666, 667, 671, 773, 776, 777, 784, 793, 819, 853, 860, 884, 913, 940, 941, 1006], "reference_sequ": 3, "reflect": [184, 671, 917, 922], "regard": 600, "regardless": [17, 47, 54, 55, 142, 270, 284, 358, 579, 669], "regex": [315, 343, 385, 409, 436, 462, 490, 519, 543], "region": [135, 205, 215, 329, 396, 448, 504, 549], "regist": [60, 124, 144, 145, 155, 156, 157, 169, 175, 177, 179, 181, 233, 288, 347, 410, 463, 522, 560, 588, 636, 662, 775, 859, 939], "registri": [56, 60, 123, 124, 126, 130, 132, 133, 140, 231, 233, 285, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 774, 775, 844, 859, 918, 939, 1002], "regress": [592, 665, 784, 791], "regsistri": [169, 179], "regular": [126, 130, 137, 315, 343, 385, 409, 436, 462, 490, 519, 543, 1004], "reject": [595, 600, 787], "rel": [51, 95, 126, 131, 134, 197, 244, 262, 280, 284, 316, 318, 319, 331, 333, 335, 386, 398, 400, 402, 437, 450, 452, 454, 491, 493, 494, 506, 508, 510, 544, 551, 553, 555, 606, 612, 649, 926, 944, 979, 1004], "relat": [1, 79, 80, 88, 95, 106, 107, 109, 131, 132, 136, 142, 613, 659, 776, 777, 784, 819, 853], "relationship": [1, 95, 137, 776, 777, 784, 787, 791, 809, 941, 1005], "relax": 139, "releas": [79, 95, 106, 107, 131, 143], "relev": [1, 17, 134, 600, 790, 809, 819, 853, 941, 1004], "reli": [94, 141, 202, 249, 267, 286, 289, 411, 464], "reliabl": 600, "reload": 133, "remain": [57, 132], "remaind": [132, 809], "rememb": [141, 205], "remot": 134, "remov": [48, 67, 79, 95, 106, 107, 113, 132, 136, 139, 196, 228, 243, 261, 310, 341, 380, 407, 431, 460, 485, 517, 813, 846, 878, 893, 913, 917, 920, 924, 935, 1004], "remove_delet": [913, 917, 919, 924], "renam": [134, 325, 337, 393, 404, 444, 456, 500, 512, 595], "render": 941, "reorder": [665, 668, 882, 886], "repeat": [1, 133, 787, 964], "repeatedli": 787, "repect": 132, "repen": 131, "replac": [1, 68, 91, 132, 289, 341, 344, 407, 411, 460, 464, 516, 517, 561, 592, 595, 604, 605, 761, 785, 792, 849, 856, 932], "replic": 891, "report": [95, 141, 156, 600, 671, 784], "repres": [1, 47, 75, 77, 79, 82, 91, 98, 99, 106, 107, 109, 113, 125, 126, 127, 128, 131, 132, 136, 137, 139, 141, 142, 143, 205, 226, 234, 270, 289, 342, 408, 411, 461, 464, 518, 523, 559, 561, 565, 572, 577, 587, 601, 602, 610, 611, 618, 625, 628, 635, 641, 648, 652, 661, 671, 762, 773, 787, 796, 809, 820, 845, 850, 854, 861, 928, 933, 940, 941, 1004, 1007], "represent": [0, 1, 122, 125, 126, 132, 137, 141, 215, 332, 356, 399, 451, 507, 552, 571, 611, 624, 647, 670, 763, 772, 793, 796, 809, 819, 855, 860, 861, 875, 932, 933, 1002, 1007], "representationwarn": 930, "reprint": 81, "reproduc": [55, 79, 106, 107], "reproduct": 791, "request": [132, 281, 572, 587, 625, 635, 648, 661, 806, 813, 825, 836, 891, 965, 1002], "requir": [17, 79, 85, 86, 95, 106, 107, 125, 128, 129, 132, 135, 139, 142, 143, 230, 270, 283, 345, 358, 359, 520, 611, 613, 637, 665, 671, 761, 781, 789, 796, 809, 818, 883, 889, 923, 943, 967, 1002, 1004, 1009], "rerun": 665, "res_metadata": 807, "res_tabl": [807, 808], "res_tre": 808, "resampl": 849, "research": [1, 143, 665, 782], "resembl": 132, "reserv": [139, 141], "reset": [46, 49, 57], "reset_index": [46, 49], "reshap": [825, 830], "resid": 761, "residu": [48, 113, 130, 784], "resolv": [109, 112, 141, 671], "resourc": [95, 141, 143, 184], "respect": [1, 29, 73, 132, 135, 138, 141, 143, 155, 156, 157, 175, 176, 178, 180, 182, 184, 270, 316, 386, 437, 491, 523, 544, 572, 577, 579, 587, 595, 610, 625, 628, 635, 648, 652, 659, 661, 671, 762, 763, 807, 808, 829, 830, 831, 850], "respons": [56, 60, 123, 124, 231, 233, 285, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 694, 727, 738, 762, 774, 775, 777, 784, 844, 859, 918, 939], "restrict": [36, 79, 106, 107, 139, 234, 270, 1004], "result": [1, 3, 17, 18, 48, 50, 55, 61, 62, 63, 79, 80, 84, 104, 106, 107, 108, 112, 127, 128, 132, 141, 144, 184, 227, 282, 284, 289, 306, 307, 310, 340, 342, 377, 380, 408, 411, 428, 431, 461, 464, 481, 482, 485, 515, 518, 540, 559, 595, 600, 603, 604, 607, 652, 663, 665, 666, 667, 668, 669, 672, 683, 684, 694, 695, 705, 716, 717, 727, 728, 738, 739, 749, 760, 761, 763, 772, 773, 776, 777, 782, 784, 787, 792, 809, 810, 831, 834, 842, 849, 853, 855, 894, 910, 924, 932, 933, 940, 941, 945, 1002, 1004, 1009], "result_constructor": 941, "retain": [55, 197, 244, 262, 279, 280, 307, 339, 377, 406, 428, 458, 482, 514, 540, 558, 575, 627, 651, 761, 809, 858], "retriev": [198, 200, 245, 247, 263, 265, 270, 281, 282, 523, 637, 819, 823, 825], "return": [0, 1, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 38, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 53, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 123, 127, 135, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 231, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 420, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 532, 534, 535, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 671, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 710, 711, 712, 713, 714, 715, 716, 718, 719, 721, 722, 723, 724, 725, 726, 729, 730, 732, 733, 734, 735, 736, 737, 740, 741, 743, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 795, 796, 798, 800, 801, 802, 807, 808, 809, 811, 812, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 868, 869, 871, 873, 874, 875, 876, 877, 879, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 909, 910, 911, 912, 913, 918, 919, 921, 922, 923, 924, 926, 927, 928, 930, 932, 933, 934, 936, 937, 938, 940, 941, 946, 947, 949, 950, 951, 953, 954, 955, 956, 957, 960, 964, 965, 966, 969, 970, 972, 973, 974, 975, 976, 977, 981, 982, 984, 985, 986, 987, 988, 989, 990, 992, 993, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1009], "return_cod": [342, 408, 461, 518, 559], "reus": [17, 786], "rev": 925, "reveal": [762, 941], "revers": [44, 54, 58, 144, 304, 306, 328, 340, 346, 358, 359, 375, 426, 479, 481, 503, 515, 516, 521, 538, 663, 667, 847, 925, 1004, 1009], "reverse_compl": [306, 328, 481, 503, 1004], "reverse_transcrib": 345, "review": 881, "revisit": 610, "rf": [346, 359, 521], "rfam": 142, "rho": 664, "riboswitch": [134, 205], "rice": 133, "rich": [1, 69, 73, 79, 87, 90, 95, 102], "rich_sparse_otu_table_hdf5": 819, "right": [55, 70, 98, 137, 284, 592, 593, 594, 598, 603, 607, 608, 609, 610, 903, 944, 945, 1009], "right_child_id": 932, "rightarrow": [593, 594, 598, 599, 601, 602], "risk": 791, "rl": [131, 142], "rm": [142, 673, 739], "rn": [131, 142], "rna": [0, 29, 34, 62, 65, 67, 129, 131, 132, 133, 134, 139, 140, 142, 289, 307, 344, 345, 346, 348, 358, 359, 360, 377, 428, 523, 540, 600, 1004], "rna_seq": [131, 134], "robinson": 884, "robust": [95, 141, 606, 612, 667, 671], "role": [142, 561, 790], "rome": 81, "root": [1, 79, 90, 95, 106, 107, 137, 143, 611, 862, 863, 876, 877, 878, 879, 881, 882, 883, 887, 890, 891, 892, 893, 896, 897, 899, 901, 905, 907, 909, 910, 917, 922, 923, 926, 928, 930, 932, 933, 935, 937, 938, 940, 941, 1007], "root_at": [923, 937, 938], "root_at_midpoint": [922, 941], "rosid": 131, "roughli": 91, "round": [79, 84, 91, 106, 107, 665, 787, 790, 791, 891], "roundtrip": [126, 130], "roundtripp": [202, 249, 267, 270, 286], "routin": 637, "row": [1, 29, 104, 108, 109, 112, 113, 125, 126, 130, 139, 205, 270, 561, 565, 580, 594, 595, 597, 600, 601, 602, 604, 605, 607, 608, 609, 610, 613, 614, 618, 629, 641, 653, 654, 659, 663, 664, 665, 666, 667, 668, 669, 671, 763, 776, 777, 780, 784, 790, 791, 796, 803, 814, 819, 820, 825, 829, 830, 831, 845, 846, 853, 855, 944], "rozan": 610, "rp": 131, "rpd": 95, "rpd_": 95, "rrna": [1, 600], "rt": [131, 142], "rtol": 944, "rubbbbrbcefgh": 140, "rule": [70, 132, 139, 141, 142, 940], "run": [1, 79, 104, 106, 107, 108, 133, 140, 141, 314, 384, 435, 489, 595, 663, 664, 665, 667, 668, 671, 683, 705, 716, 749, 760, 773, 1004, 1009], "run_numb": 140, "runtim": [132, 289, 411, 464, 967, 1009], "runtimeerror": 80, "rvrywstlnepwvfsnsgyalgtnapgrcsasnvakpgdsgtgpyivthnqi": 131, "rvsrv": 142, "rx": 131, "rykmbdhvn": [318, 319, 493, 494], "s1": [0, 1, 77, 289, 291, 307, 308, 312, 327, 328, 333, 334, 335, 336, 362, 377, 378, 382, 395, 400, 401, 402, 403, 411, 413, 428, 429, 433, 447, 452, 453, 454, 455, 464, 466, 482, 483, 487, 502, 503, 508, 509, 510, 511, 523, 525, 540, 541, 542, 548, 553, 554, 555, 556, 595, 600, 663, 667, 806, 807, 808, 810, 812, 813, 816, 817, 823, 824, 825, 826, 827, 829, 831, 834, 835, 840, 841, 842, 843, 845, 847, 848, 849, 850, 852, 855, 856, 858], "s12064": [606, 612], "s2": [0, 1, 307, 312, 377, 382, 428, 433, 482, 487, 540, 542, 595, 600, 663, 667, 806, 807, 808, 810, 813, 816, 817, 823, 824, 825, 826, 827, 829, 831, 834, 835, 840, 841, 842, 843, 845, 847, 848, 849, 850, 852, 855, 856, 858], "s3": [595, 600, 663, 667, 806, 807, 808, 810, 816, 817, 824, 825, 826, 827, 831, 834, 835, 841, 842, 843, 845, 847, 848, 849, 850, 852, 855, 856, 858], "s4": [595, 600, 663, 667, 807, 808, 810, 816, 825], "s46826": 131, "s5": [595, 600, 663, 667, 810, 825], "s6": [595, 600, 667, 810], "s7": [667, 810], "s8": 810, "s9": 810, "s_": [1, 70, 72, 73, 91, 102], "s_i": 610, "s_max": 91, "sa": 142, "sacc": [127, 128], "saccver": [127, 128], "safe": [1, 79, 104, 106, 107, 108, 141, 782, 792, 879], "safe_char": 137, "saga": [215, 227, 523], "sagb": [215, 227], "sagc": 215, "sai": [205, 215, 791], "saitou": 941, "sallacc": [127, 128], "sallgi": [127, 128], "sallseqid": [127, 128], "salltitl": [127, 128], "salmo": [132, 139], "salvemini": 81, "sam_id": 830, "same": [1, 29, 47, 48, 49, 51, 55, 57, 75, 79, 84, 95, 96, 100, 106, 107, 130, 132, 133, 134, 135, 137, 140, 142, 144, 197, 218, 232, 234, 244, 262, 279, 280, 284, 294, 296, 303, 306, 307, 310, 312, 313, 329, 333, 334, 335, 336, 340, 341, 345, 348, 349, 358, 365, 367, 374, 377, 380, 382, 383, 396, 400, 401, 402, 403, 407, 416, 418, 425, 428, 431, 433, 434, 448, 452, 453, 454, 455, 460, 469, 471, 478, 481, 482, 485, 487, 488, 504, 508, 509, 510, 511, 515, 517, 520, 523, 528, 530, 537, 540, 542, 549, 553, 554, 555, 556, 563, 565, 573, 574, 575, 577, 586, 590, 591, 595, 600, 616, 618, 626, 627, 628, 634, 639, 641, 650, 651, 652, 654, 660, 663, 664, 665, 666, 667, 668, 671, 761, 776, 777, 781, 782, 784, 790, 791, 792, 796, 809, 817, 840, 856, 895, 925, 940, 944, 1004, 1007], "samp_id": [823, 825], "sampl": [1, 70, 71, 72, 75, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 112, 125, 126, 141, 270, 592, 595, 600, 614, 663, 664, 666, 667, 673, 706, 739, 750, 761, 763, 772, 773, 776, 777, 782, 783, 784, 787, 789, 790, 791, 804, 805, 806, 807, 808, 809, 810, 812, 813, 816, 817, 818, 819, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 886, 945, 1001, 1005], "sample1": [814, 820], "sample2": [814, 820], "sample3": 820, "sample4": 820, "sample5": 820, "sample6": 820, "sample_constraint": 763, "sample_count": [790, 791], "sample_gen": 830, "sample_group_metadata": 793, "sample_id": [793, 830, 838, 843], "sample_index": 793, "sample_map": 821, "sample_md": 1, "sample_metadata": [141, 285, 288, 793, 813], "sample_metadata_f": 834, "sample_nam": 141, "sample_typ": [817, 842], "samplea": 761, "sampleb": 761, "samplec": 761, "sampleid": [141, 818], "samplemetadata": 141, "samplerecord": 134, "sanger": 133, "sapien": 132, "sapiensaccggttggc": 139, "satisfi": [144, 230, 789, 990], "save": [17, 215, 270, 283, 614, 694, 727, 738, 914], "sb": 61, "sbc": 142, "sbjct": 128, "sbjctframe": 128, "sblastnam": [127, 128], "sbp": 610, "scalar": [74, 98, 342, 408, 461, 518, 559, 561, 565, 603, 609, 613, 618, 641, 773, 833, 837], "scale": [77, 664, 776, 777, 778, 784], "scale_i": 784, "scandinavian": 73, "scatter": 773, "scatterplot": [763, 773], "scenario": 595, "scheme": [143, 184, 199, 203, 204, 246, 250, 251, 264, 268, 269, 270, 283, 287, 581, 630, 655], "schmidt": [601, 602], "schneider": 48, "schoch": 143, "school": 131, "schwartz": 573, "sci": [63, 66, 128, 610], "scienc": [71, 72, 79, 129, 132, 573, 777], "sciencedirect": 129, "scientif": [127, 141, 637, 762], "sciki": 132, "scikit": [0, 1, 52, 53, 56, 60, 61, 64, 67, 68, 79, 106, 107, 108, 109, 110, 111, 112, 123, 124, 126, 127, 128, 129, 131, 132, 133, 137, 138, 139, 140, 142, 143, 231, 233, 285, 288, 324, 326, 338, 345, 346, 347, 348, 358, 359, 392, 394, 405, 410, 443, 445, 457, 463, 499, 501, 513, 520, 521, 522, 546, 547, 557, 560, 582, 588, 589, 631, 636, 656, 662, 762, 774, 775, 844, 849, 859, 918, 939, 942, 1004, 1008], "scipi": [1, 80, 105, 108, 111, 583, 590, 595, 600, 611, 614, 632, 637, 649, 657, 659, 664, 665, 667, 671, 782, 787, 790, 791, 812, 843, 853, 898], "scomnam": [127, 128], "scope": [79, 1009], "score": [0, 17, 48, 61, 62, 63, 64, 65, 66, 67, 68, 74, 127, 128, 132, 134, 135, 140, 523, 561, 576, 579, 763, 784, 1004], "score_filt": 17, "score_onli": 17, "score_s": 17, "sdbl": 891, "sdr": [84, 89], "sdrhelp": 84, "se": 142, "sea": 71, "search": [31, 61, 127, 128, 132, 198, 230, 245, 263, 282, 314, 327, 384, 395, 435, 447, 489, 502, 548, 562, 615, 638, 777, 812, 824, 827, 835, 858, 889, 894, 895, 896, 897, 964, 1004], "sec": 411, "second": [1, 17, 61, 62, 63, 64, 65, 66, 67, 130, 133, 139, 144, 157, 205, 227, 349, 565, 595, 618, 641, 791, 900, 903, 933, 1002, 1009], "secondari": [791, 820], "section": [55, 132, 133, 138, 141, 142, 270, 348, 523, 664, 665, 776, 777], "sediment": 71, "see": [1, 54, 55, 56, 60, 67, 79, 95, 104, 106, 107, 108, 109, 111, 112, 123, 124, 128, 131, 132, 133, 137, 139, 140, 141, 143, 144, 187, 231, 233, 234, 252, 270, 285, 288, 312, 338, 347, 348, 359, 382, 405, 410, 433, 457, 463, 487, 513, 522, 523, 542, 557, 560, 565, 582, 588, 601, 602, 618, 631, 636, 641, 656, 662, 663, 664, 665, 666, 667, 668, 671, 762, 773, 774, 775, 782, 784, 786, 787, 791, 793, 799, 834, 844, 849, 859, 860, 918, 939, 1002, 1003, 1009], "seed": [600, 663, 667, 761, 787, 790, 791, 849], "seem": 790, "seen": [131, 134, 791], "segment": 81, "select": [75, 95, 141, 600, 667, 789, 790, 849, 925], "selenocystein": 411, "self": [4, 5, 6, 8, 9, 10, 11, 12, 14, 19, 20, 22, 23, 24, 25, 26, 28, 35, 38, 40, 42, 114, 115, 117, 118, 119, 120, 121, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 162, 163, 164, 165, 166, 167, 179, 180, 181, 182, 189, 191, 192, 193, 195, 207, 209, 210, 211, 213, 215, 219, 221, 222, 223, 225, 229, 236, 238, 239, 240, 242, 254, 256, 257, 258, 260, 272, 274, 275, 276, 278, 295, 296, 298, 300, 302, 340, 350, 352, 353, 354, 366, 367, 369, 371, 373, 417, 418, 420, 422, 424, 470, 471, 473, 475, 477, 515, 529, 530, 532, 534, 536, 563, 564, 567, 568, 569, 570, 572, 574, 586, 587, 616, 617, 620, 621, 622, 623, 625, 626, 634, 635, 639, 640, 643, 644, 645, 646, 648, 650, 660, 661, 674, 675, 677, 678, 679, 680, 681, 682, 685, 686, 688, 689, 690, 691, 692, 693, 696, 697, 699, 700, 701, 702, 703, 704, 707, 708, 710, 711, 712, 713, 714, 715, 718, 719, 721, 722, 723, 724, 725, 726, 729, 730, 732, 733, 734, 735, 736, 737, 740, 741, 743, 744, 745, 746, 747, 748, 751, 752, 754, 755, 756, 757, 758, 759, 764, 765, 767, 768, 769, 770, 771, 795, 798, 800, 801, 802, 803, 806, 810, 814, 825, 831, 833, 834, 837, 846, 849, 855, 858, 862, 863, 864, 865, 868, 869, 871, 873, 874, 875, 876, 877, 878, 880, 881, 884, 885, 886, 887, 890, 891, 892, 893, 910, 911, 912, 913, 919, 920, 921, 926, 927, 928, 931, 932, 933, 934, 935, 937, 938, 949, 950, 953, 954, 955, 956, 957, 960, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 981, 982, 984, 985, 986, 987, 988, 989, 992, 993, 995, 996, 997, 998, 999, 1000, 1007, 1009], "self_aft": 934, "self_befor": 934, "semi": 137, "semicolon": [132, 135], "semimetr": 782, "send": [127, 128], "sens": [777, 791, 933, 941], "sensit": [132, 141, 332, 399, 451, 507, 552], "sep": 131, "separ": [1, 127, 128, 132, 133, 135, 136, 137, 138, 139, 141, 667, 777, 818, 821], "seq": [0, 29, 39, 44, 50, 52, 53, 57, 58, 59, 61, 62, 63, 64, 65, 66, 127, 128, 129, 132, 133, 135, 139, 140, 292, 293, 306, 313, 316, 324, 326, 339, 340, 342, 343, 346, 359, 360, 363, 364, 383, 386, 392, 394, 406, 408, 409, 414, 415, 434, 437, 443, 445, 458, 461, 462, 467, 468, 481, 488, 491, 499, 501, 514, 515, 518, 519, 521, 523, 526, 527, 544, 546, 547, 558, 559, 600, 761, 1009], "seq1": [0, 29, 46, 49, 57, 61, 62, 63, 64, 65, 66, 129, 132, 133, 139, 142, 590, 591], "seq2": [0, 29, 46, 49, 57, 61, 62, 63, 64, 65, 66, 132, 133, 142, 590, 591], "seq3": [29, 49, 132, 139], "seq4": 132, "seq5": 132, "seq_1": 135, "seq_2": 135, "seq_gener": [313, 383, 434, 488], "seq_id": 135, "seq_num": [132, 133, 134, 135, 140], "seqid": 135, "seqr": 134, "sequenc": [1, 17, 29, 30, 32, 33, 34, 39, 41, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 113, 122, 127, 128, 129, 130, 131, 133, 134, 135, 140, 143, 205, 215, 227, 600, 614, 669, 761, 791, 1001, 1002, 1009], "sequence1": 67, "sequence2": 67, "sequenceprocessor": 1009, "sequenti": [103, 130, 132, 133, 139, 610, 611, 773, 935], "ser": 411, "seri": [1, 58, 104, 135, 187, 199, 204, 234, 246, 251, 252, 264, 269, 595, 600, 659, 663, 664, 666, 667, 672, 763, 787], "serial": [136, 270, 613, 763, 1002], "serin": 411, "serv": [0, 143, 762, 773], "server": [61, 62, 63, 64, 65, 66, 143], "set": [16, 17, 47, 50, 54, 55, 79, 95, 106, 107, 112, 132, 134, 136, 139, 145, 184, 198, 215, 228, 245, 263, 282, 284, 289, 307, 316, 329, 332, 342, 360, 377, 386, 396, 399, 408, 411, 428, 437, 448, 451, 461, 464, 482, 491, 504, 507, 518, 523, 540, 544, 549, 552, 559, 573, 581, 587, 592, 604, 630, 635, 655, 661, 671, 761, 782, 784, 787, 789, 790, 791, 809, 810, 817, 849, 851, 862, 863, 878, 880, 883, 887, 890, 891, 893, 913, 927, 928, 940, 947, 958, 959, 964, 1004, 1009], "set1": 773, "set_index": 899, "setter": 214, "setup": 1009, "seven": 595, "sever": [79, 137, 139, 787], "sex": [789, 790], "sffaaa": 133, "sfprgfifgagssayqfegavneggrgpsiwdtfthkypekirdgsnaditv": 131, "sframe": [127, 128], "sg": [346, 359, 521], "sgc": [358, 359], "sgi": [127, 128], "shallow": [29, 32, 215, 216, 292, 363, 414, 467, 523, 526], "shannon": [48, 83, 96], "shannon_entropi": 48, "shape": [41, 50, 125, 138, 563, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 616, 639, 665, 778, 781, 792, 793, 819, 820, 853, 860], "share": [17, 52, 53, 55, 70, 284, 307, 324, 326, 377, 392, 394, 428, 443, 445, 482, 499, 501, 523, 540, 546, 547, 762, 1007], "shear": 917, "sheet": 141, "shift": 227, "short": 1009, "short_cicruit": 968, "short_circuit": 967, "short_method_nam": [763, 945], "shorter": 139, "should": [1, 17, 48, 68, 75, 79, 80, 91, 95, 102, 104, 105, 106, 107, 108, 127, 134, 138, 141, 143, 144, 155, 156, 157, 197, 215, 244, 262, 270, 280, 289, 312, 329, 330, 331, 341, 348, 382, 396, 397, 398, 407, 411, 433, 448, 449, 450, 460, 464, 487, 504, 505, 506, 517, 542, 549, 550, 551, 591, 593, 594, 595, 606, 612, 649, 665, 667, 671, 761, 776, 777, 782, 783, 784, 787, 790, 791, 804, 805, 814, 849, 855, 858, 899, 920], "shouldn": 777, "show": [1, 215, 787, 1007], "show_intern": 879, "shown": [205, 595, 776], "shrink": 600, "shtml": 132, "shuffl": 886, "shuffle_f": [886, 925], "shuffled_tre": 925, "shuffler": 925, "sibl": [137, 307, 377, 428, 482, 540], "side": [95, 665, 668, 671], "sigh": 1001, "sign": [141, 595, 945], "signatur": [109, 185, 809, 819, 853], "signific": [1, 141, 595, 600, 663, 665, 666, 667, 668, 671, 790, 791], "significance_test": 595, "significantli": [1, 54, 595, 663, 666, 667], "silent": [79, 106, 107, 825], "silpl": 358, "simd": [17, 67], "similar": [61, 62, 63, 64, 65, 66, 105, 128, 131, 132, 133, 136, 139, 141, 144, 523, 561, 663, 664, 665, 666, 667, 762, 777, 782, 784, 790, 791, 1004, 1007], "similarli": [0, 1, 132, 1004], "simpl": [127, 128, 132, 133, 137, 141, 142, 144, 169, 179, 607, 664, 671, 1002, 1007], "simpler": 0, "simplex": [593, 601, 602, 610], "simpli": [48, 55, 102, 144, 348, 583, 632, 657, 782, 787, 894, 1009], "simplifi": 81, "simpson": [75, 100], "simul": [592, 787, 790, 791], "sinc": [1, 29, 46, 49, 58, 81, 131, 132, 134, 139, 141, 143, 206, 316, 358, 386, 437, 491, 523, 544, 595, 665, 787, 791, 934, 947, 1009], "singl": [1, 29, 46, 49, 57, 79, 85, 86, 94, 106, 107, 109, 131, 132, 133, 134, 137, 139, 140, 141, 142, 187, 202, 205, 215, 227, 234, 249, 252, 267, 270, 286, 296, 299, 304, 316, 329, 343, 367, 370, 375, 386, 396, 409, 418, 421, 426, 437, 448, 462, 471, 474, 479, 491, 504, 519, 530, 533, 538, 544, 549, 595, 610, 671, 788, 809, 810, 819, 834, 882, 990, 1002, 1007, 1009], "singleton": [1, 70, 73, 74, 78, 80, 82, 94, 97, 101, 144], "singular": [1, 786, 917, 990], "sinica": 70, "site": [1, 134, 138, 329, 396, 448, 504, 549, 762, 763, 773, 782], "site0": 138, "site1": [138, 762], "site10": 762, "site2": [138, 762], "site3": [138, 762], "site4": [138, 762], "site5": [138, 762], "site6": [138, 762], "site7": [138, 762], "site8": [138, 762], "site9": [138, 762], "sitemap": 134, "situat": [1, 773, 789], "six": [138, 346, 359, 521, 595], "size": [41, 77, 600, 663, 664, 665, 667, 750, 761, 773, 781, 787, 789, 790, 791, 809, 819, 853, 966], "sk": [141, 202, 249, 267, 286], "skbio": [141, 1001], "skin": [1, 773], "skip": [329, 396, 448, 504, 549, 663, 665, 666, 667, 671, 819], "skip_subregion": 135, "sklearn": 108, "slen": [127, 128], "slice": [36, 296, 314, 315, 329, 339, 367, 384, 385, 396, 406, 418, 435, 436, 448, 458, 471, 489, 490, 504, 514, 530, 543, 549, 558, 565, 613, 618, 641, 796, 866, 1004], "slightli": [61, 84, 667], "slope": 84, "slow": [1, 79, 104, 106, 107, 108], "slower": [0, 942], "sm": [342, 408, 461, 518, 559], "small": [1, 136, 142, 592, 604, 605, 784], "smaller": [102, 329, 396, 448, 504, 549, 668], "smallest": [103, 139, 790, 791, 843], "smith": [0, 17, 64, 65, 66, 67, 671], "snif": 1002, "sniffer": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 171, 176, 177, 180, 181, 1002], "so": [1, 3, 48, 61, 62, 63, 64, 65, 66, 68, 79, 104, 106, 107, 108, 132, 137, 141, 144, 184, 185, 215, 218, 318, 319, 493, 494, 665, 739, 762, 776, 777, 778, 782, 784, 787, 789, 790, 791, 851, 940, 1002, 1007, 1009], "sob": [1, 92, 93, 94], "societi": 95, "softwar": [1, 132, 133, 141, 854, 1001], "sole": [141, 279], "solexa": 133, "solut": 80, "solv": [80, 787], "some": [1, 17, 69, 79, 81, 91, 95, 113, 132, 134, 137, 140, 141, 155, 156, 157, 205, 229, 289, 411, 464, 594, 607, 608, 609, 777, 787, 790, 967, 1007, 1009], "someformat": 1002, "someskbioclass": [144, 1002], "someth": [56, 60, 123, 124, 144, 156, 176, 177, 178, 180, 181, 182, 231, 233, 285, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 669, 774, 775, 814, 844, 859, 918, 939, 1009], "sometim": [75, 132, 134, 141, 777, 1002], "somewhat": [671, 914], "sonnhamm": 142, "soppos": 131, "sort": [50, 55, 110, 111, 206, 215, 218, 313, 316, 342, 383, 386, 408, 434, 437, 461, 488, 491, 518, 544, 559, 706, 739, 761, 809, 848, 849, 927, 932, 933, 940, 1004, 1009], "sort_categori": [672, 673, 695, 706, 739], "sort_f": 847, "sort_index": 58, "sorted_t": 848, "sourc": [29, 30, 31, 32, 33, 34, 36, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 122, 123, 124, 131, 132, 134, 135, 145, 155, 156, 157, 158, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 212, 214, 215, 216, 217, 218, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 683, 684, 694, 695, 705, 706, 716, 717, 727, 728, 738, 739, 749, 750, 760, 761, 763, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 796, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 870, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 951, 958, 964, 965, 966, 967, 968, 978, 979, 980, 990, 991, 1001], "space": [1, 132, 137, 139, 141, 142, 215, 218, 227, 592, 593, 594, 598, 599, 601, 602, 706, 762, 763, 773, 776, 783, 809], "spaitial": 667, "span": [79, 95, 109, 132, 134, 137, 205, 230, 809], "spars": [126, 601, 602, 611, 776, 784, 793, 796, 812, 819, 829, 830, 831, 851, 853], "sparse_vector": 809, "sparsedatafram": 852, "spatial": [1, 105, 108, 111, 583, 590, 614, 632, 637, 649, 657, 659, 667], "spearman": [1, 664, 665, 668], "spearmanr": [664, 665], "spec": 270, "specfi": 1009, "speci": [1, 70, 79, 82, 84, 89, 95, 102, 103, 138, 143, 600, 607, 762, 777, 782, 784, 861], "special": [17, 136, 144, 819, 853], "speciat": 671, "specie1": 762, "specie2": 762, "specie3": 762, "specie4": 762, "specie5": 762, "specie6": 762, "specie7": 762, "specie8": 762, "specie9": 762, "species0": 138, "species1": 138, "species2": 138, "species3": 138, "species4": 138, "species5": 138, "species6": 138, "species7": 138, "species8": 138, "species_a": 881, "speciesa": 881, "specif": [74, 79, 84, 104, 106, 107, 108, 109, 112, 144, 230, 234, 523, 671, 683, 705, 706, 716, 749, 760, 790, 791, 796, 809, 819, 853, 925, 1002, 1008, 1009], "specifi": [51, 55, 95, 112, 113, 127, 129, 130, 132, 133, 134, 135, 136, 139, 142, 143, 144, 175, 184, 205, 215, 228, 230, 282, 283, 289, 296, 314, 316, 332, 345, 357, 358, 360, 367, 384, 386, 399, 411, 418, 435, 437, 451, 464, 471, 489, 491, 507, 520, 523, 530, 544, 552, 562, 565, 572, 575, 580, 581, 587, 593, 594, 595, 600, 601, 602, 604, 605, 611, 615, 618, 625, 627, 629, 630, 635, 638, 641, 648, 651, 653, 655, 661, 663, 664, 665, 666, 667, 671, 750, 773, 781, 782, 788, 796, 806, 809, 819, 823, 825, 846, 853, 883, 891, 922, 925, 927, 930, 933, 940, 967, 979, 980, 990, 1009], "speed": [215, 782], "spermatophyta": 131, "sphingobacteria": [900, 933], "split": [132, 133, 139, 142], "spmatrix": [796, 812], "spreadsheet": [136, 141], "sqcup": [79, 95], "sqlite": 282, "sqrt": [78, 88, 89, 90, 610, 784], "squar": [90, 91, 108, 137, 561, 614, 637, 779], "squareform": [614, 659], "sr1": 348, "srava": 142, "ss": [142, 849], "ss_con": 142, "sscinam": [127, 128], "sseq": [127, 128], "sseqid": [127, 128], "sskingdom": [127, 128], "sstart": [127, 128], "sstrand": [127, 128], "ssw": [3, 17, 67], "stabl": [572, 587, 625, 635, 648, 661, 880], "stack": 914, "stackoverflow": 966, "stai": 141, "stale": 215, "stamataki": 881, "stand": [319, 494, 665], "standalon": 132, "standard": [132, 133, 135, 137, 141, 342, 345, 346, 348, 358, 359, 408, 461, 518, 520, 521, 559, 565, 592, 595, 618, 641, 664, 665, 778, 781, 784, 785, 1002, 1004], "standardis": 77, "staphylococcu": 806, "start": [0, 15, 16, 17, 29, 46, 49, 57, 61, 62, 63, 64, 65, 66, 67, 113, 127, 128, 131, 134, 135, 136, 137, 139, 142, 143, 205, 226, 232, 308, 327, 348, 349, 355, 358, 359, 378, 395, 429, 447, 483, 502, 541, 548, 614, 668, 669, 787, 790, 791, 829, 1009], "start_end_posit": 0, "stat": [0, 1, 29, 46, 47, 49, 54, 55, 58, 91, 97, 125, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 289, 296, 306, 307, 310, 313, 340, 344, 345, 346, 348, 358, 359, 360, 367, 377, 380, 383, 411, 418, 428, 431, 434, 464, 471, 481, 482, 485, 488, 515, 516, 520, 521, 523, 530, 540, 561, 572, 581, 587, 589, 843, 1001, 1004], "state": [95, 129, 139, 141, 184, 967, 968, 978, 990, 1009], "static": [360, 818, 821], "statis": [663, 666], "statist": [1, 70, 73, 78, 84, 91, 593, 595, 600, 663, 665, 666, 667, 668, 671, 762, 776, 777, 781, 787, 790, 791, 1001], "statistica": [70, 81], "statsmodel": 787, "statu": [789, 790], "staxid": [127, 128], "std": [131, 781, 785, 790], "steel": 941, "steep": 776, "step": [1, 29, 46, 49, 57, 79, 104, 106, 107, 108, 139, 144, 780, 787], "still": [137, 138, 184, 214, 595, 600, 604, 665, 667], "stimat": 785, "stitl": [127, 128], "stockholm": [56, 60], "stockholm_format": 142, "stombaugh": [106, 107], "stool": 791, "stop": [29, 46, 49, 57, 70, 130, 139, 308, 327, 345, 346, 348, 358, 359, 378, 395, 411, 429, 446, 447, 483, 502, 520, 521, 541, 548, 793, 860, 881, 968, 1004], "storag": [215, 851], "store": [2, 29, 39, 44, 52, 53, 54, 113, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 205, 215, 270, 287, 289, 324, 326, 360, 392, 394, 411, 443, 445, 464, 499, 501, 523, 546, 547, 583, 613, 614, 632, 637, 657, 668, 684, 717, 728, 763, 776, 777, 782, 784, 809, 819, 853, 861, 1003, 1004], "str": [14, 18, 28, 34, 39, 44, 56, 60, 68, 104, 108, 109, 110, 111, 112, 113, 123, 124, 127, 134, 135, 142, 145, 154, 167, 170, 171, 172, 176, 177, 178, 180, 181, 182, 184, 195, 197, 200, 202, 213, 225, 231, 233, 242, 244, 247, 249, 260, 262, 265, 267, 270, 278, 279, 280, 281, 282, 283, 285, 286, 288, 289, 291, 299, 304, 305, 308, 312, 313, 314, 315, 316, 327, 328, 330, 332, 333, 334, 335, 336, 338, 339, 341, 342, 347, 348, 356, 362, 370, 375, 376, 378, 382, 383, 384, 385, 386, 395, 397, 399, 400, 401, 402, 403, 405, 406, 407, 408, 410, 411, 413, 421, 426, 427, 429, 433, 434, 435, 436, 437, 447, 449, 451, 452, 453, 454, 455, 457, 458, 460, 461, 463, 464, 466, 474, 479, 480, 483, 487, 488, 489, 490, 491, 502, 503, 505, 507, 508, 509, 510, 511, 513, 514, 517, 518, 522, 523, 525, 533, 538, 539, 541, 542, 543, 544, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 565, 571, 572, 573, 575, 578, 580, 581, 582, 587, 588, 595, 600, 606, 611, 614, 615, 618, 624, 625, 627, 629, 630, 631, 635, 636, 638, 641, 647, 648, 651, 653, 655, 656, 661, 662, 663, 664, 666, 667, 668, 669, 682, 684, 693, 704, 706, 715, 717, 726, 728, 737, 748, 759, 763, 772, 773, 774, 775, 782, 789, 790, 803, 806, 809, 812, 813, 814, 816, 818, 819, 823, 827, 835, 843, 844, 851, 853, 854, 855, 859, 861, 875, 879, 883, 894, 895, 907, 909, 918, 922, 924, 928, 930, 939, 940, 941, 946, 960, 965, 977, 989, 1000], "straight": 1, "straightforward": [141, 1004], "strand": [127, 128, 134, 135, 142, 205, 344, 345, 346, 516], "stranded": 134, "strategi": [592, 604, 941], "stream": [132, 135, 1002], "strength": 1, "streptophyta": 131, "strict": [55, 139, 307, 377, 428, 482, 540, 575, 627, 651, 665, 668, 671, 809, 858], "strict_match": [789, 790], "stricter": [137, 944], "strictli": [132, 595, 600, 611, 882], "string": [1, 17, 45, 104, 108, 109, 112, 122, 125, 129, 130, 132, 133, 137, 139, 141, 142, 203, 204, 250, 251, 268, 269, 270, 287, 305, 315, 316, 332, 339, 342, 343, 348, 356, 376, 385, 386, 399, 406, 408, 409, 427, 436, 437, 451, 458, 461, 462, 480, 490, 491, 507, 514, 518, 519, 539, 543, 544, 552, 558, 559, 561, 565, 571, 577, 595, 600, 613, 614, 618, 624, 628, 641, 647, 652, 663, 666, 667, 669, 772, 773, 814, 817, 843, 854, 855, 858, 875, 879, 933, 941, 946, 1007], "stringifi": 803, "stringio": [1, 79, 106, 107, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 184, 613, 818, 821, 940, 941, 1002, 1007], "strip": [881, 885, 886], "stripe": [17, 67], "stripedsmithwaterman": [0, 67], "strong": [1, 289, 663, 665, 671], "struct": [3, 134], "structur": [106, 107, 128, 130, 134, 137, 143, 573, 614, 663, 664, 671, 762, 793, 809, 819, 853, 860, 923, 967, 1001], "studi": [1, 79, 141, 270, 592, 595, 762, 776, 784, 791], "style": [592, 937, 938], "su": 142, "sub": [134, 135, 205, 792], "subclass": [55, 129, 132, 139, 142, 144, 234, 307, 377, 428, 482, 523, 540, 561, 613, 614, 669, 940, 967], "subfold": 965, "subject": [1, 127, 128, 141, 1003, 1009], "subject1": 128, "subject2": 128, "sublist": 791, "submit": [131, 132, 791], "submodul": 144, "suboptim": 17, "subsampl": [91, 761, 787, 790, 791, 792, 886, 1001], "subsample_count": [91, 761], "subsample_paired_pow": 791, "subsample_pow": 787, "subseq": [329, 396, 448, 504, 523, 549], "subsequ": [64, 129, 132, 141, 291, 299, 304, 308, 327, 329, 362, 370, 375, 378, 395, 396, 413, 421, 426, 429, 447, 448, 466, 474, 479, 483, 502, 504, 523, 525, 533, 538, 541, 548, 549, 967, 1004], "subset": [79, 95, 106, 107, 112, 125, 131, 664, 819, 825, 849, 885, 891, 1007], "subset_with_metadata": 819, "subsitut": [342, 408, 461, 518, 559], "substitut": [17, 61, 62, 63, 64, 65, 66, 68, 136, 342, 408, 411, 461, 518, 559, 561, 573, 576, 578, 579, 585, 592, 943, 1004], "substitution_matrix": [17, 61, 62, 63, 64, 65, 66], "substitutionmatrix": [68, 342, 408, 461, 518, 559, 1004], "substract": [61, 62, 63, 64, 65, 66, 780], "substrat": 762, "substrate_cor": 762, "substrate_oth": 762, "substrate_sand": 762, "subtili": 142, "subtract": [17, 750], "subtre": [137, 143, 896, 1007], "success": [943, 968, 1009], "success_callback": [968, 1009], "success_f": 1009, "successfulli": 881, "suffix": 69, "suggest": [17, 156, 176, 177, 180, 181, 790], "suit": 777, "sum": [70, 72, 75, 79, 88, 89, 91, 95, 99, 130, 227, 316, 386, 437, 491, 544, 594, 598, 599, 603, 791, 792, 829, 830, 834, 839, 849, 876, 932, 966], "sum_": [77, 79, 81, 95, 98, 592, 594, 607, 608, 609, 665], "summar": 595, "summari": [45, 571, 595, 624, 647, 839], "super": [127, 128], "superkingdom": 143, "superset": [79, 95, 106, 107, 663, 667], "supplement": 77, "supplementari": [133, 595], "suppli": [17, 127, 132, 140, 176, 180, 279, 312, 382, 433, 487, 542, 589, 791, 809, 891], "support": [1, 2, 48, 56, 60, 81, 123, 124, 184, 187, 231, 233, 252, 270, 279, 285, 288, 289, 338, 347, 405, 410, 411, 457, 463, 464, 513, 522, 557, 560, 561, 573, 582, 588, 631, 636, 656, 662, 665, 763, 774, 775, 782, 787, 796, 809, 836, 844, 859, 861, 881, 918, 936, 939, 940, 947, 967, 990, 1001, 1005, 1006, 1007, 1008, 1009], "support_attr": 940, "support_valu": 940, "suppos": [127, 128, 131, 132, 133, 134, 137, 140, 142, 607, 787, 791], "suppress": [143, 663, 667, 668], "suppress_sequ": [17, 67], "sure": [652, 791, 1009], "surpass": 139, "surround": [137, 600], "survei": 1, "sv": 131, "svd": 786, "svg": 763, "sw": [17, 789], "swab": 1, "swiss": 131, "switch": 796, "sy": 185, "symbiont": 671, "symbol": [48, 132], "symmetr": [1, 561, 565, 613, 614, 618, 637, 641, 652, 665, 669, 671, 776, 884], "symmetri": [613, 614, 637, 652, 654], "symptom": 791, "syn": 134, "synonym": [1, 143], "synthesi": 142, "synthet": 134, "system": [56, 60, 87, 98, 123, 124, 141, 143, 144, 215, 231, 233, 285, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 774, 775, 790, 825, 844, 859, 918, 939], "systemat": 95, "t": [1, 17, 29, 46, 48, 49, 50, 54, 55, 59, 67, 79, 81, 95, 104, 106, 107, 108, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 155, 157, 185, 205, 206, 283, 289, 294, 303, 308, 312, 316, 318, 319, 320, 321, 322, 325, 333, 334, 335, 336, 344, 358, 365, 374, 378, 382, 386, 388, 389, 390, 393, 400, 401, 402, 403, 411, 416, 425, 429, 433, 437, 439, 440, 441, 444, 452, 453, 454, 455, 464, 469, 478, 483, 487, 491, 493, 494, 495, 496, 497, 500, 508, 509, 510, 511, 516, 523, 528, 537, 541, 542, 544, 553, 554, 555, 556, 561, 579, 593, 595, 600, 601, 602, 606, 607, 611, 668, 776, 777, 782, 784, 786, 787, 789, 791, 792, 806, 814, 819, 820, 836, 843, 853, 856, 885, 886, 923, 924, 932, 940, 941, 942, 1004, 1008, 1009], "t0": [127, 128, 135, 138, 140, 613], "t1": [127, 128, 138, 140, 143, 613, 818], "t10": [135, 138], "t100": [127, 128], "t10596": 128, "t1217": 128, "t1233": 128, "t131567": 143, "t1566": 128, "t161": 127, "t2": [138, 140, 818, 821], "t2130": 128, "t2214": 128, "t3": [140, 818, 821], "t30": [135, 140], "t329": 127, "t330": 127, "t335928": 143, "t34": 140, "t35": 140, "t3e": [127, 128], "t4": 138, "t42": 128, "t44": 128, "t5": 821, "t50": 135, "t5565": 128, "t5587": 128, "t5671": 128, "t6": 821, "t6821": 128, "t6928": 128, "t6e": 128, "t80": 135, "t811": 128, "t8468": 128, "t8552": 128, "t8e": 128, "t9": 138, "t90": 135, "t94": 128, "t96": 135, "t99": 127, "t9e": 127, "t_a": 834, "t_b": 834, "ta": [613, 1004], "taaactatta": 131, "taaactccgg": 131, "taacaatcct": 131, "taacatatac": 133, "taacgtta": [344, 516], "taagactaaa": 131, "taatgaatgg": 131, "tab": [127, 128, 135, 136, 137, 138, 140, 141, 143, 813, 818, 821, 855], "tabl": [1, 104, 108, 126, 133, 134, 141, 143, 282, 345, 346, 348, 357, 358, 359, 520, 521, 595, 600, 762, 776, 777, 783, 784, 967, 1001, 1003, 1004], "table2": 856, "table3": 856, "table_id": [357, 793, 860], "tableexcept": [793, 845, 858, 860], "tabular": [29, 127, 128, 141, 143, 270], "tabularmsa": [0, 61, 62, 63, 64, 65, 66, 67, 129, 133, 139, 142, 215, 1002], "tac": 140, "tacatcgttt": 131, "tacatgtgta": 131, "taccaggcat": 131, "tacccggt": 1004, "tacctaagtt": 131, "tacg": 140, "tacgta": 140, "tae000111": 128, "tae000171": 128, "tae000174": 128, "tae000425": 128, "tag": [135, 142, 313, 343, 383, 409, 434, 462, 488, 519, 610], "tagagattaattgccactgccaaaattctg": 0, "tagattacag": 131, "taggttgatc": 131, "tagtgaatgg": 131, "take": [1, 108, 139, 144, 155, 156, 157, 234, 312, 339, 382, 406, 433, 458, 487, 514, 542, 558, 577, 595, 628, 637, 652, 664, 665, 739, 776, 784, 787, 788, 804, 805, 814, 834, 847, 855, 856, 941, 967, 1007, 1009], "taken": [1, 127, 128, 132, 139, 142, 143, 595, 671, 966], "target": [0, 1, 17, 67, 78, 135, 572, 587, 625, 635, 648, 661], "target_begin": 3, "target_sequ": [0, 3, 17, 18], "task": [943, 1002], "tata": [315, 385, 436, 490, 543], "tataa": [315, 385, 436, 490, 543], "tatattagca": 131, "tatctaactg": 131, "tatgtatata": 133, "tatgtatatataacatatacatatatacatacata": 133, "tau": 595, "tax": 128, "tax_id": [143, 899], "taxa": [1, 70, 71, 72, 76, 77, 78, 79, 80, 82, 83, 84, 87, 89, 90, 91, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 106, 107, 108, 109, 112, 141, 143, 595, 777, 791, 886, 941], "taxdump": 899, "taxdump_readm": 143, "taxid": 143, "taxon": [1, 70, 71, 72, 75, 77, 79, 88, 89, 95, 98, 99, 103, 106, 107, 131, 134, 793, 860, 899, 1007], "taxonom": [1, 106], "taxonomi": [127, 137, 141, 143, 348, 356, 357, 809, 810, 819, 836, 853, 899, 900, 933], "taxonomy_0": [836, 851], "taxonomy_1": [836, 851], "taylor": 84, "tb": [613, 818, 821], "tc": [613, 818, 821], "tcaaaagaaa": 131, "tcatttagga": 140, "tcc": 0, "tccacaaatg": 131, "tccagaaaaa": 131, "tcg": [343, 409, 462, 519], "tcga": [342, 408, 461, 518, 559], "tcggagcagt": 131, "tcgggcasdgca": 140, "tcgggcattgca": 140, "tcgtatagat": 131, "tctacccctctcagaga": 0, "tctataagattccgcatgcgttacttataagatgtctcaacgg": 0, "tctcaatctc": 131, "tctcaga": 0, "tcttaacata": 131, "tcttcagcat": 131, "tcttgctcat": 131, "tctttgcttc": 131, "tdbl": 891, "technic": [98, 137], "techniqu": [1, 80, 592, 776, 777, 1005], "teh": [793, 860], "tell": 595, "temorg": 128, "temperatur": 790, "tempfil": 184, "temporari": 809, "temporaryfil": 184, "ten": 1, "tend": 141, "ter": [411, 777], "term": [1, 48, 75, 93, 95, 126, 134, 199, 234, 246, 264, 270, 671, 762, 941], "termin": [131, 345, 358, 520, 934], "test": [1, 34, 43, 95, 144, 188, 194, 206, 212, 218, 224, 235, 241, 253, 259, 271, 277, 294, 303, 349, 355, 365, 374, 416, 425, 469, 478, 528, 537, 592, 595, 600, 613, 663, 665, 666, 667, 668, 670, 671, 683, 705, 716, 749, 760, 787, 790, 791, 815, 944, 945, 965, 1001], "test_tabl": [818, 821], "texon": 135, "text": [72, 88, 89, 103, 127, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 155, 156, 157, 184, 270, 613, 694, 727, 738], "textiobas": [145, 155, 156, 157, 184], "textiowrapp": 184, "tf": 64, "tgaaggatca": 131, "tgaattcaac": 131, "tgca": 140, "tgene": 135, "tgenu": 143, "tgetaaafhwqaaf": 140, "tgg": [313, 343, 383, 409, 434, 462, 488, 519], "tggaacaatt": 131, "tggattaaaa": 131, "tggattctgc": 205, "tggtgcacct": 131, "tggtgctgga": 131, "tgi": 127, "tgtaataaat": 131, "th": [72, 88, 89, 103, 610], "than": [0, 1, 17, 47, 48, 70, 79, 84, 86, 102, 106, 107, 132, 137, 139, 142, 177, 181, 215, 270, 289, 290, 291, 294, 308, 312, 316, 327, 328, 329, 330, 331, 333, 334, 335, 336, 346, 359, 361, 362, 365, 378, 382, 386, 395, 396, 397, 398, 400, 401, 402, 403, 411, 412, 413, 416, 429, 433, 437, 447, 448, 449, 450, 452, 453, 454, 455, 464, 465, 466, 469, 483, 487, 491, 502, 503, 504, 505, 506, 508, 509, 510, 511, 521, 524, 525, 528, 541, 542, 544, 548, 549, 550, 551, 553, 554, 555, 556, 561, 591, 592, 595, 597, 600, 613, 654, 663, 665, 666, 667, 671, 761, 776, 777, 790, 791, 792, 825, 830, 849, 882, 899, 912, 941, 946, 1002, 1007], "thei": [0, 1, 39, 44, 48, 54, 70, 104, 108, 127, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 232, 289, 294, 303, 306, 329, 349, 365, 374, 396, 416, 425, 448, 464, 469, 478, 481, 504, 528, 537, 549, 563, 575, 592, 616, 627, 639, 651, 663, 664, 665, 666, 667, 668, 672, 772, 773, 776, 782, 787, 810, 819, 853, 886, 893, 942, 944, 1009], "them": [1, 81, 134, 139, 141, 206, 218, 227, 228, 341, 407, 460, 517, 523, 665, 706, 781, 782, 784, 968], "themselv": [1003, 1004], "theorem": [85, 86], "theoret": [96, 100], "theori": [48, 72, 87, 98, 606, 612], "therebi": 762, "therefor": [1, 46, 49, 55, 75, 79, 95, 99, 106, 107, 112, 141, 270, 561, 595], "thermoplasmata": [900, 933], "theta": [95, 595], "thi": [0, 1, 2, 17, 31, 32, 33, 34, 36, 41, 43, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 79, 80, 81, 84, 85, 86, 91, 94, 95, 104, 105, 106, 107, 108, 109, 111, 112, 113, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 155, 156, 157, 169, 177, 179, 181, 183, 184, 185, 188, 194, 197, 203, 204, 205, 206, 212, 214, 215, 216, 217, 218, 224, 226, 227, 228, 229, 230, 231, 233, 235, 241, 244, 250, 251, 253, 259, 262, 268, 269, 270, 271, 277, 279, 280, 283, 284, 285, 287, 288, 291, 292, 293, 294, 296, 299, 301, 303, 304, 307, 308, 312, 316, 318, 319, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 342, 343, 346, 347, 348, 357, 358, 359, 360, 362, 363, 364, 365, 367, 370, 372, 374, 375, 377, 378, 382, 386, 395, 396, 397, 398, 400, 401, 402, 403, 405, 406, 408, 409, 410, 413, 414, 415, 416, 418, 421, 423, 425, 426, 428, 429, 433, 437, 447, 448, 449, 450, 452, 453, 454, 455, 457, 458, 461, 462, 463, 466, 467, 468, 469, 471, 474, 476, 478, 479, 482, 483, 487, 491, 493, 494, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 518, 519, 521, 522, 523, 525, 526, 527, 528, 530, 533, 535, 537, 538, 540, 541, 542, 544, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 613, 616, 618, 631, 632, 633, 636, 637, 639, 641, 654, 656, 657, 658, 659, 662, 663, 664, 665, 667, 669, 670, 671, 672, 761, 762, 773, 774, 775, 777, 782, 783, 784, 787, 789, 790, 791, 806, 809, 810, 817, 819, 825, 834, 840, 843, 844, 849, 853, 854, 858, 859, 861, 877, 879, 881, 883, 885, 886, 889, 891, 892, 894, 896, 897, 899, 903, 910, 914, 917, 918, 920, 922, 923, 925, 926, 927, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 965, 966, 967, 968, 978, 990, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "thing": 1009, "third": [607, 613, 903, 1009], "those": [1, 105, 141, 270, 284, 671, 761, 776, 791, 829, 891, 925, 930, 941, 967, 1004], "though": [81, 132, 133, 139, 140, 141, 595, 649, 663, 667, 831, 941, 1009], "thought": 667, "thr": 411, "thraustochytrium": 357, "three": [1, 29, 94, 139, 143, 607, 613, 637, 668, 762, 773, 790, 791, 809, 810, 856, 886, 1009], "threonin": 411, "threshold": [70, 944], "through": [1, 36, 61, 62, 63, 130, 141, 169, 175, 179, 565, 618, 641, 782, 894, 1009], "throughout": [1, 136, 348, 357, 790, 1008], "throughput": [79, 106, 107, 132, 133, 600, 773, 790], "thrown": [156, 901], "thu": [1, 132, 133, 137, 141, 197, 244, 262, 280, 316, 386, 437, 491, 523, 544, 565, 618, 637, 641, 663, 665, 667, 671, 782], "thymin": [131, 134, 289, 344, 516], "ti": [47, 71, 843, 940], "tid": 135, "tile": 140, "tile_numb": 140, "till": 143, "time": [1, 17, 46, 49, 79, 91, 100, 106, 107, 109, 132, 133, 141, 561, 601, 602, 610, 649, 663, 664, 665, 666, 668, 672, 695, 750, 784, 787, 790, 791, 796, 809, 840, 849, 861, 925, 1009], "timestamp": 853, "tip": [1, 79, 95, 106, 107, 861, 879, 881, 883, 884, 885, 886, 888, 889, 891, 892, 894, 901, 906, 907, 908, 909, 911, 912, 914, 915, 916, 922, 923, 924, 925, 927, 928, 930, 933, 934, 935, 940, 1002, 1007], "tip_": 926, "tip_a": [892, 921], "tip_count": 912, "tip_d": 892, "tip_list": 929, "tip_nam": 883, "tip_subset": 891, "tip_tip_dist": [892, 901], "tipnam": [907, 909], "tissue_typ": 131, "titl": [1, 127, 128, 134, 142, 581, 630, 655, 773], "tjflkafnkkghvm": 140, "tmgc": 357, "tn": 142, "tno": 143, "to_": [572, 625, 648], "to_data_fram": 659, "to_datafram": [204, 251, 269, 270], "to_delet": 917, "to_dict": 50, "to_hdf5": 819, "to_seri": [203, 250, 268], "toarrai": 611, "tobacco": 791, "togeth": [55, 131, 132, 134, 142, 595, 809, 834, 967], "token": 113, "tol": 786, "toler": [786, 944], "tolosana": [592, 610], "ton": 1, "tongu": 1, "too": [86, 782, 806, 876], "tool": [61, 64, 127, 128, 132, 139, 141, 143, 773, 777], "toolkit": 881, "top": [595, 899], "topolog": 880, "topologi": [883, 917, 1007], "total": [71, 72, 78, 79, 80, 82, 87, 88, 89, 90, 91, 103, 125, 127, 141, 316, 386, 437, 491, 544, 664, 809, 891], "totaldescendingbranch": 891, "toward": 877, "tparent": 135, "tr": 891, "traceback": [127, 139, 358, 523, 665], "tracheophyta": 131, "track": 131, "tracker": [132, 156], "tract": 791, "trail": [132, 133, 136], "trajectori": [672, 673, 683, 684, 694, 695, 705, 706, 716, 717, 727, 728, 738, 739, 749, 750, 760], "trajectory_categori": [672, 673, 695, 706, 739], "trajectory_result": 672, "tranform": 856, "tranpos": 851, "transcrib": [131, 134, 345, 346, 516, 1004], "transcript": 205, "transect": 762, "transform": [155, 157, 329, 396, 448, 504, 549, 592, 593, 594, 598, 599, 601, 602, 606, 611, 776, 782, 784, 796, 821, 843], "translat": [131, 134, 137, 143, 184, 344, 346, 348, 359, 516, 521, 1004], "translate_six_fram": [344, 345, 358, 516, 520], "transloc": 790, "transpar": [141, 184], "transpos": 851, "trapezoid": 81, "trascrib": 131, "traver": 1007, "travers": [862, 863, 883, 887, 890, 894, 897, 908, 911, 914, 915, 916, 931, 937, 938, 1007], "tre361": 131, "treat": [46, 47, 48, 49, 132, 136, 141, 270, 289, 332, 341, 399, 407, 411, 451, 460, 464, 507, 517, 523, 552, 590, 790], "treatment": [234, 595, 600, 672, 790, 807], "treatment_stat": 790, "tree": [1, 79, 95, 106, 107, 137, 142, 143, 215, 611, 808, 824, 1001, 1002], "tree1": [884, 885, 886, 1007], "tree2": [884, 885, 886, 1007], "tree3": 1007, "tree_copi": [862, 863, 887, 890], "tree_copy_nod": [862, 863, 887, 890], "tree_nod": [862, 863, 887, 890], "tree_node_class": 940, "treeerror": [922, 923], "treenod": [1, 79, 95, 106, 107, 137, 611, 808, 940, 941, 1002, 1007], "trg": [313, 343, 383, 409, 434, 462, 488, 519], "tri": 831, "triangl": [637, 652, 659, 665, 782, 831], "triangular": 665, "trifoliea": 131, "trifolium": 131, "trifurc": [79, 106, 107, 137], "trim": 358, "tripleton": 1, "trp": 411, "trubbbbrbcefgh": 140, "true": [1, 15, 16, 17, 30, 31, 32, 33, 34, 46, 47, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 73, 74, 79, 80, 95, 102, 104, 106, 107, 108, 109, 112, 113, 127, 130, 131, 132, 133, 134, 135, 137, 140, 155, 156, 157, 176, 180, 184, 185, 198, 201, 205, 215, 227, 232, 245, 248, 263, 266, 279, 289, 290, 291, 293, 294, 296, 303, 306, 307, 309, 310, 311, 313, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 358, 359, 360, 361, 362, 364, 365, 367, 374, 377, 379, 380, 381, 383, 386, 387, 388, 389, 390, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 415, 416, 418, 425, 428, 430, 431, 432, 434, 437, 438, 439, 440, 441, 443, 444, 445, 446, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 471, 478, 481, 482, 484, 485, 486, 488, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 528, 530, 537, 540, 544, 546, 547, 550, 551, 552, 553, 554, 555, 556, 558, 559, 562, 563, 570, 572, 575, 591, 595, 600, 601, 602, 606, 613, 614, 615, 616, 623, 625, 627, 637, 638, 639, 646, 648, 651, 652, 654, 663, 665, 667, 668, 671, 706, 717, 781, 782, 784, 785, 789, 790, 792, 793, 809, 812, 816, 817, 819, 820, 828, 829, 830, 831, 835, 839, 840, 841, 842, 843, 846, 847, 849, 851, 852, 853, 856, 858, 879, 881, 883, 888, 896, 902, 904, 905, 906, 908, 911, 914, 915, 916, 919, 920, 921, 922, 931, 933, 934, 936, 940, 941, 967, 968, 978, 990, 1004, 1007, 1009], "truncat": [133, 571, 624, 647, 772, 941, 1009], "trust": 133, "truth": [290, 361, 412, 465, 524], "truthi": [290, 361, 412, 465, 524], "try": [791, 792], "tryptophan": [48, 411], "tsuperkingdom": 143, "tsv": [136, 141, 202, 249, 267, 270, 283, 286, 821, 855], "tsv_fh": 821, "tt": [47, 329, 396, 448, 504, 549], "tta": [331, 398, 450, 506, 551], "ttacatatta": 131, "ttacgcttaaac": 132, "ttactattac": 131, "ttactgttcg": 131, "ttagctcatt": 131, "ttattaaaag": 131, "ttattgtagc": 131, "ttattttttt": 131, "ttcaatttgg": 131, "ttcatt": [306, 328, 340, 481, 503, 515], "ttcatttgat": 131, "ttccagtaga": 131, "ttctactctt": 131, "ttctgcaatc": 131, "ttest_ind": [595, 600], "ttest_rel": 595, "ttgaatactt": 131, "ttgagaatac": 131, "ttgg": 809, "ttggccaaga": 131, "ttgtaactct": 131, "ttgttgtacc": 131, "ttjflkafnkkghvm": 140, "tttattggta": 131, "tttcctcgtg": 131, "tttgaattaa": 131, "tttgcaggct": 131, "ttttcattgg": 131, "ttttggactg": 131, "ttttggatta": 131, "tttttaggcc": 131, "tttttttaaaaaaa": 1009, "tupl": [61, 62, 63, 64, 65, 66, 67, 74, 78, 85, 91, 94, 112, 135, 156, 205, 226, 230, 284, 345, 346, 520, 521, 565, 618, 641, 796, 804, 809, 819, 820, 836, 849, 853, 900, 901, 932, 933], "turkei": [132, 139], "turn": [289, 411, 464, 784, 944, 1009], "turnip": 142, "tutori": [141, 144, 202, 249, 267, 270, 283, 286, 1001], "twice": 791, "two": [0, 1, 61, 62, 63, 64, 65, 66, 67, 70, 75, 95, 106, 107, 127, 128, 132, 133, 134, 135, 137, 139, 140, 143, 205, 206, 212, 218, 224, 227, 232, 289, 294, 307, 312, 329, 333, 335, 365, 377, 382, 396, 400, 402, 411, 416, 428, 433, 448, 452, 454, 464, 469, 482, 487, 504, 508, 510, 528, 540, 542, 549, 553, 555, 561, 563, 565, 570, 572, 577, 583, 590, 591, 592, 595, 597, 600, 607, 610, 611, 613, 614, 616, 618, 623, 625, 628, 632, 639, 641, 646, 648, 652, 657, 663, 664, 665, 666, 667, 668, 669, 671, 777, 782, 787, 790, 791, 806, 809, 819, 834, 853, 885, 886, 892, 901, 923, 925, 940, 945, 1002, 1004, 1007], "txt": [131, 141, 143, 202, 249, 267, 286], "tyne": 131, "type": [1, 17, 29, 34, 46, 47, 49, 85, 96, 100, 108, 112, 125, 129, 130, 132, 133, 134, 135, 136, 139, 142, 143, 155, 157, 170, 172, 173, 174, 176, 180, 184, 187, 188, 194, 202, 234, 235, 241, 249, 252, 253, 259, 267, 270, 271, 277, 279, 283, 286, 291, 294, 303, 306, 307, 308, 310, 312, 313, 314, 327, 328, 333, 334, 335, 336, 339, 340, 349, 355, 362, 365, 374, 377, 378, 380, 382, 383, 384, 395, 400, 401, 402, 403, 406, 413, 416, 425, 428, 429, 431, 433, 434, 435, 447, 452, 453, 454, 455, 458, 466, 469, 478, 481, 482, 483, 485, 487, 488, 489, 502, 503, 508, 509, 510, 511, 514, 515, 523, 525, 528, 537, 540, 541, 542, 548, 553, 554, 555, 556, 558, 565, 574, 586, 590, 591, 613, 618, 626, 634, 641, 650, 660, 664, 667, 669, 762, 776, 777, 784, 787, 789, 793, 804, 810, 819, 820, 834, 853, 860, 862, 863, 883, 887, 890, 932, 940, 944, 951, 1001, 1002], "typeerror": [29, 46, 49, 55, 104, 176, 177, 180, 181, 291, 307, 308, 312, 316, 327, 328, 333, 334, 335, 336, 362, 377, 378, 382, 386, 395, 400, 401, 402, 403, 413, 428, 429, 433, 437, 447, 452, 453, 454, 455, 466, 482, 483, 487, 491, 502, 503, 508, 509, 510, 511, 525, 540, 541, 542, 544, 548, 553, 554, 555, 556, 590, 591, 664, 665, 667, 790, 791, 792, 836, 883], "typic": [61, 62, 63, 64, 65, 66, 68, 132, 133, 140, 141, 142, 205, 215, 782, 881, 1003], "tyr": 411, "tyrosin": 411, "u": [1, 63, 66, 79, 85, 88, 106, 107, 131, 132, 134, 143, 294, 299, 303, 304, 344, 365, 370, 374, 375, 411, 416, 421, 425, 426, 464, 469, 474, 478, 479, 516, 528, 533, 537, 538, 595, 598, 599, 611, 665, 786, 791, 808, 1004, 1009], "u1": [1, 79, 106, 107], "u2": [1, 79, 106, 107], "u3": [1, 79, 106, 107], "u4": [1, 79, 106, 107], "u5": [1, 79, 106, 107], "u6": [1, 79, 106, 107], "u7": [1, 79, 106, 107], "u8": [79, 106, 107], "u_count": [79, 106, 107], "u_i": 595, "uaacguua": [344, 516], "uaaguucucgaucucuaaaaucg": 142, "uaaguucucgaucuuuaaaaucg": 142, "uagguugauc": 131, "uc": 1004, "ucagucagucagucagucagucagucagucagucagucagucagucagucagucagucagucag": 348, "uccacaaaug": 131, "uconn": [70, 74], "ugaguucucgaucucuaaaaucg": 142, "ugaguucucuaucucuaaaaucg": 142, "uint8": [132, 133, 140, 289, 291, 308, 312, 327, 328, 333, 334, 335, 336, 342, 362, 378, 382, 395, 400, 401, 402, 403, 408, 411, 413, 429, 433, 447, 452, 453, 454, 455, 461, 464, 466, 483, 487, 502, 503, 508, 509, 510, 511, 518, 523, 525, 541, 542, 548, 553, 554, 555, 556, 559], "uk": [61, 64, 83, 131, 134, 205, 592], "ulcl": 85, "ulcu": 85, "un": 137, "unabl": 145, "unalign": [61, 62, 63, 64, 65, 66, 67, 1004], "unbound": [215, 229], "uncertainti": [48, 600, 671], "unclear": 84, "unconstrain": 777, "uncorrect": [73, 74], "uncov": [85, 86, 1005], "undefin": [141, 789, 790, 886], "under": [81, 108, 132, 289, 411, 464, 523, 595, 706, 790, 809, 1001], "underli": [0, 122, 184, 294, 358, 365, 416, 469, 523, 528, 590, 762, 787, 793, 1004], "underpow": 787, "underscor": [137, 139], "understand": [141, 595], "understood": [56, 60, 123, 124, 137, 176, 177, 178, 180, 181, 182, 231, 233, 285, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 774, 775, 844, 859, 918, 939], "unequ": [70, 349, 561], "unescap": 137, "uneven": 103, "unfortun": [133, 790], "ungap": [329, 396, 448, 504, 549], "ungapped_subsequ": [329, 396, 448, 504, 549], "unicod": [125, 141, 184], "unifi": 600, "uniform": [1, 669], "unifrac": [1, 79, 95, 106, 107, 109, 112, 782], "unimod": [777, 782], "union": [810, 834], "uniprotkb": 131, "uniq": [342, 408, 461, 518, 559], "uniqu": [1, 55, 59, 127, 132, 136, 137, 141, 142, 143, 279, 284, 342, 408, 461, 518, 559, 591, 613, 667, 773, 809, 836, 880, 889, 894], "unit": [1, 106, 134, 144, 561, 782, 784, 785, 944, 945, 1008], "univers": [131, 132, 139, 141, 145], "unix": 143, "unknown": [48, 85, 86, 134, 205, 314, 384, 435, 489, 761, 843], "unknownaxiserror": [804, 806, 812, 813, 817, 824, 826, 827, 830, 831, 832, 833, 835, 836, 837, 845, 846, 856, 858], "unknowniderror": [827, 835], "unless": [17, 29, 54, 73, 140, 968], "unlik": [142, 761], "unmask": 17, "unnam": 1002, "unnecessari": 55, "unobserv": 97, "unpack": 936, "unpack_by_func": 935, "unpair": 137, "unpermut": [663, 665, 666], "unread": 184, "unrecogn": [804, 806, 812, 817, 824, 826, 827, 832, 833, 835, 837, 856, 858], "unrecognizedformaterror": [176, 177, 178, 180, 181, 182], "unresolv": 112, "unroot": [79, 95, 106, 107, 137, 898, 922, 937, 938, 941], "unrooted_copi": [862, 863, 887, 890, 923, 938], "unrooted_deepcopi": [862, 863, 887, 890, 922, 923, 937], "unshar": 55, "unsign": [761, 912], "unsolv": 595, "unstabl": 112, "unsupport": [141, 411], "until": [215, 610, 924], "untouch": [817, 840], "untreat": 790, "unweight": [1, 95, 106, 107, 785], "unweighted_unifrac": [1, 107], "unwrit": 184, "unzip": 842, "up": [48, 68, 129, 139, 141, 142, 184, 215, 227, 520, 521, 565, 597, 604, 605, 607, 608, 609, 618, 641, 665, 761, 791, 809, 878, 883, 886, 917, 923, 990, 1007], "upd": 95, "upd_": 95, "updat": [131, 132, 143, 215, 229, 523, 858], "updated_t": 858, "upon": 131, "upper": [17, 84, 85, 132, 139, 205, 215, 227, 229, 652, 659, 665, 831], "upper_bound": [74, 78, 85, 215, 227], "upper_quantil": 84, "uppercas": [289, 411, 464, 523], "upsk": 142, "uq": 84, "uracil": [131, 134, 344, 464, 516], "urinari": 791, "url": [56, 60, 123, 124, 176, 177, 178, 180, 181, 182, 184, 231, 233, 285, 288, 338, 347, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 774, 775, 819, 844, 853, 859, 918, 939], "urn": [85, 86], "us": [1, 3, 17, 29, 36, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 61, 62, 63, 73, 74, 75, 79, 80, 83, 84, 91, 94, 95, 98, 104, 106, 107, 108, 109, 112, 113, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 155, 156, 157, 173, 174, 177, 181, 184, 203, 204, 215, 227, 250, 251, 268, 269, 270, 282, 283, 287, 289, 307, 312, 324, 326, 329, 332, 339, 342, 345, 346, 348, 356, 357, 358, 359, 360, 377, 382, 392, 394, 396, 399, 406, 408, 411, 428, 433, 443, 445, 448, 451, 458, 461, 464, 482, 487, 499, 501, 504, 507, 514, 518, 520, 521, 523, 540, 542, 546, 547, 549, 552, 558, 559, 561, 565, 577, 589, 590, 592, 593, 594, 595, 600, 601, 602, 604, 605, 611, 613, 614, 618, 628, 637, 641, 652, 659, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 695, 706, 717, 739, 750, 762, 773, 776, 782, 786, 787, 788, 789, 790, 791, 809, 814, 815, 817, 840, 843, 845, 847, 848, 851, 853, 854, 861, 862, 863, 879, 881, 882, 883, 886, 887, 890, 892, 898, 899, 917, 922, 923, 930, 932, 937, 938, 940, 942, 943, 944, 945, 946, 967, 990, 1004, 1007, 1008, 1009], "usag": [93, 666], "useabl": 175, "usefulli": 940, "user": [1, 48, 105, 127, 141, 143, 144, 145, 155, 156, 157, 176, 178, 180, 182, 341, 407, 460, 517, 595, 600, 777, 782, 942, 1004], "usrman": 131, "usual": [1, 102, 131, 134, 141, 143, 561, 881], "ut": 1004, "uti": 791, "util": [1, 56, 60, 123, 124, 143, 155, 157, 231, 233, 285, 288, 338, 347, 348, 356, 357, 360, 405, 410, 457, 463, 513, 522, 557, 560, 582, 588, 631, 636, 656, 662, 774, 775, 819, 834, 842, 844, 847, 853, 859, 918, 939, 1001, 1002], "uu": 106, "uuagcucauu": 131, "uuauuguagc": 131, "uuauuuuuuu": 131, "uucuacucuu": 131, "uugagaauac": 131, "uuugaauuaa": 131, "uuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggg": 348, "uuuuuuuuuuuuuuuuccccccccccccccccaaaaaaaaaaaaaaaagggggggggggggggg": 348, "v": [17, 106, 107, 234, 270, 289, 294, 303, 365, 374, 411, 416, 425, 464, 469, 478, 528, 537, 592, 606, 610, 612, 789, 790, 932], "v2": 126, "v_count": [106, 107], "vagin": 791, "vaginali": 791, "val": [411, 817], "val_i": 831, "val_j": 831, "valdar": 48, "valid": [61, 64, 79, 95, 104, 106, 107, 108, 109, 112, 130, 132, 133, 137, 139, 270, 283, 289, 342, 360, 408, 411, 461, 464, 518, 559, 606, 612, 614, 637, 652, 793, 819, 843, 853, 1004, 1009], "valin": 411, "valu": [1, 4, 5, 8, 10, 11, 12, 19, 20, 22, 24, 25, 26, 35, 38, 40, 42, 48, 52, 61, 62, 63, 64, 65, 66, 68, 70, 81, 91, 103, 104, 107, 114, 115, 117, 119, 120, 121, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 141, 142, 146, 147, 149, 151, 152, 153, 159, 160, 162, 164, 165, 166, 184, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 201, 203, 204, 207, 209, 210, 211, 214, 219, 221, 222, 223, 226, 230, 234, 235, 236, 238, 239, 240, 241, 243, 245, 246, 247, 248, 250, 251, 253, 254, 256, 257, 258, 259, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 283, 284, 287, 289, 290, 295, 298, 300, 302, 306, 307, 324, 332, 339, 340, 350, 352, 353, 354, 361, 366, 369, 371, 373, 377, 392, 399, 406, 411, 412, 417, 420, 422, 424, 428, 443, 451, 458, 464, 465, 470, 473, 475, 477, 481, 482, 499, 507, 514, 515, 523, 524, 529, 532, 534, 536, 540, 546, 552, 558, 564, 567, 568, 569, 572, 587, 592, 595, 597, 600, 604, 605, 606, 607, 608, 609, 612, 617, 620, 621, 622, 625, 635, 640, 643, 644, 645, 648, 661, 663, 664, 665, 666, 667, 668, 669, 671, 674, 675, 677, 679, 680, 681, 685, 686, 688, 690, 691, 692, 694, 696, 697, 699, 701, 702, 703, 706, 707, 708, 710, 712, 713, 714, 718, 719, 721, 723, 724, 725, 727, 729, 730, 732, 734, 735, 736, 738, 740, 741, 743, 745, 746, 747, 751, 752, 754, 756, 757, 758, 761, 764, 765, 767, 769, 770, 771, 773, 776, 777, 781, 782, 784, 786, 787, 788, 789, 790, 791, 795, 798, 800, 801, 802, 803, 804, 809, 817, 818, 819, 823, 829, 830, 833, 837, 839, 840, 843, 847, 849, 850, 856, 858, 861, 864, 865, 868, 871, 873, 874, 881, 883, 886, 925, 932, 943, 944, 945, 949, 950, 953, 955, 956, 957, 958, 967, 969, 970, 972, 974, 975, 976, 979, 981, 982, 984, 986, 987, 988, 990, 992, 993, 995, 997, 998, 999, 1009], "valueerror": [29, 46, 48, 49, 51, 55, 57, 59, 70, 79, 81, 95, 104, 106, 107, 108, 112, 176, 180, 197, 244, 262, 280, 284, 307, 308, 314, 316, 327, 330, 331, 333, 334, 335, 336, 342, 358, 360, 377, 378, 384, 386, 395, 397, 398, 400, 401, 402, 403, 408, 428, 429, 435, 437, 447, 449, 450, 452, 453, 454, 455, 461, 482, 483, 489, 491, 502, 505, 506, 508, 509, 510, 511, 518, 523, 540, 541, 544, 548, 550, 551, 553, 554, 555, 556, 559, 573, 576, 577, 590, 591, 597, 604, 605, 611, 628, 652, 664, 665, 667, 668, 706, 750, 761, 773, 776, 777, 790, 791, 792, 818, 819, 843, 849, 884, 886, 891, 899, 907, 909, 912, 924, 925, 930, 935, 946], "van": 610, "vanveeeeaw": 130, "var": [664, 851], "vari": [1, 667, 787, 789, 790], "variabl": [81, 125, 339, 406, 458, 514, 523, 558, 595, 664, 667, 762, 763, 773, 777, 782, 783, 784, 787, 789, 790, 967, 990, 1009], "varianc": [74, 279, 606, 612, 664, 666, 667, 762, 778, 781, 785, 790], "variant": [1, 79, 95, 140, 143, 561], "variat": [70, 665, 777], "varieti": 136, "variou": [1, 138, 270, 613, 763, 787, 1005, 1008], "vazquez": 773, "ve": [1, 132, 133, 791, 1007], "vec": 788, "vector": [51, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 113, 130, 136, 309, 311, 314, 317, 329, 332, 334, 336, 337, 339, 342, 348, 379, 381, 384, 387, 396, 399, 401, 403, 404, 406, 408, 430, 432, 435, 438, 448, 451, 453, 455, 456, 458, 459, 461, 484, 486, 489, 492, 504, 507, 509, 511, 512, 514, 518, 549, 552, 554, 556, 558, 559, 565, 593, 594, 595, 600, 601, 602, 607, 608, 609, 612, 613, 614, 618, 637, 641, 663, 666, 667, 717, 777, 791, 792, 796, 809, 842, 846, 849, 856, 932], "vegan": [663, 664, 665, 666, 667, 776, 777, 784], "vellend": 95, "ver": 128, "verdonschot": 777, "veri": [1, 61, 62, 63, 84, 132, 137, 144, 607, 819, 886], "verifi": [131, 144, 176, 180], "versa": [137, 671, 840], "versatil": 762, "version": [1, 73, 74, 79, 95, 104, 106, 107, 108, 125, 127, 129, 130, 131, 134, 135, 139, 156, 313, 341, 343, 383, 407, 409, 434, 460, 462, 488, 517, 519, 595, 610, 793, 814, 817, 819, 840, 849, 853, 855, 860, 875, 879, 942, 946, 1004], "versu": [96, 100, 106, 107], "veschi": 81, "via": [46, 49, 57, 70, 85, 86, 132, 139, 312, 348, 349, 355, 382, 433, 487, 542, 663, 665, 666, 809, 849], "vice": [137, 671, 840], "viceroi": [70, 74], "view": [131, 842], "viewer": 881, "violat": 600, "viral": 142, "virgilio": 81, "viridiplanta": 131, "virol": 142, "viru": 142, "visit": 915, "visual": [1, 762, 773], "vlen": [819, 853], "vocabulari": [134, 135, 203, 204, 250, 251, 268, 269, 270, 287], "vol": 97, "volatil": 672, "volum": [77, 941], "vqhklrah": 142, "vrt": 143, "w": [17, 48, 70, 71, 78, 91, 95, 103, 127, 128, 129, 184, 289, 411, 464, 595, 610, 853, 855], "wa": [1, 61, 64, 70, 71, 72, 75, 78, 79, 81, 82, 83, 87, 88, 95, 96, 98, 99, 104, 106, 107, 108, 109, 129, 132, 133, 137, 139, 184, 199, 202, 203, 204, 246, 249, 250, 251, 264, 267, 268, 269, 286, 287, 329, 358, 396, 448, 504, 523, 549, 595, 606, 610, 612, 665, 717, 781, 789, 791, 877, 919, 940, 941, 1002, 1007, 1009], "wai": [0, 1, 132, 133, 137, 139, 142, 144, 205, 283, 341, 407, 460, 517, 561, 595, 665, 782, 787, 809, 819, 853, 1002, 1007], "wakefield": 940, "walk": [937, 938, 1007, 1009], "walli": [595, 790, 791], "wan": [17, 67], "want": [61, 62, 63, 131, 134, 215, 787, 789, 790, 791, 885, 886, 1002], "warn": [133, 141, 782, 883, 937, 942, 943, 1001], "washington": [132, 137, 139, 940], "wasn": [29, 133], "water": 64, "waterman": [0, 17, 64, 65, 66, 67], "we": [0, 1, 17, 46, 48, 49, 79, 84, 91, 95, 106, 107, 109, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 185, 205, 215, 316, 329, 339, 358, 386, 396, 406, 437, 448, 458, 491, 504, 514, 523, 544, 549, 558, 595, 600, 606, 612, 613, 663, 664, 665, 667, 668, 671, 672, 762, 773, 776, 784, 786, 787, 789, 790, 791, 806, 819, 849, 886, 940, 1002, 1007, 1009], "weak": 289, "weaker": 671, "web": [17, 61, 64, 67, 129, 143, 663, 664, 665, 666, 667], "webfeat": 134, "webpag": 134, "websit": 48, "week": 791, "weight": [1, 79, 95, 106, 107, 137, 672, 673, 695, 706, 717, 739, 781, 785, 940], "weighted_unifrac": [1, 106], "welcom": 132, "well": [0, 133, 141, 144, 270, 523, 600, 613, 614, 664, 666, 667, 671, 763, 777, 819, 940, 1002, 1007, 1008], "wellcom": 133, "were": [1, 63, 66, 79, 84, 104, 106, 107, 108, 137, 139, 140, 294, 329, 365, 396, 416, 448, 469, 504, 528, 549, 663, 665, 667, 773, 790, 791, 907, 909, 943, 1009], "wf": [133, 1009], "what": [1, 79, 95, 104, 106, 107, 108, 137, 141, 144, 145, 173, 174, 178, 182, 230, 329, 396, 448, 504, 549, 671, 761, 790, 806, 809, 819, 842, 853, 1007, 1009], "whatev": 144, "when": [1, 17, 46, 48, 49, 55, 58, 61, 62, 63, 70, 80, 95, 96, 100, 109, 112, 125, 127, 129, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 155, 156, 157, 176, 177, 178, 180, 181, 182, 184, 215, 227, 270, 279, 283, 307, 314, 315, 318, 319, 332, 377, 384, 385, 399, 428, 435, 436, 451, 482, 489, 490, 493, 494, 507, 523, 540, 543, 552, 590, 595, 613, 663, 665, 666, 667, 669, 671, 694, 727, 738, 776, 784, 787, 788, 789, 790, 791, 792, 793, 809, 819, 860, 886, 920, 937, 938, 941, 945, 946, 967, 1002, 1007, 1009], "whenev": [133, 782], "where": [1, 68, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 103, 108, 109, 112, 125, 130, 132, 136, 137, 138, 141, 142, 144, 282, 309, 311, 315, 317, 327, 329, 334, 336, 337, 339, 379, 381, 385, 387, 395, 396, 401, 403, 404, 406, 430, 432, 436, 438, 447, 448, 453, 455, 456, 458, 459, 484, 486, 490, 492, 502, 504, 509, 511, 512, 514, 543, 548, 549, 554, 556, 558, 561, 565, 593, 594, 595, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 618, 641, 665, 671, 761, 773, 781, 783, 784, 785, 787, 791, 792, 817, 819, 836, 848, 853, 858, 861, 885, 886, 896, 900, 933, 936, 965, 1007, 1009], "where_values_miss": [198, 245, 263], "wherea": [126, 761], "wherev": 785, "whether": [15, 30, 31, 34, 43, 52, 53, 73, 74, 95, 135, 144, 155, 157, 184, 188, 194, 203, 204, 235, 241, 250, 251, 253, 259, 268, 269, 271, 277, 287, 291, 294, 303, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 349, 355, 362, 365, 374, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 413, 416, 425, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 466, 469, 478, 495, 496, 497, 498, 499, 500, 501, 504, 505, 506, 525, 528, 537, 545, 546, 547, 549, 550, 551, 570, 591, 595, 606, 612, 623, 646, 663, 665, 666, 667, 772, 784, 785, 816, 817, 819, 828, 853, 856], "which": [1, 29, 61, 62, 63, 70, 75, 79, 89, 95, 99, 102, 106, 107, 109, 127, 129, 130, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 155, 156, 157, 158, 170, 172, 173, 174, 175, 176, 180, 270, 289, 307, 308, 319, 327, 329, 332, 342, 358, 377, 378, 395, 396, 399, 408, 411, 428, 429, 447, 448, 451, 461, 464, 482, 483, 494, 502, 504, 507, 518, 523, 540, 541, 548, 549, 552, 559, 572, 592, 593, 594, 595, 600, 614, 625, 648, 663, 666, 667, 671, 777, 781, 782, 787, 788, 789, 790, 791, 807, 808, 809, 810, 814, 817, 833, 836, 837, 839, 845, 846, 850, 853, 855, 886, 889, 920, 921, 932, 933, 938, 940, 941, 951, 968, 990, 1002, 1004, 1007, 1009], "while": [0, 1, 125, 131, 132, 133, 134, 139, 205, 348, 523, 595, 667, 706, 750, 762, 773, 789, 793, 796, 860, 861, 889, 967, 1003, 1004, 1009], "white": 131, "whitespac": [132, 133, 136, 138, 142], "whitnei": 595, "who": [137, 791], "whole": [142, 780, 788, 813, 833, 837, 839, 846, 850], "whose": [134, 140, 141, 580, 629, 653, 664, 665, 785, 812, 827, 835, 847], "why": 77, "wide": [1, 55, 95, 307, 377, 428, 482, 540], "width": [132, 136, 139], "wiener": [83, 98], "wiki": [132, 133, 139, 142, 941], "wikipedia": [132, 133, 142, 941, 1007], "wilcoxon": 595, "wild": [341, 407, 460, 517], "wildcard": [341, 342, 407, 408, 460, 461, 517, 518, 559], "wildcard_char": [342, 408, 461, 518, 559], "wilei": 592, "william": 80, "window": 750, "window_s": 750, "wish": [141, 1007], "with_mean": [781, 785], "with_replac": 849, "with_std": [781, 785], "within": [1, 48, 95, 103, 109, 125, 128, 132, 133, 137, 139, 141, 142, 270, 289, 411, 464, 523, 572, 600, 625, 648, 667, 668, 728, 762, 763, 773, 789, 790, 809, 838, 861, 903, 944, 947, 990, 1007, 1009], "within_captur": [343, 409, 462, 519], "without": [46, 49, 55, 57, 91, 107, 128, 137, 139, 141, 142, 202, 249, 267, 286, 523, 592, 761, 773, 791, 792, 814, 831, 849, 855, 892, 901, 933, 966, 967, 1002], "wllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 348, "woman": 791, "women": 791, "won": [1, 79, 104, 106, 107, 108, 133, 206, 777], "word": [0, 131, 132, 134, 137, 142, 230, 331, 398, 450, 506, 551], "work": [1, 17, 109, 132, 139, 141, 144, 270, 289, 411, 464, 613, 665, 777, 791, 825, 834, 1001, 1003, 1004, 1006, 1007], "workflow": 1001, "worri": [137, 793, 860], "worst": 914, "would": [48, 79, 81, 84, 106, 107, 129, 132, 135, 137, 139, 141, 142, 144, 270, 307, 329, 377, 396, 428, 448, 482, 504, 540, 549, 572, 607, 610, 625, 648, 671, 789, 790, 883, 933, 934, 940, 1002], "wprintgc": [348, 356, 357], "wr": [132, 671], "wrap": [3, 139, 142, 991], "wrapper": [17, 67, 85, 86, 944], "writabl": 184, "write": [56, 123, 126, 129, 130, 131, 133, 135, 136, 137, 139, 142, 144, 157, 174, 175, 184, 231, 285, 338, 405, 457, 513, 557, 582, 613, 631, 656, 694, 727, 738, 774, 844, 853, 854, 855, 875, 918, 946, 1001], "writeabl": 1002, "writer": [60, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 172, 175, 178, 182, 184, 233, 288, 347, 410, 463, 522, 560, 588, 636, 662, 775, 859, 939], "written": [129, 132, 133, 137, 139, 270, 814, 854, 855, 940, 1002, 1007], "wrong": 89, "wu": [95, 107], "wu_dm": 1, "wu_pc": 1, "wunsch": [0, 61, 62, 63], "www": [17, 61, 64, 67, 84, 109, 125, 127, 128, 129, 131, 132, 133, 134, 139, 143, 348, 356, 357, 664], "x": [17, 81, 97, 126, 133, 140, 342, 360, 408, 411, 461, 518, 559, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 607, 608, 609, 610, 612, 665, 668, 671, 762, 763, 773, 776, 777, 778, 784, 787, 790, 791, 809, 817, 821, 830, 835, 840, 845, 847, 851, 853, 855, 856, 860, 886, 896, 917, 920, 932, 936, 941, 966, 1009], "x00": 185, "x01": 185, "x03": 185, "x0c": 185, "x108": 185, "x1c": 185, "x56734": 131, "x86": 185, "x89": 185, "x8b": 185, "x9ah3m": 185, "x9c": 185, "x_": [592, 593, 610, 787, 791], "x_1": [593, 594, 598, 599, 607, 608, 609], "x_d": [593, 594, 598, 599, 607, 608, 609], "x_i": [594, 598, 603, 607, 608, 609, 610], "x_j": 603, "xa6": 185, "xaa": 411, "xb7": 185, "xb9": 185, "xc1": 185, "xc4": 185, "xle": 411, "xx": 131, "xxxxxx": 360, "xyz": 129, "y": [17, 70, 81, 133, 140, 289, 411, 464, 603, 607, 608, 612, 665, 668, 671, 762, 773, 777, 778, 783, 784, 789, 835, 845, 853, 855, 856, 886, 932], "y_": [594, 791], "y_1": [594, 607, 608], "y_2": 594, "y_d": [607, 608], "y_i": 603, "y_j": 603, "yang": 70, "ye": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143], "yeast": [345, 520], "yeild": 667, "yellow": 142, "yet": [137, 143, 144], "yield": [39, 44, 54, 132, 230, 299, 304, 313, 314, 315, 329, 330, 346, 359, 370, 375, 383, 384, 385, 396, 397, 421, 426, 434, 435, 436, 448, 449, 474, 479, 488, 489, 490, 504, 505, 521, 533, 538, 543, 549, 550, 667, 829, 830, 831, 838, 842, 896, 908, 911, 914, 915, 916, 925, 931, 933, 934, 968, 1002, 1009], "york": 72, "you": [1, 17, 61, 62, 63, 79, 104, 106, 107, 108, 109, 127, 129, 132, 133, 135, 139, 141, 142, 144, 214, 215, 227, 229, 230, 289, 411, 464, 523, 561, 652, 663, 667, 784, 787, 789, 790, 791, 848, 883, 885, 886, 1002, 1004, 1007, 1009], "your": [17, 55, 79, 104, 106, 107, 108, 133, 141, 144, 215, 667, 787, 790, 1002, 1007, 1009], "yy": 133, "z": [17, 55, 78, 141, 411, 668, 773, 829, 886, 932], "z3": [823, 829], "zero": [70, 80, 112, 125, 205, 226, 270, 284, 316, 386, 437, 491, 544, 592, 595, 597, 600, 604, 605, 606, 607, 608, 609, 612, 614, 663, 664, 665, 666, 667, 668, 671, 776, 782, 785, 790, 792, 793, 819, 846, 849, 853, 856, 941, 1009], "zero_index": [17, 67], "zhao": [17, 67], "zip": 813, "zp_02903423": 127, "zscore": 74, "zxx": 133, "\u00e9": 610, "\u00f8": 95}, "titles": ["Sequence Alignments (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.alignment</span></code>)", "Community Diversity (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity</span></code>)", "Biological Embeddings (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.embedding</span></code>)", "skbio.alignment.AlignmentStructure", "skbio.alignment.AlignmentStructure.__eq__", "skbio.alignment.AlignmentStructure.__ge__", "skbio.alignment.AlignmentStructure.__getitem__", "skbio.alignment.AlignmentStructure.__getstate__", "skbio.alignment.AlignmentStructure.__gt__", "skbio.alignment.AlignmentStructure.__hash__", "skbio.alignment.AlignmentStructure.__le__", "skbio.alignment.AlignmentStructure.__lt__", "skbio.alignment.AlignmentStructure.__ne__", "skbio.alignment.AlignmentStructure.__setstate__", "skbio.alignment.AlignmentStructure.__str__", "skbio.alignment.AlignmentStructure.is_zero_based", "skbio.alignment.AlignmentStructure.set_zero_based", "skbio.alignment.StripedSmithWaterman", "skbio.alignment.StripedSmithWaterman.__call__", "skbio.alignment.StripedSmithWaterman.__eq__", "skbio.alignment.StripedSmithWaterman.__ge__", "skbio.alignment.StripedSmithWaterman.__getstate__", "skbio.alignment.StripedSmithWaterman.__gt__", "skbio.alignment.StripedSmithWaterman.__hash__", "skbio.alignment.StripedSmithWaterman.__le__", "skbio.alignment.StripedSmithWaterman.__lt__", "skbio.alignment.StripedSmithWaterman.__ne__", "skbio.alignment.StripedSmithWaterman.__setstate__", "skbio.alignment.StripedSmithWaterman.__str__", "skbio.alignment.TabularMSA", "skbio.alignment.TabularMSA.__bool__", "skbio.alignment.TabularMSA.__contains__", "skbio.alignment.TabularMSA.__copy__", "skbio.alignment.TabularMSA.__deepcopy__", "skbio.alignment.TabularMSA.__eq__", "skbio.alignment.TabularMSA.__ge__", "skbio.alignment.TabularMSA.__getitem__", "skbio.alignment.TabularMSA.__getstate__", "skbio.alignment.TabularMSA.__gt__", "skbio.alignment.TabularMSA.__iter__", "skbio.alignment.TabularMSA.__le__", "skbio.alignment.TabularMSA.__len__", "skbio.alignment.TabularMSA.__lt__", "skbio.alignment.TabularMSA.__ne__", "skbio.alignment.TabularMSA.__reversed__", "skbio.alignment.TabularMSA.__str__", "skbio.alignment.TabularMSA.append", "skbio.alignment.TabularMSA.consensus", "skbio.alignment.TabularMSA.conservation", "skbio.alignment.TabularMSA.extend", "skbio.alignment.TabularMSA.from_dict", "skbio.alignment.TabularMSA.gap_frequencies", "skbio.alignment.TabularMSA.has_metadata", "skbio.alignment.TabularMSA.has_positional_metadata", "skbio.alignment.TabularMSA.iter_positions", "skbio.alignment.TabularMSA.join", "skbio.alignment.TabularMSA.read", "skbio.alignment.TabularMSA.reassign_index", "skbio.alignment.TabularMSA.sort", "skbio.alignment.TabularMSA.to_dict", "skbio.alignment.TabularMSA.write", "skbio.alignment.global_pairwise_align", "skbio.alignment.global_pairwise_align_nucleotide", "skbio.alignment.global_pairwise_align_protein", "skbio.alignment.local_pairwise_align", "skbio.alignment.local_pairwise_align_nucleotide", "skbio.alignment.local_pairwise_align_protein", "skbio.alignment.local_pairwise_align_ssw", "skbio.alignment.make_identity_substitution_matrix", "Alpha diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.alpha</span></code>)", "skbio.diversity.alpha.ace", "skbio.diversity.alpha.berger_parker_d", "skbio.diversity.alpha.brillouin_d", "skbio.diversity.alpha.chao1", "skbio.diversity.alpha.chao1_ci", "skbio.diversity.alpha.dominance", "skbio.diversity.alpha.doubles", "skbio.diversity.alpha.enspie", "skbio.diversity.alpha.esty_ci", "skbio.diversity.alpha.faith_pd", "skbio.diversity.alpha.fisher_alpha", "skbio.diversity.alpha.gini_index", "skbio.diversity.alpha.goods_coverage", "skbio.diversity.alpha.heip_e", "skbio.diversity.alpha.kempton_taylor_q", "skbio.diversity.alpha.lladser_ci", "skbio.diversity.alpha.lladser_pe", "skbio.diversity.alpha.margalef", "skbio.diversity.alpha.mcintosh_d", "skbio.diversity.alpha.mcintosh_e", "skbio.diversity.alpha.menhinick", "skbio.diversity.alpha.michaelis_menten_fit", "skbio.diversity.alpha.observed_features", "skbio.diversity.alpha.observed_otus", "skbio.diversity.alpha.osd", "skbio.diversity.alpha.phydiv", "skbio.diversity.alpha.pielou_e", "skbio.diversity.alpha.robbins", "skbio.diversity.alpha.shannon", "skbio.diversity.alpha.simpson", "skbio.diversity.alpha.simpson_e", "skbio.diversity.alpha.singles", "skbio.diversity.alpha.sobs", "skbio.diversity.alpha.strong", "skbio.diversity.alpha_diversity", "Beta diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.beta</span></code>)", "skbio.diversity.beta.unweighted_unifrac", "skbio.diversity.beta.weighted_unifrac", "skbio.diversity.beta_diversity", "skbio.diversity.block_beta_diversity", "skbio.diversity.get_alpha_diversity_metrics", "skbio.diversity.get_beta_diversity_metrics", "skbio.diversity.partial_beta_diversity", "skbio.embedding.ProteinEmbedding", "skbio.embedding.ProteinEmbedding.__eq__", "skbio.embedding.ProteinEmbedding.__ge__", "skbio.embedding.ProteinEmbedding.__getstate__", "skbio.embedding.ProteinEmbedding.__gt__", "skbio.embedding.ProteinEmbedding.__hash__", "skbio.embedding.ProteinEmbedding.__le__", "skbio.embedding.ProteinEmbedding.__lt__", "skbio.embedding.ProteinEmbedding.__ne__", "skbio.embedding.ProteinEmbedding.__str__", "skbio.embedding.ProteinEmbedding.read", "skbio.embedding.ProteinEmbedding.write", "Simple binary dissimilarity matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.binary_dm</span></code>)", "BIOM-Format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.biom</span></code>)", "BLAST+6 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast6</span></code>)", "BLAST+7 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast7</span></code>)", "Clustal format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.clustal</span></code>)", "Embedding format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embed</span></code>).", "EMBL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embl</span></code>)", "FASTA/QUAL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fasta</span></code>)", "FASTQ format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fastq</span></code>)", "GenBank format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.genbank</span></code>)", "GFF3 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.gff3</span></code>)", "Labeled square matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.lsmat</span></code>)", "Newick format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.newick</span></code>)", "Ordination results format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.ordination</span></code>)", "PHYLIP multiple sequence alignment format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.phylip</span></code>)", "QSeq format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.qseq</span></code>)", "Format Support", "Stockholm format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.stockholm</span></code>)", "Taxdump format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.taxdump</span></code>)", "I/O Registry (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.registry</span></code>)", "skbio.io.registry.Format", "skbio.io.registry.Format.__eq__", "skbio.io.registry.Format.__ge__", "skbio.io.registry.Format.__getstate__", "skbio.io.registry.Format.__gt__", "skbio.io.registry.Format.__hash__", "skbio.io.registry.Format.__le__", "skbio.io.registry.Format.__lt__", "skbio.io.registry.Format.__ne__", "skbio.io.registry.Format.__str__", "skbio.io.registry.Format.reader", "skbio.io.registry.Format.sniffer", "skbio.io.registry.Format.writer", "skbio.io.registry.IORegistry", "skbio.io.registry.IORegistry.__eq__", "skbio.io.registry.IORegistry.__ge__", "skbio.io.registry.IORegistry.__getstate__", "skbio.io.registry.IORegistry.__gt__", "skbio.io.registry.IORegistry.__hash__", "skbio.io.registry.IORegistry.__le__", "skbio.io.registry.IORegistry.__lt__", "skbio.io.registry.IORegistry.__ne__", "skbio.io.registry.IORegistry.__str__", "skbio.io.registry.IORegistry.add_format", "skbio.io.registry.IORegistry.create_format", "skbio.io.registry.IORegistry.get_reader", "skbio.io.registry.IORegistry.get_sniffer", "skbio.io.registry.IORegistry.get_writer", "skbio.io.registry.IORegistry.list_read_formats", "skbio.io.registry.IORegistry.list_write_formats", "skbio.io.registry.IORegistry.monkey_patch", "skbio.io.registry.IORegistry.read", "skbio.io.registry.IORegistry.sniff", "skbio.io.registry.IORegistry.write", "skbio.io.registry.create_format", "skbio.io.registry.read", "skbio.io.registry.sniff", "skbio.io.registry.write", "I/O utilities (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.util</span></code>)", "skbio.io.util.open", "skbio.io.util.open_file", "skbio.io.util.open_files", "skbio.metadata.CategoricalMetadataColumn", "skbio.metadata.CategoricalMetadataColumn.__eq__", "skbio.metadata.CategoricalMetadataColumn.__ge__", "skbio.metadata.CategoricalMetadataColumn.__getstate__", "skbio.metadata.CategoricalMetadataColumn.__gt__", "skbio.metadata.CategoricalMetadataColumn.__le__", "skbio.metadata.CategoricalMetadataColumn.__lt__", "skbio.metadata.CategoricalMetadataColumn.__ne__", "skbio.metadata.CategoricalMetadataColumn.__str__", "skbio.metadata.CategoricalMetadataColumn.drop_missing_values", "skbio.metadata.CategoricalMetadataColumn.filter_ids", "skbio.metadata.CategoricalMetadataColumn.get_ids", "skbio.metadata.CategoricalMetadataColumn.get_missing", "skbio.metadata.CategoricalMetadataColumn.get_value", "skbio.metadata.CategoricalMetadataColumn.has_missing_values", "skbio.metadata.CategoricalMetadataColumn.save", "skbio.metadata.CategoricalMetadataColumn.to_dataframe", "skbio.metadata.CategoricalMetadataColumn.to_series", "skbio.metadata.Interval", "skbio.metadata.Interval.__eq__", "skbio.metadata.Interval.__ge__", "skbio.metadata.Interval.__getstate__", "skbio.metadata.Interval.__gt__", "skbio.metadata.Interval.__le__", "skbio.metadata.Interval.__lt__", "skbio.metadata.Interval.__ne__", "skbio.metadata.Interval.__str__", "skbio.metadata.Interval.drop", "skbio.metadata.IntervalMetadata", "skbio.metadata.IntervalMetadata.__copy__", "skbio.metadata.IntervalMetadata.__deepcopy__", "skbio.metadata.IntervalMetadata.__eq__", "skbio.metadata.IntervalMetadata.__ge__", "skbio.metadata.IntervalMetadata.__getstate__", "skbio.metadata.IntervalMetadata.__gt__", "skbio.metadata.IntervalMetadata.__le__", "skbio.metadata.IntervalMetadata.__lt__", "skbio.metadata.IntervalMetadata.__ne__", "skbio.metadata.IntervalMetadata.__str__", "skbio.metadata.IntervalMetadata.add", "skbio.metadata.IntervalMetadata.concat", "skbio.metadata.IntervalMetadata.drop", "skbio.metadata.IntervalMetadata.merge", "skbio.metadata.IntervalMetadata.query", "skbio.metadata.IntervalMetadata.read", "skbio.metadata.IntervalMetadata.sort", "skbio.metadata.IntervalMetadata.write", "skbio.metadata.MetadataColumn", "skbio.metadata.MetadataColumn.__eq__", "skbio.metadata.MetadataColumn.__ge__", "skbio.metadata.MetadataColumn.__getstate__", "skbio.metadata.MetadataColumn.__gt__", "skbio.metadata.MetadataColumn.__le__", "skbio.metadata.MetadataColumn.__lt__", "skbio.metadata.MetadataColumn.__ne__", "skbio.metadata.MetadataColumn.__str__", "skbio.metadata.MetadataColumn.drop_missing_values", "skbio.metadata.MetadataColumn.filter_ids", "skbio.metadata.MetadataColumn.get_ids", "skbio.metadata.MetadataColumn.get_missing", "skbio.metadata.MetadataColumn.get_value", "skbio.metadata.MetadataColumn.has_missing_values", "skbio.metadata.MetadataColumn.save", "skbio.metadata.MetadataColumn.to_dataframe", "skbio.metadata.MetadataColumn.to_series", "skbio.metadata.NumericMetadataColumn", "skbio.metadata.NumericMetadataColumn.__eq__", "skbio.metadata.NumericMetadataColumn.__ge__", "skbio.metadata.NumericMetadataColumn.__getstate__", "skbio.metadata.NumericMetadataColumn.__gt__", "skbio.metadata.NumericMetadataColumn.__le__", "skbio.metadata.NumericMetadataColumn.__lt__", "skbio.metadata.NumericMetadataColumn.__ne__", "skbio.metadata.NumericMetadataColumn.__str__", "skbio.metadata.NumericMetadataColumn.drop_missing_values", "skbio.metadata.NumericMetadataColumn.filter_ids", "skbio.metadata.NumericMetadataColumn.get_ids", "skbio.metadata.NumericMetadataColumn.get_missing", "skbio.metadata.NumericMetadataColumn.get_value", "skbio.metadata.NumericMetadataColumn.has_missing_values", "skbio.metadata.NumericMetadataColumn.save", "skbio.metadata.NumericMetadataColumn.to_dataframe", "skbio.metadata.NumericMetadataColumn.to_series", "skbio.metadata.SampleMetadata", "skbio.metadata.SampleMetadata.__eq__", "skbio.metadata.SampleMetadata.__ge__", "skbio.metadata.SampleMetadata.__getstate__", "skbio.metadata.SampleMetadata.__gt__", "skbio.metadata.SampleMetadata.__le__", "skbio.metadata.SampleMetadata.__lt__", "skbio.metadata.SampleMetadata.__ne__", "skbio.metadata.SampleMetadata.__str__", "skbio.metadata.SampleMetadata.filter_columns", "skbio.metadata.SampleMetadata.filter_ids", "skbio.metadata.SampleMetadata.get_column", "skbio.metadata.SampleMetadata.get_ids", "skbio.metadata.SampleMetadata.load", "skbio.metadata.SampleMetadata.merge", "skbio.metadata.SampleMetadata.read", "skbio.metadata.SampleMetadata.save", "skbio.metadata.SampleMetadata.to_dataframe", "skbio.metadata.SampleMetadata.write", "skbio.sequence.DNA", "skbio.sequence.DNA.__bool__", "skbio.sequence.DNA.__contains__", "skbio.sequence.DNA.__copy__", "skbio.sequence.DNA.__deepcopy__", "skbio.sequence.DNA.__eq__", "skbio.sequence.DNA.__ge__", "skbio.sequence.DNA.__getitem__", "skbio.sequence.DNA.__getstate__", "skbio.sequence.DNA.__gt__", "skbio.sequence.DNA.__iter__", "skbio.sequence.DNA.__le__", "skbio.sequence.DNA.__len__", "skbio.sequence.DNA.__lt__", "skbio.sequence.DNA.__ne__", "skbio.sequence.DNA.__reversed__", "skbio.sequence.DNA.__str__", "skbio.sequence.DNA.complement", "skbio.sequence.DNA.concat", "skbio.sequence.DNA.count", "skbio.sequence.DNA.definites", "skbio.sequence.DNA.degap", "skbio.sequence.DNA.degenerates", "skbio.sequence.DNA.distance", "skbio.sequence.DNA.expand_degenerates", "skbio.sequence.DNA.find_motifs", "skbio.sequence.DNA.find_with_regex", "skbio.sequence.DNA.frequencies", "skbio.sequence.DNA.gaps", "skbio.sequence.DNA.gc_content", "skbio.sequence.DNA.gc_frequency", "skbio.sequence.DNA.has_definites", "skbio.sequence.DNA.has_degenerates", "skbio.sequence.DNA.has_gaps", "skbio.sequence.DNA.has_interval_metadata", "skbio.sequence.DNA.has_metadata", "skbio.sequence.DNA.has_nondegenerates", "skbio.sequence.DNA.has_positional_metadata", "skbio.sequence.DNA.index", "skbio.sequence.DNA.is_reverse_complement", "skbio.sequence.DNA.iter_contiguous", "skbio.sequence.DNA.iter_kmers", "skbio.sequence.DNA.kmer_frequencies", "skbio.sequence.DNA.lowercase", "skbio.sequence.DNA.match_frequency", "skbio.sequence.DNA.matches", "skbio.sequence.DNA.mismatch_frequency", "skbio.sequence.DNA.mismatches", "skbio.sequence.DNA.nondegenerates", "skbio.sequence.DNA.read", "skbio.sequence.DNA.replace", "skbio.sequence.DNA.reverse_complement", "skbio.sequence.DNA.to_definites", "skbio.sequence.DNA.to_indices", "skbio.sequence.DNA.to_regex", "skbio.sequence.DNA.transcribe", "skbio.sequence.DNA.translate", "skbio.sequence.DNA.translate_six_frames", "skbio.sequence.DNA.write", "skbio.sequence.GeneticCode", "skbio.sequence.GeneticCode.__eq__", "skbio.sequence.GeneticCode.__ge__", "skbio.sequence.GeneticCode.__getstate__", "skbio.sequence.GeneticCode.__gt__", "skbio.sequence.GeneticCode.__le__", "skbio.sequence.GeneticCode.__lt__", "skbio.sequence.GeneticCode.__ne__", "skbio.sequence.GeneticCode.__str__", "skbio.sequence.GeneticCode.from_ncbi", "skbio.sequence.GeneticCode.translate", "skbio.sequence.GeneticCode.translate_six_frames", "skbio.sequence.GrammaredSequence", "skbio.sequence.GrammaredSequence.__bool__", "skbio.sequence.GrammaredSequence.__contains__", "skbio.sequence.GrammaredSequence.__copy__", "skbio.sequence.GrammaredSequence.__deepcopy__", "skbio.sequence.GrammaredSequence.__eq__", "skbio.sequence.GrammaredSequence.__ge__", "skbio.sequence.GrammaredSequence.__getitem__", "skbio.sequence.GrammaredSequence.__getstate__", "skbio.sequence.GrammaredSequence.__gt__", "skbio.sequence.GrammaredSequence.__iter__", "skbio.sequence.GrammaredSequence.__le__", "skbio.sequence.GrammaredSequence.__len__", "skbio.sequence.GrammaredSequence.__lt__", "skbio.sequence.GrammaredSequence.__ne__", "skbio.sequence.GrammaredSequence.__reversed__", "skbio.sequence.GrammaredSequence.__str__", "skbio.sequence.GrammaredSequence.concat", "skbio.sequence.GrammaredSequence.count", "skbio.sequence.GrammaredSequence.definites", "skbio.sequence.GrammaredSequence.degap", "skbio.sequence.GrammaredSequence.degenerates", "skbio.sequence.GrammaredSequence.distance", "skbio.sequence.GrammaredSequence.expand_degenerates", "skbio.sequence.GrammaredSequence.find_motifs", "skbio.sequence.GrammaredSequence.find_with_regex", "skbio.sequence.GrammaredSequence.frequencies", "skbio.sequence.GrammaredSequence.gaps", "skbio.sequence.GrammaredSequence.has_definites", "skbio.sequence.GrammaredSequence.has_degenerates", "skbio.sequence.GrammaredSequence.has_gaps", "skbio.sequence.GrammaredSequence.has_interval_metadata", "skbio.sequence.GrammaredSequence.has_metadata", "skbio.sequence.GrammaredSequence.has_nondegenerates", "skbio.sequence.GrammaredSequence.has_positional_metadata", "skbio.sequence.GrammaredSequence.index", "skbio.sequence.GrammaredSequence.iter_contiguous", "skbio.sequence.GrammaredSequence.iter_kmers", "skbio.sequence.GrammaredSequence.kmer_frequencies", "skbio.sequence.GrammaredSequence.lowercase", "skbio.sequence.GrammaredSequence.match_frequency", "skbio.sequence.GrammaredSequence.matches", "skbio.sequence.GrammaredSequence.mismatch_frequency", "skbio.sequence.GrammaredSequence.mismatches", "skbio.sequence.GrammaredSequence.nondegenerates", "skbio.sequence.GrammaredSequence.read", "skbio.sequence.GrammaredSequence.replace", "skbio.sequence.GrammaredSequence.to_definites", "skbio.sequence.GrammaredSequence.to_indices", "skbio.sequence.GrammaredSequence.to_regex", "skbio.sequence.GrammaredSequence.write", "skbio.sequence.Protein", "skbio.sequence.Protein.__bool__", "skbio.sequence.Protein.__contains__", "skbio.sequence.Protein.__copy__", "skbio.sequence.Protein.__deepcopy__", "skbio.sequence.Protein.__eq__", "skbio.sequence.Protein.__ge__", "skbio.sequence.Protein.__getitem__", "skbio.sequence.Protein.__getstate__", "skbio.sequence.Protein.__gt__", "skbio.sequence.Protein.__iter__", "skbio.sequence.Protein.__le__", "skbio.sequence.Protein.__len__", "skbio.sequence.Protein.__lt__", "skbio.sequence.Protein.__ne__", "skbio.sequence.Protein.__reversed__", "skbio.sequence.Protein.__str__", "skbio.sequence.Protein.concat", "skbio.sequence.Protein.count", "skbio.sequence.Protein.definites", "skbio.sequence.Protein.degap", "skbio.sequence.Protein.degenerates", "skbio.sequence.Protein.distance", "skbio.sequence.Protein.expand_degenerates", "skbio.sequence.Protein.find_motifs", "skbio.sequence.Protein.find_with_regex", "skbio.sequence.Protein.frequencies", "skbio.sequence.Protein.gaps", "skbio.sequence.Protein.has_definites", "skbio.sequence.Protein.has_degenerates", "skbio.sequence.Protein.has_gaps", "skbio.sequence.Protein.has_interval_metadata", "skbio.sequence.Protein.has_metadata", "skbio.sequence.Protein.has_nondegenerates", "skbio.sequence.Protein.has_positional_metadata", "skbio.sequence.Protein.has_stops", "skbio.sequence.Protein.index", "skbio.sequence.Protein.iter_contiguous", "skbio.sequence.Protein.iter_kmers", "skbio.sequence.Protein.kmer_frequencies", "skbio.sequence.Protein.lowercase", "skbio.sequence.Protein.match_frequency", "skbio.sequence.Protein.matches", "skbio.sequence.Protein.mismatch_frequency", "skbio.sequence.Protein.mismatches", "skbio.sequence.Protein.nondegenerates", "skbio.sequence.Protein.read", "skbio.sequence.Protein.replace", "skbio.sequence.Protein.stops", "skbio.sequence.Protein.to_definites", "skbio.sequence.Protein.to_indices", "skbio.sequence.Protein.to_regex", "skbio.sequence.Protein.write", "skbio.sequence.RNA", "skbio.sequence.RNA.__bool__", "skbio.sequence.RNA.__contains__", "skbio.sequence.RNA.__copy__", "skbio.sequence.RNA.__deepcopy__", "skbio.sequence.RNA.__eq__", "skbio.sequence.RNA.__ge__", "skbio.sequence.RNA.__getitem__", "skbio.sequence.RNA.__getstate__", "skbio.sequence.RNA.__gt__", "skbio.sequence.RNA.__iter__", "skbio.sequence.RNA.__le__", "skbio.sequence.RNA.__len__", "skbio.sequence.RNA.__lt__", "skbio.sequence.RNA.__ne__", "skbio.sequence.RNA.__reversed__", "skbio.sequence.RNA.__str__", "skbio.sequence.RNA.complement", "skbio.sequence.RNA.concat", "skbio.sequence.RNA.count", "skbio.sequence.RNA.definites", "skbio.sequence.RNA.degap", "skbio.sequence.RNA.degenerates", "skbio.sequence.RNA.distance", "skbio.sequence.RNA.expand_degenerates", "skbio.sequence.RNA.find_motifs", "skbio.sequence.RNA.find_with_regex", "skbio.sequence.RNA.frequencies", "skbio.sequence.RNA.gaps", "skbio.sequence.RNA.gc_content", "skbio.sequence.RNA.gc_frequency", "skbio.sequence.RNA.has_definites", "skbio.sequence.RNA.has_degenerates", "skbio.sequence.RNA.has_gaps", "skbio.sequence.RNA.has_interval_metadata", "skbio.sequence.RNA.has_metadata", "skbio.sequence.RNA.has_nondegenerates", "skbio.sequence.RNA.has_positional_metadata", "skbio.sequence.RNA.index", "skbio.sequence.RNA.is_reverse_complement", "skbio.sequence.RNA.iter_contiguous", "skbio.sequence.RNA.iter_kmers", "skbio.sequence.RNA.kmer_frequencies", "skbio.sequence.RNA.lowercase", "skbio.sequence.RNA.match_frequency", "skbio.sequence.RNA.matches", "skbio.sequence.RNA.mismatch_frequency", "skbio.sequence.RNA.mismatches", "skbio.sequence.RNA.nondegenerates", "skbio.sequence.RNA.read", "skbio.sequence.RNA.replace", "skbio.sequence.RNA.reverse_complement", "skbio.sequence.RNA.reverse_transcribe", "skbio.sequence.RNA.to_definites", "skbio.sequence.RNA.to_indices", "skbio.sequence.RNA.to_regex", "skbio.sequence.RNA.translate", "skbio.sequence.RNA.translate_six_frames", "skbio.sequence.RNA.write", "skbio.sequence.Sequence", "skbio.sequence.Sequence.__bool__", "skbio.sequence.Sequence.__contains__", "skbio.sequence.Sequence.__copy__", "skbio.sequence.Sequence.__deepcopy__", "skbio.sequence.Sequence.__eq__", "skbio.sequence.Sequence.__ge__", "skbio.sequence.Sequence.__getitem__", "skbio.sequence.Sequence.__getstate__", "skbio.sequence.Sequence.__gt__", "skbio.sequence.Sequence.__iter__", "skbio.sequence.Sequence.__le__", "skbio.sequence.Sequence.__len__", "skbio.sequence.Sequence.__lt__", "skbio.sequence.Sequence.__ne__", "skbio.sequence.Sequence.__reversed__", "skbio.sequence.Sequence.__str__", "skbio.sequence.Sequence.concat", "skbio.sequence.Sequence.count", "skbio.sequence.Sequence.distance", "skbio.sequence.Sequence.find_with_regex", "skbio.sequence.Sequence.frequencies", "skbio.sequence.Sequence.has_interval_metadata", "skbio.sequence.Sequence.has_metadata", "skbio.sequence.Sequence.has_positional_metadata", "skbio.sequence.Sequence.index", "skbio.sequence.Sequence.iter_contiguous", "skbio.sequence.Sequence.iter_kmers", "skbio.sequence.Sequence.kmer_frequencies", "skbio.sequence.Sequence.lowercase", "skbio.sequence.Sequence.match_frequency", "skbio.sequence.Sequence.matches", "skbio.sequence.Sequence.mismatch_frequency", "skbio.sequence.Sequence.mismatches", "skbio.sequence.Sequence.read", "skbio.sequence.Sequence.replace", "skbio.sequence.Sequence.to_indices", "skbio.sequence.Sequence.write", "skbio.sequence.SubstitutionMatrix", "skbio.sequence.SubstitutionMatrix.__contains__", "skbio.sequence.SubstitutionMatrix.__eq__", "skbio.sequence.SubstitutionMatrix.__ge__", "skbio.sequence.SubstitutionMatrix.__getitem__", "skbio.sequence.SubstitutionMatrix.__getstate__", "skbio.sequence.SubstitutionMatrix.__gt__", "skbio.sequence.SubstitutionMatrix.__le__", "skbio.sequence.SubstitutionMatrix.__lt__", "skbio.sequence.SubstitutionMatrix.__ne__", "skbio.sequence.SubstitutionMatrix.__str__", "skbio.sequence.SubstitutionMatrix.between", "skbio.sequence.SubstitutionMatrix.by_name", "skbio.sequence.SubstitutionMatrix.copy", "skbio.sequence.SubstitutionMatrix.filter", "skbio.sequence.SubstitutionMatrix.from_dict", "skbio.sequence.SubstitutionMatrix.from_iterable", "skbio.sequence.SubstitutionMatrix.get_names", "skbio.sequence.SubstitutionMatrix.identity", "skbio.sequence.SubstitutionMatrix.index", "skbio.sequence.SubstitutionMatrix.plot", "skbio.sequence.SubstitutionMatrix.read", "skbio.sequence.SubstitutionMatrix.redundant_form", "skbio.sequence.SubstitutionMatrix.to_data_frame", "skbio.sequence.SubstitutionMatrix.to_dict", "skbio.sequence.SubstitutionMatrix.transpose", "skbio.sequence.SubstitutionMatrix.within", "skbio.sequence.SubstitutionMatrix.write", "Sequence distance metrics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence.distance</span></code>)", "skbio.sequence.distance.hamming", "skbio.sequence.distance.kmer_distance", "Composition Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.composition</span></code>)", "skbio.stats.composition.alr", "skbio.stats.composition.alr_inv", "skbio.stats.composition.ancom", "skbio.stats.composition.centralize", "skbio.stats.composition.closure", "skbio.stats.composition.clr", "skbio.stats.composition.clr_inv", "skbio.stats.composition.dirmult_ttest", "skbio.stats.composition.ilr", "skbio.stats.composition.ilr_inv", "skbio.stats.composition.inner", "skbio.stats.composition.multi_replace", "skbio.stats.composition.multiplicative_replacement", "skbio.stats.composition.pairwise_vlr", "skbio.stats.composition.perturb", "skbio.stats.composition.perturb_inv", "skbio.stats.composition.power", "skbio.stats.composition.sbp_basis", "skbio.stats.composition.tree_basis", "skbio.stats.composition.vlr", "Distance matrix-based statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.distance</span></code>)", "skbio.stats.distance.DissimilarityMatrix", "skbio.stats.distance.DissimilarityMatrix.__contains__", "skbio.stats.distance.DissimilarityMatrix.__eq__", "skbio.stats.distance.DissimilarityMatrix.__ge__", "skbio.stats.distance.DissimilarityMatrix.__getitem__", "skbio.stats.distance.DissimilarityMatrix.__getstate__", "skbio.stats.distance.DissimilarityMatrix.__gt__", "skbio.stats.distance.DissimilarityMatrix.__le__", "skbio.stats.distance.DissimilarityMatrix.__lt__", "skbio.stats.distance.DissimilarityMatrix.__ne__", "skbio.stats.distance.DissimilarityMatrix.__str__", "skbio.stats.distance.DissimilarityMatrix.between", "skbio.stats.distance.DissimilarityMatrix.copy", "skbio.stats.distance.DissimilarityMatrix.filter", "skbio.stats.distance.DissimilarityMatrix.from_iterable", "skbio.stats.distance.DissimilarityMatrix.index", "skbio.stats.distance.DissimilarityMatrix.plot", "skbio.stats.distance.DissimilarityMatrix.read", "skbio.stats.distance.DissimilarityMatrix.redundant_form", "skbio.stats.distance.DissimilarityMatrix.to_data_frame", "skbio.stats.distance.DissimilarityMatrix.transpose", "skbio.stats.distance.DissimilarityMatrix.within", "skbio.stats.distance.DissimilarityMatrix.write", "skbio.stats.distance.DistanceMatrix", "skbio.stats.distance.DistanceMatrix.__contains__", "skbio.stats.distance.DistanceMatrix.__eq__", "skbio.stats.distance.DistanceMatrix.__ge__", "skbio.stats.distance.DistanceMatrix.__getitem__", "skbio.stats.distance.DistanceMatrix.__getstate__", "skbio.stats.distance.DistanceMatrix.__gt__", "skbio.stats.distance.DistanceMatrix.__le__", "skbio.stats.distance.DistanceMatrix.__lt__", "skbio.stats.distance.DistanceMatrix.__ne__", "skbio.stats.distance.DistanceMatrix.__str__", "skbio.stats.distance.DistanceMatrix.between", "skbio.stats.distance.DistanceMatrix.condensed_form", "skbio.stats.distance.DistanceMatrix.copy", "skbio.stats.distance.DistanceMatrix.filter", "skbio.stats.distance.DistanceMatrix.from_iterable", "skbio.stats.distance.DistanceMatrix.index", "skbio.stats.distance.DistanceMatrix.permute", "skbio.stats.distance.DistanceMatrix.plot", "skbio.stats.distance.DistanceMatrix.read", "skbio.stats.distance.DistanceMatrix.redundant_form", "skbio.stats.distance.DistanceMatrix.to_data_frame", "skbio.stats.distance.DistanceMatrix.to_series", "skbio.stats.distance.DistanceMatrix.transpose", "skbio.stats.distance.DistanceMatrix.within", "skbio.stats.distance.DistanceMatrix.write", "skbio.stats.distance.anosim", "skbio.stats.distance.bioenv", "skbio.stats.distance.mantel", "skbio.stats.distance.permanova", "skbio.stats.distance.permdisp", "skbio.stats.distance.pwmantel", "skbio.stats.distance.randdm", "Evolutionary statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.evolve</span></code>)", "skbio.stats.evolve.hommola_cospeciation", "Gradient analyses (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.gradient</span></code>)", "skbio.stats.gradient.AverageGradientANOVA", "skbio.stats.gradient.AverageGradientANOVA.__eq__", "skbio.stats.gradient.AverageGradientANOVA.__ge__", "skbio.stats.gradient.AverageGradientANOVA.__getstate__", "skbio.stats.gradient.AverageGradientANOVA.__gt__", "skbio.stats.gradient.AverageGradientANOVA.__hash__", "skbio.stats.gradient.AverageGradientANOVA.__le__", "skbio.stats.gradient.AverageGradientANOVA.__lt__", "skbio.stats.gradient.AverageGradientANOVA.__ne__", "skbio.stats.gradient.AverageGradientANOVA.__str__", "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "skbio.stats.gradient.CategoryResults", "skbio.stats.gradient.CategoryResults.__eq__", "skbio.stats.gradient.CategoryResults.__ge__", "skbio.stats.gradient.CategoryResults.__getstate__", "skbio.stats.gradient.CategoryResults.__gt__", "skbio.stats.gradient.CategoryResults.__hash__", "skbio.stats.gradient.CategoryResults.__le__", "skbio.stats.gradient.CategoryResults.__lt__", "skbio.stats.gradient.CategoryResults.__ne__", "skbio.stats.gradient.CategoryResults.__str__", "skbio.stats.gradient.CategoryResults.to_files", "skbio.stats.gradient.FirstDifferenceGradientANOVA", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVA", "skbio.stats.gradient.GradientANOVA.__eq__", "skbio.stats.gradient.GradientANOVA.__ge__", "skbio.stats.gradient.GradientANOVA.__getstate__", "skbio.stats.gradient.GradientANOVA.__gt__", "skbio.stats.gradient.GradientANOVA.__hash__", "skbio.stats.gradient.GradientANOVA.__le__", "skbio.stats.gradient.GradientANOVA.__lt__", "skbio.stats.gradient.GradientANOVA.__ne__", "skbio.stats.gradient.GradientANOVA.__str__", "skbio.stats.gradient.GradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVAResults", "skbio.stats.gradient.GradientANOVAResults.__eq__", "skbio.stats.gradient.GradientANOVAResults.__ge__", "skbio.stats.gradient.GradientANOVAResults.__getstate__", "skbio.stats.gradient.GradientANOVAResults.__gt__", "skbio.stats.gradient.GradientANOVAResults.__hash__", "skbio.stats.gradient.GradientANOVAResults.__le__", "skbio.stats.gradient.GradientANOVAResults.__lt__", "skbio.stats.gradient.GradientANOVAResults.__ne__", "skbio.stats.gradient.GradientANOVAResults.__str__", "skbio.stats.gradient.GradientANOVAResults.to_files", "skbio.stats.gradient.GroupResults", "skbio.stats.gradient.GroupResults.__eq__", "skbio.stats.gradient.GroupResults.__ge__", "skbio.stats.gradient.GroupResults.__getstate__", "skbio.stats.gradient.GroupResults.__gt__", "skbio.stats.gradient.GroupResults.__hash__", "skbio.stats.gradient.GroupResults.__le__", "skbio.stats.gradient.GroupResults.__lt__", "skbio.stats.gradient.GroupResults.__ne__", "skbio.stats.gradient.GroupResults.__str__", "skbio.stats.gradient.GroupResults.to_files", "skbio.stats.gradient.TrajectoryGradientANOVA", "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "skbio.stats.gradient.WindowDifferenceGradientANOVA", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "skbio.stats.isubsample", "Ordination methods (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.ordination</span></code>)", "skbio.stats.ordination.OrdinationResults", "skbio.stats.ordination.OrdinationResults.__eq__", "skbio.stats.ordination.OrdinationResults.__ge__", "skbio.stats.ordination.OrdinationResults.__getstate__", "skbio.stats.ordination.OrdinationResults.__gt__", "skbio.stats.ordination.OrdinationResults.__hash__", "skbio.stats.ordination.OrdinationResults.__le__", "skbio.stats.ordination.OrdinationResults.__lt__", "skbio.stats.ordination.OrdinationResults.__ne__", "skbio.stats.ordination.OrdinationResults.__str__", "skbio.stats.ordination.OrdinationResults.plot", "skbio.stats.ordination.OrdinationResults.read", "skbio.stats.ordination.OrdinationResults.write", "skbio.stats.ordination.ca", "skbio.stats.ordination.cca", "skbio.stats.ordination.corr", "skbio.stats.ordination.e_matrix", "skbio.stats.ordination.f_matrix", "skbio.stats.ordination.mean_and_std", "skbio.stats.ordination.pcoa", "skbio.stats.ordination.pcoa_biplot", "skbio.stats.ordination.rda", "skbio.stats.ordination.scale", "skbio.stats.ordination.svd_rank", "Empirical Power Estimation (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.power</span></code>)", "skbio.stats.power.confidence_bound", "skbio.stats.power.paired_subsamples", "skbio.stats.power.subsample_paired_power", "skbio.stats.power.subsample_power", "skbio.stats.subsample_counts", "skbio.table.Table", "skbio.table.Table.__eq__", "skbio.table.Table.__ge__", "skbio.table.Table.__getitem__", "skbio.table.Table.__getstate__", "skbio.table.Table.__gt__", "skbio.table.Table.__iter__", "skbio.table.Table.__le__", "skbio.table.Table.__lt__", "skbio.table.Table.__ne__", "skbio.table.Table.__str__", "skbio.table.Table.add_group_metadata", "skbio.table.Table.add_metadata", "skbio.table.Table.align_to", "skbio.table.Table.align_to_dataframe", "skbio.table.Table.align_tree", "skbio.table.Table.collapse", "skbio.table.Table.concat", "skbio.table.Table.copy", "skbio.table.Table.data", "skbio.table.Table.del_metadata", "skbio.table.Table.delimited_self", "skbio.table.Table.descriptive_equality", "skbio.table.Table.exists", "skbio.table.Table.filter", "skbio.table.Table.from_adjacency", "skbio.table.Table.from_hdf5", "skbio.table.Table.from_json", "skbio.table.Table.from_tsv", "skbio.table.Table.get_table_density", "skbio.table.Table.get_value_by_ids", "skbio.table.Table.group_metadata", "skbio.table.Table.head", "skbio.table.Table.ids", "skbio.table.Table.index", "skbio.table.Table.is_empty", "skbio.table.Table.iter", "skbio.table.Table.iter_data", "skbio.table.Table.iter_pairwise", "skbio.table.Table.length", "skbio.table.Table.max", "skbio.table.Table.merge", "skbio.table.Table.metadata", "skbio.table.Table.metadata_to_dataframe", "skbio.table.Table.min", "skbio.table.Table.nonzero", "skbio.table.Table.nonzero_counts", "skbio.table.Table.norm", "skbio.table.Table.pa", "skbio.table.Table.partition", "skbio.table.Table.rankdata", "skbio.table.Table.read", "skbio.table.Table.reduce", "skbio.table.Table.remove_empty", "skbio.table.Table.sort", "skbio.table.Table.sort_order", "skbio.table.Table.subsample", "skbio.table.Table.sum", "skbio.table.Table.to_anndata", "skbio.table.Table.to_dataframe", "skbio.table.Table.to_hdf5", "skbio.table.Table.to_json", "skbio.table.Table.to_tsv", "skbio.table.Table.transform", "skbio.table.Table.transpose", "skbio.table.Table.update_ids", "skbio.table.Table.write", "skbio.table.example_table", "skbio.tree.TreeNode", "skbio.tree.TreeNode.__copy__", "skbio.tree.TreeNode.__deepcopy__", "skbio.tree.TreeNode.__eq__", "skbio.tree.TreeNode.__ge__", "skbio.tree.TreeNode.__getitem__", "skbio.tree.TreeNode.__getstate__", "skbio.tree.TreeNode.__gt__", "skbio.tree.TreeNode.__hash__", "skbio.tree.TreeNode.__iter__", "skbio.tree.TreeNode.__le__", "skbio.tree.TreeNode.__len__", "skbio.tree.TreeNode.__lt__", "skbio.tree.TreeNode.__ne__", "skbio.tree.TreeNode.__str__", "skbio.tree.TreeNode.accumulate_to_ancestor", "skbio.tree.TreeNode.ancestors", "skbio.tree.TreeNode.append", "skbio.tree.TreeNode.ascii_art", "skbio.tree.TreeNode.assign_ids", "skbio.tree.TreeNode.assign_supports", "skbio.tree.TreeNode.bifurcate", "skbio.tree.TreeNode.cache_attr", "skbio.tree.TreeNode.compare_rfd", "skbio.tree.TreeNode.compare_subsets", "skbio.tree.TreeNode.compare_tip_distances", "skbio.tree.TreeNode.copy", "skbio.tree.TreeNode.count", "skbio.tree.TreeNode.create_caches", "skbio.tree.TreeNode.deepcopy", "skbio.tree.TreeNode.descending_branch_length", "skbio.tree.TreeNode.distance", "skbio.tree.TreeNode.extend", "skbio.tree.TreeNode.find", "skbio.tree.TreeNode.find_all", "skbio.tree.TreeNode.find_by_func", "skbio.tree.TreeNode.find_by_id", "skbio.tree.TreeNode.from_linkage_matrix", "skbio.tree.TreeNode.from_taxdump", "skbio.tree.TreeNode.from_taxonomy", "skbio.tree.TreeNode.get_max_distance", "skbio.tree.TreeNode.has_children", "skbio.tree.TreeNode.index_tree", "skbio.tree.TreeNode.invalidate_caches", "skbio.tree.TreeNode.is_root", "skbio.tree.TreeNode.is_tip", "skbio.tree.TreeNode.lca", "skbio.tree.TreeNode.levelorder", "skbio.tree.TreeNode.lowest_common_ancestor", "skbio.tree.TreeNode.neighbors", "skbio.tree.TreeNode.non_tips", "skbio.tree.TreeNode.observed_node_counts", "skbio.tree.TreeNode.pop", "skbio.tree.TreeNode.postorder", "skbio.tree.TreeNode.pre_and_postorder", "skbio.tree.TreeNode.preorder", "skbio.tree.TreeNode.prune", "skbio.tree.TreeNode.read", "skbio.tree.TreeNode.remove", "skbio.tree.TreeNode.remove_deleted", "skbio.tree.TreeNode.root", "skbio.tree.TreeNode.root_at", "skbio.tree.TreeNode.root_at_midpoint", "skbio.tree.TreeNode.shear", "skbio.tree.TreeNode.shuffle", "skbio.tree.TreeNode.siblings", "skbio.tree.TreeNode.subset", "skbio.tree.TreeNode.subsets", "skbio.tree.TreeNode.subtree", "skbio.tree.TreeNode.tip_tip_distances", "skbio.tree.TreeNode.tips", "skbio.tree.TreeNode.to_array", "skbio.tree.TreeNode.to_taxonomy", "skbio.tree.TreeNode.traverse", "skbio.tree.TreeNode.unpack", "skbio.tree.TreeNode.unpack_by_func", "skbio.tree.TreeNode.unrooted_copy", "skbio.tree.TreeNode.unrooted_deepcopy", "skbio.tree.TreeNode.write", "skbio.tree.majority_rule", "skbio.tree.nj", "skbio.util.EfficiencyWarning", "skbio.util.RepresentationWarning", "skbio.util.assert_data_frame_almost_equal", "skbio.util.assert_ordination_results_equal", "skbio.util.cardinal_to_ordinal", "skbio.util.classproperty", "skbio.util.classproperty.__delete__", "skbio.util.classproperty.__eq__", "skbio.util.classproperty.__ge__", "skbio.util.classproperty.__get__", "skbio.util.classproperty.__getstate__", "skbio.util.classproperty.__gt__", "skbio.util.classproperty.__hash__", "skbio.util.classproperty.__le__", "skbio.util.classproperty.__lt__", "skbio.util.classproperty.__ne__", "skbio.util.classproperty.__set__", "skbio.util.classproperty.__set_name__", "skbio.util.classproperty.__str__", "skbio.util.classproperty.deleter", "skbio.util.classproperty.getter", "skbio.util.classproperty.setter", "skbio.util.find_duplicates", "skbio.util.get_data_path", "skbio.util.safe_md5", "skbio.workflow.Workflow", "skbio.workflow.Workflow.__call__", "skbio.workflow.Workflow.__eq__", "skbio.workflow.Workflow.__ge__", "skbio.workflow.Workflow.__getstate__", "skbio.workflow.Workflow.__gt__", "skbio.workflow.Workflow.__hash__", "skbio.workflow.Workflow.__le__", "skbio.workflow.Workflow.__lt__", "skbio.workflow.Workflow.__ne__", "skbio.workflow.Workflow.__str__", "skbio.workflow.Workflow.initialize_state", "skbio.workflow.method", "skbio.workflow.method.__call__", "skbio.workflow.method.__eq__", "skbio.workflow.method.__ge__", "skbio.workflow.method.__getstate__", "skbio.workflow.method.__gt__", "skbio.workflow.method.__hash__", "skbio.workflow.method.__le__", "skbio.workflow.method.__lt__", "skbio.workflow.method.__ne__", "skbio.workflow.method.__str__", "skbio.workflow.requires", "skbio.workflow.requires.__call__", "skbio.workflow.requires.__eq__", "skbio.workflow.requires.__ge__", "skbio.workflow.requires.__getstate__", "skbio.workflow.requires.__gt__", "skbio.workflow.requires.__hash__", "skbio.workflow.requires.__le__", "skbio.workflow.requires.__lt__", "skbio.workflow.requires.__ne__", "skbio.workflow.requires.__str__", "Home", "Input and Output (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io</span></code>)", "Metadata (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.metadata</span></code>)", "Biological Sequences (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence</span></code>)", "Multivariate Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats</span></code>)", "Data Table (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.table</span></code>)", "Trees and Phylogenetics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.tree</span></code>)", "Utilities for Developers (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.util</span></code>)", "Workflow construction (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.workflow</span></code>)"], "titleterms": {"0": 1001, "1": 1001, "6": [127, 1001], "7": 128, "__bool__": [30, 290, 361, 412, 465, 524], "__call__": [18, 968, 980, 991], "__contains__": [31, 291, 362, 413, 466, 525, 562, 615, 638], "__copy__": [32, 216, 292, 363, 414, 467, 526, 862], "__deepcopy__": [33, 217, 293, 364, 415, 468, 527, 863], "__delete__": 948, "__eq__": [4, 19, 34, 114, 146, 159, 188, 206, 218, 235, 253, 271, 294, 349, 365, 416, 469, 528, 563, 616, 639, 674, 685, 696, 707, 718, 729, 740, 751, 764, 794, 864, 949, 969, 981, 992], "__ge__": [5, 20, 35, 115, 147, 160, 189, 207, 219, 236, 254, 272, 295, 350, 366, 417, 470, 529, 564, 617, 640, 675, 686, 697, 708, 719, 730, 741, 752, 765, 795, 865, 950, 970, 982, 993], "__get__": 951, "__getitem__": [6, 36, 296, 367, 418, 471, 530, 565, 618, 641, 796, 866], "__getstate__": [7, 21, 37, 116, 148, 161, 190, 208, 220, 237, 255, 273, 297, 351, 368, 419, 472, 531, 566, 619, 642, 676, 687, 698, 709, 720, 731, 742, 753, 766, 797, 867, 952, 971, 983, 994], "__gt__": [8, 22, 38, 117, 149, 162, 191, 209, 221, 238, 256, 274, 298, 352, 369, 420, 473, 532, 567, 620, 643, 677, 688, 699, 710, 721, 732, 743, 754, 767, 798, 868, 953, 972, 984, 995], "__hash__": [9, 23, 118, 150, 163, 678, 689, 700, 711, 722, 733, 744, 755, 768, 869, 954, 973, 985, 996], "__iter__": [39, 299, 370, 421, 474, 533, 799, 870], "__le__": [10, 24, 40, 119, 151, 164, 192, 210, 222, 239, 257, 275, 300, 353, 371, 422, 475, 534, 568, 621, 644, 679, 690, 701, 712, 723, 734, 745, 756, 769, 800, 871, 955, 974, 986, 997], "__len__": [41, 301, 372, 423, 476, 535, 872], "__lt__": [11, 25, 42, 120, 152, 165, 193, 211, 223, 240, 258, 276, 302, 354, 373, 424, 477, 536, 569, 622, 645, 680, 691, 702, 713, 724, 735, 746, 757, 770, 801, 873, 956, 975, 987, 998], "__ne__": [12, 26, 43, 121, 153, 166, 194, 212, 224, 241, 259, 277, 303, 355, 374, 425, 478, 537, 570, 623, 646, 681, 692, 703, 714, 725, 736, 747, 758, 771, 802, 874, 957, 976, 988, 999], "__reversed__": [44, 304, 375, 426, 479, 538], "__set__": 958, "__set_name__": 959, "__setstate__": [13, 27], "__str__": [14, 28, 45, 122, 154, 167, 195, 213, 225, 242, 260, 278, 305, 356, 376, 427, 480, 539, 571, 624, 647, 682, 693, 704, 715, 726, 737, 748, 759, 772, 803, 875, 960, 977, 989, 1000], "ac": 70, "accumulate_to_ancestor": 876, "ad": 137, "add": 226, "add_format": 168, "add_group_metadata": 804, "add_metadata": 805, "advanc": 137, "algorithm": 0, "align": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 129, 139, 142], "align_to": 806, "align_to_datafram": 807, "align_tre": 808, "alignmentstructur": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], "alpha": [1, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "alpha_divers": 104, "alr": 593, "alr_inv": 594, "analys": 672, "analysi": 762, "ancestor": 877, "ancom": 595, "anosim": 663, "append": [46, 878], "applic": 137, "argument": 144, "ascii_art": 879, "assert_data_frame_almost_equ": 944, "assert_ordination_results_equ": 945, "assign_id": 880, "assign_support": 881, "averagegradientanova": [673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683], "base": 613, "basic": 137, "befor": [131, 134], "berger_parker_d": 71, "beta": [1, 105, 106, 107], "beta_divers": 108, "between": [572, 625, 648], "bifurc": 882, "binari": 125, "binary_dm": 125, "bio": [144, 1001, 1002], "bioenv": 664, "biolog": [2, 1004], "biom": [126, 1006], "blast": [127, 128], "blast6": 127, "blast7": 128, "block_beta_divers": 109, "brillouin_d": 72, "by_nam": 573, "ca": 776, "cache_attr": 883, "calcul": 1004, "can": 1002, "canon": 762, "cardinal_to_ordin": 946, "categor": 613, "categoricalmetadatacolumn": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "categoryresult": [684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694], "caveat": 137, "cca": 777, "central": 596, "chao1": 73, "chao1_ci": 74, "charact": 141, "class": [144, 613, 672, 1009], "classproperti": [947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963], "closur": 597, "clr": 598, "clr_inv": 599, "clustal": 129, "collaps": 809, "column": [127, 128, 141, 1003], "comment": [137, 141], "commun": 1, "compare_rfd": 884, "compare_subset": 885, "compare_tip_dist": 886, "comparison": 613, "complement": [306, 481], "composit": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 1005], "concat": [227, 307, 377, 428, 482, 540, 810], "condensed_form": 649, "confidence_bound": 788, "consensu": 47, "conserv": 48, "construct": 1009, "continu": 613, "cophylogenet": 670, "copi": [574, 626, 650, 811, 887], "corr": 778, "correspond": 762, "count": [1, 308, 378, 429, 483, 541, 888], "creat": 144, "create_cach": 889, "create_format": [169, 179], "custom": 1002, "data": [0, 132, 613, 812, 1005, 1006], "decor": 1009, "deepcopi": 890, "definit": [309, 379, 430, 484], "degap": [310, 380, 431, 485], "degener": [311, 381, 432, 486], "del_metadata": 813, "delet": 961, "delimited_self": 814, "deprec": 0, "descending_branch_length": 891, "descriptive_equ": 815, "dev": 1001, "develop": [1002, 1008], "dirmult_ttest": 600, "dissimilar": 125, "dissimilaritymatrix": [614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636], "distanc": [312, 382, 433, 487, 542, 589, 590, 591, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 892, 1004, 1005], "distancematrix": [637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662], "divers": [1, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "divis": 143, "dmp": 143, "dna": [289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "document": 1001, "domin": 75, "doubl": 76, "drop": [214, 228], "drop_missing_valu": [196, 243, 261], "e_matrix": 779, "efficiencywarn": 942, "emb": 130, "embed": [2, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 130], "embl": 131, "empir": 787, "empti": 141, "enspi": 77, "estim": 787, "esty_ci": 78, "evolutionari": 670, "evolv": [670, 671], "exampl": [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 613, 672, 762, 787, 1006], "example_t": 860, "except": [144, 613, 1002, 1007], "exist": 816, "expand_degener": [313, 383, 434, 488], "explan": 137, "extend": [49, 893], "f_matrix": 780, "faith_pd": 79, "fasta": 132, "fastq": 133, "featur": [131, 134], "fh": 131, "file": [131, 132, 134, 1002], "filter": [575, 627, 651, 817], "filter_column": 279, "filter_id": [197, 244, 262, 280], "find": 894, "find_al": 895, "find_by_func": 896, "find_by_id": 897, "find_dupl": 964, "find_motif": [314, 384, 435, 489], "find_with_regex": [315, 385, 436, 490, 543], "firstdifferencegradientanova": [695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705], "fisher_alpha": 80, "footer": 142, "formal": 137, "format": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 1002], "frequenc": [316, 386, 437, 491, 544], "from": 1002, "from_adjac": 818, "from_dict": [50, 576], "from_hdf5": 819, "from_iter": [577, 628, 652], "from_json": 820, "from_linkage_matrix": 898, "from_ncbi": 357, "from_taxdump": 899, "from_taxonomi": 900, "from_tsv": 821, "ft": 131, "function": [0, 69, 105, 144, 183, 589, 592, 613, 670, 762, 787, 1008], "g": 142, "gap": [317, 387, 438, 492], "gap_frequ": 51, "gc": 142, "gc_content": [318, 493], "gc_frequenc": [319, 494], "genbank": 134, "gencod": 143, "gener": [131, 132, 140], "geneticcod": [348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359], "get_alpha_diversity_metr": 110, "get_beta_diversity_metr": 111, "get_column": 281, "get_data_path": 965, "get_id": [198, 245, 263, 282], "get_max_dist": 901, "get_miss": [199, 246, 264], "get_nam": 578, "get_read": 170, "get_sniff": 171, "get_table_dens": 822, "get_trajectori": [683, 705, 716, 749, 760], "get_valu": [200, 247, 265], "get_value_by_id": 823, "get_writ": 172, "getter": 962, "gf": 142, "gff3": 135, "gini_index": 81, "global_pairwise_align": 61, "global_pairwise_align_nucleotid": 62, "global_pairwise_align_protein": 63, "goods_coverag": 82, "gr": 142, "gradient": [672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760], "gradientanova": [706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "gradientanovaresult": [717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727], "grammar": 137, "grammaredsequ": [360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "group_metadata": 824, "groupresult": [728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738], "ham": 590, "has_children": 902, "has_definit": [320, 388, 439, 495], "has_degener": [321, 389, 440, 496], "has_gap": [322, 390, 441, 497], "has_interval_metadata": [323, 391, 442, 498, 545], "has_metadata": [52, 324, 392, 443, 499, 546], "has_missing_valu": [201, 248, 266], "has_nondegener": [325, 393, 444, 500], "has_positional_metadata": [53, 326, 394, 445, 501, 547], "has_stop": 446, "head": 825, "header": [131, 132, 139, 142], "heip_": 83, "hommola_cospeci": 671, "i": [144, 183], "id": 826, "ident": 579, "identifi": 141, "ilr": 601, "ilr_inv": 602, "index": [327, 395, 447, 502, 548, 580, 629, 653, 827], "index_tre": 903, "inform": 137, "initialize_st": 978, "inlin": 137, "inner": 603, "input": [1, 1002], "interv": [205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 1003], "intervalmetadata": [215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233], "introduct": 1, "invalidate_cach": 904, "io": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 1002], "ioregistri": [158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178], "is_empti": 828, "is_reverse_compl": [328, 503], "is_root": 905, "is_tip": 906, "is_zero_bas": 15, "isubsampl": 761, "iter": 829, "iter_contigu": [329, 396, 448, 504, 549], "iter_data": 830, "iter_km": [330, 397, 449, 505, 550], "iter_pairwis": 831, "iter_posit": 54, "join": 55, "kempton_taylor_q": 84, "keyword": 144, "kind": 1002, "kmer_dist": 591, "kmer_frequ": [331, 398, 450, 506, 551], "label": [136, 137], "lca": 907, "lead": 141, "length": [137, 832], "level": 131, "levelord": 908, "list_read_format": 173, "list_write_format": 174, "lladser_ci": 85, "lladser_p": 86, "load": 283, "local_pairwise_align": 64, "local_pairwise_align_nucleotid": 65, "local_pairwise_align_protein": 66, "local_pairwise_align_ssw": 67, "locat": 134, "lowercas": [332, 399, 451, 507, 552], "lowest_common_ancestor": 909, "lsmat": 136, "majority_rul": 940, "make_identity_substitution_matrix": 68, "mantel": 665, "margalef": 87, "match": [334, 401, 453, 509, 554], "match_frequ": [333, 400, 452, 508, 553], "matrix": [125, 136, 613, 1005], "max": 833, "mcintosh_": 89, "mcintosh_d": 88, "mean_and_std": 781, "measur": [69, 105], "menhinick": 90, "merg": [229, 284, 834], "metadata": [141, 142, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 835, 1003], "metadata_to_datafram": 836, "metadatacolumn": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251], "method": [670, 762, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 1005], "metric": [1, 589], "michaelis_menten_fit": 91, "min": 837, "miscellan": 1008, "mismatch": [336, 403, 455, 511, 556], "mismatch_frequ": [335, 402, 454, 510, 555], "monkey_patch": 175, "multi_replac": 604, "multidimension": 762, "multipl": [139, 142], "multiplicative_replac": 605, "multivari": 1005, "name": 143, "neighbor": 910, "new": 144, "newick": 137, "nj": 941, "node": [137, 143], "non_tip": 911, "nondegener": [337, 404, 456, 512], "nonzero": 838, "nonzero_count": 839, "norm": 840, "number": 141, "numericmetadatacolumn": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269], "o": [144, 183], "observed_featur": 92, "observed_node_count": 912, "observed_otu": 93, "onli": 140, "open": 184, "open_fil": [185, 186], "oper": 1007, "optim": 0, "ordin": [138, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 1005], "ordinationresult": [763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775], "origin": 134, "osd": 94, "other": 1005, "output": 1002, "pa": 841, "paired_subsampl": 789, "pairwise_vlr": 606, "paramet": [127, 129, 132, 133, 134, 135, 136, 137, 139, 140, 142, 143], "partial_beta_divers": 112, "partit": 842, "pcoa": 782, "pcoa_biplot": 783, "permanova": 666, "permdisp": 667, "permut": 654, "perturb": 607, "perturb_inv": 608, "phydiv": 95, "phylip": 139, "phylogenet": 1007, "pielou_": 96, "plot": [581, 630, 655, 773], "pop": 913, "postord": 914, "power": [609, 787, 788, 789, 790, 791], "pre_and_postord": 915, "preorder": 916, "product": 131, "protein": [411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463], "proteinembed": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "prune": 917, "pwmantel": 668, "qseq": 140, "qual": 132, "qualiti": 133, "queri": 230, "randdm": 669, "rankdata": 843, "rda": 784, "read": [56, 123, 131, 132, 134, 176, 180, 231, 285, 338, 405, 457, 513, 557, 582, 631, 656, 774, 844, 918, 1002], "reader": [132, 134, 135, 155], "reassign_index": 57, "recommend": 141, "reconstruct": 1007, "reduc": 845, "redundant_form": [583, 632, 657], "refer": [125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 143, 592, 613, 762], "registri": [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], "remov": 919, "remove_delet": 920, "remove_empti": 846, "replac": [339, 406, 458, 514, 558], "representationwarn": 943, "requir": [141, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000], "reserv": 144, "result": [138, 762], "reverse_compl": [340, 515], "reverse_transcrib": 516, "rna": [464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "robbin": 97, "root": 921, "root_at": 922, "root_at_midpoint": 923, "row": 141, "rule": 137, "safe_md5": 966, "sampl": 1003, "samplemetadata": [270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "save": [202, 249, 267, 286], "sbp_basi": 610, "scale": [762, 785], "scikit": [144, 1001, 1002], "score": 133, "section": [129, 131, 134, 139], "sequenc": [0, 132, 139, 142, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 1004], "set_zero_bas": 16, "setter": 963, "shannon": 98, "shear": 924, "shuffl": 925, "sibl": 926, "simpl": 125, "simpson": 99, "simpson_": 100, "singl": 101, "skbio": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "slow": 0, "sniff": [177, 181], "sniffer": 156, "sob": 102, "sort": [58, 232, 847], "sort_ord": 848, "specif": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143], "specifi": 1, "sq": 131, "squar": 136, "stat": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 1005], "statist": [592, 613, 670, 1005], "stockholm": 142, "stop": 459, "string": 134, "stripedsmithwaterman": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], "strong": 103, "structur": [0, 613, 1007], "subsampl": [849, 1005], "subsample_count": 792, "subsample_paired_pow": 790, "subsample_pow": 791, "subset": [927, 928], "substitutionmatrix": [561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588], "subtre": 929, "sum": 850, "support": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 1002], "svd_rank": 786, "symbol": 137, "tabl": [793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 1006], "tabularmsa": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 132], "taxdump": 143, "test": 1008, "tip": 931, "tip_tip_dist": 930, "to_anndata": 851, "to_arrai": 932, "to_data_fram": [584, 633, 658], "to_datafram": [203, 250, 268, 287, 852], "to_definit": [341, 407, 460, 517], "to_dict": [59, 585], "to_fil": [694, 727, 738], "to_hdf5": 853, "to_indic": [342, 408, 461, 518, 559], "to_json": 854, "to_regex": [343, 409, 462, 519], "to_seri": [204, 251, 269, 659], "to_taxonomi": 933, "to_tsv": 855, "trail": 141, "trajectorygradientanova": [739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749], "transcrib": 344, "transform": 856, "translat": [345, 358, 520], "translate_six_fram": [346, 359, 521], "transpos": [586, 634, 660, 857], "travers": 934, "tree": [861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 1007], "tree_basi": 611, "treenod": [861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939], "tutori": [0, 1, 1002, 1004, 1007, 1009], "type": [2, 127, 128, 141, 1004], "unpack": 935, "unpack_by_func": 936, "unrooted_copi": 937, "unrooted_deepcopi": 938, "unweighted_unifrac": 106, "update_id": 858, "us": [0, 131, 1002], "util": [183, 184, 185, 186, 762, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 1004, 1007, 1008], "valid": [1, 141], "variabl": 613, "variant": 133, "vector": 1, "vlr": 612, "warn": [1002, 1008], "weighted_unifrac": 107, "what": 1002, "whitespac": [137, 141], "windowdifferencegradientanova": [750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760], "within": [587, 635, 661], "workflow": [967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1009], "write": [60, 124, 132, 134, 178, 182, 233, 288, 347, 410, 463, 522, 560, 588, 636, 662, 775, 859, 939, 1002], "writer": [132, 135, 157]}})