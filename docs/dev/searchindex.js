Search.setIndex({"docnames": ["alignment", "diversity", "generated/skbio.alignment.AlignmentStructure", "generated/skbio.alignment.AlignmentStructure.__eq__", "generated/skbio.alignment.AlignmentStructure.__ge__", "generated/skbio.alignment.AlignmentStructure.__getitem__", "generated/skbio.alignment.AlignmentStructure.__getstate__", "generated/skbio.alignment.AlignmentStructure.__gt__", "generated/skbio.alignment.AlignmentStructure.__hash__", "generated/skbio.alignment.AlignmentStructure.__le__", "generated/skbio.alignment.AlignmentStructure.__lt__", "generated/skbio.alignment.AlignmentStructure.__ne__", "generated/skbio.alignment.AlignmentStructure.__setstate__", "generated/skbio.alignment.AlignmentStructure.__str__", "generated/skbio.alignment.AlignmentStructure.is_zero_based", "generated/skbio.alignment.AlignmentStructure.set_zero_based", "generated/skbio.alignment.StripedSmithWaterman", "generated/skbio.alignment.StripedSmithWaterman.__call__", "generated/skbio.alignment.StripedSmithWaterman.__eq__", "generated/skbio.alignment.StripedSmithWaterman.__ge__", "generated/skbio.alignment.StripedSmithWaterman.__getstate__", "generated/skbio.alignment.StripedSmithWaterman.__gt__", "generated/skbio.alignment.StripedSmithWaterman.__hash__", "generated/skbio.alignment.StripedSmithWaterman.__le__", "generated/skbio.alignment.StripedSmithWaterman.__lt__", "generated/skbio.alignment.StripedSmithWaterman.__ne__", "generated/skbio.alignment.StripedSmithWaterman.__setstate__", "generated/skbio.alignment.StripedSmithWaterman.__str__", "generated/skbio.alignment.TabularMSA", "generated/skbio.alignment.TabularMSA.__bool__", "generated/skbio.alignment.TabularMSA.__contains__", "generated/skbio.alignment.TabularMSA.__copy__", "generated/skbio.alignment.TabularMSA.__deepcopy__", "generated/skbio.alignment.TabularMSA.__eq__", "generated/skbio.alignment.TabularMSA.__ge__", "generated/skbio.alignment.TabularMSA.__getitem__", "generated/skbio.alignment.TabularMSA.__getstate__", "generated/skbio.alignment.TabularMSA.__gt__", "generated/skbio.alignment.TabularMSA.__iter__", "generated/skbio.alignment.TabularMSA.__le__", "generated/skbio.alignment.TabularMSA.__len__", "generated/skbio.alignment.TabularMSA.__lt__", "generated/skbio.alignment.TabularMSA.__ne__", "generated/skbio.alignment.TabularMSA.__reversed__", "generated/skbio.alignment.TabularMSA.__str__", "generated/skbio.alignment.TabularMSA.append", "generated/skbio.alignment.TabularMSA.consensus", "generated/skbio.alignment.TabularMSA.conservation", "generated/skbio.alignment.TabularMSA.extend", "generated/skbio.alignment.TabularMSA.from_dict", "generated/skbio.alignment.TabularMSA.gap_frequencies", "generated/skbio.alignment.TabularMSA.has_metadata", "generated/skbio.alignment.TabularMSA.has_positional_metadata", "generated/skbio.alignment.TabularMSA.iter_positions", "generated/skbio.alignment.TabularMSA.join", "generated/skbio.alignment.TabularMSA.read", "generated/skbio.alignment.TabularMSA.reassign_index", "generated/skbio.alignment.TabularMSA.sort", "generated/skbio.alignment.TabularMSA.to_dict", "generated/skbio.alignment.TabularMSA.write", "generated/skbio.alignment.global_pairwise_align", "generated/skbio.alignment.global_pairwise_align_nucleotide", "generated/skbio.alignment.global_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align", "generated/skbio.alignment.local_pairwise_align_nucleotide", "generated/skbio.alignment.local_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align_ssw", "generated/skbio.alignment.make_identity_substitution_matrix", "generated/skbio.diversity.alpha", "generated/skbio.diversity.alpha.ace", "generated/skbio.diversity.alpha.berger_parker_d", "generated/skbio.diversity.alpha.brillouin_d", "generated/skbio.diversity.alpha.chao1", "generated/skbio.diversity.alpha.chao1_ci", "generated/skbio.diversity.alpha.dominance", "generated/skbio.diversity.alpha.doubles", "generated/skbio.diversity.alpha.enspie", "generated/skbio.diversity.alpha.esty_ci", "generated/skbio.diversity.alpha.faith_pd", "generated/skbio.diversity.alpha.fisher_alpha", "generated/skbio.diversity.alpha.gini_index", "generated/skbio.diversity.alpha.goods_coverage", "generated/skbio.diversity.alpha.heip_e", "generated/skbio.diversity.alpha.kempton_taylor_q", "generated/skbio.diversity.alpha.lladser_ci", "generated/skbio.diversity.alpha.lladser_pe", "generated/skbio.diversity.alpha.margalef", "generated/skbio.diversity.alpha.mcintosh_d", "generated/skbio.diversity.alpha.mcintosh_e", "generated/skbio.diversity.alpha.menhinick", "generated/skbio.diversity.alpha.michaelis_menten_fit", "generated/skbio.diversity.alpha.observed_features", "generated/skbio.diversity.alpha.observed_otus", "generated/skbio.diversity.alpha.osd", "generated/skbio.diversity.alpha.phydiv", "generated/skbio.diversity.alpha.pielou_e", "generated/skbio.diversity.alpha.robbins", "generated/skbio.diversity.alpha.shannon", "generated/skbio.diversity.alpha.simpson", "generated/skbio.diversity.alpha.simpson_e", "generated/skbio.diversity.alpha.singles", "generated/skbio.diversity.alpha.sobs", "generated/skbio.diversity.alpha.strong", "generated/skbio.diversity.alpha_diversity", "generated/skbio.diversity.beta", "generated/skbio.diversity.beta.unweighted_unifrac", "generated/skbio.diversity.beta.weighted_unifrac", "generated/skbio.diversity.beta_diversity", "generated/skbio.diversity.block_beta_diversity", "generated/skbio.diversity.get_alpha_diversity_metrics", "generated/skbio.diversity.get_beta_diversity_metrics", "generated/skbio.diversity.partial_beta_diversity", "generated/skbio.io.ArgumentOverrideWarning", "generated/skbio.io.BLAST7FormatError", "generated/skbio.io.ClustalFormatError", "generated/skbio.io.EMBLFormatError", "generated/skbio.io.FASTAFormatError", "generated/skbio.io.FASTQFormatError", "generated/skbio.io.FileFormatError", "generated/skbio.io.FormatIdentificationWarning", "generated/skbio.io.GFF3FormatError", "generated/skbio.io.GenBankFormatError", "generated/skbio.io.IOSourceError", "generated/skbio.io.LSMatFormatError", "generated/skbio.io.NewickFormatError", "generated/skbio.io.OrdinationFormatError", "generated/skbio.io.PhylipFormatError", "generated/skbio.io.QSeqFormatError", "generated/skbio.io.QUALFormatError", "generated/skbio.io.StockholmFormatError", "generated/skbio.io.UnrecognizedFormatError", "generated/skbio.io.format.binary_dm", "generated/skbio.io.format.blast6", "generated/skbio.io.format.blast7", "generated/skbio.io.format.clustal", "generated/skbio.io.format.embl", "generated/skbio.io.format.fasta", "generated/skbio.io.format.fastq", "generated/skbio.io.format.genbank", "generated/skbio.io.format.gff3", "generated/skbio.io.format.lsmat", "generated/skbio.io.format.newick", "generated/skbio.io.format.ordination", "generated/skbio.io.format.phylip", "generated/skbio.io.format.qseq", "generated/skbio.io.format.stockholm", "generated/skbio.io.format.taxdump", "generated/skbio.io.registry", "generated/skbio.io.registry.DuplicateRegistrationError", "generated/skbio.io.registry.Format", "generated/skbio.io.registry.Format.__eq__", "generated/skbio.io.registry.Format.__ge__", "generated/skbio.io.registry.Format.__getstate__", "generated/skbio.io.registry.Format.__gt__", "generated/skbio.io.registry.Format.__hash__", "generated/skbio.io.registry.Format.__le__", "generated/skbio.io.registry.Format.__lt__", "generated/skbio.io.registry.Format.__ne__", "generated/skbio.io.registry.Format.__str__", "generated/skbio.io.registry.Format.reader", "generated/skbio.io.registry.Format.sniffer", "generated/skbio.io.registry.Format.writer", "generated/skbio.io.registry.IORegistry", "generated/skbio.io.registry.IORegistry.__eq__", "generated/skbio.io.registry.IORegistry.__ge__", "generated/skbio.io.registry.IORegistry.__getstate__", "generated/skbio.io.registry.IORegistry.__gt__", "generated/skbio.io.registry.IORegistry.__hash__", "generated/skbio.io.registry.IORegistry.__le__", "generated/skbio.io.registry.IORegistry.__lt__", "generated/skbio.io.registry.IORegistry.__ne__", "generated/skbio.io.registry.IORegistry.__str__", "generated/skbio.io.registry.IORegistry.add_format", "generated/skbio.io.registry.IORegistry.create_format", "generated/skbio.io.registry.IORegistry.get_reader", "generated/skbio.io.registry.IORegistry.get_sniffer", "generated/skbio.io.registry.IORegistry.get_writer", "generated/skbio.io.registry.IORegistry.list_read_formats", "generated/skbio.io.registry.IORegistry.list_write_formats", "generated/skbio.io.registry.IORegistry.monkey_patch", "generated/skbio.io.registry.IORegistry.read", "generated/skbio.io.registry.IORegistry.sniff", "generated/skbio.io.registry.IORegistry.write", "generated/skbio.io.registry.InvalidRegistrationError", "generated/skbio.io.registry.create_format", "generated/skbio.io.registry.read", "generated/skbio.io.registry.sniff", "generated/skbio.io.registry.write", "generated/skbio.io.util", "generated/skbio.io.util.open", "generated/skbio.io.util.open_file", "generated/skbio.io.util.open_files", "generated/skbio.metadata.Interval", "generated/skbio.metadata.Interval.__eq__", "generated/skbio.metadata.Interval.__ge__", "generated/skbio.metadata.Interval.__getstate__", "generated/skbio.metadata.Interval.__gt__", "generated/skbio.metadata.Interval.__le__", "generated/skbio.metadata.Interval.__lt__", "generated/skbio.metadata.Interval.__ne__", "generated/skbio.metadata.Interval.__str__", "generated/skbio.metadata.Interval.drop", "generated/skbio.metadata.IntervalMetadata", "generated/skbio.metadata.IntervalMetadata.__copy__", "generated/skbio.metadata.IntervalMetadata.__deepcopy__", "generated/skbio.metadata.IntervalMetadata.__eq__", "generated/skbio.metadata.IntervalMetadata.__ge__", "generated/skbio.metadata.IntervalMetadata.__getstate__", "generated/skbio.metadata.IntervalMetadata.__gt__", "generated/skbio.metadata.IntervalMetadata.__le__", "generated/skbio.metadata.IntervalMetadata.__lt__", "generated/skbio.metadata.IntervalMetadata.__ne__", "generated/skbio.metadata.IntervalMetadata.__str__", "generated/skbio.metadata.IntervalMetadata.add", "generated/skbio.metadata.IntervalMetadata.concat", "generated/skbio.metadata.IntervalMetadata.drop", "generated/skbio.metadata.IntervalMetadata.merge", "generated/skbio.metadata.IntervalMetadata.query", "generated/skbio.metadata.IntervalMetadata.read", "generated/skbio.metadata.IntervalMetadata.sort", "generated/skbio.metadata.IntervalMetadata.write", "generated/skbio.sequence.DNA", "generated/skbio.sequence.DNA.__bool__", "generated/skbio.sequence.DNA.__contains__", "generated/skbio.sequence.DNA.__copy__", "generated/skbio.sequence.DNA.__deepcopy__", "generated/skbio.sequence.DNA.__eq__", "generated/skbio.sequence.DNA.__ge__", "generated/skbio.sequence.DNA.__getitem__", "generated/skbio.sequence.DNA.__getstate__", "generated/skbio.sequence.DNA.__gt__", "generated/skbio.sequence.DNA.__iter__", "generated/skbio.sequence.DNA.__le__", "generated/skbio.sequence.DNA.__len__", "generated/skbio.sequence.DNA.__lt__", "generated/skbio.sequence.DNA.__ne__", "generated/skbio.sequence.DNA.__reversed__", "generated/skbio.sequence.DNA.__str__", "generated/skbio.sequence.DNA.complement", "generated/skbio.sequence.DNA.concat", "generated/skbio.sequence.DNA.count", "generated/skbio.sequence.DNA.definites", "generated/skbio.sequence.DNA.degap", "generated/skbio.sequence.DNA.degenerates", "generated/skbio.sequence.DNA.distance", "generated/skbio.sequence.DNA.expand_degenerates", "generated/skbio.sequence.DNA.find_motifs", "generated/skbio.sequence.DNA.find_with_regex", "generated/skbio.sequence.DNA.frequencies", "generated/skbio.sequence.DNA.gaps", "generated/skbio.sequence.DNA.gc_content", "generated/skbio.sequence.DNA.gc_frequency", "generated/skbio.sequence.DNA.has_definites", "generated/skbio.sequence.DNA.has_degenerates", "generated/skbio.sequence.DNA.has_gaps", "generated/skbio.sequence.DNA.has_interval_metadata", "generated/skbio.sequence.DNA.has_metadata", "generated/skbio.sequence.DNA.has_nondegenerates", "generated/skbio.sequence.DNA.has_positional_metadata", "generated/skbio.sequence.DNA.index", "generated/skbio.sequence.DNA.is_reverse_complement", "generated/skbio.sequence.DNA.iter_contiguous", "generated/skbio.sequence.DNA.iter_kmers", "generated/skbio.sequence.DNA.kmer_frequencies", "generated/skbio.sequence.DNA.lowercase", "generated/skbio.sequence.DNA.match_frequency", "generated/skbio.sequence.DNA.matches", "generated/skbio.sequence.DNA.mismatch_frequency", "generated/skbio.sequence.DNA.mismatches", "generated/skbio.sequence.DNA.nondegenerates", "generated/skbio.sequence.DNA.read", "generated/skbio.sequence.DNA.replace", "generated/skbio.sequence.DNA.reverse_complement", "generated/skbio.sequence.DNA.to_regex", "generated/skbio.sequence.DNA.transcribe", "generated/skbio.sequence.DNA.translate", "generated/skbio.sequence.DNA.translate_six_frames", "generated/skbio.sequence.DNA.write", "generated/skbio.sequence.GeneticCode", "generated/skbio.sequence.GeneticCode.__eq__", "generated/skbio.sequence.GeneticCode.__ge__", "generated/skbio.sequence.GeneticCode.__getstate__", "generated/skbio.sequence.GeneticCode.__gt__", "generated/skbio.sequence.GeneticCode.__le__", "generated/skbio.sequence.GeneticCode.__lt__", "generated/skbio.sequence.GeneticCode.__ne__", "generated/skbio.sequence.GeneticCode.__str__", "generated/skbio.sequence.GeneticCode.from_ncbi", "generated/skbio.sequence.GeneticCode.translate", "generated/skbio.sequence.GeneticCode.translate_six_frames", "generated/skbio.sequence.GrammaredSequence", "generated/skbio.sequence.GrammaredSequence.__bool__", "generated/skbio.sequence.GrammaredSequence.__contains__", "generated/skbio.sequence.GrammaredSequence.__copy__", "generated/skbio.sequence.GrammaredSequence.__deepcopy__", "generated/skbio.sequence.GrammaredSequence.__eq__", "generated/skbio.sequence.GrammaredSequence.__ge__", "generated/skbio.sequence.GrammaredSequence.__getitem__", "generated/skbio.sequence.GrammaredSequence.__getstate__", "generated/skbio.sequence.GrammaredSequence.__gt__", "generated/skbio.sequence.GrammaredSequence.__iter__", "generated/skbio.sequence.GrammaredSequence.__le__", "generated/skbio.sequence.GrammaredSequence.__len__", "generated/skbio.sequence.GrammaredSequence.__lt__", "generated/skbio.sequence.GrammaredSequence.__ne__", "generated/skbio.sequence.GrammaredSequence.__reversed__", "generated/skbio.sequence.GrammaredSequence.__str__", "generated/skbio.sequence.GrammaredSequence.concat", "generated/skbio.sequence.GrammaredSequence.count", "generated/skbio.sequence.GrammaredSequence.definites", "generated/skbio.sequence.GrammaredSequence.degap", "generated/skbio.sequence.GrammaredSequence.degenerates", "generated/skbio.sequence.GrammaredSequence.distance", "generated/skbio.sequence.GrammaredSequence.expand_degenerates", "generated/skbio.sequence.GrammaredSequence.find_motifs", "generated/skbio.sequence.GrammaredSequence.find_with_regex", "generated/skbio.sequence.GrammaredSequence.frequencies", "generated/skbio.sequence.GrammaredSequence.gaps", "generated/skbio.sequence.GrammaredSequence.has_definites", "generated/skbio.sequence.GrammaredSequence.has_degenerates", "generated/skbio.sequence.GrammaredSequence.has_gaps", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata", "generated/skbio.sequence.GrammaredSequence.has_metadata", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata", "generated/skbio.sequence.GrammaredSequence.index", "generated/skbio.sequence.GrammaredSequence.iter_contiguous", "generated/skbio.sequence.GrammaredSequence.iter_kmers", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies", "generated/skbio.sequence.GrammaredSequence.lowercase", "generated/skbio.sequence.GrammaredSequence.match_frequency", "generated/skbio.sequence.GrammaredSequence.matches", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency", "generated/skbio.sequence.GrammaredSequence.mismatches", "generated/skbio.sequence.GrammaredSequence.nondegenerates", "generated/skbio.sequence.GrammaredSequence.read", "generated/skbio.sequence.GrammaredSequence.replace", "generated/skbio.sequence.GrammaredSequence.to_regex", "generated/skbio.sequence.GrammaredSequence.write", "generated/skbio.sequence.Protein", "generated/skbio.sequence.Protein.__bool__", "generated/skbio.sequence.Protein.__contains__", "generated/skbio.sequence.Protein.__copy__", "generated/skbio.sequence.Protein.__deepcopy__", "generated/skbio.sequence.Protein.__eq__", "generated/skbio.sequence.Protein.__ge__", "generated/skbio.sequence.Protein.__getitem__", "generated/skbio.sequence.Protein.__getstate__", "generated/skbio.sequence.Protein.__gt__", "generated/skbio.sequence.Protein.__iter__", "generated/skbio.sequence.Protein.__le__", "generated/skbio.sequence.Protein.__len__", "generated/skbio.sequence.Protein.__lt__", "generated/skbio.sequence.Protein.__ne__", "generated/skbio.sequence.Protein.__reversed__", "generated/skbio.sequence.Protein.__str__", "generated/skbio.sequence.Protein.concat", "generated/skbio.sequence.Protein.count", "generated/skbio.sequence.Protein.definites", "generated/skbio.sequence.Protein.degap", "generated/skbio.sequence.Protein.degenerates", "generated/skbio.sequence.Protein.distance", "generated/skbio.sequence.Protein.expand_degenerates", "generated/skbio.sequence.Protein.find_motifs", "generated/skbio.sequence.Protein.find_with_regex", "generated/skbio.sequence.Protein.frequencies", "generated/skbio.sequence.Protein.gaps", "generated/skbio.sequence.Protein.has_definites", "generated/skbio.sequence.Protein.has_degenerates", "generated/skbio.sequence.Protein.has_gaps", "generated/skbio.sequence.Protein.has_interval_metadata", "generated/skbio.sequence.Protein.has_metadata", "generated/skbio.sequence.Protein.has_nondegenerates", "generated/skbio.sequence.Protein.has_positional_metadata", "generated/skbio.sequence.Protein.has_stops", "generated/skbio.sequence.Protein.index", "generated/skbio.sequence.Protein.iter_contiguous", "generated/skbio.sequence.Protein.iter_kmers", "generated/skbio.sequence.Protein.kmer_frequencies", "generated/skbio.sequence.Protein.lowercase", "generated/skbio.sequence.Protein.match_frequency", "generated/skbio.sequence.Protein.matches", "generated/skbio.sequence.Protein.mismatch_frequency", "generated/skbio.sequence.Protein.mismatches", "generated/skbio.sequence.Protein.nondegenerates", "generated/skbio.sequence.Protein.read", "generated/skbio.sequence.Protein.replace", "generated/skbio.sequence.Protein.stops", "generated/skbio.sequence.Protein.to_regex", "generated/skbio.sequence.Protein.write", "generated/skbio.sequence.RNA", "generated/skbio.sequence.RNA.__bool__", "generated/skbio.sequence.RNA.__contains__", "generated/skbio.sequence.RNA.__copy__", "generated/skbio.sequence.RNA.__deepcopy__", "generated/skbio.sequence.RNA.__eq__", "generated/skbio.sequence.RNA.__ge__", "generated/skbio.sequence.RNA.__getitem__", "generated/skbio.sequence.RNA.__getstate__", "generated/skbio.sequence.RNA.__gt__", "generated/skbio.sequence.RNA.__iter__", "generated/skbio.sequence.RNA.__le__", "generated/skbio.sequence.RNA.__len__", "generated/skbio.sequence.RNA.__lt__", "generated/skbio.sequence.RNA.__ne__", "generated/skbio.sequence.RNA.__reversed__", "generated/skbio.sequence.RNA.__str__", "generated/skbio.sequence.RNA.complement", "generated/skbio.sequence.RNA.concat", "generated/skbio.sequence.RNA.count", "generated/skbio.sequence.RNA.definites", "generated/skbio.sequence.RNA.degap", "generated/skbio.sequence.RNA.degenerates", "generated/skbio.sequence.RNA.distance", "generated/skbio.sequence.RNA.expand_degenerates", "generated/skbio.sequence.RNA.find_motifs", "generated/skbio.sequence.RNA.find_with_regex", "generated/skbio.sequence.RNA.frequencies", "generated/skbio.sequence.RNA.gaps", "generated/skbio.sequence.RNA.gc_content", "generated/skbio.sequence.RNA.gc_frequency", "generated/skbio.sequence.RNA.has_definites", "generated/skbio.sequence.RNA.has_degenerates", "generated/skbio.sequence.RNA.has_gaps", "generated/skbio.sequence.RNA.has_interval_metadata", "generated/skbio.sequence.RNA.has_metadata", "generated/skbio.sequence.RNA.has_nondegenerates", "generated/skbio.sequence.RNA.has_positional_metadata", "generated/skbio.sequence.RNA.index", "generated/skbio.sequence.RNA.is_reverse_complement", "generated/skbio.sequence.RNA.iter_contiguous", "generated/skbio.sequence.RNA.iter_kmers", "generated/skbio.sequence.RNA.kmer_frequencies", "generated/skbio.sequence.RNA.lowercase", "generated/skbio.sequence.RNA.match_frequency", "generated/skbio.sequence.RNA.matches", "generated/skbio.sequence.RNA.mismatch_frequency", "generated/skbio.sequence.RNA.mismatches", "generated/skbio.sequence.RNA.nondegenerates", "generated/skbio.sequence.RNA.read", "generated/skbio.sequence.RNA.replace", "generated/skbio.sequence.RNA.reverse_complement", "generated/skbio.sequence.RNA.reverse_transcribe", "generated/skbio.sequence.RNA.to_regex", "generated/skbio.sequence.RNA.translate", "generated/skbio.sequence.RNA.translate_six_frames", "generated/skbio.sequence.RNA.write", "generated/skbio.sequence.Sequence", "generated/skbio.sequence.Sequence.__bool__", "generated/skbio.sequence.Sequence.__contains__", "generated/skbio.sequence.Sequence.__copy__", "generated/skbio.sequence.Sequence.__deepcopy__", "generated/skbio.sequence.Sequence.__eq__", "generated/skbio.sequence.Sequence.__ge__", "generated/skbio.sequence.Sequence.__getitem__", "generated/skbio.sequence.Sequence.__getstate__", "generated/skbio.sequence.Sequence.__gt__", "generated/skbio.sequence.Sequence.__iter__", "generated/skbio.sequence.Sequence.__le__", "generated/skbio.sequence.Sequence.__len__", "generated/skbio.sequence.Sequence.__lt__", "generated/skbio.sequence.Sequence.__ne__", "generated/skbio.sequence.Sequence.__reversed__", "generated/skbio.sequence.Sequence.__str__", "generated/skbio.sequence.Sequence.concat", "generated/skbio.sequence.Sequence.count", "generated/skbio.sequence.Sequence.distance", "generated/skbio.sequence.Sequence.find_with_regex", "generated/skbio.sequence.Sequence.frequencies", "generated/skbio.sequence.Sequence.has_interval_metadata", "generated/skbio.sequence.Sequence.has_metadata", "generated/skbio.sequence.Sequence.has_positional_metadata", "generated/skbio.sequence.Sequence.index", "generated/skbio.sequence.Sequence.iter_contiguous", "generated/skbio.sequence.Sequence.iter_kmers", "generated/skbio.sequence.Sequence.kmer_frequencies", "generated/skbio.sequence.Sequence.lowercase", "generated/skbio.sequence.Sequence.match_frequency", "generated/skbio.sequence.Sequence.matches", "generated/skbio.sequence.Sequence.mismatch_frequency", "generated/skbio.sequence.Sequence.mismatches", "generated/skbio.sequence.Sequence.read", "generated/skbio.sequence.Sequence.replace", "generated/skbio.sequence.Sequence.write", "generated/skbio.sequence.SubstitutionMatrix", "generated/skbio.sequence.SubstitutionMatrix.__contains__", "generated/skbio.sequence.SubstitutionMatrix.__eq__", "generated/skbio.sequence.SubstitutionMatrix.__ge__", "generated/skbio.sequence.SubstitutionMatrix.__getitem__", "generated/skbio.sequence.SubstitutionMatrix.__getstate__", "generated/skbio.sequence.SubstitutionMatrix.__gt__", "generated/skbio.sequence.SubstitutionMatrix.__le__", "generated/skbio.sequence.SubstitutionMatrix.__lt__", "generated/skbio.sequence.SubstitutionMatrix.__ne__", "generated/skbio.sequence.SubstitutionMatrix.__str__", "generated/skbio.sequence.SubstitutionMatrix.between", "generated/skbio.sequence.SubstitutionMatrix.by_name", "generated/skbio.sequence.SubstitutionMatrix.copy", "generated/skbio.sequence.SubstitutionMatrix.filter", "generated/skbio.sequence.SubstitutionMatrix.from_dict", "generated/skbio.sequence.SubstitutionMatrix.from_iterable", "generated/skbio.sequence.SubstitutionMatrix.get_names", "generated/skbio.sequence.SubstitutionMatrix.identity", "generated/skbio.sequence.SubstitutionMatrix.index", "generated/skbio.sequence.SubstitutionMatrix.plot", "generated/skbio.sequence.SubstitutionMatrix.read", "generated/skbio.sequence.SubstitutionMatrix.redundant_form", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame", "generated/skbio.sequence.SubstitutionMatrix.to_dict", "generated/skbio.sequence.SubstitutionMatrix.transpose", "generated/skbio.sequence.SubstitutionMatrix.within", "generated/skbio.sequence.SubstitutionMatrix.write", "generated/skbio.sequence.distance", "generated/skbio.sequence.distance.hamming", "generated/skbio.sequence.distance.kmer_distance", "generated/skbio.stats.composition", "generated/skbio.stats.composition.alr", "generated/skbio.stats.composition.alr_inv", "generated/skbio.stats.composition.ancom", "generated/skbio.stats.composition.centralize", "generated/skbio.stats.composition.closure", "generated/skbio.stats.composition.clr", "generated/skbio.stats.composition.clr_inv", "generated/skbio.stats.composition.ilr", "generated/skbio.stats.composition.ilr_inv", "generated/skbio.stats.composition.inner", "generated/skbio.stats.composition.multiplicative_replacement", "generated/skbio.stats.composition.pairwise_vlr", "generated/skbio.stats.composition.perturb", "generated/skbio.stats.composition.perturb_inv", "generated/skbio.stats.composition.power", "generated/skbio.stats.composition.sbp_basis", "generated/skbio.stats.composition.tree_basis", "generated/skbio.stats.composition.vlr", "generated/skbio.stats.distance", "generated/skbio.stats.distance.DissimilarityMatrix", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__", "generated/skbio.stats.distance.DissimilarityMatrix.__le__", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__", "generated/skbio.stats.distance.DissimilarityMatrix.__str__", "generated/skbio.stats.distance.DissimilarityMatrix.between", "generated/skbio.stats.distance.DissimilarityMatrix.copy", "generated/skbio.stats.distance.DissimilarityMatrix.filter", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable", "generated/skbio.stats.distance.DissimilarityMatrix.index", "generated/skbio.stats.distance.DissimilarityMatrix.plot", "generated/skbio.stats.distance.DissimilarityMatrix.read", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame", "generated/skbio.stats.distance.DissimilarityMatrix.transpose", "generated/skbio.stats.distance.DissimilarityMatrix.within", "generated/skbio.stats.distance.DissimilarityMatrix.write", "generated/skbio.stats.distance.DissimilarityMatrixError", "generated/skbio.stats.distance.DistanceMatrix", "generated/skbio.stats.distance.DistanceMatrix.__contains__", "generated/skbio.stats.distance.DistanceMatrix.__eq__", "generated/skbio.stats.distance.DistanceMatrix.__ge__", "generated/skbio.stats.distance.DistanceMatrix.__getitem__", "generated/skbio.stats.distance.DistanceMatrix.__getstate__", "generated/skbio.stats.distance.DistanceMatrix.__gt__", "generated/skbio.stats.distance.DistanceMatrix.__le__", "generated/skbio.stats.distance.DistanceMatrix.__lt__", "generated/skbio.stats.distance.DistanceMatrix.__ne__", "generated/skbio.stats.distance.DistanceMatrix.__str__", "generated/skbio.stats.distance.DistanceMatrix.between", "generated/skbio.stats.distance.DistanceMatrix.condensed_form", "generated/skbio.stats.distance.DistanceMatrix.copy", "generated/skbio.stats.distance.DistanceMatrix.filter", "generated/skbio.stats.distance.DistanceMatrix.from_iterable", "generated/skbio.stats.distance.DistanceMatrix.index", "generated/skbio.stats.distance.DistanceMatrix.permute", "generated/skbio.stats.distance.DistanceMatrix.plot", "generated/skbio.stats.distance.DistanceMatrix.read", "generated/skbio.stats.distance.DistanceMatrix.redundant_form", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame", "generated/skbio.stats.distance.DistanceMatrix.to_series", "generated/skbio.stats.distance.DistanceMatrix.transpose", "generated/skbio.stats.distance.DistanceMatrix.within", "generated/skbio.stats.distance.DistanceMatrix.write", "generated/skbio.stats.distance.DistanceMatrixError", "generated/skbio.stats.distance.MissingIDError", "generated/skbio.stats.distance.anosim", "generated/skbio.stats.distance.bioenv", "generated/skbio.stats.distance.mantel", "generated/skbio.stats.distance.permanova", "generated/skbio.stats.distance.permdisp", "generated/skbio.stats.distance.pwmantel", "generated/skbio.stats.distance.randdm", "generated/skbio.stats.evolve", "generated/skbio.stats.evolve.hommola_cospeciation", "generated/skbio.stats.gradient", "generated/skbio.stats.gradient.AverageGradientANOVA", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.CategoryResults", "generated/skbio.stats.gradient.CategoryResults.__eq__", "generated/skbio.stats.gradient.CategoryResults.__ge__", "generated/skbio.stats.gradient.CategoryResults.__getstate__", "generated/skbio.stats.gradient.CategoryResults.__gt__", "generated/skbio.stats.gradient.CategoryResults.__hash__", "generated/skbio.stats.gradient.CategoryResults.__le__", "generated/skbio.stats.gradient.CategoryResults.__lt__", "generated/skbio.stats.gradient.CategoryResults.__ne__", "generated/skbio.stats.gradient.CategoryResults.__str__", "generated/skbio.stats.gradient.CategoryResults.to_files", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVA", "generated/skbio.stats.gradient.GradientANOVA.__eq__", "generated/skbio.stats.gradient.GradientANOVA.__ge__", "generated/skbio.stats.gradient.GradientANOVA.__getstate__", "generated/skbio.stats.gradient.GradientANOVA.__gt__", "generated/skbio.stats.gradient.GradientANOVA.__hash__", "generated/skbio.stats.gradient.GradientANOVA.__le__", "generated/skbio.stats.gradient.GradientANOVA.__lt__", "generated/skbio.stats.gradient.GradientANOVA.__ne__", "generated/skbio.stats.gradient.GradientANOVA.__str__", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVAResults", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__", "generated/skbio.stats.gradient.GradientANOVAResults.__le__", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__", "generated/skbio.stats.gradient.GradientANOVAResults.__str__", "generated/skbio.stats.gradient.GradientANOVAResults.to_files", "generated/skbio.stats.gradient.GroupResults", "generated/skbio.stats.gradient.GroupResults.__eq__", "generated/skbio.stats.gradient.GroupResults.__ge__", "generated/skbio.stats.gradient.GroupResults.__getstate__", "generated/skbio.stats.gradient.GroupResults.__gt__", "generated/skbio.stats.gradient.GroupResults.__hash__", "generated/skbio.stats.gradient.GroupResults.__le__", "generated/skbio.stats.gradient.GroupResults.__lt__", "generated/skbio.stats.gradient.GroupResults.__ne__", "generated/skbio.stats.gradient.GroupResults.__str__", "generated/skbio.stats.gradient.GroupResults.to_files", "generated/skbio.stats.gradient.TrajectoryGradientANOVA", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.isubsample", "generated/skbio.stats.ordination", "generated/skbio.stats.ordination.OrdinationResults", "generated/skbio.stats.ordination.OrdinationResults.__eq__", "generated/skbio.stats.ordination.OrdinationResults.__ge__", "generated/skbio.stats.ordination.OrdinationResults.__getstate__", "generated/skbio.stats.ordination.OrdinationResults.__gt__", "generated/skbio.stats.ordination.OrdinationResults.__hash__", "generated/skbio.stats.ordination.OrdinationResults.__le__", "generated/skbio.stats.ordination.OrdinationResults.__lt__", "generated/skbio.stats.ordination.OrdinationResults.__ne__", "generated/skbio.stats.ordination.OrdinationResults.__str__", "generated/skbio.stats.ordination.OrdinationResults.plot", "generated/skbio.stats.ordination.OrdinationResults.read", "generated/skbio.stats.ordination.OrdinationResults.write", "generated/skbio.stats.ordination.ca", "generated/skbio.stats.ordination.cca", "generated/skbio.stats.ordination.corr", "generated/skbio.stats.ordination.e_matrix", "generated/skbio.stats.ordination.f_matrix", "generated/skbio.stats.ordination.mean_and_std", "generated/skbio.stats.ordination.pcoa", "generated/skbio.stats.ordination.pcoa_biplot", "generated/skbio.stats.ordination.rda", "generated/skbio.stats.ordination.scale", "generated/skbio.stats.ordination.svd_rank", "generated/skbio.stats.power", "generated/skbio.stats.power.confidence_bound", "generated/skbio.stats.power.paired_subsamples", "generated/skbio.stats.power.subsample_paired_power", "generated/skbio.stats.power.subsample_power", "generated/skbio.stats.subsample_counts", "generated/skbio.tree.DuplicateNodeError", "generated/skbio.tree.MissingNodeError", "generated/skbio.tree.NoLengthError", "generated/skbio.tree.NoParentError", "generated/skbio.tree.TreeError", "generated/skbio.tree.TreeNode", "generated/skbio.tree.TreeNode.__copy__", "generated/skbio.tree.TreeNode.__deepcopy__", "generated/skbio.tree.TreeNode.__eq__", "generated/skbio.tree.TreeNode.__ge__", "generated/skbio.tree.TreeNode.__getitem__", "generated/skbio.tree.TreeNode.__getstate__", "generated/skbio.tree.TreeNode.__gt__", "generated/skbio.tree.TreeNode.__hash__", "generated/skbio.tree.TreeNode.__iter__", "generated/skbio.tree.TreeNode.__le__", "generated/skbio.tree.TreeNode.__len__", "generated/skbio.tree.TreeNode.__lt__", "generated/skbio.tree.TreeNode.__ne__", "generated/skbio.tree.TreeNode.__str__", "generated/skbio.tree.TreeNode.accumulate_to_ancestor", "generated/skbio.tree.TreeNode.ancestors", "generated/skbio.tree.TreeNode.append", "generated/skbio.tree.TreeNode.ascii_art", "generated/skbio.tree.TreeNode.assign_ids", "generated/skbio.tree.TreeNode.assign_supports", "generated/skbio.tree.TreeNode.bifurcate", "generated/skbio.tree.TreeNode.cache_attr", "generated/skbio.tree.TreeNode.compare_rfd", "generated/skbio.tree.TreeNode.compare_subsets", "generated/skbio.tree.TreeNode.compare_tip_distances", "generated/skbio.tree.TreeNode.copy", "generated/skbio.tree.TreeNode.count", "generated/skbio.tree.TreeNode.create_caches", "generated/skbio.tree.TreeNode.deepcopy", "generated/skbio.tree.TreeNode.descending_branch_length", "generated/skbio.tree.TreeNode.distance", "generated/skbio.tree.TreeNode.extend", "generated/skbio.tree.TreeNode.find", "generated/skbio.tree.TreeNode.find_all", "generated/skbio.tree.TreeNode.find_by_func", "generated/skbio.tree.TreeNode.find_by_id", "generated/skbio.tree.TreeNode.from_linkage_matrix", "generated/skbio.tree.TreeNode.from_taxdump", "generated/skbio.tree.TreeNode.from_taxonomy", "generated/skbio.tree.TreeNode.get_max_distance", "generated/skbio.tree.TreeNode.has_children", "generated/skbio.tree.TreeNode.index_tree", "generated/skbio.tree.TreeNode.invalidate_caches", "generated/skbio.tree.TreeNode.is_root", "generated/skbio.tree.TreeNode.is_tip", "generated/skbio.tree.TreeNode.lca", "generated/skbio.tree.TreeNode.levelorder", "generated/skbio.tree.TreeNode.lowest_common_ancestor", "generated/skbio.tree.TreeNode.neighbors", "generated/skbio.tree.TreeNode.non_tips", "generated/skbio.tree.TreeNode.observed_node_counts", "generated/skbio.tree.TreeNode.pop", "generated/skbio.tree.TreeNode.postorder", "generated/skbio.tree.TreeNode.pre_and_postorder", "generated/skbio.tree.TreeNode.preorder", "generated/skbio.tree.TreeNode.prune", "generated/skbio.tree.TreeNode.read", "generated/skbio.tree.TreeNode.remove", "generated/skbio.tree.TreeNode.remove_deleted", "generated/skbio.tree.TreeNode.root", "generated/skbio.tree.TreeNode.root_at", "generated/skbio.tree.TreeNode.root_at_midpoint", "generated/skbio.tree.TreeNode.shear", "generated/skbio.tree.TreeNode.shuffle", "generated/skbio.tree.TreeNode.siblings", "generated/skbio.tree.TreeNode.subset", "generated/skbio.tree.TreeNode.subsets", "generated/skbio.tree.TreeNode.subtree", "generated/skbio.tree.TreeNode.tip_tip_distances", "generated/skbio.tree.TreeNode.tips", "generated/skbio.tree.TreeNode.to_array", "generated/skbio.tree.TreeNode.to_taxonomy", "generated/skbio.tree.TreeNode.traverse", "generated/skbio.tree.TreeNode.unpack", "generated/skbio.tree.TreeNode.unpack_by_func", "generated/skbio.tree.TreeNode.unrooted_copy", "generated/skbio.tree.TreeNode.unrooted_deepcopy", "generated/skbio.tree.TreeNode.write", "generated/skbio.tree.majority_rule", "generated/skbio.tree.nj", "generated/skbio.util.EfficiencyWarning", "generated/skbio.util.RepresentationWarning", "generated/skbio.util.assert_data_frame_almost_equal", "generated/skbio.util.assert_ordination_results_equal", "generated/skbio.util.cardinal_to_ordinal", "generated/skbio.util.classproperty", "generated/skbio.util.classproperty.__delete__", "generated/skbio.util.classproperty.__eq__", "generated/skbio.util.classproperty.__ge__", "generated/skbio.util.classproperty.__get__", "generated/skbio.util.classproperty.__getstate__", "generated/skbio.util.classproperty.__gt__", "generated/skbio.util.classproperty.__hash__", "generated/skbio.util.classproperty.__le__", "generated/skbio.util.classproperty.__lt__", "generated/skbio.util.classproperty.__ne__", "generated/skbio.util.classproperty.__set__", "generated/skbio.util.classproperty.__set_name__", "generated/skbio.util.classproperty.__str__", "generated/skbio.util.classproperty.deleter", "generated/skbio.util.classproperty.getter", "generated/skbio.util.classproperty.setter", "generated/skbio.util.find_duplicates", "generated/skbio.util.get_data_path", "generated/skbio.util.safe_md5", "generated/skbio.workflow.Workflow", "generated/skbio.workflow.Workflow.__call__", "generated/skbio.workflow.Workflow.__eq__", "generated/skbio.workflow.Workflow.__ge__", "generated/skbio.workflow.Workflow.__getstate__", "generated/skbio.workflow.Workflow.__gt__", "generated/skbio.workflow.Workflow.__hash__", "generated/skbio.workflow.Workflow.__le__", "generated/skbio.workflow.Workflow.__lt__", "generated/skbio.workflow.Workflow.__ne__", "generated/skbio.workflow.Workflow.__str__", "generated/skbio.workflow.Workflow.initialize_state", "generated/skbio.workflow.method", "generated/skbio.workflow.method.__call__", "generated/skbio.workflow.method.__eq__", "generated/skbio.workflow.method.__ge__", "generated/skbio.workflow.method.__getstate__", "generated/skbio.workflow.method.__gt__", "generated/skbio.workflow.method.__hash__", "generated/skbio.workflow.method.__le__", "generated/skbio.workflow.method.__lt__", "generated/skbio.workflow.method.__ne__", "generated/skbio.workflow.method.__str__", "generated/skbio.workflow.requires", "generated/skbio.workflow.requires.__call__", "generated/skbio.workflow.requires.__eq__", "generated/skbio.workflow.requires.__ge__", "generated/skbio.workflow.requires.__getstate__", "generated/skbio.workflow.requires.__gt__", "generated/skbio.workflow.requires.__hash__", "generated/skbio.workflow.requires.__le__", "generated/skbio.workflow.requires.__lt__", "generated/skbio.workflow.requires.__ne__", "generated/skbio.workflow.requires.__str__", "index", "io", "metadata", "sequence", "stats", "tree", "util", "workflow"], "filenames": ["alignment.rst", "diversity.rst", "generated/skbio.alignment.AlignmentStructure.rst", "generated/skbio.alignment.AlignmentStructure.__eq__.rst", "generated/skbio.alignment.AlignmentStructure.__ge__.rst", "generated/skbio.alignment.AlignmentStructure.__getitem__.rst", "generated/skbio.alignment.AlignmentStructure.__getstate__.rst", "generated/skbio.alignment.AlignmentStructure.__gt__.rst", "generated/skbio.alignment.AlignmentStructure.__hash__.rst", "generated/skbio.alignment.AlignmentStructure.__le__.rst", "generated/skbio.alignment.AlignmentStructure.__lt__.rst", "generated/skbio.alignment.AlignmentStructure.__ne__.rst", "generated/skbio.alignment.AlignmentStructure.__setstate__.rst", "generated/skbio.alignment.AlignmentStructure.__str__.rst", "generated/skbio.alignment.AlignmentStructure.is_zero_based.rst", "generated/skbio.alignment.AlignmentStructure.set_zero_based.rst", "generated/skbio.alignment.StripedSmithWaterman.rst", "generated/skbio.alignment.StripedSmithWaterman.__call__.rst", "generated/skbio.alignment.StripedSmithWaterman.__eq__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ge__.rst", "generated/skbio.alignment.StripedSmithWaterman.__getstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__gt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__hash__.rst", "generated/skbio.alignment.StripedSmithWaterman.__le__.rst", "generated/skbio.alignment.StripedSmithWaterman.__lt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ne__.rst", "generated/skbio.alignment.StripedSmithWaterman.__setstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__str__.rst", "generated/skbio.alignment.TabularMSA.rst", "generated/skbio.alignment.TabularMSA.__bool__.rst", "generated/skbio.alignment.TabularMSA.__contains__.rst", "generated/skbio.alignment.TabularMSA.__copy__.rst", "generated/skbio.alignment.TabularMSA.__deepcopy__.rst", "generated/skbio.alignment.TabularMSA.__eq__.rst", "generated/skbio.alignment.TabularMSA.__ge__.rst", "generated/skbio.alignment.TabularMSA.__getitem__.rst", "generated/skbio.alignment.TabularMSA.__getstate__.rst", "generated/skbio.alignment.TabularMSA.__gt__.rst", "generated/skbio.alignment.TabularMSA.__iter__.rst", "generated/skbio.alignment.TabularMSA.__le__.rst", "generated/skbio.alignment.TabularMSA.__len__.rst", "generated/skbio.alignment.TabularMSA.__lt__.rst", "generated/skbio.alignment.TabularMSA.__ne__.rst", "generated/skbio.alignment.TabularMSA.__reversed__.rst", "generated/skbio.alignment.TabularMSA.__str__.rst", "generated/skbio.alignment.TabularMSA.append.rst", "generated/skbio.alignment.TabularMSA.consensus.rst", "generated/skbio.alignment.TabularMSA.conservation.rst", "generated/skbio.alignment.TabularMSA.extend.rst", "generated/skbio.alignment.TabularMSA.from_dict.rst", "generated/skbio.alignment.TabularMSA.gap_frequencies.rst", "generated/skbio.alignment.TabularMSA.has_metadata.rst", "generated/skbio.alignment.TabularMSA.has_positional_metadata.rst", "generated/skbio.alignment.TabularMSA.iter_positions.rst", "generated/skbio.alignment.TabularMSA.join.rst", "generated/skbio.alignment.TabularMSA.read.rst", "generated/skbio.alignment.TabularMSA.reassign_index.rst", "generated/skbio.alignment.TabularMSA.sort.rst", "generated/skbio.alignment.TabularMSA.to_dict.rst", "generated/skbio.alignment.TabularMSA.write.rst", "generated/skbio.alignment.global_pairwise_align.rst", "generated/skbio.alignment.global_pairwise_align_nucleotide.rst", "generated/skbio.alignment.global_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align.rst", "generated/skbio.alignment.local_pairwise_align_nucleotide.rst", "generated/skbio.alignment.local_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align_ssw.rst", "generated/skbio.alignment.make_identity_substitution_matrix.rst", "generated/skbio.diversity.alpha.rst", "generated/skbio.diversity.alpha.ace.rst", "generated/skbio.diversity.alpha.berger_parker_d.rst", "generated/skbio.diversity.alpha.brillouin_d.rst", "generated/skbio.diversity.alpha.chao1.rst", "generated/skbio.diversity.alpha.chao1_ci.rst", "generated/skbio.diversity.alpha.dominance.rst", "generated/skbio.diversity.alpha.doubles.rst", "generated/skbio.diversity.alpha.enspie.rst", "generated/skbio.diversity.alpha.esty_ci.rst", "generated/skbio.diversity.alpha.faith_pd.rst", "generated/skbio.diversity.alpha.fisher_alpha.rst", "generated/skbio.diversity.alpha.gini_index.rst", "generated/skbio.diversity.alpha.goods_coverage.rst", "generated/skbio.diversity.alpha.heip_e.rst", "generated/skbio.diversity.alpha.kempton_taylor_q.rst", "generated/skbio.diversity.alpha.lladser_ci.rst", "generated/skbio.diversity.alpha.lladser_pe.rst", "generated/skbio.diversity.alpha.margalef.rst", "generated/skbio.diversity.alpha.mcintosh_d.rst", "generated/skbio.diversity.alpha.mcintosh_e.rst", "generated/skbio.diversity.alpha.menhinick.rst", "generated/skbio.diversity.alpha.michaelis_menten_fit.rst", "generated/skbio.diversity.alpha.observed_features.rst", "generated/skbio.diversity.alpha.observed_otus.rst", "generated/skbio.diversity.alpha.osd.rst", "generated/skbio.diversity.alpha.phydiv.rst", "generated/skbio.diversity.alpha.pielou_e.rst", "generated/skbio.diversity.alpha.robbins.rst", "generated/skbio.diversity.alpha.shannon.rst", "generated/skbio.diversity.alpha.simpson.rst", "generated/skbio.diversity.alpha.simpson_e.rst", "generated/skbio.diversity.alpha.singles.rst", "generated/skbio.diversity.alpha.sobs.rst", "generated/skbio.diversity.alpha.strong.rst", "generated/skbio.diversity.alpha_diversity.rst", "generated/skbio.diversity.beta.rst", "generated/skbio.diversity.beta.unweighted_unifrac.rst", "generated/skbio.diversity.beta.weighted_unifrac.rst", "generated/skbio.diversity.beta_diversity.rst", "generated/skbio.diversity.block_beta_diversity.rst", "generated/skbio.diversity.get_alpha_diversity_metrics.rst", "generated/skbio.diversity.get_beta_diversity_metrics.rst", "generated/skbio.diversity.partial_beta_diversity.rst", "generated/skbio.io.ArgumentOverrideWarning.rst", "generated/skbio.io.BLAST7FormatError.rst", "generated/skbio.io.ClustalFormatError.rst", "generated/skbio.io.EMBLFormatError.rst", "generated/skbio.io.FASTAFormatError.rst", "generated/skbio.io.FASTQFormatError.rst", "generated/skbio.io.FileFormatError.rst", "generated/skbio.io.FormatIdentificationWarning.rst", "generated/skbio.io.GFF3FormatError.rst", "generated/skbio.io.GenBankFormatError.rst", "generated/skbio.io.IOSourceError.rst", "generated/skbio.io.LSMatFormatError.rst", "generated/skbio.io.NewickFormatError.rst", "generated/skbio.io.OrdinationFormatError.rst", "generated/skbio.io.PhylipFormatError.rst", "generated/skbio.io.QSeqFormatError.rst", "generated/skbio.io.QUALFormatError.rst", "generated/skbio.io.StockholmFormatError.rst", "generated/skbio.io.UnrecognizedFormatError.rst", "generated/skbio.io.format.binary_dm.rst", "generated/skbio.io.format.blast6.rst", "generated/skbio.io.format.blast7.rst", "generated/skbio.io.format.clustal.rst", "generated/skbio.io.format.embl.rst", "generated/skbio.io.format.fasta.rst", "generated/skbio.io.format.fastq.rst", "generated/skbio.io.format.genbank.rst", "generated/skbio.io.format.gff3.rst", "generated/skbio.io.format.lsmat.rst", "generated/skbio.io.format.newick.rst", "generated/skbio.io.format.ordination.rst", "generated/skbio.io.format.phylip.rst", "generated/skbio.io.format.qseq.rst", "generated/skbio.io.format.stockholm.rst", "generated/skbio.io.format.taxdump.rst", "generated/skbio.io.registry.rst", "generated/skbio.io.registry.DuplicateRegistrationError.rst", "generated/skbio.io.registry.Format.rst", "generated/skbio.io.registry.Format.__eq__.rst", "generated/skbio.io.registry.Format.__ge__.rst", "generated/skbio.io.registry.Format.__getstate__.rst", "generated/skbio.io.registry.Format.__gt__.rst", "generated/skbio.io.registry.Format.__hash__.rst", "generated/skbio.io.registry.Format.__le__.rst", "generated/skbio.io.registry.Format.__lt__.rst", "generated/skbio.io.registry.Format.__ne__.rst", "generated/skbio.io.registry.Format.__str__.rst", "generated/skbio.io.registry.Format.reader.rst", "generated/skbio.io.registry.Format.sniffer.rst", "generated/skbio.io.registry.Format.writer.rst", "generated/skbio.io.registry.IORegistry.rst", "generated/skbio.io.registry.IORegistry.__eq__.rst", "generated/skbio.io.registry.IORegistry.__ge__.rst", "generated/skbio.io.registry.IORegistry.__getstate__.rst", "generated/skbio.io.registry.IORegistry.__gt__.rst", "generated/skbio.io.registry.IORegistry.__hash__.rst", "generated/skbio.io.registry.IORegistry.__le__.rst", "generated/skbio.io.registry.IORegistry.__lt__.rst", "generated/skbio.io.registry.IORegistry.__ne__.rst", "generated/skbio.io.registry.IORegistry.__str__.rst", "generated/skbio.io.registry.IORegistry.add_format.rst", "generated/skbio.io.registry.IORegistry.create_format.rst", "generated/skbio.io.registry.IORegistry.get_reader.rst", "generated/skbio.io.registry.IORegistry.get_sniffer.rst", "generated/skbio.io.registry.IORegistry.get_writer.rst", "generated/skbio.io.registry.IORegistry.list_read_formats.rst", "generated/skbio.io.registry.IORegistry.list_write_formats.rst", "generated/skbio.io.registry.IORegistry.monkey_patch.rst", "generated/skbio.io.registry.IORegistry.read.rst", "generated/skbio.io.registry.IORegistry.sniff.rst", "generated/skbio.io.registry.IORegistry.write.rst", "generated/skbio.io.registry.InvalidRegistrationError.rst", "generated/skbio.io.registry.create_format.rst", "generated/skbio.io.registry.read.rst", "generated/skbio.io.registry.sniff.rst", "generated/skbio.io.registry.write.rst", "generated/skbio.io.util.rst", "generated/skbio.io.util.open.rst", "generated/skbio.io.util.open_file.rst", "generated/skbio.io.util.open_files.rst", "generated/skbio.metadata.Interval.rst", "generated/skbio.metadata.Interval.__eq__.rst", "generated/skbio.metadata.Interval.__ge__.rst", "generated/skbio.metadata.Interval.__getstate__.rst", "generated/skbio.metadata.Interval.__gt__.rst", "generated/skbio.metadata.Interval.__le__.rst", "generated/skbio.metadata.Interval.__lt__.rst", "generated/skbio.metadata.Interval.__ne__.rst", "generated/skbio.metadata.Interval.__str__.rst", "generated/skbio.metadata.Interval.drop.rst", "generated/skbio.metadata.IntervalMetadata.rst", "generated/skbio.metadata.IntervalMetadata.__copy__.rst", "generated/skbio.metadata.IntervalMetadata.__deepcopy__.rst", "generated/skbio.metadata.IntervalMetadata.__eq__.rst", "generated/skbio.metadata.IntervalMetadata.__ge__.rst", "generated/skbio.metadata.IntervalMetadata.__getstate__.rst", "generated/skbio.metadata.IntervalMetadata.__gt__.rst", "generated/skbio.metadata.IntervalMetadata.__le__.rst", "generated/skbio.metadata.IntervalMetadata.__lt__.rst", "generated/skbio.metadata.IntervalMetadata.__ne__.rst", "generated/skbio.metadata.IntervalMetadata.__str__.rst", "generated/skbio.metadata.IntervalMetadata.add.rst", "generated/skbio.metadata.IntervalMetadata.concat.rst", "generated/skbio.metadata.IntervalMetadata.drop.rst", "generated/skbio.metadata.IntervalMetadata.merge.rst", "generated/skbio.metadata.IntervalMetadata.query.rst", "generated/skbio.metadata.IntervalMetadata.read.rst", "generated/skbio.metadata.IntervalMetadata.sort.rst", "generated/skbio.metadata.IntervalMetadata.write.rst", "generated/skbio.sequence.DNA.rst", "generated/skbio.sequence.DNA.__bool__.rst", "generated/skbio.sequence.DNA.__contains__.rst", "generated/skbio.sequence.DNA.__copy__.rst", "generated/skbio.sequence.DNA.__deepcopy__.rst", "generated/skbio.sequence.DNA.__eq__.rst", "generated/skbio.sequence.DNA.__ge__.rst", "generated/skbio.sequence.DNA.__getitem__.rst", "generated/skbio.sequence.DNA.__getstate__.rst", "generated/skbio.sequence.DNA.__gt__.rst", "generated/skbio.sequence.DNA.__iter__.rst", "generated/skbio.sequence.DNA.__le__.rst", "generated/skbio.sequence.DNA.__len__.rst", "generated/skbio.sequence.DNA.__lt__.rst", "generated/skbio.sequence.DNA.__ne__.rst", "generated/skbio.sequence.DNA.__reversed__.rst", "generated/skbio.sequence.DNA.__str__.rst", "generated/skbio.sequence.DNA.complement.rst", "generated/skbio.sequence.DNA.concat.rst", "generated/skbio.sequence.DNA.count.rst", "generated/skbio.sequence.DNA.definites.rst", "generated/skbio.sequence.DNA.degap.rst", "generated/skbio.sequence.DNA.degenerates.rst", "generated/skbio.sequence.DNA.distance.rst", "generated/skbio.sequence.DNA.expand_degenerates.rst", "generated/skbio.sequence.DNA.find_motifs.rst", "generated/skbio.sequence.DNA.find_with_regex.rst", "generated/skbio.sequence.DNA.frequencies.rst", "generated/skbio.sequence.DNA.gaps.rst", "generated/skbio.sequence.DNA.gc_content.rst", "generated/skbio.sequence.DNA.gc_frequency.rst", "generated/skbio.sequence.DNA.has_definites.rst", "generated/skbio.sequence.DNA.has_degenerates.rst", "generated/skbio.sequence.DNA.has_gaps.rst", "generated/skbio.sequence.DNA.has_interval_metadata.rst", "generated/skbio.sequence.DNA.has_metadata.rst", "generated/skbio.sequence.DNA.has_nondegenerates.rst", "generated/skbio.sequence.DNA.has_positional_metadata.rst", "generated/skbio.sequence.DNA.index.rst", "generated/skbio.sequence.DNA.is_reverse_complement.rst", "generated/skbio.sequence.DNA.iter_contiguous.rst", "generated/skbio.sequence.DNA.iter_kmers.rst", "generated/skbio.sequence.DNA.kmer_frequencies.rst", "generated/skbio.sequence.DNA.lowercase.rst", "generated/skbio.sequence.DNA.match_frequency.rst", "generated/skbio.sequence.DNA.matches.rst", "generated/skbio.sequence.DNA.mismatch_frequency.rst", "generated/skbio.sequence.DNA.mismatches.rst", "generated/skbio.sequence.DNA.nondegenerates.rst", "generated/skbio.sequence.DNA.read.rst", "generated/skbio.sequence.DNA.replace.rst", "generated/skbio.sequence.DNA.reverse_complement.rst", "generated/skbio.sequence.DNA.to_regex.rst", "generated/skbio.sequence.DNA.transcribe.rst", "generated/skbio.sequence.DNA.translate.rst", "generated/skbio.sequence.DNA.translate_six_frames.rst", "generated/skbio.sequence.DNA.write.rst", "generated/skbio.sequence.GeneticCode.rst", "generated/skbio.sequence.GeneticCode.__eq__.rst", "generated/skbio.sequence.GeneticCode.__ge__.rst", "generated/skbio.sequence.GeneticCode.__getstate__.rst", "generated/skbio.sequence.GeneticCode.__gt__.rst", "generated/skbio.sequence.GeneticCode.__le__.rst", "generated/skbio.sequence.GeneticCode.__lt__.rst", "generated/skbio.sequence.GeneticCode.__ne__.rst", "generated/skbio.sequence.GeneticCode.__str__.rst", "generated/skbio.sequence.GeneticCode.from_ncbi.rst", "generated/skbio.sequence.GeneticCode.translate.rst", "generated/skbio.sequence.GeneticCode.translate_six_frames.rst", "generated/skbio.sequence.GrammaredSequence.rst", "generated/skbio.sequence.GrammaredSequence.__bool__.rst", "generated/skbio.sequence.GrammaredSequence.__contains__.rst", "generated/skbio.sequence.GrammaredSequence.__copy__.rst", "generated/skbio.sequence.GrammaredSequence.__deepcopy__.rst", "generated/skbio.sequence.GrammaredSequence.__eq__.rst", "generated/skbio.sequence.GrammaredSequence.__ge__.rst", "generated/skbio.sequence.GrammaredSequence.__getitem__.rst", "generated/skbio.sequence.GrammaredSequence.__getstate__.rst", "generated/skbio.sequence.GrammaredSequence.__gt__.rst", "generated/skbio.sequence.GrammaredSequence.__iter__.rst", "generated/skbio.sequence.GrammaredSequence.__le__.rst", "generated/skbio.sequence.GrammaredSequence.__len__.rst", "generated/skbio.sequence.GrammaredSequence.__lt__.rst", "generated/skbio.sequence.GrammaredSequence.__ne__.rst", "generated/skbio.sequence.GrammaredSequence.__reversed__.rst", "generated/skbio.sequence.GrammaredSequence.__str__.rst", "generated/skbio.sequence.GrammaredSequence.concat.rst", "generated/skbio.sequence.GrammaredSequence.count.rst", "generated/skbio.sequence.GrammaredSequence.definites.rst", "generated/skbio.sequence.GrammaredSequence.degap.rst", "generated/skbio.sequence.GrammaredSequence.degenerates.rst", "generated/skbio.sequence.GrammaredSequence.distance.rst", "generated/skbio.sequence.GrammaredSequence.expand_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.find_motifs.rst", "generated/skbio.sequence.GrammaredSequence.find_with_regex.rst", "generated/skbio.sequence.GrammaredSequence.frequencies.rst", "generated/skbio.sequence.GrammaredSequence.gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_definites.rst", "generated/skbio.sequence.GrammaredSequence.has_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata.rst", "generated/skbio.sequence.GrammaredSequence.index.rst", "generated/skbio.sequence.GrammaredSequence.iter_contiguous.rst", "generated/skbio.sequence.GrammaredSequence.iter_kmers.rst", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies.rst", "generated/skbio.sequence.GrammaredSequence.lowercase.rst", "generated/skbio.sequence.GrammaredSequence.match_frequency.rst", "generated/skbio.sequence.GrammaredSequence.matches.rst", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency.rst", "generated/skbio.sequence.GrammaredSequence.mismatches.rst", "generated/skbio.sequence.GrammaredSequence.nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.read.rst", "generated/skbio.sequence.GrammaredSequence.replace.rst", "generated/skbio.sequence.GrammaredSequence.to_regex.rst", "generated/skbio.sequence.GrammaredSequence.write.rst", "generated/skbio.sequence.Protein.rst", "generated/skbio.sequence.Protein.__bool__.rst", "generated/skbio.sequence.Protein.__contains__.rst", "generated/skbio.sequence.Protein.__copy__.rst", "generated/skbio.sequence.Protein.__deepcopy__.rst", "generated/skbio.sequence.Protein.__eq__.rst", "generated/skbio.sequence.Protein.__ge__.rst", "generated/skbio.sequence.Protein.__getitem__.rst", "generated/skbio.sequence.Protein.__getstate__.rst", "generated/skbio.sequence.Protein.__gt__.rst", "generated/skbio.sequence.Protein.__iter__.rst", "generated/skbio.sequence.Protein.__le__.rst", "generated/skbio.sequence.Protein.__len__.rst", "generated/skbio.sequence.Protein.__lt__.rst", "generated/skbio.sequence.Protein.__ne__.rst", "generated/skbio.sequence.Protein.__reversed__.rst", "generated/skbio.sequence.Protein.__str__.rst", "generated/skbio.sequence.Protein.concat.rst", "generated/skbio.sequence.Protein.count.rst", "generated/skbio.sequence.Protein.definites.rst", "generated/skbio.sequence.Protein.degap.rst", "generated/skbio.sequence.Protein.degenerates.rst", "generated/skbio.sequence.Protein.distance.rst", "generated/skbio.sequence.Protein.expand_degenerates.rst", "generated/skbio.sequence.Protein.find_motifs.rst", "generated/skbio.sequence.Protein.find_with_regex.rst", "generated/skbio.sequence.Protein.frequencies.rst", "generated/skbio.sequence.Protein.gaps.rst", "generated/skbio.sequence.Protein.has_definites.rst", "generated/skbio.sequence.Protein.has_degenerates.rst", "generated/skbio.sequence.Protein.has_gaps.rst", "generated/skbio.sequence.Protein.has_interval_metadata.rst", "generated/skbio.sequence.Protein.has_metadata.rst", "generated/skbio.sequence.Protein.has_nondegenerates.rst", "generated/skbio.sequence.Protein.has_positional_metadata.rst", "generated/skbio.sequence.Protein.has_stops.rst", "generated/skbio.sequence.Protein.index.rst", "generated/skbio.sequence.Protein.iter_contiguous.rst", "generated/skbio.sequence.Protein.iter_kmers.rst", "generated/skbio.sequence.Protein.kmer_frequencies.rst", "generated/skbio.sequence.Protein.lowercase.rst", "generated/skbio.sequence.Protein.match_frequency.rst", "generated/skbio.sequence.Protein.matches.rst", "generated/skbio.sequence.Protein.mismatch_frequency.rst", "generated/skbio.sequence.Protein.mismatches.rst", "generated/skbio.sequence.Protein.nondegenerates.rst", "generated/skbio.sequence.Protein.read.rst", "generated/skbio.sequence.Protein.replace.rst", "generated/skbio.sequence.Protein.stops.rst", "generated/skbio.sequence.Protein.to_regex.rst", "generated/skbio.sequence.Protein.write.rst", "generated/skbio.sequence.RNA.rst", "generated/skbio.sequence.RNA.__bool__.rst", "generated/skbio.sequence.RNA.__contains__.rst", "generated/skbio.sequence.RNA.__copy__.rst", "generated/skbio.sequence.RNA.__deepcopy__.rst", "generated/skbio.sequence.RNA.__eq__.rst", "generated/skbio.sequence.RNA.__ge__.rst", "generated/skbio.sequence.RNA.__getitem__.rst", "generated/skbio.sequence.RNA.__getstate__.rst", "generated/skbio.sequence.RNA.__gt__.rst", "generated/skbio.sequence.RNA.__iter__.rst", "generated/skbio.sequence.RNA.__le__.rst", "generated/skbio.sequence.RNA.__len__.rst", "generated/skbio.sequence.RNA.__lt__.rst", "generated/skbio.sequence.RNA.__ne__.rst", "generated/skbio.sequence.RNA.__reversed__.rst", "generated/skbio.sequence.RNA.__str__.rst", "generated/skbio.sequence.RNA.complement.rst", "generated/skbio.sequence.RNA.concat.rst", "generated/skbio.sequence.RNA.count.rst", "generated/skbio.sequence.RNA.definites.rst", "generated/skbio.sequence.RNA.degap.rst", "generated/skbio.sequence.RNA.degenerates.rst", "generated/skbio.sequence.RNA.distance.rst", "generated/skbio.sequence.RNA.expand_degenerates.rst", "generated/skbio.sequence.RNA.find_motifs.rst", "generated/skbio.sequence.RNA.find_with_regex.rst", "generated/skbio.sequence.RNA.frequencies.rst", "generated/skbio.sequence.RNA.gaps.rst", "generated/skbio.sequence.RNA.gc_content.rst", "generated/skbio.sequence.RNA.gc_frequency.rst", "generated/skbio.sequence.RNA.has_definites.rst", "generated/skbio.sequence.RNA.has_degenerates.rst", "generated/skbio.sequence.RNA.has_gaps.rst", "generated/skbio.sequence.RNA.has_interval_metadata.rst", "generated/skbio.sequence.RNA.has_metadata.rst", "generated/skbio.sequence.RNA.has_nondegenerates.rst", "generated/skbio.sequence.RNA.has_positional_metadata.rst", "generated/skbio.sequence.RNA.index.rst", "generated/skbio.sequence.RNA.is_reverse_complement.rst", "generated/skbio.sequence.RNA.iter_contiguous.rst", "generated/skbio.sequence.RNA.iter_kmers.rst", "generated/skbio.sequence.RNA.kmer_frequencies.rst", "generated/skbio.sequence.RNA.lowercase.rst", "generated/skbio.sequence.RNA.match_frequency.rst", "generated/skbio.sequence.RNA.matches.rst", "generated/skbio.sequence.RNA.mismatch_frequency.rst", "generated/skbio.sequence.RNA.mismatches.rst", "generated/skbio.sequence.RNA.nondegenerates.rst", "generated/skbio.sequence.RNA.read.rst", "generated/skbio.sequence.RNA.replace.rst", "generated/skbio.sequence.RNA.reverse_complement.rst", "generated/skbio.sequence.RNA.reverse_transcribe.rst", "generated/skbio.sequence.RNA.to_regex.rst", "generated/skbio.sequence.RNA.translate.rst", "generated/skbio.sequence.RNA.translate_six_frames.rst", "generated/skbio.sequence.RNA.write.rst", "generated/skbio.sequence.Sequence.rst", "generated/skbio.sequence.Sequence.__bool__.rst", "generated/skbio.sequence.Sequence.__contains__.rst", "generated/skbio.sequence.Sequence.__copy__.rst", "generated/skbio.sequence.Sequence.__deepcopy__.rst", "generated/skbio.sequence.Sequence.__eq__.rst", "generated/skbio.sequence.Sequence.__ge__.rst", "generated/skbio.sequence.Sequence.__getitem__.rst", "generated/skbio.sequence.Sequence.__getstate__.rst", "generated/skbio.sequence.Sequence.__gt__.rst", "generated/skbio.sequence.Sequence.__iter__.rst", "generated/skbio.sequence.Sequence.__le__.rst", "generated/skbio.sequence.Sequence.__len__.rst", "generated/skbio.sequence.Sequence.__lt__.rst", "generated/skbio.sequence.Sequence.__ne__.rst", "generated/skbio.sequence.Sequence.__reversed__.rst", "generated/skbio.sequence.Sequence.__str__.rst", "generated/skbio.sequence.Sequence.concat.rst", "generated/skbio.sequence.Sequence.count.rst", "generated/skbio.sequence.Sequence.distance.rst", "generated/skbio.sequence.Sequence.find_with_regex.rst", "generated/skbio.sequence.Sequence.frequencies.rst", "generated/skbio.sequence.Sequence.has_interval_metadata.rst", "generated/skbio.sequence.Sequence.has_metadata.rst", "generated/skbio.sequence.Sequence.has_positional_metadata.rst", "generated/skbio.sequence.Sequence.index.rst", "generated/skbio.sequence.Sequence.iter_contiguous.rst", "generated/skbio.sequence.Sequence.iter_kmers.rst", "generated/skbio.sequence.Sequence.kmer_frequencies.rst", "generated/skbio.sequence.Sequence.lowercase.rst", "generated/skbio.sequence.Sequence.match_frequency.rst", "generated/skbio.sequence.Sequence.matches.rst", "generated/skbio.sequence.Sequence.mismatch_frequency.rst", "generated/skbio.sequence.Sequence.mismatches.rst", "generated/skbio.sequence.Sequence.read.rst", "generated/skbio.sequence.Sequence.replace.rst", "generated/skbio.sequence.Sequence.write.rst", "generated/skbio.sequence.SubstitutionMatrix.rst", "generated/skbio.sequence.SubstitutionMatrix.__contains__.rst", "generated/skbio.sequence.SubstitutionMatrix.__eq__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ge__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getitem__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getstate__.rst", "generated/skbio.sequence.SubstitutionMatrix.__gt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__le__.rst", "generated/skbio.sequence.SubstitutionMatrix.__lt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ne__.rst", "generated/skbio.sequence.SubstitutionMatrix.__str__.rst", "generated/skbio.sequence.SubstitutionMatrix.between.rst", "generated/skbio.sequence.SubstitutionMatrix.by_name.rst", "generated/skbio.sequence.SubstitutionMatrix.copy.rst", "generated/skbio.sequence.SubstitutionMatrix.filter.rst", "generated/skbio.sequence.SubstitutionMatrix.from_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.from_iterable.rst", "generated/skbio.sequence.SubstitutionMatrix.get_names.rst", "generated/skbio.sequence.SubstitutionMatrix.identity.rst", "generated/skbio.sequence.SubstitutionMatrix.index.rst", "generated/skbio.sequence.SubstitutionMatrix.plot.rst", "generated/skbio.sequence.SubstitutionMatrix.read.rst", "generated/skbio.sequence.SubstitutionMatrix.redundant_form.rst", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame.rst", "generated/skbio.sequence.SubstitutionMatrix.to_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.transpose.rst", "generated/skbio.sequence.SubstitutionMatrix.within.rst", "generated/skbio.sequence.SubstitutionMatrix.write.rst", "generated/skbio.sequence.distance.rst", "generated/skbio.sequence.distance.hamming.rst", "generated/skbio.sequence.distance.kmer_distance.rst", "generated/skbio.stats.composition.rst", "generated/skbio.stats.composition.alr.rst", "generated/skbio.stats.composition.alr_inv.rst", "generated/skbio.stats.composition.ancom.rst", "generated/skbio.stats.composition.centralize.rst", "generated/skbio.stats.composition.closure.rst", "generated/skbio.stats.composition.clr.rst", "generated/skbio.stats.composition.clr_inv.rst", "generated/skbio.stats.composition.ilr.rst", "generated/skbio.stats.composition.ilr_inv.rst", "generated/skbio.stats.composition.inner.rst", "generated/skbio.stats.composition.multiplicative_replacement.rst", "generated/skbio.stats.composition.pairwise_vlr.rst", "generated/skbio.stats.composition.perturb.rst", "generated/skbio.stats.composition.perturb_inv.rst", "generated/skbio.stats.composition.power.rst", "generated/skbio.stats.composition.sbp_basis.rst", "generated/skbio.stats.composition.tree_basis.rst", "generated/skbio.stats.composition.vlr.rst", "generated/skbio.stats.distance.rst", "generated/skbio.stats.distance.DissimilarityMatrix.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__le__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__str__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.between.rst", "generated/skbio.stats.distance.DissimilarityMatrix.copy.rst", "generated/skbio.stats.distance.DissimilarityMatrix.filter.rst", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable.rst", "generated/skbio.stats.distance.DissimilarityMatrix.index.rst", "generated/skbio.stats.distance.DissimilarityMatrix.plot.rst", "generated/skbio.stats.distance.DissimilarityMatrix.read.rst", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form.rst", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DissimilarityMatrix.transpose.rst", "generated/skbio.stats.distance.DissimilarityMatrix.within.rst", "generated/skbio.stats.distance.DissimilarityMatrix.write.rst", "generated/skbio.stats.distance.DissimilarityMatrixError.rst", "generated/skbio.stats.distance.DistanceMatrix.rst", "generated/skbio.stats.distance.DistanceMatrix.__contains__.rst", "generated/skbio.stats.distance.DistanceMatrix.__eq__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ge__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getitem__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getstate__.rst", "generated/skbio.stats.distance.DistanceMatrix.__gt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__le__.rst", "generated/skbio.stats.distance.DistanceMatrix.__lt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ne__.rst", "generated/skbio.stats.distance.DistanceMatrix.__str__.rst", "generated/skbio.stats.distance.DistanceMatrix.between.rst", "generated/skbio.stats.distance.DistanceMatrix.condensed_form.rst", "generated/skbio.stats.distance.DistanceMatrix.copy.rst", "generated/skbio.stats.distance.DistanceMatrix.filter.rst", "generated/skbio.stats.distance.DistanceMatrix.from_iterable.rst", "generated/skbio.stats.distance.DistanceMatrix.index.rst", "generated/skbio.stats.distance.DistanceMatrix.permute.rst", "generated/skbio.stats.distance.DistanceMatrix.plot.rst", "generated/skbio.stats.distance.DistanceMatrix.read.rst", "generated/skbio.stats.distance.DistanceMatrix.redundant_form.rst", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DistanceMatrix.to_series.rst", "generated/skbio.stats.distance.DistanceMatrix.transpose.rst", "generated/skbio.stats.distance.DistanceMatrix.within.rst", "generated/skbio.stats.distance.DistanceMatrix.write.rst", "generated/skbio.stats.distance.DistanceMatrixError.rst", "generated/skbio.stats.distance.MissingIDError.rst", "generated/skbio.stats.distance.anosim.rst", "generated/skbio.stats.distance.bioenv.rst", "generated/skbio.stats.distance.mantel.rst", "generated/skbio.stats.distance.permanova.rst", "generated/skbio.stats.distance.permdisp.rst", "generated/skbio.stats.distance.pwmantel.rst", "generated/skbio.stats.distance.randdm.rst", "generated/skbio.stats.evolve.rst", "generated/skbio.stats.evolve.hommola_cospeciation.rst", "generated/skbio.stats.gradient.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.CategoryResults.rst", "generated/skbio.stats.gradient.CategoryResults.__eq__.rst", "generated/skbio.stats.gradient.CategoryResults.__ge__.rst", "generated/skbio.stats.gradient.CategoryResults.__getstate__.rst", "generated/skbio.stats.gradient.CategoryResults.__gt__.rst", "generated/skbio.stats.gradient.CategoryResults.__hash__.rst", "generated/skbio.stats.gradient.CategoryResults.__le__.rst", "generated/skbio.stats.gradient.CategoryResults.__lt__.rst", "generated/skbio.stats.gradient.CategoryResults.__ne__.rst", "generated/skbio.stats.gradient.CategoryResults.__str__.rst", "generated/skbio.stats.gradient.CategoryResults.to_files.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVA.rst", "generated/skbio.stats.gradient.GradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVA.__le__.rst", "generated/skbio.stats.gradient.GradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVA.__str__.rst", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVAResults.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__le__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__str__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.to_files.rst", "generated/skbio.stats.gradient.GroupResults.rst", "generated/skbio.stats.gradient.GroupResults.__eq__.rst", "generated/skbio.stats.gradient.GroupResults.__ge__.rst", "generated/skbio.stats.gradient.GroupResults.__getstate__.rst", "generated/skbio.stats.gradient.GroupResults.__gt__.rst", "generated/skbio.stats.gradient.GroupResults.__hash__.rst", "generated/skbio.stats.gradient.GroupResults.__le__.rst", "generated/skbio.stats.gradient.GroupResults.__lt__.rst", "generated/skbio.stats.gradient.GroupResults.__ne__.rst", "generated/skbio.stats.gradient.GroupResults.__str__.rst", "generated/skbio.stats.gradient.GroupResults.to_files.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.isubsample.rst", "generated/skbio.stats.ordination.rst", "generated/skbio.stats.ordination.OrdinationResults.rst", "generated/skbio.stats.ordination.OrdinationResults.__eq__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ge__.rst", "generated/skbio.stats.ordination.OrdinationResults.__getstate__.rst", "generated/skbio.stats.ordination.OrdinationResults.__gt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__hash__.rst", "generated/skbio.stats.ordination.OrdinationResults.__le__.rst", "generated/skbio.stats.ordination.OrdinationResults.__lt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ne__.rst", "generated/skbio.stats.ordination.OrdinationResults.__str__.rst", "generated/skbio.stats.ordination.OrdinationResults.plot.rst", "generated/skbio.stats.ordination.OrdinationResults.read.rst", "generated/skbio.stats.ordination.OrdinationResults.write.rst", "generated/skbio.stats.ordination.ca.rst", "generated/skbio.stats.ordination.cca.rst", "generated/skbio.stats.ordination.corr.rst", "generated/skbio.stats.ordination.e_matrix.rst", "generated/skbio.stats.ordination.f_matrix.rst", "generated/skbio.stats.ordination.mean_and_std.rst", "generated/skbio.stats.ordination.pcoa.rst", "generated/skbio.stats.ordination.pcoa_biplot.rst", "generated/skbio.stats.ordination.rda.rst", "generated/skbio.stats.ordination.scale.rst", "generated/skbio.stats.ordination.svd_rank.rst", "generated/skbio.stats.power.rst", "generated/skbio.stats.power.confidence_bound.rst", "generated/skbio.stats.power.paired_subsamples.rst", "generated/skbio.stats.power.subsample_paired_power.rst", "generated/skbio.stats.power.subsample_power.rst", "generated/skbio.stats.subsample_counts.rst", "generated/skbio.tree.DuplicateNodeError.rst", "generated/skbio.tree.MissingNodeError.rst", "generated/skbio.tree.NoLengthError.rst", "generated/skbio.tree.NoParentError.rst", "generated/skbio.tree.TreeError.rst", "generated/skbio.tree.TreeNode.rst", "generated/skbio.tree.TreeNode.__copy__.rst", "generated/skbio.tree.TreeNode.__deepcopy__.rst", "generated/skbio.tree.TreeNode.__eq__.rst", "generated/skbio.tree.TreeNode.__ge__.rst", "generated/skbio.tree.TreeNode.__getitem__.rst", "generated/skbio.tree.TreeNode.__getstate__.rst", "generated/skbio.tree.TreeNode.__gt__.rst", "generated/skbio.tree.TreeNode.__hash__.rst", "generated/skbio.tree.TreeNode.__iter__.rst", "generated/skbio.tree.TreeNode.__le__.rst", "generated/skbio.tree.TreeNode.__len__.rst", "generated/skbio.tree.TreeNode.__lt__.rst", "generated/skbio.tree.TreeNode.__ne__.rst", "generated/skbio.tree.TreeNode.__str__.rst", "generated/skbio.tree.TreeNode.accumulate_to_ancestor.rst", "generated/skbio.tree.TreeNode.ancestors.rst", "generated/skbio.tree.TreeNode.append.rst", "generated/skbio.tree.TreeNode.ascii_art.rst", "generated/skbio.tree.TreeNode.assign_ids.rst", "generated/skbio.tree.TreeNode.assign_supports.rst", "generated/skbio.tree.TreeNode.bifurcate.rst", "generated/skbio.tree.TreeNode.cache_attr.rst", "generated/skbio.tree.TreeNode.compare_rfd.rst", "generated/skbio.tree.TreeNode.compare_subsets.rst", "generated/skbio.tree.TreeNode.compare_tip_distances.rst", "generated/skbio.tree.TreeNode.copy.rst", "generated/skbio.tree.TreeNode.count.rst", "generated/skbio.tree.TreeNode.create_caches.rst", "generated/skbio.tree.TreeNode.deepcopy.rst", "generated/skbio.tree.TreeNode.descending_branch_length.rst", "generated/skbio.tree.TreeNode.distance.rst", "generated/skbio.tree.TreeNode.extend.rst", "generated/skbio.tree.TreeNode.find.rst", "generated/skbio.tree.TreeNode.find_all.rst", "generated/skbio.tree.TreeNode.find_by_func.rst", "generated/skbio.tree.TreeNode.find_by_id.rst", "generated/skbio.tree.TreeNode.from_linkage_matrix.rst", "generated/skbio.tree.TreeNode.from_taxdump.rst", "generated/skbio.tree.TreeNode.from_taxonomy.rst", "generated/skbio.tree.TreeNode.get_max_distance.rst", "generated/skbio.tree.TreeNode.has_children.rst", "generated/skbio.tree.TreeNode.index_tree.rst", "generated/skbio.tree.TreeNode.invalidate_caches.rst", "generated/skbio.tree.TreeNode.is_root.rst", "generated/skbio.tree.TreeNode.is_tip.rst", "generated/skbio.tree.TreeNode.lca.rst", "generated/skbio.tree.TreeNode.levelorder.rst", "generated/skbio.tree.TreeNode.lowest_common_ancestor.rst", "generated/skbio.tree.TreeNode.neighbors.rst", "generated/skbio.tree.TreeNode.non_tips.rst", "generated/skbio.tree.TreeNode.observed_node_counts.rst", "generated/skbio.tree.TreeNode.pop.rst", "generated/skbio.tree.TreeNode.postorder.rst", "generated/skbio.tree.TreeNode.pre_and_postorder.rst", "generated/skbio.tree.TreeNode.preorder.rst", "generated/skbio.tree.TreeNode.prune.rst", "generated/skbio.tree.TreeNode.read.rst", "generated/skbio.tree.TreeNode.remove.rst", "generated/skbio.tree.TreeNode.remove_deleted.rst", "generated/skbio.tree.TreeNode.root.rst", "generated/skbio.tree.TreeNode.root_at.rst", "generated/skbio.tree.TreeNode.root_at_midpoint.rst", "generated/skbio.tree.TreeNode.shear.rst", "generated/skbio.tree.TreeNode.shuffle.rst", "generated/skbio.tree.TreeNode.siblings.rst", "generated/skbio.tree.TreeNode.subset.rst", "generated/skbio.tree.TreeNode.subsets.rst", "generated/skbio.tree.TreeNode.subtree.rst", "generated/skbio.tree.TreeNode.tip_tip_distances.rst", "generated/skbio.tree.TreeNode.tips.rst", "generated/skbio.tree.TreeNode.to_array.rst", "generated/skbio.tree.TreeNode.to_taxonomy.rst", "generated/skbio.tree.TreeNode.traverse.rst", "generated/skbio.tree.TreeNode.unpack.rst", "generated/skbio.tree.TreeNode.unpack_by_func.rst", "generated/skbio.tree.TreeNode.unrooted_copy.rst", "generated/skbio.tree.TreeNode.unrooted_deepcopy.rst", "generated/skbio.tree.TreeNode.write.rst", "generated/skbio.tree.majority_rule.rst", "generated/skbio.tree.nj.rst", "generated/skbio.util.EfficiencyWarning.rst", "generated/skbio.util.RepresentationWarning.rst", "generated/skbio.util.assert_data_frame_almost_equal.rst", "generated/skbio.util.assert_ordination_results_equal.rst", "generated/skbio.util.cardinal_to_ordinal.rst", "generated/skbio.util.classproperty.rst", "generated/skbio.util.classproperty.__delete__.rst", "generated/skbio.util.classproperty.__eq__.rst", "generated/skbio.util.classproperty.__ge__.rst", "generated/skbio.util.classproperty.__get__.rst", "generated/skbio.util.classproperty.__getstate__.rst", "generated/skbio.util.classproperty.__gt__.rst", "generated/skbio.util.classproperty.__hash__.rst", "generated/skbio.util.classproperty.__le__.rst", "generated/skbio.util.classproperty.__lt__.rst", "generated/skbio.util.classproperty.__ne__.rst", "generated/skbio.util.classproperty.__set__.rst", "generated/skbio.util.classproperty.__set_name__.rst", "generated/skbio.util.classproperty.__str__.rst", "generated/skbio.util.classproperty.deleter.rst", "generated/skbio.util.classproperty.getter.rst", "generated/skbio.util.classproperty.setter.rst", "generated/skbio.util.find_duplicates.rst", "generated/skbio.util.get_data_path.rst", "generated/skbio.util.safe_md5.rst", "generated/skbio.workflow.Workflow.rst", "generated/skbio.workflow.Workflow.__call__.rst", "generated/skbio.workflow.Workflow.__eq__.rst", "generated/skbio.workflow.Workflow.__ge__.rst", "generated/skbio.workflow.Workflow.__getstate__.rst", "generated/skbio.workflow.Workflow.__gt__.rst", "generated/skbio.workflow.Workflow.__hash__.rst", "generated/skbio.workflow.Workflow.__le__.rst", "generated/skbio.workflow.Workflow.__lt__.rst", "generated/skbio.workflow.Workflow.__ne__.rst", "generated/skbio.workflow.Workflow.__str__.rst", "generated/skbio.workflow.Workflow.initialize_state.rst", "generated/skbio.workflow.method.rst", "generated/skbio.workflow.method.__call__.rst", "generated/skbio.workflow.method.__eq__.rst", "generated/skbio.workflow.method.__ge__.rst", "generated/skbio.workflow.method.__getstate__.rst", "generated/skbio.workflow.method.__gt__.rst", "generated/skbio.workflow.method.__hash__.rst", "generated/skbio.workflow.method.__le__.rst", "generated/skbio.workflow.method.__lt__.rst", "generated/skbio.workflow.method.__ne__.rst", "generated/skbio.workflow.method.__str__.rst", "generated/skbio.workflow.requires.rst", "generated/skbio.workflow.requires.__call__.rst", "generated/skbio.workflow.requires.__eq__.rst", "generated/skbio.workflow.requires.__ge__.rst", "generated/skbio.workflow.requires.__getstate__.rst", "generated/skbio.workflow.requires.__gt__.rst", "generated/skbio.workflow.requires.__hash__.rst", "generated/skbio.workflow.requires.__le__.rst", "generated/skbio.workflow.requires.__lt__.rst", "generated/skbio.workflow.requires.__ne__.rst", "generated/skbio.workflow.requires.__str__.rst", "index.rst", "io.rst", "metadata.rst", "sequence.rst", "stats.rst", "tree.rst", "util.rst", "workflow.rst"], "titles": ["Alignments (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.alignment</span></code>)", "Diversity calculations (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity</span></code>)", "skbio.alignment.AlignmentStructure", "skbio.alignment.AlignmentStructure.__eq__", "skbio.alignment.AlignmentStructure.__ge__", "skbio.alignment.AlignmentStructure.__getitem__", "skbio.alignment.AlignmentStructure.__getstate__", "skbio.alignment.AlignmentStructure.__gt__", "skbio.alignment.AlignmentStructure.__hash__", "skbio.alignment.AlignmentStructure.__le__", "skbio.alignment.AlignmentStructure.__lt__", "skbio.alignment.AlignmentStructure.__ne__", "skbio.alignment.AlignmentStructure.__setstate__", "skbio.alignment.AlignmentStructure.__str__", "skbio.alignment.AlignmentStructure.is_zero_based", "skbio.alignment.AlignmentStructure.set_zero_based", "skbio.alignment.StripedSmithWaterman", "skbio.alignment.StripedSmithWaterman.__call__", "skbio.alignment.StripedSmithWaterman.__eq__", "skbio.alignment.StripedSmithWaterman.__ge__", "skbio.alignment.StripedSmithWaterman.__getstate__", "skbio.alignment.StripedSmithWaterman.__gt__", "skbio.alignment.StripedSmithWaterman.__hash__", "skbio.alignment.StripedSmithWaterman.__le__", "skbio.alignment.StripedSmithWaterman.__lt__", "skbio.alignment.StripedSmithWaterman.__ne__", "skbio.alignment.StripedSmithWaterman.__setstate__", "skbio.alignment.StripedSmithWaterman.__str__", "skbio.alignment.TabularMSA", "skbio.alignment.TabularMSA.__bool__", "skbio.alignment.TabularMSA.__contains__", "skbio.alignment.TabularMSA.__copy__", "skbio.alignment.TabularMSA.__deepcopy__", "skbio.alignment.TabularMSA.__eq__", "skbio.alignment.TabularMSA.__ge__", "skbio.alignment.TabularMSA.__getitem__", "skbio.alignment.TabularMSA.__getstate__", "skbio.alignment.TabularMSA.__gt__", "skbio.alignment.TabularMSA.__iter__", "skbio.alignment.TabularMSA.__le__", "skbio.alignment.TabularMSA.__len__", "skbio.alignment.TabularMSA.__lt__", "skbio.alignment.TabularMSA.__ne__", "skbio.alignment.TabularMSA.__reversed__", "skbio.alignment.TabularMSA.__str__", "skbio.alignment.TabularMSA.append", "skbio.alignment.TabularMSA.consensus", "skbio.alignment.TabularMSA.conservation", "skbio.alignment.TabularMSA.extend", "skbio.alignment.TabularMSA.from_dict", "skbio.alignment.TabularMSA.gap_frequencies", "skbio.alignment.TabularMSA.has_metadata", "skbio.alignment.TabularMSA.has_positional_metadata", "skbio.alignment.TabularMSA.iter_positions", "skbio.alignment.TabularMSA.join", "skbio.alignment.TabularMSA.read", "skbio.alignment.TabularMSA.reassign_index", "skbio.alignment.TabularMSA.sort", "skbio.alignment.TabularMSA.to_dict", "skbio.alignment.TabularMSA.write", "skbio.alignment.global_pairwise_align", "skbio.alignment.global_pairwise_align_nucleotide", "skbio.alignment.global_pairwise_align_protein", "skbio.alignment.local_pairwise_align", "skbio.alignment.local_pairwise_align_nucleotide", "skbio.alignment.local_pairwise_align_protein", "skbio.alignment.local_pairwise_align_ssw", "skbio.alignment.make_identity_substitution_matrix", "Alpha diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.alpha</span></code>)", "skbio.diversity.alpha.ace", "skbio.diversity.alpha.berger_parker_d", "skbio.diversity.alpha.brillouin_d", "skbio.diversity.alpha.chao1", "skbio.diversity.alpha.chao1_ci", "skbio.diversity.alpha.dominance", "skbio.diversity.alpha.doubles", "skbio.diversity.alpha.enspie", "skbio.diversity.alpha.esty_ci", "skbio.diversity.alpha.faith_pd", "skbio.diversity.alpha.fisher_alpha", "skbio.diversity.alpha.gini_index", "skbio.diversity.alpha.goods_coverage", "skbio.diversity.alpha.heip_e", "skbio.diversity.alpha.kempton_taylor_q", "skbio.diversity.alpha.lladser_ci", "skbio.diversity.alpha.lladser_pe", "skbio.diversity.alpha.margalef", "skbio.diversity.alpha.mcintosh_d", "skbio.diversity.alpha.mcintosh_e", "skbio.diversity.alpha.menhinick", "skbio.diversity.alpha.michaelis_menten_fit", "skbio.diversity.alpha.observed_features", "skbio.diversity.alpha.observed_otus", "skbio.diversity.alpha.osd", "skbio.diversity.alpha.phydiv", "skbio.diversity.alpha.pielou_e", "skbio.diversity.alpha.robbins", "skbio.diversity.alpha.shannon", "skbio.diversity.alpha.simpson", "skbio.diversity.alpha.simpson_e", "skbio.diversity.alpha.singles", "skbio.diversity.alpha.sobs", "skbio.diversity.alpha.strong", "skbio.diversity.alpha_diversity", "Beta diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.beta</span></code>)", "skbio.diversity.beta.unweighted_unifrac", "skbio.diversity.beta.weighted_unifrac", "skbio.diversity.beta_diversity", "skbio.diversity.block_beta_diversity", "skbio.diversity.get_alpha_diversity_metrics", "skbio.diversity.get_beta_diversity_metrics", "skbio.diversity.partial_beta_diversity", "skbio.io.ArgumentOverrideWarning", "skbio.io.BLAST7FormatError", "skbio.io.ClustalFormatError", "skbio.io.EMBLFormatError", "skbio.io.FASTAFormatError", "skbio.io.FASTQFormatError", "skbio.io.FileFormatError", "skbio.io.FormatIdentificationWarning", "skbio.io.GFF3FormatError", "skbio.io.GenBankFormatError", "skbio.io.IOSourceError", "skbio.io.LSMatFormatError", "skbio.io.NewickFormatError", "skbio.io.OrdinationFormatError", "skbio.io.PhylipFormatError", "skbio.io.QSeqFormatError", "skbio.io.QUALFormatError", "skbio.io.StockholmFormatError", "skbio.io.UnrecognizedFormatError", "Simple binary dissimilarity matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.binary_dm</span></code>)", "BLAST+6 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast6</span></code>)", "BLAST+7 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast7</span></code>)", "Clustal format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.clustal</span></code>)", "EMBL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embl</span></code>)", "FASTA/QUAL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fasta</span></code>)", "FASTQ format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fastq</span></code>)", "GenBank format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.genbank</span></code>)", "GFF3 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.gff3</span></code>)", "Labeled square matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.lsmat</span></code>)", "Newick format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.newick</span></code>)", "Ordination results format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.ordination</span></code>)", "PHYLIP multiple sequence alignment format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.phylip</span></code>)", "QSeq format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.qseq</span></code>)", "Stockholm format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.stockholm</span></code>)", "Taxdump format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.taxdump</span></code>)", "I/O Registry (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.registry</span></code>)", "skbio.io.registry.DuplicateRegistrationError", "skbio.io.registry.Format", "skbio.io.registry.Format.__eq__", "skbio.io.registry.Format.__ge__", "skbio.io.registry.Format.__getstate__", "skbio.io.registry.Format.__gt__", "skbio.io.registry.Format.__hash__", "skbio.io.registry.Format.__le__", "skbio.io.registry.Format.__lt__", "skbio.io.registry.Format.__ne__", "skbio.io.registry.Format.__str__", "skbio.io.registry.Format.reader", "skbio.io.registry.Format.sniffer", "skbio.io.registry.Format.writer", "skbio.io.registry.IORegistry", "skbio.io.registry.IORegistry.__eq__", "skbio.io.registry.IORegistry.__ge__", "skbio.io.registry.IORegistry.__getstate__", "skbio.io.registry.IORegistry.__gt__", "skbio.io.registry.IORegistry.__hash__", "skbio.io.registry.IORegistry.__le__", "skbio.io.registry.IORegistry.__lt__", "skbio.io.registry.IORegistry.__ne__", "skbio.io.registry.IORegistry.__str__", "skbio.io.registry.IORegistry.add_format", "skbio.io.registry.IORegistry.create_format", "skbio.io.registry.IORegistry.get_reader", "skbio.io.registry.IORegistry.get_sniffer", "skbio.io.registry.IORegistry.get_writer", "skbio.io.registry.IORegistry.list_read_formats", "skbio.io.registry.IORegistry.list_write_formats", "skbio.io.registry.IORegistry.monkey_patch", "skbio.io.registry.IORegistry.read", "skbio.io.registry.IORegistry.sniff", "skbio.io.registry.IORegistry.write", "skbio.io.registry.InvalidRegistrationError", "skbio.io.registry.create_format", "skbio.io.registry.read", "skbio.io.registry.sniff", "skbio.io.registry.write", "I/O utils (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.util</span></code>)", "skbio.io.util.open", "skbio.io.util.open_file", "skbio.io.util.open_files", "skbio.metadata.Interval", "skbio.metadata.Interval.__eq__", "skbio.metadata.Interval.__ge__", "skbio.metadata.Interval.__getstate__", "skbio.metadata.Interval.__gt__", "skbio.metadata.Interval.__le__", "skbio.metadata.Interval.__lt__", "skbio.metadata.Interval.__ne__", "skbio.metadata.Interval.__str__", "skbio.metadata.Interval.drop", "skbio.metadata.IntervalMetadata", "skbio.metadata.IntervalMetadata.__copy__", "skbio.metadata.IntervalMetadata.__deepcopy__", "skbio.metadata.IntervalMetadata.__eq__", "skbio.metadata.IntervalMetadata.__ge__", "skbio.metadata.IntervalMetadata.__getstate__", "skbio.metadata.IntervalMetadata.__gt__", "skbio.metadata.IntervalMetadata.__le__", "skbio.metadata.IntervalMetadata.__lt__", "skbio.metadata.IntervalMetadata.__ne__", "skbio.metadata.IntervalMetadata.__str__", "skbio.metadata.IntervalMetadata.add", "skbio.metadata.IntervalMetadata.concat", "skbio.metadata.IntervalMetadata.drop", "skbio.metadata.IntervalMetadata.merge", "skbio.metadata.IntervalMetadata.query", "skbio.metadata.IntervalMetadata.read", "skbio.metadata.IntervalMetadata.sort", "skbio.metadata.IntervalMetadata.write", "skbio.sequence.DNA", "skbio.sequence.DNA.__bool__", "skbio.sequence.DNA.__contains__", "skbio.sequence.DNA.__copy__", "skbio.sequence.DNA.__deepcopy__", "skbio.sequence.DNA.__eq__", "skbio.sequence.DNA.__ge__", "skbio.sequence.DNA.__getitem__", "skbio.sequence.DNA.__getstate__", "skbio.sequence.DNA.__gt__", "skbio.sequence.DNA.__iter__", "skbio.sequence.DNA.__le__", "skbio.sequence.DNA.__len__", "skbio.sequence.DNA.__lt__", "skbio.sequence.DNA.__ne__", "skbio.sequence.DNA.__reversed__", "skbio.sequence.DNA.__str__", "skbio.sequence.DNA.complement", "skbio.sequence.DNA.concat", "skbio.sequence.DNA.count", "skbio.sequence.DNA.definites", "skbio.sequence.DNA.degap", "skbio.sequence.DNA.degenerates", "skbio.sequence.DNA.distance", "skbio.sequence.DNA.expand_degenerates", "skbio.sequence.DNA.find_motifs", "skbio.sequence.DNA.find_with_regex", "skbio.sequence.DNA.frequencies", "skbio.sequence.DNA.gaps", "skbio.sequence.DNA.gc_content", "skbio.sequence.DNA.gc_frequency", "skbio.sequence.DNA.has_definites", "skbio.sequence.DNA.has_degenerates", "skbio.sequence.DNA.has_gaps", "skbio.sequence.DNA.has_interval_metadata", "skbio.sequence.DNA.has_metadata", "skbio.sequence.DNA.has_nondegenerates", "skbio.sequence.DNA.has_positional_metadata", "skbio.sequence.DNA.index", "skbio.sequence.DNA.is_reverse_complement", "skbio.sequence.DNA.iter_contiguous", "skbio.sequence.DNA.iter_kmers", "skbio.sequence.DNA.kmer_frequencies", "skbio.sequence.DNA.lowercase", "skbio.sequence.DNA.match_frequency", "skbio.sequence.DNA.matches", "skbio.sequence.DNA.mismatch_frequency", "skbio.sequence.DNA.mismatches", "skbio.sequence.DNA.nondegenerates", "skbio.sequence.DNA.read", "skbio.sequence.DNA.replace", "skbio.sequence.DNA.reverse_complement", "skbio.sequence.DNA.to_regex", "skbio.sequence.DNA.transcribe", "skbio.sequence.DNA.translate", "skbio.sequence.DNA.translate_six_frames", "skbio.sequence.DNA.write", "skbio.sequence.GeneticCode", "skbio.sequence.GeneticCode.__eq__", "skbio.sequence.GeneticCode.__ge__", "skbio.sequence.GeneticCode.__getstate__", "skbio.sequence.GeneticCode.__gt__", "skbio.sequence.GeneticCode.__le__", "skbio.sequence.GeneticCode.__lt__", "skbio.sequence.GeneticCode.__ne__", "skbio.sequence.GeneticCode.__str__", "skbio.sequence.GeneticCode.from_ncbi", "skbio.sequence.GeneticCode.translate", "skbio.sequence.GeneticCode.translate_six_frames", "skbio.sequence.GrammaredSequence", "skbio.sequence.GrammaredSequence.__bool__", "skbio.sequence.GrammaredSequence.__contains__", "skbio.sequence.GrammaredSequence.__copy__", "skbio.sequence.GrammaredSequence.__deepcopy__", "skbio.sequence.GrammaredSequence.__eq__", "skbio.sequence.GrammaredSequence.__ge__", "skbio.sequence.GrammaredSequence.__getitem__", "skbio.sequence.GrammaredSequence.__getstate__", "skbio.sequence.GrammaredSequence.__gt__", "skbio.sequence.GrammaredSequence.__iter__", "skbio.sequence.GrammaredSequence.__le__", "skbio.sequence.GrammaredSequence.__len__", "skbio.sequence.GrammaredSequence.__lt__", "skbio.sequence.GrammaredSequence.__ne__", "skbio.sequence.GrammaredSequence.__reversed__", "skbio.sequence.GrammaredSequence.__str__", "skbio.sequence.GrammaredSequence.concat", "skbio.sequence.GrammaredSequence.count", "skbio.sequence.GrammaredSequence.definites", "skbio.sequence.GrammaredSequence.degap", "skbio.sequence.GrammaredSequence.degenerates", "skbio.sequence.GrammaredSequence.distance", "skbio.sequence.GrammaredSequence.expand_degenerates", "skbio.sequence.GrammaredSequence.find_motifs", "skbio.sequence.GrammaredSequence.find_with_regex", "skbio.sequence.GrammaredSequence.frequencies", "skbio.sequence.GrammaredSequence.gaps", "skbio.sequence.GrammaredSequence.has_definites", "skbio.sequence.GrammaredSequence.has_degenerates", "skbio.sequence.GrammaredSequence.has_gaps", "skbio.sequence.GrammaredSequence.has_interval_metadata", "skbio.sequence.GrammaredSequence.has_metadata", "skbio.sequence.GrammaredSequence.has_nondegenerates", "skbio.sequence.GrammaredSequence.has_positional_metadata", "skbio.sequence.GrammaredSequence.index", "skbio.sequence.GrammaredSequence.iter_contiguous", "skbio.sequence.GrammaredSequence.iter_kmers", "skbio.sequence.GrammaredSequence.kmer_frequencies", "skbio.sequence.GrammaredSequence.lowercase", "skbio.sequence.GrammaredSequence.match_frequency", "skbio.sequence.GrammaredSequence.matches", "skbio.sequence.GrammaredSequence.mismatch_frequency", "skbio.sequence.GrammaredSequence.mismatches", "skbio.sequence.GrammaredSequence.nondegenerates", "skbio.sequence.GrammaredSequence.read", "skbio.sequence.GrammaredSequence.replace", "skbio.sequence.GrammaredSequence.to_regex", "skbio.sequence.GrammaredSequence.write", "skbio.sequence.Protein", "skbio.sequence.Protein.__bool__", "skbio.sequence.Protein.__contains__", "skbio.sequence.Protein.__copy__", "skbio.sequence.Protein.__deepcopy__", "skbio.sequence.Protein.__eq__", "skbio.sequence.Protein.__ge__", "skbio.sequence.Protein.__getitem__", "skbio.sequence.Protein.__getstate__", "skbio.sequence.Protein.__gt__", "skbio.sequence.Protein.__iter__", "skbio.sequence.Protein.__le__", "skbio.sequence.Protein.__len__", "skbio.sequence.Protein.__lt__", "skbio.sequence.Protein.__ne__", "skbio.sequence.Protein.__reversed__", "skbio.sequence.Protein.__str__", "skbio.sequence.Protein.concat", "skbio.sequence.Protein.count", "skbio.sequence.Protein.definites", "skbio.sequence.Protein.degap", "skbio.sequence.Protein.degenerates", "skbio.sequence.Protein.distance", "skbio.sequence.Protein.expand_degenerates", "skbio.sequence.Protein.find_motifs", "skbio.sequence.Protein.find_with_regex", "skbio.sequence.Protein.frequencies", "skbio.sequence.Protein.gaps", "skbio.sequence.Protein.has_definites", "skbio.sequence.Protein.has_degenerates", "skbio.sequence.Protein.has_gaps", "skbio.sequence.Protein.has_interval_metadata", "skbio.sequence.Protein.has_metadata", "skbio.sequence.Protein.has_nondegenerates", "skbio.sequence.Protein.has_positional_metadata", "skbio.sequence.Protein.has_stops", "skbio.sequence.Protein.index", "skbio.sequence.Protein.iter_contiguous", "skbio.sequence.Protein.iter_kmers", "skbio.sequence.Protein.kmer_frequencies", "skbio.sequence.Protein.lowercase", "skbio.sequence.Protein.match_frequency", "skbio.sequence.Protein.matches", "skbio.sequence.Protein.mismatch_frequency", "skbio.sequence.Protein.mismatches", "skbio.sequence.Protein.nondegenerates", "skbio.sequence.Protein.read", "skbio.sequence.Protein.replace", "skbio.sequence.Protein.stops", "skbio.sequence.Protein.to_regex", "skbio.sequence.Protein.write", "skbio.sequence.RNA", "skbio.sequence.RNA.__bool__", "skbio.sequence.RNA.__contains__", "skbio.sequence.RNA.__copy__", "skbio.sequence.RNA.__deepcopy__", "skbio.sequence.RNA.__eq__", "skbio.sequence.RNA.__ge__", "skbio.sequence.RNA.__getitem__", "skbio.sequence.RNA.__getstate__", "skbio.sequence.RNA.__gt__", "skbio.sequence.RNA.__iter__", "skbio.sequence.RNA.__le__", "skbio.sequence.RNA.__len__", "skbio.sequence.RNA.__lt__", "skbio.sequence.RNA.__ne__", "skbio.sequence.RNA.__reversed__", "skbio.sequence.RNA.__str__", "skbio.sequence.RNA.complement", "skbio.sequence.RNA.concat", "skbio.sequence.RNA.count", "skbio.sequence.RNA.definites", "skbio.sequence.RNA.degap", "skbio.sequence.RNA.degenerates", "skbio.sequence.RNA.distance", "skbio.sequence.RNA.expand_degenerates", "skbio.sequence.RNA.find_motifs", "skbio.sequence.RNA.find_with_regex", "skbio.sequence.RNA.frequencies", "skbio.sequence.RNA.gaps", "skbio.sequence.RNA.gc_content", "skbio.sequence.RNA.gc_frequency", "skbio.sequence.RNA.has_definites", "skbio.sequence.RNA.has_degenerates", "skbio.sequence.RNA.has_gaps", "skbio.sequence.RNA.has_interval_metadata", "skbio.sequence.RNA.has_metadata", "skbio.sequence.RNA.has_nondegenerates", "skbio.sequence.RNA.has_positional_metadata", "skbio.sequence.RNA.index", "skbio.sequence.RNA.is_reverse_complement", "skbio.sequence.RNA.iter_contiguous", "skbio.sequence.RNA.iter_kmers", "skbio.sequence.RNA.kmer_frequencies", "skbio.sequence.RNA.lowercase", "skbio.sequence.RNA.match_frequency", "skbio.sequence.RNA.matches", "skbio.sequence.RNA.mismatch_frequency", "skbio.sequence.RNA.mismatches", "skbio.sequence.RNA.nondegenerates", "skbio.sequence.RNA.read", "skbio.sequence.RNA.replace", "skbio.sequence.RNA.reverse_complement", "skbio.sequence.RNA.reverse_transcribe", "skbio.sequence.RNA.to_regex", "skbio.sequence.RNA.translate", "skbio.sequence.RNA.translate_six_frames", "skbio.sequence.RNA.write", "skbio.sequence.Sequence", "skbio.sequence.Sequence.__bool__", "skbio.sequence.Sequence.__contains__", "skbio.sequence.Sequence.__copy__", "skbio.sequence.Sequence.__deepcopy__", "skbio.sequence.Sequence.__eq__", "skbio.sequence.Sequence.__ge__", "skbio.sequence.Sequence.__getitem__", "skbio.sequence.Sequence.__getstate__", "skbio.sequence.Sequence.__gt__", "skbio.sequence.Sequence.__iter__", "skbio.sequence.Sequence.__le__", "skbio.sequence.Sequence.__len__", "skbio.sequence.Sequence.__lt__", "skbio.sequence.Sequence.__ne__", "skbio.sequence.Sequence.__reversed__", "skbio.sequence.Sequence.__str__", "skbio.sequence.Sequence.concat", "skbio.sequence.Sequence.count", "skbio.sequence.Sequence.distance", "skbio.sequence.Sequence.find_with_regex", "skbio.sequence.Sequence.frequencies", "skbio.sequence.Sequence.has_interval_metadata", "skbio.sequence.Sequence.has_metadata", "skbio.sequence.Sequence.has_positional_metadata", "skbio.sequence.Sequence.index", "skbio.sequence.Sequence.iter_contiguous", "skbio.sequence.Sequence.iter_kmers", "skbio.sequence.Sequence.kmer_frequencies", "skbio.sequence.Sequence.lowercase", "skbio.sequence.Sequence.match_frequency", "skbio.sequence.Sequence.matches", "skbio.sequence.Sequence.mismatch_frequency", "skbio.sequence.Sequence.mismatches", "skbio.sequence.Sequence.read", "skbio.sequence.Sequence.replace", "skbio.sequence.Sequence.write", "skbio.sequence.SubstitutionMatrix", "skbio.sequence.SubstitutionMatrix.__contains__", "skbio.sequence.SubstitutionMatrix.__eq__", "skbio.sequence.SubstitutionMatrix.__ge__", "skbio.sequence.SubstitutionMatrix.__getitem__", "skbio.sequence.SubstitutionMatrix.__getstate__", "skbio.sequence.SubstitutionMatrix.__gt__", "skbio.sequence.SubstitutionMatrix.__le__", "skbio.sequence.SubstitutionMatrix.__lt__", "skbio.sequence.SubstitutionMatrix.__ne__", "skbio.sequence.SubstitutionMatrix.__str__", "skbio.sequence.SubstitutionMatrix.between", "skbio.sequence.SubstitutionMatrix.by_name", "skbio.sequence.SubstitutionMatrix.copy", "skbio.sequence.SubstitutionMatrix.filter", "skbio.sequence.SubstitutionMatrix.from_dict", "skbio.sequence.SubstitutionMatrix.from_iterable", "skbio.sequence.SubstitutionMatrix.get_names", "skbio.sequence.SubstitutionMatrix.identity", "skbio.sequence.SubstitutionMatrix.index", "skbio.sequence.SubstitutionMatrix.plot", "skbio.sequence.SubstitutionMatrix.read", "skbio.sequence.SubstitutionMatrix.redundant_form", "skbio.sequence.SubstitutionMatrix.to_data_frame", "skbio.sequence.SubstitutionMatrix.to_dict", "skbio.sequence.SubstitutionMatrix.transpose", "skbio.sequence.SubstitutionMatrix.within", "skbio.sequence.SubstitutionMatrix.write", "Sequence distance metrics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence.distance</span></code>)", "skbio.sequence.distance.hamming", "skbio.sequence.distance.kmer_distance", "Composition Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.composition</span></code>)", "skbio.stats.composition.alr", "skbio.stats.composition.alr_inv", "skbio.stats.composition.ancom", "skbio.stats.composition.centralize", "skbio.stats.composition.closure", "skbio.stats.composition.clr", "skbio.stats.composition.clr_inv", "skbio.stats.composition.ilr", "skbio.stats.composition.ilr_inv", "skbio.stats.composition.inner", "skbio.stats.composition.multiplicative_replacement", "skbio.stats.composition.pairwise_vlr", "skbio.stats.composition.perturb", "skbio.stats.composition.perturb_inv", "skbio.stats.composition.power", "skbio.stats.composition.sbp_basis", "skbio.stats.composition.tree_basis", "skbio.stats.composition.vlr", "Distance matrices and distance-based statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.distance</span></code>)", "skbio.stats.distance.DissimilarityMatrix", "skbio.stats.distance.DissimilarityMatrix.__contains__", "skbio.stats.distance.DissimilarityMatrix.__eq__", "skbio.stats.distance.DissimilarityMatrix.__ge__", "skbio.stats.distance.DissimilarityMatrix.__getitem__", "skbio.stats.distance.DissimilarityMatrix.__getstate__", "skbio.stats.distance.DissimilarityMatrix.__gt__", "skbio.stats.distance.DissimilarityMatrix.__le__", "skbio.stats.distance.DissimilarityMatrix.__lt__", "skbio.stats.distance.DissimilarityMatrix.__ne__", "skbio.stats.distance.DissimilarityMatrix.__str__", "skbio.stats.distance.DissimilarityMatrix.between", "skbio.stats.distance.DissimilarityMatrix.copy", "skbio.stats.distance.DissimilarityMatrix.filter", "skbio.stats.distance.DissimilarityMatrix.from_iterable", "skbio.stats.distance.DissimilarityMatrix.index", "skbio.stats.distance.DissimilarityMatrix.plot", "skbio.stats.distance.DissimilarityMatrix.read", "skbio.stats.distance.DissimilarityMatrix.redundant_form", "skbio.stats.distance.DissimilarityMatrix.to_data_frame", "skbio.stats.distance.DissimilarityMatrix.transpose", "skbio.stats.distance.DissimilarityMatrix.within", "skbio.stats.distance.DissimilarityMatrix.write", "skbio.stats.distance.DissimilarityMatrixError", "skbio.stats.distance.DistanceMatrix", "skbio.stats.distance.DistanceMatrix.__contains__", "skbio.stats.distance.DistanceMatrix.__eq__", "skbio.stats.distance.DistanceMatrix.__ge__", "skbio.stats.distance.DistanceMatrix.__getitem__", "skbio.stats.distance.DistanceMatrix.__getstate__", "skbio.stats.distance.DistanceMatrix.__gt__", "skbio.stats.distance.DistanceMatrix.__le__", "skbio.stats.distance.DistanceMatrix.__lt__", "skbio.stats.distance.DistanceMatrix.__ne__", "skbio.stats.distance.DistanceMatrix.__str__", "skbio.stats.distance.DistanceMatrix.between", "skbio.stats.distance.DistanceMatrix.condensed_form", "skbio.stats.distance.DistanceMatrix.copy", "skbio.stats.distance.DistanceMatrix.filter", "skbio.stats.distance.DistanceMatrix.from_iterable", "skbio.stats.distance.DistanceMatrix.index", "skbio.stats.distance.DistanceMatrix.permute", "skbio.stats.distance.DistanceMatrix.plot", "skbio.stats.distance.DistanceMatrix.read", "skbio.stats.distance.DistanceMatrix.redundant_form", "skbio.stats.distance.DistanceMatrix.to_data_frame", "skbio.stats.distance.DistanceMatrix.to_series", "skbio.stats.distance.DistanceMatrix.transpose", "skbio.stats.distance.DistanceMatrix.within", "skbio.stats.distance.DistanceMatrix.write", "skbio.stats.distance.DistanceMatrixError", "skbio.stats.distance.MissingIDError", "skbio.stats.distance.anosim", "skbio.stats.distance.bioenv", "skbio.stats.distance.mantel", "skbio.stats.distance.permanova", "skbio.stats.distance.permdisp", "skbio.stats.distance.pwmantel", "skbio.stats.distance.randdm", "Evolutionary statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.evolve</span></code>)", "skbio.stats.evolve.hommola_cospeciation", "Gradient analyses (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.gradient</span></code>)", "skbio.stats.gradient.AverageGradientANOVA", "skbio.stats.gradient.AverageGradientANOVA.__eq__", "skbio.stats.gradient.AverageGradientANOVA.__ge__", "skbio.stats.gradient.AverageGradientANOVA.__getstate__", "skbio.stats.gradient.AverageGradientANOVA.__gt__", "skbio.stats.gradient.AverageGradientANOVA.__hash__", "skbio.stats.gradient.AverageGradientANOVA.__le__", "skbio.stats.gradient.AverageGradientANOVA.__lt__", "skbio.stats.gradient.AverageGradientANOVA.__ne__", "skbio.stats.gradient.AverageGradientANOVA.__str__", "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "skbio.stats.gradient.CategoryResults", "skbio.stats.gradient.CategoryResults.__eq__", "skbio.stats.gradient.CategoryResults.__ge__", "skbio.stats.gradient.CategoryResults.__getstate__", "skbio.stats.gradient.CategoryResults.__gt__", "skbio.stats.gradient.CategoryResults.__hash__", "skbio.stats.gradient.CategoryResults.__le__", "skbio.stats.gradient.CategoryResults.__lt__", "skbio.stats.gradient.CategoryResults.__ne__", "skbio.stats.gradient.CategoryResults.__str__", "skbio.stats.gradient.CategoryResults.to_files", "skbio.stats.gradient.FirstDifferenceGradientANOVA", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVA", "skbio.stats.gradient.GradientANOVA.__eq__", "skbio.stats.gradient.GradientANOVA.__ge__", "skbio.stats.gradient.GradientANOVA.__getstate__", "skbio.stats.gradient.GradientANOVA.__gt__", "skbio.stats.gradient.GradientANOVA.__hash__", "skbio.stats.gradient.GradientANOVA.__le__", "skbio.stats.gradient.GradientANOVA.__lt__", "skbio.stats.gradient.GradientANOVA.__ne__", "skbio.stats.gradient.GradientANOVA.__str__", "skbio.stats.gradient.GradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVAResults", "skbio.stats.gradient.GradientANOVAResults.__eq__", "skbio.stats.gradient.GradientANOVAResults.__ge__", "skbio.stats.gradient.GradientANOVAResults.__getstate__", "skbio.stats.gradient.GradientANOVAResults.__gt__", "skbio.stats.gradient.GradientANOVAResults.__hash__", "skbio.stats.gradient.GradientANOVAResults.__le__", "skbio.stats.gradient.GradientANOVAResults.__lt__", "skbio.stats.gradient.GradientANOVAResults.__ne__", "skbio.stats.gradient.GradientANOVAResults.__str__", "skbio.stats.gradient.GradientANOVAResults.to_files", "skbio.stats.gradient.GroupResults", "skbio.stats.gradient.GroupResults.__eq__", "skbio.stats.gradient.GroupResults.__ge__", "skbio.stats.gradient.GroupResults.__getstate__", "skbio.stats.gradient.GroupResults.__gt__", "skbio.stats.gradient.GroupResults.__hash__", "skbio.stats.gradient.GroupResults.__le__", "skbio.stats.gradient.GroupResults.__lt__", "skbio.stats.gradient.GroupResults.__ne__", "skbio.stats.gradient.GroupResults.__str__", "skbio.stats.gradient.GroupResults.to_files", "skbio.stats.gradient.TrajectoryGradientANOVA", "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "skbio.stats.gradient.WindowDifferenceGradientANOVA", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "skbio.stats.isubsample", "Ordination methods (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.ordination</span></code>)", "skbio.stats.ordination.OrdinationResults", "skbio.stats.ordination.OrdinationResults.__eq__", "skbio.stats.ordination.OrdinationResults.__ge__", "skbio.stats.ordination.OrdinationResults.__getstate__", "skbio.stats.ordination.OrdinationResults.__gt__", "skbio.stats.ordination.OrdinationResults.__hash__", "skbio.stats.ordination.OrdinationResults.__le__", "skbio.stats.ordination.OrdinationResults.__lt__", "skbio.stats.ordination.OrdinationResults.__ne__", "skbio.stats.ordination.OrdinationResults.__str__", "skbio.stats.ordination.OrdinationResults.plot", "skbio.stats.ordination.OrdinationResults.read", "skbio.stats.ordination.OrdinationResults.write", "skbio.stats.ordination.ca", "skbio.stats.ordination.cca", "skbio.stats.ordination.corr", "skbio.stats.ordination.e_matrix", "skbio.stats.ordination.f_matrix", "skbio.stats.ordination.mean_and_std", "skbio.stats.ordination.pcoa", "skbio.stats.ordination.pcoa_biplot", "skbio.stats.ordination.rda", "skbio.stats.ordination.scale", "skbio.stats.ordination.svd_rank", "Empirical Power Estimation (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.power</span></code>)", "skbio.stats.power.confidence_bound", "skbio.stats.power.paired_subsamples", "skbio.stats.power.subsample_paired_power", "skbio.stats.power.subsample_power", "skbio.stats.subsample_counts", "skbio.tree.DuplicateNodeError", "skbio.tree.MissingNodeError", "skbio.tree.NoLengthError", "skbio.tree.NoParentError", "skbio.tree.TreeError", "skbio.tree.TreeNode", "skbio.tree.TreeNode.__copy__", "skbio.tree.TreeNode.__deepcopy__", "skbio.tree.TreeNode.__eq__", "skbio.tree.TreeNode.__ge__", "skbio.tree.TreeNode.__getitem__", "skbio.tree.TreeNode.__getstate__", "skbio.tree.TreeNode.__gt__", "skbio.tree.TreeNode.__hash__", "skbio.tree.TreeNode.__iter__", "skbio.tree.TreeNode.__le__", "skbio.tree.TreeNode.__len__", "skbio.tree.TreeNode.__lt__", "skbio.tree.TreeNode.__ne__", "skbio.tree.TreeNode.__str__", "skbio.tree.TreeNode.accumulate_to_ancestor", "skbio.tree.TreeNode.ancestors", "skbio.tree.TreeNode.append", "skbio.tree.TreeNode.ascii_art", "skbio.tree.TreeNode.assign_ids", "skbio.tree.TreeNode.assign_supports", "skbio.tree.TreeNode.bifurcate", "skbio.tree.TreeNode.cache_attr", "skbio.tree.TreeNode.compare_rfd", "skbio.tree.TreeNode.compare_subsets", "skbio.tree.TreeNode.compare_tip_distances", "skbio.tree.TreeNode.copy", "skbio.tree.TreeNode.count", "skbio.tree.TreeNode.create_caches", "skbio.tree.TreeNode.deepcopy", "skbio.tree.TreeNode.descending_branch_length", "skbio.tree.TreeNode.distance", "skbio.tree.TreeNode.extend", "skbio.tree.TreeNode.find", "skbio.tree.TreeNode.find_all", "skbio.tree.TreeNode.find_by_func", "skbio.tree.TreeNode.find_by_id", "skbio.tree.TreeNode.from_linkage_matrix", "skbio.tree.TreeNode.from_taxdump", "skbio.tree.TreeNode.from_taxonomy", "skbio.tree.TreeNode.get_max_distance", "skbio.tree.TreeNode.has_children", "skbio.tree.TreeNode.index_tree", "skbio.tree.TreeNode.invalidate_caches", "skbio.tree.TreeNode.is_root", "skbio.tree.TreeNode.is_tip", "skbio.tree.TreeNode.lca", "skbio.tree.TreeNode.levelorder", "skbio.tree.TreeNode.lowest_common_ancestor", "skbio.tree.TreeNode.neighbors", "skbio.tree.TreeNode.non_tips", "skbio.tree.TreeNode.observed_node_counts", "skbio.tree.TreeNode.pop", "skbio.tree.TreeNode.postorder", "skbio.tree.TreeNode.pre_and_postorder", "skbio.tree.TreeNode.preorder", "skbio.tree.TreeNode.prune", "skbio.tree.TreeNode.read", "skbio.tree.TreeNode.remove", "skbio.tree.TreeNode.remove_deleted", "skbio.tree.TreeNode.root", "skbio.tree.TreeNode.root_at", "skbio.tree.TreeNode.root_at_midpoint", "skbio.tree.TreeNode.shear", "skbio.tree.TreeNode.shuffle", "skbio.tree.TreeNode.siblings", "skbio.tree.TreeNode.subset", "skbio.tree.TreeNode.subsets", "skbio.tree.TreeNode.subtree", "skbio.tree.TreeNode.tip_tip_distances", "skbio.tree.TreeNode.tips", "skbio.tree.TreeNode.to_array", "skbio.tree.TreeNode.to_taxonomy", "skbio.tree.TreeNode.traverse", "skbio.tree.TreeNode.unpack", "skbio.tree.TreeNode.unpack_by_func", "skbio.tree.TreeNode.unrooted_copy", "skbio.tree.TreeNode.unrooted_deepcopy", "skbio.tree.TreeNode.write", "skbio.tree.majority_rule", "skbio.tree.nj", "skbio.util.EfficiencyWarning", "skbio.util.RepresentationWarning", "skbio.util.assert_data_frame_almost_equal", "skbio.util.assert_ordination_results_equal", "skbio.util.cardinal_to_ordinal", "skbio.util.classproperty", "skbio.util.classproperty.__delete__", "skbio.util.classproperty.__eq__", "skbio.util.classproperty.__ge__", "skbio.util.classproperty.__get__", "skbio.util.classproperty.__getstate__", "skbio.util.classproperty.__gt__", "skbio.util.classproperty.__hash__", "skbio.util.classproperty.__le__", "skbio.util.classproperty.__lt__", "skbio.util.classproperty.__ne__", "skbio.util.classproperty.__set__", "skbio.util.classproperty.__set_name__", "skbio.util.classproperty.__str__", "skbio.util.classproperty.deleter", "skbio.util.classproperty.getter", "skbio.util.classproperty.setter", "skbio.util.find_duplicates", "skbio.util.get_data_path", "skbio.util.safe_md5", "skbio.workflow.Workflow", "skbio.workflow.Workflow.__call__", "skbio.workflow.Workflow.__eq__", "skbio.workflow.Workflow.__ge__", "skbio.workflow.Workflow.__getstate__", "skbio.workflow.Workflow.__gt__", "skbio.workflow.Workflow.__hash__", "skbio.workflow.Workflow.__le__", "skbio.workflow.Workflow.__lt__", "skbio.workflow.Workflow.__ne__", "skbio.workflow.Workflow.__str__", "skbio.workflow.Workflow.initialize_state", "skbio.workflow.method", "skbio.workflow.method.__call__", "skbio.workflow.method.__eq__", "skbio.workflow.method.__ge__", "skbio.workflow.method.__getstate__", "skbio.workflow.method.__gt__", "skbio.workflow.method.__hash__", "skbio.workflow.method.__le__", "skbio.workflow.method.__lt__", "skbio.workflow.method.__ne__", "skbio.workflow.method.__str__", "skbio.workflow.requires", "skbio.workflow.requires.__call__", "skbio.workflow.requires.__eq__", "skbio.workflow.requires.__ge__", "skbio.workflow.requires.__getstate__", "skbio.workflow.requires.__gt__", "skbio.workflow.requires.__hash__", "skbio.workflow.requires.__le__", "skbio.workflow.requires.__lt__", "skbio.workflow.requires.__ne__", "skbio.workflow.requires.__str__", "Home", "File I/O (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io</span></code>)", "Metadata (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.metadata</span></code>)", "Sequences (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence</span></code>)", "Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats</span></code>)", "Tree representations (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.tree</span></code>)", "Utility functionality (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.util</span></code>)", "Constructing workflows (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.workflow</span></code>)"], "terms": {"thi": [0, 1, 16, 30, 31, 32, 33, 35, 40, 42, 44, 45, 46, 47, 48, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 78, 79, 80, 83, 84, 85, 90, 93, 94, 103, 104, 105, 106, 107, 108, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 159, 160, 161, 173, 181, 184, 186, 188, 189, 190, 192, 193, 199, 201, 202, 203, 204, 205, 211, 213, 214, 215, 216, 217, 218, 220, 223, 224, 225, 226, 228, 231, 233, 235, 236, 239, 240, 244, 248, 250, 251, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 276, 277, 278, 287, 288, 289, 290, 292, 293, 294, 295, 297, 300, 302, 304, 305, 307, 308, 312, 316, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 341, 342, 343, 344, 346, 349, 351, 353, 354, 356, 357, 361, 365, 375, 376, 377, 378, 380, 381, 382, 383, 385, 386, 388, 389, 392, 393, 394, 395, 397, 400, 402, 404, 405, 408, 409, 413, 417, 419, 420, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 443, 445, 446, 447, 449, 450, 451, 452, 454, 457, 459, 461, 462, 464, 465, 466, 468, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 488, 505, 506, 507, 511, 512, 513, 514, 515, 516, 517, 518, 521, 522, 523, 524, 525, 526, 528, 529, 530, 532, 534, 537, 539, 552, 553, 554, 557, 559, 561, 563, 576, 578, 579, 580, 581, 584, 587, 588, 589, 591, 593, 594, 595, 596, 685, 686, 697, 698, 699, 701, 706, 707, 708, 711, 713, 714, 715, 722, 738, 740, 742, 744, 746, 747, 750, 752, 753, 755, 757, 758, 760, 764, 771, 775, 778, 779, 781, 783, 784, 786, 787, 788, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 826, 827, 828, 829, 839, 851, 863, 864, 865, 866, 867, 868, 869], "modul": [0, 1, 145, 147, 188, 512, 515, 518, 596, 686, 711, 826, 827, 864, 865, 867, 869], "provid": [0, 1, 16, 28, 45, 47, 48, 55, 56, 61, 64, 66, 68, 78, 83, 94, 103, 104, 105, 106, 107, 112, 132, 136, 137, 141, 143, 145, 146, 147, 159, 161, 180, 181, 185, 186, 188, 190, 218, 226, 248, 261, 264, 270, 295, 316, 326, 329, 335, 344, 365, 376, 379, 385, 390, 395, 417, 430, 433, 439, 447, 452, 468, 473, 476, 481, 484, 500, 505, 510, 515, 534, 535, 549, 552, 556, 574, 578, 583, 587, 588, 589, 590, 591, 593, 596, 630, 685, 687, 697, 698, 702, 711, 713, 714, 744, 752, 760, 773, 779, 783, 786, 793, 801, 802, 829, 863, 864, 865, 867, 868, 869], "comput": [0, 1, 46, 47, 50, 69, 72, 78, 85, 96, 102, 103, 104, 105, 106, 107, 108, 111, 202, 244, 248, 312, 316, 361, 365, 413, 417, 466, 468, 500, 512, 513, 514, 518, 527, 531, 532, 533, 534, 549, 574, 587, 588, 589, 590, 591, 592, 595, 596, 597, 607, 629, 630, 640, 641, 652, 663, 673, 674, 684, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 753, 789, 791, 801, 827, 865, 867], "manipul": [0, 51, 52, 256, 258, 322, 324, 371, 373, 425, 427, 447, 470, 471, 515, 534], "sequenc": [0, 1, 2, 16, 28, 29, 31, 32, 33, 38, 40, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 132, 133, 134, 135, 137, 138, 139, 144, 146, 192, 202, 214, 535, 593, 685, 715, 862, 863, 869], "dna": [0, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 48, 49, 50, 52, 53, 54, 56, 57, 58, 61, 64, 66, 134, 135, 136, 137, 138, 139, 143, 144, 145, 278, 290, 307, 309, 310, 311, 313, 314, 317, 318, 319, 320, 323, 324, 326, 334, 337, 356, 358, 359, 360, 362, 363, 366, 367, 368, 369, 372, 373, 376, 384, 388, 390, 407, 408, 410, 411, 412, 414, 415, 418, 419, 420, 421, 422, 423, 426, 427, 429, 430, 438, 441, 442, 443, 447, 464, 471, 473, 535, 863, 865], "rna": [0, 28, 33, 61, 64, 66, 134, 135, 136, 137, 138, 143, 144, 145, 221, 239, 274, 275, 276, 278, 288, 289, 290, 307, 356, 447, 464, 865], "protein": [0, 16, 28, 47, 60, 62, 65, 66, 132, 134, 135, 136, 137, 138, 143, 144, 145, 261, 275, 276, 278, 288, 289, 290, 326, 430, 444, 445, 447, 473, 496, 714, 865], "can": [0, 1, 16, 28, 53, 56, 60, 61, 62, 66, 67, 74, 78, 79, 94, 103, 105, 106, 107, 109, 110, 111, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 149, 189, 192, 201, 202, 217, 239, 244, 246, 261, 271, 307, 312, 314, 326, 336, 356, 361, 363, 376, 386, 408, 413, 415, 430, 440, 447, 464, 466, 473, 482, 484, 488, 496, 512, 515, 518, 531, 534, 535, 539, 559, 563, 587, 588, 589, 591, 592, 593, 596, 686, 697, 700, 705, 706, 707, 708, 711, 713, 714, 715, 722, 743, 745, 753, 783, 786, 793, 801, 802, 803, 807, 808, 828, 851, 865, 867, 869], "well": [0, 137, 147, 447, 534, 535, 588, 590, 591, 595, 687, 701, 801, 863, 867, 868], "custom": [0, 1, 146, 221, 244, 278, 279, 290, 312, 339, 361, 390, 413, 466, 697], "alphabet": [0, 57, 67, 109, 110, 132, 136, 221, 278, 290, 339, 390, 447, 484, 496, 499, 502, 513, 865], "load": [0, 136, 137, 142, 144, 496, 518, 534, 535, 587, 588, 591, 592, 826, 827, 863], "two": [0, 1, 60, 61, 62, 63, 64, 65, 66, 69, 74, 94, 105, 106, 132, 133, 136, 137, 138, 139, 141, 143, 144, 146, 192, 193, 199, 205, 211, 214, 219, 221, 226, 239, 244, 261, 265, 267, 295, 307, 312, 326, 330, 332, 339, 344, 356, 361, 376, 380, 382, 390, 395, 408, 413, 430, 434, 436, 452, 464, 466, 473, 477, 479, 484, 486, 488, 493, 495, 500, 506, 513, 514, 515, 518, 531, 532, 534, 535, 537, 539, 544, 546, 549, 553, 559, 561, 563, 568, 570, 574, 579, 587, 588, 589, 590, 591, 592, 593, 595, 701, 706, 711, 714, 715, 746, 747, 753, 762, 784, 786, 801, 806, 863, 865, 867], "have": [0, 1, 16, 46, 49, 50, 53, 54, 66, 68, 78, 83, 95, 99, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 179, 189, 192, 202, 203, 204, 226, 239, 245, 261, 288, 295, 307, 313, 326, 344, 356, 362, 376, 395, 408, 414, 430, 452, 464, 473, 486, 502, 518, 532, 534, 537, 561, 589, 595, 596, 618, 630, 651, 662, 685, 697, 700, 701, 702, 705, 706, 708, 709, 711, 713, 714, 715, 716, 722, 741, 742, 743, 752, 754, 755, 778, 784, 791, 793, 794, 803, 805, 865, 867, 869], "been": [0, 60, 61, 62, 111, 136, 137, 138, 143, 179, 181, 186, 189, 261, 326, 376, 430, 447, 473, 589, 595, 716, 778], "previous": [0, 264, 271, 329, 336, 379, 386, 433, 440, 476, 482, 869], "tabularmsa": [0, 60, 61, 62, 63, 64, 65, 66, 126, 134, 137, 143, 145, 202, 863], "object": [0, 1, 16, 28, 31, 32, 33, 42, 45, 48, 49, 51, 52, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 108, 111, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 180, 182, 185, 187, 192, 193, 199, 201, 202, 203, 204, 205, 211, 213, 214, 215, 216, 217, 221, 223, 226, 228, 239, 240, 244, 247, 248, 255, 256, 258, 259, 260, 265, 266, 267, 268, 273, 290, 292, 295, 297, 307, 308, 312, 315, 316, 321, 322, 324, 325, 330, 331, 332, 333, 337, 339, 341, 344, 346, 356, 357, 361, 364, 365, 370, 371, 373, 375, 380, 381, 382, 383, 388, 390, 392, 395, 397, 408, 409, 413, 416, 417, 424, 425, 427, 428, 429, 434, 435, 436, 437, 443, 447, 449, 452, 454, 464, 465, 466, 467, 468, 469, 470, 471, 472, 477, 478, 479, 480, 484, 488, 498, 500, 504, 512, 513, 518, 534, 535, 539, 548, 549, 551, 559, 563, 573, 574, 577, 587, 588, 590, 591, 592, 593, 618, 651, 662, 700, 701, 706, 707, 708, 722, 739, 747, 754, 786, 791, 793, 802, 805, 806, 827, 828, 851, 863, 865, 867, 869], "us": [0, 1, 2, 16, 28, 35, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 60, 61, 62, 72, 73, 74, 78, 79, 82, 83, 90, 93, 94, 97, 103, 105, 106, 107, 108, 111, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 159, 160, 161, 177, 178, 181, 186, 189, 202, 214, 221, 239, 244, 248, 256, 258, 261, 263, 264, 271, 275, 276, 278, 286, 287, 288, 289, 290, 307, 312, 316, 322, 324, 326, 328, 329, 336, 339, 356, 361, 365, 371, 373, 376, 378, 379, 386, 390, 408, 413, 417, 425, 427, 430, 432, 433, 440, 444, 445, 447, 464, 466, 468, 470, 471, 473, 475, 476, 482, 484, 488, 500, 512, 513, 515, 516, 518, 523, 524, 526, 532, 534, 535, 539, 549, 559, 563, 574, 581, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 619, 630, 641, 663, 674, 686, 697, 700, 706, 710, 711, 712, 713, 714, 715, 722, 723, 724, 740, 742, 743, 744, 747, 748, 751, 753, 759, 760, 778, 783, 784, 791, 793, 798, 799, 801, 802, 803, 804, 805, 806, 807, 828, 851, 865, 867, 868, 869], "id": [0, 1, 28, 33, 51, 56, 57, 78, 94, 103, 105, 106, 107, 108, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 226, 235, 237, 256, 275, 276, 278, 287, 288, 289, 295, 304, 306, 322, 344, 353, 355, 371, 395, 404, 406, 425, 444, 445, 447, 452, 461, 463, 470, 484, 485, 486, 488, 494, 495, 498, 500, 503, 507, 510, 527, 534, 535, 536, 537, 539, 545, 546, 548, 549, 550, 554, 556, 559, 560, 561, 563, 569, 570, 573, 574, 575, 576, 580, 581, 583, 586, 587, 588, 589, 590, 591, 592, 593, 630, 674, 687, 696, 697, 713, 714, 715, 723, 724, 741, 748, 751, 758, 760, 761, 764, 791, 793, 802, 865], "msa": [0, 28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 48, 49, 50, 53, 54, 56, 57, 58, 134, 136, 137, 143, 145], "": [0, 1, 2, 16, 28, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 61, 62, 65, 69, 71, 74, 76, 77, 78, 79, 81, 82, 86, 88, 89, 90, 94, 95, 97, 98, 99, 101, 102, 103, 105, 106, 108, 109, 110, 130, 132, 133, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 192, 202, 214, 221, 223, 226, 228, 231, 233, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 274, 275, 276, 278, 279, 285, 288, 289, 290, 292, 295, 297, 300, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 339, 341, 344, 346, 349, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 390, 392, 395, 397, 400, 402, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 442, 444, 445, 447, 449, 452, 454, 457, 459, 461, 462, 463, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 488, 495, 496, 498, 510, 513, 516, 517, 518, 521, 522, 523, 524, 527, 531, 533, 535, 539, 546, 548, 556, 563, 570, 573, 583, 587, 588, 589, 590, 591, 618, 651, 662, 685, 697, 700, 701, 702, 706, 708, 710, 711, 713, 714, 715, 744, 752, 764, 780, 801, 851, 863, 865, 867, 869], "index": [0, 1, 2, 28, 30, 33, 35, 42, 45, 48, 49, 52, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 71, 74, 80, 82, 83, 86, 87, 89, 95, 97, 98, 99, 102, 103, 134, 136, 143, 144, 145, 228, 258, 297, 324, 346, 373, 397, 427, 454, 471, 485, 488, 507, 516, 517, 518, 534, 536, 539, 554, 560, 563, 580, 581, 587, 588, 589, 590, 591, 596, 630, 674, 687, 697, 713, 761, 764, 774, 775, 793, 801, 805], "from": [0, 1, 16, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 74, 78, 83, 94, 101, 102, 105, 106, 112, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 159, 160, 161, 180, 185, 192, 201, 202, 214, 215, 218, 221, 222, 223, 226, 228, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 288, 289, 290, 291, 292, 295, 297, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 344, 346, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 395, 397, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 452, 454, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 495, 496, 499, 500, 502, 504, 505, 507, 508, 510, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 539, 546, 549, 551, 552, 554, 556, 563, 570, 574, 577, 578, 580, 581, 583, 587, 588, 589, 591, 592, 593, 595, 596, 597, 685, 686, 697, 698, 700, 701, 703, 704, 706, 711, 713, 714, 715, 716, 723, 724, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 807, 827, 829, 865, 867, 869], "import": [0, 1, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 74, 78, 94, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 159, 160, 161, 192, 202, 214, 221, 222, 223, 226, 228, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 278, 288, 289, 290, 291, 292, 295, 297, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 344, 346, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 395, 397, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 452, 454, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 495, 496, 499, 502, 504, 507, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 546, 551, 554, 556, 570, 577, 580, 581, 583, 587, 588, 589, 591, 592, 595, 596, 685, 686, 697, 711, 713, 714, 715, 716, 723, 724, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 807, 827, 863, 865, 867, 869], "seq": [0, 28, 38, 43, 49, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 132, 133, 134, 136, 137, 139, 143, 144, 224, 225, 238, 245, 248, 256, 258, 271, 272, 273, 276, 289, 290, 293, 294, 313, 316, 322, 324, 336, 337, 342, 343, 362, 365, 371, 373, 386, 388, 393, 394, 407, 414, 417, 425, 427, 440, 441, 443, 445, 447, 450, 451, 468, 470, 471, 482, 685, 869], "acc": [0, 133, 865], "g": [0, 1, 16, 33, 47, 48, 54, 62, 65, 80, 83, 90, 94, 108, 111, 126, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 146, 147, 192, 221, 228, 231, 236, 239, 240, 247, 248, 249, 250, 251, 261, 297, 300, 305, 307, 308, 315, 316, 317, 326, 339, 346, 349, 354, 356, 357, 364, 365, 366, 376, 390, 397, 400, 405, 408, 409, 416, 417, 418, 419, 420, 430, 447, 454, 457, 462, 464, 465, 467, 468, 473, 484, 488, 496, 502, 513, 518, 531, 534, 535, 539, 559, 563, 581, 587, 588, 590, 591, 697, 714, 715, 722, 743, 744, 749, 752, 756, 783, 784, 785, 787, 788, 794, 797, 798, 799, 801, 828, 863, 865, 867, 869], "ggta": 0, "metadata": [0, 1, 28, 33, 42, 45, 46, 48, 51, 52, 53, 54, 56, 57, 134, 135, 136, 137, 138, 139, 143, 144, 221, 226, 228, 235, 237, 238, 239, 242, 245, 255, 256, 258, 264, 271, 272, 274, 275, 276, 278, 288, 289, 290, 295, 297, 304, 306, 307, 310, 313, 321, 322, 324, 329, 336, 339, 344, 346, 353, 355, 356, 359, 362, 370, 371, 373, 379, 386, 390, 395, 397, 404, 406, 407, 408, 411, 414, 424, 425, 427, 433, 440, 441, 442, 444, 445, 447, 452, 454, 461, 463, 464, 469, 470, 471, 476, 482, 500, 549, 574, 588, 596, 608, 630, 641, 652, 674, 697, 708, 711, 713, 714, 715, 862, 865], "seq1": [0, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 134, 136, 137, 143, 145, 513, 514], "tcc": 0, "ggca": 0, "seq2": [0, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 136, 137, 145, 513, 514], "minter": [0, 28, 33, 45, 48, 56, 57, 134, 143], "stat": [0, 1, 28, 45, 46, 48, 53, 54, 57, 90, 96, 131, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 221, 228, 238, 239, 242, 245, 272, 274, 275, 276, 278, 288, 289, 290, 297, 307, 310, 313, 339, 346, 356, 359, 362, 390, 397, 407, 408, 411, 414, 441, 442, 444, 445, 447, 454, 464, 495, 504, 510, 512, 862, 865], "count": [0, 28, 45, 48, 50, 54, 57, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 134, 136, 137, 143, 145, 248, 250, 251, 263, 265, 267, 316, 328, 330, 332, 365, 378, 380, 382, 417, 419, 420, 432, 434, 436, 468, 475, 477, 479, 514, 515, 518, 595, 701, 707, 714, 715, 716, 746, 747, 773, 801, 862, 863], "2": [0, 1, 16, 28, 33, 40, 45, 46, 47, 49, 50, 53, 54, 56, 60, 61, 62, 63, 64, 65, 69, 72, 74, 76, 78, 80, 83, 84, 85, 87, 88, 90, 94, 97, 98, 105, 106, 107, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 160, 202, 214, 217, 219, 221, 238, 239, 240, 246, 247, 248, 251, 259, 261, 263, 272, 276, 279, 288, 289, 307, 308, 314, 315, 316, 325, 326, 328, 356, 357, 363, 364, 365, 375, 376, 378, 407, 408, 409, 415, 416, 417, 420, 428, 430, 432, 441, 445, 447, 464, 465, 467, 468, 472, 473, 475, 484, 495, 496, 502, 504, 507, 510, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 551, 554, 556, 559, 570, 577, 580, 581, 583, 587, 588, 589, 590, 591, 592, 593, 595, 596, 685, 686, 697, 700, 701, 703, 706, 708, 711, 713, 714, 715, 716, 737, 742, 743, 745, 747, 752, 753, 758, 760, 761, 762, 785, 786, 791, 793, 794, 796, 797, 801, 802, 807, 863, 865, 867, 869], "posit": [0, 16, 28, 29, 33, 42, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 60, 61, 62, 63, 64, 65, 66, 67, 132, 133, 134, 136, 137, 138, 141, 143, 144, 145, 221, 226, 228, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 258, 259, 261, 264, 265, 266, 267, 268, 269, 271, 272, 274, 275, 276, 288, 289, 295, 297, 300, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 324, 325, 326, 329, 330, 331, 332, 333, 334, 336, 339, 344, 346, 349, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 366, 373, 375, 376, 379, 380, 381, 382, 383, 384, 386, 387, 390, 395, 397, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 427, 428, 430, 433, 434, 435, 436, 437, 438, 440, 441, 442, 444, 445, 447, 452, 454, 457, 461, 462, 463, 464, 465, 467, 471, 472, 473, 476, 477, 478, 479, 480, 482, 516, 517, 518, 526, 589, 595, 674, 687, 711, 712, 714, 715, 774, 865], "13": [0, 73, 95, 133, 136, 142, 144, 221, 290, 339, 390, 447, 518, 686], "dtype": [0, 1, 28, 33, 45, 46, 47, 48, 50, 53, 54, 56, 57, 134, 136, 137, 143, 144, 145, 238, 239, 241, 242, 243, 249, 266, 268, 269, 272, 307, 309, 310, 311, 317, 331, 333, 334, 356, 358, 359, 360, 366, 381, 383, 384, 387, 407, 408, 410, 411, 412, 418, 435, 437, 438, 441, 447, 464, 478, 480, 484, 518, 535, 559, 581, 587, 591, 686, 793, 865], "conveni": [0, 16, 55, 59, 93, 182, 187, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 698, 699, 779, 800, 868], "local_pairwise_align_ssw": [0, 60, 61, 62, 63, 64, 65], "score": [0, 2, 16, 47, 60, 61, 62, 63, 64, 65, 66, 67, 73, 132, 133, 136, 138, 139, 144, 447, 484, 499, 502, 687, 708], "start_end_posit": 0, "actaaggctctctacccctctcagaga": 0, "actaaggctcctaacccccttttctcaga": 0, "30": [0, 133, 138, 139, 142, 144, 714, 715, 775], "actaaggctctct": 0, "acccc": 0, "tctcaga": 0, "actaaggctc": 0, "ctaacccccttttctcaga": 0, "27": [0, 78, 97, 105, 106, 133, 339, 527, 589], "0": [0, 1, 14, 15, 16, 28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 159, 160, 161, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 191, 193, 199, 201, 203, 204, 205, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 228, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 278, 279, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 346, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 485, 486, 488, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 560, 561, 563, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 595, 596, 607, 618, 629, 630, 640, 651, 662, 673, 684, 685, 686, 696, 697, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 723, 724, 727, 731, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 805, 806, 807, 825, 826, 827, 829, 839, 840, 841, 852, 863, 865, 867, 869], "24": [0, 133, 142, 496, 714], "28": [0, 94, 142, 711], "stripedsmithwaterman": [0, 66], "queri": [0, 2, 16, 66, 132, 133, 202, 447], "aaaaaactctctaaactcactaaggctctctacccctcttcagagaagtcga": 0, "print": [0, 1, 53, 78, 105, 106, 134, 136, 137, 138, 139, 141, 143, 144, 145, 245, 261, 276, 289, 313, 326, 362, 376, 414, 430, 445, 447, 473, 534, 589, 595, 596, 685, 711, 715, 723, 724, 739, 740, 743, 744, 747, 748, 749, 751, 752, 754, 755, 756, 758, 760, 761, 763, 766, 767, 768, 769, 770, 772, 774, 775, 776, 777, 778, 781, 783, 784, 785, 786, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 865, 867, 869], "49": [0, 139, 142], "length": [0, 1, 16, 28, 45, 46, 48, 53, 60, 61, 62, 78, 94, 105, 106, 131, 132, 133, 135, 136, 137, 138, 139, 140, 143, 144, 145, 202, 214, 221, 222, 228, 233, 238, 239, 240, 242, 245, 248, 250, 251, 261, 262, 263, 265, 266, 267, 268, 272, 274, 275, 276, 278, 288, 289, 290, 291, 297, 302, 307, 308, 310, 313, 316, 326, 327, 328, 330, 331, 332, 333, 339, 340, 346, 351, 356, 357, 359, 362, 365, 376, 377, 378, 380, 381, 382, 383, 390, 391, 397, 402, 407, 408, 409, 411, 414, 417, 419, 420, 430, 431, 432, 434, 435, 436, 437, 441, 442, 444, 445, 447, 448, 454, 459, 464, 465, 468, 473, 474, 475, 477, 478, 479, 480, 500, 513, 514, 518, 549, 574, 587, 590, 591, 595, 705, 706, 714, 715, 719, 722, 737, 743, 752, 753, 762, 784, 791, 793, 796, 797, 802, 865, 867, 869], "multipl": [0, 28, 53, 78, 105, 106, 134, 135, 136, 137, 138, 139, 141, 146, 192, 214, 447, 484, 515, 518, 526, 595, 708, 714, 794, 801, 863, 867], "target": [0, 2, 16, 66, 77, 139, 495, 510, 546, 556, 570, 583], "an": [0, 1, 2, 16, 28, 30, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 66, 69, 78, 79, 81, 87, 91, 92, 103, 105, 106, 107, 111, 125, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 149, 159, 160, 161, 174, 176, 177, 178, 180, 185, 189, 190, 192, 202, 213, 214, 216, 217, 219, 220, 221, 228, 239, 246, 255, 256, 258, 265, 267, 271, 277, 278, 288, 290, 297, 307, 314, 321, 322, 324, 330, 332, 336, 338, 339, 346, 356, 363, 370, 371, 373, 380, 382, 386, 389, 390, 397, 408, 415, 424, 425, 427, 434, 436, 440, 446, 447, 454, 464, 469, 470, 471, 477, 479, 482, 483, 484, 488, 495, 498, 500, 502, 506, 510, 511, 515, 518, 520, 521, 522, 523, 524, 526, 531, 532, 534, 539, 546, 548, 549, 553, 556, 557, 563, 570, 571, 573, 574, 579, 583, 584, 587, 589, 590, 591, 595, 607, 629, 640, 652, 673, 684, 685, 686, 696, 699, 705, 706, 711, 713, 714, 715, 716, 723, 724, 737, 739, 740, 742, 744, 748, 750, 751, 755, 758, 759, 761, 768, 770, 773, 783, 786, 791, 793, 796, 798, 799, 800, 801, 802, 803, 808, 809, 812, 819, 825, 826, 827, 829, 851, 863, 865, 867, 869], "effici": [0, 140, 576], "wai": [0, 1, 136, 137, 141, 143, 145, 147, 192, 484, 518, 589, 706, 711, 863, 867], "find": [0, 79, 241, 243, 246, 249, 259, 261, 266, 268, 269, 309, 311, 314, 317, 325, 326, 331, 333, 334, 358, 360, 363, 366, 375, 376, 381, 383, 384, 387, 410, 412, 415, 418, 428, 430, 435, 437, 438, 472, 473, 478, 480, 588, 591, 595, 701, 715, 737, 738, 750, 752, 753, 756, 757, 758, 763, 765, 766, 767, 768, 770, 771, 778, 782, 787, 796, 798, 799, 825], "represent": [0, 1, 131, 136, 141, 202, 264, 286, 329, 379, 433, 476, 494, 532, 545, 569, 594, 687, 696, 722, 736, 793, 794, 862, 863], "target_sequ": [0, 2, 16, 17], "gctaactaggctcccttctacccctctcagaga": 0, "gcccagtagcttcccaatatgagagcatcaattgtagatcgggcc": 0, "tctataagattccgcatgcgttacttataagatgtctcaacgg": 0, "tagagattaattgccactgccaaaattctg": 0, "query_sequ": [0, 2, 16, 17], "append": [0, 48, 143, 147, 447, 754], "act": [0, 54, 159, 160, 161], "aggctc": 0, "38": [0, 132, 137, 142, 711], "aligned_query_sequ": [0, 2], "tctacccctctcagaga": 0, "aligned_target_sequ": [0, 2], "aggctcccttctacccctctcagaga": 0, "scikit": [0, 1, 51, 52, 55, 59, 60, 63, 66, 67, 78, 105, 106, 107, 108, 109, 110, 111, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 218, 220, 256, 258, 270, 275, 276, 277, 278, 288, 289, 322, 324, 335, 338, 371, 373, 385, 389, 425, 427, 439, 444, 445, 446, 470, 471, 481, 483, 505, 511, 512, 552, 557, 578, 584, 698, 699, 779, 800, 803, 865, 868], "bio": [0, 1, 51, 52, 55, 59, 60, 63, 66, 67, 78, 99, 105, 106, 107, 108, 109, 110, 111, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 218, 220, 256, 258, 270, 275, 276, 277, 278, 288, 289, 322, 324, 335, 338, 371, 373, 385, 389, 425, 427, 439, 444, 445, 446, 470, 471, 481, 483, 505, 511, 512, 552, 557, 578, 584, 588, 698, 699, 779, 800, 803, 865, 868], "also": [0, 1, 46, 47, 74, 78, 98, 104, 105, 106, 107, 126, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 149, 202, 251, 261, 271, 288, 326, 336, 376, 386, 420, 430, 440, 447, 473, 482, 484, 518, 531, 532, 534, 587, 588, 589, 591, 595, 701, 708, 711, 714, 715, 802, 805, 851, 863, 865, 869], "pure": [0, 803], "python": [0, 1, 2, 447, 534, 559, 589, 803, 808, 862, 863, 865], "implement": [0, 1, 60, 63, 68, 69, 73, 78, 83, 88, 99, 104, 105, 106, 109, 110, 137, 141, 147, 159, 160, 161, 162, 189, 700, 701, 706, 707, 745, 801, 802, 803], "smith": [0, 16, 63, 64, 65, 66, 595], "waterman": [0, 16, 63, 64, 65, 66], "needleman": [0, 60, 61, 62], "wunsch": [0, 60, 61, 62], "These": [0, 1, 46, 51, 52, 68, 78, 105, 106, 138, 141, 145, 146, 256, 258, 322, 324, 371, 373, 425, 427, 470, 471, 512, 592, 594, 687, 707, 713], "ar": [0, 1, 16, 28, 29, 33, 38, 42, 43, 46, 47, 50, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 74, 78, 79, 84, 85, 94, 103, 105, 106, 107, 108, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 159, 160, 161, 173, 180, 184, 185, 189, 192, 193, 199, 205, 211, 214, 216, 218, 219, 220, 221, 226, 228, 235, 238, 239, 245, 248, 252, 253, 254, 257, 265, 266, 267, 268, 270, 271, 274, 275, 276, 277, 278, 279, 285, 287, 288, 289, 290, 295, 297, 304, 307, 313, 316, 318, 319, 320, 323, 330, 331, 332, 333, 335, 336, 338, 339, 344, 346, 353, 356, 362, 365, 367, 368, 369, 372, 374, 380, 381, 382, 383, 385, 386, 389, 390, 395, 397, 404, 407, 408, 414, 417, 421, 422, 423, 426, 434, 435, 436, 437, 439, 440, 442, 444, 445, 446, 447, 452, 454, 461, 464, 468, 477, 478, 479, 480, 481, 482, 483, 484, 486, 488, 493, 496, 499, 500, 505, 506, 510, 511, 513, 514, 515, 516, 518, 520, 523, 524, 526, 528, 529, 530, 531, 534, 535, 537, 539, 544, 549, 552, 553, 556, 557, 559, 561, 563, 568, 574, 576, 578, 579, 581, 583, 584, 587, 588, 589, 590, 591, 592, 593, 595, 608, 630, 674, 685, 687, 696, 697, 698, 699, 700, 701, 704, 705, 706, 708, 709, 711, 713, 714, 715, 722, 742, 745, 750, 760, 771, 773, 774, 778, 779, 786, 787, 791, 793, 794, 795, 800, 801, 803, 805, 806, 808, 825, 828, 829, 840, 851, 863, 865, 867, 869], "much": [0, 1, 78, 105, 106, 141, 863], "slower": [0, 803], "than": [0, 1, 16, 46, 47, 69, 78, 83, 85, 101, 105, 106, 136, 141, 143, 145, 181, 186, 202, 221, 222, 223, 226, 240, 244, 248, 259, 260, 261, 262, 263, 265, 266, 267, 268, 276, 289, 291, 292, 295, 308, 312, 316, 325, 326, 327, 328, 330, 331, 332, 333, 339, 340, 341, 344, 357, 361, 365, 375, 376, 377, 378, 380, 381, 382, 383, 390, 391, 392, 395, 409, 413, 417, 428, 429, 430, 431, 432, 434, 435, 436, 437, 445, 448, 449, 452, 465, 466, 468, 472, 473, 474, 475, 477, 478, 479, 480, 484, 514, 515, 518, 520, 534, 576, 587, 589, 590, 591, 595, 685, 700, 701, 714, 715, 716, 743, 760, 773, 802, 807, 863, 867], "method": [0, 1, 2, 16, 28, 35, 47, 54, 55, 59, 60, 80, 103, 105, 107, 108, 111, 142, 149, 159, 161, 162, 179, 192, 202, 213, 218, 220, 221, 224, 225, 239, 248, 270, 272, 276, 277, 278, 287, 289, 290, 293, 294, 307, 316, 335, 338, 339, 342, 343, 356, 365, 385, 389, 390, 393, 394, 408, 417, 439, 441, 445, 446, 447, 450, 451, 464, 468, 481, 483, 484, 505, 511, 518, 526, 531, 534, 535, 552, 557, 559, 576, 578, 584, 587, 588, 589, 590, 591, 592, 597, 608, 618, 619, 630, 641, 651, 652, 662, 663, 674, 685, 687, 697, 698, 699, 700, 701, 706, 722, 723, 724, 740, 742, 743, 744, 747, 748, 750, 751, 752, 753, 755, 757, 758, 778, 779, 784, 786, 798, 799, 800, 801, 802, 808, 820, 827, 828, 829, 839, 851, 865, 866, 867, 869], "describ": [0, 47, 60, 63, 70, 71, 74, 77, 78, 81, 82, 84, 85, 86, 87, 94, 95, 98, 105, 106, 111, 135, 136, 137, 138, 139, 142, 143, 145, 261, 264, 326, 329, 376, 379, 430, 433, 447, 473, 476, 506, 534, 553, 571, 579, 589, 595, 707, 764, 802, 865, 867], "abov": [0, 1, 54, 136, 138, 142, 143, 144, 145, 147, 159, 161, 221, 339, 390, 447, 534, 587, 589, 591, 595, 865], "serv": [0, 146, 697], "thei": [0, 1, 38, 43, 47, 53, 69, 103, 107, 132, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 219, 221, 226, 235, 238, 261, 279, 295, 304, 326, 344, 353, 376, 390, 395, 404, 407, 430, 452, 461, 473, 486, 498, 515, 537, 548, 561, 573, 587, 588, 589, 590, 591, 592, 596, 696, 697, 700, 706, 711, 747, 754, 803, 805, 869], "re": [0, 1, 45, 48, 54, 78, 103, 105, 106, 107, 134, 136, 137, 143, 145, 221, 247, 273, 290, 315, 337, 339, 364, 388, 390, 416, 443, 447, 467, 592, 700, 708, 710, 711, 715, 793, 867, 869], "simpler": 0, "experi": [0, 135, 138, 518, 714], "local": [0, 63, 64, 65, 132, 133, 138], "global": [0, 60, 61, 62], "nucleotid": [0, 16, 61, 64, 133, 135, 136, 137, 138, 221, 238, 260, 272, 390, 407, 429, 441, 484, 496, 869], "The": [0, 1, 16, 17, 45, 46, 47, 48, 49, 51, 52, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 78, 79, 80, 81, 83, 88, 90, 94, 95, 96, 97, 99, 102, 103, 105, 106, 107, 108, 109, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 159, 160, 161, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 192, 193, 202, 203, 204, 213, 214, 215, 216, 217, 218, 220, 223, 226, 228, 233, 238, 239, 240, 242, 244, 248, 256, 258, 259, 261, 262, 263, 270, 272, 276, 277, 278, 287, 288, 289, 292, 295, 297, 302, 307, 308, 310, 312, 316, 322, 324, 325, 326, 327, 328, 335, 338, 341, 344, 346, 351, 356, 357, 359, 361, 365, 371, 373, 375, 376, 377, 378, 385, 389, 390, 392, 395, 397, 402, 407, 408, 409, 411, 413, 417, 425, 427, 428, 430, 431, 432, 439, 441, 445, 446, 447, 449, 452, 454, 459, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 481, 483, 484, 488, 495, 500, 505, 510, 511, 513, 514, 515, 516, 517, 518, 521, 522, 523, 524, 531, 532, 535, 539, 546, 549, 552, 556, 557, 559, 563, 570, 571, 574, 576, 578, 581, 583, 584, 587, 588, 589, 590, 591, 593, 595, 596, 608, 630, 641, 652, 674, 685, 687, 698, 699, 700, 701, 705, 706, 707, 708, 711, 712, 713, 714, 715, 737, 738, 743, 744, 745, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 761, 762, 764, 768, 770, 771, 774, 779, 780, 782, 783, 785, 786, 787, 788, 791, 793, 800, 801, 802, 808, 826, 828, 863, 865, 867, 869], "differ": [0, 1, 33, 46, 47, 49, 60, 61, 62, 73, 78, 83, 95, 105, 106, 112, 133, 136, 137, 143, 145, 146, 147, 223, 226, 235, 239, 240, 244, 259, 260, 265, 266, 267, 268, 271, 275, 278, 285, 292, 295, 304, 307, 308, 312, 325, 330, 331, 332, 333, 336, 341, 344, 353, 356, 357, 361, 375, 380, 381, 382, 383, 386, 392, 395, 404, 408, 409, 413, 428, 429, 434, 435, 436, 437, 440, 444, 449, 452, 461, 464, 465, 466, 472, 477, 478, 479, 480, 482, 488, 513, 518, 534, 539, 563, 587, 590, 591, 595, 619, 674, 686, 700, 701, 706, 714, 715, 745, 746, 805, 806, 822, 823, 824, 865, 867], "underli": [0, 189, 221, 226, 288, 290, 295, 339, 344, 390, 395, 447, 452, 513, 711, 865], "appli": [0, 1, 16, 28, 47, 51, 52, 103, 106, 107, 108, 111, 135, 136, 141, 146, 202, 221, 256, 258, 290, 322, 324, 339, 371, 373, 390, 425, 427, 447, 470, 471, 484, 500, 515, 549, 574, 576, 589, 592, 596, 700, 714, 802, 829, 869], "while": [0, 1, 131, 135, 136, 137, 138, 143, 192, 278, 447, 518, 591, 630, 674, 697, 713, 722, 750, 828, 865, 869], "default": [0, 1, 16, 28, 45, 46, 48, 54, 56, 59, 60, 61, 62, 64, 65, 69, 73, 83, 90, 94, 97, 103, 107, 132, 136, 138, 139, 140, 141, 143, 144, 147, 149, 159, 161, 174, 176, 217, 220, 244, 261, 275, 276, 277, 278, 288, 289, 312, 326, 338, 361, 376, 389, 413, 430, 444, 445, 446, 466, 473, 483, 495, 500, 504, 511, 516, 517, 518, 523, 524, 526, 535, 546, 549, 551, 557, 570, 574, 577, 584, 588, 589, 591, 592, 593, 630, 685, 697, 699, 705, 706, 708, 709, 716, 747, 772, 791, 800, 801, 802, 805, 826, 829, 851, 863, 865, 867, 869], "match": [0, 16, 45, 48, 54, 61, 64, 67, 132, 136, 137, 189, 190, 226, 246, 247, 265, 267, 268, 273, 288, 295, 314, 315, 330, 332, 333, 337, 344, 363, 364, 380, 382, 383, 388, 395, 415, 416, 434, 436, 437, 443, 452, 467, 477, 479, 480, 502, 535, 587, 589, 591, 592, 711, 713, 714, 715, 746, 747, 756, 758, 865, 869], "mismatch": [0, 16, 61, 64, 67, 132, 133, 265, 266, 267, 330, 331, 332, 380, 381, 382, 434, 435, 436, 477, 478, 479, 502, 589, 746], "gap": [0, 16, 46, 47, 50, 54, 60, 61, 62, 63, 64, 65, 132, 133, 134, 135, 136, 137, 138, 139, 143, 221, 238, 239, 242, 245, 246, 250, 251, 254, 261, 272, 274, 275, 276, 278, 288, 289, 290, 307, 310, 313, 314, 320, 326, 339, 356, 359, 362, 363, 369, 376, 390, 407, 408, 411, 414, 415, 419, 420, 423, 430, 441, 442, 444, 445, 447, 464, 473, 513, 794, 865, 869], "here": [0, 1, 47, 69, 73, 78, 83, 88, 90, 96, 97, 99, 103, 104, 105, 106, 107, 108, 109, 110, 135, 138, 143, 147, 159, 161, 190, 261, 326, 376, 430, 473, 518, 595, 706, 708, 795, 802, 867], "we": [0, 1, 16, 45, 47, 48, 78, 83, 90, 94, 105, 106, 108, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 190, 192, 202, 248, 261, 271, 288, 316, 326, 336, 365, 376, 386, 417, 430, 440, 447, 468, 473, 482, 518, 527, 533, 534, 587, 588, 589, 591, 592, 595, 596, 686, 697, 700, 708, 710, 711, 713, 714, 715, 747, 801, 863, 867, 869], "pair": [0, 1, 51, 60, 61, 62, 64, 67, 105, 106, 107, 111, 135, 137, 138, 139, 141, 145, 213, 217, 256, 322, 371, 425, 470, 484, 488, 495, 510, 514, 518, 539, 546, 556, 563, 570, 574, 581, 583, 592, 711, 762, 791, 865], "open": [0, 55, 59, 60, 61, 62, 63, 64, 65, 108, 132, 133, 137, 147, 159, 161, 180, 181, 182, 185, 186, 187, 190, 192, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 698, 699, 779, 800, 827, 862, 863], "penalti": [0, 16, 60, 61, 62, 63, 64, 65], "11": [0, 16, 62, 65, 66, 72, 77, 78, 132, 135, 142, 144, 221, 247, 315, 364, 390, 416, 467, 518, 527, 533, 596, 686, 701, 708, 711], "extend": [0, 16, 45, 54, 60, 61, 62, 63, 64, 65, 78, 714, 739, 752, 801, 863], "1": [0, 1, 2, 15, 16, 28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 56, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 159, 160, 192, 193, 199, 201, 202, 203, 204, 205, 211, 213, 214, 215, 216, 217, 219, 221, 226, 228, 238, 239, 240, 246, 248, 255, 261, 262, 263, 267, 272, 273, 275, 276, 278, 279, 286, 287, 288, 289, 290, 295, 297, 307, 308, 314, 316, 321, 326, 327, 328, 332, 337, 339, 344, 346, 356, 357, 363, 365, 370, 376, 377, 378, 382, 388, 390, 395, 397, 407, 408, 409, 415, 417, 424, 430, 431, 432, 436, 441, 442, 443, 444, 445, 447, 452, 454, 464, 465, 468, 469, 473, 474, 475, 479, 484, 495, 496, 499, 500, 502, 504, 506, 507, 510, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 546, 549, 551, 553, 554, 556, 559, 570, 571, 574, 577, 579, 580, 581, 583, 587, 588, 589, 590, 591, 592, 593, 595, 630, 652, 674, 685, 686, 697, 700, 701, 705, 708, 709, 711, 713, 714, 715, 716, 737, 742, 745, 747, 752, 753, 756, 760, 761, 762, 773, 774, 784, 785, 786, 791, 793, 794, 796, 797, 801, 802, 807, 865, 867, 869], "other": [0, 1, 16, 33, 42, 51, 52, 54, 78, 93, 108, 135, 136, 137, 138, 140, 141, 143, 145, 146, 189, 193, 199, 205, 211, 216, 221, 226, 235, 244, 250, 251, 256, 258, 260, 265, 266, 267, 268, 271, 279, 285, 295, 304, 312, 322, 324, 330, 331, 332, 333, 336, 339, 344, 353, 361, 371, 373, 380, 381, 382, 383, 386, 390, 395, 404, 413, 419, 420, 425, 427, 429, 434, 435, 436, 437, 440, 447, 452, 461, 466, 470, 471, 477, 478, 479, 480, 482, 484, 486, 493, 512, 518, 534, 537, 544, 559, 561, 568, 591, 697, 700, 701, 706, 713, 715, 722, 745, 746, 747, 753, 755, 756, 805, 828, 839, 863, 865, 867, 869], "word": [0, 135, 136, 138, 141, 145, 217, 263, 328, 378, 432, 475], "more": [0, 1, 46, 47, 48, 55, 59, 60, 66, 69, 80, 103, 110, 133, 135, 136, 137, 141, 142, 143, 144, 145, 181, 186, 218, 220, 252, 253, 254, 257, 270, 277, 318, 319, 320, 323, 335, 338, 339, 367, 368, 369, 372, 374, 385, 389, 421, 422, 423, 426, 439, 446, 481, 483, 488, 505, 511, 515, 518, 520, 534, 539, 552, 557, 563, 576, 578, 584, 587, 588, 589, 590, 591, 592, 595, 685, 697, 698, 699, 700, 701, 708, 714, 715, 743, 760, 779, 800, 801, 863, 867, 868], "costli": 0, "new": [0, 45, 48, 55, 56, 57, 71, 82, 84, 85, 105, 146, 159, 160, 161, 173, 184, 202, 218, 221, 228, 239, 242, 270, 271, 290, 297, 307, 310, 335, 336, 339, 346, 356, 359, 385, 386, 390, 397, 408, 411, 439, 440, 447, 454, 464, 481, 482, 505, 552, 576, 578, 589, 590, 592, 698, 701, 709, 723, 724, 748, 751, 778, 779, 783, 784, 798, 799, 802, 865, 867, 869], "exist": [0, 56, 69, 74, 141, 147, 159, 160, 161, 177, 178, 288, 484, 496, 500, 534, 549, 574, 586, 589, 592, 697, 722, 739, 747, 752, 754, 785, 826, 851, 865], "one": [0, 1, 45, 46, 47, 48, 51, 52, 54, 60, 61, 62, 78, 79, 80, 83, 88, 94, 103, 105, 106, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 160, 181, 186, 214, 217, 219, 231, 236, 239, 252, 253, 254, 255, 256, 257, 258, 288, 300, 305, 307, 318, 319, 320, 321, 322, 323, 324, 339, 349, 354, 356, 367, 368, 369, 370, 371, 372, 373, 374, 400, 405, 408, 421, 422, 423, 424, 425, 426, 427, 457, 462, 464, 469, 470, 471, 484, 488, 500, 518, 535, 539, 549, 563, 574, 581, 588, 589, 591, 592, 595, 596, 597, 686, 702, 705, 706, 713, 714, 715, 737, 739, 740, 746, 760, 773, 778, 786, 863, 867, 869], "local_pairwise_align_protein": [0, 60, 61, 62, 63, 64], "s1": [0, 1, 76, 221, 223, 239, 240, 244, 259, 260, 265, 266, 267, 268, 292, 307, 308, 312, 325, 330, 331, 332, 333, 339, 341, 356, 357, 361, 375, 380, 381, 382, 383, 390, 392, 408, 409, 413, 428, 429, 434, 435, 436, 437, 447, 449, 464, 465, 466, 472, 477, 478, 479, 480, 518, 587, 591], "heagawghe": 0, "s2": [0, 1, 239, 244, 307, 312, 356, 361, 408, 413, 464, 466, 518, 587, 591], "pawhea": 0, "return": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 37, 39, 40, 41, 42, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 132, 139, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 189, 193, 194, 196, 197, 198, 199, 200, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 218, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 595, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 612, 613, 614, 615, 616, 617, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 643, 645, 646, 647, 648, 649, 650, 653, 654, 656, 657, 658, 659, 660, 661, 664, 665, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 723, 724, 725, 726, 729, 730, 732, 734, 735, 736, 737, 738, 740, 744, 745, 746, 747, 748, 749, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 770, 771, 772, 773, 774, 779, 780, 782, 783, 784, 785, 787, 788, 789, 791, 793, 794, 795, 797, 798, 799, 801, 802, 807, 808, 810, 811, 812, 814, 815, 816, 817, 818, 821, 825, 826, 827, 830, 831, 833, 834, 835, 836, 837, 838, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 856, 857, 858, 859, 860, 861, 863, 865, 869], "start": [0, 14, 15, 16, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 66, 132, 133, 135, 138, 139, 140, 141, 143, 145, 146, 192, 213, 219, 240, 259, 278, 279, 285, 288, 289, 308, 325, 357, 375, 409, 428, 465, 472, 535, 592, 593, 711, 714, 715, 869], "end": [0, 2, 16, 60, 61, 62, 63, 64, 65, 66, 132, 133, 135, 136, 137, 138, 139, 145, 146, 192, 202, 213, 219, 240, 259, 288, 308, 325, 357, 375, 409, 428, 465, 472, 784], "each": [0, 1, 16, 28, 38, 43, 46, 47, 50, 53, 56, 60, 61, 62, 63, 64, 65, 66, 78, 90, 103, 105, 106, 107, 108, 111, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 192, 203, 204, 213, 221, 231, 236, 239, 245, 248, 261, 263, 276, 289, 300, 305, 307, 313, 316, 326, 328, 339, 349, 354, 356, 362, 365, 376, 378, 400, 405, 408, 414, 417, 430, 432, 445, 447, 457, 462, 464, 468, 473, 475, 484, 488, 498, 500, 513, 515, 518, 520, 526, 528, 529, 530, 531, 534, 539, 548, 549, 563, 573, 574, 587, 588, 589, 590, 591, 592, 595, 596, 597, 607, 608, 619, 629, 630, 640, 641, 663, 673, 674, 684, 685, 687, 697, 701, 702, 704, 705, 706, 708, 711, 714, 715, 795, 801, 863, 865, 869], "5": [0, 1, 16, 46, 54, 61, 64, 66, 73, 78, 80, 91, 92, 94, 101, 105, 106, 108, 111, 133, 135, 136, 137, 138, 139, 141, 143, 145, 146, 192, 193, 199, 201, 203, 204, 205, 211, 213, 214, 215, 216, 217, 219, 226, 228, 238, 239, 240, 241, 246, 248, 250, 251, 252, 255, 257, 263, 269, 271, 272, 288, 295, 297, 307, 308, 309, 314, 316, 318, 321, 323, 328, 334, 336, 344, 346, 356, 357, 358, 363, 365, 367, 370, 372, 378, 384, 386, 395, 397, 407, 408, 409, 410, 415, 417, 419, 420, 421, 424, 426, 432, 438, 440, 441, 452, 454, 464, 465, 468, 469, 475, 482, 484, 495, 496, 499, 500, 501, 502, 508, 510, 513, 514, 515, 516, 517, 518, 526, 527, 528, 531, 532, 533, 534, 546, 549, 556, 570, 581, 583, 587, 588, 591, 592, 595, 686, 701, 707, 711, 714, 715, 716, 737, 742, 746, 747, 749, 752, 753, 760, 761, 762, 784, 785, 786, 791, 793, 794, 796, 797, 801, 802, 867], "awgh": 0, "aw": [0, 94], "he": 0, "25": [0, 1, 50, 63, 78, 83, 94, 105, 106, 108, 135, 141, 142, 244, 248, 250, 263, 267, 274, 278, 312, 316, 328, 332, 361, 365, 378, 382, 413, 417, 419, 432, 436, 442, 466, 468, 475, 479, 515, 518, 528, 587, 588, 591, 596, 711, 714, 715, 865], "4": [0, 1, 28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 109, 110, 132, 133, 135, 136, 138, 141, 142, 143, 145, 146, 159, 160, 161, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 191, 192, 202, 214, 219, 221, 222, 223, 224, 225, 226, 228, 231, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 276, 278, 279, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 300, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337, 340, 341, 342, 343, 344, 346, 349, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 387, 388, 391, 392, 393, 394, 395, 397, 400, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 422, 423, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 484, 485, 486, 488, 493, 494, 495, 496, 497, 498, 503, 504, 506, 507, 509, 510, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 536, 537, 539, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 560, 561, 563, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 587, 588, 589, 590, 592, 593, 595, 607, 618, 629, 640, 651, 662, 673, 684, 685, 686, 696, 697, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 723, 724, 727, 731, 733, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 805, 806, 807, 825, 826, 827, 829, 839, 841, 852, 865, 867], "8": [0, 1, 66, 132, 133, 137, 138, 143, 145, 146, 160, 219, 239, 248, 271, 274, 290, 307, 316, 336, 356, 365, 386, 408, 417, 440, 442, 464, 468, 482, 510, 527, 532, 533, 556, 583, 588, 595, 686, 711, 715, 716, 752, 760, 761, 794, 802, 865, 867], "similarli": [0, 1, 136, 865], "perform": [0, 1, 16, 53, 54, 66, 78, 90, 103, 105, 106, 107, 108, 136, 137, 193, 221, 276, 289, 339, 390, 445, 447, 486, 515, 516, 517, 518, 520, 521, 522, 523, 524, 527, 528, 529, 530, 532, 533, 535, 537, 559, 561, 571, 574, 591, 592, 595, 596, 597, 619, 663, 674, 686, 706, 708, 709, 715, 716, 723, 724, 748, 751, 758, 769, 775, 776, 777, 786, 798, 799, 805, 863], "global_pairwise_align_nucleotid": 0, "gcgtgcctaaggtatgcaag": 0, "acgtgcctaggtacgcaag": 0, "20": [0, 142, 339, 518, 697, 703, 711, 714, 715], "acgtgccta": 0, "ggtacgcaag": 0, "packag": [1, 16, 66, 68, 104, 134, 136, 141, 143, 531, 534, 587, 588, 589, 590, 591, 594, 700, 701, 708, 711, 863, 866, 867, 868], "analyz": [1, 515, 701, 714], "biolog": [1, 53, 60, 61, 62, 89, 94, 95, 101, 136, 137, 139, 141, 144, 192, 241, 242, 243, 245, 246, 249, 252, 253, 254, 257, 269, 309, 310, 311, 313, 314, 317, 318, 319, 320, 323, 334, 358, 359, 360, 362, 363, 366, 367, 368, 369, 372, 384, 410, 411, 412, 414, 415, 418, 421, 422, 423, 426, 438, 447, 484, 714, 862], "It": [1, 16, 74, 78, 79, 81, 94, 101, 132, 134, 136, 137, 138, 139, 141, 143, 146, 160, 192, 202, 205, 213, 214, 216, 217, 219, 221, 339, 390, 442, 518, 521, 526, 534, 576, 589, 590, 595, 618, 619, 651, 662, 674, 700, 701, 705, 708, 711, 714, 715, 722, 723, 724, 748, 751, 805, 827, 851, 865], "alpha": [1, 103, 109, 518, 711, 712, 716], "beta": [1, 107, 108, 110, 135], "intend": [1, 84, 85, 221, 290, 339, 685, 697, 805, 806], "primari": [1, 147, 865], "interfac": [1, 51, 52, 104, 256, 258, 322, 324, 371, 373, 425, 427, 470, 471, 484, 587, 588, 589, 590, 801, 863], "addition": [1, 141, 189, 202, 865, 867], "support": [1, 47, 55, 59, 80, 189, 218, 220, 221, 270, 277, 335, 338, 339, 385, 389, 390, 439, 446, 481, 483, 484, 496, 505, 511, 552, 557, 578, 584, 589, 687, 698, 699, 706, 711, 722, 742, 779, 797, 800, 801, 808, 828, 851, 862, 867, 868, 869], "discoveri": 1, "avail": [1, 107, 132, 136, 137, 138, 142, 146, 177, 178, 278, 287, 496, 559, 587, 588, 589, 590, 591, 630, 711, 715, 803, 863, 869], "document": [1, 35, 110, 136, 138, 143, 144, 179, 518, 697, 722, 863], "high": [1, 78, 105, 106, 136, 137, 697, 700, 706], "level": [1, 57, 84, 141, 189, 518, 713, 714, 760, 808, 865], "discuss": [1, 94, 105, 106, 869], "how": [1, 43, 53, 54, 90, 136, 138, 189, 239, 261, 288, 289, 307, 326, 356, 376, 408, 430, 464, 473, 527, 533, 589, 706, 711, 713, 714, 715, 863, 869], "work": [1, 16, 108, 136, 143, 147, 221, 339, 390, 534, 589, 701, 715, 862, 864, 865, 867], "should": [1, 16, 47, 67, 74, 78, 79, 90, 94, 101, 103, 104, 105, 106, 107, 132, 138, 142, 146, 147, 159, 160, 161, 202, 221, 244, 261, 262, 263, 278, 312, 326, 327, 328, 339, 361, 376, 377, 378, 390, 413, 430, 431, 432, 466, 473, 474, 475, 514, 516, 517, 518, 527, 533, 571, 589, 591, 595, 685, 700, 701, 706, 707, 708, 711, 714, 715, 760, 781], "first": [1, 16, 28, 60, 61, 62, 63, 64, 65, 66, 69, 78, 105, 106, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 161, 214, 219, 259, 261, 275, 276, 288, 325, 326, 375, 376, 428, 430, 444, 447, 472, 473, 488, 515, 516, 517, 518, 539, 563, 587, 589, 619, 674, 686, 702, 711, 714, 742, 746, 755, 756, 761, 764, 794, 795, 839, 863, 867, 869], "you": [1, 16, 60, 61, 62, 78, 103, 105, 106, 107, 108, 132, 134, 136, 137, 139, 143, 145, 147, 201, 202, 214, 216, 217, 221, 339, 390, 447, 484, 574, 587, 591, 708, 711, 713, 714, 715, 744, 746, 747, 863, 865, 867, 869], "read": [1, 16, 59, 78, 105, 106, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 145, 146, 159, 160, 177, 179, 181, 186, 189, 190, 220, 221, 276, 277, 278, 288, 289, 338, 339, 389, 390, 445, 446, 447, 483, 511, 532, 534, 557, 584, 592, 699, 723, 724, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 755, 756, 757, 758, 760, 762, 763, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 808, 867], "befor": [1, 47, 136, 140, 145, 250, 251, 288, 419, 420, 588, 589, 715, 776, 795, 867, 869], "alpha_divers": [1, 78, 94, 107, 109], "beta_divers": [1, 103, 105, 106, 108, 110, 111], "design": [1, 108, 131, 135, 534, 713], "sampl": [1, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 131, 518, 535, 587, 588, 590, 591, 597, 630, 663, 674, 685, 687, 696, 697, 700, 701, 706, 707, 708, 711, 713, 714, 715, 747, 806], "accept": [1, 28, 56, 108, 271, 275, 276, 336, 386, 440, 444, 445, 482, 496, 512, 518, 589, 593, 595, 711, 714, 715, 757, 786, 794, 797, 851], "matrix": [1, 16, 67, 103, 107, 108, 111, 484, 485, 486, 488, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 508, 509, 510, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 537, 539, 544, 545, 546, 547, 548, 549, 550, 551, 555, 556, 558, 559, 560, 561, 563, 568, 569, 570, 572, 573, 574, 575, 576, 577, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 686, 697, 700, 702, 703, 704, 706, 707, 708, 710, 712, 759, 791, 802, 866], "contain": [1, 16, 28, 46, 48, 54, 60, 61, 62, 63, 64, 65, 66, 69, 103, 104, 107, 108, 111, 131, 132, 134, 135, 136, 137, 139, 140, 142, 143, 145, 146, 147, 179, 221, 223, 228, 241, 243, 248, 249, 252, 253, 254, 257, 261, 262, 263, 269, 271, 278, 290, 292, 297, 309, 311, 316, 317, 318, 319, 320, 323, 326, 327, 328, 334, 336, 339, 341, 346, 358, 360, 365, 366, 367, 368, 369, 372, 374, 376, 377, 378, 384, 386, 387, 390, 392, 397, 410, 412, 417, 418, 421, 422, 423, 426, 430, 431, 432, 438, 440, 447, 449, 454, 468, 473, 474, 475, 482, 484, 498, 500, 504, 512, 513, 518, 531, 532, 534, 535, 548, 549, 551, 559, 573, 574, 577, 581, 587, 588, 589, 590, 591, 592, 594, 596, 686, 697, 701, 740, 744, 752, 801, 802, 826, 851, 865, 866, 867], "frequenc": [1, 47, 50, 69, 81, 250, 251, 263, 265, 267, 328, 330, 332, 378, 380, 382, 419, 420, 432, 434, 436, 475, 477, 479, 711, 713, 715, 722, 742], "otu": [1, 69, 78, 83, 90, 92, 94, 103, 105, 106, 107, 108, 111, 515, 518, 802], "within": [1, 47, 94, 102, 108, 131, 133, 136, 137, 141, 143, 145, 221, 339, 390, 447, 495, 546, 570, 591, 592, 652, 687, 697, 713, 714, 722, 764, 805, 808, 851, 867, 869], "term": [1, 47, 74, 92, 94, 138, 595], "veri": [1, 60, 61, 62, 83, 136, 141, 147, 515, 747], "loos": [1, 595], "practic": [1, 54, 94, 136, 137, 144, 685, 750, 755], "repres": [1, 46, 74, 76, 78, 81, 90, 97, 98, 105, 106, 108, 131, 132, 133, 135, 136, 140, 141, 143, 145, 146, 192, 213, 221, 339, 390, 447, 484, 488, 495, 500, 510, 523, 524, 531, 532, 539, 546, 549, 556, 563, 570, 574, 583, 595, 686, 697, 711, 722, 789, 794, 801, 802, 865, 867], "featur": [1, 80, 91, 136, 139, 145, 192, 202, 205, 214, 216, 217, 219, 221, 290, 339, 390, 447, 518, 531, 687, 696, 700, 701, 707, 708, 806, 865], "type": [1, 16, 28, 33, 45, 46, 48, 84, 95, 107, 111, 131, 134, 136, 137, 138, 139, 140, 143, 145, 146, 159, 161, 174, 176, 177, 178, 180, 185, 189, 223, 226, 235, 238, 239, 240, 242, 244, 245, 246, 259, 260, 265, 266, 267, 268, 271, 272, 279, 285, 292, 295, 304, 307, 308, 310, 312, 313, 314, 325, 330, 331, 332, 333, 336, 341, 344, 353, 356, 357, 359, 361, 362, 363, 375, 380, 381, 382, 383, 386, 392, 395, 404, 407, 408, 409, 411, 413, 414, 415, 428, 429, 434, 435, 436, 437, 440, 441, 447, 449, 452, 461, 464, 465, 466, 472, 477, 478, 479, 480, 482, 484, 488, 497, 509, 513, 514, 534, 535, 539, 547, 555, 559, 563, 572, 582, 588, 591, 593, 686, 700, 701, 708, 711, 713, 723, 724, 744, 748, 751, 793, 801, 805, 812, 863, 865], "includbacteri": [1, 518], "speci": [1, 69, 70, 71, 74, 75, 76, 77, 78, 79, 81, 82, 83, 86, 87, 88, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 142, 146, 515, 686, 701, 706, 708, 722], "gene": [1, 139, 192, 202, 214, 217, 221, 447, 527, 533], "metabolit": [1, 715], "i": [1, 2, 16, 28, 29, 30, 31, 32, 33, 35, 40, 42, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 111, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 159, 160, 161, 173, 174, 176, 180, 181, 182, 184, 185, 186, 187, 189, 192, 193, 199, 201, 202, 205, 211, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 226, 228, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 288, 289, 290, 291, 292, 293, 294, 295, 297, 304, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 353, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 454, 461, 464, 465, 466, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 493, 495, 498, 503, 504, 505, 506, 509, 510, 511, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 546, 548, 550, 551, 552, 553, 555, 556, 557, 559, 560, 561, 563, 568, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 587, 588, 589, 590, 591, 593, 595, 618, 630, 651, 662, 663, 674, 685, 686, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 722, 723, 724, 727, 737, 740, 742, 744, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 764, 766, 767, 768, 770, 772, 773, 775, 778, 779, 782, 783, 786, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 812, 825, 826, 827, 828, 829, 839, 840, 851, 862, 865, 867, 868, 869], "defin": [1, 28, 54, 56, 62, 65, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 111, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 149, 192, 202, 216, 221, 226, 244, 262, 263, 278, 279, 286, 287, 290, 295, 312, 327, 328, 339, 344, 361, 377, 378, 390, 395, 413, 431, 432, 452, 466, 474, 475, 484, 496, 501, 504, 514, 516, 517, 521, 522, 523, 524, 525, 528, 529, 530, 535, 551, 577, 589, 592, 697, 711, 798, 799, 802, 805, 839, 863, 865, 867, 869], "purpos": [1, 66, 69, 146, 278, 711, 862, 869], "singl": [1, 28, 45, 48, 56, 78, 84, 85, 93, 105, 106, 108, 135, 136, 137, 138, 141, 143, 144, 145, 192, 202, 214, 228, 231, 236, 248, 261, 273, 297, 300, 305, 316, 326, 337, 346, 349, 354, 365, 376, 388, 397, 400, 405, 417, 430, 443, 454, 457, 462, 468, 473, 518, 531, 595, 712, 743, 851, 863, 867, 869], "unit": [1, 78, 105, 106, 138, 147, 484, 706, 708, 709, 805, 806, 868], "what": [1, 78, 94, 103, 105, 106, 107, 141, 147, 149, 177, 178, 182, 187, 217, 261, 326, 376, 430, 473, 595, 685, 714, 867, 869], "vari": [1, 591, 711, 713, 714], "wide": [1, 54, 94, 239, 307, 356, 408, 464], "For": [1, 28, 47, 55, 59, 66, 94, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 202, 217, 218, 219, 220, 221, 270, 277, 335, 338, 339, 385, 389, 390, 439, 446, 447, 481, 483, 496, 505, 511, 518, 552, 557, 578, 584, 587, 588, 589, 590, 591, 593, 595, 597, 663, 697, 698, 699, 700, 701, 711, 713, 714, 715, 742, 779, 800, 801, 803, 804, 863, 865, 867], "microbiom": [1, 94, 108, 518, 706], "survei": 1, "could": [1, 28, 85, 136, 137, 144, 147, 180, 182, 185, 187, 518, 535, 587, 589, 590, 591, 592, 595, 697, 713, 768, 770, 803, 804, 863], "all": [1, 16, 28, 29, 46, 47, 51, 52, 54, 60, 61, 62, 67, 69, 78, 79, 80, 90, 94, 95, 99, 102, 103, 105, 106, 107, 108, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 149, 173, 184, 192, 202, 205, 214, 216, 217, 221, 239, 242, 245, 248, 256, 258, 261, 271, 273, 288, 307, 310, 313, 316, 322, 324, 326, 336, 337, 339, 356, 359, 362, 365, 371, 373, 376, 386, 388, 390, 408, 411, 414, 417, 425, 427, 430, 440, 443, 447, 464, 468, 470, 471, 473, 482, 484, 495, 496, 500, 502, 510, 518, 520, 526, 528, 529, 530, 531, 534, 546, 549, 556, 570, 574, 581, 583, 587, 588, 589, 590, 591, 592, 619, 630, 674, 685, 686, 697, 705, 706, 714, 715, 716, 722, 738, 741, 742, 743, 752, 755, 756, 757, 768, 770, 771, 774, 781, 786, 787, 789, 791, 801, 828, 829, 867], "16": [1, 76, 94, 134, 136, 137, 138, 142, 143, 238, 247, 272, 315, 364, 407, 416, 441, 467, 697, 711, 715, 762, 791], "rrna": 1, "oral": 1, "swab": 1, "In": [1, 16, 47, 78, 94, 105, 106, 108, 136, 137, 138, 139, 141, 143, 146, 221, 251, 288, 339, 390, 420, 484, 515, 518, 534, 588, 589, 595, 685, 700, 701, 706, 711, 715, 722, 742, 755, 801, 863, 865, 867, 869], "compar": [1, 88, 105, 111, 132, 133, 219, 260, 265, 266, 267, 268, 271, 330, 331, 332, 333, 336, 380, 381, 382, 383, 386, 429, 434, 435, 436, 437, 440, 477, 478, 479, 480, 482, 486, 493, 518, 534, 537, 544, 561, 568, 589, 595, 713, 714, 715, 745, 746, 747, 775, 805, 806, 865, 867], "genom": [1, 202], "studi": [1, 78, 515, 518, 700, 708, 715], "hand": [1, 706], "individu": [1, 69, 70, 71, 74, 77, 78, 79, 81, 86, 87, 88, 89, 90, 95, 99, 102, 105, 106, 131, 136, 484, 518, 713, 869], "organ": [1, 135, 138, 146], "given": [1, 55, 59, 69, 80, 83, 88, 90, 99, 103, 107, 108, 111, 136, 137, 141, 142, 159, 161, 177, 178, 180, 181, 185, 186, 215, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 500, 505, 511, 531, 549, 552, 557, 574, 578, 584, 588, 589, 592, 698, 699, 701, 705, 710, 712, 714, 722, 757, 779, 800, 827, 828, 840, 869], "number": [1, 28, 40, 45, 48, 69, 70, 71, 72, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 131, 132, 134, 135, 136, 138, 141, 143, 144, 145, 146, 189, 192, 202, 213, 233, 240, 248, 265, 267, 302, 308, 316, 330, 332, 351, 357, 365, 380, 382, 402, 409, 417, 434, 436, 459, 465, 468, 477, 479, 484, 499, 517, 518, 526, 528, 529, 530, 531, 535, 559, 587, 588, 589, 590, 591, 592, 593, 595, 630, 674, 685, 701, 705, 706, 708, 709, 711, 712, 714, 715, 716, 742, 749, 786, 805], "observ": [1, 78, 81, 90, 93, 101, 105, 106, 111, 221, 248, 290, 316, 339, 365, 390, 417, 447, 468, 518, 595, 686, 711, 714, 715, 773, 801, 869], "particular": [1, 722, 804, 869], "refer": [1, 16, 35, 47, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 105, 106, 108, 192, 221, 278, 286, 287, 290, 339, 390, 447, 484, 496, 506, 516, 518, 526, 527, 531, 533, 535, 553, 559, 571, 579, 587, 588, 589, 590, 591, 595, 697, 700, 701, 708, 745, 774, 801, 802], "associ": [1, 35, 69, 94, 137, 145, 146, 149, 174, 175, 176, 192, 213, 215, 217, 221, 339, 390, 447, 588, 595, 685, 705, 709, 712, 713, 714, 752, 758, 791, 863], "throughout": [1, 140, 278, 287, 714, 868], "array_lik": [1, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 111, 228, 246, 247, 261, 271, 297, 314, 315, 326, 336, 346, 363, 364, 376, 386, 397, 415, 416, 430, 440, 454, 467, 473, 482, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 533, 535, 587, 589, 590, 591, 592, 595, 702, 705, 709, 712, 715, 716], "anyth": [1, 136, 137, 144, 147, 447, 828, 839, 851, 869], "convert": [1, 132, 134, 135, 136, 138, 141, 143, 145, 189, 221, 244, 312, 339, 361, 390, 413, 447, 466, 535, 576, 588, 716, 742, 807], "d": [1, 16, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 132, 133, 138, 141, 142, 221, 339, 390, 495, 499, 504, 510, 515, 516, 517, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 546, 551, 556, 570, 577, 581, 583, 587, 588, 589, 590, 591, 595, 630, 652, 674, 687, 697, 705, 714, 715, 716, 723, 724, 737, 738, 740, 742, 743, 744, 745, 746, 748, 749, 751, 752, 753, 755, 756, 757, 758, 762, 768, 769, 770, 771, 772, 778, 782, 783, 784, 786, 787, 788, 789, 791, 792, 793, 796, 797, 798, 799, 801, 802, 863, 865, 867, 869], "numpi": [1, 107, 488, 506, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 539, 553, 563, 571, 579, 587, 591, 593, 595, 596, 630, 652, 674, 685, 686, 711, 713, 714, 715, 716, 747, 786, 865], "arrai": [1, 16, 47, 50, 78, 94, 105, 106, 136, 142, 221, 238, 241, 243, 249, 266, 268, 269, 272, 290, 309, 311, 317, 331, 333, 334, 339, 358, 360, 366, 381, 383, 384, 387, 390, 407, 410, 412, 418, 435, 437, 438, 441, 447, 478, 480, 484, 486, 494, 499, 502, 506, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 545, 553, 559, 561, 569, 571, 579, 595, 596, 630, 652, 674, 686, 705, 709, 711, 712, 713, 714, 715, 716, 764, 793, 801, 865], "nativ": [1, 506, 553, 579, 706], "list": [1, 66, 78, 94, 105, 106, 109, 110, 132, 135, 137, 138, 139, 142, 145, 146, 147, 159, 161, 177, 178, 189, 202, 271, 336, 386, 440, 447, 482, 494, 498, 501, 532, 534, 545, 548, 569, 573, 589, 591, 592, 608, 630, 641, 663, 696, 711, 713, 714, 715, 722, 738, 744, 752, 754, 756, 759, 768, 770, 771, 786, 787, 791, 793, 794, 801, 802, 863, 869], "result": [1, 2, 16, 17, 47, 49, 54, 60, 61, 62, 78, 79, 83, 103, 105, 106, 107, 111, 132, 133, 136, 147, 189, 214, 221, 238, 239, 242, 272, 307, 310, 339, 356, 359, 390, 407, 408, 411, 441, 464, 515, 518, 525, 526, 574, 587, 589, 590, 591, 592, 593, 596, 607, 608, 618, 619, 629, 640, 641, 651, 652, 662, 663, 673, 684, 685, 686, 687, 696, 697, 700, 701, 706, 708, 711, 716, 755, 771, 785, 793, 794, 801, 802, 806, 863, 865, 869], "ident": [1, 132, 133, 141, 488, 539, 559, 563, 595, 717, 747, 780, 867], "As": [1, 135, 138, 141, 447, 506, 531, 553, 579, 589, 591, 701, 755, 863, 869], "mention": [1, 141], "which": [1, 2, 28, 60, 61, 62, 69, 74, 78, 88, 94, 98, 101, 105, 106, 108, 132, 134, 136, 138, 139, 140, 141, 142, 143, 145, 146, 147, 149, 159, 160, 161, 162, 174, 176, 177, 178, 179, 180, 185, 221, 239, 240, 251, 259, 261, 264, 288, 290, 307, 308, 325, 326, 329, 339, 356, 357, 375, 376, 379, 390, 408, 409, 420, 428, 430, 433, 447, 464, 465, 472, 473, 476, 495, 515, 516, 518, 535, 546, 570, 587, 590, 591, 595, 701, 705, 706, 711, 712, 713, 714, 715, 747, 750, 781, 793, 794, 799, 801, 802, 812, 829, 851, 863, 865, 867, 869], "row": [1, 28, 103, 107, 108, 111, 131, 143, 192, 484, 488, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 539, 550, 563, 575, 576, 581, 587, 588, 589, 590, 591, 592, 593, 595, 687, 700, 701, 704, 708, 714, 715, 805], "so": [1, 2, 47, 60, 61, 62, 63, 64, 65, 67, 78, 103, 105, 106, 107, 136, 141, 147, 189, 190, 202, 205, 250, 251, 419, 420, 589, 663, 686, 700, 701, 702, 706, 708, 711, 713, 714, 715, 801, 863, 867, 869], "column": [1, 16, 28, 52, 53, 54, 107, 131, 136, 138, 139, 142, 143, 145, 146, 239, 258, 264, 307, 324, 329, 356, 373, 379, 408, 427, 433, 447, 464, 471, 476, 484, 488, 503, 507, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 534, 539, 550, 554, 563, 575, 576, 580, 587, 588, 589, 590, 591, 592, 593, 595, 630, 674, 686, 697, 700, 701, 702, 704, 708, 709, 713, 714, 760, 764, 805, 806], "some": [1, 16, 68, 78, 80, 90, 94, 136, 138, 141, 144, 159, 160, 161, 192, 216, 221, 339, 390, 517, 528, 529, 530, 701, 711, 714, 828, 867, 869], "incorpor": [1, 94, 514], "relationship": [1, 94, 141, 700, 701, 708, 711, 715, 802], "between": [1, 16, 61, 64, 74, 79, 80, 84, 95, 102, 105, 106, 107, 111, 131, 136, 137, 138, 140, 143, 145, 146, 205, 219, 239, 244, 265, 266, 267, 268, 307, 312, 330, 331, 332, 333, 356, 361, 380, 381, 382, 383, 408, 413, 434, 435, 436, 437, 464, 466, 477, 478, 479, 480, 484, 488, 500, 512, 513, 514, 518, 531, 534, 535, 539, 549, 559, 563, 574, 587, 588, 589, 590, 591, 592, 594, 595, 630, 700, 701, 702, 708, 711, 714, 715, 722, 737, 745, 746, 747, 753, 762, 772, 791, 792, 802, 865, 867], "through": [1, 35, 60, 61, 62, 173, 179, 184, 488, 539, 563, 706, 755, 869], "phylogenet": [1, 78, 94, 105, 106, 141, 143, 534, 595, 722, 745, 755, 802, 862, 865], "tree": [1, 78, 94, 105, 106, 141, 145, 146, 202, 532, 862, 863], "take": [1, 107, 143, 147, 159, 160, 161, 244, 271, 312, 336, 361, 386, 413, 440, 466, 482, 500, 518, 549, 559, 574, 588, 589, 663, 700, 708, 711, 712, 802, 828, 867, 869], "treenod": [1, 78, 94, 105, 106, 141, 532, 801, 802, 863, 867], "identifi": [1, 57, 103, 107, 108, 111, 131, 134, 136, 137, 138, 139, 140, 143, 145, 146, 217, 246, 363, 415, 534, 592, 711, 715, 863], "map": [1, 49, 56, 108, 149, 162, 221, 290, 339, 390, 589, 592, 595, 596, 630, 674, 697, 713, 715, 761, 764, 865], "valu": [1, 3, 4, 7, 9, 10, 11, 18, 19, 21, 23, 24, 25, 34, 37, 39, 41, 47, 51, 60, 61, 62, 63, 64, 65, 67, 69, 80, 90, 102, 103, 106, 131, 132, 133, 135, 136, 137, 138, 139, 140, 145, 150, 151, 153, 155, 156, 157, 163, 164, 166, 168, 169, 170, 189, 192, 194, 196, 197, 198, 201, 206, 208, 209, 210, 213, 217, 221, 222, 227, 230, 232, 234, 238, 239, 256, 264, 271, 272, 280, 282, 283, 284, 290, 291, 296, 299, 301, 303, 307, 322, 329, 336, 339, 340, 345, 348, 350, 352, 356, 371, 379, 386, 390, 391, 396, 399, 401, 403, 407, 408, 425, 433, 440, 441, 447, 448, 453, 456, 458, 460, 464, 470, 476, 482, 487, 490, 491, 492, 495, 510, 515, 518, 520, 522, 526, 527, 528, 529, 530, 533, 538, 541, 542, 543, 546, 556, 562, 565, 566, 567, 570, 583, 587, 588, 589, 590, 591, 592, 593, 595, 598, 599, 601, 603, 604, 605, 609, 610, 612, 614, 615, 616, 618, 620, 621, 623, 625, 626, 627, 630, 631, 632, 634, 636, 637, 638, 642, 643, 645, 647, 648, 649, 651, 653, 654, 656, 658, 659, 660, 662, 664, 665, 667, 669, 670, 671, 675, 676, 678, 680, 681, 682, 685, 688, 689, 691, 693, 694, 695, 697, 700, 701, 705, 706, 708, 710, 711, 712, 713, 714, 715, 722, 725, 726, 729, 732, 734, 735, 742, 744, 747, 786, 793, 804, 805, 810, 811, 814, 816, 817, 818, 819, 828, 830, 831, 833, 835, 836, 837, 840, 842, 843, 845, 847, 848, 849, 851, 853, 854, 856, 858, 859, 860, 869], "tip": [1, 78, 94, 105, 106, 722, 740, 742, 744, 745, 746, 747, 749, 750, 752, 753, 755, 762, 767, 768, 769, 770, 772, 773, 775, 776, 777, 783, 784, 785, 786, 788, 789, 791, 794, 795, 796, 801, 863, 867], "optim": [1, 2, 16, 79, 103, 105, 106, 107, 591, 753, 803, 862], "time": [1, 16, 45, 48, 78, 90, 99, 105, 106, 108, 136, 137, 484, 531, 571, 587, 588, 589, 590, 592, 596, 619, 674, 708, 711, 714, 715, 722, 786, 869], "e": [1, 16, 29, 40, 47, 50, 51, 57, 74, 79, 80, 81, 82, 83, 88, 89, 94, 95, 96, 97, 98, 105, 106, 107, 108, 111, 126, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 192, 215, 239, 247, 248, 256, 288, 307, 315, 316, 322, 339, 356, 364, 365, 371, 374, 387, 408, 416, 417, 425, 442, 447, 464, 467, 468, 470, 484, 488, 495, 504, 510, 513, 518, 531, 532, 534, 535, 539, 546, 551, 556, 559, 563, 570, 577, 581, 583, 587, 588, 589, 590, 591, 697, 703, 704, 713, 714, 716, 722, 723, 724, 737, 738, 740, 742, 743, 744, 748, 749, 751, 752, 753, 755, 756, 757, 758, 762, 766, 768, 769, 770, 771, 772, 778, 782, 783, 784, 787, 788, 789, 791, 792, 793, 794, 796, 797, 798, 799, 801, 802, 806, 825, 828, 862, 863, 865, 867, 869], "often": [1, 78, 103, 107, 135, 136, 138, 534, 595, 701, 706, 711, 826], "faster": [1, 78, 105, 106, 108, 248, 276, 289, 316, 365, 417, 445, 468, 591, 706, 775], "repeat": [1, 137, 711, 825], "call": [1, 54, 78, 79, 84, 85, 105, 106, 134, 136, 143, 145, 147, 189, 192, 239, 247, 250, 271, 288, 307, 315, 336, 356, 364, 386, 408, 416, 419, 440, 447, 464, 467, 482, 576, 588, 589, 685, 701, 711, 738, 740, 741, 744, 755, 756, 758, 771, 772, 778, 787, 792, 799, 826, 828, 829, 839, 863, 869], "reason": [1, 79, 90, 135, 141, 714, 742], "matric": [1, 62, 65, 131, 140, 339, 484, 486, 493, 496, 501, 535, 537, 544, 561, 568, 588, 589, 592, 594, 595, 702, 706, 747], "rather": [1, 83, 141, 484, 515, 595, 802], "thu": [1, 136, 137, 141, 248, 316, 365, 417, 447, 468, 488, 539, 559, 563, 587, 589, 591, 595, 706], "slow": [1, 78, 103, 105, 106, 107, 862], "possibl": [1, 16, 35, 95, 99, 136, 137, 145, 216, 245, 276, 278, 289, 313, 362, 414, 445, 588, 592, 714, 747, 795, 801], "disabl": [1, 78, 103, 105, 106, 107, 869], "step": [1, 28, 45, 48, 56, 78, 103, 105, 106, 107, 143, 147, 704, 711], "pass": [1, 28, 35, 48, 55, 56, 59, 103, 107, 108, 109, 110, 132, 134, 136, 138, 143, 144, 145, 159, 160, 161, 173, 179, 180, 181, 182, 184, 185, 186, 187, 189, 218, 220, 221, 244, 246, 248, 270, 271, 277, 288, 312, 314, 316, 335, 336, 338, 339, 361, 363, 365, 385, 386, 389, 390, 413, 415, 417, 439, 440, 446, 447, 466, 468, 481, 482, 483, 488, 505, 511, 539, 552, 557, 563, 574, 576, 578, 584, 589, 592, 630, 698, 699, 714, 768, 770, 779, 800, 802, 851, 867, 869], "fals": [1, 14, 15, 16, 29, 30, 31, 32, 33, 45, 46, 48, 50, 51, 52, 53, 57, 60, 61, 62, 72, 73, 78, 94, 103, 105, 106, 107, 132, 135, 136, 137, 138, 139, 141, 144, 159, 160, 161, 189, 190, 192, 202, 214, 215, 221, 222, 223, 224, 226, 228, 235, 238, 239, 241, 242, 243, 245, 248, 249, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 278, 279, 288, 289, 290, 291, 292, 293, 295, 297, 304, 307, 309, 310, 311, 313, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 344, 346, 353, 356, 358, 359, 360, 362, 365, 366, 367, 368, 369, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 395, 397, 404, 407, 408, 410, 411, 412, 414, 417, 418, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 452, 454, 461, 464, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 485, 486, 493, 495, 518, 527, 533, 536, 537, 544, 546, 560, 561, 568, 570, 574, 576, 589, 592, 595, 596, 597, 619, 630, 663, 706, 708, 711, 713, 714, 716, 740, 745, 746, 749, 757, 763, 766, 767, 772, 780, 792, 794, 795, 797, 806, 828, 851, 865, 867, 869], "danger": 1, "howev": [1, 78, 79, 94, 103, 105, 106, 107, 136, 140, 141, 146, 221, 339, 390, 447, 515, 591, 595, 706, 753, 808], "If": [1, 16, 28, 45, 47, 48, 50, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 66, 69, 72, 73, 78, 79, 80, 84, 90, 94, 103, 105, 106, 107, 108, 111, 132, 136, 139, 140, 141, 142, 143, 144, 145, 147, 149, 159, 160, 161, 174, 176, 180, 181, 185, 186, 189, 192, 201, 205, 218, 219, 221, 223, 228, 238, 239, 240, 242, 244, 246, 248, 251, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 288, 290, 292, 297, 307, 308, 310, 312, 314, 316, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 337, 339, 341, 346, 356, 357, 359, 361, 363, 365, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 388, 390, 392, 397, 407, 408, 409, 411, 413, 415, 417, 420, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 441, 443, 444, 445, 447, 449, 454, 464, 465, 466, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 488, 495, 496, 498, 499, 500, 503, 504, 505, 510, 513, 514, 518, 523, 524, 526, 535, 539, 546, 548, 549, 550, 551, 552, 556, 563, 570, 573, 574, 575, 576, 577, 578, 583, 587, 588, 589, 590, 591, 592, 593, 595, 630, 641, 674, 685, 696, 697, 698, 700, 701, 702, 705, 706, 709, 711, 712, 713, 714, 715, 716, 742, 744, 745, 749, 752, 755, 756, 760, 765, 768, 770, 773, 779, 784, 785, 786, 791, 793, 794, 795, 801, 802, 805, 806, 807, 808], "invalid": [1, 50, 54, 78, 94, 103, 105, 106, 107, 136, 221, 339, 390, 588, 589, 697, 739, 744, 754, 765, 774, 778], "encount": [1, 753, 755, 762], "when": [1, 16, 45, 47, 48, 54, 57, 60, 61, 62, 69, 79, 94, 95, 99, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 159, 160, 161, 180, 181, 182, 185, 186, 187, 189, 202, 214, 221, 239, 246, 247, 250, 251, 264, 290, 307, 314, 315, 329, 339, 356, 363, 364, 379, 390, 408, 415, 416, 419, 420, 433, 447, 464, 467, 476, 513, 518, 534, 587, 589, 590, 591, 593, 595, 618, 651, 662, 700, 708, 711, 712, 713, 714, 715, 716, 719, 747, 781, 798, 799, 802, 807, 828, 863, 867, 869], "difficult": 1, "interpret": [1, 47, 74, 78, 103, 105, 106, 107, 131, 141, 515, 700, 701, 708], "error": [1, 47, 78, 90, 94, 103, 105, 106, 107, 136, 137, 143, 147, 189, 216, 520, 526, 558, 585, 586, 587, 589, 591, 711, 715, 721, 807, 863], "messag": [1, 78, 103, 105, 106, 107, 608, 652, 807, 863], "incorrect": 1, "therefor": [1, 45, 48, 54, 74, 78, 94, 98, 105, 106, 111, 484, 518], "recommend": [1, 83, 94, 143, 145, 221, 290, 339, 390, 447, 518, 534, 697, 700, 708, 714], "user": [1, 47, 104, 112, 132, 146, 147, 149, 159, 160, 161, 180, 182, 185, 187, 518, 701, 706, 803, 862, 865], "care": [1, 47, 136, 138, 591], "ensur": [1, 16, 47, 78, 105, 106, 147, 221, 339, 390, 486, 520, 526, 537, 559, 561, 743, 805], "data": [1, 28, 54, 78, 80, 90, 94, 103, 105, 106, 107, 108, 111, 132, 135, 137, 139, 140, 142, 144, 145, 146, 189, 221, 290, 339, 390, 447, 484, 486, 488, 506, 515, 516, 517, 518, 519, 526, 527, 531, 533, 535, 537, 539, 553, 559, 561, 563, 579, 588, 595, 596, 618, 651, 662, 685, 697, 700, 701, 705, 711, 713, 714, 715, 760, 791, 795, 802, 826, 829, 862, 863, 865, 869], "condit": [1, 84, 85, 714], "follow": [1, 51, 52, 54, 66, 73, 78, 79, 94, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 192, 221, 228, 256, 258, 297, 322, 324, 339, 346, 371, 373, 390, 397, 425, 427, 447, 454, 470, 471, 488, 496, 515, 516, 517, 518, 521, 522, 523, 524, 525, 530, 531, 534, 539, 563, 587, 588, 589, 591, 592, 596, 697, 700, 715, 741, 778, 829, 867, 869], "confid": [1, 68, 73, 77, 84, 711, 712, 722, 742], "met": [1, 339, 851], "safe": [1, 78, 103, 105, 106, 107, 706, 716, 740], "cast": [1, 141, 239, 307, 356, 408, 464, 534, 535, 593, 697], "integ": [1, 16, 103, 107, 131, 132, 136, 137, 140, 141, 142, 143, 144, 228, 297, 346, 397, 454, 518, 534, 535, 587, 590, 591, 592, 593, 674, 716], "neg": [1, 16, 61, 64, 67, 80, 288, 520, 526, 559, 700, 701, 706, 711, 715, 802], "dimension": [1, 506, 517, 528, 529, 530, 533, 535, 553, 571, 579, 700, 707, 708, 714, 715], "equal": [1, 33, 42, 47, 67, 69, 101, 105, 106, 107, 136, 193, 199, 205, 211, 226, 235, 279, 285, 295, 304, 344, 353, 395, 404, 447, 452, 461, 484, 486, 493, 513, 515, 537, 544, 561, 568, 587, 589, 590, 591, 593, 595, 685, 700, 705, 706, 709, 714, 715, 716, 745, 801, 805, 806], "being": [1, 16, 45, 47, 48, 60, 61, 62, 78, 103, 107, 136, 137, 143, 146, 531, 591, 595, 685, 714, 723, 724, 744, 748, 751, 784, 863, 865], "confirm": [1, 119, 587, 591, 715], "uniqu": [1, 54, 58, 132, 136, 140, 141, 145, 146, 514, 534, 591, 697, 741, 750, 755], "root": [1, 78, 89, 94, 105, 106, 141, 146, 532, 723, 724, 737, 738, 739, 740, 742, 743, 744, 748, 751, 752, 753, 754, 757, 758, 760, 762, 766, 768, 770, 771, 778, 783, 784, 787, 789, 791, 793, 794, 796, 798, 799, 801, 802, 867], "ha": [1, 16, 28, 46, 51, 52, 60, 61, 62, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 181, 186, 189, 221, 238, 239, 242, 245, 255, 256, 258, 272, 274, 275, 276, 278, 288, 289, 290, 307, 310, 313, 321, 322, 324, 339, 356, 359, 362, 370, 371, 373, 390, 407, 408, 411, 414, 424, 425, 427, 441, 442, 444, 445, 447, 464, 469, 470, 471, 520, 534, 685, 700, 702, 713, 714, 715, 743, 763, 766, 767, 781, 785, 801, 828, 865, 867], "node": [1, 78, 105, 106, 532, 717, 718, 722, 723, 724, 727, 731, 737, 738, 739, 741, 742, 743, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 783, 784, 787, 788, 791, 792, 793, 794, 795, 796, 797, 801, 863, 867], "except": [1, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 141, 142, 143, 148, 160, 183, 288, 498, 548, 558, 573, 585, 586, 590, 701, 717, 718, 719, 720, 721, 750, 801, 803, 804, 839, 862, 868], "branch": [1, 78, 94, 106, 532, 722, 742, 743, 752, 793, 796, 802, 867], "name": [1, 55, 59, 78, 94, 105, 106, 132, 133, 137, 138, 139, 141, 142, 144, 145, 147, 149, 174, 175, 176, 181, 186, 192, 218, 220, 264, 270, 277, 278, 279, 285, 287, 329, 335, 338, 379, 385, 389, 433, 439, 446, 476, 481, 483, 484, 496, 501, 505, 511, 518, 527, 552, 557, 578, 584, 587, 588, 590, 591, 596, 608, 652, 687, 697, 698, 699, 717, 722, 736, 738, 739, 740, 742, 744, 745, 746, 747, 750, 754, 755, 756, 757, 758, 760, 762, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 781, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 800, 801, 820, 826, 863, 867], "correspond": [1, 53, 78, 94, 105, 106, 136, 137, 139, 144, 145, 181, 186, 251, 264, 278, 288, 329, 379, 420, 433, 444, 445, 476, 488, 518, 531, 539, 563, 686, 687, 700, 701, 704, 715, 722, 755, 760, 764, 773, 794, 801], "There": [1, 54, 79, 90, 133, 138, 141, 144, 245, 313, 362, 414, 559, 706, 714, 715, 863, 867, 869], "ecolog": [1, 76, 701, 706], "literatur": [1, 74, 715], "relat": [1, 78, 79, 87, 94, 105, 106, 108, 135, 136, 140, 145, 534, 581, 700, 701, 708], "softwar": [1, 136, 137, 862], "measur": [1, 74, 76, 82, 84, 85, 88, 89, 93, 94, 95, 97, 98, 105, 106, 484, 518, 527, 533, 534, 700, 713, 714, 722, 742], "alwai": [1, 16, 135, 138, 141, 143, 160, 189, 192, 213, 288, 752, 808, 869], "assum": [1, 69, 78, 80, 86, 89, 105, 106, 134, 136, 137, 140, 142, 159, 161, 228, 274, 275, 276, 297, 346, 397, 454, 488, 534, 535, 539, 563, 574, 595, 596, 701, 705, 711, 712, 714, 715], "abund": [1, 69, 70, 78, 80, 83, 90, 94, 102, 103, 105, 106, 107, 108, 111, 518, 686, 700, 701, 707, 708, 715], "where": [1, 2, 67, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 107, 108, 111, 131, 136, 140, 141, 142, 145, 147, 241, 243, 247, 249, 259, 261, 266, 268, 269, 271, 309, 311, 315, 317, 325, 326, 331, 333, 334, 336, 358, 360, 364, 366, 375, 376, 381, 383, 384, 386, 387, 410, 412, 416, 418, 428, 430, 435, 437, 438, 440, 467, 472, 473, 478, 480, 482, 484, 488, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 539, 563, 589, 595, 685, 697, 705, 707, 708, 709, 711, 715, 716, 722, 746, 747, 757, 761, 794, 797, 826, 867, 869], "three": [1, 28, 93, 143, 146, 534, 559, 592, 686, 697, 714, 715, 747, 869], "were": [1, 62, 65, 78, 83, 103, 105, 106, 107, 141, 143, 144, 226, 261, 295, 326, 344, 376, 395, 430, 452, 473, 587, 589, 591, 697, 714, 715, 768, 770, 804, 869], "onli": [1, 16, 54, 81, 84, 94, 111, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 189, 202, 217, 221, 239, 246, 278, 307, 314, 339, 356, 363, 390, 408, 415, 447, 464, 484, 498, 515, 518, 548, 559, 573, 574, 576, 581, 587, 591, 592, 685, 701, 706, 708, 713, 714, 715, 743, 746, 747, 749, 752, 755, 778, 786, 791, 795, 808, 851, 862, 867, 869], "wa": [1, 60, 63, 69, 70, 71, 74, 77, 78, 80, 81, 82, 86, 87, 94, 95, 97, 98, 103, 105, 106, 107, 108, 134, 136, 137, 141, 143, 189, 261, 288, 326, 376, 430, 447, 473, 518, 531, 589, 641, 705, 713, 715, 738, 780, 801, 802, 863, 867, 869], "second": [1, 16, 28, 60, 61, 62, 63, 64, 65, 66, 137, 143, 147, 161, 192, 214, 279, 488, 518, 539, 563, 715, 761, 764, 794, 863, 869], "form": [1, 28, 60, 191, 488, 535, 539, 559, 563, 581, 793], "among": [1, 74, 94, 138, 510, 556, 583, 597, 701, 708], "expect": [1, 108, 132, 147, 176, 183, 221, 339, 390, 523, 524, 534, 595, 700, 701, 708, 718, 719, 793, 869], "3": [1, 16, 28, 33, 45, 46, 48, 50, 53, 54, 56, 57, 60, 64, 69, 77, 78, 81, 86, 94, 97, 102, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 192, 202, 214, 219, 226, 228, 238, 239, 240, 245, 246, 262, 263, 265, 271, 272, 275, 276, 288, 289, 295, 297, 307, 308, 313, 314, 327, 328, 330, 336, 339, 344, 346, 356, 357, 362, 363, 377, 378, 380, 386, 395, 397, 407, 408, 409, 414, 415, 431, 432, 434, 440, 441, 444, 445, 447, 452, 454, 464, 465, 474, 475, 477, 482, 495, 504, 507, 510, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 527, 528, 529, 530, 533, 535, 546, 551, 554, 556, 570, 577, 580, 581, 583, 587, 588, 589, 591, 592, 593, 595, 596, 597, 619, 630, 663, 686, 687, 697, 700, 701, 706, 707, 711, 713, 714, 715, 716, 737, 747, 752, 753, 760, 761, 762, 785, 789, 791, 793, 794, 796, 797, 802, 807, 862, 865, 867, 869], "indic": [1, 15, 29, 30, 33, 42, 51, 52, 69, 72, 73, 88, 94, 111, 131, 136, 137, 147, 192, 193, 199, 202, 205, 211, 223, 226, 228, 235, 241, 243, 246, 247, 249, 252, 253, 254, 255, 256, 257, 258, 261, 266, 268, 269, 271, 278, 279, 285, 292, 295, 297, 304, 309, 311, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 331, 333, 334, 336, 341, 344, 346, 353, 358, 360, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 381, 383, 384, 386, 387, 392, 395, 397, 404, 410, 412, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 430, 435, 437, 438, 440, 449, 452, 454, 461, 467, 469, 470, 471, 473, 478, 480, 482, 484, 518, 532, 587, 589, 590, 591, 595, 685, 696, 697, 713, 757, 759, 797, 840, 851, 867, 869], "singleton": [1, 69, 72, 73, 77, 79, 81, 93, 96, 100, 147], "tripleton": 1, "do": [1, 45, 48, 90, 131, 136, 143, 147, 189, 221, 226, 268, 295, 333, 339, 344, 383, 390, 395, 437, 447, 452, 480, 513, 518, 589, 592, 630, 708, 742, 755, 785, 786, 867, 869], "ani": [1, 16, 46, 47, 54, 56, 66, 67, 70, 101, 102, 136, 138, 140, 141, 145, 159, 160, 161, 181, 186, 189, 192, 202, 216, 217, 221, 339, 390, 447, 484, 513, 518, 520, 589, 592, 596, 630, 652, 700, 705, 711, 713, 714, 739, 742, 743, 744, 754, 762, 791, 793, 801, 828, 829, 839, 851, 867, 869], "ton": 1, "doubleton": [1, 72, 73, 75, 77, 93], "paramet": [1, 2, 16, 17, 28, 30, 33, 42, 45, 47, 48, 49, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 147, 149, 159, 160, 161, 172, 174, 175, 176, 177, 178, 180, 181, 182, 185, 186, 187, 189, 192, 193, 199, 202, 205, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 226, 228, 235, 238, 239, 240, 244, 246, 247, 248, 251, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 275, 276, 277, 278, 279, 285, 287, 288, 289, 292, 295, 297, 304, 307, 308, 312, 314, 315, 316, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 341, 344, 346, 353, 356, 357, 361, 363, 364, 365, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 388, 389, 390, 392, 395, 397, 404, 407, 408, 409, 413, 415, 416, 417, 420, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 443, 444, 445, 446, 447, 449, 452, 454, 461, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 493, 495, 496, 498, 499, 500, 502, 503, 504, 505, 510, 511, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 539, 544, 546, 548, 549, 550, 551, 552, 556, 557, 560, 561, 563, 568, 570, 573, 574, 575, 576, 577, 578, 583, 584, 587, 588, 589, 590, 591, 592, 593, 595, 618, 630, 651, 662, 674, 685, 697, 698, 699, 700, 701, 702, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 722, 737, 739, 740, 743, 744, 745, 746, 747, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 785, 786, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 825, 826, 827, 828, 829, 839, 840, 851, 869], "either": [1, 28, 35, 54, 56, 60, 61, 62, 94, 132, 145, 159, 160, 161, 251, 261, 290, 326, 376, 420, 430, 473, 514, 589, 591, 685, 697, 700, 705, 713, 715, 801], "string": [1, 2, 16, 44, 103, 107, 108, 111, 131, 134, 136, 137, 141, 143, 145, 237, 247, 248, 264, 271, 273, 278, 286, 306, 315, 316, 329, 336, 337, 355, 364, 365, 379, 386, 388, 406, 416, 417, 433, 440, 443, 463, 467, 468, 476, 482, 484, 488, 494, 500, 518, 534, 535, 539, 545, 549, 563, 569, 574, 587, 590, 591, 593, 696, 697, 736, 740, 794, 802, 807, 867], "faith_pd": [1, 94], "gener": [1, 45, 48, 60, 66, 67, 68, 86, 94, 108, 137, 138, 139, 141, 145, 146, 159, 161, 174, 176, 180, 185, 188, 247, 261, 262, 315, 326, 327, 364, 376, 377, 416, 430, 431, 447, 467, 473, 474, 484, 534, 558, 585, 587, 588, 589, 593, 685, 687, 697, 700, 711, 714, 715, 721, 862, 863, 865, 868], "version": [1, 72, 73, 78, 94, 103, 105, 106, 107, 131, 132, 134, 135, 138, 139, 143, 160, 245, 273, 313, 337, 362, 388, 414, 443, 531, 736, 740, 803, 807, 865], "ten": 1, "faith": [1, 78, 94, 534], "pd": [1, 28, 48, 52, 57, 78, 94, 103, 132, 133, 146, 221, 258, 290, 324, 339, 373, 390, 427, 447, 471, 495, 507, 510, 518, 534, 546, 554, 556, 570, 580, 581, 583, 587, 588, 591, 596, 686, 687, 697, 700, 708, 713, 714, 760, 805], "about": [1, 55, 59, 90, 134, 136, 137, 141, 145, 147, 202, 218, 220, 221, 270, 277, 290, 335, 338, 339, 385, 389, 390, 439, 446, 447, 481, 483, 505, 511, 513, 552, 557, 578, 584, 686, 698, 699, 708, 714, 715, 779, 800, 803, 804, 865], "100": [1, 132, 133, 136, 139, 217, 518, 715, 869], "unweighted_unifrac": [1, 106], "hundr": [1, 108], "unweight": [1, 94, 105, 106, 709], "unifrac": [1, 78, 94, 105, 106, 108, 111, 706], "latter": [1, 484], "mai": [1, 2, 16, 47, 56, 78, 85, 126, 133, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 160, 177, 178, 189, 192, 216, 221, 248, 290, 316, 339, 365, 390, 417, 447, 468, 484, 488, 498, 513, 518, 534, 539, 548, 563, 573, 589, 591, 595, 685, 700, 711, 713, 714, 715, 716, 760, 803, 826, 828, 863, 865], "case": [1, 47, 60, 61, 62, 70, 108, 136, 141, 143, 146, 149, 221, 251, 264, 329, 379, 390, 420, 433, 476, 496, 535, 589, 595, 700, 705, 707, 715, 742, 775, 801, 828, 829, 863, 867], "run": [1, 78, 103, 105, 106, 107, 137, 144, 246, 314, 363, 415, 518, 587, 588, 589, 591, 592, 595, 607, 629, 640, 673, 684, 697, 865, 869], "like": [1, 60, 61, 62, 108, 136, 138, 139, 140, 142, 147, 264, 329, 379, 433, 476, 484, 534, 595, 618, 630, 651, 652, 662, 674, 706, 708, 714, 715, 827, 863, 869], "small": [1, 140, 145, 515, 526, 708], "neglig": 1, "know": [1, 16, 78, 105, 106, 134, 136, 143, 145, 147, 518, 711, 803, 863], "might": [1, 80, 140, 142, 588, 713, 714, 715, 747, 863], "ve": [1, 136, 137, 715, 867], "develop": [1, 2, 108, 111, 135, 159, 160, 161, 518, 802, 862, 863, 869], "To": [1, 35, 67, 78, 105, 106, 136, 137, 138, 141, 144, 147, 189, 221, 339, 390, 518, 559, 581, 587, 589, 591, 595, 711, 742, 863, 869], "discov": [1, 750], "get_alpha_diversity_metr": [1, 103, 110], "get_beta_diversity_metr": [1, 107, 109, 111], "respect": [1, 28, 72, 136, 139, 142, 146, 159, 160, 161, 179, 180, 182, 185, 187, 189, 248, 316, 365, 417, 447, 468, 495, 500, 502, 510, 518, 531, 546, 549, 556, 570, 574, 581, 583, 595, 687], "addit": [1, 66, 78, 104, 105, 106, 110, 135, 136, 137, 138, 139, 143, 144, 221, 339, 390, 484, 515, 516, 517, 534, 559, 722, 743, 755, 756, 801, 828], "won": [1, 78, 103, 105, 106, 107, 137, 193, 701], "t": [1, 16, 28, 45, 47, 48, 49, 53, 54, 58, 66, 78, 80, 94, 103, 105, 106, 107, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 159, 161, 183, 190, 192, 193, 221, 226, 235, 240, 244, 248, 250, 251, 252, 253, 254, 257, 265, 266, 267, 268, 274, 288, 295, 304, 308, 312, 316, 318, 319, 320, 323, 330, 331, 332, 333, 339, 344, 353, 357, 361, 365, 367, 368, 369, 372, 380, 381, 382, 383, 390, 395, 404, 409, 413, 417, 419, 420, 421, 422, 423, 426, 434, 435, 436, 437, 442, 447, 452, 461, 465, 466, 468, 477, 478, 479, 480, 484, 502, 515, 516, 518, 523, 524, 527, 532, 535, 559, 586, 592, 700, 701, 706, 708, 710, 711, 713, 715, 716, 746, 747, 784, 785, 793, 801, 802, 803, 865, 868, 869], "those": [1, 104, 595, 685, 700, 715, 752, 786, 791, 802, 828, 865], "scipi": [1, 79, 104, 107, 110, 506, 513, 518, 523, 532, 535, 553, 559, 571, 579, 581, 588, 589, 591, 595, 706, 711, 714, 715, 759], "spatial": [1, 104, 107, 110, 506, 513, 535, 553, 559, 571, 579, 581, 591], "distanc": [1, 16, 94, 104, 105, 106, 107, 108, 110, 111, 131, 140, 141, 265, 267, 330, 332, 380, 382, 434, 436, 477, 479, 495, 498, 504, 506, 510, 516, 527, 594, 595, 697, 700, 701, 703, 706, 708, 722, 736, 737, 745, 747, 762, 784, 791, 802, 865, 866, 867], "pdist": [1, 104, 107, 110, 595], "creat": [1, 16, 28, 45, 48, 49, 53, 55, 56, 57, 58, 135, 136, 139, 141, 143, 162, 173, 184, 189, 190, 192, 202, 213, 214, 218, 221, 270, 271, 290, 335, 336, 339, 385, 386, 390, 439, 440, 447, 481, 482, 499, 500, 502, 504, 505, 507, 508, 518, 526, 534, 549, 551, 552, 554, 574, 577, 578, 580, 581, 593, 595, 630, 686, 697, 698, 743, 744, 765, 779, 802, 865, 867, 869], "6": [1, 48, 66, 67, 72, 73, 78, 92, 94, 105, 106, 111, 133, 135, 136, 137, 138, 145, 146, 238, 239, 247, 248, 257, 269, 271, 272, 290, 307, 315, 316, 323, 334, 336, 356, 364, 365, 372, 384, 386, 407, 408, 416, 417, 426, 438, 440, 441, 464, 467, 468, 482, 510, 518, 520, 524, 527, 528, 529, 556, 581, 583, 589, 591, 592, 595, 686, 711, 737, 742, 752, 753, 761, 762, 791, 793, 794, 801, 865], "7": [1, 63, 73, 94, 108, 136, 137, 138, 145, 146, 192, 202, 214, 219, 221, 228, 239, 288, 297, 307, 346, 356, 390, 397, 408, 454, 464, 510, 518, 527, 533, 556, 583, 588, 589, 591, 592, 595, 686, 711, 747, 761, 785, 793, 794, 802, 806, 865], "23": [1, 142, 145, 287, 518, 865], "64": [1, 108, 137, 278, 279, 797], "14": [1, 73, 83, 94, 135, 137, 142, 242, 246, 310, 314, 359, 363, 411, 415, 518, 596, 715, 753, 791], "35": [1, 135, 137, 138, 144, 515, 715], "42": [1, 54, 79, 136, 142, 143, 221, 244, 312, 361, 390, 413, 466, 588, 591], "12": [1, 135, 142, 447, 518, 527, 711, 865], "40": [1, 81, 136, 146, 531, 713, 715], "44": [1, 95, 591, 801], "9": [1, 132, 133, 134, 136, 139, 142, 145, 189, 192, 202, 221, 242, 246, 290, 310, 314, 339, 359, 363, 390, 411, 415, 447, 518, 595, 596, 686, 700, 701, 703, 704, 706, 707, 708, 711, 749, 752, 761, 791, 794, 801, 802, 865], "45": [1, 142, 715], "19": [1, 135, 142, 711], "abcdef": 1, "ll": [1, 78, 105, 106, 588, 589, 592, 686, 711, 714, 715, 867, 869], "adiv_sob": 1, "sob": [1, 91, 92, 93], "A": [1, 16, 28, 49, 50, 53, 54, 55, 58, 60, 62, 65, 69, 72, 77, 78, 79, 80, 82, 83, 89, 94, 97, 105, 106, 108, 131, 132, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 173, 177, 178, 184, 191, 192, 213, 217, 218, 221, 242, 248, 254, 270, 279, 285, 290, 310, 316, 320, 335, 339, 359, 365, 369, 385, 390, 411, 417, 423, 439, 447, 468, 481, 484, 495, 496, 500, 502, 504, 505, 509, 510, 515, 518, 520, 526, 527, 528, 529, 530, 531, 533, 534, 535, 546, 549, 551, 552, 555, 556, 559, 570, 574, 577, 578, 582, 583, 588, 589, 590, 591, 593, 595, 608, 630, 652, 696, 697, 698, 700, 701, 706, 708, 713, 714, 715, 722, 723, 724, 737, 742, 745, 747, 748, 751, 752, 753, 754, 757, 758, 759, 761, 762, 764, 771, 779, 781, 783, 784, 789, 791, 798, 799, 801, 851, 863, 867, 869], "b": [1, 16, 49, 54, 56, 57, 58, 78, 79, 80, 90, 94, 111, 137, 140, 141, 190, 221, 339, 390, 447, 488, 495, 496, 499, 504, 507, 510, 532, 534, 539, 546, 551, 554, 556, 563, 570, 577, 580, 581, 583, 588, 589, 685, 697, 713, 714, 723, 724, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 755, 756, 757, 758, 762, 763, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 792, 793, 795, 796, 797, 798, 799, 801, 802, 827, 863, 865, 867], "c": [1, 2, 16, 28, 46, 53, 54, 56, 57, 66, 69, 78, 79, 80, 81, 82, 94, 95, 97, 105, 106, 111, 135, 136, 137, 141, 143, 145, 146, 161, 221, 231, 236, 242, 248, 250, 251, 300, 305, 310, 316, 339, 349, 354, 359, 365, 390, 400, 405, 411, 417, 419, 420, 447, 457, 462, 468, 484, 495, 499, 502, 504, 507, 510, 515, 517, 522, 527, 528, 529, 530, 532, 533, 534, 546, 551, 554, 556, 570, 577, 580, 581, 583, 588, 589, 697, 707, 713, 714, 723, 724, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 755, 756, 757, 758, 762, 763, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 792, 793, 795, 796, 797, 798, 799, 801, 802, 865, 867], "f": [1, 16, 54, 70, 84, 94, 108, 132, 133, 137, 141, 144, 145, 146, 190, 339, 589, 590, 591, 701, 704, 711, 714, 723, 724, 737, 738, 740, 742, 743, 744, 748, 749, 751, 752, 753, 755, 756, 757, 758, 762, 768, 769, 770, 771, 772, 778, 782, 783, 784, 787, 788, 789, 791, 792, 796, 797, 798, 799, 801, 867], "int64": [1, 28, 46, 54, 238, 242, 272, 310, 359, 407, 411, 441, 447, 518, 865], "next": [1, 78, 84, 85, 105, 106, 135, 141, 147, 447, 518, 674, 700, 801, 867, 869], "same": [1, 28, 46, 47, 48, 50, 54, 56, 74, 78, 83, 94, 95, 99, 105, 106, 136, 137, 138, 139, 141, 144, 145, 147, 205, 219, 226, 228, 235, 238, 239, 242, 244, 245, 261, 265, 266, 267, 268, 272, 275, 278, 279, 288, 295, 297, 304, 307, 310, 312, 313, 326, 330, 331, 332, 333, 344, 346, 353, 356, 359, 361, 362, 376, 380, 381, 382, 383, 395, 397, 404, 407, 408, 411, 413, 414, 430, 434, 435, 436, 437, 441, 444, 447, 452, 454, 461, 464, 466, 473, 477, 478, 479, 480, 486, 488, 496, 497, 498, 500, 509, 513, 514, 518, 537, 539, 547, 548, 549, 555, 561, 563, 572, 573, 574, 576, 582, 587, 588, 589, 590, 591, 592, 595, 685, 700, 701, 705, 706, 708, 714, 715, 716, 756, 786, 801, 805, 865, 867], "sinc": [1, 28, 45, 48, 57, 80, 135, 136, 138, 143, 146, 193, 248, 288, 316, 365, 417, 447, 468, 518, 589, 711, 715, 795, 808, 869], "order": [1, 16, 38, 43, 49, 53, 54, 57, 103, 107, 131, 132, 136, 140, 141, 142, 143, 145, 214, 221, 236, 245, 248, 263, 276, 278, 289, 305, 313, 316, 328, 339, 354, 362, 365, 378, 390, 405, 414, 417, 432, 445, 447, 462, 468, 475, 486, 488, 495, 498, 510, 518, 532, 537, 539, 546, 548, 556, 561, 563, 570, 573, 576, 581, 583, 587, 588, 589, 590, 591, 592, 595, 700, 709, 713, 714, 772, 791, 792, 793, 801, 803, 805, 867, 869], "io": [1, 55, 59, 78, 105, 106, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 534, 552, 557, 578, 584, 697, 698, 699, 760, 779, 800, 801, 827, 862, 867], "stringio": [1, 78, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 189, 534, 801, 802, 863, 867], "otu1": [1, 78, 105, 106], "otu2": [1, 78, 105, 106], "otu3": [1, 78, 105, 106], "otu4": [1, 78, 105, 106], "75": [1, 50, 78, 83, 105, 106, 265, 330, 380, 434, 477, 518, 534, 588, 591, 797], "otu5": [1, 78, 105, 106], "otu6": [1, 78, 105, 106], "otu7": [1, 78, 105, 106], "otu_id": [1, 78, 94, 105, 106], "adiv_faith_pd": 1, "00": [1, 132, 133, 136, 139, 142, 239, 274, 307, 356, 408, 442, 464, 802, 865], "50": [1, 62, 65, 136, 139, 142, 239, 307, 356, 408, 464, 518, 596, 697, 714, 715, 865], "float64": [1, 54, 131, 239, 307, 356, 408, 464, 518, 520, 526, 528, 529, 530, 581, 591, 686], "now": [1, 83, 135, 136, 138, 143, 447, 515, 518, 588, 685, 686, 711, 714, 715, 867, 869], "brai": 1, "curti": 1, "notic": [1, 136, 141, 143, 715, 869], "bc_dm": 1, "braycurti": 1, "6x6": [1, 591], "78787879": 1, "86666667": 1, "30927835": 1, "85714286": 1, "81521739": 1, "78142077": 1, "86813187": 1, "1627907": 1, "87709497": 1, "09392265": 1, "71597633": 1, "87777778": 1, "89285714": 1, "68235294": 1, "weight": [1, 78, 94, 105, 106, 141, 596, 597, 619, 630, 641, 663, 705, 709, 801], "becaus": [1, 47, 53, 54, 78, 105, 106, 132, 136, 137, 138, 141, 143, 144, 147, 226, 261, 288, 295, 326, 344, 376, 395, 430, 447, 452, 473, 518, 589, 701, 706, 708, 710, 713, 742, 747, 750, 794], "need": [1, 45, 48, 53, 78, 105, 106, 108, 131, 139, 141, 147, 159, 161, 189, 202, 217, 290, 518, 523, 524, 532, 587, 588, 590, 591, 592, 685, 686, 701, 708, 711, 714, 715, 744, 747, 805, 806, 828, 869], "again": [1, 136, 137, 531, 802], "wu_dm": 1, "weighted_unifrac": [1, 105], "77549923": 1, "82857143": 1, "42512039": 1, "8547619": 1, "10937312": 1, "26433692": 1, "98435423": 1, "24270353": 1, "46774194": 1, "95224719": 1, "16025641": 1, "86111111": 1, "98796148": 1, "30870431": 1, "82967033": 1, "determin": [1, 30, 33, 42, 51, 52, 78, 94, 103, 105, 106, 107, 140, 147, 177, 178, 189, 223, 226, 235, 252, 253, 254, 255, 256, 257, 258, 260, 279, 285, 292, 295, 304, 318, 319, 320, 321, 322, 323, 324, 341, 344, 353, 367, 368, 369, 370, 371, 372, 373, 374, 392, 395, 404, 421, 422, 423, 424, 425, 426, 427, 429, 449, 452, 461, 469, 470, 471, 493, 518, 544, 568, 591, 595, 685, 706, 711, 713, 714, 801, 869], "significantli": [1, 53, 518, 587, 590, 591], "correl": [1, 527, 533, 534, 588, 589, 592, 594, 595, 687, 701, 702, 708, 711, 715, 747, 867], "mantel": [1, 534, 592, 595], "them": [1, 80, 138, 143, 193, 205, 214, 215, 447, 589, 630, 705, 706, 708, 829], "Then": [1, 515, 518, 596, 686], "p": [1, 16, 66, 78, 87, 88, 94, 339, 518, 531, 534, 587, 589, 590, 591, 592, 595, 686, 700, 701, 702, 708, 711, 714, 715], "signific": [1, 518, 587, 589, 590, 591, 592, 595, 714, 715], "base": [1, 54, 61, 64, 69, 72, 73, 77, 78, 82, 83, 88, 89, 90, 94, 97, 99, 105, 106, 132, 136, 138, 142, 144, 192, 213, 221, 261, 290, 326, 339, 376, 390, 430, 447, 473, 488, 535, 539, 563, 587, 589, 590, 591, 595, 630, 700, 701, 708, 711, 713, 714, 715, 745, 757, 758, 801, 827, 865, 866, 867, 869], "05": [1, 142, 518, 595, 711, 712, 714, 715, 805], "r": [1, 16, 78, 79, 83, 84, 85, 86, 87, 94, 105, 106, 137, 138, 146, 189, 221, 339, 390, 496, 515, 516, 517, 521, 522, 523, 524, 531, 587, 588, 589, 590, 591, 595, 697, 700, 701, 708, 744, 785], "p_valu": [1, 589, 595], "n": [1, 16, 70, 71, 77, 79, 80, 81, 86, 87, 88, 89, 90, 94, 96, 102, 131, 132, 133, 134, 136, 137, 138, 142, 143, 144, 145, 146, 147, 159, 160, 161, 189, 190, 221, 261, 326, 339, 363, 376, 390, 430, 473, 526, 534, 589, 592, 595, 685, 700, 701, 702, 705, 707, 708, 709, 711, 715, 716, 723, 724, 736, 744, 748, 751, 757, 762, 764, 771, 786, 787, 794, 801, 802, 807, 865], "922404392093": 1, "true": [1, 14, 15, 16, 29, 30, 31, 32, 33, 45, 46, 48, 49, 50, 51, 52, 53, 57, 58, 60, 61, 62, 72, 73, 78, 79, 94, 101, 103, 105, 106, 107, 108, 111, 132, 135, 136, 137, 138, 139, 141, 144, 149, 159, 160, 161, 180, 185, 189, 190, 192, 202, 214, 219, 221, 222, 223, 225, 226, 228, 235, 238, 239, 241, 242, 243, 245, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 278, 279, 288, 289, 290, 291, 292, 294, 295, 297, 304, 307, 309, 310, 311, 313, 316, 317, 318, 319, 320, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 343, 344, 346, 353, 356, 358, 359, 360, 362, 365, 366, 367, 368, 369, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 394, 395, 397, 404, 407, 408, 410, 411, 412, 414, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 451, 452, 454, 461, 464, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480, 482, 485, 486, 493, 495, 498, 514, 518, 523, 524, 527, 534, 535, 536, 537, 544, 546, 548, 559, 560, 561, 568, 570, 573, 574, 576, 587, 589, 591, 592, 595, 630, 641, 705, 706, 708, 709, 713, 714, 716, 740, 742, 744, 749, 757, 763, 765, 766, 767, 769, 772, 775, 776, 777, 780, 781, 782, 783, 792, 794, 795, 797, 801, 802, 828, 829, 839, 851, 865, 867, 869], "princip": [1, 591, 686, 697, 700, 706, 707], "coordin": [1, 138, 144, 192, 202, 205, 213, 214, 219, 532, 591, 596, 630, 663, 674, 686, 687, 697, 700, 706, 707, 708], "analysi": [1, 78, 90, 105, 106, 136, 143, 515, 516, 518, 531, 587, 590, 591, 596, 597, 618, 619, 651, 662, 663, 674, 686, 697, 700, 701, 706, 707, 708, 711, 714, 715], "pcoa": [1, 142, 591, 687, 697, 707], "our": [1, 80, 137, 147, 160, 190, 261, 326, 376, 430, 473, 686, 711, 714, 715, 716, 865, 869], "ordin": [1, 125, 591, 806, 807, 866], "wu_pc": 1, "plot": [1, 687], "realli": 1, "interest": [1, 447, 518, 534, 595, 700, 708, 714, 768, 770, 869], "context": [1, 16, 190, 513, 697, 802], "let": [1, 136, 137, 139, 143, 144, 145, 192, 202, 271, 336, 386, 440, 447, 482, 518, 589, 685, 710, 711, 714, 715, 803, 865, 867, 869], "visual": [1, 697], "panda": [1, 28, 52, 57, 107, 132, 133, 146, 221, 258, 324, 339, 373, 390, 427, 471, 507, 518, 554, 580, 581, 587, 588, 590, 591, 592, 596, 630, 674, 686, 697, 713, 714, 760, 805, 865], "sample_md": 1, "datafram": [1, 28, 52, 107, 132, 133, 146, 221, 258, 290, 324, 339, 373, 390, 427, 447, 471, 495, 507, 510, 518, 546, 554, 556, 570, 580, 583, 587, 588, 590, 591, 592, 596, 630, 674, 686, 687, 697, 700, 701, 707, 708, 713, 714, 760, 805, 865], "gut": [1, 697], "skin": [1, 697], "tongu": 1, "body_sit": [1, 697], "subject": [1, 132, 133, 869], "color": [1, 84, 85, 504, 551, 577, 697], "taken": [1, 132, 133, 136, 143, 145, 146, 518, 595, 827], "fig": [1, 504, 551, 577, 697], "axis_label": [1, 697], "pc": [1, 596, 697], "titl": [1, 132, 133, 138, 145, 504, 551, 577, 697], "cmap": [1, 504, 551, 577, 697], "jet": 1, "don": [1, 16, 54, 136, 250, 251, 419, 420, 516, 518, 592, 708, 711, 715, 746, 747, 784, 802], "see": [1, 53, 54, 55, 59, 66, 67, 78, 94, 103, 105, 106, 107, 108, 110, 111, 133, 135, 136, 137, 141, 143, 144, 146, 147, 218, 220, 244, 270, 277, 278, 289, 312, 335, 338, 361, 385, 389, 413, 439, 446, 447, 466, 481, 483, 488, 505, 511, 539, 552, 557, 563, 578, 584, 587, 588, 589, 590, 591, 592, 595, 686, 697, 698, 699, 706, 708, 710, 711, 715, 779, 800, 863, 869], "cluster": [1, 589, 591, 759, 865], "group": [1, 101, 273, 337, 388, 443, 495, 518, 531, 546, 570, 587, 590, 591, 596, 597, 607, 608, 629, 640, 652, 662, 663, 673, 684, 713, 714, 715, 828, 867], "instead": [1, 50, 97, 135, 136, 138, 147, 149, 159, 160, 161, 215, 248, 261, 263, 265, 267, 316, 326, 328, 330, 332, 365, 376, 378, 380, 382, 417, 430, 432, 434, 436, 468, 473, 475, 477, 479, 535, 587, 589, 591, 705, 714, 715, 747, 802, 803, 863], "bodi": [1, 697], "site": [1, 138, 142, 261, 326, 376, 430, 473, 686, 687, 697, 706], "appear": [1, 69, 132, 143, 145, 498, 548, 573, 588, 700, 701, 706, 711], "closer": [1, 869], "anoth": [1, 33, 42, 45, 54, 78, 105, 106, 138, 140, 141, 193, 199, 202, 205, 211, 216, 219, 226, 235, 244, 266, 268, 279, 285, 295, 304, 312, 331, 333, 344, 353, 361, 381, 383, 395, 404, 413, 435, 437, 447, 452, 461, 466, 478, 480, 484, 486, 537, 561, 595], "space": [1, 136, 141, 143, 145, 202, 205, 214, 515, 516, 517, 521, 522, 523, 524, 630, 687, 697, 700, 707], "matplotlib": [1, 504, 551, 577, 687, 697], "pyplot": 1, "plt": 1, "close": [1, 55, 59, 79, 136, 137, 141, 143, 145, 189, 190, 218, 220, 270, 277, 288, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 518, 552, 557, 578, 584, 618, 651, 662, 698, 699, 779, 800, 827], "necessari": [1, 54, 132, 143, 202, 447, 518, 535, 587, 588, 589, 618, 651, 662, 747, 826, 863], "normal": [1, 77, 106, 137, 138, 587, 591, 706, 707, 708, 711, 712, 714, 715, 744], "techniqu": [1, 79, 515, 700, 701, 866], "exploratori": 1, "quantifi": 1, "strength": 1, "mani": [1, 69, 93, 110, 141, 484, 515, 518, 595, 700, 706, 714, 715, 869], "statist": [1, 69, 72, 77, 83, 90, 516, 518, 587, 589, 590, 591, 592, 595, 700, 701, 705, 711, 714, 715, 862], "accomplish": [1, 515, 863], "oper": [1, 45, 48, 54, 78, 105, 106, 132, 136, 141, 215, 221, 250, 251, 339, 390, 419, 420, 447, 515, 517, 528, 529, 530, 534, 535, 571, 589, 590, 706, 760, 784, 801, 829, 863, 865], "anosim": [1, 590, 591], "test": [1, 33, 42, 94, 147, 193, 199, 205, 211, 226, 235, 279, 285, 295, 304, 344, 353, 395, 404, 452, 461, 515, 518, 534, 587, 589, 590, 591, 592, 594, 595, 607, 629, 640, 673, 684, 711, 714, 715, 805, 806, 826, 862], "permut": [1, 193, 587, 589, 590, 591, 592, 595], "999": [1, 447, 587, 589, 590, 591, 592, 595], "33333333333333331": 1, "anti": [1, 587], "insignific": 1, "strong": [1, 221, 587, 589, 595], "separ": [1, 132, 133, 136, 137, 139, 140, 141, 142, 143, 591, 701], "explor": [1, 104, 686], "add": [1, 61, 64, 145, 147, 172, 192, 202, 214, 216, 226, 295, 344, 395, 447, 452, 520, 526, 528, 529, 530, 739, 752, 754], "rich": [1, 68, 72, 78, 86, 89, 94, 101], "straight": 1, "forward": [1, 276, 288, 289, 445], "seri": [1, 57, 103, 139, 518, 581, 587, 588, 590, 591, 596, 687, 711], "ob": [1, 72, 101], "investig": 1, "categori": [1, 145, 596, 597, 607, 608, 618, 629, 630, 640, 641, 652, 662, 663, 673, 674, 684, 697, 711, 713, 714], "boxplot": 1, "show": [1, 202, 711, 867], "spearman": [1, 588, 589, 592], "numer": [1, 79, 83, 132, 140, 146, 531, 588, 589, 630, 686, 697, 700, 701, 707, 708, 715], "relev": [1, 16, 138, 714, 865], "give": [1, 141, 700, 701, 708, 747], "u": [1, 62, 65, 78, 84, 87, 105, 106, 135, 136, 138, 146, 226, 231, 235, 236, 274, 295, 300, 304, 305, 339, 344, 349, 353, 354, 390, 395, 400, 404, 405, 442, 452, 457, 461, 462, 518, 521, 522, 532, 589, 710, 715, 865, 869], "symmetr": [1, 484, 488, 534, 535, 539, 559, 563, 574, 589, 593, 595, 700, 745], "2x2": [1, 140], "corr": 1, "numeric_onli": 1, "000000": [1, 802], "939336": 1, "class": [2, 16, 28, 51, 52, 67, 69, 72, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 159, 161, 162, 174, 176, 177, 178, 179, 192, 202, 221, 239, 256, 258, 278, 290, 307, 322, 324, 339, 356, 371, 373, 390, 408, 425, 427, 447, 464, 470, 471, 484, 518, 535, 559, 597, 608, 619, 630, 641, 652, 663, 674, 687, 722, 744, 801, 808, 828, 840, 851, 862, 863], "wrap": [2, 143, 145, 852], "struct": [2, 138], "access": [2, 51, 52, 131, 135, 136, 138, 146, 256, 258, 279, 285, 322, 324, 371, 373, 425, 427, 470, 471, 534, 802, 808], "note": [2, 16, 28, 35, 40, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 105, 106, 108, 110, 135, 136, 137, 138, 139, 141, 143, 144, 192, 202, 203, 204, 216, 221, 224, 225, 228, 239, 242, 245, 248, 250, 261, 272, 274, 275, 276, 278, 279, 286, 287, 288, 289, 290, 293, 294, 297, 307, 310, 313, 316, 326, 339, 342, 343, 346, 356, 359, 362, 365, 376, 390, 393, 394, 397, 408, 411, 414, 417, 419, 430, 441, 442, 444, 445, 447, 450, 451, 454, 464, 468, 473, 484, 488, 495, 496, 506, 509, 510, 513, 514, 518, 523, 524, 526, 532, 535, 539, 546, 553, 555, 556, 559, 563, 570, 571, 576, 579, 582, 583, 587, 588, 589, 590, 591, 592, 595, 685, 697, 700, 701, 706, 708, 709, 714, 715, 716, 740, 742, 743, 744, 745, 747, 752, 758, 760, 786, 791, 793, 794, 795, 796, 801, 802, 805, 807, 826, 827, 865, 867, 869], "cigar": [2, 16], "empti": [2, 29, 51, 79, 133, 136, 139, 143, 177, 178, 248, 256, 316, 322, 365, 371, 417, 425, 468, 470, 498, 518, 548, 573, 713, 744, 794, 805, 863], "depend": [2, 73, 76, 77, 78, 94, 103, 105, 106, 107, 136, 137, 145, 159, 160, 161, 189, 251, 420, 488, 539, 563, 589, 591, 593, 652, 706, 723, 724, 747, 748, 751, 795, 801, 828, 839, 863, 867, 869], "target_begin": 2, "query_begin": 2, "read_sequ": 2, "alia": [2, 91, 92, 139, 506, 553, 579, 768, 770], "ssw": [2, 16, 66], "reference_sequ": 2, "attribut": [2, 28, 56, 131, 135, 136, 138, 139, 142, 144, 145, 149, 192, 201, 202, 217, 221, 226, 278, 290, 295, 339, 344, 390, 395, 447, 452, 484, 495, 510, 535, 546, 556, 559, 570, 583, 608, 641, 652, 687, 696, 707, 714, 722, 723, 724, 737, 741, 744, 748, 751, 765, 793, 801, 806, 808, 809, 812, 819, 840, 865], "format": [2, 55, 59, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 162, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 192, 218, 220, 270, 273, 277, 278, 286, 335, 337, 338, 385, 388, 389, 439, 443, 446, 481, 483, 484, 505, 506, 511, 535, 552, 553, 557, 559, 571, 576, 578, 579, 584, 618, 651, 662, 698, 699, 740, 760, 779, 800, 802, 862, 867], "optimal_alignment_scor": 2, "charact": [2, 16, 33, 46, 47, 50, 54, 67, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 221, 226, 228, 231, 233, 235, 236, 237, 241, 242, 243, 246, 248, 249, 250, 251, 252, 253, 254, 257, 264, 269, 271, 278, 288, 290, 295, 297, 300, 302, 304, 305, 306, 309, 310, 311, 314, 316, 317, 318, 319, 320, 323, 329, 334, 336, 339, 344, 346, 349, 351, 353, 354, 355, 358, 359, 360, 363, 365, 366, 367, 368, 369, 372, 374, 379, 384, 386, 387, 390, 395, 397, 400, 402, 404, 405, 406, 410, 411, 412, 415, 417, 418, 419, 420, 421, 422, 423, 426, 433, 438, 440, 447, 452, 454, 457, 459, 461, 462, 463, 468, 476, 482, 484, 499, 502, 513, 865], "begin": [2, 16, 135, 136, 137, 138, 142, 145, 160, 192, 288, 715], "query_end": 2, "suboptimal_alignment_scor": 2, "suboptim": [2, 16], "target_end_optim": 2, "target_end_suboptim": 2, "built": [2, 16, 28, 149, 162, 192, 202, 221, 278, 290, 339, 390, 447, 484, 535, 559, 597, 608, 619, 630, 641, 652, 663, 674, 687, 722, 747, 786, 808, 828, 840, 851, 863], "ins": [2, 16, 28, 149, 162, 192, 202, 221, 278, 290, 339, 390, 447, 484, 535, 559, 597, 608, 619, 630, 641, 652, 663, 674, 687, 722, 808, 828, 840, 851], "self": [3, 4, 5, 7, 8, 9, 10, 11, 13, 18, 19, 21, 22, 23, 24, 25, 27, 34, 37, 39, 41, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 184, 185, 186, 187, 194, 196, 197, 198, 200, 202, 206, 208, 209, 210, 212, 216, 227, 228, 230, 232, 234, 272, 280, 282, 283, 284, 296, 297, 299, 301, 303, 345, 346, 348, 350, 352, 396, 397, 399, 401, 403, 441, 453, 454, 456, 458, 460, 486, 487, 490, 491, 492, 493, 495, 497, 509, 510, 537, 538, 541, 542, 543, 544, 546, 547, 555, 556, 561, 562, 565, 566, 567, 568, 570, 572, 582, 583, 598, 599, 601, 602, 603, 604, 605, 606, 609, 610, 612, 613, 614, 615, 616, 617, 620, 621, 623, 624, 625, 626, 627, 628, 631, 632, 634, 635, 636, 637, 638, 639, 642, 643, 645, 646, 647, 648, 649, 650, 653, 654, 656, 657, 658, 659, 660, 661, 664, 665, 667, 668, 669, 670, 671, 672, 675, 676, 678, 679, 680, 681, 682, 683, 688, 689, 691, 692, 693, 694, 695, 723, 724, 725, 726, 729, 730, 732, 734, 735, 736, 737, 738, 739, 741, 742, 745, 746, 747, 748, 751, 752, 753, 754, 771, 772, 773, 774, 780, 781, 782, 787, 788, 789, 792, 793, 794, 795, 796, 798, 799, 810, 811, 814, 815, 816, 817, 818, 821, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 867, 869], "kei": [5, 28, 45, 48, 49, 51, 56, 67, 135, 136, 138, 145, 213, 217, 221, 245, 256, 264, 271, 313, 322, 329, 336, 339, 362, 371, 379, 386, 390, 414, 425, 433, 440, 447, 470, 476, 482, 500, 549, 574, 773, 793, 801, 869], "helper": [6, 20, 36, 152, 165, 195, 207, 229, 281, 298, 347, 398, 455, 489, 540, 564, 600, 611, 622, 633, 644, 655, 666, 677, 690, 728, 805, 806, 813, 832, 844, 855, 867], "pickl": [6, 20, 36, 152, 165, 195, 207, 229, 281, 298, 347, 398, 455, 489, 540, 564, 600, 611, 622, 633, 644, 655, 666, 677, 690, 728, 813, 832, 844, 855], "hash": [8, 22, 154, 167, 602, 613, 624, 635, 646, 657, 668, 679, 692, 730, 815, 834, 846, 857], "str": [13, 17, 27, 33, 38, 43, 55, 59, 67, 103, 107, 108, 109, 110, 111, 132, 138, 139, 145, 149, 158, 171, 174, 175, 176, 180, 181, 182, 185, 186, 187, 189, 200, 212, 218, 220, 221, 223, 231, 236, 237, 240, 244, 245, 246, 247, 248, 259, 260, 262, 264, 265, 266, 267, 268, 270, 271, 277, 278, 286, 292, 300, 305, 306, 308, 312, 313, 314, 315, 316, 325, 327, 329, 330, 331, 332, 333, 335, 336, 338, 339, 341, 349, 354, 355, 357, 361, 362, 363, 364, 365, 375, 377, 379, 380, 381, 382, 383, 385, 386, 389, 390, 392, 400, 405, 406, 409, 413, 414, 415, 416, 417, 428, 429, 431, 433, 434, 435, 436, 437, 439, 440, 446, 447, 449, 457, 462, 463, 465, 466, 467, 468, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 488, 494, 495, 496, 498, 501, 503, 504, 505, 510, 511, 527, 532, 535, 536, 539, 545, 546, 548, 550, 551, 552, 556, 557, 560, 563, 569, 570, 573, 575, 577, 578, 583, 584, 587, 588, 590, 591, 592, 593, 606, 608, 617, 628, 630, 639, 641, 650, 652, 661, 672, 683, 687, 696, 697, 698, 699, 706, 713, 714, 722, 736, 740, 744, 755, 756, 768, 770, 779, 783, 785, 789, 791, 800, 801, 802, 807, 821, 826, 838, 850, 861], "inidic": [14, 16], "els": [14, 15, 141, 147, 160, 180, 185, 222, 273, 291, 337, 340, 388, 391, 443, 447, 448, 702, 744], "bool": [14, 16, 29, 30, 33, 42, 45, 48, 50, 51, 52, 53, 57, 60, 61, 62, 72, 73, 78, 94, 103, 105, 106, 107, 108, 111, 159, 160, 161, 180, 185, 192, 193, 199, 205, 211, 213, 215, 219, 221, 222, 223, 226, 228, 235, 238, 239, 241, 243, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 273, 279, 285, 291, 292, 295, 297, 304, 307, 309, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 344, 346, 353, 356, 358, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 395, 397, 404, 407, 408, 410, 412, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 434, 435, 436, 437, 438, 440, 443, 447, 448, 449, 452, 454, 461, 464, 467, 468, 469, 470, 471, 473, 474, 475, 477, 478, 479, 480, 482, 485, 486, 493, 495, 498, 514, 518, 523, 524, 527, 533, 535, 536, 537, 544, 546, 548, 560, 561, 568, 570, 573, 576, 589, 592, 595, 630, 641, 705, 706, 708, 709, 713, 714, 716, 740, 745, 746, 749, 763, 765, 766, 767, 769, 772, 775, 776, 777, 780, 792, 794, 795, 802, 806, 828], "whether": [14, 29, 30, 33, 42, 51, 52, 72, 73, 94, 139, 147, 159, 161, 189, 223, 226, 235, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 279, 285, 292, 295, 304, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 341, 344, 353, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 392, 395, 404, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 449, 452, 461, 469, 470, 471, 473, 474, 475, 493, 514, 518, 527, 544, 568, 587, 589, 590, 591, 696, 708, 709], "is_zero_bas": 15, "set": [15, 16, 46, 49, 53, 54, 78, 94, 105, 106, 111, 136, 138, 140, 143, 149, 189, 202, 215, 221, 239, 248, 261, 264, 290, 307, 316, 326, 329, 339, 356, 365, 376, 379, 390, 408, 417, 430, 433, 447, 464, 468, 473, 476, 496, 504, 510, 515, 526, 551, 556, 577, 583, 595, 685, 706, 708, 711, 713, 714, 715, 723, 724, 739, 741, 744, 748, 751, 752, 754, 774, 788, 789, 801, 808, 819, 820, 825, 865, 869], "alig": 15, "stripe": [16, 66], "band": 16, "must": [16, 28, 45, 48, 54, 55, 59, 78, 80, 94, 105, 106, 107, 108, 111, 132, 134, 136, 137, 140, 141, 142, 143, 145, 160, 217, 218, 220, 221, 239, 244, 264, 270, 275, 277, 307, 312, 329, 335, 338, 339, 356, 361, 379, 385, 389, 390, 408, 413, 433, 439, 444, 446, 447, 464, 466, 476, 481, 483, 498, 505, 511, 518, 532, 535, 548, 552, 557, 573, 578, 584, 587, 588, 589, 590, 591, 593, 595, 618, 651, 662, 685, 697, 698, 699, 700, 705, 714, 715, 716, 744, 779, 786, 794, 800, 801, 802, 805, 807, 827, 828, 851, 869], "instanti": [16, 135, 147, 290, 869], "callabl": [16, 28, 45, 48, 56, 103, 107, 108, 111, 500, 549, 574], "reus": [16, 710], "larg": [16, 79, 83, 105, 106, 131, 136, 143, 526, 588, 708, 714, 740, 747], "collect": [16, 95, 101, 189, 495, 531, 546, 570, 685], "upper": [16, 83, 84, 136, 143, 192, 202, 214, 216, 574, 581, 589], "lowercas": [16, 135, 136, 137, 138, 144, 221, 239, 290, 307, 339, 356, 390, 408, 447, 464], "q": [16, 83, 133, 339, 701, 702], "h": [16, 69, 70, 74, 82, 94, 95, 96, 97, 98, 136, 143, 145, 190, 221, 339, 390, 743, 744, 749, 752, 783, 784, 785, 788, 789, 798, 799, 801, 867], "l": [16, 70, 71, 78, 83, 84, 94, 102, 135, 137, 146, 288, 339, 531, 589, 686, 700, 701, 708, 794], "k": [16, 69, 74, 94, 95, 97, 98, 99, 108, 221, 248, 262, 263, 316, 327, 328, 339, 365, 377, 378, 390, 417, 431, 432, 468, 474, 475, 484, 496, 514, 531, 588, 595, 752, 786, 793, 801], "m": [16, 63, 69, 78, 94, 105, 106, 132, 133, 135, 137, 143, 146, 221, 278, 279, 288, 339, 390, 496, 588, 595, 697, 700, 701, 707, 708, 710, 713, 785, 802], "w": [16, 47, 69, 70, 77, 90, 94, 102, 132, 133, 134, 189, 221, 339, 390, 518, 531], "y": [16, 69, 80, 137, 144, 221, 339, 390, 525, 528, 529, 533, 589, 592, 595, 686, 697, 701, 702, 707, 708, 713, 747, 793], "v": [16, 105, 106, 221, 226, 235, 295, 304, 339, 344, 353, 390, 395, 404, 452, 461, 515, 527, 531, 533, 713, 714, 793], "z": [16, 54, 77, 339, 592, 697, 747, 793], "x": [16, 80, 96, 137, 144, 290, 339, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 589, 592, 595, 686, 687, 697, 700, 701, 702, 708, 711, 714, 715, 747, 757, 778, 781, 793, 797, 802, 827, 869], "gap_open_penalti": [16, 60, 61, 62, 63, 64, 65], "int": [16, 40, 50, 57, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 111, 132, 138, 139, 144, 160, 189, 192, 202, 213, 217, 228, 233, 240, 246, 247, 251, 259, 261, 262, 263, 265, 267, 271, 287, 297, 302, 308, 314, 315, 325, 326, 327, 328, 330, 332, 336, 346, 351, 357, 363, 364, 375, 376, 377, 378, 380, 382, 386, 397, 402, 409, 415, 416, 420, 428, 430, 431, 432, 434, 436, 440, 444, 445, 454, 459, 465, 467, 472, 473, 474, 475, 477, 479, 482, 502, 503, 514, 516, 517, 527, 531, 533, 550, 575, 587, 589, 590, 591, 592, 593, 595, 630, 674, 685, 697, 701, 705, 706, 708, 709, 712, 714, 715, 716, 722, 743, 747, 749, 758, 764, 773, 774, 786, 801, 807, 827, 840], "option": [16, 28, 45, 47, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 69, 72, 73, 78, 83, 84, 85, 90, 94, 97, 103, 105, 106, 107, 108, 111, 134, 136, 137, 142, 143, 145, 146, 149, 159, 160, 161, 180, 181, 182, 185, 186, 187, 189, 192, 202, 213, 217, 218, 219, 220, 221, 226, 238, 239, 240, 244, 246, 247, 248, 251, 259, 261, 262, 263, 265, 267, 270, 277, 278, 287, 288, 289, 295, 307, 308, 312, 314, 315, 316, 325, 326, 327, 328, 330, 332, 335, 338, 339, 344, 356, 357, 361, 363, 364, 365, 375, 376, 377, 378, 380, 382, 385, 389, 390, 395, 407, 408, 409, 413, 415, 416, 417, 420, 428, 430, 431, 432, 434, 436, 439, 444, 445, 446, 447, 452, 464, 465, 466, 467, 468, 472, 473, 474, 475, 477, 479, 481, 483, 495, 498, 500, 504, 505, 511, 514, 518, 523, 524, 526, 535, 546, 548, 549, 551, 552, 557, 570, 573, 574, 576, 577, 578, 584, 587, 588, 589, 590, 591, 592, 593, 595, 630, 685, 697, 698, 699, 701, 702, 705, 706, 708, 709, 712, 713, 714, 715, 716, 722, 743, 760, 765, 779, 786, 793, 794, 800, 801, 802, 806, 827, 828, 851, 865, 869], "cannot": [16, 28, 45, 48, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 136, 137, 140, 141, 180, 181, 185, 186, 189, 239, 290, 307, 356, 408, 464, 518, 587, 588, 589, 590, 591, 685, 697, 713, 715, 716, 755, 758, 786, 863], "gap_extend_penalti": [16, 60, 61, 62, 63, 64, 65], "score_s": 16, "your": [16, 54, 78, 103, 105, 106, 107, 137, 147, 202, 591, 711, 714, 863, 867, 869], "estim": [16, 69, 72, 73, 77, 79, 81, 83, 84, 85, 90, 96, 705, 713, 714, 715], "best": [16, 60, 61, 62, 63, 64, 65, 84, 85, 515, 588, 700, 804], "255": [16, 701], "mask_length": 16, "suggest": [16, 160, 180, 181, 185, 186, 714], "len": [16, 28, 40, 233, 302, 351, 402, 459, 496, 593, 715, 723, 724, 748, 751, 789, 801, 869], "special": [16, 140, 147], "concern": [16, 140], "detail": [16, 53, 54, 66, 94, 108, 110, 111, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 289, 447, 488, 539, 563, 588, 592, 697, 700, 701, 708, 863], "descript": [16, 69, 78, 83, 88, 89, 99, 103, 105, 106, 107, 131, 132, 136, 137, 138, 139, 141, 143, 146, 488, 539, 563, 745, 801, 865, 867], "after": [16, 45, 48, 60, 61, 62, 136, 137, 145, 146, 147, 205, 216, 527, 588, 589, 592, 595, 700, 715, 776, 778, 795], "locat": [16, 55, 59, 135, 141, 145, 174, 175, 176, 192, 218, 220, 246, 247, 270, 277, 314, 315, 335, 338, 363, 364, 385, 389, 415, 416, 439, 446, 467, 481, 483, 505, 511, 552, 557, 578, 584, 698, 699, 779, 783, 800, 805, 868], "heurist": [16, 591, 706], "found": [16, 101, 133, 135, 136, 137, 138, 141, 143, 145, 180, 182, 185, 187, 498, 531, 548, 573, 588, 589, 591, 715, 745, 755, 756, 757, 758, 768, 770, 786, 801], "check": [16, 137, 160, 180, 185, 193, 202, 205, 216, 485, 486, 523, 524, 534, 535, 536, 537, 559, 560, 561, 596, 700, 701, 714, 805, 826, 869], "largest": [16, 102], "maxim": [16, 94, 588, 701], "sw": [16, 713], "avoid": [16, 145, 147, 216, 686, 709, 798, 799], "pick": [16, 714], "belong": [16, 70, 74, 139, 518, 587, 590, 591], "share": [16, 51, 52, 54, 69, 239, 256, 258, 307, 322, 324, 356, 371, 373, 408, 425, 427, 447, 464, 470, 471, 867], "partial": [16, 94, 216], "librari": [16, 66, 105, 106, 136, 862, 863], "mask": [16, 527, 533], "loci": 16, "nearbi": 16, "unmask": 16, "element": [16, 140, 189, 484, 488, 500, 520, 523, 524, 535, 539, 549, 559, 563, 574, 674, 697, 700, 704, 705, 709, 712, 714, 715, 716, 825], "15": [16, 62, 65, 83, 133, 142, 596, 711, 714, 715, 791], "mask_auto": 16, "automat": [16, 45, 48, 54, 55, 59, 140, 144, 173, 184, 192, 218, 220, 264, 270, 277, 329, 335, 338, 379, 385, 389, 433, 439, 446, 476, 481, 483, 505, 511, 534, 552, 557, 578, 584, 687, 698, 699, 747, 779, 800, 863], "max": [16, 69, 70, 90, 714, 715, 762], "score_onli": 16, "prevent": 16, "babp": 16, "overrid": [16, 61, 64, 94, 149, 159, 160, 161, 180, 185, 778, 869], "score_filt": 16, "distance_filt": 16, "override_skip_babp": 16, "highest": [16, 141], "preced": [16, 134, 141, 143], "less": [16, 69, 78, 85, 105, 106, 108, 143, 262, 263, 327, 328, 377, 378, 431, 432, 474, 475, 514, 589, 592, 685, 700, 716, 773, 807], "save": [16, 202, 535, 618, 651, 662, 775], "computation": 16, "filter": [16, 47, 66, 144, 242, 310, 359, 411, 592, 794, 869], "overridden": [16, 28, 138, 802], "regardless": [16, 46, 53, 54, 145, 288, 502, 593], "argument": [16, 28, 55, 56, 59, 66, 140, 159, 160, 161, 173, 180, 181, 182, 184, 185, 186, 187, 218, 220, 264, 270, 275, 276, 277, 329, 335, 338, 379, 385, 389, 433, 439, 444, 445, 446, 476, 481, 483, 484, 500, 505, 511, 516, 518, 549, 552, 557, 574, 578, 584, 593, 698, 699, 779, 800, 828, 851], "caus": [16, 189, 288], "calcul": [16, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 108, 111, 131, 250, 251, 419, 420, 518, 525, 532, 533, 587, 588, 589, 590, 591, 595, 619, 630, 674, 705, 709, 712, 714, 715, 745, 752, 791, 862, 865], "none": [16, 28, 45, 47, 48, 55, 56, 57, 61, 62, 64, 65, 66, 90, 94, 103, 107, 108, 132, 136, 140, 147, 149, 159, 161, 174, 175, 176, 180, 185, 189, 192, 202, 213, 215, 217, 218, 221, 240, 244, 246, 247, 248, 259, 270, 273, 290, 308, 312, 314, 315, 316, 325, 335, 337, 339, 357, 361, 363, 364, 365, 375, 385, 388, 390, 409, 413, 415, 416, 417, 428, 439, 443, 447, 465, 466, 467, 468, 472, 481, 500, 504, 505, 518, 523, 524, 526, 527, 535, 549, 551, 552, 559, 574, 577, 578, 587, 588, 589, 590, 591, 592, 593, 597, 619, 630, 663, 685, 687, 697, 698, 702, 705, 706, 709, 710, 712, 713, 714, 715, 722, 742, 743, 747, 750, 752, 760, 769, 771, 774, 775, 776, 777, 779, 786, 790, 791, 793, 794, 795, 798, 799, 801, 802, 828, 829, 851, 865, 867, 869], "effect": [16, 66, 76, 105, 106, 189, 495, 546, 570, 711, 713, 714, 715], "unless": [16, 28, 53, 72, 144, 829], "substitution_matrix": [16, 60, 61, 62, 63, 64, 65], "suppli": [16, 132, 136, 144, 180, 185, 244, 312, 361, 413, 466, 512, 715, 752], "match_scor": [16, 61, 64, 67], "ad": [16, 60, 61, 62, 63, 64, 65, 136, 145, 213, 447, 518, 701, 704, 828, 867], "occur": [16, 133, 136, 137, 140, 141, 181, 186, 189, 259, 325, 375, 428, 447, 472, 715, 746, 755], "ignor": [16, 47, 69, 78, 105, 106, 133, 134, 135, 136, 137, 140, 141, 147, 246, 247, 288, 289, 314, 315, 363, 364, 415, 416, 467, 498, 548, 573, 587, 588, 589, 590, 591, 706, 713, 714, 752, 771, 806, 828, 829, 865, 867, 869], "mismatch_scor": [16, 61, 64, 67], "subtract": [16, 674], "2d": [16, 60, 61, 62, 63, 64, 65, 103, 107, 108, 111, 484, 499, 508, 516, 517, 518, 525, 593, 702, 709], "dict": [16, 28, 49, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 135, 138, 160, 180, 181, 182, 185, 186, 187, 192, 213, 217, 218, 220, 221, 248, 263, 270, 275, 276, 277, 290, 316, 328, 335, 338, 339, 365, 378, 385, 389, 390, 417, 432, 439, 444, 445, 446, 447, 468, 475, 481, 483, 484, 499, 505, 508, 511, 552, 557, 578, 584, 589, 592, 652, 698, 699, 760, 764, 773, 779, 793, 800, 828, 865, 869], "substitut": [16, 60, 61, 62, 63, 64, 65, 67, 140, 339, 484, 496, 499, 501, 502, 508, 515, 804], "entir": [16, 28, 74, 221, 290, 339, 390, 447], "combin": [16, 28, 45, 48, 138, 588, 687, 701], "enumer": 16, "requir": [16, 84, 85, 131, 133, 134, 136, 139, 143, 145, 146, 217, 275, 288, 289, 444, 532, 534, 559, 589, 595, 685, 705, 713, 744, 750, 784, 804, 828, 863, 865, 869], "suppress_sequ": [16, 66], "zero_index": [16, 66], "wrapper": [16, 66, 84, 85, 805], "otherwis": [16, 29, 45, 48, 57, 72, 73, 136, 138, 141, 144, 189, 485, 486, 488, 493, 498, 536, 537, 539, 544, 548, 560, 561, 563, 568, 573, 576, 592, 780, 865], "inform": [16, 47, 55, 59, 71, 86, 94, 132, 133, 134, 135, 136, 137, 138, 144, 146, 192, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 608, 652, 686, 698, 699, 708, 714, 715, 779, 800, 828, 865, 869], "NOT": [16, 88, 189], "meaning": [16, 45, 48, 54, 706, 865], "zhao": [16, 66], "mengyao": [16, 66], "wan": [16, 66], "ping": [16, 66], "lee": [16, 66, 69], "erik": [16, 66], "garrison": [16, 66], "gabor": [16, 66], "marth": [16, 66], "simd": [16, 66], "applic": [16, 47, 60, 66, 747, 869], "plo": [16, 66, 84, 85, 527, 533], "ONE": [16, 66], "2013": [16, 66, 76, 94, 531, 697], "web": [16, 60, 63, 66, 134, 146, 587, 588, 589, 590, 591], "juli": [16, 66], "2014": [16, 66, 132, 143, 531], "http": [16, 47, 60, 61, 62, 63, 64, 65, 66, 69, 73, 83, 99, 108, 131, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 145, 146, 278, 286, 287, 506, 527, 531, 533, 535, 553, 559, 571, 579, 587, 588, 589, 590, 591, 697, 801, 802, 827], "www": [16, 60, 63, 66, 83, 99, 108, 131, 132, 133, 134, 135, 136, 137, 138, 143, 146, 278, 286, 287, 588], "ploson": [16, 66], "org": [16, 66, 108, 131, 136, 137, 138, 143, 145, 506, 527, 531, 533, 535, 553, 559, 571, 579, 587, 588, 589, 590, 591, 697, 802], "articl": [16, 66, 134], "info": [16, 66, 202, 221, 290, 339, 390, 447, 596, 652], "doi": [16, 66, 135, 137, 527, 531, 533], "10": [16, 47, 66, 69, 84, 85, 91, 92, 94, 101, 133, 135, 136, 137, 138, 139, 141, 142, 143, 192, 202, 217, 221, 246, 290, 314, 339, 363, 390, 415, 447, 484, 496, 499, 501, 502, 508, 518, 527, 531, 533, 591, 686, 711, 714, 715, 802, 869], "1371": [16, 66, 527, 533], "journal": [16, 66, 69, 72, 79, 94, 95, 97, 138, 518, 527, 533, 587], "pone": [16, 66], "0082138": [16, 66], "alignmentstructur": 17, "positional_metadata": [28, 33, 46, 52, 53, 54, 136, 145, 221, 226, 238, 239, 242, 258, 264, 271, 272, 290, 295, 307, 310, 324, 329, 336, 339, 344, 356, 359, 373, 379, 386, 390, 395, 407, 408, 411, 427, 433, 440, 441, 447, 452, 464, 471, 476, 482, 865], "sourc": [28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 138, 139, 148, 149, 159, 160, 161, 162, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 199, 201, 202, 203, 204, 205, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 539, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 597, 607, 608, 618, 619, 629, 630, 640, 641, 651, 652, 662, 663, 673, 674, 684, 685, 687, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 731, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 819, 825, 826, 827, 828, 829, 839, 840, 841, 851, 852, 862], "store": [28, 38, 43, 51, 52, 53, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 192, 202, 221, 256, 258, 290, 322, 324, 339, 371, 373, 390, 425, 427, 447, 470, 471, 506, 534, 535, 553, 559, 579, 592, 608, 641, 652, 687, 700, 701, 706, 708, 722, 864, 865], "tabular": [28, 132, 133, 146], "iter": [28, 38, 43, 48, 53, 60, 61, 62, 63, 64, 65, 66, 67, 103, 107, 108, 111, 144, 192, 213, 214, 215, 217, 228, 231, 236, 239, 247, 261, 271, 297, 300, 305, 307, 315, 326, 336, 346, 349, 354, 356, 364, 376, 386, 397, 400, 405, 408, 416, 430, 440, 454, 457, 462, 464, 467, 473, 482, 484, 495, 498, 500, 502, 510, 518, 546, 548, 549, 556, 570, 573, 574, 583, 588, 591, 592, 685, 697, 714, 715, 723, 724, 731, 748, 751, 752, 761, 769, 772, 775, 776, 777, 785, 786, 792, 795, 825, 827, 829, 851, 867, 869], "grammaredsequ": [28, 38, 43, 45, 48, 49, 60, 63, 134, 136, 143, 145, 221, 242, 245, 339, 359, 362, 390, 411, 414], "exampl": [28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 78, 105, 106, 107, 140, 147, 159, 160, 161, 190, 192, 202, 214, 219, 221, 222, 223, 226, 228, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 278, 279, 287, 288, 289, 290, 291, 292, 295, 297, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 344, 346, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 395, 397, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 452, 454, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 495, 496, 499, 502, 504, 507, 510, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 546, 551, 554, 556, 570, 577, 580, 581, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 685, 697, 706, 713, 714, 715, 716, 723, 724, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 807, 827, 862, 863], "its": [28, 45, 46, 48, 49, 51, 52, 53, 54, 60, 61, 62, 135, 136, 137, 138, 141, 142, 145, 147, 161, 183, 189, 192, 202, 248, 255, 256, 258, 263, 316, 321, 322, 324, 328, 365, 370, 371, 373, 378, 417, 424, 425, 427, 432, 447, 468, 469, 470, 471, 475, 488, 496, 519, 539, 563, 588, 696, 700, 702, 705, 710, 722, 744, 774, 775, 784, 789, 794, 795, 801, 826, 863, 867], "arbitrari": [28, 46, 49, 140, 145, 221, 339, 390, 447, 685, 828, 865], "shallow": [28, 31, 202, 203, 224, 293, 342, 393, 447, 450], "copi": [28, 31, 32, 136, 143, 145, 202, 203, 204, 224, 225, 271, 293, 294, 336, 342, 343, 386, 393, 394, 440, 447, 450, 451, 482, 506, 509, 535, 553, 555, 579, 582, 709, 716, 723, 724, 751, 783, 784, 790, 798, 799, 822, 823, 824], "made": [28, 90, 447, 518, 535, 559, 685, 738, 755, 756, 778, 804], "consum": [28, 48, 161, 221, 278, 339, 390, 447], "abl": [28, 48, 108, 221, 339, 390, 447, 518, 714, 752], "directli": [28, 45, 48, 221, 278, 339, 390, 447, 512, 595, 828, 869], "constructor": [28, 45, 48, 56, 134, 136, 137, 138, 143, 144, 145, 160, 173, 184, 221, 264, 278, 329, 339, 379, 390, 433, 447, 476, 484, 593], "label": [28, 30, 33, 35, 45, 48, 49, 54, 56, 57, 58, 134, 136, 138, 143, 145, 504, 531, 534, 551, 577, 587, 588, 590, 591, 592, 687, 697, 742, 806], "content": [28, 46, 135, 136, 137, 138, 139, 141, 147, 159, 160, 161, 221, 238, 239, 242, 245, 272, 274, 307, 310, 313, 356, 359, 362, 390, 407, 408, 411, 414, 441, 442, 464, 865], "hashabl": [28, 30, 685, 851], "rais": [28, 45, 47, 48, 50, 54, 56, 58, 69, 78, 79, 80, 94, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 143, 147, 148, 159, 160, 161, 180, 181, 182, 183, 185, 186, 187, 216, 223, 239, 240, 244, 246, 248, 259, 260, 262, 263, 265, 266, 267, 268, 288, 290, 292, 307, 308, 312, 314, 316, 325, 327, 328, 330, 331, 332, 333, 341, 356, 357, 361, 363, 365, 375, 377, 378, 380, 381, 382, 383, 392, 408, 409, 413, 415, 417, 428, 429, 431, 432, 434, 435, 436, 437, 449, 464, 465, 466, 468, 472, 474, 475, 477, 478, 479, 480, 488, 495, 496, 498, 499, 500, 503, 510, 513, 514, 520, 526, 532, 539, 546, 548, 549, 550, 556, 563, 570, 573, 574, 575, 583, 587, 588, 589, 591, 592, 630, 674, 685, 697, 700, 701, 706, 714, 715, 716, 737, 744, 745, 747, 750, 752, 753, 755, 756, 758, 760, 762, 768, 770, 773, 783, 784, 785, 786, 791, 796, 805, 806, 807, 808], "valueerror": [28, 45, 47, 48, 50, 54, 56, 58, 69, 78, 80, 94, 103, 105, 106, 107, 111, 180, 185, 239, 240, 246, 248, 259, 262, 263, 265, 266, 267, 268, 288, 290, 307, 308, 314, 316, 325, 327, 328, 330, 331, 332, 333, 356, 357, 363, 365, 375, 377, 378, 380, 381, 382, 383, 408, 409, 415, 417, 428, 431, 432, 434, 435, 436, 437, 447, 464, 465, 468, 472, 474, 475, 477, 478, 479, 480, 496, 499, 500, 513, 514, 520, 526, 532, 549, 574, 588, 589, 591, 592, 630, 674, 685, 697, 700, 701, 714, 715, 716, 745, 747, 752, 760, 768, 770, 773, 785, 786, 791, 796, 807], "both": [28, 46, 54, 56, 67, 72, 73, 74, 78, 94, 131, 132, 133, 136, 137, 143, 146, 180, 185, 217, 288, 500, 521, 522, 523, 524, 534, 549, 574, 576, 581, 588, 589, 590, 591, 706, 746, 747, 786, 795, 863, 865], "typeerror": [28, 45, 48, 54, 103, 180, 181, 185, 186, 223, 239, 240, 244, 248, 259, 260, 265, 266, 267, 268, 292, 307, 308, 312, 316, 325, 330, 331, 332, 333, 341, 356, 357, 361, 365, 375, 380, 381, 382, 383, 392, 408, 409, 413, 417, 428, 429, 434, 435, 436, 437, 449, 464, 465, 466, 468, 472, 477, 478, 479, 480, 513, 514, 588, 589, 591, 714, 715, 716, 744], "isn": [28, 45, 48, 54, 80, 145, 159, 161, 190, 192, 523, 524, 716], "doe": [28, 45, 46, 48, 54, 57, 66, 78, 94, 132, 134, 136, 137, 139, 141, 143, 145, 189, 239, 278, 279, 285, 288, 307, 356, 408, 464, 496, 506, 513, 534, 553, 576, 579, 587, 589, 591, 630, 706, 714, 715, 738, 747, 758, 771, 784, 791, 794, 801, 805, 863], "exactli": [28, 45, 48, 53, 63, 64, 65, 136, 137, 143, 147, 226, 235, 279, 295, 304, 344, 353, 395, 404, 452, 461, 532, 697, 740], "reassign_index": [28, 45, 48, 57, 58, 143], "neither": [28, 56, 190, 786, 795], "nor": [28, 45, 48, 56, 140, 143, 535, 786], "rangeindex": [28, 45, 48, 56, 143], "stop": [28, 45, 48, 56, 69, 143, 240, 259, 275, 276, 278, 288, 289, 308, 325, 339, 357, 374, 375, 409, 428, 444, 445, 465, 472, 742, 829, 865], "four": [28, 137, 145, 221, 339, 390, 518, 697], "acgt": [28, 45, 48, 49, 51, 52, 58, 222, 226, 235, 239, 250, 251, 256, 258, 260, 264, 291, 295, 304, 307, 322, 324, 329, 340, 344, 353, 356, 371, 373, 379, 391, 395, 404, 408, 419, 420, 425, 427, 429, 433, 447, 448, 452, 461, 464, 470, 471, 476, 484, 502], "ag": [28, 45, 48, 50, 534, 713, 714], "wasn": [28, 137], "non": [28, 72, 80, 132, 134, 135, 139, 192, 221, 257, 269, 290, 323, 334, 339, 372, 384, 390, 426, 438, 484, 516, 517, 518, 526, 559, 587, 590, 591, 595, 700, 706, 711, 746, 747, 752], "seq3": [28, 48, 136, 143], "prob": [28, 33, 46, 53], "iloc": [28, 35], "slice": [28, 35, 228, 246, 247, 261, 271, 297, 314, 315, 326, 336, 346, 363, 364, 376, 386, 397, 415, 416, 430, 440, 454, 467, 473, 482, 488, 534, 539, 563, 727, 865], "axi": [28, 35, 50, 80, 96, 140, 221, 290, 339, 390, 447, 484, 630, 674, 687, 697, 705, 712, 715, 806], "along": [28, 140, 221, 290, 339, 390, 447, 697, 705, 706], "loc": [28, 35, 447, 518, 714], "shape": [28, 40, 49, 131, 142, 484, 486, 535, 537, 559, 561, 589, 702, 705, 716], "boolean": [29, 106, 136, 139, 144, 192, 221, 228, 241, 243, 246, 249, 261, 264, 266, 268, 269, 271, 297, 309, 311, 314, 317, 326, 329, 331, 333, 334, 336, 339, 346, 358, 360, 363, 366, 376, 379, 381, 383, 384, 386, 387, 390, 397, 410, 412, 415, 418, 430, 433, 435, 437, 438, 440, 447, 454, 473, 476, 478, 480, 482, 574], "state": [29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 58, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 132, 133, 134, 135, 138, 139, 143, 145, 146, 159, 160, 161, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 191, 193, 199, 201, 203, 204, 205, 211, 213, 214, 215, 216, 217, 219, 222, 223, 224, 225, 226, 228, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 279, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 340, 341, 342, 343, 344, 346, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 391, 392, 393, 394, 395, 397, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 454, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 485, 486, 488, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 560, 561, 563, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 595, 607, 618, 629, 640, 651, 662, 673, 684, 685, 696, 697, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 723, 724, 727, 731, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 805, 806, 807, 825, 826, 827, 828, 829, 839, 841, 851, 852, 869], "experiment": [29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 56, 58, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 132, 133, 135, 138, 139, 145, 146, 193, 199, 201, 203, 204, 205, 211, 213, 214, 215, 216, 217, 219, 239, 244, 248, 255, 271, 307, 312, 316, 321, 336, 356, 361, 365, 370, 386, 408, 413, 417, 424, 440, 464, 466, 468, 469, 482, 484, 485, 486, 488, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 560, 561, 563, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 595, 607, 618, 629, 640, 651, 662, 673, 684, 685, 696, 697, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 723, 724, 727, 731, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 805, 806, 807, 825, 826, 827, 829, 839, 841, 852], "OR": 29, "acg": [29, 30, 31, 32, 33, 38, 40, 43, 50, 53, 54, 56, 57, 144, 145, 259, 262, 325, 327, 375, 377, 428, 431, 472, 474], "ac": [29, 30, 31, 32, 33, 38, 40, 43, 46, 48, 50, 54, 56, 57, 60, 63, 135, 137, 138, 145, 192, 249, 317, 366, 418, 865], "No": [29, 73, 132, 133, 135, 144, 146, 202, 237, 306, 355, 406, 463, 589], "search": [30, 60, 132, 133, 136, 217, 246, 259, 314, 325, 363, 375, 415, 428, 472, 485, 536, 560, 701, 750, 755, 756, 757, 758, 825, 865], "l1": 30, "l2": 30, "l3": 30, "__deepcopy__": [31, 203], "msa_copi": [31, 32], "memo": [32, 204, 225, 294, 343, 394, 451], "deep": [32, 70, 204, 224, 225, 293, 294, 342, 343, 393, 394, 447, 450, 451, 497, 509, 547, 555, 572, 582], "__copy__": [32, 204], "deepcopi": [32, 723, 724, 748, 798, 799], "against": [33, 42, 60, 63, 137, 193, 199, 205, 211, 226, 235, 279, 285, 295, 304, 344, 353, 395, 404, 452, 461, 518, 595, 745], "pleas": [35, 55, 59, 136, 144, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 698, 699, 779, 800], "restrict": [35, 78, 105, 106, 143, 865], "over": [38, 43, 53, 108, 136, 137, 144, 145, 231, 236, 300, 305, 349, 354, 400, 405, 457, 462, 484, 593, 607, 629, 640, 673, 684, 711, 712, 731, 769, 772, 775, 776, 777, 789, 792, 795, 867], "yield": [38, 43, 53, 136, 217, 231, 236, 245, 246, 247, 261, 262, 276, 289, 300, 305, 313, 314, 315, 326, 327, 349, 354, 362, 363, 364, 376, 377, 400, 405, 414, 415, 416, 430, 431, 445, 457, 462, 467, 473, 474, 591, 757, 769, 772, 775, 776, 777, 786, 792, 794, 795, 829, 863, 869], "size": [40, 76, 484, 535, 559, 587, 588, 589, 591, 674, 685, 697, 705, 711, 713, 714, 715, 827], "1st": [40, 663, 807], "dimens": [40, 142, 143, 484, 494, 516, 520, 523, 524, 535, 545, 559, 569, 591, 687, 696, 697, 706, 707], "equival": [40, 76, 78, 94, 137, 224, 225, 248, 250, 271, 272, 276, 289, 293, 294, 316, 336, 342, 343, 365, 386, 393, 394, 417, 419, 440, 441, 445, 450, 451, 468, 482, 495, 510, 513, 515, 518, 546, 556, 570, 583, 589, 865], "inequ": [42, 199, 211, 235, 285, 304, 353, 404, 461, 559, 706], "__eq__": [42, 211, 493, 544, 568], "revers": [43, 53, 57, 147, 236, 238, 260, 272, 276, 288, 289, 305, 354, 405, 407, 429, 441, 442, 445, 462, 587, 591, 786, 865, 869], "summari": [44, 494, 518, 545, 569], "reset_index": [45, 48], "without": [45, 48, 54, 56, 90, 106, 133, 141, 143, 145, 447, 515, 685, 697, 715, 716, 753, 762, 794, 827, 828, 863], "recomput": [45, 48, 54], "treat": [45, 46, 47, 48, 136, 140, 221, 264, 329, 339, 379, 390, 433, 447, 476, 513, 714], "reset": [45, 48, 56], "choic": [45, 48, 140, 706], "necessarili": [45, 48, 54, 142, 248, 316, 365, 417, 447, 468, 716], "own": [45, 48, 54, 131, 136, 142, 145, 147, 711], "via": [45, 48, 56, 69, 84, 85, 136, 143, 244, 278, 279, 285, 312, 361, 413, 466, 587, 589, 590], "acga": [45, 48, 226, 235, 295, 304, 344, 353, 395, 404, 452, 461], "major": [46, 515, 581, 801], "most": [46, 70, 79, 94, 131, 134, 136, 137, 140, 141, 143, 146, 288, 447, 589, 685, 708, 711, 762, 764, 801, 867], "common": [46, 51, 52, 63, 78, 94, 132, 136, 137, 138, 145, 146, 256, 258, 322, 324, 371, 373, 425, 427, 470, 471, 516, 517, 535, 630, 722, 747, 755, 768, 770, 793, 794, 802, 865, 867, 868], "ti": [46, 70, 801], "broken": [46, 801], "manner": [46, 136, 143, 228, 242, 297, 310, 346, 359, 397, 411, 454, 589, 706], "present": [46, 47, 78, 105, 106, 132, 136, 142, 145, 203, 204, 221, 238, 241, 242, 243, 248, 249, 259, 269, 272, 288, 309, 310, 311, 316, 317, 325, 334, 339, 358, 359, 360, 365, 366, 375, 384, 387, 390, 407, 410, 411, 412, 417, 418, 428, 438, 441, 468, 472, 498, 518, 548, 573, 587, 588, 590, 591, 630, 696, 706, 715, 716, 746, 801, 802, 804, 867], "default_gap_char": [46, 47, 54, 221, 290, 339, 390], "distinct": [46, 91, 92, 101, 513, 534], "contribut": [46, 94, 595, 700, 705], "AT": [46, 136, 137, 143], "tt": [46, 261, 326, 376, 430, 473], "cg": [46, 271, 336, 386, 440, 447, 482], "degener": [46, 47, 135, 136, 137, 138, 139, 221, 238, 239, 241, 242, 245, 250, 251, 252, 253, 257, 269, 272, 273, 274, 275, 276, 278, 288, 289, 290, 307, 309, 310, 313, 318, 319, 323, 334, 337, 339, 356, 358, 359, 362, 367, 368, 372, 384, 388, 390, 407, 408, 410, 411, 414, 419, 420, 421, 422, 426, 438, 441, 442, 443, 444, 445, 464, 496, 865], "definit": [46, 74, 135, 136, 137, 138, 139, 146, 221, 238, 239, 242, 243, 245, 252, 253, 257, 269, 272, 273, 274, 275, 276, 278, 288, 289, 290, 307, 310, 311, 313, 318, 319, 323, 334, 337, 339, 356, 359, 360, 362, 367, 368, 372, 384, 388, 390, 407, 408, 411, 412, 414, 421, 422, 426, 438, 441, 442, 443, 444, 445, 464, 496, 802, 865, 868, 869], "gc": [46, 135, 136, 137, 138, 139, 146, 221, 238, 239, 242, 245, 251, 272, 274, 279, 289, 307, 310, 313, 356, 359, 362, 390, 407, 408, 411, 414, 420, 441, 442, 464, 865], "33": [46, 78, 105, 106, 137, 245, 313, 362, 414, 588, 591, 711, 714, 865], "last": [46, 135, 143, 261, 288, 326, 376, 430, 447, 473, 589, 686, 869], "metric": [47, 69, 74, 78, 79, 94, 103, 104, 105, 106, 107, 108, 109, 110, 111, 137, 244, 312, 361, 413, 466, 500, 514, 549, 559, 574, 722, 862, 865], "inverse_shannon_uncertainti": 47, "degenerate_mod": 47, "gap_mod": 47, "nan": [47, 50, 54, 85, 132, 239, 248, 307, 316, 356, 365, 408, 417, 464, 468, 513, 514, 587, 588, 589, 590, 591, 592, 595, 697, 713, 714, 793, 805], "larger": [47, 714], "mode": [47, 147, 189, 288, 715, 828], "handl": [47, 54, 136, 137, 144, 145, 146, 147, 149, 159, 161, 189, 288, 289, 518, 589, 591, 592, 711, 795, 802, 827, 869], "assign": [47, 56, 67, 103, 107, 143, 193, 271, 336, 386, 440, 447, 482, 502, 518, 587, 590, 591, 685, 715, 741, 742, 743], "np": [47, 50, 78, 85, 94, 105, 106, 132, 221, 223, 240, 241, 243, 244, 248, 249, 259, 260, 265, 266, 267, 268, 269, 292, 308, 309, 311, 312, 316, 317, 325, 330, 331, 332, 333, 334, 339, 341, 357, 358, 360, 361, 365, 366, 375, 380, 381, 382, 383, 384, 387, 390, 392, 409, 410, 412, 413, 417, 418, 428, 429, 434, 435, 436, 437, 438, 447, 449, 465, 466, 468, 472, 477, 478, 479, 480, 484, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 587, 589, 590, 591, 592, 595, 596, 685, 686, 697, 710, 711, 713, 714, 715, 716, 764, 786, 801, 805], "remov": [47, 66, 67, 92, 111, 136, 140, 143, 215, 242, 257, 269, 310, 323, 334, 359, 372, 384, 411, 426, 438, 739, 754, 774, 778, 781, 785, 796, 865], "up": [47, 67, 134, 143, 145, 189, 202, 214, 444, 445, 488, 520, 526, 528, 529, 530, 539, 563, 589, 685, 715, 739, 744, 747, 778, 784, 851, 867], "float": [47, 50, 60, 61, 62, 63, 64, 65, 66, 67, 78, 83, 84, 94, 103, 105, 106, 107, 108, 111, 131, 132, 138, 140, 141, 244, 250, 251, 265, 267, 312, 330, 332, 361, 380, 382, 413, 419, 420, 434, 436, 466, 477, 479, 500, 502, 513, 514, 518, 519, 521, 522, 524, 526, 527, 528, 530, 533, 534, 535, 549, 574, 589, 591, 593, 595, 608, 652, 697, 712, 714, 715, 722, 737, 745, 746, 747, 752, 753, 762, 793, 801, 805], "unknown": [47, 84, 85, 130, 138, 192, 246, 314, 363, 415, 685], "mislead": [47, 111], "point": [47, 80, 83, 85, 131, 134, 147, 160, 192, 264, 271, 329, 336, 379, 386, 433, 440, 476, 482, 496, 591, 597, 619, 674, 697, 714, 715, 784, 805, 826], "out": [47, 144, 147, 697, 746, 747, 869], "compos": [47, 137, 144], "90": [47, 139, 869], "tryptophan": [47, 339], "would": [47, 78, 80, 83, 105, 106, 134, 136, 139, 141, 143, 145, 147, 239, 261, 307, 326, 356, 376, 408, 430, 464, 473, 495, 515, 531, 546, 570, 595, 713, 714, 744, 794, 795, 801, 863], "highli": 47, "alanin": [47, 339], "glycin": [47, 339], "recod": 47, "awar": [47, 94, 447], "consid": [47, 69, 78, 83, 94, 105, 106, 136, 141, 226, 261, 295, 326, 344, 376, 395, 430, 452, 473, 513, 515, 591, 592, 685, 713, 714, 715, 805, 828], "simpli": [47, 54, 101, 147, 278, 506, 553, 579, 706, 711, 755, 869], "minu": [47, 138, 145, 663], "shannon": [47, 82, 95], "uncertainti": [47, 595], "invers": [47, 517, 522, 524, 529], "impli": [47, 189, 595], "higher": [47, 484, 518, 840], "entropi": [47, 82, 97], "make": [47, 54, 136, 141, 147, 279, 488, 513, 539, 563, 587, 591, 715, 790, 793, 794, 802, 808, 828, 869], "symbol": [47, 136], "done": [47, 518, 591, 618, 651, 662], "prefer": [47, 103, 107, 137, 700, 701], "valdar": 47, "residu": [47, 708], "2002": [47, 78, 94, 102, 133, 136], "schneider": 47, "pitfal": 47, "theori": [47, 71, 86, 97, 527, 533], "websit": 47, "ca": [47, 142, 687, 701, 708], "2015": [47, 515, 518, 527, 533], "ncifcrf": 47, "gov": [47, 61, 62, 64, 65, 132, 133, 136, 138, 144, 146, 278, 286, 287], "glossari": 47, "html": [47, 83, 99, 132, 134, 136, 138, 141, 143, 145, 192, 506, 535, 553, 559, 571, 579, 587, 588, 589, 590, 591, 697, 801, 802], "shannon_entropi": 47, "classmethod": [49, 55, 214, 218, 239, 270, 287, 307, 335, 356, 385, 408, 439, 464, 481, 496, 499, 500, 501, 502, 505, 549, 552, 574, 578, 698, 759, 760, 761, 779], "dictionari": [49, 51, 56, 58, 67, 145, 146, 149, 192, 203, 204, 213, 217, 256, 322, 371, 425, 447, 470, 499, 508, 589, 760], "construct": [49, 58, 138, 146, 192, 193, 221, 290, 339, 390, 484, 499, 502, 508, 527, 534, 686, 750, 760, 761, 802, 862, 863, 867], "to_dict": 49, "sort": [49, 54, 109, 110, 193, 202, 205, 245, 248, 263, 313, 316, 328, 362, 365, 378, 414, 417, 432, 447, 468, 475, 630, 663, 685, 788, 793, 794, 801, 865, 869], "rel": [50, 94, 135, 138, 248, 250, 251, 263, 265, 267, 316, 328, 330, 332, 365, 378, 380, 382, 417, 419, 420, 432, 434, 436, 468, 475, 477, 479, 527, 533, 571, 787, 840, 865], "across": [50, 94, 136, 137, 143, 202, 518, 589, 714, 801], "1d": [50, 103, 221, 223, 228, 240, 241, 243, 244, 246, 247, 249, 259, 260, 261, 265, 266, 267, 268, 269, 271, 292, 297, 308, 309, 311, 312, 314, 315, 317, 325, 326, 330, 331, 332, 333, 334, 336, 339, 341, 346, 357, 358, 360, 361, 363, 364, 366, 375, 376, 380, 381, 382, 383, 384, 386, 387, 390, 392, 397, 409, 410, 412, 413, 415, 416, 418, 428, 429, 430, 434, 435, 436, 437, 438, 440, 447, 449, 454, 465, 466, 467, 472, 473, 477, 478, 479, 480, 482, 517, 518], "ndarrai": [50, 107, 221, 223, 240, 241, 243, 244, 249, 259, 260, 265, 266, 267, 268, 269, 292, 308, 309, 311, 312, 317, 325, 330, 331, 332, 333, 334, 339, 341, 357, 358, 360, 361, 366, 375, 380, 381, 382, 383, 384, 387, 390, 392, 409, 410, 412, 413, 418, 428, 429, 434, 435, 436, 437, 438, 447, 449, 465, 466, 472, 477, 478, 479, 480, 488, 506, 516, 517, 519, 521, 522, 523, 524, 525, 526, 528, 529, 530, 533, 535, 539, 553, 563, 571, 576, 579, 593, 595, 709, 716, 759], "vector": [50, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 140, 241, 243, 246, 249, 261, 264, 266, 268, 269, 271, 278, 309, 311, 314, 317, 326, 329, 331, 333, 334, 336, 358, 360, 363, 366, 376, 379, 381, 383, 384, 386, 387, 410, 412, 415, 418, 430, 433, 435, 437, 438, 440, 473, 476, 478, 480, 482, 488, 515, 516, 517, 518, 523, 524, 528, 529, 530, 533, 534, 535, 539, 559, 563, 587, 590, 591, 641, 701, 715, 716, 793, 862], "specifi": [50, 54, 94, 111, 132, 134, 136, 137, 138, 139, 140, 143, 145, 146, 147, 179, 189, 192, 202, 215, 217, 221, 228, 246, 248, 264, 275, 287, 288, 290, 297, 314, 316, 329, 339, 346, 363, 365, 379, 390, 397, 415, 417, 433, 444, 447, 454, 468, 476, 485, 488, 495, 498, 503, 504, 510, 516, 517, 518, 523, 524, 526, 532, 536, 539, 546, 548, 550, 551, 556, 560, 563, 570, 573, 575, 577, 583, 587, 588, 589, 590, 591, 595, 674, 697, 705, 706, 712, 744, 752, 783, 786, 788, 791, 794, 801, 828, 840, 851, 862, 869], "Will": [50, 67, 179, 182, 187, 189, 497, 509, 547, 555, 572, 582, 687, 716], "stabl": [51, 52, 159, 160, 161, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 191, 222, 223, 224, 225, 226, 228, 231, 233, 235, 236, 237, 238, 240, 241, 242, 243, 245, 247, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 276, 279, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 300, 302, 304, 305, 306, 308, 309, 310, 311, 313, 315, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337, 340, 341, 342, 343, 344, 346, 349, 351, 353, 354, 355, 357, 358, 359, 360, 362, 364, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 387, 388, 391, 392, 393, 394, 395, 397, 400, 402, 404, 405, 406, 407, 409, 410, 411, 412, 414, 416, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 454, 457, 459, 461, 462, 463, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 495, 510, 546, 556, 570, 583, 741], "least": [51, 52, 90, 141, 246, 255, 256, 258, 314, 321, 322, 324, 363, 370, 371, 373, 415, 424, 425, 427, 469, 470, 471, 518, 589, 697, 714, 715, 804, 869], "demonstr": [51, 52, 147, 256, 258, 322, 324, 371, 373, 425, 427, 470, 471], "behavior": [51, 52, 54, 60, 61, 62, 136, 137, 138, 189, 256, 258, 288, 322, 324, 371, 373, 425, 427, 447, 470, 471, 587, 589, 591, 746, 869], "rang": [52, 74, 83, 95, 106, 137, 138, 238, 242, 248, 258, 261, 272, 310, 316, 324, 326, 359, 365, 373, 376, 407, 411, 417, 427, 430, 441, 468, 471, 473, 587, 588, 697, 715, 764, 869], "qualiti": [52, 136, 144, 221, 226, 238, 242, 258, 272, 295, 310, 324, 339, 344, 359, 373, 390, 395, 407, 411, 427, 441, 447, 452, 471, 697, 865], "ignore_metadata": 53, "improv": [53, 141, 143, 221, 339, 390, 574], "__iter__": 53, "__reversed__": 53, "concat": [53, 54], "artifact": [53, 60, 61, 62], "real": [53, 136, 137, 144, 515, 516, 517, 521, 522, 523, 524, 528, 529, 530], "concaten": [53, 145, 214, 239, 307, 356, 408, 464], "outer": [53, 54, 239, 307, 356, 408, 464, 499], "join": [53, 132, 133, 137, 144, 145, 146, 239, 307, 356, 408, 464, 794, 801, 802], "aa": [53, 136, 138, 143, 278], "gt": 53, "strict": [54, 143, 239, 307, 356, 408, 464, 498, 548, 573, 589, 592, 595], "horizont": 54, "control": [54, 136, 587, 589, 590, 596, 708, 711, 713, 714, 715], "dure": [54, 136, 193, 239, 307, 356, 408, 464, 591, 826], "section": [54, 136, 137, 142, 145, 278, 447, 588, 589, 700, 701], "inner": [54, 141, 239, 307, 356, 408, 464, 499], "left": [54, 69, 97, 141, 516, 517, 521, 525, 528, 529, 530, 531, 742, 764, 805, 806, 867], "right": [54, 69, 97, 141, 515, 516, 517, 521, 525, 528, 529, 530, 531, 764, 805, 806, 869], "unshar": 54, "pad": [54, 143, 239, 307, 356, 408, 464], "guarante": [54, 85, 221, 245, 313, 339, 362, 390, 414, 535, 593, 752], "duplic": [54, 111, 137, 145, 216, 498, 548, 573, 717, 825], "doesn": [54, 136, 183, 288, 515, 532, 586, 700, 706, 710, 784, 803, 868], "subclass": [54, 134, 136, 143, 145, 147, 239, 307, 356, 408, 447, 464, 484, 534, 535, 593, 801, 828], "togeth": [54, 135, 136, 138, 145, 518, 828], "likewis": [54, 94, 145], "per": [54, 132, 133, 144, 145, 221, 339, 390, 447, 592, 595, 685, 708, 714, 715, 740, 827], "retain": [54, 239, 271, 307, 336, 356, 386, 408, 440, 464, 482, 498, 548, 573, 685], "output": [54, 132, 133, 141, 143, 144, 145, 264, 329, 379, 433, 476, 517, 587, 591, 592, 630, 701, 794, 802, 869], "reproduc": [54, 78, 105, 106], "msa1": 54, "msa2": 54, "unnecessari": 54, "By": [54, 83, 94, 103, 107, 136, 138, 516, 517, 518, 591, 705, 706, 709, 791, 802, 829], "col1": 54, "43": [54, 90, 142, 801], "col2": 54, "col3": 54, "o": [54, 55, 59, 94, 135, 136, 137, 144, 145, 218, 220, 270, 277, 335, 338, 339, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 698, 699, 779, 800, 862, 868], "file": [55, 59, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 160, 173, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 504, 505, 511, 518, 534, 551, 552, 557, 577, 578, 584, 618, 651, 662, 697, 698, 699, 713, 742, 779, 800, 826, 827, 862, 867], "kwarg": [55, 59, 66, 103, 107, 108, 111, 112, 159, 161, 173, 180, 181, 182, 184, 185, 186, 187, 190, 191, 218, 220, 270, 275, 276, 277, 335, 338, 385, 389, 439, 444, 445, 446, 481, 483, 484, 505, 511, 552, 557, 578, 584, 674, 698, 699, 779, 800, 828, 863], "instanc": [55, 59, 147, 161, 174, 176, 177, 178, 180, 185, 202, 217, 218, 220, 239, 270, 277, 307, 335, 338, 356, 385, 389, 408, 439, 446, 464, 481, 483, 486, 496, 505, 511, 513, 514, 535, 537, 552, 557, 559, 561, 576, 578, 584, 589, 591, 592, 593, 607, 629, 640, 673, 684, 697, 698, 699, 715, 722, 738, 779, 800, 801, 808, 809, 812, 819, 867, 869], "registri": [55, 59, 136, 137, 144, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 698, 699, 779, 800, 863], "system": [55, 59, 86, 97, 146, 147, 202, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 698, 699, 714, 779, 800], "clustal": [55, 59, 114, 863], "fasta": [55, 59, 116, 137, 139, 144, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 863], "fastq": [55, 59, 117, 144, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 863], "phylip": [55, 59, 126, 136, 141, 801, 802, 863, 867], "stockholm": [55, 59, 129], "filepath": [55, 59, 180, 181, 182, 185, 186, 187, 189, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 592, 698, 699, 779, 800], "url": [55, 59, 180, 181, 182, 185, 186, 187, 189, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 698, 699, 779, 800], "filehandl": [55, 59, 147, 159, 160, 161, 180, 181, 182, 185, 186, 187, 189, 190, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 698, 699, 779, 800], "etc": [55, 59, 80, 136, 137, 180, 181, 182, 185, 186, 187, 192, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 484, 505, 511, 552, 557, 578, 584, 698, 699, 706, 708, 722, 779, 800, 865], "someth": [55, 59, 147, 160, 180, 181, 182, 185, 186, 187, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 593, 698, 699, 779, 800, 869], "understood": [55, 59, 141, 180, 181, 182, 185, 186, 187, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 698, 699, 779, 800], "util": [55, 59, 146, 159, 161, 218, 220, 270, 277, 278, 286, 287, 290, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 698, 699, 779, 800, 862, 863], "respons": [55, 59, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 618, 651, 662, 686, 698, 699, 701, 708, 779, 800], "caller": [55, 59, 218, 220, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483, 505, 511, 552, 557, 578, 584, 618, 651, 662, 698, 699, 779, 800], "reader": [55, 131, 132, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 146, 147, 149, 160, 174, 179, 180, 181, 185, 186, 218, 270, 335, 385, 439, 481, 505, 552, 578, 698, 779], "attempt": [55, 136, 189, 218, 270, 335, 385, 439, 481, 505, 552, 578, 698, 742, 755, 779], "guess": [55, 90, 112, 136, 180, 185, 218, 270, 335, 385, 439, 481, 505, 552, 578, 698, 779, 804], "keyword": [55, 59, 66, 135, 138, 140, 160, 180, 181, 182, 185, 186, 187, 217, 218, 220, 264, 270, 275, 276, 277, 329, 335, 338, 379, 385, 389, 433, 439, 444, 445, 446, 476, 481, 483, 505, 511, 552, 557, 578, 584, 698, 699, 779, 800], "write": [55, 134, 135, 137, 139, 140, 141, 143, 145, 147, 161, 178, 179, 189, 218, 270, 335, 385, 439, 481, 505, 534, 552, 578, 618, 651, 662, 698, 736, 779, 807], "reassign": [56, 143, 589], "remain": [56, 136], "ccg": 56, "altern": [56, 146, 147, 288, 500, 515, 527, 533, 549, 574, 589, 591, 592, 595, 706, 711, 760, 786], "ascend": [57, 219], "place": [57, 141, 145, 288, 517, 685, 706, 709, 739, 764, 796], "multiindex": [57, 581], "noth": [57, 189, 273, 337, 388, 443, 828], "descend": [57, 94, 219, 722, 752, 764, 772, 781, 788, 789, 792, 795, 867], "sort_index": 57, "passthrough": 57, "intern": [57, 138, 141, 532, 740, 742, 744, 750, 752, 755, 764, 773, 778, 784, 794, 796, 797, 863, 867], "modifi": [57, 136, 138, 145, 179, 221, 339, 390, 447, 576, 674, 707, 786], "from_dict": [58, 587, 591, 596, 697, 713, 714], "regist": [59, 147, 148, 149, 159, 160, 161, 173, 179, 181, 184, 186, 220, 277, 338, 389, 446, 483, 511, 557, 584, 699, 800], "writer": [59, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 149, 176, 179, 182, 187, 189, 220, 277, 338, 389, 446, 483, 511, 557, 584, 699, 800], "penalize_terminal_gap": [60, 61, 62], "unalign": [60, 61, 62, 63, 64, 65, 66, 865], "substract": [60, 61, 62, 63, 64, 65, 704], "previou": [60, 61, 62, 63, 64, 65, 226, 295, 344, 395, 452, 587, 589, 591], "typic": [60, 61, 62, 63, 64, 65, 67, 136, 137, 144, 145, 192, 202, 706, 742], "similar": [60, 61, 62, 63, 64, 65, 104, 133, 135, 136, 137, 140, 143, 147, 447, 484, 587, 588, 589, 590, 591, 701, 706, 708, 714, 715, 865, 867], "lookup": [60, 61, 62, 63, 64, 65, 174, 175, 176, 488, 539, 563, 586, 589, 592, 739, 750, 754, 764, 765, 774, 778, 793, 828], "continu": [60, 61, 62, 686], "penal": [60, 61, 62], "even": [60, 61, 62, 68, 82, 88, 95, 99, 136, 141, 288, 587, 591, 715, 795], "irrelev": [60, 61, 62], "want": [60, 61, 62, 135, 138, 202, 711, 713, 714, 715, 746, 747, 863], "nearli": [60, 61, 62], "tupl": [60, 61, 62, 63, 64, 65, 66, 73, 77, 84, 90, 93, 111, 139, 160, 192, 213, 217, 275, 276, 444, 445, 484, 488, 535, 539, 559, 563, 761, 762, 793, 794], "input": [60, 61, 62, 63, 64, 65, 66, 78, 94, 103, 105, 106, 107, 146, 159, 161, 189, 190, 202, 214, 244, 271, 288, 289, 312, 336, 361, 386, 413, 440, 466, 482, 512, 518, 532, 535, 588, 589, 685, 697, 700, 701, 703, 707, 716, 796, 801, 802, 862, 863, 865], "item": [60, 61, 62, 63, 64, 65, 66, 271, 336, 386, 440, 447, 482, 495, 510, 546, 556, 570, 583, 685, 716, 744, 786, 793, 794, 828, 829, 839, 869], "local_pairwise_align": [60, 61, 62, 64, 65], "local_pairwise_align_nucleotid": [60, 61, 62, 63, 65], "global_pairwise_align_protein": [60, 61, 63, 64, 65], "global_pairwise_align_nucelotid": [60, 62, 63, 64, 65], "algorithm": [60, 63, 138, 587, 588, 589, 591, 596, 597, 608, 619, 630, 641, 652, 663, 674, 700, 701, 708, 745, 802, 803, 862], "slightli": [60, 83, 591], "basic": [60, 80, 132, 133, 595, 687, 697], "origin": [60, 62, 63, 65, 70, 71, 74, 77, 78, 81, 82, 86, 87, 94, 95, 97, 98, 105, 106, 108, 134, 136, 141, 143, 144, 239, 307, 356, 408, 447, 464, 531, 587, 588, 589, 590, 591, 595, 700, 708, 716, 745, 801, 802, 867, 869], "valid": [60, 63, 78, 94, 103, 105, 106, 107, 108, 111, 136, 137, 141, 143, 221, 290, 339, 390, 527, 533, 535, 558, 559, 574, 585, 862, 865, 869], "emboss": [60, 63], "needl": 60, "server": [60, 61, 62, 63, 64, 65, 146], "function": [60, 61, 62, 78, 79, 84, 85, 90, 93, 105, 106, 107, 108, 111, 136, 137, 144, 148, 149, 159, 160, 161, 174, 175, 176, 179, 183, 192, 202, 214, 221, 244, 278, 312, 339, 361, 390, 413, 466, 484, 500, 513, 516, 517, 518, 521, 522, 523, 524, 531, 549, 574, 588, 589, 590, 591, 592, 593, 596, 685, 701, 710, 713, 714, 715, 740, 744, 747, 752, 757, 781, 786, 794, 796, 797, 802, 803, 805, 806, 807, 808, 826, 828, 840, 851, 852, 862], "amino": [60, 62, 65, 135, 136, 140, 221, 278, 288, 339, 484, 496], "acid": [60, 62, 65, 135, 136, 137, 140, 143, 146, 221, 278, 288, 290, 339, 390, 447, 484, 496], "sb": 60, "cd": [60, 135, 138, 288], "j": [60, 62, 63, 65, 78, 81, 82, 90, 94, 95, 105, 106, 131, 132, 133, 136, 137, 138, 145, 146, 339, 495, 496, 510, 515, 523, 524, 525, 526, 527, 531, 533, 546, 556, 570, 583, 589, 590, 591, 701, 752, 801], "mol": [60, 63, 132, 133, 135, 138], "biol": [60, 63, 78, 82, 94, 132, 133, 135, 138, 527, 533], "1970": [60, 70], "mar": [60, 63, 82], "48": [60, 87], "443": 60, "53": [60, 142, 745], "ebi": [60, 63, 135, 138, 192], "uk": [60, 63, 82, 135, 138, 192, 515], "tool": [60, 63, 132, 133, 136, 143, 146, 515, 697, 701], "psa": [60, 63], "emboss_needl": 60, "global_pairwise_align": [61, 62, 63, 64, 65], "deriv": [61, 62, 64, 65, 135, 261, 326, 376, 430, 447, 473, 523, 524, 531, 714, 802], "ncbi": [61, 62, 64, 65, 132, 133, 136, 138, 146, 275, 276, 278, 279, 286, 287, 288, 289, 444, 445, 760, 865], "blast": [61, 62, 64, 65, 136], "nlm": [61, 62, 64, 65, 132, 133, 136, 138, 146, 278, 286, 287], "nih": [61, 62, 64, 65, 132, 133, 136, 138, 144, 146, 278, 286, 287], "cgi": [61, 62, 64, 65, 278, 286, 287], "blosum": [62, 65, 339, 484, 496], "block": [62, 65, 108, 496, 827], "henikoff": [62, 65, 496], "proc": [62, 65], "natl": [62, 65], "acad": [62, 65], "sci": [62, 65, 133, 531], "nov": [62, 65, 135, 697], "1992": [62, 65, 69, 78, 94, 496, 534], "89": [62, 65, 138, 496], "22": [62, 65, 142, 146, 496, 518, 711, 865], "10915": [62, 65, 496], "10919": [62, 65, 496], "water": 63, "identif": 63, "molecular": [63, 595, 742, 802], "subsequ": [63, 134, 136, 223, 231, 236, 240, 259, 261, 292, 300, 305, 308, 325, 326, 341, 349, 354, 357, 375, 376, 392, 400, 405, 409, 428, 430, 447, 449, 457, 462, 465, 472, 473, 828, 865], "tf": 63, "1981": [63, 745, 801], "147": 63, "195": 63, "emboss_wat": 63, "sequence1": 66, "sequence2": 66, "deprec": [66, 67, 92, 111, 257, 269, 323, 334, 372, 384, 426, 438], "replac": [66, 67, 90, 136, 221, 274, 339, 390, 442, 484, 515, 526, 685, 709, 716, 793], "favor": 66, "issu": [66, 76, 135, 136, 137, 160, 802, 863], "1814": 66, "complet": [66, 84, 85, 137, 138, 141, 711, 804, 863], "meet": [66, 183, 217, 797], "acgtu": 67, "substitutionmatrix": 67, "track": [67, 135], "progress": [67, 588], "161": [67, 132], "look": [67, 140, 142, 143, 147, 217, 271, 336, 386, 440, 444, 445, 482, 488, 518, 539, 563, 697, 713, 714, 715, 744, 851, 867, 869], "get": [67, 189, 190, 201, 202, 278, 287, 484, 534, 535, 559, 589, 685, 701, 749, 788], "domin": [68, 70, 76, 87, 98, 99, 102], "interv": [68, 73, 77, 84, 135, 138, 139, 202, 203, 204, 205, 211, 213, 214, 215, 216, 217, 219, 221, 226, 238, 255, 274, 290, 295, 321, 339, 344, 370, 390, 395, 407, 424, 447, 452, 469, 712], "ci": [68, 84], "suffix": 68, "_ci": 68, "rare_threshold": 69, "coverag": [69, 77, 81, 85, 132, 133], "s_": [69, 71, 72, 90, 101], "frac": [69, 70, 71, 72, 76, 77, 79, 80, 81, 82, 86, 87, 88, 89, 90, 95, 96, 99, 102, 516, 517, 521, 525, 526, 528, 529, 530, 531, 589, 708], "rare": [69, 715], "c_": 69, "f_1": [69, 72, 77, 81, 96], "gamma": 69, "2_": 69, "pool": 69, "coeffici": [69, 588, 589, 595, 687, 708, 711, 747], "variat": [69, 589, 701], "sum": [69, 71, 74, 78, 87, 88, 90, 94, 98, 214, 248, 316, 365, 417, 468, 517, 521, 522, 525, 715, 716, 737, 793, 827], "_": [69, 134, 136, 137, 141, 145, 214, 226, 295, 344, 395, 452, 534, 589], "f_i": 69, "n_": [69, 70], "threshold": [69, 805], "fewer": [69, 143, 714, 715], "doubl": [69, 70, 71, 72, 74, 76, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 102, 180, 185, 700, 706], "everi": [69, 146, 517, 528, 529, 530, 531, 532, 592, 743, 758, 764], "introduc": [69, 80, 134, 136, 515], "manual": [69, 73, 83, 88, 801, 802], "zero": [69, 79, 111, 131, 192, 213, 248, 316, 365, 417, 468, 515, 518, 520, 526, 527, 533, 535, 587, 588, 589, 590, 591, 592, 595, 700, 706, 709, 714, 716, 802, 869], "known": [69, 141, 180, 185, 531, 532, 701, 706, 865], "environ": [69, 105, 106, 515, 701], "did": [69, 136, 144, 180, 185, 190, 869], "chao": [69, 72, 94], "american": 69, "87": [69, 142], "210": 69, "217": 69, "ma": 69, "yang": 69, "1993": [69, 587, 588], "rule": [69, 136, 143, 145, 801], "recaptur": 69, "debug": [69, 828, 839, 869], "unequ": [69, 279, 484], "failur": [69, 558, 585, 829, 869], "rate": [69, 484, 711], "biometrika": [69, 81], "80": [69, 136, 686, 714, 715, 742, 797, 869], "193": 69, "201": 69, "viceroi": [69, 73], "eeb": [69, 73], "uconn": [69, 73], "edu": [69, 73, 99, 134, 136, 141, 143, 801, 802], "hwang": 69, "chen": [69, 94], "kuo": 69, "2000": [69, 715], "commun": [69, 74, 78, 94, 97, 102, 105, 106, 534, 587, 588, 590, 591, 697, 701, 708, 715], "statistica": [69, 80], "sinica": 69, "227": [69, 136], "246": [69, 102, 145], "berger": 70, "parker": 70, "fraction": [70, 514, 715, 746, 867], "total": [70, 71, 77, 78, 79, 81, 86, 87, 88, 89, 90, 102, 131, 132, 202, 248, 316, 365, 417, 468, 484, 535, 559, 588, 752], "plankton": 70, "foraminifera": 70, "sea": 70, "sediment": 70, "scienc": [70, 71, 78, 134, 136, 496, 701], "168": [70, 714], "3937": 70, "1345": 70, "1347": 70, "brillouin": 71, "h_b": 71, "ln": [71, 79, 86, 95, 516, 518, 521, 525, 531], "n_i": [71, 87, 88], "text": [71, 87, 88, 102, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 159, 160, 161, 189, 534, 618, 651, 662], "th": [71, 87, 88, 102], "1956": 71, "academ": 71, "press": 71, "york": 71, "bias_correct": [72, 73], "bia": [72, 73], "correct": [72, 73, 80, 136, 518, 778, 784, 863], "equat": [72, 73, 79, 90, 589], "uncorrect": [72, 73], "bias": [72, 73], "chao1_ci": 72, "2f_2": 72, "f_2": [72, 77], "1984": [72, 221, 290, 339, 390, 447], "parametr": [72, 515, 518, 587, 590], "popul": [72, 79, 81, 101, 144, 145, 264, 329, 379, 433, 476, 515, 593, 711, 715], "scandinavian": [72, 518], "265": 72, "270": 72, "zscore": 73, "96": [73, 139], "chao1": 73, "scalar": [73, 97, 484, 488, 530, 534, 539, 563, 697], "95": [73, 77, 78, 84, 137, 142, 742], "lower_bound": [73, 77, 84, 202], "upper_bound": [73, 77, 84, 202, 214], "emploi": 73, "varianc": [73, 527, 533, 588, 590, 591, 686, 702, 705, 709, 714], "presenc": [73, 94, 279, 288, 715], "absenc": [73, 715], "specif": [73, 78, 83, 103, 105, 106, 107, 108, 111, 147, 217, 447, 595, 630, 714, 715, 786, 863, 868, 869], "simpson": [74, 99], "degre": [74, 94, 134, 527, 533, 705, 712, 714], "concentr": [74, 715], "composit": [74, 78, 94, 189, 701], "p_i": [74, 76, 97, 98], "proport": [74, 76, 80, 81, 90, 94, 97, 98, 142, 251, 420, 513, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 533, 587, 589, 590, 596, 630, 674, 687, 700, 706, 708, 745], "probabl": [74, 84, 85, 96, 596, 608, 685, 700, 711, 715, 722], "randomli": [74, 576, 587, 589, 590, 593, 685, 716, 747, 786], "select": [74, 94, 591, 713, 714, 786], "sometim": [74, 136, 138, 701, 863], "distinguish": [74, 94], "reciproc": [74, 715], "discrep": 74, "denot": [74, 94, 98, 101, 102, 136, 518, 587, 590, 591], "accord": [74, 78, 221, 339, 390, 705, 709], "mathemat": [74, 97, 105, 515, 742, 745, 801], "1949": [74, 98], "natur": [74, 83, 98], "163": [74, 98], "4148": [74, 98], "688": [74, 98], "occurr": [75, 100, 240, 252, 253, 254, 257, 308, 318, 319, 320, 323, 357, 367, 368, 369, 372, 374, 409, 421, 422, 423, 426, 465], "ens_pi": 76, "ens_": 76, "pie": 76, "sum_": [76, 78, 80, 94, 97, 515, 517, 528, 529, 530, 589], "chase": 76, "knight": [76, 78, 105, 106, 697], "scale": [76, 588, 686, 700, 701, 702, 708], "driver": [76, 862], "biodivers": [76, 78, 94], "why": 76, "standardis": 76, "enough": [76, 136, 141, 715], "ecologi": [76, 78, 79, 86, 87, 102, 518, 587, 588, 589, 590, 686, 700, 701, 706, 707, 708], "letter": [76, 78, 136, 138, 339], "volum": 76, "supplement": 76, "pg": 76, "17": [76, 78, 105, 106, 135, 142, 221, 390, 686, 714], "26": [76, 133, 141, 518, 590, 595, 697], "esti": 77, "good": [77, 81, 706], "pm": 77, "sqrt": [77, 87, 88, 89, 531, 708], "constant": [77, 515, 518, 571, 589, 713], "distribut": [77, 135, 515, 593, 706, 711, 712, 714, 715], "2nf_2": 77, "hardcod": 77, "1983": 77, "limit": [77, 132, 141, 142, 143, 713, 714], "law": 77, "nonparametr": [77, 515, 518, 526], "random": [77, 79, 90, 131, 587, 591, 593, 685, 701, 711, 713, 714, 715, 747, 786], "ann": [77, 96], "905": 77, "912": 77, "sqcup": [78, 94], "minimum": [78, 94, 99, 146, 251, 261, 326, 376, 420, 430, 473, 518, 591, 685, 714, 715], "connect": [78, 80, 94, 141, 722, 771, 778], "taxa": [78, 94, 146, 701, 715, 747], "lowest": [78, 94, 768, 770], "ancestor": [78, 94, 239, 307, 356, 408, 464, 737, 768, 770], "lca": [78, 94, 742, 770], "superset": [78, 94, 105, 106, 587, 591], "subset": [78, 94, 105, 106, 111, 131, 135, 588, 746, 752, 867], "elsewher": [78, 103, 105, 106, 107], "lead": [78, 103, 105, 106, 107, 136, 137, 140], "hard": [78, 103, 105, 106, 107], "bypass": [78, 103, 105, 106, 107], "certain": [78, 87, 103, 105, 106, 107, 221, 339, 390, 513, 797], "entail": [78, 103, 105, 106, 107], "missingnodeerror": [78, 94, 103, 105, 106, 107, 755, 756, 758, 773, 786], "duplicatenodeerror": [78, 94, 103, 105, 106, 107, 750], "fail": [78, 79, 94, 103, 105, 106, 107, 216, 591, 711, 828, 829, 869], "exact": [78, 94, 103, 105, 106, 107, 192, 239, 307, 356, 408, 464, 591, 706, 863], "phydiv": 78, "span": [78, 94, 108, 136, 138, 141, 192, 217], "clarifi": 78, "taxon": [78, 94, 135, 138, 760, 867], "ancestr": 78, "life": 78, "One": [78, 143, 147, 571, 802], "choos": [78, 701, 711], "scope": [78, 869], "unroot": [78, 94, 105, 106, 141, 759, 783, 798, 799, 802], "variant": [78, 94, 144, 146, 484], "sever": [78, 141, 143, 686, 711], "evolutionari": [78, 484, 496, 722, 802], "histori": [78, 715], "eh": 78, "fd": [78, 827], "pycog": [78, 105, 106, 801], "qiim": [78, 105, 106], "impos": [78, 105, 106], "few": [78, 105, 106, 108, 863, 867, 869], "had": [78, 105, 106, 587, 591, 715], "trifurc": [78, 105, 106, 141], "newick": [78, 105, 106, 124, 736, 742, 779, 800, 802, 863, 867], "convent": [78, 105, 106, 132, 135, 138], "silent": [78, 105, 106], "conserv": [78, 83, 84, 94, 134, 239, 307, 356, 408, 464, 518, 534], "evalu": [78, 94, 132, 133, 228, 297, 346, 397, 454, 534, 588, 685, 711, 744, 781, 784, 867, 869], "baker": 78, "2006": [78, 591], "bioinformat": [78, 94, 137, 143, 742], "challeng": 78, "117693430600200007": 78, "nee": 78, "1997": [78, 145], "extinct": 78, "loss": [78, 595], "278": 78, "5338": 78, "692": 78, "694": 78, "petchei": 78, "ol": 78, "gaston": 78, "kj": 78, "402": 78, "hamadi": [78, 105, 106], "lozupon": [78, 105, 106], "fast": [78, 105, 106, 596, 706], "facilit": [78, 105, 106, 108, 131, 559, 711, 750, 802], "throughput": [78, 105, 106, 136, 137, 697, 714], "analys": [78, 105, 106, 587], "microbi": [78, 84, 85, 94, 105, 106, 518, 587, 588, 590, 591, 697], "pyrosequenc": [78, 105, 106], "phylochip": [78, 105, 106], "ism": [78, 105, 106], "2010": [78, 105, 106, 137], "taxonom": [78, 105, 106], "u_count": [78, 105, 106], "otu8": [78, 105, 106], "62": [78, 105, 106, 134, 137, 591, 865], "round": [78, 83, 90, 105, 106, 589, 711, 714, 715, 752], "fisher": 79, "solv": [79, 711], "runtimeerror": 79, "analyt": 79, "solut": 79, "obtain": [79, 228, 297, 346, 397, 447, 454, 495, 496, 510, 518, 534, 546, 556, 570, 581, 583, 587, 589, 591, 822, 823, 824], "minimize_scalar": 79, "determinist": [79, 587, 591], "becom": [79, 136, 137, 141, 202], "inf": [79, 786], "corbet": 79, "william": 79, "1943": 79, "anim": 79, "pp": [79, 89, 96, 701], "58": [79, 142, 711], "rectangl": 80, "gini": [80, 98], "area": 80, "lorenz": 80, "curv": [80, 83, 90, 701, 711, 714, 715], "under": [80, 107, 136, 221, 339, 390, 447, 630, 714, 862], "simplifi": 80, "2b": 80, "entri": [80, 131, 135, 146, 685], "trapezoid": 80, "line": [80, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 189, 714, 740], "parallel": [80, 108], "opinion": 80, "though": [80, 136, 137, 143, 144, 518, 571, 587, 591, 802, 869], "desir": [80, 84, 132, 140, 706, 785, 869], "circumst": [80, 339, 714], "linear": [80, 135, 138, 687, 701], "segment": 80, "accur": [80, 84, 85], "fall": [80, 83, 94, 106, 685], "gradient": [80, 700, 701, 706, 708], "formula": [80, 591], "dx": [80, 531], "h_i": 80, "h_0": 80, "h_n": 80, "1912": 80, "variabl": [80, 131, 271, 336, 386, 440, 447, 482, 518, 588, 591, 686, 687, 697, 701, 706, 707, 708, 711, 713, 714, 828, 851, 869], "mutabl": [80, 447, 808, 865], "cuppini": 80, "bologna": 80, "156": 80, "page": [80, 518, 802, 867], "reprint": 80, "memori": [80, 134, 136, 137, 138, 143, 144, 145, 534, 592, 685, 706, 827, 863], "di": [80, 865], "metodologica": 80, "ed": 80, "pizetti": 80, "salvemini": 80, "rome": 80, "libreria": 80, "eredi": 80, "virgilio": 80, "veschi": 80, "1955": 80, "onc": [81, 136, 147, 795], "1953": 81, "237": [81, 102], "264": 81, "heip": [82, 88], "wiener": [82, 97], "logarithm": [82, 97, 518], "pielou_": 82, "1974": [82, 88], "ass": 82, "54": [82, 106], "555": 82, "557": 82, "lower_quantil": 83, "upper_quantil": 83, "kempton": 83, "taylor": 83, "slope": 83, "cumul": [83, 102, 134], "interquantil": 83, "lower": [83, 84, 136, 143, 192, 202, 518, 574, 581, 589, 685, 715], "quartil": 83, "inward": 83, "bound": [83, 84, 138, 139, 147, 149, 192, 193, 201, 202, 205, 213, 214, 216, 217, 447, 518, 712, 715], "sdr": [83, 88], "iv": [83, 88, 94], "onlin": [83, 88, 137], "magurran": [83, 89], "1998": [83, 686, 700, 701, 703, 704, 706, 708], "half": [83, 515], "uq": 83, "lq": 83, "justif": 83, "unclear": 83, "just": [83, 84, 85, 90, 147, 785, 863, 867, 869], "overlap": [83, 217, 262, 263, 327, 328, 377, 378, 431, 432, 474, 475, 495, 514, 546, 570, 746], "quantil": 83, "consider": [83, 94, 714], "off": [83, 96, 221, 339, 390, 515, 714, 745, 785, 801, 805, 869], "leav": [83, 135], "chang": [83, 136, 201, 202, 288, 447, 496, 587, 685, 744, 778, 869], "1976": 83, "model": [83, 84, 85, 90, 496, 515, 534, 715], "262": 83, "818": 83, "820": 83, "pisc": 83, "com": [83, 132, 133, 134, 588, 827], "sdrhelp": 83, "ci_typ": 84, "ulcl": 84, "uncov": [84, 85], "predict": [84, 85, 145, 714], "ratio": [84, 95, 99, 515, 516, 517, 518, 521, 522, 523, 524, 527, 533, 715], "ulcu": 84, "fix": [84, 140, 143], "lladser_p": 84, "around": [84, 85, 108, 136, 143, 145, 484, 519, 589, 712, 867], "full": [84, 85, 134, 518, 758, 784, 826], "theorem": [84, 85], "iii": 84, "lladser": [84, 85, 105, 106], "gouet": [84, 85], "reeder": [84, 85], "extrapol": [84, 85, 711], "urn": [84, 85], "poisson": [84, 85], "2011": [84, 85, 94, 105, 106], "lladser_ci": 85, "too": [85, 706, 737], "low": [85, 706, 714], "log": [86, 515, 516, 517, 518, 521, 522, 523, 524, 527, 533], "accumul": [86, 89, 737], "1958": 86, "36": [86, 96, 142, 527, 533, 711], "71": [86, 105, 142, 145], "mcintosh": [87, 88], "mcintosh_": 87, "1967": [87, 589], "concept": [87, 531], "1115": 87, "1126": 87, "mcintosh_d": 88, "wrong": 88, "engel": 88, "560": 88, "d_": [89, 99], "mn": 89, "squar": [89, 90, 107, 141, 484, 535, 559, 703], "2004": 89, "blackwel": 89, "76": [89, 94, 142], "77": [89, 591], "num_repeat": 90, "params_guess": 90, "micha": 90, "menten": 90, "fit": [90, 685, 687, 708, 868], "rarefact": 90, "ns_": 90, "datapoint": 90, "subsampl": [90, 685, 711, 714, 715, 716, 747], "initi": [90, 136, 714, 769, 772, 775, 776, 777, 792, 795, 802, 839], "s_max": 90, "subsample_count": [90, 685], "controversi": 90, "ml": 90, "assumpt": [90, 141, 513, 518, 755, 756, 804], "roughli": 90, "magnitud": [90, 589, 591, 706, 803], "enzym": 90, "kinet": 90, "nonlinear": 90, "raaijmak": 90, "1987": [90, 802], "biometr": [90, 591], "793": 90, "803": 90, "histor": [92, 278, 742], "reli": [93, 221, 339, 390], "explicitli": [94, 143, 686], "fulli": [94, 138, 863], "adopt": 94, "author": [94, 138, 145, 447, 518], "upd": 94, "contrast": [94, 531], "rpd": 94, "advantag": [94, 559, 828], "framework": [94, 515], "rbwpd_": 94, "analog": 94, "pd_": 94, "multipli": 94, "bwpd_": 94, "delta": [94, 526, 705], "npd": 94, "min": [94, 99, 715], "lesser": 94, "side": [94, 589, 592, 595], "balanc": [94, 531], "adjust": 94, "factor": [94, 105, 106, 587, 590, 595, 701, 715], "theta": [94, 518], "back": [94, 136, 139, 182, 187, 738, 867], "public": [94, 137, 697], "although": [94, 595, 714], "involv": [94, 516], "report": [94, 160, 595, 708], "perspect": 94, "rpd_": 94, "upd_": 94, "pardi": 94, "goldman": 94, "2007": [94, 105, 106], "resourc": [94, 146, 189], "systemat": 94, "biologi": [94, 95, 288, 595, 742, 755, 801, 802], "56": [94, 242, 310, 359, 411], "431": 94, "444": 94, "chiu": 94, "jost": 94, "2016": [94, 527, 533], "decomposit": [94, 108], "hill": 94, "141": [94, 745], "72": 94, "mccoi": 94, "matsen": 94, "robust": [94, 527, 533, 591, 595], "depth": [94, 686, 711, 714, 715, 795, 867], "peerj": 94, "e157": 94, "vellend": 94, "cornwel": 94, "magnuson": 94, "ford": 94, "mooer": 94, "\u00f8": 94, "frontier": 94, "assess": [94, 102, 587, 589, 590, 591, 595], "194": 94, "207": 94, "barker": 94, "quantit": [94, 105, 106, 700, 715], "prioriti": [94, 840, 869], "achiev": [94, 865], "linnean": 94, "societi": 94, "165": 94, "bitting": 94, "charlson": 94, "hoffmann": 94, "lewi": 94, "wu": [94, 106], "li": 94, "2012": [94, 138, 146, 589], "environment": [94, 588, 686, 701, 706, 707], "covari": [94, 702], "2106": 94, "2113": 94, "pielou": 95, "equit": [95, 99], "e_h": 95, "That": [95, 99, 141, 264, 329, 379, 433, 476], "actual": [95, 99, 147, 179, 589], "versu": [95, 99, 105, 106], "maximum": [95, 102, 136, 137, 518, 588, 630, 685, 701, 705, 709, 714, 715, 747], "heip_": 95, "1966": 95, "theoret": 95, "131": [95, 745], "unobserv": 96, "outcom": [96, 714], "1968": 96, "vol": 96, "256": [96, 711], "257": 96, "bit": [97, 132, 133], "log_2": 97, "propos": [97, 802], "1948": 97, "bell": 97, "technic": [97, 141], "379": 97, "423": 97, "impur": 98, "e_d": 99, "enspi": 99, "tiem": 99, "utk": 99, "gross": 99, "bealsmodul": 99, "simpsondi": 99, "usual": [101, 135, 138, 146, 484, 742], "discret": 101, "entiti": [101, 192], "smaller": [101, 261, 326, 376, 430, 473, 592], "observed_featur": 101, "d_w": 102, "max_i": 102, "b_i": [102, 531], "sequenti": [102, 136, 137, 143, 518, 531, 532, 697, 796], "rank": [102, 146, 518, 587, 588, 589, 710, 760], "smallest": [102, 143, 714, 715], "express": [102, 247, 273, 315, 337, 364, 388, 416, 443, 467, 527, 533, 714, 865], "bracket": [102, 141], "uneven": 102, "plant": [102, 135, 531], "dissimilar": [104, 107, 140, 484, 485, 486, 488, 493, 494, 495, 497, 498, 500, 503, 504, 506, 509, 510, 527, 534, 535, 536, 537, 539, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 558, 559, 560, 561, 563, 568, 569, 570, 572, 573, 575, 577, 579, 582, 583, 586], "v_count": [105, 106], "qualit": [105, 106, 697], "deeper": [105, 106], "advis": [105, 106, 111], "appl": [105, 106], "microbiol": [105, 106], "8228": 105, "8235": 105, "2005": [105, 135], "kellei": [105, 106], "insight": [105, 106], "structur": [105, 106, 133, 138, 141, 146, 496, 535, 587, 588, 595, 784, 828, 862], "73": [105, 106], "1576": [105, 106], "1585": [105, 106], "stombaugh": [105, 106], "comparison": [105, 106, 518, 595, 713, 745, 802, 805, 867], "169": [105, 106], "172": [105, 106], "biocor": [105, 106, 697], "uu": 105, "37": [105, 145], "quantiti": 106, "mathemt": 106, "pairwise_func": 107, "pairwis": [107, 108, 111, 500, 518, 527, 549, 574, 592, 595, 753, 791, 867], "doc": [107, 134, 135, 136, 143, 192, 506, 535, 553, 559, 571, 579, 801, 802], "link": [107, 201, 588, 595, 722], "hollow": [107, 131, 535, 574, 576, 593], "sklearn": 107, "pairwise_dist": 107, "distancematrix": [107, 108, 111, 131, 140, 507, 512, 527, 535, 554, 587, 588, 589, 590, 591, 592, 593, 595, 697, 706, 791, 802], "itypeerror": 107, "reduce_f": 108, "map_f": 108, "resolv": [108, 111, 122, 595], "reduc": [108, 591, 685, 706], "partialdistancematrix": 108, "signatur": [108, 190], "_block_comput": 108, "ipyparallel": 108, "map_async": 108, "blocksiz": 108, "partial_beta_divers": 108, "process": [108, 136, 145, 216, 708, 804, 829, 869], "motiv": 108, "earth": 108, "project": [108, 137, 516, 531, 587, 588, 589, 590, 591, 707], "dataset": [108, 131, 515, 591, 686, 701, 706], "000": 108, "million": 108, "earthmicrobiom": 108, "id_pair": 111, "unstabl": 111, "caution": 111, "unresolv": 111, "warn": [112, 119, 137, 706, 744, 798, 803, 804, 862], "blast7": 113, "pars": [113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 136, 137, 138, 140, 147, 863], "embl": [115, 138, 146, 192, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483], "sniffer": [119, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 175, 180, 181, 185, 186, 863], "gff3": [120, 138, 218, 220, 270, 277, 335, 338, 481, 483], "genbank": [121, 135, 139, 146, 270, 277, 335, 338, 385, 389, 439, 446, 481, 483], "lsmat": [123, 505, 511, 552, 557, 578, 584], "written": [126, 134, 136, 137, 141, 143, 801, 863, 867], "qseq": [127, 132, 133, 270, 335, 385, 439, 481], "qual": [128, 137], "ambigu": [130, 181, 186], "unidentifi": 130, "encod": [131, 136, 137, 144, 147, 149, 189, 531, 686], "rapid": [131, 136, 764], "ye": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146], "dissimilaritymatrix": [131, 140, 484, 486, 488, 493, 495, 497, 498, 500, 504, 505, 507, 509, 510, 511, 527, 559, 561, 563, 568, 570, 572, 573, 577, 580, 582, 583, 593], "hdf5": 131, "datatyp": [131, 685, 716], "unicod": [131, 189], "diagon": [131, 574, 581], "dm": [131, 488, 495, 504, 507, 510, 534, 539, 546, 551, 554, 556, 563, 570, 577, 580, 581, 583, 587, 588, 591, 592, 697, 802], "current": [131, 132, 135, 136, 137, 138, 143, 145, 146, 202, 216, 276, 289, 445, 496, 589, 674, 700, 706, 744, 757, 766, 767, 772, 862], "float32": [131, 591], "human": [131, 136, 137, 140, 141, 142, 807], "readabl": [131, 136, 137, 140, 141, 142, 143, 189, 807], "especi": [131, 136, 595, 708], "appropri": [131, 140, 189, 239, 307, 356, 408, 464, 518, 863, 867], "hdfgroup": 131, "databas": [132, 133, 135, 138, 146, 192, 760], "simpl": [132, 133, 136, 137, 141, 145, 147, 173, 184, 515, 518, 588, 595, 863, 867], "header": [132, 133, 134, 137, 138, 140, 142], "tab": [132, 133, 139, 140, 141, 142, 144, 146], "moac": 132, "gi": [132, 133, 138], "15800534": 132, "ref": [132, 739], "np_286546": 132, "3e": [132, 133, 711], "114": 132, "330": 132, "170768970": 132, "zp_02903423": 132, "99": [132, 133, 135, 142, 587, 591, 595], "9e": 132, "329": 132, "produc": [132, 133, 143, 144, 159, 261, 326, 376, 430, 473, 700, 708], "outfmt": [132, 133], "legaci": [132, 133, 136], "With": [132, 515, 526], "qseqid": [132, 133], "sseqid": [132, 133], "bitscor": [132, 133], "qstart": [132, 133], "sstart": [132, 133], "qgi": [132, 133], "qacc": [132, 133], "acces": 132, "qaccver": [132, 133], "qlen": [132, 133], "sallseqid": [132, 133], "sgi": [132, 133], "sallgi": [132, 133], "sacc": [132, 133], "saccver": [132, 133], "sallacc": [132, 133], "slen": [132, 133], "align": [132, 133, 136, 137, 192, 202, 447, 484, 862, 863, 865], "qend": [132, 133], "send": [132, 133], "part": [132, 136, 138, 141, 144, 512, 516, 531, 685, 772, 828, 867], "sseq": [132, 133], "raw": [132, 618, 651], "pident": [132, 133], "percent": [132, 865], "nident": [132, 133], "gapopen": [132, 133], "ppo": [132, 133], "percentag": [132, 515], "frame": [132, 133, 276, 278, 288, 289, 445, 588, 760], "qframe": [132, 133], "sframe": [132, 133], "btop": [132, 133], "traceback": [132, 143, 288, 447, 589], "staxid": [132, 133], "taxonomi": [132, 141, 146, 278, 286, 287, 760, 761, 794], "sscinam": [132, 133], "scientif": [132, 559], "scomnam": [132, 133], "sblastnam": [132, 133], "sskingdom": [132, 133], "super": [132, 133], "kingdom": [132, 133, 146], "stitl": [132, 133], "sstrand": [132, 133], "strand": [132, 133, 138, 139, 145, 192, 274, 275, 276, 442], "salltitl": [132, 133], "qcov": [132, 133], "qcovhsp": [132, 133], "hsp": [132, 133], "miss": [132, 136, 145, 239, 307, 356, 408, 464, 515, 526, 588, 697, 713, 714, 719, 720, 869], "allow": [132, 136, 137, 141, 143, 144, 147, 159, 161, 189, 202, 221, 239, 248, 307, 316, 339, 356, 365, 390, 408, 417, 464, 468, 488, 495, 515, 539, 546, 563, 570, 587, 588, 590, 591, 592, 596, 706, 752, 794, 829, 869], "default_column": 132, "suppos": [132, 133, 135, 136, 137, 138, 141, 144, 145, 515, 711, 715], "tgi": 132, "t100": [132, 133], "t161": 132, "t0": [132, 133, 139, 142, 144, 534], "t1": [132, 133, 142, 144, 146, 534], "t3e": [132, 133], "t330": 132, "t99": 132, "t9e": 132, "t329": 132, "fh": [132, 133, 134, 136, 137, 138, 139, 143, 144, 145, 146, 147, 159, 160, 161], "df": [132, 133, 146, 507, 554, 580, 587, 588, 591, 697, 712], "000000e": [132, 133], "altschul": [132, 133], "gish": [132, 133], "miller": [132, 133], "myer": [132, 133], "lipman": [132, 133, 136], "1990": [132, 133, 135], "215": [132, 133], "403": [132, 133], "410": [132, 133], "blastedbio": 132, "blogspot": 132, "csv": [132, 140, 863], "book": [132, 133, 136], "nbk279675": 132, "blastn": 133, "18": [133, 142, 145, 587, 711, 865], "1786181": 133, "gb": [133, 138], "ae000111": 133, "ecoli": 133, "field": [133, 137, 144, 278], "hit": 133, "10596": 133, "ae000174": 133, "8e": 133, "5565": 133, "5671": 133, "6928": 133, "6821": 133, "ae000394": 133, "1e": [133, 141, 805], "5587": 133, "135": [133, 527, 533], "219": [133, 135, 588], "ae000425": 133, "6e": 133, "8552": 133, "8468": 133, "ae000171": 133, "2214": 133, "2130": 133, "minor": 133, "blastp": 133, "31": 133, "query1": 133, "subject2": 133, "sbjctframe": 133, "ver": 133, "record": [133, 135, 136, 137, 138, 139, 144], "subject1": 133, "other_vertebr": 133, "af178033": 133, "emorg": 133, "811": 133, "1566": 133, "af031394": 133, "63": [133, 142], "909": 133, "1542": [133, 742], "consist": [133, 136, 137, 139, 142, 143, 145, 146, 447, 484, 714, 772, 792], "blast6": 133, "sbjct": 133, "tax": 133, "tae000111": 133, "t10596": 133, "tae000174": 133, "t8e": 133, "t5565": 133, "t5671": 133, "t6928": 133, "t6821": 133, "tae000171": 133, "t5587": 133, "t2214": 133, "t2130": 133, "tae000425": 133, "t6e": 133, "t8552": 133, "t8468": 133, "temorg": 133, "t811": 133, "t1566": 133, "af178032": 133, "t94": 133, "57": [133, 142, 701], "t44": 133, "t1217": 133, "af178031": 133, "82": [133, 134, 145], "t42": 133, "t1233": 133, "94": [133, 142], "nbk279682": 133, "plain": [134, 136, 137, 138, 141, 143, 144], "divid": [134, 531, 703, 705, 709], "60": [134, 135, 139, 596, 714], "long": [134, 136, 143, 246, 314, 363, 415, 516, 588, 674, 700], "below": [134, 136, 137, 141, 143, 145, 146, 278, 290, 447, 588, 589, 697, 714, 722], "properti": [134, 143, 146, 279, 285, 290, 484, 500, 549, 559, 574, 711, 742, 778, 808, 820, 822, 823, 824], "abc": [134, 226, 290, 295, 344, 395, 452], "gcaugcaucugcauacguacguacgcaugcauca": 134, "def": [134, 147, 159, 160, 161, 244, 290, 312, 361, 413, 466, 715, 869], "xyz": 134, "gucgauacauacguacgucguacguacgu": 134, "cgac": 134, "cgcgaugcaugcau": 134, "cgau": 134, "caugcaucguacguacgcaugac": 134, "code": [134, 136, 137, 138, 146, 217, 221, 274, 275, 276, 278, 279, 285, 286, 287, 288, 289, 339, 390, 442, 444, 445, 595, 716, 745, 801, 803, 865], "clustal_f": 134, "gcaugcaucugcauacguacguacgcaugca": 134, "gucgauacauacguacgucgguacgu": 134, "cgugcaugcau": 134, "cauucguacguacgcaugac": 134, "gcaugcaucugcauacguacguacgcaugcagucgauacauacguacgucgguacgu": 134, "accgttgta": [134, 143], "gtagct": [134, 143], "gtcgaa": [134, 143], "gtacct": [134, 143], "agagttgaaggtatct": [134, 143], "getvalu": [134, 136, 137, 138, 139, 143, 145, 534], "sciencedirect": 134, "pii": 134, "0378111988903307": 134, "mit": 134, "meme_v4": 134, "clustalw": 134, "annot": [135, 138, 139, 202], "mark": [135, 138, 145, 869], "termin": [135, 275, 288, 444, 795], "comment": [135, 136, 138, 139, 140, 145, 146], "txt": [135, 146], "extens": 135, "seen": [135, 138, 715], "submit": [135, 136, 715], "ena": [135, 138], "assembl": 135, "flatfil": 135, "parent": [135, 139, 141, 146, 447, 531, 720, 722, 739, 742, 754, 757, 766, 774, 778, 787, 793, 796, 798, 799, 867], "metatdata": 135, "moment": [135, 589, 869], "1499": 135, "rn": [135, 145], "download": [135, 138, 146], "molecul": [135, 136, 138, 447, 484, 865], "thymin": [135, 138, 221, 274, 442], "uracil": [135, 138, 274, 390, 442], "embl_str": 135, "x56734": 135, "sv": 135, "mrna": 135, "std": [135, 705, 709, 714], "pln": [135, 146], "1859": 135, "bp": [135, 138], "xx": 135, "s46826": 135, "dt": 135, "sep": 135, "1991": 135, "29": [135, 137, 138], "85": [135, 142, 715, 797], "updat": [135, 136, 146, 202, 216, 447], "de": [135, 145], "trifolium": 135, "repen": 135, "cyanogen": 135, "glucosidas": 135, "kw": 135, "white": 135, "clover": 135, "oc": 135, "eukaryota": 135, "viridiplanta": 135, "streptophyta": 135, "embryophyta": 135, "tracheophyta": 135, "spermatophyta": 135, "magnoliophyta": 135, "eudicotyledon": 135, "gunnerida": 135, "pentapetala": 135, "rosid": 135, "fabid": 135, "fabal": 135, "fabacea": 135, "papilionoidea": 135, "trifoliea": 135, "rp": 135, "rx": 135, "1007": [135, 527, 533], "bf00039495": 135, "pubm": [135, 138, 447], "1907511": 135, "ra": [135, 145], "oxtobi": 135, "dunn": 135, "pancoro": 135, "hugh": 135, "rt": [135, 145], "linamaras": 135, "rl": [135, 145], "209": [135, 138, 589], "insdc": [135, 138, 192], "univers": [135, 136, 143, 149], "newcastl": 135, "upon": 135, "tyne": 135, "medic": 135, "school": 135, "ne2": 135, "4hh": 135, "dr": 135, "md5": [135, 827], "1e51ca3a5450c43524b9185c236cc5cc": 135, "qualifi": [135, 138], "mol_typ": [135, 138], "clone_lib": 135, "lambda": [135, 685, 711, 714, 715, 744, 757, 778, 781, 786, 797, 801, 802, 869], "gt10": 135, "clone": 135, "tre361": 135, "tissue_typ": 135, "db_xref": [135, 138], "3899": 135, "evid": [135, 141], "1495": 135, "ec_numb": 135, "21": [135, 142, 518, 527, 533, 704, 715], "goa": 135, "p26204": 135, "interpro": 135, "ipr001360": 135, "ipr013781": 135, "ipr017853": 135, "ipr033132": 135, "uniprotkb": 135, "swiss": 135, "prot": 135, "protein_id": 135, "caa40058": 135, "translat": [135, 138, 141, 146, 189, 274, 276, 278, 289, 339, 442, 445, 865], "mdfivaifalfvissftitstnaveastlldignlsr": 135, "sfprgfifgagssayqfegavneggrgpsiwdtfthkypekirdgsnaditv": 135, "dqyhrykedvgimkdqnmdsyrfsiswprilpkgklsgginhegikyynnli": 135, "nellangiqpfvtlfhwdlpqvledeyggflnsgvindfrdytdlcfkefgd": 135, "rvrywstlnepwvfsnsgyalgtnapgrcsasnvakpgdsgtgpyivthnqi": 135, "lahaeavhvyktkyqayqkgkigitlvsnwlmplddnsipdikaaersldfq": 135, "fglfmeqlttgdysksmrrivknrlpkfskfesslvngsfdfiginyysssi": 135, "isnapshgnakpsystnpmtnisfekhgiplgpraasiwiyvypymfiqedf": 135, "eifcyilkinitilqfsitengmnefndatlpveeallntyridyyyrhlyi": 135, "irsairagsnvkgfyawsfldcnewfagftvrfglnfvd": 135, "609": 135, "314": 135, "355": [135, 596], "581": 135, "aaacaaacca": 135, "aatatggatt": 135, "ttattgtagc": 135, "catatttgct": 135, "ctgtttgtta": 135, "ttagctcatt": 135, "cacaattact": 135, "tccacaaatg": 135, "cagttgaagc": 135, "ttctactctt": 135, "cttgacatag": 135, "gtaacctgag": 135, "tcggagcagt": 135, "tttcctcgtg": 135, "gcttcatctt": 135, "tggtgctgga": 135, "tcttcagcat": 135, "accaatttga": 135, "aggtgcagta": 135, "aacgaaggcg": 135, "gtagaggacc": 135, "aagtatttgg": 135, "gataccttca": 135, "cccataaata": 135, "tccagaaaaa": 135, "ataagggatg": 135, "gaagcaatgc": 135, "agacatcacg": 135, "gttgaccaat": 135, "atcaccgcta": 135, "caaggaagat": 135, "gttgggatta": 135, "tgaaggatca": 135, "aaatatggat": 135, "tcgtatagat": 135, "tctcaatctc": 135, "ttggccaaga": 135, "atactcccaa": 135, "agggaaagtt": 135, "gagcggaggc": 135, "ataaatcacg": 135, "aaggaatcaa": 135, "atattacaac": 135, "aaccttatca": 135, "acgaactatt": 135, "ggctaacggt": 135, "atacaaccat": 135, "ttgtaactct": 135, "ttttcattgg": 135, "gatcttcccc": 135, "aagtcttaga": 135, "agatgagtat": 135, "ggtggtttct": 135, "taaactccgg": 135, "tgtaataaat": 135, "gattttcgag": 135, "actatacgga": 135, "tctttgcttc": 135, "aaggaatttg": 135, "gagatagagt": 135, "gaggtattgg": 135, "agtactctaa": 135, "atgagccatg": 135, "ggtgtttagc": 135, "aattctggat": 135, "atgcactagg": 135, "aacaaatgca": 135, "ccaggtcgat": 135, "gttcggcctc": 135, "caacgtggcc": 135, "aagcctggtg": 135, "attctggaac": 135, "aggaccttat": 135, "atagttacac": 135, "acaatcaaat": 135, "tcttgctcat": 135, "gcagaagctg": 135, "tacatgtgta": 135, "taagactaaa": 135, "taccaggcat": 135, "atcaaaaggg": 135, "aaagataggc": 135, "ataacgttgg": 135, "tatctaactg": 135, "gttaatgcca": 135, "cttgatgata": 135, "atagcatacc": 135, "agatataaag": 135, "gctgccgaga": 135, "gatcacttga": 135, "cttccaattt": 135, "ggattgttta": 135, "tggaacaatt": 135, "aacaacagga": 135, "gattattcta": 135, "agagcatgcg": 135, "gcgtatagtt": 135, "aaaaaccgat": 135, "tacctaagtt": 135, "ctcaaaattc": 135, "gaatcaagcc": 135, "tagtgaatgg": 135, "ttcatttgat": 135, "tttattggta": 135, "taaactatta": 135, "ctcttctagt": 135, "tatattagca": 135, "atgccccttc": 135, "acatggcaat": 135, "gccaaaccca": 135, "gttactcaac": 135, "aaatcctatg": 135, "accaatattt": 135, "catttgaaaa": 135, "acatgggata": 135, "cccttaggtc": 135, "caagggctgc": 135, "ttcaatttgg": 135, "atatatgttt": 135, "atccatatat": 135, "gtttatccaa": 135, "gaggacttcg": 135, "agatcttttg": 135, "ttacatatta": 135, "aaaataaata": 135, "taacaatcct": 135, "gcaattttca": 135, "atcactgaaa": 135, "atggtatgaa": 135, "tgaattcaac": 135, "gatgcaacac": 135, "ttccagtaga": 135, "agaagctctt": 135, "ttgaatactt": 135, "acagaattga": 135, "ttactattac": 135, "cgtcacttat": 135, "actacattcg": 135, "ttctgcaatc": 135, "agggctggct": 135, "caaatgtgaa": 135, "gggtttttac": 135, "gcatggtcat": 135, "ttttggactg": 135, "taatgaatgg": 135, "tttgcaggct": 135, "ttactgttcg": 135, "ttttggatta": 135, "aactttgtag": 135, "attagaaaga": 135, "tggattaaaa": 135, "aggtacccta": 135, "agctttctgc": 135, "ccaatggtac": 135, "aagaactttc": 135, "tcaaaagaaa": 135, "ctagctagta": 135, "ttattaaaag": 135, "tagattacag": 135, "tacatcgttt": 135, "gaagttgagt": 135, "tggtgcacct": 135, "aattaaataa": 135, "aagaggttac": 135, "tcttaacata": 135, "tttttaggcc": 135, "attcgttgtg": 135, "aagttgttag": 135, "gctgttattt": 135, "ctattatact": 135, "atgttgtagt": 135, "aataagtgca": 135, "ttgttgtacc": 135, "agaagctatg": 135, "atcataacta": 135, "taggttgatc": 135, "cttcatgtat": 135, "cagtttgatg": 135, "ttgagaatac": 135, "tttgaattaa": 135, "aagtcttttt": 135, "ttattttttt": 135, "aaaaaaaaaa": 135, "aaaaaaaaa": 135, "dna_seq": [135, 136, 138], "cross_refer": 135, "date": 135, "dbsourc": 135, "locu": [135, 138, 146], "1740": 135, "1800": 135, "rna_seq": [135, 138], "aauauggauu": 135, "uuauuguagc": 135, "cauauuugcu": 135, "cuguuuguua": 135, "uuagcucauu": 135, "cacaauuacu": 135, "uccacaaaug": 135, "caguugaagc": 135, "uucuacucuu": 135, "cuugacauag": 135, "guaaccugag": 135, "agaagcuaug": 135, "aucauaacua": 135, "uagguugauc": 135, "cuucauguau": 135, "caguuugaug": 135, "uugagaauac": 135, "uuugaauuaa": 135, "aagucuuuuu": 135, "uuauuuuuuu": 135, "trascrib": 135, "verifi": [135, 147, 180, 185], "transcrib": [135, 138, 275, 276, 442, 865], "soppos": 135, "deal": [135, 188, 515, 526, 706, 863], "embl_gen": 135, "ftp": [135, 146, 192], "pub": [135, 146, 192], "releas": [135, 146], "usrman": 135, "view": 135, "displai": [135, 248, 263, 271, 278, 316, 328, 336, 365, 378, 386, 417, 432, 440, 447, 468, 475, 482, 592, 687], "brows": 135, "easi": [136, 137], "db": 136, "149855": 136, "cgatgtcgatcgatcgatcgatcag": 136, "34989": 136, "catcgatcgatcgatgcatgcatgcatg": 136, "accompani": [136, 535, 804], "particuarli": 136, "instrument": 136, "phred": [136, 137], "nonneg": 136, "deflin": 136, "split": [136, 137, 143, 145], "blank": [136, 137, 141, 142, 143, 504, 551, 577], "whitespac": [136, 137, 140, 142, 145], "trail": [136, 137, 140], "semicolon": [136, 139], "resembl": 136, "request": [136, 495, 510, 546, 556, 570, 583, 752, 826, 863], "tracker": [136, 160], "pull": 136, "welcom": 136, "greater": [136, 202, 222, 291, 340, 391, 448, 587, 589, 590, 591, 592, 595, 714, 715, 716], "immedi": [136, 143, 764], "repect": 136, "strictli": [136, 518, 532, 743], "enforc": [136, 447], "itself": [136, 143, 146, 190, 192, 221, 278, 339, 390, 447, 484, 595, 687, 722, 802, 865], "standard": [136, 137, 139, 141, 275, 276, 278, 288, 289, 444, 445, 488, 515, 518, 539, 563, 588, 589, 702, 705, 708, 709, 863, 865], "remaind": 136, "iupac": [136, 137, 143, 144, 221, 251, 278, 288, 339, 390, 420, 447, 865], "lexicon": [136, 137, 143], "sciki": 136, "newlin": [136, 141, 143, 147, 149, 180, 181, 185, 186, 189], "additon": 136, "maintain": [136, 141, 147, 576, 700, 701, 711, 714], "futur": 136, "path": [136, 137, 144, 189, 738, 826], "seq_num": [136, 137, 138, 139, 144], "50th": [136, 518], "id_whitespace_replac": [136, 137], "disk": [136, 535], "potenti": [136, 261, 326, 376, 430, 473, 685, 781, 803, 869], "description_newline_replac": [136, 137], "max_width": 136, "width": [136, 140, 143], "longer": [136, 143, 515, 715], "caveat": [136, 515], "never": [136, 145], "exce": [136, 143], "12345": [136, 447], "better": [136, 700, 701, 863], "runtim": [136, 221, 339, 390, 828, 869], "affect": [136, 141, 278, 279, 285, 447, 587, 591], "five": [136, 146, 504, 518, 551, 577, 802], "turkei": [136, 143], "aagctngggcatttcagggtgagcccgggcaatacagggtat": 136, "salmo": [136, 143], "gair": 136, "aagccttggcagtgcagggtgagccgtgg": 136, "ccgggcacggtat": 136, "sapien": 136, "accggttggccgttcagggtacaggttggccgttcagggtaa": 136, "seq4": 136, "chimp": [136, 143], "aaacccttgccg": 136, "ttacgcttaaac": 136, "cgaggccgggac": 136, "actcat": 136, "seq5": 136, "gorilla": [136, 143], "aaacccttgccggtacgcttaaaccattgccggtacgcttaa": 136, "copyright": [136, 143], "1986": [136, 141, 143, 701], "2008": [136, 143], "washington": [136, 141, 143, 801, 802], "joseph": [136, 143, 867], "felsenstein": [136, 143, 867], "permiss": [136, 141, 143], "grant": [136, 143], "fee": [136, 143], "charg": [136, 143], "fl": 136, "presum": 136, "aagccttggcagtgcagggtgagccgtggccgggcacggtat": 136, "aaacccttgccgttacgcttaaaccgaggccgggacactcat": 136, "didn": [136, 869], "detect": [136, 138, 181, 186, 518, 589, 715], "infeas": 136, "stream": [136, 139, 863], "loop": [136, 798, 799], "aagctngggc": [136, 143], "atttcagggt": [136, 143], "gagcccgggc": [136, 143], "aatacagggt": [136, 143], "aagccttggc": 136, "agtgcagggt": [136, 143], "gagccgtggc": [136, 143], "cgggcacggt": [136, 143], "accggttggc": 136, "cgttcagggt": [136, 143], "acaggttggc": [136, 143], "aaacccttgc": [136, 143], "cgttacgctt": [136, 143], "aaaccgaggc": [136, 143], "cgggacactc": [136, 143], "cggtacgctt": [136, 143], "aaaccattgc": [136, 143], "fifth": 136, "api": [136, 183, 512], "standalon": 136, "cgatgtc": 136, "catcgtc": 136, "39": [136, 142, 531], "79": [136, 139, 142], "fasta_fl": 136, "qual_fl": 136, "uint8": [136, 137, 144, 221, 223, 240, 244, 259, 260, 265, 266, 267, 268, 292, 308, 312, 325, 330, 331, 332, 333, 339, 341, 357, 361, 375, 380, 381, 382, 383, 390, 392, 409, 413, 428, 429, 434, 435, 436, 437, 447, 449, 465, 466, 472, 477, 478, 479, 480], "new_fasta_fh": 136, "new_qual_fh": 136, "dj": 136, "pearson": [136, 589, 592, 595, 747], "wr": [136, 595], "1985": [136, 221, 290, 339, 390, 447], "sensit": [136, 264, 329, 379, 433, 476], "4693": 136, "1435": 136, "41": [136, 142], "en": [136, 137, 145, 802], "wikipedia": [136, 137, 145, 802, 867], "wiki": [136, 137, 143, 145, 802], "fasta_format": 136, "blastcgihelp": 136, "shtml": 136, "broadinstitut": 136, "crd": 136, "php": 136, "madden": 136, "oct": [136, 138], "2003": [136, 515], "aug": 136, "mcentyr": 136, "ostel": 136, "editor": 136, "handbook": 136, "internet": [136, 146], "bethesda": 136, "md": 136, "nation": [136, 146, 496], "center": [136, 146, 519, 588, 700, 702, 706, 709], "biotechnologi": [136, 146], "chapter": [136, 707], "nbk21097": 136, "evolut": [136, 141, 143, 594, 595, 742, 801, 802], "genet": [136, 141, 143, 146, 275, 276, 278, 279, 285, 286, 287, 288, 289, 444, 445, 594, 801, 802, 865], "invent": 137, "jim": 137, "mullikin": 137, "wellcom": 137, "trust": 137, "sanger": 137, "institut": 137, "formal": [137, 146, 515], "conceptu": [137, 590], "aacaccaaacttctccaccacgtgagctacaaaag": 137, "cabcacc": 137, "lb": 137, "ccyt": 137, "wf": [137, 869], "tatgtatatataacatatacatatatacatacata": 137, "kz": 137, "py": [137, 147], "yy": 137, "bt": 137, "aT": 137, "bbb": 137, "printabl": [137, 144], "ascii": [137, 144, 147, 740, 867], "decod": [137, 189], "excel": 137, "supplementari": [137, 518], "solexa": 137, "unfortun": [137, 714], "notabl": 137, "illumina": [137, 144], "tabl": [137, 138, 146, 275, 276, 278, 287, 288, 289, 444, 445, 518, 686, 700, 701, 707, 708, 828, 865], "highlight": 137, "foundat": 137, "obf": 137, "biopython": 137, "bioperl": [137, 143], "offset": [137, 138], "126": 137, "93": 137, "illumina1": [137, 144], "later": [137, 713], "59": 137, "Not": [137, 221, 591], "truncat": [137, 494, 545, 569, 696, 802, 869], "outsid": [137, 192, 216, 248, 316, 365, 417, 468], "phred_offset": [137, 144], "convers": [137, 189, 571], "explicit": 137, "whenev": [137, 706], "aacaccaaacttctccacc": 137, "acgtgagctacaaaag": 137, "reload": 137, "tatgtatata": 137, "taacatatac": 137, "atatatacat": 137, "acata": 137, "new_fh": 137, "ffffx": 137, "ab": [137, 290], "bbf": 137, "ka": 137, "bbx": 137, "jyzox": 137, "zxx": 137, "fff": 137, "fasffbf": 137, "sffaaa": 137, "peter": 137, "cock": 137, "christoph": 137, "naohisa": 137, "goto": 137, "michael": 137, "heuer": 137, "rice": 137, "nucl": 137, "1767": 137, "1771": 137, "publish": [137, 145], "decemb": 137, "2009": [137, 138, 595], "1093": 137, "nar": 137, "gkp1137": 137, "oxfordjourn": 137, "fastq_format": 137, "flat": [138, 261, 326, 376, 430, 473], "gbk": 138, "renam": [138, 257, 269, 323, 334, 372, 384, 426, 438], "genpept": 138, "essenti": 138, "collabor": 138, "joint": 138, "effort": 138, "ddbj": 138, "organis": 138, "layout": 138, "webpag": 138, "interval_metadata": [138, 139, 192, 202, 214, 217, 221, 226, 228, 255, 290, 295, 297, 321, 339, 344, 346, 370, 390, 395, 397, 424, 447, 452, 454, 469], "sub": [138, 139, 192, 716], "keep": [138, 215, 228, 297, 346, 397, 454, 685, 784, 785], "vocabulari": [138, 139], "infer": [138, 180, 185, 826, 863], "whose": [138, 144, 503, 550, 575, 588, 589, 709], "stranded": 138, "codon_start": 138, "phase": [138, 139], "codon": [138, 146, 275, 278, 288, 289, 339, 444, 484], "dbxref": [138, 139], "cross": 138, "descriptor": [138, 707, 822, 823, 824], "explain": [138, 139, 142, 531, 596, 630, 674, 686, 687, 700, 706, 708], "67": [138, 142, 238, 245, 272, 313, 362, 407, 414, 441, 587, 591, 701, 711, 865], "66": [138, 142, 245, 313, 362, 414, 591, 865], "neighbor": [138, 787, 802], "68": [138, 596, 714], "insid": [138, 141], "remot": 138, "j00123": 138, "discard": [138, 589], "200": 138, "kept": 138, "199": 138, "__locat": 138, "__": 138, "privat": [138, 740], "gb_str": 138, "3k1v_a": 138, "34": [138, 144, 742], "syn": 138, "chain": 138, "Of": 138, "mutant": 138, "preq1": 138, "260656459": 138, "synthet": 138, "artifici": [138, 686], "klein": 138, "edward": 138, "ferr": 138, "amar": 138, "cocryst": 138, "riboswitch": [138, 192], "nat": 138, "343": 138, "344": 138, "19234468": 138, "seqr": 138, "32630": 138, "misc_bind": 138, "bound_moieti": 138, "agaggttcta": 138, "gcacatccct": 138, "ctataaaaaa": 138, "ctaa": 138, "agagguucua": 138, "gcacaucccu": 138, "cuauaaaaaa": 138, "cuaa": 138, "sitemap": 138, "samplerecord": 138, "feature_t": 138, "webfeat": 138, "nuccor": 138, "delimit": [139, 140, 142, 144, 146, 534], "intervalmetadata": [139, 192, 201, 221, 290, 339, 390, 447], "seq_id": 139, "seqid": 139, "attr": [139, 765, 793], "tag": [139, 145, 245, 273, 313, 337, 362, 388, 414, 443, 531], "comma": [139, 140, 141], "predefin": [139, 244, 312, 361, 413, 466], "mean": [139, 141, 147, 189, 202, 217, 221, 250, 251, 419, 420, 495, 510, 515, 518, 521, 531, 546, 556, 570, 583, 652, 674, 700, 704, 705, 706, 709, 711, 712, 714, 715, 863, 867], "derives_from": 139, "ontology_term": 139, "is_circular": 139, "And": [139, 221, 339, 515, 865], "parser": [139, 141], "skip_subregion": 139, "contigu": [139, 192, 261, 326, 376, 430, 473], "region": [139, 192, 202, 261, 326, 376, 430, 473], "exon": [139, 192, 264, 329, 379, 390, 433, 447, 476], "gff_str": 139, "gff": 139, "seq_1": 139, "tgene": 139, "t10": [139, 142], "t90": 139, "tid": 139, "gen1": 139, "texon": 139, "t30": [139, 144], "tparent": 139, "t50": 139, "seq_2": 139, "t80": 139, "t96": 139, "gen2": 139, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 139, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 139, "im": [139, 202, 214], "4604421736": 139, "fuzzi": [139, 192, 193, 201, 202, 213, 214, 447], "foo": [139, 202, 447, 827, 869], "gen": [139, 869], "4603377592": 139, "4603378712": 139, "atgcatgcat": 139, "gcatgcatgc": 139, "120": 139, "ontologi": 139, "tsv": 140, "varieti": 140, "serial": [140, 534, 687, 863], "del": [140, 686], "anywher": [140, 141, 518], "easili": [140, 865], "program": [140, 141, 146], "spreadsheet": 140, "edg": [141, 595, 700, 740, 793], "minim": 141, "june": 141, "english": [141, 589], "subtre": [141, 146, 757, 867], "node_info": 141, "children": [141, 532, 722, 727, 731, 739, 743, 754, 756, 763, 767, 774, 778, 780, 787], "null": [141, 518, 595, 711], "comment_char": 141, "all_char": 141, "safe_char": 141, "decim": [141, 806], "vice": [141, 595], "versa": [141, 595], "escap": 141, "nest": [141, 534, 589, 789, 867], "semi": 141, "colon": 141, "recal": 141, "alon": [141, 588], "imagin": 141, "parenthesi": 141, "insert": [141, 213, 743], "abil": 141, "child": [141, 202, 239, 307, 356, 408, 464, 531, 722, 743, 774, 778, 796, 867], "bifurc": [141, 532, 759], "alreadi": [141, 145, 147, 148, 159, 160, 161, 447, 535, 589], "who": [141, 715], "sibl": [141, 239, 307, 356, 408, 464], "multifurc": [141, 867], "notat": [141, 339], "recurs": [141, 740, 798, 799], "infinitum": 141, "clariti": 141, "estrang": 141, "omit": [141, 534, 760, 794, 796, 801, 863], "still": [141, 142, 189, 201, 518, 526, 589, 591], "happen": [141, 261, 326, 376, 430, 473, 801, 869], "expon": 141, "due": [141, 216, 526, 588, 591, 701, 714], "disallow": [141, 145, 589], "stricter": [141, 805], "obviou": 141, "yet": [141, 146, 147], "underscor": [141, 143], "liter": 141, "regular": [141, 247, 273, 315, 337, 364, 388, 416, 443, 467, 865], "quot": 141, "surround": 141, "a_1": 141, "_1": 141, "commonli": [141, 484, 591, 708, 867], "unpair": 141, "worri": 141, "properli": [141, 189], "un": 141, "permit": [141, 160], "isomorph": [141, 521, 522, 523, 524], "convert_underscor": 141, "unescap": 141, "extern": 141, "ascii_art": [141, 743, 760, 761, 802, 867], "complex": [141, 869], "b_b": 141, "d_d": 141, "becam": 141, "preserv": [141, 700, 701, 706, 784], "newick_doc": 141, "newicktre": 141, "variou": [142, 534, 687, 711, 866, 868], "rda": [142, 687, 700, 701], "cca": [142, 686, 687, 700, 708], "ordinationresult": [142, 591, 700, 701, 706, 707, 708, 806], "six": [142, 276, 278, 289, 445], "eigval": [142, 687], "biplot": [142, 700, 708], "constraint": [142, 687, 701, 708], "07": 142, "08": [142, 711, 714], "46": [142, 590, 715], "species0": 142, "species1": 142, "species2": 142, "01": [142, 711], "09": 142, "species3": 142, "03": [142, 591], "species4": 142, "species5": 142, "species6": 142, "species7": 142, "species8": 142, "70": 142, "69": 142, "site0": 142, "site1": [142, 686], "site2": [142, 686], "site3": [142, 686], "site4": [142, 686], "97": 142, "06": 142, "61": [142, 591, 715], "site5": [142, 686], "04": [142, 711], "site6": [142, 686], "site7": [142, 686], "52": 142, "site8": [142, 686], "47": [142, 711], "site9": [142, 686], "74": 142, "32": [142, 590], "78": [142, 797], "55": [142, 242, 310, 359, 411, 591, 596, 711, 802], "02": [142, 146, 518], "declar": 142, "or_f": 142, "t4": 142, "t9": 142, "t2": [142, 144], "ord_r": 142, "joe": 143, "raxml": 143, "gairaagccttggc": 143, "sapiensaccggttggc": 143, "relax": 143, "interleav": [143, 145], "1x1": 143, "reach": 143, "11th": 143, "reserv": 143, "nucleic": [143, 146, 221, 290, 339, 390, 447], "older": 143, "chunk": 143, "2a": 143, "agagttgaag": 143, "gtatct": 143, "surpass": 143, "recent": [143, 288, 447, 589], "_except": 143, "phylipformaterror": 143, "shorter": 143, "post": [143, 711, 715], "phylogeni": [143, 594, 595], "phylo": 143, "obsolet": 143, "phylip_multiple_alignment_format": 143, "machin": 144, "lane": 144, "tile": 144, "casava": 144, "ommit": 144, "clear": 144, "exclud": [144, 531, 574, 581, 787], "acgtac": 144, "rubbbbrbcefgh": 144, "cgggcattgca": 144, "cgggcasdgca": 144, "acgta": 144, "aataaac": 144, "getaaafhwqaaf": 144, "catttagga": 144, "tgca": 144, "tjflkafnkkghvm": 144, "t3": 144, "t34": 144, "tacg": 144, "trubbbbrbcefgh": 144, "tcgggcattgca": 144, "tcgggcasdgca": 144, "t35": 144, "tacgta": 144, "tgetaaafhwqaaf": 144, "tcatttagga": 144, "ttjflkafnkkghvm": 144, "illumina_1": 144, "lane_numb": 144, "machine_nam": 144, "read_numb": 144, "run_numb": 144, "tile_numb": 144, "tac": 144, "aata": 144, "aac": 144, "biowulf": 144, "app": 144, "casava_ug_15011196b": 144, "pdf": 144, "upsk": 145, "se": 145, "infern": 145, "ss": 145, "pmid": [145, 589, 802], "9223489": 145, "rm": [145, 597, 663], "role": [145, 484, 714], "pseudoknot": 145, "turnip": 145, "yellow": 145, "mosaic": 145, "viru": 145, "synthesi": 145, "viral": 145, "polymeras": 145, "deiman": 145, "ba": 145, "kortlev": 145, "pleij": 145, "cw": 145, "virol": 145, "5990": 145, "5996": 145, "af035635": 145, "619": 145, "641": 145, "ugaguucucgaucucuaaaaucg": 145, "m24804": 145, "104": 145, "ugaguucucuaucucuaaaaucg": 145, "j04373": 145, "6212": 145, "6234": 145, "uaaguucucgaucuuuaaaaucg": 145, "m24803": 145, "uaaguucucgaucucuaaaaucg": 145, "ss_con": 145, "aaa": [145, 261, 326, 376, 430, 473], "ggt": [145, 271, 336, 386, 440, 482], "accgttcg": 145, "pfam": 145, "rfam": 145, "whole": [145, 704, 712], "come": [145, 595, 789], "cb": [145, 713], "domain": [145, 339, 760, 794], "nh": 145, "tn": 145, "unlik": [145, 685], "nhx": 145, "rc": [145, 238, 407, 504, 551, 577, 697], "kestrel": 145, "gorlick": 145, "medlin": 145, "o83071": 145, "259": 145, "312": 145, "083071": 145, "o31698": 145, "ccchhhhhhhhhhhhhhh": 145, "eeeeeeee": 145, "eeeeeeeehhh": 145, "ccccchhhhhhhhhhhhh": 145, "eeeeeeeeeeh": 145, "final": [145, 595, 869], "cc": [145, 271, 278, 336, 386, 440, 482], "intracellular": 145, "mostli": 145, "192": 145, "88": [145, 591, 714], "139": 145, "bacillu": 145, "subtili": 145, "mtcraqliavprassla": 145, "aiacaqkm": 145, "rvsrv": 145, "sa": 145, "999887756453524252": 145, "55152525": 145, "36463": 145, "mqhvsapvfvfectrlai": 145, "vqhklrah": 145, "srava": 145, "mieadkvahvqvgnnleh": 145, "allvltkt": 145, "gytai": 145, "evmltdiprlhindpimk": 145, "gfgmvinn": 145, "gfv": 145, "o31699": 145, "AS": 145, "________________": 145, "____________________": 145, "IN": 145, "____________1______________2_________": 145, "eeeee": 145, "ordereddict": 145, "stockholm_format": 145, "sonnhamm": 145, "sbc": 145, "su": 145, "dump": [146, 867, 869], "classif": [146, 697], "pipe": 146, "host": [146, 595], "portal": 146, "daili": 146, "archiv": [146, 827], "month": 146, "pattern": [146, 247, 273, 315, 337, 364, 388, 416, 443, 467, 865, 869], "taxid": 146, "citat": 146, "hierarch": [146, 531], "tax_id": [146, 760], "superkingdom": 146, "prefix": 146, "inherit": [146, 290, 447], "div": 146, "flag": [146, 867], "mitochondri": [146, 275, 287, 444], "mgc": 146, "hidden": 146, "suppress": [146, 587, 591, 592], "lineag": [146, 714, 761, 794], "free": [146, 828, 869], "2018": 146, "new_taxdump": 146, "compat": [146, 278], "classic": 146, "plu": [146, 221, 339, 390], "extra": [146, 147, 587, 588, 590, 591, 652], "aforement": 146, "plastid": 146, "pgc": 146, "specified_": 146, "hydrogenosom": 146, "hgc": 146, "name_txt": 146, "synonym": 146, "cde": 146, "bct": 146, "vrt": 146, "mam": 146, "pri": 146, "abbrevi": [146, 687], "scheme": [146, 189, 504, 551, 577], "nodes_new": 146, "nodes_slim": 146, "parent_tax_id": [146, 760], "leftmost": 146, "till": 146, "crop": 146, "tno": 146, "t131567": 146, "tsuperkingdom": 146, "t335928": 146, "tgenu": 146, "131567": 146, "335928": 146, "genu": 146, "federhen": 146, "research": [146, 589, 706], "d1": [146, 865], "d136": 146, "d143": 146, "schoch": 146, "ciufo": 146, "domrachev": 146, "hotton": 146, "kannan": 146, "khovanskaya": 146, "karsch": 146, "mizrachi": 146, "2020": 146, "comprehens": 146, "curat": 146, "kan": 146, "2022": 146, "entrez": 146, "direct": [146, 701, 722], "unix": 146, "command": [146, 288], "help": 146, "taxdump_readm": 146, "ncbiinsight": 146, "ioregistri": [147, 159, 161], "io_registri": 147, "focu": 147, "tutori": 147, "submodul": 147, "myformat": [147, 159, 160, 161], "create_format": [147, 159, 160, 161], "factori": [147, 159, 160, 161, 173, 184], "ideal": 147, "At": 147, "evaul": 147, "binari": [147, 149, 159, 160, 161, 189, 531, 532, 595, 700, 708, 795, 827], "readi": [147, 862], "decor": [147, 159, 160, 161, 202, 290, 744, 801, 808, 828, 840, 851, 862], "onto": [147, 179, 707, 801], "_myformat_sniff": 147, "membership": 147, "futher": 147, "someskbioclass": [147, 863], "_myformat_to_some_skbio_class": 147, "kwarg1": 147, "filesentinel": [147, 159, 161], "auxilari": 147, "_some_skbio_class_to_myformat": 147, "obj": [147, 161, 182, 187, 819, 869], "whatev": 147, "receiv": [147, 149, 160, 248, 316, 365, 417, 468, 801], "further": [147, 714, 867], "fileformaterror": 147, "satisfi": [147, 217, 713, 851], "__init__": [147, 159, 161], "execut": [147, 608, 652, 829, 851, 869], "import_modul": 147, "boilerpl": 147, "busi": 147, "logic": [147, 828], "arg": [147, 173, 184, 275, 276, 339, 444, 445], "compress": [147, 189], "compresslevel": [147, 189], "auth": 147, "password": 147, "buffer": [147, 189, 685], "buffer_s": 147, "closefd": 147, "exclus": [147, 192, 202, 213, 240, 259, 308, 325, 357, 375, 409, 428, 465, 472, 518], "handler": [149, 180, 182, 185, 187, 189], "bufferedread": [149, 159, 160, 189], "bufferedwrit": [149, 161, 189], "textiobas": [149, 159, 160, 161, 189], "unabl": 149, "is_binary_format": 149, "monkey_patched_read": 149, "monkei": [149, 179], "patch": [149, 179], "monkey_patched_writ": 149, "sniffer_funct": 149, "cl": [159, 161, 174, 176, 177, 178, 290, 812], "monkey_patch": [159, 161], "transform": [159, 161, 261, 326, 376, 430, 473, 515, 516, 517, 521, 522, 523, 524, 527, 532, 700, 706, 708], "attach": [159, 161, 742], "overriden": [159, 160, 161], "duplicateregistrationerror": [159, 160, 161], "add_format": [159, 161], "myobject": [159, 161], "myformat_read": [159, 161], "readlin": [159, 189], "myformat2": [159, 160, 161], "thrown": [160, 762], "ask": 160, "myformat_sniff": 160, "default_write_format": 161, "format_object": 172, "regsistri": [173, 184], "format_nam": [174, 175, 176], "useabl": 179, "unrecognizedformaterror": [180, 181, 182, 185, 186, 187], "formatidentificationwarn": [180, 185], "agre": [180, 185], "member": [180, 185, 828, 851, 869], "argumentoverridewarn": [180, 185], "claim": [181, 186], "registr": 183, "auto": 189, "bytesio": [189, 190, 827], "textiowrapp": 189, "bufferedrandom": 189, "tempfil": 189, "temporaryfil": 189, "namedtemporaryfil": 189, "writabl": 189, "unwrit": 189, "unread": 189, "byte": [189, 271, 336, 386, 440, 482], "gzip": 189, "bz2": 189, "decompress": 189, "transpar": 189, "legal": 189, "inclus": [189, 192, 202, 213, 240, 259, 308, 325, 357, 375, 409, 428, 465, 472, 588], "manag": [189, 190], "closeabl": 189, "garbag": 189, "reflect": [189, 595, 778, 783], "flush": 189, "clean": [189, 739, 778], "bzh91ai": 190, "sy": 190, "x03": 190, "x89": 190, "x0c": 190, "xa6": 190, "x00": 190, "x01": 190, "xc1": 190, "x108": 190, "x9ah3m": 190, "x1c": 190, "xb7": 190, "x8b": 190, "xb9": 190, "x9c": 190, "xc4": 190, "x86": 190, "nb": 190, "nc": 190, "plural": 191, "transcript": 192, "operon": 192, "accommod": 192, "gene_nam": 192, "product": [192, 525, 589, 862], "easier": [192, 484], "ft_current": 192, "hypothet": 192, "sai": [192, 202, 715], "gena": 192, "nt": 192, "shown": [192, 518, 700], "diagram": 192, "tggattctgc": 192, "0123456789": 192, "rememb": 192, "drop": [192, 202, 228, 297, 346, 397, 454, 592, 686, 701, 781, 801], "matter": [193, 214, 488, 539, 563], "setter": 201, "copy_from": 202, "storag": 202, "modif": [202, 595], "cover": [202, 496, 867], "coupl": 202, "unbound": [202, 216], "speed": [202, 706], "build": [202, 531], "defer": 202, "until": [202, 531, 785], "fetch": [202, 867], "_interval_tre": 202, "_rebuild_tre": 202, "stale": 202, "delet": [202, 765, 781, 809], "_is_stale_tre": 202, "sagb": [202, 214], "sagc": 202, "saga": [202, 214, 447], "intvl": 202, "num_interval_featur": 202, "interablemetadata": 214, "shift": 214, "im1": 214, "im2": 214, "negat": 215, "middl": 216, "live": 216, "reca": 217, "900": 217, "1000": [217, 685], "criteria": [217, 713, 797], "front": [219, 531], "uppercas": [221, 339, 390, 447], "turn": [221, 339, 390, 708, 805, 869], "behav": [221, 339, 390, 589], "compliant": [221, 339, 390], "canon": [221, 339, 390, 484, 686, 701, 708, 862], "nucleobas": [221, 390], "adenin": [221, 390], "cytosin": [221, 390], "guanin": [221, 390], "purin": [221, 246, 314, 363, 415, 865], "pyrimidin": [221, 246, 415], "weak": 221, "keto": 221, "inosin": 221, "break": [221, 339, 390], "nomenclatur": [221, 290, 339, 390, 447], "incomplet": [221, 290, 339, 390, 447], "3021": [221, 290, 339, 390, 447], "3030": [221, 290, 339, 390, 447], "cornish": [221, 290, 339, 390, 447], "bowden": [221, 290, 339, 390, 447], "accgaat": 221, "86": [221, 390], "complement_map": [221, 238, 390, 407], "complement": [221, 260, 272, 288, 390, 429, 441, 865], "definite_char": [221, 290, 339, 390], "degenerate_char": [221, 290, 339, 390], "degenerate_map": [221, 245, 290, 313, 339, 362, 390, 414, 865], "gap_char": [221, 242, 290, 310, 339, 359, 390, 411], "nondegenerate_char": [221, 290, 339, 390], "observed_char": [221, 248, 290, 316, 339, 365, 390, 417, 447, 468], "truth": [222, 291, 340, 391, 448], "truthi": [222, 291, 340, 391, 448], "put": [223, 292, 341, 392, 449], "ggucgugaagga": [223, 228, 292, 297, 341, 346, 392, 397, 447, 449, 454], "ggu": [223, 292, 341, 392, 449], "ccc": [223, 292, 341, 392, 449], "aagga": [228, 297, 346, 397, 454], "cgagc": [228, 297, 346, 397, 454], "ggucg": [228, 240, 297, 308, 346, 357, 397, 409, 454, 465], "guc": [228, 297, 346, 397, 454], "gguc": [231, 233, 236, 244, 265, 266, 267, 268, 300, 302, 305, 312, 330, 331, 332, 333, 349, 351, 354, 361, 380, 381, 382, 383, 400, 402, 405, 413, 434, 435, 436, 437, 457, 459, 462, 466, 477, 478, 479, 480], "ggucguaaagga": [237, 306, 355, 406, 463], "hello": [237, 306, 355, 406, 463], "nucleotidemixin": [238, 272, 407, 441], "reverse_compl": [238, 260, 407, 429, 865], "ttcatt": [238, 260, 272, 407, 429, 441], "aagtaa": [238, 407], "aatgaa": [238, 260, 272, 407, 429, 441], "intersect": [239, 307, 356, 408, 464, 723, 724, 748, 751], "ggaa": [239, 307, 356, 408, 464], "acgtggaa": [239, 307, 356, 408, 464], "coercion": [239, 307, 356, 408, 464], "gg": [240, 246, 308, 314, 357, 363, 409, 415, 465], "has_definit": [241, 243, 253, 257, 269, 309, 311, 319, 323, 334, 358, 360, 368, 372, 384, 410, 412, 422, 426, 438], "acwgn": [241, 243, 269, 309, 311, 334, 358, 360, 384, 410, 412, 438], "ggtc": [242, 310, 359, 411], "att": [242, 310, 359, 411], "ggtccattc": [242, 310, 359, 411], "has_degener": [243, 252, 257, 311, 318, 323, 360, 367, 372, 412, 421, 426], "ham": [244, 312, 361, 413, 466, 534, 865], "fraction_diff": [244, 312, 361, 413, 466], "fraction_sam": [244, 312, 361, 413, 466], "aguc": [244, 265, 267, 312, 330, 332, 361, 380, 382, 413, 434, 436, 466, 477, 479], "custom_metr": [244, 312, 361, 413, 466], "trg": [245, 273, 313, 337, 362, 388, 414, 443], "seq_gener": [245, 313, 362, 414], "tgg": [245, 273, 313, 337, 362, 388, 414, 443], "motif_typ": [246, 314, 363, 415], "min_length": [246, 261, 314, 326, 363, 376, 415, 430, 473, 865], "motif": [246, 314, 363, 415, 865], "acggggaggcggag": [246, 314, 363, 415], "motif_slic": [246, 314, 363, 415], "ggggagg": [246, 314, 363, 415], "ggag": [246, 314, 363, 415], "disrupt": [246, 314, 363, 415, 865], "regex": [247, 273, 315, 337, 364, 388, 416, 443, 467], "compil": [247, 273, 315, 337, 364, 388, 416, 443, 467, 716], "pre": [247, 273, 315, 337, 364, 388, 416, 443, 467, 484, 496, 501, 715], "aatataccggttataa": [247, 315, 364, 416, 467], "tata": [247, 315, 364, 416, 467], "tataa": [247, 315, 364, 416, 467], "char": [248, 273, 316, 337, 365, 388, 417, 443, 468], "kmer_frequ": [248, 316, 365, 417, 468], "iter_km": [248, 316, 365, 417, 468], "pprint": [248, 263, 316, 328, 365, 378, 417, 432, 447, 468, 475, 793], "agaagacc": [248, 316, 365, 417, 468], "freq": [248, 263, 316, 328, 365, 378, 417, 432, 468, 475], "has_gap": [249, 317, 366, 418], "gc_frequenc": [250, 419], "degap": [250, 251, 419, 420, 865], "acgtacgt": [250, 419], "acttagtt": [250, 419], "asst": [250, 251, 419, 420], "rykmbdhvn": [250, 251, 419, 420], "stand": [251, 420, 589], "ie": [251, 420], "gc_content": [251, 420], "nwnnnnnn": [252, 257, 318, 323, 367, 372, 421, 426], "ancacwwgacgtt": [252, 253, 257, 318, 319, 323, 367, 368, 372, 421, 422, 426], "acac": [253, 262, 319, 327, 368, 377, 422, 431, 474], "gacgtt": [253, 254, 319, 320, 368, 369, 422, 423], "acacgacgtt": [254, 259, 262, 320, 325, 327, 369, 375, 377, 423, 428, 431, 472, 474], "cac": [254, 262, 320, 327, 369, 377, 423, 431, 474], "aatgtt": [260, 429], "invert": [261, 326, 376, 430, 473], "skip": [261, 326, 376, 430, 473, 587, 589, 590, 591, 595], "adjac": [261, 326, 376, 430, 473], "ungap": [261, 326, 376, 430, 473], "cccc": [261, 326, 376, 430, 473], "no_gap": [261, 326, 376, 430, 473], "ungapped_subsequ": [261, 326, 376, 430, 473], "find_motif": [261, 326, 376, 430, 473, 865], "find_with_regex": [261, 326, 376, 430, 473, 865], "acdfnasanftacgnpnrtesl": [261, 326, 376, 430, 473], "subseq": [261, 326, 376, 430, 447, 473], "glycosyl": [261, 326, 363, 376, 430, 473, 865], "nasanfta": [261, 326, 376, 430, 473], "nrte": [261, 326, 376, 430, 473], "kmer": [262, 263, 327, 328, 377, 378, 431, 432, 474, 475, 514], "gacg": [262, 327, 377, 431, 474], "aca": [262, 263, 327, 328, 377, 378, 431, 432, 474, 475], "cga": [262, 327, 377, 431, 474], "gac": [262, 327, 377, 431, 474], "cgt": [262, 327, 377, 431, 474], "gtt": [262, 327, 377, 431, 474], "acacatttatta": [263, 328, 378, 432, 475], "cat": [263, 328, 378, 432, 475, 713, 714], "tta": [263, 328, 378, 432, 475], "intron": [264, 329, 379, 390, 433, 476], "mismatch_frequ": [265, 330, 380, 434, 477, 865], "gauu": [266, 268, 331, 333, 381, 383, 435, 437, 478, 480], "match_frequ": [267, 332, 382, 436, 479, 865], "chosen": [271, 336, 386, 440, 482, 526, 588, 697, 708, 716], "ggtaccaacg": [271, 336, 386, 440, 482], "is_reverse_compl": [272, 441], "within_captur": [273, 337, 388, 443], "account": [273, 337, 388, 443, 630, 700, 708, 715, 867], "captur": [273, 337, 388, 443], "tcg": [273, 337, 388, 443], "translate_six_fram": [274, 275, 288, 442, 444], "taacgtta": [274, 442], "uaacguua": [274, 442], "reverse_transcrib": 275, "atgccactttaa": [275, 276], "mpl": [275, 276, 278, 288, 289, 444, 445], "yeast": [275, 444], "mpt": [275, 444], "independ": [276, 289, 445, 595, 607, 608, 629, 640, 673, 684, 795], "reading_fram": [276, 278, 288, 289, 445], "rf": [276, 289, 445], "geneticcod": [276, 444, 445, 865], "chf": [276, 289, 445], "atl": [276, 289, 445], "lkwh": [276, 289, 445], "sg": [276, 289, 445], "kva": [276, 289, 445], "amino_acid": [278, 279, 285], "from_ncbi": [278, 279, 288, 289, 444, 445], "uuuuuuuuuuuuuuuuccccccccccccccccaaaaaaaaaaaaaaaagggggggggggggggg": 278, "uuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggg": 278, "ucagucagucagucagucagucagucagucagucagucagucagucagucagucagucagucag": 278, "wprintgc": [278, 286, 287], "ffllssssyi": 278, "wllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 278, "base1": 278, "base2": 278, "base3": 278, "candid": [278, 715], "divis": [278, 531, 709], "sr1": 278, "gracilibacteria": 278, "ccgwllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 278, "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm": 278, "augccacuuuaa": [278, 289, 444, 445], "named_gc": 279, "table_id": 287, "thraustochytrium": 287, "tmgc": 287, "prior": [288, 589, 592, 760, 829, 839, 869], "methionin": [288, 339], "fmet": 288, "aguauucugccacuguaagaa": 288, "sgc": [288, 289], "silpl": 288, "cug": 288, "trim": 288, "fact": 288, "conform": 290, "abstract": 290, "grammar": [290, 447], "static": 290, "classproperti": 290, "customsequ": 290, "ababacac": 290, "xxxxxx": 290, "ala": 339, "cy": 339, "cystein": 339, "asp": 339, "aspart": 339, "glu": 339, "glutam": 339, "phe": 339, "phenylalanin": 339, "gly": 339, "hi": 339, "histidin": 339, "il": 339, "isoleucin": 339, "ly": 339, "lysin": 339, "leu": 339, "leucin": 339, "asn": 339, "asparagin": 339, "pro": 339, "prolin": 339, "gln": 339, "glutamin": 339, "arginin": 339, "ser": 339, "serin": 339, "thr": 339, "threonin": 339, "val": 339, "valin": 339, "trp": 339, "tyr": 339, "tyrosin": 339, "asx": 339, "glx": 339, "xle": 339, "xaa": 339, "ter": [339, 701], "sec": 339, "selenocystein": 339, "pyl": 339, "pyrrolysin": 339, "pam": [339, 484, 496], "unsupport": 339, "paw": [339, 374, 387], "stop_char": 339, "has_stop": 387, "accgaau": 390, "genetic_cod": [444, 445], "immut": [447, 865], "metdata": 447, "ncrna": 447, "ggucgugaag": 447, "ga": [447, 865], "alic": 447, "desc": 447, "retriev": [447, 559], "attributeerror": [447, 808], "destin": 447, "Be": 447, "illustr": [447, 587, 591], "hasn": [447, 716], "bob": 447, "propag": 447, "carol": 447, "constitut": [484, 502], "chemic": [484, 715], "mutat": [484, 496, 722], "likelihood": 484, "homolog": 484, "chanc": [484, 595], "complic": [484, 863], "assymetr": 484, "nuc": [484, 496], "former": 484, "mat": [484, 496, 499, 502, 516, 517, 519, 520, 521, 522, 523, 524, 526, 527, 791], "blosum62": [484, 496], "by_nam": [484, 501], "transpos": [484, 535, 559], "png": [484, 535, 559, 687], "figur": [484, 504, 535, 551, 559, 577, 697], "svg": [484, 535, 559, 687], "lookup_id": [485, 503, 536, 550, 560, 575], "extract": [488, 534, 535, 539, 563, 587, 591, 701, 742, 865], "asymmetr": [488, 539, 563], "missingiderror": [488, 495, 498, 503, 510, 539, 546, 548, 550, 556, 563, 570, 573, 575, 583], "quick": [488, 539, 563, 571, 697, 700], "from_": [495, 546, 570], "to_": [495, 546, 570], "allow_overlap": [495, 546, 570], "get_nam": 496, "insensit": 496, "dnaful": 496, "pam30": 496, "pam70": 496, "pam250": 496, "blosum45": 496, "blosum50": 496, "blosum80": 496, "blosum90": 496, "dayhoff": 496, "schwartz": 496, "orcutt": 496, "1978": 496, "atla": 496, "345": 496, "352": 496, "proceed": 496, "academi": 496, "inconsist": 499, "heatmap": [504, 551, 577], "colormap": [504, 551, 577, 697], "colorbar": [504, 551, 577, 697], "red": [504, 551, 577], "binary_dm": [505, 511, 552, 557, 578, 584], "redund": [506, 535, 553, 559, 579, 686, 708], "gather": [510, 556, 583, 867], "from_iter": 512, "agggta": 513, "cgttta": 513, "atcggcgat": 514, "gcagatgtg": 514, "9230769230": 514, "omic": 515, "inher": [515, 595], "absolut": [515, 589, 826], "x_": [515, 516, 531, 711, 715], "leq": 515, "compon": [515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 663, 687, 700, 706, 869], "aitchison": [515, 516, 517, 521, 522, 523, 524, 531], "geometri": [515, 517, 521, 522, 524], "euclidean": [515, 534, 588, 700, 706, 708], "perturb": [515, 529], "power": [515, 863], "style": [515, 798, 799], "simul": [515, 711, 714, 715], "strategi": [515, 526, 802], "centr": [515, 521, 522, 704], "clr": [515, 522, 532], "isometr": [515, 516, 517, 523, 524], "ilr": [515, 524, 532], "hypothesi": [515, 518, 589, 592, 595, 711], "regress": [515, 589, 708, 715], "nonzero": [515, 520, 526, 528, 529, 530], "pseudocount": [515, 518], "distort": 515, "pawlowski": [515, 527, 533], "glahn": [515, 527, 533], "egozcu": [515, 523, 524, 527, 531, 533], "tolosana": [515, 531], "delgado": [515, 531], "wilei": 515, "chichest": 515, "logratio": 515, "geologi": 515, "martin": [515, 526], "fernandez": [515, 526], "imput": [515, 526], "antibiot": [515, 713], "kill": 515, "harm": 515, "third": [515, 534, 764, 869], "denominator_idx": [516, 517], "simplex": [516, 523, 524, 531], "denominator_col": 516, "denomin": [516, 517, 531], "math": [516, 523], "amen": 516, "multivari": [516, 587, 588, 590, 591, 700, 701], "rightarrow": [516, 517, 521, 522, 523, 524], "mathbb": [516, 517, 518, 521, 522, 523, 524], "x_1": [516, 517, 521, 522, 528, 529, 530], "x_d": [516, 517, 521, 522, 528, 529, 530], "ldot": [516, 517, 521, 522, 523, 524, 528, 529, 530], "09861229": 516, "38629436": 516, "69314718": 516, "alr": 517, "exp": [517, 522, 527, 533], "y_1": [517, 528, 529], "y_2": 517, "y_": [517, 715], "closur": [517, 528, 529, 530], "x_i": [517, 521, 525, 528, 529, 530, 531], "tau": 518, "multiple_comparisons_correct": 518, "holm": 518, "bonferroni": 518, "significance_test": 518, "percentil": 518, "differenti": 518, "treatment": [518, 596, 714], "h_": 518, "0i": 518, "u_i": 518, "cutoff": [518, 801], "procedur": [518, 591, 863], "boniferroni": 518, "f_onewai": 518, "25th": 518, "median": [518, 591], "75th": 518, "reject": [518, 711], "multi": 518, "multiplicative_replac": 518, "ttest_ind": 518, "wilcoxon": 518, "kruskal": [518, 714, 715], "top": [518, 760], "mann": 518, "whitnei": 518, "mannwhitneyu": 518, "ttest_rel": 518, "sign": [518, 806], "anova": [518, 590, 607, 608, 629, 640, 673, 684], "walli": [518, 714, 715], "friedman": 518, "friedmanchisquar": 518, "understand": 518, "unsolv": 518, "problem": [518, 706], "promis": 518, "001": [518, 711], "address": [518, 863], "1979": 518, "mandal": 518, "et": [518, 595], "al": [518, 595], "novel": 518, "health": [518, 713, 714], "diseas": [518, 589], "s3": [518, 587, 591], "s4": [518, 587, 591], "s5": [518, 587, 591], "s6": [518, 591], "b1": 518, "b2": 518, "b3": 518, "b4": 518, "b5": 518, "b6": 518, "b7": 518, "placebo": 518, "ancom_df": 518, "percentile_df": 518, "scenario": 518, "summar": 518, "conclud": 518, "tell": 518, "geometr": [519, 521, 531, 591], "averag": [519, 596, 597, 705, 709, 775, 801], "17445763": 519, "30216948": 519, "34891526": 519, "32495488": 519, "18761279": 519, "16247744": 519, "isometri": [521, 522, 523, 524], "limits_": [521, 522, 524, 525, 531], "foral": [521, 522], "g_m": 521, "prod": [521, 531], "79451346": 521, "30409883": 521, "5917809": 521, "10136628": 521, "21383822": 522, "26118259": 522, "28865141": 522, "23632778": 522, "basi": [523, 524, 531, 532], "langl": [523, 525], "e_1": [523, 524], "rangle_a": [523, 525], "e_": [523, 524], "orthonorm": [523, 524, 531, 532], "orthornorm": 523, "gram": [523, 524], "schmidt": [523, 524], "orthogon": [523, 524, 531], "spars": [523, 532, 700, 708], "7768362": 523, "68339802": 523, "11704769": 523, "bigoplu": 524, "odot": [524, 530], "e_i": 524, "34180297": 524, "29672718": 524, "22054469": 524, "14092516": 524, "aitchson": 525, "x_j": 525, "y_i": 525, "y_j": 525, "2107852473": 525, "1875": [526, 528], "375": 526, "0625": [526, 528], "4375": 526, "ddof": [527, 533, 705, 709], "freedom": [527, 533, 705, 712], "cost": [527, 533], "lovel": [527, 533], "jj": [527, 533], "marguerat": [527, 533], "b\u00e4hler": [527, 533], "proportion": [527, 533], "e1004075": [527, 533], "pcbi": [527, 533], "1004075": [527, 533], "erb": [527, 533], "notredam": [527, 533], "biosci": [527, 533], "s12064": [527, 533], "015": [527, 533], "0220": [527, 533], "dism": 527, "redundant_form": 527, "oplu": 528, "y_d": [528, 529], "ominu": 529, "14285714": 529, "42857143": 529, "28571429": 529, "23059566": 530, "25737316": 530, "26488486": 530, "24714631": 530, "sbp": 531, "partit": [531, 532], "gsi": 531, "buildilrbas": 531, "ith": 531, "r_i": 531, "s_i": 531, "\u00e9": 531, "rozan": 531, "hernand": 531, "lapoint": 531, "h\u00e9bert": 531, "gentil": 531, "naess": 531, "marchand": 531, "lafond": 531, "matto": 531, "barlow": 531, "natal": 531, "ionom": 531, "revisit": 531, "nutrient": 531, "3389": 531, "fpl": 531, "00039": 531, "van": 531, "den": 531, "boogaart": 531, "gerald": 531, "raimon": 531, "bren": 531, "matevz": 531, "cran": [531, 587, 588, 589, 590, 591], "54772256": 531, "36514837": 531, "70710678": [531, 532], "81649658": [531, 532], "40824829": [531, 532], "coo_matrix": 532, "ilr_inv": 532, "toarrai": 532, "subpackag": [534, 862], "deseri": [534, 687], "gender": [534, 713, 714], "gain": [534, 706], "symmetri": [534, 535, 559, 574, 576], "ta": [534, 865], "tb": 534, "tc": 534, "dm_fh": 534, "3x3": [534, 589, 592, 593], "out_fh": 534, "dm_from_np": 534, "monoton": [534, 535, 592, 593], "increas": [534, 535, 592, 593, 595, 685, 711, 714], "divers": [534, 716, 862], "asarrai": 535, "squareform": [535, 581], "col": 535, "routin": 559, "condens": [559, 571, 576, 581], "condensed_form": [559, 576, 581], "hold": [559, 607, 629, 640, 673, 684, 685, 706, 713, 750, 851], "indiscern": 559, "triangl": [559, 574, 581, 589, 706], "planetmath": 559, "metricspac": 559, "sure": [574, 715, 869], "to_data_fram": 581, "missing_id": 586, "distance_matrix": [587, 588, 590, 591, 703, 706], "categor": [587, 590, 686, 697], "statis": [587, 590], "unpermut": [587, 589, 590], "permanova": [587, 591], "vegan": [587, 588, 589, 590, 591, 700, 701, 708], "clark": [587, 588], "kr": 587, "australian": 587, "117": 587, "143": 587, "4x4": [587, 588, 791], "group1": 587, "group2": 587, "seed": [587, 591, 685, 711, 714, 715], "group3": 587, "data_fram": 588, "ph": 588, "rho": 588, "spearmanr": [588, 589], "env": 588, "primer": 588, "deviat": [588, 705, 708, 709, 712], "ainsworth": 588, "marin": 588, "92": 588, "205": 588, "htm": 588, "elev": 588, "400": 588, "530": 588, "450": 588, "810": 588, "var": 588, "771517": 588, "714286": 588, "triangular": 589, "portion": 589, "r_m": 589, "d_x": 589, "d_y": 589, "ij": 589, "extrem": 589, "reorder": [589, 592, 743, 747], "kendalltau": 589, "nonmatch": [589, 592], "corr_coeff": [589, 595], "pearsonr": [589, 595, 711], "pwmantel": 589, "legendr": [589, 686, 700, 701, 703, 704, 706, 707, 708], "3rd": [589, 663, 707, 807, 869], "edit": [589, 707], "elsevi": [589, 686, 700, 701, 708], "approach": [589, 714, 723, 724, 748, 751], "cancer": 589, "220": 589, "6018555": 589, "coeff": 589, "7559": 589, "moder": 589, "rerun": 589, "notifi": 589, "redefin": [589, 808], "henc": 589, "notion": 589, "pseudo": [590, 711], "adoni": 590, "anderson": [590, 591], "marti": [590, 591], "austral": 590, "2001": 590, "usag": 590, "eigh": [591, 706], "number_of_dimens": [591, 706], "homogen": [591, 700, 708], "disperison": 591, "permdisp2": 591, "analogu": 591, "leven": 591, "dispers": 591, "centroid": 591, "spaitial": 591, "eigendecomposit": [591, 706], "eigenvector": [591, 701, 706], "eigenvalu": [591, 687, 700, 706, 708], "fsvd": [591, 706], "lose": [591, 706], "accuraci": [591, 706], "lost": [591, 706], "keyerror": 591, "betadisp": 591, "245": 591, "253": 591, "g1": 591, "g2": 591, "calucul": 591, "thought": 591, "yeild": 591, "s7": 591, "conjunct": 591, "collat": 592, "amount": [592, 722, 869], "consumpt": [592, 706], "oppos": [592, 869], "dm1": 592, "dm2": 592, "755929": 592, "142857": 592, "num_object": 593, "random_fn": 593, "drawn": [593, 711, 714, 715], "uniform": 593, "rand": 593, "pertain": 594, "host_dist": 595, "par_dist": 595, "interact": 595, "hommola": 595, "parasit": 595, "cospeci": 595, "expand": [595, 794], "symbiont": 595, "somewhat": [595, 775], "weaker": 595, "incid": 595, "speciat": 595, "recapitul": 595, "co": 595, "cladogenesi": 595, "explanatori": [595, 686, 687, 701, 708], "poorli": [595, 706], "perm_stat": 595, "je": 595, "qiu": 595, "gilk": 595, "1457": 595, "1468": 595, "hdist": 595, "3f": 595, "832": 595, "fairli": 595, "inde": 595, "mainli": 596, "volatil": 596, "averagegradientanova": 596, "coord_data": 596, "354": 596, "2761": 596, "0341": 596, "0633": 596, "1004": 596, "2364": 596, "2186": 596, "0301": 596, "0225": 596, "356": 596, "2208": 596, "0874": 596, "3519": 596, "0031": 596, "607": 596, "1055": 596, "4140": 596, "116": 596, "634": 596, "3716": 596, "1154": 596, "0721": 596, "0898": 596, "coord": [596, 597, 619, 630, 663, 674], "orient": [596, 697, 713, 783, 863], "metadata_map": [596, 597, 619, 630, 663, 674], "65": 596, "prop_expl": [596, 597, 619, 630, 663, 674], "6216": 596, "7715": 596, "1215": 596, "6913": 596, "8304": 596, "trajectori": [596, 597, 607, 608, 618, 619, 629, 630, 640, 641, 651, 652, 662, 663, 673, 674, 684], "av": 596, "trajectory_categori": [596, 597, 619, 630, 663], "sort_categori": [596, 597, 619, 630, 663], "trajectory_result": 596, "get_trajectori": 596, "avg": 596, "0118478282382": 596, "52199973": 596, "29597001": 596, "20309816": 596, "007022633956606": 596, "ax": [597, 619, 630, 663, 686, 697, 700, 701], "norm": [597, 619, 663, 674], "gradientanova": [597, 619, 663, 674], "gradientanovaresult": [607, 629, 640, 673, 684], "groupresult": 608, "out_f": [618, 651, 662], "raw_f": [618, 651, 662], "categoryresult": 641, "2nd": [663, 807], "window_s": 674, "window": 674, "buf_siz": 685, "bin_f": 685, "bin": 685, "unsign": [685, 773], "resid": 685, "prng": 685, "wherea": 685, "decreas": 685, "overhead": 685, "demultiplex": 685, "123": 685, "samplea": 685, "aattgg": 685, "sampleb": 685, "atatatat": 685, "samplec": 685, "atggcc": 685, "atggct": 685, "atggcg": 685, "atggca": 685, "bin_": 685, "fish": 686, "transect": 686, "substrate_cor": 686, "substrate_sand": 686, "substrate_oth": 686, "site10": 686, "specie1": 686, "specie2": 686, "specie3": 686, "specie4": 686, "specie5": 686, "specie6": 686, "specie7": 686, "specie8": 686, "specie9": 686, "substrat": 686, "hot": 686, "perfect": [686, 701], "collinear": [686, 701], "ordination_result": 686, "proportion_explain": [686, 687], "cca1": 686, "466911": 686, "cca2": 686, "238327": 686, "cca3": 686, "100548": 686, "cca4": 686, "104937": 686, "cca5": 686, "044805": 686, "cca6": 686, "029747": 686, "cca7": 686, "012631": 686, "cca8": 686, "001562": 686, "cca9": 686, "000532": 686, "amsterdam": [686, 700, 701, 708], "short_method_nam": [687, 806], "long_method_nam": [687, 806], "biplot_scor": [687, 806], "sample_constraint": 687, "scatterplot": [687, 697], "ipython": 687, "notebook": 687, "constrain": [687, 701], "legend": 697, "evenli": 697, "set1": 697, "grei": 697, "axes3d": 697, "scatter": 697, "situat": [697, 713], "jupyt": 697, "lab": [697, 714], "emperor": 697, "colormaps_refer": 697, "vazquez": 697, "baeza": 697, "pirrung": 697, "gonzalez": 697, "gigasci": 697, "github": 697, "21712454": 697, "5007512": 697, "91769271": 697, "45995501": 697, "80332382": 697, "65463348": 697, "pcoa_result": 697, "chi": [700, 701], "pca": [700, 706, 708], "lot": 700, "steep": 700, "kind": 700, "explan": [700, 701], "ecologist": 700, "456": 700, "far": 700, "exhibit": 700, "multimod": 700, "notimplementederror": [700, 701], "suit": 701, "nich": 701, "unimod": [701, 706], "habitat": 701, "unconstrain": 701, "deem": 701, "ones": [701, 714], "shouldn": 701, "confus": 701, "ccora": 701, "sens": [701, 715, 794, 802], "cajo": 701, "braak": 701, "1167": 701, "1179": 701, "piet": 701, "verdonschot": 701, "aquat": 701, "1995": 701, "289": 701, "columnwis": 702, "elementwis": 703, "eq": [703, 704], "e_matrix": 704, "with_mean": [705, 709], "with_std": [705, 709], "flatten": 705, "likelyhood": [705, 709], "inplac": [706, 786], "euclidian": 706, "absent": 706, "On": 706, "semimetr": 706, "decid": [706, 869], "heterogen": 707, "physic": [707, 715], "scale_i": 708, "conting": 708, "Its": 708, "geq": 708, "focus": 708, "approxim": [708, 711], "stimat": 709, "wherev": 709, "m_shape": 710, "tol": 710, "singular": [710, 778, 851], "linalg": 710, "matrix_rank": 710, "rational": 710, "toler": 710, "precomput": 710, "svd": 710, "hoc": 711, "principl": 711, "mont": 711, "carlo": 711, "k_": 711, "mu": 711, "mu_": 711, "neq": 711, "approx": 711, "commit": 711, "ii": 711, "repeatedli": 711, "underpow": 711, "statsmodel": 711, "draw": [711, 713, 714, 715, 740, 783], "ind": [711, 715], "dep": 711, "randint": 711, "randn": [711, 714, 715], "617": 711, "533": 711, "788": 711, "602": 711, "229": 711, "779": 711, "838": 711, "032": 711, "157": 711, "051": 711, "601": 711, "664": 711, "783": 711, "646e": 711, "subsample_pow": 711, "draw_mod": [711, 715], "critic": [711, 712, 714, 715, 742], "pwr_100": 711, "counts_100": 711, "max_count": [711, 714, 715], "min_count": [711, 714, 715], "counts_interv": [711, 714, 715], "alpha_pwr": [711, 714, 715], "num_it": [711, 714, 715], "pwr_010": 711, "counts_010": 711, "pwr_001": 711, "counts_001": 711, "484": 711, "844": 711, "932": 711, "984": 711, "044": 711, "224": 711, "572": 711, "836": 711, "928": 711, "996": [711, 715], "016": 711, "108": 711, "332": 711, "848": 711, "956": 711, "vec": 712, "meta": [713, 714], "control_cat": [713, 714], "strict_match": [713, 714], "sex": [713, 714], "educ": [713, 862], "diet": 713, "exercis": 713, "statu": [713, 714], "healthi": [713, 714, 715], "undefin": [713, 714, 747], "hous": 713, "abx": 713, "bb": 713, "hstack": [713, 714], "500": [714, 715], "num_run": [714, 715], "sample_count": [714, 715], "cytokin": 714, "transloc": 714, "myeloid": 714, "cell": 714, "cultur": 714, "macrophag": 714, "bone": 714, "marrow": 714, "phagocyt": 714, "periton": 714, "growth": 714, "media": 714, "acquir": 714, "compani": 714, "labor": 714, "intens": 714, "assai": 714, "preliminari": 714, "cell_lin": 714, "binomi": [714, 715], "incub": 714, "untreat": 714, "treatment_stat": 714, "groupbi": 714, "00193863362662502": 714, "seem": 714, "receptor": 714, "temperatur": 714, "co2": 714, "idea": 714, "encourag": 714, "pwr": 714, "cnt": 714, "528": 714, "088": 714, "127": 714, "adequ": 714, "sublist": 715, "bacteria": [715, 760, 761, 794], "gardnerella": 715, "vaginali": 715, "vagin": 715, "menopaus": 715, "woman": 715, "experienc": 715, "urinari": 715, "tract": 715, "infect": 715, "uti": 715, "women": 715, "enrol": 715, "eight": 715, "week": 715, "particip": 715, "fecal": 715, "clinic": 715, "symptom": 715, "endpoint": [715, 791], "premenopaus": 715, "postmenopaus": 715, "pcr": 715, "pre_rat": 715, "pos_rat": 715, "chisquar": 715, "003": 715, "try": [715, 716], "risk": 715, "reproduct": 715, "bmi": 715, "tobacco": 715, "subsample_paired_pow": 715, "linkag": [715, 759], "pwr_est": 715, "nanmean": 715, "056": 715, "074": 715, "226": 715, "806": 715, "952": 715, "stool": 715, "secondari": 715, "met_po": 715, "2500": 715, "met_neg": 715, "metabolite_test": 715, "005": 715, "go": [715, 867, 869], "twice": 715, "pwr_est2": 715, "counts2": 715, "272": 715, "426": 715, "646": 715, "824": 715, "efficiencywarn": 716, "acceler": 716, "isubsampl": 716, "frequent": [722, 744], "grand": 722, "ellaps": 722, "bootstrap": 722, "posterior": 722, "assur": [723, 724, 748, 751], "unrooted_deepcopi": [723, 724, 748, 751, 783, 784, 798], "unrooted_copi": [723, 724, 748, 751, 784, 799], "tree_copi": [723, 724, 748, 751], "tree_nod": [723, 724, 748, 751], "travers": [723, 724, 744, 748, 751, 755, 758, 769, 772, 775, 776, 777, 792, 798, 799, 867], "tree_copy_nod": [723, 724, 748, 751], "deleg": 727, "noparenterror": 737, "nolengtherror": [737, 753, 762], "lack": 737, "toward": 738, "cach": [739, 744, 750, 754, 755, 756, 758, 765, 774, 778], "child1": [739, 754], "child2": [739, 754], "show_intern": 740, "compact": 740, "topolog": 741, "incom": 742, "species_a": 742, "successfulli": 742, "strip": [742, 746, 747], "czech": 742, "luca": 742, "jaim": 742, "huerta": 742, "cepa": 742, "alexandro": 742, "stamataki": 742, "review": 742, "viewer": 742, "toolkit": 742, "2017": 742, "1535": 742, "speciesa": 742, "insert_length": 743, "intermedi": 743, "prune": [743, 785, 796, 797], "collaps": 743, "func": [744, 757, 781, 786, 797, 808, 841, 852], "cache_attrnam": 744, "cache_typ": 744, "frozenset": [744, 788, 789], "particularli": 744, "topologi": [744, 778, 867], "invalidate_cach": [744, 750], "is_tip": [744, 763, 766, 867], "tip_nam": 744, "include_self": [744, 769, 772, 775, 776, 777, 792, 795, 867], "robinson": 745, "fould": 745, "compare_subset": [745, 747, 788, 789, 867], "compare_tip_dist": [745, 746, 753, 762, 791, 867], "julia": 745, "goodrich": 745, "bioscienc": 745, "tree1": [745, 746, 747, 867], "tree2": [745, 746, 747, 867], "exclude_absent_taxa": 746, "compare_rfd": [746, 747], "dist_f": 747, "distance_from_r": 747, "shuffle_f": [747, 786], "shuffl": 747, "mtrand": [747, 786], "randomst": [747, 786], "m1": 747, "m2": 747, "distance_from_r_squar": 747, "dist": [747, 762], "9f": 747, "000133446": 747, "conflict": 750, "cache_attr": [750, 765], "tip_subset": 752, "replic": 752, "cogent": 752, "totaldescendingbranch": 752, "postord": [752, 755, 769, 772, 776, 777, 792, 795, 867], "tr": 752, "tdbl": 752, "sdbl": 752, "tip_tip_dist": [753, 762], "accumulate_to_ancestor": 753, "get_max_dist": 753, "tip_a": [753, 782], "tip_d": 753, "find_al": [755, 757, 758], "find_by_id": [755, 756, 757], "find_by_func": [755, 756, 758], "node_id": [758, 764, 793], "linkage_matrix": 759, "id_list": 759, "hierarchi": [759, 760, 867], "from_taxonomi": [760, 794], "taxdump": 760, "dmp": 760, "phylum": 760, "set_index": 760, "archaea": [760, 761, 794], "firmicut": [760, 761, 794], "bacteroidet": [760, 761, 794], "lineage_map": 761, "from_taxdump": 761, "clostridia": [761, 794], "bacilli": [761, 794], "sphingobacteria": [761, 794], "euryarchaeota": [761, 794], "thermoplasmata": [761, 794], "halobacteria": [761, 794], "cytophagia": [761, 794], "distant": 762, "is_root": [763, 767, 867], "_leaf_index": 764, "create_cach": 765, "has_children": [766, 767], "tipnam": [768, 770], "lowest_common_ancestor": 768, "convienc": [768, 770], "preorder": [769, 772, 775, 776, 792, 795, 867], "pre_and_postord": [769, 772, 775, 777, 792, 795], "non_tip": [769, 775, 776, 777, 792, 795, 801, 867], "node_c": 771, "nontip": 772, "levelord": [772, 775, 776, 777, 792, 795], "tip_count": 773, "remove_delet": [774, 778, 780, 785], "ineleg": 775, "stack": 775, "3x": 775, "worst": 775, "comb": 775, "visit": 776, "reconstruct": [778, 802, 862, 865], "shear": 778, "pop": [778, 780, 781, 785], "to_delet": 778, "clade": [781, 788, 801, 867], "knowledg": [783, 863], "treeerror": [783, 784], "root_at_midpoint": [783, 802], "midpoint": [784, 802], "farthest": 784, "apart": 784, "lengtherror": 784, "indirectli": 784, "mid": 784, "root_at": [784, 798, 799], "lop": 785, "infinit": [786, 798, 799], "rev": 786, "shuffler": 786, "shuffled_tre": 786, "tip_": 787, "tip_list": 790, "representationwarn": 791, "nan_length_valu": 793, "attribute_nam": 793, "aris": [793, 801], "problemat": 793, "id_index": 793, "child_index": 793, "left_child_id": 793, "right_child_id": 793, "attr_1": 793, "attr_n": 793, "allow_empti": 794, "filter_f": 794, "self_befor": 795, "self_aft": 795, "inord": 795, "unpack_by_func": 796, "elong": 796, "graft": 796, "unpack": 797, "assign_support": 797, "walk": [798, 799, 867, 869], "_not_": 798, "new_tre": [798, 799], "support_attr": 801, "tree_node_class": 801, "_tree": 801, "consensu": 801, "arbitrarili": [801, 869], "usefulli": 801, "disjoint": 801, "adapt": 801, "matthew": 801, "wakefield": 801, "margush": 801, "mcmorri": 801, "fr": 801, "bulletin": 801, "239": 801, "consens": 801, "support_valu": 801, "consensus_tre": 801, "disallow_negative_branch_length": 802, "result_constructor": 802, "saitou": 802, "nei": 802, "3447015": 802, "neighbour_join": 802, "abcd": 802, "contstruct": 802, "render": 802, "newick_str": 802, "accident": 803, "ineffici": 803, "instal": 803, "success": [804, 829, 869], "alter": 804, "task": [804, 863], "deleteri": 804, "rtol": 805, "assertionerror": [805, 806], "almost": 805, "assert_frame_equ": 805, "ignore_method_nam": 806, "ignore_axis_label": 806, "ignore_direction": 806, "assert": 806, "direction": 806, "cardin": 807, "0th": 807, "fdel": 808, "fget": 808, "fset": 808, "owner": 812, "fn": 826, "subfold": 826, "filenam": 826, "folder": 826, "open_fil": 827, "block_siz": 827, "1048576": 827, "checksum": 827, "hashlib": 827, "answer": 827, "stackoverflow": 827, "1131255": 827, "379593": 827, "bar": [827, 869], "baz": 827, "hexdigest": 827, "ab07acbb1e496801937adfa772424bf7": 827, "short_circuit": 828, "offer": 828, "mechan": [828, 869], "prealloc": 828, "enabl": [828, 869], "interrog": 828, "handi": [828, 869], "contextu": 828, "iter_": 829, "success_callback": [829, 869], "fail_callback": [829, 869], "engin": 829, "callback": [829, 869], "short_cicruit": 829, "examin": [829, 869], "aspect": 829, "_setup_debug_trac": 839, "not_non": [851, 869], "pronounc": 862, "sigh": 862, "kit": 862, "bui": 862, "oh": 862, "bsd": 862, "licens": 862, "activ": 862, "skbio": 862, "introduct": 862, "workflow": 862, "miscellan": 862, "writeabl": 863, "snif": 863, "my_obj": 863, "someformat": 863, "oo": 863, "open_filehandl": 863, "unnam": 863, "goal": 863, "twofold": 863, "nonbiolog": 865, "accgggta": 865, "my": 865, "gfp": 865, "ggg": 865, "d2": 865, "d3": 865, "tacccggt": 865, "straightforward": 865, "r1": 865, "gacccgcuuu": 865, "r2": 865, "gccccccuuu": 865, "r3": 865, "accguuaguc": 865, "r4": 865, "acgggu": 865, "uc": 865, "r5": 865, "agg": 865, "ggacugaa": 865, "gga": 865, "gaa": 865, "themselv": 865, "agggga": 865, "ut": 865, "atgtgtatttga": 865, "auguguauuu": 865, "protein_from_dna": 865, "mci": 865, "protein_from_rna": 865, "parenthes": 867, "traver": 867, "wish": 867, "tree3": 867, "6666666666666667": 867, "120492524415": 867, "short": 869, "circuit": 869, "processor": 869, "nuc_pattern": 869, "aattg": 869, "has_nuc_pattern": 869, "sequenceprocessor": 869, "initialize_st": 869, "setup": 869, "check_length": 869, "indicatd": 869, "specfi": 869, "aaaaaaattttttt": 869, "atagacc": 869, "aattgccggac": 869, "atatgaacaaa": 869, "fun": 869, "excit": 869, "success_f": 869, "fail_f": 869, "ccggac": 869, "thing": 869, "assist": 869, "ahead": 869, "tttttttaaaaaaa": 869, "debug_trac": 869, "earlier": 869, "caggcc": 869, "anticip": 869, "rapidli": 869, "debug_pre_st": 869, "debug_post_st": 869, "awesom": 869, "piec": 869, "debug_runtim": 869, "diagnos": 869, "aggreg": 869, "cprofil": 869, "quit": 869, "ex": 869, "do_someth": 869, "do_something_els": 869, "foobar": 869, "do_something_awesom": 869}, "objects": {"skbio": [[0, 0, 0, "-", "alignment"], [1, 0, 0, "-", "diversity"], [863, 0, 0, "-", "io"], [864, 0, 0, "-", "metadata"], [865, 0, 0, "-", "sequence"], [866, 0, 0, "-", "stats"], [867, 0, 0, "-", "tree"], [868, 0, 0, "-", "util"], [869, 0, 0, "-", "workflow"]], "skbio.alignment": [[2, 1, 1, "", "AlignmentStructure"], [16, 1, 1, "", "StripedSmithWaterman"], [28, 1, 1, "", "TabularMSA"], [60, 3, 1, "", "global_pairwise_align"], [61, 3, 1, "", "global_pairwise_align_nucleotide"], [62, 3, 1, "", "global_pairwise_align_protein"], [63, 3, 1, "", "local_pairwise_align"], [64, 3, 1, "", "local_pairwise_align_nucleotide"], [65, 3, 1, "", "local_pairwise_align_protein"], [66, 3, 1, "", "local_pairwise_align_ssw"], [67, 3, 1, "", "make_identity_substitution_matrix"]], "skbio.alignment.AlignmentStructure": [[3, 2, 1, "", "__eq__"], [4, 2, 1, "", "__ge__"], [5, 2, 1, "", "__getitem__"], [6, 2, 1, "", "__getstate__"], [7, 2, 1, "", "__gt__"], [8, 2, 1, "", "__hash__"], [9, 2, 1, "", "__le__"], [10, 2, 1, "", "__lt__"], [11, 2, 1, "", "__ne__"], [12, 2, 1, "", "__setstate__"], [13, 2, 1, "", "__str__"], [14, 2, 1, "", "is_zero_based"], [15, 2, 1, "", "set_zero_based"]], "skbio.alignment.StripedSmithWaterman": [[17, 2, 1, "", "__call__"], [18, 2, 1, "", "__eq__"], [19, 2, 1, "", "__ge__"], [20, 2, 1, "", "__getstate__"], [21, 2, 1, "", "__gt__"], [22, 2, 1, "", "__hash__"], [23, 2, 1, "", "__le__"], [24, 2, 1, "", "__lt__"], [25, 2, 1, "", "__ne__"], [26, 2, 1, "", "__setstate__"], [27, 2, 1, "", "__str__"]], "skbio.alignment.TabularMSA": [[29, 2, 1, "", "__bool__"], [30, 2, 1, "", "__contains__"], [31, 2, 1, "", "__copy__"], [32, 2, 1, "", "__deepcopy__"], [33, 2, 1, "", "__eq__"], [34, 2, 1, "", "__ge__"], [35, 2, 1, "", "__getitem__"], [36, 2, 1, "", "__getstate__"], [37, 2, 1, "", "__gt__"], [38, 2, 1, "", "__iter__"], [39, 2, 1, "", "__le__"], [40, 2, 1, "", "__len__"], [41, 2, 1, "", "__lt__"], [42, 2, 1, "", "__ne__"], [43, 2, 1, "", "__reversed__"], [44, 2, 1, "", "__str__"], [45, 2, 1, "", "append"], [46, 2, 1, "", "consensus"], [47, 2, 1, "", "conservation"], [48, 2, 1, "", "extend"], [49, 2, 1, "", "from_dict"], [50, 2, 1, "", "gap_frequencies"], [51, 2, 1, "", "has_metadata"], [52, 2, 1, "", "has_positional_metadata"], [53, 2, 1, "", "iter_positions"], [54, 2, 1, "", "join"], [55, 2, 1, "", "read"], [56, 2, 1, "", "reassign_index"], [57, 2, 1, "", "sort"], [58, 2, 1, "", "to_dict"], [59, 2, 1, "", "write"]], "skbio.diversity": [[68, 0, 0, "-", "alpha"], [103, 3, 1, "", "alpha_diversity"], [104, 0, 0, "-", "beta"], [107, 3, 1, "", "beta_diversity"], [108, 3, 1, "", "block_beta_diversity"], [109, 3, 1, "", "get_alpha_diversity_metrics"], [110, 3, 1, "", "get_beta_diversity_metrics"], [111, 3, 1, "", "partial_beta_diversity"]], "skbio.diversity.alpha": [[69, 3, 1, "", "ace"], [70, 3, 1, "", "berger_parker_d"], [71, 3, 1, "", "brillouin_d"], [72, 3, 1, "", "chao1"], [73, 3, 1, "", "chao1_ci"], [74, 3, 1, "", "dominance"], [75, 3, 1, "", "doubles"], [76, 3, 1, "", "enspie"], [77, 3, 1, "", "esty_ci"], [78, 3, 1, "", "faith_pd"], [79, 3, 1, "", "fisher_alpha"], [80, 3, 1, "", "gini_index"], [81, 3, 1, "", "goods_coverage"], [82, 3, 1, "", "heip_e"], [83, 3, 1, "", "kempton_taylor_q"], [84, 3, 1, "", "lladser_ci"], [85, 3, 1, "", "lladser_pe"], [86, 3, 1, "", "margalef"], [87, 3, 1, "", "mcintosh_d"], [88, 3, 1, "", "mcintosh_e"], [89, 3, 1, "", "menhinick"], [90, 3, 1, "", "michaelis_menten_fit"], [91, 3, 1, "", "observed_features"], [92, 3, 1, "", "observed_otus"], [93, 3, 1, "", "osd"], [94, 3, 1, "", "phydiv"], [95, 3, 1, "", "pielou_e"], [96, 3, 1, "", "robbins"], [97, 3, 1, "", "shannon"], [98, 3, 1, "", "simpson"], [99, 3, 1, "", "simpson_e"], [100, 3, 1, "", "singles"], [101, 3, 1, "", "sobs"], [102, 3, 1, "", "strong"]], "skbio.diversity.beta": [[105, 3, 1, "", "unweighted_unifrac"], [106, 3, 1, "", "weighted_unifrac"]], "skbio.io": [[112, 4, 1, "", "ArgumentOverrideWarning"], [113, 4, 1, "", "BLAST7FormatError"], [114, 4, 1, "", "ClustalFormatError"], [115, 4, 1, "", "EMBLFormatError"], [116, 4, 1, "", "FASTAFormatError"], [117, 4, 1, "", "FASTQFormatError"], [118, 4, 1, "", "FileFormatError"], [119, 4, 1, "", "FormatIdentificationWarning"], [120, 4, 1, "", "GFF3FormatError"], [121, 4, 1, "", "GenBankFormatError"], [122, 4, 1, "", "IOSourceError"], [123, 4, 1, "", "LSMatFormatError"], [124, 4, 1, "", "NewickFormatError"], [125, 4, 1, "", "OrdinationFormatError"], [126, 4, 1, "", "PhylipFormatError"], [127, 4, 1, "", "QSeqFormatError"], [128, 4, 1, "", "QUALFormatError"], [129, 4, 1, "", "StockholmFormatError"], [130, 4, 1, "", "UnrecognizedFormatError"], [147, 0, 0, "-", "registry"], [188, 0, 0, "-", "util"]], "skbio.io.format": [[131, 0, 0, "-", "binary_dm"], [132, 0, 0, "-", "blast6"], [133, 0, 0, "-", "blast7"], [134, 0, 0, "-", "clustal"], [135, 0, 0, "-", "embl"], [136, 0, 0, "-", "fasta"], [137, 0, 0, "-", "fastq"], [138, 0, 0, "-", "genbank"], [139, 0, 0, "-", "gff3"], [140, 0, 0, "-", "lsmat"], [141, 0, 0, "-", "newick"], [142, 0, 0, "-", "ordination"], [143, 0, 0, "-", "phylip"], [144, 0, 0, "-", "qseq"], [145, 0, 0, "-", "stockholm"], [146, 0, 0, "-", "taxdump"]], "skbio.io.registry": [[148, 4, 1, "", "DuplicateRegistrationError"], [149, 1, 1, "", "Format"], [162, 1, 1, "", "IORegistry"], [183, 4, 1, "", "InvalidRegistrationError"], [184, 3, 1, "", "create_format"], [185, 3, 1, "", "read"], [186, 3, 1, "", "sniff"], [187, 3, 1, "", "write"]], "skbio.io.registry.Format": [[150, 2, 1, "", "__eq__"], [151, 2, 1, "", "__ge__"], [152, 2, 1, "", "__getstate__"], [153, 2, 1, "", "__gt__"], [154, 2, 1, "", "__hash__"], [155, 2, 1, "", "__le__"], [156, 2, 1, "", "__lt__"], [157, 2, 1, "", "__ne__"], [158, 2, 1, "", "__str__"], [159, 2, 1, "", "reader"], [160, 2, 1, "", "sniffer"], [161, 2, 1, "", "writer"]], "skbio.io.registry.IORegistry": [[163, 2, 1, "", "__eq__"], [164, 2, 1, "", "__ge__"], [165, 2, 1, "", "__getstate__"], [166, 2, 1, "", "__gt__"], [167, 2, 1, "", "__hash__"], [168, 2, 1, "", "__le__"], [169, 2, 1, "", "__lt__"], [170, 2, 1, "", "__ne__"], [171, 2, 1, "", "__str__"], [172, 2, 1, "", "add_format"], [173, 2, 1, "", "create_format"], [174, 2, 1, "", "get_reader"], [175, 2, 1, "", "get_sniffer"], [176, 2, 1, "", "get_writer"], [177, 2, 1, "", "list_read_formats"], [178, 2, 1, "", "list_write_formats"], [179, 2, 1, "", "monkey_patch"], [180, 2, 1, "", "read"], [181, 2, 1, "", "sniff"], [182, 2, 1, "", "write"]], "skbio.io.util": [[189, 3, 1, "", "open"], [190, 3, 1, "", "open_file"], [191, 3, 1, "", "open_files"]], "skbio.metadata": [[192, 1, 1, "", "Interval"], [202, 1, 1, "", "IntervalMetadata"]], "skbio.metadata.Interval": [[193, 2, 1, "", "__eq__"], [194, 2, 1, "", "__ge__"], [195, 2, 1, "", "__getstate__"], [196, 2, 1, "", "__gt__"], [197, 2, 1, "", "__le__"], [198, 2, 1, "", "__lt__"], [199, 2, 1, "", "__ne__"], [200, 2, 1, "", "__str__"], [201, 2, 1, "", "drop"]], "skbio.metadata.IntervalMetadata": [[203, 2, 1, "", "__copy__"], [204, 2, 1, "", "__deepcopy__"], [205, 2, 1, "", "__eq__"], [206, 2, 1, "", "__ge__"], [207, 2, 1, "", "__getstate__"], [208, 2, 1, "", "__gt__"], [209, 2, 1, "", "__le__"], [210, 2, 1, "", "__lt__"], [211, 2, 1, "", "__ne__"], [212, 2, 1, "", "__str__"], [213, 2, 1, "", "add"], [214, 2, 1, "", "concat"], [215, 2, 1, "", "drop"], [216, 2, 1, "", "merge"], [217, 2, 1, "", "query"], [218, 2, 1, "", "read"], [219, 2, 1, "", "sort"], [220, 2, 1, "", "write"]], "skbio.sequence": [[221, 1, 1, "", "DNA"], [278, 1, 1, "", "GeneticCode"], [290, 1, 1, "", "GrammaredSequence"], [339, 1, 1, "", "Protein"], [390, 1, 1, "", "RNA"], [447, 1, 1, "", "Sequence"], [484, 1, 1, "", "SubstitutionMatrix"], [512, 0, 0, "-", "distance"]], "skbio.sequence.DNA": [[222, 2, 1, "", "__bool__"], [223, 2, 1, "", "__contains__"], [224, 2, 1, "", "__copy__"], [225, 2, 1, "", "__deepcopy__"], [226, 2, 1, "", "__eq__"], [227, 2, 1, "", "__ge__"], [228, 2, 1, "", "__getitem__"], [229, 2, 1, "", "__getstate__"], [230, 2, 1, "", "__gt__"], [231, 2, 1, "", "__iter__"], [232, 2, 1, "", "__le__"], [233, 2, 1, "", "__len__"], [234, 2, 1, "", "__lt__"], [235, 2, 1, "", "__ne__"], [236, 2, 1, "", "__reversed__"], [237, 2, 1, "", "__str__"], [238, 2, 1, "", "complement"], [239, 2, 1, "", "concat"], [240, 2, 1, "", "count"], [241, 2, 1, "", "definites"], [242, 2, 1, "", "degap"], [243, 2, 1, "", "degenerates"], [244, 2, 1, "", "distance"], [245, 2, 1, "", "expand_degenerates"], [246, 2, 1, "", "find_motifs"], [247, 2, 1, "", "find_with_regex"], [248, 2, 1, "", "frequencies"], [249, 2, 1, "", "gaps"], [250, 2, 1, "", "gc_content"], [251, 2, 1, "", "gc_frequency"], [252, 2, 1, "", "has_definites"], [253, 2, 1, "", "has_degenerates"], [254, 2, 1, "", "has_gaps"], [255, 2, 1, "", "has_interval_metadata"], [256, 2, 1, "", "has_metadata"], [257, 2, 1, "", "has_nondegenerates"], [258, 2, 1, "", "has_positional_metadata"], [259, 2, 1, "", "index"], [260, 2, 1, "", "is_reverse_complement"], [261, 2, 1, "", "iter_contiguous"], [262, 2, 1, "", "iter_kmers"], [263, 2, 1, "", "kmer_frequencies"], [264, 2, 1, "", "lowercase"], [265, 2, 1, "", "match_frequency"], [266, 2, 1, "", "matches"], [267, 2, 1, "", "mismatch_frequency"], [268, 2, 1, "", "mismatches"], [269, 2, 1, "", "nondegenerates"], [270, 2, 1, "", "read"], [271, 2, 1, "", "replace"], [272, 2, 1, "", "reverse_complement"], [273, 2, 1, "", "to_regex"], [274, 2, 1, "", "transcribe"], [275, 2, 1, "", "translate"], [276, 2, 1, "", "translate_six_frames"], [277, 2, 1, "", "write"]], "skbio.sequence.GeneticCode": [[279, 2, 1, "", "__eq__"], [280, 2, 1, "", "__ge__"], [281, 2, 1, "", "__getstate__"], [282, 2, 1, "", "__gt__"], [283, 2, 1, "", "__le__"], [284, 2, 1, "", "__lt__"], [285, 2, 1, "", "__ne__"], [286, 2, 1, "", "__str__"], [287, 2, 1, "", "from_ncbi"], [288, 2, 1, "", "translate"], [289, 2, 1, "", "translate_six_frames"]], "skbio.sequence.GrammaredSequence": [[291, 2, 1, "", "__bool__"], [292, 2, 1, "", "__contains__"], [293, 2, 1, "", "__copy__"], [294, 2, 1, "", "__deepcopy__"], [295, 2, 1, "", "__eq__"], [296, 2, 1, "", "__ge__"], [297, 2, 1, "", "__getitem__"], [298, 2, 1, "", "__getstate__"], [299, 2, 1, "", "__gt__"], [300, 2, 1, "", "__iter__"], [301, 2, 1, "", "__le__"], [302, 2, 1, "", "__len__"], [303, 2, 1, "", "__lt__"], [304, 2, 1, "", "__ne__"], [305, 2, 1, "", "__reversed__"], [306, 2, 1, "", "__str__"], [307, 2, 1, "", "concat"], [308, 2, 1, "", "count"], [309, 2, 1, "", "definites"], [310, 2, 1, "", "degap"], [311, 2, 1, "", "degenerates"], [312, 2, 1, "", "distance"], [313, 2, 1, "", "expand_degenerates"], [314, 2, 1, "", "find_motifs"], [315, 2, 1, "", "find_with_regex"], [316, 2, 1, "", "frequencies"], [317, 2, 1, "", "gaps"], [318, 2, 1, "", "has_definites"], [319, 2, 1, "", "has_degenerates"], [320, 2, 1, "", "has_gaps"], [321, 2, 1, "", "has_interval_metadata"], [322, 2, 1, "", "has_metadata"], [323, 2, 1, "", "has_nondegenerates"], [324, 2, 1, "", "has_positional_metadata"], [325, 2, 1, "", "index"], [326, 2, 1, "", "iter_contiguous"], [327, 2, 1, "", "iter_kmers"], [328, 2, 1, "", "kmer_frequencies"], [329, 2, 1, "", "lowercase"], [330, 2, 1, "", "match_frequency"], [331, 2, 1, "", "matches"], [332, 2, 1, "", "mismatch_frequency"], [333, 2, 1, "", "mismatches"], [334, 2, 1, "", "nondegenerates"], [335, 2, 1, "", "read"], [336, 2, 1, "", "replace"], [337, 2, 1, "", "to_regex"], [338, 2, 1, "", "write"]], "skbio.sequence.Protein": [[340, 2, 1, "", "__bool__"], [341, 2, 1, "", "__contains__"], [342, 2, 1, "", "__copy__"], [343, 2, 1, "", "__deepcopy__"], [344, 2, 1, "", "__eq__"], [345, 2, 1, "", "__ge__"], [346, 2, 1, "", "__getitem__"], [347, 2, 1, "", "__getstate__"], [348, 2, 1, "", "__gt__"], [349, 2, 1, "", "__iter__"], [350, 2, 1, "", "__le__"], [351, 2, 1, "", "__len__"], [352, 2, 1, "", "__lt__"], [353, 2, 1, "", "__ne__"], [354, 2, 1, "", "__reversed__"], [355, 2, 1, "", "__str__"], [356, 2, 1, "", "concat"], [357, 2, 1, "", "count"], [358, 2, 1, "", "definites"], [359, 2, 1, "", "degap"], [360, 2, 1, "", "degenerates"], [361, 2, 1, "", "distance"], [362, 2, 1, "", "expand_degenerates"], [363, 2, 1, "", "find_motifs"], [364, 2, 1, "", "find_with_regex"], [365, 2, 1, "", "frequencies"], [366, 2, 1, "", "gaps"], [367, 2, 1, "", "has_definites"], [368, 2, 1, "", "has_degenerates"], [369, 2, 1, "", "has_gaps"], [370, 2, 1, "", "has_interval_metadata"], [371, 2, 1, "", "has_metadata"], [372, 2, 1, "", "has_nondegenerates"], [373, 2, 1, "", "has_positional_metadata"], [374, 2, 1, "", "has_stops"], [375, 2, 1, "", "index"], [376, 2, 1, "", "iter_contiguous"], [377, 2, 1, "", "iter_kmers"], [378, 2, 1, "", "kmer_frequencies"], [379, 2, 1, "", "lowercase"], [380, 2, 1, "", "match_frequency"], [381, 2, 1, "", "matches"], [382, 2, 1, "", "mismatch_frequency"], [383, 2, 1, "", "mismatches"], [384, 2, 1, "", "nondegenerates"], [385, 2, 1, "", "read"], [386, 2, 1, "", "replace"], [387, 2, 1, "", "stops"], [388, 2, 1, "", "to_regex"], [389, 2, 1, "", "write"]], "skbio.sequence.RNA": [[391, 2, 1, "", "__bool__"], [392, 2, 1, "", "__contains__"], [393, 2, 1, "", "__copy__"], [394, 2, 1, "", "__deepcopy__"], [395, 2, 1, "", "__eq__"], [396, 2, 1, "", "__ge__"], [397, 2, 1, "", "__getitem__"], [398, 2, 1, "", "__getstate__"], [399, 2, 1, "", "__gt__"], [400, 2, 1, "", "__iter__"], [401, 2, 1, "", "__le__"], [402, 2, 1, "", "__len__"], [403, 2, 1, "", "__lt__"], [404, 2, 1, "", "__ne__"], [405, 2, 1, "", "__reversed__"], [406, 2, 1, "", "__str__"], [407, 2, 1, "", "complement"], [408, 2, 1, "", "concat"], [409, 2, 1, "", "count"], [410, 2, 1, "", "definites"], [411, 2, 1, "", "degap"], [412, 2, 1, "", "degenerates"], [413, 2, 1, "", "distance"], [414, 2, 1, "", "expand_degenerates"], [415, 2, 1, "", "find_motifs"], [416, 2, 1, "", "find_with_regex"], [417, 2, 1, "", "frequencies"], [418, 2, 1, "", "gaps"], [419, 2, 1, "", "gc_content"], [420, 2, 1, "", "gc_frequency"], [421, 2, 1, "", "has_definites"], [422, 2, 1, "", "has_degenerates"], [423, 2, 1, "", "has_gaps"], [424, 2, 1, "", "has_interval_metadata"], [425, 2, 1, "", "has_metadata"], [426, 2, 1, "", "has_nondegenerates"], [427, 2, 1, "", "has_positional_metadata"], [428, 2, 1, "", "index"], [429, 2, 1, "", "is_reverse_complement"], [430, 2, 1, "", "iter_contiguous"], [431, 2, 1, "", "iter_kmers"], [432, 2, 1, "", "kmer_frequencies"], [433, 2, 1, "", "lowercase"], [434, 2, 1, "", "match_frequency"], [435, 2, 1, "", "matches"], [436, 2, 1, "", "mismatch_frequency"], [437, 2, 1, "", "mismatches"], [438, 2, 1, "", "nondegenerates"], [439, 2, 1, "", "read"], [440, 2, 1, "", "replace"], [441, 2, 1, "", "reverse_complement"], [442, 2, 1, "", "reverse_transcribe"], [443, 2, 1, "", "to_regex"], [444, 2, 1, "", "translate"], [445, 2, 1, "", "translate_six_frames"], [446, 2, 1, "", "write"]], "skbio.sequence.Sequence": [[448, 2, 1, "", "__bool__"], [449, 2, 1, "", "__contains__"], [450, 2, 1, "", "__copy__"], [451, 2, 1, "", "__deepcopy__"], [452, 2, 1, "", "__eq__"], [453, 2, 1, "", "__ge__"], [454, 2, 1, "", "__getitem__"], [455, 2, 1, "", "__getstate__"], [456, 2, 1, "", "__gt__"], [457, 2, 1, "", "__iter__"], [458, 2, 1, "", "__le__"], [459, 2, 1, "", "__len__"], [460, 2, 1, "", "__lt__"], [461, 2, 1, "", "__ne__"], [462, 2, 1, "", "__reversed__"], [463, 2, 1, "", "__str__"], [464, 2, 1, "", "concat"], [465, 2, 1, "", "count"], [466, 2, 1, "", "distance"], [467, 2, 1, "", "find_with_regex"], [468, 2, 1, "", "frequencies"], [469, 2, 1, "", "has_interval_metadata"], [470, 2, 1, "", "has_metadata"], [471, 2, 1, "", "has_positional_metadata"], [472, 2, 1, "", "index"], [473, 2, 1, "", "iter_contiguous"], [474, 2, 1, "", "iter_kmers"], [475, 2, 1, "", "kmer_frequencies"], [476, 2, 1, "", "lowercase"], [477, 2, 1, "", "match_frequency"], [478, 2, 1, "", "matches"], [479, 2, 1, "", "mismatch_frequency"], [480, 2, 1, "", "mismatches"], [481, 2, 1, "", "read"], [482, 2, 1, "", "replace"], [483, 2, 1, "", "write"]], "skbio.sequence.SubstitutionMatrix": [[485, 2, 1, "", "__contains__"], [486, 2, 1, "", "__eq__"], [487, 2, 1, "", "__ge__"], [488, 2, 1, "", "__getitem__"], [489, 2, 1, "", "__getstate__"], [490, 2, 1, "", "__gt__"], [491, 2, 1, "", "__le__"], [492, 2, 1, "", "__lt__"], [493, 2, 1, "", "__ne__"], [494, 2, 1, "", "__str__"], [495, 2, 1, "", "between"], [496, 2, 1, "", "by_name"], [497, 2, 1, "", "copy"], [498, 2, 1, "", "filter"], [499, 2, 1, "", "from_dict"], [500, 2, 1, "", "from_iterable"], [501, 2, 1, "", "get_names"], [502, 2, 1, "", "identity"], [503, 2, 1, "", "index"], [504, 2, 1, "", "plot"], [505, 2, 1, "", "read"], [506, 2, 1, "", "redundant_form"], [507, 2, 1, "", "to_data_frame"], [508, 2, 1, "", "to_dict"], [509, 2, 1, "", "transpose"], [510, 2, 1, "", "within"], [511, 2, 1, "", "write"]], "skbio.sequence.distance": [[513, 3, 1, "", "hamming"], [514, 3, 1, "", "kmer_distance"]], "skbio.stats": [[515, 0, 0, "-", "composition"], [534, 0, 0, "-", "distance"], [594, 0, 0, "-", "evolve"], [596, 0, 0, "-", "gradient"], [685, 3, 1, "", "isubsample"], [686, 0, 0, "-", "ordination"], [711, 0, 0, "-", "power"], [716, 3, 1, "", "subsample_counts"]], "skbio.stats.composition": [[516, 3, 1, "", "alr"], [517, 3, 1, "", "alr_inv"], [518, 3, 1, "", "ancom"], [519, 3, 1, "", "centralize"], [520, 3, 1, "", "closure"], [521, 3, 1, "", "clr"], [522, 3, 1, "", "clr_inv"], [523, 3, 1, "", "ilr"], [524, 3, 1, "", "ilr_inv"], [525, 3, 1, "", "inner"], [526, 3, 1, "", "multiplicative_replacement"], [527, 3, 1, "", "pairwise_vlr"], [528, 3, 1, "", "perturb"], [529, 3, 1, "", "perturb_inv"], [530, 3, 1, "", "power"], [531, 3, 1, "", "sbp_basis"], [532, 3, 1, "", "tree_basis"], [533, 3, 1, "", "vlr"]], "skbio.stats.distance": [[535, 1, 1, "", "DissimilarityMatrix"], [558, 4, 1, "", "DissimilarityMatrixError"], [559, 1, 1, "", "DistanceMatrix"], [585, 4, 1, "", "DistanceMatrixError"], [586, 4, 1, "", "MissingIDError"], [587, 3, 1, "", "anosim"], [588, 3, 1, "", "bioenv"], [589, 3, 1, "", "mantel"], [590, 3, 1, "", "permanova"], [591, 3, 1, "", "permdisp"], [592, 3, 1, "", "pwmantel"], [593, 3, 1, "", "randdm"]], "skbio.stats.distance.DissimilarityMatrix": [[536, 2, 1, "", "__contains__"], [537, 2, 1, "", "__eq__"], [538, 2, 1, "", "__ge__"], [539, 2, 1, "", "__getitem__"], [540, 2, 1, "", "__getstate__"], [541, 2, 1, "", "__gt__"], [542, 2, 1, "", "__le__"], [543, 2, 1, "", "__lt__"], [544, 2, 1, "", "__ne__"], [545, 2, 1, "", "__str__"], [546, 2, 1, "", "between"], [547, 2, 1, "", "copy"], [548, 2, 1, "", "filter"], [549, 2, 1, "", "from_iterable"], [550, 2, 1, "", "index"], [551, 2, 1, "", "plot"], [552, 2, 1, "", "read"], [553, 2, 1, "", "redundant_form"], [554, 2, 1, "", "to_data_frame"], [555, 2, 1, "", "transpose"], [556, 2, 1, "", "within"], [557, 2, 1, "", "write"]], "skbio.stats.distance.DistanceMatrix": [[560, 2, 1, "", "__contains__"], [561, 2, 1, "", "__eq__"], [562, 2, 1, "", "__ge__"], [563, 2, 1, "", "__getitem__"], [564, 2, 1, "", "__getstate__"], [565, 2, 1, "", "__gt__"], [566, 2, 1, "", "__le__"], [567, 2, 1, "", "__lt__"], [568, 2, 1, "", "__ne__"], [569, 2, 1, "", "__str__"], [570, 2, 1, "", "between"], [571, 2, 1, "", "condensed_form"], [572, 2, 1, "", "copy"], [573, 2, 1, "", "filter"], [574, 2, 1, "", "from_iterable"], [575, 2, 1, "", "index"], [576, 2, 1, "", "permute"], [577, 2, 1, "", "plot"], [578, 2, 1, "", "read"], [579, 2, 1, "", "redundant_form"], [580, 2, 1, "", "to_data_frame"], [581, 2, 1, "", "to_series"], [582, 2, 1, "", "transpose"], [583, 2, 1, "", "within"], [584, 2, 1, "", "write"]], "skbio.stats.evolve": [[595, 3, 1, "", "hommola_cospeciation"]], "skbio.stats.gradient": [[597, 1, 1, "", "AverageGradientANOVA"], [608, 1, 1, "", "CategoryResults"], [619, 1, 1, "", "FirstDifferenceGradientANOVA"], [630, 1, 1, "", "GradientANOVA"], [641, 1, 1, "", "GradientANOVAResults"], [652, 1, 1, "", "GroupResults"], [663, 1, 1, "", "TrajectoryGradientANOVA"], [674, 1, 1, "", "WindowDifferenceGradientANOVA"]], "skbio.stats.gradient.AverageGradientANOVA": [[598, 2, 1, "", "__eq__"], [599, 2, 1, "", "__ge__"], [600, 2, 1, "", "__getstate__"], [601, 2, 1, "", "__gt__"], [602, 2, 1, "", "__hash__"], [603, 2, 1, "", "__le__"], [604, 2, 1, "", "__lt__"], [605, 2, 1, "", "__ne__"], [606, 2, 1, "", "__str__"], [607, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.CategoryResults": [[609, 2, 1, "", "__eq__"], [610, 2, 1, "", "__ge__"], [611, 2, 1, "", "__getstate__"], [612, 2, 1, "", "__gt__"], [613, 2, 1, "", "__hash__"], [614, 2, 1, "", "__le__"], [615, 2, 1, "", "__lt__"], [616, 2, 1, "", "__ne__"], [617, 2, 1, "", "__str__"], [618, 2, 1, "", "to_files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[620, 2, 1, "", "__eq__"], [621, 2, 1, "", "__ge__"], [622, 2, 1, "", "__getstate__"], [623, 2, 1, "", "__gt__"], [624, 2, 1, "", "__hash__"], [625, 2, 1, "", "__le__"], [626, 2, 1, "", "__lt__"], [627, 2, 1, "", "__ne__"], [628, 2, 1, "", "__str__"], [629, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVA": [[631, 2, 1, "", "__eq__"], [632, 2, 1, "", "__ge__"], [633, 2, 1, "", "__getstate__"], [634, 2, 1, "", "__gt__"], [635, 2, 1, "", "__hash__"], [636, 2, 1, "", "__le__"], [637, 2, 1, "", "__lt__"], [638, 2, 1, "", "__ne__"], [639, 2, 1, "", "__str__"], [640, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[642, 2, 1, "", "__eq__"], [643, 2, 1, "", "__ge__"], [644, 2, 1, "", "__getstate__"], [645, 2, 1, "", "__gt__"], [646, 2, 1, "", "__hash__"], [647, 2, 1, "", "__le__"], [648, 2, 1, "", "__lt__"], [649, 2, 1, "", "__ne__"], [650, 2, 1, "", "__str__"], [651, 2, 1, "", "to_files"]], "skbio.stats.gradient.GroupResults": [[653, 2, 1, "", "__eq__"], [654, 2, 1, "", "__ge__"], [655, 2, 1, "", "__getstate__"], [656, 2, 1, "", "__gt__"], [657, 2, 1, "", "__hash__"], [658, 2, 1, "", "__le__"], [659, 2, 1, "", "__lt__"], [660, 2, 1, "", "__ne__"], [661, 2, 1, "", "__str__"], [662, 2, 1, "", "to_files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[664, 2, 1, "", "__eq__"], [665, 2, 1, "", "__ge__"], [666, 2, 1, "", "__getstate__"], [667, 2, 1, "", "__gt__"], [668, 2, 1, "", "__hash__"], [669, 2, 1, "", "__le__"], [670, 2, 1, "", "__lt__"], [671, 2, 1, "", "__ne__"], [672, 2, 1, "", "__str__"], [673, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[675, 2, 1, "", "__eq__"], [676, 2, 1, "", "__ge__"], [677, 2, 1, "", "__getstate__"], [678, 2, 1, "", "__gt__"], [679, 2, 1, "", "__hash__"], [680, 2, 1, "", "__le__"], [681, 2, 1, "", "__lt__"], [682, 2, 1, "", "__ne__"], [683, 2, 1, "", "__str__"], [684, 2, 1, "", "get_trajectories"]], "skbio.stats.ordination": [[687, 1, 1, "", "OrdinationResults"], [700, 3, 1, "", "ca"], [701, 3, 1, "", "cca"], [702, 3, 1, "", "corr"], [703, 3, 1, "", "e_matrix"], [704, 3, 1, "", "f_matrix"], [705, 3, 1, "", "mean_and_std"], [706, 3, 1, "", "pcoa"], [707, 3, 1, "", "pcoa_biplot"], [708, 3, 1, "", "rda"], [709, 3, 1, "", "scale"], [710, 3, 1, "", "svd_rank"]], "skbio.stats.ordination.OrdinationResults": [[688, 2, 1, "", "__eq__"], [689, 2, 1, "", "__ge__"], [690, 2, 1, "", "__getstate__"], [691, 2, 1, "", "__gt__"], [692, 2, 1, "", "__hash__"], [693, 2, 1, "", "__le__"], [694, 2, 1, "", "__lt__"], [695, 2, 1, "", "__ne__"], [696, 2, 1, "", "__str__"], [697, 2, 1, "", "plot"], [698, 2, 1, "", "read"], [699, 2, 1, "", "write"]], "skbio.stats.power": [[712, 3, 1, "", "confidence_bound"], [713, 3, 1, "", "paired_subsamples"], [714, 3, 1, "", "subsample_paired_power"], [715, 3, 1, "", "subsample_power"]], "skbio.tree": [[717, 4, 1, "", "DuplicateNodeError"], [718, 4, 1, "", "MissingNodeError"], [719, 4, 1, "", "NoLengthError"], [720, 4, 1, "", "NoParentError"], [721, 4, 1, "", "TreeError"], [722, 1, 1, "", "TreeNode"], [801, 3, 1, "", "majority_rule"], [802, 3, 1, "", "nj"]], "skbio.tree.TreeNode": [[723, 2, 1, "", "__copy__"], [724, 2, 1, "", "__deepcopy__"], [725, 2, 1, "", "__eq__"], [726, 2, 1, "", "__ge__"], [727, 2, 1, "", "__getitem__"], [728, 2, 1, "", "__getstate__"], [729, 2, 1, "", "__gt__"], [730, 2, 1, "", "__hash__"], [731, 2, 1, "", "__iter__"], [732, 2, 1, "", "__le__"], [733, 2, 1, "", "__len__"], [734, 2, 1, "", "__lt__"], [735, 2, 1, "", "__ne__"], [736, 2, 1, "", "__str__"], [737, 2, 1, "", "accumulate_to_ancestor"], [738, 2, 1, "", "ancestors"], [739, 2, 1, "", "append"], [740, 2, 1, "", "ascii_art"], [741, 2, 1, "", "assign_ids"], [742, 2, 1, "", "assign_supports"], [743, 2, 1, "", "bifurcate"], [744, 2, 1, "", "cache_attr"], [745, 2, 1, "", "compare_rfd"], [746, 2, 1, "", "compare_subsets"], [747, 2, 1, "", "compare_tip_distances"], [748, 2, 1, "", "copy"], [749, 2, 1, "", "count"], [750, 2, 1, "", "create_caches"], [751, 2, 1, "", "deepcopy"], [752, 2, 1, "", "descending_branch_length"], [753, 2, 1, "", "distance"], [754, 2, 1, "", "extend"], [755, 2, 1, "", "find"], [756, 2, 1, "", "find_all"], [757, 2, 1, "", "find_by_func"], [758, 2, 1, "", "find_by_id"], [759, 2, 1, "", "from_linkage_matrix"], [760, 2, 1, "", "from_taxdump"], [761, 2, 1, "", "from_taxonomy"], [762, 2, 1, "", "get_max_distance"], [763, 2, 1, "", "has_children"], [764, 2, 1, "", "index_tree"], [765, 2, 1, "", "invalidate_caches"], [766, 2, 1, "", "is_root"], [767, 2, 1, "", "is_tip"], [768, 2, 1, "", "lca"], [769, 2, 1, "", "levelorder"], [770, 2, 1, "", "lowest_common_ancestor"], [771, 2, 1, "", "neighbors"], [772, 2, 1, "", "non_tips"], [773, 2, 1, "", "observed_node_counts"], [774, 2, 1, "", "pop"], [775, 2, 1, "", "postorder"], [776, 2, 1, "", "pre_and_postorder"], [777, 2, 1, "", "preorder"], [778, 2, 1, "", "prune"], [779, 2, 1, "", "read"], [780, 2, 1, "", "remove"], [781, 2, 1, "", "remove_deleted"], [782, 2, 1, "", "root"], [783, 2, 1, "", "root_at"], [784, 2, 1, "", "root_at_midpoint"], [785, 2, 1, "", "shear"], [786, 2, 1, "", "shuffle"], [787, 2, 1, "", "siblings"], [788, 2, 1, "", "subset"], [789, 2, 1, "", "subsets"], [790, 2, 1, "", "subtree"], [791, 2, 1, "", "tip_tip_distances"], [792, 2, 1, "", "tips"], [793, 2, 1, "", "to_array"], [794, 2, 1, "", "to_taxonomy"], [795, 2, 1, "", "traverse"], [796, 2, 1, "", "unpack"], [797, 2, 1, "", "unpack_by_func"], [798, 2, 1, "", "unrooted_copy"], [799, 2, 1, "", "unrooted_deepcopy"], [800, 2, 1, "", "write"]], "skbio.util": [[803, 4, 1, "", "EfficiencyWarning"], [804, 4, 1, "", "RepresentationWarning"], [805, 3, 1, "", "assert_data_frame_almost_equal"], [806, 3, 1, "", "assert_ordination_results_equal"], [807, 3, 1, "", "cardinal_to_ordinal"], [808, 1, 1, "", "classproperty"], [825, 3, 1, "", "find_duplicates"], [826, 3, 1, "", "get_data_path"], [827, 3, 1, "", "safe_md5"]], "skbio.util.classproperty": [[809, 2, 1, "", "__delete__"], [810, 2, 1, "", "__eq__"], [811, 2, 1, "", "__ge__"], [812, 2, 1, "", "__get__"], [813, 2, 1, "", "__getstate__"], [814, 2, 1, "", "__gt__"], [815, 2, 1, "", "__hash__"], [816, 2, 1, "", "__le__"], [817, 2, 1, "", "__lt__"], [818, 2, 1, "", "__ne__"], [819, 2, 1, "", "__set__"], [820, 2, 1, "", "__set_name__"], [821, 2, 1, "", "__str__"], [822, 2, 1, "", "deleter"], [823, 2, 1, "", "getter"], [824, 2, 1, "", "setter"]], "skbio.workflow": [[828, 1, 1, "", "Workflow"], [840, 1, 1, "", "method"], [851, 1, 1, "", "requires"]], "skbio.workflow.Workflow": [[829, 2, 1, "", "__call__"], [830, 2, 1, "", "__eq__"], [831, 2, 1, "", "__ge__"], [832, 2, 1, "", "__getstate__"], [833, 2, 1, "", "__gt__"], [834, 2, 1, "", "__hash__"], [835, 2, 1, "", "__le__"], [836, 2, 1, "", "__lt__"], [837, 2, 1, "", "__ne__"], [838, 2, 1, "", "__str__"], [839, 2, 1, "", "initialize_state"]], "skbio.workflow.method": [[841, 2, 1, "", "__call__"], [842, 2, 1, "", "__eq__"], [843, 2, 1, "", "__ge__"], [844, 2, 1, "", "__getstate__"], [845, 2, 1, "", "__gt__"], [846, 2, 1, "", "__hash__"], [847, 2, 1, "", "__le__"], [848, 2, 1, "", "__lt__"], [849, 2, 1, "", "__ne__"], [850, 2, 1, "", "__str__"]], "skbio.workflow.requires": [[852, 2, 1, "", "__call__"], [853, 2, 1, "", "__eq__"], [854, 2, 1, "", "__ge__"], [855, 2, 1, "", "__getstate__"], [856, 2, 1, "", "__gt__"], [857, 2, 1, "", "__hash__"], [858, 2, 1, "", "__le__"], [859, 2, 1, "", "__lt__"], [860, 2, 1, "", "__ne__"], [861, 2, 1, "", "__str__"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"]}, "titleterms": {"align": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 134, 143, 145], "skbio": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869], "data": [0, 136, 534], "structur": [0, 534], "optim": 0, "i": [0, 147, 188, 863], "e": 0, "product": [0, 135], "readi": 0, "algorithm": 0, "slow": 0, "educ": 0, "purpos": 0, "onli": [0, 144], "gener": [0, 135, 136, 144], "function": [0, 1, 68, 104, 147, 188, 512, 515, 534, 594, 686, 711, 863, 866, 867, 868], "exampl": [0, 1, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 515, 534, 596, 686, 711, 865, 867, 869], "divers": [1, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], "calcul": 1, "driver": 1, "input": 1, "valid": 1, "count": [1, 240, 308, 357, 409, 465, 749], "vector": 1, "specifi": 1, "metric": [1, 512], "subpackag": [1, 863, 865, 866], "alignmentstructur": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "__eq__": [3, 18, 33, 150, 163, 193, 205, 226, 279, 295, 344, 395, 452, 486, 537, 561, 598, 609, 620, 631, 642, 653, 664, 675, 688, 725, 810, 830, 842, 853], "__ge__": [4, 19, 34, 151, 164, 194, 206, 227, 280, 296, 345, 396, 453, 487, 538, 562, 599, 610, 621, 632, 643, 654, 665, 676, 689, 726, 811, 831, 843, 854], "__getitem__": [5, 35, 228, 297, 346, 397, 454, 488, 539, 563, 727], "__getstate__": [6, 20, 36, 152, 165, 195, 207, 229, 281, 298, 347, 398, 455, 489, 540, 564, 600, 611, 622, 633, 644, 655, 666, 677, 690, 728, 813, 832, 844, 855], "__gt__": [7, 21, 37, 153, 166, 196, 208, 230, 282, 299, 348, 399, 456, 490, 541, 565, 601, 612, 623, 634, 645, 656, 667, 678, 691, 729, 814, 833, 845, 856], "__hash__": [8, 22, 154, 167, 602, 613, 624, 635, 646, 657, 668, 679, 692, 730, 815, 834, 846, 857], "__le__": [9, 23, 39, 155, 168, 197, 209, 232, 283, 301, 350, 401, 458, 491, 542, 566, 603, 614, 625, 636, 647, 658, 669, 680, 693, 732, 816, 835, 847, 858], "__lt__": [10, 24, 41, 156, 169, 198, 210, 234, 284, 303, 352, 403, 460, 492, 543, 567, 604, 615, 626, 637, 648, 659, 670, 681, 694, 734, 817, 836, 848, 859], "__ne__": [11, 25, 42, 157, 170, 199, 211, 235, 285, 304, 353, 404, 461, 493, 544, 568, 605, 616, 627, 638, 649, 660, 671, 682, 695, 735, 818, 837, 849, 860], "__setstate__": [12, 26], "__str__": [13, 27, 44, 158, 171, 200, 212, 237, 286, 306, 355, 406, 463, 494, 545, 569, 606, 617, 628, 639, 650, 661, 672, 683, 696, 736, 821, 838, 850, 861], "is_zero_bas": 14, "set_zero_bas": 15, "stripedsmithwaterman": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "__call__": [17, 829, 841, 852], "tabularmsa": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 136], "__bool__": [29, 222, 291, 340, 391, 448], "__contains__": [30, 223, 292, 341, 392, 449, 485, 536, 560], "__copy__": [31, 203, 224, 293, 342, 393, 450, 723], "__deepcopy__": [32, 204, 225, 294, 343, 394, 451, 724], "__iter__": [38, 231, 300, 349, 400, 457, 731], "__len__": [40, 233, 302, 351, 402, 459, 733], "__reversed__": [43, 236, 305, 354, 405, 462], "append": [45, 739], "consensu": 46, "conserv": 47, "extend": [48, 754], "from_dict": [49, 499], "gap_frequ": 50, "has_metadata": [51, 256, 322, 371, 425, 470], "has_positional_metadata": [52, 258, 324, 373, 427, 471], "iter_posit": 53, "join": 54, "read": [55, 135, 136, 138, 180, 185, 218, 270, 335, 385, 439, 481, 505, 552, 578, 698, 779, 863], "reassign_index": 56, "sort": [57, 219], "to_dict": [58, 508], "write": [59, 136, 138, 182, 187, 220, 277, 338, 389, 446, 483, 511, 557, 584, 699, 800, 863], "global_pairwise_align": 60, "global_pairwise_align_nucleotid": 61, "global_pairwise_align_protein": 62, "local_pairwise_align": 63, "local_pairwise_align_nucleotid": 64, "local_pairwise_align_protein": 65, "local_pairwise_align_ssw": 66, "make_identity_substitution_matrix": 67, "alpha": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "measur": [68, 104], "ac": 69, "berger_parker_d": 70, "brillouin_d": 71, "chao1": 72, "chao1_ci": 73, "domin": 74, "doubl": 75, "enspi": 76, "esty_ci": 77, "faith_pd": 78, "fisher_alpha": 79, "gini_index": 80, "goods_coverag": 81, "heip_": 82, "kempton_taylor_q": 83, "lladser_ci": 84, "lladser_p": 85, "margalef": 86, "mcintosh_d": 87, "mcintosh_": 88, "menhinick": 89, "michaelis_menten_fit": 90, "observed_featur": 91, "observed_otu": 92, "osd": 93, "phydiv": 94, "pielou_": 95, "robbin": 96, "shannon": 97, "simpson": 98, "simpson_": 99, "singl": 100, "sob": 101, "strong": 102, "alpha_divers": 103, "beta": [104, 105, 106], "unweighted_unifrac": 105, "weighted_unifrac": 106, "beta_divers": 107, "block_beta_divers": 108, "get_alpha_diversity_metr": 109, "get_beta_diversity_metr": 110, "partial_beta_divers": 111, "io": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 863], "argumentoverridewarn": 112, "blast7formaterror": 113, "clustalformaterror": 114, "emblformaterror": 115, "fastaformaterror": 116, "fastqformaterror": 117, "fileformaterror": 118, "formatidentificationwarn": 119, "gff3formaterror": 120, "genbankformaterror": 121, "iosourceerror": 122, "lsmatformaterror": 123, "newickformaterror": 124, "ordinationformaterror": 125, "phylipformaterror": 126, "qseqformaterror": 127, "qualformaterror": 128, "stockholmformaterror": 129, "unrecognizedformaterror": 130, "simpl": 131, "binari": 131, "dissimilar": 131, "matrix": [131, 140, 534], "format": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 863], "binary_dm": 131, "support": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 863], "specif": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146], "refer": [131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 515, 534, 686, 862], "blast": [132, 133], "6": 132, "blast6": 132, "column": [132, 133], "type": [132, 133], "paramet": [132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146], "7": 133, "blast7": 133, "clustal": 134, "section": [134, 135, 138, 143], "embl": 135, "featur": [135, 138], "level": 135, "befor": [135, 138], "fh": 135, "header": [135, 136, 143, 145], "ft": 135, "sq": 135, "file": [135, 136, 138, 863], "us": [135, 863], "fasta": 136, "qual": 136, "sequenc": [136, 143, 145, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 865], "reader": [136, 138, 139, 159], "writer": [136, 139, 161], "fastq": 137, "qualiti": 137, "score": 137, "variant": 137, "genbank": 138, "locat": 138, "string": 138, "origin": 138, "gff3": 139, "label": [140, 141], "squar": 140, "lsmat": 140, "newick": 141, "formal": 141, "grammar": 141, "explan": 141, "basic": 141, "symbol": 141, "applic": 141, "rule": 141, "ad": 141, "node": [141, 146], "inform": 141, "advanc": 141, "length": 141, "inlin": 141, "comment": 141, "whitespac": 141, "caveat": 141, "ordin": [142, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710], "result": 142, "phylip": 143, "multipl": [143, 145], "qseq": 144, "stockholm": 145, "metadata": [145, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 864], "gf": 145, "g": 145, "gr": 145, "gc": 145, "footer": 145, "taxdump": 146, "dmp": 146, "name": 146, "divis": 146, "gencod": 146, "o": [147, 188, 863], "registri": [147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "class": [147, 534, 596, 686, 864, 865, 867, 869], "except": [147, 534, 863, 867], "creat": 147, "new": 147, "scikit": [147, 862, 863], "bio": [147, 862, 863], "reserv": 147, "keyword": 147, "argument": 147, "duplicateregistrationerror": 148, "sniffer": 160, "ioregistri": [162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], "add_format": 172, "create_format": [173, 184], "get_read": 174, "get_sniff": 175, "get_writ": 176, "list_read_format": 177, "list_write_format": 178, "monkey_patch": 179, "sniff": [181, 186], "invalidregistrationerror": 183, "util": [188, 189, 190, 191, 686, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 867, 868], "open": 189, "open_fil": [190, 191], "interv": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "drop": [201, 215], "intervalmetadata": [202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220], "add": 213, "concat": [214, 239, 307, 356, 408, 464], "merg": 216, "queri": 217, "dna": [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "complement": [238, 407], "definit": [241, 309, 358, 410], "degap": [242, 310, 359, 411], "degener": [243, 311, 360, 412], "distanc": [244, 312, 361, 413, 466, 512, 513, 514, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 753], "expand_degener": [245, 313, 362, 414], "find_motif": [246, 314, 363, 415], "find_with_regex": [247, 315, 364, 416, 467], "frequenc": [248, 316, 365, 417, 468], "gap": [249, 317, 366, 418], "gc_content": [250, 419], "gc_frequenc": [251, 420], "has_definit": [252, 318, 367, 421], "has_degener": [253, 319, 368, 422], "has_gap": [254, 320, 369, 423], "has_interval_metadata": [255, 321, 370, 424, 469], "has_nondegener": [257, 323, 372, 426], "index": [259, 325, 375, 428, 472, 503, 550, 575], "is_reverse_compl": [260, 429], "iter_contigu": [261, 326, 376, 430, 473], "iter_km": [262, 327, 377, 431, 474], "kmer_frequ": [263, 328, 378, 432, 475], "lowercas": [264, 329, 379, 433, 476], "match_frequ": [265, 330, 380, 434, 477], "match": [266, 331, 381, 435, 478], "mismatch_frequ": [267, 332, 382, 436, 479], "mismatch": [268, 333, 383, 437, 480], "nondegener": [269, 334, 384, 438], "replac": [271, 336, 386, 440, 482], "reverse_compl": [272, 441], "to_regex": [273, 337, 388, 443], "transcrib": 274, "translat": [275, 288, 444], "translate_six_fram": [276, 289, 445], "geneticcod": [278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "from_ncbi": 287, "grammaredsequ": [290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338], "protein": [339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389], "has_stop": 374, "stop": 387, "rna": [390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446], "reverse_transcrib": 442, "substitutionmatrix": [484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511], "between": [495, 546, 570], "by_nam": 496, "copi": [497, 547, 572, 748], "filter": [498, 548, 573], "from_iter": [500, 549, 574], "get_nam": 501, "ident": 502, "plot": [504, 551, 577, 697], "redundant_form": [506, 553, 579], "to_data_fram": [507, 554, 580], "transpos": [509, 555, 582], "within": [510, 556, 583], "ham": 513, "kmer_dist": 514, "composit": [515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533], "statist": [515, 534, 594, 866], "stat": [515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 866], "alr": 516, "alr_inv": 517, "ancom": 518, "central": 519, "closur": 520, "clr": 521, "clr_inv": 522, "ilr": 523, "ilr_inv": 524, "inner": 525, "multiplicative_replac": 526, "pairwise_vlr": 527, "perturb": 528, "perturb_inv": 529, "power": [530, 711, 712, 713, 714, 715], "sbp_basi": 531, "tree_basi": 532, "vlr": 533, "matric": 534, "base": 534, "dissimilaritymatrix": [534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], "distancematrix": [534, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584], "categor": 534, "variabl": 534, "continu": 534, "comparison": 534, "dissimilaritymatrixerror": 558, "condensed_form": 571, "permut": 576, "to_seri": 581, "distancematrixerror": 585, "missingiderror": 586, "anosim": 587, "bioenv": 588, "mantel": 589, "permanova": 590, "permdisp": 591, "pwmantel": 592, "randdm": 593, "evolutionari": 594, "evolv": [594, 595], "cophylogenet": 594, "method": [594, 686, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850], "hommola_cospeci": 595, "gradient": [596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684], "analys": 596, "averagegradientanova": [597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607], "get_trajectori": [607, 629, 640, 673, 684], "categoryresult": [608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618], "to_fil": [618, 651, 662], "firstdifferencegradientanova": [619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629], "gradientanova": [630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640], "gradientanovaresult": [641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651], "groupresult": [652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662], "trajectorygradientanova": [663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673], "windowdifferencegradientanova": [674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684], "isubsampl": 685, "ordinationresult": [687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699], "ca": 700, "cca": 701, "corr": 702, "e_matrix": 703, "f_matrix": 704, "mean_and_std": 705, "pcoa": 706, "pcoa_biplot": 707, "rda": 708, "scale": 709, "svd_rank": 710, "empir": 711, "estim": 711, "confidence_bound": 712, "paired_subsampl": 713, "subsample_paired_pow": 714, "subsample_pow": 715, "subsample_count": 716, "tree": [717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 867], "duplicatenodeerror": 717, "missingnodeerror": 718, "nolengtherror": 719, "noparenterror": 720, "treeerror": 721, "treenod": [722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800], "accumulate_to_ancestor": 737, "ancestor": 738, "ascii_art": 740, "assign_id": 741, "assign_support": 742, "bifurc": 743, "cache_attr": 744, "compare_rfd": 745, "compare_subset": 746, "compare_tip_dist": 747, "create_cach": 750, "deepcopi": 751, "descending_branch_length": 752, "find": 755, "find_al": 756, "find_by_func": 757, "find_by_id": 758, "from_linkage_matrix": 759, "from_taxdump": 760, "from_taxonomi": 761, "get_max_dist": 762, "has_children": 763, "index_tre": 764, "invalidate_cach": 765, "is_root": 766, "is_tip": 767, "lca": 768, "levelord": 769, "lowest_common_ancestor": 770, "neighbor": 771, "non_tip": 772, "observed_node_count": 773, "pop": 774, "postord": 775, "pre_and_postord": 776, "preorder": 777, "prune": 778, "remov": 780, "remove_delet": 781, "root": 782, "root_at": 783, "root_at_midpoint": 784, "shear": 785, "shuffl": 786, "sibl": 787, "subset": [788, 789], "subtre": 790, "tip_tip_dist": 791, "tip": 792, "to_arrai": 793, "to_taxonomi": 794, "travers": 795, "unpack": 796, "unpack_by_func": 797, "unrooted_copi": 798, "unrooted_deepcopi": 799, "majority_rul": 801, "nj": 802, "efficiencywarn": 803, "representationwarn": 804, "assert_data_frame_almost_equ": 805, "assert_ordination_results_equ": 806, "cardinal_to_ordin": 807, "classproperti": [808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824], "__delete__": 809, "__get__": 812, "__set__": 819, "__set_name__": 820, "delet": 822, "getter": 823, "setter": 824, "find_dupl": 825, "get_data_path": 826, "safe_md5": 827, "workflow": [828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 869], "initialize_st": 839, "requir": [851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861], "0": 862, "5": 862, "10": 862, "dev": 862, "api": 862, "user": 863, "warn": [863, 868], "introduct": 863, "what": 863, "kind": 863, "can": 863, "from": 863, "represent": 867, "phylogenet": 867, "reconstruct": 867, "test": 868, "miscellan": 868, "construct": 869, "decor": 869}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Alignments (skbio.alignment)": [[0, "alignments-skbio-alignment"]], "Data Structures": [[0, "data-structures"]], "Optimized (i.e., production-ready) Alignment Algorithms": [[0, "optimized-i-e-production-ready-alignment-algorithms"]], "Slow (i.e., educational-purposes only) Alignment Algorithms": [[0, "slow-i-e-educational-purposes-only-alignment-algorithms"]], "General functionality": [[0, "general-functionality"]], "Data Structure Examples": [[0, "data-structure-examples"]], "Alignment Algorithm Examples": [[0, "alignment-algorithm-examples"]], "Optimized Alignment Algorithm Examples": [[0, "optimized-alignment-algorithm-examples"]], "Slow Alignment Algorithm Examples": [[0, "slow-alignment-algorithm-examples"]], "Diversity calculations (skbio.diversity)": [[1, "diversity-calculations-skbio-diversity"]], "Driver functions": [[1, "driver-functions"]], "Input validation": [[1, "input-validation"]], "Count vectors": [[1, "count-vectors"]], "Specifying a diversity metric": [[1, "specifying-a-diversity-metric"]], "Subpackages": [[1, "subpackages"], [863, "subpackages"], [865, "subpackages"], [866, "subpackages"]], "Functions": [[1, "functions"], [68, "functions"], [104, "functions"], [147, "functions"], [188, "functions"], [512, "functions"], [515, "functions"], [534, "functions"], [594, "functions"], [711, "functions"], [866, "functions"]], "Examples": [[1, "examples"], [132, "examples"], [133, "examples"], [134, "examples"], [135, "examples"], [136, "examples"], [137, "examples"], [138, "examples"], [139, "examples"], [141, "examples"], [142, "examples"], [143, "examples"], [144, "examples"], [145, "examples"], [146, "examples"], [515, "examples"], [534, "examples"], [596, "examples"], [686, "examples"], [711, "examples"], [865, "examples"], [867, "examples"], [869, "examples"]], "skbio.alignment.AlignmentStructure": [[2, "skbio-alignment-alignmentstructure"]], "skbio.alignment.AlignmentStructure.__eq__": [[3, "skbio-alignment-alignmentstructure-eq"]], "skbio.alignment.AlignmentStructure.__ge__": [[4, "skbio-alignment-alignmentstructure-ge"]], "skbio.alignment.AlignmentStructure.__getitem__": [[5, "skbio-alignment-alignmentstructure-getitem"]], "skbio.alignment.AlignmentStructure.__getstate__": [[6, "skbio-alignment-alignmentstructure-getstate"]], "skbio.alignment.AlignmentStructure.__gt__": [[7, "skbio-alignment-alignmentstructure-gt"]], "skbio.alignment.AlignmentStructure.__hash__": [[8, "skbio-alignment-alignmentstructure-hash"]], "skbio.alignment.AlignmentStructure.__le__": [[9, "skbio-alignment-alignmentstructure-le"]], "skbio.alignment.AlignmentStructure.__lt__": [[10, "skbio-alignment-alignmentstructure-lt"]], "skbio.alignment.AlignmentStructure.__ne__": [[11, "skbio-alignment-alignmentstructure-ne"]], "skbio.alignment.AlignmentStructure.__setstate__": [[12, "skbio-alignment-alignmentstructure-setstate"]], "skbio.alignment.AlignmentStructure.__str__": [[13, "skbio-alignment-alignmentstructure-str"]], "skbio.alignment.AlignmentStructure.is_zero_based": [[14, "skbio-alignment-alignmentstructure-is-zero-based"]], "skbio.alignment.AlignmentStructure.set_zero_based": [[15, "skbio-alignment-alignmentstructure-set-zero-based"]], "skbio.alignment.StripedSmithWaterman": [[16, "skbio-alignment-stripedsmithwaterman"]], "skbio.alignment.StripedSmithWaterman.__call__": [[17, "skbio-alignment-stripedsmithwaterman-call"]], "skbio.alignment.StripedSmithWaterman.__eq__": [[18, "skbio-alignment-stripedsmithwaterman-eq"]], "skbio.alignment.StripedSmithWaterman.__ge__": [[19, "skbio-alignment-stripedsmithwaterman-ge"]], "skbio.alignment.StripedSmithWaterman.__getstate__": [[20, "skbio-alignment-stripedsmithwaterman-getstate"]], "skbio.alignment.StripedSmithWaterman.__gt__": [[21, "skbio-alignment-stripedsmithwaterman-gt"]], "skbio.alignment.StripedSmithWaterman.__hash__": [[22, "skbio-alignment-stripedsmithwaterman-hash"]], "skbio.alignment.StripedSmithWaterman.__le__": [[23, "skbio-alignment-stripedsmithwaterman-le"]], "skbio.alignment.StripedSmithWaterman.__lt__": [[24, "skbio-alignment-stripedsmithwaterman-lt"]], "skbio.alignment.StripedSmithWaterman.__ne__": [[25, "skbio-alignment-stripedsmithwaterman-ne"]], "skbio.alignment.StripedSmithWaterman.__setstate__": [[26, "skbio-alignment-stripedsmithwaterman-setstate"]], "skbio.alignment.StripedSmithWaterman.__str__": [[27, "skbio-alignment-stripedsmithwaterman-str"]], "skbio.alignment.TabularMSA": [[28, "skbio-alignment-tabularmsa"]], "skbio.alignment.TabularMSA.__bool__": [[29, "skbio-alignment-tabularmsa-bool"]], "skbio.alignment.TabularMSA.__contains__": [[30, "skbio-alignment-tabularmsa-contains"]], "skbio.alignment.TabularMSA.__copy__": [[31, "skbio-alignment-tabularmsa-copy"]], "skbio.alignment.TabularMSA.__deepcopy__": [[32, "skbio-alignment-tabularmsa-deepcopy"]], "skbio.alignment.TabularMSA.__eq__": [[33, "skbio-alignment-tabularmsa-eq"]], "skbio.alignment.TabularMSA.__ge__": [[34, "skbio-alignment-tabularmsa-ge"]], "skbio.alignment.TabularMSA.__getitem__": [[35, "skbio-alignment-tabularmsa-getitem"]], "skbio.alignment.TabularMSA.__getstate__": [[36, "skbio-alignment-tabularmsa-getstate"]], "skbio.alignment.TabularMSA.__gt__": [[37, "skbio-alignment-tabularmsa-gt"]], "skbio.alignment.TabularMSA.__iter__": [[38, "skbio-alignment-tabularmsa-iter"]], "skbio.alignment.TabularMSA.__le__": [[39, "skbio-alignment-tabularmsa-le"]], "skbio.alignment.TabularMSA.__len__": [[40, "skbio-alignment-tabularmsa-len"]], "skbio.alignment.TabularMSA.__lt__": [[41, "skbio-alignment-tabularmsa-lt"]], "skbio.alignment.TabularMSA.__ne__": [[42, "skbio-alignment-tabularmsa-ne"]], "skbio.alignment.TabularMSA.__reversed__": [[43, "skbio-alignment-tabularmsa-reversed"]], "skbio.alignment.TabularMSA.__str__": [[44, "skbio-alignment-tabularmsa-str"]], "skbio.alignment.TabularMSA.append": [[45, "skbio-alignment-tabularmsa-append"]], "skbio.alignment.TabularMSA.consensus": [[46, "skbio-alignment-tabularmsa-consensus"]], "skbio.alignment.TabularMSA.conservation": [[47, "skbio-alignment-tabularmsa-conservation"]], "skbio.alignment.TabularMSA.extend": [[48, "skbio-alignment-tabularmsa-extend"]], "skbio.alignment.TabularMSA.from_dict": [[49, "skbio-alignment-tabularmsa-from-dict"]], "skbio.alignment.TabularMSA.gap_frequencies": [[50, "skbio-alignment-tabularmsa-gap-frequencies"]], "skbio.alignment.TabularMSA.has_metadata": [[51, "skbio-alignment-tabularmsa-has-metadata"]], "skbio.alignment.TabularMSA.has_positional_metadata": [[52, "skbio-alignment-tabularmsa-has-positional-metadata"]], "skbio.alignment.TabularMSA.iter_positions": [[53, "skbio-alignment-tabularmsa-iter-positions"]], "skbio.alignment.TabularMSA.join": [[54, "skbio-alignment-tabularmsa-join"]], "skbio.alignment.TabularMSA.read": [[55, "skbio-alignment-tabularmsa-read"]], "skbio.alignment.TabularMSA.reassign_index": [[56, "skbio-alignment-tabularmsa-reassign-index"]], "skbio.alignment.TabularMSA.sort": [[57, "skbio-alignment-tabularmsa-sort"]], "skbio.alignment.TabularMSA.to_dict": [[58, "skbio-alignment-tabularmsa-to-dict"]], "skbio.alignment.TabularMSA.write": [[59, "skbio-alignment-tabularmsa-write"]], "skbio.alignment.global_pairwise_align": [[60, "skbio-alignment-global-pairwise-align"]], "skbio.alignment.global_pairwise_align_nucleotide": [[61, "skbio-alignment-global-pairwise-align-nucleotide"]], "skbio.alignment.global_pairwise_align_protein": [[62, "skbio-alignment-global-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align": [[63, "skbio-alignment-local-pairwise-align"]], "skbio.alignment.local_pairwise_align_nucleotide": [[64, "skbio-alignment-local-pairwise-align-nucleotide"]], "skbio.alignment.local_pairwise_align_protein": [[65, "skbio-alignment-local-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align_ssw": [[66, "skbio-alignment-local-pairwise-align-ssw"]], "skbio.alignment.make_identity_substitution_matrix": [[67, "skbio-alignment-make-identity-substitution-matrix"]], "Alpha diversity measures (skbio.diversity.alpha)": [[68, "alpha-diversity-measures-skbio-diversity-alpha"]], "skbio.diversity.alpha.ace": [[69, "skbio-diversity-alpha-ace"]], "skbio.diversity.alpha.berger_parker_d": [[70, "skbio-diversity-alpha-berger-parker-d"]], "skbio.diversity.alpha.brillouin_d": [[71, "skbio-diversity-alpha-brillouin-d"]], "skbio.diversity.alpha.chao1": [[72, "skbio-diversity-alpha-chao1"]], "skbio.diversity.alpha.chao1_ci": [[73, "skbio-diversity-alpha-chao1-ci"]], "skbio.diversity.alpha.dominance": [[74, "skbio-diversity-alpha-dominance"]], "skbio.diversity.alpha.doubles": [[75, "skbio-diversity-alpha-doubles"]], "skbio.diversity.alpha.enspie": [[76, "skbio-diversity-alpha-enspie"]], "skbio.diversity.alpha.esty_ci": [[77, "skbio-diversity-alpha-esty-ci"]], "skbio.diversity.alpha.faith_pd": [[78, "skbio-diversity-alpha-faith-pd"]], "skbio.diversity.alpha.fisher_alpha": [[79, "skbio-diversity-alpha-fisher-alpha"]], "skbio.diversity.alpha.gini_index": [[80, "skbio-diversity-alpha-gini-index"]], "skbio.diversity.alpha.goods_coverage": [[81, "skbio-diversity-alpha-goods-coverage"]], "skbio.diversity.alpha.heip_e": [[82, "skbio-diversity-alpha-heip-e"]], "skbio.diversity.alpha.kempton_taylor_q": [[83, "skbio-diversity-alpha-kempton-taylor-q"]], "skbio.diversity.alpha.lladser_ci": [[84, "skbio-diversity-alpha-lladser-ci"]], "skbio.diversity.alpha.lladser_pe": [[85, "skbio-diversity-alpha-lladser-pe"]], "skbio.diversity.alpha.margalef": [[86, "skbio-diversity-alpha-margalef"]], "skbio.diversity.alpha.mcintosh_d": [[87, "skbio-diversity-alpha-mcintosh-d"]], "skbio.diversity.alpha.mcintosh_e": [[88, "skbio-diversity-alpha-mcintosh-e"]], "skbio.diversity.alpha.menhinick": [[89, "skbio-diversity-alpha-menhinick"]], "skbio.diversity.alpha.michaelis_menten_fit": [[90, "skbio-diversity-alpha-michaelis-menten-fit"]], "skbio.diversity.alpha.observed_features": [[91, "skbio-diversity-alpha-observed-features"]], "skbio.diversity.alpha.observed_otus": [[92, "skbio-diversity-alpha-observed-otus"]], "skbio.diversity.alpha.osd": [[93, "skbio-diversity-alpha-osd"]], "skbio.diversity.alpha.phydiv": [[94, "skbio-diversity-alpha-phydiv"]], "skbio.diversity.alpha.pielou_e": [[95, "skbio-diversity-alpha-pielou-e"]], "skbio.diversity.alpha.robbins": [[96, "skbio-diversity-alpha-robbins"]], "skbio.diversity.alpha.shannon": [[97, "skbio-diversity-alpha-shannon"]], "skbio.diversity.alpha.simpson": [[98, "skbio-diversity-alpha-simpson"]], "skbio.diversity.alpha.simpson_e": [[99, "skbio-diversity-alpha-simpson-e"]], "skbio.diversity.alpha.singles": [[100, "skbio-diversity-alpha-singles"]], "skbio.diversity.alpha.sobs": [[101, "skbio-diversity-alpha-sobs"]], "skbio.diversity.alpha.strong": [[102, "skbio-diversity-alpha-strong"]], "skbio.diversity.alpha_diversity": [[103, "skbio-diversity-alpha-diversity"]], "Beta diversity measures (skbio.diversity.beta)": [[104, "beta-diversity-measures-skbio-diversity-beta"]], "skbio.diversity.beta.unweighted_unifrac": [[105, "skbio-diversity-beta-unweighted-unifrac"]], "skbio.diversity.beta.weighted_unifrac": [[106, "skbio-diversity-beta-weighted-unifrac"]], "skbio.diversity.beta_diversity": [[107, "skbio-diversity-beta-diversity"]], "skbio.diversity.block_beta_diversity": [[108, "skbio-diversity-block-beta-diversity"]], "skbio.diversity.get_alpha_diversity_metrics": [[109, "skbio-diversity-get-alpha-diversity-metrics"]], "skbio.diversity.get_beta_diversity_metrics": [[110, "skbio-diversity-get-beta-diversity-metrics"]], "skbio.diversity.partial_beta_diversity": [[111, "skbio-diversity-partial-beta-diversity"]], "skbio.io.ArgumentOverrideWarning": [[112, "skbio-io-argumentoverridewarning"]], "skbio.io.BLAST7FormatError": [[113, "skbio-io-blast7formaterror"]], "skbio.io.ClustalFormatError": [[114, "skbio-io-clustalformaterror"]], "skbio.io.EMBLFormatError": [[115, "skbio-io-emblformaterror"]], "skbio.io.FASTAFormatError": [[116, "skbio-io-fastaformaterror"]], "skbio.io.FASTQFormatError": [[117, "skbio-io-fastqformaterror"]], "skbio.io.FileFormatError": [[118, "skbio-io-fileformaterror"]], "skbio.io.FormatIdentificationWarning": [[119, "skbio-io-formatidentificationwarning"]], "skbio.io.GFF3FormatError": [[120, "skbio-io-gff3formaterror"]], "skbio.io.GenBankFormatError": [[121, "skbio-io-genbankformaterror"]], "skbio.io.IOSourceError": [[122, "skbio-io-iosourceerror"]], "skbio.io.LSMatFormatError": [[123, "skbio-io-lsmatformaterror"]], "skbio.io.NewickFormatError": [[124, "skbio-io-newickformaterror"]], "skbio.io.OrdinationFormatError": [[125, "skbio-io-ordinationformaterror"]], "skbio.io.PhylipFormatError": [[126, "skbio-io-phylipformaterror"]], "skbio.io.QSeqFormatError": [[127, "skbio-io-qseqformaterror"]], "skbio.io.QUALFormatError": [[128, "skbio-io-qualformaterror"]], "skbio.io.StockholmFormatError": [[129, "skbio-io-stockholmformaterror"]], "skbio.io.UnrecognizedFormatError": [[130, "skbio-io-unrecognizedformaterror"]], "Simple binary dissimilarity matrix format (skbio.io.format.binary_dm)": [[131, "simple-binary-dissimilarity-matrix-format-skbio-io-format-binary-dm"]], "Format Support": [[131, "format-support"], [132, "format-support"], [133, "format-support"], [134, "format-support"], [135, "format-support"], [136, "format-support"], [137, "format-support"], [138, "format-support"], [139, "format-support"], [140, "format-support"], [141, "format-support"], [142, "format-support"], [143, "format-support"], [144, "format-support"], [145, "format-support"], [146, "format-support"]], "Format Specification": [[131, "format-specification"], [132, "format-specification"], [133, "format-specification"], [134, "format-specification"], [135, "format-specification"], [136, "format-specification"], [137, "format-specification"], [138, "format-specification"], [139, "format-specification"], [140, "format-specification"], [141, "format-specification"], [142, "format-specification"], [143, "format-specification"], [144, "format-specification"], [145, "format-specification"], [146, "format-specification"]], "References": [[131, "references"], [132, "references"], [133, "references"], [134, "references"], [135, "references"], [136, "references"], [137, "references"], [138, "references"], [139, "references"], [141, "references"], [143, "references"], [144, "references"], [145, "references"], [146, "references"], [515, "references"], [534, "references"], [686, "references"]], "BLAST+6 format (skbio.io.format.blast6)": [[132, "blast-6-format-skbio-io-format-blast6"]], "BLAST Column Types": [[132, "blast-column-types"], [133, "blast-column-types"]], "Format Parameters": [[132, "format-parameters"], [134, "format-parameters"], [136, "format-parameters"], [137, "format-parameters"], [138, "format-parameters"], [139, "format-parameters"], [140, "format-parameters"], [141, "format-parameters"], [143, "format-parameters"], [144, "format-parameters"], [145, "format-parameters"], [146, "format-parameters"]], "BLAST+7 format (skbio.io.format.blast7)": [[133, "blast-7-format-skbio-io-format-blast7"]], "Clustal format (skbio.io.format.clustal)": [[134, "clustal-format-skbio-io-format-clustal"]], "Alignment Section": [[134, "alignment-section"], [143, "alignment-section"]], "EMBL format (skbio.io.format.embl)": [[135, "embl-format-skbio-io-format-embl"]], "Feature Level Products": [[135, "feature-level-products"]], "Sections before FH (Feature Header)": [[135, "sections-before-fh-feature-header"]], "FT section": [[135, "ft-section"]], "SQ section": [[135, "sq-section"]], "Reading EMBL Files": [[135, "reading-embl-files"]], "Reading EMBL Files using generators": [[135, "reading-embl-files-using-generators"]], "FASTA/QUAL format (skbio.io.format.fasta)": [[136, "fasta-qual-format-skbio-io-format-fasta"]], "FASTA Format": [[136, "fasta-format"]], "Sequence Header": [[136, "sequence-header"]], "Sequence Data": [[136, "sequence-data"]], "QUAL Format": [[136, "qual-format"]], "QUAL File Parameter (Readers and Writers)": [[136, "qual-file-parameter-readers-and-writers"]], "Reader-specific Parameters": [[136, "reader-specific-parameters"], [138, "reader-specific-parameters"], [139, "reader-specific-parameters"]], "Generator and TabularMSA Reader Parameters": [[136, "generator-and-tabularmsa-reader-parameters"]], "Sequence Reader Parameters": [[136, "sequence-reader-parameters"]], "Writer-specific Parameters": [[136, "writer-specific-parameters"], [139, "writer-specific-parameters"]], "Reading and Writing FASTA Files": [[136, "reading-and-writing-fasta-files"]], "Reading and Writing FASTA/QUAL Files": [[136, "reading-and-writing-fasta-qual-files"]], "FASTQ format (skbio.io.format.fastq)": [[137, "fastq-format-skbio-io-format-fastq"]], "Quality Score Variants": [[137, "quality-score-variants"]], "GenBank format (skbio.io.format.genbank)": [[138, "genbank-format-skbio-io-format-genbank"]], "Sections before FEATURES": [[138, "sections-before-features"]], "FEATURES section": [[138, "features-section"]], "Location string": [[138, "location-string"]], "ORIGIN section": [[138, "origin-section"]], "Reading and Writing GenBank Files": [[138, "reading-and-writing-genbank-files"]], "GFF3 format (skbio.io.format.gff3)": [[139, "gff3-format-skbio-io-format-gff3"]], "Labeled square matrix format (skbio.io.format.lsmat)": [[140, "labeled-square-matrix-format-skbio-io-format-lsmat"]], "Newick format (skbio.io.format.newick)": [[141, "newick-format-skbio-io-format-newick"]], "Formal Grammar": [[141, "formal-grammar"]], "Explanation": [[141, "explanation"]], "Basic Symbols": [[141, "basic-symbols"]], "Application of Rules": [[141, "application-of-rules"]], "Adding Node Information": [[141, "adding-node-information"]], "Advanced Label and Length Rules": [[141, "advanced-label-and-length-rules"]], "Inline Comments": [[141, "inline-comments"]], "Whitespace": [[141, "whitespace"]], "Caveats": [[141, "caveats"]], "Ordination results format (skbio.io.format.ordination)": [[142, "ordination-results-format-skbio-io-format-ordination"]], "PHYLIP multiple sequence alignment format (skbio.io.format.phylip)": [[143, "phylip-multiple-sequence-alignment-format-skbio-io-format-phylip"]], "Header Section": [[143, "header-section"]], "QSeq format (skbio.io.format.qseq)": [[144, "qseq-format-skbio-io-format-qseq"]], "Generators Only": [[144, "generators-only"]], "Stockholm format (skbio.io.format.stockholm)": [[145, "stockholm-format-skbio-io-format-stockholm"]], "Header": [[145, "header"]], "Multiple Sequence Alignment": [[145, "multiple-sequence-alignment"]], "Metadata": [[145, "metadata"]], "GF metadata": [[145, "gf-metadata"]], "GS metadata": [[145, "gs-metadata"]], "GR metadata": [[145, "gr-metadata"]], "GC metadata": [[145, "gc-metadata"]], "Footer": [[145, "footer"]], "Taxdump format (skbio.io.format.taxdump)": [[146, "taxdump-format-skbio-io-format-taxdump"]], "nodes.dmp": [[146, "nodes-dmp"]], "names.dmp": [[146, "names-dmp"]], "division.dmp": [[146, "division-dmp"]], "gencode.dmp": [[146, "gencode-dmp"]], "I/O Registry (skbio.io.registry)": [[147, "i-o-registry-skbio-io-registry"]], "Classes": [[147, "classes"], [534, "classes"], [596, "classes"], [686, "classes"], [864, "classes"], [865, "classes"], [867, "classes"], [869, "classes"]], "Exceptions": [[147, "exceptions"], [534, "exceptions"], [867, "exceptions"]], "Creating a new format for scikit-bio": [[147, "creating-a-new-format-for-scikit-bio"]], "Reserved Keyword Arguments": [[147, "reserved-keyword-arguments"]], "skbio.io.registry.DuplicateRegistrationError": [[148, "skbio-io-registry-duplicateregistrationerror"]], "skbio.io.registry.Format": [[149, "skbio-io-registry-format"]], "skbio.io.registry.Format.__eq__": [[150, "skbio-io-registry-format-eq"]], "skbio.io.registry.Format.__ge__": [[151, "skbio-io-registry-format-ge"]], "skbio.io.registry.Format.__getstate__": [[152, "skbio-io-registry-format-getstate"]], "skbio.io.registry.Format.__gt__": [[153, "skbio-io-registry-format-gt"]], "skbio.io.registry.Format.__hash__": [[154, "skbio-io-registry-format-hash"]], "skbio.io.registry.Format.__le__": [[155, "skbio-io-registry-format-le"]], "skbio.io.registry.Format.__lt__": [[156, "skbio-io-registry-format-lt"]], "skbio.io.registry.Format.__ne__": [[157, "skbio-io-registry-format-ne"]], "skbio.io.registry.Format.__str__": [[158, "skbio-io-registry-format-str"]], "skbio.io.registry.Format.reader": [[159, "skbio-io-registry-format-reader"]], "skbio.io.registry.Format.sniffer": [[160, "skbio-io-registry-format-sniffer"]], "skbio.io.registry.Format.writer": [[161, "skbio-io-registry-format-writer"]], "skbio.io.registry.IORegistry": [[162, "skbio-io-registry-ioregistry"]], "skbio.io.registry.IORegistry.__eq__": [[163, "skbio-io-registry-ioregistry-eq"]], "skbio.io.registry.IORegistry.__ge__": [[164, "skbio-io-registry-ioregistry-ge"]], "skbio.io.registry.IORegistry.__getstate__": [[165, "skbio-io-registry-ioregistry-getstate"]], "skbio.io.registry.IORegistry.__gt__": [[166, "skbio-io-registry-ioregistry-gt"]], "skbio.io.registry.IORegistry.__hash__": [[167, "skbio-io-registry-ioregistry-hash"]], "skbio.io.registry.IORegistry.__le__": [[168, "skbio-io-registry-ioregistry-le"]], "skbio.io.registry.IORegistry.__lt__": [[169, "skbio-io-registry-ioregistry-lt"]], "skbio.io.registry.IORegistry.__ne__": [[170, "skbio-io-registry-ioregistry-ne"]], "skbio.io.registry.IORegistry.__str__": [[171, "skbio-io-registry-ioregistry-str"]], "skbio.io.registry.IORegistry.add_format": [[172, "skbio-io-registry-ioregistry-add-format"]], "skbio.io.registry.IORegistry.create_format": [[173, "skbio-io-registry-ioregistry-create-format"]], "skbio.io.registry.IORegistry.get_reader": [[174, "skbio-io-registry-ioregistry-get-reader"]], "skbio.io.registry.IORegistry.get_sniffer": [[175, "skbio-io-registry-ioregistry-get-sniffer"]], "skbio.io.registry.IORegistry.get_writer": [[176, "skbio-io-registry-ioregistry-get-writer"]], "skbio.io.registry.IORegistry.list_read_formats": [[177, "skbio-io-registry-ioregistry-list-read-formats"]], "skbio.io.registry.IORegistry.list_write_formats": [[178, "skbio-io-registry-ioregistry-list-write-formats"]], "skbio.io.registry.IORegistry.monkey_patch": [[179, "skbio-io-registry-ioregistry-monkey-patch"]], "skbio.io.registry.IORegistry.read": [[180, "skbio-io-registry-ioregistry-read"]], "skbio.io.registry.IORegistry.sniff": [[181, "skbio-io-registry-ioregistry-sniff"]], "skbio.io.registry.IORegistry.write": [[182, "skbio-io-registry-ioregistry-write"]], "skbio.io.registry.InvalidRegistrationError": [[183, "skbio-io-registry-invalidregistrationerror"]], "skbio.io.registry.create_format": [[184, "skbio-io-registry-create-format"]], "skbio.io.registry.read": [[185, "skbio-io-registry-read"]], "skbio.io.registry.sniff": [[186, "skbio-io-registry-sniff"]], "skbio.io.registry.write": [[187, "skbio-io-registry-write"]], "I/O utils (skbio.io.util)": [[188, "i-o-utils-skbio-io-util"]], "skbio.io.util.open": [[189, "skbio-io-util-open"]], "skbio.io.util.open_file": [[190, "skbio-io-util-open-file"]], "skbio.io.util.open_files": [[191, "skbio-io-util-open-files"]], "skbio.metadata.Interval": [[192, "skbio-metadata-interval"]], "skbio.metadata.Interval.__eq__": [[193, "skbio-metadata-interval-eq"]], "skbio.metadata.Interval.__ge__": [[194, "skbio-metadata-interval-ge"]], "skbio.metadata.Interval.__getstate__": [[195, "skbio-metadata-interval-getstate"]], "skbio.metadata.Interval.__gt__": [[196, "skbio-metadata-interval-gt"]], "skbio.metadata.Interval.__le__": [[197, "skbio-metadata-interval-le"]], "skbio.metadata.Interval.__lt__": [[198, "skbio-metadata-interval-lt"]], "skbio.metadata.Interval.__ne__": [[199, "skbio-metadata-interval-ne"]], "skbio.metadata.Interval.__str__": [[200, "skbio-metadata-interval-str"]], "skbio.metadata.Interval.drop": [[201, "skbio-metadata-interval-drop"]], "skbio.metadata.IntervalMetadata": [[202, "skbio-metadata-intervalmetadata"]], "skbio.metadata.IntervalMetadata.__copy__": [[203, "skbio-metadata-intervalmetadata-copy"]], "skbio.metadata.IntervalMetadata.__deepcopy__": [[204, "skbio-metadata-intervalmetadata-deepcopy"]], "skbio.metadata.IntervalMetadata.__eq__": [[205, "skbio-metadata-intervalmetadata-eq"]], "skbio.metadata.IntervalMetadata.__ge__": [[206, "skbio-metadata-intervalmetadata-ge"]], "skbio.metadata.IntervalMetadata.__getstate__": [[207, "skbio-metadata-intervalmetadata-getstate"]], "skbio.metadata.IntervalMetadata.__gt__": [[208, "skbio-metadata-intervalmetadata-gt"]], "skbio.metadata.IntervalMetadata.__le__": [[209, "skbio-metadata-intervalmetadata-le"]], "skbio.metadata.IntervalMetadata.__lt__": [[210, "skbio-metadata-intervalmetadata-lt"]], "skbio.metadata.IntervalMetadata.__ne__": [[211, "skbio-metadata-intervalmetadata-ne"]], "skbio.metadata.IntervalMetadata.__str__": [[212, "skbio-metadata-intervalmetadata-str"]], "skbio.metadata.IntervalMetadata.add": [[213, "skbio-metadata-intervalmetadata-add"]], "skbio.metadata.IntervalMetadata.concat": [[214, "skbio-metadata-intervalmetadata-concat"]], "skbio.metadata.IntervalMetadata.drop": [[215, "skbio-metadata-intervalmetadata-drop"]], "skbio.metadata.IntervalMetadata.merge": [[216, "skbio-metadata-intervalmetadata-merge"]], "skbio.metadata.IntervalMetadata.query": [[217, "skbio-metadata-intervalmetadata-query"]], "skbio.metadata.IntervalMetadata.read": [[218, "skbio-metadata-intervalmetadata-read"]], "skbio.metadata.IntervalMetadata.sort": [[219, "skbio-metadata-intervalmetadata-sort"]], "skbio.metadata.IntervalMetadata.write": [[220, "skbio-metadata-intervalmetadata-write"]], "skbio.sequence.DNA": [[221, "skbio-sequence-dna"]], "skbio.sequence.DNA.__bool__": [[222, "skbio-sequence-dna-bool"]], "skbio.sequence.DNA.__contains__": [[223, "skbio-sequence-dna-contains"]], "skbio.sequence.DNA.__copy__": [[224, "skbio-sequence-dna-copy"]], "skbio.sequence.DNA.__deepcopy__": [[225, "skbio-sequence-dna-deepcopy"]], "skbio.sequence.DNA.__eq__": [[226, "skbio-sequence-dna-eq"]], "skbio.sequence.DNA.__ge__": [[227, "skbio-sequence-dna-ge"]], "skbio.sequence.DNA.__getitem__": [[228, "skbio-sequence-dna-getitem"]], "skbio.sequence.DNA.__getstate__": [[229, "skbio-sequence-dna-getstate"]], "skbio.sequence.DNA.__gt__": [[230, "skbio-sequence-dna-gt"]], "skbio.sequence.DNA.__iter__": [[231, "skbio-sequence-dna-iter"]], "skbio.sequence.DNA.__le__": [[232, "skbio-sequence-dna-le"]], "skbio.sequence.DNA.__len__": [[233, "skbio-sequence-dna-len"]], "skbio.sequence.DNA.__lt__": [[234, "skbio-sequence-dna-lt"]], "skbio.sequence.DNA.__ne__": [[235, "skbio-sequence-dna-ne"]], "skbio.sequence.DNA.__reversed__": [[236, "skbio-sequence-dna-reversed"]], "skbio.sequence.DNA.__str__": [[237, "skbio-sequence-dna-str"]], "skbio.sequence.DNA.complement": [[238, "skbio-sequence-dna-complement"]], "skbio.sequence.DNA.concat": [[239, "skbio-sequence-dna-concat"]], "skbio.sequence.DNA.count": [[240, "skbio-sequence-dna-count"]], "skbio.sequence.DNA.definites": [[241, "skbio-sequence-dna-definites"]], "skbio.sequence.DNA.degap": [[242, "skbio-sequence-dna-degap"]], "skbio.sequence.DNA.degenerates": [[243, "skbio-sequence-dna-degenerates"]], "skbio.sequence.DNA.distance": [[244, "skbio-sequence-dna-distance"]], "skbio.sequence.DNA.expand_degenerates": [[245, "skbio-sequence-dna-expand-degenerates"]], "skbio.sequence.DNA.find_motifs": [[246, "skbio-sequence-dna-find-motifs"]], "skbio.sequence.DNA.find_with_regex": [[247, "skbio-sequence-dna-find-with-regex"]], "skbio.sequence.DNA.frequencies": [[248, "skbio-sequence-dna-frequencies"]], "skbio.sequence.DNA.gaps": [[249, "skbio-sequence-dna-gaps"]], "skbio.sequence.DNA.gc_content": [[250, "skbio-sequence-dna-gc-content"]], "skbio.sequence.DNA.gc_frequency": [[251, "skbio-sequence-dna-gc-frequency"]], "skbio.sequence.DNA.has_definites": [[252, "skbio-sequence-dna-has-definites"]], "skbio.sequence.DNA.has_degenerates": [[253, "skbio-sequence-dna-has-degenerates"]], "skbio.sequence.DNA.has_gaps": [[254, "skbio-sequence-dna-has-gaps"]], "skbio.sequence.DNA.has_interval_metadata": [[255, "skbio-sequence-dna-has-interval-metadata"]], "skbio.sequence.DNA.has_metadata": [[256, "skbio-sequence-dna-has-metadata"]], "skbio.sequence.DNA.has_nondegenerates": [[257, "skbio-sequence-dna-has-nondegenerates"]], "skbio.sequence.DNA.has_positional_metadata": [[258, "skbio-sequence-dna-has-positional-metadata"]], "skbio.sequence.DNA.index": [[259, "skbio-sequence-dna-index"]], "skbio.sequence.DNA.is_reverse_complement": [[260, "skbio-sequence-dna-is-reverse-complement"]], "skbio.sequence.DNA.iter_contiguous": [[261, "skbio-sequence-dna-iter-contiguous"]], "skbio.sequence.DNA.iter_kmers": [[262, "skbio-sequence-dna-iter-kmers"]], "skbio.sequence.DNA.kmer_frequencies": [[263, "skbio-sequence-dna-kmer-frequencies"]], "skbio.sequence.DNA.lowercase": [[264, "skbio-sequence-dna-lowercase"]], "skbio.sequence.DNA.match_frequency": [[265, "skbio-sequence-dna-match-frequency"]], "skbio.sequence.DNA.matches": [[266, "skbio-sequence-dna-matches"]], "skbio.sequence.DNA.mismatch_frequency": [[267, "skbio-sequence-dna-mismatch-frequency"]], "skbio.sequence.DNA.mismatches": [[268, "skbio-sequence-dna-mismatches"]], "skbio.sequence.DNA.nondegenerates": [[269, "skbio-sequence-dna-nondegenerates"]], "skbio.sequence.DNA.read": [[270, "skbio-sequence-dna-read"]], "skbio.sequence.DNA.replace": [[271, "skbio-sequence-dna-replace"]], "skbio.sequence.DNA.reverse_complement": [[272, "skbio-sequence-dna-reverse-complement"]], "skbio.sequence.DNA.to_regex": [[273, "skbio-sequence-dna-to-regex"]], "skbio.sequence.DNA.transcribe": [[274, "skbio-sequence-dna-transcribe"]], "skbio.sequence.DNA.translate": [[275, "skbio-sequence-dna-translate"]], "skbio.sequence.DNA.translate_six_frames": [[276, "skbio-sequence-dna-translate-six-frames"]], "skbio.sequence.DNA.write": [[277, "skbio-sequence-dna-write"]], "skbio.sequence.GeneticCode": [[278, "skbio-sequence-geneticcode"]], "skbio.sequence.GeneticCode.__eq__": [[279, "skbio-sequence-geneticcode-eq"]], "skbio.sequence.GeneticCode.__ge__": [[280, "skbio-sequence-geneticcode-ge"]], "skbio.sequence.GeneticCode.__getstate__": [[281, "skbio-sequence-geneticcode-getstate"]], "skbio.sequence.GeneticCode.__gt__": [[282, "skbio-sequence-geneticcode-gt"]], "skbio.sequence.GeneticCode.__le__": [[283, "skbio-sequence-geneticcode-le"]], "skbio.sequence.GeneticCode.__lt__": [[284, "skbio-sequence-geneticcode-lt"]], "skbio.sequence.GeneticCode.__ne__": [[285, "skbio-sequence-geneticcode-ne"]], "skbio.sequence.GeneticCode.__str__": [[286, "skbio-sequence-geneticcode-str"]], "skbio.sequence.GeneticCode.from_ncbi": [[287, "skbio-sequence-geneticcode-from-ncbi"]], "skbio.sequence.GeneticCode.translate": [[288, "skbio-sequence-geneticcode-translate"]], "skbio.sequence.GeneticCode.translate_six_frames": [[289, "skbio-sequence-geneticcode-translate-six-frames"]], "skbio.sequence.GrammaredSequence": [[290, "skbio-sequence-grammaredsequence"]], "skbio.sequence.GrammaredSequence.__bool__": [[291, "skbio-sequence-grammaredsequence-bool"]], "skbio.sequence.GrammaredSequence.__contains__": [[292, "skbio-sequence-grammaredsequence-contains"]], "skbio.sequence.GrammaredSequence.__copy__": [[293, "skbio-sequence-grammaredsequence-copy"]], "skbio.sequence.GrammaredSequence.__deepcopy__": [[294, "skbio-sequence-grammaredsequence-deepcopy"]], "skbio.sequence.GrammaredSequence.__eq__": [[295, "skbio-sequence-grammaredsequence-eq"]], "skbio.sequence.GrammaredSequence.__ge__": [[296, "skbio-sequence-grammaredsequence-ge"]], "skbio.sequence.GrammaredSequence.__getitem__": [[297, "skbio-sequence-grammaredsequence-getitem"]], "skbio.sequence.GrammaredSequence.__getstate__": [[298, "skbio-sequence-grammaredsequence-getstate"]], "skbio.sequence.GrammaredSequence.__gt__": [[299, "skbio-sequence-grammaredsequence-gt"]], "skbio.sequence.GrammaredSequence.__iter__": [[300, "skbio-sequence-grammaredsequence-iter"]], "skbio.sequence.GrammaredSequence.__le__": [[301, "skbio-sequence-grammaredsequence-le"]], "skbio.sequence.GrammaredSequence.__len__": [[302, "skbio-sequence-grammaredsequence-len"]], "skbio.sequence.GrammaredSequence.__lt__": [[303, "skbio-sequence-grammaredsequence-lt"]], "skbio.sequence.GrammaredSequence.__ne__": [[304, "skbio-sequence-grammaredsequence-ne"]], "skbio.sequence.GrammaredSequence.__reversed__": [[305, "skbio-sequence-grammaredsequence-reversed"]], "skbio.sequence.GrammaredSequence.__str__": [[306, "skbio-sequence-grammaredsequence-str"]], "skbio.sequence.GrammaredSequence.concat": [[307, "skbio-sequence-grammaredsequence-concat"]], "skbio.sequence.GrammaredSequence.count": [[308, "skbio-sequence-grammaredsequence-count"]], "skbio.sequence.GrammaredSequence.definites": [[309, "skbio-sequence-grammaredsequence-definites"]], "skbio.sequence.GrammaredSequence.degap": [[310, "skbio-sequence-grammaredsequence-degap"]], "skbio.sequence.GrammaredSequence.degenerates": [[311, "skbio-sequence-grammaredsequence-degenerates"]], "skbio.sequence.GrammaredSequence.distance": [[312, "skbio-sequence-grammaredsequence-distance"]], "skbio.sequence.GrammaredSequence.expand_degenerates": [[313, "skbio-sequence-grammaredsequence-expand-degenerates"]], "skbio.sequence.GrammaredSequence.find_motifs": [[314, "skbio-sequence-grammaredsequence-find-motifs"]], "skbio.sequence.GrammaredSequence.find_with_regex": [[315, "skbio-sequence-grammaredsequence-find-with-regex"]], "skbio.sequence.GrammaredSequence.frequencies": [[316, "skbio-sequence-grammaredsequence-frequencies"]], "skbio.sequence.GrammaredSequence.gaps": [[317, "skbio-sequence-grammaredsequence-gaps"]], "skbio.sequence.GrammaredSequence.has_definites": [[318, "skbio-sequence-grammaredsequence-has-definites"]], "skbio.sequence.GrammaredSequence.has_degenerates": [[319, "skbio-sequence-grammaredsequence-has-degenerates"]], "skbio.sequence.GrammaredSequence.has_gaps": [[320, "skbio-sequence-grammaredsequence-has-gaps"]], "skbio.sequence.GrammaredSequence.has_interval_metadata": [[321, "skbio-sequence-grammaredsequence-has-interval-metadata"]], "skbio.sequence.GrammaredSequence.has_metadata": [[322, "skbio-sequence-grammaredsequence-has-metadata"]], "skbio.sequence.GrammaredSequence.has_nondegenerates": [[323, "skbio-sequence-grammaredsequence-has-nondegenerates"]], "skbio.sequence.GrammaredSequence.has_positional_metadata": [[324, "skbio-sequence-grammaredsequence-has-positional-metadata"]], "skbio.sequence.GrammaredSequence.index": [[325, "skbio-sequence-grammaredsequence-index"]], "skbio.sequence.GrammaredSequence.iter_contiguous": [[326, "skbio-sequence-grammaredsequence-iter-contiguous"]], "skbio.sequence.GrammaredSequence.iter_kmers": [[327, "skbio-sequence-grammaredsequence-iter-kmers"]], "skbio.sequence.GrammaredSequence.kmer_frequencies": [[328, "skbio-sequence-grammaredsequence-kmer-frequencies"]], "skbio.sequence.GrammaredSequence.lowercase": [[329, "skbio-sequence-grammaredsequence-lowercase"]], "skbio.sequence.GrammaredSequence.match_frequency": [[330, "skbio-sequence-grammaredsequence-match-frequency"]], "skbio.sequence.GrammaredSequence.matches": [[331, "skbio-sequence-grammaredsequence-matches"]], "skbio.sequence.GrammaredSequence.mismatch_frequency": [[332, "skbio-sequence-grammaredsequence-mismatch-frequency"]], "skbio.sequence.GrammaredSequence.mismatches": [[333, "skbio-sequence-grammaredsequence-mismatches"]], "skbio.sequence.GrammaredSequence.nondegenerates": [[334, "skbio-sequence-grammaredsequence-nondegenerates"]], "skbio.sequence.GrammaredSequence.read": [[335, "skbio-sequence-grammaredsequence-read"]], "skbio.sequence.GrammaredSequence.replace": [[336, "skbio-sequence-grammaredsequence-replace"]], "skbio.sequence.GrammaredSequence.to_regex": [[337, "skbio-sequence-grammaredsequence-to-regex"]], "skbio.sequence.GrammaredSequence.write": [[338, "skbio-sequence-grammaredsequence-write"]], "skbio.sequence.Protein": [[339, "skbio-sequence-protein"]], "skbio.sequence.Protein.__bool__": [[340, "skbio-sequence-protein-bool"]], "skbio.sequence.Protein.__contains__": [[341, "skbio-sequence-protein-contains"]], "skbio.sequence.Protein.__copy__": [[342, "skbio-sequence-protein-copy"]], "skbio.sequence.Protein.__deepcopy__": [[343, "skbio-sequence-protein-deepcopy"]], "skbio.sequence.Protein.__eq__": [[344, "skbio-sequence-protein-eq"]], "skbio.sequence.Protein.__ge__": [[345, "skbio-sequence-protein-ge"]], "skbio.sequence.Protein.__getitem__": [[346, "skbio-sequence-protein-getitem"]], "skbio.sequence.Protein.__getstate__": [[347, "skbio-sequence-protein-getstate"]], "skbio.sequence.Protein.__gt__": [[348, "skbio-sequence-protein-gt"]], "skbio.sequence.Protein.__iter__": [[349, "skbio-sequence-protein-iter"]], "skbio.sequence.Protein.__le__": [[350, "skbio-sequence-protein-le"]], "skbio.sequence.Protein.__len__": [[351, "skbio-sequence-protein-len"]], "skbio.sequence.Protein.__lt__": [[352, "skbio-sequence-protein-lt"]], "skbio.sequence.Protein.__ne__": [[353, "skbio-sequence-protein-ne"]], "skbio.sequence.Protein.__reversed__": [[354, "skbio-sequence-protein-reversed"]], "skbio.sequence.Protein.__str__": [[355, "skbio-sequence-protein-str"]], "skbio.sequence.Protein.concat": [[356, "skbio-sequence-protein-concat"]], "skbio.sequence.Protein.count": [[357, "skbio-sequence-protein-count"]], "skbio.sequence.Protein.definites": [[358, "skbio-sequence-protein-definites"]], "skbio.sequence.Protein.degap": [[359, "skbio-sequence-protein-degap"]], "skbio.sequence.Protein.degenerates": [[360, "skbio-sequence-protein-degenerates"]], "skbio.sequence.Protein.distance": [[361, "skbio-sequence-protein-distance"]], "skbio.sequence.Protein.expand_degenerates": [[362, "skbio-sequence-protein-expand-degenerates"]], "skbio.sequence.Protein.find_motifs": [[363, "skbio-sequence-protein-find-motifs"]], "skbio.sequence.Protein.find_with_regex": [[364, "skbio-sequence-protein-find-with-regex"]], "skbio.sequence.Protein.frequencies": [[365, "skbio-sequence-protein-frequencies"]], "skbio.sequence.Protein.gaps": [[366, "skbio-sequence-protein-gaps"]], "skbio.sequence.Protein.has_definites": [[367, "skbio-sequence-protein-has-definites"]], "skbio.sequence.Protein.has_degenerates": [[368, "skbio-sequence-protein-has-degenerates"]], "skbio.sequence.Protein.has_gaps": [[369, "skbio-sequence-protein-has-gaps"]], "skbio.sequence.Protein.has_interval_metadata": [[370, "skbio-sequence-protein-has-interval-metadata"]], "skbio.sequence.Protein.has_metadata": [[371, "skbio-sequence-protein-has-metadata"]], "skbio.sequence.Protein.has_nondegenerates": [[372, "skbio-sequence-protein-has-nondegenerates"]], "skbio.sequence.Protein.has_positional_metadata": [[373, "skbio-sequence-protein-has-positional-metadata"]], "skbio.sequence.Protein.has_stops": [[374, "skbio-sequence-protein-has-stops"]], "skbio.sequence.Protein.index": [[375, "skbio-sequence-protein-index"]], "skbio.sequence.Protein.iter_contiguous": [[376, "skbio-sequence-protein-iter-contiguous"]], "skbio.sequence.Protein.iter_kmers": [[377, "skbio-sequence-protein-iter-kmers"]], "skbio.sequence.Protein.kmer_frequencies": [[378, "skbio-sequence-protein-kmer-frequencies"]], "skbio.sequence.Protein.lowercase": [[379, "skbio-sequence-protein-lowercase"]], "skbio.sequence.Protein.match_frequency": [[380, "skbio-sequence-protein-match-frequency"]], "skbio.sequence.Protein.matches": [[381, "skbio-sequence-protein-matches"]], "skbio.sequence.Protein.mismatch_frequency": [[382, "skbio-sequence-protein-mismatch-frequency"]], "skbio.sequence.Protein.mismatches": [[383, "skbio-sequence-protein-mismatches"]], "skbio.sequence.Protein.nondegenerates": [[384, "skbio-sequence-protein-nondegenerates"]], "skbio.sequence.Protein.read": [[385, "skbio-sequence-protein-read"]], "skbio.sequence.Protein.replace": [[386, "skbio-sequence-protein-replace"]], "skbio.sequence.Protein.stops": [[387, "skbio-sequence-protein-stops"]], "skbio.sequence.Protein.to_regex": [[388, "skbio-sequence-protein-to-regex"]], "skbio.sequence.Protein.write": [[389, "skbio-sequence-protein-write"]], "skbio.sequence.RNA": [[390, "skbio-sequence-rna"]], "skbio.sequence.RNA.__bool__": [[391, "skbio-sequence-rna-bool"]], "skbio.sequence.RNA.__contains__": [[392, "skbio-sequence-rna-contains"]], "skbio.sequence.RNA.__copy__": [[393, "skbio-sequence-rna-copy"]], "skbio.sequence.RNA.__deepcopy__": [[394, "skbio-sequence-rna-deepcopy"]], "skbio.sequence.RNA.__eq__": [[395, "skbio-sequence-rna-eq"]], "skbio.sequence.RNA.__ge__": [[396, "skbio-sequence-rna-ge"]], "skbio.sequence.RNA.__getitem__": [[397, "skbio-sequence-rna-getitem"]], "skbio.sequence.RNA.__getstate__": [[398, "skbio-sequence-rna-getstate"]], "skbio.sequence.RNA.__gt__": [[399, "skbio-sequence-rna-gt"]], "skbio.sequence.RNA.__iter__": [[400, "skbio-sequence-rna-iter"]], "skbio.sequence.RNA.__le__": [[401, "skbio-sequence-rna-le"]], "skbio.sequence.RNA.__len__": [[402, "skbio-sequence-rna-len"]], "skbio.sequence.RNA.__lt__": [[403, "skbio-sequence-rna-lt"]], "skbio.sequence.RNA.__ne__": [[404, "skbio-sequence-rna-ne"]], "skbio.sequence.RNA.__reversed__": [[405, "skbio-sequence-rna-reversed"]], "skbio.sequence.RNA.__str__": [[406, "skbio-sequence-rna-str"]], "skbio.sequence.RNA.complement": [[407, "skbio-sequence-rna-complement"]], "skbio.sequence.RNA.concat": [[408, "skbio-sequence-rna-concat"]], "skbio.sequence.RNA.count": [[409, "skbio-sequence-rna-count"]], "skbio.sequence.RNA.definites": [[410, "skbio-sequence-rna-definites"]], "skbio.sequence.RNA.degap": [[411, "skbio-sequence-rna-degap"]], "skbio.sequence.RNA.degenerates": [[412, "skbio-sequence-rna-degenerates"]], "skbio.sequence.RNA.distance": [[413, "skbio-sequence-rna-distance"]], "skbio.sequence.RNA.expand_degenerates": [[414, "skbio-sequence-rna-expand-degenerates"]], "skbio.sequence.RNA.find_motifs": [[415, "skbio-sequence-rna-find-motifs"]], "skbio.sequence.RNA.find_with_regex": [[416, "skbio-sequence-rna-find-with-regex"]], "skbio.sequence.RNA.frequencies": [[417, "skbio-sequence-rna-frequencies"]], "skbio.sequence.RNA.gaps": [[418, "skbio-sequence-rna-gaps"]], "skbio.sequence.RNA.gc_content": [[419, "skbio-sequence-rna-gc-content"]], "skbio.sequence.RNA.gc_frequency": [[420, "skbio-sequence-rna-gc-frequency"]], "skbio.sequence.RNA.has_definites": [[421, "skbio-sequence-rna-has-definites"]], "skbio.sequence.RNA.has_degenerates": [[422, "skbio-sequence-rna-has-degenerates"]], "skbio.sequence.RNA.has_gaps": [[423, "skbio-sequence-rna-has-gaps"]], "skbio.sequence.RNA.has_interval_metadata": [[424, "skbio-sequence-rna-has-interval-metadata"]], "skbio.sequence.RNA.has_metadata": [[425, "skbio-sequence-rna-has-metadata"]], "skbio.sequence.RNA.has_nondegenerates": [[426, "skbio-sequence-rna-has-nondegenerates"]], "skbio.sequence.RNA.has_positional_metadata": [[427, "skbio-sequence-rna-has-positional-metadata"]], "skbio.sequence.RNA.index": [[428, "skbio-sequence-rna-index"]], "skbio.sequence.RNA.is_reverse_complement": [[429, "skbio-sequence-rna-is-reverse-complement"]], "skbio.sequence.RNA.iter_contiguous": [[430, "skbio-sequence-rna-iter-contiguous"]], "skbio.sequence.RNA.iter_kmers": [[431, "skbio-sequence-rna-iter-kmers"]], "skbio.sequence.RNA.kmer_frequencies": [[432, "skbio-sequence-rna-kmer-frequencies"]], "skbio.sequence.RNA.lowercase": [[433, "skbio-sequence-rna-lowercase"]], "skbio.sequence.RNA.match_frequency": [[434, "skbio-sequence-rna-match-frequency"]], "skbio.sequence.RNA.matches": [[435, "skbio-sequence-rna-matches"]], "skbio.sequence.RNA.mismatch_frequency": [[436, "skbio-sequence-rna-mismatch-frequency"]], "skbio.sequence.RNA.mismatches": [[437, "skbio-sequence-rna-mismatches"]], "skbio.sequence.RNA.nondegenerates": [[438, "skbio-sequence-rna-nondegenerates"]], "skbio.sequence.RNA.read": [[439, "skbio-sequence-rna-read"]], "skbio.sequence.RNA.replace": [[440, "skbio-sequence-rna-replace"]], "skbio.sequence.RNA.reverse_complement": [[441, "skbio-sequence-rna-reverse-complement"]], "skbio.sequence.RNA.reverse_transcribe": [[442, "skbio-sequence-rna-reverse-transcribe"]], "skbio.sequence.RNA.to_regex": [[443, "skbio-sequence-rna-to-regex"]], "skbio.sequence.RNA.translate": [[444, "skbio-sequence-rna-translate"]], "skbio.sequence.RNA.translate_six_frames": [[445, "skbio-sequence-rna-translate-six-frames"]], "skbio.sequence.RNA.write": [[446, "skbio-sequence-rna-write"]], "skbio.sequence.Sequence": [[447, "skbio-sequence-sequence"]], "skbio.sequence.Sequence.__bool__": [[448, "skbio-sequence-sequence-bool"]], "skbio.sequence.Sequence.__contains__": [[449, "skbio-sequence-sequence-contains"]], "skbio.sequence.Sequence.__copy__": [[450, "skbio-sequence-sequence-copy"]], "skbio.sequence.Sequence.__deepcopy__": [[451, "skbio-sequence-sequence-deepcopy"]], "skbio.sequence.Sequence.__eq__": [[452, "skbio-sequence-sequence-eq"]], "skbio.sequence.Sequence.__ge__": [[453, "skbio-sequence-sequence-ge"]], "skbio.sequence.Sequence.__getitem__": [[454, "skbio-sequence-sequence-getitem"]], "skbio.sequence.Sequence.__getstate__": [[455, "skbio-sequence-sequence-getstate"]], "skbio.sequence.Sequence.__gt__": [[456, "skbio-sequence-sequence-gt"]], "skbio.sequence.Sequence.__iter__": [[457, "skbio-sequence-sequence-iter"]], "skbio.sequence.Sequence.__le__": [[458, "skbio-sequence-sequence-le"]], "skbio.sequence.Sequence.__len__": [[459, "skbio-sequence-sequence-len"]], "skbio.sequence.Sequence.__lt__": [[460, "skbio-sequence-sequence-lt"]], "skbio.sequence.Sequence.__ne__": [[461, "skbio-sequence-sequence-ne"]], "skbio.sequence.Sequence.__reversed__": [[462, "skbio-sequence-sequence-reversed"]], "skbio.sequence.Sequence.__str__": [[463, "skbio-sequence-sequence-str"]], "skbio.sequence.Sequence.concat": [[464, "skbio-sequence-sequence-concat"]], "skbio.sequence.Sequence.count": [[465, "skbio-sequence-sequence-count"]], "skbio.sequence.Sequence.distance": [[466, "skbio-sequence-sequence-distance"]], "skbio.sequence.Sequence.find_with_regex": [[467, "skbio-sequence-sequence-find-with-regex"]], "skbio.sequence.Sequence.frequencies": [[468, "skbio-sequence-sequence-frequencies"]], "skbio.sequence.Sequence.has_interval_metadata": [[469, "skbio-sequence-sequence-has-interval-metadata"]], "skbio.sequence.Sequence.has_metadata": [[470, "skbio-sequence-sequence-has-metadata"]], "skbio.sequence.Sequence.has_positional_metadata": [[471, "skbio-sequence-sequence-has-positional-metadata"]], "skbio.sequence.Sequence.index": [[472, "skbio-sequence-sequence-index"]], "skbio.sequence.Sequence.iter_contiguous": [[473, "skbio-sequence-sequence-iter-contiguous"]], "skbio.sequence.Sequence.iter_kmers": [[474, "skbio-sequence-sequence-iter-kmers"]], "skbio.sequence.Sequence.kmer_frequencies": [[475, "skbio-sequence-sequence-kmer-frequencies"]], "skbio.sequence.Sequence.lowercase": [[476, "skbio-sequence-sequence-lowercase"]], "skbio.sequence.Sequence.match_frequency": [[477, "skbio-sequence-sequence-match-frequency"]], "skbio.sequence.Sequence.matches": [[478, "skbio-sequence-sequence-matches"]], "skbio.sequence.Sequence.mismatch_frequency": [[479, "skbio-sequence-sequence-mismatch-frequency"]], "skbio.sequence.Sequence.mismatches": [[480, "skbio-sequence-sequence-mismatches"]], "skbio.sequence.Sequence.read": [[481, "skbio-sequence-sequence-read"]], "skbio.sequence.Sequence.replace": [[482, "skbio-sequence-sequence-replace"]], "skbio.sequence.Sequence.write": [[483, "skbio-sequence-sequence-write"]], "skbio.sequence.SubstitutionMatrix": [[484, "skbio-sequence-substitutionmatrix"]], "skbio.sequence.SubstitutionMatrix.__contains__": [[485, "skbio-sequence-substitutionmatrix-contains"]], "skbio.sequence.SubstitutionMatrix.__eq__": [[486, "skbio-sequence-substitutionmatrix-eq"]], "skbio.sequence.SubstitutionMatrix.__ge__": [[487, "skbio-sequence-substitutionmatrix-ge"]], "skbio.sequence.SubstitutionMatrix.__getitem__": [[488, "skbio-sequence-substitutionmatrix-getitem"]], "skbio.sequence.SubstitutionMatrix.__getstate__": [[489, "skbio-sequence-substitutionmatrix-getstate"]], "skbio.sequence.SubstitutionMatrix.__gt__": [[490, "skbio-sequence-substitutionmatrix-gt"]], "skbio.sequence.SubstitutionMatrix.__le__": [[491, "skbio-sequence-substitutionmatrix-le"]], "skbio.sequence.SubstitutionMatrix.__lt__": [[492, "skbio-sequence-substitutionmatrix-lt"]], "skbio.sequence.SubstitutionMatrix.__ne__": [[493, "skbio-sequence-substitutionmatrix-ne"]], "skbio.sequence.SubstitutionMatrix.__str__": [[494, "skbio-sequence-substitutionmatrix-str"]], "skbio.sequence.SubstitutionMatrix.between": [[495, "skbio-sequence-substitutionmatrix-between"]], "skbio.sequence.SubstitutionMatrix.by_name": [[496, "skbio-sequence-substitutionmatrix-by-name"]], "skbio.sequence.SubstitutionMatrix.copy": [[497, "skbio-sequence-substitutionmatrix-copy"]], "skbio.sequence.SubstitutionMatrix.filter": [[498, "skbio-sequence-substitutionmatrix-filter"]], "skbio.sequence.SubstitutionMatrix.from_dict": [[499, "skbio-sequence-substitutionmatrix-from-dict"]], "skbio.sequence.SubstitutionMatrix.from_iterable": [[500, "skbio-sequence-substitutionmatrix-from-iterable"]], "skbio.sequence.SubstitutionMatrix.get_names": [[501, "skbio-sequence-substitutionmatrix-get-names"]], "skbio.sequence.SubstitutionMatrix.identity": [[502, "skbio-sequence-substitutionmatrix-identity"]], "skbio.sequence.SubstitutionMatrix.index": [[503, "skbio-sequence-substitutionmatrix-index"]], "skbio.sequence.SubstitutionMatrix.plot": [[504, "skbio-sequence-substitutionmatrix-plot"]], "skbio.sequence.SubstitutionMatrix.read": [[505, "skbio-sequence-substitutionmatrix-read"]], "skbio.sequence.SubstitutionMatrix.redundant_form": [[506, "skbio-sequence-substitutionmatrix-redundant-form"]], "skbio.sequence.SubstitutionMatrix.to_data_frame": [[507, "skbio-sequence-substitutionmatrix-to-data-frame"]], "skbio.sequence.SubstitutionMatrix.to_dict": [[508, "skbio-sequence-substitutionmatrix-to-dict"]], "skbio.sequence.SubstitutionMatrix.transpose": [[509, "skbio-sequence-substitutionmatrix-transpose"]], "skbio.sequence.SubstitutionMatrix.within": [[510, "skbio-sequence-substitutionmatrix-within"]], "skbio.sequence.SubstitutionMatrix.write": [[511, "skbio-sequence-substitutionmatrix-write"]], "Sequence distance metrics (skbio.sequence.distance)": [[512, "sequence-distance-metrics-skbio-sequence-distance"]], "skbio.sequence.distance.hamming": [[513, "skbio-sequence-distance-hamming"]], "skbio.sequence.distance.kmer_distance": [[514, "skbio-sequence-distance-kmer-distance"]], "Composition Statistics (skbio.stats.composition)": [[515, "composition-statistics-skbio-stats-composition"]], "skbio.stats.composition.alr": [[516, "skbio-stats-composition-alr"]], "skbio.stats.composition.alr_inv": [[517, "skbio-stats-composition-alr-inv"]], "skbio.stats.composition.ancom": [[518, "skbio-stats-composition-ancom"]], "skbio.stats.composition.centralize": [[519, "skbio-stats-composition-centralize"]], "skbio.stats.composition.closure": [[520, "skbio-stats-composition-closure"]], "skbio.stats.composition.clr": [[521, "skbio-stats-composition-clr"]], "skbio.stats.composition.clr_inv": [[522, "skbio-stats-composition-clr-inv"]], "skbio.stats.composition.ilr": [[523, "skbio-stats-composition-ilr"]], "skbio.stats.composition.ilr_inv": [[524, "skbio-stats-composition-ilr-inv"]], "skbio.stats.composition.inner": [[525, "skbio-stats-composition-inner"]], "skbio.stats.composition.multiplicative_replacement": [[526, "skbio-stats-composition-multiplicative-replacement"]], "skbio.stats.composition.pairwise_vlr": [[527, "skbio-stats-composition-pairwise-vlr"]], "skbio.stats.composition.perturb": [[528, "skbio-stats-composition-perturb"]], "skbio.stats.composition.perturb_inv": [[529, "skbio-stats-composition-perturb-inv"]], "skbio.stats.composition.power": [[530, "skbio-stats-composition-power"]], "skbio.stats.composition.sbp_basis": [[531, "skbio-stats-composition-sbp-basis"]], "skbio.stats.composition.tree_basis": [[532, "skbio-stats-composition-tree-basis"]], "skbio.stats.composition.vlr": [[533, "skbio-stats-composition-vlr"]], "Distance matrices and distance-based statistics (skbio.stats.distance)": [[534, "distance-matrices-and-distance-based-statistics-skbio-stats-distance"]], "Data Structures: DissimilarityMatrix and DistanceMatrix": [[534, "data-structures-dissimilaritymatrix-and-distancematrix"]], "Distance-based statistics": [[534, "distance-based-statistics"]], "Categorical Variable Stats": [[534, "categorical-variable-stats"]], "Continuous Variable Stats": [[534, "continuous-variable-stats"]], "Distance Matrix Comparisons": [[534, "distance-matrix-comparisons"]], "skbio.stats.distance.DissimilarityMatrix": [[535, "skbio-stats-distance-dissimilaritymatrix"]], "skbio.stats.distance.DissimilarityMatrix.__contains__": [[536, "skbio-stats-distance-dissimilaritymatrix-contains"]], "skbio.stats.distance.DissimilarityMatrix.__eq__": [[537, "skbio-stats-distance-dissimilaritymatrix-eq"]], "skbio.stats.distance.DissimilarityMatrix.__ge__": [[538, "skbio-stats-distance-dissimilaritymatrix-ge"]], "skbio.stats.distance.DissimilarityMatrix.__getitem__": [[539, "skbio-stats-distance-dissimilaritymatrix-getitem"]], "skbio.stats.distance.DissimilarityMatrix.__getstate__": [[540, "skbio-stats-distance-dissimilaritymatrix-getstate"]], "skbio.stats.distance.DissimilarityMatrix.__gt__": [[541, "skbio-stats-distance-dissimilaritymatrix-gt"]], "skbio.stats.distance.DissimilarityMatrix.__le__": [[542, "skbio-stats-distance-dissimilaritymatrix-le"]], "skbio.stats.distance.DissimilarityMatrix.__lt__": [[543, "skbio-stats-distance-dissimilaritymatrix-lt"]], "skbio.stats.distance.DissimilarityMatrix.__ne__": [[544, "skbio-stats-distance-dissimilaritymatrix-ne"]], "skbio.stats.distance.DissimilarityMatrix.__str__": [[545, "skbio-stats-distance-dissimilaritymatrix-str"]], "skbio.stats.distance.DissimilarityMatrix.between": [[546, "skbio-stats-distance-dissimilaritymatrix-between"]], "skbio.stats.distance.DissimilarityMatrix.copy": [[547, "skbio-stats-distance-dissimilaritymatrix-copy"]], "skbio.stats.distance.DissimilarityMatrix.filter": [[548, "skbio-stats-distance-dissimilaritymatrix-filter"]], "skbio.stats.distance.DissimilarityMatrix.from_iterable": [[549, "skbio-stats-distance-dissimilaritymatrix-from-iterable"]], "skbio.stats.distance.DissimilarityMatrix.index": [[550, "skbio-stats-distance-dissimilaritymatrix-index"]], "skbio.stats.distance.DissimilarityMatrix.plot": [[551, "skbio-stats-distance-dissimilaritymatrix-plot"]], "skbio.stats.distance.DissimilarityMatrix.read": [[552, "skbio-stats-distance-dissimilaritymatrix-read"]], "skbio.stats.distance.DissimilarityMatrix.redundant_form": [[553, "skbio-stats-distance-dissimilaritymatrix-redundant-form"]], "skbio.stats.distance.DissimilarityMatrix.to_data_frame": [[554, "skbio-stats-distance-dissimilaritymatrix-to-data-frame"]], "skbio.stats.distance.DissimilarityMatrix.transpose": [[555, "skbio-stats-distance-dissimilaritymatrix-transpose"]], "skbio.stats.distance.DissimilarityMatrix.within": [[556, "skbio-stats-distance-dissimilaritymatrix-within"]], "skbio.stats.distance.DissimilarityMatrix.write": [[557, "skbio-stats-distance-dissimilaritymatrix-write"]], "skbio.stats.distance.DissimilarityMatrixError": [[558, "skbio-stats-distance-dissimilaritymatrixerror"]], "skbio.stats.distance.DistanceMatrix": [[559, "skbio-stats-distance-distancematrix"]], "skbio.stats.distance.DistanceMatrix.__contains__": [[560, "skbio-stats-distance-distancematrix-contains"]], "skbio.stats.distance.DistanceMatrix.__eq__": [[561, "skbio-stats-distance-distancematrix-eq"]], "skbio.stats.distance.DistanceMatrix.__ge__": [[562, "skbio-stats-distance-distancematrix-ge"]], "skbio.stats.distance.DistanceMatrix.__getitem__": [[563, "skbio-stats-distance-distancematrix-getitem"]], "skbio.stats.distance.DistanceMatrix.__getstate__": [[564, "skbio-stats-distance-distancematrix-getstate"]], "skbio.stats.distance.DistanceMatrix.__gt__": [[565, "skbio-stats-distance-distancematrix-gt"]], "skbio.stats.distance.DistanceMatrix.__le__": [[566, "skbio-stats-distance-distancematrix-le"]], "skbio.stats.distance.DistanceMatrix.__lt__": [[567, "skbio-stats-distance-distancematrix-lt"]], "skbio.stats.distance.DistanceMatrix.__ne__": [[568, "skbio-stats-distance-distancematrix-ne"]], "skbio.stats.distance.DistanceMatrix.__str__": [[569, "skbio-stats-distance-distancematrix-str"]], "skbio.stats.distance.DistanceMatrix.between": [[570, "skbio-stats-distance-distancematrix-between"]], "skbio.stats.distance.DistanceMatrix.condensed_form": [[571, "skbio-stats-distance-distancematrix-condensed-form"]], "skbio.stats.distance.DistanceMatrix.copy": [[572, "skbio-stats-distance-distancematrix-copy"]], "skbio.stats.distance.DistanceMatrix.filter": [[573, "skbio-stats-distance-distancematrix-filter"]], "skbio.stats.distance.DistanceMatrix.from_iterable": [[574, "skbio-stats-distance-distancematrix-from-iterable"]], "skbio.stats.distance.DistanceMatrix.index": [[575, "skbio-stats-distance-distancematrix-index"]], "skbio.stats.distance.DistanceMatrix.permute": [[576, "skbio-stats-distance-distancematrix-permute"]], "skbio.stats.distance.DistanceMatrix.plot": [[577, "skbio-stats-distance-distancematrix-plot"]], "skbio.stats.distance.DistanceMatrix.read": [[578, "skbio-stats-distance-distancematrix-read"]], "skbio.stats.distance.DistanceMatrix.redundant_form": [[579, "skbio-stats-distance-distancematrix-redundant-form"]], "skbio.stats.distance.DistanceMatrix.to_data_frame": [[580, "skbio-stats-distance-distancematrix-to-data-frame"]], "skbio.stats.distance.DistanceMatrix.to_series": [[581, "skbio-stats-distance-distancematrix-to-series"]], "skbio.stats.distance.DistanceMatrix.transpose": [[582, "skbio-stats-distance-distancematrix-transpose"]], "skbio.stats.distance.DistanceMatrix.within": [[583, "skbio-stats-distance-distancematrix-within"]], "skbio.stats.distance.DistanceMatrix.write": [[584, "skbio-stats-distance-distancematrix-write"]], "skbio.stats.distance.DistanceMatrixError": [[585, "skbio-stats-distance-distancematrixerror"]], "skbio.stats.distance.MissingIDError": [[586, "skbio-stats-distance-missingiderror"]], "skbio.stats.distance.anosim": [[587, "skbio-stats-distance-anosim"]], "skbio.stats.distance.bioenv": [[588, "skbio-stats-distance-bioenv"]], "skbio.stats.distance.mantel": [[589, "skbio-stats-distance-mantel"]], "skbio.stats.distance.permanova": [[590, "skbio-stats-distance-permanova"]], "skbio.stats.distance.permdisp": [[591, "skbio-stats-distance-permdisp"]], "skbio.stats.distance.pwmantel": [[592, "skbio-stats-distance-pwmantel"]], "skbio.stats.distance.randdm": [[593, "skbio-stats-distance-randdm"]], "Evolutionary statistics (skbio.stats.evolve)": [[594, "evolutionary-statistics-skbio-stats-evolve"]], "Cophylogenetic methods": [[594, "cophylogenetic-methods"]], "skbio.stats.evolve.hommola_cospeciation": [[595, "skbio-stats-evolve-hommola-cospeciation"]], "Gradient analyses (skbio.stats.gradient)": [[596, "gradient-analyses-skbio-stats-gradient"]], "skbio.stats.gradient.AverageGradientANOVA": [[597, "skbio-stats-gradient-averagegradientanova"]], "skbio.stats.gradient.AverageGradientANOVA.__eq__": [[598, "skbio-stats-gradient-averagegradientanova-eq"]], "skbio.stats.gradient.AverageGradientANOVA.__ge__": [[599, "skbio-stats-gradient-averagegradientanova-ge"]], "skbio.stats.gradient.AverageGradientANOVA.__getstate__": [[600, "skbio-stats-gradient-averagegradientanova-getstate"]], "skbio.stats.gradient.AverageGradientANOVA.__gt__": [[601, "skbio-stats-gradient-averagegradientanova-gt"]], "skbio.stats.gradient.AverageGradientANOVA.__hash__": [[602, "skbio-stats-gradient-averagegradientanova-hash"]], "skbio.stats.gradient.AverageGradientANOVA.__le__": [[603, "skbio-stats-gradient-averagegradientanova-le"]], "skbio.stats.gradient.AverageGradientANOVA.__lt__": [[604, "skbio-stats-gradient-averagegradientanova-lt"]], "skbio.stats.gradient.AverageGradientANOVA.__ne__": [[605, "skbio-stats-gradient-averagegradientanova-ne"]], "skbio.stats.gradient.AverageGradientANOVA.__str__": [[606, "skbio-stats-gradient-averagegradientanova-str"]], "skbio.stats.gradient.AverageGradientANOVA.get_trajectories": [[607, "skbio-stats-gradient-averagegradientanova-get-trajectories"]], "skbio.stats.gradient.CategoryResults": [[608, "skbio-stats-gradient-categoryresults"]], "skbio.stats.gradient.CategoryResults.__eq__": [[609, "skbio-stats-gradient-categoryresults-eq"]], "skbio.stats.gradient.CategoryResults.__ge__": [[610, "skbio-stats-gradient-categoryresults-ge"]], "skbio.stats.gradient.CategoryResults.__getstate__": [[611, "skbio-stats-gradient-categoryresults-getstate"]], "skbio.stats.gradient.CategoryResults.__gt__": [[612, "skbio-stats-gradient-categoryresults-gt"]], "skbio.stats.gradient.CategoryResults.__hash__": [[613, "skbio-stats-gradient-categoryresults-hash"]], "skbio.stats.gradient.CategoryResults.__le__": [[614, "skbio-stats-gradient-categoryresults-le"]], "skbio.stats.gradient.CategoryResults.__lt__": [[615, "skbio-stats-gradient-categoryresults-lt"]], "skbio.stats.gradient.CategoryResults.__ne__": [[616, "skbio-stats-gradient-categoryresults-ne"]], "skbio.stats.gradient.CategoryResults.__str__": [[617, "skbio-stats-gradient-categoryresults-str"]], "skbio.stats.gradient.CategoryResults.to_files": [[618, "skbio-stats-gradient-categoryresults-to-files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[619, "skbio-stats-gradient-firstdifferencegradientanova"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__": [[620, "skbio-stats-gradient-firstdifferencegradientanova-eq"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__": [[621, "skbio-stats-gradient-firstdifferencegradientanova-ge"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__": [[622, "skbio-stats-gradient-firstdifferencegradientanova-getstate"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__": [[623, "skbio-stats-gradient-firstdifferencegradientanova-gt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__": [[624, "skbio-stats-gradient-firstdifferencegradientanova-hash"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__": [[625, "skbio-stats-gradient-firstdifferencegradientanova-le"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__": [[626, "skbio-stats-gradient-firstdifferencegradientanova-lt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__": [[627, "skbio-stats-gradient-firstdifferencegradientanova-ne"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__": [[628, "skbio-stats-gradient-firstdifferencegradientanova-str"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories": [[629, "skbio-stats-gradient-firstdifferencegradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVA": [[630, "skbio-stats-gradient-gradientanova"]], "skbio.stats.gradient.GradientANOVA.__eq__": [[631, "skbio-stats-gradient-gradientanova-eq"]], "skbio.stats.gradient.GradientANOVA.__ge__": [[632, "skbio-stats-gradient-gradientanova-ge"]], "skbio.stats.gradient.GradientANOVA.__getstate__": [[633, "skbio-stats-gradient-gradientanova-getstate"]], "skbio.stats.gradient.GradientANOVA.__gt__": [[634, "skbio-stats-gradient-gradientanova-gt"]], "skbio.stats.gradient.GradientANOVA.__hash__": [[635, "skbio-stats-gradient-gradientanova-hash"]], "skbio.stats.gradient.GradientANOVA.__le__": [[636, "skbio-stats-gradient-gradientanova-le"]], "skbio.stats.gradient.GradientANOVA.__lt__": [[637, "skbio-stats-gradient-gradientanova-lt"]], "skbio.stats.gradient.GradientANOVA.__ne__": [[638, "skbio-stats-gradient-gradientanova-ne"]], "skbio.stats.gradient.GradientANOVA.__str__": [[639, "skbio-stats-gradient-gradientanova-str"]], "skbio.stats.gradient.GradientANOVA.get_trajectories": [[640, "skbio-stats-gradient-gradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[641, "skbio-stats-gradient-gradientanovaresults"]], "skbio.stats.gradient.GradientANOVAResults.__eq__": [[642, "skbio-stats-gradient-gradientanovaresults-eq"]], "skbio.stats.gradient.GradientANOVAResults.__ge__": [[643, "skbio-stats-gradient-gradientanovaresults-ge"]], "skbio.stats.gradient.GradientANOVAResults.__getstate__": [[644, "skbio-stats-gradient-gradientanovaresults-getstate"]], "skbio.stats.gradient.GradientANOVAResults.__gt__": [[645, "skbio-stats-gradient-gradientanovaresults-gt"]], "skbio.stats.gradient.GradientANOVAResults.__hash__": [[646, "skbio-stats-gradient-gradientanovaresults-hash"]], "skbio.stats.gradient.GradientANOVAResults.__le__": [[647, "skbio-stats-gradient-gradientanovaresults-le"]], "skbio.stats.gradient.GradientANOVAResults.__lt__": [[648, "skbio-stats-gradient-gradientanovaresults-lt"]], "skbio.stats.gradient.GradientANOVAResults.__ne__": [[649, "skbio-stats-gradient-gradientanovaresults-ne"]], "skbio.stats.gradient.GradientANOVAResults.__str__": [[650, "skbio-stats-gradient-gradientanovaresults-str"]], "skbio.stats.gradient.GradientANOVAResults.to_files": [[651, "skbio-stats-gradient-gradientanovaresults-to-files"]], "skbio.stats.gradient.GroupResults": [[652, "skbio-stats-gradient-groupresults"]], "skbio.stats.gradient.GroupResults.__eq__": [[653, "skbio-stats-gradient-groupresults-eq"]], "skbio.stats.gradient.GroupResults.__ge__": [[654, "skbio-stats-gradient-groupresults-ge"]], "skbio.stats.gradient.GroupResults.__getstate__": [[655, "skbio-stats-gradient-groupresults-getstate"]], "skbio.stats.gradient.GroupResults.__gt__": [[656, "skbio-stats-gradient-groupresults-gt"]], "skbio.stats.gradient.GroupResults.__hash__": [[657, "skbio-stats-gradient-groupresults-hash"]], "skbio.stats.gradient.GroupResults.__le__": [[658, "skbio-stats-gradient-groupresults-le"]], "skbio.stats.gradient.GroupResults.__lt__": [[659, "skbio-stats-gradient-groupresults-lt"]], "skbio.stats.gradient.GroupResults.__ne__": [[660, "skbio-stats-gradient-groupresults-ne"]], "skbio.stats.gradient.GroupResults.__str__": [[661, "skbio-stats-gradient-groupresults-str"]], "skbio.stats.gradient.GroupResults.to_files": [[662, "skbio-stats-gradient-groupresults-to-files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[663, "skbio-stats-gradient-trajectorygradientanova"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__": [[664, "skbio-stats-gradient-trajectorygradientanova-eq"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__": [[665, "skbio-stats-gradient-trajectorygradientanova-ge"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__": [[666, "skbio-stats-gradient-trajectorygradientanova-getstate"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__": [[667, "skbio-stats-gradient-trajectorygradientanova-gt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__": [[668, "skbio-stats-gradient-trajectorygradientanova-hash"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__le__": [[669, "skbio-stats-gradient-trajectorygradientanova-le"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__": [[670, "skbio-stats-gradient-trajectorygradientanova-lt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__": [[671, "skbio-stats-gradient-trajectorygradientanova-ne"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__str__": [[672, "skbio-stats-gradient-trajectorygradientanova-str"]], "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories": [[673, "skbio-stats-gradient-trajectorygradientanova-get-trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[674, "skbio-stats-gradient-windowdifferencegradientanova"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__": [[675, "skbio-stats-gradient-windowdifferencegradientanova-eq"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__": [[676, "skbio-stats-gradient-windowdifferencegradientanova-ge"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__": [[677, "skbio-stats-gradient-windowdifferencegradientanova-getstate"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__": [[678, "skbio-stats-gradient-windowdifferencegradientanova-gt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__": [[679, "skbio-stats-gradient-windowdifferencegradientanova-hash"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__": [[680, "skbio-stats-gradient-windowdifferencegradientanova-le"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__": [[681, "skbio-stats-gradient-windowdifferencegradientanova-lt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__": [[682, "skbio-stats-gradient-windowdifferencegradientanova-ne"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__": [[683, "skbio-stats-gradient-windowdifferencegradientanova-str"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories": [[684, "skbio-stats-gradient-windowdifferencegradientanova-get-trajectories"]], "skbio.stats.isubsample": [[685, "skbio-stats-isubsample"]], "Ordination methods (skbio.stats.ordination)": [[686, "ordination-methods-skbio-stats-ordination"]], "Ordination Functions": [[686, "ordination-functions"]], "Utility Functions": [[686, "utility-functions"], [867, "utility-functions"]], "skbio.stats.ordination.OrdinationResults": [[687, "skbio-stats-ordination-ordinationresults"]], "skbio.stats.ordination.OrdinationResults.__eq__": [[688, "skbio-stats-ordination-ordinationresults-eq"]], "skbio.stats.ordination.OrdinationResults.__ge__": [[689, "skbio-stats-ordination-ordinationresults-ge"]], "skbio.stats.ordination.OrdinationResults.__getstate__": [[690, "skbio-stats-ordination-ordinationresults-getstate"]], "skbio.stats.ordination.OrdinationResults.__gt__": [[691, "skbio-stats-ordination-ordinationresults-gt"]], "skbio.stats.ordination.OrdinationResults.__hash__": [[692, "skbio-stats-ordination-ordinationresults-hash"]], "skbio.stats.ordination.OrdinationResults.__le__": [[693, "skbio-stats-ordination-ordinationresults-le"]], "skbio.stats.ordination.OrdinationResults.__lt__": [[694, "skbio-stats-ordination-ordinationresults-lt"]], "skbio.stats.ordination.OrdinationResults.__ne__": [[695, "skbio-stats-ordination-ordinationresults-ne"]], "skbio.stats.ordination.OrdinationResults.__str__": [[696, "skbio-stats-ordination-ordinationresults-str"]], "skbio.stats.ordination.OrdinationResults.plot": [[697, "skbio-stats-ordination-ordinationresults-plot"]], "skbio.stats.ordination.OrdinationResults.read": [[698, "skbio-stats-ordination-ordinationresults-read"]], "skbio.stats.ordination.OrdinationResults.write": [[699, "skbio-stats-ordination-ordinationresults-write"]], "skbio.stats.ordination.ca": [[700, "skbio-stats-ordination-ca"]], "skbio.stats.ordination.cca": [[701, "skbio-stats-ordination-cca"]], "skbio.stats.ordination.corr": [[702, "skbio-stats-ordination-corr"]], "skbio.stats.ordination.e_matrix": [[703, "skbio-stats-ordination-e-matrix"]], "skbio.stats.ordination.f_matrix": [[704, "skbio-stats-ordination-f-matrix"]], "skbio.stats.ordination.mean_and_std": [[705, "skbio-stats-ordination-mean-and-std"]], "skbio.stats.ordination.pcoa": [[706, "skbio-stats-ordination-pcoa"]], "skbio.stats.ordination.pcoa_biplot": [[707, "skbio-stats-ordination-pcoa-biplot"]], "skbio.stats.ordination.rda": [[708, "skbio-stats-ordination-rda"]], "skbio.stats.ordination.scale": [[709, "skbio-stats-ordination-scale"]], "skbio.stats.ordination.svd_rank": [[710, "skbio-stats-ordination-svd-rank"]], "Empirical Power Estimation (skbio.stats.power)": [[711, "empirical-power-estimation-skbio-stats-power"]], "skbio.stats.power.confidence_bound": [[712, "skbio-stats-power-confidence-bound"]], "skbio.stats.power.paired_subsamples": [[713, "skbio-stats-power-paired-subsamples"]], "skbio.stats.power.subsample_paired_power": [[714, "skbio-stats-power-subsample-paired-power"]], "skbio.stats.power.subsample_power": [[715, "skbio-stats-power-subsample-power"]], "skbio.stats.subsample_counts": [[716, "skbio-stats-subsample-counts"]], "skbio.tree.DuplicateNodeError": [[717, "skbio-tree-duplicatenodeerror"]], "skbio.tree.MissingNodeError": [[718, "skbio-tree-missingnodeerror"]], "skbio.tree.NoLengthError": [[719, "skbio-tree-nolengtherror"]], "skbio.tree.NoParentError": [[720, "skbio-tree-noparenterror"]], "skbio.tree.TreeError": [[721, "skbio-tree-treeerror"]], "skbio.tree.TreeNode": [[722, "skbio-tree-treenode"]], "skbio.tree.TreeNode.__copy__": [[723, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.__deepcopy__": [[724, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.__eq__": [[725, "skbio-tree-treenode-eq"]], "skbio.tree.TreeNode.__ge__": [[726, "skbio-tree-treenode-ge"]], "skbio.tree.TreeNode.__getitem__": [[727, "skbio-tree-treenode-getitem"]], "skbio.tree.TreeNode.__getstate__": [[728, "skbio-tree-treenode-getstate"]], "skbio.tree.TreeNode.__gt__": [[729, "skbio-tree-treenode-gt"]], "skbio.tree.TreeNode.__hash__": [[730, "skbio-tree-treenode-hash"]], "skbio.tree.TreeNode.__iter__": [[731, "skbio-tree-treenode-iter"]], "skbio.tree.TreeNode.__le__": [[732, "skbio-tree-treenode-le"]], "skbio.tree.TreeNode.__len__": [[733, "skbio-tree-treenode-len"]], "skbio.tree.TreeNode.__lt__": [[734, "skbio-tree-treenode-lt"]], "skbio.tree.TreeNode.__ne__": [[735, "skbio-tree-treenode-ne"]], "skbio.tree.TreeNode.__str__": [[736, "skbio-tree-treenode-str"]], "skbio.tree.TreeNode.accumulate_to_ancestor": [[737, "skbio-tree-treenode-accumulate-to-ancestor"]], "skbio.tree.TreeNode.ancestors": [[738, "skbio-tree-treenode-ancestors"]], "skbio.tree.TreeNode.append": [[739, "skbio-tree-treenode-append"]], "skbio.tree.TreeNode.ascii_art": [[740, "skbio-tree-treenode-ascii-art"]], "skbio.tree.TreeNode.assign_ids": [[741, "skbio-tree-treenode-assign-ids"]], "skbio.tree.TreeNode.assign_supports": [[742, "skbio-tree-treenode-assign-supports"]], "skbio.tree.TreeNode.bifurcate": [[743, "skbio-tree-treenode-bifurcate"]], "skbio.tree.TreeNode.cache_attr": [[744, "skbio-tree-treenode-cache-attr"]], "skbio.tree.TreeNode.compare_rfd": [[745, "skbio-tree-treenode-compare-rfd"]], "skbio.tree.TreeNode.compare_subsets": [[746, "skbio-tree-treenode-compare-subsets"]], "skbio.tree.TreeNode.compare_tip_distances": [[747, "skbio-tree-treenode-compare-tip-distances"]], "skbio.tree.TreeNode.copy": [[748, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.count": [[749, "skbio-tree-treenode-count"]], "skbio.tree.TreeNode.create_caches": [[750, "skbio-tree-treenode-create-caches"]], "skbio.tree.TreeNode.deepcopy": [[751, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.descending_branch_length": [[752, "skbio-tree-treenode-descending-branch-length"]], "skbio.tree.TreeNode.distance": [[753, "skbio-tree-treenode-distance"]], "skbio.tree.TreeNode.extend": [[754, "skbio-tree-treenode-extend"]], "skbio.tree.TreeNode.find": [[755, "skbio-tree-treenode-find"]], "skbio.tree.TreeNode.find_all": [[756, "skbio-tree-treenode-find-all"]], "skbio.tree.TreeNode.find_by_func": [[757, "skbio-tree-treenode-find-by-func"]], "skbio.tree.TreeNode.find_by_id": [[758, "skbio-tree-treenode-find-by-id"]], "skbio.tree.TreeNode.from_linkage_matrix": [[759, "skbio-tree-treenode-from-linkage-matrix"]], "skbio.tree.TreeNode.from_taxdump": [[760, "skbio-tree-treenode-from-taxdump"]], "skbio.tree.TreeNode.from_taxonomy": [[761, "skbio-tree-treenode-from-taxonomy"]], "skbio.tree.TreeNode.get_max_distance": [[762, "skbio-tree-treenode-get-max-distance"]], "skbio.tree.TreeNode.has_children": [[763, "skbio-tree-treenode-has-children"]], "skbio.tree.TreeNode.index_tree": [[764, "skbio-tree-treenode-index-tree"]], "skbio.tree.TreeNode.invalidate_caches": [[765, "skbio-tree-treenode-invalidate-caches"]], "skbio.tree.TreeNode.is_root": [[766, "skbio-tree-treenode-is-root"]], "skbio.tree.TreeNode.is_tip": [[767, "skbio-tree-treenode-is-tip"]], "skbio.tree.TreeNode.lca": [[768, "skbio-tree-treenode-lca"]], "skbio.tree.TreeNode.levelorder": [[769, "skbio-tree-treenode-levelorder"]], "skbio.tree.TreeNode.lowest_common_ancestor": [[770, "skbio-tree-treenode-lowest-common-ancestor"]], "skbio.tree.TreeNode.neighbors": [[771, "skbio-tree-treenode-neighbors"]], "skbio.tree.TreeNode.non_tips": [[772, "skbio-tree-treenode-non-tips"]], "skbio.tree.TreeNode.observed_node_counts": [[773, "skbio-tree-treenode-observed-node-counts"]], "skbio.tree.TreeNode.pop": [[774, "skbio-tree-treenode-pop"]], "skbio.tree.TreeNode.postorder": [[775, "skbio-tree-treenode-postorder"]], "skbio.tree.TreeNode.pre_and_postorder": [[776, "skbio-tree-treenode-pre-and-postorder"]], "skbio.tree.TreeNode.preorder": [[777, "skbio-tree-treenode-preorder"]], "skbio.tree.TreeNode.prune": [[778, "skbio-tree-treenode-prune"]], "skbio.tree.TreeNode.read": [[779, "skbio-tree-treenode-read"]], "skbio.tree.TreeNode.remove": [[780, "skbio-tree-treenode-remove"]], "skbio.tree.TreeNode.remove_deleted": [[781, "skbio-tree-treenode-remove-deleted"]], "skbio.tree.TreeNode.root": [[782, "skbio-tree-treenode-root"]], "skbio.tree.TreeNode.root_at": [[783, "skbio-tree-treenode-root-at"]], "skbio.tree.TreeNode.root_at_midpoint": [[784, "skbio-tree-treenode-root-at-midpoint"]], "skbio.tree.TreeNode.shear": [[785, "skbio-tree-treenode-shear"]], "skbio.tree.TreeNode.shuffle": [[786, "skbio-tree-treenode-shuffle"]], "skbio.tree.TreeNode.siblings": [[787, "skbio-tree-treenode-siblings"]], "skbio.tree.TreeNode.subset": [[788, "skbio-tree-treenode-subset"]], "skbio.tree.TreeNode.subsets": [[789, "skbio-tree-treenode-subsets"]], "skbio.tree.TreeNode.subtree": [[790, "skbio-tree-treenode-subtree"]], "skbio.tree.TreeNode.tip_tip_distances": [[791, "skbio-tree-treenode-tip-tip-distances"]], "skbio.tree.TreeNode.tips": [[792, "skbio-tree-treenode-tips"]], "skbio.tree.TreeNode.to_array": [[793, "skbio-tree-treenode-to-array"]], "skbio.tree.TreeNode.to_taxonomy": [[794, "skbio-tree-treenode-to-taxonomy"]], "skbio.tree.TreeNode.traverse": [[795, "skbio-tree-treenode-traverse"]], "skbio.tree.TreeNode.unpack": [[796, "skbio-tree-treenode-unpack"]], "skbio.tree.TreeNode.unpack_by_func": [[797, "skbio-tree-treenode-unpack-by-func"]], "skbio.tree.TreeNode.unrooted_copy": [[798, "skbio-tree-treenode-unrooted-copy"]], "skbio.tree.TreeNode.unrooted_deepcopy": [[799, "skbio-tree-treenode-unrooted-deepcopy"]], "skbio.tree.TreeNode.write": [[800, "skbio-tree-treenode-write"]], "skbio.tree.majority_rule": [[801, "skbio-tree-majority-rule"]], "skbio.tree.nj": [[802, "skbio-tree-nj"]], "skbio.util.EfficiencyWarning": [[803, "skbio-util-efficiencywarning"]], "skbio.util.RepresentationWarning": [[804, "skbio-util-representationwarning"]], "skbio.util.assert_data_frame_almost_equal": [[805, "skbio-util-assert-data-frame-almost-equal"]], "skbio.util.assert_ordination_results_equal": [[806, "skbio-util-assert-ordination-results-equal"]], "skbio.util.cardinal_to_ordinal": [[807, "skbio-util-cardinal-to-ordinal"]], "skbio.util.classproperty": [[808, "skbio-util-classproperty"]], "skbio.util.classproperty.__delete__": [[809, "skbio-util-classproperty-delete"]], "skbio.util.classproperty.__eq__": [[810, "skbio-util-classproperty-eq"]], "skbio.util.classproperty.__ge__": [[811, "skbio-util-classproperty-ge"]], "skbio.util.classproperty.__get__": [[812, "skbio-util-classproperty-get"]], "skbio.util.classproperty.__getstate__": [[813, "skbio-util-classproperty-getstate"]], "skbio.util.classproperty.__gt__": [[814, "skbio-util-classproperty-gt"]], "skbio.util.classproperty.__hash__": [[815, "skbio-util-classproperty-hash"]], "skbio.util.classproperty.__le__": [[816, "skbio-util-classproperty-le"]], "skbio.util.classproperty.__lt__": [[817, "skbio-util-classproperty-lt"]], "skbio.util.classproperty.__ne__": [[818, "skbio-util-classproperty-ne"]], "skbio.util.classproperty.__set__": [[819, "skbio-util-classproperty-set"]], "skbio.util.classproperty.__set_name__": [[820, "skbio-util-classproperty-set-name"]], "skbio.util.classproperty.__str__": [[821, "skbio-util-classproperty-str"]], "skbio.util.classproperty.deleter": [[822, "skbio-util-classproperty-deleter"]], "skbio.util.classproperty.getter": [[823, "skbio-util-classproperty-getter"]], "skbio.util.classproperty.setter": [[824, "skbio-util-classproperty-setter"]], "skbio.util.find_duplicates": [[825, "skbio-util-find-duplicates"]], "skbio.util.get_data_path": [[826, "skbio-util-get-data-path"]], "skbio.util.safe_md5": [[827, "skbio-util-safe-md5"]], "skbio.workflow.Workflow": [[828, "skbio-workflow-workflow"]], "skbio.workflow.Workflow.__call__": [[829, "skbio-workflow-workflow-call"]], "skbio.workflow.Workflow.__eq__": [[830, "skbio-workflow-workflow-eq"]], "skbio.workflow.Workflow.__ge__": [[831, "skbio-workflow-workflow-ge"]], "skbio.workflow.Workflow.__getstate__": [[832, "skbio-workflow-workflow-getstate"]], "skbio.workflow.Workflow.__gt__": [[833, "skbio-workflow-workflow-gt"]], "skbio.workflow.Workflow.__hash__": [[834, "skbio-workflow-workflow-hash"]], "skbio.workflow.Workflow.__le__": [[835, "skbio-workflow-workflow-le"]], "skbio.workflow.Workflow.__lt__": [[836, "skbio-workflow-workflow-lt"]], "skbio.workflow.Workflow.__ne__": [[837, "skbio-workflow-workflow-ne"]], "skbio.workflow.Workflow.__str__": [[838, "skbio-workflow-workflow-str"]], "skbio.workflow.Workflow.initialize_state": [[839, "skbio-workflow-workflow-initialize-state"]], "skbio.workflow.method": [[840, "skbio-workflow-method"]], "skbio.workflow.method.__call__": [[841, "skbio-workflow-method-call"]], "skbio.workflow.method.__eq__": [[842, "skbio-workflow-method-eq"]], "skbio.workflow.method.__ge__": [[843, "skbio-workflow-method-ge"]], "skbio.workflow.method.__getstate__": [[844, "skbio-workflow-method-getstate"]], "skbio.workflow.method.__gt__": [[845, "skbio-workflow-method-gt"]], "skbio.workflow.method.__hash__": [[846, "skbio-workflow-method-hash"]], "skbio.workflow.method.__le__": [[847, "skbio-workflow-method-le"]], "skbio.workflow.method.__lt__": [[848, "skbio-workflow-method-lt"]], "skbio.workflow.method.__ne__": [[849, "skbio-workflow-method-ne"]], "skbio.workflow.method.__str__": [[850, "skbio-workflow-method-str"]], "skbio.workflow.requires": [[851, "skbio-workflow-requires"]], "skbio.workflow.requires.__call__": [[852, "skbio-workflow-requires-call"]], "skbio.workflow.requires.__eq__": [[853, "skbio-workflow-requires-eq"]], "skbio.workflow.requires.__ge__": [[854, "skbio-workflow-requires-ge"]], "skbio.workflow.requires.__getstate__": [[855, "skbio-workflow-requires-getstate"]], "skbio.workflow.requires.__gt__": [[856, "skbio-workflow-requires-gt"]], "skbio.workflow.requires.__hash__": [[857, "skbio-workflow-requires-hash"]], "skbio.workflow.requires.__le__": [[858, "skbio-workflow-requires-le"]], "skbio.workflow.requires.__lt__": [[859, "skbio-workflow-requires-lt"]], "skbio.workflow.requires.__ne__": [[860, "skbio-workflow-requires-ne"]], "skbio.workflow.requires.__str__": [[861, "skbio-workflow-requires-str"]], "scikit-bio 0.5.10-dev": [[862, "scikit-bio-version"]], "API Reference": [[862, "api-reference"]], "File I/O (skbio.io)": [[863, "file-i-o-skbio-io"]], "Supported file formats": [[863, "supported-file-formats"]], "User functions": [[863, "user-functions"]], "User exceptions and warnings": [[863, "user-exceptions-and-warnings"]], "Introduction to I/O": [[863, "introduction-to-i-o"]], "What kinds of files scikit-bio can use": [[863, "what-kinds-of-files-scikit-bio-can-use"]], "Reading files into scikit-bio": [[863, "reading-files-into-scikit-bio"]], "Writing files from scikit-bio": [[863, "writing-files-from-scikit-bio"]], "Metadata (skbio.metadata)": [[864, "metadata-skbio-metadata"]], "Sequences (skbio.sequence)": [[865, "sequences-skbio-sequence"]], "Statistics (skbio.stats)": [[866, "statistics-skbio-stats"]], "Tree representations (skbio.tree)": [[867, "tree-representations-skbio-tree"]], "Phylogenetic Reconstruction": [[867, "phylogenetic-reconstruction"]], "Utility functionality (skbio.util)": [[868, "utility-functionality-skbio-util"]], "Testing functionality": [[868, "testing-functionality"]], "Miscellaneous functionality": [[868, "miscellaneous-functionality"]], "Warnings": [[868, "warnings"]], "Constructing workflows (skbio.workflow)": [[869, "constructing-workflows-skbio-workflow"]], "Decorators": [[869, "decorators"]]}, "indexentries": {"module": [[0, "module-skbio.alignment"], [1, "module-skbio.diversity"], [68, "module-skbio.diversity.alpha"], [104, "module-skbio.diversity.beta"], [131, "module-skbio.io.format.binary_dm"], [132, "module-skbio.io.format.blast6"], [133, "module-skbio.io.format.blast7"], [134, "module-skbio.io.format.clustal"], [135, "module-skbio.io.format.embl"], [136, "module-skbio.io.format.fasta"], [137, "module-skbio.io.format.fastq"], [138, "module-skbio.io.format.genbank"], [139, "module-skbio.io.format.gff3"], [140, "module-skbio.io.format.lsmat"], [141, "module-skbio.io.format.newick"], [142, "module-skbio.io.format.ordination"], [143, "module-skbio.io.format.phylip"], [144, "module-skbio.io.format.qseq"], [145, "module-skbio.io.format.stockholm"], [146, "module-skbio.io.format.taxdump"], [147, "module-skbio.io.registry"], [188, "module-skbio.io.util"], [512, "module-skbio.sequence.distance"], [515, "module-skbio.stats.composition"], [534, "module-skbio.stats.distance"], [594, "module-skbio.stats.evolve"], [596, "module-skbio.stats.gradient"], [686, "module-skbio.stats.ordination"], [711, "module-skbio.stats.power"], [863, "module-skbio.io"], [864, "module-skbio.metadata"], [865, "module-skbio.sequence"], [866, "module-skbio.stats"], [867, "module-skbio.tree"], [868, "module-skbio.util"], [869, "module-skbio.workflow"]], "skbio.alignment": [[0, "module-skbio.alignment"]], "skbio.diversity": [[1, "module-skbio.diversity"]], "alignmentstructure (class in skbio.alignment)": [[2, "skbio.alignment.AlignmentStructure"]], "__eq__() (skbio.alignment.alignmentstructure method)": [[3, "skbio.alignment.AlignmentStructure.__eq__"]], "__ge__() (skbio.alignment.alignmentstructure method)": [[4, "skbio.alignment.AlignmentStructure.__ge__"]], "__getitem__() (skbio.alignment.alignmentstructure method)": [[5, "skbio.alignment.AlignmentStructure.__getitem__"]], "__getstate__() (skbio.alignment.alignmentstructure method)": [[6, "skbio.alignment.AlignmentStructure.__getstate__"]], "__gt__() (skbio.alignment.alignmentstructure method)": [[7, "skbio.alignment.AlignmentStructure.__gt__"]], "__hash__() (skbio.alignment.alignmentstructure method)": [[8, "skbio.alignment.AlignmentStructure.__hash__"]], "__le__() (skbio.alignment.alignmentstructure method)": [[9, "skbio.alignment.AlignmentStructure.__le__"]], "__lt__() (skbio.alignment.alignmentstructure method)": [[10, "skbio.alignment.AlignmentStructure.__lt__"]], "__ne__() (skbio.alignment.alignmentstructure method)": [[11, "skbio.alignment.AlignmentStructure.__ne__"]], "__setstate__() (skbio.alignment.alignmentstructure method)": [[12, "skbio.alignment.AlignmentStructure.__setstate__"]], "__str__() (skbio.alignment.alignmentstructure method)": [[13, "skbio.alignment.AlignmentStructure.__str__"]], "is_zero_based() (skbio.alignment.alignmentstructure method)": [[14, "skbio.alignment.AlignmentStructure.is_zero_based"]], "set_zero_based() (skbio.alignment.alignmentstructure method)": [[15, "skbio.alignment.AlignmentStructure.set_zero_based"]], "stripedsmithwaterman (class in skbio.alignment)": [[16, "skbio.alignment.StripedSmithWaterman"]], "__call__() (skbio.alignment.stripedsmithwaterman method)": [[17, "skbio.alignment.StripedSmithWaterman.__call__"]], "__eq__() (skbio.alignment.stripedsmithwaterman method)": [[18, "skbio.alignment.StripedSmithWaterman.__eq__"]], "__ge__() (skbio.alignment.stripedsmithwaterman method)": [[19, "skbio.alignment.StripedSmithWaterman.__ge__"]], "__getstate__() (skbio.alignment.stripedsmithwaterman method)": [[20, "skbio.alignment.StripedSmithWaterman.__getstate__"]], "__gt__() (skbio.alignment.stripedsmithwaterman method)": [[21, "skbio.alignment.StripedSmithWaterman.__gt__"]], "__hash__() (skbio.alignment.stripedsmithwaterman method)": [[22, "skbio.alignment.StripedSmithWaterman.__hash__"]], "__le__() (skbio.alignment.stripedsmithwaterman method)": [[23, "skbio.alignment.StripedSmithWaterman.__le__"]], "__lt__() (skbio.alignment.stripedsmithwaterman method)": [[24, "skbio.alignment.StripedSmithWaterman.__lt__"]], "__ne__() (skbio.alignment.stripedsmithwaterman method)": [[25, "skbio.alignment.StripedSmithWaterman.__ne__"]], "__setstate__() (skbio.alignment.stripedsmithwaterman method)": [[26, "skbio.alignment.StripedSmithWaterman.__setstate__"]], "__str__() (skbio.alignment.stripedsmithwaterman method)": [[27, "skbio.alignment.StripedSmithWaterman.__str__"]], "tabularmsa (class in skbio.alignment)": [[28, "skbio.alignment.TabularMSA"]], "__bool__() (skbio.alignment.tabularmsa method)": [[29, "skbio.alignment.TabularMSA.__bool__"]], "__contains__() (skbio.alignment.tabularmsa method)": [[30, "skbio.alignment.TabularMSA.__contains__"]], "__copy__() (skbio.alignment.tabularmsa method)": [[31, "skbio.alignment.TabularMSA.__copy__"]], "__deepcopy__() (skbio.alignment.tabularmsa method)": [[32, "skbio.alignment.TabularMSA.__deepcopy__"]], "__eq__() (skbio.alignment.tabularmsa method)": [[33, "skbio.alignment.TabularMSA.__eq__"]], "__ge__() (skbio.alignment.tabularmsa method)": [[34, "skbio.alignment.TabularMSA.__ge__"]], "__getitem__() (skbio.alignment.tabularmsa method)": [[35, "skbio.alignment.TabularMSA.__getitem__"]], "__getstate__() (skbio.alignment.tabularmsa method)": [[36, "skbio.alignment.TabularMSA.__getstate__"]], "__gt__() (skbio.alignment.tabularmsa method)": [[37, "skbio.alignment.TabularMSA.__gt__"]], "__iter__() (skbio.alignment.tabularmsa method)": [[38, "skbio.alignment.TabularMSA.__iter__"]], "__le__() (skbio.alignment.tabularmsa method)": [[39, "skbio.alignment.TabularMSA.__le__"]], "__len__() (skbio.alignment.tabularmsa method)": [[40, "skbio.alignment.TabularMSA.__len__"]], "__lt__() (skbio.alignment.tabularmsa method)": [[41, "skbio.alignment.TabularMSA.__lt__"]], "__ne__() (skbio.alignment.tabularmsa method)": [[42, "skbio.alignment.TabularMSA.__ne__"]], "__reversed__() (skbio.alignment.tabularmsa method)": [[43, "skbio.alignment.TabularMSA.__reversed__"]], "__str__() (skbio.alignment.tabularmsa method)": [[44, "skbio.alignment.TabularMSA.__str__"]], "append() (skbio.alignment.tabularmsa method)": [[45, "skbio.alignment.TabularMSA.append"]], "consensus() (skbio.alignment.tabularmsa method)": [[46, "skbio.alignment.TabularMSA.consensus"]], "conservation() (skbio.alignment.tabularmsa method)": [[47, "skbio.alignment.TabularMSA.conservation"]], "extend() (skbio.alignment.tabularmsa method)": [[48, "skbio.alignment.TabularMSA.extend"]], "from_dict() (skbio.alignment.tabularmsa class method)": [[49, "skbio.alignment.TabularMSA.from_dict"]], "gap_frequencies() (skbio.alignment.tabularmsa method)": [[50, "skbio.alignment.TabularMSA.gap_frequencies"]], "has_metadata() (skbio.alignment.tabularmsa method)": [[51, "skbio.alignment.TabularMSA.has_metadata"]], "has_positional_metadata() (skbio.alignment.tabularmsa method)": [[52, "skbio.alignment.TabularMSA.has_positional_metadata"]], "iter_positions() (skbio.alignment.tabularmsa method)": [[53, "skbio.alignment.TabularMSA.iter_positions"]], "join() (skbio.alignment.tabularmsa method)": [[54, "skbio.alignment.TabularMSA.join"]], "read() (skbio.alignment.tabularmsa class method)": [[55, "skbio.alignment.TabularMSA.read"]], "reassign_index() (skbio.alignment.tabularmsa method)": [[56, "skbio.alignment.TabularMSA.reassign_index"]], "sort() (skbio.alignment.tabularmsa method)": [[57, "skbio.alignment.TabularMSA.sort"]], "to_dict() (skbio.alignment.tabularmsa method)": [[58, "skbio.alignment.TabularMSA.to_dict"]], "write() (skbio.alignment.tabularmsa method)": [[59, "skbio.alignment.TabularMSA.write"]], "global_pairwise_align() (in module skbio.alignment)": [[60, "skbio.alignment.global_pairwise_align"]], "global_pairwise_align_nucleotide() (in module skbio.alignment)": [[61, "skbio.alignment.global_pairwise_align_nucleotide"]], "global_pairwise_align_protein() (in module skbio.alignment)": [[62, "skbio.alignment.global_pairwise_align_protein"]], "local_pairwise_align() (in module skbio.alignment)": [[63, "skbio.alignment.local_pairwise_align"]], "local_pairwise_align_nucleotide() (in module skbio.alignment)": [[64, "skbio.alignment.local_pairwise_align_nucleotide"]], "local_pairwise_align_protein() (in module skbio.alignment)": [[65, "skbio.alignment.local_pairwise_align_protein"]], "local_pairwise_align_ssw() (in module skbio.alignment)": [[66, "skbio.alignment.local_pairwise_align_ssw"]], "make_identity_substitution_matrix() (in module skbio.alignment)": [[67, "skbio.alignment.make_identity_substitution_matrix"]], "skbio.diversity.alpha": [[68, "module-skbio.diversity.alpha"]], "ace() (in module skbio.diversity.alpha)": [[69, "skbio.diversity.alpha.ace"]], "berger_parker_d() (in module skbio.diversity.alpha)": [[70, "skbio.diversity.alpha.berger_parker_d"]], "brillouin_d() (in module skbio.diversity.alpha)": [[71, "skbio.diversity.alpha.brillouin_d"]], "chao1() (in module skbio.diversity.alpha)": [[72, "skbio.diversity.alpha.chao1"]], "chao1_ci() (in module skbio.diversity.alpha)": [[73, "skbio.diversity.alpha.chao1_ci"]], "dominance() (in module skbio.diversity.alpha)": [[74, "skbio.diversity.alpha.dominance"]], "doubles() (in module skbio.diversity.alpha)": [[75, "skbio.diversity.alpha.doubles"]], "enspie() (in module skbio.diversity.alpha)": [[76, "skbio.diversity.alpha.enspie"]], "esty_ci() (in module skbio.diversity.alpha)": [[77, "skbio.diversity.alpha.esty_ci"]], "faith_pd() (in module skbio.diversity.alpha)": [[78, "skbio.diversity.alpha.faith_pd"]], "fisher_alpha() (in module skbio.diversity.alpha)": [[79, "skbio.diversity.alpha.fisher_alpha"]], "gini_index() (in module skbio.diversity.alpha)": [[80, "skbio.diversity.alpha.gini_index"]], "goods_coverage() (in module skbio.diversity.alpha)": [[81, "skbio.diversity.alpha.goods_coverage"]], "heip_e() (in module skbio.diversity.alpha)": [[82, "skbio.diversity.alpha.heip_e"]], "kempton_taylor_q() (in module skbio.diversity.alpha)": [[83, "skbio.diversity.alpha.kempton_taylor_q"]], "lladser_ci() (in module skbio.diversity.alpha)": [[84, "skbio.diversity.alpha.lladser_ci"]], "lladser_pe() (in module skbio.diversity.alpha)": [[85, "skbio.diversity.alpha.lladser_pe"]], "margalef() (in module skbio.diversity.alpha)": [[86, "skbio.diversity.alpha.margalef"]], "mcintosh_d() (in module skbio.diversity.alpha)": [[87, "skbio.diversity.alpha.mcintosh_d"]], "mcintosh_e() (in module skbio.diversity.alpha)": [[88, "skbio.diversity.alpha.mcintosh_e"]], "menhinick() (in module skbio.diversity.alpha)": [[89, "skbio.diversity.alpha.menhinick"]], "michaelis_menten_fit() (in module skbio.diversity.alpha)": [[90, "skbio.diversity.alpha.michaelis_menten_fit"]], "observed_features() (in module skbio.diversity.alpha)": [[91, "skbio.diversity.alpha.observed_features"]], "observed_otus() (in module skbio.diversity.alpha)": [[92, "skbio.diversity.alpha.observed_otus"]], "osd() (in module skbio.diversity.alpha)": [[93, "skbio.diversity.alpha.osd"]], "phydiv() (in module skbio.diversity.alpha)": [[94, "skbio.diversity.alpha.phydiv"]], "pielou_e() (in module skbio.diversity.alpha)": [[95, "skbio.diversity.alpha.pielou_e"]], "robbins() (in module skbio.diversity.alpha)": [[96, "skbio.diversity.alpha.robbins"]], "shannon() (in module skbio.diversity.alpha)": [[97, "skbio.diversity.alpha.shannon"]], "simpson() (in module skbio.diversity.alpha)": [[98, "skbio.diversity.alpha.simpson"]], "simpson_e() (in module skbio.diversity.alpha)": [[99, "skbio.diversity.alpha.simpson_e"]], "singles() (in module skbio.diversity.alpha)": [[100, "skbio.diversity.alpha.singles"]], "sobs() (in module skbio.diversity.alpha)": [[101, "skbio.diversity.alpha.sobs"]], "strong() (in module skbio.diversity.alpha)": [[102, "skbio.diversity.alpha.strong"]], "alpha_diversity() (in module skbio.diversity)": [[103, "skbio.diversity.alpha_diversity"]], "skbio.diversity.beta": [[104, "module-skbio.diversity.beta"]], "unweighted_unifrac() (in module skbio.diversity.beta)": [[105, "skbio.diversity.beta.unweighted_unifrac"]], "weighted_unifrac() (in module skbio.diversity.beta)": [[106, "skbio.diversity.beta.weighted_unifrac"]], "beta_diversity() (in module skbio.diversity)": [[107, "skbio.diversity.beta_diversity"]], "block_beta_diversity() (in module skbio.diversity)": [[108, "skbio.diversity.block_beta_diversity"]], "get_alpha_diversity_metrics() (in module skbio.diversity)": [[109, "skbio.diversity.get_alpha_diversity_metrics"]], "get_beta_diversity_metrics() (in module skbio.diversity)": [[110, "skbio.diversity.get_beta_diversity_metrics"]], "partial_beta_diversity() (in module skbio.diversity)": [[111, "skbio.diversity.partial_beta_diversity"]], "argumentoverridewarning": [[112, "skbio.io.ArgumentOverrideWarning"]], "blast7formaterror": [[113, "skbio.io.BLAST7FormatError"]], "clustalformaterror": [[114, "skbio.io.ClustalFormatError"]], "emblformaterror": [[115, "skbio.io.EMBLFormatError"]], "fastaformaterror": [[116, "skbio.io.FASTAFormatError"]], "fastqformaterror": [[117, "skbio.io.FASTQFormatError"]], "fileformaterror": [[118, "skbio.io.FileFormatError"]], "formatidentificationwarning": [[119, "skbio.io.FormatIdentificationWarning"]], "gff3formaterror": [[120, "skbio.io.GFF3FormatError"]], "genbankformaterror": [[121, "skbio.io.GenBankFormatError"]], "iosourceerror": [[122, "skbio.io.IOSourceError"]], "lsmatformaterror": [[123, "skbio.io.LSMatFormatError"]], "newickformaterror": [[124, "skbio.io.NewickFormatError"]], "ordinationformaterror": [[125, "skbio.io.OrdinationFormatError"]], "phylipformaterror": [[126, "skbio.io.PhylipFormatError"]], "qseqformaterror": [[127, "skbio.io.QSeqFormatError"]], "qualformaterror": [[128, "skbio.io.QUALFormatError"]], "stockholmformaterror": [[129, "skbio.io.StockholmFormatError"]], "unrecognizedformaterror": [[130, "skbio.io.UnrecognizedFormatError"]], "skbio.io.format.binary_dm": [[131, "module-skbio.io.format.binary_dm"]], "skbio.io.format.blast6": [[132, "module-skbio.io.format.blast6"]], "skbio.io.format.blast7": [[133, "module-skbio.io.format.blast7"]], "skbio.io.format.clustal": [[134, "module-skbio.io.format.clustal"]], "skbio.io.format.embl": [[135, "module-skbio.io.format.embl"]], "skbio.io.format.fasta": [[136, "module-skbio.io.format.fasta"]], "skbio.io.format.fastq": [[137, "module-skbio.io.format.fastq"]], "skbio.io.format.genbank": [[138, "module-skbio.io.format.genbank"]], "skbio.io.format.gff3": [[139, "module-skbio.io.format.gff3"]], "skbio.io.format.lsmat": [[140, "module-skbio.io.format.lsmat"]], "skbio.io.format.newick": [[141, "module-skbio.io.format.newick"]], "skbio.io.format.ordination": [[142, "module-skbio.io.format.ordination"]], "skbio.io.format.phylip": [[143, "module-skbio.io.format.phylip"]], "skbio.io.format.qseq": [[144, "module-skbio.io.format.qseq"]], "skbio.io.format.stockholm": [[145, "module-skbio.io.format.stockholm"]], "skbio.io.format.taxdump": [[146, "module-skbio.io.format.taxdump"]], "skbio.io.registry": [[147, "module-skbio.io.registry"]], "duplicateregistrationerror": [[148, "skbio.io.registry.DuplicateRegistrationError"]], "format (class in skbio.io.registry)": [[149, "skbio.io.registry.Format"]], "__eq__() (skbio.io.registry.format method)": [[150, "skbio.io.registry.Format.__eq__"]], "__ge__() (skbio.io.registry.format method)": [[151, "skbio.io.registry.Format.__ge__"]], "__getstate__() (skbio.io.registry.format method)": [[152, "skbio.io.registry.Format.__getstate__"]], "__gt__() (skbio.io.registry.format method)": [[153, "skbio.io.registry.Format.__gt__"]], "__hash__() (skbio.io.registry.format method)": [[154, "skbio.io.registry.Format.__hash__"]], "__le__() (skbio.io.registry.format method)": [[155, "skbio.io.registry.Format.__le__"]], "__lt__() (skbio.io.registry.format method)": [[156, "skbio.io.registry.Format.__lt__"]], "__ne__() (skbio.io.registry.format method)": [[157, "skbio.io.registry.Format.__ne__"]], "__str__() (skbio.io.registry.format method)": [[158, "skbio.io.registry.Format.__str__"]], "reader() (skbio.io.registry.format method)": [[159, "skbio.io.registry.Format.reader"]], "sniffer() (skbio.io.registry.format method)": [[160, "skbio.io.registry.Format.sniffer"]], "writer() (skbio.io.registry.format method)": [[161, "skbio.io.registry.Format.writer"]], "ioregistry (class in skbio.io.registry)": [[162, "skbio.io.registry.IORegistry"]], "__eq__() (skbio.io.registry.ioregistry method)": [[163, "skbio.io.registry.IORegistry.__eq__"]], "__ge__() (skbio.io.registry.ioregistry method)": [[164, "skbio.io.registry.IORegistry.__ge__"]], "__getstate__() (skbio.io.registry.ioregistry method)": [[165, "skbio.io.registry.IORegistry.__getstate__"]], "__gt__() (skbio.io.registry.ioregistry method)": [[166, "skbio.io.registry.IORegistry.__gt__"]], "__hash__() (skbio.io.registry.ioregistry method)": [[167, "skbio.io.registry.IORegistry.__hash__"]], "__le__() (skbio.io.registry.ioregistry method)": [[168, "skbio.io.registry.IORegistry.__le__"]], "__lt__() (skbio.io.registry.ioregistry method)": [[169, "skbio.io.registry.IORegistry.__lt__"]], "__ne__() (skbio.io.registry.ioregistry method)": [[170, "skbio.io.registry.IORegistry.__ne__"]], "__str__() (skbio.io.registry.ioregistry method)": [[171, "skbio.io.registry.IORegistry.__str__"]], "add_format() (skbio.io.registry.ioregistry method)": [[172, "skbio.io.registry.IORegistry.add_format"]], "create_format() (skbio.io.registry.ioregistry method)": [[173, "skbio.io.registry.IORegistry.create_format"]], "get_reader() (skbio.io.registry.ioregistry method)": [[174, "skbio.io.registry.IORegistry.get_reader"]], "get_sniffer() (skbio.io.registry.ioregistry method)": [[175, "skbio.io.registry.IORegistry.get_sniffer"]], "get_writer() (skbio.io.registry.ioregistry method)": [[176, "skbio.io.registry.IORegistry.get_writer"]], "list_read_formats() (skbio.io.registry.ioregistry method)": [[177, "skbio.io.registry.IORegistry.list_read_formats"]], "list_write_formats() (skbio.io.registry.ioregistry method)": [[178, "skbio.io.registry.IORegistry.list_write_formats"]], "monkey_patch() (skbio.io.registry.ioregistry method)": [[179, "skbio.io.registry.IORegistry.monkey_patch"]], "read() (skbio.io.registry.ioregistry method)": [[180, "skbio.io.registry.IORegistry.read"]], "sniff() (skbio.io.registry.ioregistry method)": [[181, "skbio.io.registry.IORegistry.sniff"]], "write() (skbio.io.registry.ioregistry method)": [[182, "skbio.io.registry.IORegistry.write"]], "invalidregistrationerror": [[183, "skbio.io.registry.InvalidRegistrationError"]], "create_format() (in module skbio.io.registry)": [[184, "skbio.io.registry.create_format"]], "read() (in module skbio.io.registry)": [[185, "skbio.io.registry.read"]], "sniff() (in module skbio.io.registry)": [[186, "skbio.io.registry.sniff"]], "write() (in module skbio.io.registry)": [[187, "skbio.io.registry.write"]], "skbio.io.util": [[188, "module-skbio.io.util"]], "open() (in module skbio.io.util)": [[189, "skbio.io.util.open"]], "open_file() (in module skbio.io.util)": [[190, "skbio.io.util.open_file"]], "open_files() (in module skbio.io.util)": [[191, "skbio.io.util.open_files"]], "interval (class in skbio.metadata)": [[192, "skbio.metadata.Interval"]], "__eq__() (skbio.metadata.interval method)": [[193, "skbio.metadata.Interval.__eq__"]], "__ge__() (skbio.metadata.interval method)": [[194, "skbio.metadata.Interval.__ge__"]], "__getstate__() (skbio.metadata.interval method)": [[195, "skbio.metadata.Interval.__getstate__"]], "__gt__() (skbio.metadata.interval method)": [[196, "skbio.metadata.Interval.__gt__"]], "__le__() (skbio.metadata.interval method)": [[197, "skbio.metadata.Interval.__le__"]], "__lt__() (skbio.metadata.interval method)": [[198, "skbio.metadata.Interval.__lt__"]], "__ne__() (skbio.metadata.interval method)": [[199, "skbio.metadata.Interval.__ne__"]], "__str__() (skbio.metadata.interval method)": [[200, "skbio.metadata.Interval.__str__"]], "drop() (skbio.metadata.interval method)": [[201, "skbio.metadata.Interval.drop"]], "intervalmetadata (class in skbio.metadata)": [[202, "skbio.metadata.IntervalMetadata"]], "__copy__() (skbio.metadata.intervalmetadata method)": [[203, "skbio.metadata.IntervalMetadata.__copy__"]], "__deepcopy__() (skbio.metadata.intervalmetadata method)": [[204, "skbio.metadata.IntervalMetadata.__deepcopy__"]], "__eq__() (skbio.metadata.intervalmetadata method)": [[205, "skbio.metadata.IntervalMetadata.__eq__"]], "__ge__() (skbio.metadata.intervalmetadata method)": [[206, "skbio.metadata.IntervalMetadata.__ge__"]], "__getstate__() (skbio.metadata.intervalmetadata method)": [[207, "skbio.metadata.IntervalMetadata.__getstate__"]], "__gt__() (skbio.metadata.intervalmetadata method)": [[208, "skbio.metadata.IntervalMetadata.__gt__"]], "__le__() (skbio.metadata.intervalmetadata method)": [[209, "skbio.metadata.IntervalMetadata.__le__"]], "__lt__() (skbio.metadata.intervalmetadata method)": [[210, "skbio.metadata.IntervalMetadata.__lt__"]], "__ne__() (skbio.metadata.intervalmetadata method)": [[211, "skbio.metadata.IntervalMetadata.__ne__"]], "__str__() (skbio.metadata.intervalmetadata method)": [[212, "skbio.metadata.IntervalMetadata.__str__"]], "add() (skbio.metadata.intervalmetadata method)": [[213, "skbio.metadata.IntervalMetadata.add"]], "concat() (skbio.metadata.intervalmetadata class method)": [[214, "skbio.metadata.IntervalMetadata.concat"]], "drop() (skbio.metadata.intervalmetadata method)": [[215, "skbio.metadata.IntervalMetadata.drop"]], "merge() (skbio.metadata.intervalmetadata method)": [[216, "skbio.metadata.IntervalMetadata.merge"]], "query() (skbio.metadata.intervalmetadata method)": [[217, "skbio.metadata.IntervalMetadata.query"]], "read() (skbio.metadata.intervalmetadata class method)": [[218, "skbio.metadata.IntervalMetadata.read"]], "sort() (skbio.metadata.intervalmetadata method)": [[219, "skbio.metadata.IntervalMetadata.sort"]], "write() (skbio.metadata.intervalmetadata method)": [[220, "skbio.metadata.IntervalMetadata.write"]], "dna (class in skbio.sequence)": [[221, "skbio.sequence.DNA"]], "__bool__() (skbio.sequence.dna method)": [[222, "skbio.sequence.DNA.__bool__"]], "__contains__() (skbio.sequence.dna method)": [[223, "skbio.sequence.DNA.__contains__"]], "__copy__() (skbio.sequence.dna method)": [[224, "skbio.sequence.DNA.__copy__"]], "__deepcopy__() (skbio.sequence.dna method)": [[225, "skbio.sequence.DNA.__deepcopy__"]], "__eq__() (skbio.sequence.dna method)": [[226, "skbio.sequence.DNA.__eq__"]], "__ge__() (skbio.sequence.dna method)": [[227, "skbio.sequence.DNA.__ge__"]], "__getitem__() (skbio.sequence.dna method)": [[228, "skbio.sequence.DNA.__getitem__"]], "__getstate__() (skbio.sequence.dna method)": [[229, "skbio.sequence.DNA.__getstate__"]], "__gt__() (skbio.sequence.dna method)": [[230, "skbio.sequence.DNA.__gt__"]], "__iter__() (skbio.sequence.dna method)": [[231, "skbio.sequence.DNA.__iter__"]], "__le__() (skbio.sequence.dna method)": [[232, "skbio.sequence.DNA.__le__"]], "__len__() (skbio.sequence.dna method)": [[233, "skbio.sequence.DNA.__len__"]], "__lt__() (skbio.sequence.dna method)": [[234, "skbio.sequence.DNA.__lt__"]], "__ne__() (skbio.sequence.dna method)": [[235, "skbio.sequence.DNA.__ne__"]], "__reversed__() (skbio.sequence.dna method)": [[236, "skbio.sequence.DNA.__reversed__"]], "__str__() (skbio.sequence.dna method)": [[237, "skbio.sequence.DNA.__str__"]], "complement() (skbio.sequence.dna method)": [[238, "skbio.sequence.DNA.complement"]], "concat() (skbio.sequence.dna class method)": [[239, "skbio.sequence.DNA.concat"]], "count() (skbio.sequence.dna method)": [[240, "skbio.sequence.DNA.count"]], "definites() (skbio.sequence.dna method)": [[241, "skbio.sequence.DNA.definites"]], "degap() (skbio.sequence.dna method)": [[242, "skbio.sequence.DNA.degap"]], "degenerates() (skbio.sequence.dna method)": [[243, "skbio.sequence.DNA.degenerates"]], "distance() (skbio.sequence.dna method)": [[244, "skbio.sequence.DNA.distance"]], "expand_degenerates() (skbio.sequence.dna method)": [[245, "skbio.sequence.DNA.expand_degenerates"]], "find_motifs() (skbio.sequence.dna method)": [[246, "skbio.sequence.DNA.find_motifs"]], "find_with_regex() (skbio.sequence.dna method)": [[247, "skbio.sequence.DNA.find_with_regex"]], "frequencies() (skbio.sequence.dna method)": [[248, "skbio.sequence.DNA.frequencies"]], "gaps() (skbio.sequence.dna method)": [[249, "skbio.sequence.DNA.gaps"]], "gc_content() (skbio.sequence.dna method)": [[250, "skbio.sequence.DNA.gc_content"]], "gc_frequency() (skbio.sequence.dna method)": [[251, "skbio.sequence.DNA.gc_frequency"]], "has_definites() (skbio.sequence.dna method)": [[252, "skbio.sequence.DNA.has_definites"]], "has_degenerates() (skbio.sequence.dna method)": [[253, "skbio.sequence.DNA.has_degenerates"]], "has_gaps() (skbio.sequence.dna method)": [[254, "skbio.sequence.DNA.has_gaps"]], "has_interval_metadata() (skbio.sequence.dna method)": [[255, "skbio.sequence.DNA.has_interval_metadata"]], "has_metadata() (skbio.sequence.dna method)": [[256, "skbio.sequence.DNA.has_metadata"]], "has_nondegenerates() (skbio.sequence.dna method)": [[257, "skbio.sequence.DNA.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.dna method)": [[258, "skbio.sequence.DNA.has_positional_metadata"]], "index() (skbio.sequence.dna method)": [[259, "skbio.sequence.DNA.index"]], "is_reverse_complement() (skbio.sequence.dna method)": [[260, "skbio.sequence.DNA.is_reverse_complement"]], "iter_contiguous() (skbio.sequence.dna method)": [[261, "skbio.sequence.DNA.iter_contiguous"]], "iter_kmers() (skbio.sequence.dna method)": [[262, "skbio.sequence.DNA.iter_kmers"]], "kmer_frequencies() (skbio.sequence.dna method)": [[263, "skbio.sequence.DNA.kmer_frequencies"]], "lowercase() (skbio.sequence.dna method)": [[264, "skbio.sequence.DNA.lowercase"]], "match_frequency() (skbio.sequence.dna method)": [[265, "skbio.sequence.DNA.match_frequency"]], "matches() (skbio.sequence.dna method)": [[266, "skbio.sequence.DNA.matches"]], "mismatch_frequency() (skbio.sequence.dna method)": [[267, "skbio.sequence.DNA.mismatch_frequency"]], "mismatches() (skbio.sequence.dna method)": [[268, "skbio.sequence.DNA.mismatches"]], "nondegenerates() (skbio.sequence.dna method)": [[269, "skbio.sequence.DNA.nondegenerates"]], "read() (skbio.sequence.dna class method)": [[270, "skbio.sequence.DNA.read"]], "replace() (skbio.sequence.dna method)": [[271, "skbio.sequence.DNA.replace"]], "reverse_complement() (skbio.sequence.dna method)": [[272, "skbio.sequence.DNA.reverse_complement"]], "to_regex() (skbio.sequence.dna method)": [[273, "skbio.sequence.DNA.to_regex"]], "transcribe() (skbio.sequence.dna method)": [[274, "skbio.sequence.DNA.transcribe"]], "translate() (skbio.sequence.dna method)": [[275, "skbio.sequence.DNA.translate"]], "translate_six_frames() (skbio.sequence.dna method)": [[276, "skbio.sequence.DNA.translate_six_frames"]], "write() (skbio.sequence.dna method)": [[277, "skbio.sequence.DNA.write"]], "geneticcode (class in skbio.sequence)": [[278, "skbio.sequence.GeneticCode"]], "__eq__() (skbio.sequence.geneticcode method)": [[279, "skbio.sequence.GeneticCode.__eq__"]], "__ge__() (skbio.sequence.geneticcode method)": [[280, "skbio.sequence.GeneticCode.__ge__"]], "__getstate__() (skbio.sequence.geneticcode method)": [[281, "skbio.sequence.GeneticCode.__getstate__"]], "__gt__() (skbio.sequence.geneticcode method)": [[282, "skbio.sequence.GeneticCode.__gt__"]], "__le__() (skbio.sequence.geneticcode method)": [[283, "skbio.sequence.GeneticCode.__le__"]], "__lt__() (skbio.sequence.geneticcode method)": [[284, "skbio.sequence.GeneticCode.__lt__"]], "__ne__() (skbio.sequence.geneticcode method)": [[285, "skbio.sequence.GeneticCode.__ne__"]], "__str__() (skbio.sequence.geneticcode method)": [[286, "skbio.sequence.GeneticCode.__str__"]], "from_ncbi() (skbio.sequence.geneticcode class method)": [[287, "skbio.sequence.GeneticCode.from_ncbi"]], "translate() (skbio.sequence.geneticcode method)": [[288, "skbio.sequence.GeneticCode.translate"]], "translate_six_frames() (skbio.sequence.geneticcode method)": [[289, "skbio.sequence.GeneticCode.translate_six_frames"]], "grammaredsequence (class in skbio.sequence)": [[290, "skbio.sequence.GrammaredSequence"]], "__bool__() (skbio.sequence.grammaredsequence method)": [[291, "skbio.sequence.GrammaredSequence.__bool__"]], "__contains__() (skbio.sequence.grammaredsequence method)": [[292, "skbio.sequence.GrammaredSequence.__contains__"]], "__copy__() (skbio.sequence.grammaredsequence method)": [[293, "skbio.sequence.GrammaredSequence.__copy__"]], "__deepcopy__() (skbio.sequence.grammaredsequence method)": [[294, "skbio.sequence.GrammaredSequence.__deepcopy__"]], "__eq__() (skbio.sequence.grammaredsequence method)": [[295, "skbio.sequence.GrammaredSequence.__eq__"]], "__ge__() (skbio.sequence.grammaredsequence method)": [[296, "skbio.sequence.GrammaredSequence.__ge__"]], "__getitem__() (skbio.sequence.grammaredsequence method)": [[297, "skbio.sequence.GrammaredSequence.__getitem__"]], "__getstate__() (skbio.sequence.grammaredsequence method)": [[298, "skbio.sequence.GrammaredSequence.__getstate__"]], "__gt__() (skbio.sequence.grammaredsequence method)": [[299, "skbio.sequence.GrammaredSequence.__gt__"]], "__iter__() (skbio.sequence.grammaredsequence method)": [[300, "skbio.sequence.GrammaredSequence.__iter__"]], "__le__() (skbio.sequence.grammaredsequence method)": [[301, "skbio.sequence.GrammaredSequence.__le__"]], "__len__() (skbio.sequence.grammaredsequence method)": [[302, "skbio.sequence.GrammaredSequence.__len__"]], "__lt__() (skbio.sequence.grammaredsequence method)": [[303, "skbio.sequence.GrammaredSequence.__lt__"]], "__ne__() (skbio.sequence.grammaredsequence method)": [[304, "skbio.sequence.GrammaredSequence.__ne__"]], "__reversed__() (skbio.sequence.grammaredsequence method)": [[305, "skbio.sequence.GrammaredSequence.__reversed__"]], "__str__() (skbio.sequence.grammaredsequence method)": [[306, "skbio.sequence.GrammaredSequence.__str__"]], "concat() (skbio.sequence.grammaredsequence class method)": [[307, "skbio.sequence.GrammaredSequence.concat"]], "count() (skbio.sequence.grammaredsequence method)": [[308, "skbio.sequence.GrammaredSequence.count"]], "definites() (skbio.sequence.grammaredsequence method)": [[309, "skbio.sequence.GrammaredSequence.definites"]], "degap() (skbio.sequence.grammaredsequence method)": [[310, "skbio.sequence.GrammaredSequence.degap"]], "degenerates() (skbio.sequence.grammaredsequence method)": [[311, "skbio.sequence.GrammaredSequence.degenerates"]], "distance() (skbio.sequence.grammaredsequence method)": [[312, "skbio.sequence.GrammaredSequence.distance"]], "expand_degenerates() (skbio.sequence.grammaredsequence method)": [[313, "skbio.sequence.GrammaredSequence.expand_degenerates"]], "find_motifs() (skbio.sequence.grammaredsequence method)": [[314, "skbio.sequence.GrammaredSequence.find_motifs"]], "find_with_regex() (skbio.sequence.grammaredsequence method)": [[315, "skbio.sequence.GrammaredSequence.find_with_regex"]], "frequencies() (skbio.sequence.grammaredsequence method)": [[316, "skbio.sequence.GrammaredSequence.frequencies"]], "gaps() (skbio.sequence.grammaredsequence method)": [[317, "skbio.sequence.GrammaredSequence.gaps"]], "has_definites() (skbio.sequence.grammaredsequence method)": [[318, "skbio.sequence.GrammaredSequence.has_definites"]], "has_degenerates() (skbio.sequence.grammaredsequence method)": [[319, "skbio.sequence.GrammaredSequence.has_degenerates"]], "has_gaps() (skbio.sequence.grammaredsequence method)": [[320, "skbio.sequence.GrammaredSequence.has_gaps"]], "has_interval_metadata() (skbio.sequence.grammaredsequence method)": [[321, "skbio.sequence.GrammaredSequence.has_interval_metadata"]], "has_metadata() (skbio.sequence.grammaredsequence method)": [[322, "skbio.sequence.GrammaredSequence.has_metadata"]], "has_nondegenerates() (skbio.sequence.grammaredsequence method)": [[323, "skbio.sequence.GrammaredSequence.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.grammaredsequence method)": [[324, "skbio.sequence.GrammaredSequence.has_positional_metadata"]], "index() (skbio.sequence.grammaredsequence method)": [[325, "skbio.sequence.GrammaredSequence.index"]], "iter_contiguous() (skbio.sequence.grammaredsequence method)": [[326, "skbio.sequence.GrammaredSequence.iter_contiguous"]], "iter_kmers() (skbio.sequence.grammaredsequence method)": [[327, "skbio.sequence.GrammaredSequence.iter_kmers"]], "kmer_frequencies() (skbio.sequence.grammaredsequence method)": [[328, "skbio.sequence.GrammaredSequence.kmer_frequencies"]], "lowercase() (skbio.sequence.grammaredsequence method)": [[329, "skbio.sequence.GrammaredSequence.lowercase"]], "match_frequency() (skbio.sequence.grammaredsequence method)": [[330, "skbio.sequence.GrammaredSequence.match_frequency"]], "matches() (skbio.sequence.grammaredsequence method)": [[331, "skbio.sequence.GrammaredSequence.matches"]], "mismatch_frequency() (skbio.sequence.grammaredsequence method)": [[332, "skbio.sequence.GrammaredSequence.mismatch_frequency"]], "mismatches() (skbio.sequence.grammaredsequence method)": [[333, "skbio.sequence.GrammaredSequence.mismatches"]], "nondegenerates() (skbio.sequence.grammaredsequence method)": [[334, "skbio.sequence.GrammaredSequence.nondegenerates"]], "read() (skbio.sequence.grammaredsequence class method)": [[335, "skbio.sequence.GrammaredSequence.read"]], "replace() (skbio.sequence.grammaredsequence method)": [[336, "skbio.sequence.GrammaredSequence.replace"]], "to_regex() (skbio.sequence.grammaredsequence method)": [[337, "skbio.sequence.GrammaredSequence.to_regex"]], "write() (skbio.sequence.grammaredsequence method)": [[338, "skbio.sequence.GrammaredSequence.write"]], "protein (class in skbio.sequence)": [[339, "skbio.sequence.Protein"]], "__bool__() (skbio.sequence.protein method)": [[340, "skbio.sequence.Protein.__bool__"]], "__contains__() (skbio.sequence.protein method)": [[341, "skbio.sequence.Protein.__contains__"]], "__copy__() (skbio.sequence.protein method)": [[342, "skbio.sequence.Protein.__copy__"]], "__deepcopy__() (skbio.sequence.protein method)": [[343, "skbio.sequence.Protein.__deepcopy__"]], "__eq__() (skbio.sequence.protein method)": [[344, "skbio.sequence.Protein.__eq__"]], "__ge__() (skbio.sequence.protein method)": [[345, "skbio.sequence.Protein.__ge__"]], "__getitem__() (skbio.sequence.protein method)": [[346, "skbio.sequence.Protein.__getitem__"]], "__getstate__() (skbio.sequence.protein method)": [[347, "skbio.sequence.Protein.__getstate__"]], "__gt__() (skbio.sequence.protein method)": [[348, "skbio.sequence.Protein.__gt__"]], "__iter__() (skbio.sequence.protein method)": [[349, "skbio.sequence.Protein.__iter__"]], "__le__() (skbio.sequence.protein method)": [[350, "skbio.sequence.Protein.__le__"]], "__len__() (skbio.sequence.protein method)": [[351, "skbio.sequence.Protein.__len__"]], "__lt__() (skbio.sequence.protein method)": [[352, "skbio.sequence.Protein.__lt__"]], "__ne__() (skbio.sequence.protein method)": [[353, "skbio.sequence.Protein.__ne__"]], "__reversed__() (skbio.sequence.protein method)": [[354, "skbio.sequence.Protein.__reversed__"]], "__str__() (skbio.sequence.protein method)": [[355, "skbio.sequence.Protein.__str__"]], "concat() (skbio.sequence.protein class method)": [[356, "skbio.sequence.Protein.concat"]], "count() (skbio.sequence.protein method)": [[357, "skbio.sequence.Protein.count"]], "definites() (skbio.sequence.protein method)": [[358, "skbio.sequence.Protein.definites"]], "degap() (skbio.sequence.protein method)": [[359, "skbio.sequence.Protein.degap"]], "degenerates() (skbio.sequence.protein method)": [[360, "skbio.sequence.Protein.degenerates"]], "distance() (skbio.sequence.protein method)": [[361, "skbio.sequence.Protein.distance"]], "expand_degenerates() (skbio.sequence.protein method)": [[362, "skbio.sequence.Protein.expand_degenerates"]], "find_motifs() (skbio.sequence.protein method)": [[363, "skbio.sequence.Protein.find_motifs"]], "find_with_regex() (skbio.sequence.protein method)": [[364, "skbio.sequence.Protein.find_with_regex"]], "frequencies() (skbio.sequence.protein method)": [[365, "skbio.sequence.Protein.frequencies"]], "gaps() (skbio.sequence.protein method)": [[366, "skbio.sequence.Protein.gaps"]], "has_definites() (skbio.sequence.protein method)": [[367, "skbio.sequence.Protein.has_definites"]], "has_degenerates() (skbio.sequence.protein method)": [[368, "skbio.sequence.Protein.has_degenerates"]], "has_gaps() (skbio.sequence.protein method)": [[369, "skbio.sequence.Protein.has_gaps"]], "has_interval_metadata() (skbio.sequence.protein method)": [[370, "skbio.sequence.Protein.has_interval_metadata"]], "has_metadata() (skbio.sequence.protein method)": [[371, "skbio.sequence.Protein.has_metadata"]], "has_nondegenerates() (skbio.sequence.protein method)": [[372, "skbio.sequence.Protein.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.protein method)": [[373, "skbio.sequence.Protein.has_positional_metadata"]], "has_stops() (skbio.sequence.protein method)": [[374, "skbio.sequence.Protein.has_stops"]], "index() (skbio.sequence.protein method)": [[375, "skbio.sequence.Protein.index"]], "iter_contiguous() (skbio.sequence.protein method)": [[376, "skbio.sequence.Protein.iter_contiguous"]], "iter_kmers() (skbio.sequence.protein method)": [[377, "skbio.sequence.Protein.iter_kmers"]], "kmer_frequencies() (skbio.sequence.protein method)": [[378, "skbio.sequence.Protein.kmer_frequencies"]], "lowercase() (skbio.sequence.protein method)": [[379, "skbio.sequence.Protein.lowercase"]], "match_frequency() (skbio.sequence.protein method)": [[380, "skbio.sequence.Protein.match_frequency"]], "matches() (skbio.sequence.protein method)": [[381, "skbio.sequence.Protein.matches"]], "mismatch_frequency() (skbio.sequence.protein method)": [[382, "skbio.sequence.Protein.mismatch_frequency"]], "mismatches() (skbio.sequence.protein method)": [[383, "skbio.sequence.Protein.mismatches"]], "nondegenerates() (skbio.sequence.protein method)": [[384, "skbio.sequence.Protein.nondegenerates"]], "read() (skbio.sequence.protein class method)": [[385, "skbio.sequence.Protein.read"]], "replace() (skbio.sequence.protein method)": [[386, "skbio.sequence.Protein.replace"]], "stops() (skbio.sequence.protein method)": [[387, "skbio.sequence.Protein.stops"]], "to_regex() (skbio.sequence.protein method)": [[388, "skbio.sequence.Protein.to_regex"]], "write() (skbio.sequence.protein method)": [[389, "skbio.sequence.Protein.write"]], "rna (class in skbio.sequence)": [[390, "skbio.sequence.RNA"]], "__bool__() (skbio.sequence.rna method)": [[391, "skbio.sequence.RNA.__bool__"]], "__contains__() (skbio.sequence.rna method)": [[392, "skbio.sequence.RNA.__contains__"]], "__copy__() (skbio.sequence.rna method)": [[393, "skbio.sequence.RNA.__copy__"]], "__deepcopy__() (skbio.sequence.rna method)": [[394, "skbio.sequence.RNA.__deepcopy__"]], "__eq__() (skbio.sequence.rna method)": [[395, "skbio.sequence.RNA.__eq__"]], "__ge__() (skbio.sequence.rna method)": [[396, "skbio.sequence.RNA.__ge__"]], "__getitem__() (skbio.sequence.rna method)": [[397, "skbio.sequence.RNA.__getitem__"]], "__getstate__() (skbio.sequence.rna method)": [[398, "skbio.sequence.RNA.__getstate__"]], "__gt__() (skbio.sequence.rna method)": [[399, "skbio.sequence.RNA.__gt__"]], "__iter__() (skbio.sequence.rna method)": [[400, "skbio.sequence.RNA.__iter__"]], "__le__() (skbio.sequence.rna method)": [[401, "skbio.sequence.RNA.__le__"]], "__len__() (skbio.sequence.rna method)": [[402, "skbio.sequence.RNA.__len__"]], "__lt__() (skbio.sequence.rna method)": [[403, "skbio.sequence.RNA.__lt__"]], "__ne__() (skbio.sequence.rna method)": [[404, "skbio.sequence.RNA.__ne__"]], "__reversed__() (skbio.sequence.rna method)": [[405, "skbio.sequence.RNA.__reversed__"]], "__str__() (skbio.sequence.rna method)": [[406, "skbio.sequence.RNA.__str__"]], "complement() (skbio.sequence.rna method)": [[407, "skbio.sequence.RNA.complement"]], "concat() (skbio.sequence.rna class method)": [[408, "skbio.sequence.RNA.concat"]], "count() (skbio.sequence.rna method)": [[409, "skbio.sequence.RNA.count"]], "definites() (skbio.sequence.rna method)": [[410, "skbio.sequence.RNA.definites"]], "degap() (skbio.sequence.rna method)": [[411, "skbio.sequence.RNA.degap"]], "degenerates() (skbio.sequence.rna method)": [[412, "skbio.sequence.RNA.degenerates"]], "distance() (skbio.sequence.rna method)": [[413, "skbio.sequence.RNA.distance"]], "expand_degenerates() (skbio.sequence.rna method)": [[414, "skbio.sequence.RNA.expand_degenerates"]], "find_motifs() (skbio.sequence.rna method)": [[415, "skbio.sequence.RNA.find_motifs"]], "find_with_regex() (skbio.sequence.rna method)": [[416, "skbio.sequence.RNA.find_with_regex"]], "frequencies() (skbio.sequence.rna method)": [[417, "skbio.sequence.RNA.frequencies"]], "gaps() (skbio.sequence.rna method)": [[418, "skbio.sequence.RNA.gaps"]], "gc_content() (skbio.sequence.rna method)": [[419, "skbio.sequence.RNA.gc_content"]], "gc_frequency() (skbio.sequence.rna method)": [[420, "skbio.sequence.RNA.gc_frequency"]], "has_definites() (skbio.sequence.rna method)": [[421, "skbio.sequence.RNA.has_definites"]], "has_degenerates() (skbio.sequence.rna method)": [[422, "skbio.sequence.RNA.has_degenerates"]], "has_gaps() (skbio.sequence.rna method)": [[423, "skbio.sequence.RNA.has_gaps"]], "has_interval_metadata() (skbio.sequence.rna method)": [[424, "skbio.sequence.RNA.has_interval_metadata"]], "has_metadata() (skbio.sequence.rna method)": [[425, "skbio.sequence.RNA.has_metadata"]], "has_nondegenerates() (skbio.sequence.rna method)": [[426, "skbio.sequence.RNA.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.rna method)": [[427, "skbio.sequence.RNA.has_positional_metadata"]], "index() (skbio.sequence.rna method)": [[428, "skbio.sequence.RNA.index"]], "is_reverse_complement() (skbio.sequence.rna method)": [[429, "skbio.sequence.RNA.is_reverse_complement"]], "iter_contiguous() (skbio.sequence.rna method)": [[430, "skbio.sequence.RNA.iter_contiguous"]], "iter_kmers() (skbio.sequence.rna method)": [[431, "skbio.sequence.RNA.iter_kmers"]], "kmer_frequencies() (skbio.sequence.rna method)": [[432, "skbio.sequence.RNA.kmer_frequencies"]], "lowercase() (skbio.sequence.rna method)": [[433, "skbio.sequence.RNA.lowercase"]], "match_frequency() (skbio.sequence.rna method)": [[434, "skbio.sequence.RNA.match_frequency"]], "matches() (skbio.sequence.rna method)": [[435, "skbio.sequence.RNA.matches"]], "mismatch_frequency() (skbio.sequence.rna method)": [[436, "skbio.sequence.RNA.mismatch_frequency"]], "mismatches() (skbio.sequence.rna method)": [[437, "skbio.sequence.RNA.mismatches"]], "nondegenerates() (skbio.sequence.rna method)": [[438, "skbio.sequence.RNA.nondegenerates"]], "read() (skbio.sequence.rna class method)": [[439, "skbio.sequence.RNA.read"]], "replace() (skbio.sequence.rna method)": [[440, "skbio.sequence.RNA.replace"]], "reverse_complement() (skbio.sequence.rna method)": [[441, "skbio.sequence.RNA.reverse_complement"]], "reverse_transcribe() (skbio.sequence.rna method)": [[442, "skbio.sequence.RNA.reverse_transcribe"]], "to_regex() (skbio.sequence.rna method)": [[443, "skbio.sequence.RNA.to_regex"]], "translate() (skbio.sequence.rna method)": [[444, "skbio.sequence.RNA.translate"]], "translate_six_frames() (skbio.sequence.rna method)": [[445, "skbio.sequence.RNA.translate_six_frames"]], "write() (skbio.sequence.rna method)": [[446, "skbio.sequence.RNA.write"]], "sequence (class in skbio.sequence)": [[447, "skbio.sequence.Sequence"]], "__bool__() (skbio.sequence.sequence method)": [[448, "skbio.sequence.Sequence.__bool__"]], "__contains__() (skbio.sequence.sequence method)": [[449, "skbio.sequence.Sequence.__contains__"]], "__copy__() (skbio.sequence.sequence method)": [[450, "skbio.sequence.Sequence.__copy__"]], "__deepcopy__() (skbio.sequence.sequence method)": [[451, "skbio.sequence.Sequence.__deepcopy__"]], "__eq__() (skbio.sequence.sequence method)": [[452, "skbio.sequence.Sequence.__eq__"]], "__ge__() (skbio.sequence.sequence method)": [[453, "skbio.sequence.Sequence.__ge__"]], "__getitem__() (skbio.sequence.sequence method)": [[454, "skbio.sequence.Sequence.__getitem__"]], "__getstate__() (skbio.sequence.sequence method)": [[455, "skbio.sequence.Sequence.__getstate__"]], "__gt__() (skbio.sequence.sequence method)": [[456, "skbio.sequence.Sequence.__gt__"]], "__iter__() (skbio.sequence.sequence method)": [[457, "skbio.sequence.Sequence.__iter__"]], "__le__() (skbio.sequence.sequence method)": [[458, "skbio.sequence.Sequence.__le__"]], "__len__() (skbio.sequence.sequence method)": [[459, "skbio.sequence.Sequence.__len__"]], "__lt__() (skbio.sequence.sequence method)": [[460, "skbio.sequence.Sequence.__lt__"]], "__ne__() (skbio.sequence.sequence method)": [[461, "skbio.sequence.Sequence.__ne__"]], "__reversed__() (skbio.sequence.sequence method)": [[462, "skbio.sequence.Sequence.__reversed__"]], "__str__() (skbio.sequence.sequence method)": [[463, "skbio.sequence.Sequence.__str__"]], "concat() (skbio.sequence.sequence class method)": [[464, "skbio.sequence.Sequence.concat"]], "count() (skbio.sequence.sequence method)": [[465, "skbio.sequence.Sequence.count"]], "distance() (skbio.sequence.sequence method)": [[466, "skbio.sequence.Sequence.distance"]], "find_with_regex() (skbio.sequence.sequence method)": [[467, "skbio.sequence.Sequence.find_with_regex"]], "frequencies() (skbio.sequence.sequence method)": [[468, "skbio.sequence.Sequence.frequencies"]], "has_interval_metadata() (skbio.sequence.sequence method)": [[469, "skbio.sequence.Sequence.has_interval_metadata"]], "has_metadata() (skbio.sequence.sequence method)": [[470, "skbio.sequence.Sequence.has_metadata"]], "has_positional_metadata() (skbio.sequence.sequence method)": [[471, "skbio.sequence.Sequence.has_positional_metadata"]], "index() (skbio.sequence.sequence method)": [[472, "skbio.sequence.Sequence.index"]], "iter_contiguous() (skbio.sequence.sequence method)": [[473, "skbio.sequence.Sequence.iter_contiguous"]], "iter_kmers() (skbio.sequence.sequence method)": [[474, "skbio.sequence.Sequence.iter_kmers"]], "kmer_frequencies() (skbio.sequence.sequence method)": [[475, "skbio.sequence.Sequence.kmer_frequencies"]], "lowercase() (skbio.sequence.sequence method)": [[476, "skbio.sequence.Sequence.lowercase"]], "match_frequency() (skbio.sequence.sequence method)": [[477, "skbio.sequence.Sequence.match_frequency"]], "matches() (skbio.sequence.sequence method)": [[478, "skbio.sequence.Sequence.matches"]], "mismatch_frequency() (skbio.sequence.sequence method)": [[479, "skbio.sequence.Sequence.mismatch_frequency"]], "mismatches() (skbio.sequence.sequence method)": [[480, "skbio.sequence.Sequence.mismatches"]], "read() (skbio.sequence.sequence class method)": [[481, "skbio.sequence.Sequence.read"]], "replace() (skbio.sequence.sequence method)": [[482, "skbio.sequence.Sequence.replace"]], "write() (skbio.sequence.sequence method)": [[483, "skbio.sequence.Sequence.write"]], "substitutionmatrix (class in skbio.sequence)": [[484, "skbio.sequence.SubstitutionMatrix"]], "__contains__() (skbio.sequence.substitutionmatrix method)": [[485, "skbio.sequence.SubstitutionMatrix.__contains__"]], "__eq__() (skbio.sequence.substitutionmatrix method)": [[486, "skbio.sequence.SubstitutionMatrix.__eq__"]], "__ge__() (skbio.sequence.substitutionmatrix method)": [[487, "skbio.sequence.SubstitutionMatrix.__ge__"]], "__getitem__() (skbio.sequence.substitutionmatrix method)": [[488, "skbio.sequence.SubstitutionMatrix.__getitem__"]], "__getstate__() (skbio.sequence.substitutionmatrix method)": [[489, "skbio.sequence.SubstitutionMatrix.__getstate__"]], "__gt__() (skbio.sequence.substitutionmatrix method)": [[490, "skbio.sequence.SubstitutionMatrix.__gt__"]], "__le__() (skbio.sequence.substitutionmatrix method)": [[491, "skbio.sequence.SubstitutionMatrix.__le__"]], "__lt__() (skbio.sequence.substitutionmatrix method)": [[492, "skbio.sequence.SubstitutionMatrix.__lt__"]], "__ne__() (skbio.sequence.substitutionmatrix method)": [[493, "skbio.sequence.SubstitutionMatrix.__ne__"]], "__str__() (skbio.sequence.substitutionmatrix method)": [[494, "skbio.sequence.SubstitutionMatrix.__str__"]], "between() (skbio.sequence.substitutionmatrix method)": [[495, "skbio.sequence.SubstitutionMatrix.between"]], "by_name() (skbio.sequence.substitutionmatrix class method)": [[496, "skbio.sequence.SubstitutionMatrix.by_name"]], "copy() (skbio.sequence.substitutionmatrix method)": [[497, "skbio.sequence.SubstitutionMatrix.copy"]], "filter() (skbio.sequence.substitutionmatrix method)": [[498, "skbio.sequence.SubstitutionMatrix.filter"]], "from_dict() (skbio.sequence.substitutionmatrix class method)": [[499, "skbio.sequence.SubstitutionMatrix.from_dict"]], "from_iterable() (skbio.sequence.substitutionmatrix class method)": [[500, "skbio.sequence.SubstitutionMatrix.from_iterable"]], "get_names() (skbio.sequence.substitutionmatrix class method)": [[501, "skbio.sequence.SubstitutionMatrix.get_names"]], "identity() (skbio.sequence.substitutionmatrix class method)": [[502, "skbio.sequence.SubstitutionMatrix.identity"]], "index() (skbio.sequence.substitutionmatrix method)": [[503, "skbio.sequence.SubstitutionMatrix.index"]], "plot() (skbio.sequence.substitutionmatrix method)": [[504, "skbio.sequence.SubstitutionMatrix.plot"]], "read() (skbio.sequence.substitutionmatrix class method)": [[505, "skbio.sequence.SubstitutionMatrix.read"]], "redundant_form() (skbio.sequence.substitutionmatrix method)": [[506, "skbio.sequence.SubstitutionMatrix.redundant_form"]], "to_data_frame() (skbio.sequence.substitutionmatrix method)": [[507, "skbio.sequence.SubstitutionMatrix.to_data_frame"]], "to_dict() (skbio.sequence.substitutionmatrix method)": [[508, "skbio.sequence.SubstitutionMatrix.to_dict"]], "transpose() (skbio.sequence.substitutionmatrix method)": [[509, "skbio.sequence.SubstitutionMatrix.transpose"]], "within() (skbio.sequence.substitutionmatrix method)": [[510, "skbio.sequence.SubstitutionMatrix.within"]], "write() (skbio.sequence.substitutionmatrix method)": [[511, "skbio.sequence.SubstitutionMatrix.write"]], "skbio.sequence.distance": [[512, "module-skbio.sequence.distance"]], "hamming() (in module skbio.sequence.distance)": [[513, "skbio.sequence.distance.hamming"]], "kmer_distance() (in module skbio.sequence.distance)": [[514, "skbio.sequence.distance.kmer_distance"]], "skbio.stats.composition": [[515, "module-skbio.stats.composition"]], "alr() (in module skbio.stats.composition)": [[516, "skbio.stats.composition.alr"]], "alr_inv() (in module skbio.stats.composition)": [[517, "skbio.stats.composition.alr_inv"]], "ancom() (in module skbio.stats.composition)": [[518, "skbio.stats.composition.ancom"]], "centralize() (in module skbio.stats.composition)": [[519, "skbio.stats.composition.centralize"]], "closure() (in module skbio.stats.composition)": [[520, "skbio.stats.composition.closure"]], "clr() (in module skbio.stats.composition)": [[521, "skbio.stats.composition.clr"]], "clr_inv() (in module skbio.stats.composition)": [[522, "skbio.stats.composition.clr_inv"]], "ilr() (in module skbio.stats.composition)": [[523, "skbio.stats.composition.ilr"]], "ilr_inv() (in module skbio.stats.composition)": [[524, "skbio.stats.composition.ilr_inv"]], "inner() (in module skbio.stats.composition)": [[525, "skbio.stats.composition.inner"]], "multiplicative_replacement() (in module skbio.stats.composition)": [[526, "skbio.stats.composition.multiplicative_replacement"]], "pairwise_vlr() (in module skbio.stats.composition)": [[527, "skbio.stats.composition.pairwise_vlr"]], "perturb() (in module skbio.stats.composition)": [[528, "skbio.stats.composition.perturb"]], "perturb_inv() (in module skbio.stats.composition)": [[529, "skbio.stats.composition.perturb_inv"]], "power() (in module skbio.stats.composition)": [[530, "skbio.stats.composition.power"]], "sbp_basis() (in module skbio.stats.composition)": [[531, "skbio.stats.composition.sbp_basis"]], "tree_basis() (in module skbio.stats.composition)": [[532, "skbio.stats.composition.tree_basis"]], "vlr() (in module skbio.stats.composition)": [[533, "skbio.stats.composition.vlr"]], "skbio.stats.distance": [[534, "module-skbio.stats.distance"]], "dissimilaritymatrix (class in skbio.stats.distance)": [[535, "skbio.stats.distance.DissimilarityMatrix"]], "__contains__() (skbio.stats.distance.dissimilaritymatrix method)": [[536, "skbio.stats.distance.DissimilarityMatrix.__contains__"]], "__eq__() (skbio.stats.distance.dissimilaritymatrix method)": [[537, "skbio.stats.distance.DissimilarityMatrix.__eq__"]], "__ge__() (skbio.stats.distance.dissimilaritymatrix method)": [[538, "skbio.stats.distance.DissimilarityMatrix.__ge__"]], "__getitem__() (skbio.stats.distance.dissimilaritymatrix method)": [[539, "skbio.stats.distance.DissimilarityMatrix.__getitem__"]], "__getstate__() (skbio.stats.distance.dissimilaritymatrix method)": [[540, "skbio.stats.distance.DissimilarityMatrix.__getstate__"]], "__gt__() (skbio.stats.distance.dissimilaritymatrix method)": [[541, "skbio.stats.distance.DissimilarityMatrix.__gt__"]], "__le__() (skbio.stats.distance.dissimilaritymatrix method)": [[542, "skbio.stats.distance.DissimilarityMatrix.__le__"]], "__lt__() (skbio.stats.distance.dissimilaritymatrix method)": [[543, "skbio.stats.distance.DissimilarityMatrix.__lt__"]], "__ne__() (skbio.stats.distance.dissimilaritymatrix method)": [[544, "skbio.stats.distance.DissimilarityMatrix.__ne__"]], "__str__() (skbio.stats.distance.dissimilaritymatrix method)": [[545, "skbio.stats.distance.DissimilarityMatrix.__str__"]], "between() (skbio.stats.distance.dissimilaritymatrix method)": [[546, "skbio.stats.distance.DissimilarityMatrix.between"]], "copy() (skbio.stats.distance.dissimilaritymatrix method)": [[547, "skbio.stats.distance.DissimilarityMatrix.copy"]], "filter() (skbio.stats.distance.dissimilaritymatrix method)": [[548, "skbio.stats.distance.DissimilarityMatrix.filter"]], "from_iterable() (skbio.stats.distance.dissimilaritymatrix class method)": [[549, "skbio.stats.distance.DissimilarityMatrix.from_iterable"]], "index() (skbio.stats.distance.dissimilaritymatrix method)": [[550, "skbio.stats.distance.DissimilarityMatrix.index"]], "plot() (skbio.stats.distance.dissimilaritymatrix method)": [[551, "skbio.stats.distance.DissimilarityMatrix.plot"]], "read() (skbio.stats.distance.dissimilaritymatrix class method)": [[552, "skbio.stats.distance.DissimilarityMatrix.read"]], "redundant_form() (skbio.stats.distance.dissimilaritymatrix method)": [[553, "skbio.stats.distance.DissimilarityMatrix.redundant_form"]], "to_data_frame() (skbio.stats.distance.dissimilaritymatrix method)": [[554, "skbio.stats.distance.DissimilarityMatrix.to_data_frame"]], "transpose() (skbio.stats.distance.dissimilaritymatrix method)": [[555, "skbio.stats.distance.DissimilarityMatrix.transpose"]], "within() (skbio.stats.distance.dissimilaritymatrix method)": [[556, "skbio.stats.distance.DissimilarityMatrix.within"]], "write() (skbio.stats.distance.dissimilaritymatrix method)": [[557, "skbio.stats.distance.DissimilarityMatrix.write"]], "dissimilaritymatrixerror": [[558, "skbio.stats.distance.DissimilarityMatrixError"]], "distancematrix (class in skbio.stats.distance)": [[559, "skbio.stats.distance.DistanceMatrix"]], "__contains__() (skbio.stats.distance.distancematrix method)": [[560, "skbio.stats.distance.DistanceMatrix.__contains__"]], "__eq__() (skbio.stats.distance.distancematrix method)": [[561, "skbio.stats.distance.DistanceMatrix.__eq__"]], "__ge__() (skbio.stats.distance.distancematrix method)": [[562, "skbio.stats.distance.DistanceMatrix.__ge__"]], "__getitem__() (skbio.stats.distance.distancematrix method)": [[563, "skbio.stats.distance.DistanceMatrix.__getitem__"]], "__getstate__() (skbio.stats.distance.distancematrix method)": [[564, "skbio.stats.distance.DistanceMatrix.__getstate__"]], "__gt__() (skbio.stats.distance.distancematrix method)": [[565, "skbio.stats.distance.DistanceMatrix.__gt__"]], "__le__() (skbio.stats.distance.distancematrix method)": [[566, "skbio.stats.distance.DistanceMatrix.__le__"]], "__lt__() (skbio.stats.distance.distancematrix method)": [[567, "skbio.stats.distance.DistanceMatrix.__lt__"]], "__ne__() (skbio.stats.distance.distancematrix method)": [[568, "skbio.stats.distance.DistanceMatrix.__ne__"]], "__str__() (skbio.stats.distance.distancematrix method)": [[569, "skbio.stats.distance.DistanceMatrix.__str__"]], "between() (skbio.stats.distance.distancematrix method)": [[570, "skbio.stats.distance.DistanceMatrix.between"]], "condensed_form() (skbio.stats.distance.distancematrix method)": [[571, "skbio.stats.distance.DistanceMatrix.condensed_form"]], "copy() (skbio.stats.distance.distancematrix method)": [[572, "skbio.stats.distance.DistanceMatrix.copy"]], "filter() (skbio.stats.distance.distancematrix method)": [[573, "skbio.stats.distance.DistanceMatrix.filter"]], "from_iterable() (skbio.stats.distance.distancematrix class method)": [[574, "skbio.stats.distance.DistanceMatrix.from_iterable"]], "index() (skbio.stats.distance.distancematrix method)": [[575, "skbio.stats.distance.DistanceMatrix.index"]], "permute() (skbio.stats.distance.distancematrix method)": [[576, "skbio.stats.distance.DistanceMatrix.permute"]], "plot() (skbio.stats.distance.distancematrix method)": [[577, "skbio.stats.distance.DistanceMatrix.plot"]], "read() (skbio.stats.distance.distancematrix class method)": [[578, "skbio.stats.distance.DistanceMatrix.read"]], "redundant_form() (skbio.stats.distance.distancematrix method)": [[579, "skbio.stats.distance.DistanceMatrix.redundant_form"]], "to_data_frame() (skbio.stats.distance.distancematrix method)": [[580, "skbio.stats.distance.DistanceMatrix.to_data_frame"]], "to_series() (skbio.stats.distance.distancematrix method)": [[581, "skbio.stats.distance.DistanceMatrix.to_series"]], "transpose() (skbio.stats.distance.distancematrix method)": [[582, "skbio.stats.distance.DistanceMatrix.transpose"]], "within() (skbio.stats.distance.distancematrix method)": [[583, "skbio.stats.distance.DistanceMatrix.within"]], "write() (skbio.stats.distance.distancematrix method)": [[584, "skbio.stats.distance.DistanceMatrix.write"]], "distancematrixerror": [[585, "skbio.stats.distance.DistanceMatrixError"]], "missingiderror": [[586, "skbio.stats.distance.MissingIDError"]], "anosim() (in module skbio.stats.distance)": [[587, "skbio.stats.distance.anosim"]], "bioenv() (in module skbio.stats.distance)": [[588, "skbio.stats.distance.bioenv"]], "mantel() (in module skbio.stats.distance)": [[589, "skbio.stats.distance.mantel"]], "permanova() (in module skbio.stats.distance)": [[590, "skbio.stats.distance.permanova"]], "permdisp() (in module skbio.stats.distance)": [[591, "skbio.stats.distance.permdisp"]], "pwmantel() (in module skbio.stats.distance)": [[592, "skbio.stats.distance.pwmantel"]], "randdm() (in module skbio.stats.distance)": [[593, "skbio.stats.distance.randdm"]], "skbio.stats.evolve": [[594, "module-skbio.stats.evolve"]], "hommola_cospeciation() (in module skbio.stats.evolve)": [[595, "skbio.stats.evolve.hommola_cospeciation"]], "skbio.stats.gradient": [[596, "module-skbio.stats.gradient"]], "averagegradientanova (class in skbio.stats.gradient)": [[597, "skbio.stats.gradient.AverageGradientANOVA"]], "__eq__() (skbio.stats.gradient.averagegradientanova method)": [[598, "skbio.stats.gradient.AverageGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.averagegradientanova method)": [[599, "skbio.stats.gradient.AverageGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.averagegradientanova method)": [[600, "skbio.stats.gradient.AverageGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.averagegradientanova method)": [[601, "skbio.stats.gradient.AverageGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.averagegradientanova method)": [[602, "skbio.stats.gradient.AverageGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.averagegradientanova method)": [[603, "skbio.stats.gradient.AverageGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.averagegradientanova method)": [[604, "skbio.stats.gradient.AverageGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.averagegradientanova method)": [[605, "skbio.stats.gradient.AverageGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.averagegradientanova method)": [[606, "skbio.stats.gradient.AverageGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.averagegradientanova method)": [[607, "skbio.stats.gradient.AverageGradientANOVA.get_trajectories"]], "categoryresults (class in skbio.stats.gradient)": [[608, "skbio.stats.gradient.CategoryResults"]], "__eq__() (skbio.stats.gradient.categoryresults method)": [[609, "skbio.stats.gradient.CategoryResults.__eq__"]], "__ge__() (skbio.stats.gradient.categoryresults method)": [[610, "skbio.stats.gradient.CategoryResults.__ge__"]], "__getstate__() (skbio.stats.gradient.categoryresults method)": [[611, "skbio.stats.gradient.CategoryResults.__getstate__"]], "__gt__() (skbio.stats.gradient.categoryresults method)": [[612, "skbio.stats.gradient.CategoryResults.__gt__"]], "__hash__() (skbio.stats.gradient.categoryresults method)": [[613, "skbio.stats.gradient.CategoryResults.__hash__"]], "__le__() (skbio.stats.gradient.categoryresults method)": [[614, "skbio.stats.gradient.CategoryResults.__le__"]], "__lt__() (skbio.stats.gradient.categoryresults method)": [[615, "skbio.stats.gradient.CategoryResults.__lt__"]], "__ne__() (skbio.stats.gradient.categoryresults method)": [[616, "skbio.stats.gradient.CategoryResults.__ne__"]], "__str__() (skbio.stats.gradient.categoryresults method)": [[617, "skbio.stats.gradient.CategoryResults.__str__"]], "to_files() (skbio.stats.gradient.categoryresults method)": [[618, "skbio.stats.gradient.CategoryResults.to_files"]], "firstdifferencegradientanova (class in skbio.stats.gradient)": [[619, "skbio.stats.gradient.FirstDifferenceGradientANOVA"]], "__eq__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[620, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[621, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[622, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[623, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[624, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[625, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[626, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[627, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[628, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.firstdifferencegradientanova method)": [[629, "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories"]], "gradientanova (class in skbio.stats.gradient)": [[630, "skbio.stats.gradient.GradientANOVA"]], "__eq__() (skbio.stats.gradient.gradientanova method)": [[631, "skbio.stats.gradient.GradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.gradientanova method)": [[632, "skbio.stats.gradient.GradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.gradientanova method)": [[633, "skbio.stats.gradient.GradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.gradientanova method)": [[634, "skbio.stats.gradient.GradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.gradientanova method)": [[635, "skbio.stats.gradient.GradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.gradientanova method)": [[636, "skbio.stats.gradient.GradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.gradientanova method)": [[637, "skbio.stats.gradient.GradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.gradientanova method)": [[638, "skbio.stats.gradient.GradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.gradientanova method)": [[639, "skbio.stats.gradient.GradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.gradientanova method)": [[640, "skbio.stats.gradient.GradientANOVA.get_trajectories"]], "gradientanovaresults (class in skbio.stats.gradient)": [[641, "skbio.stats.gradient.GradientANOVAResults"]], "__eq__() (skbio.stats.gradient.gradientanovaresults method)": [[642, "skbio.stats.gradient.GradientANOVAResults.__eq__"]], "__ge__() (skbio.stats.gradient.gradientanovaresults method)": [[643, "skbio.stats.gradient.GradientANOVAResults.__ge__"]], "__getstate__() (skbio.stats.gradient.gradientanovaresults method)": [[644, "skbio.stats.gradient.GradientANOVAResults.__getstate__"]], "__gt__() (skbio.stats.gradient.gradientanovaresults method)": [[645, "skbio.stats.gradient.GradientANOVAResults.__gt__"]], "__hash__() (skbio.stats.gradient.gradientanovaresults method)": [[646, "skbio.stats.gradient.GradientANOVAResults.__hash__"]], "__le__() (skbio.stats.gradient.gradientanovaresults method)": [[647, "skbio.stats.gradient.GradientANOVAResults.__le__"]], "__lt__() (skbio.stats.gradient.gradientanovaresults method)": [[648, "skbio.stats.gradient.GradientANOVAResults.__lt__"]], "__ne__() (skbio.stats.gradient.gradientanovaresults method)": [[649, "skbio.stats.gradient.GradientANOVAResults.__ne__"]], "__str__() (skbio.stats.gradient.gradientanovaresults method)": [[650, "skbio.stats.gradient.GradientANOVAResults.__str__"]], "to_files() (skbio.stats.gradient.gradientanovaresults method)": [[651, "skbio.stats.gradient.GradientANOVAResults.to_files"]], "groupresults (class in skbio.stats.gradient)": [[652, "skbio.stats.gradient.GroupResults"]], "__eq__() (skbio.stats.gradient.groupresults method)": [[653, "skbio.stats.gradient.GroupResults.__eq__"]], "__ge__() (skbio.stats.gradient.groupresults method)": [[654, "skbio.stats.gradient.GroupResults.__ge__"]], "__getstate__() (skbio.stats.gradient.groupresults method)": [[655, "skbio.stats.gradient.GroupResults.__getstate__"]], "__gt__() (skbio.stats.gradient.groupresults method)": [[656, "skbio.stats.gradient.GroupResults.__gt__"]], "__hash__() (skbio.stats.gradient.groupresults method)": [[657, "skbio.stats.gradient.GroupResults.__hash__"]], "__le__() (skbio.stats.gradient.groupresults method)": [[658, "skbio.stats.gradient.GroupResults.__le__"]], "__lt__() (skbio.stats.gradient.groupresults method)": [[659, "skbio.stats.gradient.GroupResults.__lt__"]], "__ne__() (skbio.stats.gradient.groupresults method)": [[660, "skbio.stats.gradient.GroupResults.__ne__"]], "__str__() (skbio.stats.gradient.groupresults method)": [[661, "skbio.stats.gradient.GroupResults.__str__"]], "to_files() (skbio.stats.gradient.groupresults method)": [[662, "skbio.stats.gradient.GroupResults.to_files"]], "trajectorygradientanova (class in skbio.stats.gradient)": [[663, "skbio.stats.gradient.TrajectoryGradientANOVA"]], "__eq__() (skbio.stats.gradient.trajectorygradientanova method)": [[664, "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.trajectorygradientanova method)": [[665, "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.trajectorygradientanova method)": [[666, "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.trajectorygradientanova method)": [[667, "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.trajectorygradientanova method)": [[668, "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.trajectorygradientanova method)": [[669, "skbio.stats.gradient.TrajectoryGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.trajectorygradientanova method)": [[670, "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.trajectorygradientanova method)": [[671, "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.trajectorygradientanova method)": [[672, "skbio.stats.gradient.TrajectoryGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.trajectorygradientanova method)": [[673, "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories"]], "windowdifferencegradientanova (class in skbio.stats.gradient)": [[674, "skbio.stats.gradient.WindowDifferenceGradientANOVA"]], "__eq__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[675, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[676, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[677, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[678, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[679, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[680, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[681, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[682, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[683, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.windowdifferencegradientanova method)": [[684, "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories"]], "isubsample() (in module skbio.stats)": [[685, "skbio.stats.isubsample"]], "skbio.stats.ordination": [[686, "module-skbio.stats.ordination"]], "ordinationresults (class in skbio.stats.ordination)": [[687, "skbio.stats.ordination.OrdinationResults"]], "__eq__() (skbio.stats.ordination.ordinationresults method)": [[688, "skbio.stats.ordination.OrdinationResults.__eq__"]], "__ge__() (skbio.stats.ordination.ordinationresults method)": [[689, "skbio.stats.ordination.OrdinationResults.__ge__"]], "__getstate__() (skbio.stats.ordination.ordinationresults method)": [[690, "skbio.stats.ordination.OrdinationResults.__getstate__"]], "__gt__() (skbio.stats.ordination.ordinationresults method)": [[691, "skbio.stats.ordination.OrdinationResults.__gt__"]], "__hash__() (skbio.stats.ordination.ordinationresults method)": [[692, "skbio.stats.ordination.OrdinationResults.__hash__"]], "__le__() (skbio.stats.ordination.ordinationresults method)": [[693, "skbio.stats.ordination.OrdinationResults.__le__"]], "__lt__() (skbio.stats.ordination.ordinationresults method)": [[694, "skbio.stats.ordination.OrdinationResults.__lt__"]], "__ne__() (skbio.stats.ordination.ordinationresults method)": [[695, "skbio.stats.ordination.OrdinationResults.__ne__"]], "__str__() (skbio.stats.ordination.ordinationresults method)": [[696, "skbio.stats.ordination.OrdinationResults.__str__"]], "plot() (skbio.stats.ordination.ordinationresults method)": [[697, "skbio.stats.ordination.OrdinationResults.plot"]], "read() (skbio.stats.ordination.ordinationresults class method)": [[698, "skbio.stats.ordination.OrdinationResults.read"]], "write() (skbio.stats.ordination.ordinationresults method)": [[699, "skbio.stats.ordination.OrdinationResults.write"]], "ca() (in module skbio.stats.ordination)": [[700, "skbio.stats.ordination.ca"]], "cca() (in module skbio.stats.ordination)": [[701, "skbio.stats.ordination.cca"]], "corr() (in module skbio.stats.ordination)": [[702, "skbio.stats.ordination.corr"]], "e_matrix() (in module skbio.stats.ordination)": [[703, "skbio.stats.ordination.e_matrix"]], "f_matrix() (in module skbio.stats.ordination)": [[704, "skbio.stats.ordination.f_matrix"]], "mean_and_std() (in module skbio.stats.ordination)": [[705, "skbio.stats.ordination.mean_and_std"]], "pcoa() (in module skbio.stats.ordination)": [[706, "skbio.stats.ordination.pcoa"]], "pcoa_biplot() (in module skbio.stats.ordination)": [[707, "skbio.stats.ordination.pcoa_biplot"]], "rda() (in module skbio.stats.ordination)": [[708, "skbio.stats.ordination.rda"]], "scale() (in module skbio.stats.ordination)": [[709, "skbio.stats.ordination.scale"]], "svd_rank() (in module skbio.stats.ordination)": [[710, "skbio.stats.ordination.svd_rank"]], "skbio.stats.power": [[711, "module-skbio.stats.power"]], "confidence_bound() (in module skbio.stats.power)": [[712, "skbio.stats.power.confidence_bound"]], "paired_subsamples() (in module skbio.stats.power)": [[713, "skbio.stats.power.paired_subsamples"]], "subsample_paired_power() (in module skbio.stats.power)": [[714, "skbio.stats.power.subsample_paired_power"]], "subsample_power() (in module skbio.stats.power)": [[715, "skbio.stats.power.subsample_power"]], "subsample_counts() (in module skbio.stats)": [[716, "skbio.stats.subsample_counts"]], "duplicatenodeerror": [[717, "skbio.tree.DuplicateNodeError"]], "missingnodeerror": [[718, "skbio.tree.MissingNodeError"]], "nolengtherror": [[719, "skbio.tree.NoLengthError"]], "noparenterror": [[720, "skbio.tree.NoParentError"]], "treeerror": [[721, "skbio.tree.TreeError"]], "treenode (class in skbio.tree)": [[722, "skbio.tree.TreeNode"]], "__copy__() (skbio.tree.treenode method)": [[723, "skbio.tree.TreeNode.__copy__"]], "__deepcopy__() (skbio.tree.treenode method)": [[724, "skbio.tree.TreeNode.__deepcopy__"]], "__eq__() (skbio.tree.treenode method)": [[725, "skbio.tree.TreeNode.__eq__"]], "__ge__() (skbio.tree.treenode method)": [[726, "skbio.tree.TreeNode.__ge__"]], "__getitem__() (skbio.tree.treenode method)": [[727, "skbio.tree.TreeNode.__getitem__"]], "__getstate__() (skbio.tree.treenode method)": [[728, "skbio.tree.TreeNode.__getstate__"]], "__gt__() (skbio.tree.treenode method)": [[729, "skbio.tree.TreeNode.__gt__"]], "__hash__() (skbio.tree.treenode method)": [[730, "skbio.tree.TreeNode.__hash__"]], "__iter__() (skbio.tree.treenode method)": [[731, "skbio.tree.TreeNode.__iter__"]], "__le__() (skbio.tree.treenode method)": [[732, "skbio.tree.TreeNode.__le__"]], "__len__() (skbio.tree.treenode method)": [[733, "skbio.tree.TreeNode.__len__"]], "__lt__() (skbio.tree.treenode method)": [[734, "skbio.tree.TreeNode.__lt__"]], "__ne__() (skbio.tree.treenode method)": [[735, "skbio.tree.TreeNode.__ne__"]], "__str__() (skbio.tree.treenode method)": [[736, "skbio.tree.TreeNode.__str__"]], "accumulate_to_ancestor() (skbio.tree.treenode method)": [[737, "skbio.tree.TreeNode.accumulate_to_ancestor"]], "ancestors() (skbio.tree.treenode method)": [[738, "skbio.tree.TreeNode.ancestors"]], "append() (skbio.tree.treenode method)": [[739, "skbio.tree.TreeNode.append"]], "ascii_art() (skbio.tree.treenode method)": [[740, "skbio.tree.TreeNode.ascii_art"]], "assign_ids() (skbio.tree.treenode method)": [[741, "skbio.tree.TreeNode.assign_ids"]], "assign_supports() (skbio.tree.treenode method)": [[742, "skbio.tree.TreeNode.assign_supports"]], "bifurcate() (skbio.tree.treenode method)": [[743, "skbio.tree.TreeNode.bifurcate"]], "cache_attr() (skbio.tree.treenode method)": [[744, "skbio.tree.TreeNode.cache_attr"]], "compare_rfd() (skbio.tree.treenode method)": [[745, "skbio.tree.TreeNode.compare_rfd"]], "compare_subsets() (skbio.tree.treenode method)": [[746, "skbio.tree.TreeNode.compare_subsets"]], "compare_tip_distances() (skbio.tree.treenode method)": [[747, "skbio.tree.TreeNode.compare_tip_distances"]], "copy() (skbio.tree.treenode method)": [[748, "skbio.tree.TreeNode.copy"]], "count() (skbio.tree.treenode method)": [[749, "skbio.tree.TreeNode.count"]], "create_caches() (skbio.tree.treenode method)": [[750, "skbio.tree.TreeNode.create_caches"]], "deepcopy() (skbio.tree.treenode method)": [[751, "skbio.tree.TreeNode.deepcopy"]], "descending_branch_length() (skbio.tree.treenode method)": [[752, "skbio.tree.TreeNode.descending_branch_length"]], "distance() (skbio.tree.treenode method)": [[753, "skbio.tree.TreeNode.distance"]], "extend() (skbio.tree.treenode method)": [[754, "skbio.tree.TreeNode.extend"]], "find() (skbio.tree.treenode method)": [[755, "skbio.tree.TreeNode.find"]], "find_all() (skbio.tree.treenode method)": [[756, "skbio.tree.TreeNode.find_all"]], "find_by_func() (skbio.tree.treenode method)": [[757, "skbio.tree.TreeNode.find_by_func"]], "find_by_id() (skbio.tree.treenode method)": [[758, "skbio.tree.TreeNode.find_by_id"]], "from_linkage_matrix() (skbio.tree.treenode class method)": [[759, "skbio.tree.TreeNode.from_linkage_matrix"]], "from_taxdump() (skbio.tree.treenode class method)": [[760, "skbio.tree.TreeNode.from_taxdump"]], "from_taxonomy() (skbio.tree.treenode class method)": [[761, "skbio.tree.TreeNode.from_taxonomy"]], "get_max_distance() (skbio.tree.treenode method)": [[762, "skbio.tree.TreeNode.get_max_distance"]], "has_children() (skbio.tree.treenode method)": [[763, "skbio.tree.TreeNode.has_children"]], "index_tree() (skbio.tree.treenode method)": [[764, "skbio.tree.TreeNode.index_tree"]], "invalidate_caches() (skbio.tree.treenode method)": [[765, "skbio.tree.TreeNode.invalidate_caches"]], "is_root() (skbio.tree.treenode method)": [[766, "skbio.tree.TreeNode.is_root"]], "is_tip() (skbio.tree.treenode method)": [[767, "skbio.tree.TreeNode.is_tip"]], "lca() (skbio.tree.treenode method)": [[768, "skbio.tree.TreeNode.lca"]], "levelorder() (skbio.tree.treenode method)": [[769, "skbio.tree.TreeNode.levelorder"]], "lowest_common_ancestor() (skbio.tree.treenode method)": [[770, "skbio.tree.TreeNode.lowest_common_ancestor"]], "neighbors() (skbio.tree.treenode method)": [[771, "skbio.tree.TreeNode.neighbors"]], "non_tips() (skbio.tree.treenode method)": [[772, "skbio.tree.TreeNode.non_tips"]], "observed_node_counts() (skbio.tree.treenode method)": [[773, "skbio.tree.TreeNode.observed_node_counts"]], "pop() (skbio.tree.treenode method)": [[774, "skbio.tree.TreeNode.pop"]], "postorder() (skbio.tree.treenode method)": [[775, "skbio.tree.TreeNode.postorder"]], "pre_and_postorder() (skbio.tree.treenode method)": [[776, "skbio.tree.TreeNode.pre_and_postorder"]], "preorder() (skbio.tree.treenode method)": [[777, "skbio.tree.TreeNode.preorder"]], "prune() (skbio.tree.treenode method)": [[778, "skbio.tree.TreeNode.prune"]], "read() (skbio.tree.treenode class method)": [[779, "skbio.tree.TreeNode.read"]], "remove() (skbio.tree.treenode method)": [[780, "skbio.tree.TreeNode.remove"]], "remove_deleted() (skbio.tree.treenode method)": [[781, "skbio.tree.TreeNode.remove_deleted"]], "root() (skbio.tree.treenode method)": [[782, "skbio.tree.TreeNode.root"]], "root_at() (skbio.tree.treenode method)": [[783, "skbio.tree.TreeNode.root_at"]], "root_at_midpoint() (skbio.tree.treenode method)": [[784, "skbio.tree.TreeNode.root_at_midpoint"]], "shear() (skbio.tree.treenode method)": [[785, "skbio.tree.TreeNode.shear"]], "shuffle() (skbio.tree.treenode method)": [[786, "skbio.tree.TreeNode.shuffle"]], "siblings() (skbio.tree.treenode method)": [[787, "skbio.tree.TreeNode.siblings"]], "subset() (skbio.tree.treenode method)": [[788, "skbio.tree.TreeNode.subset"]], "subsets() (skbio.tree.treenode method)": [[789, "skbio.tree.TreeNode.subsets"]], "subtree() (skbio.tree.treenode method)": [[790, "skbio.tree.TreeNode.subtree"]], "tip_tip_distances() (skbio.tree.treenode method)": [[791, "skbio.tree.TreeNode.tip_tip_distances"]], "tips() (skbio.tree.treenode method)": [[792, "skbio.tree.TreeNode.tips"]], "to_array() (skbio.tree.treenode method)": [[793, "skbio.tree.TreeNode.to_array"]], "to_taxonomy() (skbio.tree.treenode method)": [[794, "skbio.tree.TreeNode.to_taxonomy"]], "traverse() (skbio.tree.treenode method)": [[795, "skbio.tree.TreeNode.traverse"]], "unpack() (skbio.tree.treenode method)": [[796, "skbio.tree.TreeNode.unpack"]], "unpack_by_func() (skbio.tree.treenode method)": [[797, "skbio.tree.TreeNode.unpack_by_func"]], "unrooted_copy() (skbio.tree.treenode method)": [[798, "skbio.tree.TreeNode.unrooted_copy"]], "unrooted_deepcopy() (skbio.tree.treenode method)": [[799, "skbio.tree.TreeNode.unrooted_deepcopy"]], "write() (skbio.tree.treenode method)": [[800, "skbio.tree.TreeNode.write"]], "majority_rule() (in module skbio.tree)": [[801, "skbio.tree.majority_rule"]], "nj() (in module skbio.tree)": [[802, "skbio.tree.nj"]], "efficiencywarning": [[803, "skbio.util.EfficiencyWarning"]], "representationwarning": [[804, "skbio.util.RepresentationWarning"]], "assert_data_frame_almost_equal() (in module skbio.util)": [[805, "skbio.util.assert_data_frame_almost_equal"]], "assert_ordination_results_equal() (in module skbio.util)": [[806, "skbio.util.assert_ordination_results_equal"]], "cardinal_to_ordinal() (in module skbio.util)": [[807, "skbio.util.cardinal_to_ordinal"]], "classproperty (class in skbio.util)": [[808, "skbio.util.classproperty"]], "__delete__() (skbio.util.classproperty method)": [[809, "skbio.util.classproperty.__delete__"]], "__eq__() (skbio.util.classproperty method)": [[810, "skbio.util.classproperty.__eq__"]], "__ge__() (skbio.util.classproperty method)": [[811, "skbio.util.classproperty.__ge__"]], "__get__() (skbio.util.classproperty method)": [[812, "skbio.util.classproperty.__get__"]], "__getstate__() (skbio.util.classproperty method)": [[813, "skbio.util.classproperty.__getstate__"]], "__gt__() (skbio.util.classproperty method)": [[814, "skbio.util.classproperty.__gt__"]], "__hash__() (skbio.util.classproperty method)": [[815, "skbio.util.classproperty.__hash__"]], "__le__() (skbio.util.classproperty method)": [[816, "skbio.util.classproperty.__le__"]], "__lt__() (skbio.util.classproperty method)": [[817, "skbio.util.classproperty.__lt__"]], "__ne__() (skbio.util.classproperty method)": [[818, "skbio.util.classproperty.__ne__"]], "__set__() (skbio.util.classproperty method)": [[819, "skbio.util.classproperty.__set__"]], "__set_name__() (skbio.util.classproperty method)": [[820, "skbio.util.classproperty.__set_name__"]], "__str__() (skbio.util.classproperty method)": [[821, "skbio.util.classproperty.__str__"]], "deleter() (skbio.util.classproperty method)": [[822, "skbio.util.classproperty.deleter"]], "getter() (skbio.util.classproperty method)": [[823, "skbio.util.classproperty.getter"]], "setter() (skbio.util.classproperty method)": [[824, "skbio.util.classproperty.setter"]], "find_duplicates() (in module skbio.util)": [[825, "skbio.util.find_duplicates"]], "get_data_path() (in module skbio.util)": [[826, "skbio.util.get_data_path"]], "safe_md5() (in module skbio.util)": [[827, "skbio.util.safe_md5"]], "workflow (class in skbio.workflow)": [[828, "skbio.workflow.Workflow"]], "__call__() (skbio.workflow.workflow method)": [[829, "skbio.workflow.Workflow.__call__"]], "__eq__() (skbio.workflow.workflow method)": [[830, "skbio.workflow.Workflow.__eq__"]], "__ge__() (skbio.workflow.workflow method)": [[831, "skbio.workflow.Workflow.__ge__"]], "__getstate__() (skbio.workflow.workflow method)": [[832, "skbio.workflow.Workflow.__getstate__"]], "__gt__() (skbio.workflow.workflow method)": [[833, "skbio.workflow.Workflow.__gt__"]], "__hash__() (skbio.workflow.workflow method)": [[834, "skbio.workflow.Workflow.__hash__"]], "__le__() (skbio.workflow.workflow method)": [[835, "skbio.workflow.Workflow.__le__"]], "__lt__() (skbio.workflow.workflow method)": [[836, "skbio.workflow.Workflow.__lt__"]], "__ne__() (skbio.workflow.workflow method)": [[837, "skbio.workflow.Workflow.__ne__"]], "__str__() (skbio.workflow.workflow method)": [[838, "skbio.workflow.Workflow.__str__"]], "initialize_state() (skbio.workflow.workflow method)": [[839, "skbio.workflow.Workflow.initialize_state"]], "method (class in skbio.workflow)": [[840, "skbio.workflow.method"]], "__call__() (skbio.workflow.method method)": [[841, "skbio.workflow.method.__call__"]], "__eq__() (skbio.workflow.method method)": [[842, "skbio.workflow.method.__eq__"]], "__ge__() (skbio.workflow.method method)": [[843, "skbio.workflow.method.__ge__"]], "__getstate__() (skbio.workflow.method method)": [[844, "skbio.workflow.method.__getstate__"]], "__gt__() (skbio.workflow.method method)": [[845, "skbio.workflow.method.__gt__"]], "__hash__() (skbio.workflow.method method)": [[846, "skbio.workflow.method.__hash__"]], "__le__() (skbio.workflow.method method)": [[847, "skbio.workflow.method.__le__"]], "__lt__() (skbio.workflow.method method)": [[848, "skbio.workflow.method.__lt__"]], "__ne__() (skbio.workflow.method method)": [[849, "skbio.workflow.method.__ne__"]], "__str__() (skbio.workflow.method method)": [[850, "skbio.workflow.method.__str__"]], "requires (class in skbio.workflow)": [[851, "skbio.workflow.requires"]], "__call__() (skbio.workflow.requires method)": [[852, "skbio.workflow.requires.__call__"]], "__eq__() (skbio.workflow.requires method)": [[853, "skbio.workflow.requires.__eq__"]], "__ge__() (skbio.workflow.requires method)": [[854, "skbio.workflow.requires.__ge__"]], "__getstate__() (skbio.workflow.requires method)": [[855, "skbio.workflow.requires.__getstate__"]], "__gt__() (skbio.workflow.requires method)": [[856, "skbio.workflow.requires.__gt__"]], "__hash__() (skbio.workflow.requires method)": [[857, "skbio.workflow.requires.__hash__"]], "__le__() (skbio.workflow.requires method)": [[858, "skbio.workflow.requires.__le__"]], "__lt__() (skbio.workflow.requires method)": [[859, "skbio.workflow.requires.__lt__"]], "__ne__() (skbio.workflow.requires method)": [[860, "skbio.workflow.requires.__ne__"]], "__str__() (skbio.workflow.requires method)": [[861, "skbio.workflow.requires.__str__"]], "skbio.io": [[863, "module-skbio.io"]], "skbio.metadata": [[864, "module-skbio.metadata"]], "skbio.sequence": [[865, "module-skbio.sequence"]], "skbio.stats": [[866, "module-skbio.stats"]], "skbio.tree": [[867, "module-skbio.tree"]], "skbio.util": [[868, "module-skbio.util"]], "skbio.workflow": [[869, "module-skbio.workflow"]]}})