Search.setIndex({"docnames": ["alignment", "diversity", "generated/skbio.alignment.AlignmentStructure", "generated/skbio.alignment.AlignmentStructure.__eq__", "generated/skbio.alignment.AlignmentStructure.__ge__", "generated/skbio.alignment.AlignmentStructure.__getitem__", "generated/skbio.alignment.AlignmentStructure.__getstate__", "generated/skbio.alignment.AlignmentStructure.__gt__", "generated/skbio.alignment.AlignmentStructure.__hash__", "generated/skbio.alignment.AlignmentStructure.__le__", "generated/skbio.alignment.AlignmentStructure.__lt__", "generated/skbio.alignment.AlignmentStructure.__ne__", "generated/skbio.alignment.AlignmentStructure.__setstate__", "generated/skbio.alignment.AlignmentStructure.__str__", "generated/skbio.alignment.AlignmentStructure.is_zero_based", "generated/skbio.alignment.AlignmentStructure.set_zero_based", "generated/skbio.alignment.StripedSmithWaterman", "generated/skbio.alignment.StripedSmithWaterman.__call__", "generated/skbio.alignment.StripedSmithWaterman.__eq__", "generated/skbio.alignment.StripedSmithWaterman.__ge__", "generated/skbio.alignment.StripedSmithWaterman.__getstate__", "generated/skbio.alignment.StripedSmithWaterman.__gt__", "generated/skbio.alignment.StripedSmithWaterman.__hash__", "generated/skbio.alignment.StripedSmithWaterman.__le__", "generated/skbio.alignment.StripedSmithWaterman.__lt__", "generated/skbio.alignment.StripedSmithWaterman.__ne__", "generated/skbio.alignment.StripedSmithWaterman.__setstate__", "generated/skbio.alignment.StripedSmithWaterman.__str__", "generated/skbio.alignment.TabularMSA", "generated/skbio.alignment.TabularMSA.__bool__", "generated/skbio.alignment.TabularMSA.__contains__", "generated/skbio.alignment.TabularMSA.__copy__", "generated/skbio.alignment.TabularMSA.__deepcopy__", "generated/skbio.alignment.TabularMSA.__eq__", "generated/skbio.alignment.TabularMSA.__ge__", "generated/skbio.alignment.TabularMSA.__getitem__", "generated/skbio.alignment.TabularMSA.__getstate__", "generated/skbio.alignment.TabularMSA.__gt__", "generated/skbio.alignment.TabularMSA.__iter__", "generated/skbio.alignment.TabularMSA.__le__", "generated/skbio.alignment.TabularMSA.__len__", "generated/skbio.alignment.TabularMSA.__lt__", "generated/skbio.alignment.TabularMSA.__ne__", "generated/skbio.alignment.TabularMSA.__reversed__", "generated/skbio.alignment.TabularMSA.__str__", "generated/skbio.alignment.TabularMSA.append", "generated/skbio.alignment.TabularMSA.consensus", "generated/skbio.alignment.TabularMSA.conservation", "generated/skbio.alignment.TabularMSA.extend", "generated/skbio.alignment.TabularMSA.from_dict", "generated/skbio.alignment.TabularMSA.gap_frequencies", "generated/skbio.alignment.TabularMSA.has_metadata", "generated/skbio.alignment.TabularMSA.has_positional_metadata", "generated/skbio.alignment.TabularMSA.iter_positions", "generated/skbio.alignment.TabularMSA.join", "generated/skbio.alignment.TabularMSA.read", "generated/skbio.alignment.TabularMSA.reassign_index", "generated/skbio.alignment.TabularMSA.sort", "generated/skbio.alignment.TabularMSA.to_dict", "generated/skbio.alignment.TabularMSA.write", "generated/skbio.alignment.global_pairwise_align", "generated/skbio.alignment.global_pairwise_align_nucleotide", "generated/skbio.alignment.global_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align", "generated/skbio.alignment.local_pairwise_align_nucleotide", "generated/skbio.alignment.local_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align_ssw", "generated/skbio.alignment.make_identity_substitution_matrix", "generated/skbio.diversity.alpha", "generated/skbio.diversity.alpha.ace", "generated/skbio.diversity.alpha.berger_parker_d", "generated/skbio.diversity.alpha.brillouin_d", "generated/skbio.diversity.alpha.chao1", "generated/skbio.diversity.alpha.chao1_ci", "generated/skbio.diversity.alpha.dominance", "generated/skbio.diversity.alpha.doubles", "generated/skbio.diversity.alpha.enspie", "generated/skbio.diversity.alpha.esty_ci", "generated/skbio.diversity.alpha.faith_pd", "generated/skbio.diversity.alpha.fisher_alpha", "generated/skbio.diversity.alpha.gini_index", "generated/skbio.diversity.alpha.goods_coverage", "generated/skbio.diversity.alpha.heip_e", "generated/skbio.diversity.alpha.kempton_taylor_q", "generated/skbio.diversity.alpha.lladser_ci", "generated/skbio.diversity.alpha.lladser_pe", "generated/skbio.diversity.alpha.margalef", "generated/skbio.diversity.alpha.mcintosh_d", "generated/skbio.diversity.alpha.mcintosh_e", "generated/skbio.diversity.alpha.menhinick", "generated/skbio.diversity.alpha.michaelis_menten_fit", "generated/skbio.diversity.alpha.observed_features", "generated/skbio.diversity.alpha.observed_otus", "generated/skbio.diversity.alpha.osd", "generated/skbio.diversity.alpha.phydiv", "generated/skbio.diversity.alpha.pielou_e", "generated/skbio.diversity.alpha.robbins", "generated/skbio.diversity.alpha.shannon", "generated/skbio.diversity.alpha.simpson", "generated/skbio.diversity.alpha.simpson_e", "generated/skbio.diversity.alpha.singles", "generated/skbio.diversity.alpha.sobs", "generated/skbio.diversity.alpha.strong", "generated/skbio.diversity.alpha_diversity", "generated/skbio.diversity.beta", "generated/skbio.diversity.beta.unweighted_unifrac", "generated/skbio.diversity.beta.weighted_unifrac", "generated/skbio.diversity.beta_diversity", "generated/skbio.diversity.block_beta_diversity", "generated/skbio.diversity.get_alpha_diversity_metrics", "generated/skbio.diversity.get_beta_diversity_metrics", "generated/skbio.diversity.partial_beta_diversity", "generated/skbio.io.ArgumentOverrideWarning", "generated/skbio.io.BLAST7FormatError", "generated/skbio.io.ClustalFormatError", "generated/skbio.io.EMBLFormatError", "generated/skbio.io.FASTAFormatError", "generated/skbio.io.FASTQFormatError", "generated/skbio.io.FileFormatError", "generated/skbio.io.FormatIdentificationWarning", "generated/skbio.io.GFF3FormatError", "generated/skbio.io.GenBankFormatError", "generated/skbio.io.IOSourceError", "generated/skbio.io.LSMatFormatError", "generated/skbio.io.NewickFormatError", "generated/skbio.io.OrdinationFormatError", "generated/skbio.io.PhylipFormatError", "generated/skbio.io.QSeqFormatError", "generated/skbio.io.QUALFormatError", "generated/skbio.io.StockholmFormatError", "generated/skbio.io.UnrecognizedFormatError", "generated/skbio.io.format.binary_dm", "generated/skbio.io.format.biom", "generated/skbio.io.format.blast6", "generated/skbio.io.format.blast7", "generated/skbio.io.format.clustal", "generated/skbio.io.format.embl", "generated/skbio.io.format.fasta", "generated/skbio.io.format.fastq", "generated/skbio.io.format.genbank", "generated/skbio.io.format.gff3", "generated/skbio.io.format.lsmat", "generated/skbio.io.format.newick", "generated/skbio.io.format.ordination", "generated/skbio.io.format.phylip", "generated/skbio.io.format.qseq", "generated/skbio.io.format.sample_metadata", "generated/skbio.io.format.stockholm", "generated/skbio.io.format.taxdump", "generated/skbio.io.registry", "generated/skbio.io.registry.DuplicateRegistrationError", "generated/skbio.io.registry.Format", "generated/skbio.io.registry.Format.__eq__", "generated/skbio.io.registry.Format.__ge__", "generated/skbio.io.registry.Format.__getstate__", "generated/skbio.io.registry.Format.__gt__", "generated/skbio.io.registry.Format.__hash__", "generated/skbio.io.registry.Format.__le__", "generated/skbio.io.registry.Format.__lt__", "generated/skbio.io.registry.Format.__ne__", "generated/skbio.io.registry.Format.__str__", "generated/skbio.io.registry.Format.reader", "generated/skbio.io.registry.Format.sniffer", "generated/skbio.io.registry.Format.writer", "generated/skbio.io.registry.IORegistry", "generated/skbio.io.registry.IORegistry.__eq__", "generated/skbio.io.registry.IORegistry.__ge__", "generated/skbio.io.registry.IORegistry.__getstate__", "generated/skbio.io.registry.IORegistry.__gt__", "generated/skbio.io.registry.IORegistry.__hash__", "generated/skbio.io.registry.IORegistry.__le__", "generated/skbio.io.registry.IORegistry.__lt__", "generated/skbio.io.registry.IORegistry.__ne__", "generated/skbio.io.registry.IORegistry.__str__", "generated/skbio.io.registry.IORegistry.add_format", "generated/skbio.io.registry.IORegistry.create_format", "generated/skbio.io.registry.IORegistry.get_reader", "generated/skbio.io.registry.IORegistry.get_sniffer", "generated/skbio.io.registry.IORegistry.get_writer", "generated/skbio.io.registry.IORegistry.list_read_formats", "generated/skbio.io.registry.IORegistry.list_write_formats", "generated/skbio.io.registry.IORegistry.monkey_patch", "generated/skbio.io.registry.IORegistry.read", "generated/skbio.io.registry.IORegistry.sniff", "generated/skbio.io.registry.IORegistry.write", "generated/skbio.io.registry.InvalidRegistrationError", "generated/skbio.io.registry.create_format", "generated/skbio.io.registry.read", "generated/skbio.io.registry.sniff", "generated/skbio.io.registry.write", "generated/skbio.io.util", "generated/skbio.io.util.open", "generated/skbio.io.util.open_file", "generated/skbio.io.util.open_files", "generated/skbio.metadata.Interval", "generated/skbio.metadata.Interval.__eq__", "generated/skbio.metadata.Interval.__ge__", "generated/skbio.metadata.Interval.__getstate__", "generated/skbio.metadata.Interval.__gt__", "generated/skbio.metadata.Interval.__le__", "generated/skbio.metadata.Interval.__lt__", "generated/skbio.metadata.Interval.__ne__", "generated/skbio.metadata.Interval.__str__", "generated/skbio.metadata.Interval.drop", "generated/skbio.metadata.IntervalMetadata", "generated/skbio.metadata.IntervalMetadata.__copy__", "generated/skbio.metadata.IntervalMetadata.__deepcopy__", "generated/skbio.metadata.IntervalMetadata.__eq__", "generated/skbio.metadata.IntervalMetadata.__ge__", "generated/skbio.metadata.IntervalMetadata.__getstate__", "generated/skbio.metadata.IntervalMetadata.__gt__", "generated/skbio.metadata.IntervalMetadata.__le__", "generated/skbio.metadata.IntervalMetadata.__lt__", "generated/skbio.metadata.IntervalMetadata.__ne__", "generated/skbio.metadata.IntervalMetadata.__str__", "generated/skbio.metadata.IntervalMetadata.add", "generated/skbio.metadata.IntervalMetadata.concat", "generated/skbio.metadata.IntervalMetadata.drop", "generated/skbio.metadata.IntervalMetadata.merge", "generated/skbio.metadata.IntervalMetadata.query", "generated/skbio.metadata.IntervalMetadata.read", "generated/skbio.metadata.IntervalMetadata.sort", "generated/skbio.metadata.IntervalMetadata.write", "generated/skbio.sequence.DNA", "generated/skbio.sequence.DNA.__bool__", "generated/skbio.sequence.DNA.__contains__", "generated/skbio.sequence.DNA.__copy__", "generated/skbio.sequence.DNA.__deepcopy__", "generated/skbio.sequence.DNA.__eq__", "generated/skbio.sequence.DNA.__ge__", "generated/skbio.sequence.DNA.__getitem__", "generated/skbio.sequence.DNA.__getstate__", "generated/skbio.sequence.DNA.__gt__", "generated/skbio.sequence.DNA.__iter__", "generated/skbio.sequence.DNA.__le__", "generated/skbio.sequence.DNA.__len__", "generated/skbio.sequence.DNA.__lt__", "generated/skbio.sequence.DNA.__ne__", "generated/skbio.sequence.DNA.__reversed__", "generated/skbio.sequence.DNA.__str__", "generated/skbio.sequence.DNA.complement", "generated/skbio.sequence.DNA.concat", "generated/skbio.sequence.DNA.count", "generated/skbio.sequence.DNA.definites", "generated/skbio.sequence.DNA.degap", "generated/skbio.sequence.DNA.degenerates", "generated/skbio.sequence.DNA.distance", "generated/skbio.sequence.DNA.expand_degenerates", "generated/skbio.sequence.DNA.find_motifs", "generated/skbio.sequence.DNA.find_with_regex", "generated/skbio.sequence.DNA.frequencies", "generated/skbio.sequence.DNA.gaps", "generated/skbio.sequence.DNA.gc_content", "generated/skbio.sequence.DNA.gc_frequency", "generated/skbio.sequence.DNA.has_definites", "generated/skbio.sequence.DNA.has_degenerates", "generated/skbio.sequence.DNA.has_gaps", "generated/skbio.sequence.DNA.has_interval_metadata", "generated/skbio.sequence.DNA.has_metadata", "generated/skbio.sequence.DNA.has_nondegenerates", "generated/skbio.sequence.DNA.has_positional_metadata", "generated/skbio.sequence.DNA.index", "generated/skbio.sequence.DNA.is_reverse_complement", "generated/skbio.sequence.DNA.iter_contiguous", "generated/skbio.sequence.DNA.iter_kmers", "generated/skbio.sequence.DNA.kmer_frequencies", "generated/skbio.sequence.DNA.lowercase", "generated/skbio.sequence.DNA.match_frequency", "generated/skbio.sequence.DNA.matches", "generated/skbio.sequence.DNA.mismatch_frequency", "generated/skbio.sequence.DNA.mismatches", "generated/skbio.sequence.DNA.nondegenerates", "generated/skbio.sequence.DNA.read", "generated/skbio.sequence.DNA.replace", "generated/skbio.sequence.DNA.reverse_complement", "generated/skbio.sequence.DNA.to_definites", "generated/skbio.sequence.DNA.to_indices", "generated/skbio.sequence.DNA.to_regex", "generated/skbio.sequence.DNA.transcribe", "generated/skbio.sequence.DNA.translate", "generated/skbio.sequence.DNA.translate_six_frames", "generated/skbio.sequence.DNA.write", "generated/skbio.sequence.GeneticCode", "generated/skbio.sequence.GeneticCode.__eq__", "generated/skbio.sequence.GeneticCode.__ge__", "generated/skbio.sequence.GeneticCode.__getstate__", "generated/skbio.sequence.GeneticCode.__gt__", "generated/skbio.sequence.GeneticCode.__le__", "generated/skbio.sequence.GeneticCode.__lt__", "generated/skbio.sequence.GeneticCode.__ne__", "generated/skbio.sequence.GeneticCode.__str__", "generated/skbio.sequence.GeneticCode.from_ncbi", "generated/skbio.sequence.GeneticCode.translate", "generated/skbio.sequence.GeneticCode.translate_six_frames", "generated/skbio.sequence.GrammaredSequence", "generated/skbio.sequence.GrammaredSequence.__bool__", "generated/skbio.sequence.GrammaredSequence.__contains__", "generated/skbio.sequence.GrammaredSequence.__copy__", "generated/skbio.sequence.GrammaredSequence.__deepcopy__", "generated/skbio.sequence.GrammaredSequence.__eq__", "generated/skbio.sequence.GrammaredSequence.__ge__", "generated/skbio.sequence.GrammaredSequence.__getitem__", "generated/skbio.sequence.GrammaredSequence.__getstate__", "generated/skbio.sequence.GrammaredSequence.__gt__", "generated/skbio.sequence.GrammaredSequence.__iter__", "generated/skbio.sequence.GrammaredSequence.__le__", "generated/skbio.sequence.GrammaredSequence.__len__", "generated/skbio.sequence.GrammaredSequence.__lt__", "generated/skbio.sequence.GrammaredSequence.__ne__", "generated/skbio.sequence.GrammaredSequence.__reversed__", "generated/skbio.sequence.GrammaredSequence.__str__", "generated/skbio.sequence.GrammaredSequence.concat", "generated/skbio.sequence.GrammaredSequence.count", "generated/skbio.sequence.GrammaredSequence.definites", "generated/skbio.sequence.GrammaredSequence.degap", "generated/skbio.sequence.GrammaredSequence.degenerates", "generated/skbio.sequence.GrammaredSequence.distance", "generated/skbio.sequence.GrammaredSequence.expand_degenerates", "generated/skbio.sequence.GrammaredSequence.find_motifs", "generated/skbio.sequence.GrammaredSequence.find_with_regex", "generated/skbio.sequence.GrammaredSequence.frequencies", "generated/skbio.sequence.GrammaredSequence.gaps", "generated/skbio.sequence.GrammaredSequence.has_definites", "generated/skbio.sequence.GrammaredSequence.has_degenerates", "generated/skbio.sequence.GrammaredSequence.has_gaps", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata", "generated/skbio.sequence.GrammaredSequence.has_metadata", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata", "generated/skbio.sequence.GrammaredSequence.index", "generated/skbio.sequence.GrammaredSequence.iter_contiguous", "generated/skbio.sequence.GrammaredSequence.iter_kmers", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies", "generated/skbio.sequence.GrammaredSequence.lowercase", "generated/skbio.sequence.GrammaredSequence.match_frequency", "generated/skbio.sequence.GrammaredSequence.matches", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency", "generated/skbio.sequence.GrammaredSequence.mismatches", "generated/skbio.sequence.GrammaredSequence.nondegenerates", "generated/skbio.sequence.GrammaredSequence.read", "generated/skbio.sequence.GrammaredSequence.replace", "generated/skbio.sequence.GrammaredSequence.to_definites", "generated/skbio.sequence.GrammaredSequence.to_indices", "generated/skbio.sequence.GrammaredSequence.to_regex", "generated/skbio.sequence.GrammaredSequence.write", "generated/skbio.sequence.Protein", "generated/skbio.sequence.Protein.__bool__", "generated/skbio.sequence.Protein.__contains__", "generated/skbio.sequence.Protein.__copy__", "generated/skbio.sequence.Protein.__deepcopy__", "generated/skbio.sequence.Protein.__eq__", "generated/skbio.sequence.Protein.__ge__", "generated/skbio.sequence.Protein.__getitem__", "generated/skbio.sequence.Protein.__getstate__", "generated/skbio.sequence.Protein.__gt__", "generated/skbio.sequence.Protein.__iter__", "generated/skbio.sequence.Protein.__le__", "generated/skbio.sequence.Protein.__len__", "generated/skbio.sequence.Protein.__lt__", "generated/skbio.sequence.Protein.__ne__", "generated/skbio.sequence.Protein.__reversed__", "generated/skbio.sequence.Protein.__str__", "generated/skbio.sequence.Protein.concat", "generated/skbio.sequence.Protein.count", "generated/skbio.sequence.Protein.definites", "generated/skbio.sequence.Protein.degap", "generated/skbio.sequence.Protein.degenerates", "generated/skbio.sequence.Protein.distance", "generated/skbio.sequence.Protein.expand_degenerates", "generated/skbio.sequence.Protein.find_motifs", "generated/skbio.sequence.Protein.find_with_regex", "generated/skbio.sequence.Protein.frequencies", "generated/skbio.sequence.Protein.gaps", "generated/skbio.sequence.Protein.has_definites", "generated/skbio.sequence.Protein.has_degenerates", "generated/skbio.sequence.Protein.has_gaps", "generated/skbio.sequence.Protein.has_interval_metadata", "generated/skbio.sequence.Protein.has_metadata", "generated/skbio.sequence.Protein.has_nondegenerates", "generated/skbio.sequence.Protein.has_positional_metadata", "generated/skbio.sequence.Protein.has_stops", "generated/skbio.sequence.Protein.index", "generated/skbio.sequence.Protein.iter_contiguous", "generated/skbio.sequence.Protein.iter_kmers", "generated/skbio.sequence.Protein.kmer_frequencies", "generated/skbio.sequence.Protein.lowercase", "generated/skbio.sequence.Protein.match_frequency", "generated/skbio.sequence.Protein.matches", "generated/skbio.sequence.Protein.mismatch_frequency", "generated/skbio.sequence.Protein.mismatches", "generated/skbio.sequence.Protein.nondegenerates", "generated/skbio.sequence.Protein.read", "generated/skbio.sequence.Protein.replace", "generated/skbio.sequence.Protein.stops", "generated/skbio.sequence.Protein.to_definites", "generated/skbio.sequence.Protein.to_indices", "generated/skbio.sequence.Protein.to_regex", "generated/skbio.sequence.Protein.write", "generated/skbio.sequence.RNA", "generated/skbio.sequence.RNA.__bool__", "generated/skbio.sequence.RNA.__contains__", "generated/skbio.sequence.RNA.__copy__", "generated/skbio.sequence.RNA.__deepcopy__", "generated/skbio.sequence.RNA.__eq__", "generated/skbio.sequence.RNA.__ge__", "generated/skbio.sequence.RNA.__getitem__", "generated/skbio.sequence.RNA.__getstate__", "generated/skbio.sequence.RNA.__gt__", "generated/skbio.sequence.RNA.__iter__", "generated/skbio.sequence.RNA.__le__", "generated/skbio.sequence.RNA.__len__", "generated/skbio.sequence.RNA.__lt__", "generated/skbio.sequence.RNA.__ne__", "generated/skbio.sequence.RNA.__reversed__", "generated/skbio.sequence.RNA.__str__", "generated/skbio.sequence.RNA.complement", "generated/skbio.sequence.RNA.concat", "generated/skbio.sequence.RNA.count", "generated/skbio.sequence.RNA.definites", "generated/skbio.sequence.RNA.degap", "generated/skbio.sequence.RNA.degenerates", "generated/skbio.sequence.RNA.distance", "generated/skbio.sequence.RNA.expand_degenerates", "generated/skbio.sequence.RNA.find_motifs", "generated/skbio.sequence.RNA.find_with_regex", "generated/skbio.sequence.RNA.frequencies", "generated/skbio.sequence.RNA.gaps", "generated/skbio.sequence.RNA.gc_content", "generated/skbio.sequence.RNA.gc_frequency", "generated/skbio.sequence.RNA.has_definites", "generated/skbio.sequence.RNA.has_degenerates", "generated/skbio.sequence.RNA.has_gaps", "generated/skbio.sequence.RNA.has_interval_metadata", "generated/skbio.sequence.RNA.has_metadata", "generated/skbio.sequence.RNA.has_nondegenerates", "generated/skbio.sequence.RNA.has_positional_metadata", "generated/skbio.sequence.RNA.index", "generated/skbio.sequence.RNA.is_reverse_complement", "generated/skbio.sequence.RNA.iter_contiguous", "generated/skbio.sequence.RNA.iter_kmers", "generated/skbio.sequence.RNA.kmer_frequencies", "generated/skbio.sequence.RNA.lowercase", "generated/skbio.sequence.RNA.match_frequency", "generated/skbio.sequence.RNA.matches", "generated/skbio.sequence.RNA.mismatch_frequency", "generated/skbio.sequence.RNA.mismatches", "generated/skbio.sequence.RNA.nondegenerates", "generated/skbio.sequence.RNA.read", "generated/skbio.sequence.RNA.replace", "generated/skbio.sequence.RNA.reverse_complement", "generated/skbio.sequence.RNA.reverse_transcribe", "generated/skbio.sequence.RNA.to_definites", "generated/skbio.sequence.RNA.to_indices", "generated/skbio.sequence.RNA.to_regex", "generated/skbio.sequence.RNA.translate", "generated/skbio.sequence.RNA.translate_six_frames", "generated/skbio.sequence.RNA.write", "generated/skbio.sequence.Sequence", "generated/skbio.sequence.Sequence.__bool__", "generated/skbio.sequence.Sequence.__contains__", "generated/skbio.sequence.Sequence.__copy__", "generated/skbio.sequence.Sequence.__deepcopy__", "generated/skbio.sequence.Sequence.__eq__", "generated/skbio.sequence.Sequence.__ge__", "generated/skbio.sequence.Sequence.__getitem__", "generated/skbio.sequence.Sequence.__getstate__", "generated/skbio.sequence.Sequence.__gt__", "generated/skbio.sequence.Sequence.__iter__", "generated/skbio.sequence.Sequence.__le__", "generated/skbio.sequence.Sequence.__len__", "generated/skbio.sequence.Sequence.__lt__", "generated/skbio.sequence.Sequence.__ne__", "generated/skbio.sequence.Sequence.__reversed__", "generated/skbio.sequence.Sequence.__str__", "generated/skbio.sequence.Sequence.concat", "generated/skbio.sequence.Sequence.count", "generated/skbio.sequence.Sequence.distance", "generated/skbio.sequence.Sequence.find_with_regex", "generated/skbio.sequence.Sequence.frequencies", "generated/skbio.sequence.Sequence.has_interval_metadata", "generated/skbio.sequence.Sequence.has_metadata", "generated/skbio.sequence.Sequence.has_positional_metadata", "generated/skbio.sequence.Sequence.index", "generated/skbio.sequence.Sequence.iter_contiguous", "generated/skbio.sequence.Sequence.iter_kmers", "generated/skbio.sequence.Sequence.kmer_frequencies", "generated/skbio.sequence.Sequence.lowercase", "generated/skbio.sequence.Sequence.match_frequency", "generated/skbio.sequence.Sequence.matches", "generated/skbio.sequence.Sequence.mismatch_frequency", "generated/skbio.sequence.Sequence.mismatches", "generated/skbio.sequence.Sequence.read", "generated/skbio.sequence.Sequence.replace", "generated/skbio.sequence.Sequence.to_indices", "generated/skbio.sequence.Sequence.write", "generated/skbio.sequence.SubstitutionMatrix", "generated/skbio.sequence.SubstitutionMatrix.__contains__", "generated/skbio.sequence.SubstitutionMatrix.__eq__", "generated/skbio.sequence.SubstitutionMatrix.__ge__", "generated/skbio.sequence.SubstitutionMatrix.__getitem__", "generated/skbio.sequence.SubstitutionMatrix.__getstate__", "generated/skbio.sequence.SubstitutionMatrix.__gt__", "generated/skbio.sequence.SubstitutionMatrix.__le__", "generated/skbio.sequence.SubstitutionMatrix.__lt__", "generated/skbio.sequence.SubstitutionMatrix.__ne__", "generated/skbio.sequence.SubstitutionMatrix.__str__", "generated/skbio.sequence.SubstitutionMatrix.between", "generated/skbio.sequence.SubstitutionMatrix.by_name", "generated/skbio.sequence.SubstitutionMatrix.copy", "generated/skbio.sequence.SubstitutionMatrix.filter", "generated/skbio.sequence.SubstitutionMatrix.from_dict", "generated/skbio.sequence.SubstitutionMatrix.from_iterable", "generated/skbio.sequence.SubstitutionMatrix.get_names", "generated/skbio.sequence.SubstitutionMatrix.identity", "generated/skbio.sequence.SubstitutionMatrix.index", "generated/skbio.sequence.SubstitutionMatrix.plot", "generated/skbio.sequence.SubstitutionMatrix.read", "generated/skbio.sequence.SubstitutionMatrix.redundant_form", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame", "generated/skbio.sequence.SubstitutionMatrix.to_dict", "generated/skbio.sequence.SubstitutionMatrix.transpose", "generated/skbio.sequence.SubstitutionMatrix.within", "generated/skbio.sequence.SubstitutionMatrix.write", "generated/skbio.sequence.distance", "generated/skbio.sequence.distance.hamming", "generated/skbio.sequence.distance.kmer_distance", "generated/skbio.stats.composition", "generated/skbio.stats.composition.alr", "generated/skbio.stats.composition.alr_inv", "generated/skbio.stats.composition.ancom", "generated/skbio.stats.composition.centralize", "generated/skbio.stats.composition.closure", "generated/skbio.stats.composition.clr", "generated/skbio.stats.composition.clr_inv", "generated/skbio.stats.composition.dirmult_ttest", "generated/skbio.stats.composition.ilr", "generated/skbio.stats.composition.ilr_inv", "generated/skbio.stats.composition.inner", "generated/skbio.stats.composition.multi_replace", "generated/skbio.stats.composition.multiplicative_replacement", "generated/skbio.stats.composition.pairwise_vlr", "generated/skbio.stats.composition.perturb", "generated/skbio.stats.composition.perturb_inv", "generated/skbio.stats.composition.power", "generated/skbio.stats.composition.sbp_basis", "generated/skbio.stats.composition.tree_basis", "generated/skbio.stats.composition.vlr", "generated/skbio.stats.distance", "generated/skbio.stats.distance.DissimilarityMatrix", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__", "generated/skbio.stats.distance.DissimilarityMatrix.__le__", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__", "generated/skbio.stats.distance.DissimilarityMatrix.__str__", "generated/skbio.stats.distance.DissimilarityMatrix.between", "generated/skbio.stats.distance.DissimilarityMatrix.copy", "generated/skbio.stats.distance.DissimilarityMatrix.filter", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable", "generated/skbio.stats.distance.DissimilarityMatrix.index", "generated/skbio.stats.distance.DissimilarityMatrix.plot", "generated/skbio.stats.distance.DissimilarityMatrix.read", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame", "generated/skbio.stats.distance.DissimilarityMatrix.transpose", "generated/skbio.stats.distance.DissimilarityMatrix.within", "generated/skbio.stats.distance.DissimilarityMatrix.write", "generated/skbio.stats.distance.DissimilarityMatrixError", "generated/skbio.stats.distance.DistanceMatrix", "generated/skbio.stats.distance.DistanceMatrix.__contains__", "generated/skbio.stats.distance.DistanceMatrix.__eq__", "generated/skbio.stats.distance.DistanceMatrix.__ge__", "generated/skbio.stats.distance.DistanceMatrix.__getitem__", "generated/skbio.stats.distance.DistanceMatrix.__getstate__", "generated/skbio.stats.distance.DistanceMatrix.__gt__", "generated/skbio.stats.distance.DistanceMatrix.__le__", "generated/skbio.stats.distance.DistanceMatrix.__lt__", "generated/skbio.stats.distance.DistanceMatrix.__ne__", "generated/skbio.stats.distance.DistanceMatrix.__str__", "generated/skbio.stats.distance.DistanceMatrix.between", "generated/skbio.stats.distance.DistanceMatrix.condensed_form", "generated/skbio.stats.distance.DistanceMatrix.copy", "generated/skbio.stats.distance.DistanceMatrix.filter", "generated/skbio.stats.distance.DistanceMatrix.from_iterable", "generated/skbio.stats.distance.DistanceMatrix.index", "generated/skbio.stats.distance.DistanceMatrix.permute", "generated/skbio.stats.distance.DistanceMatrix.plot", "generated/skbio.stats.distance.DistanceMatrix.read", "generated/skbio.stats.distance.DistanceMatrix.redundant_form", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame", "generated/skbio.stats.distance.DistanceMatrix.to_series", "generated/skbio.stats.distance.DistanceMatrix.transpose", "generated/skbio.stats.distance.DistanceMatrix.within", "generated/skbio.stats.distance.DistanceMatrix.write", "generated/skbio.stats.distance.DistanceMatrixError", "generated/skbio.stats.distance.MissingIDError", "generated/skbio.stats.distance.anosim", "generated/skbio.stats.distance.bioenv", "generated/skbio.stats.distance.mantel", "generated/skbio.stats.distance.permanova", "generated/skbio.stats.distance.permdisp", "generated/skbio.stats.distance.pwmantel", "generated/skbio.stats.distance.randdm", "generated/skbio.stats.evolve", "generated/skbio.stats.evolve.hommola_cospeciation", "generated/skbio.stats.gradient", "generated/skbio.stats.gradient.AverageGradientANOVA", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.CategoryResults", "generated/skbio.stats.gradient.CategoryResults.__eq__", "generated/skbio.stats.gradient.CategoryResults.__ge__", "generated/skbio.stats.gradient.CategoryResults.__getstate__", "generated/skbio.stats.gradient.CategoryResults.__gt__", "generated/skbio.stats.gradient.CategoryResults.__hash__", "generated/skbio.stats.gradient.CategoryResults.__le__", "generated/skbio.stats.gradient.CategoryResults.__lt__", "generated/skbio.stats.gradient.CategoryResults.__ne__", "generated/skbio.stats.gradient.CategoryResults.__str__", "generated/skbio.stats.gradient.CategoryResults.to_files", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVA", "generated/skbio.stats.gradient.GradientANOVA.__eq__", "generated/skbio.stats.gradient.GradientANOVA.__ge__", "generated/skbio.stats.gradient.GradientANOVA.__getstate__", "generated/skbio.stats.gradient.GradientANOVA.__gt__", "generated/skbio.stats.gradient.GradientANOVA.__hash__", "generated/skbio.stats.gradient.GradientANOVA.__le__", "generated/skbio.stats.gradient.GradientANOVA.__lt__", "generated/skbio.stats.gradient.GradientANOVA.__ne__", "generated/skbio.stats.gradient.GradientANOVA.__str__", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVAResults", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__", "generated/skbio.stats.gradient.GradientANOVAResults.__le__", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__", "generated/skbio.stats.gradient.GradientANOVAResults.__str__", "generated/skbio.stats.gradient.GradientANOVAResults.to_files", "generated/skbio.stats.gradient.GroupResults", "generated/skbio.stats.gradient.GroupResults.__eq__", "generated/skbio.stats.gradient.GroupResults.__ge__", "generated/skbio.stats.gradient.GroupResults.__getstate__", "generated/skbio.stats.gradient.GroupResults.__gt__", "generated/skbio.stats.gradient.GroupResults.__hash__", "generated/skbio.stats.gradient.GroupResults.__le__", "generated/skbio.stats.gradient.GroupResults.__lt__", "generated/skbio.stats.gradient.GroupResults.__ne__", "generated/skbio.stats.gradient.GroupResults.__str__", "generated/skbio.stats.gradient.GroupResults.to_files", "generated/skbio.stats.gradient.TrajectoryGradientANOVA", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.isubsample", "generated/skbio.stats.ordination", "generated/skbio.stats.ordination.OrdinationResults", "generated/skbio.stats.ordination.OrdinationResults.__eq__", "generated/skbio.stats.ordination.OrdinationResults.__ge__", "generated/skbio.stats.ordination.OrdinationResults.__getstate__", "generated/skbio.stats.ordination.OrdinationResults.__gt__", "generated/skbio.stats.ordination.OrdinationResults.__hash__", "generated/skbio.stats.ordination.OrdinationResults.__le__", "generated/skbio.stats.ordination.OrdinationResults.__lt__", "generated/skbio.stats.ordination.OrdinationResults.__ne__", "generated/skbio.stats.ordination.OrdinationResults.__str__", "generated/skbio.stats.ordination.OrdinationResults.plot", "generated/skbio.stats.ordination.OrdinationResults.read", "generated/skbio.stats.ordination.OrdinationResults.write", "generated/skbio.stats.ordination.ca", "generated/skbio.stats.ordination.cca", "generated/skbio.stats.ordination.corr", "generated/skbio.stats.ordination.e_matrix", "generated/skbio.stats.ordination.f_matrix", "generated/skbio.stats.ordination.mean_and_std", "generated/skbio.stats.ordination.pcoa", "generated/skbio.stats.ordination.pcoa_biplot", "generated/skbio.stats.ordination.rda", "generated/skbio.stats.ordination.scale", "generated/skbio.stats.ordination.svd_rank", "generated/skbio.stats.power", "generated/skbio.stats.power.confidence_bound", "generated/skbio.stats.power.paired_subsamples", "generated/skbio.stats.power.subsample_paired_power", "generated/skbio.stats.power.subsample_power", "generated/skbio.stats.subsample_counts", "generated/skbio.tree.DuplicateNodeError", "generated/skbio.tree.MissingNodeError", "generated/skbio.tree.NoLengthError", "generated/skbio.tree.NoParentError", "generated/skbio.tree.TreeError", "generated/skbio.tree.TreeNode", "generated/skbio.tree.TreeNode.__copy__", "generated/skbio.tree.TreeNode.__deepcopy__", "generated/skbio.tree.TreeNode.__eq__", "generated/skbio.tree.TreeNode.__ge__", "generated/skbio.tree.TreeNode.__getitem__", "generated/skbio.tree.TreeNode.__getstate__", "generated/skbio.tree.TreeNode.__gt__", "generated/skbio.tree.TreeNode.__hash__", "generated/skbio.tree.TreeNode.__iter__", "generated/skbio.tree.TreeNode.__le__", "generated/skbio.tree.TreeNode.__len__", "generated/skbio.tree.TreeNode.__lt__", "generated/skbio.tree.TreeNode.__ne__", "generated/skbio.tree.TreeNode.__str__", "generated/skbio.tree.TreeNode.accumulate_to_ancestor", "generated/skbio.tree.TreeNode.ancestors", "generated/skbio.tree.TreeNode.append", "generated/skbio.tree.TreeNode.ascii_art", "generated/skbio.tree.TreeNode.assign_ids", "generated/skbio.tree.TreeNode.assign_supports", "generated/skbio.tree.TreeNode.bifurcate", "generated/skbio.tree.TreeNode.cache_attr", "generated/skbio.tree.TreeNode.compare_rfd", "generated/skbio.tree.TreeNode.compare_subsets", "generated/skbio.tree.TreeNode.compare_tip_distances", "generated/skbio.tree.TreeNode.copy", "generated/skbio.tree.TreeNode.count", "generated/skbio.tree.TreeNode.create_caches", "generated/skbio.tree.TreeNode.deepcopy", "generated/skbio.tree.TreeNode.descending_branch_length", "generated/skbio.tree.TreeNode.distance", "generated/skbio.tree.TreeNode.extend", "generated/skbio.tree.TreeNode.find", "generated/skbio.tree.TreeNode.find_all", "generated/skbio.tree.TreeNode.find_by_func", "generated/skbio.tree.TreeNode.find_by_id", "generated/skbio.tree.TreeNode.from_linkage_matrix", "generated/skbio.tree.TreeNode.from_taxdump", "generated/skbio.tree.TreeNode.from_taxonomy", "generated/skbio.tree.TreeNode.get_max_distance", "generated/skbio.tree.TreeNode.has_children", "generated/skbio.tree.TreeNode.index_tree", "generated/skbio.tree.TreeNode.invalidate_caches", "generated/skbio.tree.TreeNode.is_root", "generated/skbio.tree.TreeNode.is_tip", "generated/skbio.tree.TreeNode.lca", "generated/skbio.tree.TreeNode.levelorder", "generated/skbio.tree.TreeNode.lowest_common_ancestor", "generated/skbio.tree.TreeNode.neighbors", "generated/skbio.tree.TreeNode.non_tips", "generated/skbio.tree.TreeNode.observed_node_counts", "generated/skbio.tree.TreeNode.pop", "generated/skbio.tree.TreeNode.postorder", "generated/skbio.tree.TreeNode.pre_and_postorder", "generated/skbio.tree.TreeNode.preorder", "generated/skbio.tree.TreeNode.prune", "generated/skbio.tree.TreeNode.read", "generated/skbio.tree.TreeNode.remove", "generated/skbio.tree.TreeNode.remove_deleted", "generated/skbio.tree.TreeNode.root", "generated/skbio.tree.TreeNode.root_at", "generated/skbio.tree.TreeNode.root_at_midpoint", "generated/skbio.tree.TreeNode.shear", "generated/skbio.tree.TreeNode.shuffle", "generated/skbio.tree.TreeNode.siblings", "generated/skbio.tree.TreeNode.subset", "generated/skbio.tree.TreeNode.subsets", "generated/skbio.tree.TreeNode.subtree", "generated/skbio.tree.TreeNode.tip_tip_distances", "generated/skbio.tree.TreeNode.tips", "generated/skbio.tree.TreeNode.to_array", "generated/skbio.tree.TreeNode.to_taxonomy", "generated/skbio.tree.TreeNode.traverse", "generated/skbio.tree.TreeNode.unpack", "generated/skbio.tree.TreeNode.unpack_by_func", "generated/skbio.tree.TreeNode.unrooted_copy", "generated/skbio.tree.TreeNode.unrooted_deepcopy", "generated/skbio.tree.TreeNode.write", "generated/skbio.tree.majority_rule", "generated/skbio.tree.nj", "generated/skbio.util.EfficiencyWarning", "generated/skbio.util.RepresentationWarning", "generated/skbio.util.assert_data_frame_almost_equal", "generated/skbio.util.assert_ordination_results_equal", "generated/skbio.util.cardinal_to_ordinal", "generated/skbio.util.classproperty", "generated/skbio.util.classproperty.__delete__", "generated/skbio.util.classproperty.__eq__", "generated/skbio.util.classproperty.__ge__", "generated/skbio.util.classproperty.__get__", "generated/skbio.util.classproperty.__getstate__", "generated/skbio.util.classproperty.__gt__", "generated/skbio.util.classproperty.__hash__", "generated/skbio.util.classproperty.__le__", "generated/skbio.util.classproperty.__lt__", "generated/skbio.util.classproperty.__ne__", "generated/skbio.util.classproperty.__set__", "generated/skbio.util.classproperty.__set_name__", "generated/skbio.util.classproperty.__str__", "generated/skbio.util.classproperty.deleter", "generated/skbio.util.classproperty.getter", "generated/skbio.util.classproperty.setter", "generated/skbio.util.find_duplicates", "generated/skbio.util.get_data_path", "generated/skbio.util.safe_md5", "generated/skbio.workflow.Workflow", "generated/skbio.workflow.Workflow.__call__", "generated/skbio.workflow.Workflow.__eq__", "generated/skbio.workflow.Workflow.__ge__", "generated/skbio.workflow.Workflow.__getstate__", "generated/skbio.workflow.Workflow.__gt__", "generated/skbio.workflow.Workflow.__hash__", "generated/skbio.workflow.Workflow.__le__", "generated/skbio.workflow.Workflow.__lt__", "generated/skbio.workflow.Workflow.__ne__", "generated/skbio.workflow.Workflow.__str__", "generated/skbio.workflow.Workflow.initialize_state", "generated/skbio.workflow.method", "generated/skbio.workflow.method.__call__", "generated/skbio.workflow.method.__eq__", "generated/skbio.workflow.method.__ge__", "generated/skbio.workflow.method.__getstate__", "generated/skbio.workflow.method.__gt__", "generated/skbio.workflow.method.__hash__", "generated/skbio.workflow.method.__le__", "generated/skbio.workflow.method.__lt__", "generated/skbio.workflow.method.__ne__", "generated/skbio.workflow.method.__str__", "generated/skbio.workflow.requires", "generated/skbio.workflow.requires.__call__", "generated/skbio.workflow.requires.__eq__", "generated/skbio.workflow.requires.__ge__", "generated/skbio.workflow.requires.__getstate__", "generated/skbio.workflow.requires.__gt__", "generated/skbio.workflow.requires.__hash__", "generated/skbio.workflow.requires.__le__", "generated/skbio.workflow.requires.__lt__", "generated/skbio.workflow.requires.__ne__", "generated/skbio.workflow.requires.__str__", "index", "io", "metadata", "sequence", "stats", "table", "tree", "util", "workflow"], "filenames": ["alignment.rst", "diversity.rst", "generated/skbio.alignment.AlignmentStructure.rst", "generated/skbio.alignment.AlignmentStructure.__eq__.rst", "generated/skbio.alignment.AlignmentStructure.__ge__.rst", "generated/skbio.alignment.AlignmentStructure.__getitem__.rst", "generated/skbio.alignment.AlignmentStructure.__getstate__.rst", "generated/skbio.alignment.AlignmentStructure.__gt__.rst", "generated/skbio.alignment.AlignmentStructure.__hash__.rst", "generated/skbio.alignment.AlignmentStructure.__le__.rst", "generated/skbio.alignment.AlignmentStructure.__lt__.rst", "generated/skbio.alignment.AlignmentStructure.__ne__.rst", "generated/skbio.alignment.AlignmentStructure.__setstate__.rst", "generated/skbio.alignment.AlignmentStructure.__str__.rst", "generated/skbio.alignment.AlignmentStructure.is_zero_based.rst", "generated/skbio.alignment.AlignmentStructure.set_zero_based.rst", "generated/skbio.alignment.StripedSmithWaterman.rst", "generated/skbio.alignment.StripedSmithWaterman.__call__.rst", "generated/skbio.alignment.StripedSmithWaterman.__eq__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ge__.rst", "generated/skbio.alignment.StripedSmithWaterman.__getstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__gt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__hash__.rst", "generated/skbio.alignment.StripedSmithWaterman.__le__.rst", "generated/skbio.alignment.StripedSmithWaterman.__lt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ne__.rst", "generated/skbio.alignment.StripedSmithWaterman.__setstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__str__.rst", "generated/skbio.alignment.TabularMSA.rst", "generated/skbio.alignment.TabularMSA.__bool__.rst", "generated/skbio.alignment.TabularMSA.__contains__.rst", "generated/skbio.alignment.TabularMSA.__copy__.rst", "generated/skbio.alignment.TabularMSA.__deepcopy__.rst", "generated/skbio.alignment.TabularMSA.__eq__.rst", "generated/skbio.alignment.TabularMSA.__ge__.rst", "generated/skbio.alignment.TabularMSA.__getitem__.rst", "generated/skbio.alignment.TabularMSA.__getstate__.rst", "generated/skbio.alignment.TabularMSA.__gt__.rst", "generated/skbio.alignment.TabularMSA.__iter__.rst", "generated/skbio.alignment.TabularMSA.__le__.rst", "generated/skbio.alignment.TabularMSA.__len__.rst", "generated/skbio.alignment.TabularMSA.__lt__.rst", "generated/skbio.alignment.TabularMSA.__ne__.rst", "generated/skbio.alignment.TabularMSA.__reversed__.rst", "generated/skbio.alignment.TabularMSA.__str__.rst", "generated/skbio.alignment.TabularMSA.append.rst", "generated/skbio.alignment.TabularMSA.consensus.rst", "generated/skbio.alignment.TabularMSA.conservation.rst", "generated/skbio.alignment.TabularMSA.extend.rst", "generated/skbio.alignment.TabularMSA.from_dict.rst", "generated/skbio.alignment.TabularMSA.gap_frequencies.rst", "generated/skbio.alignment.TabularMSA.has_metadata.rst", "generated/skbio.alignment.TabularMSA.has_positional_metadata.rst", "generated/skbio.alignment.TabularMSA.iter_positions.rst", "generated/skbio.alignment.TabularMSA.join.rst", "generated/skbio.alignment.TabularMSA.read.rst", "generated/skbio.alignment.TabularMSA.reassign_index.rst", "generated/skbio.alignment.TabularMSA.sort.rst", "generated/skbio.alignment.TabularMSA.to_dict.rst", "generated/skbio.alignment.TabularMSA.write.rst", "generated/skbio.alignment.global_pairwise_align.rst", "generated/skbio.alignment.global_pairwise_align_nucleotide.rst", "generated/skbio.alignment.global_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align.rst", "generated/skbio.alignment.local_pairwise_align_nucleotide.rst", "generated/skbio.alignment.local_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align_ssw.rst", "generated/skbio.alignment.make_identity_substitution_matrix.rst", "generated/skbio.diversity.alpha.rst", "generated/skbio.diversity.alpha.ace.rst", "generated/skbio.diversity.alpha.berger_parker_d.rst", "generated/skbio.diversity.alpha.brillouin_d.rst", "generated/skbio.diversity.alpha.chao1.rst", "generated/skbio.diversity.alpha.chao1_ci.rst", "generated/skbio.diversity.alpha.dominance.rst", "generated/skbio.diversity.alpha.doubles.rst", "generated/skbio.diversity.alpha.enspie.rst", "generated/skbio.diversity.alpha.esty_ci.rst", "generated/skbio.diversity.alpha.faith_pd.rst", "generated/skbio.diversity.alpha.fisher_alpha.rst", "generated/skbio.diversity.alpha.gini_index.rst", "generated/skbio.diversity.alpha.goods_coverage.rst", "generated/skbio.diversity.alpha.heip_e.rst", "generated/skbio.diversity.alpha.kempton_taylor_q.rst", "generated/skbio.diversity.alpha.lladser_ci.rst", "generated/skbio.diversity.alpha.lladser_pe.rst", "generated/skbio.diversity.alpha.margalef.rst", "generated/skbio.diversity.alpha.mcintosh_d.rst", "generated/skbio.diversity.alpha.mcintosh_e.rst", "generated/skbio.diversity.alpha.menhinick.rst", "generated/skbio.diversity.alpha.michaelis_menten_fit.rst", "generated/skbio.diversity.alpha.observed_features.rst", "generated/skbio.diversity.alpha.observed_otus.rst", "generated/skbio.diversity.alpha.osd.rst", "generated/skbio.diversity.alpha.phydiv.rst", "generated/skbio.diversity.alpha.pielou_e.rst", "generated/skbio.diversity.alpha.robbins.rst", "generated/skbio.diversity.alpha.shannon.rst", "generated/skbio.diversity.alpha.simpson.rst", "generated/skbio.diversity.alpha.simpson_e.rst", "generated/skbio.diversity.alpha.singles.rst", "generated/skbio.diversity.alpha.sobs.rst", "generated/skbio.diversity.alpha.strong.rst", "generated/skbio.diversity.alpha_diversity.rst", "generated/skbio.diversity.beta.rst", "generated/skbio.diversity.beta.unweighted_unifrac.rst", "generated/skbio.diversity.beta.weighted_unifrac.rst", "generated/skbio.diversity.beta_diversity.rst", "generated/skbio.diversity.block_beta_diversity.rst", "generated/skbio.diversity.get_alpha_diversity_metrics.rst", "generated/skbio.diversity.get_beta_diversity_metrics.rst", "generated/skbio.diversity.partial_beta_diversity.rst", "generated/skbio.io.ArgumentOverrideWarning.rst", "generated/skbio.io.BLAST7FormatError.rst", "generated/skbio.io.ClustalFormatError.rst", "generated/skbio.io.EMBLFormatError.rst", "generated/skbio.io.FASTAFormatError.rst", "generated/skbio.io.FASTQFormatError.rst", "generated/skbio.io.FileFormatError.rst", "generated/skbio.io.FormatIdentificationWarning.rst", "generated/skbio.io.GFF3FormatError.rst", "generated/skbio.io.GenBankFormatError.rst", "generated/skbio.io.IOSourceError.rst", "generated/skbio.io.LSMatFormatError.rst", "generated/skbio.io.NewickFormatError.rst", "generated/skbio.io.OrdinationFormatError.rst", "generated/skbio.io.PhylipFormatError.rst", "generated/skbio.io.QSeqFormatError.rst", "generated/skbio.io.QUALFormatError.rst", "generated/skbio.io.StockholmFormatError.rst", "generated/skbio.io.UnrecognizedFormatError.rst", "generated/skbio.io.format.binary_dm.rst", "generated/skbio.io.format.biom.rst", "generated/skbio.io.format.blast6.rst", "generated/skbio.io.format.blast7.rst", "generated/skbio.io.format.clustal.rst", "generated/skbio.io.format.embl.rst", "generated/skbio.io.format.fasta.rst", "generated/skbio.io.format.fastq.rst", "generated/skbio.io.format.genbank.rst", "generated/skbio.io.format.gff3.rst", "generated/skbio.io.format.lsmat.rst", "generated/skbio.io.format.newick.rst", "generated/skbio.io.format.ordination.rst", "generated/skbio.io.format.phylip.rst", "generated/skbio.io.format.qseq.rst", "generated/skbio.io.format.sample_metadata.rst", "generated/skbio.io.format.stockholm.rst", "generated/skbio.io.format.taxdump.rst", "generated/skbio.io.registry.rst", "generated/skbio.io.registry.DuplicateRegistrationError.rst", "generated/skbio.io.registry.Format.rst", "generated/skbio.io.registry.Format.__eq__.rst", "generated/skbio.io.registry.Format.__ge__.rst", "generated/skbio.io.registry.Format.__getstate__.rst", "generated/skbio.io.registry.Format.__gt__.rst", "generated/skbio.io.registry.Format.__hash__.rst", "generated/skbio.io.registry.Format.__le__.rst", "generated/skbio.io.registry.Format.__lt__.rst", "generated/skbio.io.registry.Format.__ne__.rst", "generated/skbio.io.registry.Format.__str__.rst", "generated/skbio.io.registry.Format.reader.rst", "generated/skbio.io.registry.Format.sniffer.rst", "generated/skbio.io.registry.Format.writer.rst", "generated/skbio.io.registry.IORegistry.rst", "generated/skbio.io.registry.IORegistry.__eq__.rst", "generated/skbio.io.registry.IORegistry.__ge__.rst", "generated/skbio.io.registry.IORegistry.__getstate__.rst", "generated/skbio.io.registry.IORegistry.__gt__.rst", "generated/skbio.io.registry.IORegistry.__hash__.rst", "generated/skbio.io.registry.IORegistry.__le__.rst", "generated/skbio.io.registry.IORegistry.__lt__.rst", "generated/skbio.io.registry.IORegistry.__ne__.rst", "generated/skbio.io.registry.IORegistry.__str__.rst", "generated/skbio.io.registry.IORegistry.add_format.rst", "generated/skbio.io.registry.IORegistry.create_format.rst", "generated/skbio.io.registry.IORegistry.get_reader.rst", "generated/skbio.io.registry.IORegistry.get_sniffer.rst", "generated/skbio.io.registry.IORegistry.get_writer.rst", "generated/skbio.io.registry.IORegistry.list_read_formats.rst", "generated/skbio.io.registry.IORegistry.list_write_formats.rst", "generated/skbio.io.registry.IORegistry.monkey_patch.rst", "generated/skbio.io.registry.IORegistry.read.rst", "generated/skbio.io.registry.IORegistry.sniff.rst", "generated/skbio.io.registry.IORegistry.write.rst", "generated/skbio.io.registry.InvalidRegistrationError.rst", "generated/skbio.io.registry.create_format.rst", "generated/skbio.io.registry.read.rst", "generated/skbio.io.registry.sniff.rst", "generated/skbio.io.registry.write.rst", "generated/skbio.io.util.rst", "generated/skbio.io.util.open.rst", "generated/skbio.io.util.open_file.rst", "generated/skbio.io.util.open_files.rst", "generated/skbio.metadata.Interval.rst", "generated/skbio.metadata.Interval.__eq__.rst", "generated/skbio.metadata.Interval.__ge__.rst", "generated/skbio.metadata.Interval.__getstate__.rst", "generated/skbio.metadata.Interval.__gt__.rst", "generated/skbio.metadata.Interval.__le__.rst", "generated/skbio.metadata.Interval.__lt__.rst", "generated/skbio.metadata.Interval.__ne__.rst", "generated/skbio.metadata.Interval.__str__.rst", "generated/skbio.metadata.Interval.drop.rst", "generated/skbio.metadata.IntervalMetadata.rst", "generated/skbio.metadata.IntervalMetadata.__copy__.rst", "generated/skbio.metadata.IntervalMetadata.__deepcopy__.rst", "generated/skbio.metadata.IntervalMetadata.__eq__.rst", "generated/skbio.metadata.IntervalMetadata.__ge__.rst", "generated/skbio.metadata.IntervalMetadata.__getstate__.rst", "generated/skbio.metadata.IntervalMetadata.__gt__.rst", "generated/skbio.metadata.IntervalMetadata.__le__.rst", "generated/skbio.metadata.IntervalMetadata.__lt__.rst", "generated/skbio.metadata.IntervalMetadata.__ne__.rst", "generated/skbio.metadata.IntervalMetadata.__str__.rst", "generated/skbio.metadata.IntervalMetadata.add.rst", "generated/skbio.metadata.IntervalMetadata.concat.rst", "generated/skbio.metadata.IntervalMetadata.drop.rst", "generated/skbio.metadata.IntervalMetadata.merge.rst", "generated/skbio.metadata.IntervalMetadata.query.rst", "generated/skbio.metadata.IntervalMetadata.read.rst", "generated/skbio.metadata.IntervalMetadata.sort.rst", "generated/skbio.metadata.IntervalMetadata.write.rst", "generated/skbio.sequence.DNA.rst", "generated/skbio.sequence.DNA.__bool__.rst", "generated/skbio.sequence.DNA.__contains__.rst", "generated/skbio.sequence.DNA.__copy__.rst", "generated/skbio.sequence.DNA.__deepcopy__.rst", "generated/skbio.sequence.DNA.__eq__.rst", "generated/skbio.sequence.DNA.__ge__.rst", "generated/skbio.sequence.DNA.__getitem__.rst", "generated/skbio.sequence.DNA.__getstate__.rst", "generated/skbio.sequence.DNA.__gt__.rst", "generated/skbio.sequence.DNA.__iter__.rst", "generated/skbio.sequence.DNA.__le__.rst", "generated/skbio.sequence.DNA.__len__.rst", "generated/skbio.sequence.DNA.__lt__.rst", "generated/skbio.sequence.DNA.__ne__.rst", "generated/skbio.sequence.DNA.__reversed__.rst", "generated/skbio.sequence.DNA.__str__.rst", "generated/skbio.sequence.DNA.complement.rst", "generated/skbio.sequence.DNA.concat.rst", "generated/skbio.sequence.DNA.count.rst", "generated/skbio.sequence.DNA.definites.rst", "generated/skbio.sequence.DNA.degap.rst", "generated/skbio.sequence.DNA.degenerates.rst", "generated/skbio.sequence.DNA.distance.rst", "generated/skbio.sequence.DNA.expand_degenerates.rst", "generated/skbio.sequence.DNA.find_motifs.rst", "generated/skbio.sequence.DNA.find_with_regex.rst", "generated/skbio.sequence.DNA.frequencies.rst", "generated/skbio.sequence.DNA.gaps.rst", "generated/skbio.sequence.DNA.gc_content.rst", "generated/skbio.sequence.DNA.gc_frequency.rst", "generated/skbio.sequence.DNA.has_definites.rst", "generated/skbio.sequence.DNA.has_degenerates.rst", "generated/skbio.sequence.DNA.has_gaps.rst", "generated/skbio.sequence.DNA.has_interval_metadata.rst", "generated/skbio.sequence.DNA.has_metadata.rst", "generated/skbio.sequence.DNA.has_nondegenerates.rst", "generated/skbio.sequence.DNA.has_positional_metadata.rst", "generated/skbio.sequence.DNA.index.rst", "generated/skbio.sequence.DNA.is_reverse_complement.rst", "generated/skbio.sequence.DNA.iter_contiguous.rst", "generated/skbio.sequence.DNA.iter_kmers.rst", "generated/skbio.sequence.DNA.kmer_frequencies.rst", "generated/skbio.sequence.DNA.lowercase.rst", "generated/skbio.sequence.DNA.match_frequency.rst", "generated/skbio.sequence.DNA.matches.rst", "generated/skbio.sequence.DNA.mismatch_frequency.rst", "generated/skbio.sequence.DNA.mismatches.rst", "generated/skbio.sequence.DNA.nondegenerates.rst", "generated/skbio.sequence.DNA.read.rst", "generated/skbio.sequence.DNA.replace.rst", "generated/skbio.sequence.DNA.reverse_complement.rst", "generated/skbio.sequence.DNA.to_definites.rst", "generated/skbio.sequence.DNA.to_indices.rst", "generated/skbio.sequence.DNA.to_regex.rst", "generated/skbio.sequence.DNA.transcribe.rst", "generated/skbio.sequence.DNA.translate.rst", "generated/skbio.sequence.DNA.translate_six_frames.rst", "generated/skbio.sequence.DNA.write.rst", "generated/skbio.sequence.GeneticCode.rst", "generated/skbio.sequence.GeneticCode.__eq__.rst", "generated/skbio.sequence.GeneticCode.__ge__.rst", "generated/skbio.sequence.GeneticCode.__getstate__.rst", "generated/skbio.sequence.GeneticCode.__gt__.rst", "generated/skbio.sequence.GeneticCode.__le__.rst", "generated/skbio.sequence.GeneticCode.__lt__.rst", "generated/skbio.sequence.GeneticCode.__ne__.rst", "generated/skbio.sequence.GeneticCode.__str__.rst", "generated/skbio.sequence.GeneticCode.from_ncbi.rst", "generated/skbio.sequence.GeneticCode.translate.rst", "generated/skbio.sequence.GeneticCode.translate_six_frames.rst", "generated/skbio.sequence.GrammaredSequence.rst", "generated/skbio.sequence.GrammaredSequence.__bool__.rst", "generated/skbio.sequence.GrammaredSequence.__contains__.rst", "generated/skbio.sequence.GrammaredSequence.__copy__.rst", "generated/skbio.sequence.GrammaredSequence.__deepcopy__.rst", "generated/skbio.sequence.GrammaredSequence.__eq__.rst", "generated/skbio.sequence.GrammaredSequence.__ge__.rst", "generated/skbio.sequence.GrammaredSequence.__getitem__.rst", "generated/skbio.sequence.GrammaredSequence.__getstate__.rst", "generated/skbio.sequence.GrammaredSequence.__gt__.rst", "generated/skbio.sequence.GrammaredSequence.__iter__.rst", "generated/skbio.sequence.GrammaredSequence.__le__.rst", "generated/skbio.sequence.GrammaredSequence.__len__.rst", "generated/skbio.sequence.GrammaredSequence.__lt__.rst", "generated/skbio.sequence.GrammaredSequence.__ne__.rst", "generated/skbio.sequence.GrammaredSequence.__reversed__.rst", "generated/skbio.sequence.GrammaredSequence.__str__.rst", "generated/skbio.sequence.GrammaredSequence.concat.rst", "generated/skbio.sequence.GrammaredSequence.count.rst", "generated/skbio.sequence.GrammaredSequence.definites.rst", "generated/skbio.sequence.GrammaredSequence.degap.rst", "generated/skbio.sequence.GrammaredSequence.degenerates.rst", "generated/skbio.sequence.GrammaredSequence.distance.rst", "generated/skbio.sequence.GrammaredSequence.expand_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.find_motifs.rst", "generated/skbio.sequence.GrammaredSequence.find_with_regex.rst", "generated/skbio.sequence.GrammaredSequence.frequencies.rst", "generated/skbio.sequence.GrammaredSequence.gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_definites.rst", "generated/skbio.sequence.GrammaredSequence.has_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata.rst", "generated/skbio.sequence.GrammaredSequence.index.rst", "generated/skbio.sequence.GrammaredSequence.iter_contiguous.rst", "generated/skbio.sequence.GrammaredSequence.iter_kmers.rst", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies.rst", "generated/skbio.sequence.GrammaredSequence.lowercase.rst", "generated/skbio.sequence.GrammaredSequence.match_frequency.rst", "generated/skbio.sequence.GrammaredSequence.matches.rst", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency.rst", "generated/skbio.sequence.GrammaredSequence.mismatches.rst", "generated/skbio.sequence.GrammaredSequence.nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.read.rst", "generated/skbio.sequence.GrammaredSequence.replace.rst", "generated/skbio.sequence.GrammaredSequence.to_definites.rst", "generated/skbio.sequence.GrammaredSequence.to_indices.rst", "generated/skbio.sequence.GrammaredSequence.to_regex.rst", "generated/skbio.sequence.GrammaredSequence.write.rst", "generated/skbio.sequence.Protein.rst", "generated/skbio.sequence.Protein.__bool__.rst", "generated/skbio.sequence.Protein.__contains__.rst", "generated/skbio.sequence.Protein.__copy__.rst", "generated/skbio.sequence.Protein.__deepcopy__.rst", "generated/skbio.sequence.Protein.__eq__.rst", "generated/skbio.sequence.Protein.__ge__.rst", "generated/skbio.sequence.Protein.__getitem__.rst", "generated/skbio.sequence.Protein.__getstate__.rst", "generated/skbio.sequence.Protein.__gt__.rst", "generated/skbio.sequence.Protein.__iter__.rst", "generated/skbio.sequence.Protein.__le__.rst", "generated/skbio.sequence.Protein.__len__.rst", "generated/skbio.sequence.Protein.__lt__.rst", "generated/skbio.sequence.Protein.__ne__.rst", "generated/skbio.sequence.Protein.__reversed__.rst", "generated/skbio.sequence.Protein.__str__.rst", "generated/skbio.sequence.Protein.concat.rst", "generated/skbio.sequence.Protein.count.rst", "generated/skbio.sequence.Protein.definites.rst", "generated/skbio.sequence.Protein.degap.rst", "generated/skbio.sequence.Protein.degenerates.rst", "generated/skbio.sequence.Protein.distance.rst", "generated/skbio.sequence.Protein.expand_degenerates.rst", "generated/skbio.sequence.Protein.find_motifs.rst", "generated/skbio.sequence.Protein.find_with_regex.rst", "generated/skbio.sequence.Protein.frequencies.rst", "generated/skbio.sequence.Protein.gaps.rst", "generated/skbio.sequence.Protein.has_definites.rst", "generated/skbio.sequence.Protein.has_degenerates.rst", "generated/skbio.sequence.Protein.has_gaps.rst", "generated/skbio.sequence.Protein.has_interval_metadata.rst", "generated/skbio.sequence.Protein.has_metadata.rst", "generated/skbio.sequence.Protein.has_nondegenerates.rst", "generated/skbio.sequence.Protein.has_positional_metadata.rst", "generated/skbio.sequence.Protein.has_stops.rst", "generated/skbio.sequence.Protein.index.rst", "generated/skbio.sequence.Protein.iter_contiguous.rst", "generated/skbio.sequence.Protein.iter_kmers.rst", "generated/skbio.sequence.Protein.kmer_frequencies.rst", "generated/skbio.sequence.Protein.lowercase.rst", "generated/skbio.sequence.Protein.match_frequency.rst", "generated/skbio.sequence.Protein.matches.rst", "generated/skbio.sequence.Protein.mismatch_frequency.rst", "generated/skbio.sequence.Protein.mismatches.rst", "generated/skbio.sequence.Protein.nondegenerates.rst", "generated/skbio.sequence.Protein.read.rst", "generated/skbio.sequence.Protein.replace.rst", "generated/skbio.sequence.Protein.stops.rst", "generated/skbio.sequence.Protein.to_definites.rst", "generated/skbio.sequence.Protein.to_indices.rst", "generated/skbio.sequence.Protein.to_regex.rst", "generated/skbio.sequence.Protein.write.rst", "generated/skbio.sequence.RNA.rst", "generated/skbio.sequence.RNA.__bool__.rst", "generated/skbio.sequence.RNA.__contains__.rst", "generated/skbio.sequence.RNA.__copy__.rst", "generated/skbio.sequence.RNA.__deepcopy__.rst", "generated/skbio.sequence.RNA.__eq__.rst", "generated/skbio.sequence.RNA.__ge__.rst", "generated/skbio.sequence.RNA.__getitem__.rst", "generated/skbio.sequence.RNA.__getstate__.rst", "generated/skbio.sequence.RNA.__gt__.rst", "generated/skbio.sequence.RNA.__iter__.rst", "generated/skbio.sequence.RNA.__le__.rst", "generated/skbio.sequence.RNA.__len__.rst", "generated/skbio.sequence.RNA.__lt__.rst", "generated/skbio.sequence.RNA.__ne__.rst", "generated/skbio.sequence.RNA.__reversed__.rst", "generated/skbio.sequence.RNA.__str__.rst", "generated/skbio.sequence.RNA.complement.rst", "generated/skbio.sequence.RNA.concat.rst", "generated/skbio.sequence.RNA.count.rst", "generated/skbio.sequence.RNA.definites.rst", "generated/skbio.sequence.RNA.degap.rst", "generated/skbio.sequence.RNA.degenerates.rst", "generated/skbio.sequence.RNA.distance.rst", "generated/skbio.sequence.RNA.expand_degenerates.rst", "generated/skbio.sequence.RNA.find_motifs.rst", "generated/skbio.sequence.RNA.find_with_regex.rst", "generated/skbio.sequence.RNA.frequencies.rst", "generated/skbio.sequence.RNA.gaps.rst", "generated/skbio.sequence.RNA.gc_content.rst", "generated/skbio.sequence.RNA.gc_frequency.rst", "generated/skbio.sequence.RNA.has_definites.rst", "generated/skbio.sequence.RNA.has_degenerates.rst", "generated/skbio.sequence.RNA.has_gaps.rst", "generated/skbio.sequence.RNA.has_interval_metadata.rst", "generated/skbio.sequence.RNA.has_metadata.rst", "generated/skbio.sequence.RNA.has_nondegenerates.rst", "generated/skbio.sequence.RNA.has_positional_metadata.rst", "generated/skbio.sequence.RNA.index.rst", "generated/skbio.sequence.RNA.is_reverse_complement.rst", "generated/skbio.sequence.RNA.iter_contiguous.rst", "generated/skbio.sequence.RNA.iter_kmers.rst", "generated/skbio.sequence.RNA.kmer_frequencies.rst", "generated/skbio.sequence.RNA.lowercase.rst", "generated/skbio.sequence.RNA.match_frequency.rst", "generated/skbio.sequence.RNA.matches.rst", "generated/skbio.sequence.RNA.mismatch_frequency.rst", "generated/skbio.sequence.RNA.mismatches.rst", "generated/skbio.sequence.RNA.nondegenerates.rst", "generated/skbio.sequence.RNA.read.rst", "generated/skbio.sequence.RNA.replace.rst", "generated/skbio.sequence.RNA.reverse_complement.rst", "generated/skbio.sequence.RNA.reverse_transcribe.rst", "generated/skbio.sequence.RNA.to_definites.rst", "generated/skbio.sequence.RNA.to_indices.rst", "generated/skbio.sequence.RNA.to_regex.rst", "generated/skbio.sequence.RNA.translate.rst", "generated/skbio.sequence.RNA.translate_six_frames.rst", "generated/skbio.sequence.RNA.write.rst", "generated/skbio.sequence.Sequence.rst", "generated/skbio.sequence.Sequence.__bool__.rst", "generated/skbio.sequence.Sequence.__contains__.rst", "generated/skbio.sequence.Sequence.__copy__.rst", "generated/skbio.sequence.Sequence.__deepcopy__.rst", "generated/skbio.sequence.Sequence.__eq__.rst", "generated/skbio.sequence.Sequence.__ge__.rst", "generated/skbio.sequence.Sequence.__getitem__.rst", "generated/skbio.sequence.Sequence.__getstate__.rst", "generated/skbio.sequence.Sequence.__gt__.rst", "generated/skbio.sequence.Sequence.__iter__.rst", "generated/skbio.sequence.Sequence.__le__.rst", "generated/skbio.sequence.Sequence.__len__.rst", "generated/skbio.sequence.Sequence.__lt__.rst", "generated/skbio.sequence.Sequence.__ne__.rst", "generated/skbio.sequence.Sequence.__reversed__.rst", "generated/skbio.sequence.Sequence.__str__.rst", "generated/skbio.sequence.Sequence.concat.rst", "generated/skbio.sequence.Sequence.count.rst", "generated/skbio.sequence.Sequence.distance.rst", "generated/skbio.sequence.Sequence.find_with_regex.rst", "generated/skbio.sequence.Sequence.frequencies.rst", "generated/skbio.sequence.Sequence.has_interval_metadata.rst", "generated/skbio.sequence.Sequence.has_metadata.rst", "generated/skbio.sequence.Sequence.has_positional_metadata.rst", "generated/skbio.sequence.Sequence.index.rst", "generated/skbio.sequence.Sequence.iter_contiguous.rst", "generated/skbio.sequence.Sequence.iter_kmers.rst", "generated/skbio.sequence.Sequence.kmer_frequencies.rst", "generated/skbio.sequence.Sequence.lowercase.rst", "generated/skbio.sequence.Sequence.match_frequency.rst", "generated/skbio.sequence.Sequence.matches.rst", "generated/skbio.sequence.Sequence.mismatch_frequency.rst", "generated/skbio.sequence.Sequence.mismatches.rst", "generated/skbio.sequence.Sequence.read.rst", "generated/skbio.sequence.Sequence.replace.rst", "generated/skbio.sequence.Sequence.to_indices.rst", "generated/skbio.sequence.Sequence.write.rst", "generated/skbio.sequence.SubstitutionMatrix.rst", "generated/skbio.sequence.SubstitutionMatrix.__contains__.rst", "generated/skbio.sequence.SubstitutionMatrix.__eq__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ge__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getitem__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getstate__.rst", "generated/skbio.sequence.SubstitutionMatrix.__gt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__le__.rst", "generated/skbio.sequence.SubstitutionMatrix.__lt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ne__.rst", "generated/skbio.sequence.SubstitutionMatrix.__str__.rst", "generated/skbio.sequence.SubstitutionMatrix.between.rst", "generated/skbio.sequence.SubstitutionMatrix.by_name.rst", "generated/skbio.sequence.SubstitutionMatrix.copy.rst", "generated/skbio.sequence.SubstitutionMatrix.filter.rst", "generated/skbio.sequence.SubstitutionMatrix.from_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.from_iterable.rst", "generated/skbio.sequence.SubstitutionMatrix.get_names.rst", "generated/skbio.sequence.SubstitutionMatrix.identity.rst", "generated/skbio.sequence.SubstitutionMatrix.index.rst", "generated/skbio.sequence.SubstitutionMatrix.plot.rst", "generated/skbio.sequence.SubstitutionMatrix.read.rst", "generated/skbio.sequence.SubstitutionMatrix.redundant_form.rst", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame.rst", "generated/skbio.sequence.SubstitutionMatrix.to_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.transpose.rst", "generated/skbio.sequence.SubstitutionMatrix.within.rst", "generated/skbio.sequence.SubstitutionMatrix.write.rst", "generated/skbio.sequence.distance.rst", "generated/skbio.sequence.distance.hamming.rst", "generated/skbio.sequence.distance.kmer_distance.rst", "generated/skbio.stats.composition.rst", "generated/skbio.stats.composition.alr.rst", "generated/skbio.stats.composition.alr_inv.rst", "generated/skbio.stats.composition.ancom.rst", "generated/skbio.stats.composition.centralize.rst", "generated/skbio.stats.composition.closure.rst", "generated/skbio.stats.composition.clr.rst", "generated/skbio.stats.composition.clr_inv.rst", "generated/skbio.stats.composition.dirmult_ttest.rst", "generated/skbio.stats.composition.ilr.rst", "generated/skbio.stats.composition.ilr_inv.rst", "generated/skbio.stats.composition.inner.rst", "generated/skbio.stats.composition.multi_replace.rst", "generated/skbio.stats.composition.multiplicative_replacement.rst", "generated/skbio.stats.composition.pairwise_vlr.rst", "generated/skbio.stats.composition.perturb.rst", "generated/skbio.stats.composition.perturb_inv.rst", "generated/skbio.stats.composition.power.rst", "generated/skbio.stats.composition.sbp_basis.rst", "generated/skbio.stats.composition.tree_basis.rst", "generated/skbio.stats.composition.vlr.rst", "generated/skbio.stats.distance.rst", "generated/skbio.stats.distance.DissimilarityMatrix.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__le__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__str__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.between.rst", "generated/skbio.stats.distance.DissimilarityMatrix.copy.rst", "generated/skbio.stats.distance.DissimilarityMatrix.filter.rst", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable.rst", "generated/skbio.stats.distance.DissimilarityMatrix.index.rst", "generated/skbio.stats.distance.DissimilarityMatrix.plot.rst", "generated/skbio.stats.distance.DissimilarityMatrix.read.rst", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form.rst", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DissimilarityMatrix.transpose.rst", "generated/skbio.stats.distance.DissimilarityMatrix.within.rst", "generated/skbio.stats.distance.DissimilarityMatrix.write.rst", "generated/skbio.stats.distance.DissimilarityMatrixError.rst", "generated/skbio.stats.distance.DistanceMatrix.rst", "generated/skbio.stats.distance.DistanceMatrix.__contains__.rst", "generated/skbio.stats.distance.DistanceMatrix.__eq__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ge__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getitem__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getstate__.rst", "generated/skbio.stats.distance.DistanceMatrix.__gt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__le__.rst", "generated/skbio.stats.distance.DistanceMatrix.__lt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ne__.rst", "generated/skbio.stats.distance.DistanceMatrix.__str__.rst", "generated/skbio.stats.distance.DistanceMatrix.between.rst", "generated/skbio.stats.distance.DistanceMatrix.condensed_form.rst", "generated/skbio.stats.distance.DistanceMatrix.copy.rst", "generated/skbio.stats.distance.DistanceMatrix.filter.rst", "generated/skbio.stats.distance.DistanceMatrix.from_iterable.rst", "generated/skbio.stats.distance.DistanceMatrix.index.rst", "generated/skbio.stats.distance.DistanceMatrix.permute.rst", "generated/skbio.stats.distance.DistanceMatrix.plot.rst", "generated/skbio.stats.distance.DistanceMatrix.read.rst", "generated/skbio.stats.distance.DistanceMatrix.redundant_form.rst", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DistanceMatrix.to_series.rst", "generated/skbio.stats.distance.DistanceMatrix.transpose.rst", "generated/skbio.stats.distance.DistanceMatrix.within.rst", "generated/skbio.stats.distance.DistanceMatrix.write.rst", "generated/skbio.stats.distance.DistanceMatrixError.rst", "generated/skbio.stats.distance.MissingIDError.rst", "generated/skbio.stats.distance.anosim.rst", "generated/skbio.stats.distance.bioenv.rst", "generated/skbio.stats.distance.mantel.rst", "generated/skbio.stats.distance.permanova.rst", "generated/skbio.stats.distance.permdisp.rst", "generated/skbio.stats.distance.pwmantel.rst", "generated/skbio.stats.distance.randdm.rst", "generated/skbio.stats.evolve.rst", "generated/skbio.stats.evolve.hommola_cospeciation.rst", "generated/skbio.stats.gradient.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.CategoryResults.rst", "generated/skbio.stats.gradient.CategoryResults.__eq__.rst", "generated/skbio.stats.gradient.CategoryResults.__ge__.rst", "generated/skbio.stats.gradient.CategoryResults.__getstate__.rst", "generated/skbio.stats.gradient.CategoryResults.__gt__.rst", "generated/skbio.stats.gradient.CategoryResults.__hash__.rst", "generated/skbio.stats.gradient.CategoryResults.__le__.rst", "generated/skbio.stats.gradient.CategoryResults.__lt__.rst", "generated/skbio.stats.gradient.CategoryResults.__ne__.rst", "generated/skbio.stats.gradient.CategoryResults.__str__.rst", "generated/skbio.stats.gradient.CategoryResults.to_files.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVA.rst", "generated/skbio.stats.gradient.GradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVA.__le__.rst", "generated/skbio.stats.gradient.GradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVA.__str__.rst", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVAResults.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__le__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__str__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.to_files.rst", "generated/skbio.stats.gradient.GroupResults.rst", "generated/skbio.stats.gradient.GroupResults.__eq__.rst", "generated/skbio.stats.gradient.GroupResults.__ge__.rst", "generated/skbio.stats.gradient.GroupResults.__getstate__.rst", "generated/skbio.stats.gradient.GroupResults.__gt__.rst", "generated/skbio.stats.gradient.GroupResults.__hash__.rst", "generated/skbio.stats.gradient.GroupResults.__le__.rst", "generated/skbio.stats.gradient.GroupResults.__lt__.rst", "generated/skbio.stats.gradient.GroupResults.__ne__.rst", "generated/skbio.stats.gradient.GroupResults.__str__.rst", "generated/skbio.stats.gradient.GroupResults.to_files.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.isubsample.rst", "generated/skbio.stats.ordination.rst", "generated/skbio.stats.ordination.OrdinationResults.rst", "generated/skbio.stats.ordination.OrdinationResults.__eq__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ge__.rst", "generated/skbio.stats.ordination.OrdinationResults.__getstate__.rst", "generated/skbio.stats.ordination.OrdinationResults.__gt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__hash__.rst", "generated/skbio.stats.ordination.OrdinationResults.__le__.rst", "generated/skbio.stats.ordination.OrdinationResults.__lt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ne__.rst", "generated/skbio.stats.ordination.OrdinationResults.__str__.rst", "generated/skbio.stats.ordination.OrdinationResults.plot.rst", "generated/skbio.stats.ordination.OrdinationResults.read.rst", "generated/skbio.stats.ordination.OrdinationResults.write.rst", "generated/skbio.stats.ordination.ca.rst", "generated/skbio.stats.ordination.cca.rst", "generated/skbio.stats.ordination.corr.rst", "generated/skbio.stats.ordination.e_matrix.rst", "generated/skbio.stats.ordination.f_matrix.rst", "generated/skbio.stats.ordination.mean_and_std.rst", "generated/skbio.stats.ordination.pcoa.rst", "generated/skbio.stats.ordination.pcoa_biplot.rst", "generated/skbio.stats.ordination.rda.rst", "generated/skbio.stats.ordination.scale.rst", "generated/skbio.stats.ordination.svd_rank.rst", "generated/skbio.stats.power.rst", "generated/skbio.stats.power.confidence_bound.rst", "generated/skbio.stats.power.paired_subsamples.rst", "generated/skbio.stats.power.subsample_paired_power.rst", "generated/skbio.stats.power.subsample_power.rst", "generated/skbio.stats.subsample_counts.rst", "generated/skbio.tree.DuplicateNodeError.rst", "generated/skbio.tree.MissingNodeError.rst", "generated/skbio.tree.NoLengthError.rst", "generated/skbio.tree.NoParentError.rst", "generated/skbio.tree.TreeError.rst", "generated/skbio.tree.TreeNode.rst", "generated/skbio.tree.TreeNode.__copy__.rst", "generated/skbio.tree.TreeNode.__deepcopy__.rst", "generated/skbio.tree.TreeNode.__eq__.rst", "generated/skbio.tree.TreeNode.__ge__.rst", "generated/skbio.tree.TreeNode.__getitem__.rst", "generated/skbio.tree.TreeNode.__getstate__.rst", "generated/skbio.tree.TreeNode.__gt__.rst", "generated/skbio.tree.TreeNode.__hash__.rst", "generated/skbio.tree.TreeNode.__iter__.rst", "generated/skbio.tree.TreeNode.__le__.rst", "generated/skbio.tree.TreeNode.__len__.rst", "generated/skbio.tree.TreeNode.__lt__.rst", "generated/skbio.tree.TreeNode.__ne__.rst", "generated/skbio.tree.TreeNode.__str__.rst", "generated/skbio.tree.TreeNode.accumulate_to_ancestor.rst", "generated/skbio.tree.TreeNode.ancestors.rst", "generated/skbio.tree.TreeNode.append.rst", "generated/skbio.tree.TreeNode.ascii_art.rst", "generated/skbio.tree.TreeNode.assign_ids.rst", "generated/skbio.tree.TreeNode.assign_supports.rst", "generated/skbio.tree.TreeNode.bifurcate.rst", "generated/skbio.tree.TreeNode.cache_attr.rst", "generated/skbio.tree.TreeNode.compare_rfd.rst", "generated/skbio.tree.TreeNode.compare_subsets.rst", "generated/skbio.tree.TreeNode.compare_tip_distances.rst", "generated/skbio.tree.TreeNode.copy.rst", "generated/skbio.tree.TreeNode.count.rst", "generated/skbio.tree.TreeNode.create_caches.rst", "generated/skbio.tree.TreeNode.deepcopy.rst", "generated/skbio.tree.TreeNode.descending_branch_length.rst", "generated/skbio.tree.TreeNode.distance.rst", "generated/skbio.tree.TreeNode.extend.rst", "generated/skbio.tree.TreeNode.find.rst", "generated/skbio.tree.TreeNode.find_all.rst", "generated/skbio.tree.TreeNode.find_by_func.rst", "generated/skbio.tree.TreeNode.find_by_id.rst", "generated/skbio.tree.TreeNode.from_linkage_matrix.rst", "generated/skbio.tree.TreeNode.from_taxdump.rst", "generated/skbio.tree.TreeNode.from_taxonomy.rst", "generated/skbio.tree.TreeNode.get_max_distance.rst", "generated/skbio.tree.TreeNode.has_children.rst", "generated/skbio.tree.TreeNode.index_tree.rst", "generated/skbio.tree.TreeNode.invalidate_caches.rst", "generated/skbio.tree.TreeNode.is_root.rst", "generated/skbio.tree.TreeNode.is_tip.rst", "generated/skbio.tree.TreeNode.lca.rst", "generated/skbio.tree.TreeNode.levelorder.rst", "generated/skbio.tree.TreeNode.lowest_common_ancestor.rst", "generated/skbio.tree.TreeNode.neighbors.rst", "generated/skbio.tree.TreeNode.non_tips.rst", "generated/skbio.tree.TreeNode.observed_node_counts.rst", "generated/skbio.tree.TreeNode.pop.rst", "generated/skbio.tree.TreeNode.postorder.rst", "generated/skbio.tree.TreeNode.pre_and_postorder.rst", "generated/skbio.tree.TreeNode.preorder.rst", "generated/skbio.tree.TreeNode.prune.rst", "generated/skbio.tree.TreeNode.read.rst", "generated/skbio.tree.TreeNode.remove.rst", "generated/skbio.tree.TreeNode.remove_deleted.rst", "generated/skbio.tree.TreeNode.root.rst", "generated/skbio.tree.TreeNode.root_at.rst", "generated/skbio.tree.TreeNode.root_at_midpoint.rst", "generated/skbio.tree.TreeNode.shear.rst", "generated/skbio.tree.TreeNode.shuffle.rst", "generated/skbio.tree.TreeNode.siblings.rst", "generated/skbio.tree.TreeNode.subset.rst", "generated/skbio.tree.TreeNode.subsets.rst", "generated/skbio.tree.TreeNode.subtree.rst", "generated/skbio.tree.TreeNode.tip_tip_distances.rst", "generated/skbio.tree.TreeNode.tips.rst", "generated/skbio.tree.TreeNode.to_array.rst", "generated/skbio.tree.TreeNode.to_taxonomy.rst", "generated/skbio.tree.TreeNode.traverse.rst", "generated/skbio.tree.TreeNode.unpack.rst", "generated/skbio.tree.TreeNode.unpack_by_func.rst", "generated/skbio.tree.TreeNode.unrooted_copy.rst", "generated/skbio.tree.TreeNode.unrooted_deepcopy.rst", "generated/skbio.tree.TreeNode.write.rst", "generated/skbio.tree.majority_rule.rst", "generated/skbio.tree.nj.rst", "generated/skbio.util.EfficiencyWarning.rst", "generated/skbio.util.RepresentationWarning.rst", "generated/skbio.util.assert_data_frame_almost_equal.rst", "generated/skbio.util.assert_ordination_results_equal.rst", "generated/skbio.util.cardinal_to_ordinal.rst", "generated/skbio.util.classproperty.rst", "generated/skbio.util.classproperty.__delete__.rst", "generated/skbio.util.classproperty.__eq__.rst", "generated/skbio.util.classproperty.__ge__.rst", "generated/skbio.util.classproperty.__get__.rst", "generated/skbio.util.classproperty.__getstate__.rst", "generated/skbio.util.classproperty.__gt__.rst", "generated/skbio.util.classproperty.__hash__.rst", "generated/skbio.util.classproperty.__le__.rst", "generated/skbio.util.classproperty.__lt__.rst", "generated/skbio.util.classproperty.__ne__.rst", "generated/skbio.util.classproperty.__set__.rst", "generated/skbio.util.classproperty.__set_name__.rst", "generated/skbio.util.classproperty.__str__.rst", "generated/skbio.util.classproperty.deleter.rst", "generated/skbio.util.classproperty.getter.rst", "generated/skbio.util.classproperty.setter.rst", "generated/skbio.util.find_duplicates.rst", "generated/skbio.util.get_data_path.rst", "generated/skbio.util.safe_md5.rst", "generated/skbio.workflow.Workflow.rst", "generated/skbio.workflow.Workflow.__call__.rst", "generated/skbio.workflow.Workflow.__eq__.rst", "generated/skbio.workflow.Workflow.__ge__.rst", "generated/skbio.workflow.Workflow.__getstate__.rst", "generated/skbio.workflow.Workflow.__gt__.rst", "generated/skbio.workflow.Workflow.__hash__.rst", "generated/skbio.workflow.Workflow.__le__.rst", "generated/skbio.workflow.Workflow.__lt__.rst", "generated/skbio.workflow.Workflow.__ne__.rst", "generated/skbio.workflow.Workflow.__str__.rst", "generated/skbio.workflow.Workflow.initialize_state.rst", "generated/skbio.workflow.method.rst", "generated/skbio.workflow.method.__call__.rst", "generated/skbio.workflow.method.__eq__.rst", "generated/skbio.workflow.method.__ge__.rst", "generated/skbio.workflow.method.__getstate__.rst", "generated/skbio.workflow.method.__gt__.rst", "generated/skbio.workflow.method.__hash__.rst", "generated/skbio.workflow.method.__le__.rst", "generated/skbio.workflow.method.__lt__.rst", "generated/skbio.workflow.method.__ne__.rst", "generated/skbio.workflow.method.__str__.rst", "generated/skbio.workflow.requires.rst", "generated/skbio.workflow.requires.__call__.rst", "generated/skbio.workflow.requires.__eq__.rst", "generated/skbio.workflow.requires.__ge__.rst", "generated/skbio.workflow.requires.__getstate__.rst", "generated/skbio.workflow.requires.__gt__.rst", "generated/skbio.workflow.requires.__hash__.rst", "generated/skbio.workflow.requires.__le__.rst", "generated/skbio.workflow.requires.__lt__.rst", "generated/skbio.workflow.requires.__ne__.rst", "generated/skbio.workflow.requires.__str__.rst", "index.rst", "io.rst", "metadata.rst", "sequence.rst", "stats.rst", "table.rst", "tree.rst", "util.rst", "workflow.rst"], "titles": ["Alignments (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.alignment</span></code>)", "Diversity calculations (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity</span></code>)", "skbio.alignment.AlignmentStructure", "skbio.alignment.AlignmentStructure.__eq__", "skbio.alignment.AlignmentStructure.__ge__", "skbio.alignment.AlignmentStructure.__getitem__", "skbio.alignment.AlignmentStructure.__getstate__", "skbio.alignment.AlignmentStructure.__gt__", "skbio.alignment.AlignmentStructure.__hash__", "skbio.alignment.AlignmentStructure.__le__", "skbio.alignment.AlignmentStructure.__lt__", "skbio.alignment.AlignmentStructure.__ne__", "skbio.alignment.AlignmentStructure.__setstate__", "skbio.alignment.AlignmentStructure.__str__", "skbio.alignment.AlignmentStructure.is_zero_based", "skbio.alignment.AlignmentStructure.set_zero_based", "skbio.alignment.StripedSmithWaterman", "skbio.alignment.StripedSmithWaterman.__call__", "skbio.alignment.StripedSmithWaterman.__eq__", "skbio.alignment.StripedSmithWaterman.__ge__", "skbio.alignment.StripedSmithWaterman.__getstate__", "skbio.alignment.StripedSmithWaterman.__gt__", "skbio.alignment.StripedSmithWaterman.__hash__", "skbio.alignment.StripedSmithWaterman.__le__", "skbio.alignment.StripedSmithWaterman.__lt__", "skbio.alignment.StripedSmithWaterman.__ne__", "skbio.alignment.StripedSmithWaterman.__setstate__", "skbio.alignment.StripedSmithWaterman.__str__", "skbio.alignment.TabularMSA", "skbio.alignment.TabularMSA.__bool__", "skbio.alignment.TabularMSA.__contains__", "skbio.alignment.TabularMSA.__copy__", "skbio.alignment.TabularMSA.__deepcopy__", "skbio.alignment.TabularMSA.__eq__", "skbio.alignment.TabularMSA.__ge__", "skbio.alignment.TabularMSA.__getitem__", "skbio.alignment.TabularMSA.__getstate__", "skbio.alignment.TabularMSA.__gt__", "skbio.alignment.TabularMSA.__iter__", "skbio.alignment.TabularMSA.__le__", "skbio.alignment.TabularMSA.__len__", "skbio.alignment.TabularMSA.__lt__", "skbio.alignment.TabularMSA.__ne__", "skbio.alignment.TabularMSA.__reversed__", "skbio.alignment.TabularMSA.__str__", "skbio.alignment.TabularMSA.append", "skbio.alignment.TabularMSA.consensus", "skbio.alignment.TabularMSA.conservation", "skbio.alignment.TabularMSA.extend", "skbio.alignment.TabularMSA.from_dict", "skbio.alignment.TabularMSA.gap_frequencies", "skbio.alignment.TabularMSA.has_metadata", "skbio.alignment.TabularMSA.has_positional_metadata", "skbio.alignment.TabularMSA.iter_positions", "skbio.alignment.TabularMSA.join", "skbio.alignment.TabularMSA.read", "skbio.alignment.TabularMSA.reassign_index", "skbio.alignment.TabularMSA.sort", "skbio.alignment.TabularMSA.to_dict", "skbio.alignment.TabularMSA.write", "skbio.alignment.global_pairwise_align", "skbio.alignment.global_pairwise_align_nucleotide", "skbio.alignment.global_pairwise_align_protein", "skbio.alignment.local_pairwise_align", "skbio.alignment.local_pairwise_align_nucleotide", "skbio.alignment.local_pairwise_align_protein", "skbio.alignment.local_pairwise_align_ssw", "skbio.alignment.make_identity_substitution_matrix", "Alpha diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.alpha</span></code>)", "skbio.diversity.alpha.ace", "skbio.diversity.alpha.berger_parker_d", "skbio.diversity.alpha.brillouin_d", "skbio.diversity.alpha.chao1", "skbio.diversity.alpha.chao1_ci", "skbio.diversity.alpha.dominance", "skbio.diversity.alpha.doubles", "skbio.diversity.alpha.enspie", "skbio.diversity.alpha.esty_ci", "skbio.diversity.alpha.faith_pd", "skbio.diversity.alpha.fisher_alpha", "skbio.diversity.alpha.gini_index", "skbio.diversity.alpha.goods_coverage", "skbio.diversity.alpha.heip_e", "skbio.diversity.alpha.kempton_taylor_q", "skbio.diversity.alpha.lladser_ci", "skbio.diversity.alpha.lladser_pe", "skbio.diversity.alpha.margalef", "skbio.diversity.alpha.mcintosh_d", "skbio.diversity.alpha.mcintosh_e", "skbio.diversity.alpha.menhinick", "skbio.diversity.alpha.michaelis_menten_fit", "skbio.diversity.alpha.observed_features", "skbio.diversity.alpha.observed_otus", "skbio.diversity.alpha.osd", "skbio.diversity.alpha.phydiv", "skbio.diversity.alpha.pielou_e", "skbio.diversity.alpha.robbins", "skbio.diversity.alpha.shannon", "skbio.diversity.alpha.simpson", "skbio.diversity.alpha.simpson_e", "skbio.diversity.alpha.singles", "skbio.diversity.alpha.sobs", "skbio.diversity.alpha.strong", "skbio.diversity.alpha_diversity", "Beta diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.beta</span></code>)", "skbio.diversity.beta.unweighted_unifrac", "skbio.diversity.beta.weighted_unifrac", "skbio.diversity.beta_diversity", "skbio.diversity.block_beta_diversity", "skbio.diversity.get_alpha_diversity_metrics", "skbio.diversity.get_beta_diversity_metrics", "skbio.diversity.partial_beta_diversity", "skbio.io.ArgumentOverrideWarning", "skbio.io.BLAST7FormatError", "skbio.io.ClustalFormatError", "skbio.io.EMBLFormatError", "skbio.io.FASTAFormatError", "skbio.io.FASTQFormatError", "skbio.io.FileFormatError", "skbio.io.FormatIdentificationWarning", "skbio.io.GFF3FormatError", "skbio.io.GenBankFormatError", "skbio.io.IOSourceError", "skbio.io.LSMatFormatError", "skbio.io.NewickFormatError", "skbio.io.OrdinationFormatError", "skbio.io.PhylipFormatError", "skbio.io.QSeqFormatError", "skbio.io.QUALFormatError", "skbio.io.StockholmFormatError", "skbio.io.UnrecognizedFormatError", "Simple binary dissimilarity matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.binary_dm</span></code>)", "BIOM-Format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.biom</span></code>)", "BLAST+6 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast6</span></code>)", "BLAST+7 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast7</span></code>)", "Clustal format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.clustal</span></code>)", "EMBL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embl</span></code>)", "FASTA/QUAL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fasta</span></code>)", "FASTQ format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fastq</span></code>)", "GenBank format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.genbank</span></code>)", "GFF3 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.gff3</span></code>)", "Labeled square matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.lsmat</span></code>)", "Newick format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.newick</span></code>)", "Ordination results format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.ordination</span></code>)", "PHYLIP multiple sequence alignment format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.phylip</span></code>)", "QSeq format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.qseq</span></code>)", "Format Support", "Stockholm format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.stockholm</span></code>)", "Taxdump format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.taxdump</span></code>)", "I/O Registry (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.registry</span></code>)", "skbio.io.registry.DuplicateRegistrationError", "skbio.io.registry.Format", "skbio.io.registry.Format.__eq__", "skbio.io.registry.Format.__ge__", "skbio.io.registry.Format.__getstate__", "skbio.io.registry.Format.__gt__", "skbio.io.registry.Format.__hash__", "skbio.io.registry.Format.__le__", "skbio.io.registry.Format.__lt__", "skbio.io.registry.Format.__ne__", "skbio.io.registry.Format.__str__", "skbio.io.registry.Format.reader", "skbio.io.registry.Format.sniffer", "skbio.io.registry.Format.writer", "skbio.io.registry.IORegistry", "skbio.io.registry.IORegistry.__eq__", "skbio.io.registry.IORegistry.__ge__", "skbio.io.registry.IORegistry.__getstate__", "skbio.io.registry.IORegistry.__gt__", "skbio.io.registry.IORegistry.__hash__", "skbio.io.registry.IORegistry.__le__", "skbio.io.registry.IORegistry.__lt__", "skbio.io.registry.IORegistry.__ne__", "skbio.io.registry.IORegistry.__str__", "skbio.io.registry.IORegistry.add_format", "skbio.io.registry.IORegistry.create_format", "skbio.io.registry.IORegistry.get_reader", "skbio.io.registry.IORegistry.get_sniffer", "skbio.io.registry.IORegistry.get_writer", "skbio.io.registry.IORegistry.list_read_formats", "skbio.io.registry.IORegistry.list_write_formats", "skbio.io.registry.IORegistry.monkey_patch", "skbio.io.registry.IORegistry.read", "skbio.io.registry.IORegistry.sniff", "skbio.io.registry.IORegistry.write", "skbio.io.registry.InvalidRegistrationError", "skbio.io.registry.create_format", "skbio.io.registry.read", "skbio.io.registry.sniff", "skbio.io.registry.write", "I/O utils (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.util</span></code>)", "skbio.io.util.open", "skbio.io.util.open_file", "skbio.io.util.open_files", "skbio.metadata.Interval", "skbio.metadata.Interval.__eq__", "skbio.metadata.Interval.__ge__", "skbio.metadata.Interval.__getstate__", "skbio.metadata.Interval.__gt__", "skbio.metadata.Interval.__le__", "skbio.metadata.Interval.__lt__", "skbio.metadata.Interval.__ne__", "skbio.metadata.Interval.__str__", "skbio.metadata.Interval.drop", "skbio.metadata.IntervalMetadata", "skbio.metadata.IntervalMetadata.__copy__", "skbio.metadata.IntervalMetadata.__deepcopy__", "skbio.metadata.IntervalMetadata.__eq__", "skbio.metadata.IntervalMetadata.__ge__", "skbio.metadata.IntervalMetadata.__getstate__", "skbio.metadata.IntervalMetadata.__gt__", "skbio.metadata.IntervalMetadata.__le__", "skbio.metadata.IntervalMetadata.__lt__", "skbio.metadata.IntervalMetadata.__ne__", "skbio.metadata.IntervalMetadata.__str__", "skbio.metadata.IntervalMetadata.add", "skbio.metadata.IntervalMetadata.concat", "skbio.metadata.IntervalMetadata.drop", "skbio.metadata.IntervalMetadata.merge", "skbio.metadata.IntervalMetadata.query", "skbio.metadata.IntervalMetadata.read", "skbio.metadata.IntervalMetadata.sort", "skbio.metadata.IntervalMetadata.write", "skbio.sequence.DNA", "skbio.sequence.DNA.__bool__", "skbio.sequence.DNA.__contains__", "skbio.sequence.DNA.__copy__", "skbio.sequence.DNA.__deepcopy__", "skbio.sequence.DNA.__eq__", "skbio.sequence.DNA.__ge__", "skbio.sequence.DNA.__getitem__", "skbio.sequence.DNA.__getstate__", "skbio.sequence.DNA.__gt__", "skbio.sequence.DNA.__iter__", "skbio.sequence.DNA.__le__", "skbio.sequence.DNA.__len__", "skbio.sequence.DNA.__lt__", "skbio.sequence.DNA.__ne__", "skbio.sequence.DNA.__reversed__", "skbio.sequence.DNA.__str__", "skbio.sequence.DNA.complement", "skbio.sequence.DNA.concat", "skbio.sequence.DNA.count", "skbio.sequence.DNA.definites", "skbio.sequence.DNA.degap", "skbio.sequence.DNA.degenerates", "skbio.sequence.DNA.distance", "skbio.sequence.DNA.expand_degenerates", "skbio.sequence.DNA.find_motifs", "skbio.sequence.DNA.find_with_regex", "skbio.sequence.DNA.frequencies", "skbio.sequence.DNA.gaps", "skbio.sequence.DNA.gc_content", "skbio.sequence.DNA.gc_frequency", "skbio.sequence.DNA.has_definites", "skbio.sequence.DNA.has_degenerates", "skbio.sequence.DNA.has_gaps", "skbio.sequence.DNA.has_interval_metadata", "skbio.sequence.DNA.has_metadata", "skbio.sequence.DNA.has_nondegenerates", "skbio.sequence.DNA.has_positional_metadata", "skbio.sequence.DNA.index", "skbio.sequence.DNA.is_reverse_complement", "skbio.sequence.DNA.iter_contiguous", "skbio.sequence.DNA.iter_kmers", "skbio.sequence.DNA.kmer_frequencies", "skbio.sequence.DNA.lowercase", "skbio.sequence.DNA.match_frequency", "skbio.sequence.DNA.matches", "skbio.sequence.DNA.mismatch_frequency", "skbio.sequence.DNA.mismatches", "skbio.sequence.DNA.nondegenerates", "skbio.sequence.DNA.read", "skbio.sequence.DNA.replace", "skbio.sequence.DNA.reverse_complement", "skbio.sequence.DNA.to_definites", "skbio.sequence.DNA.to_indices", "skbio.sequence.DNA.to_regex", "skbio.sequence.DNA.transcribe", "skbio.sequence.DNA.translate", "skbio.sequence.DNA.translate_six_frames", "skbio.sequence.DNA.write", "skbio.sequence.GeneticCode", "skbio.sequence.GeneticCode.__eq__", "skbio.sequence.GeneticCode.__ge__", "skbio.sequence.GeneticCode.__getstate__", "skbio.sequence.GeneticCode.__gt__", "skbio.sequence.GeneticCode.__le__", "skbio.sequence.GeneticCode.__lt__", "skbio.sequence.GeneticCode.__ne__", "skbio.sequence.GeneticCode.__str__", "skbio.sequence.GeneticCode.from_ncbi", "skbio.sequence.GeneticCode.translate", "skbio.sequence.GeneticCode.translate_six_frames", "skbio.sequence.GrammaredSequence", "skbio.sequence.GrammaredSequence.__bool__", "skbio.sequence.GrammaredSequence.__contains__", "skbio.sequence.GrammaredSequence.__copy__", "skbio.sequence.GrammaredSequence.__deepcopy__", "skbio.sequence.GrammaredSequence.__eq__", "skbio.sequence.GrammaredSequence.__ge__", "skbio.sequence.GrammaredSequence.__getitem__", "skbio.sequence.GrammaredSequence.__getstate__", "skbio.sequence.GrammaredSequence.__gt__", "skbio.sequence.GrammaredSequence.__iter__", "skbio.sequence.GrammaredSequence.__le__", "skbio.sequence.GrammaredSequence.__len__", "skbio.sequence.GrammaredSequence.__lt__", "skbio.sequence.GrammaredSequence.__ne__", "skbio.sequence.GrammaredSequence.__reversed__", "skbio.sequence.GrammaredSequence.__str__", "skbio.sequence.GrammaredSequence.concat", "skbio.sequence.GrammaredSequence.count", "skbio.sequence.GrammaredSequence.definites", "skbio.sequence.GrammaredSequence.degap", "skbio.sequence.GrammaredSequence.degenerates", "skbio.sequence.GrammaredSequence.distance", "skbio.sequence.GrammaredSequence.expand_degenerates", "skbio.sequence.GrammaredSequence.find_motifs", "skbio.sequence.GrammaredSequence.find_with_regex", "skbio.sequence.GrammaredSequence.frequencies", "skbio.sequence.GrammaredSequence.gaps", "skbio.sequence.GrammaredSequence.has_definites", "skbio.sequence.GrammaredSequence.has_degenerates", "skbio.sequence.GrammaredSequence.has_gaps", "skbio.sequence.GrammaredSequence.has_interval_metadata", "skbio.sequence.GrammaredSequence.has_metadata", "skbio.sequence.GrammaredSequence.has_nondegenerates", "skbio.sequence.GrammaredSequence.has_positional_metadata", "skbio.sequence.GrammaredSequence.index", "skbio.sequence.GrammaredSequence.iter_contiguous", "skbio.sequence.GrammaredSequence.iter_kmers", "skbio.sequence.GrammaredSequence.kmer_frequencies", "skbio.sequence.GrammaredSequence.lowercase", "skbio.sequence.GrammaredSequence.match_frequency", "skbio.sequence.GrammaredSequence.matches", "skbio.sequence.GrammaredSequence.mismatch_frequency", "skbio.sequence.GrammaredSequence.mismatches", "skbio.sequence.GrammaredSequence.nondegenerates", "skbio.sequence.GrammaredSequence.read", "skbio.sequence.GrammaredSequence.replace", "skbio.sequence.GrammaredSequence.to_definites", "skbio.sequence.GrammaredSequence.to_indices", "skbio.sequence.GrammaredSequence.to_regex", "skbio.sequence.GrammaredSequence.write", "skbio.sequence.Protein", "skbio.sequence.Protein.__bool__", "skbio.sequence.Protein.__contains__", "skbio.sequence.Protein.__copy__", "skbio.sequence.Protein.__deepcopy__", "skbio.sequence.Protein.__eq__", "skbio.sequence.Protein.__ge__", "skbio.sequence.Protein.__getitem__", "skbio.sequence.Protein.__getstate__", "skbio.sequence.Protein.__gt__", "skbio.sequence.Protein.__iter__", "skbio.sequence.Protein.__le__", "skbio.sequence.Protein.__len__", "skbio.sequence.Protein.__lt__", "skbio.sequence.Protein.__ne__", "skbio.sequence.Protein.__reversed__", "skbio.sequence.Protein.__str__", "skbio.sequence.Protein.concat", "skbio.sequence.Protein.count", "skbio.sequence.Protein.definites", "skbio.sequence.Protein.degap", "skbio.sequence.Protein.degenerates", "skbio.sequence.Protein.distance", "skbio.sequence.Protein.expand_degenerates", "skbio.sequence.Protein.find_motifs", "skbio.sequence.Protein.find_with_regex", "skbio.sequence.Protein.frequencies", "skbio.sequence.Protein.gaps", "skbio.sequence.Protein.has_definites", "skbio.sequence.Protein.has_degenerates", "skbio.sequence.Protein.has_gaps", "skbio.sequence.Protein.has_interval_metadata", "skbio.sequence.Protein.has_metadata", "skbio.sequence.Protein.has_nondegenerates", "skbio.sequence.Protein.has_positional_metadata", "skbio.sequence.Protein.has_stops", "skbio.sequence.Protein.index", "skbio.sequence.Protein.iter_contiguous", "skbio.sequence.Protein.iter_kmers", "skbio.sequence.Protein.kmer_frequencies", "skbio.sequence.Protein.lowercase", "skbio.sequence.Protein.match_frequency", "skbio.sequence.Protein.matches", "skbio.sequence.Protein.mismatch_frequency", "skbio.sequence.Protein.mismatches", "skbio.sequence.Protein.nondegenerates", "skbio.sequence.Protein.read", "skbio.sequence.Protein.replace", "skbio.sequence.Protein.stops", "skbio.sequence.Protein.to_definites", "skbio.sequence.Protein.to_indices", "skbio.sequence.Protein.to_regex", "skbio.sequence.Protein.write", "skbio.sequence.RNA", "skbio.sequence.RNA.__bool__", "skbio.sequence.RNA.__contains__", "skbio.sequence.RNA.__copy__", "skbio.sequence.RNA.__deepcopy__", "skbio.sequence.RNA.__eq__", "skbio.sequence.RNA.__ge__", "skbio.sequence.RNA.__getitem__", "skbio.sequence.RNA.__getstate__", "skbio.sequence.RNA.__gt__", "skbio.sequence.RNA.__iter__", "skbio.sequence.RNA.__le__", "skbio.sequence.RNA.__len__", "skbio.sequence.RNA.__lt__", "skbio.sequence.RNA.__ne__", "skbio.sequence.RNA.__reversed__", "skbio.sequence.RNA.__str__", "skbio.sequence.RNA.complement", "skbio.sequence.RNA.concat", "skbio.sequence.RNA.count", "skbio.sequence.RNA.definites", "skbio.sequence.RNA.degap", "skbio.sequence.RNA.degenerates", "skbio.sequence.RNA.distance", "skbio.sequence.RNA.expand_degenerates", "skbio.sequence.RNA.find_motifs", "skbio.sequence.RNA.find_with_regex", "skbio.sequence.RNA.frequencies", "skbio.sequence.RNA.gaps", "skbio.sequence.RNA.gc_content", "skbio.sequence.RNA.gc_frequency", "skbio.sequence.RNA.has_definites", "skbio.sequence.RNA.has_degenerates", "skbio.sequence.RNA.has_gaps", "skbio.sequence.RNA.has_interval_metadata", "skbio.sequence.RNA.has_metadata", "skbio.sequence.RNA.has_nondegenerates", "skbio.sequence.RNA.has_positional_metadata", "skbio.sequence.RNA.index", "skbio.sequence.RNA.is_reverse_complement", "skbio.sequence.RNA.iter_contiguous", "skbio.sequence.RNA.iter_kmers", "skbio.sequence.RNA.kmer_frequencies", "skbio.sequence.RNA.lowercase", "skbio.sequence.RNA.match_frequency", "skbio.sequence.RNA.matches", "skbio.sequence.RNA.mismatch_frequency", "skbio.sequence.RNA.mismatches", "skbio.sequence.RNA.nondegenerates", "skbio.sequence.RNA.read", "skbio.sequence.RNA.replace", "skbio.sequence.RNA.reverse_complement", "skbio.sequence.RNA.reverse_transcribe", "skbio.sequence.RNA.to_definites", "skbio.sequence.RNA.to_indices", "skbio.sequence.RNA.to_regex", "skbio.sequence.RNA.translate", "skbio.sequence.RNA.translate_six_frames", "skbio.sequence.RNA.write", "skbio.sequence.Sequence", "skbio.sequence.Sequence.__bool__", "skbio.sequence.Sequence.__contains__", "skbio.sequence.Sequence.__copy__", "skbio.sequence.Sequence.__deepcopy__", "skbio.sequence.Sequence.__eq__", "skbio.sequence.Sequence.__ge__", "skbio.sequence.Sequence.__getitem__", "skbio.sequence.Sequence.__getstate__", "skbio.sequence.Sequence.__gt__", "skbio.sequence.Sequence.__iter__", "skbio.sequence.Sequence.__le__", "skbio.sequence.Sequence.__len__", "skbio.sequence.Sequence.__lt__", "skbio.sequence.Sequence.__ne__", "skbio.sequence.Sequence.__reversed__", "skbio.sequence.Sequence.__str__", "skbio.sequence.Sequence.concat", "skbio.sequence.Sequence.count", "skbio.sequence.Sequence.distance", "skbio.sequence.Sequence.find_with_regex", "skbio.sequence.Sequence.frequencies", "skbio.sequence.Sequence.has_interval_metadata", "skbio.sequence.Sequence.has_metadata", "skbio.sequence.Sequence.has_positional_metadata", "skbio.sequence.Sequence.index", "skbio.sequence.Sequence.iter_contiguous", "skbio.sequence.Sequence.iter_kmers", "skbio.sequence.Sequence.kmer_frequencies", "skbio.sequence.Sequence.lowercase", "skbio.sequence.Sequence.match_frequency", "skbio.sequence.Sequence.matches", "skbio.sequence.Sequence.mismatch_frequency", "skbio.sequence.Sequence.mismatches", "skbio.sequence.Sequence.read", "skbio.sequence.Sequence.replace", "skbio.sequence.Sequence.to_indices", "skbio.sequence.Sequence.write", "skbio.sequence.SubstitutionMatrix", "skbio.sequence.SubstitutionMatrix.__contains__", "skbio.sequence.SubstitutionMatrix.__eq__", "skbio.sequence.SubstitutionMatrix.__ge__", "skbio.sequence.SubstitutionMatrix.__getitem__", "skbio.sequence.SubstitutionMatrix.__getstate__", "skbio.sequence.SubstitutionMatrix.__gt__", "skbio.sequence.SubstitutionMatrix.__le__", "skbio.sequence.SubstitutionMatrix.__lt__", "skbio.sequence.SubstitutionMatrix.__ne__", "skbio.sequence.SubstitutionMatrix.__str__", "skbio.sequence.SubstitutionMatrix.between", "skbio.sequence.SubstitutionMatrix.by_name", "skbio.sequence.SubstitutionMatrix.copy", "skbio.sequence.SubstitutionMatrix.filter", "skbio.sequence.SubstitutionMatrix.from_dict", "skbio.sequence.SubstitutionMatrix.from_iterable", "skbio.sequence.SubstitutionMatrix.get_names", "skbio.sequence.SubstitutionMatrix.identity", "skbio.sequence.SubstitutionMatrix.index", "skbio.sequence.SubstitutionMatrix.plot", "skbio.sequence.SubstitutionMatrix.read", "skbio.sequence.SubstitutionMatrix.redundant_form", "skbio.sequence.SubstitutionMatrix.to_data_frame", "skbio.sequence.SubstitutionMatrix.to_dict", "skbio.sequence.SubstitutionMatrix.transpose", "skbio.sequence.SubstitutionMatrix.within", "skbio.sequence.SubstitutionMatrix.write", "Sequence distance metrics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence.distance</span></code>)", "skbio.sequence.distance.hamming", "skbio.sequence.distance.kmer_distance", "Composition Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.composition</span></code>)", "skbio.stats.composition.alr", "skbio.stats.composition.alr_inv", "skbio.stats.composition.ancom", "skbio.stats.composition.centralize", "skbio.stats.composition.closure", "skbio.stats.composition.clr", "skbio.stats.composition.clr_inv", "skbio.stats.composition.dirmult_ttest", "skbio.stats.composition.ilr", "skbio.stats.composition.ilr_inv", "skbio.stats.composition.inner", "skbio.stats.composition.multi_replace", "skbio.stats.composition.multiplicative_replacement", "skbio.stats.composition.pairwise_vlr", "skbio.stats.composition.perturb", "skbio.stats.composition.perturb_inv", "skbio.stats.composition.power", "skbio.stats.composition.sbp_basis", "skbio.stats.composition.tree_basis", "skbio.stats.composition.vlr", "Distance matrices and distance-based statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.distance</span></code>)", "skbio.stats.distance.DissimilarityMatrix", "skbio.stats.distance.DissimilarityMatrix.__contains__", "skbio.stats.distance.DissimilarityMatrix.__eq__", "skbio.stats.distance.DissimilarityMatrix.__ge__", "skbio.stats.distance.DissimilarityMatrix.__getitem__", "skbio.stats.distance.DissimilarityMatrix.__getstate__", "skbio.stats.distance.DissimilarityMatrix.__gt__", "skbio.stats.distance.DissimilarityMatrix.__le__", "skbio.stats.distance.DissimilarityMatrix.__lt__", "skbio.stats.distance.DissimilarityMatrix.__ne__", "skbio.stats.distance.DissimilarityMatrix.__str__", "skbio.stats.distance.DissimilarityMatrix.between", "skbio.stats.distance.DissimilarityMatrix.copy", "skbio.stats.distance.DissimilarityMatrix.filter", "skbio.stats.distance.DissimilarityMatrix.from_iterable", "skbio.stats.distance.DissimilarityMatrix.index", "skbio.stats.distance.DissimilarityMatrix.plot", "skbio.stats.distance.DissimilarityMatrix.read", "skbio.stats.distance.DissimilarityMatrix.redundant_form", "skbio.stats.distance.DissimilarityMatrix.to_data_frame", "skbio.stats.distance.DissimilarityMatrix.transpose", "skbio.stats.distance.DissimilarityMatrix.within", "skbio.stats.distance.DissimilarityMatrix.write", "skbio.stats.distance.DissimilarityMatrixError", "skbio.stats.distance.DistanceMatrix", "skbio.stats.distance.DistanceMatrix.__contains__", "skbio.stats.distance.DistanceMatrix.__eq__", "skbio.stats.distance.DistanceMatrix.__ge__", "skbio.stats.distance.DistanceMatrix.__getitem__", "skbio.stats.distance.DistanceMatrix.__getstate__", "skbio.stats.distance.DistanceMatrix.__gt__", "skbio.stats.distance.DistanceMatrix.__le__", "skbio.stats.distance.DistanceMatrix.__lt__", "skbio.stats.distance.DistanceMatrix.__ne__", "skbio.stats.distance.DistanceMatrix.__str__", "skbio.stats.distance.DistanceMatrix.between", "skbio.stats.distance.DistanceMatrix.condensed_form", "skbio.stats.distance.DistanceMatrix.copy", "skbio.stats.distance.DistanceMatrix.filter", "skbio.stats.distance.DistanceMatrix.from_iterable", "skbio.stats.distance.DistanceMatrix.index", "skbio.stats.distance.DistanceMatrix.permute", "skbio.stats.distance.DistanceMatrix.plot", "skbio.stats.distance.DistanceMatrix.read", "skbio.stats.distance.DistanceMatrix.redundant_form", "skbio.stats.distance.DistanceMatrix.to_data_frame", "skbio.stats.distance.DistanceMatrix.to_series", "skbio.stats.distance.DistanceMatrix.transpose", "skbio.stats.distance.DistanceMatrix.within", "skbio.stats.distance.DistanceMatrix.write", "skbio.stats.distance.DistanceMatrixError", "skbio.stats.distance.MissingIDError", "skbio.stats.distance.anosim", "skbio.stats.distance.bioenv", "skbio.stats.distance.mantel", "skbio.stats.distance.permanova", "skbio.stats.distance.permdisp", "skbio.stats.distance.pwmantel", "skbio.stats.distance.randdm", "Evolutionary statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.evolve</span></code>)", "skbio.stats.evolve.hommola_cospeciation", "Gradient analyses (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.gradient</span></code>)", "skbio.stats.gradient.AverageGradientANOVA", "skbio.stats.gradient.AverageGradientANOVA.__eq__", "skbio.stats.gradient.AverageGradientANOVA.__ge__", "skbio.stats.gradient.AverageGradientANOVA.__getstate__", "skbio.stats.gradient.AverageGradientANOVA.__gt__", "skbio.stats.gradient.AverageGradientANOVA.__hash__", "skbio.stats.gradient.AverageGradientANOVA.__le__", "skbio.stats.gradient.AverageGradientANOVA.__lt__", "skbio.stats.gradient.AverageGradientANOVA.__ne__", "skbio.stats.gradient.AverageGradientANOVA.__str__", "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "skbio.stats.gradient.CategoryResults", "skbio.stats.gradient.CategoryResults.__eq__", "skbio.stats.gradient.CategoryResults.__ge__", "skbio.stats.gradient.CategoryResults.__getstate__", "skbio.stats.gradient.CategoryResults.__gt__", "skbio.stats.gradient.CategoryResults.__hash__", "skbio.stats.gradient.CategoryResults.__le__", "skbio.stats.gradient.CategoryResults.__lt__", "skbio.stats.gradient.CategoryResults.__ne__", "skbio.stats.gradient.CategoryResults.__str__", "skbio.stats.gradient.CategoryResults.to_files", "skbio.stats.gradient.FirstDifferenceGradientANOVA", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVA", "skbio.stats.gradient.GradientANOVA.__eq__", "skbio.stats.gradient.GradientANOVA.__ge__", "skbio.stats.gradient.GradientANOVA.__getstate__", "skbio.stats.gradient.GradientANOVA.__gt__", "skbio.stats.gradient.GradientANOVA.__hash__", "skbio.stats.gradient.GradientANOVA.__le__", "skbio.stats.gradient.GradientANOVA.__lt__", "skbio.stats.gradient.GradientANOVA.__ne__", "skbio.stats.gradient.GradientANOVA.__str__", "skbio.stats.gradient.GradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVAResults", "skbio.stats.gradient.GradientANOVAResults.__eq__", "skbio.stats.gradient.GradientANOVAResults.__ge__", "skbio.stats.gradient.GradientANOVAResults.__getstate__", "skbio.stats.gradient.GradientANOVAResults.__gt__", "skbio.stats.gradient.GradientANOVAResults.__hash__", "skbio.stats.gradient.GradientANOVAResults.__le__", "skbio.stats.gradient.GradientANOVAResults.__lt__", "skbio.stats.gradient.GradientANOVAResults.__ne__", "skbio.stats.gradient.GradientANOVAResults.__str__", "skbio.stats.gradient.GradientANOVAResults.to_files", "skbio.stats.gradient.GroupResults", "skbio.stats.gradient.GroupResults.__eq__", "skbio.stats.gradient.GroupResults.__ge__", "skbio.stats.gradient.GroupResults.__getstate__", "skbio.stats.gradient.GroupResults.__gt__", "skbio.stats.gradient.GroupResults.__hash__", "skbio.stats.gradient.GroupResults.__le__", "skbio.stats.gradient.GroupResults.__lt__", "skbio.stats.gradient.GroupResults.__ne__", "skbio.stats.gradient.GroupResults.__str__", "skbio.stats.gradient.GroupResults.to_files", "skbio.stats.gradient.TrajectoryGradientANOVA", "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "skbio.stats.gradient.WindowDifferenceGradientANOVA", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "skbio.stats.isubsample", "Ordination methods (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.ordination</span></code>)", "skbio.stats.ordination.OrdinationResults", "skbio.stats.ordination.OrdinationResults.__eq__", "skbio.stats.ordination.OrdinationResults.__ge__", "skbio.stats.ordination.OrdinationResults.__getstate__", "skbio.stats.ordination.OrdinationResults.__gt__", "skbio.stats.ordination.OrdinationResults.__hash__", "skbio.stats.ordination.OrdinationResults.__le__", "skbio.stats.ordination.OrdinationResults.__lt__", "skbio.stats.ordination.OrdinationResults.__ne__", "skbio.stats.ordination.OrdinationResults.__str__", "skbio.stats.ordination.OrdinationResults.plot", "skbio.stats.ordination.OrdinationResults.read", "skbio.stats.ordination.OrdinationResults.write", "skbio.stats.ordination.ca", "skbio.stats.ordination.cca", "skbio.stats.ordination.corr", "skbio.stats.ordination.e_matrix", "skbio.stats.ordination.f_matrix", "skbio.stats.ordination.mean_and_std", "skbio.stats.ordination.pcoa", "skbio.stats.ordination.pcoa_biplot", "skbio.stats.ordination.rda", "skbio.stats.ordination.scale", "skbio.stats.ordination.svd_rank", "Empirical Power Estimation (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.power</span></code>)", "skbio.stats.power.confidence_bound", "skbio.stats.power.paired_subsamples", "skbio.stats.power.subsample_paired_power", "skbio.stats.power.subsample_power", "skbio.stats.subsample_counts", "skbio.tree.DuplicateNodeError", "skbio.tree.MissingNodeError", "skbio.tree.NoLengthError", "skbio.tree.NoParentError", "skbio.tree.TreeError", "skbio.tree.TreeNode", "skbio.tree.TreeNode.__copy__", "skbio.tree.TreeNode.__deepcopy__", "skbio.tree.TreeNode.__eq__", "skbio.tree.TreeNode.__ge__", "skbio.tree.TreeNode.__getitem__", "skbio.tree.TreeNode.__getstate__", "skbio.tree.TreeNode.__gt__", "skbio.tree.TreeNode.__hash__", "skbio.tree.TreeNode.__iter__", "skbio.tree.TreeNode.__le__", "skbio.tree.TreeNode.__len__", "skbio.tree.TreeNode.__lt__", "skbio.tree.TreeNode.__ne__", "skbio.tree.TreeNode.__str__", "skbio.tree.TreeNode.accumulate_to_ancestor", "skbio.tree.TreeNode.ancestors", "skbio.tree.TreeNode.append", "skbio.tree.TreeNode.ascii_art", "skbio.tree.TreeNode.assign_ids", "skbio.tree.TreeNode.assign_supports", "skbio.tree.TreeNode.bifurcate", "skbio.tree.TreeNode.cache_attr", "skbio.tree.TreeNode.compare_rfd", "skbio.tree.TreeNode.compare_subsets", "skbio.tree.TreeNode.compare_tip_distances", "skbio.tree.TreeNode.copy", "skbio.tree.TreeNode.count", "skbio.tree.TreeNode.create_caches", "skbio.tree.TreeNode.deepcopy", "skbio.tree.TreeNode.descending_branch_length", "skbio.tree.TreeNode.distance", "skbio.tree.TreeNode.extend", "skbio.tree.TreeNode.find", "skbio.tree.TreeNode.find_all", "skbio.tree.TreeNode.find_by_func", "skbio.tree.TreeNode.find_by_id", "skbio.tree.TreeNode.from_linkage_matrix", "skbio.tree.TreeNode.from_taxdump", "skbio.tree.TreeNode.from_taxonomy", "skbio.tree.TreeNode.get_max_distance", "skbio.tree.TreeNode.has_children", "skbio.tree.TreeNode.index_tree", "skbio.tree.TreeNode.invalidate_caches", "skbio.tree.TreeNode.is_root", "skbio.tree.TreeNode.is_tip", "skbio.tree.TreeNode.lca", "skbio.tree.TreeNode.levelorder", "skbio.tree.TreeNode.lowest_common_ancestor", "skbio.tree.TreeNode.neighbors", "skbio.tree.TreeNode.non_tips", "skbio.tree.TreeNode.observed_node_counts", "skbio.tree.TreeNode.pop", "skbio.tree.TreeNode.postorder", "skbio.tree.TreeNode.pre_and_postorder", "skbio.tree.TreeNode.preorder", "skbio.tree.TreeNode.prune", "skbio.tree.TreeNode.read", "skbio.tree.TreeNode.remove", "skbio.tree.TreeNode.remove_deleted", "skbio.tree.TreeNode.root", "skbio.tree.TreeNode.root_at", "skbio.tree.TreeNode.root_at_midpoint", "skbio.tree.TreeNode.shear", "skbio.tree.TreeNode.shuffle", "skbio.tree.TreeNode.siblings", "skbio.tree.TreeNode.subset", "skbio.tree.TreeNode.subsets", "skbio.tree.TreeNode.subtree", "skbio.tree.TreeNode.tip_tip_distances", "skbio.tree.TreeNode.tips", "skbio.tree.TreeNode.to_array", "skbio.tree.TreeNode.to_taxonomy", "skbio.tree.TreeNode.traverse", "skbio.tree.TreeNode.unpack", "skbio.tree.TreeNode.unpack_by_func", "skbio.tree.TreeNode.unrooted_copy", "skbio.tree.TreeNode.unrooted_deepcopy", "skbio.tree.TreeNode.write", "skbio.tree.majority_rule", "skbio.tree.nj", "skbio.util.EfficiencyWarning", "skbio.util.RepresentationWarning", "skbio.util.assert_data_frame_almost_equal", "skbio.util.assert_ordination_results_equal", "skbio.util.cardinal_to_ordinal", "skbio.util.classproperty", "skbio.util.classproperty.__delete__", "skbio.util.classproperty.__eq__", "skbio.util.classproperty.__ge__", "skbio.util.classproperty.__get__", "skbio.util.classproperty.__getstate__", "skbio.util.classproperty.__gt__", "skbio.util.classproperty.__hash__", "skbio.util.classproperty.__le__", "skbio.util.classproperty.__lt__", "skbio.util.classproperty.__ne__", "skbio.util.classproperty.__set__", "skbio.util.classproperty.__set_name__", "skbio.util.classproperty.__str__", "skbio.util.classproperty.deleter", "skbio.util.classproperty.getter", "skbio.util.classproperty.setter", "skbio.util.find_duplicates", "skbio.util.get_data_path", "skbio.util.safe_md5", "skbio.workflow.Workflow", "skbio.workflow.Workflow.__call__", "skbio.workflow.Workflow.__eq__", "skbio.workflow.Workflow.__ge__", "skbio.workflow.Workflow.__getstate__", "skbio.workflow.Workflow.__gt__", "skbio.workflow.Workflow.__hash__", "skbio.workflow.Workflow.__le__", "skbio.workflow.Workflow.__lt__", "skbio.workflow.Workflow.__ne__", "skbio.workflow.Workflow.__str__", "skbio.workflow.Workflow.initialize_state", "skbio.workflow.method", "skbio.workflow.method.__call__", "skbio.workflow.method.__eq__", "skbio.workflow.method.__ge__", "skbio.workflow.method.__getstate__", "skbio.workflow.method.__gt__", "skbio.workflow.method.__hash__", "skbio.workflow.method.__le__", "skbio.workflow.method.__lt__", "skbio.workflow.method.__ne__", "skbio.workflow.method.__str__", "skbio.workflow.requires", "skbio.workflow.requires.__call__", "skbio.workflow.requires.__eq__", "skbio.workflow.requires.__ge__", "skbio.workflow.requires.__getstate__", "skbio.workflow.requires.__gt__", "skbio.workflow.requires.__hash__", "skbio.workflow.requires.__le__", "skbio.workflow.requires.__lt__", "skbio.workflow.requires.__ne__", "skbio.workflow.requires.__str__", "Home", "File I/O (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io</span></code>)", "Metadata (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.metadata</span></code>)", "Sequences (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence</span></code>)", "Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats</span></code>)", "Feature Table (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.table</span></code>)", "Tree representations (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.tree</span></code>)", "Utility functionality (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.util</span></code>)", "Constructing workflows (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.workflow</span></code>)"], "terms": {"thi": [0, 1, 16, 30, 31, 32, 33, 35, 40, 42, 44, 45, 46, 47, 48, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 78, 79, 80, 83, 84, 85, 90, 93, 94, 103, 104, 105, 106, 107, 108, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 161, 162, 163, 175, 183, 186, 188, 190, 191, 192, 194, 195, 201, 203, 204, 205, 206, 207, 213, 215, 216, 217, 218, 219, 220, 222, 225, 226, 227, 228, 230, 233, 235, 237, 238, 241, 242, 246, 250, 252, 253, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 276, 277, 280, 281, 282, 291, 292, 293, 294, 296, 297, 298, 299, 301, 304, 306, 308, 309, 311, 312, 316, 320, 329, 330, 331, 332, 334, 335, 336, 337, 339, 340, 342, 343, 344, 347, 348, 349, 350, 352, 355, 357, 359, 360, 362, 363, 367, 371, 381, 382, 383, 384, 386, 387, 388, 389, 391, 392, 395, 396, 397, 400, 401, 402, 403, 405, 408, 410, 412, 413, 416, 417, 421, 425, 427, 428, 436, 437, 438, 439, 440, 442, 443, 444, 445, 447, 448, 449, 452, 453, 455, 456, 457, 459, 460, 461, 462, 464, 467, 469, 471, 472, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 516, 517, 518, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 547, 550, 552, 565, 566, 567, 570, 572, 574, 576, 589, 591, 592, 593, 594, 597, 600, 601, 602, 604, 606, 607, 608, 609, 698, 699, 710, 711, 712, 714, 719, 720, 721, 724, 726, 727, 728, 735, 751, 753, 755, 757, 759, 760, 763, 765, 766, 768, 770, 771, 773, 777, 784, 788, 791, 792, 794, 796, 797, 799, 800, 801, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 839, 840, 841, 842, 852, 864, 876, 877, 878, 879, 880, 881, 882, 883], "modul": [0, 1, 147, 149, 190, 523, 526, 609, 699, 724, 839, 840, 877, 878, 880, 881, 883], "provid": [0, 1, 16, 28, 45, 47, 48, 55, 56, 61, 64, 66, 68, 78, 83, 94, 103, 104, 105, 106, 107, 112, 133, 137, 138, 142, 144, 146, 147, 148, 149, 161, 163, 182, 183, 187, 188, 190, 192, 220, 228, 250, 263, 266, 272, 276, 299, 320, 330, 333, 339, 342, 350, 371, 382, 385, 391, 395, 398, 403, 425, 438, 441, 447, 452, 457, 462, 478, 483, 486, 491, 493, 495, 511, 516, 521, 526, 534, 547, 548, 562, 565, 569, 587, 591, 596, 600, 601, 602, 603, 604, 606, 609, 643, 698, 700, 710, 711, 715, 724, 726, 727, 757, 765, 773, 786, 792, 796, 799, 806, 814, 815, 842, 876, 877, 878, 880, 881, 882, 883], "comput": [0, 1, 46, 47, 50, 69, 72, 78, 85, 96, 102, 103, 104, 105, 106, 107, 108, 111, 204, 246, 250, 316, 320, 367, 371, 421, 425, 476, 478, 511, 523, 524, 525, 529, 534, 540, 544, 545, 546, 547, 562, 587, 600, 601, 602, 603, 604, 605, 608, 609, 610, 620, 642, 643, 653, 654, 665, 676, 686, 687, 697, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 766, 802, 804, 814, 840, 878, 881], "manipul": [0, 51, 52, 146, 258, 260, 326, 328, 377, 379, 433, 435, 457, 480, 481, 526, 547], "sequenc": [0, 1, 2, 16, 28, 29, 31, 32, 33, 38, 40, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 133, 134, 135, 136, 138, 139, 140, 145, 148, 194, 204, 216, 534, 548, 606, 698, 728, 875, 876, 883], "dna": [0, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 48, 49, 50, 52, 53, 54, 56, 57, 58, 61, 64, 66, 135, 136, 137, 138, 139, 140, 144, 145, 147, 282, 294, 311, 313, 314, 315, 317, 318, 321, 322, 323, 324, 327, 328, 330, 338, 342, 343, 362, 364, 365, 366, 368, 369, 372, 373, 374, 375, 378, 379, 382, 390, 395, 396, 398, 415, 416, 418, 419, 420, 422, 423, 426, 427, 428, 429, 430, 431, 434, 435, 437, 438, 446, 449, 450, 452, 453, 457, 474, 481, 483, 493, 548, 876, 878], "rna": [0, 28, 33, 61, 64, 66, 135, 136, 137, 138, 139, 144, 145, 147, 223, 241, 278, 279, 280, 282, 292, 293, 294, 311, 362, 457, 474, 534, 878], "protein": [0, 16, 28, 47, 60, 62, 65, 66, 133, 135, 136, 137, 138, 139, 144, 145, 147, 263, 276, 279, 280, 282, 292, 293, 294, 330, 342, 438, 452, 454, 455, 457, 483, 493, 507, 727, 878], "can": [0, 1, 16, 28, 53, 56, 60, 61, 62, 66, 67, 74, 78, 79, 94, 103, 105, 106, 107, 109, 110, 111, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 191, 194, 203, 204, 219, 241, 246, 248, 263, 273, 311, 316, 318, 330, 340, 362, 367, 369, 382, 392, 416, 421, 423, 438, 448, 457, 474, 476, 483, 492, 495, 499, 507, 523, 526, 529, 534, 544, 547, 548, 552, 572, 576, 600, 601, 602, 604, 605, 606, 609, 699, 710, 713, 718, 719, 720, 721, 724, 726, 727, 728, 735, 756, 758, 766, 796, 799, 806, 814, 815, 816, 820, 821, 841, 864, 878, 881, 883], "well": [0, 138, 146, 149, 457, 534, 547, 548, 601, 603, 604, 608, 700, 714, 814, 876, 881, 882], "custom": [0, 1, 148, 223, 246, 282, 283, 294, 316, 345, 367, 398, 421, 476, 710], "alphabet": [0, 57, 67, 109, 110, 133, 137, 223, 276, 282, 294, 342, 345, 395, 398, 452, 457, 493, 495, 507, 510, 513, 524, 878], "load": [0, 137, 138, 143, 145, 146, 507, 529, 547, 548, 600, 601, 604, 605, 839, 840, 876], "two": [0, 1, 60, 61, 62, 63, 64, 65, 66, 69, 74, 94, 105, 106, 133, 134, 137, 138, 139, 140, 142, 144, 145, 148, 194, 195, 201, 207, 213, 216, 221, 223, 228, 241, 246, 263, 267, 269, 299, 311, 316, 330, 334, 336, 345, 350, 362, 367, 382, 386, 388, 398, 403, 416, 421, 438, 442, 444, 462, 474, 476, 483, 487, 489, 495, 497, 499, 504, 506, 511, 517, 524, 525, 526, 529, 531, 534, 541, 544, 545, 547, 548, 550, 552, 557, 559, 562, 566, 572, 574, 576, 581, 583, 587, 592, 600, 601, 602, 603, 604, 605, 606, 608, 714, 719, 724, 727, 728, 759, 760, 766, 775, 797, 799, 814, 819, 876, 878, 881], "have": [0, 1, 16, 46, 49, 50, 53, 54, 66, 68, 78, 83, 95, 99, 105, 106, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 181, 191, 194, 204, 205, 206, 228, 241, 247, 263, 292, 299, 311, 317, 330, 350, 362, 368, 382, 403, 416, 422, 438, 462, 474, 483, 497, 513, 529, 545, 547, 550, 574, 602, 608, 609, 631, 643, 664, 675, 698, 710, 713, 714, 715, 718, 719, 721, 722, 724, 726, 727, 728, 729, 735, 754, 755, 756, 765, 767, 768, 791, 797, 804, 806, 807, 816, 818, 878, 881, 883], "been": [0, 60, 61, 62, 67, 111, 137, 138, 139, 144, 181, 183, 188, 191, 259, 263, 271, 327, 330, 338, 378, 382, 390, 434, 438, 446, 457, 483, 529, 602, 608, 729, 791], "previous": [0, 266, 273, 333, 340, 385, 392, 441, 448, 486, 492, 883], "tabularmsa": [0, 60, 61, 62, 63, 64, 65, 66, 126, 135, 138, 144, 147, 204, 876], "object": [0, 1, 16, 28, 31, 32, 33, 42, 45, 48, 49, 51, 52, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 108, 111, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 182, 184, 187, 189, 194, 195, 201, 203, 204, 205, 206, 207, 213, 215, 216, 217, 218, 219, 223, 225, 228, 230, 241, 242, 246, 249, 250, 257, 258, 260, 261, 262, 267, 268, 269, 270, 277, 294, 296, 299, 301, 311, 312, 316, 319, 320, 325, 326, 328, 329, 334, 335, 336, 337, 343, 345, 347, 350, 352, 362, 363, 367, 370, 371, 376, 377, 379, 381, 386, 387, 388, 389, 396, 398, 400, 403, 405, 416, 417, 421, 424, 425, 432, 433, 435, 436, 437, 442, 443, 444, 445, 453, 457, 459, 462, 464, 474, 475, 476, 477, 478, 479, 480, 481, 482, 487, 488, 489, 490, 495, 499, 509, 511, 515, 523, 524, 529, 547, 548, 552, 561, 562, 564, 572, 576, 586, 587, 590, 600, 601, 603, 604, 605, 606, 631, 664, 675, 713, 714, 719, 720, 721, 735, 752, 760, 767, 799, 804, 806, 815, 818, 819, 840, 841, 864, 876, 878, 881, 883], "us": [0, 1, 2, 16, 28, 35, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 60, 61, 62, 72, 73, 74, 78, 79, 82, 83, 90, 93, 94, 97, 103, 105, 106, 107, 108, 111, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 149, 151, 161, 162, 163, 179, 180, 183, 188, 191, 204, 216, 223, 241, 246, 258, 260, 263, 266, 273, 276, 279, 280, 282, 290, 291, 292, 293, 294, 311, 316, 326, 328, 330, 333, 340, 342, 345, 362, 367, 377, 379, 382, 385, 392, 395, 398, 416, 421, 433, 435, 438, 441, 448, 452, 454, 455, 457, 474, 476, 480, 481, 483, 486, 492, 493, 495, 499, 511, 523, 524, 526, 527, 528, 529, 534, 535, 536, 538, 539, 545, 547, 548, 552, 562, 572, 576, 587, 594, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 632, 643, 654, 676, 687, 699, 710, 713, 719, 723, 724, 725, 726, 727, 728, 735, 736, 737, 753, 755, 756, 757, 760, 761, 764, 766, 772, 773, 791, 796, 797, 804, 806, 811, 812, 814, 816, 817, 818, 819, 820, 841, 864, 878, 881, 882, 883], "id": [0, 1, 28, 33, 51, 56, 57, 78, 94, 103, 105, 106, 107, 108, 111, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 228, 237, 239, 258, 279, 280, 282, 291, 292, 293, 299, 308, 310, 326, 350, 359, 361, 377, 403, 412, 414, 433, 454, 455, 457, 462, 471, 473, 480, 495, 496, 497, 499, 505, 506, 509, 511, 514, 518, 521, 540, 547, 548, 549, 550, 552, 558, 559, 561, 562, 563, 567, 569, 572, 573, 574, 576, 582, 583, 586, 587, 588, 589, 593, 594, 596, 599, 600, 601, 602, 603, 604, 605, 606, 643, 687, 700, 709, 710, 726, 727, 728, 736, 737, 754, 761, 764, 771, 773, 774, 777, 804, 806, 815, 878], "msa": [0, 28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 48, 49, 50, 53, 54, 56, 57, 58, 135, 137, 138, 144, 147], "": [0, 1, 2, 16, 28, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 61, 62, 65, 69, 71, 74, 76, 77, 78, 79, 81, 82, 86, 88, 89, 90, 94, 95, 97, 98, 99, 101, 102, 103, 105, 106, 108, 109, 110, 130, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 194, 204, 216, 223, 225, 228, 230, 233, 235, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 276, 278, 279, 280, 282, 283, 289, 292, 293, 294, 296, 299, 301, 304, 306, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 345, 347, 350, 352, 355, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 395, 398, 400, 403, 405, 408, 410, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 452, 454, 455, 457, 459, 462, 464, 467, 469, 471, 472, 473, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 499, 506, 507, 509, 521, 524, 527, 528, 529, 532, 533, 535, 536, 540, 544, 546, 548, 552, 559, 561, 569, 576, 583, 586, 596, 600, 601, 602, 603, 604, 631, 664, 675, 698, 710, 713, 714, 715, 719, 721, 723, 724, 726, 727, 728, 757, 765, 777, 793, 814, 864, 876, 878, 881, 883], "index": [0, 1, 2, 28, 30, 33, 35, 42, 45, 48, 49, 52, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 71, 74, 80, 82, 83, 86, 87, 89, 95, 97, 98, 99, 102, 103, 135, 137, 144, 145, 147, 230, 260, 301, 328, 352, 379, 405, 435, 464, 481, 496, 499, 518, 527, 528, 529, 534, 547, 549, 552, 567, 573, 576, 593, 594, 600, 601, 602, 603, 604, 609, 643, 687, 700, 710, 726, 774, 777, 787, 788, 806, 814, 818], "from": [0, 1, 16, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 74, 78, 83, 94, 101, 102, 105, 106, 112, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 161, 162, 163, 182, 187, 194, 203, 204, 216, 217, 220, 223, 224, 225, 228, 230, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 292, 293, 294, 295, 296, 299, 301, 304, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 345, 346, 347, 350, 352, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 398, 399, 400, 403, 405, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 457, 458, 459, 462, 464, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 499, 506, 507, 510, 511, 513, 515, 516, 518, 519, 521, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 552, 559, 562, 564, 565, 567, 569, 576, 583, 587, 590, 591, 593, 594, 596, 600, 601, 602, 604, 605, 606, 608, 609, 610, 698, 699, 710, 711, 713, 714, 716, 717, 719, 724, 726, 727, 728, 729, 736, 737, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 820, 840, 842, 878, 881, 883], "import": [0, 1, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 74, 78, 94, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 161, 162, 163, 194, 204, 216, 223, 224, 225, 228, 230, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 282, 292, 293, 294, 295, 296, 299, 301, 304, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 345, 346, 347, 350, 352, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 395, 396, 398, 399, 400, 403, 405, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 457, 458, 459, 462, 464, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 495, 506, 507, 510, 513, 515, 518, 521, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 559, 564, 567, 569, 583, 590, 593, 594, 596, 600, 601, 602, 604, 605, 608, 609, 698, 699, 710, 724, 726, 727, 728, 729, 736, 737, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 820, 840, 876, 878, 881, 883], "seq": [0, 28, 38, 43, 49, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 133, 134, 135, 137, 138, 140, 144, 145, 226, 227, 240, 247, 250, 258, 260, 273, 274, 276, 277, 280, 293, 294, 297, 298, 317, 320, 326, 328, 340, 342, 343, 348, 349, 368, 371, 377, 379, 392, 395, 396, 401, 402, 415, 422, 425, 433, 435, 448, 449, 452, 453, 455, 457, 460, 461, 478, 480, 481, 492, 493, 534, 698, 883], "acc": [0, 134, 878], "g": [0, 1, 16, 33, 47, 48, 54, 62, 65, 80, 83, 90, 94, 108, 111, 126, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 148, 149, 194, 223, 230, 233, 238, 241, 242, 249, 250, 251, 252, 253, 263, 301, 304, 309, 311, 312, 319, 320, 321, 330, 345, 352, 355, 360, 362, 363, 370, 371, 372, 382, 398, 405, 408, 413, 416, 417, 424, 425, 426, 427, 428, 438, 457, 464, 467, 472, 474, 475, 477, 478, 483, 495, 499, 507, 513, 524, 529, 544, 547, 548, 552, 572, 576, 594, 600, 601, 603, 604, 710, 727, 728, 735, 756, 757, 762, 765, 769, 796, 797, 798, 800, 801, 807, 810, 811, 812, 814, 841, 876, 878, 881, 883], "ggta": 0, "metadata": [0, 1, 28, 33, 42, 45, 46, 48, 51, 52, 53, 54, 56, 57, 132, 135, 136, 137, 138, 139, 140, 144, 145, 223, 228, 230, 237, 239, 240, 241, 244, 247, 257, 258, 260, 266, 273, 274, 278, 279, 280, 282, 292, 293, 294, 299, 301, 308, 310, 311, 314, 317, 325, 326, 328, 333, 340, 345, 350, 352, 359, 361, 362, 365, 368, 376, 377, 379, 385, 392, 398, 403, 405, 412, 414, 415, 416, 419, 422, 432, 433, 435, 441, 448, 449, 450, 454, 455, 457, 462, 464, 471, 473, 474, 479, 480, 481, 486, 492, 511, 562, 587, 601, 609, 621, 643, 654, 665, 687, 710, 721, 724, 726, 727, 728, 875, 878], "seq1": [0, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 135, 137, 138, 144, 147, 524, 525], "tcc": 0, "ggca": 0, "seq2": [0, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 137, 138, 147, 524, 525], "minter": [0, 28, 33, 45, 48, 56, 57, 135, 144], "stat": [0, 1, 28, 45, 46, 48, 53, 54, 57, 90, 96, 131, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 223, 230, 240, 241, 244, 247, 274, 278, 279, 280, 282, 292, 293, 294, 301, 311, 314, 317, 345, 352, 362, 365, 368, 398, 405, 415, 416, 419, 422, 449, 450, 454, 455, 457, 464, 474, 506, 515, 521, 523, 875, 878], "count": [0, 28, 45, 48, 50, 54, 57, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 132, 135, 137, 138, 144, 147, 250, 252, 253, 265, 267, 269, 320, 332, 334, 336, 371, 384, 386, 388, 425, 427, 428, 440, 442, 444, 478, 485, 487, 489, 525, 526, 529, 534, 608, 714, 720, 727, 728, 729, 759, 760, 786, 814, 875, 876], "2": [0, 1, 16, 28, 33, 40, 45, 46, 47, 49, 50, 53, 54, 56, 60, 61, 62, 63, 64, 65, 69, 72, 74, 76, 78, 80, 83, 84, 85, 87, 88, 90, 94, 97, 98, 99, 105, 106, 107, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 162, 204, 216, 219, 221, 223, 240, 241, 242, 248, 249, 250, 253, 261, 263, 265, 274, 276, 280, 283, 292, 293, 311, 312, 318, 319, 320, 329, 330, 332, 342, 362, 363, 369, 370, 371, 381, 382, 384, 395, 415, 416, 417, 423, 424, 425, 428, 436, 438, 440, 449, 452, 455, 457, 474, 475, 477, 478, 482, 483, 485, 493, 495, 506, 507, 513, 515, 518, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 559, 564, 567, 569, 572, 583, 590, 593, 594, 596, 600, 601, 602, 603, 604, 605, 606, 608, 609, 698, 699, 710, 713, 714, 716, 719, 721, 724, 726, 727, 728, 729, 750, 755, 756, 758, 760, 765, 766, 771, 773, 774, 775, 798, 799, 804, 806, 807, 809, 810, 814, 815, 820, 876, 878, 881, 883], "posit": [0, 16, 28, 29, 33, 42, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 60, 61, 62, 63, 64, 65, 66, 67, 133, 134, 135, 137, 138, 139, 142, 144, 145, 146, 147, 223, 228, 230, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 260, 261, 263, 266, 267, 268, 269, 270, 271, 273, 274, 278, 279, 280, 292, 293, 299, 301, 304, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 321, 328, 329, 330, 333, 334, 335, 336, 337, 338, 340, 345, 350, 352, 355, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 372, 379, 381, 382, 385, 386, 387, 388, 389, 390, 392, 393, 398, 403, 405, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 435, 436, 438, 441, 442, 443, 444, 445, 446, 448, 449, 450, 454, 455, 457, 462, 464, 467, 471, 472, 473, 474, 475, 477, 481, 482, 483, 486, 487, 488, 489, 490, 492, 527, 528, 529, 538, 602, 608, 687, 700, 724, 725, 727, 728, 787, 878], "13": [0, 73, 95, 99, 134, 137, 143, 145, 223, 294, 345, 398, 457, 529, 534, 699], "dtype": [0, 1, 28, 33, 45, 46, 47, 48, 50, 53, 54, 56, 57, 135, 137, 138, 144, 145, 147, 240, 241, 243, 244, 245, 251, 268, 270, 271, 274, 276, 311, 313, 314, 315, 321, 335, 337, 338, 342, 362, 364, 365, 366, 372, 387, 389, 390, 393, 395, 415, 416, 418, 419, 420, 426, 443, 445, 446, 449, 452, 457, 474, 488, 490, 493, 495, 529, 548, 572, 594, 600, 604, 699, 806, 878], "conveni": [0, 16, 55, 59, 93, 184, 189, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 711, 712, 792, 813, 882], "local_pairwise_align_ssw": [0, 60, 61, 62, 63, 64, 65], "score": [0, 2, 16, 47, 60, 61, 62, 63, 64, 65, 66, 67, 73, 133, 134, 137, 139, 140, 145, 457, 495, 510, 513, 700, 721], "start_end_posit": 0, "actaaggctctctacccctctcagaga": 0, "actaaggctcctaacccccttttctcaga": 0, "30": [0, 134, 139, 140, 143, 145, 727, 728, 788], "actaaggctctct": 0, "acccc": 0, "tctcaga": 0, "actaaggctc": 0, "ctaacccccttttctcaga": 0, "27": [0, 78, 97, 105, 106, 134, 345, 540, 602], "0": [0, 1, 14, 15, 16, 28, 40, 45, 46, 48, 50, 53, 54, 56, 66, 67, 69, 74, 78, 79, 80, 83, 84, 92, 94, 95, 105, 106, 111, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 191, 216, 223, 224, 228, 230, 240, 241, 242, 244, 246, 247, 248, 250, 252, 253, 259, 265, 267, 269, 271, 274, 276, 277, 278, 279, 280, 282, 292, 293, 294, 295, 299, 301, 311, 312, 314, 316, 317, 318, 320, 327, 332, 334, 336, 338, 342, 343, 345, 346, 350, 352, 362, 363, 365, 367, 368, 369, 371, 378, 384, 386, 388, 390, 395, 396, 398, 399, 403, 405, 415, 416, 417, 419, 421, 422, 423, 425, 427, 428, 434, 440, 442, 444, 446, 449, 450, 452, 453, 454, 455, 457, 458, 462, 464, 474, 475, 476, 478, 485, 487, 489, 493, 495, 506, 507, 510, 515, 518, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 564, 567, 569, 583, 590, 593, 594, 596, 600, 601, 602, 604, 605, 606, 608, 609, 643, 698, 699, 710, 714, 718, 719, 722, 724, 725, 727, 728, 729, 736, 737, 750, 755, 758, 759, 760, 761, 764, 765, 766, 769, 775, 787, 793, 797, 798, 799, 804, 806, 809, 810, 814, 815, 820, 853, 876, 878, 881, 883], "24": [0, 134, 143, 507, 727], "28": [0, 94, 143, 724], "stripedsmithwaterman": [0, 66], "queri": [0, 2, 16, 66, 133, 134, 204, 457], "aaaaaactctctaaactcactaaggctctctacccctcttcagagaagtcga": 0, "print": [0, 1, 53, 78, 105, 106, 135, 137, 138, 139, 140, 142, 144, 145, 147, 247, 263, 276, 280, 293, 317, 330, 342, 368, 382, 395, 422, 438, 452, 455, 457, 483, 493, 547, 602, 608, 609, 698, 724, 728, 736, 737, 752, 753, 756, 757, 760, 761, 762, 764, 765, 767, 768, 769, 771, 773, 774, 776, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 794, 796, 797, 798, 799, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 878, 881, 883], "49": [0, 140, 143], "length": [0, 1, 16, 28, 45, 46, 48, 53, 60, 61, 62, 78, 94, 105, 106, 131, 133, 134, 136, 137, 138, 139, 140, 141, 144, 145, 147, 204, 216, 223, 224, 230, 235, 240, 241, 242, 244, 247, 250, 252, 253, 263, 264, 265, 267, 268, 269, 270, 274, 275, 276, 278, 279, 280, 282, 292, 293, 294, 295, 301, 306, 311, 312, 314, 317, 320, 330, 331, 332, 334, 335, 336, 337, 341, 342, 345, 346, 352, 357, 362, 363, 365, 368, 371, 382, 383, 384, 386, 387, 388, 389, 394, 395, 398, 399, 405, 410, 415, 416, 417, 419, 422, 425, 427, 428, 438, 439, 440, 442, 443, 444, 445, 449, 450, 451, 452, 454, 455, 457, 458, 464, 469, 474, 475, 478, 483, 484, 485, 487, 488, 489, 490, 493, 511, 524, 525, 529, 534, 562, 587, 600, 603, 604, 608, 718, 719, 727, 728, 732, 735, 750, 756, 765, 766, 775, 797, 804, 806, 809, 810, 815, 878, 881, 883], "multipl": [0, 28, 53, 78, 105, 106, 135, 136, 137, 138, 139, 140, 142, 148, 194, 216, 457, 495, 526, 529, 534, 538, 608, 721, 727, 807, 814, 876, 881], "target": [0, 1, 2, 16, 66, 77, 140, 506, 521, 559, 569, 583, 596], "an": [0, 1, 2, 16, 28, 30, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 66, 78, 79, 81, 87, 91, 92, 103, 105, 106, 107, 111, 125, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 161, 162, 163, 176, 178, 179, 180, 182, 187, 191, 192, 194, 204, 215, 216, 218, 219, 221, 222, 223, 230, 241, 248, 257, 258, 260, 267, 269, 273, 276, 281, 282, 292, 294, 301, 311, 318, 325, 326, 328, 334, 336, 340, 342, 344, 345, 352, 362, 369, 376, 377, 379, 386, 388, 392, 395, 397, 398, 405, 416, 423, 432, 433, 435, 442, 444, 448, 452, 456, 457, 464, 474, 479, 480, 481, 487, 489, 492, 493, 494, 495, 499, 506, 509, 511, 513, 517, 521, 522, 529, 532, 533, 535, 536, 539, 541, 544, 545, 547, 552, 559, 561, 562, 566, 569, 570, 576, 583, 584, 586, 587, 592, 596, 597, 600, 602, 603, 604, 608, 620, 642, 653, 665, 686, 697, 698, 699, 709, 712, 718, 719, 724, 726, 727, 728, 729, 736, 737, 750, 752, 753, 755, 757, 761, 763, 764, 768, 771, 772, 774, 781, 783, 786, 796, 799, 804, 806, 809, 811, 812, 813, 814, 815, 816, 821, 822, 825, 832, 838, 839, 840, 842, 864, 876, 878, 881, 883], "effici": [0, 141, 589], "wai": [0, 1, 137, 138, 142, 144, 147, 149, 194, 275, 341, 394, 451, 495, 529, 602, 719, 724, 876, 881], "find": [0, 79, 243, 245, 248, 251, 261, 263, 268, 270, 271, 313, 315, 318, 321, 329, 330, 335, 337, 338, 364, 366, 369, 372, 381, 382, 387, 389, 390, 393, 418, 420, 423, 426, 436, 438, 443, 445, 446, 482, 483, 488, 490, 601, 604, 608, 714, 728, 750, 751, 763, 765, 766, 769, 770, 771, 776, 778, 779, 780, 781, 783, 784, 791, 795, 800, 809, 811, 812, 838], "represent": [0, 1, 131, 132, 137, 142, 146, 204, 266, 290, 333, 385, 441, 486, 505, 545, 558, 582, 607, 700, 709, 735, 749, 806, 807, 875, 876], "target_sequ": [0, 2, 16, 17], "gctaactaggctcccttctacccctctcagaga": 0, "gcccagtagcttcccaatatgagagcatcaattgtagatcgggcc": 0, "tctataagattccgcatgcgttacttataagatgtctcaacgg": 0, "tagagattaattgccactgccaaaattctg": 0, "query_sequ": [0, 2, 16, 17], "append": [0, 48, 144, 149, 457, 767], "act": [0, 54, 161, 162, 163], "aggctc": 0, "38": [0, 133, 138, 143, 724], "aligned_query_sequ": [0, 2], "tctacccctctcagaga": 0, "aligned_target_sequ": [0, 2], "aggctcccttctacccctctcagaga": 0, "scikit": [0, 1, 51, 52, 55, 59, 60, 63, 66, 67, 78, 105, 106, 107, 108, 109, 110, 111, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 220, 222, 258, 260, 272, 279, 280, 281, 282, 292, 293, 326, 328, 339, 344, 377, 379, 391, 397, 433, 435, 447, 454, 455, 456, 480, 481, 491, 494, 516, 522, 523, 565, 570, 591, 597, 711, 712, 792, 813, 816, 878, 882], "bio": [0, 1, 51, 52, 55, 59, 60, 63, 66, 67, 78, 105, 106, 107, 108, 109, 110, 111, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 220, 222, 258, 260, 272, 279, 280, 281, 282, 292, 293, 326, 328, 339, 344, 377, 379, 391, 397, 433, 435, 447, 454, 455, 456, 480, 481, 491, 494, 516, 522, 523, 565, 570, 591, 597, 601, 711, 712, 792, 813, 816, 878, 882], "also": [0, 1, 46, 47, 74, 78, 98, 104, 105, 106, 107, 126, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 151, 204, 253, 263, 273, 276, 292, 330, 340, 342, 382, 392, 395, 428, 438, 448, 452, 457, 483, 492, 493, 495, 529, 544, 545, 547, 600, 601, 602, 604, 608, 714, 721, 724, 727, 728, 818, 864, 876, 878, 883], "pure": [0, 816], "python": [0, 1, 2, 457, 547, 572, 602, 816, 821, 875, 876, 878], "implement": [0, 1, 60, 63, 68, 69, 73, 78, 83, 88, 99, 104, 105, 106, 109, 110, 138, 142, 146, 149, 161, 162, 163, 164, 191, 544, 713, 714, 719, 720, 758, 814, 816], "smith": [0, 16, 63, 64, 65, 66, 608], "waterman": [0, 16, 63, 64, 65, 66], "needleman": [0, 60, 61, 62], "wunsch": [0, 60, 61, 62], "These": [0, 1, 46, 51, 52, 68, 78, 105, 106, 139, 142, 146, 147, 148, 258, 260, 326, 328, 377, 379, 433, 435, 480, 481, 523, 605, 607, 700, 720, 726], "ar": [0, 1, 16, 28, 29, 33, 38, 42, 43, 46, 47, 50, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 74, 78, 79, 84, 85, 94, 103, 105, 106, 107, 108, 110, 111, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 161, 162, 163, 175, 182, 186, 187, 191, 194, 195, 201, 207, 213, 216, 218, 220, 221, 222, 223, 228, 230, 237, 240, 241, 247, 250, 254, 255, 256, 259, 267, 268, 269, 270, 272, 273, 276, 278, 279, 280, 281, 282, 283, 289, 291, 292, 293, 294, 299, 301, 308, 311, 317, 320, 322, 323, 324, 327, 334, 335, 336, 337, 339, 340, 342, 344, 345, 350, 352, 359, 362, 368, 371, 373, 374, 375, 378, 380, 386, 387, 388, 389, 391, 392, 395, 397, 398, 403, 405, 412, 415, 416, 422, 425, 429, 430, 431, 434, 442, 443, 444, 445, 447, 448, 450, 452, 454, 455, 456, 457, 462, 464, 471, 474, 478, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 504, 507, 510, 511, 516, 517, 521, 522, 524, 525, 526, 527, 529, 531, 534, 535, 536, 538, 539, 541, 542, 543, 544, 547, 548, 550, 552, 557, 562, 565, 566, 569, 570, 572, 574, 576, 581, 587, 589, 591, 592, 594, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 621, 643, 687, 698, 700, 709, 710, 711, 712, 713, 714, 717, 718, 719, 721, 722, 724, 726, 727, 728, 735, 755, 758, 763, 773, 784, 786, 787, 791, 792, 799, 800, 804, 806, 807, 808, 813, 814, 816, 818, 819, 821, 838, 841, 842, 853, 864, 876, 878, 881, 883], "much": [0, 1, 78, 105, 106, 142, 876], "slower": [0, 816], "than": [0, 1, 16, 46, 47, 69, 78, 83, 85, 101, 105, 106, 137, 142, 144, 147, 183, 188, 204, 223, 224, 225, 228, 242, 246, 250, 261, 262, 263, 264, 265, 267, 268, 269, 270, 280, 293, 295, 296, 299, 312, 316, 320, 329, 330, 331, 332, 334, 335, 336, 337, 345, 346, 347, 350, 363, 367, 371, 381, 382, 383, 384, 386, 387, 388, 389, 398, 399, 400, 403, 417, 421, 425, 436, 437, 438, 439, 440, 442, 443, 444, 445, 455, 458, 459, 462, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 495, 525, 526, 529, 531, 534, 547, 589, 600, 602, 603, 604, 608, 698, 713, 714, 727, 728, 729, 756, 773, 786, 815, 820, 876, 881], "method": [0, 1, 2, 16, 28, 35, 47, 54, 55, 59, 60, 80, 103, 105, 107, 108, 111, 132, 143, 146, 151, 161, 163, 164, 181, 194, 204, 215, 220, 222, 223, 226, 227, 241, 250, 272, 274, 280, 281, 282, 291, 293, 294, 297, 298, 311, 320, 339, 344, 345, 348, 349, 362, 371, 391, 397, 398, 401, 402, 416, 425, 447, 449, 455, 456, 457, 460, 461, 474, 478, 491, 494, 495, 516, 522, 526, 529, 534, 538, 544, 547, 548, 565, 570, 572, 589, 591, 597, 600, 601, 602, 603, 604, 605, 610, 621, 631, 632, 643, 654, 664, 665, 675, 676, 687, 698, 700, 710, 711, 712, 713, 714, 719, 735, 736, 737, 753, 755, 756, 757, 760, 761, 763, 764, 765, 766, 768, 770, 771, 791, 792, 797, 799, 811, 812, 813, 814, 815, 821, 833, 840, 841, 842, 852, 864, 878, 879, 881, 883], "describ": [0, 1, 47, 60, 63, 70, 71, 74, 77, 78, 81, 82, 84, 85, 86, 87, 94, 95, 98, 105, 106, 111, 132, 136, 137, 138, 139, 140, 143, 144, 146, 147, 263, 266, 330, 333, 382, 385, 438, 441, 457, 483, 486, 517, 540, 546, 547, 566, 584, 592, 602, 608, 720, 777, 815, 878, 881], "abov": [0, 1, 54, 137, 139, 143, 144, 145, 146, 147, 149, 161, 163, 223, 345, 398, 457, 547, 600, 602, 604, 608, 878], "serv": [0, 148, 710], "thei": [0, 1, 38, 43, 47, 53, 69, 103, 107, 133, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 149, 221, 223, 228, 237, 240, 263, 283, 299, 308, 330, 350, 359, 382, 398, 403, 412, 415, 438, 462, 471, 483, 497, 509, 526, 550, 561, 574, 586, 600, 601, 602, 603, 604, 605, 609, 709, 710, 713, 719, 724, 760, 767, 816, 818, 883], "re": [0, 1, 45, 48, 54, 78, 103, 105, 106, 107, 132, 135, 137, 138, 144, 147, 223, 249, 277, 294, 319, 343, 345, 370, 396, 398, 424, 453, 457, 477, 605, 713, 721, 723, 724, 728, 806, 881, 883], "simpler": 0, "experi": [0, 136, 139, 146, 529, 534, 727], "local": [0, 63, 64, 65, 133, 134, 139], "global": [0, 60, 61, 62], "nucleotid": [0, 16, 61, 64, 134, 136, 137, 138, 139, 223, 240, 262, 274, 276, 342, 395, 398, 415, 437, 449, 452, 493, 495, 507, 883], "The": [0, 1, 16, 17, 45, 46, 47, 48, 49, 51, 52, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 78, 79, 80, 81, 83, 88, 90, 94, 95, 96, 97, 99, 102, 103, 105, 106, 107, 108, 109, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 161, 162, 163, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 191, 192, 194, 195, 204, 205, 206, 215, 216, 217, 218, 219, 220, 222, 225, 228, 230, 235, 240, 241, 242, 244, 246, 250, 258, 260, 261, 263, 264, 265, 272, 274, 276, 280, 281, 282, 291, 292, 293, 296, 299, 301, 306, 311, 312, 314, 316, 320, 326, 328, 329, 330, 331, 332, 339, 342, 344, 347, 350, 352, 357, 362, 363, 365, 367, 371, 377, 379, 381, 382, 383, 384, 391, 395, 397, 398, 400, 403, 405, 410, 415, 416, 417, 419, 421, 425, 433, 435, 436, 438, 439, 440, 447, 449, 452, 455, 456, 457, 459, 462, 464, 469, 474, 475, 476, 478, 480, 481, 482, 483, 484, 485, 491, 493, 494, 495, 499, 506, 511, 516, 521, 522, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 538, 539, 541, 543, 544, 545, 548, 552, 559, 562, 565, 569, 570, 572, 576, 583, 584, 587, 589, 591, 594, 596, 597, 600, 601, 602, 603, 604, 606, 608, 609, 621, 643, 654, 665, 687, 698, 700, 711, 712, 713, 714, 718, 719, 720, 721, 724, 725, 726, 727, 728, 750, 751, 756, 757, 758, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 773, 774, 775, 777, 781, 783, 784, 787, 792, 793, 795, 796, 798, 799, 800, 801, 804, 806, 813, 814, 815, 818, 821, 839, 841, 842, 876, 878, 881, 883], "differ": [0, 1, 33, 46, 47, 49, 60, 61, 62, 73, 78, 83, 95, 99, 105, 106, 112, 134, 137, 138, 144, 147, 148, 149, 225, 228, 237, 241, 242, 246, 261, 262, 267, 268, 269, 270, 273, 279, 282, 289, 296, 299, 308, 311, 312, 316, 329, 334, 335, 336, 337, 340, 347, 350, 359, 362, 363, 367, 381, 386, 387, 388, 389, 392, 400, 403, 412, 416, 417, 421, 436, 437, 442, 443, 444, 445, 448, 454, 459, 462, 471, 474, 475, 476, 482, 487, 488, 489, 490, 492, 499, 524, 529, 534, 547, 552, 576, 600, 603, 604, 608, 632, 687, 699, 713, 714, 719, 727, 728, 758, 759, 818, 819, 835, 836, 837, 878, 881], "underli": [0, 191, 223, 228, 292, 294, 299, 345, 350, 398, 403, 457, 462, 524, 724, 878], "appli": [0, 1, 16, 28, 47, 51, 52, 103, 106, 107, 108, 111, 136, 137, 142, 146, 148, 204, 223, 258, 260, 294, 326, 328, 345, 377, 379, 398, 433, 435, 457, 480, 481, 495, 511, 526, 562, 587, 589, 602, 605, 609, 713, 727, 815, 842, 883], "while": [0, 1, 131, 136, 137, 138, 139, 144, 194, 282, 457, 529, 604, 643, 687, 710, 726, 735, 763, 841, 878, 883], "default": [0, 1, 16, 28, 45, 46, 48, 54, 56, 59, 60, 61, 62, 64, 65, 69, 73, 83, 90, 94, 97, 103, 107, 133, 137, 139, 140, 141, 142, 144, 145, 146, 149, 151, 161, 163, 176, 178, 219, 222, 246, 263, 275, 276, 279, 280, 281, 282, 292, 293, 316, 330, 341, 342, 344, 367, 382, 394, 395, 397, 421, 438, 451, 452, 454, 455, 456, 476, 483, 493, 494, 506, 511, 515, 522, 527, 528, 529, 534, 535, 536, 538, 539, 548, 559, 562, 564, 570, 583, 587, 590, 597, 601, 602, 604, 605, 606, 643, 698, 710, 712, 718, 719, 721, 722, 729, 760, 785, 804, 813, 814, 815, 818, 819, 839, 842, 864, 876, 878, 881, 883], "match": [0, 16, 45, 48, 54, 61, 64, 67, 133, 137, 138, 146, 191, 192, 228, 248, 249, 267, 269, 270, 277, 292, 299, 318, 319, 334, 336, 337, 343, 350, 369, 370, 386, 388, 389, 396, 403, 423, 424, 442, 444, 445, 453, 462, 477, 487, 489, 490, 513, 548, 600, 602, 604, 605, 724, 726, 727, 728, 759, 760, 769, 771, 878, 883], "mismatch": [0, 16, 61, 64, 67, 133, 134, 267, 268, 269, 334, 335, 336, 386, 387, 388, 442, 443, 444, 487, 488, 489, 513, 602, 759], "gap": [0, 16, 46, 47, 50, 54, 60, 61, 62, 63, 64, 65, 133, 134, 135, 136, 137, 138, 139, 140, 144, 223, 240, 241, 244, 247, 248, 252, 253, 256, 263, 274, 275, 276, 278, 279, 280, 282, 292, 293, 294, 311, 314, 317, 318, 324, 330, 341, 342, 345, 362, 365, 368, 369, 375, 382, 394, 395, 398, 415, 416, 419, 422, 423, 427, 428, 431, 438, 449, 450, 451, 452, 454, 455, 457, 474, 483, 493, 524, 807, 878, 883], "here": [0, 1, 47, 69, 73, 78, 83, 88, 90, 96, 97, 99, 103, 104, 105, 106, 107, 108, 109, 110, 132, 136, 139, 144, 149, 161, 163, 192, 263, 330, 382, 438, 483, 529, 534, 608, 719, 721, 808, 815, 881], "we": [0, 1, 16, 45, 47, 48, 78, 83, 90, 94, 105, 106, 108, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 192, 194, 204, 250, 263, 273, 292, 320, 330, 340, 371, 382, 392, 425, 438, 448, 457, 478, 483, 492, 529, 534, 540, 546, 547, 600, 601, 602, 604, 605, 608, 609, 699, 710, 713, 721, 723, 724, 726, 727, 728, 760, 814, 876, 881, 883], "pair": [0, 1, 51, 60, 61, 62, 64, 67, 105, 106, 107, 111, 136, 138, 139, 140, 142, 147, 215, 219, 258, 326, 377, 433, 480, 495, 499, 506, 521, 525, 529, 552, 559, 569, 576, 583, 587, 594, 596, 605, 724, 775, 804, 878], "open": [0, 55, 59, 60, 61, 62, 63, 64, 65, 108, 133, 134, 138, 149, 161, 163, 182, 183, 184, 187, 188, 189, 192, 193, 194, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 711, 712, 792, 813, 840, 875, 876], "penalti": [0, 16, 60, 61, 62, 63, 64, 65], "11": [0, 16, 62, 65, 66, 72, 77, 78, 133, 136, 143, 145, 223, 249, 319, 370, 398, 424, 477, 529, 534, 540, 546, 609, 699, 714, 721, 724, 815], "extend": [0, 16, 45, 54, 60, 61, 62, 63, 64, 65, 78, 727, 752, 765, 814, 876], "1": [0, 1, 2, 15, 16, 28, 33, 45, 46, 47, 48, 50, 53, 54, 56, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 108, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 161, 162, 194, 204, 216, 219, 221, 223, 228, 230, 240, 241, 242, 248, 250, 263, 264, 265, 269, 274, 275, 276, 279, 280, 282, 283, 290, 291, 292, 293, 294, 299, 301, 311, 312, 318, 320, 330, 331, 332, 336, 341, 342, 345, 350, 352, 362, 363, 369, 371, 382, 383, 384, 388, 394, 395, 398, 403, 405, 415, 416, 417, 423, 425, 438, 439, 440, 444, 449, 451, 452, 454, 455, 457, 462, 464, 474, 475, 478, 483, 484, 485, 489, 493, 495, 506, 507, 510, 513, 515, 517, 518, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 559, 564, 566, 567, 569, 572, 583, 584, 590, 592, 593, 594, 596, 600, 601, 602, 603, 604, 605, 606, 608, 643, 665, 687, 698, 699, 710, 713, 714, 718, 721, 722, 724, 726, 727, 728, 729, 750, 755, 758, 760, 765, 766, 769, 773, 774, 775, 787, 797, 798, 799, 804, 806, 807, 809, 810, 814, 815, 820, 878, 881, 883], "other": [0, 1, 16, 33, 42, 51, 52, 54, 78, 93, 108, 136, 137, 138, 139, 141, 142, 144, 146, 147, 148, 191, 195, 201, 207, 213, 218, 223, 228, 237, 246, 252, 253, 258, 260, 262, 267, 268, 269, 270, 273, 283, 289, 299, 308, 316, 326, 328, 334, 335, 336, 337, 340, 345, 350, 359, 367, 377, 379, 386, 387, 388, 389, 392, 398, 403, 412, 421, 427, 428, 433, 435, 437, 442, 443, 444, 445, 448, 457, 462, 471, 476, 480, 481, 487, 488, 489, 490, 492, 495, 497, 504, 523, 529, 534, 547, 550, 557, 572, 574, 581, 604, 710, 713, 714, 719, 726, 728, 735, 758, 759, 760, 766, 768, 769, 818, 841, 852, 876, 878, 881, 883], "word": [0, 136, 137, 139, 142, 147, 219, 265, 332, 384, 440, 485], "more": [0, 1, 46, 47, 48, 55, 59, 60, 66, 69, 80, 103, 110, 134, 136, 137, 138, 142, 143, 144, 145, 146, 147, 183, 188, 220, 222, 254, 255, 256, 259, 272, 281, 322, 323, 324, 327, 339, 344, 345, 373, 374, 375, 378, 380, 391, 397, 429, 430, 431, 434, 447, 456, 491, 494, 499, 516, 522, 526, 529, 531, 534, 547, 552, 565, 570, 576, 589, 591, 597, 600, 601, 602, 603, 604, 605, 608, 620, 642, 653, 686, 697, 698, 710, 711, 712, 713, 714, 721, 727, 728, 756, 773, 792, 813, 814, 876, 881, 882], "costli": 0, "new": [0, 45, 48, 55, 56, 57, 71, 82, 84, 85, 105, 148, 161, 162, 163, 175, 186, 204, 220, 223, 230, 241, 244, 272, 273, 294, 301, 311, 314, 339, 340, 345, 352, 362, 365, 391, 392, 398, 405, 416, 419, 447, 448, 457, 464, 474, 491, 492, 516, 565, 589, 591, 602, 603, 605, 711, 714, 722, 736, 737, 761, 764, 791, 792, 796, 797, 811, 812, 815, 878, 881, 883], "exist": [0, 56, 69, 74, 132, 142, 149, 161, 162, 163, 179, 180, 292, 495, 507, 511, 547, 562, 587, 599, 602, 605, 710, 735, 752, 760, 765, 767, 798, 839, 864, 878], "one": [0, 1, 45, 46, 47, 48, 51, 52, 54, 60, 61, 62, 78, 79, 80, 83, 88, 94, 103, 105, 106, 136, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 162, 183, 188, 216, 219, 221, 233, 238, 241, 254, 255, 256, 257, 258, 259, 260, 292, 304, 309, 311, 322, 323, 324, 325, 326, 327, 328, 345, 355, 360, 362, 373, 374, 375, 376, 377, 378, 379, 380, 408, 413, 416, 429, 430, 431, 432, 433, 434, 435, 467, 472, 474, 479, 480, 481, 495, 499, 511, 529, 548, 552, 562, 576, 587, 594, 601, 602, 604, 605, 608, 609, 610, 699, 715, 718, 719, 726, 727, 728, 750, 752, 753, 759, 773, 786, 791, 799, 876, 881, 883], "local_pairwise_align_protein": [0, 60, 61, 62, 63, 64], "s1": [0, 1, 76, 223, 225, 241, 242, 246, 261, 262, 267, 268, 269, 270, 296, 311, 312, 316, 329, 334, 335, 336, 337, 345, 347, 362, 363, 367, 381, 386, 387, 388, 389, 398, 400, 416, 417, 421, 436, 437, 442, 443, 444, 445, 457, 459, 474, 475, 476, 482, 487, 488, 489, 490, 529, 534, 600, 604], "heagawghe": 0, "s2": [0, 1, 241, 246, 311, 316, 362, 367, 416, 421, 474, 476, 529, 534, 600, 604], "pawhea": 0, "return": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 37, 39, 40, 41, 42, 44, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 133, 140, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 191, 195, 196, 198, 199, 200, 201, 202, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 220, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 603, 604, 605, 606, 608, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 625, 626, 627, 628, 629, 630, 633, 634, 636, 637, 638, 639, 640, 641, 642, 644, 645, 647, 648, 649, 650, 651, 652, 653, 655, 656, 658, 659, 660, 661, 662, 663, 666, 667, 669, 670, 671, 672, 673, 674, 677, 678, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 736, 737, 738, 739, 742, 743, 745, 747, 748, 749, 750, 751, 753, 757, 758, 759, 760, 761, 762, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 784, 785, 786, 787, 792, 793, 795, 796, 797, 798, 800, 801, 802, 804, 806, 807, 808, 810, 811, 812, 814, 815, 820, 821, 823, 824, 825, 827, 828, 829, 830, 831, 834, 838, 839, 840, 843, 844, 846, 847, 848, 849, 850, 851, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 871, 872, 873, 874, 876, 878, 883], "start": [0, 14, 15, 16, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 66, 133, 134, 136, 139, 140, 141, 142, 144, 147, 148, 194, 215, 221, 242, 261, 282, 283, 289, 292, 293, 312, 329, 363, 381, 417, 436, 475, 482, 548, 605, 606, 724, 727, 728, 883], "end": [0, 2, 16, 60, 61, 62, 63, 64, 65, 66, 133, 134, 136, 137, 138, 139, 140, 147, 148, 194, 204, 215, 221, 242, 261, 292, 312, 329, 363, 381, 417, 436, 475, 482, 797], "each": [0, 1, 16, 28, 38, 43, 46, 47, 50, 53, 56, 60, 61, 62, 63, 64, 65, 66, 78, 90, 103, 105, 106, 107, 108, 111, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 194, 205, 206, 215, 223, 233, 238, 241, 247, 250, 263, 265, 280, 293, 304, 309, 311, 317, 320, 330, 332, 345, 355, 360, 362, 368, 371, 382, 384, 408, 413, 416, 422, 425, 438, 440, 455, 457, 467, 472, 474, 478, 483, 485, 495, 499, 509, 511, 524, 529, 531, 534, 538, 539, 541, 542, 543, 544, 547, 552, 561, 562, 576, 586, 587, 600, 601, 602, 603, 604, 605, 608, 609, 610, 620, 621, 632, 642, 643, 653, 654, 676, 686, 687, 697, 698, 700, 710, 714, 715, 717, 718, 719, 721, 724, 727, 728, 808, 814, 876, 878, 883], "5": [0, 1, 16, 46, 54, 61, 64, 66, 73, 78, 80, 94, 105, 106, 108, 111, 132, 134, 136, 137, 138, 139, 142, 144, 147, 148, 194, 228, 230, 240, 241, 242, 248, 250, 252, 253, 259, 265, 271, 274, 276, 292, 299, 301, 311, 312, 318, 320, 327, 332, 338, 342, 350, 352, 362, 363, 369, 371, 378, 384, 390, 395, 403, 405, 415, 416, 417, 423, 425, 427, 428, 434, 440, 446, 449, 452, 462, 464, 474, 475, 478, 485, 493, 506, 507, 521, 524, 529, 534, 538, 541, 547, 559, 569, 583, 594, 596, 600, 601, 604, 605, 608, 699, 714, 724, 727, 728, 729, 750, 755, 759, 760, 762, 765, 766, 773, 774, 775, 797, 798, 799, 804, 806, 807, 814, 815, 818, 881], "awgh": 0, "aw": [0, 94], "he": 0, "25": [0, 1, 50, 63, 78, 83, 94, 105, 106, 108, 136, 142, 143, 246, 250, 252, 265, 269, 278, 282, 316, 320, 332, 336, 367, 371, 384, 388, 421, 425, 427, 440, 444, 450, 476, 478, 485, 489, 529, 541, 600, 601, 604, 609, 724, 727, 728, 878], "4": [0, 1, 28, 45, 48, 49, 52, 54, 67, 69, 78, 81, 94, 105, 106, 136, 137, 139, 142, 143, 144, 146, 147, 148, 194, 204, 216, 221, 223, 230, 235, 240, 241, 250, 260, 264, 274, 276, 279, 280, 282, 293, 301, 306, 311, 320, 328, 331, 342, 352, 357, 362, 371, 379, 383, 395, 405, 410, 415, 416, 425, 435, 439, 449, 452, 454, 455, 457, 464, 469, 474, 478, 481, 484, 493, 495, 506, 507, 515, 521, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 542, 543, 544, 546, 559, 564, 569, 583, 590, 594, 596, 600, 602, 608, 699, 713, 714, 721, 724, 729, 750, 760, 765, 766, 773, 774, 775, 804, 806, 807, 809, 810, 814, 815, 878, 881], "8": [0, 1, 66, 133, 134, 138, 139, 144, 147, 148, 162, 221, 241, 250, 273, 278, 294, 311, 320, 340, 362, 371, 392, 416, 425, 448, 450, 474, 478, 492, 521, 540, 546, 569, 596, 601, 608, 699, 724, 728, 729, 765, 774, 807, 815, 878, 881], "similarli": [0, 1, 137, 878], "perform": [0, 1, 16, 53, 54, 66, 78, 90, 103, 105, 106, 107, 108, 137, 138, 146, 195, 223, 280, 293, 345, 398, 455, 457, 497, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 540, 541, 542, 543, 545, 546, 548, 550, 572, 574, 584, 587, 604, 605, 608, 609, 610, 632, 676, 687, 699, 719, 721, 722, 728, 729, 736, 737, 761, 764, 771, 782, 788, 789, 790, 799, 811, 812, 818, 876], "global_pairwise_align_nucleotid": 0, "gcgtgcctaaggtatgcaag": 0, "acgtgcctaggtacgcaag": 0, "20": [0, 143, 345, 529, 534, 710, 716, 724, 727, 728], "acgtgccta": 0, "ggtacgcaag": 0, "packag": [1, 16, 66, 68, 104, 135, 137, 142, 144, 534, 544, 547, 600, 601, 602, 603, 604, 607, 713, 714, 721, 724, 876, 879, 881, 882], "analyz": [1, 526, 714, 727], "biolog": [1, 53, 60, 61, 62, 89, 94, 95, 99, 101, 137, 138, 140, 142, 145, 194, 243, 244, 245, 247, 248, 251, 254, 255, 256, 259, 271, 313, 314, 315, 317, 318, 321, 322, 323, 324, 327, 338, 364, 365, 366, 368, 369, 372, 373, 374, 375, 378, 390, 418, 419, 420, 422, 423, 426, 429, 430, 431, 434, 446, 457, 495, 727, 815, 875], "It": [1, 16, 67, 74, 78, 79, 81, 94, 101, 132, 133, 135, 137, 138, 139, 140, 142, 144, 146, 148, 162, 194, 204, 207, 215, 216, 218, 219, 221, 223, 259, 271, 327, 338, 345, 378, 390, 398, 434, 446, 450, 529, 532, 534, 538, 547, 589, 602, 603, 608, 631, 632, 664, 675, 687, 713, 714, 718, 721, 724, 727, 728, 735, 736, 737, 761, 764, 818, 840, 864, 878], "alpha": [1, 103, 109, 529, 724, 725, 729], "beta": [1, 107, 108, 110, 136], "intend": [1, 84, 85, 146, 223, 294, 345, 698, 710, 818, 819], "primari": [1, 149, 878], "interfac": [1, 51, 52, 104, 146, 258, 260, 326, 328, 377, 379, 433, 435, 480, 481, 495, 600, 601, 602, 603, 814, 876], "addition": [1, 132, 142, 191, 204, 878, 881], "support": [1, 47, 55, 59, 80, 191, 220, 222, 223, 272, 281, 339, 344, 345, 391, 397, 398, 447, 456, 491, 494, 495, 507, 516, 522, 565, 570, 591, 597, 602, 700, 711, 712, 719, 724, 735, 755, 792, 810, 813, 814, 821, 841, 864, 875, 880, 881, 882, 883], "discoveri": 1, "avail": [1, 107, 133, 137, 138, 139, 143, 146, 148, 179, 180, 276, 282, 291, 342, 395, 452, 493, 507, 572, 600, 601, 602, 603, 604, 643, 724, 728, 816, 876, 883], "document": [1, 35, 110, 132, 137, 139, 144, 145, 181, 529, 710, 735, 876], "high": [1, 78, 105, 106, 137, 138, 534, 710, 713, 719], "level": [1, 57, 84, 142, 191, 529, 726, 727, 773, 821, 878], "discuss": [1, 94, 105, 106, 146, 883], "how": [1, 43, 53, 54, 90, 137, 139, 146, 191, 241, 263, 275, 292, 293, 311, 330, 341, 362, 382, 394, 416, 438, 451, 474, 483, 540, 546, 602, 719, 724, 726, 727, 728, 876, 883], "work": [1, 16, 108, 137, 144, 146, 149, 223, 345, 398, 547, 602, 714, 728, 875, 877, 878, 881], "should": [1, 16, 47, 67, 74, 78, 79, 90, 94, 101, 103, 104, 105, 106, 107, 133, 139, 143, 146, 148, 149, 161, 162, 163, 204, 223, 246, 263, 264, 265, 275, 282, 316, 330, 331, 332, 341, 345, 367, 382, 383, 384, 394, 398, 421, 438, 439, 440, 451, 476, 483, 484, 485, 525, 527, 528, 529, 540, 546, 584, 602, 604, 608, 698, 713, 714, 719, 720, 721, 724, 727, 728, 773, 794], "first": [1, 16, 28, 60, 61, 62, 63, 64, 65, 66, 69, 78, 105, 106, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 163, 216, 221, 261, 263, 279, 280, 292, 329, 330, 381, 382, 436, 438, 454, 457, 482, 483, 499, 527, 528, 529, 534, 541, 552, 576, 600, 602, 632, 687, 699, 715, 724, 727, 755, 759, 768, 769, 774, 777, 807, 808, 852, 876, 881, 883], "you": [1, 16, 60, 61, 62, 78, 103, 105, 106, 107, 108, 133, 135, 137, 138, 140, 144, 146, 147, 149, 203, 204, 216, 218, 219, 223, 345, 398, 457, 495, 587, 600, 604, 721, 724, 726, 727, 728, 757, 759, 760, 876, 878, 881, 883], "read": [1, 16, 59, 78, 105, 106, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 147, 148, 161, 162, 179, 181, 183, 188, 191, 192, 222, 223, 280, 281, 282, 292, 293, 344, 345, 397, 398, 455, 456, 457, 494, 522, 545, 547, 570, 597, 605, 712, 736, 737, 749, 750, 751, 753, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 768, 769, 770, 771, 773, 775, 776, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 821, 881], "befor": [1, 47, 137, 141, 146, 147, 252, 253, 292, 427, 428, 541, 601, 602, 728, 789, 808, 881, 883], "alpha_divers": [1, 78, 94, 107, 109], "beta_divers": [1, 103, 105, 106, 108, 110, 111], "design": [1, 108, 131, 132, 136, 146, 547, 726], "sampl": [1, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 131, 132, 146, 526, 529, 534, 548, 600, 601, 603, 604, 610, 643, 676, 687, 698, 700, 709, 710, 713, 714, 719, 720, 721, 724, 726, 727, 728, 760, 819], "accept": [1, 28, 56, 108, 273, 279, 280, 340, 392, 448, 454, 455, 492, 507, 523, 529, 602, 606, 608, 724, 727, 728, 770, 799, 807, 810, 864], "matrix": [1, 16, 67, 103, 107, 108, 111, 276, 342, 395, 452, 493, 495, 496, 497, 499, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 519, 520, 521, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 552, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 571, 572, 573, 574, 576, 581, 582, 583, 585, 586, 587, 588, 589, 590, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 699, 710, 713, 715, 716, 717, 719, 720, 721, 723, 725, 772, 804, 815, 879], "contain": [1, 16, 28, 46, 48, 54, 60, 61, 62, 63, 64, 65, 66, 69, 103, 104, 107, 108, 111, 131, 133, 135, 136, 137, 138, 140, 141, 143, 144, 146, 147, 148, 149, 181, 223, 225, 230, 243, 245, 250, 251, 254, 255, 256, 259, 263, 264, 265, 271, 273, 276, 282, 294, 296, 301, 313, 315, 320, 321, 322, 323, 324, 327, 330, 331, 332, 338, 340, 342, 345, 347, 352, 364, 366, 371, 372, 373, 374, 375, 378, 380, 382, 383, 384, 390, 392, 393, 395, 398, 400, 405, 418, 420, 425, 426, 429, 430, 431, 434, 438, 439, 440, 446, 448, 452, 457, 459, 464, 478, 483, 484, 485, 492, 493, 495, 509, 511, 515, 523, 524, 529, 544, 545, 547, 548, 561, 562, 564, 572, 586, 587, 590, 594, 600, 601, 602, 603, 604, 605, 607, 609, 699, 710, 714, 753, 757, 765, 795, 814, 815, 839, 842, 864, 878, 879, 881], "frequenc": [1, 47, 50, 69, 81, 252, 253, 265, 267, 269, 332, 334, 336, 384, 386, 388, 427, 428, 440, 442, 444, 485, 487, 489, 724, 726, 728, 735, 755], "taxa": [1, 69, 70, 71, 75, 76, 77, 78, 79, 81, 82, 83, 86, 88, 89, 90, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 146, 148, 529, 714, 728, 760, 815], "within": [1, 47, 94, 102, 108, 131, 134, 137, 138, 142, 144, 146, 147, 223, 345, 398, 457, 506, 534, 559, 583, 604, 605, 665, 700, 710, 726, 727, 735, 777, 818, 821, 864, 881, 883], "term": [1, 47, 74, 92, 94, 132, 139, 608, 815], "taxon": [1, 69, 70, 71, 74, 76, 78, 87, 88, 94, 97, 98, 102, 105, 106, 136, 139, 773, 881], "plural": [1, 193], "group": [1, 101, 146, 277, 343, 396, 453, 506, 529, 534, 544, 559, 583, 600, 603, 604, 609, 610, 620, 621, 642, 653, 665, 675, 676, 686, 697, 726, 727, 728, 841, 881], "relat": [1, 78, 79, 87, 94, 105, 106, 108, 136, 137, 141, 147, 547, 594, 713, 714, 721], "organ": [1, 136, 139, 148], "constitut": [1, 495, 513], "unit": [1, 105, 139, 149, 495, 719, 721, 722, 818, 819, 882], "commun": [1, 69, 74, 78, 94, 97, 102, 105, 106, 534, 547, 600, 601, 603, 604, 710, 714, 721, 728], "usual": [1, 101, 136, 139, 146, 148, 495, 755], "defin": [1, 28, 54, 56, 62, 65, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 111, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 151, 194, 204, 218, 223, 228, 246, 264, 265, 275, 276, 282, 283, 290, 291, 294, 299, 316, 331, 332, 341, 342, 345, 350, 367, 383, 384, 394, 395, 398, 403, 421, 439, 440, 451, 452, 462, 476, 484, 485, 493, 495, 507, 512, 515, 525, 527, 528, 532, 533, 535, 536, 537, 541, 542, 543, 548, 564, 590, 602, 605, 710, 724, 811, 812, 815, 818, 852, 876, 878, 881, 883], "uniform": [1, 606], "taxonom": [1, 105], "rank": [1, 102, 148, 529, 600, 601, 602, 723, 773], "speci": [1, 69, 78, 81, 83, 88, 94, 101, 102, 143, 148, 534, 541, 699, 714, 719, 721, 735], "genu": [1, 148], "famili": 1, "In": [1, 16, 47, 78, 94, 105, 106, 108, 137, 138, 139, 140, 142, 144, 148, 223, 253, 292, 345, 398, 428, 495, 526, 529, 534, 547, 601, 602, 608, 698, 713, 714, 719, 724, 728, 735, 755, 768, 814, 876, 878, 881, 883], "ecologi": [1, 76, 78, 79, 86, 87, 102, 529, 600, 601, 602, 603, 699, 713, 714, 719, 720, 721], "i": [1, 2, 16, 28, 29, 30, 31, 32, 33, 35, 40, 42, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 111, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 161, 162, 163, 175, 176, 178, 182, 183, 184, 186, 187, 188, 189, 191, 194, 195, 201, 203, 204, 207, 213, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 230, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 289, 292, 293, 294, 295, 296, 297, 298, 299, 301, 308, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 359, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 464, 471, 474, 475, 476, 478, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 504, 506, 509, 514, 515, 516, 517, 520, 521, 522, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 557, 559, 561, 563, 564, 565, 566, 568, 569, 570, 572, 573, 574, 576, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 600, 601, 602, 603, 604, 606, 608, 631, 643, 664, 675, 676, 687, 698, 699, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 735, 736, 737, 740, 750, 753, 755, 757, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 773, 774, 775, 777, 779, 780, 781, 783, 785, 786, 788, 791, 792, 796, 799, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 825, 838, 839, 840, 841, 842, 852, 853, 864, 875, 878, 881, 882, 883], "refer": [1, 16, 35, 47, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 105, 106, 108, 194, 223, 282, 290, 291, 294, 345, 398, 457, 495, 507, 517, 527, 528, 529, 534, 538, 540, 544, 546, 548, 566, 572, 584, 592, 600, 601, 602, 603, 604, 608, 710, 713, 714, 721, 758, 787, 814, 815], "singular": [1, 723, 791, 864], "its": [1, 28, 45, 46, 48, 49, 51, 52, 53, 54, 60, 61, 62, 92, 136, 137, 138, 139, 142, 143, 147, 149, 163, 185, 191, 194, 204, 250, 257, 258, 260, 265, 320, 325, 326, 328, 332, 371, 376, 377, 379, 384, 425, 432, 433, 435, 440, 457, 478, 479, 480, 481, 485, 499, 507, 530, 552, 576, 601, 709, 713, 715, 718, 723, 735, 757, 787, 788, 797, 802, 807, 808, 814, 815, 839, 876, 881], "definit": [1, 46, 74, 136, 137, 138, 139, 140, 148, 223, 240, 241, 244, 245, 247, 254, 255, 259, 271, 274, 277, 278, 279, 280, 282, 292, 293, 294, 311, 314, 315, 317, 322, 323, 327, 338, 343, 345, 362, 365, 366, 368, 373, 374, 378, 390, 396, 398, 415, 416, 419, 420, 422, 429, 430, 434, 446, 449, 450, 453, 454, 455, 474, 507, 815, 878, 882, 883], "limit": [1, 77, 133, 142, 143, 144, 726, 727, 815], "synonym": [1, 148], "mani": [1, 69, 93, 110, 142, 146, 495, 526, 529, 608, 713, 719, 727, 728, 883], "situat": [1, 710, 726], "veri": [1, 60, 61, 62, 83, 137, 142, 149, 541, 760], "loos": [1, 608], "practic": [1, 54, 94, 137, 138, 145, 698, 763, 768], "repres": [1, 46, 74, 76, 78, 81, 90, 97, 98, 105, 106, 108, 131, 132, 133, 134, 136, 137, 141, 142, 144, 146, 147, 148, 194, 215, 223, 276, 342, 345, 395, 398, 452, 457, 493, 495, 499, 506, 511, 521, 535, 536, 544, 545, 552, 559, 562, 569, 576, 583, 587, 596, 608, 699, 710, 724, 735, 802, 807, 814, 815, 878, 881], "featur": [1, 80, 91, 132, 137, 140, 146, 147, 194, 204, 207, 216, 218, 219, 221, 223, 294, 345, 398, 457, 526, 529, 534, 544, 700, 709, 713, 714, 720, 721, 819, 875, 878], "type": [1, 16, 28, 33, 45, 46, 48, 84, 95, 99, 107, 111, 131, 135, 137, 138, 139, 140, 141, 144, 147, 148, 161, 163, 176, 178, 179, 180, 182, 187, 191, 225, 228, 237, 240, 241, 242, 244, 246, 247, 248, 261, 262, 267, 268, 269, 270, 273, 274, 283, 289, 296, 299, 308, 311, 312, 314, 316, 317, 318, 329, 334, 335, 336, 337, 340, 347, 350, 359, 362, 363, 365, 367, 368, 369, 381, 386, 387, 388, 389, 392, 400, 403, 412, 415, 416, 417, 419, 421, 422, 423, 436, 437, 442, 443, 444, 445, 448, 449, 457, 459, 462, 471, 474, 475, 476, 482, 487, 488, 489, 490, 492, 495, 499, 508, 520, 524, 525, 547, 548, 552, 560, 568, 572, 576, 585, 595, 601, 604, 606, 699, 713, 714, 721, 724, 726, 736, 737, 757, 761, 764, 806, 814, 818, 825, 876, 878], "includ": [1, 47, 53, 55, 59, 67, 68, 78, 94, 105, 106, 110, 111, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147, 220, 222, 230, 239, 244, 252, 253, 263, 272, 276, 278, 279, 280, 281, 292, 293, 301, 310, 314, 330, 339, 342, 344, 352, 361, 365, 382, 391, 395, 397, 398, 405, 414, 419, 427, 428, 438, 447, 450, 452, 454, 455, 456, 464, 473, 483, 491, 493, 494, 495, 505, 507, 516, 522, 529, 547, 558, 565, 570, 582, 587, 591, 594, 597, 600, 601, 603, 604, 605, 609, 699, 709, 710, 711, 712, 714, 719, 720, 724, 728, 750, 751, 753, 782, 784, 785, 788, 789, 790, 792, 805, 807, 808, 813, 876, 878, 879, 881, 882], "gene": [1, 140, 194, 204, 216, 219, 223, 457, 534, 540, 546], "metabolit": [1, 728], "purpos": [1, 66, 69, 146, 148, 282, 724, 875, 883], "singl": [1, 28, 45, 48, 56, 78, 84, 85, 93, 105, 106, 108, 136, 137, 138, 139, 142, 144, 145, 146, 147, 194, 204, 216, 230, 233, 238, 250, 263, 277, 301, 304, 309, 320, 330, 343, 352, 355, 360, 371, 382, 396, 405, 408, 413, 425, 438, 453, 464, 467, 472, 478, 483, 495, 529, 544, 608, 725, 756, 864, 876, 881, 883], "what": [1, 78, 94, 103, 105, 106, 107, 142, 146, 149, 151, 179, 180, 184, 189, 219, 263, 330, 382, 438, 483, 608, 698, 727, 881, 883], "vari": [1, 604, 724, 726, 727], "wide": [1, 54, 94, 241, 311, 362, 416, 474], "For": [1, 28, 47, 55, 59, 66, 94, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 204, 219, 220, 221, 222, 223, 272, 281, 339, 344, 345, 391, 397, 398, 447, 456, 457, 491, 494, 507, 516, 522, 529, 534, 565, 570, 591, 597, 600, 601, 602, 603, 604, 606, 608, 610, 676, 710, 711, 712, 713, 714, 724, 726, 727, 728, 755, 792, 813, 814, 816, 817, 876, 878, 881], "microbiom": [1, 94, 108, 529, 534, 719], "survei": 1, "could": [1, 28, 85, 137, 138, 145, 149, 182, 184, 187, 189, 529, 534, 548, 600, 602, 603, 604, 605, 608, 710, 726, 781, 783, 816, 817, 876], "all": [1, 16, 28, 29, 46, 47, 51, 52, 54, 60, 61, 62, 67, 69, 78, 79, 80, 90, 94, 95, 99, 102, 103, 105, 106, 107, 108, 131, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 151, 175, 186, 194, 204, 207, 216, 218, 219, 223, 241, 244, 247, 250, 258, 260, 263, 273, 277, 292, 311, 314, 317, 320, 326, 328, 330, 340, 343, 345, 362, 365, 368, 371, 377, 379, 382, 392, 396, 398, 416, 419, 422, 425, 433, 435, 438, 448, 453, 457, 474, 478, 480, 481, 483, 492, 495, 506, 507, 511, 513, 521, 529, 531, 534, 538, 539, 541, 542, 543, 544, 547, 559, 562, 569, 583, 587, 594, 596, 600, 601, 602, 603, 604, 605, 632, 643, 687, 698, 699, 710, 718, 719, 727, 728, 729, 735, 751, 754, 755, 756, 765, 768, 769, 770, 781, 783, 784, 787, 794, 799, 800, 802, 804, 814, 841, 842, 881], "16": [1, 76, 94, 135, 137, 138, 139, 143, 144, 240, 249, 274, 319, 370, 415, 424, 449, 477, 534, 710, 724, 728, 775, 804], "rrna": [1, 534], "oral": 1, "swab": 1, "compar": [1, 88, 105, 111, 133, 134, 221, 262, 267, 268, 269, 270, 273, 334, 335, 336, 337, 340, 386, 387, 388, 389, 392, 437, 442, 443, 444, 445, 448, 487, 488, 489, 490, 492, 497, 504, 529, 547, 550, 557, 574, 581, 602, 608, 726, 727, 728, 758, 759, 760, 788, 818, 819, 878, 881], "genom": [1, 204], "studi": [1, 78, 146, 526, 529, 713, 721, 728], "hand": [1, 719], "individu": [1, 69, 70, 71, 74, 77, 78, 79, 81, 86, 87, 88, 89, 90, 95, 99, 102, 105, 106, 131, 137, 495, 529, 726, 883], "previou": [1, 60, 61, 62, 63, 64, 65, 228, 299, 350, 403, 462, 600, 602, 604], "version": [1, 72, 73, 78, 94, 103, 105, 106, 107, 131, 133, 135, 136, 139, 140, 144, 162, 247, 275, 277, 317, 341, 343, 368, 394, 396, 422, 451, 453, 529, 544, 749, 753, 816, 820, 878], "oper": [1, 45, 48, 54, 105, 133, 137, 142, 217, 223, 252, 253, 345, 398, 427, 428, 457, 526, 528, 541, 542, 543, 547, 548, 584, 602, 603, 719, 773, 797, 814, 842, 876, 878], "otu": [1, 92, 146], "histor": [1, 92, 282, 755], "research": [1, 148, 602, 719], "howev": [1, 78, 79, 94, 103, 105, 106, 107, 137, 141, 142, 146, 148, 223, 345, 398, 457, 526, 534, 604, 608, 719, 766, 821], "field": [1, 134, 138, 145, 282], "advanc": 1, "diverg": 1, "e": [1, 16, 29, 40, 47, 50, 51, 57, 74, 79, 80, 81, 82, 83, 88, 89, 94, 95, 96, 97, 98, 99, 101, 105, 106, 107, 108, 111, 126, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 194, 217, 241, 249, 250, 258, 292, 311, 319, 320, 326, 345, 362, 370, 371, 377, 380, 393, 416, 424, 425, 433, 450, 457, 474, 477, 478, 480, 495, 499, 506, 515, 521, 524, 529, 534, 544, 545, 547, 548, 552, 559, 564, 569, 572, 576, 583, 590, 594, 596, 600, 601, 602, 603, 604, 710, 716, 717, 726, 727, 729, 735, 736, 737, 750, 751, 753, 755, 756, 757, 761, 762, 764, 765, 766, 768, 769, 770, 771, 775, 779, 781, 782, 783, 784, 785, 791, 795, 796, 797, 800, 801, 802, 804, 805, 806, 807, 809, 810, 811, 812, 814, 815, 819, 838, 841, 875, 876, 878, 881, 883], "amplicon": 1, "variant": [1, 78, 94, 145, 148, 495], "asv": 1, "gener": [1, 45, 48, 60, 66, 67, 68, 86, 94, 108, 138, 139, 140, 142, 147, 148, 161, 163, 176, 178, 182, 187, 190, 249, 263, 264, 319, 330, 331, 370, 382, 383, 424, 438, 439, 457, 477, 483, 484, 495, 534, 547, 571, 598, 600, 601, 602, 606, 698, 700, 710, 713, 724, 727, 728, 734, 875, 876, 878, 882], "becom": [1, 79, 137, 138, 142, 146, 204], "appropri": [1, 131, 141, 191, 241, 311, 362, 416, 474, 529, 876, 881], "therefor": [1, 45, 48, 54, 74, 78, 94, 98, 105, 106, 111, 146, 495, 529], "wa": [1, 60, 63, 69, 70, 71, 74, 77, 78, 80, 81, 82, 86, 87, 94, 95, 97, 98, 103, 105, 106, 107, 108, 135, 137, 138, 142, 144, 191, 263, 292, 330, 382, 438, 457, 483, 529, 540, 544, 546, 602, 654, 718, 726, 728, 751, 793, 814, 815, 876, 881, 883], "replac": [1, 67, 90, 137, 223, 275, 278, 341, 345, 394, 398, 450, 451, 495, 526, 529, 538, 539, 698, 722, 729, 806], "6": [1, 48, 72, 73, 78, 92, 94, 105, 106, 134, 136, 137, 138, 139, 146, 147, 148, 240, 241, 249, 250, 273, 274, 276, 294, 311, 319, 320, 340, 342, 362, 370, 371, 392, 395, 415, 416, 424, 425, 448, 449, 452, 474, 477, 478, 492, 493, 521, 529, 531, 536, 539, 540, 542, 569, 594, 596, 602, 604, 605, 608, 699, 724, 750, 755, 765, 766, 774, 775, 804, 806, 807, 814, 878], "given": [1, 55, 59, 69, 80, 83, 88, 90, 99, 103, 107, 108, 111, 137, 138, 142, 143, 146, 161, 163, 179, 180, 182, 183, 187, 188, 217, 220, 222, 272, 276, 281, 339, 342, 344, 391, 395, 397, 447, 452, 456, 491, 493, 494, 511, 516, 522, 544, 562, 565, 570, 587, 591, 597, 601, 602, 605, 711, 712, 714, 718, 723, 725, 727, 735, 770, 792, 813, 840, 841, 853, 883], "number": [1, 28, 40, 45, 48, 69, 70, 71, 72, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 131, 133, 135, 136, 137, 139, 142, 144, 145, 147, 148, 191, 194, 204, 215, 235, 242, 250, 267, 269, 306, 312, 320, 334, 336, 357, 363, 371, 386, 388, 410, 417, 425, 442, 444, 469, 475, 478, 487, 489, 495, 510, 528, 529, 534, 538, 539, 541, 542, 543, 544, 548, 572, 600, 601, 602, 603, 604, 605, 606, 608, 643, 687, 698, 714, 718, 719, 721, 722, 724, 725, 727, 728, 729, 755, 762, 799, 818, 819], "observ": [1, 78, 81, 90, 93, 101, 105, 106, 111, 132, 223, 250, 276, 294, 320, 342, 345, 371, 395, 398, 425, 452, 457, 478, 493, 529, 608, 699, 724, 727, 728, 786, 814, 883], "particular": [1, 735, 817, 883], "associ": [1, 35, 69, 94, 138, 146, 147, 148, 151, 176, 177, 178, 194, 215, 217, 219, 223, 345, 398, 457, 601, 608, 698, 718, 722, 725, 726, 727, 765, 771, 804, 876], "throughout": [1, 141, 282, 291, 727, 882], "array_lik": [1, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 111, 230, 248, 249, 263, 273, 301, 318, 319, 330, 340, 352, 369, 370, 382, 392, 405, 423, 424, 438, 448, 464, 477, 483, 492, 527, 528, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 548, 600, 602, 603, 604, 605, 608, 715, 718, 722, 725, 728, 729], "anyth": [1, 137, 138, 145, 149, 457, 841, 852, 864, 883], "convert": [1, 133, 135, 136, 137, 139, 142, 144, 147, 191, 223, 246, 275, 276, 316, 341, 342, 345, 367, 394, 395, 398, 421, 451, 452, 457, 476, 493, 548, 589, 601, 729, 755, 820], "d": [1, 16, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 133, 134, 139, 142, 143, 223, 345, 398, 506, 510, 515, 521, 526, 527, 528, 529, 532, 533, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 559, 564, 569, 583, 590, 594, 596, 600, 601, 602, 603, 604, 608, 643, 665, 687, 700, 710, 718, 727, 728, 729, 736, 737, 750, 751, 753, 755, 756, 757, 758, 759, 761, 762, 764, 765, 766, 768, 769, 770, 771, 775, 781, 782, 783, 784, 785, 791, 795, 796, 797, 799, 800, 801, 802, 804, 805, 806, 809, 810, 811, 812, 814, 815, 876, 878, 881, 883], "numpi": [1, 107, 499, 517, 527, 528, 530, 531, 532, 533, 535, 536, 537, 538, 540, 541, 542, 543, 544, 546, 547, 548, 552, 566, 576, 584, 592, 600, 604, 606, 608, 609, 643, 665, 687, 698, 699, 724, 726, 727, 728, 729, 760, 799, 878], "arrai": [1, 16, 47, 50, 78, 94, 105, 106, 137, 143, 223, 240, 243, 245, 251, 268, 270, 271, 274, 276, 294, 313, 315, 321, 335, 337, 338, 342, 345, 364, 366, 372, 387, 389, 390, 393, 395, 398, 415, 418, 420, 426, 443, 445, 446, 449, 452, 457, 488, 490, 493, 495, 497, 505, 510, 513, 517, 527, 528, 530, 531, 532, 533, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 547, 548, 550, 558, 566, 572, 574, 582, 584, 592, 608, 609, 643, 665, 687, 699, 718, 722, 724, 725, 726, 727, 728, 729, 777, 806, 814, 878], "nativ": [1, 517, 566, 592, 719], "list": [1, 66, 78, 94, 105, 106, 109, 110, 133, 136, 138, 139, 140, 143, 146, 147, 148, 149, 161, 163, 179, 180, 191, 204, 273, 340, 392, 448, 457, 492, 505, 509, 512, 545, 547, 558, 561, 582, 586, 602, 604, 605, 621, 643, 654, 676, 709, 724, 726, 727, 728, 735, 751, 757, 765, 767, 769, 772, 781, 783, 784, 799, 800, 804, 806, 807, 814, 815, 876, 883], "result": [1, 2, 16, 17, 47, 49, 54, 60, 61, 62, 78, 79, 83, 103, 105, 106, 107, 111, 133, 134, 137, 146, 149, 191, 216, 223, 240, 241, 244, 274, 276, 311, 314, 342, 345, 362, 365, 395, 398, 415, 416, 419, 449, 452, 474, 493, 529, 534, 537, 538, 541, 587, 600, 602, 603, 604, 605, 606, 609, 620, 621, 631, 632, 642, 653, 654, 664, 665, 675, 676, 686, 697, 698, 699, 700, 709, 710, 713, 714, 719, 721, 724, 729, 768, 784, 798, 806, 807, 814, 815, 819, 876, 878, 883], "ident": [1, 133, 134, 142, 146, 499, 552, 572, 576, 608, 730, 760, 793, 881], "As": [1, 136, 139, 142, 146, 457, 517, 566, 592, 602, 604, 714, 768, 876, 883], "mention": [1, 142], "which": [1, 2, 28, 60, 61, 62, 69, 74, 78, 88, 94, 98, 101, 105, 106, 108, 133, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 161, 162, 163, 164, 176, 178, 179, 180, 181, 182, 187, 223, 241, 242, 253, 261, 263, 266, 276, 292, 294, 311, 312, 329, 330, 333, 342, 345, 362, 363, 381, 382, 385, 395, 398, 416, 417, 428, 436, 438, 441, 452, 457, 474, 475, 482, 483, 486, 493, 506, 526, 527, 528, 529, 534, 548, 559, 583, 600, 603, 604, 608, 714, 718, 719, 724, 725, 726, 727, 728, 760, 763, 794, 795, 806, 807, 812, 814, 815, 825, 842, 864, 876, 878, 881, 883], "row": [1, 28, 103, 107, 108, 111, 131, 132, 144, 194, 495, 499, 514, 528, 529, 531, 534, 535, 536, 538, 539, 541, 542, 543, 544, 547, 548, 552, 563, 576, 588, 589, 594, 600, 601, 602, 603, 604, 605, 606, 608, 700, 713, 714, 717, 721, 727, 728, 818], "so": [1, 2, 47, 60, 61, 62, 63, 64, 65, 67, 78, 103, 105, 106, 107, 137, 142, 146, 149, 191, 192, 204, 207, 252, 253, 427, 428, 602, 676, 699, 713, 714, 715, 719, 721, 724, 726, 727, 728, 814, 876, 881, 883], "column": [1, 16, 28, 52, 53, 54, 107, 131, 132, 137, 139, 140, 143, 144, 147, 148, 241, 260, 266, 311, 328, 333, 362, 379, 385, 416, 435, 441, 457, 474, 481, 486, 495, 499, 514, 518, 527, 528, 529, 534, 535, 536, 547, 552, 563, 567, 576, 588, 589, 593, 600, 601, 602, 603, 604, 605, 606, 608, 643, 687, 699, 710, 713, 714, 715, 717, 721, 722, 726, 727, 773, 777, 818, 819], "some": [1, 16, 68, 78, 80, 90, 94, 137, 139, 142, 145, 146, 161, 162, 163, 194, 218, 223, 345, 398, 528, 541, 542, 543, 714, 724, 727, 841, 881, 883], "incorpor": [1, 94, 525], "relationship": [1, 94, 142, 713, 714, 721, 724, 728, 815], "between": [1, 16, 61, 64, 74, 79, 80, 84, 95, 102, 105, 106, 107, 111, 131, 137, 138, 139, 141, 144, 147, 148, 207, 221, 241, 246, 267, 268, 269, 270, 311, 316, 334, 335, 336, 337, 362, 367, 386, 387, 388, 389, 416, 421, 442, 443, 444, 445, 474, 476, 487, 488, 489, 490, 495, 499, 511, 523, 524, 525, 529, 534, 544, 547, 548, 552, 562, 572, 576, 587, 600, 601, 602, 603, 604, 605, 607, 608, 643, 713, 714, 715, 721, 724, 727, 728, 735, 750, 758, 759, 760, 766, 775, 785, 804, 805, 815, 878, 881], "through": [1, 35, 60, 61, 62, 146, 175, 181, 186, 499, 552, 576, 719, 768, 883], "phylogenet": [1, 78, 94, 105, 106, 142, 144, 547, 608, 735, 758, 768, 815, 875, 878], "tree": [1, 78, 94, 105, 106, 142, 147, 148, 204, 545, 875, 876], "take": [1, 107, 144, 149, 161, 162, 163, 246, 273, 316, 340, 367, 392, 421, 448, 476, 492, 511, 529, 562, 572, 587, 601, 602, 676, 713, 721, 724, 725, 815, 841, 881, 883], "treenod": [1, 78, 94, 105, 106, 142, 545, 814, 815, 876, 881], "map": [1, 49, 56, 108, 151, 164, 223, 294, 345, 398, 602, 605, 608, 609, 643, 687, 710, 726, 728, 774, 777, 878], "valu": [1, 3, 4, 7, 9, 10, 11, 18, 19, 21, 23, 24, 25, 34, 37, 39, 41, 47, 51, 60, 61, 62, 63, 64, 65, 67, 69, 80, 90, 102, 103, 106, 131, 133, 134, 136, 137, 138, 139, 140, 141, 146, 147, 152, 153, 155, 157, 158, 159, 165, 166, 168, 170, 171, 172, 191, 194, 196, 198, 199, 200, 203, 208, 210, 211, 212, 215, 219, 223, 224, 229, 232, 234, 236, 240, 241, 258, 266, 273, 274, 284, 286, 287, 288, 294, 295, 300, 303, 305, 307, 311, 326, 333, 340, 345, 346, 351, 354, 356, 358, 362, 377, 385, 392, 398, 399, 404, 407, 409, 411, 415, 416, 433, 441, 448, 449, 457, 458, 463, 466, 468, 470, 474, 480, 486, 492, 498, 501, 502, 503, 506, 521, 526, 529, 531, 534, 538, 539, 540, 541, 542, 543, 546, 551, 554, 555, 556, 559, 569, 575, 578, 579, 580, 583, 596, 600, 601, 602, 603, 604, 605, 606, 608, 611, 612, 614, 616, 617, 618, 622, 623, 625, 627, 628, 629, 631, 633, 634, 636, 638, 639, 640, 643, 644, 645, 647, 649, 650, 651, 655, 656, 658, 660, 661, 662, 664, 666, 667, 669, 671, 672, 673, 675, 677, 678, 680, 682, 683, 684, 688, 689, 691, 693, 694, 695, 698, 701, 702, 704, 706, 707, 708, 710, 713, 714, 718, 719, 721, 723, 724, 725, 726, 727, 728, 735, 738, 739, 742, 745, 747, 748, 755, 757, 760, 799, 806, 817, 818, 819, 823, 824, 827, 829, 830, 831, 832, 841, 843, 844, 846, 848, 849, 850, 853, 855, 856, 858, 860, 861, 862, 864, 866, 867, 869, 871, 872, 873, 883], "tip": [1, 78, 94, 105, 106, 735, 753, 755, 757, 758, 759, 760, 762, 763, 765, 766, 768, 775, 780, 781, 782, 783, 785, 786, 788, 789, 790, 796, 797, 798, 799, 801, 802, 804, 807, 808, 809, 814, 876, 881], "optim": [1, 2, 16, 79, 103, 105, 106, 107, 604, 766, 816, 875], "time": [1, 16, 45, 48, 78, 90, 99, 105, 106, 108, 137, 138, 146, 495, 535, 536, 544, 584, 600, 601, 602, 603, 605, 609, 632, 687, 721, 724, 727, 728, 735, 799, 883], "often": [1, 78, 103, 107, 136, 137, 139, 547, 608, 714, 719, 724, 839], "faster": [1, 78, 105, 106, 108, 250, 280, 293, 320, 371, 425, 455, 478, 604, 719, 788], "repeat": [1, 138, 724, 838], "call": [1, 54, 78, 79, 84, 85, 105, 106, 135, 137, 144, 147, 149, 191, 194, 241, 249, 252, 273, 292, 311, 319, 340, 362, 370, 392, 416, 424, 427, 448, 457, 474, 477, 492, 589, 601, 602, 698, 714, 724, 751, 753, 754, 757, 768, 769, 771, 784, 785, 791, 800, 805, 812, 839, 841, 842, 852, 876, 883], "reason": [1, 79, 90, 136, 142, 727, 755], "matric": [1, 62, 65, 131, 141, 345, 495, 497, 504, 507, 512, 548, 550, 557, 574, 581, 601, 602, 605, 607, 608, 715, 719, 760], "rather": [1, 83, 142, 495, 526, 608, 815], "thu": [1, 137, 138, 142, 146, 250, 320, 371, 425, 457, 478, 499, 552, 572, 576, 600, 602, 604, 608, 719], "slow": [1, 78, 103, 105, 106, 107, 875], "possibl": [1, 16, 35, 95, 99, 137, 138, 146, 147, 218, 247, 280, 282, 293, 317, 368, 422, 455, 601, 605, 727, 760, 808, 814], "disabl": [1, 78, 103, 105, 106, 107, 883], "step": [1, 28, 45, 48, 56, 78, 103, 105, 106, 107, 144, 149, 717, 724], "pass": [1, 28, 35, 48, 55, 56, 59, 66, 103, 107, 108, 109, 110, 133, 135, 137, 139, 144, 145, 147, 161, 162, 163, 175, 181, 182, 183, 184, 186, 187, 188, 189, 191, 220, 222, 223, 246, 248, 250, 272, 273, 281, 292, 316, 318, 320, 339, 340, 344, 345, 367, 369, 371, 391, 392, 397, 398, 421, 423, 425, 447, 448, 456, 457, 476, 478, 491, 492, 494, 499, 516, 522, 552, 565, 570, 576, 587, 589, 591, 597, 602, 605, 643, 711, 712, 727, 781, 783, 792, 813, 815, 864, 881, 883], "fals": [1, 14, 15, 16, 29, 30, 31, 32, 33, 45, 46, 48, 50, 51, 52, 53, 57, 60, 61, 62, 72, 73, 78, 94, 103, 105, 106, 107, 133, 136, 137, 138, 139, 140, 142, 145, 161, 162, 163, 191, 192, 194, 204, 216, 217, 223, 224, 225, 226, 228, 230, 237, 240, 241, 243, 244, 245, 247, 250, 251, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 292, 293, 294, 295, 296, 297, 299, 301, 308, 311, 313, 314, 315, 317, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 350, 352, 359, 362, 364, 365, 366, 368, 371, 372, 373, 374, 375, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 400, 401, 403, 405, 412, 415, 416, 418, 419, 420, 422, 425, 426, 428, 429, 430, 431, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 462, 464, 471, 474, 478, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 496, 497, 504, 506, 529, 534, 540, 546, 549, 550, 557, 559, 573, 574, 581, 583, 587, 589, 602, 605, 608, 609, 610, 632, 643, 676, 719, 721, 724, 726, 727, 729, 753, 758, 759, 762, 770, 776, 779, 780, 785, 793, 805, 807, 808, 810, 819, 841, 864, 878, 881, 883], "danger": 1, "If": [1, 16, 28, 45, 47, 48, 50, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 66, 69, 72, 73, 78, 79, 80, 84, 90, 94, 103, 105, 106, 107, 108, 111, 133, 137, 140, 141, 142, 143, 144, 145, 146, 147, 149, 151, 161, 162, 163, 176, 178, 182, 183, 187, 188, 191, 194, 203, 207, 220, 221, 223, 225, 230, 240, 241, 242, 244, 246, 248, 250, 253, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 276, 277, 292, 294, 296, 301, 311, 312, 314, 316, 318, 320, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 342, 343, 345, 347, 352, 362, 363, 365, 367, 369, 371, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 395, 396, 398, 400, 405, 415, 416, 417, 419, 421, 423, 425, 428, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 452, 453, 454, 455, 457, 459, 464, 474, 475, 476, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 499, 506, 507, 509, 510, 511, 514, 515, 516, 521, 524, 525, 529, 531, 534, 535, 536, 538, 539, 545, 548, 552, 559, 561, 562, 563, 564, 565, 569, 576, 583, 586, 587, 588, 589, 590, 591, 596, 600, 601, 602, 603, 604, 605, 606, 608, 643, 654, 687, 698, 709, 710, 711, 713, 714, 715, 718, 719, 722, 724, 725, 726, 727, 728, 729, 755, 757, 758, 762, 765, 768, 769, 773, 778, 781, 783, 786, 792, 797, 798, 799, 804, 806, 807, 808, 814, 815, 818, 819, 820, 821], "invalid": [1, 50, 54, 78, 94, 103, 105, 106, 107, 137, 223, 345, 398, 601, 602, 710, 752, 757, 767, 778, 787, 791], "encount": [1, 146, 766, 768, 775], "when": [1, 16, 45, 47, 48, 54, 57, 60, 61, 62, 69, 79, 94, 95, 99, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 161, 162, 163, 182, 183, 184, 187, 188, 189, 191, 204, 216, 223, 241, 248, 249, 252, 253, 266, 294, 311, 318, 319, 333, 345, 362, 369, 370, 385, 398, 416, 423, 424, 427, 428, 441, 457, 474, 477, 486, 524, 529, 547, 600, 602, 603, 604, 606, 608, 631, 664, 675, 713, 721, 724, 725, 726, 727, 728, 729, 732, 760, 794, 811, 812, 815, 819, 820, 841, 876, 881, 883], "difficult": 1, "interpret": [1, 47, 74, 78, 103, 105, 106, 107, 131, 142, 146, 526, 713, 714, 721], "error": [1, 47, 78, 90, 94, 103, 105, 106, 107, 137, 138, 144, 146, 149, 191, 218, 276, 342, 395, 452, 493, 571, 598, 599, 600, 602, 604, 724, 728, 734, 820, 876], "messag": [1, 78, 103, 105, 106, 107, 621, 665, 820, 876], "incorrect": 1, "recommend": [1, 83, 94, 144, 147, 223, 294, 345, 398, 457, 529, 547, 710, 713, 721, 727], "user": [1, 47, 104, 112, 133, 146, 148, 149, 151, 161, 162, 163, 182, 184, 187, 189, 275, 341, 394, 451, 529, 534, 714, 719, 816, 875, 878], "care": [1, 47, 137, 139, 604], "ensur": [1, 16, 47, 78, 105, 106, 149, 223, 345, 398, 497, 531, 534, 538, 550, 572, 574, 756, 818], "data": [1, 28, 54, 78, 80, 90, 94, 103, 105, 106, 107, 108, 111, 132, 133, 136, 138, 140, 141, 143, 145, 146, 147, 148, 191, 223, 294, 345, 398, 457, 495, 497, 499, 517, 526, 527, 528, 529, 530, 533, 534, 536, 538, 540, 544, 546, 548, 550, 552, 566, 572, 574, 576, 592, 601, 608, 609, 631, 664, 675, 698, 710, 713, 714, 718, 724, 726, 727, 728, 773, 804, 808, 815, 839, 842, 875, 876, 878, 883], "condit": [1, 84, 85, 727], "follow": [1, 51, 52, 54, 66, 73, 78, 79, 94, 105, 106, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 194, 223, 230, 258, 260, 301, 326, 328, 345, 352, 377, 379, 398, 405, 433, 435, 457, 464, 480, 481, 499, 507, 527, 528, 529, 532, 533, 535, 536, 537, 541, 543, 544, 547, 552, 576, 600, 601, 602, 604, 605, 609, 710, 713, 728, 754, 791, 842, 881, 883], "confid": [1, 68, 73, 77, 84, 534, 724, 725, 735, 755], "met": [1, 345, 864], "safe": [1, 78, 103, 105, 106, 107, 146, 719, 729, 753], "cast": [1, 142, 241, 311, 362, 416, 474, 547, 548, 606, 710], "integ": [1, 16, 103, 107, 131, 133, 137, 138, 141, 142, 143, 144, 145, 230, 301, 352, 405, 464, 529, 534, 547, 548, 600, 603, 604, 605, 606, 687, 729], "neg": [1, 16, 61, 64, 67, 80, 146, 292, 531, 538, 539, 572, 713, 714, 719, 724, 728, 815], "dimension": [1, 517, 528, 541, 542, 543, 548, 566, 584, 592, 713, 720, 721, 727, 728], "equal": [1, 33, 42, 47, 67, 69, 101, 105, 106, 107, 137, 195, 201, 207, 213, 228, 237, 283, 289, 299, 308, 350, 359, 403, 412, 457, 462, 471, 495, 497, 504, 524, 541, 550, 557, 574, 581, 600, 602, 603, 604, 606, 608, 698, 713, 718, 719, 722, 727, 728, 729, 758, 814, 818, 819], "being": [1, 16, 45, 47, 48, 60, 61, 62, 78, 103, 107, 137, 138, 144, 148, 544, 604, 608, 698, 727, 736, 737, 757, 761, 764, 797, 876, 878], "confirm": [1, 119, 600, 604, 728], "uniqu": [1, 54, 58, 133, 137, 141, 142, 146, 147, 148, 276, 342, 395, 452, 493, 525, 547, 604, 710, 754, 763, 768], "root": [1, 78, 89, 94, 105, 106, 142, 148, 545, 736, 737, 750, 751, 752, 753, 755, 756, 757, 761, 764, 765, 766, 767, 770, 771, 773, 775, 779, 781, 783, 784, 791, 796, 797, 800, 802, 804, 806, 807, 809, 811, 812, 814, 815, 881], "ha": [1, 16, 28, 46, 51, 52, 60, 61, 62, 67, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 183, 188, 191, 223, 240, 241, 244, 247, 257, 258, 259, 260, 271, 274, 278, 279, 280, 282, 292, 293, 294, 311, 314, 317, 325, 326, 327, 328, 338, 345, 362, 365, 368, 376, 377, 378, 379, 390, 398, 415, 416, 419, 422, 432, 433, 434, 435, 446, 449, 450, 454, 455, 457, 474, 479, 480, 481, 529, 531, 547, 698, 713, 715, 726, 727, 728, 756, 776, 779, 780, 794, 798, 814, 841, 878, 881], "node": [1, 78, 105, 106, 545, 730, 731, 735, 736, 737, 740, 744, 750, 751, 752, 754, 755, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 797, 800, 801, 804, 805, 806, 807, 808, 809, 810, 814, 876, 881], "except": [1, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 142, 143, 144, 146, 150, 162, 185, 292, 509, 561, 571, 586, 598, 599, 603, 714, 730, 731, 732, 733, 734, 763, 814, 816, 817, 852, 875, 882], "branch": [1, 78, 94, 106, 545, 735, 755, 756, 765, 806, 809, 815, 881], "name": [1, 55, 59, 78, 94, 105, 106, 133, 134, 138, 139, 140, 142, 143, 145, 146, 147, 149, 151, 176, 177, 178, 183, 188, 194, 220, 222, 266, 272, 281, 282, 283, 289, 291, 333, 339, 344, 385, 391, 397, 441, 447, 456, 486, 491, 494, 495, 507, 512, 516, 522, 529, 534, 540, 545, 565, 570, 591, 597, 600, 601, 603, 604, 609, 621, 665, 700, 710, 711, 712, 730, 735, 749, 751, 752, 753, 755, 757, 758, 759, 760, 763, 767, 768, 769, 770, 771, 773, 775, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 794, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 813, 814, 833, 839, 876, 881], "correspond": [1, 53, 78, 94, 105, 106, 137, 138, 140, 145, 147, 183, 188, 253, 266, 282, 292, 333, 385, 428, 441, 454, 455, 486, 499, 529, 544, 552, 576, 699, 700, 713, 714, 717, 728, 735, 768, 773, 777, 786, 807, 814], "There": [1, 54, 79, 90, 134, 139, 142, 145, 247, 317, 368, 422, 572, 719, 727, 728, 876, 881, 883], "ecolog": [1, 76, 714, 719], "literatur": [1, 74, 728], "softwar": [1, 137, 138, 146, 875], "measur": [1, 74, 76, 82, 84, 85, 88, 89, 93, 94, 95, 97, 98, 99, 105, 106, 495, 529, 540, 546, 547, 713, 726, 727, 735, 755], "alwai": [1, 16, 136, 139, 142, 144, 146, 162, 191, 194, 215, 292, 765, 821, 883], "assum": [1, 69, 78, 80, 86, 89, 105, 106, 135, 137, 138, 141, 143, 161, 163, 230, 278, 279, 280, 301, 352, 405, 464, 499, 534, 547, 548, 552, 576, 587, 608, 609, 714, 718, 724, 725, 727, 728], "abund": [1, 69, 70, 78, 80, 83, 90, 94, 102, 103, 105, 106, 107, 108, 111, 132, 529, 534, 699, 713, 714, 720, 721, 728], "where": [1, 2, 67, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 107, 108, 111, 131, 137, 141, 142, 143, 146, 147, 149, 243, 245, 249, 251, 261, 263, 268, 270, 271, 273, 313, 315, 319, 321, 329, 330, 335, 337, 338, 340, 364, 366, 370, 372, 381, 382, 387, 389, 390, 392, 393, 418, 420, 424, 426, 436, 438, 443, 445, 446, 448, 477, 482, 483, 488, 490, 492, 495, 499, 527, 528, 529, 531, 532, 533, 534, 535, 536, 538, 539, 541, 542, 543, 544, 552, 576, 602, 608, 698, 710, 718, 720, 721, 722, 724, 728, 729, 735, 759, 760, 770, 774, 807, 810, 839, 881, 883], "three": [1, 28, 93, 144, 148, 541, 547, 572, 605, 699, 710, 727, 728, 760, 883], "were": [1, 62, 65, 78, 83, 103, 105, 106, 107, 142, 144, 145, 228, 263, 299, 330, 350, 382, 403, 438, 462, 483, 600, 602, 604, 710, 727, 728, 781, 783, 817, 883], "onli": [1, 16, 54, 81, 84, 94, 111, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 191, 204, 219, 223, 241, 248, 282, 311, 318, 345, 362, 369, 398, 416, 423, 457, 474, 495, 509, 526, 529, 541, 561, 572, 586, 587, 589, 594, 600, 604, 605, 698, 714, 719, 721, 726, 727, 728, 756, 759, 760, 762, 765, 768, 791, 799, 804, 808, 821, 864, 875, 881, 883], "second": [1, 16, 28, 60, 61, 62, 63, 64, 65, 66, 138, 144, 149, 163, 194, 216, 283, 499, 529, 552, 576, 728, 774, 777, 807, 876, 883], "form": [1, 28, 60, 193, 499, 548, 552, 572, 576, 594, 806], "among": [1, 74, 94, 139, 521, 569, 596, 610, 714, 721], "expect": [1, 108, 133, 149, 178, 185, 223, 345, 398, 534, 535, 536, 547, 608, 713, 714, 721, 731, 732, 806, 883], "3": [1, 16, 28, 33, 45, 46, 48, 50, 53, 54, 56, 57, 60, 64, 69, 77, 78, 81, 86, 94, 97, 102, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 194, 204, 216, 221, 228, 230, 240, 241, 242, 247, 248, 264, 265, 267, 273, 274, 276, 279, 280, 292, 293, 299, 301, 311, 312, 317, 318, 331, 332, 334, 340, 342, 345, 350, 352, 362, 363, 368, 369, 383, 384, 386, 392, 395, 403, 405, 415, 416, 417, 422, 423, 439, 440, 442, 448, 449, 452, 454, 455, 457, 462, 464, 474, 475, 484, 485, 487, 492, 493, 506, 515, 518, 521, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 546, 548, 559, 564, 567, 569, 583, 590, 593, 594, 596, 600, 601, 602, 604, 605, 606, 608, 609, 610, 632, 643, 676, 699, 700, 710, 713, 714, 719, 724, 726, 727, 728, 729, 750, 760, 765, 766, 773, 774, 775, 798, 802, 804, 806, 807, 809, 810, 815, 820, 875, 878, 881, 883], "indic": [1, 15, 29, 30, 33, 42, 51, 52, 69, 72, 73, 88, 94, 111, 131, 137, 138, 146, 149, 194, 195, 201, 204, 207, 213, 225, 228, 230, 237, 243, 245, 248, 249, 251, 254, 255, 256, 257, 258, 259, 260, 263, 268, 270, 271, 273, 276, 282, 283, 289, 296, 299, 301, 308, 313, 315, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 330, 335, 337, 338, 340, 342, 347, 350, 352, 359, 364, 366, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 387, 389, 390, 392, 393, 395, 400, 403, 405, 412, 418, 420, 423, 424, 426, 429, 430, 431, 432, 433, 434, 435, 438, 443, 445, 446, 448, 452, 459, 462, 464, 471, 477, 479, 480, 481, 483, 488, 490, 492, 493, 495, 529, 534, 545, 600, 602, 603, 604, 608, 698, 709, 710, 726, 770, 772, 810, 853, 864, 881, 883], "singleton": [1, 69, 72, 73, 77, 79, 81, 93, 96, 100, 149], "tripleton": 1, "do": [1, 45, 48, 90, 131, 137, 144, 146, 149, 191, 223, 228, 270, 299, 337, 345, 350, 389, 398, 403, 445, 457, 462, 490, 524, 529, 602, 605, 643, 721, 755, 768, 798, 799, 881, 883], "ani": [1, 16, 46, 47, 54, 56, 66, 67, 70, 101, 102, 137, 139, 141, 142, 146, 147, 161, 162, 163, 183, 188, 191, 194, 204, 218, 219, 223, 345, 398, 457, 495, 524, 529, 531, 602, 605, 609, 643, 665, 713, 718, 724, 726, 727, 752, 755, 756, 757, 767, 775, 804, 806, 814, 841, 842, 852, 864, 881, 883], "ton": 1, "doubleton": [1, 72, 73, 75, 77, 93], "paramet": [1, 2, 16, 17, 28, 30, 33, 42, 45, 47, 48, 49, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 149, 151, 161, 162, 163, 174, 176, 177, 178, 179, 180, 182, 183, 184, 187, 188, 189, 191, 194, 195, 201, 204, 207, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 230, 237, 240, 241, 242, 246, 248, 249, 250, 253, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 289, 291, 292, 293, 296, 299, 301, 308, 311, 312, 316, 318, 319, 320, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 347, 350, 352, 359, 362, 363, 367, 369, 370, 371, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 394, 395, 396, 397, 398, 400, 403, 405, 412, 415, 416, 417, 421, 423, 424, 425, 428, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 451, 452, 453, 454, 455, 456, 457, 459, 462, 464, 471, 474, 475, 476, 477, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 504, 506, 507, 509, 510, 511, 513, 514, 515, 516, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 552, 557, 559, 561, 562, 563, 564, 565, 569, 570, 573, 574, 576, 581, 583, 586, 587, 588, 589, 590, 591, 596, 597, 600, 601, 602, 603, 604, 605, 606, 608, 631, 643, 664, 675, 687, 698, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 735, 750, 752, 753, 756, 757, 758, 759, 760, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 796, 798, 799, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 838, 839, 840, 841, 842, 852, 853, 864, 883], "either": [1, 28, 35, 54, 56, 60, 61, 62, 94, 133, 146, 147, 161, 162, 163, 253, 263, 294, 330, 382, 428, 438, 483, 525, 602, 604, 698, 710, 713, 718, 726, 728, 814], "string": [1, 2, 16, 44, 103, 107, 108, 111, 131, 135, 137, 138, 142, 144, 146, 147, 239, 249, 250, 266, 273, 276, 277, 282, 290, 310, 319, 320, 333, 340, 342, 343, 361, 370, 371, 385, 392, 395, 396, 414, 424, 425, 441, 448, 452, 453, 473, 477, 478, 486, 492, 493, 495, 499, 505, 511, 529, 534, 547, 548, 552, 558, 562, 576, 582, 587, 600, 603, 604, 606, 709, 710, 749, 753, 807, 815, 820, 881], "faith_pd": [1, 94], "ten": 1, "faith": [1, 78, 94, 547], "pd": [1, 28, 48, 52, 57, 78, 94, 103, 133, 134, 148, 223, 260, 294, 328, 345, 379, 398, 435, 457, 481, 506, 518, 521, 529, 534, 547, 559, 567, 569, 583, 593, 594, 596, 600, 601, 604, 609, 699, 700, 710, 713, 721, 726, 727, 773, 818], "about": [1, 55, 59, 90, 135, 137, 138, 142, 146, 147, 149, 204, 220, 222, 223, 272, 281, 294, 339, 344, 345, 391, 397, 398, 447, 456, 457, 491, 494, 516, 522, 524, 565, 570, 591, 597, 699, 711, 712, 721, 727, 728, 792, 813, 816, 817, 878], "100": [1, 133, 134, 137, 140, 219, 529, 534, 728, 883], "unweighted_unifrac": [1, 106], "hundr": [1, 108], "unweight": [1, 94, 105, 106, 722], "unifrac": [1, 78, 94, 105, 106, 108, 111, 719], "latter": [1, 495], "mai": [1, 2, 16, 47, 56, 78, 85, 126, 134, 136, 137, 138, 139, 141, 142, 144, 146, 147, 148, 149, 162, 179, 180, 191, 194, 218, 223, 250, 294, 320, 345, 371, 398, 425, 457, 478, 495, 499, 509, 524, 529, 547, 552, 561, 576, 586, 602, 604, 608, 698, 713, 724, 726, 727, 728, 729, 773, 816, 839, 841, 876, 878], "case": [1, 47, 60, 61, 62, 70, 108, 132, 137, 142, 144, 146, 148, 151, 223, 253, 266, 276, 333, 342, 385, 395, 398, 428, 441, 452, 486, 493, 507, 529, 534, 548, 602, 608, 713, 718, 720, 728, 755, 788, 814, 841, 842, 876, 881], "run": [1, 78, 103, 105, 106, 107, 138, 145, 146, 248, 318, 369, 423, 529, 600, 601, 602, 604, 605, 608, 620, 642, 653, 686, 697, 710, 878, 883], "like": [1, 60, 61, 62, 108, 137, 139, 140, 141, 143, 146, 149, 266, 333, 385, 441, 486, 495, 547, 608, 631, 643, 664, 665, 675, 687, 719, 721, 727, 728, 840, 876, 883], "small": [1, 141, 147, 526, 538, 539, 721], "neglig": 1, "know": [1, 16, 78, 105, 106, 135, 137, 144, 147, 149, 529, 724, 816, 876], "might": [1, 80, 141, 143, 601, 726, 727, 728, 760, 876], "ve": [1, 137, 138, 728, 881], "develop": [1, 2, 108, 111, 136, 146, 161, 162, 163, 529, 815, 875, 876, 883], "To": [1, 35, 78, 105, 106, 137, 138, 139, 142, 145, 146, 149, 191, 223, 345, 398, 529, 534, 572, 594, 600, 602, 604, 608, 724, 755, 876, 883], "discov": [1, 763], "get_alpha_diversity_metr": [1, 103, 110], "get_beta_diversity_metr": [1, 107, 109, 111], "respect": [1, 28, 72, 137, 140, 143, 146, 148, 161, 162, 163, 181, 182, 184, 187, 189, 191, 250, 320, 371, 425, 457, 478, 506, 511, 513, 521, 529, 544, 559, 562, 569, 583, 587, 594, 596, 608, 700], "addit": [1, 66, 67, 78, 104, 105, 106, 110, 136, 137, 138, 139, 140, 144, 145, 146, 223, 345, 398, 495, 526, 527, 528, 529, 547, 572, 735, 756, 768, 769, 814, 841], "won": [1, 78, 103, 105, 106, 107, 138, 195, 714], "t": [1, 16, 28, 45, 47, 48, 49, 53, 54, 58, 66, 78, 80, 94, 103, 105, 106, 107, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 161, 163, 185, 192, 194, 195, 223, 228, 237, 242, 246, 250, 252, 253, 254, 255, 256, 259, 267, 268, 269, 270, 278, 292, 299, 308, 312, 316, 320, 322, 323, 324, 327, 334, 335, 336, 337, 345, 350, 359, 363, 367, 371, 373, 374, 375, 378, 386, 387, 388, 389, 398, 403, 412, 417, 421, 425, 427, 428, 429, 430, 431, 434, 442, 443, 444, 445, 450, 457, 462, 471, 475, 476, 478, 487, 488, 489, 490, 495, 513, 527, 529, 534, 535, 536, 540, 541, 545, 548, 572, 599, 605, 713, 714, 719, 721, 723, 724, 726, 728, 729, 759, 760, 797, 798, 806, 814, 815, 816, 878, 882, 883], "those": [1, 104, 146, 608, 698, 713, 728, 765, 799, 804, 815, 841, 878], "scipi": [1, 79, 104, 107, 110, 517, 524, 529, 534, 545, 548, 566, 572, 584, 592, 594, 601, 602, 604, 608, 719, 724, 727, 728, 772], "spatial": [1, 104, 107, 110, 517, 524, 548, 566, 572, 584, 592, 594, 604], "distanc": [1, 16, 94, 104, 105, 106, 107, 108, 110, 111, 131, 141, 142, 267, 269, 334, 336, 386, 388, 442, 444, 487, 489, 506, 509, 515, 517, 521, 527, 540, 607, 608, 710, 713, 714, 716, 719, 721, 735, 749, 750, 758, 760, 775, 797, 804, 815, 878, 879, 881], "pdist": [1, 104, 107, 110, 608], "creat": [1, 16, 28, 45, 48, 49, 53, 55, 56, 57, 58, 136, 137, 140, 142, 144, 146, 164, 175, 186, 191, 192, 194, 204, 215, 216, 220, 223, 272, 273, 294, 339, 340, 345, 391, 392, 398, 447, 448, 457, 491, 492, 510, 511, 513, 515, 516, 518, 519, 529, 538, 539, 547, 562, 564, 565, 567, 587, 590, 591, 593, 594, 606, 608, 643, 699, 710, 711, 756, 757, 778, 792, 815, 878, 881, 883], "7": [1, 63, 73, 94, 108, 137, 138, 139, 147, 148, 194, 204, 216, 221, 223, 230, 241, 292, 301, 311, 352, 362, 398, 405, 416, 464, 474, 521, 534, 569, 596, 601, 602, 604, 605, 608, 699, 724, 760, 774, 798, 806, 807, 815, 819, 878], "23": [1, 143, 146, 147, 291, 529, 815, 878], "64": [1, 108, 138, 146, 282, 283, 810], "14": [1, 73, 83, 94, 136, 138, 143, 244, 248, 314, 318, 365, 369, 419, 423, 529, 534, 609, 728, 766, 804], "35": [1, 136, 138, 139, 145, 526, 728], "42": [1, 54, 79, 137, 143, 144, 146, 223, 246, 316, 367, 398, 421, 476, 601, 604], "12": [1, 136, 143, 457, 529, 534, 540, 724, 878], "40": [1, 81, 137, 146, 148, 544, 726, 728], "44": [1, 95, 604, 814], "9": [1, 133, 134, 135, 137, 140, 143, 146, 147, 191, 194, 204, 223, 244, 248, 294, 314, 318, 345, 365, 369, 398, 419, 423, 457, 529, 534, 608, 609, 699, 713, 714, 716, 717, 719, 720, 721, 724, 762, 765, 774, 804, 807, 814, 815, 878], "45": [1, 143, 146, 728], "19": [1, 136, 143, 724], "abcdef": 1, "ll": [1, 78, 105, 106, 601, 602, 605, 699, 724, 727, 728, 881, 883], "s_": [1, 69, 71, 72, 90, 101], "ob": [1, 72, 101], "adiv_sob": 1, "sob": [1, 91, 92, 93], "A": [1, 16, 28, 49, 50, 53, 54, 55, 58, 60, 62, 65, 69, 72, 77, 78, 79, 80, 82, 83, 89, 94, 97, 105, 106, 108, 131, 133, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 175, 179, 180, 186, 193, 194, 215, 219, 220, 223, 244, 250, 256, 272, 276, 283, 289, 294, 314, 320, 324, 339, 342, 345, 365, 371, 375, 391, 395, 398, 419, 425, 431, 447, 452, 457, 478, 491, 493, 495, 506, 507, 511, 513, 515, 516, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 559, 562, 564, 565, 568, 569, 572, 583, 587, 590, 591, 595, 596, 601, 602, 603, 604, 606, 608, 621, 643, 665, 709, 710, 711, 713, 714, 719, 721, 726, 727, 728, 735, 736, 737, 750, 755, 758, 760, 761, 764, 765, 766, 767, 770, 771, 772, 774, 775, 777, 784, 792, 794, 796, 797, 802, 804, 811, 812, 814, 864, 876, 881, 883], "b": [1, 16, 49, 54, 56, 57, 58, 78, 79, 80, 90, 94, 111, 138, 141, 142, 146, 192, 223, 345, 398, 457, 499, 506, 507, 510, 515, 518, 521, 545, 547, 552, 559, 564, 567, 569, 576, 583, 590, 593, 594, 596, 601, 602, 698, 710, 726, 727, 736, 737, 749, 750, 751, 753, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 768, 769, 770, 771, 775, 776, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 799, 800, 801, 802, 804, 805, 806, 808, 809, 810, 811, 812, 814, 815, 840, 876, 878, 881], "c": [1, 2, 16, 28, 46, 53, 54, 56, 57, 66, 69, 78, 79, 80, 81, 82, 94, 95, 97, 99, 105, 106, 111, 136, 137, 138, 142, 144, 146, 147, 148, 163, 223, 233, 238, 244, 250, 252, 253, 304, 309, 314, 320, 345, 355, 360, 365, 371, 398, 408, 413, 419, 425, 427, 428, 457, 467, 472, 478, 495, 506, 510, 513, 515, 518, 521, 526, 528, 533, 540, 541, 542, 543, 545, 546, 547, 559, 564, 567, 569, 583, 590, 593, 594, 596, 601, 602, 710, 720, 726, 727, 736, 737, 749, 750, 751, 753, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 768, 769, 770, 771, 775, 776, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 799, 800, 801, 802, 804, 805, 806, 808, 809, 810, 811, 812, 814, 815, 878, 881], "f": [1, 16, 54, 70, 84, 94, 108, 132, 133, 134, 138, 142, 145, 147, 148, 192, 345, 602, 603, 604, 714, 717, 724, 727, 736, 737, 750, 751, 753, 755, 756, 757, 761, 762, 764, 765, 766, 768, 769, 770, 771, 775, 781, 782, 783, 784, 785, 791, 795, 796, 797, 800, 801, 802, 804, 805, 809, 810, 811, 812, 814, 881], "int64": [1, 28, 46, 54, 240, 244, 274, 314, 365, 415, 419, 449, 457, 529, 878], "next": [1, 78, 84, 85, 105, 106, 136, 142, 149, 457, 529, 687, 713, 814, 881, 883], "same": [1, 28, 46, 47, 48, 50, 54, 56, 74, 78, 83, 94, 95, 99, 105, 106, 137, 138, 139, 140, 142, 145, 147, 149, 207, 221, 228, 230, 237, 240, 241, 244, 246, 247, 263, 267, 268, 269, 270, 274, 275, 279, 282, 283, 292, 299, 301, 308, 311, 314, 316, 317, 330, 334, 335, 336, 337, 341, 350, 352, 359, 362, 365, 367, 368, 382, 386, 387, 388, 389, 394, 403, 405, 412, 415, 416, 419, 421, 422, 438, 442, 443, 444, 445, 449, 451, 454, 457, 462, 464, 471, 474, 476, 483, 487, 488, 489, 490, 497, 499, 507, 508, 509, 511, 520, 524, 525, 529, 534, 550, 552, 560, 561, 562, 568, 574, 576, 585, 586, 587, 589, 595, 600, 601, 602, 603, 604, 605, 608, 698, 713, 714, 718, 719, 721, 727, 728, 729, 769, 799, 814, 818, 878, 881], "sinc": [1, 28, 45, 48, 57, 80, 136, 137, 139, 144, 146, 148, 195, 250, 292, 320, 371, 425, 457, 478, 529, 602, 724, 728, 808, 821, 883], "order": [1, 16, 38, 43, 49, 53, 54, 57, 103, 107, 131, 133, 137, 141, 142, 143, 144, 147, 216, 223, 238, 247, 250, 276, 280, 282, 293, 309, 317, 320, 342, 345, 360, 368, 371, 395, 398, 413, 422, 425, 452, 455, 472, 478, 493, 497, 499, 506, 509, 521, 529, 534, 545, 550, 552, 559, 561, 569, 574, 576, 583, 586, 589, 594, 596, 600, 601, 602, 603, 604, 605, 608, 713, 722, 726, 727, 785, 804, 805, 806, 814, 816, 818, 881, 883], "io": [1, 55, 59, 78, 105, 106, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 547, 565, 570, 591, 597, 710, 711, 712, 773, 792, 813, 814, 840, 875, 881], "stringio": [1, 78, 105, 106, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 191, 547, 814, 815, 876, 881], "u1": [1, 78, 105, 106], "u2": [1, 78, 105, 106], "u3": [1, 78, 105, 106], "u4": [1, 78, 105, 106], "75": [1, 50, 78, 83, 105, 106, 267, 334, 386, 442, 487, 529, 547, 601, 604, 810], "u5": [1, 78, 105, 106], "u6": [1, 78, 105, 106], "u7": [1, 78, 105, 106], "adiv_faith_pd": 1, "00": [1, 133, 134, 137, 140, 143, 241, 278, 311, 362, 416, 450, 474, 815, 878], "50": [1, 62, 65, 137, 140, 143, 241, 311, 362, 416, 474, 529, 534, 609, 710, 727, 728, 878], "float64": [1, 54, 131, 241, 311, 362, 416, 474, 529, 594, 604, 699], "now": [1, 83, 136, 137, 139, 144, 457, 526, 529, 601, 698, 699, 724, 727, 728, 881, 883], "brai": 1, "curti": 1, "notic": [1, 137, 142, 144, 728, 883], "bc_dm": 1, "braycurti": 1, "6x6": [1, 604], "78787879": 1, "86666667": 1, "30927835": 1, "85714286": 1, "81521739": 1, "78142077": 1, "86813187": 1, "1627907": 1, "87709497": 1, "09392265": 1, "71597633": 1, "87777778": 1, "89285714": 1, "68235294": 1, "weight": [1, 78, 94, 105, 106, 142, 609, 610, 632, 643, 654, 676, 718, 722, 814], "becaus": [1, 47, 53, 54, 78, 105, 106, 133, 137, 138, 139, 142, 144, 145, 146, 149, 228, 263, 292, 299, 330, 350, 382, 403, 438, 457, 462, 483, 529, 602, 714, 719, 721, 723, 726, 755, 760, 763, 807], "need": [1, 45, 48, 53, 78, 105, 106, 108, 131, 140, 142, 149, 161, 163, 191, 204, 219, 294, 529, 534, 535, 536, 545, 600, 601, 603, 604, 605, 698, 699, 714, 721, 724, 727, 728, 757, 760, 818, 819, 841, 883], "again": [1, 137, 138, 544, 815], "wu_dm": 1, "weighted_unifrac": [1, 105], "77549923": 1, "82857143": 1, "42512039": 1, "8547619": 1, "10937312": 1, "26433692": 1, "98435423": 1, "24270353": 1, "46774194": 1, "95224719": 1, "16025641": 1, "86111111": 1, "98796148": 1, "30870431": 1, "82967033": 1, "determin": [1, 30, 33, 42, 51, 52, 78, 94, 103, 105, 106, 107, 141, 149, 179, 180, 191, 225, 228, 237, 254, 255, 256, 257, 258, 259, 260, 262, 283, 289, 296, 299, 308, 322, 323, 324, 325, 326, 327, 328, 347, 350, 359, 373, 374, 375, 376, 377, 378, 379, 380, 400, 403, 412, 429, 430, 431, 432, 433, 434, 435, 437, 459, 462, 471, 479, 480, 481, 504, 529, 557, 581, 604, 608, 698, 719, 724, 726, 727, 814, 883], "significantli": [1, 53, 529, 600, 603, 604], "correl": [1, 540, 546, 547, 601, 602, 605, 607, 608, 700, 714, 715, 721, 724, 728, 760, 881], "mantel": [1, 547, 605, 608], "them": [1, 80, 139, 144, 146, 195, 207, 216, 217, 275, 341, 394, 451, 457, 602, 643, 718, 719, 721, 842], "Then": [1, 529, 541, 609, 699], "p": [1, 16, 66, 78, 87, 88, 94, 345, 529, 534, 544, 547, 600, 602, 603, 604, 605, 608, 699, 713, 714, 715, 721, 724, 727, 728], "signific": [1, 146, 529, 534, 600, 602, 603, 604, 605, 608, 727, 728], "base": [1, 54, 61, 64, 69, 72, 73, 77, 78, 82, 83, 88, 89, 90, 94, 97, 99, 105, 106, 132, 133, 137, 139, 143, 145, 146, 194, 215, 223, 263, 294, 330, 345, 382, 398, 438, 457, 483, 499, 548, 552, 576, 600, 602, 603, 604, 608, 643, 713, 714, 721, 724, 726, 727, 728, 758, 770, 771, 814, 840, 878, 879, 881, 883], "05": [1, 143, 529, 534, 608, 724, 725, 727, 728, 818], "r": [1, 16, 78, 79, 83, 84, 85, 86, 87, 94, 105, 106, 138, 139, 148, 191, 223, 345, 398, 507, 526, 527, 528, 532, 533, 534, 535, 536, 544, 600, 601, 602, 603, 604, 608, 710, 713, 714, 721, 757, 798], "p_valu": [1, 602, 608], "n": [1, 16, 70, 71, 77, 79, 80, 81, 86, 87, 88, 89, 90, 94, 96, 102, 131, 133, 134, 135, 137, 138, 139, 143, 144, 145, 147, 148, 149, 161, 162, 163, 191, 192, 223, 263, 276, 330, 342, 345, 369, 382, 395, 398, 438, 452, 483, 493, 538, 539, 547, 602, 605, 608, 698, 713, 714, 715, 718, 720, 721, 722, 724, 728, 729, 736, 737, 749, 757, 761, 764, 770, 775, 777, 784, 799, 800, 807, 814, 815, 820, 878], "922404392093": 1, "true": [1, 14, 15, 16, 29, 30, 31, 32, 33, 45, 46, 48, 49, 50, 51, 52, 53, 57, 58, 60, 61, 62, 72, 73, 78, 79, 94, 101, 103, 105, 106, 107, 108, 111, 133, 136, 137, 138, 139, 140, 142, 145, 151, 161, 162, 163, 182, 187, 191, 192, 194, 204, 216, 221, 223, 224, 225, 227, 228, 230, 237, 240, 241, 243, 244, 245, 247, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 292, 293, 294, 295, 296, 298, 299, 301, 308, 311, 313, 314, 315, 317, 320, 321, 322, 323, 324, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 349, 350, 352, 359, 362, 364, 365, 366, 368, 371, 372, 373, 374, 375, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 400, 402, 403, 405, 412, 415, 416, 418, 419, 420, 422, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 461, 462, 464, 471, 474, 478, 480, 481, 484, 485, 486, 487, 488, 489, 490, 492, 493, 496, 497, 504, 506, 509, 525, 529, 534, 535, 536, 540, 547, 548, 549, 550, 557, 559, 561, 572, 573, 574, 581, 583, 586, 587, 589, 600, 602, 604, 605, 608, 643, 654, 718, 719, 721, 722, 726, 727, 729, 753, 755, 757, 762, 770, 776, 778, 779, 780, 782, 785, 788, 789, 790, 793, 794, 795, 796, 805, 807, 808, 810, 814, 815, 841, 842, 852, 864, 878, 881, 883], "princip": [1, 604, 699, 710, 713, 719, 720], "coordin": [1, 139, 145, 194, 204, 207, 215, 216, 221, 534, 545, 604, 609, 643, 676, 687, 699, 700, 710, 713, 719, 720, 721], "analysi": [1, 78, 90, 105, 106, 137, 144, 526, 527, 529, 534, 544, 600, 603, 604, 609, 610, 631, 632, 664, 675, 676, 687, 699, 710, 713, 714, 719, 720, 721, 724, 727, 728], "pcoa": [1, 143, 604, 700, 710, 720], "our": [1, 80, 138, 146, 149, 162, 192, 263, 330, 382, 438, 483, 699, 724, 727, 728, 729, 878, 883], "ordin": [1, 125, 604, 819, 820, 879], "wu_pc": 1, "plot": [1, 700], "realli": 1, "interest": [1, 146, 457, 529, 547, 608, 713, 721, 727, 781, 783, 883], "context": [1, 16, 192, 193, 524, 710, 815], "let": [1, 137, 138, 140, 144, 145, 147, 194, 204, 273, 340, 392, 448, 457, 492, 529, 602, 698, 723, 724, 727, 728, 816, 878, 881, 883], "visual": [1, 710], "panda": [1, 28, 52, 57, 107, 133, 134, 148, 223, 260, 328, 345, 379, 398, 435, 481, 518, 529, 534, 567, 593, 594, 600, 601, 603, 604, 605, 609, 643, 687, 699, 710, 726, 727, 773, 818, 878], "sample_md": 1, "datafram": [1, 28, 52, 107, 133, 134, 148, 223, 260, 294, 328, 345, 379, 398, 435, 457, 481, 506, 518, 521, 529, 534, 559, 567, 569, 583, 593, 596, 600, 601, 603, 604, 605, 609, 643, 687, 699, 700, 710, 713, 714, 720, 721, 726, 727, 773, 818, 878], "gut": [1, 146, 710], "skin": [1, 710], "tongu": 1, "body_sit": [1, 710], "subject": [1, 133, 134, 146, 883], "color": [1, 84, 85, 515, 564, 590, 710], "taken": [1, 133, 134, 137, 144, 147, 148, 529, 608, 840], "fig": [1, 515, 564, 590, 710], "axis_label": [1, 710], "pc": [1, 609, 710], "titl": [1, 133, 134, 139, 147, 515, 564, 590, 710], "cmap": [1, 515, 564, 590, 710], "jet": 1, "don": [1, 16, 54, 137, 146, 252, 253, 427, 428, 527, 529, 605, 721, 724, 728, 759, 760, 797, 815], "see": [1, 53, 54, 55, 59, 66, 78, 94, 103, 105, 106, 107, 108, 110, 111, 134, 136, 137, 138, 142, 144, 145, 146, 148, 149, 220, 222, 246, 272, 281, 282, 293, 316, 339, 344, 367, 391, 397, 421, 447, 456, 457, 476, 491, 494, 499, 516, 522, 535, 536, 552, 565, 570, 576, 591, 597, 600, 601, 602, 603, 604, 605, 608, 699, 710, 711, 712, 719, 721, 723, 724, 728, 792, 813, 876, 883], "cluster": [1, 602, 604, 772, 878], "instead": [1, 50, 97, 136, 137, 139, 146, 149, 151, 161, 162, 163, 217, 250, 263, 265, 267, 269, 276, 320, 330, 332, 334, 336, 342, 371, 382, 384, 386, 388, 395, 425, 438, 440, 442, 444, 452, 478, 483, 485, 487, 489, 493, 548, 600, 602, 604, 718, 727, 728, 760, 815, 816, 876], "bodi": [1, 710], "site": [1, 139, 143, 263, 330, 382, 438, 483, 699, 700, 710, 719], "appear": [1, 69, 133, 144, 146, 147, 509, 561, 586, 601, 713, 714, 719, 724], "closer": [1, 883], "anoth": [1, 33, 42, 45, 54, 78, 105, 106, 139, 141, 142, 195, 201, 204, 207, 213, 218, 221, 228, 237, 246, 268, 270, 283, 289, 299, 308, 316, 335, 337, 350, 359, 367, 387, 389, 403, 412, 421, 443, 445, 457, 462, 471, 476, 488, 490, 495, 497, 550, 574, 608], "space": [1, 137, 142, 144, 146, 147, 204, 207, 216, 526, 527, 528, 532, 533, 535, 536, 643, 700, 710, 713, 720], "techniqu": [1, 79, 526, 713, 714, 879], "exploratori": 1, "quantifi": 1, "strength": 1, "statist": [1, 69, 72, 77, 83, 90, 527, 529, 534, 600, 602, 603, 604, 605, 608, 713, 714, 718, 724, 727, 728, 875], "accomplish": [1, 526, 876], "anosim": [1, 603, 604], "test": [1, 33, 42, 94, 149, 195, 201, 207, 213, 228, 237, 283, 289, 299, 308, 350, 359, 403, 412, 462, 471, 526, 529, 534, 547, 600, 602, 603, 604, 605, 607, 608, 620, 642, 653, 686, 697, 724, 727, 728, 818, 819, 839, 875], "permut": [1, 195, 600, 602, 603, 604, 605, 608], "999": [1, 457, 600, 602, 603, 604, 605, 608], "33333333333333331": 1, "anti": [1, 600], "insignific": 1, "strong": [1, 223, 600, 602, 608], "separ": [1, 133, 134, 137, 138, 140, 141, 142, 143, 144, 146, 604, 714], "explor": [1, 104, 699], "add": [1, 61, 64, 146, 147, 149, 174, 194, 204, 216, 218, 228, 299, 350, 403, 457, 462, 531, 538, 539, 541, 542, 543, 752, 765, 767], "rich": [1, 68, 72, 78, 86, 89, 94, 101], "straight": 1, "forward": [1, 280, 292, 293, 455], "seri": [1, 57, 103, 140, 529, 534, 594, 600, 601, 603, 604, 609, 700, 724], "investig": 1, "categori": [1, 146, 147, 609, 610, 620, 621, 631, 642, 643, 653, 654, 665, 675, 676, 686, 687, 697, 710, 724, 726, 727], "boxplot": 1, "show": [1, 204, 724, 881], "spearman": [1, 601, 602, 605], "numer": [1, 79, 83, 133, 141, 146, 148, 544, 601, 602, 643, 699, 710, 713, 714, 720, 721, 728, 819], "relev": [1, 16, 139, 534, 727, 815, 878], "give": [1, 142, 713, 714, 721, 760], "u": [1, 62, 65, 78, 84, 87, 105, 106, 136, 137, 139, 148, 228, 233, 237, 238, 278, 299, 304, 308, 309, 345, 350, 355, 359, 360, 398, 403, 408, 412, 413, 450, 462, 467, 471, 472, 529, 532, 533, 545, 602, 723, 728, 878, 883], "symmetr": [1, 495, 499, 547, 548, 552, 572, 576, 587, 602, 606, 608, 713, 758], "2x2": [1, 141], "corr": 1, "numeric_onli": 1, "000000": [1, 815], "939336": 1, "class": [2, 16, 28, 51, 52, 67, 69, 72, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 161, 163, 164, 176, 178, 179, 180, 181, 194, 204, 223, 241, 258, 260, 282, 294, 311, 326, 328, 345, 362, 377, 379, 398, 416, 433, 435, 457, 474, 480, 481, 495, 529, 548, 572, 610, 621, 632, 643, 654, 665, 676, 687, 700, 735, 757, 814, 821, 841, 853, 864, 875, 876], "wrap": [2, 144, 147, 865], "struct": [2, 139], "access": [2, 51, 52, 131, 136, 137, 139, 148, 258, 260, 283, 289, 326, 328, 377, 379, 433, 435, 480, 481, 547, 815, 821], "note": [2, 16, 28, 35, 40, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 105, 106, 108, 110, 132, 136, 137, 138, 139, 140, 142, 144, 145, 146, 194, 204, 205, 206, 218, 223, 226, 227, 230, 241, 244, 247, 250, 252, 263, 274, 276, 278, 279, 280, 282, 283, 290, 291, 292, 293, 294, 297, 298, 301, 311, 314, 317, 320, 330, 342, 345, 348, 349, 352, 362, 365, 368, 371, 382, 395, 398, 401, 402, 405, 416, 419, 422, 425, 427, 438, 449, 450, 452, 454, 455, 457, 460, 461, 464, 474, 478, 483, 493, 495, 499, 506, 507, 517, 520, 521, 524, 525, 529, 534, 535, 536, 538, 540, 544, 545, 546, 548, 552, 559, 566, 568, 569, 572, 576, 583, 584, 589, 592, 595, 596, 600, 601, 602, 603, 604, 605, 608, 698, 710, 713, 714, 719, 721, 722, 727, 728, 729, 753, 755, 756, 757, 758, 760, 765, 771, 773, 799, 804, 806, 807, 808, 809, 814, 815, 818, 820, 839, 840, 878, 881, 883], "cigar": [2, 16], "empti": [2, 29, 51, 79, 134, 137, 140, 144, 179, 180, 250, 258, 320, 326, 371, 377, 425, 433, 478, 480, 509, 529, 561, 586, 726, 757, 807, 818, 876], "depend": [2, 73, 76, 77, 78, 94, 103, 105, 106, 107, 137, 138, 147, 161, 162, 163, 191, 253, 428, 499, 552, 576, 602, 604, 606, 665, 719, 736, 737, 760, 761, 764, 808, 814, 841, 852, 876, 881, 883], "target_begin": 2, "query_begin": 2, "read_sequ": 2, "alia": [2, 78, 91, 92, 94, 105, 106, 140, 517, 529, 539, 566, 592, 781, 783], "ssw": [2, 16, 66], "reference_sequ": 2, "attribut": [2, 28, 56, 131, 136, 137, 139, 140, 143, 145, 146, 147, 151, 194, 203, 204, 219, 223, 228, 276, 282, 294, 299, 342, 345, 350, 395, 398, 403, 452, 457, 462, 493, 495, 506, 521, 548, 559, 569, 572, 583, 596, 621, 654, 665, 700, 709, 720, 727, 735, 736, 737, 750, 754, 757, 761, 764, 778, 806, 814, 819, 821, 822, 825, 832, 853, 878], "format": [2, 55, 59, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 164, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 194, 220, 222, 272, 277, 281, 282, 290, 339, 343, 344, 391, 396, 397, 447, 453, 456, 491, 494, 495, 516, 517, 522, 548, 565, 566, 570, 572, 584, 589, 591, 592, 597, 631, 664, 675, 711, 712, 753, 773, 792, 813, 815, 875, 881], "optimal_alignment_scor": 2, "charact": [2, 16, 33, 46, 47, 50, 54, 67, 133, 134, 135, 137, 138, 141, 142, 143, 144, 145, 147, 148, 149, 223, 228, 230, 233, 235, 237, 238, 239, 243, 244, 245, 248, 250, 251, 252, 253, 254, 255, 256, 259, 266, 271, 273, 275, 276, 282, 292, 294, 299, 301, 304, 306, 308, 309, 310, 313, 314, 315, 318, 320, 321, 322, 323, 324, 327, 333, 338, 340, 341, 342, 345, 350, 352, 355, 357, 359, 360, 361, 364, 365, 366, 369, 371, 372, 373, 374, 375, 378, 380, 385, 390, 392, 393, 394, 395, 398, 403, 405, 408, 410, 412, 413, 414, 418, 419, 420, 423, 425, 426, 427, 428, 429, 430, 431, 434, 441, 446, 448, 451, 452, 457, 462, 464, 467, 469, 471, 472, 473, 478, 486, 492, 493, 495, 510, 513, 524, 878], "begin": [2, 16, 136, 137, 138, 139, 143, 146, 147, 162, 194, 292, 728], "query_end": 2, "suboptimal_alignment_scor": 2, "suboptim": [2, 16], "target_end_optim": 2, "target_end_suboptim": 2, "built": [2, 16, 28, 151, 164, 194, 204, 223, 282, 294, 345, 398, 457, 495, 548, 572, 610, 621, 632, 643, 654, 665, 676, 687, 700, 735, 760, 799, 821, 841, 853, 864, 876], "ins": [2, 16, 28, 151, 164, 194, 204, 223, 282, 294, 345, 398, 457, 495, 548, 572, 610, 621, 632, 643, 654, 665, 676, 687, 700, 735, 821, 841, 853, 864], "self": [3, 4, 5, 7, 8, 9, 10, 11, 13, 18, 19, 21, 22, 23, 24, 25, 27, 34, 37, 39, 41, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 168, 169, 170, 171, 172, 173, 186, 187, 188, 189, 196, 198, 199, 200, 202, 204, 208, 210, 211, 212, 214, 218, 229, 230, 232, 234, 236, 274, 284, 286, 287, 288, 300, 301, 303, 305, 307, 351, 352, 354, 356, 358, 404, 405, 407, 409, 411, 449, 463, 464, 466, 468, 470, 497, 498, 501, 502, 503, 504, 506, 508, 520, 521, 550, 551, 554, 555, 556, 557, 559, 560, 568, 569, 574, 575, 578, 579, 580, 581, 583, 585, 595, 596, 611, 612, 614, 615, 616, 617, 618, 619, 622, 623, 625, 626, 627, 628, 629, 630, 633, 634, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 649, 650, 651, 652, 655, 656, 658, 659, 660, 661, 662, 663, 666, 667, 669, 670, 671, 672, 673, 674, 677, 678, 680, 681, 682, 683, 684, 685, 688, 689, 691, 692, 693, 694, 695, 696, 701, 702, 704, 705, 706, 707, 708, 736, 737, 738, 739, 742, 743, 745, 747, 748, 749, 750, 751, 752, 754, 755, 758, 759, 760, 761, 764, 765, 766, 767, 784, 785, 786, 787, 793, 794, 795, 800, 801, 802, 805, 806, 807, 808, 809, 811, 812, 823, 824, 827, 828, 829, 830, 831, 834, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 859, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 881, 883], "kei": [5, 28, 45, 48, 49, 51, 56, 67, 136, 137, 139, 147, 215, 219, 223, 247, 258, 266, 273, 317, 326, 333, 340, 345, 368, 377, 385, 392, 398, 422, 433, 441, 448, 457, 480, 486, 492, 511, 562, 587, 786, 806, 814, 883], "helper": [6, 20, 36, 154, 167, 197, 209, 231, 285, 302, 353, 406, 465, 500, 553, 577, 613, 624, 635, 646, 657, 668, 679, 690, 703, 741, 818, 819, 826, 845, 857, 868, 881], "pickl": [6, 20, 36, 154, 167, 197, 209, 231, 285, 302, 353, 406, 465, 500, 553, 577, 613, 624, 635, 646, 657, 668, 679, 690, 703, 741, 826, 845, 857, 868], "hash": [8, 22, 156, 169, 615, 626, 637, 648, 659, 670, 681, 692, 705, 743, 828, 847, 859, 870], "str": [13, 17, 27, 33, 38, 43, 55, 59, 67, 103, 107, 108, 109, 110, 111, 133, 139, 140, 147, 151, 160, 173, 176, 177, 178, 182, 183, 184, 187, 188, 189, 191, 202, 214, 220, 222, 223, 225, 233, 238, 239, 242, 246, 247, 248, 249, 250, 261, 262, 264, 266, 267, 268, 269, 270, 272, 273, 275, 276, 281, 282, 290, 296, 304, 309, 310, 312, 316, 317, 318, 319, 320, 329, 331, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 347, 355, 360, 361, 363, 367, 368, 369, 370, 371, 381, 383, 385, 386, 387, 388, 389, 391, 392, 394, 395, 397, 398, 400, 408, 413, 414, 417, 421, 422, 423, 424, 425, 436, 437, 439, 441, 442, 443, 444, 445, 447, 448, 451, 452, 456, 457, 459, 467, 472, 473, 475, 476, 477, 478, 482, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 499, 505, 506, 507, 509, 512, 514, 515, 516, 521, 522, 529, 534, 540, 545, 548, 549, 552, 558, 559, 561, 563, 564, 565, 569, 570, 573, 576, 582, 583, 586, 588, 590, 591, 596, 597, 600, 601, 603, 604, 605, 606, 619, 621, 630, 641, 643, 652, 654, 663, 665, 674, 685, 696, 700, 709, 710, 711, 712, 719, 726, 727, 735, 749, 753, 757, 768, 769, 781, 783, 792, 796, 798, 802, 804, 813, 814, 815, 820, 834, 839, 851, 863, 874], "inidic": [14, 16], "els": [14, 15, 142, 149, 162, 182, 187, 224, 277, 295, 343, 346, 396, 399, 453, 457, 458, 715, 757], "bool": [14, 16, 29, 30, 33, 42, 45, 48, 50, 51, 52, 53, 57, 60, 61, 62, 72, 73, 78, 94, 103, 105, 106, 107, 108, 111, 161, 162, 163, 182, 187, 194, 195, 201, 207, 213, 215, 217, 221, 223, 224, 225, 228, 230, 237, 240, 241, 243, 245, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 273, 275, 276, 277, 283, 289, 295, 296, 299, 301, 308, 311, 313, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 350, 352, 359, 362, 364, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 400, 403, 405, 412, 415, 416, 418, 420, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 442, 443, 444, 445, 446, 448, 451, 452, 453, 457, 458, 459, 462, 464, 471, 474, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 489, 490, 492, 493, 496, 497, 504, 506, 509, 525, 529, 535, 536, 540, 546, 548, 549, 550, 557, 559, 561, 573, 574, 581, 583, 586, 589, 602, 605, 608, 643, 654, 718, 719, 721, 722, 726, 727, 729, 753, 758, 759, 762, 776, 778, 779, 780, 782, 785, 788, 789, 790, 793, 805, 807, 808, 815, 819, 841], "whether": [14, 29, 30, 33, 42, 51, 52, 72, 73, 94, 140, 149, 161, 163, 191, 225, 228, 237, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 283, 289, 296, 299, 308, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 347, 350, 359, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 400, 403, 412, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 459, 462, 471, 479, 480, 481, 483, 484, 485, 495, 504, 525, 529, 540, 546, 557, 581, 600, 602, 603, 604, 709, 721, 722], "is_zero_bas": 15, "set": [15, 16, 46, 49, 53, 54, 78, 94, 105, 106, 111, 137, 139, 141, 144, 151, 191, 204, 217, 223, 241, 250, 263, 266, 276, 294, 311, 320, 330, 333, 342, 345, 362, 371, 382, 385, 395, 398, 416, 425, 438, 441, 452, 457, 474, 478, 483, 486, 493, 507, 515, 521, 526, 538, 564, 569, 590, 596, 608, 698, 719, 721, 724, 726, 727, 728, 736, 737, 752, 754, 757, 761, 764, 765, 767, 787, 801, 802, 814, 821, 832, 833, 838, 878, 883], "alig": 15, "stripe": [16, 66], "band": 16, "must": [16, 28, 45, 48, 54, 55, 59, 78, 80, 94, 105, 106, 107, 108, 111, 133, 135, 137, 138, 141, 142, 143, 144, 146, 147, 162, 219, 220, 222, 223, 241, 246, 266, 272, 279, 281, 311, 316, 333, 339, 344, 345, 362, 367, 385, 391, 397, 398, 416, 421, 441, 447, 454, 456, 457, 474, 476, 486, 491, 494, 509, 516, 522, 529, 534, 545, 548, 561, 565, 570, 586, 591, 597, 600, 601, 602, 603, 604, 606, 608, 631, 664, 675, 698, 710, 711, 712, 713, 718, 727, 728, 729, 757, 792, 799, 807, 813, 814, 815, 818, 820, 840, 841, 864, 883], "instanti": [16, 136, 149, 294, 883], "callabl": [16, 28, 45, 48, 56, 103, 107, 108, 111, 511, 529, 562, 587], "reus": [16, 723], "larg": [16, 79, 83, 105, 106, 131, 137, 144, 538, 539, 601, 721, 727, 753, 760], "collect": [16, 95, 99, 101, 191, 506, 544, 559, 583, 698], "upper": [16, 83, 84, 137, 144, 194, 204, 216, 218, 587, 594, 602], "lowercas": [16, 136, 137, 138, 139, 145, 223, 241, 294, 311, 345, 362, 398, 416, 457, 474], "q": [16, 83, 134, 345, 714, 715], "h": [16, 69, 70, 74, 82, 94, 95, 96, 97, 98, 99, 137, 144, 147, 192, 223, 345, 398, 756, 757, 762, 765, 796, 797, 798, 801, 802, 811, 812, 814, 881], "l": [16, 70, 71, 78, 83, 84, 94, 102, 136, 138, 148, 292, 345, 544, 602, 699, 713, 714, 721, 807], "k": [16, 69, 74, 94, 95, 97, 98, 99, 108, 223, 250, 264, 265, 320, 331, 332, 345, 371, 383, 384, 398, 425, 439, 440, 478, 484, 485, 495, 507, 525, 544, 601, 608, 765, 799, 806, 814], "m": [16, 63, 69, 78, 94, 105, 106, 133, 134, 136, 138, 144, 148, 223, 282, 283, 292, 345, 398, 507, 601, 604, 608, 710, 713, 714, 720, 721, 723, 726, 798, 815], "w": [16, 47, 69, 70, 77, 90, 94, 102, 133, 134, 135, 191, 223, 345, 398, 529, 544], "y": [16, 69, 80, 138, 145, 223, 345, 398, 537, 541, 542, 546, 602, 605, 608, 699, 710, 714, 715, 720, 721, 726, 760, 806], "v": [16, 105, 106, 223, 228, 237, 299, 308, 345, 350, 359, 398, 403, 412, 462, 471, 526, 540, 544, 546, 726, 727, 806], "z": [16, 54, 77, 146, 345, 605, 710, 760, 806], "x": [16, 80, 96, 132, 138, 145, 276, 294, 342, 345, 395, 452, 493, 526, 527, 528, 530, 531, 532, 533, 535, 536, 537, 538, 541, 542, 543, 544, 546, 602, 605, 608, 699, 700, 710, 713, 714, 715, 721, 724, 727, 728, 760, 770, 791, 794, 806, 810, 815, 840, 883], "gap_open_penalti": [16, 60, 61, 62, 63, 64, 65], "int": [16, 40, 50, 57, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 111, 133, 139, 140, 145, 162, 191, 194, 204, 215, 219, 230, 235, 242, 248, 249, 253, 261, 263, 264, 265, 267, 269, 273, 291, 301, 306, 312, 318, 319, 329, 330, 331, 332, 334, 336, 340, 352, 357, 363, 369, 370, 381, 382, 383, 384, 386, 388, 392, 405, 410, 417, 423, 424, 428, 436, 438, 439, 440, 442, 444, 448, 454, 455, 464, 469, 475, 477, 482, 483, 484, 485, 487, 489, 492, 513, 514, 525, 527, 528, 534, 540, 546, 563, 588, 600, 602, 603, 604, 605, 606, 608, 643, 687, 698, 710, 714, 718, 719, 721, 722, 725, 727, 728, 729, 735, 756, 760, 762, 771, 777, 786, 787, 799, 814, 819, 820, 840, 853], "option": [16, 28, 45, 47, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 69, 72, 73, 78, 83, 84, 85, 90, 94, 97, 103, 105, 106, 107, 108, 111, 135, 137, 138, 143, 144, 146, 147, 148, 151, 161, 162, 163, 182, 183, 184, 187, 188, 189, 191, 194, 204, 215, 219, 220, 221, 222, 223, 228, 240, 241, 242, 246, 248, 249, 250, 253, 261, 263, 264, 265, 267, 269, 272, 275, 276, 281, 282, 291, 292, 293, 299, 311, 312, 316, 318, 319, 320, 329, 330, 331, 332, 334, 336, 339, 341, 342, 344, 345, 350, 362, 363, 367, 369, 370, 371, 381, 382, 383, 384, 386, 388, 391, 394, 395, 397, 398, 403, 415, 416, 417, 421, 423, 424, 425, 428, 436, 438, 439, 440, 442, 444, 447, 451, 452, 454, 455, 456, 457, 462, 474, 475, 476, 477, 478, 482, 483, 484, 485, 487, 489, 491, 493, 494, 506, 509, 511, 515, 516, 522, 525, 529, 534, 535, 536, 538, 539, 548, 559, 561, 562, 564, 565, 570, 583, 586, 587, 589, 590, 591, 597, 600, 601, 602, 603, 604, 605, 606, 608, 643, 698, 710, 711, 712, 714, 715, 718, 719, 721, 722, 725, 726, 727, 728, 729, 735, 756, 773, 778, 792, 799, 806, 807, 813, 814, 815, 818, 819, 840, 841, 842, 864, 878, 883], "cannot": [16, 28, 45, 48, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 137, 138, 141, 142, 146, 182, 183, 187, 188, 191, 241, 294, 311, 362, 416, 474, 529, 600, 601, 602, 603, 604, 698, 710, 726, 728, 729, 768, 771, 799, 876], "gap_extend_penalti": [16, 60, 61, 62, 63, 64, 65], "score_s": 16, "your": [16, 54, 78, 103, 105, 106, 107, 138, 146, 149, 204, 604, 724, 727, 876, 881, 883], "estim": [16, 69, 72, 73, 77, 79, 81, 83, 84, 85, 90, 96, 534, 718, 726, 727, 728], "best": [16, 60, 61, 62, 63, 64, 65, 84, 85, 526, 601, 713, 817], "255": [16, 714], "mask_length": 16, "suggest": [16, 162, 182, 183, 187, 188, 727], "len": [16, 28, 40, 235, 306, 357, 410, 469, 507, 606, 728, 736, 737, 761, 764, 802, 814, 883], "special": [16, 141, 149], "concern": [16, 141], "detail": [16, 53, 54, 66, 67, 94, 108, 110, 111, 136, 137, 138, 139, 140, 144, 145, 147, 148, 149, 293, 457, 499, 552, 576, 601, 605, 710, 713, 714, 721, 815, 876], "descript": [16, 69, 78, 83, 88, 89, 99, 103, 105, 106, 107, 131, 133, 137, 138, 139, 140, 142, 144, 146, 148, 499, 552, 576, 758, 814, 878, 881], "after": [16, 45, 48, 60, 61, 62, 137, 138, 146, 147, 148, 149, 207, 218, 534, 540, 541, 601, 602, 605, 608, 713, 728, 789, 791, 808], "locat": [16, 55, 59, 136, 142, 147, 176, 177, 178, 194, 220, 222, 248, 249, 272, 281, 318, 319, 339, 344, 369, 370, 391, 397, 423, 424, 447, 456, 477, 491, 494, 516, 522, 565, 570, 591, 597, 711, 712, 792, 796, 813, 818, 882], "heurist": [16, 604, 719], "found": [16, 101, 132, 134, 136, 137, 138, 139, 142, 144, 147, 182, 184, 187, 189, 276, 342, 395, 452, 493, 509, 561, 586, 601, 602, 604, 728, 758, 768, 769, 770, 771, 781, 783, 799, 814], "check": [16, 138, 162, 182, 187, 195, 204, 207, 218, 496, 497, 535, 536, 547, 548, 549, 550, 572, 573, 574, 609, 713, 714, 727, 818, 819, 839, 883], "largest": [16, 102], "maxim": [16, 94, 601, 714], "sw": [16, 726], "avoid": [16, 146, 147, 149, 218, 699, 722, 811, 812], "pick": [16, 727], "belong": [16, 70, 74, 140, 529, 534, 600, 603, 604], "share": [16, 51, 52, 54, 69, 241, 258, 260, 311, 326, 328, 362, 377, 379, 416, 433, 435, 457, 474, 480, 481, 881], "partial": [16, 94, 218], "librari": [16, 66, 105, 106, 137, 875, 876], "mask": [16, 276, 342, 395, 452, 493, 540, 546], "loci": 16, "nearbi": 16, "unmask": 16, "element": [16, 141, 191, 495, 499, 511, 531, 535, 536, 548, 552, 562, 572, 576, 587, 687, 710, 713, 717, 718, 722, 725, 727, 728, 729, 838], "15": [16, 62, 65, 83, 134, 143, 146, 609, 724, 727, 728, 804], "mask_auto": 16, "automat": [16, 45, 48, 54, 55, 59, 141, 145, 146, 175, 186, 194, 220, 222, 266, 272, 281, 333, 339, 344, 385, 391, 397, 441, 447, 456, 486, 491, 494, 516, 522, 547, 565, 570, 591, 597, 700, 711, 712, 760, 792, 813, 876], "max": [16, 69, 70, 90, 727, 728, 775], "score_onli": 16, "prevent": 16, "babp": 16, "overrid": [16, 61, 64, 94, 151, 161, 162, 163, 182, 187, 791, 883], "score_filt": 16, "distance_filt": 16, "override_skip_babp": 16, "highest": [16, 142], "preced": [16, 135, 142, 144], "less": [16, 69, 78, 85, 105, 106, 108, 144, 146, 264, 265, 331, 332, 383, 384, 439, 440, 484, 485, 525, 602, 605, 698, 713, 729, 786, 820], "save": [16, 204, 548, 631, 664, 675, 788], "computation": 16, "filter": [16, 47, 66, 145, 244, 314, 365, 419, 605, 807, 883], "overridden": [16, 28, 139, 815], "regardless": [16, 46, 53, 54, 147, 292, 513, 606], "argument": [16, 28, 55, 56, 59, 66, 141, 161, 162, 163, 175, 182, 183, 184, 186, 187, 188, 189, 220, 222, 266, 272, 279, 280, 281, 333, 339, 344, 385, 391, 397, 441, 447, 454, 455, 456, 486, 491, 494, 495, 511, 516, 522, 527, 562, 565, 570, 587, 591, 597, 606, 711, 712, 792, 813, 841, 864], "caus": [16, 146, 191, 292], "calcul": [16, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 108, 111, 131, 252, 253, 427, 428, 529, 534, 537, 545, 546, 600, 601, 602, 603, 604, 608, 632, 643, 687, 718, 722, 725, 727, 728, 758, 765, 804, 875, 878], "none": [16, 28, 45, 47, 48, 55, 56, 57, 61, 62, 64, 65, 66, 78, 90, 94, 103, 105, 106, 107, 108, 133, 137, 141, 149, 151, 161, 163, 176, 177, 178, 182, 187, 191, 194, 204, 215, 217, 219, 220, 223, 242, 246, 248, 249, 250, 261, 272, 276, 277, 294, 312, 316, 318, 319, 320, 329, 339, 342, 343, 345, 363, 367, 369, 370, 371, 381, 391, 395, 396, 398, 417, 421, 423, 424, 425, 436, 447, 452, 453, 457, 475, 476, 477, 478, 482, 491, 493, 511, 515, 516, 529, 534, 535, 536, 538, 539, 540, 548, 562, 564, 565, 572, 587, 590, 591, 600, 601, 602, 603, 604, 605, 606, 610, 632, 643, 676, 698, 700, 710, 711, 715, 718, 719, 722, 723, 725, 726, 727, 728, 735, 755, 756, 760, 763, 765, 773, 782, 784, 787, 788, 789, 790, 792, 799, 803, 804, 806, 807, 808, 811, 812, 814, 815, 841, 842, 864, 878, 881, 883], "effect": [16, 66, 76, 105, 106, 146, 191, 276, 342, 395, 452, 493, 506, 559, 583, 724, 726, 727, 728], "unless": [16, 28, 53, 72, 145, 842], "substitution_matrix": [16, 60, 61, 62, 63, 64, 65], "suppli": [16, 133, 137, 145, 182, 187, 246, 316, 367, 421, 476, 523, 728, 765], "match_scor": [16, 61, 64, 67], "ad": [16, 60, 61, 62, 63, 64, 65, 137, 147, 215, 457, 529, 534, 714, 717, 841, 881], "occur": [16, 134, 137, 138, 141, 142, 183, 188, 191, 261, 329, 381, 436, 457, 482, 728, 759, 768], "ignor": [16, 47, 69, 78, 105, 106, 134, 135, 136, 137, 138, 141, 142, 146, 149, 248, 249, 292, 293, 318, 319, 369, 370, 423, 424, 477, 509, 561, 586, 600, 601, 602, 603, 604, 719, 726, 727, 765, 784, 819, 841, 842, 878, 881, 883], "mismatch_scor": [16, 61, 64, 67], "subtract": [16, 687], "2d": [16, 60, 61, 62, 63, 64, 65, 103, 107, 108, 111, 495, 510, 519, 537, 606, 715, 722], "dict": [16, 28, 49, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 136, 139, 162, 182, 183, 184, 187, 188, 189, 194, 215, 219, 220, 222, 223, 250, 265, 272, 279, 280, 281, 294, 320, 332, 339, 344, 345, 371, 384, 391, 397, 398, 425, 440, 447, 454, 455, 456, 457, 478, 485, 491, 494, 495, 510, 516, 519, 522, 565, 570, 591, 597, 602, 605, 665, 711, 712, 773, 777, 786, 792, 806, 813, 841, 878, 883], "substitut": [16, 60, 61, 62, 63, 64, 65, 67, 141, 276, 342, 345, 395, 452, 493, 495, 507, 510, 512, 513, 519, 526, 817], "entir": [16, 28, 74, 223, 294, 345, 398, 457], "combin": [16, 28, 45, 48, 139, 534, 601, 700, 714], "enumer": 16, "requir": [16, 78, 84, 85, 94, 105, 106, 131, 134, 135, 137, 140, 144, 147, 148, 219, 279, 292, 293, 454, 545, 547, 572, 602, 608, 698, 718, 726, 757, 763, 797, 817, 841, 876, 878, 883], "suppress_sequ": [16, 66], "zero_index": [16, 66], "wrapper": [16, 66, 84, 85, 818], "otherwis": [16, 29, 45, 48, 57, 72, 73, 137, 139, 142, 145, 146, 191, 276, 342, 395, 452, 493, 496, 497, 499, 504, 509, 549, 550, 552, 557, 561, 573, 574, 576, 581, 586, 589, 605, 793, 878], "inform": [16, 47, 55, 59, 71, 86, 94, 133, 134, 135, 136, 137, 138, 139, 145, 146, 148, 194, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 621, 665, 699, 711, 712, 721, 727, 728, 792, 813, 841, 878, 883], "NOT": [16, 88, 191], "meaning": [16, 45, 48, 54, 719, 878], "zhao": [16, 66], "mengyao": [16, 66], "wan": [16, 66], "ping": [16, 66], "lee": [16, 66, 69], "erik": [16, 66], "garrison": [16, 66], "gabor": [16, 66], "marth": [16, 66], "simd": [16, 66], "applic": [16, 47, 60, 66, 760, 883], "plo": [16, 66, 84, 85, 540, 546], "ONE": [16, 66], "2013": [16, 66, 76, 94, 544, 710], "web": [16, 60, 63, 66, 135, 148, 600, 601, 602, 603, 604], "juli": [16, 66], "2014": [16, 66, 133, 144, 534, 544], "http": [16, 47, 60, 61, 62, 63, 64, 65, 66, 69, 73, 83, 108, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 144, 145, 146, 147, 148, 282, 290, 291, 517, 540, 544, 546, 548, 566, 572, 584, 592, 600, 601, 602, 603, 604, 710, 814, 815, 840], "www": [16, 60, 63, 66, 83, 108, 131, 133, 134, 135, 136, 137, 138, 139, 144, 148, 282, 290, 291, 601], "ploson": [16, 66], "org": [16, 66, 108, 131, 132, 137, 138, 139, 144, 146, 147, 517, 540, 544, 546, 548, 566, 572, 584, 592, 600, 601, 602, 603, 604, 710, 815], "articl": [16, 66, 135], "info": [16, 66, 204, 223, 294, 345, 398, 457, 609, 665], "doi": [16, 66, 136, 138, 540, 546, 815], "10": [16, 47, 66, 69, 84, 85, 134, 136, 137, 138, 139, 140, 142, 143, 144, 194, 204, 219, 223, 248, 294, 318, 345, 369, 398, 423, 457, 529, 534, 540, 546, 604, 699, 724, 727, 728, 815, 883], "1371": [16, 66, 540, 546], "journal": [16, 66, 69, 72, 79, 94, 95, 97, 99, 139, 540, 546, 600], "pone": [16, 66], "0082138": [16, 66], "alignmentstructur": 17, "positional_metadata": [28, 33, 46, 52, 53, 54, 137, 147, 223, 228, 240, 241, 244, 260, 266, 273, 274, 294, 299, 311, 314, 328, 333, 340, 345, 350, 362, 365, 379, 385, 392, 398, 403, 415, 416, 419, 435, 441, 448, 449, 457, 462, 474, 481, 486, 492, 878], "sourc": [28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 139, 140, 150, 151, 161, 162, 163, 164, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 201, 203, 204, 205, 206, 207, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 304, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 610, 620, 621, 631, 632, 642, 643, 653, 654, 664, 665, 675, 676, 686, 687, 697, 698, 700, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 744, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 825, 832, 838, 839, 840, 841, 842, 852, 853, 854, 864, 865, 875], "store": [28, 38, 43, 51, 52, 53, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 194, 204, 223, 258, 260, 294, 326, 328, 345, 377, 379, 398, 433, 435, 457, 480, 481, 517, 547, 548, 566, 572, 592, 605, 621, 654, 665, 700, 713, 714, 719, 721, 735, 877, 878], "tabular": [28, 133, 134, 146, 148], "iter": [28, 38, 43, 48, 53, 60, 61, 62, 63, 64, 65, 66, 67, 103, 107, 108, 111, 145, 194, 215, 216, 217, 219, 230, 233, 238, 241, 249, 263, 273, 276, 301, 304, 309, 311, 319, 330, 340, 342, 352, 355, 360, 362, 370, 382, 392, 395, 405, 408, 413, 416, 424, 438, 448, 452, 464, 467, 472, 474, 477, 483, 492, 493, 495, 506, 509, 511, 513, 521, 529, 559, 561, 562, 569, 583, 586, 587, 596, 601, 604, 605, 698, 710, 727, 728, 736, 737, 744, 761, 764, 765, 774, 782, 785, 788, 789, 790, 798, 799, 805, 808, 838, 840, 842, 864, 881, 883], "grammaredsequ": [28, 38, 43, 45, 48, 49, 60, 63, 135, 137, 144, 147, 223, 244, 247, 275, 345, 365, 368, 394, 398, 419, 422, 451], "exampl": [28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 78, 105, 106, 107, 141, 146, 149, 161, 162, 163, 192, 194, 204, 216, 221, 223, 224, 225, 228, 230, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 282, 283, 291, 292, 293, 294, 295, 296, 299, 301, 304, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 345, 346, 347, 350, 352, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 395, 396, 398, 399, 400, 403, 405, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 457, 458, 459, 462, 464, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 495, 506, 507, 510, 513, 515, 518, 521, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 548, 559, 564, 567, 569, 583, 590, 593, 594, 596, 600, 601, 602, 603, 604, 605, 606, 607, 608, 698, 710, 719, 726, 727, 728, 729, 736, 737, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 820, 840, 875, 876], "arbitrari": [28, 46, 49, 141, 146, 147, 223, 345, 398, 457, 698, 841, 878], "shallow": [28, 31, 204, 205, 226, 297, 348, 401, 457, 460], "copi": [28, 31, 32, 137, 144, 147, 204, 205, 206, 226, 227, 273, 297, 298, 340, 348, 349, 392, 401, 402, 448, 457, 460, 461, 492, 517, 520, 548, 566, 568, 592, 595, 722, 729, 736, 737, 764, 796, 797, 803, 811, 812, 835, 836, 837], "made": [28, 90, 457, 529, 548, 572, 698, 751, 768, 769, 791, 817], "consum": [28, 48, 163, 223, 282, 345, 398, 457], "abl": [28, 48, 108, 223, 345, 398, 457, 529, 727, 765], "directli": [28, 45, 48, 146, 223, 282, 345, 398, 457, 523, 529, 608, 841, 883], "constructor": [28, 45, 48, 56, 135, 137, 138, 139, 144, 145, 147, 162, 175, 186, 223, 266, 282, 333, 345, 385, 398, 441, 457, 486, 495, 606], "label": [28, 30, 33, 35, 45, 48, 49, 54, 56, 57, 58, 135, 137, 139, 144, 146, 147, 515, 544, 547, 564, 590, 600, 601, 603, 604, 605, 700, 710, 755, 819], "content": [28, 46, 136, 137, 138, 139, 140, 142, 146, 149, 161, 162, 163, 223, 240, 241, 244, 247, 274, 278, 311, 314, 317, 362, 365, 368, 398, 415, 416, 419, 422, 449, 450, 474, 878], "hashabl": [28, 30, 698, 864], "rais": [28, 45, 47, 48, 50, 54, 56, 58, 69, 78, 79, 80, 94, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 138, 144, 149, 150, 161, 162, 163, 182, 183, 184, 185, 187, 188, 189, 218, 225, 241, 242, 246, 248, 250, 261, 262, 264, 265, 267, 268, 269, 270, 276, 292, 294, 296, 311, 312, 316, 318, 320, 329, 331, 332, 334, 335, 336, 337, 342, 347, 362, 363, 367, 369, 371, 381, 383, 384, 386, 387, 388, 389, 395, 400, 416, 417, 421, 423, 425, 436, 437, 439, 440, 442, 443, 444, 445, 452, 459, 474, 475, 476, 478, 482, 484, 485, 487, 488, 489, 490, 493, 499, 506, 507, 509, 510, 511, 514, 521, 524, 525, 531, 538, 539, 545, 552, 559, 561, 562, 563, 569, 576, 583, 586, 587, 588, 596, 600, 601, 602, 604, 605, 643, 687, 698, 710, 713, 714, 719, 727, 728, 729, 750, 757, 758, 760, 763, 765, 766, 768, 769, 771, 773, 775, 781, 783, 786, 796, 797, 798, 799, 804, 809, 818, 819, 820, 821], "valueerror": [28, 45, 47, 48, 50, 54, 56, 58, 69, 78, 80, 94, 103, 105, 106, 107, 111, 182, 187, 241, 242, 248, 250, 261, 264, 265, 267, 268, 269, 270, 276, 292, 294, 311, 312, 318, 320, 329, 331, 332, 334, 335, 336, 337, 342, 362, 363, 369, 371, 381, 383, 384, 386, 387, 388, 389, 395, 416, 417, 423, 425, 436, 439, 440, 442, 443, 444, 445, 452, 457, 474, 475, 478, 482, 484, 485, 487, 488, 489, 490, 493, 507, 510, 511, 524, 525, 531, 538, 539, 545, 562, 587, 601, 602, 604, 605, 643, 687, 698, 710, 713, 714, 727, 728, 729, 758, 760, 765, 773, 781, 783, 786, 798, 799, 804, 809, 820], "both": [28, 46, 54, 56, 67, 72, 73, 74, 78, 94, 131, 132, 133, 134, 137, 138, 144, 146, 148, 182, 187, 219, 292, 511, 532, 533, 535, 536, 547, 562, 587, 589, 594, 601, 602, 603, 604, 719, 759, 760, 799, 808, 876, 878], "typeerror": [28, 45, 48, 54, 103, 182, 183, 187, 188, 225, 241, 242, 246, 250, 261, 262, 267, 268, 269, 270, 296, 311, 312, 316, 320, 329, 334, 335, 336, 337, 347, 362, 363, 367, 371, 381, 386, 387, 388, 389, 400, 416, 417, 421, 425, 436, 437, 442, 443, 444, 445, 459, 474, 475, 476, 478, 482, 487, 488, 489, 490, 524, 525, 601, 602, 604, 727, 728, 729, 757], "isn": [28, 45, 48, 54, 80, 146, 147, 161, 163, 192, 194, 535, 536, 729], "doe": [28, 45, 46, 48, 54, 57, 66, 78, 94, 133, 135, 137, 138, 140, 142, 144, 147, 191, 241, 282, 283, 289, 292, 311, 362, 416, 474, 507, 517, 524, 547, 566, 589, 592, 600, 602, 604, 643, 719, 727, 728, 751, 760, 771, 784, 797, 804, 807, 814, 818, 876], "exactli": [28, 45, 48, 53, 63, 64, 65, 137, 138, 144, 149, 228, 237, 283, 299, 308, 350, 359, 403, 412, 462, 471, 545, 710, 753], "reassign_index": [28, 45, 48, 57, 58, 144], "neither": [28, 56, 192, 799, 808], "nor": [28, 45, 48, 56, 141, 144, 548, 799], "rangeindex": [28, 45, 48, 56, 144], "stop": [28, 45, 48, 56, 69, 144, 242, 261, 279, 280, 282, 292, 293, 312, 329, 345, 363, 380, 381, 417, 436, 454, 455, 475, 482, 755, 842, 878], "four": [28, 138, 147, 223, 345, 398, 529, 710], "acgt": [28, 45, 48, 49, 51, 52, 58, 224, 228, 237, 241, 252, 253, 258, 260, 262, 266, 295, 299, 308, 311, 326, 328, 333, 346, 350, 359, 362, 377, 379, 385, 399, 403, 412, 416, 427, 428, 433, 435, 437, 441, 457, 458, 462, 471, 474, 480, 481, 486, 495, 513], "ag": [28, 45, 48, 50, 547, 726, 727], "wasn": [28, 138], "non": [28, 72, 80, 133, 135, 136, 140, 146, 194, 223, 259, 271, 275, 294, 327, 338, 341, 345, 378, 390, 394, 398, 434, 446, 451, 495, 526, 527, 528, 529, 531, 534, 538, 539, 541, 542, 543, 572, 600, 603, 604, 608, 713, 719, 724, 759, 760, 765], "seq3": [28, 48, 137, 144], "prob": [28, 33, 46, 53], "iloc": [28, 35], "slice": [28, 35, 230, 248, 249, 263, 273, 301, 318, 319, 330, 340, 352, 369, 370, 382, 392, 405, 423, 424, 438, 448, 464, 477, 483, 492, 499, 547, 552, 576, 740, 878], "axi": [28, 35, 50, 80, 96, 141, 223, 294, 345, 398, 457, 495, 643, 687, 700, 710, 718, 725, 728, 819], "along": [28, 141, 223, 294, 345, 398, 457, 710, 718, 719], "loc": [28, 35, 457, 529, 727], "shape": [28, 40, 49, 131, 143, 495, 497, 527, 528, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 548, 550, 572, 574, 602, 715, 718, 729], "boolean": [29, 106, 137, 140, 145, 194, 223, 230, 243, 245, 248, 251, 263, 266, 268, 270, 271, 273, 301, 313, 315, 318, 321, 330, 333, 335, 337, 338, 340, 345, 352, 364, 366, 369, 372, 382, 385, 387, 389, 390, 392, 393, 398, 405, 418, 420, 423, 426, 438, 441, 443, 445, 446, 448, 457, 464, 483, 486, 488, 490, 492, 587], "OR": 29, "acg": [29, 30, 31, 32, 33, 38, 40, 43, 50, 53, 54, 56, 57, 145, 147, 261, 264, 329, 331, 381, 383, 436, 439, 482, 484], "ac": [29, 30, 31, 32, 33, 38, 40, 43, 46, 48, 50, 54, 56, 57, 60, 63, 136, 138, 139, 147, 194, 251, 321, 372, 426, 878], "No": [29, 73, 133, 134, 136, 145, 148, 204, 239, 310, 361, 414, 473, 602], "search": [30, 60, 133, 134, 137, 219, 248, 261, 318, 329, 369, 381, 423, 436, 482, 496, 549, 573, 714, 763, 768, 769, 770, 771, 838, 878], "l1": 30, "l2": 30, "l3": 30, "__deepcopy__": [31, 205], "msa_copi": [31, 32], "memo": [32, 206, 227, 298, 349, 402, 461], "deep": [32, 70, 206, 226, 227, 297, 298, 348, 349, 401, 402, 457, 460, 461, 508, 520, 560, 568, 585, 595], "__copy__": [32, 206], "deepcopi": [32, 736, 737, 761, 811, 812], "against": [33, 42, 60, 63, 138, 195, 201, 207, 213, 228, 237, 283, 289, 299, 308, 350, 359, 403, 412, 462, 471, 529, 608, 758], "pleas": [35, 55, 59, 137, 145, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 711, 712, 792, 813], "restrict": [35, 78, 105, 106, 144, 878], "over": [38, 43, 53, 108, 137, 138, 145, 146, 147, 233, 238, 304, 309, 355, 360, 408, 413, 467, 472, 495, 534, 606, 620, 642, 653, 686, 697, 724, 725, 744, 782, 785, 788, 789, 790, 802, 805, 808, 881], "yield": [38, 43, 53, 137, 219, 233, 238, 247, 248, 249, 263, 264, 280, 293, 304, 309, 317, 318, 319, 330, 331, 355, 360, 368, 369, 370, 382, 383, 408, 413, 422, 423, 424, 438, 439, 455, 467, 472, 477, 483, 484, 604, 770, 782, 785, 788, 789, 790, 799, 805, 807, 808, 842, 876, 883], "size": [40, 76, 495, 534, 548, 572, 600, 601, 602, 604, 687, 698, 710, 718, 724, 726, 727, 728, 840], "1st": [40, 676, 820], "dimens": [40, 143, 144, 495, 505, 527, 531, 535, 536, 548, 558, 572, 582, 604, 700, 709, 710, 719, 720], "equival": [40, 76, 78, 94, 138, 146, 226, 227, 250, 252, 273, 274, 280, 293, 297, 298, 320, 340, 348, 349, 371, 392, 401, 402, 425, 427, 448, 449, 455, 460, 461, 478, 492, 506, 521, 524, 529, 559, 569, 583, 596, 602, 878], "inequ": [42, 201, 213, 237, 289, 308, 359, 412, 471, 572, 719], "__eq__": [42, 213, 504, 557, 581], "revers": [43, 53, 57, 149, 238, 240, 262, 274, 280, 292, 293, 309, 360, 413, 415, 437, 449, 450, 455, 472, 600, 604, 799, 878, 883], "summari": [44, 505, 529, 558, 582], "reset_index": [45, 48], "without": [45, 48, 54, 56, 90, 106, 134, 142, 144, 146, 147, 457, 526, 698, 710, 728, 729, 766, 775, 807, 840, 841, 876], "recomput": [45, 48, 54], "treat": [45, 46, 47, 48, 137, 141, 146, 223, 266, 275, 333, 341, 345, 385, 394, 398, 441, 451, 457, 486, 524, 727], "reset": [45, 48, 56], "choic": [45, 48, 141, 719], "necessarili": [45, 48, 54, 143, 250, 320, 371, 425, 457, 478, 729], "own": [45, 48, 54, 131, 137, 143, 147, 149, 724], "via": [45, 48, 56, 69, 84, 85, 137, 144, 246, 282, 283, 289, 316, 367, 421, 476, 600, 602, 603], "acga": [45, 48, 228, 237, 299, 308, 350, 359, 403, 412, 462, 471], "major": [46, 526, 594, 814], "most": [46, 70, 79, 94, 131, 135, 137, 138, 141, 142, 144, 146, 148, 292, 457, 602, 698, 721, 724, 775, 777, 814, 881], "common": [46, 51, 52, 63, 78, 94, 133, 137, 138, 139, 146, 147, 148, 258, 260, 326, 328, 377, 379, 433, 435, 480, 481, 527, 548, 643, 735, 760, 768, 781, 783, 806, 807, 815, 878, 881, 882], "ti": [46, 70, 814], "broken": [46, 814], "manner": [46, 137, 144, 230, 244, 301, 314, 352, 365, 405, 419, 464, 602, 719], "present": [46, 47, 78, 105, 106, 133, 137, 143, 146, 147, 205, 206, 223, 240, 243, 244, 245, 250, 251, 261, 271, 274, 292, 313, 314, 315, 320, 321, 329, 338, 345, 364, 365, 366, 371, 372, 381, 390, 393, 398, 415, 418, 419, 420, 425, 426, 436, 446, 449, 478, 482, 509, 529, 561, 586, 600, 601, 603, 604, 643, 709, 719, 728, 729, 759, 814, 815, 817, 881], "default_gap_char": [46, 47, 54, 223, 294, 345, 398], "distinct": [46, 91, 92, 101, 524, 547], "contribut": [46, 94, 608, 713, 718], "AT": [46, 137, 138, 144], "tt": [46, 263, 330, 382, 438, 483], "cg": [46, 273, 340, 392, 448, 457, 492], "degener": [46, 47, 136, 137, 138, 139, 140, 223, 240, 241, 243, 244, 247, 252, 253, 254, 255, 259, 271, 274, 275, 277, 278, 279, 280, 282, 292, 293, 294, 311, 313, 314, 317, 322, 323, 327, 338, 341, 343, 345, 362, 364, 365, 368, 373, 374, 378, 390, 394, 396, 398, 415, 416, 418, 419, 422, 427, 428, 429, 430, 434, 446, 449, 450, 451, 453, 454, 455, 474, 507, 878], "gc": [46, 136, 137, 138, 139, 140, 148, 223, 240, 241, 244, 247, 253, 274, 278, 283, 293, 311, 314, 317, 362, 365, 368, 398, 415, 416, 419, 422, 428, 449, 450, 474, 878], "33": [46, 78, 105, 106, 138, 247, 317, 368, 422, 534, 601, 604, 724, 727, 878], "last": [46, 136, 144, 263, 292, 330, 382, 438, 457, 483, 602, 699, 883], "metric": [47, 69, 74, 78, 79, 94, 103, 104, 105, 106, 107, 108, 109, 110, 111, 138, 246, 316, 367, 421, 476, 511, 525, 562, 572, 587, 735, 875, 878], "inverse_shannon_uncertainti": 47, "degenerate_mod": 47, "gap_mod": 47, "nan": [47, 50, 54, 85, 133, 146, 241, 250, 311, 320, 362, 371, 416, 425, 474, 478, 524, 525, 600, 601, 602, 603, 604, 605, 608, 710, 726, 727, 806, 818], "larger": [47, 727], "mode": [47, 149, 191, 292, 728, 841], "handl": [47, 54, 137, 138, 145, 147, 148, 149, 151, 161, 163, 191, 292, 293, 529, 602, 604, 605, 724, 808, 815, 840, 883], "assign": [47, 56, 67, 103, 107, 144, 146, 195, 273, 340, 392, 448, 457, 492, 513, 529, 534, 600, 603, 604, 698, 728, 754, 755, 756], "np": [47, 50, 78, 85, 94, 105, 106, 133, 223, 225, 242, 243, 245, 246, 250, 251, 261, 262, 267, 268, 269, 270, 271, 276, 296, 312, 313, 315, 316, 320, 321, 329, 334, 335, 336, 337, 338, 342, 345, 347, 363, 364, 366, 367, 371, 372, 381, 386, 387, 388, 389, 390, 393, 395, 398, 400, 417, 418, 420, 421, 425, 426, 436, 437, 442, 443, 444, 445, 446, 452, 457, 459, 475, 476, 478, 482, 487, 488, 489, 490, 493, 495, 524, 525, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 546, 547, 600, 602, 603, 604, 605, 608, 609, 698, 699, 710, 723, 724, 726, 727, 728, 729, 777, 799, 814, 818], "remov": [47, 66, 78, 94, 105, 106, 137, 141, 144, 217, 244, 275, 314, 341, 365, 394, 419, 451, 752, 767, 787, 791, 794, 798, 809, 878], "up": [47, 67, 135, 144, 146, 147, 191, 204, 216, 454, 455, 499, 531, 538, 539, 541, 542, 543, 552, 576, 602, 698, 728, 752, 757, 760, 791, 797, 864, 881], "float": [47, 50, 60, 61, 62, 63, 64, 65, 66, 67, 78, 83, 84, 94, 103, 105, 106, 107, 108, 111, 131, 133, 139, 141, 142, 146, 246, 252, 253, 267, 269, 316, 334, 336, 367, 386, 388, 421, 427, 428, 442, 444, 476, 487, 489, 511, 513, 524, 525, 529, 534, 538, 539, 543, 546, 547, 548, 562, 587, 602, 604, 606, 608, 621, 665, 710, 725, 727, 728, 735, 750, 758, 759, 760, 765, 766, 775, 806, 814, 818], "unknown": [47, 84, 85, 130, 139, 194, 248, 318, 369, 423, 698], "mislead": [47, 111], "point": [47, 80, 83, 85, 131, 135, 146, 149, 162, 194, 266, 273, 276, 333, 340, 342, 385, 392, 395, 441, 448, 452, 486, 492, 493, 507, 604, 610, 632, 687, 710, 727, 728, 797, 818, 839], "out": [47, 145, 146, 149, 710, 759, 760, 883], "compos": [47, 138, 145], "90": [47, 140, 534, 883], "tryptophan": [47, 345], "would": [47, 78, 80, 83, 105, 106, 135, 137, 140, 142, 144, 146, 147, 149, 241, 263, 311, 330, 362, 382, 416, 438, 474, 483, 506, 541, 544, 559, 583, 608, 726, 727, 757, 807, 808, 814, 876], "highli": 47, "alanin": [47, 345], "glycin": [47, 345], "recod": 47, "awar": [47, 94, 146, 457], "consid": [47, 69, 78, 83, 94, 105, 106, 137, 142, 228, 263, 299, 330, 350, 382, 403, 438, 462, 483, 524, 526, 541, 604, 605, 698, 726, 727, 728, 818, 841], "simpli": [47, 54, 101, 149, 282, 517, 566, 592, 719, 724, 768, 883], "minu": [47, 139, 147, 676], "shannon": [47, 82, 95], "uncertainti": [47, 534, 608], "invers": [47, 528, 533, 536, 542], "impli": [47, 191, 608], "higher": [47, 495, 529, 534, 853], "entropi": [47, 82, 97], "make": [47, 54, 137, 142, 146, 149, 283, 499, 524, 552, 576, 600, 604, 728, 803, 806, 807, 815, 821, 841, 883], "symbol": [47, 137], "done": [47, 529, 604, 631, 664, 675], "prefer": [47, 103, 107, 138, 713, 714], "valdar": 47, "residu": [47, 721], "2002": [47, 78, 94, 102, 134, 137], "schneider": 47, "pitfal": 47, "theori": [47, 71, 86, 97, 540, 546], "websit": 47, "ca": [47, 143, 700, 714, 721], "2015": [47, 526, 529, 540, 546], "ncifcrf": 47, "gov": [47, 61, 62, 64, 65, 133, 134, 137, 139, 145, 148, 282, 290, 291], "glossari": 47, "html": [47, 83, 132, 133, 135, 137, 139, 142, 144, 147, 194, 517, 548, 566, 572, 584, 592, 600, 601, 602, 603, 604, 710, 814], "shannon_entropi": 47, "classmethod": [49, 55, 216, 220, 241, 272, 291, 311, 339, 362, 391, 416, 447, 474, 491, 507, 510, 511, 512, 513, 516, 562, 565, 587, 591, 711, 772, 773, 774, 792], "dictionari": [49, 51, 56, 58, 67, 147, 148, 151, 194, 205, 206, 215, 219, 258, 326, 377, 433, 457, 480, 510, 519, 602, 773], "construct": [49, 58, 139, 148, 194, 195, 223, 294, 345, 398, 495, 510, 513, 519, 540, 547, 699, 763, 773, 774, 815, 875, 876, 881], "to_dict": 49, "sort": [49, 54, 109, 110, 195, 204, 207, 247, 250, 276, 317, 320, 342, 368, 371, 395, 422, 425, 452, 478, 493, 643, 676, 698, 801, 806, 807, 814, 878, 883], "rel": [50, 94, 132, 136, 139, 250, 252, 253, 265, 267, 269, 320, 332, 334, 336, 371, 384, 386, 388, 425, 427, 428, 440, 442, 444, 478, 485, 487, 489, 540, 546, 584, 800, 818, 853, 878], "across": [50, 94, 137, 138, 144, 204, 529, 534, 602, 727, 814], "1d": [50, 103, 223, 225, 230, 242, 243, 245, 246, 248, 249, 251, 261, 262, 263, 267, 268, 269, 270, 271, 273, 276, 296, 301, 312, 313, 315, 316, 318, 319, 321, 329, 330, 334, 335, 336, 337, 338, 340, 342, 345, 347, 352, 363, 364, 366, 367, 369, 370, 372, 381, 382, 386, 387, 388, 389, 390, 392, 393, 395, 398, 400, 405, 417, 418, 420, 421, 423, 424, 426, 436, 437, 438, 442, 443, 444, 445, 446, 448, 452, 457, 459, 464, 475, 476, 477, 482, 483, 487, 488, 489, 490, 492, 493], "ndarrai": [50, 107, 223, 225, 242, 243, 245, 246, 251, 261, 262, 267, 268, 269, 270, 271, 276, 296, 312, 313, 315, 316, 321, 329, 334, 335, 336, 337, 338, 342, 345, 347, 363, 364, 366, 367, 372, 381, 386, 387, 388, 389, 390, 393, 395, 398, 400, 417, 418, 420, 421, 426, 436, 437, 442, 443, 444, 445, 446, 452, 457, 459, 475, 476, 482, 487, 488, 489, 490, 493, 499, 517, 527, 528, 530, 531, 532, 533, 535, 536, 537, 538, 539, 541, 542, 543, 544, 548, 552, 566, 576, 584, 589, 592, 606, 608, 722, 729, 772], "vector": [50, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 141, 243, 245, 248, 251, 263, 266, 268, 270, 271, 273, 276, 282, 313, 315, 318, 321, 330, 333, 335, 337, 338, 340, 342, 364, 366, 369, 372, 382, 385, 387, 389, 390, 392, 393, 395, 418, 420, 423, 426, 438, 441, 443, 445, 446, 448, 452, 483, 486, 488, 490, 492, 493, 499, 527, 528, 529, 534, 535, 536, 541, 542, 543, 546, 547, 548, 552, 572, 576, 600, 603, 604, 654, 714, 728, 729, 806, 875], "specifi": [50, 54, 94, 111, 133, 135, 137, 138, 139, 140, 141, 144, 147, 148, 149, 181, 191, 194, 204, 217, 219, 223, 230, 248, 250, 266, 279, 291, 292, 294, 301, 318, 320, 333, 345, 352, 369, 371, 385, 398, 405, 423, 425, 441, 454, 457, 464, 478, 486, 496, 499, 506, 509, 514, 515, 521, 527, 528, 529, 534, 535, 536, 538, 539, 545, 549, 552, 559, 561, 563, 564, 569, 573, 576, 583, 586, 588, 590, 596, 600, 601, 602, 603, 604, 608, 687, 710, 718, 719, 725, 757, 765, 796, 799, 801, 804, 807, 814, 841, 853, 854, 864, 875, 883], "Will": [50, 181, 184, 189, 191, 508, 520, 560, 568, 585, 595, 700, 729], "least": [51, 52, 90, 142, 146, 248, 257, 258, 260, 318, 325, 326, 328, 369, 376, 377, 379, 423, 432, 433, 435, 479, 480, 481, 529, 602, 710, 727, 728, 817, 883], "demonstr": [51, 52, 149, 258, 260, 326, 328, 377, 379, 433, 435, 480, 481], "behavior": [51, 52, 54, 60, 61, 62, 137, 138, 139, 146, 191, 258, 260, 276, 292, 326, 328, 342, 377, 379, 395, 433, 435, 452, 457, 480, 481, 493, 600, 602, 604, 759, 883], "rang": [52, 74, 83, 95, 106, 138, 139, 146, 240, 244, 250, 260, 263, 274, 314, 320, 328, 330, 365, 371, 379, 382, 415, 419, 425, 435, 438, 449, 478, 481, 483, 600, 601, 710, 728, 777, 883], "qualiti": [52, 137, 145, 223, 228, 240, 244, 260, 274, 299, 314, 328, 345, 350, 365, 379, 398, 403, 415, 419, 435, 449, 457, 462, 481, 710, 878], "ignore_metadata": 53, "improv": [53, 142, 144, 223, 345, 398, 587], "__iter__": 53, "__reversed__": 53, "concat": [53, 54], "artifact": [53, 60, 61, 62], "real": [53, 137, 138, 145, 526, 527, 528, 532, 533, 535, 536, 541, 542, 543], "concaten": [53, 147, 216, 241, 311, 362, 416, 474], "outer": [53, 54, 241, 311, 362, 416, 474, 510], "join": [53, 133, 134, 138, 145, 147, 148, 241, 311, 362, 416, 474, 807, 814, 815], "aa": [53, 137, 139, 144, 282], "gt": 53, "strict": [54, 144, 241, 311, 362, 416, 474, 509, 561, 586, 602, 605, 608], "horizont": 54, "control": [54, 137, 600, 602, 603, 609, 721, 724, 726, 727, 728], "dure": [54, 137, 195, 241, 311, 362, 416, 474, 604, 839], "section": [54, 137, 138, 143, 146, 147, 282, 457, 601, 602, 713, 714], "inner": [54, 142, 241, 311, 362, 416, 474, 510], "left": [54, 69, 97, 142, 527, 528, 532, 537, 541, 542, 543, 544, 755, 777, 818, 819, 881], "right": [54, 69, 97, 142, 526, 527, 528, 532, 537, 541, 542, 543, 544, 777, 818, 819, 883], "unshar": 54, "pad": [54, 144, 241, 311, 362, 416, 474], "guarante": [54, 85, 146, 223, 247, 317, 345, 368, 398, 422, 548, 606, 765], "duplic": [54, 111, 138, 146, 147, 218, 276, 342, 395, 452, 493, 509, 561, 586, 730, 838], "doesn": [54, 137, 146, 185, 292, 541, 545, 599, 713, 719, 723, 797, 816, 882], "subclass": [54, 135, 137, 144, 147, 149, 241, 311, 362, 416, 457, 474, 495, 547, 548, 606, 814, 841], "togeth": [54, 136, 137, 139, 147, 529, 841], "likewis": [54, 94, 147], "per": [54, 133, 134, 145, 147, 223, 345, 398, 457, 534, 605, 608, 698, 721, 727, 728, 753, 840], "retain": [54, 241, 273, 311, 340, 362, 392, 416, 448, 474, 492, 509, 561, 586, 698], "output": [54, 133, 134, 142, 144, 145, 147, 266, 333, 385, 441, 486, 534, 600, 604, 605, 643, 714, 807, 815, 883], "reproduc": [54, 78, 105, 106], "necessari": [54, 133, 144, 204, 457, 548, 600, 601, 602, 631, 664, 675, 760, 839, 876], "msa1": 54, "msa2": 54, "unnecessari": 54, "By": [54, 83, 94, 103, 107, 137, 139, 146, 529, 604, 718, 719, 722, 804, 815, 842], "col1": [54, 146], "43": [54, 90, 143, 814], "col2": [54, 146], "col3": [54, 146], "o": [54, 55, 59, 94, 136, 137, 138, 145, 147, 220, 222, 272, 281, 339, 344, 345, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 711, 712, 792, 813, 815, 875, 882], "file": [55, 59, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 162, 175, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 515, 516, 522, 529, 547, 564, 565, 570, 590, 591, 597, 631, 664, 675, 710, 711, 712, 726, 755, 792, 813, 839, 840, 875, 881], "kwarg": [55, 59, 66, 103, 107, 108, 111, 112, 161, 163, 175, 182, 183, 184, 186, 187, 188, 189, 192, 193, 220, 222, 272, 279, 280, 281, 339, 344, 391, 397, 447, 454, 455, 456, 491, 494, 495, 516, 522, 565, 570, 591, 597, 687, 711, 712, 792, 813, 841, 876], "instanc": [55, 59, 149, 163, 176, 178, 179, 180, 182, 187, 204, 219, 220, 222, 241, 272, 281, 311, 339, 344, 362, 391, 397, 416, 447, 456, 474, 491, 494, 497, 507, 516, 522, 524, 525, 534, 548, 550, 565, 570, 572, 574, 589, 591, 597, 602, 604, 605, 606, 620, 642, 653, 686, 697, 710, 711, 712, 728, 735, 751, 792, 813, 814, 821, 822, 825, 832, 881, 883], "registri": [55, 59, 132, 137, 138, 145, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 711, 712, 792, 813, 876], "system": [55, 59, 86, 97, 146, 148, 149, 204, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 711, 712, 727, 792, 813], "clustal": [55, 59, 114, 876], "fasta": [55, 59, 116, 138, 140, 145, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 876], "fastq": [55, 59, 117, 145, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 876], "phylip": [55, 59, 126, 137, 142, 814, 876, 881], "stockholm": [55, 59, 129], "filepath": [55, 59, 182, 183, 184, 187, 188, 189, 191, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 605, 711, 712, 792, 813], "url": [55, 59, 182, 183, 184, 187, 188, 189, 191, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 711, 712, 792, 813], "filehandl": [55, 59, 149, 161, 162, 163, 182, 183, 184, 187, 188, 189, 191, 192, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 711, 712, 792, 813], "etc": [55, 59, 80, 137, 138, 146, 182, 183, 184, 187, 188, 189, 194, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 495, 516, 522, 565, 570, 591, 597, 711, 712, 719, 721, 735, 792, 813, 878], "someth": [55, 59, 149, 162, 182, 183, 184, 187, 188, 189, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 606, 711, 712, 792, 813, 883], "understood": [55, 59, 142, 182, 183, 184, 187, 188, 189, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 711, 712, 792, 813], "util": [55, 59, 148, 161, 163, 220, 222, 272, 281, 282, 290, 291, 294, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 711, 712, 792, 813, 875, 876], "close": [55, 59, 79, 137, 138, 142, 144, 147, 191, 192, 220, 222, 272, 281, 292, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 529, 565, 570, 591, 597, 631, 664, 675, 711, 712, 792, 813, 840], "respons": [55, 59, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 631, 664, 675, 699, 711, 712, 714, 721, 792, 813], "caller": [55, 59, 220, 222, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494, 516, 522, 565, 570, 591, 597, 631, 664, 675, 711, 712, 792, 813], "reader": [55, 131, 132, 133, 134, 135, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 162, 176, 181, 182, 183, 187, 188, 220, 272, 339, 391, 447, 491, 516, 565, 591, 711, 792], "attempt": [55, 137, 146, 191, 220, 272, 339, 391, 447, 491, 516, 565, 591, 711, 755, 768, 792], "guess": [55, 90, 112, 137, 182, 187, 220, 272, 339, 391, 447, 491, 516, 565, 591, 711, 792, 817], "keyword": [55, 59, 66, 136, 139, 141, 162, 182, 183, 184, 187, 188, 189, 219, 220, 222, 266, 272, 279, 280, 281, 333, 339, 344, 385, 391, 397, 441, 447, 454, 455, 456, 486, 491, 494, 516, 522, 565, 570, 591, 597, 711, 712, 792, 813], "write": [55, 132, 135, 136, 138, 140, 141, 142, 144, 147, 149, 163, 180, 181, 191, 220, 272, 339, 391, 447, 491, 516, 547, 565, 591, 631, 664, 675, 711, 749, 792, 820], "reassign": [56, 144, 602], "remain": [56, 137], "ccg": 56, "altern": [56, 148, 149, 275, 292, 341, 394, 451, 511, 526, 540, 546, 562, 587, 602, 604, 605, 608, 719, 724, 773, 799], "ascend": [57, 221], "place": [57, 142, 147, 292, 698, 719, 722, 752, 777, 809, 819], "multiindex": [57, 594], "noth": [57, 191, 277, 343, 396, 453, 841], "descend": [57, 94, 221, 735, 765, 777, 785, 794, 801, 802, 805, 808, 881], "sort_index": 57, "passthrough": 57, "intern": [57, 132, 139, 142, 545, 753, 755, 757, 763, 765, 768, 777, 786, 791, 797, 807, 809, 810, 876, 881], "identifi": [57, 103, 107, 108, 111, 131, 135, 137, 138, 139, 140, 141, 144, 147, 148, 219, 248, 369, 423, 547, 605, 724, 728, 876], "modifi": [57, 137, 139, 147, 181, 223, 345, 398, 457, 589, 687, 720, 799], "from_dict": [58, 600, 604, 609, 710, 726, 727], "regist": [59, 149, 150, 151, 161, 162, 163, 175, 181, 183, 186, 188, 222, 281, 344, 397, 456, 494, 522, 570, 597, 712, 813], "writer": [59, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 178, 181, 184, 189, 191, 222, 281, 344, 397, 456, 494, 522, 570, 597, 712, 813], "penalize_terminal_gap": [60, 61, 62], "unalign": [60, 61, 62, 63, 64, 65, 66, 878], "substract": [60, 61, 62, 63, 64, 65, 717], "typic": [60, 61, 62, 63, 64, 65, 67, 137, 138, 145, 146, 147, 194, 204, 719, 755], "similar": [60, 61, 62, 63, 64, 65, 104, 134, 136, 137, 138, 141, 144, 146, 149, 457, 495, 600, 601, 602, 603, 604, 714, 719, 721, 727, 728, 878, 881], "lookup": [60, 61, 62, 63, 64, 65, 176, 177, 178, 499, 552, 576, 599, 602, 605, 752, 763, 767, 777, 778, 787, 791, 806, 841], "continu": [60, 61, 62, 699], "penal": [60, 61, 62], "even": [60, 61, 62, 68, 82, 88, 95, 99, 137, 142, 292, 600, 604, 728, 808], "irrelev": [60, 61, 62], "want": [60, 61, 62, 136, 139, 204, 724, 726, 727, 728, 759, 760, 876], "nearli": [60, 61, 62], "tupl": [60, 61, 62, 63, 64, 65, 66, 73, 77, 84, 90, 93, 111, 140, 162, 194, 215, 219, 279, 280, 454, 455, 495, 499, 548, 552, 572, 576, 774, 775, 806, 807], "input": [60, 61, 62, 63, 64, 65, 66, 78, 94, 103, 105, 106, 107, 148, 161, 163, 191, 192, 204, 216, 246, 273, 292, 293, 316, 340, 367, 392, 421, 448, 476, 492, 523, 529, 534, 545, 548, 601, 602, 698, 710, 713, 714, 716, 720, 729, 809, 814, 815, 875, 876, 878], "item": [60, 61, 62, 63, 64, 65, 66, 147, 250, 273, 320, 340, 371, 392, 425, 448, 457, 478, 492, 506, 521, 559, 569, 583, 596, 698, 729, 757, 799, 806, 807, 841, 842, 852, 883], "local_pairwise_align": [60, 61, 62, 64, 65], "local_pairwise_align_nucleotid": [60, 61, 62, 63, 65], "global_pairwise_align_protein": [60, 61, 63, 64, 65], "global_pairwise_align_nucelotid": [60, 62, 63, 64, 65], "algorithm": [60, 63, 139, 600, 601, 602, 604, 609, 610, 621, 632, 643, 654, 665, 676, 687, 713, 714, 721, 758, 815, 816, 875], "slightli": [60, 83, 604], "basic": [60, 80, 133, 134, 608, 700, 710], "origin": [60, 62, 63, 65, 70, 71, 74, 77, 78, 81, 82, 86, 87, 94, 95, 97, 98, 105, 106, 108, 135, 137, 142, 144, 145, 241, 311, 362, 416, 457, 474, 600, 601, 602, 603, 604, 608, 713, 721, 729, 758, 814, 815, 881, 883], "valid": [60, 63, 78, 94, 103, 105, 106, 107, 108, 111, 137, 138, 142, 144, 223, 276, 294, 342, 345, 395, 398, 452, 493, 540, 546, 548, 571, 572, 587, 598, 875, 878, 883], "emboss": [60, 63], "needl": 60, "server": [60, 61, 62, 63, 64, 65, 148], "function": [60, 61, 62, 78, 79, 84, 85, 90, 93, 105, 106, 107, 108, 111, 137, 138, 145, 150, 151, 161, 162, 163, 176, 177, 178, 181, 185, 194, 204, 216, 223, 246, 282, 316, 345, 367, 398, 421, 476, 495, 511, 524, 527, 528, 529, 532, 533, 535, 536, 539, 544, 562, 587, 601, 602, 603, 604, 605, 606, 609, 698, 714, 723, 726, 727, 728, 753, 757, 760, 765, 770, 794, 799, 807, 809, 810, 815, 816, 818, 819, 820, 821, 839, 841, 853, 854, 864, 865, 875], "amino": [60, 62, 65, 136, 137, 141, 223, 276, 282, 292, 342, 345, 395, 452, 493, 495, 507], "acid": [60, 62, 65, 136, 137, 138, 141, 144, 148, 223, 276, 282, 292, 294, 342, 345, 395, 398, 452, 457, 493, 495, 507], "sb": 60, "cd": [60, 136, 139, 292], "j": [60, 62, 63, 65, 78, 81, 82, 90, 94, 95, 105, 106, 131, 133, 134, 137, 138, 139, 147, 148, 345, 506, 507, 521, 526, 535, 536, 537, 538, 540, 544, 546, 559, 569, 583, 596, 602, 603, 604, 714, 765, 814], "mol": [60, 63, 133, 134, 136, 139], "biol": [60, 63, 78, 82, 94, 133, 134, 136, 139, 540, 546], "1970": [60, 70], "mar": [60, 63, 82], "48": [60, 87], "443": 60, "53": [60, 143, 758], "ebi": [60, 63, 136, 139, 194], "uk": [60, 63, 82, 136, 139, 194, 526], "tool": [60, 63, 133, 134, 137, 144, 146, 148, 710, 714], "psa": [60, 63], "emboss_needl": 60, "global_pairwise_align": [61, 62, 63, 64, 65], "deriv": [61, 62, 64, 65, 136, 263, 330, 382, 438, 457, 483, 535, 536, 544, 727, 815], "ncbi": [61, 62, 64, 65, 133, 134, 137, 139, 148, 279, 280, 282, 283, 290, 291, 292, 293, 454, 455, 773, 878], "blast": [61, 62, 64, 65, 137], "nlm": [61, 62, 64, 65, 133, 134, 137, 139, 148, 282, 290, 291], "nih": [61, 62, 64, 65, 133, 134, 137, 139, 145, 148, 282, 290, 291], "cgi": [61, 62, 64, 65, 282, 290, 291], "blosum": [62, 65, 345, 495, 507], "block": [62, 65, 108, 507, 840], "henikoff": [62, 65, 507], "proc": [62, 65], "natl": [62, 65], "acad": [62, 65], "sci": [62, 65, 134, 544], "nov": [62, 65, 136, 710], "1992": [62, 65, 69, 78, 94, 507, 547], "89": [62, 65, 139, 507], "22": [62, 65, 143, 148, 507, 529, 724, 878], "10915": [62, 65, 507], "10919": [62, 65, 507], "water": 63, "identif": 63, "molecular": [63, 608, 755, 815], "subsequ": [63, 135, 137, 146, 225, 233, 238, 242, 261, 263, 296, 304, 309, 312, 329, 330, 347, 355, 360, 363, 381, 382, 400, 408, 413, 417, 436, 438, 457, 459, 467, 472, 475, 482, 483, 841, 878], "tf": 63, "1981": [63, 758, 814], "147": 63, "195": 63, "emboss_wat": 63, "sequence1": 66, "sequence2": 66, "deprec": [66, 67, 78, 92, 94, 105, 106, 111, 259, 271, 327, 338, 378, 390, 434, 446, 529, 539], "favor": [66, 539], "1814": 66, "complet": [66, 84, 85, 138, 139, 142, 724, 817, 876], "meet": [66, 146, 185, 219, 810], "acgtu": 67, "look": [67, 141, 143, 144, 149, 219, 273, 340, 392, 448, 454, 455, 492, 499, 529, 552, 576, 710, 726, 727, 728, 757, 864, 881, 883], "get": [67, 132, 146, 191, 192, 203, 204, 282, 291, 495, 547, 548, 572, 602, 698, 714, 762, 801], "substitutionmatrix": [67, 276, 342, 395, 452, 493], "1913": 67, "domin": [68, 70, 76, 87, 98, 99, 102], "interv": [68, 73, 77, 84, 136, 139, 140, 204, 205, 206, 207, 213, 215, 216, 217, 218, 219, 221, 223, 228, 240, 257, 278, 294, 299, 325, 345, 350, 376, 398, 403, 415, 432, 457, 462, 479, 534, 725], "ci": [68, 84, 534], "suffix": 68, "_ci": 68, "rare_threshold": 69, "coverag": [69, 77, 81, 85, 133, 134], "frac": [69, 70, 71, 72, 76, 77, 79, 80, 81, 82, 86, 87, 88, 89, 90, 95, 96, 99, 102, 527, 528, 532, 537, 538, 539, 541, 542, 543, 544, 602, 721], "rare": [69, 728], "c_": 69, "f_1": [69, 72, 77, 81, 96], "gamma": 69, "2_": 69, "pool": 69, "coeffici": [69, 601, 602, 608, 700, 721, 724, 760], "variat": [69, 602, 714], "sum": [69, 71, 74, 78, 87, 88, 90, 94, 98, 216, 250, 320, 371, 425, 478, 528, 532, 533, 537, 728, 729, 750, 806, 840], "_": [69, 135, 137, 138, 142, 147, 216, 228, 299, 350, 403, 462, 547, 602], "f_i": 69, "n_": [69, 70], "threshold": [69, 818], "fewer": [69, 144, 727, 728], "doubl": [69, 70, 71, 72, 74, 76, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 102, 182, 187, 713, 719], "everi": [69, 146, 148, 528, 541, 542, 543, 544, 545, 605, 756, 771, 777], "introduc": [69, 80, 135, 137, 526], "manual": [69, 73, 83, 88, 146, 814], "zero": [69, 79, 111, 131, 194, 215, 250, 320, 371, 425, 478, 526, 529, 531, 534, 538, 539, 540, 541, 542, 543, 546, 548, 600, 601, 602, 603, 604, 605, 608, 713, 719, 722, 727, 729, 815, 883], "known": [69, 142, 182, 187, 544, 545, 714, 719, 878], "environ": [69, 105, 106, 541, 714], "did": [69, 137, 145, 182, 187, 192, 883], "chao": [69, 72, 94], "american": 69, "87": [69, 143], "210": 69, "217": 69, "ma": [69, 276, 342, 395, 452, 493], "yang": 69, "1993": [69, 600, 601], "rule": [69, 137, 144, 146, 147, 814], "recaptur": 69, "debug": [69, 841, 852, 883], "unequ": [69, 283, 495], "failur": [69, 571, 598, 842, 883], "rate": [69, 495, 724], "biometrika": [69, 81], "80": [69, 137, 699, 727, 728, 755, 810, 883], "193": 69, "201": [69, 534], "viceroi": [69, 73], "eeb": [69, 73], "uconn": [69, 73], "edu": [69, 73, 135, 137, 142, 144, 814], "hwang": 69, "chen": [69, 94], "kuo": 69, "2000": [69, 728, 815], "statistica": [69, 80], "sinica": 69, "227": [69, 137], "246": [69, 102, 147], "berger": 70, "parker": 70, "fraction": [70, 525, 728, 759, 881], "total": [70, 71, 77, 78, 79, 81, 86, 87, 88, 89, 90, 102, 131, 133, 146, 204, 250, 320, 371, 425, 478, 495, 548, 572, 601, 765], "plankton": 70, "foraminifera": 70, "sea": 70, "sediment": 70, "scienc": [70, 71, 78, 135, 137, 507, 714], "168": [70, 727], "3937": 70, "1345": 70, "1347": 70, "brillouin": 71, "h_b": 71, "ln": [71, 79, 86, 95, 527, 529, 532, 537, 544], "n_i": [71, 87, 88], "text": [71, 87, 88, 102, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 161, 162, 163, 191, 547, 631, 664, 675], "th": [71, 87, 88, 102, 544], "1956": 71, "academ": 71, "press": 71, "york": 71, "bias_correct": [72, 73], "bia": [72, 73, 534], "correct": [72, 73, 80, 137, 529, 534, 791, 797, 876], "equat": [72, 73, 79, 90, 602], "uncorrect": [72, 73], "bias": [72, 73, 534], "chao1_ci": 72, "2f_2": 72, "f_2": [72, 77], "1984": [72, 223, 294, 345, 398, 457], "parametr": [72, 526, 529, 600, 603], "popul": [72, 79, 81, 101, 145, 147, 266, 333, 385, 441, 486, 541, 606, 724, 728], "scandinavian": 72, "265": 72, "270": 72, "zscore": 73, "96": [73, 140], "chao1": 73, "scalar": [73, 97, 276, 342, 395, 452, 493, 495, 499, 537, 543, 547, 552, 576, 710], "95": [73, 77, 78, 84, 138, 143, 755], "lower_bound": [73, 77, 84, 204], "upper_bound": [73, 77, 84, 204, 216], "emploi": 73, "varianc": [73, 540, 546, 601, 603, 604, 699, 715, 718, 722, 727], "presenc": [73, 94, 283, 292, 728], "absenc": [73, 728], "specif": [73, 78, 83, 103, 105, 106, 107, 108, 111, 149, 219, 457, 608, 620, 642, 643, 653, 686, 697, 727, 728, 799, 876, 882, 883], "simpson": [74, 99], "degre": [74, 94, 135, 534, 540, 546, 718, 725, 727], "concentr": [74, 728], "composit": [74, 78, 94, 191, 714], "p_i": [74, 76, 97, 98], "proport": [74, 76, 80, 81, 90, 94, 97, 98, 143, 253, 428, 524, 526, 527, 529, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 600, 602, 603, 609, 643, 687, 700, 713, 719, 721, 758], "probabl": [74, 84, 85, 96, 534, 609, 621, 698, 713, 724, 728, 735], "randomli": [74, 589, 600, 602, 603, 606, 698, 729, 760, 799], "select": [74, 94, 146, 534, 604, 726, 727, 799], "sometim": [74, 137, 139, 146, 714, 876], "distinguish": [74, 94], "reciproc": [74, 728], "discrep": 74, "denot": [74, 94, 98, 101, 102, 137, 529, 534, 600, 603, 604], "accord": [74, 78, 223, 345, 398, 718, 722], "mathemat": [74, 97, 105, 526, 755, 758, 814], "1949": [74, 98, 99], "natur": [74, 83, 98, 99], "163": [74, 98, 99], "4148": [74, 98, 99], "688": [74, 98, 99], "occurr": [75, 100, 242, 254, 255, 256, 259, 312, 322, 323, 324, 327, 363, 373, 374, 375, 378, 380, 417, 429, 430, 431, 434, 475], "ens_pi": 76, "ens_": 76, "pie": 76, "sum_": [76, 78, 80, 94, 97, 526, 528, 541, 542, 543, 602], "chase": 76, "knight": [76, 78, 105, 106, 710], "scale": [76, 601, 699, 713, 714, 715, 721], "driver": [76, 875], "biodivers": [76, 78, 94], "why": 76, "standardis": 76, "enough": [76, 137, 142, 728], "letter": [76, 78, 137, 139, 345], "volum": [76, 815], "issu": [76, 136, 137, 138, 146, 162, 815, 876], "supplement": 76, "pg": 76, "17": [76, 78, 105, 106, 136, 143, 223, 398, 699, 727], "26": [76, 134, 142, 529, 603, 608, 710], "esti": 77, "good": [77, 81, 719], "pm": 77, "sqrt": [77, 87, 88, 89, 544, 721], "constant": [77, 526, 529, 584, 602, 726], "normal": [77, 106, 138, 139, 600, 604, 719, 720, 721, 724, 725, 727, 728, 757], "distribut": [77, 136, 534, 541, 606, 719, 724, 725, 727, 728], "2nf_2": 77, "hardcod": 77, "1983": 77, "law": 77, "nonparametr": [77, 526, 538], "random": [77, 79, 90, 131, 534, 600, 604, 606, 698, 714, 724, 726, 727, 728, 760, 799], "ann": [77, 96], "905": 77, "912": 77, "otu_id": [78, 94, 105, 106], "sqcup": [78, 94], "minimum": [78, 94, 99, 148, 253, 263, 330, 382, 428, 438, 483, 529, 604, 698, 727, 728], "connect": [78, 80, 94, 142, 735, 784, 791], "lowest": [78, 94, 781, 783], "ancestor": [78, 94, 241, 311, 362, 416, 474, 750, 781, 783], "lca": [78, 94, 755, 783], "superset": [78, 94, 105, 106, 600, 604], "subset": [78, 94, 105, 106, 111, 131, 136, 601, 759, 765, 881], "elsewher": [78, 103, 105, 106, 107], "lead": [78, 103, 105, 106, 107, 137, 138, 141], "hard": [78, 103, 105, 106, 107], "bypass": [78, 103, 105, 106, 107], "certain": [78, 87, 103, 105, 106, 107, 223, 345, 398, 524, 810], "entail": [78, 103, 105, 106, 107], "backward": [78, 94, 105, 106, 146, 529], "compat": [78, 94, 105, 106, 146, 148, 282, 529], "futur": [78, 94, 105, 106, 137], "releas": [78, 94, 105, 106, 136, 148], "missingnodeerror": [78, 94, 103, 105, 106, 107, 768, 769, 771, 786, 799], "duplicatenodeerror": [78, 94, 103, 105, 106, 107, 763], "fail": [78, 79, 94, 103, 105, 106, 107, 218, 604, 724, 841, 842, 883], "exact": [78, 94, 103, 105, 106, 107, 146, 194, 241, 311, 362, 416, 474, 604, 719, 876], "phydiv": 78, "span": [78, 94, 108, 137, 139, 142, 194, 219], "clarifi": 78, "ancestr": 78, "life": 78, "One": [78, 144, 149, 534, 584, 815], "choos": [78, 146, 714, 724], "scope": [78, 883], "unroot": [78, 94, 105, 106, 142, 772, 796, 811, 812, 815], "sever": [78, 142, 144, 699, 724], "evolutionari": [78, 495, 507, 735, 815], "histori": [78, 728], "eh": 78, "fd": [78, 840], "pycog": [78, 105, 106, 814], "qiim": [78, 105, 106, 146], "impos": [78, 105, 106], "few": [78, 105, 106, 108, 876, 881, 883], "had": [78, 105, 106, 600, 604, 728], "trifurc": [78, 105, 106, 142], "newick": [78, 105, 106, 124, 749, 755, 792, 813, 815, 876, 881], "convent": [78, 105, 106, 133, 136, 139], "silent": [78, 105, 106], "conserv": [78, 83, 84, 94, 135, 241, 311, 362, 416, 474, 529, 547], "evalu": [78, 94, 133, 134, 230, 301, 352, 405, 464, 547, 601, 698, 724, 757, 794, 797, 881, 883], "baker": 78, "2006": [78, 604, 815], "bioinformat": [78, 94, 138, 144, 146, 755], "challeng": 78, "117693430600200007": 78, "nee": 78, "1997": [78, 147, 815], "extinct": 78, "loss": [78, 608], "278": 78, "5338": 78, "692": 78, "694": 78, "petchei": 78, "ol": 78, "gaston": 78, "kj": 78, "402": 78, "hamadi": [78, 105, 106], "lozupon": [78, 105, 106], "fast": [78, 105, 106, 609, 719], "facilit": [78, 105, 106, 108, 131, 572, 724, 763, 815], "throughput": [78, 105, 106, 137, 138, 534, 710, 727], "analys": [78, 105, 106, 600], "microbi": [78, 84, 85, 94, 105, 106, 529, 600, 601, 603, 604, 710], "pyrosequenc": [78, 105, 106], "phylochip": [78, 105, 106], "ism": [78, 105, 106], "2010": [78, 105, 106, 138], "u_count": [78, 105, 106], "u8": [78, 105, 106], "62": [78, 105, 106, 135, 138, 604, 878], "round": [78, 83, 90, 105, 106, 602, 724, 727, 728, 765], "fisher": 79, "solv": [79, 724], "runtimeerror": 79, "analyt": 79, "solut": 79, "obtain": [79, 230, 301, 352, 405, 457, 464, 506, 507, 521, 529, 547, 559, 569, 583, 594, 596, 600, 602, 604, 835, 836, 837], "minimize_scalar": 79, "determinist": [79, 600, 604], "inf": [79, 146, 799], "corbet": 79, "william": 79, "1943": 79, "anim": 79, "pp": [79, 89, 96, 714], "58": [79, 143, 724], "rectangl": 80, "gini": [80, 98], "area": 80, "lorenz": 80, "curv": [80, 83, 90, 714, 724, 727, 728], "under": [80, 107, 137, 223, 345, 398, 457, 529, 643, 727, 875], "simplifi": 80, "2b": 80, "entri": [80, 131, 132, 136, 148, 698], "trapezoid": 80, "line": [80, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 191, 727, 753], "parallel": [80, 108], "opinion": 80, "though": [80, 137, 138, 144, 145, 146, 529, 584, 600, 604, 815, 883], "desir": [80, 84, 133, 141, 719, 798, 883], "circumst": [80, 345, 727], "linear": [80, 136, 139, 700, 714], "segment": 80, "accur": [80, 84, 85], "fall": [80, 83, 94, 106, 698], "gradient": [80, 713, 714, 719, 721], "formula": [80, 604], "dx": 80, "h_i": 80, "h_0": 80, "h_n": 80, "1912": 80, "variabl": [80, 131, 273, 340, 392, 448, 457, 492, 529, 601, 604, 699, 700, 710, 714, 719, 720, 721, 724, 726, 727, 841, 864, 883], "mutabl": [80, 457, 821, 878], "cuppini": 80, "bologna": 80, "156": 80, "page": [80, 529, 815, 881], "reprint": 80, "memori": [80, 135, 137, 138, 139, 144, 145, 147, 547, 605, 698, 719, 840, 876], "di": [80, 878], "metodologica": 80, "ed": 80, "pizetti": 80, "salvemini": 80, "rome": 80, "libreria": 80, "eredi": 80, "virgilio": 80, "veschi": 80, "1955": 80, "onc": [81, 137, 149, 808], "1953": 81, "237": [81, 102], "264": 81, "heip": [82, 88], "wiener": [82, 97], "logarithm": [82, 97, 529], "pielou_": 82, "1974": [82, 88], "ass": 82, "54": [82, 106], "555": 82, "557": 82, "lower_quantil": 83, "upper_quantil": 83, "kempton": 83, "taylor": 83, "slope": 83, "cumul": [83, 102, 135], "interquantil": 83, "lower": [83, 84, 137, 144, 194, 204, 529, 534, 587, 594, 602, 698, 728], "quartil": 83, "inward": 83, "bound": [83, 84, 139, 140, 149, 151, 194, 195, 203, 204, 207, 215, 216, 218, 219, 457, 529, 534, 725, 728], "sdr": [83, 88], "iv": [83, 88, 94], "onlin": [83, 88, 138], "magurran": [83, 89], "1998": [83, 699, 713, 714, 716, 717, 719, 721], "half": [83, 541], "uq": 83, "lq": 83, "justif": 83, "unclear": 83, "just": [83, 84, 85, 90, 149, 798, 876, 881, 883], "overlap": [83, 219, 264, 265, 331, 332, 383, 384, 439, 440, 484, 485, 506, 525, 534, 559, 583, 759], "quantil": [83, 534], "consider": [83, 94, 727], "off": [83, 96, 223, 345, 398, 541, 727, 758, 814, 818, 883], "leav": [83, 136, 275, 341, 394, 451], "chang": [83, 137, 203, 204, 292, 457, 507, 529, 534, 600, 698, 757, 791, 883], "1976": 83, "model": [83, 84, 85, 90, 507, 526, 534, 547, 728], "262": 83, "818": 83, "820": 83, "pisc": 83, "com": [83, 133, 134, 135, 601, 840], "sdrhelp": 83, "ci_typ": 84, "ulcl": 84, "uncov": [84, 85], "predict": [84, 85, 147, 727], "ratio": [84, 95, 99, 526, 527, 528, 529, 532, 533, 535, 536, 540, 546, 728], "ulcu": 84, "fix": [84, 141, 144], "lladser_p": 84, "around": [84, 85, 108, 137, 144, 147, 495, 530, 602, 725, 881], "full": [84, 85, 135, 529, 771, 797, 839], "theorem": [84, 85], "iii": 84, "lladser": [84, 85, 105, 106], "gouet": [84, 85], "reeder": [84, 85], "extrapol": [84, 85, 724], "urn": [84, 85], "poisson": [84, 85], "2011": [84, 85, 94, 105, 106], "lladser_ci": 85, "too": [85, 719, 750], "low": [85, 719, 727], "log": [86, 526, 527, 528, 529, 532, 533, 534, 535, 536, 540, 546], "accumul": [86, 89, 750], "1958": 86, "36": [86, 96, 143, 146, 540, 546, 724], "71": [86, 105, 143, 147], "mcintosh": [87, 88], "mcintosh_": 87, "1967": [87, 602], "concept": [87, 544], "1115": 87, "1126": 87, "mcintosh_d": 88, "wrong": 88, "engel": 88, "560": 88, "d_": [89, 99], "mn": 89, "squar": [89, 90, 107, 142, 495, 548, 572, 716], "2004": 89, "blackwel": 89, "76": [89, 94, 143], "77": [89, 604], "num_repeat": 90, "params_guess": 90, "micha": 90, "menten": 90, "fit": [90, 534, 698, 700, 721, 882], "rarefact": 90, "ns_": 90, "datapoint": 90, "subsampl": [90, 698, 724, 727, 728, 729, 760], "initi": [90, 137, 727, 782, 785, 788, 789, 790, 805, 808, 815, 852], "s_max": 90, "subsample_count": [90, 698], "controversi": 90, "ml": 90, "assumpt": [90, 142, 524, 529, 534, 768, 769, 817], "roughli": 90, "magnitud": [90, 534, 602, 604, 719, 816], "enzym": 90, "kinet": 90, "nonlinear": 90, "raaijmak": 90, "1987": [90, 815], "biometr": [90, 604], "793": 90, "803": 90, "due": [92, 142, 218, 538, 539, 601, 604, 714, 727], "usag": [92, 603], "reli": [93, 146, 223, 345, 398], "explicitli": [94, 144, 146, 276, 342, 395, 452, 493, 699], "fulli": [94, 139, 876], "adopt": [94, 276, 342, 395, 452, 493], "author": [94, 139, 147, 457, 529], "upd": 94, "contrast": [94, 544], "rpd": 94, "advantag": [94, 572, 841], "framework": [94, 526], "rbwpd_": 94, "analog": 94, "pd_": 94, "multipli": 94, "bwpd_": 94, "delta": [94, 538, 539, 718], "npd": 94, "min": [94, 99, 728], "lesser": 94, "side": [94, 602, 605, 608], "balanc": [94, 544], "adjust": 94, "factor": [94, 105, 106, 600, 603, 608, 714, 728], "theta": [94, 529], "back": [94, 137, 140, 184, 189, 751, 881], "public": [94, 138, 710], "although": [94, 608, 727], "involv": [94, 527], "report": [94, 146, 162, 534, 608, 721], "perspect": 94, "rpd_": 94, "upd_": 94, "pardi": 94, "goldman": 94, "2007": [94, 105, 106], "resourc": [94, 146, 148, 191], "systemat": 94, "biologi": [94, 95, 99, 292, 608, 755, 768, 814, 815], "56": [94, 244, 314, 365, 419], "431": 94, "444": 94, "chiu": 94, "jost": 94, "2016": [94, 540, 546], "decomposit": [94, 108], "hill": 94, "141": [94, 758], "72": 94, "mccoi": 94, "matsen": 94, "state": [94, 135, 144, 146, 191, 841, 842, 852, 864, 883], "robust": [94, 146, 540, 546, 604, 608], "depth": [94, 699, 724, 727, 728, 808, 881], "peerj": 94, "e157": 94, "vellend": 94, "cornwel": 94, "magnuson": 94, "ford": 94, "mooer": 94, "\u00f8": 94, "frontier": 94, "assess": [94, 102, 600, 602, 603, 604, 608], "194": 94, "207": 94, "barker": 94, "quantit": [94, 105, 106, 713, 728], "prioriti": [94, 853, 854, 883], "achiev": [94, 878], "linnean": 94, "societi": 94, "165": 94, "bitting": 94, "charlson": 94, "hoffmann": 94, "lewi": 94, "wu": [94, 106], "li": 94, "2012": [94, 139, 148, 602], "environment": [94, 601, 699, 714, 719, 720], "covari": [94, 715], "2106": 94, "2113": 94, "pielou": [95, 99], "equit": [95, 99], "e_h": 95, "That": [95, 99, 142, 266, 333, 385, 441, 486], "actual": [95, 99, 146, 149, 181, 602], "versu": [95, 99, 105, 106], "maximum": [95, 102, 137, 138, 529, 534, 601, 643, 698, 714, 718, 722, 727, 728, 760], "heip_": 95, "1966": [95, 99], "theoret": [95, 99], "131": [95, 99, 758], "unobserv": 96, "outcom": [96, 727], "1968": 96, "vol": 96, "256": [96, 724], "257": 96, "bit": [97, 133, 134, 146], "log_2": 97, "propos": [97, 815], "1948": 97, "bell": 97, "technic": [97, 142], "379": 97, "423": 97, "impur": 98, "e_d": 99, "enspi": 99, "144": 99, "discret": 101, "entiti": [101, 194], "smaller": [101, 263, 330, 382, 438, 483, 605], "observed_featur": 101, "d_w": 102, "max_i": 102, "b_i": [102, 544], "sequenti": [102, 137, 138, 144, 544, 545, 710, 809], "smallest": [102, 144, 727, 728], "express": [102, 249, 277, 319, 343, 370, 396, 424, 453, 477, 534, 540, 546, 727, 878], "bracket": [102, 142], "uneven": 102, "plant": [102, 136, 544], "tabl": [103, 107, 132, 138, 139, 146, 148, 279, 280, 282, 291, 292, 293, 454, 455, 529, 534, 699, 713, 714, 720, 721, 841, 875, 878], "dissimilar": [104, 107, 141, 495, 496, 497, 499, 504, 505, 506, 508, 509, 511, 514, 515, 517, 520, 521, 540, 547, 548, 549, 550, 552, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 571, 572, 573, 574, 576, 581, 582, 583, 585, 586, 588, 590, 592, 595, 596, 599], "v_count": [105, 106], "qualit": [105, 106, 710], "deeper": [105, 106], "advis": [105, 106, 111], "appl": [105, 106], "microbiol": [105, 106], "8228": 105, "8235": 105, "2005": [105, 136], "kellei": [105, 106], "insight": [105, 106], "structur": [105, 106, 134, 139, 142, 148, 507, 548, 600, 601, 608, 797, 841, 875], "73": [105, 106], "1576": [105, 106], "1585": [105, 106], "stombaugh": [105, 106], "comparison": [105, 106, 529, 534, 608, 726, 758, 818, 881], "169": [105, 106], "172": [105, 106], "biocor": [105, 106, 710], "uu": 105, "37": [105, 147], "quantiti": 106, "mathemt": 106, "pairwise_func": 107, "pairwis": [107, 108, 111, 511, 529, 540, 562, 587, 605, 608, 766, 804, 881], "doc": [107, 135, 136, 137, 144, 146, 194, 517, 548, 566, 572, 584, 592, 814], "link": [107, 203, 601, 608, 735], "hollow": [107, 131, 548, 587, 589, 606], "sklearn": 107, "pairwise_dist": 107, "distancematrix": [107, 108, 111, 131, 141, 518, 523, 540, 548, 567, 600, 601, 602, 603, 604, 605, 606, 608, 710, 719, 804, 815], "itypeerror": 107, "reduce_f": 108, "map_f": 108, "resolv": [108, 111, 122, 146, 608], "reduc": [108, 604, 698, 719], "partialdistancematrix": 108, "signatur": [108, 192], "_block_comput": 108, "ipyparallel": 108, "map_async": 108, "blocksiz": 108, "partial_beta_divers": 108, "process": [108, 137, 147, 218, 534, 721, 817, 842, 883], "motiv": 108, "earth": 108, "project": [108, 138, 527, 544, 600, 601, 602, 603, 604, 720], "dataset": [108, 131, 526, 534, 604, 699, 714, 719], "000": 108, "million": 108, "earthmicrobiom": 108, "id_pair": 111, "caution": 111, "unresolv": 111, "unstabl": 111, "warn": [112, 119, 138, 146, 719, 757, 811, 816, 817, 875], "blast7": 113, "pars": [113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 137, 138, 139, 141, 149, 876], "embl": [115, 139, 148, 194, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494], "sniffer": [119, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 177, 182, 183, 187, 188, 876], "gff3": [120, 139, 220, 222, 272, 281, 339, 344, 491, 494], "genbank": [121, 136, 140, 148, 272, 281, 339, 344, 391, 397, 447, 456, 491, 494], "lsmat": [123, 516, 522, 565, 570, 591, 597], "written": [126, 135, 137, 138, 142, 144, 814, 876, 881], "qseq": [127, 133, 134, 272, 339, 391, 447, 491], "qual": [128, 138], "ambigu": [130, 183, 188], "unidentifi": 130, "encod": [131, 137, 138, 145, 149, 151, 191, 544, 699], "rapid": [131, 137, 777], "ye": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "dissimilaritymatrix": [131, 141, 495, 497, 499, 504, 506, 508, 509, 511, 515, 516, 518, 520, 521, 522, 540, 572, 574, 576, 581, 583, 585, 586, 590, 593, 595, 596, 606], "hdf5": [131, 132], "datatyp": [131, 698, 729], "unicod": [131, 146, 191], "diagon": [131, 587, 594], "dm": [131, 499, 506, 515, 518, 521, 547, 552, 559, 564, 567, 569, 576, 583, 590, 593, 594, 596, 600, 601, 604, 605, 710, 815], "current": [131, 133, 136, 137, 138, 139, 144, 146, 147, 148, 204, 218, 280, 293, 455, 507, 529, 602, 687, 713, 719, 757, 770, 779, 780, 785, 875], "float32": [131, 604], "human": [131, 137, 138, 141, 142, 143, 820], "readabl": [131, 137, 138, 141, 142, 143, 144, 191, 820], "especi": [131, 137, 146, 608, 721], "hdfgroup": 131, "v2": 132, "spars": [132, 535, 536, 545, 713, 721], "compress": [132, 149, 191], "wherea": [132, 698], "offici": 132, "implicitli": 132, "byteio": 132, "path": [132, 137, 138, 145, 191, 751, 839], "regular": [132, 142, 249, 277, 319, 343, 370, 396, 424, 453, 477, 878], "bytesio": [132, 191, 192, 840], "example_t": 132, "_io": 132, "roundtrip": 132, "nonzero": 132, "83": 132, "dens": 132, "format_vers": 132, "databas": [133, 134, 136, 139, 146, 148, 194, 773], "simpl": [133, 134, 137, 138, 142, 146, 147, 149, 175, 186, 541, 601, 608, 876, 881], "header": [133, 134, 135, 138, 139, 141, 143, 146], "tab": [133, 134, 140, 141, 142, 143, 145, 146, 148], "moac": 133, "gi": [133, 134, 139], "15800534": 133, "ref": [133, 752], "np_286546": 133, "161": 133, "3e": [133, 134, 724], "114": 133, "330": 133, "170768970": 133, "zp_02903423": 133, "99": [133, 134, 136, 143, 600, 604, 608], "9e": 133, "329": 133, "produc": [133, 134, 144, 145, 161, 263, 330, 382, 438, 483, 713, 721], "outfmt": [133, 134], "legaci": [133, 134, 137], "With": [133, 526, 538], "qseqid": [133, 134], "sseqid": [133, 134], "bitscor": [133, 134], "qstart": [133, 134], "sstart": [133, 134], "qgi": [133, 134], "qacc": [133, 134], "acces": 133, "qaccver": [133, 134], "qlen": [133, 134], "sallseqid": [133, 134], "sgi": [133, 134], "sallgi": [133, 134], "sacc": [133, 134], "saccver": [133, 134], "sallacc": [133, 134], "slen": [133, 134], "align": [133, 134, 137, 138, 194, 204, 457, 495, 875, 876, 878], "qend": [133, 134], "send": [133, 134], "part": [133, 137, 139, 142, 145, 523, 527, 544, 698, 785, 841, 881], "sseq": [133, 134], "raw": [133, 631, 664], "pident": [133, 134], "percent": [133, 878], "nident": [133, 134], "gapopen": [133, 134], "ppo": [133, 134], "percentag": [133, 526], "frame": [133, 134, 280, 282, 292, 293, 455, 534, 601, 773], "qframe": [133, 134], "sframe": [133, 134], "btop": [133, 134], "traceback": [133, 144, 292, 457, 602], "staxid": [133, 134], "taxonomi": [133, 142, 146, 148, 282, 290, 291, 773, 774, 807], "sscinam": [133, 134], "scientif": [133, 146, 572], "scomnam": [133, 134], "sblastnam": [133, 134], "sskingdom": [133, 134], "super": [133, 134], "kingdom": [133, 134, 148], "stitl": [133, 134], "sstrand": [133, 134], "strand": [133, 134, 139, 140, 147, 194, 278, 279, 280, 450], "salltitl": [133, 134], "qcov": [133, 134], "qcovhsp": [133, 134], "hsp": [133, 134], "miss": [133, 137, 146, 147, 241, 311, 362, 416, 474, 526, 538, 601, 710, 726, 727, 732, 733, 883], "allow": [133, 137, 138, 142, 144, 145, 146, 149, 161, 163, 191, 204, 223, 241, 250, 311, 320, 345, 362, 371, 398, 416, 425, 474, 478, 499, 506, 526, 552, 559, 576, 583, 600, 601, 603, 604, 605, 609, 719, 765, 807, 842, 883], "default_column": 133, "suppos": [133, 134, 136, 137, 138, 139, 142, 145, 147, 541, 724, 728], "tgi": 133, "t100": [133, 134], "t161": 133, "t0": [133, 134, 140, 143, 145, 547], "t1": [133, 134, 143, 145, 148, 547], "t3e": [133, 134], "t330": 133, "t99": 133, "t9e": 133, "t329": 133, "fh": [133, 134, 135, 137, 138, 139, 140, 144, 145, 147, 148, 149, 161, 162, 163], "df": [133, 134, 148, 518, 534, 567, 593, 600, 601, 604, 710, 725], "000000e": [133, 134], "altschul": [133, 134], "gish": [133, 134], "miller": [133, 134], "myer": [133, 134], "lipman": [133, 134, 137], "1990": [133, 134, 136], "215": [133, 134], "403": [133, 134], "410": [133, 134], "blastedbio": 133, "blogspot": 133, "csv": [133, 141, 876], "book": [133, 134, 137], "nbk279675": 133, "blastn": 134, "18": [134, 143, 147, 600, 724, 878], "1786181": 134, "gb": [134, 139], "ae000111": 134, "ecoli": 134, "hit": 134, "10596": 134, "ae000174": 134, "8e": 134, "5565": 134, "5671": 134, "6928": 134, "6821": 134, "ae000394": 134, "1e": [134, 142, 818], "5587": 134, "135": [134, 540, 546], "219": [134, 136, 601], "ae000425": 134, "6e": 134, "8552": 134, "8468": 134, "ae000171": 134, "2214": 134, "2130": 134, "minor": 134, "blastp": 134, "31": 134, "query1": 134, "subject2": 134, "sbjctframe": 134, "ver": 134, "record": [134, 136, 137, 138, 139, 140, 145], "subject1": 134, "other_vertebr": 134, "af178033": 134, "emorg": 134, "811": 134, "1566": 134, "af031394": 134, "63": [134, 143], "909": 134, "1542": [134, 755], "consist": [134, 137, 138, 140, 143, 144, 146, 147, 148, 276, 342, 395, 452, 457, 493, 495, 727, 785, 805], "blast6": 134, "sbjct": 134, "tax": 134, "tae000111": 134, "t10596": 134, "tae000174": 134, "t8e": 134, "t5565": 134, "t5671": 134, "t6928": 134, "t6821": 134, "tae000171": 134, "t5587": 134, "t2214": 134, "t2130": 134, "tae000425": 134, "t6e": 134, "t8552": 134, "t8468": 134, "temorg": 134, "t811": 134, "t1566": 134, "af178032": 134, "t94": 134, "57": [134, 143, 714], "t44": 134, "t1217": 134, "af178031": 134, "82": [134, 135, 147], "t42": 134, "t1233": 134, "94": [134, 143], "nbk279682": 134, "plain": [135, 137, 138, 139, 142, 144, 145], "divid": [135, 544, 716, 718, 722], "60": [135, 136, 140, 609, 727], "long": [135, 137, 144, 146, 248, 318, 369, 423, 527, 601, 687, 713], "below": [135, 137, 138, 142, 144, 146, 147, 148, 282, 294, 457, 601, 602, 710, 727, 735], "properti": [135, 144, 148, 283, 289, 294, 495, 511, 562, 572, 587, 724, 755, 791, 821, 833, 835, 836, 837], "abc": [135, 228, 294, 299, 350, 403, 462], "gcaugcaucugcauacguacguacgcaugcauca": 135, "def": [135, 149, 161, 162, 163, 246, 294, 316, 367, 421, 476, 728, 883], "xyz": 135, "gucgauacauacguacgucguacguacgu": 135, "cgac": 135, "cgcgaugcaugcau": 135, "cgau": 135, "caugcaucguacguacgcaugac": 135, "code": [135, 137, 138, 139, 148, 219, 223, 276, 278, 279, 280, 282, 283, 289, 290, 291, 292, 293, 342, 345, 395, 398, 450, 452, 454, 455, 493, 608, 729, 758, 814, 816, 878], "clustal_f": 135, "gcaugcaucugcauacguacguacgcaugca": 135, "gucgauacauacguacgucgguacgu": 135, "cgugcaugcau": 135, "cauucguacguacgcaugac": 135, "gcaugcaucugcauacguacguacgcaugcagucgauacauacguacgucgguacgu": 135, "accgttgta": [135, 144], "gtagct": [135, 144], "gtcgaa": [135, 144], "gtacct": [135, 144], "agagttgaaggtatct": [135, 144], "getvalu": [135, 137, 138, 139, 140, 144, 147, 547], "sciencedirect": 135, "pii": 135, "0378111988903307": 135, "mit": 135, "meme_v4": 135, "clustalw": 135, "annot": [136, 139, 140, 146, 204], "mark": [136, 139, 147, 883], "termin": [136, 279, 292, 454, 808], "comment": [136, 137, 139, 140, 141, 147, 148], "txt": [136, 146, 148], "extens": [136, 146], "seen": [136, 139, 728], "submit": [136, 137, 728], "ena": [136, 139], "assembl": 136, "flatfil": 136, "parent": [136, 140, 142, 148, 457, 544, 733, 735, 752, 755, 767, 770, 779, 787, 791, 800, 806, 809, 811, 812, 881], "metatdata": 136, "moment": [136, 602, 883], "track": 136, "1499": 136, "rn": [136, 147], "download": [136, 139, 148], "molecul": [136, 137, 139, 457, 495, 878], "thymin": [136, 139, 223, 278, 450], "uracil": [136, 139, 278, 398, 450], "embl_str": 136, "x56734": 136, "sv": 136, "mrna": 136, "std": [136, 718, 722, 727], "pln": [136, 148], "1859": 136, "bp": [136, 139], "xx": 136, "s46826": 136, "dt": 136, "sep": 136, "1991": 136, "29": [136, 138, 139], "85": [136, 143, 728, 810], "updat": [136, 137, 148, 204, 218, 457], "de": [136, 147], "trifolium": 136, "repen": 136, "cyanogen": 136, "glucosidas": 136, "kw": 136, "white": 136, "clover": 136, "oc": 136, "eukaryota": 136, "viridiplanta": 136, "streptophyta": 136, "embryophyta": 136, "tracheophyta": 136, "spermatophyta": 136, "magnoliophyta": 136, "eudicotyledon": 136, "gunnerida": 136, "pentapetala": 136, "rosid": 136, "fabid": 136, "fabal": 136, "fabacea": 136, "papilionoidea": 136, "trifoliea": 136, "rp": 136, "rx": 136, "1007": [136, 540, 546], "bf00039495": 136, "pubm": [136, 139, 457], "1907511": 136, "ra": [136, 147], "oxtobi": 136, "dunn": 136, "pancoro": 136, "hugh": 136, "rt": [136, 147], "linamaras": 136, "rl": [136, 147], "209": [136, 139, 602], "insdc": [136, 139, 194], "univers": [136, 137, 144, 146, 151], "newcastl": 136, "upon": 136, "tyne": 136, "medic": 136, "school": 136, "ne2": 136, "4hh": 136, "dr": 136, "md5": [136, 840], "1e51ca3a5450c43524b9185c236cc5cc": 136, "qualifi": [136, 139], "mol_typ": [136, 139], "clone_lib": 136, "lambda": [136, 698, 724, 727, 728, 757, 770, 791, 794, 799, 810, 814, 815, 883], "gt10": 136, "clone": 136, "tre361": 136, "tissue_typ": 136, "db_xref": [136, 139], "3899": 136, "experiment": [136, 604], "evid": [136, 142], "1495": 136, "ec_numb": 136, "21": [136, 143, 529, 540, 546, 717, 728], "goa": 136, "p26204": 136, "interpro": 136, "ipr001360": 136, "ipr013781": 136, "ipr017853": 136, "ipr033132": 136, "uniprotkb": 136, "swiss": 136, "prot": 136, "protein_id": 136, "caa40058": 136, "translat": [136, 139, 142, 148, 191, 278, 280, 282, 293, 345, 450, 455, 878], "mdfivaifalfvissftitstnaveastlldignlsr": 136, "sfprgfifgagssayqfegavneggrgpsiwdtfthkypekirdgsnaditv": 136, "dqyhrykedvgimkdqnmdsyrfsiswprilpkgklsgginhegikyynnli": 136, "nellangiqpfvtlfhwdlpqvledeyggflnsgvindfrdytdlcfkefgd": 136, "rvrywstlnepwvfsnsgyalgtnapgrcsasnvakpgdsgtgpyivthnqi": 136, "lahaeavhvyktkyqayqkgkigitlvsnwlmplddnsipdikaaersldfq": 136, "fglfmeqlttgdysksmrrivknrlpkfskfesslvngsfdfiginyysssi": 136, "isnapshgnakpsystnpmtnisfekhgiplgpraasiwiyvypymfiqedf": 136, "eifcyilkinitilqfsitengmnefndatlpveeallntyridyyyrhlyi": 136, "irsairagsnvkgfyawsfldcnewfagftvrfglnfvd": 136, "609": 136, "314": 136, "355": [136, 609], "581": 136, "aaacaaacca": 136, "aatatggatt": 136, "ttattgtagc": 136, "catatttgct": 136, "ctgtttgtta": 136, "ttagctcatt": 136, "cacaattact": 136, "tccacaaatg": 136, "cagttgaagc": 136, "ttctactctt": 136, "cttgacatag": 136, "gtaacctgag": 136, "tcggagcagt": 136, "tttcctcgtg": 136, "gcttcatctt": 136, "tggtgctgga": 136, "tcttcagcat": 136, "accaatttga": 136, "aggtgcagta": 136, "aacgaaggcg": 136, "gtagaggacc": 136, "aagtatttgg": 136, "gataccttca": 136, "cccataaata": 136, "tccagaaaaa": 136, "ataagggatg": 136, "gaagcaatgc": 136, "agacatcacg": 136, "gttgaccaat": 136, "atcaccgcta": 136, "caaggaagat": 136, "gttgggatta": 136, "tgaaggatca": 136, "aaatatggat": 136, "tcgtatagat": 136, "tctcaatctc": 136, "ttggccaaga": 136, "atactcccaa": 136, "agggaaagtt": 136, "gagcggaggc": 136, "ataaatcacg": 136, "aaggaatcaa": 136, "atattacaac": 136, "aaccttatca": 136, "acgaactatt": 136, "ggctaacggt": 136, "atacaaccat": 136, "ttgtaactct": 136, "ttttcattgg": 136, "gatcttcccc": 136, "aagtcttaga": 136, "agatgagtat": 136, "ggtggtttct": 136, "taaactccgg": 136, "tgtaataaat": 136, "gattttcgag": 136, "actatacgga": 136, "tctttgcttc": 136, "aaggaatttg": 136, "gagatagagt": 136, "gaggtattgg": 136, "agtactctaa": 136, "atgagccatg": 136, "ggtgtttagc": 136, "aattctggat": 136, "atgcactagg": 136, "aacaaatgca": 136, "ccaggtcgat": 136, "gttcggcctc": 136, "caacgtggcc": 136, "aagcctggtg": 136, "attctggaac": 136, "aggaccttat": 136, "atagttacac": 136, "acaatcaaat": 136, "tcttgctcat": 136, "gcagaagctg": 136, "tacatgtgta": 136, "taagactaaa": 136, "taccaggcat": 136, "atcaaaaggg": 136, "aaagataggc": 136, "ataacgttgg": 136, "tatctaactg": 136, "gttaatgcca": 136, "cttgatgata": 136, "atagcatacc": 136, "agatataaag": 136, "gctgccgaga": 136, "gatcacttga": 136, "cttccaattt": 136, "ggattgttta": 136, "tggaacaatt": 136, "aacaacagga": 136, "gattattcta": 136, "agagcatgcg": 136, "gcgtatagtt": 136, "aaaaaccgat": 136, "tacctaagtt": 136, "ctcaaaattc": 136, "gaatcaagcc": 136, "tagtgaatgg": 136, "ttcatttgat": 136, "tttattggta": 136, "taaactatta": 136, "ctcttctagt": 136, "tatattagca": 136, "atgccccttc": 136, "acatggcaat": 136, "gccaaaccca": 136, "gttactcaac": 136, "aaatcctatg": 136, "accaatattt": 136, "catttgaaaa": 136, "acatgggata": 136, "cccttaggtc": 136, "caagggctgc": 136, "ttcaatttgg": 136, "atatatgttt": 136, "atccatatat": 136, "gtttatccaa": 136, "gaggacttcg": 136, "agatcttttg": 136, "ttacatatta": 136, "aaaataaata": 136, "taacaatcct": 136, "gcaattttca": 136, "atcactgaaa": 136, "atggtatgaa": 136, "tgaattcaac": 136, "gatgcaacac": 136, "ttccagtaga": 136, "agaagctctt": 136, "ttgaatactt": 136, "acagaattga": 136, "ttactattac": 136, "cgtcacttat": 136, "actacattcg": 136, "ttctgcaatc": 136, "agggctggct": 136, "caaatgtgaa": 136, "gggtttttac": 136, "gcatggtcat": 136, "ttttggactg": 136, "taatgaatgg": 136, "tttgcaggct": 136, "ttactgttcg": 136, "ttttggatta": 136, "aactttgtag": 136, "attagaaaga": 136, "tggattaaaa": 136, "aggtacccta": 136, "agctttctgc": 136, "ccaatggtac": 136, "aagaactttc": 136, "tcaaaagaaa": 136, "ctagctagta": 136, "ttattaaaag": 136, "tagattacag": 136, "tacatcgttt": 136, "gaagttgagt": 136, "tggtgcacct": 136, "aattaaataa": 136, "aagaggttac": 136, "tcttaacata": 136, "tttttaggcc": 136, "attcgttgtg": 136, "aagttgttag": 136, "gctgttattt": 136, "ctattatact": 136, "atgttgtagt": 136, "aataagtgca": 136, "ttgttgtacc": 136, "agaagctatg": 136, "atcataacta": 136, "taggttgatc": 136, "cttcatgtat": 136, "cagtttgatg": 136, "ttgagaatac": 136, "tttgaattaa": 136, "aagtcttttt": 136, "ttattttttt": 136, "aaaaaaaaaa": 136, "aaaaaaaaa": 136, "dna_seq": [136, 137, 139], "cross_refer": 136, "date": 136, "dbsourc": 136, "locu": [136, 139, 148], "1740": 136, "1800": 136, "rna_seq": [136, 139], "aauauggauu": 136, "uuauuguagc": 136, "cauauuugcu": 136, "cuguuuguua": 136, "uuagcucauu": 136, "cacaauuacu": 136, "uccacaaaug": 136, "caguugaagc": 136, "uucuacucuu": 136, "cuugacauag": 136, "guaaccugag": 136, "agaagcuaug": 136, "aucauaacua": 136, "uagguugauc": 136, "cuucauguau": 136, "caguuugaug": 136, "uugagaauac": 136, "uuugaauuaa": 136, "aagucuuuuu": 136, "uuauuuuuuu": 136, "trascrib": 136, "verifi": [136, 149, 182, 187], "transcrib": [136, 139, 279, 280, 450, 878], "soppos": 136, "deal": [136, 190, 526, 538, 719, 876], "embl_gen": 136, "ftp": [136, 148, 194], "pub": [136, 148, 194], "usrman": 136, "view": 136, "displai": [136, 250, 273, 282, 320, 340, 371, 392, 425, 448, 478, 492, 605, 700], "brows": 136, "easi": [137, 138, 146], "db": 137, "149855": 137, "cgatgtcgatcgatcgatcgatcag": 137, "34989": 137, "catcgatcgatcgatgcatgcatgcatg": 137, "accompani": [137, 548, 817], "particuarli": 137, "instrument": 137, "phred": [137, 138], "nonneg": 137, "deflin": 137, "split": [137, 138, 144, 147], "blank": [137, 138, 142, 143, 144, 146, 515, 564, 590], "whitespac": [137, 138, 141, 143, 147], "trail": [137, 138, 141], "semicolon": [137, 140], "resembl": 137, "request": [137, 506, 521, 559, 569, 583, 596, 765, 839, 876], "tracker": [137, 162], "pull": 137, "welcom": 137, "greater": [137, 204, 224, 295, 346, 399, 458, 534, 600, 602, 603, 604, 605, 608, 727, 728, 729], "immedi": [137, 144, 777], "repect": 137, "strictli": [137, 529, 534, 545, 756], "enforc": [137, 457], "itself": [137, 144, 148, 192, 194, 223, 282, 345, 398, 457, 495, 608, 700, 735, 878], "standard": [137, 138, 140, 142, 146, 276, 279, 280, 282, 292, 293, 342, 395, 452, 454, 455, 493, 499, 526, 529, 552, 576, 601, 602, 715, 718, 721, 722, 876, 878], "remaind": 137, "iupac": [137, 138, 144, 145, 223, 253, 282, 292, 345, 398, 428, 457, 878], "lexicon": [137, 138, 144], "sciki": 137, "newlin": [137, 142, 144, 149, 151, 182, 183, 187, 188, 191], "additon": 137, "maintain": [137, 142, 149, 589, 713, 714, 724, 727], "seq_num": [137, 138, 139, 140, 145], "50th": [137, 529], "id_whitespace_replac": [137, 138], "disk": [137, 548], "potenti": [137, 263, 330, 382, 438, 483, 698, 794, 816, 883], "description_newline_replac": [137, 138], "max_width": 137, "width": [137, 141, 144], "longer": [137, 144, 526, 728], "caveat": [137, 526], "never": [137, 147], "exce": [137, 144], "12345": [137, 457], "better": [137, 713, 714, 876], "runtim": [137, 223, 345, 398, 841, 883], "affect": [137, 142, 282, 283, 289, 457, 600, 604], "five": [137, 148, 515, 529, 564, 590, 815], "turkei": [137, 144], "aagctngggcatttcagggtgagcccgggcaatacagggtat": 137, "salmo": [137, 144], "gair": 137, "aagccttggcagtgcagggtgagccgtgg": 137, "ccgggcacggtat": 137, "sapien": 137, "accggttggccgttcagggtacaggttggccgttcagggtaa": 137, "seq4": 137, "chimp": [137, 144], "aaacccttgccg": 137, "ttacgcttaaac": 137, "cgaggccgggac": 137, "actcat": 137, "seq5": 137, "gorilla": [137, 144], "aaacccttgccggtacgcttaaaccattgccggtacgcttaa": 137, "copyright": [137, 144], "1986": [137, 142, 144, 714], "2008": [137, 144], "washington": [137, 142, 144, 814], "joseph": [137, 144, 881], "felsenstein": [137, 144, 881], "permiss": [137, 142, 144], "grant": [137, 144], "fee": [137, 144], "charg": [137, 144], "fl": 137, "presum": 137, "aagccttggcagtgcagggtgagccgtggccgggcacggtat": 137, "aaacccttgccgttacgcttaaaccgaggccgggacactcat": 137, "didn": [137, 883], "detect": [137, 139, 146, 183, 188, 529, 602, 728], "infeas": 137, "stream": [137, 140, 876], "loop": [137, 811, 812], "aagctngggc": [137, 144], "atttcagggt": [137, 144], "gagcccgggc": [137, 144], "aatacagggt": [137, 144], "aagccttggc": 137, "agtgcagggt": [137, 144], "gagccgtggc": [137, 144], "cgggcacggt": [137, 144], "accggttggc": 137, "cgttcagggt": [137, 144], "acaggttggc": [137, 144], "aaacccttgc": [137, 144], "cgttacgctt": [137, 144], "aaaccgaggc": [137, 144], "cgggacactc": [137, 144], "cggtacgctt": [137, 144], "aaaccattgc": [137, 144], "fifth": 137, "api": [137, 185, 523], "standalon": 137, "cgatgtc": 137, "catcgtc": 137, "39": [137, 143, 544], "79": [137, 140, 143], "fasta_fl": 137, "qual_fl": 137, "uint8": [137, 138, 145, 223, 225, 242, 246, 261, 262, 267, 268, 269, 270, 276, 296, 312, 316, 329, 334, 335, 336, 337, 342, 345, 347, 363, 367, 381, 386, 387, 388, 389, 395, 398, 400, 417, 421, 436, 437, 442, 443, 444, 445, 452, 457, 459, 475, 476, 482, 487, 488, 489, 490, 493], "new_fasta_fh": 137, "new_qual_fh": 137, "dj": 137, "pearson": [137, 602, 605, 608, 760], "wr": [137, 608], "1985": [137, 223, 294, 345, 398, 457], "sensit": [137, 146, 266, 333, 385, 441, 486], "4693": 137, "1435": 137, "41": [137, 143], "en": [137, 138, 147, 815], "wikipedia": [137, 138, 147, 815, 881], "wiki": [137, 138, 144, 147, 815], "fasta_format": 137, "blastcgihelp": 137, "shtml": 137, "broadinstitut": 137, "crd": 137, "php": 137, "madden": 137, "oct": [137, 139], "2003": [137, 526], "aug": 137, "mcentyr": 137, "ostel": 137, "editor": 137, "handbook": 137, "internet": [137, 148], "bethesda": 137, "md": 137, "nation": [137, 148, 507], "center": [137, 148, 530, 601, 713, 715, 719, 722], "biotechnologi": [137, 148], "chapter": [137, 720], "nbk21097": 137, "evolut": [137, 142, 144, 607, 608, 755, 814, 815], "genet": [137, 142, 144, 148, 279, 280, 282, 283, 289, 290, 291, 292, 293, 454, 455, 607, 814, 878], "invent": 138, "jim": 138, "mullikin": 138, "wellcom": 138, "trust": 138, "sanger": 138, "institut": 138, "formal": [138, 148, 526], "conceptu": [138, 603], "aacaccaaacttctccaccacgtgagctacaaaag": 138, "cabcacc": 138, "lb": 138, "ccyt": 138, "wf": [138, 883], "tatgtatatataacatatacatatatacatacata": 138, "kz": 138, "py": [138, 149], "yy": 138, "bt": 138, "aT": 138, "bbb": 138, "printabl": [138, 145], "ascii": [138, 145, 146, 149, 276, 342, 395, 452, 493, 495, 753, 881], "decod": [138, 191], "excel": [138, 146], "supplementari": [138, 529], "solexa": 138, "unfortun": [138, 727], "notabl": 138, "illumina": [138, 145], "highlight": 138, "foundat": 138, "obf": 138, "biopython": 138, "bioperl": [138, 144], "offset": [138, 139], "126": 138, "93": 138, "illumina1": [138, 145], "later": [138, 726], "59": 138, "Not": [138, 223, 276, 342, 395, 452, 493, 604], "truncat": [138, 505, 558, 582, 709, 815, 883], "outsid": [138, 194, 218, 250, 320, 371, 425, 478], "phred_offset": [138, 145], "convers": [138, 191, 584], "explicit": 138, "whenev": [138, 719], "aacaccaaacttctccacc": 138, "acgtgagctacaaaag": 138, "reload": 138, "tatgtatata": 138, "taacatatac": 138, "atatatacat": 138, "acata": 138, "new_fh": 138, "ffffx": 138, "ab": [138, 294], "bbf": 138, "ka": 138, "bbx": 138, "jyzox": 138, "zxx": 138, "fff": 138, "fasffbf": 138, "sffaaa": 138, "peter": 138, "cock": 138, "christoph": 138, "naohisa": 138, "goto": 138, "michael": 138, "heuer": 138, "rice": 138, "nucl": 138, "1767": 138, "1771": 138, "publish": [138, 147], "decemb": 138, "2009": [138, 139, 608], "1093": [138, 815], "nar": 138, "gkp1137": 138, "oxfordjourn": 138, "fastq_format": 138, "flat": [139, 263, 330, 382, 438, 483], "gbk": 139, "renam": [139, 259, 271, 327, 338, 378, 390, 434, 446, 529], "genpept": 139, "essenti": 139, "collabor": 139, "joint": 139, "effort": 139, "ddbj": 139, "organis": 139, "layout": 139, "webpag": 139, "interval_metadata": [139, 140, 194, 204, 216, 219, 223, 228, 230, 257, 294, 299, 301, 325, 345, 350, 352, 376, 398, 403, 405, 432, 457, 462, 464, 479], "sub": [139, 140, 194, 729], "keep": [139, 146, 217, 230, 301, 352, 405, 464, 698, 797, 798], "vocabulari": [139, 140], "infer": [139, 146, 182, 187, 839, 876], "whose": [139, 145, 146, 514, 563, 588, 601, 602, 722], "stranded": 139, "codon_start": 139, "phase": [139, 140], "codon": [139, 148, 279, 282, 292, 293, 345, 454, 495], "dbxref": [139, 140], "cross": 139, "descriptor": [139, 720, 835, 836, 837], "explain": [139, 140, 143, 609, 643, 687, 699, 700, 713, 719, 721], "67": [139, 143, 240, 247, 274, 317, 368, 415, 422, 449, 600, 604, 714, 724, 878], "66": [139, 143, 247, 317, 368, 422, 604, 878], "neighbor": [139, 800, 815], "68": [139, 609, 727], "insid": [139, 142], "remot": 139, "j00123": 139, "discard": [139, 602], "200": [139, 534], "kept": 139, "199": 139, "__locat": 139, "__": 139, "privat": [139, 753], "gb_str": 139, "3k1v_a": 139, "34": [139, 145, 755], "syn": 139, "chain": 139, "Of": 139, "mutant": 139, "preq1": 139, "260656459": 139, "synthet": 139, "artifici": [139, 699], "klein": 139, "edward": 139, "ferr": 139, "amar": 139, "cocryst": 139, "riboswitch": [139, 194], "nat": 139, "343": 139, "344": 139, "19234468": 139, "seqr": 139, "32630": 139, "misc_bind": 139, "bound_moieti": 139, "agaggttcta": 139, "gcacatccct": 139, "ctataaaaaa": 139, "ctaa": 139, "agagguucua": 139, "gcacaucccu": 139, "cuauaaaaaa": 139, "cuaa": 139, "sitemap": 139, "samplerecord": 139, "feature_t": 139, "webfeat": 139, "nuccor": 139, "delimit": [140, 141, 143, 145, 148, 547], "intervalmetadata": [140, 194, 203, 223, 294, 345, 398, 457], "seq_id": 140, "seqid": 140, "attr": [140, 778, 806], "tag": [140, 147, 247, 277, 317, 343, 368, 396, 422, 453, 544], "comma": [140, 141, 142], "predefin": [140, 246, 316, 367, 421, 476], "mean": [140, 142, 149, 191, 204, 219, 223, 252, 253, 427, 428, 506, 521, 526, 529, 532, 534, 544, 559, 569, 583, 596, 665, 687, 713, 717, 718, 719, 722, 724, 725, 727, 728, 876, 881], "derives_from": 140, "ontology_term": 140, "is_circular": 140, "And": [140, 223, 345, 541, 878], "parser": [140, 142], "skip_subregion": 140, "contigu": [140, 194, 263, 330, 382, 438, 483], "region": [140, 194, 204, 263, 330, 382, 438, 483], "exon": [140, 194, 266, 333, 385, 398, 441, 457, 486], "gff_str": 140, "gff": 140, "seq_1": 140, "tgene": 140, "t10": [140, 143], "t90": 140, "tid": 140, "gen1": 140, "texon": 140, "t30": [140, 145], "tparent": 140, "t50": 140, "seq_2": 140, "t80": 140, "t96": 140, "gen2": 140, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 140, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 140, "im": [140, 204, 216], "4604421736": 140, "fuzzi": [140, 194, 195, 203, 204, 215, 216, 457], "foo": [140, 146, 204, 457, 840, 883], "gen": [140, 883], "4603377592": 140, "4603378712": 140, "atgcatgcat": 140, "gcatgcatgc": 140, "120": [140, 534], "ontologi": 140, "tsv": [141, 146], "varieti": 141, "serial": [141, 547, 700, 876], "del": [141, 275, 341, 394, 451, 699], "anywher": [141, 142, 146, 529], "easili": [141, 878], "program": [141, 142, 146, 148], "spreadsheet": [141, 146], "edg": [142, 608, 713, 753, 806], "minim": 142, "june": 142, "english": [142, 602], "subtre": [142, 148, 770, 881], "node_info": 142, "children": [142, 545, 735, 740, 744, 752, 756, 767, 769, 776, 780, 787, 791, 793, 800], "null": [142, 529, 534, 608, 724], "comment_char": 142, "all_char": 142, "safe_char": 142, "decim": [142, 146, 819], "vice": [142, 608], "versa": [142, 608], "escap": 142, "nest": [142, 547, 602, 802, 881], "semi": 142, "colon": 142, "recal": 142, "alon": [142, 601], "imagin": 142, "parenthesi": 142, "insert": [142, 215, 756], "abil": 142, "child": [142, 204, 241, 311, 362, 416, 474, 544, 735, 756, 787, 791, 809, 881], "bifurc": [142, 545, 772], "alreadi": [142, 147, 149, 150, 161, 162, 163, 457, 548, 602], "who": [142, 728], "sibl": [142, 241, 311, 362, 416, 474], "multifurc": [142, 881], "notat": [142, 146, 345], "recurs": [142, 753, 811, 812], "infinitum": 142, "clariti": 142, "estrang": 142, "omit": [142, 547, 773, 807, 809, 814, 876], "still": [142, 143, 191, 203, 529, 534, 538, 602, 604], "happen": [142, 263, 330, 382, 438, 483, 814, 883], "expon": [142, 543], "disallow": [142, 147, 602], "stricter": [142, 818], "obviou": 142, "yet": [142, 148, 149], "underscor": [142, 144], "liter": 142, "quot": 142, "surround": [142, 534], "a_1": 142, "_1": 142, "commonli": [142, 146, 495, 604, 721, 881], "unpair": 142, "worri": 142, "properli": [142, 191], "un": 142, "permit": [142, 162], "isomorph": [142, 532, 533, 535, 536], "convert_underscor": 142, "unescap": 142, "extern": 142, "ascii_art": [142, 756, 773, 774, 815, 881], "complex": [142, 883], "b_b": 142, "d_d": 142, "becam": 142, "preserv": [142, 713, 714, 719, 797], "newick_doc": 142, "newicktre": 142, "variou": [143, 547, 700, 724, 879, 882], "rda": [143, 700, 713, 714], "cca": [143, 699, 700, 713, 721], "ordinationresult": [143, 604, 713, 714, 719, 720, 721, 819], "six": [143, 280, 282, 293, 455, 529], "eigval": [143, 700], "biplot": [143, 713, 721], "constraint": [143, 700, 714, 721], "07": 143, "08": [143, 146, 724, 727], "46": [143, 603, 728], "species0": 143, "species1": 143, "species2": 143, "01": [143, 724], "09": 143, "species3": 143, "03": [143, 604], "species4": 143, "species5": 143, "species6": 143, "species7": 143, "species8": 143, "70": 143, "69": 143, "site0": 143, "site1": [143, 699], "site2": [143, 699], "site3": [143, 699], "site4": [143, 699], "97": [143, 534], "06": 143, "61": [143, 604, 728], "site5": [143, 699], "04": [143, 724], "site6": [143, 699], "site7": [143, 699], "52": 143, "site8": [143, 699], "47": [143, 724], "site9": [143, 699], "74": 143, "32": [143, 603], "78": [143, 810], "55": [143, 244, 314, 365, 419, 604, 609, 724, 815], "02": [143, 148, 529], "declar": [143, 146], "or_f": 143, "t4": 143, "t9": 143, "t2": [143, 145], "ord_r": 143, "joe": 144, "raxml": 144, "gairaagccttggc": 144, "sapiensaccggttggc": 144, "relax": 144, "interleav": [144, 147], "1x1": 144, "reach": 144, "11th": 144, "reserv": [144, 146], "nucleic": [144, 148, 223, 294, 345, 398, 457], "older": 144, "chunk": 144, "2a": 144, "agagttgaag": 144, "gtatct": 144, "surpass": 144, "recent": [144, 292, 457, 602], "_except": 144, "phylipformaterror": 144, "shorter": 144, "post": [144, 724, 728], "phylogeni": [144, 607, 608], "phylo": 144, "obsolet": 144, "phylip_multiple_alignment_format": 144, "machin": 145, "lane": 145, "tile": 145, "casava": 145, "ommit": 145, "clear": 145, "exclud": [145, 544, 587, 594, 800], "acgtac": 145, "rubbbbrbcefgh": 145, "cgggcattgca": 145, "cgggcasdgca": 145, "acgta": 145, "aataaac": 145, "getaaafhwqaaf": 145, "catttagga": 145, "tgca": 145, "tjflkafnkkghvm": 145, "t3": 145, "t34": 145, "tacg": 145, "trubbbbrbcefgh": 145, "tcgggcattgca": 145, "tcgggcasdgca": 145, "t35": 145, "tacgta": 145, "tgetaaafhwqaaf": 145, "tcatttagga": 145, "ttjflkafnkkghvm": 145, "illumina_1": 145, "lane_numb": 145, "machine_nam": 145, "read_numb": 145, "run_numb": 145, "tile_numb": 145, "tac": 145, "aata": 145, "aac": 145, "biowulf": 145, "app": 145, "casava_ug_15011196b": 145, "pdf": 145, "port": 146, "qiime2": 146, "sample_metadata": 146, "2024": 146, "tutori": [146, 149], "q2": 146, "categor": [146, 600, 603, 699, 710], "id1": 146, "id2": 146, "bar": [146, 840, 883], "id3": 146, "skbio": [146, 875], "samplemetadata": 146, "matter": [146, 195, 216, 499, 552, 576], "edit": [146, 602, 720], "export": 146, "straightforward": [146, 878], "doubt": 146, "microsoft": 146, "googl": 146, "sheet": 146, "adher": 146, "understand": [146, 529], "meta": [146, 726, 727], "keemei": 146, "ons": 146, "anytim": 146, "cumbersom": 146, "cell": [146, 727], "pound": 146, "sign": [146, 529, 819], "inlin": 146, "sole": 146, "mix": 146, "insensit": [146, 507, 529, 534], "sampleid": 146, "fetureid": 146, "mostli": [146, 147], "biom": [146, 880], "qiita": 146, "otuid": 146, "sample_nam": 146, "notstart": 146, "At": [146, 149], "goal": [146, 876], "plugin": 146, "anyon": 146, "prepar": 146, "help": [146, 148], "announc": 146, "forum": 146, "problemat": [146, 806], "tend": 146, "command": [146, 148, 292], "alphanumer": 146, "period": 146, "dash": 146, "rememb": [146, 194], "collaps": [146, 756], "plan": 146, "problem": [146, 529, 719], "cual": 146, "assist": [146, 883], "paper": 146, "na": 146, "recogn": 146, "direct": [146, 148, 714, 735], "transpar": [146, 191], "q2cli": 146, "sk": 146, "wish": [146, 881], "123": [146, 698], "0123": 146, "000123": 146, "1e9": 146, "23e": 146, "2e": 146, "5e": 146, "digit": 146, "stai": 146, "exceed": 146, "unsupport": [146, 345], "undefin": [146, 726, 727, 760], "infin": 146, "upsk": 147, "se": 147, "infern": 147, "ss": 147, "pmid": [147, 602, 815], "9223489": 147, "rm": [147, 610, 676], "role": [147, 495, 727], "pseudoknot": 147, "turnip": 147, "yellow": 147, "mosaic": 147, "viru": 147, "synthesi": 147, "viral": 147, "polymeras": 147, "deiman": 147, "ba": 147, "kortlev": 147, "pleij": 147, "cw": 147, "virol": 147, "5990": 147, "5996": 147, "af035635": 147, "619": 147, "641": 147, "ugaguucucgaucucuaaaaucg": 147, "m24804": 147, "104": [147, 534], "ugaguucucuaucucuaaaaucg": 147, "j04373": 147, "6212": 147, "6234": 147, "uaaguucucgaucuuuaaaaucg": 147, "m24803": 147, "uaaguucucgaucucuaaaaucg": 147, "ss_con": 147, "aaa": [147, 263, 330, 382, 438, 483], "ggt": [147, 273, 340, 392, 448, 492], "accgttcg": 147, "pfam": 147, "rfam": 147, "whole": [147, 717, 725], "come": [147, 608, 802], "cb": [147, 726], "domain": [147, 345, 773, 807], "nh": 147, "tn": 147, "unlik": [147, 698], "nhx": 147, "rc": [147, 240, 415, 515, 564, 590, 710], "kestrel": 147, "gorlick": 147, "medlin": 147, "o83071": 147, "259": 147, "312": 147, "083071": 147, "o31698": 147, "ccchhhhhhhhhhhhhhh": 147, "eeeeeeee": 147, "eeeeeeeehhh": 147, "ccccchhhhhhhhhhhhh": 147, "eeeeeeeeeeh": 147, "final": [147, 608, 883], "cc": [147, 273, 282, 340, 392, 448, 492], "intracellular": 147, "192": 147, "88": [147, 604, 727], "139": 147, "bacillu": 147, "subtili": 147, "mtcraqliavprassla": 147, "aiacaqkm": 147, "rvsrv": 147, "sa": 147, "999887756453524252": 147, "55152525": 147, "36463": 147, "mqhvsapvfvfectrlai": 147, "vqhklrah": 147, "srava": 147, "mieadkvahvqvgnnleh": 147, "allvltkt": 147, "gytai": 147, "evmltdiprlhindpimk": 147, "gfgmvinn": 147, "gfv": 147, "o31699": 147, "AS": 147, "________________": 147, "____________________": 147, "IN": 147, "____________1______________2_________": 147, "eeeee": 147, "stockholm_format": 147, "sonnhamm": 147, "sbc": 147, "su": 147, "dump": [148, 881, 883], "classif": [148, 710], "pipe": 148, "host": [148, 608], "portal": 148, "daili": 148, "archiv": [148, 840], "month": 148, "pattern": [148, 249, 277, 319, 343, 370, 396, 424, 453, 477, 878, 883], "taxid": 148, "citat": 148, "hierarch": [148, 544], "tax_id": [148, 773], "superkingdom": 148, "prefix": 148, "inherit": [148, 294, 457], "div": 148, "flag": [148, 881], "mitochondri": [148, 279, 291, 454], "mgc": 148, "hidden": 148, "suppress": [148, 600, 604, 605], "lineag": [148, 727, 774, 807], "free": [148, 841, 883], "2018": 148, "new_taxdump": 148, "classic": 148, "plu": [148, 223, 345, 398], "extra": [148, 149, 600, 601, 603, 604, 665], "aforement": 148, "plastid": 148, "pgc": 148, "hydrogenosom": 148, "hgc": 148, "name_txt": 148, "cde": 148, "bct": 148, "vrt": 148, "mam": 148, "pri": 148, "abbrevi": [148, 700], "scheme": [148, 191, 515, 564, 590], "nodes_new": 148, "nodes_slim": 148, "parent_tax_id": [148, 773], "leftmost": 148, "till": 148, "crop": 148, "tno": 148, "t131567": 148, "tsuperkingdom": 148, "t335928": 148, "tgenu": 148, "131567": 148, "335928": 148, "federhen": 148, "d1": [148, 878], "d136": 148, "d143": 148, "schoch": 148, "ciufo": 148, "domrachev": 148, "hotton": 148, "kannan": 148, "khovanskaya": 148, "karsch": 148, "mizrachi": 148, "2020": 148, "comprehens": 148, "curat": 148, "kan": 148, "2022": 148, "entrez": 148, "unix": 148, "taxdump_readm": 148, "ncbiinsight": 148, "ioregistri": [149, 161, 163], "io_registri": 149, "focu": 149, "submodul": 149, "myformat": [149, 161, 162, 163], "create_format": [149, 161, 162, 163], "factori": [149, 161, 162, 163, 175, 186], "ideal": 149, "evaul": 149, "binari": [149, 151, 161, 162, 163, 191, 544, 545, 608, 713, 721, 808, 840], "readi": [149, 875], "decor": [149, 161, 162, 163, 204, 294, 757, 814, 821, 841, 853, 854, 864, 875], "onto": [149, 181, 720, 814], "_myformat_sniff": 149, "membership": 149, "futher": 149, "someskbioclass": [149, 876], "_myformat_to_some_skbio_class": 149, "kwarg1": 149, "filesentinel": [149, 161, 163], "auxilari": 149, "_some_skbio_class_to_myformat": 149, "obj": [149, 163, 184, 189, 832, 883], "whatev": 149, "receiv": [149, 151, 162, 250, 320, 371, 425, 478, 814], "further": [149, 727, 881], "fileformaterror": 149, "satisfi": [149, 219, 726, 864], "__init__": [149, 161, 163], "execut": [149, 621, 665, 842, 864, 883], "import_modul": 149, "boilerpl": 149, "busi": 149, "logic": [149, 841], "arg": [149, 175, 186, 279, 280, 345, 454, 455], "compresslevel": [149, 191], "auth": 149, "password": 149, "buffer": [149, 191, 698], "buffer_s": 149, "closefd": 149, "exclus": [149, 194, 204, 215, 242, 261, 312, 329, 363, 381, 417, 436, 475, 482, 529], "handler": [151, 182, 184, 187, 189, 191], "bufferedread": [151, 161, 162, 191], "bufferedwrit": [151, 163, 191], "textiobas": [151, 161, 162, 163, 191], "unabl": 151, "is_binary_format": 151, "monkey_patched_read": 151, "monkei": [151, 181], "patch": [151, 181], "monkey_patched_writ": 151, "sniffer_funct": 151, "cl": [161, 163, 176, 178, 179, 180, 294, 825], "monkey_patch": [161, 163], "transform": [161, 163, 263, 330, 382, 438, 483, 526, 527, 528, 532, 533, 535, 536, 540, 545, 713, 719, 721], "attach": [161, 163, 755], "overriden": [161, 162, 163], "duplicateregistrationerror": [161, 162, 163], "add_format": [161, 163], "myobject": [161, 163], "myformat_read": [161, 163], "readlin": [161, 191], "myformat2": [161, 162, 163], "thrown": [162, 775], "ask": 162, "myformat_sniff": 162, "default_write_format": 163, "format_object": 174, "regsistri": [175, 186], "format_nam": [176, 177, 178], "useabl": 181, "unrecognizedformaterror": [182, 183, 184, 187, 188, 189], "formatidentificationwarn": [182, 187], "agre": [182, 187], "member": [182, 187, 841, 864, 883], "argumentoverridewarn": [182, 187], "claim": [183, 188], "registr": 185, "auto": [191, 276, 342, 395, 452, 493], "textiowrapp": 191, "bufferedrandom": 191, "tempfil": 191, "temporaryfil": 191, "namedtemporaryfil": 191, "writabl": 191, "unwrit": 191, "unread": 191, "byte": [191, 273, 340, 392, 448, 492], "gzip": 191, "bz2": 191, "decompress": 191, "legal": 191, "inclus": [191, 194, 204, 215, 242, 261, 312, 329, 363, 381, 417, 436, 475, 482, 601], "manag": [191, 192, 193], "closeabl": 191, "garbag": 191, "reflect": [191, 608, 791, 796], "flush": 191, "clean": [191, 752, 791], "bzh91ai": 192, "sy": 192, "x03": 192, "x89": 192, "x0c": 192, "xa6": 192, "x00": 192, "x01": 192, "xc1": 192, "x108": 192, "x9ah3m": 192, "x1c": 192, "xb7": 192, "x8b": 192, "xb9": 192, "x9c": 192, "xc4": 192, "x86": 192, "nb": 192, "nc": 192, "transcript": 194, "operon": 194, "accommod": 194, "gene_nam": 194, "product": [194, 537, 602, 875], "easier": [194, 495], "ft_current": 194, "hypothet": 194, "sai": [194, 204, 728], "gena": 194, "nt": 194, "shown": [194, 529, 713], "diagram": 194, "tggattctgc": 194, "0123456789": 194, "drop": [194, 204, 230, 301, 352, 405, 464, 605, 699, 714, 794, 814], "setter": 203, "copy_from": 204, "storag": 204, "modif": [204, 608], "cover": [204, 507, 881], "coupl": 204, "unbound": [204, 218], "speed": [204, 719], "build": [204, 544], "defer": 204, "until": [204, 544, 798], "fetch": [204, 881], "_interval_tre": 204, "_rebuild_tre": 204, "stale": 204, "delet": [204, 778, 794, 822], "_is_stale_tre": 204, "sagb": [204, 216], "sagc": 204, "saga": [204, 216, 457], "intvl": 204, "num_interval_featur": 204, "interablemetadata": 216, "shift": 216, "im1": 216, "im2": 216, "negat": 217, "middl": 218, "live": 218, "reca": 219, "900": 219, "1000": [219, 698], "criteria": [219, 726, 810], "front": [221, 544], "uppercas": [223, 345, 398, 457], "turn": [223, 345, 398, 721, 818, 883], "behav": [223, 345, 398, 602], "compliant": [223, 345, 398], "canon": [223, 275, 294, 341, 345, 394, 398, 451, 495, 699, 714, 721, 875], "nucleobas": [223, 398], "adenin": [223, 398], "cytosin": [223, 398], "guanin": [223, 398], "purin": [223, 248, 318, 369, 423, 878], "pyrimidin": [223, 248, 423], "weak": 223, "keto": 223, "inosin": 223, "break": [223, 345, 398], "nomenclatur": [223, 294, 345, 398, 457], "incomplet": [223, 294, 345, 398, 457], "3021": [223, 294, 345, 398, 457], "3030": [223, 294, 345, 398, 457], "cornish": [223, 294, 345, 398, 457], "bowden": [223, 294, 345, 398, 457], "accgaat": 223, "86": [223, 398], "complement_map": [223, 240, 398, 415], "complement": [223, 262, 274, 292, 398, 437, 449, 878], "definite_char": [223, 294, 345, 398], "degenerate_char": [223, 294, 345, 398], "degenerate_map": [223, 247, 294, 317, 345, 368, 398, 422, 878], "gap_char": [223, 244, 294, 314, 345, 365, 398, 419], "noncanonical_char": [223, 294, 345, 398], "nondegenerate_char": [223, 294, 345, 398], "observed_char": [223, 250, 294, 320, 345, 371, 398, 425, 457, 478], "wildcard_char": [223, 276, 294, 342, 345, 395, 398, 452, 493], "wildcard": [223, 275, 276, 294, 341, 342, 345, 394, 395, 398, 451, 452, 493], "truth": [224, 295, 346, 399, 458], "truthi": [224, 295, 346, 399, 458], "put": [225, 296, 347, 400, 459], "ggucgugaagga": [225, 230, 296, 301, 347, 352, 400, 405, 457, 459, 464], "ggu": [225, 296, 347, 400, 459], "ccc": [225, 296, 347, 400, 459], "aagga": [230, 301, 352, 405, 464], "cgagc": [230, 301, 352, 405, 464], "ggucg": [230, 242, 301, 312, 352, 363, 405, 417, 464, 475], "guc": [230, 301, 352, 405, 464], "gguc": [233, 235, 238, 246, 267, 268, 269, 270, 304, 306, 309, 316, 334, 335, 336, 337, 355, 357, 360, 367, 386, 387, 388, 389, 408, 410, 413, 421, 442, 443, 444, 445, 467, 469, 472, 476, 487, 488, 489, 490], "ggucguaaagga": [239, 310, 361, 414, 473], "hello": [239, 310, 361, 414, 473], "nucleotidemixin": [240, 274, 415, 449], "reverse_compl": [240, 262, 415, 437, 878], "ttcatt": [240, 262, 274, 415, 437, 449], "aagtaa": [240, 415], "aatgaa": [240, 262, 274, 415, 437, 449], "intersect": [241, 311, 362, 416, 474, 736, 737, 761, 764], "ggaa": [241, 311, 362, 416, 474], "acgtggaa": [241, 311, 362, 416, 474], "coercion": [241, 311, 362, 416, 474], "gg": [242, 248, 312, 318, 363, 369, 417, 423, 475], "has_definit": [243, 245, 255, 259, 271, 313, 315, 323, 327, 338, 364, 366, 374, 378, 390, 418, 420, 430, 434, 446], "acwgn": [243, 245, 271, 313, 315, 338, 364, 366, 390, 418, 420, 446], "ggtc": [244, 314, 365, 419], "att": [244, 314, 365, 419], "ggtccattc": [244, 314, 365, 419], "has_degener": [245, 254, 259, 315, 322, 327, 366, 373, 378, 420, 429, 434], "ham": [246, 316, 367, 421, 476, 547, 878], "fraction_diff": [246, 316, 367, 421, 476], "fraction_sam": [246, 316, 367, 421, 476], "aguc": [246, 267, 269, 316, 334, 336, 367, 386, 388, 421, 442, 444, 476, 487, 489], "custom_metr": [246, 316, 367, 421, 476], "trg": [247, 277, 317, 343, 368, 396, 422, 453], "seq_gener": [247, 317, 368, 422], "tgg": [247, 277, 317, 343, 368, 396, 422, 453], "motif_typ": [248, 318, 369, 423], "min_length": [248, 263, 318, 330, 369, 382, 423, 438, 483, 878], "motif": [248, 318, 369, 423, 878], "acggggaggcggag": [248, 318, 369, 423], "motif_slic": [248, 318, 369, 423], "ggggagg": [248, 318, 369, 423], "ggag": [248, 318, 369, 423], "disrupt": [248, 318, 369, 423, 878], "regex": [249, 277, 319, 343, 370, 396, 424, 453, 477], "compil": [249, 277, 319, 343, 370, 396, 424, 453, 477, 729], "pre": [249, 277, 319, 343, 370, 396, 424, 453, 477, 495, 507, 512, 728], "aatataccggttataa": [249, 319, 370, 424, 477], "tata": [249, 319, 370, 424, 477], "tataa": [249, 319, 370, 424, 477], "char": [250, 277, 320, 343, 371, 396, 425, 453, 478], "kmer_frequ": [250, 320, 371, 425, 478], "iter_km": [250, 320, 371, 425, 478], "agaagacc": [250, 320, 371, 425, 478], "freq": [250, 265, 320, 332, 371, 384, 425, 440, 478, 485], "has_gap": [251, 321, 372, 426], "gc_frequenc": [252, 427], "degap": [252, 253, 427, 428, 878], "acgtacgt": [252, 427], "acttagtt": [252, 427], "asst": [252, 253, 427, 428], "rykmbdhvn": [252, 253, 427, 428], "stand": [253, 428, 602], "ie": [253, 428], "gc_content": [253, 428], "nwnnnnnn": [254, 259, 322, 327, 373, 378, 429, 434], "ancacwwgacgtt": [254, 255, 259, 322, 323, 327, 373, 374, 378, 429, 430, 434], "acac": [255, 264, 323, 331, 374, 383, 430, 439, 484], "gacgtt": [255, 256, 323, 324, 374, 375, 430, 431], "acacgacgtt": [256, 261, 264, 324, 329, 331, 375, 381, 383, 431, 436, 439, 482, 484], "cac": [256, 264, 324, 331, 375, 383, 431, 439, 484], "aatgtt": [262, 437], "invert": [263, 330, 382, 438, 483], "skip": [263, 330, 382, 438, 483, 600, 602, 603, 604, 608], "adjac": [263, 330, 382, 438, 483], "ungap": [263, 330, 382, 438, 483], "cccc": [263, 330, 382, 438, 483], "no_gap": [263, 330, 382, 438, 483], "ungapped_subsequ": [263, 330, 382, 438, 483], "find_motif": [263, 330, 382, 438, 483, 878], "find_with_regex": [263, 330, 382, 438, 483, 878], "acdfnasanftacgnpnrtesl": [263, 330, 382, 438, 483], "subseq": [263, 330, 382, 438, 457, 483], "glycosyl": [263, 330, 369, 382, 438, 483, 878], "nasanfta": [263, 330, 382, 438, 483], "nrte": [263, 330, 382, 438, 483], "kmer": [264, 265, 331, 332, 383, 384, 439, 440, 484, 485, 525], "gacg": [264, 331, 383, 439, 484], "aca": [264, 265, 331, 332, 383, 384, 439, 440, 484, 485], "cga": [264, 331, 383, 439, 484], "gac": [264, 331, 383, 439, 484], "cgt": [264, 331, 383, 439, 484], "gtt": [264, 331, 383, 439, 484], "acacatttatta": [265, 332, 384, 440, 485], "cat": [265, 332, 384, 440, 485, 726, 727], "tta": [265, 332, 384, 440, 485], "intron": [266, 333, 385, 398, 441, 486], "mismatch_frequ": [267, 334, 386, 442, 487, 878], "gauu": [268, 270, 335, 337, 387, 389, 443, 445, 488, 490], "match_frequ": [269, 336, 388, 444, 489, 878], "chosen": [273, 340, 392, 448, 492, 538, 601, 710, 721, 729], "ggtaccaacg": [273, 340, 392, 448, 492], "is_reverse_compl": [274, 449], "wild": [275, 341, 394, 451], "noncanon": [275, 341, 394, 451], "mask_gap": [276, 342, 395, 452, 493], "return_cod": [276, 342, 395, 452, 493], "gap_charact": [276, 342, 395, 452, 493], "subsitut": [276, 342, 395, 452, 493], "absent": [276, 342, 395, 452, 493, 719], "meepqsdpsv": [276, 342, 395, 452, 493], "idx": [276, 342, 395, 452, 493], "uniq": [276, 342, 395, 452, 493], "dempqsv": [276, 342, 395, 452, 493], "ctcaaaagtc": [276, 342, 395, 452, 493], "tcga": [276, 342, 395, 452, 493], "sm": [276, 342, 395, 452, 493], "by_nam": [276, 342, 395, 452, 493, 495, 512], "nuc": [276, 342, 395, 452, 493, 495, 507], "gag": [276, 342, 395, 452, 493], "ctc": [276, 342, 395, 452, 493], "acgtn": [276, 342, 395, 452, 493], "gagrctc": [276, 342, 395, 452, 493], "within_captur": [277, 343, 396, 453], "account": [277, 343, 396, 453, 643, 713, 721, 728, 881], "captur": [277, 343, 396, 453], "tcg": [277, 343, 396, 453], "translate_six_fram": [278, 279, 292, 450, 454], "taacgtta": [278, 450], "uaacguua": [278, 450], "reverse_transcrib": 279, "atgccactttaa": [279, 280], "mpl": [279, 280, 282, 292, 293, 454, 455], "yeast": [279, 454], "mpt": [279, 454], "independ": [280, 293, 455, 608, 620, 621, 642, 653, 686, 697, 808], "reading_fram": [280, 282, 292, 293, 455], "rf": [280, 293, 455], "geneticcod": [280, 454, 455, 878], "chf": [280, 293, 455], "atl": [280, 293, 455], "lkwh": [280, 293, 455], "sg": [280, 293, 455], "kva": [280, 293, 455], "amino_acid": [282, 283, 289], "from_ncbi": [282, 283, 292, 293, 454, 455], "uuuuuuuuuuuuuuuuccccccccccccccccaaaaaaaaaaaaaaaagggggggggggggggg": 282, "uuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggg": 282, "ucagucagucagucagucagucagucagucagucagucagucagucagucagucagucagucag": 282, "wprintgc": [282, 290, 291], "ffllssssyi": 282, "wllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 282, "base1": 282, "base2": 282, "base3": 282, "candid": [282, 728], "divis": [282, 544, 722], "sr1": 282, "gracilibacteria": 282, "ccgwllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 282, "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm": 282, "augccacuuuaa": [282, 293, 454, 455], "named_gc": 283, "table_id": 291, "thraustochytrium": 291, "tmgc": 291, "prior": [292, 602, 605, 773, 842, 852, 883], "methionin": [292, 345], "fmet": 292, "aguauucugccacuguaagaa": 292, "sgc": [292, 293], "silpl": 292, "cug": 292, "trim": 292, "fact": 292, "conform": 294, "abstract": 294, "grammar": [294, 457], "static": 294, "classproperti": 294, "customsequ": 294, "ababacac": 294, "xxxxxx": 294, "ala": 345, "cy": 345, "cystein": 345, "asp": 345, "aspart": 345, "glu": 345, "glutam": 345, "phe": 345, "phenylalanin": 345, "gly": 345, "hi": 345, "histidin": 345, "il": 345, "isoleucin": 345, "ly": 345, "lysin": 345, "leu": 345, "leucin": 345, "asn": 345, "asparagin": 345, "pro": 345, "prolin": 345, "gln": 345, "glutamin": 345, "arginin": 345, "ser": 345, "serin": 345, "thr": 345, "threonin": 345, "val": 345, "valin": 345, "trp": 345, "tyr": 345, "tyrosin": 345, "asx": 345, "glx": 345, "xle": 345, "xaa": 345, "ter": [345, 714], "sec": 345, "selenocystein": 345, "pyl": 345, "pyrrolysin": 345, "pam": [345, 495, 507], "paw": [345, 380, 393], "stop_char": 345, "has_stop": 393, "accgaau": 398, "genetic_cod": [454, 455], "immut": [457, 878], "metdata": 457, "ncrna": 457, "ggucgugaag": 457, "ga": [457, 878], "alic": 457, "desc": 457, "retriev": [457, 572], "attributeerror": [457, 821], "destin": 457, "Be": 457, "illustr": [457, 600, 604], "hasn": [457, 729], "bob": 457, "propag": 457, "carol": 457, "chemic": [495, 728], "mutat": [495, 507, 735], "likelihood": 495, "homolog": 495, "chanc": [495, 608], "complic": [495, 876], "asymmetr": [495, 499, 552, 576], "former": 495, "mat": [495, 507, 510, 513, 527, 528, 530, 531, 532, 533, 535, 536, 538, 539, 540, 804], "blosum62": [495, 507], "transpos": [495, 548, 572], "is_ascii": 495, "png": [495, 548, 572, 700], "figur": [495, 515, 548, 564, 572, 590, 710], "svg": [495, 548, 572, 700], "lookup_id": [496, 514, 549, 563, 573, 588], "extract": [499, 534, 547, 548, 552, 576, 600, 604, 714, 755, 878], "missingiderror": [499, 506, 509, 514, 521, 552, 559, 561, 563, 569, 576, 583, 586, 588, 596], "quick": [499, 552, 576, 584, 710, 713], "from_": [506, 559, 583], "to_": [506, 559, 583], "allow_overlap": [506, 559, 583], "stabl": [506, 521, 559, 569, 583, 596, 754], "get_nam": 507, "dnaful": 507, "pam30": 507, "pam70": 507, "pam250": 507, "blosum45": 507, "blosum50": 507, "blosum80": 507, "blosum90": 507, "dayhoff": 507, "schwartz": 507, "orcutt": 507, "1978": 507, "atla": 507, "345": 507, "352": 507, "proceed": 507, "academi": 507, "inconsist": 510, "heatmap": [515, 564, 590], "matplotlib": [515, 564, 590, 700, 710], "colormap": [515, 564, 590, 710], "colorbar": [515, 564, 590, 710], "red": [515, 564, 590], "binary_dm": [516, 522, 565, 570, 591, 597], "redund": [517, 548, 566, 572, 592, 699, 721], "gather": [521, 569, 596, 881], "from_iter": 523, "agggta": 524, "cgttta": 524, "atcggcgat": 525, "gcagatgtg": 525, "9230769230": 525, "omic": 526, "inher": [526, 608], "absolut": [526, 534, 602, 839], "x_": [526, 527, 544, 724, 728], "leq": 526, "compon": [526, 528, 538, 539, 540, 541, 542, 543, 676, 700, 713, 719, 883], "aitchison": [526, 527, 528, 532, 533, 535, 536, 544], "geometri": [526, 528, 532, 533, 536], "euclidean": [526, 547, 601, 713, 719, 721], "perturb": [526, 542], "power": [526, 534, 876], "style": [526, 811, 812], "simul": [526, 724, 727, 728], "strategi": [526, 538, 815], "centr": [526, 532, 533, 717], "clr": [526, 533, 534, 545], "isometr": [526, 527, 528, 535, 536], "ilr": [526, 536, 545], "hypothesi": [526, 529, 534, 602, 605, 608, 724], "regress": [526, 602, 721, 728], "pseudocount": [526, 529, 534], "distort": 526, "pawlowski": [526, 540, 546], "glahn": [526, 540, 546], "egozcu": [526, 535, 536, 540, 544, 546], "tolosana": [526, 544], "delgado": [526, 544], "wilei": 526, "chichest": 526, "logratio": 526, "geologi": 526, "martin": [526, 538], "fernandez": [526, 538], "imput": [526, 538], "denominator_idx": [527, 528], "simplex": [527, 535, 536, 544], "denominator_col": 527, "denomin": [527, 544], "amen": 527, "multivari": [527, 600, 601, 603, 604, 713, 714], "rightarrow": [527, 528, 532, 533, 535, 536], "mathbb": [527, 528, 529, 532, 533, 535, 536], "x_1": [527, 528, 532, 533, 541, 542, 543], "x_d": [527, 528, 532, 533, 541, 542, 543], "ldot": [527, 528, 532, 533, 535, 536, 541, 542, 543], "n_composit": [527, 528, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543], "n_compon": [527, 528, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546], "09861229": 527, "38629436": 527, "69314718": 527, "alr": 528, "exp": [528, 533, 540, 546], "y_1": [528, 541, 542], "y_2": 528, "y_": [528, 728], "closur": [528, 541, 542, 543], "x_i": [528, 532, 537, 541, 542, 543, 544], "tau": 529, "p_adjust": [529, 534], "holm": [529, 534], "significance_test": 529, "f_onewai": 529, "percentil": 529, "multiple_comparisons_correct": 529, "bonferroni": [529, 534], "differenti": [529, 534], "treatment": [529, 534, 609, 727], "h_": 529, "0i": 529, "u_i": 529, "cutoff": [529, 814], "boniferroni": [529, 534], "benjamini": [529, 534], "hochberg": [529, 534], "bh": [529, 534], "fdr_bh": [529, 534], "concis": 529, "anova": [529, 603, 620, 621, 642, 653, 686, 697], "25th": 529, "median": [529, 604], "75th": 529, "reject": [529, 534, 724], "multi": 529, "multi_replac": [529, 539], "ttest_ind": [529, 534], "wilcoxon": 529, "kruskal": [529, 727, 728], "top": [529, 773], "mann": 529, "whitnei": 529, "mannwhitneyu": 529, "ttest_rel": 529, "walli": [529, 727, 728], "friedman": 529, "friedmanchisquar": 529, "unsolv": 529, "promis": 529, "001": [529, 724], "address": [529, 876], "mandal": 529, "et": [529, 534, 608], "al": [529, 534, 608], "novel": 529, "health": [529, 726, 727], "diseas": [529, 602], "seven": 529, "bacteri": 529, "s3": [529, 534, 600, 604], "s4": [529, 534, 600, 604], "s5": [529, 534, 600, 604], "s6": [529, 534, 604], "b1": [529, 534], "b2": [529, 534], "b3": [529, 534], "b4": [529, 534], "b5": [529, 534], "b6": [529, 534], "b7": [529, 534], "placebo": [529, 534], "ancom_df": 529, "percentile_df": 529, "scenario": 529, "summar": 529, "conclud": 529, "tell": 529, "geometr": [530, 532, 534, 544, 604], "averag": [530, 534, 609, 610, 718, 722, 788, 814], "17445763": 530, "30216948": 530, "34891526": 530, "32495488": 530, "18761279": 530, "16247744": 530, "isometri": [532, 533, 535, 536], "limits_": [532, 533, 536, 537, 544], "foral": [532, 533], "g_m": 532, "prod": [532, 544], "79451346": 532, "30409883": 532, "5917809": 532, "10136628": 532, "21383822": 533, "26118259": 533, "28865141": 533, "23632778": 533, "draw": [534, 724, 726, 727, 728, 753, 796], "128": 534, "seed": [534, 600, 604, 698, 724, 727, 728], "dirichlet": 534, "multinomi": 534, "compound": 534, "fold": 534, "posterior": [534, 735], "drawn": [534, 606, 724, 727, 728], "credibl": 534, "mirror": 534, "approach": [534, 602, 727, 736, 737, 761, 764], "aldex2": 534, "conting": [534, 721], "dirichilet": 534, "freedom": [534, 540, 546, 718, 725], "log2": 534, "fc": 534, "pvalu": 534, "qvalu": 534, "mininum": 534, "violat": 534, "reliabl": 534, "benefit": 534, "increas": [534, 547, 548, 605, 606, 608, 698, 724, 727], "regard": 534, "shrink": 534, "fernand": 534, "unifi": 534, "character": 534, "growth": [534, 727], "110": 534, "101": 534, "103": 534, "102": 534, "202": 534, "203": 534, "lfc_result": 534, "991987": 534, "884498": 534, "293463": 534, "020131": 534, "533729": 534, "594590": 534, "462339": 534, "007446": 534, "627677": 534, "048219": 534, "750792": 534, "068310": 534, "707221": 534, "467481": 534, "164998": 534, "065613": 534, "528243": 534, "036910": 534, "978387": 534, "182343": 534, "702656": 534, "556061": 534, "480232": 534, "601277": 534, "043888": 534, "basi": [535, 536, 544, 545], "langl": [535, 537], "e_1": [535, 536], "rangle_a": [535, 537], "e_": [535, 536], "orthonorm": [535, 536, 544, 545], "orthornorm": 535, "gram": [535, 536], "schmidt": [535, 536], "orthogon": [535, 536, 544], "7768362": 535, "68339802": 535, "11704769": 535, "bigoplu": 536, "odot": [536, 543], "e_i": 536, "34180297": 536, "29672718": 536, "22054469": 536, "14092516": 536, "aitchson": 537, "x_j": 537, "y_i": 537, "y_j": 537, "2107852473": 537, "1875": 538, "375": 538, "0625": 538, "4375": 538, "ddof": [540, 546, 718, 722], "cost": [540, 546], "lovel": [540, 546], "jj": [540, 546], "marguerat": [540, 546], "b\u00e4hler": [540, 546], "proportion": [540, 546], "e1004075": [540, 546], "pcbi": [540, 546], "1004075": [540, 546], "erb": [540, 546], "notredam": [540, 546], "biosci": [540, 546], "s12064": [540, 546], "015": [540, 546], "0220": [540, 546], "dism": 540, "redundant_form": 540, "oplu": 541, "y_d": [541, 542], "evenli": [541, 710], "antibiot": [541, 726], "kill": 541, "harm": 541, "third": [541, 547, 777, 883], "ominu": 542, "14285714": 542, "42857143": 542, "28571429": 542, "23059566": 543, "25737316": 543, "26488486": 543, "24714631": 543, "sbp": 544, "partit": [544, 545], "r_i": 544, "s_i": 544, "n_partit": 544, "n_featur": 544, "gsi": 544, "buildilrbas": 544, "\u00e9": 544, "rozan": 544, "hernand": 544, "lapoint": 544, "h\u00e9bert": 544, "gentil": 544, "naess": 544, "marchand": 544, "lafond": 544, "matto": 544, "barlow": 544, "natal": 544, "ionom": 544, "revisit": 544, "nutrient": 544, "van": 544, "den": 544, "boogaart": 544, "gerald": 544, "raimon": 544, "bren": 544, "matevz": 544, "cran": [544, 600, 601, 602, 603, 604], "54772256": 544, "36514837": 544, "70710678": [544, 545], "81649658": [544, 545], "40824829": [544, 545], "coo_matrix": 545, "ilr_inv": 545, "toarrai": 545, "subpackag": [547, 875], "deseri": [547, 700], "gender": [547, 726, 727], "gain": [547, 719], "symmetri": [547, 548, 572, 587, 589], "ta": [547, 878], "tb": 547, "tc": 547, "dm_fh": 547, "3x3": [547, 602, 605, 606], "out_fh": 547, "dm_from_np": 547, "monoton": [547, 548, 605, 606], "divers": [547, 729, 875], "asarrai": 548, "squareform": [548, 594], "col": 548, "routin": 572, "condens": [572, 584, 589, 594], "condensed_form": [572, 589, 594], "hold": [572, 620, 642, 653, 686, 697, 698, 719, 726, 763, 864], "indiscern": 572, "triangl": [572, 587, 594, 602, 719], "planetmath": 572, "metricspac": 572, "sure": [587, 728, 883], "to_data_fram": 594, "missing_id": 599, "distance_matrix": [600, 601, 603, 604, 716, 719], "statis": [600, 603], "unpermut": [600, 602, 603], "permanova": [600, 604], "vegan": [600, 601, 602, 603, 604, 713, 714, 721], "clark": [600, 601], "kr": 600, "australian": 600, "117": 600, "143": 600, "4x4": [600, 601, 804], "group1": 600, "group2": 600, "group3": 600, "data_fram": 601, "ph": 601, "rho": 601, "spearmanr": [601, 602], "env": 601, "primer": 601, "deviat": [601, 718, 721, 722, 725], "ainsworth": 601, "marin": 601, "progress": 601, "92": 601, "205": 601, "htm": 601, "elev": 601, "400": 601, "530": 601, "450": 601, "810": 601, "var": 601, "771517": 601, "714286": 601, "triangular": 602, "portion": 602, "r_m": 602, "d_x": 602, "d_y": 602, "ij": 602, "extrem": 602, "reorder": [602, 605, 756, 760], "kendalltau": 602, "nonmatch": [602, 605], "corr_coeff": [602, 608], "pearsonr": [602, 608, 724], "pwmantel": 602, "legendr": [602, 699, 713, 714, 716, 717, 719, 720, 721], "3rd": [602, 676, 720, 820, 883], "elsevi": [602, 699, 713, 714, 721], "cancer": 602, "220": 602, "6018555": 602, "coeff": 602, "7559": 602, "moder": 602, "rerun": 602, "notifi": 602, "redefin": [602, 821], "henc": 602, "notion": 602, "pseudo": [603, 724], "adoni": 603, "anderson": [603, 604], "marti": [603, 604], "austral": 603, "2001": 603, "eigh": [604, 719], "number_of_dimens": [604, 719], "homogen": [604, 713, 721], "disperison": 604, "analogu": 604, "leven": 604, "dispers": 604, "centroid": 604, "spaitial": 604, "eigendecomposit": [604, 719], "eigenvector": [604, 714, 719], "eigenvalu": [604, 700, 713, 719, 721], "fsvd": [604, 719], "lose": [604, 719], "accuraci": [604, 719], "lost": [604, 719], "keyerror": 604, "permdisp2": 604, "procedur": [604, 876], "betadisp": 604, "245": 604, "253": 604, "g1": 604, "g2": 604, "calucul": 604, "thought": 604, "yeild": 604, "s7": 604, "conjunct": 604, "collat": 605, "amount": [605, 735, 883], "consumpt": [605, 719], "oppos": [605, 883], "dm1": 605, "dm2": 605, "755929": 605, "142857": 605, "num_object": 606, "random_fn": 606, "rand": 606, "pertain": 607, "host_dist": 608, "par_dist": 608, "interact": [608, 880], "hommola": 608, "parasit": 608, "cospeci": 608, "expand": [608, 807], "symbiont": 608, "somewhat": [608, 788], "weaker": 608, "incid": 608, "speciat": 608, "recapitul": 608, "co": 608, "cladogenesi": 608, "explanatori": [608, 699, 700, 714, 721], "poorli": [608, 719], "perm_stat": 608, "je": 608, "qiu": 608, "gilk": 608, "1457": 608, "1468": 608, "hdist": 608, "3f": 608, "832": 608, "fairli": 608, "inde": 608, "mainli": 609, "volatil": 609, "averagegradientanova": 609, "coord_data": 609, "354": 609, "2761": 609, "0341": 609, "0633": 609, "1004": 609, "2364": 609, "2186": 609, "0301": 609, "0225": 609, "356": 609, "2208": 609, "0874": 609, "3519": 609, "0031": 609, "607": 609, "1055": 609, "4140": 609, "116": 609, "634": 609, "3716": 609, "1154": 609, "0721": 609, "0898": 609, "coord": [609, 610, 632, 643, 676, 687], "orient": [609, 710, 726, 796, 876], "metadata_map": [609, 610, 632, 643, 676, 687], "65": 609, "prop_expl": [609, 610, 632, 643, 676, 687], "6216": 609, "7715": 609, "1215": 609, "6913": 609, "8304": 609, "trajectori": [609, 610, 620, 621, 631, 632, 642, 643, 653, 654, 664, 665, 675, 676, 686, 687, 697], "av": 609, "trajectory_categori": [609, 610, 632, 643, 676], "sort_categori": [609, 610, 632, 643, 676], "trajectory_result": 609, "get_trajectori": 609, "avg": 609, "0118478282382": 609, "52199973": 609, "29597001": 609, "20309816": 609, "007022633956606": 609, "ax": [610, 632, 643, 676, 699, 710, 713, 714], "norm": [610, 632, 676, 687], "gradientanova": [610, 632, 676, 687], "gradientanovaresult": [620, 642, 653, 686, 697], "groupresult": 621, "out_f": [631, 664, 675], "raw_f": [631, 664, 675], "categoryresult": 654, "2nd": [676, 820], "window_s": 687, "window": 687, "buf_siz": 698, "bin_f": 698, "bin": 698, "unsign": [698, 786], "resid": 698, "prng": 698, "decreas": 698, "overhead": 698, "demultiplex": 698, "samplea": 698, "aattgg": 698, "sampleb": 698, "atatatat": 698, "samplec": 698, "atggcc": 698, "atggct": 698, "atggcg": 698, "atggca": 698, "bin_": 698, "fish": 699, "transect": 699, "substrate_cor": 699, "substrate_sand": 699, "substrate_oth": 699, "site10": 699, "specie1": 699, "specie2": 699, "specie3": 699, "specie4": 699, "specie5": 699, "specie6": 699, "specie7": 699, "specie8": 699, "specie9": 699, "substrat": 699, "hot": 699, "perfect": [699, 714], "collinear": [699, 714], "ordination_result": 699, "proportion_explain": [699, 700], "cca1": 699, "466911": 699, "cca2": 699, "238327": 699, "cca3": 699, "100548": 699, "cca4": 699, "104937": 699, "cca5": 699, "044805": 699, "cca6": 699, "029747": 699, "cca7": 699, "012631": 699, "cca8": 699, "001562": 699, "cca9": 699, "000532": 699, "amsterdam": [699, 713, 714, 721], "short_method_nam": [700, 819], "long_method_nam": [700, 819], "biplot_scor": [700, 819], "sample_constraint": 700, "scatterplot": [700, 710], "ipython": 700, "notebook": 700, "constrain": [700, 714], "legend": 710, "set1": 710, "grei": 710, "axes3d": 710, "scatter": 710, "jupyt": 710, "lab": [710, 727], "emperor": 710, "colormaps_refer": 710, "vazquez": 710, "baeza": 710, "pirrung": 710, "gonzalez": 710, "gigasci": 710, "github": 710, "21712454": 710, "5007512": 710, "91769271": 710, "45995501": 710, "80332382": 710, "65463348": 710, "pcoa_result": 710, "chi": [713, 714], "pca": [713, 719, 721], "lot": 713, "steep": 713, "kind": 713, "explan": [713, 714], "ecologist": 713, "456": 713, "far": 713, "exhibit": 713, "multimod": 713, "notimplementederror": [713, 714], "suit": 714, "nich": 714, "unimod": [714, 719], "habitat": 714, "unconstrain": 714, "deem": 714, "ones": [714, 727], "shouldn": 714, "confus": 714, "ccora": 714, "sens": [714, 728, 807, 815], "cajo": 714, "braak": 714, "1167": 714, "1179": 714, "piet": 714, "verdonschot": 714, "aquat": 714, "1995": 714, "289": 714, "columnwis": 715, "elementwis": 716, "eq": [716, 717], "e_matrix": 717, "with_mean": [718, 722], "with_std": [718, 722], "flatten": 718, "likelyhood": [718, 722], "inplac": [719, 799], "euclidian": 719, "On": 719, "semimetr": 719, "decid": [719, 883], "heterogen": 720, "physic": [720, 728], "scale_i": 721, "Its": 721, "geq": 721, "focus": 721, "approxim": [721, 724], "stimat": 722, "wherev": 722, "m_shape": 723, "tol": 723, "linalg": 723, "matrix_rank": 723, "rational": 723, "toler": [723, 818], "precomput": 723, "svd": 723, "hoc": 724, "principl": 724, "mont": 724, "carlo": 724, "k_": 724, "mu": 724, "mu_": 724, "neq": 724, "approx": 724, "commit": 724, "ii": 724, "repeatedli": 724, "underpow": 724, "statsmodel": 724, "ind": [724, 728], "dep": 724, "randint": 724, "randn": [724, 727, 728], "617": 724, "533": 724, "788": 724, "602": 724, "229": 724, "779": 724, "838": 724, "032": 724, "157": 724, "051": 724, "601": 724, "664": 724, "783": 724, "646e": 724, "subsample_pow": 724, "draw_mod": [724, 728], "critic": [724, 725, 727, 728, 755], "pwr_100": 724, "counts_100": 724, "max_count": [724, 727, 728], "min_count": [724, 727, 728], "counts_interv": [724, 727, 728], "alpha_pwr": [724, 727, 728], "num_it": [724, 727, 728], "pwr_010": 724, "counts_010": 724, "pwr_001": 724, "counts_001": 724, "484": 724, "844": 724, "932": 724, "984": 724, "044": 724, "224": 724, "572": 724, "836": 724, "928": 724, "996": [724, 728], "016": 724, "108": 724, "332": 724, "848": 724, "956": 724, "vec": 725, "control_cat": [726, 727], "strict_match": [726, 727], "sex": [726, 727], "educ": [726, 875], "diet": 726, "exercis": 726, "statu": [726, 727], "healthi": [726, 727, 728], "hous": 726, "abx": 726, "bb": 726, "hstack": [726, 727], "500": [727, 728], "num_run": [727, 728], "sample_count": [727, 728], "cytokin": 727, "transloc": 727, "myeloid": 727, "cultur": 727, "macrophag": 727, "bone": 727, "marrow": 727, "phagocyt": 727, "periton": 727, "media": 727, "acquir": 727, "compani": 727, "labor": 727, "intens": 727, "assai": 727, "preliminari": 727, "cell_lin": 727, "binomi": [727, 728], "incub": 727, "untreat": 727, "treatment_stat": 727, "groupbi": 727, "00193863362662502": 727, "seem": 727, "receptor": 727, "temperatur": 727, "co2": 727, "idea": 727, "encourag": 727, "pwr": 727, "cnt": 727, "528": 727, "088": 727, "127": 727, "adequ": 727, "sublist": 728, "bacteria": [728, 773, 774, 807], "gardnerella": 728, "vaginali": 728, "vagin": 728, "menopaus": 728, "woman": 728, "experienc": 728, "urinari": 728, "tract": 728, "infect": 728, "uti": 728, "women": 728, "enrol": 728, "eight": 728, "week": 728, "particip": 728, "fecal": 728, "clinic": 728, "symptom": 728, "endpoint": [728, 804], "premenopaus": 728, "postmenopaus": 728, "pcr": 728, "pre_rat": 728, "pos_rat": 728, "chisquar": 728, "003": 728, "try": [728, 729], "risk": 728, "reproduct": 728, "bmi": 728, "tobacco": 728, "subsample_paired_pow": 728, "linkag": [728, 772], "pwr_est": 728, "nanmean": 728, "056": 728, "074": 728, "226": 728, "806": 728, "952": 728, "stool": 728, "secondari": 728, "met_po": 728, "2500": 728, "met_neg": 728, "metabolite_test": 728, "005": 728, "go": [728, 881, 883], "twice": 728, "pwr_est2": 728, "counts2": 728, "272": 728, "426": 728, "646": 728, "824": 728, "efficiencywarn": 729, "acceler": 729, "isubsampl": 729, "frequent": [735, 757], "grand": 735, "ellaps": 735, "bootstrap": 735, "assur": [736, 737, 761, 764], "unrooted_deepcopi": [736, 737, 761, 764, 796, 797, 811], "unrooted_copi": [736, 737, 761, 764, 797, 812], "tree_copi": [736, 737, 761, 764], "tree_nod": [736, 737, 761, 764], "travers": [736, 737, 757, 761, 764, 768, 771, 782, 785, 788, 789, 790, 805, 811, 812, 881], "tree_copy_nod": [736, 737, 761, 764], "deleg": 740, "noparenterror": 750, "nolengtherror": [750, 766, 775], "lack": 750, "toward": 751, "cach": [752, 757, 763, 767, 768, 769, 771, 778, 787, 791], "child1": [752, 767], "child2": [752, 767], "show_intern": 753, "compact": 753, "topolog": 754, "incom": 755, "species_a": 755, "successfulli": 755, "strip": [755, 759, 760], "czech": 755, "luca": 755, "jaim": 755, "huerta": 755, "cepa": 755, "alexandro": 755, "stamataki": 755, "review": 755, "viewer": 755, "toolkit": 755, "2017": 755, "1535": 755, "speciesa": 755, "insert_length": 756, "intermedi": 756, "prune": [756, 798, 809, 810], "func": [757, 770, 794, 799, 810, 821, 854, 865], "cache_attrnam": 757, "cache_typ": 757, "frozenset": [757, 801, 802], "particularli": 757, "topologi": [757, 791, 881], "invalidate_cach": [757, 763], "is_tip": [757, 776, 779, 881], "tip_nam": 757, "include_self": [757, 782, 785, 788, 789, 790, 805, 808, 881], "robinson": 758, "fould": 758, "compare_subset": [758, 760, 801, 802, 881], "compare_tip_dist": [758, 759, 766, 775, 804, 881], "julia": 758, "goodrich": 758, "bioscienc": 758, "tree1": [758, 759, 760, 881], "tree2": [758, 759, 760, 881], "exclude_absent_taxa": 759, "compare_rfd": [759, 760], "dist_f": 760, "distance_from_r": 760, "shuffle_f": [760, 799], "shuffl": 760, "mtrand": [760, 799], "randomst": [760, 799], "m1": 760, "m2": 760, "distance_from_r_squar": 760, "dist": [760, 775], "9f": 760, "000133446": 760, "conflict": 763, "cache_attr": [763, 778], "tip_subset": 765, "replic": 765, "cogent": 765, "totaldescendingbranch": 765, "postord": [765, 768, 782, 785, 789, 790, 805, 808, 881], "tr": 765, "tdbl": 765, "sdbl": 765, "tip_tip_dist": [766, 775], "accumulate_to_ancestor": 766, "get_max_dist": 766, "tip_a": [766, 795], "tip_d": 766, "find_al": [768, 770, 771], "find_by_id": [768, 769, 770], "find_by_func": [768, 769, 771], "node_id": [771, 777, 806], "linkage_matrix": 772, "id_list": 772, "hierarchi": [772, 773, 881], "from_taxonomi": [773, 807], "taxdump": 773, "dmp": 773, "phylum": 773, "set_index": 773, "archaea": [773, 774, 807], "firmicut": [773, 774, 807], "bacteroidet": [773, 774, 807], "lineage_map": 774, "from_taxdump": 774, "clostridia": [774, 807], "bacilli": [774, 807], "sphingobacteria": [774, 807], "euryarchaeota": [774, 807], "thermoplasmata": [774, 807], "halobacteria": [774, 807], "cytophagia": [774, 807], "distant": 775, "is_root": [776, 780, 881], "_leaf_index": 777, "create_cach": 778, "has_children": [779, 780], "tipnam": [781, 783], "lowest_common_ancestor": 781, "convienc": [781, 783], "preorder": [782, 785, 788, 789, 805, 808, 881], "pre_and_postord": [782, 785, 788, 790, 805, 808], "non_tip": [782, 788, 789, 790, 805, 808, 814, 881], "node_c": 784, "nontip": 785, "levelord": [785, 788, 789, 790, 805, 808], "tip_count": 786, "remove_delet": [787, 791, 793, 798], "ineleg": 788, "stack": 788, "3x": 788, "worst": 788, "comb": 788, "visit": 789, "reconstruct": [791, 815, 875, 878], "shear": 791, "pop": [791, 793, 794, 798], "to_delet": 791, "clade": [794, 801, 814, 881], "knowledg": [796, 876], "treeerror": [796, 797], "root_at_midpoint": [796, 815], "midpoint": [797, 815], "farthest": 797, "apart": 797, "lengtherror": 797, "indirectli": 797, "mid": 797, "root_at": [797, 811, 812], "infinit": [799, 811, 812], "rev": 799, "shuffler": 799, "shuffled_tre": 799, "tip_": 800, "tip_list": 803, "representationwarn": 804, "nan_length_valu": 806, "attribute_nam": 806, "aris": [806, 814], "id_index": 806, "child_index": 806, "left_child_id": 806, "right_child_id": 806, "attr_1": 806, "attr_n": 806, "allow_empti": 807, "filter_f": 807, "self_befor": 808, "self_aft": 808, "inord": 808, "unpack_by_func": 809, "elong": 809, "graft": 809, "unpack": 810, "assign_support": 810, "walk": [811, 812, 881, 883], "_not_": 811, "new_tre": [811, 812], "support_attr": 814, "tree_node_class": 814, "_tree": 814, "consensu": 814, "arbitrarili": [814, 883], "usefulli": 814, "disjoint": 814, "adapt": 814, "matthew": 814, "wakefield": 814, "margush": 814, "mcmorri": 814, "fr": 814, "bulletin": 814, "239": 814, "consens": 814, "support_valu": 814, "consensus_tre": 814, "disallow_negative_branch_length": 815, "result_constructor": 815, "saitou": 815, "nei": 815, "gascuel": 815, "steel": 815, "overview": 815, "3447015": 815, "neighbour_join": 815, "reveal": 815, "novemb": 815, "molbev": 815, "msl072": 815, "abcd": 815, "render": 815, "newick_str": 815, "accident": 816, "ineffici": 816, "instal": 816, "success": [817, 842, 883], "alter": 817, "task": [817, 876], "deleteri": 817, "rtol": 818, "assertionerror": [818, 819], "almost": 818, "assert_frame_equ": 818, "ignore_method_nam": 819, "ignore_axis_label": 819, "ignore_direction": 819, "assert": 819, "direction": 819, "cardin": 820, "0th": 820, "fdel": 821, "fget": 821, "fset": 821, "owner": 825, "fn": 839, "subfold": 839, "filenam": 839, "folder": 839, "open_fil": 840, "block_siz": 840, "1048576": 840, "checksum": 840, "hashlib": 840, "answer": 840, "stackoverflow": 840, "1131255": 840, "379593": 840, "baz": 840, "hexdigest": 840, "ab07acbb1e496801937adfa772424bf7": 840, "short_circuit": 841, "offer": 841, "mechan": [841, 883], "prealloc": 841, "enabl": [841, 883], "interrog": 841, "handi": [841, 883], "contextu": 841, "iter_": 842, "success_callback": [842, 883], "fail_callback": [842, 883], "engin": 842, "callback": [842, 883], "short_cicruit": 842, "examin": [842, 883], "aspect": 842, "_setup_debug_trac": 852, "not_non": [864, 883], "pronounc": 875, "sigh": 875, "kit": 875, "bui": 875, "oh": 875, "bsd": 875, "licens": 875, "activ": 875, "introduct": 875, "workflow": 875, "miscellan": 875, "writeabl": 876, "snif": 876, "my_obj": 876, "someformat": 876, "oo": 876, "open_filehandl": 876, "unnam": 876, "twofold": 876, "nonbiolog": 878, "accgggta": 878, "my": 878, "gfp": 878, "ggg": 878, "d2": 878, "d3": 878, "tacccggt": 878, "r1": 878, "gacccgcuuu": 878, "r2": 878, "gccccccuuu": 878, "r3": 878, "accguuaguc": 878, "r4": 878, "acgggu": 878, "uc": 878, "r5": 878, "agg": 878, "ggacugaa": 878, "gga": 878, "gaa": 878, "themselv": 878, "agggga": 878, "ut": 878, "atgtgtatttga": 878, "auguguauuu": 878, "protein_from_dna": 878, "mci": 878, "protein_from_rna": 878, "parenthes": 881, "traver": 881, "tree3": 881, "6666666666666667": 881, "120492524415": 881, "short": 883, "circuit": 883, "processor": 883, "nuc_pattern": 883, "aattg": 883, "has_nuc_pattern": 883, "sequenceprocessor": 883, "initialize_st": 883, "setup": 883, "check_length": 883, "indicatd": 883, "specfi": 883, "aaaaaaattttttt": 883, "atagacc": 883, "aattgccggac": 883, "atatgaacaaa": 883, "fun": 883, "excit": 883, "success_f": 883, "fail_f": 883, "ccggac": 883, "thing": 883, "ahead": 883, "tttttttaaaaaaa": 883, "debug_trac": 883, "earlier": 883, "caggcc": 883, "anticip": 883, "rapidli": 883, "debug_pre_st": 883, "debug_post_st": 883, "awesom": 883, "piec": 883, "debug_runtim": 883, "diagnos": 883, "aggreg": 883, "cprofil": 883, "quit": 883, "ex": 883, "do_someth": 883, "do_something_els": 883, "foobar": 883, "do_something_awesom": 883}, "objects": {"skbio": [[0, 0, 0, "-", "alignment"], [1, 0, 0, "-", "diversity"], [876, 0, 0, "-", "io"], [877, 0, 0, "-", "metadata"], [878, 0, 0, "-", "sequence"], [879, 0, 0, "-", "stats"], [880, 0, 0, "-", "table"], [881, 0, 0, "-", "tree"], [882, 0, 0, "-", "util"], [883, 0, 0, "-", "workflow"]], "skbio.alignment": [[2, 1, 1, "", "AlignmentStructure"], [16, 1, 1, "", "StripedSmithWaterman"], [28, 1, 1, "", "TabularMSA"], [60, 3, 1, "", "global_pairwise_align"], [61, 3, 1, "", "global_pairwise_align_nucleotide"], [62, 3, 1, "", "global_pairwise_align_protein"], [63, 3, 1, "", "local_pairwise_align"], [64, 3, 1, "", "local_pairwise_align_nucleotide"], [65, 3, 1, "", "local_pairwise_align_protein"], [66, 3, 1, "", "local_pairwise_align_ssw"], [67, 3, 1, "", "make_identity_substitution_matrix"]], "skbio.alignment.AlignmentStructure": [[3, 2, 1, "", "__eq__"], [4, 2, 1, "", "__ge__"], [5, 2, 1, "", "__getitem__"], [6, 2, 1, "", "__getstate__"], [7, 2, 1, "", "__gt__"], [8, 2, 1, "", "__hash__"], [9, 2, 1, "", "__le__"], [10, 2, 1, "", "__lt__"], [11, 2, 1, "", "__ne__"], [12, 2, 1, "", "__setstate__"], [13, 2, 1, "", "__str__"], [14, 2, 1, "", "is_zero_based"], [15, 2, 1, "", "set_zero_based"]], "skbio.alignment.StripedSmithWaterman": [[17, 2, 1, "", "__call__"], [18, 2, 1, "", "__eq__"], [19, 2, 1, "", "__ge__"], [20, 2, 1, "", "__getstate__"], [21, 2, 1, "", "__gt__"], [22, 2, 1, "", "__hash__"], [23, 2, 1, "", "__le__"], [24, 2, 1, "", "__lt__"], [25, 2, 1, "", "__ne__"], [26, 2, 1, "", "__setstate__"], [27, 2, 1, "", "__str__"]], "skbio.alignment.TabularMSA": [[29, 2, 1, "", "__bool__"], [30, 2, 1, "", "__contains__"], [31, 2, 1, "", "__copy__"], [32, 2, 1, "", "__deepcopy__"], [33, 2, 1, "", "__eq__"], [34, 2, 1, "", "__ge__"], [35, 2, 1, "", "__getitem__"], [36, 2, 1, "", "__getstate__"], [37, 2, 1, "", "__gt__"], [38, 2, 1, "", "__iter__"], [39, 2, 1, "", "__le__"], [40, 2, 1, "", "__len__"], [41, 2, 1, "", "__lt__"], [42, 2, 1, "", "__ne__"], [43, 2, 1, "", "__reversed__"], [44, 2, 1, "", "__str__"], [45, 2, 1, "", "append"], [46, 2, 1, "", "consensus"], [47, 2, 1, "", "conservation"], [48, 2, 1, "", "extend"], [49, 2, 1, "", "from_dict"], [50, 2, 1, "", "gap_frequencies"], [51, 2, 1, "", "has_metadata"], [52, 2, 1, "", "has_positional_metadata"], [53, 2, 1, "", "iter_positions"], [54, 2, 1, "", "join"], [55, 2, 1, "", "read"], [56, 2, 1, "", "reassign_index"], [57, 2, 1, "", "sort"], [58, 2, 1, "", "to_dict"], [59, 2, 1, "", "write"]], "skbio.diversity": [[68, 0, 0, "-", "alpha"], [103, 3, 1, "", "alpha_diversity"], [104, 0, 0, "-", "beta"], [107, 3, 1, "", "beta_diversity"], [108, 3, 1, "", "block_beta_diversity"], [109, 3, 1, "", "get_alpha_diversity_metrics"], [110, 3, 1, "", "get_beta_diversity_metrics"], [111, 3, 1, "", "partial_beta_diversity"]], "skbio.diversity.alpha": [[69, 3, 1, "", "ace"], [70, 3, 1, "", "berger_parker_d"], [71, 3, 1, "", "brillouin_d"], [72, 3, 1, "", "chao1"], [73, 3, 1, "", "chao1_ci"], [74, 3, 1, "", "dominance"], [75, 3, 1, "", "doubles"], [76, 3, 1, "", "enspie"], [77, 3, 1, "", "esty_ci"], [78, 3, 1, "", "faith_pd"], [79, 3, 1, "", "fisher_alpha"], [80, 3, 1, "", "gini_index"], [81, 3, 1, "", "goods_coverage"], [82, 3, 1, "", "heip_e"], [83, 3, 1, "", "kempton_taylor_q"], [84, 3, 1, "", "lladser_ci"], [85, 3, 1, "", "lladser_pe"], [86, 3, 1, "", "margalef"], [87, 3, 1, "", "mcintosh_d"], [88, 3, 1, "", "mcintosh_e"], [89, 3, 1, "", "menhinick"], [90, 3, 1, "", "michaelis_menten_fit"], [91, 3, 1, "", "observed_features"], [92, 3, 1, "", "observed_otus"], [93, 3, 1, "", "osd"], [94, 3, 1, "", "phydiv"], [95, 3, 1, "", "pielou_e"], [96, 3, 1, "", "robbins"], [97, 3, 1, "", "shannon"], [98, 3, 1, "", "simpson"], [99, 3, 1, "", "simpson_e"], [100, 3, 1, "", "singles"], [101, 3, 1, "", "sobs"], [102, 3, 1, "", "strong"]], "skbio.diversity.beta": [[105, 3, 1, "", "unweighted_unifrac"], [106, 3, 1, "", "weighted_unifrac"]], "skbio.io": [[112, 4, 1, "", "ArgumentOverrideWarning"], [113, 4, 1, "", "BLAST7FormatError"], [114, 4, 1, "", "ClustalFormatError"], [115, 4, 1, "", "EMBLFormatError"], [116, 4, 1, "", "FASTAFormatError"], [117, 4, 1, "", "FASTQFormatError"], [118, 4, 1, "", "FileFormatError"], [119, 4, 1, "", "FormatIdentificationWarning"], [120, 4, 1, "", "GFF3FormatError"], [121, 4, 1, "", "GenBankFormatError"], [122, 4, 1, "", "IOSourceError"], [123, 4, 1, "", "LSMatFormatError"], [124, 4, 1, "", "NewickFormatError"], [125, 4, 1, "", "OrdinationFormatError"], [126, 4, 1, "", "PhylipFormatError"], [127, 4, 1, "", "QSeqFormatError"], [128, 4, 1, "", "QUALFormatError"], [129, 4, 1, "", "StockholmFormatError"], [130, 4, 1, "", "UnrecognizedFormatError"], [149, 0, 0, "-", "registry"], [190, 0, 0, "-", "util"]], "skbio.io.format": [[131, 0, 0, "-", "binary_dm"], [132, 0, 0, "-", "biom"], [133, 0, 0, "-", "blast6"], [134, 0, 0, "-", "blast7"], [135, 0, 0, "-", "clustal"], [136, 0, 0, "-", "embl"], [137, 0, 0, "-", "fasta"], [138, 0, 0, "-", "fastq"], [139, 0, 0, "-", "genbank"], [140, 0, 0, "-", "gff3"], [141, 0, 0, "-", "lsmat"], [142, 0, 0, "-", "newick"], [143, 0, 0, "-", "ordination"], [144, 0, 0, "-", "phylip"], [145, 0, 0, "-", "qseq"], [146, 0, 0, "-", "sample_metadata"], [147, 0, 0, "-", "stockholm"], [148, 0, 0, "-", "taxdump"]], "skbio.io.registry": [[150, 4, 1, "", "DuplicateRegistrationError"], [151, 1, 1, "", "Format"], [164, 1, 1, "", "IORegistry"], [185, 4, 1, "", "InvalidRegistrationError"], [186, 3, 1, "", "create_format"], [187, 3, 1, "", "read"], [188, 3, 1, "", "sniff"], [189, 3, 1, "", "write"]], "skbio.io.registry.Format": [[152, 2, 1, "", "__eq__"], [153, 2, 1, "", "__ge__"], [154, 2, 1, "", "__getstate__"], [155, 2, 1, "", "__gt__"], [156, 2, 1, "", "__hash__"], [157, 2, 1, "", "__le__"], [158, 2, 1, "", "__lt__"], [159, 2, 1, "", "__ne__"], [160, 2, 1, "", "__str__"], [161, 2, 1, "", "reader"], [162, 2, 1, "", "sniffer"], [163, 2, 1, "", "writer"]], "skbio.io.registry.IORegistry": [[165, 2, 1, "", "__eq__"], [166, 2, 1, "", "__ge__"], [167, 2, 1, "", "__getstate__"], [168, 2, 1, "", "__gt__"], [169, 2, 1, "", "__hash__"], [170, 2, 1, "", "__le__"], [171, 2, 1, "", "__lt__"], [172, 2, 1, "", "__ne__"], [173, 2, 1, "", "__str__"], [174, 2, 1, "", "add_format"], [175, 2, 1, "", "create_format"], [176, 2, 1, "", "get_reader"], [177, 2, 1, "", "get_sniffer"], [178, 2, 1, "", "get_writer"], [179, 2, 1, "", "list_read_formats"], [180, 2, 1, "", "list_write_formats"], [181, 2, 1, "", "monkey_patch"], [182, 2, 1, "", "read"], [183, 2, 1, "", "sniff"], [184, 2, 1, "", "write"]], "skbio.io.util": [[191, 3, 1, "", "open"], [192, 3, 1, "", "open_file"], [193, 3, 1, "", "open_files"]], "skbio.metadata": [[194, 1, 1, "", "Interval"], [204, 1, 1, "", "IntervalMetadata"]], "skbio.metadata.Interval": [[195, 2, 1, "", "__eq__"], [196, 2, 1, "", "__ge__"], [197, 2, 1, "", "__getstate__"], [198, 2, 1, "", "__gt__"], [199, 2, 1, "", "__le__"], [200, 2, 1, "", "__lt__"], [201, 2, 1, "", "__ne__"], [202, 2, 1, "", "__str__"], [203, 2, 1, "", "drop"]], "skbio.metadata.IntervalMetadata": [[205, 2, 1, "", "__copy__"], [206, 2, 1, "", "__deepcopy__"], [207, 2, 1, "", "__eq__"], [208, 2, 1, "", "__ge__"], [209, 2, 1, "", "__getstate__"], [210, 2, 1, "", "__gt__"], [211, 2, 1, "", "__le__"], [212, 2, 1, "", "__lt__"], [213, 2, 1, "", "__ne__"], [214, 2, 1, "", "__str__"], [215, 2, 1, "", "add"], [216, 2, 1, "", "concat"], [217, 2, 1, "", "drop"], [218, 2, 1, "", "merge"], [219, 2, 1, "", "query"], [220, 2, 1, "", "read"], [221, 2, 1, "", "sort"], [222, 2, 1, "", "write"]], "skbio.sequence": [[223, 1, 1, "", "DNA"], [282, 1, 1, "", "GeneticCode"], [294, 1, 1, "", "GrammaredSequence"], [345, 1, 1, "", "Protein"], [398, 1, 1, "", "RNA"], [457, 1, 1, "", "Sequence"], [495, 1, 1, "", "SubstitutionMatrix"], [523, 0, 0, "-", "distance"]], "skbio.sequence.DNA": [[224, 2, 1, "", "__bool__"], [225, 2, 1, "", "__contains__"], [226, 2, 1, "", "__copy__"], [227, 2, 1, "", "__deepcopy__"], [228, 2, 1, "", "__eq__"], [229, 2, 1, "", "__ge__"], [230, 2, 1, "", "__getitem__"], [231, 2, 1, "", "__getstate__"], [232, 2, 1, "", "__gt__"], [233, 2, 1, "", "__iter__"], [234, 2, 1, "", "__le__"], [235, 2, 1, "", "__len__"], [236, 2, 1, "", "__lt__"], [237, 2, 1, "", "__ne__"], [238, 2, 1, "", "__reversed__"], [239, 2, 1, "", "__str__"], [240, 2, 1, "", "complement"], [241, 2, 1, "", "concat"], [242, 2, 1, "", "count"], [243, 2, 1, "", "definites"], [244, 2, 1, "", "degap"], [245, 2, 1, "", "degenerates"], [246, 2, 1, "", "distance"], [247, 2, 1, "", "expand_degenerates"], [248, 2, 1, "", "find_motifs"], [249, 2, 1, "", "find_with_regex"], [250, 2, 1, "", "frequencies"], [251, 2, 1, "", "gaps"], [252, 2, 1, "", "gc_content"], [253, 2, 1, "", "gc_frequency"], [254, 2, 1, "", "has_definites"], [255, 2, 1, "", "has_degenerates"], [256, 2, 1, "", "has_gaps"], [257, 2, 1, "", "has_interval_metadata"], [258, 2, 1, "", "has_metadata"], [259, 2, 1, "", "has_nondegenerates"], [260, 2, 1, "", "has_positional_metadata"], [261, 2, 1, "", "index"], [262, 2, 1, "", "is_reverse_complement"], [263, 2, 1, "", "iter_contiguous"], [264, 2, 1, "", "iter_kmers"], [265, 2, 1, "", "kmer_frequencies"], [266, 2, 1, "", "lowercase"], [267, 2, 1, "", "match_frequency"], [268, 2, 1, "", "matches"], [269, 2, 1, "", "mismatch_frequency"], [270, 2, 1, "", "mismatches"], [271, 2, 1, "", "nondegenerates"], [272, 2, 1, "", "read"], [273, 2, 1, "", "replace"], [274, 2, 1, "", "reverse_complement"], [275, 2, 1, "", "to_definites"], [276, 2, 1, "", "to_indices"], [277, 2, 1, "", "to_regex"], [278, 2, 1, "", "transcribe"], [279, 2, 1, "", "translate"], [280, 2, 1, "", "translate_six_frames"], [281, 2, 1, "", "write"]], "skbio.sequence.GeneticCode": [[283, 2, 1, "", "__eq__"], [284, 2, 1, "", "__ge__"], [285, 2, 1, "", "__getstate__"], [286, 2, 1, "", "__gt__"], [287, 2, 1, "", "__le__"], [288, 2, 1, "", "__lt__"], [289, 2, 1, "", "__ne__"], [290, 2, 1, "", "__str__"], [291, 2, 1, "", "from_ncbi"], [292, 2, 1, "", "translate"], [293, 2, 1, "", "translate_six_frames"]], "skbio.sequence.GrammaredSequence": [[295, 2, 1, "", "__bool__"], [296, 2, 1, "", "__contains__"], [297, 2, 1, "", "__copy__"], [298, 2, 1, "", "__deepcopy__"], [299, 2, 1, "", "__eq__"], [300, 2, 1, "", "__ge__"], [301, 2, 1, "", "__getitem__"], [302, 2, 1, "", "__getstate__"], [303, 2, 1, "", "__gt__"], [304, 2, 1, "", "__iter__"], [305, 2, 1, "", "__le__"], [306, 2, 1, "", "__len__"], [307, 2, 1, "", "__lt__"], [308, 2, 1, "", "__ne__"], [309, 2, 1, "", "__reversed__"], [310, 2, 1, "", "__str__"], [311, 2, 1, "", "concat"], [312, 2, 1, "", "count"], [313, 2, 1, "", "definites"], [314, 2, 1, "", "degap"], [315, 2, 1, "", "degenerates"], [316, 2, 1, "", "distance"], [317, 2, 1, "", "expand_degenerates"], [318, 2, 1, "", "find_motifs"], [319, 2, 1, "", "find_with_regex"], [320, 2, 1, "", "frequencies"], [321, 2, 1, "", "gaps"], [322, 2, 1, "", "has_definites"], [323, 2, 1, "", "has_degenerates"], [324, 2, 1, "", "has_gaps"], [325, 2, 1, "", "has_interval_metadata"], [326, 2, 1, "", "has_metadata"], [327, 2, 1, "", "has_nondegenerates"], [328, 2, 1, "", "has_positional_metadata"], [329, 2, 1, "", "index"], [330, 2, 1, "", "iter_contiguous"], [331, 2, 1, "", "iter_kmers"], [332, 2, 1, "", "kmer_frequencies"], [333, 2, 1, "", "lowercase"], [334, 2, 1, "", "match_frequency"], [335, 2, 1, "", "matches"], [336, 2, 1, "", "mismatch_frequency"], [337, 2, 1, "", "mismatches"], [338, 2, 1, "", "nondegenerates"], [339, 2, 1, "", "read"], [340, 2, 1, "", "replace"], [341, 2, 1, "", "to_definites"], [342, 2, 1, "", "to_indices"], [343, 2, 1, "", "to_regex"], [344, 2, 1, "", "write"]], "skbio.sequence.Protein": [[346, 2, 1, "", "__bool__"], [347, 2, 1, "", "__contains__"], [348, 2, 1, "", "__copy__"], [349, 2, 1, "", "__deepcopy__"], [350, 2, 1, "", "__eq__"], [351, 2, 1, "", "__ge__"], [352, 2, 1, "", "__getitem__"], [353, 2, 1, "", "__getstate__"], [354, 2, 1, "", "__gt__"], [355, 2, 1, "", "__iter__"], [356, 2, 1, "", "__le__"], [357, 2, 1, "", "__len__"], [358, 2, 1, "", "__lt__"], [359, 2, 1, "", "__ne__"], [360, 2, 1, "", "__reversed__"], [361, 2, 1, "", "__str__"], [362, 2, 1, "", "concat"], [363, 2, 1, "", "count"], [364, 2, 1, "", "definites"], [365, 2, 1, "", "degap"], [366, 2, 1, "", "degenerates"], [367, 2, 1, "", "distance"], [368, 2, 1, "", "expand_degenerates"], [369, 2, 1, "", "find_motifs"], [370, 2, 1, "", "find_with_regex"], [371, 2, 1, "", "frequencies"], [372, 2, 1, "", "gaps"], [373, 2, 1, "", "has_definites"], [374, 2, 1, "", "has_degenerates"], [375, 2, 1, "", "has_gaps"], [376, 2, 1, "", "has_interval_metadata"], [377, 2, 1, "", "has_metadata"], [378, 2, 1, "", "has_nondegenerates"], [379, 2, 1, "", "has_positional_metadata"], [380, 2, 1, "", "has_stops"], [381, 2, 1, "", "index"], [382, 2, 1, "", "iter_contiguous"], [383, 2, 1, "", "iter_kmers"], [384, 2, 1, "", "kmer_frequencies"], [385, 2, 1, "", "lowercase"], [386, 2, 1, "", "match_frequency"], [387, 2, 1, "", "matches"], [388, 2, 1, "", "mismatch_frequency"], [389, 2, 1, "", "mismatches"], [390, 2, 1, "", "nondegenerates"], [391, 2, 1, "", "read"], [392, 2, 1, "", "replace"], [393, 2, 1, "", "stops"], [394, 2, 1, "", "to_definites"], [395, 2, 1, "", "to_indices"], [396, 2, 1, "", "to_regex"], [397, 2, 1, "", "write"]], "skbio.sequence.RNA": [[399, 2, 1, "", "__bool__"], [400, 2, 1, "", "__contains__"], [401, 2, 1, "", "__copy__"], [402, 2, 1, "", "__deepcopy__"], [403, 2, 1, "", "__eq__"], [404, 2, 1, "", "__ge__"], [405, 2, 1, "", "__getitem__"], [406, 2, 1, "", "__getstate__"], [407, 2, 1, "", "__gt__"], [408, 2, 1, "", "__iter__"], [409, 2, 1, "", "__le__"], [410, 2, 1, "", "__len__"], [411, 2, 1, "", "__lt__"], [412, 2, 1, "", "__ne__"], [413, 2, 1, "", "__reversed__"], [414, 2, 1, "", "__str__"], [415, 2, 1, "", "complement"], [416, 2, 1, "", "concat"], [417, 2, 1, "", "count"], [418, 2, 1, "", "definites"], [419, 2, 1, "", "degap"], [420, 2, 1, "", "degenerates"], [421, 2, 1, "", "distance"], [422, 2, 1, "", "expand_degenerates"], [423, 2, 1, "", "find_motifs"], [424, 2, 1, "", "find_with_regex"], [425, 2, 1, "", "frequencies"], [426, 2, 1, "", "gaps"], [427, 2, 1, "", "gc_content"], [428, 2, 1, "", "gc_frequency"], [429, 2, 1, "", "has_definites"], [430, 2, 1, "", "has_degenerates"], [431, 2, 1, "", "has_gaps"], [432, 2, 1, "", "has_interval_metadata"], [433, 2, 1, "", "has_metadata"], [434, 2, 1, "", "has_nondegenerates"], [435, 2, 1, "", "has_positional_metadata"], [436, 2, 1, "", "index"], [437, 2, 1, "", "is_reverse_complement"], [438, 2, 1, "", "iter_contiguous"], [439, 2, 1, "", "iter_kmers"], [440, 2, 1, "", "kmer_frequencies"], [441, 2, 1, "", "lowercase"], [442, 2, 1, "", "match_frequency"], [443, 2, 1, "", "matches"], [444, 2, 1, "", "mismatch_frequency"], [445, 2, 1, "", "mismatches"], [446, 2, 1, "", "nondegenerates"], [447, 2, 1, "", "read"], [448, 2, 1, "", "replace"], [449, 2, 1, "", "reverse_complement"], [450, 2, 1, "", "reverse_transcribe"], [451, 2, 1, "", "to_definites"], [452, 2, 1, "", "to_indices"], [453, 2, 1, "", "to_regex"], [454, 2, 1, "", "translate"], [455, 2, 1, "", "translate_six_frames"], [456, 2, 1, "", "write"]], "skbio.sequence.Sequence": [[458, 2, 1, "", "__bool__"], [459, 2, 1, "", "__contains__"], [460, 2, 1, "", "__copy__"], [461, 2, 1, "", "__deepcopy__"], [462, 2, 1, "", "__eq__"], [463, 2, 1, "", "__ge__"], [464, 2, 1, "", "__getitem__"], [465, 2, 1, "", "__getstate__"], [466, 2, 1, "", "__gt__"], [467, 2, 1, "", "__iter__"], [468, 2, 1, "", "__le__"], [469, 2, 1, "", "__len__"], [470, 2, 1, "", "__lt__"], [471, 2, 1, "", "__ne__"], [472, 2, 1, "", "__reversed__"], [473, 2, 1, "", "__str__"], [474, 2, 1, "", "concat"], [475, 2, 1, "", "count"], [476, 2, 1, "", "distance"], [477, 2, 1, "", "find_with_regex"], [478, 2, 1, "", "frequencies"], [479, 2, 1, "", "has_interval_metadata"], [480, 2, 1, "", "has_metadata"], [481, 2, 1, "", "has_positional_metadata"], [482, 2, 1, "", "index"], [483, 2, 1, "", "iter_contiguous"], [484, 2, 1, "", "iter_kmers"], [485, 2, 1, "", "kmer_frequencies"], [486, 2, 1, "", "lowercase"], [487, 2, 1, "", "match_frequency"], [488, 2, 1, "", "matches"], [489, 2, 1, "", "mismatch_frequency"], [490, 2, 1, "", "mismatches"], [491, 2, 1, "", "read"], [492, 2, 1, "", "replace"], [493, 2, 1, "", "to_indices"], [494, 2, 1, "", "write"]], "skbio.sequence.SubstitutionMatrix": [[496, 2, 1, "", "__contains__"], [497, 2, 1, "", "__eq__"], [498, 2, 1, "", "__ge__"], [499, 2, 1, "", "__getitem__"], [500, 2, 1, "", "__getstate__"], [501, 2, 1, "", "__gt__"], [502, 2, 1, "", "__le__"], [503, 2, 1, "", "__lt__"], [504, 2, 1, "", "__ne__"], [505, 2, 1, "", "__str__"], [506, 2, 1, "", "between"], [507, 2, 1, "", "by_name"], [508, 2, 1, "", "copy"], [509, 2, 1, "", "filter"], [510, 2, 1, "", "from_dict"], [511, 2, 1, "", "from_iterable"], [512, 2, 1, "", "get_names"], [513, 2, 1, "", "identity"], [514, 2, 1, "", "index"], [515, 2, 1, "", "plot"], [516, 2, 1, "", "read"], [517, 2, 1, "", "redundant_form"], [518, 2, 1, "", "to_data_frame"], [519, 2, 1, "", "to_dict"], [520, 2, 1, "", "transpose"], [521, 2, 1, "", "within"], [522, 2, 1, "", "write"]], "skbio.sequence.distance": [[524, 3, 1, "", "hamming"], [525, 3, 1, "", "kmer_distance"]], "skbio.stats": [[526, 0, 0, "-", "composition"], [547, 0, 0, "-", "distance"], [607, 0, 0, "-", "evolve"], [609, 0, 0, "-", "gradient"], [698, 3, 1, "", "isubsample"], [699, 0, 0, "-", "ordination"], [724, 0, 0, "-", "power"], [729, 3, 1, "", "subsample_counts"]], "skbio.stats.composition": [[527, 3, 1, "", "alr"], [528, 3, 1, "", "alr_inv"], [529, 3, 1, "", "ancom"], [530, 3, 1, "", "centralize"], [531, 3, 1, "", "closure"], [532, 3, 1, "", "clr"], [533, 3, 1, "", "clr_inv"], [534, 3, 1, "", "dirmult_ttest"], [535, 3, 1, "", "ilr"], [536, 3, 1, "", "ilr_inv"], [537, 3, 1, "", "inner"], [538, 3, 1, "", "multi_replace"], [539, 3, 1, "", "multiplicative_replacement"], [540, 3, 1, "", "pairwise_vlr"], [541, 3, 1, "", "perturb"], [542, 3, 1, "", "perturb_inv"], [543, 3, 1, "", "power"], [544, 3, 1, "", "sbp_basis"], [545, 3, 1, "", "tree_basis"], [546, 3, 1, "", "vlr"]], "skbio.stats.distance": [[548, 1, 1, "", "DissimilarityMatrix"], [571, 4, 1, "", "DissimilarityMatrixError"], [572, 1, 1, "", "DistanceMatrix"], [598, 4, 1, "", "DistanceMatrixError"], [599, 4, 1, "", "MissingIDError"], [600, 3, 1, "", "anosim"], [601, 3, 1, "", "bioenv"], [602, 3, 1, "", "mantel"], [603, 3, 1, "", "permanova"], [604, 3, 1, "", "permdisp"], [605, 3, 1, "", "pwmantel"], [606, 3, 1, "", "randdm"]], "skbio.stats.distance.DissimilarityMatrix": [[549, 2, 1, "", "__contains__"], [550, 2, 1, "", "__eq__"], [551, 2, 1, "", "__ge__"], [552, 2, 1, "", "__getitem__"], [553, 2, 1, "", "__getstate__"], [554, 2, 1, "", "__gt__"], [555, 2, 1, "", "__le__"], [556, 2, 1, "", "__lt__"], [557, 2, 1, "", "__ne__"], [558, 2, 1, "", "__str__"], [559, 2, 1, "", "between"], [560, 2, 1, "", "copy"], [561, 2, 1, "", "filter"], [562, 2, 1, "", "from_iterable"], [563, 2, 1, "", "index"], [564, 2, 1, "", "plot"], [565, 2, 1, "", "read"], [566, 2, 1, "", "redundant_form"], [567, 2, 1, "", "to_data_frame"], [568, 2, 1, "", "transpose"], [569, 2, 1, "", "within"], [570, 2, 1, "", "write"]], "skbio.stats.distance.DistanceMatrix": [[573, 2, 1, "", "__contains__"], [574, 2, 1, "", "__eq__"], [575, 2, 1, "", "__ge__"], [576, 2, 1, "", "__getitem__"], [577, 2, 1, "", "__getstate__"], [578, 2, 1, "", "__gt__"], [579, 2, 1, "", "__le__"], [580, 2, 1, "", "__lt__"], [581, 2, 1, "", "__ne__"], [582, 2, 1, "", "__str__"], [583, 2, 1, "", "between"], [584, 2, 1, "", "condensed_form"], [585, 2, 1, "", "copy"], [586, 2, 1, "", "filter"], [587, 2, 1, "", "from_iterable"], [588, 2, 1, "", "index"], [589, 2, 1, "", "permute"], [590, 2, 1, "", "plot"], [591, 2, 1, "", "read"], [592, 2, 1, "", "redundant_form"], [593, 2, 1, "", "to_data_frame"], [594, 2, 1, "", "to_series"], [595, 2, 1, "", "transpose"], [596, 2, 1, "", "within"], [597, 2, 1, "", "write"]], "skbio.stats.evolve": [[608, 3, 1, "", "hommola_cospeciation"]], "skbio.stats.gradient": [[610, 1, 1, "", "AverageGradientANOVA"], [621, 1, 1, "", "CategoryResults"], [632, 1, 1, "", "FirstDifferenceGradientANOVA"], [643, 1, 1, "", "GradientANOVA"], [654, 1, 1, "", "GradientANOVAResults"], [665, 1, 1, "", "GroupResults"], [676, 1, 1, "", "TrajectoryGradientANOVA"], [687, 1, 1, "", "WindowDifferenceGradientANOVA"]], "skbio.stats.gradient.AverageGradientANOVA": [[611, 2, 1, "", "__eq__"], [612, 2, 1, "", "__ge__"], [613, 2, 1, "", "__getstate__"], [614, 2, 1, "", "__gt__"], [615, 2, 1, "", "__hash__"], [616, 2, 1, "", "__le__"], [617, 2, 1, "", "__lt__"], [618, 2, 1, "", "__ne__"], [619, 2, 1, "", "__str__"], [620, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.CategoryResults": [[622, 2, 1, "", "__eq__"], [623, 2, 1, "", "__ge__"], [624, 2, 1, "", "__getstate__"], [625, 2, 1, "", "__gt__"], [626, 2, 1, "", "__hash__"], [627, 2, 1, "", "__le__"], [628, 2, 1, "", "__lt__"], [629, 2, 1, "", "__ne__"], [630, 2, 1, "", "__str__"], [631, 2, 1, "", "to_files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[633, 2, 1, "", "__eq__"], [634, 2, 1, "", "__ge__"], [635, 2, 1, "", "__getstate__"], [636, 2, 1, "", "__gt__"], [637, 2, 1, "", "__hash__"], [638, 2, 1, "", "__le__"], [639, 2, 1, "", "__lt__"], [640, 2, 1, "", "__ne__"], [641, 2, 1, "", "__str__"], [642, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVA": [[644, 2, 1, "", "__eq__"], [645, 2, 1, "", "__ge__"], [646, 2, 1, "", "__getstate__"], [647, 2, 1, "", "__gt__"], [648, 2, 1, "", "__hash__"], [649, 2, 1, "", "__le__"], [650, 2, 1, "", "__lt__"], [651, 2, 1, "", "__ne__"], [652, 2, 1, "", "__str__"], [653, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[655, 2, 1, "", "__eq__"], [656, 2, 1, "", "__ge__"], [657, 2, 1, "", "__getstate__"], [658, 2, 1, "", "__gt__"], [659, 2, 1, "", "__hash__"], [660, 2, 1, "", "__le__"], [661, 2, 1, "", "__lt__"], [662, 2, 1, "", "__ne__"], [663, 2, 1, "", "__str__"], [664, 2, 1, "", "to_files"]], "skbio.stats.gradient.GroupResults": [[666, 2, 1, "", "__eq__"], [667, 2, 1, "", "__ge__"], [668, 2, 1, "", "__getstate__"], [669, 2, 1, "", "__gt__"], [670, 2, 1, "", "__hash__"], [671, 2, 1, "", "__le__"], [672, 2, 1, "", "__lt__"], [673, 2, 1, "", "__ne__"], [674, 2, 1, "", "__str__"], [675, 2, 1, "", "to_files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[677, 2, 1, "", "__eq__"], [678, 2, 1, "", "__ge__"], [679, 2, 1, "", "__getstate__"], [680, 2, 1, "", "__gt__"], [681, 2, 1, "", "__hash__"], [682, 2, 1, "", "__le__"], [683, 2, 1, "", "__lt__"], [684, 2, 1, "", "__ne__"], [685, 2, 1, "", "__str__"], [686, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[688, 2, 1, "", "__eq__"], [689, 2, 1, "", "__ge__"], [690, 2, 1, "", "__getstate__"], [691, 2, 1, "", "__gt__"], [692, 2, 1, "", "__hash__"], [693, 2, 1, "", "__le__"], [694, 2, 1, "", "__lt__"], [695, 2, 1, "", "__ne__"], [696, 2, 1, "", "__str__"], [697, 2, 1, "", "get_trajectories"]], "skbio.stats.ordination": [[700, 1, 1, "", "OrdinationResults"], [713, 3, 1, "", "ca"], [714, 3, 1, "", "cca"], [715, 3, 1, "", "corr"], [716, 3, 1, "", "e_matrix"], [717, 3, 1, "", "f_matrix"], [718, 3, 1, "", "mean_and_std"], [719, 3, 1, "", "pcoa"], [720, 3, 1, "", "pcoa_biplot"], [721, 3, 1, "", "rda"], [722, 3, 1, "", "scale"], [723, 3, 1, "", "svd_rank"]], "skbio.stats.ordination.OrdinationResults": [[701, 2, 1, "", "__eq__"], [702, 2, 1, "", "__ge__"], [703, 2, 1, "", "__getstate__"], [704, 2, 1, "", "__gt__"], [705, 2, 1, "", "__hash__"], [706, 2, 1, "", "__le__"], [707, 2, 1, "", "__lt__"], [708, 2, 1, "", "__ne__"], [709, 2, 1, "", "__str__"], [710, 2, 1, "", "plot"], [711, 2, 1, "", "read"], [712, 2, 1, "", "write"]], "skbio.stats.power": [[725, 3, 1, "", "confidence_bound"], [726, 3, 1, "", "paired_subsamples"], [727, 3, 1, "", "subsample_paired_power"], [728, 3, 1, "", "subsample_power"]], "skbio.tree": [[730, 4, 1, "", "DuplicateNodeError"], [731, 4, 1, "", "MissingNodeError"], [732, 4, 1, "", "NoLengthError"], [733, 4, 1, "", "NoParentError"], [734, 4, 1, "", "TreeError"], [735, 1, 1, "", "TreeNode"], [814, 3, 1, "", "majority_rule"], [815, 3, 1, "", "nj"]], "skbio.tree.TreeNode": [[736, 2, 1, "", "__copy__"], [737, 2, 1, "", "__deepcopy__"], [738, 2, 1, "", "__eq__"], [739, 2, 1, "", "__ge__"], [740, 2, 1, "", "__getitem__"], [741, 2, 1, "", "__getstate__"], [742, 2, 1, "", "__gt__"], [743, 2, 1, "", "__hash__"], [744, 2, 1, "", "__iter__"], [745, 2, 1, "", "__le__"], [746, 2, 1, "", "__len__"], [747, 2, 1, "", "__lt__"], [748, 2, 1, "", "__ne__"], [749, 2, 1, "", "__str__"], [750, 2, 1, "", "accumulate_to_ancestor"], [751, 2, 1, "", "ancestors"], [752, 2, 1, "", "append"], [753, 2, 1, "", "ascii_art"], [754, 2, 1, "", "assign_ids"], [755, 2, 1, "", "assign_supports"], [756, 2, 1, "", "bifurcate"], [757, 2, 1, "", "cache_attr"], [758, 2, 1, "", "compare_rfd"], [759, 2, 1, "", "compare_subsets"], [760, 2, 1, "", "compare_tip_distances"], [761, 2, 1, "", "copy"], [762, 2, 1, "", "count"], [763, 2, 1, "", "create_caches"], [764, 2, 1, "", "deepcopy"], [765, 2, 1, "", "descending_branch_length"], [766, 2, 1, "", "distance"], [767, 2, 1, "", "extend"], [768, 2, 1, "", "find"], [769, 2, 1, "", "find_all"], [770, 2, 1, "", "find_by_func"], [771, 2, 1, "", "find_by_id"], [772, 2, 1, "", "from_linkage_matrix"], [773, 2, 1, "", "from_taxdump"], [774, 2, 1, "", "from_taxonomy"], [775, 2, 1, "", "get_max_distance"], [776, 2, 1, "", "has_children"], [777, 2, 1, "", "index_tree"], [778, 2, 1, "", "invalidate_caches"], [779, 2, 1, "", "is_root"], [780, 2, 1, "", "is_tip"], [781, 2, 1, "", "lca"], [782, 2, 1, "", "levelorder"], [783, 2, 1, "", "lowest_common_ancestor"], [784, 2, 1, "", "neighbors"], [785, 2, 1, "", "non_tips"], [786, 2, 1, "", "observed_node_counts"], [787, 2, 1, "", "pop"], [788, 2, 1, "", "postorder"], [789, 2, 1, "", "pre_and_postorder"], [790, 2, 1, "", "preorder"], [791, 2, 1, "", "prune"], [792, 2, 1, "", "read"], [793, 2, 1, "", "remove"], [794, 2, 1, "", "remove_deleted"], [795, 2, 1, "", "root"], [796, 2, 1, "", "root_at"], [797, 2, 1, "", "root_at_midpoint"], [798, 2, 1, "", "shear"], [799, 2, 1, "", "shuffle"], [800, 2, 1, "", "siblings"], [801, 2, 1, "", "subset"], [802, 2, 1, "", "subsets"], [803, 2, 1, "", "subtree"], [804, 2, 1, "", "tip_tip_distances"], [805, 2, 1, "", "tips"], [806, 2, 1, "", "to_array"], [807, 2, 1, "", "to_taxonomy"], [808, 2, 1, "", "traverse"], [809, 2, 1, "", "unpack"], [810, 2, 1, "", "unpack_by_func"], [811, 2, 1, "", "unrooted_copy"], [812, 2, 1, "", "unrooted_deepcopy"], [813, 2, 1, "", "write"]], "skbio.util": [[816, 4, 1, "", "EfficiencyWarning"], [817, 4, 1, "", "RepresentationWarning"], [818, 3, 1, "", "assert_data_frame_almost_equal"], [819, 3, 1, "", "assert_ordination_results_equal"], [820, 3, 1, "", "cardinal_to_ordinal"], [821, 1, 1, "", "classproperty"], [838, 3, 1, "", "find_duplicates"], [839, 3, 1, "", "get_data_path"], [840, 3, 1, "", "safe_md5"]], "skbio.util.classproperty": [[822, 2, 1, "", "__delete__"], [823, 2, 1, "", "__eq__"], [824, 2, 1, "", "__ge__"], [825, 2, 1, "", "__get__"], [826, 2, 1, "", "__getstate__"], [827, 2, 1, "", "__gt__"], [828, 2, 1, "", "__hash__"], [829, 2, 1, "", "__le__"], [830, 2, 1, "", "__lt__"], [831, 2, 1, "", "__ne__"], [832, 2, 1, "", "__set__"], [833, 2, 1, "", "__set_name__"], [834, 2, 1, "", "__str__"], [835, 2, 1, "", "deleter"], [836, 2, 1, "", "getter"], [837, 2, 1, "", "setter"]], "skbio.workflow": [[841, 1, 1, "", "Workflow"], [853, 1, 1, "", "method"], [864, 1, 1, "", "requires"]], "skbio.workflow.Workflow": [[842, 2, 1, "", "__call__"], [843, 2, 1, "", "__eq__"], [844, 2, 1, "", "__ge__"], [845, 2, 1, "", "__getstate__"], [846, 2, 1, "", "__gt__"], [847, 2, 1, "", "__hash__"], [848, 2, 1, "", "__le__"], [849, 2, 1, "", "__lt__"], [850, 2, 1, "", "__ne__"], [851, 2, 1, "", "__str__"], [852, 2, 1, "", "initialize_state"]], "skbio.workflow.method": [[854, 2, 1, "", "__call__"], [855, 2, 1, "", "__eq__"], [856, 2, 1, "", "__ge__"], [857, 2, 1, "", "__getstate__"], [858, 2, 1, "", "__gt__"], [859, 2, 1, "", "__hash__"], [860, 2, 1, "", "__le__"], [861, 2, 1, "", "__lt__"], [862, 2, 1, "", "__ne__"], [863, 2, 1, "", "__str__"]], "skbio.workflow.requires": [[865, 2, 1, "", "__call__"], [866, 2, 1, "", "__eq__"], [867, 2, 1, "", "__ge__"], [868, 2, 1, "", "__getstate__"], [869, 2, 1, "", "__gt__"], [870, 2, 1, "", "__hash__"], [871, 2, 1, "", "__le__"], [872, 2, 1, "", "__lt__"], [873, 2, 1, "", "__ne__"], [874, 2, 1, "", "__str__"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"]}, "titleterms": {"align": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 135, 144, 147], "skbio": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883], "data": [0, 137, 547], "structur": [0, 547], "optim": 0, "i": [0, 149, 190, 876], "e": 0, "product": [0, 136], "readi": 0, "algorithm": 0, "slow": 0, "educ": 0, "purpos": 0, "onli": [0, 145], "gener": [0, 136, 137, 145], "function": [0, 1, 68, 104, 149, 190, 523, 526, 547, 607, 699, 724, 876, 879, 881, 882], "exampl": [0, 1, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 547, 609, 699, 724, 878, 881, 883], "divers": [1, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], "calcul": 1, "driver": 1, "input": 1, "valid": [1, 146], "count": [1, 242, 312, 363, 417, 475, 762], "vector": 1, "specifi": 1, "metric": [1, 523], "subpackag": [1, 876, 878, 879], "alignmentstructur": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "__eq__": [3, 18, 33, 152, 165, 195, 207, 228, 283, 299, 350, 403, 462, 497, 550, 574, 611, 622, 633, 644, 655, 666, 677, 688, 701, 738, 823, 843, 855, 866], "__ge__": [4, 19, 34, 153, 166, 196, 208, 229, 284, 300, 351, 404, 463, 498, 551, 575, 612, 623, 634, 645, 656, 667, 678, 689, 702, 739, 824, 844, 856, 867], "__getitem__": [5, 35, 230, 301, 352, 405, 464, 499, 552, 576, 740], "__getstate__": [6, 20, 36, 154, 167, 197, 209, 231, 285, 302, 353, 406, 465, 500, 553, 577, 613, 624, 635, 646, 657, 668, 679, 690, 703, 741, 826, 845, 857, 868], "__gt__": [7, 21, 37, 155, 168, 198, 210, 232, 286, 303, 354, 407, 466, 501, 554, 578, 614, 625, 636, 647, 658, 669, 680, 691, 704, 742, 827, 846, 858, 869], "__hash__": [8, 22, 156, 169, 615, 626, 637, 648, 659, 670, 681, 692, 705, 743, 828, 847, 859, 870], "__le__": [9, 23, 39, 157, 170, 199, 211, 234, 287, 305, 356, 409, 468, 502, 555, 579, 616, 627, 638, 649, 660, 671, 682, 693, 706, 745, 829, 848, 860, 871], "__lt__": [10, 24, 41, 158, 171, 200, 212, 236, 288, 307, 358, 411, 470, 503, 556, 580, 617, 628, 639, 650, 661, 672, 683, 694, 707, 747, 830, 849, 861, 872], "__ne__": [11, 25, 42, 159, 172, 201, 213, 237, 289, 308, 359, 412, 471, 504, 557, 581, 618, 629, 640, 651, 662, 673, 684, 695, 708, 748, 831, 850, 862, 873], "__setstate__": [12, 26], "__str__": [13, 27, 44, 160, 173, 202, 214, 239, 290, 310, 361, 414, 473, 505, 558, 582, 619, 630, 641, 652, 663, 674, 685, 696, 709, 749, 834, 851, 863, 874], "is_zero_bas": 14, "set_zero_bas": 15, "stripedsmithwaterman": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "__call__": [17, 842, 854, 865], "tabularmsa": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 137], "__bool__": [29, 224, 295, 346, 399, 458], "__contains__": [30, 225, 296, 347, 400, 459, 496, 549, 573], "__copy__": [31, 205, 226, 297, 348, 401, 460, 736], "__deepcopy__": [32, 206, 227, 298, 349, 402, 461, 737], "__iter__": [38, 233, 304, 355, 408, 467, 744], "__len__": [40, 235, 306, 357, 410, 469, 746], "__reversed__": [43, 238, 309, 360, 413, 472], "append": [45, 752], "consensu": 46, "conserv": 47, "extend": [48, 767], "from_dict": [49, 510], "gap_frequ": 50, "has_metadata": [51, 258, 326, 377, 433, 480], "has_positional_metadata": [52, 260, 328, 379, 435, 481], "iter_posit": 53, "join": 54, "read": [55, 136, 137, 139, 182, 187, 220, 272, 339, 391, 447, 491, 516, 565, 591, 711, 792, 876], "reassign_index": 56, "sort": [57, 221], "to_dict": [58, 519], "write": [59, 137, 139, 184, 189, 222, 281, 344, 397, 456, 494, 522, 570, 597, 712, 813, 876], "global_pairwise_align": 60, "global_pairwise_align_nucleotid": 61, "global_pairwise_align_protein": 62, "local_pairwise_align": 63, "local_pairwise_align_nucleotid": 64, "local_pairwise_align_protein": 65, "local_pairwise_align_ssw": 66, "make_identity_substitution_matrix": 67, "alpha": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "measur": [68, 104], "ac": 69, "berger_parker_d": 70, "brillouin_d": 71, "chao1": 72, "chao1_ci": 73, "domin": 74, "doubl": 75, "enspi": 76, "esty_ci": 77, "faith_pd": 78, "fisher_alpha": 79, "gini_index": 80, "goods_coverag": 81, "heip_": 82, "kempton_taylor_q": 83, "lladser_ci": 84, "lladser_p": 85, "margalef": 86, "mcintosh_d": 87, "mcintosh_": 88, "menhinick": 89, "michaelis_menten_fit": 90, "observed_featur": 91, "observed_otu": 92, "osd": 93, "phydiv": 94, "pielou_": 95, "robbin": 96, "shannon": 97, "simpson": 98, "simpson_": 99, "singl": 100, "sob": 101, "strong": 102, "alpha_divers": 103, "beta": [104, 105, 106], "unweighted_unifrac": 105, "weighted_unifrac": 106, "beta_divers": 107, "block_beta_divers": 108, "get_alpha_diversity_metr": 109, "get_beta_diversity_metr": 110, "partial_beta_divers": 111, "io": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 876], "argumentoverridewarn": 112, "blast7formaterror": 113, "clustalformaterror": 114, "emblformaterror": 115, "fastaformaterror": 116, "fastqformaterror": 117, "fileformaterror": 118, "formatidentificationwarn": 119, "gff3formaterror": 120, "genbankformaterror": 121, "iosourceerror": 122, "lsmatformaterror": 123, "newickformaterror": 124, "ordinationformaterror": 125, "phylipformaterror": 126, "qseqformaterror": 127, "qualformaterror": 128, "stockholmformaterror": 129, "unrecognizedformaterror": 130, "simpl": 131, "binari": 131, "dissimilar": 131, "matrix": [131, 141, 547], "format": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 876], "binary_dm": 131, "support": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 876], "specif": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "refer": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 147, 148, 526, 547, 699, 875], "biom": 132, "blast": [133, 134], "6": [133, 875], "blast6": 133, "column": [133, 134, 146], "type": [133, 134, 146], "paramet": [133, 135, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148], "7": 134, "blast7": 134, "clustal": 135, "section": [135, 136, 139, 144], "embl": 136, "featur": [136, 139, 880], "level": 136, "befor": [136, 139], "fh": 136, "header": [136, 137, 144, 147], "ft": 136, "sq": 136, "file": [136, 137, 139, 876], "us": [136, 876], "fasta": 137, "qual": 137, "sequenc": [137, 144, 147, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 878], "reader": [137, 139, 140, 161], "writer": [137, 140, 163], "fastq": 138, "qualiti": 138, "score": 138, "variant": 138, "genbank": 139, "locat": 139, "string": 139, "origin": 139, "gff3": 140, "label": [141, 142], "squar": 141, "lsmat": 141, "newick": 142, "formal": 142, "grammar": 142, "explan": 142, "basic": 142, "symbol": 142, "applic": 142, "rule": 142, "ad": 142, "node": [142, 148], "inform": 142, "advanc": 142, "length": 142, "inlin": 142, "comment": [142, 146], "whitespac": [142, 146], "caveat": 142, "ordin": [143, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723], "result": 143, "phylip": 144, "multipl": [144, 147], "qseq": 145, "metadata": [146, 147, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 877], "requir": [146, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874], "lead": 146, "trail": 146, "charact": 146, "empti": 146, "row": 146, "identifi": 146, "recommend": 146, "number": 146, "stockholm": 147, "gf": 147, "g": 147, "gr": 147, "gc": 147, "footer": 147, "taxdump": 148, "dmp": 148, "name": 148, "divis": 148, "gencod": 148, "o": [149, 190, 876], "registri": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "class": [149, 547, 609, 699, 877, 878, 881, 883], "except": [149, 547, 876, 881], "creat": 149, "new": 149, "scikit": [149, 875, 876], "bio": [149, 875, 876], "reserv": 149, "keyword": 149, "argument": 149, "duplicateregistrationerror": 150, "sniffer": 162, "ioregistri": [164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "add_format": 174, "create_format": [175, 186], "get_read": 176, "get_sniff": 177, "get_writ": 178, "list_read_format": 179, "list_write_format": 180, "monkey_patch": 181, "sniff": [183, 188], "invalidregistrationerror": 185, "util": [190, 191, 192, 193, 699, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 881, 882], "open": 191, "open_fil": [192, 193], "interv": [194, 195, 196, 197, 198, 199, 200, 201, 202, 203], "drop": [203, 217], "intervalmetadata": [204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], "add": 215, "concat": [216, 241, 311, 362, 416, 474], "merg": 218, "queri": 219, "dna": [223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281], "complement": [240, 415], "definit": [243, 313, 364, 418], "degap": [244, 314, 365, 419], "degener": [245, 315, 366, 420], "distanc": [246, 316, 367, 421, 476, 523, 524, 525, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 766], "expand_degener": [247, 317, 368, 422], "find_motif": [248, 318, 369, 423], "find_with_regex": [249, 319, 370, 424, 477], "frequenc": [250, 320, 371, 425, 478], "gap": [251, 321, 372, 426], "gc_content": [252, 427], "gc_frequenc": [253, 428], "has_definit": [254, 322, 373, 429], "has_degener": [255, 323, 374, 430], "has_gap": [256, 324, 375, 431], "has_interval_metadata": [257, 325, 376, 432, 479], "has_nondegener": [259, 327, 378, 434], "index": [261, 329, 381, 436, 482, 514, 563, 588], "is_reverse_compl": [262, 437], "iter_contigu": [263, 330, 382, 438, 483], "iter_km": [264, 331, 383, 439, 484], "kmer_frequ": [265, 332, 384, 440, 485], "lowercas": [266, 333, 385, 441, 486], "match_frequ": [267, 334, 386, 442, 487], "match": [268, 335, 387, 443, 488], "mismatch_frequ": [269, 336, 388, 444, 489], "mismatch": [270, 337, 389, 445, 490], "nondegener": [271, 338, 390, 446], "replac": [273, 340, 392, 448, 492], "reverse_compl": [274, 449], "to_definit": [275, 341, 394, 451], "to_indic": [276, 342, 395, 452, 493], "to_regex": [277, 343, 396, 453], "transcrib": 278, "translat": [279, 292, 454], "translate_six_fram": [280, 293, 455], "geneticcod": [282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293], "from_ncbi": 291, "grammaredsequ": [294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344], "protein": [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397], "has_stop": 380, "stop": 393, "rna": [398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456], "reverse_transcrib": 450, "substitutionmatrix": [495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "between": [506, 559, 583], "by_nam": 507, "copi": [508, 560, 585, 761], "filter": [509, 561, 586], "from_iter": [511, 562, 587], "get_nam": 512, "ident": 513, "plot": [515, 564, 590, 710], "redundant_form": [517, 566, 592], "to_data_fram": [518, 567, 593], "transpos": [520, 568, 595], "within": [521, 569, 596], "ham": 524, "kmer_dist": 525, "composit": [526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "statist": [526, 547, 607, 879], "stat": [526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 879], "alr": 527, "alr_inv": 528, "ancom": 529, "central": 530, "closur": 531, "clr": 532, "clr_inv": 533, "dirmult_ttest": 534, "ilr": 535, "ilr_inv": 536, "inner": 537, "multi_replac": 538, "multiplicative_replac": 539, "pairwise_vlr": 540, "perturb": 541, "perturb_inv": 542, "power": [543, 724, 725, 726, 727, 728], "sbp_basi": 544, "tree_basi": 545, "vlr": 546, "matric": 547, "base": 547, "dissimilaritymatrix": [547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570], "distancematrix": [547, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "categor": 547, "variabl": 547, "continu": 547, "comparison": 547, "dissimilaritymatrixerror": 571, "condensed_form": 584, "permut": 589, "to_seri": 594, "distancematrixerror": 598, "missingiderror": 599, "anosim": 600, "bioenv": 601, "mantel": 602, "permanova": 603, "permdisp": 604, "pwmantel": 605, "randdm": 606, "evolutionari": 607, "evolv": [607, 608], "cophylogenet": 607, "method": [607, 699, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863], "hommola_cospeci": 608, "gradient": [609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697], "analys": 609, "averagegradientanova": [610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620], "get_trajectori": [620, 642, 653, 686, 697], "categoryresult": [621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631], "to_fil": [631, 664, 675], "firstdifferencegradientanova": [632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642], "gradientanova": [643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653], "gradientanovaresult": [654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664], "groupresult": [665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675], "trajectorygradientanova": [676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686], "windowdifferencegradientanova": [687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697], "isubsampl": 698, "ordinationresult": [700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712], "ca": 713, "cca": 714, "corr": 715, "e_matrix": 716, "f_matrix": 717, "mean_and_std": 718, "pcoa": 719, "pcoa_biplot": 720, "rda": 721, "scale": 722, "svd_rank": 723, "empir": 724, "estim": 724, "confidence_bound": 725, "paired_subsampl": 726, "subsample_paired_pow": 727, "subsample_pow": 728, "subsample_count": 729, "tree": [730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 881], "duplicatenodeerror": 730, "missingnodeerror": 731, "nolengtherror": 732, "noparenterror": 733, "treeerror": 734, "treenod": [735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813], "accumulate_to_ancestor": 750, "ancestor": 751, "ascii_art": 753, "assign_id": 754, "assign_support": 755, "bifurc": 756, "cache_attr": 757, "compare_rfd": 758, "compare_subset": 759, "compare_tip_dist": 760, "create_cach": 763, "deepcopi": 764, "descending_branch_length": 765, "find": 768, "find_al": 769, "find_by_func": 770, "find_by_id": 771, "from_linkage_matrix": 772, "from_taxdump": 773, "from_taxonomi": 774, "get_max_dist": 775, "has_children": 776, "index_tre": 777, "invalidate_cach": 778, "is_root": 779, "is_tip": 780, "lca": 781, "levelord": 782, "lowest_common_ancestor": 783, "neighbor": 784, "non_tip": 785, "observed_node_count": 786, "pop": 787, "postord": 788, "pre_and_postord": 789, "preorder": 790, "prune": 791, "remov": 793, "remove_delet": 794, "root": 795, "root_at": 796, "root_at_midpoint": 797, "shear": 798, "shuffl": 799, "sibl": 800, "subset": [801, 802], "subtre": 803, "tip_tip_dist": 804, "tip": 805, "to_arrai": 806, "to_taxonomi": 807, "travers": 808, "unpack": 809, "unpack_by_func": 810, "unrooted_copi": 811, "unrooted_deepcopi": 812, "majority_rul": 814, "nj": 815, "efficiencywarn": 816, "representationwarn": 817, "assert_data_frame_almost_equ": 818, "assert_ordination_results_equ": 819, "cardinal_to_ordin": 820, "classproperti": [821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837], "__delete__": 822, "__get__": 825, "__set__": 832, "__set_name__": 833, "delet": 835, "getter": 836, "setter": 837, "find_dupl": 838, "get_data_path": 839, "safe_md5": 840, "workflow": [841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 883], "initialize_st": 852, "0": 875, "dev": 875, "api": 875, "user": 876, "warn": [876, 882], "introduct": 876, "what": 876, "kind": 876, "can": 876, "from": 876, "tabl": 880, "represent": 881, "phylogenet": 881, "reconstruct": 881, "test": 882, "miscellan": 882, "construct": 883, "decor": 883}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Alignments (skbio.alignment)": [[0, "alignments-skbio-alignment"]], "Data Structures": [[0, "data-structures"]], "Optimized (i.e., production-ready) Alignment Algorithms": [[0, "optimized-i-e-production-ready-alignment-algorithms"]], "Slow (i.e., educational-purposes only) Alignment Algorithms": [[0, "slow-i-e-educational-purposes-only-alignment-algorithms"]], "General functionality": [[0, "general-functionality"]], "Data Structure Examples": [[0, "data-structure-examples"]], "Alignment Algorithm Examples": [[0, "alignment-algorithm-examples"]], "Optimized Alignment Algorithm Examples": [[0, "optimized-alignment-algorithm-examples"]], "Slow Alignment Algorithm Examples": [[0, "slow-alignment-algorithm-examples"]], "Diversity calculations (skbio.diversity)": [[1, "diversity-calculations-skbio-diversity"]], "Driver functions": [[1, "driver-functions"]], "Input validation": [[1, "input-validation"]], "Count vectors": [[1, "count-vectors"]], "Specifying a diversity metric": [[1, "specifying-a-diversity-metric"]], "Subpackages": [[1, "subpackages"], [876, "subpackages"], [878, "subpackages"], [879, "subpackages"]], "Functions": [[1, "functions"], [68, "functions"], [104, "functions"], [149, "functions"], [190, "functions"], [523, "functions"], [526, "functions"], [547, "functions"], [607, "functions"], [724, "functions"], [879, "functions"]], "Examples": [[1, "examples"], [132, "examples"], [133, "examples"], [134, "examples"], [135, "examples"], [136, "examples"], [137, "examples"], [138, "examples"], [139, "examples"], [140, "examples"], [142, "examples"], [143, "examples"], [144, "examples"], [145, "examples"], [147, "examples"], [148, "examples"], [547, "examples"], [609, "examples"], [699, "examples"], [724, "examples"], [878, "examples"], [881, "examples"], [883, "examples"]], "skbio.alignment.AlignmentStructure": [[2, "skbio-alignment-alignmentstructure"]], "skbio.alignment.AlignmentStructure.__eq__": [[3, "skbio-alignment-alignmentstructure-eq"]], "skbio.alignment.AlignmentStructure.__ge__": [[4, "skbio-alignment-alignmentstructure-ge"]], "skbio.alignment.AlignmentStructure.__getitem__": [[5, "skbio-alignment-alignmentstructure-getitem"]], "skbio.alignment.AlignmentStructure.__getstate__": [[6, "skbio-alignment-alignmentstructure-getstate"]], "skbio.alignment.AlignmentStructure.__gt__": [[7, "skbio-alignment-alignmentstructure-gt"]], "skbio.alignment.AlignmentStructure.__hash__": [[8, "skbio-alignment-alignmentstructure-hash"]], "skbio.alignment.AlignmentStructure.__le__": [[9, "skbio-alignment-alignmentstructure-le"]], "skbio.alignment.AlignmentStructure.__lt__": [[10, "skbio-alignment-alignmentstructure-lt"]], "skbio.alignment.AlignmentStructure.__ne__": [[11, "skbio-alignment-alignmentstructure-ne"]], "skbio.alignment.AlignmentStructure.__setstate__": [[12, "skbio-alignment-alignmentstructure-setstate"]], "skbio.alignment.AlignmentStructure.__str__": [[13, "skbio-alignment-alignmentstructure-str"]], "skbio.alignment.AlignmentStructure.is_zero_based": [[14, "skbio-alignment-alignmentstructure-is-zero-based"]], "skbio.alignment.AlignmentStructure.set_zero_based": [[15, "skbio-alignment-alignmentstructure-set-zero-based"]], "skbio.alignment.StripedSmithWaterman": [[16, "skbio-alignment-stripedsmithwaterman"]], "skbio.alignment.StripedSmithWaterman.__call__": [[17, "skbio-alignment-stripedsmithwaterman-call"]], "skbio.alignment.StripedSmithWaterman.__eq__": [[18, "skbio-alignment-stripedsmithwaterman-eq"]], "skbio.alignment.StripedSmithWaterman.__ge__": [[19, "skbio-alignment-stripedsmithwaterman-ge"]], "skbio.alignment.StripedSmithWaterman.__getstate__": [[20, "skbio-alignment-stripedsmithwaterman-getstate"]], "skbio.alignment.StripedSmithWaterman.__gt__": [[21, "skbio-alignment-stripedsmithwaterman-gt"]], "skbio.alignment.StripedSmithWaterman.__hash__": [[22, "skbio-alignment-stripedsmithwaterman-hash"]], "skbio.alignment.StripedSmithWaterman.__le__": [[23, "skbio-alignment-stripedsmithwaterman-le"]], "skbio.alignment.StripedSmithWaterman.__lt__": [[24, "skbio-alignment-stripedsmithwaterman-lt"]], "skbio.alignment.StripedSmithWaterman.__ne__": [[25, "skbio-alignment-stripedsmithwaterman-ne"]], "skbio.alignment.StripedSmithWaterman.__setstate__": [[26, "skbio-alignment-stripedsmithwaterman-setstate"]], "skbio.alignment.StripedSmithWaterman.__str__": [[27, "skbio-alignment-stripedsmithwaterman-str"]], "skbio.alignment.TabularMSA": [[28, "skbio-alignment-tabularmsa"]], "skbio.alignment.TabularMSA.__bool__": [[29, "skbio-alignment-tabularmsa-bool"]], "skbio.alignment.TabularMSA.__contains__": [[30, "skbio-alignment-tabularmsa-contains"]], "skbio.alignment.TabularMSA.__copy__": [[31, "skbio-alignment-tabularmsa-copy"]], "skbio.alignment.TabularMSA.__deepcopy__": [[32, "skbio-alignment-tabularmsa-deepcopy"]], "skbio.alignment.TabularMSA.__eq__": [[33, "skbio-alignment-tabularmsa-eq"]], "skbio.alignment.TabularMSA.__ge__": [[34, "skbio-alignment-tabularmsa-ge"]], "skbio.alignment.TabularMSA.__getitem__": [[35, "skbio-alignment-tabularmsa-getitem"]], "skbio.alignment.TabularMSA.__getstate__": [[36, "skbio-alignment-tabularmsa-getstate"]], "skbio.alignment.TabularMSA.__gt__": [[37, "skbio-alignment-tabularmsa-gt"]], "skbio.alignment.TabularMSA.__iter__": [[38, "skbio-alignment-tabularmsa-iter"]], "skbio.alignment.TabularMSA.__le__": [[39, "skbio-alignment-tabularmsa-le"]], "skbio.alignment.TabularMSA.__len__": [[40, "skbio-alignment-tabularmsa-len"]], "skbio.alignment.TabularMSA.__lt__": [[41, "skbio-alignment-tabularmsa-lt"]], "skbio.alignment.TabularMSA.__ne__": [[42, "skbio-alignment-tabularmsa-ne"]], "skbio.alignment.TabularMSA.__reversed__": [[43, "skbio-alignment-tabularmsa-reversed"]], "skbio.alignment.TabularMSA.__str__": [[44, "skbio-alignment-tabularmsa-str"]], "skbio.alignment.TabularMSA.append": [[45, "skbio-alignment-tabularmsa-append"]], "skbio.alignment.TabularMSA.consensus": [[46, "skbio-alignment-tabularmsa-consensus"]], "skbio.alignment.TabularMSA.conservation": [[47, "skbio-alignment-tabularmsa-conservation"]], "skbio.alignment.TabularMSA.extend": [[48, "skbio-alignment-tabularmsa-extend"]], "skbio.alignment.TabularMSA.from_dict": [[49, "skbio-alignment-tabularmsa-from-dict"]], "skbio.alignment.TabularMSA.gap_frequencies": [[50, "skbio-alignment-tabularmsa-gap-frequencies"]], "skbio.alignment.TabularMSA.has_metadata": [[51, "skbio-alignment-tabularmsa-has-metadata"]], "skbio.alignment.TabularMSA.has_positional_metadata": [[52, "skbio-alignment-tabularmsa-has-positional-metadata"]], "skbio.alignment.TabularMSA.iter_positions": [[53, "skbio-alignment-tabularmsa-iter-positions"]], "skbio.alignment.TabularMSA.join": [[54, "skbio-alignment-tabularmsa-join"]], "skbio.alignment.TabularMSA.read": [[55, "skbio-alignment-tabularmsa-read"]], "skbio.alignment.TabularMSA.reassign_index": [[56, "skbio-alignment-tabularmsa-reassign-index"]], "skbio.alignment.TabularMSA.sort": [[57, "skbio-alignment-tabularmsa-sort"]], "skbio.alignment.TabularMSA.to_dict": [[58, "skbio-alignment-tabularmsa-to-dict"]], "skbio.alignment.TabularMSA.write": [[59, "skbio-alignment-tabularmsa-write"]], "skbio.alignment.global_pairwise_align": [[60, "skbio-alignment-global-pairwise-align"]], "skbio.alignment.global_pairwise_align_nucleotide": [[61, "skbio-alignment-global-pairwise-align-nucleotide"]], "skbio.alignment.global_pairwise_align_protein": [[62, "skbio-alignment-global-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align": [[63, "skbio-alignment-local-pairwise-align"]], "skbio.alignment.local_pairwise_align_nucleotide": [[64, "skbio-alignment-local-pairwise-align-nucleotide"]], "skbio.alignment.local_pairwise_align_protein": [[65, "skbio-alignment-local-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align_ssw": [[66, "skbio-alignment-local-pairwise-align-ssw"]], "skbio.alignment.make_identity_substitution_matrix": [[67, "skbio-alignment-make-identity-substitution-matrix"]], "Alpha diversity measures (skbio.diversity.alpha)": [[68, "alpha-diversity-measures-skbio-diversity-alpha"]], "skbio.diversity.alpha.ace": [[69, "skbio-diversity-alpha-ace"]], "skbio.diversity.alpha.berger_parker_d": [[70, "skbio-diversity-alpha-berger-parker-d"]], "skbio.diversity.alpha.brillouin_d": [[71, "skbio-diversity-alpha-brillouin-d"]], "skbio.diversity.alpha.chao1": [[72, "skbio-diversity-alpha-chao1"]], "skbio.diversity.alpha.chao1_ci": [[73, "skbio-diversity-alpha-chao1-ci"]], "skbio.diversity.alpha.dominance": [[74, "skbio-diversity-alpha-dominance"]], "skbio.diversity.alpha.doubles": [[75, "skbio-diversity-alpha-doubles"]], "skbio.diversity.alpha.enspie": [[76, "skbio-diversity-alpha-enspie"]], "skbio.diversity.alpha.esty_ci": [[77, "skbio-diversity-alpha-esty-ci"]], "skbio.diversity.alpha.faith_pd": [[78, "skbio-diversity-alpha-faith-pd"]], "skbio.diversity.alpha.fisher_alpha": [[79, "skbio-diversity-alpha-fisher-alpha"]], "skbio.diversity.alpha.gini_index": [[80, "skbio-diversity-alpha-gini-index"]], "skbio.diversity.alpha.goods_coverage": [[81, "skbio-diversity-alpha-goods-coverage"]], "skbio.diversity.alpha.heip_e": [[82, "skbio-diversity-alpha-heip-e"]], "skbio.diversity.alpha.kempton_taylor_q": [[83, "skbio-diversity-alpha-kempton-taylor-q"]], "skbio.diversity.alpha.lladser_ci": [[84, "skbio-diversity-alpha-lladser-ci"]], "skbio.diversity.alpha.lladser_pe": [[85, "skbio-diversity-alpha-lladser-pe"]], "skbio.diversity.alpha.margalef": [[86, "skbio-diversity-alpha-margalef"]], "skbio.diversity.alpha.mcintosh_d": [[87, "skbio-diversity-alpha-mcintosh-d"]], "skbio.diversity.alpha.mcintosh_e": [[88, "skbio-diversity-alpha-mcintosh-e"]], "skbio.diversity.alpha.menhinick": [[89, "skbio-diversity-alpha-menhinick"]], "skbio.diversity.alpha.michaelis_menten_fit": [[90, "skbio-diversity-alpha-michaelis-menten-fit"]], "skbio.diversity.alpha.observed_features": [[91, "skbio-diversity-alpha-observed-features"]], "skbio.diversity.alpha.observed_otus": [[92, "skbio-diversity-alpha-observed-otus"]], "skbio.diversity.alpha.osd": [[93, "skbio-diversity-alpha-osd"]], "skbio.diversity.alpha.phydiv": [[94, "skbio-diversity-alpha-phydiv"]], "skbio.diversity.alpha.pielou_e": [[95, "skbio-diversity-alpha-pielou-e"]], "skbio.diversity.alpha.robbins": [[96, "skbio-diversity-alpha-robbins"]], "skbio.diversity.alpha.shannon": [[97, "skbio-diversity-alpha-shannon"]], "skbio.diversity.alpha.simpson": [[98, "skbio-diversity-alpha-simpson"]], "skbio.diversity.alpha.simpson_e": [[99, "skbio-diversity-alpha-simpson-e"]], "skbio.diversity.alpha.singles": [[100, "skbio-diversity-alpha-singles"]], "skbio.diversity.alpha.sobs": [[101, "skbio-diversity-alpha-sobs"]], "skbio.diversity.alpha.strong": [[102, "skbio-diversity-alpha-strong"]], "skbio.diversity.alpha_diversity": [[103, "skbio-diversity-alpha-diversity"]], "Beta diversity measures (skbio.diversity.beta)": [[104, "beta-diversity-measures-skbio-diversity-beta"]], "skbio.diversity.beta.unweighted_unifrac": [[105, "skbio-diversity-beta-unweighted-unifrac"]], "skbio.diversity.beta.weighted_unifrac": [[106, "skbio-diversity-beta-weighted-unifrac"]], "skbio.diversity.beta_diversity": [[107, "skbio-diversity-beta-diversity"]], "skbio.diversity.block_beta_diversity": [[108, "skbio-diversity-block-beta-diversity"]], "skbio.diversity.get_alpha_diversity_metrics": [[109, "skbio-diversity-get-alpha-diversity-metrics"]], "skbio.diversity.get_beta_diversity_metrics": [[110, "skbio-diversity-get-beta-diversity-metrics"]], "skbio.diversity.partial_beta_diversity": [[111, "skbio-diversity-partial-beta-diversity"]], "skbio.io.ArgumentOverrideWarning": [[112, "skbio-io-argumentoverridewarning"]], "skbio.io.BLAST7FormatError": [[113, "skbio-io-blast7formaterror"]], "skbio.io.ClustalFormatError": [[114, "skbio-io-clustalformaterror"]], "skbio.io.EMBLFormatError": [[115, "skbio-io-emblformaterror"]], "skbio.io.FASTAFormatError": [[116, "skbio-io-fastaformaterror"]], "skbio.io.FASTQFormatError": [[117, "skbio-io-fastqformaterror"]], "skbio.io.FileFormatError": [[118, "skbio-io-fileformaterror"]], "skbio.io.FormatIdentificationWarning": [[119, "skbio-io-formatidentificationwarning"]], "skbio.io.GFF3FormatError": [[120, "skbio-io-gff3formaterror"]], "skbio.io.GenBankFormatError": [[121, "skbio-io-genbankformaterror"]], "skbio.io.IOSourceError": [[122, "skbio-io-iosourceerror"]], "skbio.io.LSMatFormatError": [[123, "skbio-io-lsmatformaterror"]], "skbio.io.NewickFormatError": [[124, "skbio-io-newickformaterror"]], "skbio.io.OrdinationFormatError": [[125, "skbio-io-ordinationformaterror"]], "skbio.io.PhylipFormatError": [[126, "skbio-io-phylipformaterror"]], "skbio.io.QSeqFormatError": [[127, "skbio-io-qseqformaterror"]], "skbio.io.QUALFormatError": [[128, "skbio-io-qualformaterror"]], "skbio.io.StockholmFormatError": [[129, "skbio-io-stockholmformaterror"]], "skbio.io.UnrecognizedFormatError": [[130, "skbio-io-unrecognizedformaterror"]], "Simple binary dissimilarity matrix format (skbio.io.format.binary_dm)": [[131, "simple-binary-dissimilarity-matrix-format-skbio-io-format-binary-dm"]], "Format Support": [[131, "format-support"], [132, "format-support"], [133, "format-support"], [134, "format-support"], [135, "format-support"], [136, "format-support"], [137, "format-support"], [138, "format-support"], [139, "format-support"], [140, "format-support"], [141, "format-support"], [142, "format-support"], [143, "format-support"], [144, "format-support"], [145, "format-support"], [146, "format-support"], [147, "format-support"], [148, "format-support"]], "Format Specification": [[131, "format-specification"], [132, "format-specification"], [133, "format-specification"], [134, "format-specification"], [135, "format-specification"], [136, "format-specification"], [137, "format-specification"], [138, "format-specification"], [139, "format-specification"], [140, "format-specification"], [141, "format-specification"], [142, "format-specification"], [143, "format-specification"], [144, "format-specification"], [145, "format-specification"], [146, "format-specification"], [147, "format-specification"], [148, "format-specification"]], "References": [[131, "references"], [132, "references"], [133, "references"], [134, "references"], [135, "references"], [136, "references"], [137, "references"], [138, "references"], [139, "references"], [140, "references"], [142, "references"], [144, "references"], [145, "references"], [147, "references"], [148, "references"], [526, "references"], [547, "references"], [699, "references"]], "BIOM-Format (skbio.io.format.biom)": [[132, "biom-format-skbio-io-format-biom"]], "BLAST+6 format (skbio.io.format.blast6)": [[133, "blast-6-format-skbio-io-format-blast6"]], "BLAST Column Types": [[133, "blast-column-types"], [134, "blast-column-types"]], "Format Parameters": [[133, "format-parameters"], [135, "format-parameters"], [137, "format-parameters"], [138, "format-parameters"], [139, "format-parameters"], [140, "format-parameters"], [141, "format-parameters"], [142, "format-parameters"], [144, "format-parameters"], [145, "format-parameters"], [147, "format-parameters"], [148, "format-parameters"]], "BLAST+7 format (skbio.io.format.blast7)": [[134, "blast-7-format-skbio-io-format-blast7"]], "Clustal format (skbio.io.format.clustal)": [[135, "clustal-format-skbio-io-format-clustal"]], "Alignment Section": [[135, "alignment-section"], [144, "alignment-section"]], "EMBL format (skbio.io.format.embl)": [[136, "embl-format-skbio-io-format-embl"]], "Feature Level Products": [[136, "feature-level-products"]], "Sections before FH (Feature Header)": [[136, "sections-before-fh-feature-header"]], "FT section": [[136, "ft-section"]], "SQ section": [[136, "sq-section"]], "Reading EMBL Files": [[136, "reading-embl-files"]], "Reading EMBL Files using generators": [[136, "reading-embl-files-using-generators"]], "FASTA/QUAL format (skbio.io.format.fasta)": [[137, "fasta-qual-format-skbio-io-format-fasta"]], "FASTA Format": [[137, "fasta-format"]], "Sequence Header": [[137, "sequence-header"]], "Sequence Data": [[137, "sequence-data"]], "QUAL Format": [[137, "qual-format"]], "QUAL File Parameter (Readers and Writers)": [[137, "qual-file-parameter-readers-and-writers"]], "Reader-specific Parameters": [[137, "reader-specific-parameters"], [139, "reader-specific-parameters"], [140, "reader-specific-parameters"]], "Generator and TabularMSA Reader Parameters": [[137, "generator-and-tabularmsa-reader-parameters"]], "Sequence Reader Parameters": [[137, "sequence-reader-parameters"]], "Writer-specific Parameters": [[137, "writer-specific-parameters"], [140, "writer-specific-parameters"]], "Reading and Writing FASTA Files": [[137, "reading-and-writing-fasta-files"]], "Reading and Writing FASTA/QUAL Files": [[137, "reading-and-writing-fasta-qual-files"]], "FASTQ format (skbio.io.format.fastq)": [[138, "fastq-format-skbio-io-format-fastq"]], "Quality Score Variants": [[138, "quality-score-variants"]], "GenBank format (skbio.io.format.genbank)": [[139, "genbank-format-skbio-io-format-genbank"]], "Sections before FEATURES": [[139, "sections-before-features"]], "FEATURES section": [[139, "features-section"]], "Location string": [[139, "location-string"]], "ORIGIN section": [[139, "origin-section"]], "Reading and Writing GenBank Files": [[139, "reading-and-writing-genbank-files"]], "GFF3 format (skbio.io.format.gff3)": [[140, "gff3-format-skbio-io-format-gff3"]], "Labeled square matrix format (skbio.io.format.lsmat)": [[141, "labeled-square-matrix-format-skbio-io-format-lsmat"]], "Newick format (skbio.io.format.newick)": [[142, "newick-format-skbio-io-format-newick"]], "Formal Grammar": [[142, "formal-grammar"]], "Explanation": [[142, "explanation"]], "Basic Symbols": [[142, "basic-symbols"]], "Application of Rules": [[142, "application-of-rules"]], "Adding Node Information": [[142, "adding-node-information"]], "Advanced Label and Length Rules": [[142, "advanced-label-and-length-rules"]], "Inline Comments": [[142, "inline-comments"]], "Whitespace": [[142, "whitespace"]], "Caveats": [[142, "caveats"]], "Ordination results format (skbio.io.format.ordination)": [[143, "ordination-results-format-skbio-io-format-ordination"]], "PHYLIP multiple sequence alignment format (skbio.io.format.phylip)": [[144, "phylip-multiple-sequence-alignment-format-skbio-io-format-phylip"]], "Header Section": [[144, "header-section"]], "QSeq format (skbio.io.format.qseq)": [[145, "qseq-format-skbio-io-format-qseq"]], "Generators Only": [[145, "generators-only"]], "Metadata Formatting Requirements": [[146, "metadata-formatting-requirements"]], "Metadata Validation": [[146, "metadata-validation"]], "Leading and trailing whitespace characters": [[146, "leading-and-trailing-whitespace-characters"]], "Comments and Empty Rows": [[146, "comments-and-empty-rows"]], "Identifier Column": [[146, "identifier-column"]], "Recommendations for Identifiers": [[146, "recommendations-for-identifiers"]], "Metadata Columns": [[146, "metadata-columns"]], "Column Types": [[146, "column-types"]], "Number Formatting": [[146, "number-formatting"]], "Stockholm format (skbio.io.format.stockholm)": [[147, "stockholm-format-skbio-io-format-stockholm"]], "Header": [[147, "header"]], "Multiple Sequence Alignment": [[147, "multiple-sequence-alignment"]], "Metadata": [[147, "metadata"]], "GF metadata": [[147, "gf-metadata"]], "GS metadata": [[147, "gs-metadata"]], "GR metadata": [[147, "gr-metadata"]], "GC metadata": [[147, "gc-metadata"]], "Footer": [[147, "footer"]], "Taxdump format (skbio.io.format.taxdump)": [[148, "taxdump-format-skbio-io-format-taxdump"]], "nodes.dmp": [[148, "nodes-dmp"]], "names.dmp": [[148, "names-dmp"]], "division.dmp": [[148, "division-dmp"]], "gencode.dmp": [[148, "gencode-dmp"]], "I/O Registry (skbio.io.registry)": [[149, "i-o-registry-skbio-io-registry"]], "Classes": [[149, "classes"], [547, "classes"], [609, "classes"], [699, "classes"], [877, "classes"], [878, "classes"], [881, "classes"], [883, "classes"]], "Exceptions": [[149, "exceptions"], [547, "exceptions"], [881, "exceptions"]], "Creating a new format for scikit-bio": [[149, "creating-a-new-format-for-scikit-bio"]], "Reserved Keyword Arguments": [[149, "reserved-keyword-arguments"]], "skbio.io.registry.DuplicateRegistrationError": [[150, "skbio-io-registry-duplicateregistrationerror"]], "skbio.io.registry.Format": [[151, "skbio-io-registry-format"]], "skbio.io.registry.Format.__eq__": [[152, "skbio-io-registry-format-eq"]], "skbio.io.registry.Format.__ge__": [[153, "skbio-io-registry-format-ge"]], "skbio.io.registry.Format.__getstate__": [[154, "skbio-io-registry-format-getstate"]], "skbio.io.registry.Format.__gt__": [[155, "skbio-io-registry-format-gt"]], "skbio.io.registry.Format.__hash__": [[156, "skbio-io-registry-format-hash"]], "skbio.io.registry.Format.__le__": [[157, "skbio-io-registry-format-le"]], "skbio.io.registry.Format.__lt__": [[158, "skbio-io-registry-format-lt"]], "skbio.io.registry.Format.__ne__": [[159, "skbio-io-registry-format-ne"]], "skbio.io.registry.Format.__str__": [[160, "skbio-io-registry-format-str"]], "skbio.io.registry.Format.reader": [[161, "skbio-io-registry-format-reader"]], "skbio.io.registry.Format.sniffer": [[162, "skbio-io-registry-format-sniffer"]], "skbio.io.registry.Format.writer": [[163, "skbio-io-registry-format-writer"]], "skbio.io.registry.IORegistry": [[164, "skbio-io-registry-ioregistry"]], "skbio.io.registry.IORegistry.__eq__": [[165, "skbio-io-registry-ioregistry-eq"]], "skbio.io.registry.IORegistry.__ge__": [[166, "skbio-io-registry-ioregistry-ge"]], "skbio.io.registry.IORegistry.__getstate__": [[167, "skbio-io-registry-ioregistry-getstate"]], "skbio.io.registry.IORegistry.__gt__": [[168, "skbio-io-registry-ioregistry-gt"]], "skbio.io.registry.IORegistry.__hash__": [[169, "skbio-io-registry-ioregistry-hash"]], "skbio.io.registry.IORegistry.__le__": [[170, "skbio-io-registry-ioregistry-le"]], "skbio.io.registry.IORegistry.__lt__": [[171, "skbio-io-registry-ioregistry-lt"]], "skbio.io.registry.IORegistry.__ne__": [[172, "skbio-io-registry-ioregistry-ne"]], "skbio.io.registry.IORegistry.__str__": [[173, "skbio-io-registry-ioregistry-str"]], "skbio.io.registry.IORegistry.add_format": [[174, "skbio-io-registry-ioregistry-add-format"]], "skbio.io.registry.IORegistry.create_format": [[175, "skbio-io-registry-ioregistry-create-format"]], "skbio.io.registry.IORegistry.get_reader": [[176, "skbio-io-registry-ioregistry-get-reader"]], "skbio.io.registry.IORegistry.get_sniffer": [[177, "skbio-io-registry-ioregistry-get-sniffer"]], "skbio.io.registry.IORegistry.get_writer": [[178, "skbio-io-registry-ioregistry-get-writer"]], "skbio.io.registry.IORegistry.list_read_formats": [[179, "skbio-io-registry-ioregistry-list-read-formats"]], "skbio.io.registry.IORegistry.list_write_formats": [[180, "skbio-io-registry-ioregistry-list-write-formats"]], "skbio.io.registry.IORegistry.monkey_patch": [[181, "skbio-io-registry-ioregistry-monkey-patch"]], "skbio.io.registry.IORegistry.read": [[182, "skbio-io-registry-ioregistry-read"]], "skbio.io.registry.IORegistry.sniff": [[183, "skbio-io-registry-ioregistry-sniff"]], "skbio.io.registry.IORegistry.write": [[184, "skbio-io-registry-ioregistry-write"]], "skbio.io.registry.InvalidRegistrationError": [[185, "skbio-io-registry-invalidregistrationerror"]], "skbio.io.registry.create_format": [[186, "skbio-io-registry-create-format"]], "skbio.io.registry.read": [[187, "skbio-io-registry-read"]], "skbio.io.registry.sniff": [[188, "skbio-io-registry-sniff"]], "skbio.io.registry.write": [[189, "skbio-io-registry-write"]], "I/O utils (skbio.io.util)": [[190, "i-o-utils-skbio-io-util"]], "skbio.io.util.open": [[191, "skbio-io-util-open"]], "skbio.io.util.open_file": [[192, "skbio-io-util-open-file"]], "skbio.io.util.open_files": [[193, "skbio-io-util-open-files"]], "skbio.metadata.Interval": [[194, "skbio-metadata-interval"]], "skbio.metadata.Interval.__eq__": [[195, "skbio-metadata-interval-eq"]], "skbio.metadata.Interval.__ge__": [[196, "skbio-metadata-interval-ge"]], "skbio.metadata.Interval.__getstate__": [[197, "skbio-metadata-interval-getstate"]], "skbio.metadata.Interval.__gt__": [[198, "skbio-metadata-interval-gt"]], "skbio.metadata.Interval.__le__": [[199, "skbio-metadata-interval-le"]], "skbio.metadata.Interval.__lt__": [[200, "skbio-metadata-interval-lt"]], "skbio.metadata.Interval.__ne__": [[201, "skbio-metadata-interval-ne"]], "skbio.metadata.Interval.__str__": [[202, "skbio-metadata-interval-str"]], "skbio.metadata.Interval.drop": [[203, "skbio-metadata-interval-drop"]], "skbio.metadata.IntervalMetadata": [[204, "skbio-metadata-intervalmetadata"]], "skbio.metadata.IntervalMetadata.__copy__": [[205, "skbio-metadata-intervalmetadata-copy"]], "skbio.metadata.IntervalMetadata.__deepcopy__": [[206, "skbio-metadata-intervalmetadata-deepcopy"]], "skbio.metadata.IntervalMetadata.__eq__": [[207, "skbio-metadata-intervalmetadata-eq"]], "skbio.metadata.IntervalMetadata.__ge__": [[208, "skbio-metadata-intervalmetadata-ge"]], "skbio.metadata.IntervalMetadata.__getstate__": [[209, "skbio-metadata-intervalmetadata-getstate"]], "skbio.metadata.IntervalMetadata.__gt__": [[210, "skbio-metadata-intervalmetadata-gt"]], "skbio.metadata.IntervalMetadata.__le__": [[211, "skbio-metadata-intervalmetadata-le"]], "skbio.metadata.IntervalMetadata.__lt__": [[212, "skbio-metadata-intervalmetadata-lt"]], "skbio.metadata.IntervalMetadata.__ne__": [[213, "skbio-metadata-intervalmetadata-ne"]], "skbio.metadata.IntervalMetadata.__str__": [[214, "skbio-metadata-intervalmetadata-str"]], "skbio.metadata.IntervalMetadata.add": [[215, "skbio-metadata-intervalmetadata-add"]], "skbio.metadata.IntervalMetadata.concat": [[216, "skbio-metadata-intervalmetadata-concat"]], "skbio.metadata.IntervalMetadata.drop": [[217, "skbio-metadata-intervalmetadata-drop"]], "skbio.metadata.IntervalMetadata.merge": [[218, "skbio-metadata-intervalmetadata-merge"]], "skbio.metadata.IntervalMetadata.query": [[219, "skbio-metadata-intervalmetadata-query"]], "skbio.metadata.IntervalMetadata.read": [[220, "skbio-metadata-intervalmetadata-read"]], "skbio.metadata.IntervalMetadata.sort": [[221, "skbio-metadata-intervalmetadata-sort"]], "skbio.metadata.IntervalMetadata.write": [[222, "skbio-metadata-intervalmetadata-write"]], "skbio.sequence.DNA": [[223, "skbio-sequence-dna"]], "skbio.sequence.DNA.__bool__": [[224, "skbio-sequence-dna-bool"]], "skbio.sequence.DNA.__contains__": [[225, "skbio-sequence-dna-contains"]], "skbio.sequence.DNA.__copy__": [[226, "skbio-sequence-dna-copy"]], "skbio.sequence.DNA.__deepcopy__": [[227, "skbio-sequence-dna-deepcopy"]], "skbio.sequence.DNA.__eq__": [[228, "skbio-sequence-dna-eq"]], "skbio.sequence.DNA.__ge__": [[229, "skbio-sequence-dna-ge"]], "skbio.sequence.DNA.__getitem__": [[230, "skbio-sequence-dna-getitem"]], "skbio.sequence.DNA.__getstate__": [[231, "skbio-sequence-dna-getstate"]], "skbio.sequence.DNA.__gt__": [[232, "skbio-sequence-dna-gt"]], "skbio.sequence.DNA.__iter__": [[233, "skbio-sequence-dna-iter"]], "skbio.sequence.DNA.__le__": [[234, "skbio-sequence-dna-le"]], "skbio.sequence.DNA.__len__": [[235, "skbio-sequence-dna-len"]], "skbio.sequence.DNA.__lt__": [[236, "skbio-sequence-dna-lt"]], "skbio.sequence.DNA.__ne__": [[237, "skbio-sequence-dna-ne"]], "skbio.sequence.DNA.__reversed__": [[238, "skbio-sequence-dna-reversed"]], "skbio.sequence.DNA.__str__": [[239, "skbio-sequence-dna-str"]], "skbio.sequence.DNA.complement": [[240, "skbio-sequence-dna-complement"]], "skbio.sequence.DNA.concat": [[241, "skbio-sequence-dna-concat"]], "skbio.sequence.DNA.count": [[242, "skbio-sequence-dna-count"]], "skbio.sequence.DNA.definites": [[243, "skbio-sequence-dna-definites"]], "skbio.sequence.DNA.degap": [[244, "skbio-sequence-dna-degap"]], "skbio.sequence.DNA.degenerates": [[245, "skbio-sequence-dna-degenerates"]], "skbio.sequence.DNA.distance": [[246, "skbio-sequence-dna-distance"]], "skbio.sequence.DNA.expand_degenerates": [[247, "skbio-sequence-dna-expand-degenerates"]], "skbio.sequence.DNA.find_motifs": [[248, "skbio-sequence-dna-find-motifs"]], "skbio.sequence.DNA.find_with_regex": [[249, "skbio-sequence-dna-find-with-regex"]], "skbio.sequence.DNA.frequencies": [[250, "skbio-sequence-dna-frequencies"]], "skbio.sequence.DNA.gaps": [[251, "skbio-sequence-dna-gaps"]], "skbio.sequence.DNA.gc_content": [[252, "skbio-sequence-dna-gc-content"]], "skbio.sequence.DNA.gc_frequency": [[253, "skbio-sequence-dna-gc-frequency"]], "skbio.sequence.DNA.has_definites": [[254, "skbio-sequence-dna-has-definites"]], "skbio.sequence.DNA.has_degenerates": [[255, "skbio-sequence-dna-has-degenerates"]], "skbio.sequence.DNA.has_gaps": [[256, "skbio-sequence-dna-has-gaps"]], "skbio.sequence.DNA.has_interval_metadata": [[257, "skbio-sequence-dna-has-interval-metadata"]], "skbio.sequence.DNA.has_metadata": [[258, "skbio-sequence-dna-has-metadata"]], "skbio.sequence.DNA.has_nondegenerates": [[259, "skbio-sequence-dna-has-nondegenerates"]], "skbio.sequence.DNA.has_positional_metadata": [[260, "skbio-sequence-dna-has-positional-metadata"]], "skbio.sequence.DNA.index": [[261, "skbio-sequence-dna-index"]], "skbio.sequence.DNA.is_reverse_complement": [[262, "skbio-sequence-dna-is-reverse-complement"]], "skbio.sequence.DNA.iter_contiguous": [[263, "skbio-sequence-dna-iter-contiguous"]], "skbio.sequence.DNA.iter_kmers": [[264, "skbio-sequence-dna-iter-kmers"]], "skbio.sequence.DNA.kmer_frequencies": [[265, "skbio-sequence-dna-kmer-frequencies"]], "skbio.sequence.DNA.lowercase": [[266, "skbio-sequence-dna-lowercase"]], "skbio.sequence.DNA.match_frequency": [[267, "skbio-sequence-dna-match-frequency"]], "skbio.sequence.DNA.matches": [[268, "skbio-sequence-dna-matches"]], "skbio.sequence.DNA.mismatch_frequency": [[269, "skbio-sequence-dna-mismatch-frequency"]], "skbio.sequence.DNA.mismatches": [[270, "skbio-sequence-dna-mismatches"]], "skbio.sequence.DNA.nondegenerates": [[271, "skbio-sequence-dna-nondegenerates"]], "skbio.sequence.DNA.read": [[272, "skbio-sequence-dna-read"]], "skbio.sequence.DNA.replace": [[273, "skbio-sequence-dna-replace"]], "skbio.sequence.DNA.reverse_complement": [[274, "skbio-sequence-dna-reverse-complement"]], "skbio.sequence.DNA.to_definites": [[275, "skbio-sequence-dna-to-definites"]], "skbio.sequence.DNA.to_indices": [[276, "skbio-sequence-dna-to-indices"]], "skbio.sequence.DNA.to_regex": [[277, "skbio-sequence-dna-to-regex"]], "skbio.sequence.DNA.transcribe": [[278, "skbio-sequence-dna-transcribe"]], "skbio.sequence.DNA.translate": [[279, "skbio-sequence-dna-translate"]], "skbio.sequence.DNA.translate_six_frames": [[280, "skbio-sequence-dna-translate-six-frames"]], "skbio.sequence.DNA.write": [[281, "skbio-sequence-dna-write"]], "skbio.sequence.GeneticCode": [[282, "skbio-sequence-geneticcode"]], "skbio.sequence.GeneticCode.__eq__": [[283, "skbio-sequence-geneticcode-eq"]], "skbio.sequence.GeneticCode.__ge__": [[284, "skbio-sequence-geneticcode-ge"]], "skbio.sequence.GeneticCode.__getstate__": [[285, "skbio-sequence-geneticcode-getstate"]], "skbio.sequence.GeneticCode.__gt__": [[286, "skbio-sequence-geneticcode-gt"]], "skbio.sequence.GeneticCode.__le__": [[287, "skbio-sequence-geneticcode-le"]], "skbio.sequence.GeneticCode.__lt__": [[288, "skbio-sequence-geneticcode-lt"]], "skbio.sequence.GeneticCode.__ne__": [[289, "skbio-sequence-geneticcode-ne"]], "skbio.sequence.GeneticCode.__str__": [[290, "skbio-sequence-geneticcode-str"]], "skbio.sequence.GeneticCode.from_ncbi": [[291, "skbio-sequence-geneticcode-from-ncbi"]], "skbio.sequence.GeneticCode.translate": [[292, "skbio-sequence-geneticcode-translate"]], "skbio.sequence.GeneticCode.translate_six_frames": [[293, "skbio-sequence-geneticcode-translate-six-frames"]], "skbio.sequence.GrammaredSequence": [[294, "skbio-sequence-grammaredsequence"]], "skbio.sequence.GrammaredSequence.__bool__": [[295, "skbio-sequence-grammaredsequence-bool"]], "skbio.sequence.GrammaredSequence.__contains__": [[296, "skbio-sequence-grammaredsequence-contains"]], "skbio.sequence.GrammaredSequence.__copy__": [[297, "skbio-sequence-grammaredsequence-copy"]], "skbio.sequence.GrammaredSequence.__deepcopy__": [[298, "skbio-sequence-grammaredsequence-deepcopy"]], "skbio.sequence.GrammaredSequence.__eq__": [[299, "skbio-sequence-grammaredsequence-eq"]], "skbio.sequence.GrammaredSequence.__ge__": [[300, "skbio-sequence-grammaredsequence-ge"]], "skbio.sequence.GrammaredSequence.__getitem__": [[301, "skbio-sequence-grammaredsequence-getitem"]], "skbio.sequence.GrammaredSequence.__getstate__": [[302, "skbio-sequence-grammaredsequence-getstate"]], "skbio.sequence.GrammaredSequence.__gt__": [[303, "skbio-sequence-grammaredsequence-gt"]], "skbio.sequence.GrammaredSequence.__iter__": [[304, "skbio-sequence-grammaredsequence-iter"]], "skbio.sequence.GrammaredSequence.__le__": [[305, "skbio-sequence-grammaredsequence-le"]], "skbio.sequence.GrammaredSequence.__len__": [[306, "skbio-sequence-grammaredsequence-len"]], "skbio.sequence.GrammaredSequence.__lt__": [[307, "skbio-sequence-grammaredsequence-lt"]], "skbio.sequence.GrammaredSequence.__ne__": [[308, "skbio-sequence-grammaredsequence-ne"]], "skbio.sequence.GrammaredSequence.__reversed__": [[309, "skbio-sequence-grammaredsequence-reversed"]], "skbio.sequence.GrammaredSequence.__str__": [[310, "skbio-sequence-grammaredsequence-str"]], "skbio.sequence.GrammaredSequence.concat": [[311, "skbio-sequence-grammaredsequence-concat"]], "skbio.sequence.GrammaredSequence.count": [[312, "skbio-sequence-grammaredsequence-count"]], "skbio.sequence.GrammaredSequence.definites": [[313, "skbio-sequence-grammaredsequence-definites"]], "skbio.sequence.GrammaredSequence.degap": [[314, "skbio-sequence-grammaredsequence-degap"]], "skbio.sequence.GrammaredSequence.degenerates": [[315, "skbio-sequence-grammaredsequence-degenerates"]], "skbio.sequence.GrammaredSequence.distance": [[316, "skbio-sequence-grammaredsequence-distance"]], "skbio.sequence.GrammaredSequence.expand_degenerates": [[317, "skbio-sequence-grammaredsequence-expand-degenerates"]], "skbio.sequence.GrammaredSequence.find_motifs": [[318, "skbio-sequence-grammaredsequence-find-motifs"]], "skbio.sequence.GrammaredSequence.find_with_regex": [[319, "skbio-sequence-grammaredsequence-find-with-regex"]], "skbio.sequence.GrammaredSequence.frequencies": [[320, "skbio-sequence-grammaredsequence-frequencies"]], "skbio.sequence.GrammaredSequence.gaps": [[321, "skbio-sequence-grammaredsequence-gaps"]], "skbio.sequence.GrammaredSequence.has_definites": [[322, "skbio-sequence-grammaredsequence-has-definites"]], "skbio.sequence.GrammaredSequence.has_degenerates": [[323, "skbio-sequence-grammaredsequence-has-degenerates"]], "skbio.sequence.GrammaredSequence.has_gaps": [[324, "skbio-sequence-grammaredsequence-has-gaps"]], "skbio.sequence.GrammaredSequence.has_interval_metadata": [[325, "skbio-sequence-grammaredsequence-has-interval-metadata"]], "skbio.sequence.GrammaredSequence.has_metadata": [[326, "skbio-sequence-grammaredsequence-has-metadata"]], "skbio.sequence.GrammaredSequence.has_nondegenerates": [[327, "skbio-sequence-grammaredsequence-has-nondegenerates"]], "skbio.sequence.GrammaredSequence.has_positional_metadata": [[328, "skbio-sequence-grammaredsequence-has-positional-metadata"]], "skbio.sequence.GrammaredSequence.index": [[329, "skbio-sequence-grammaredsequence-index"]], "skbio.sequence.GrammaredSequence.iter_contiguous": [[330, "skbio-sequence-grammaredsequence-iter-contiguous"]], "skbio.sequence.GrammaredSequence.iter_kmers": [[331, "skbio-sequence-grammaredsequence-iter-kmers"]], "skbio.sequence.GrammaredSequence.kmer_frequencies": [[332, "skbio-sequence-grammaredsequence-kmer-frequencies"]], "skbio.sequence.GrammaredSequence.lowercase": [[333, "skbio-sequence-grammaredsequence-lowercase"]], "skbio.sequence.GrammaredSequence.match_frequency": [[334, "skbio-sequence-grammaredsequence-match-frequency"]], "skbio.sequence.GrammaredSequence.matches": [[335, "skbio-sequence-grammaredsequence-matches"]], "skbio.sequence.GrammaredSequence.mismatch_frequency": [[336, "skbio-sequence-grammaredsequence-mismatch-frequency"]], "skbio.sequence.GrammaredSequence.mismatches": [[337, "skbio-sequence-grammaredsequence-mismatches"]], "skbio.sequence.GrammaredSequence.nondegenerates": [[338, "skbio-sequence-grammaredsequence-nondegenerates"]], "skbio.sequence.GrammaredSequence.read": [[339, "skbio-sequence-grammaredsequence-read"]], "skbio.sequence.GrammaredSequence.replace": [[340, "skbio-sequence-grammaredsequence-replace"]], "skbio.sequence.GrammaredSequence.to_definites": [[341, "skbio-sequence-grammaredsequence-to-definites"]], "skbio.sequence.GrammaredSequence.to_indices": [[342, "skbio-sequence-grammaredsequence-to-indices"]], "skbio.sequence.GrammaredSequence.to_regex": [[343, "skbio-sequence-grammaredsequence-to-regex"]], "skbio.sequence.GrammaredSequence.write": [[344, "skbio-sequence-grammaredsequence-write"]], "skbio.sequence.Protein": [[345, "skbio-sequence-protein"]], "skbio.sequence.Protein.__bool__": [[346, "skbio-sequence-protein-bool"]], "skbio.sequence.Protein.__contains__": [[347, "skbio-sequence-protein-contains"]], "skbio.sequence.Protein.__copy__": [[348, "skbio-sequence-protein-copy"]], "skbio.sequence.Protein.__deepcopy__": [[349, "skbio-sequence-protein-deepcopy"]], "skbio.sequence.Protein.__eq__": [[350, "skbio-sequence-protein-eq"]], "skbio.sequence.Protein.__ge__": [[351, "skbio-sequence-protein-ge"]], "skbio.sequence.Protein.__getitem__": [[352, "skbio-sequence-protein-getitem"]], "skbio.sequence.Protein.__getstate__": [[353, "skbio-sequence-protein-getstate"]], "skbio.sequence.Protein.__gt__": [[354, "skbio-sequence-protein-gt"]], "skbio.sequence.Protein.__iter__": [[355, "skbio-sequence-protein-iter"]], "skbio.sequence.Protein.__le__": [[356, "skbio-sequence-protein-le"]], "skbio.sequence.Protein.__len__": [[357, "skbio-sequence-protein-len"]], "skbio.sequence.Protein.__lt__": [[358, "skbio-sequence-protein-lt"]], "skbio.sequence.Protein.__ne__": [[359, "skbio-sequence-protein-ne"]], "skbio.sequence.Protein.__reversed__": [[360, "skbio-sequence-protein-reversed"]], "skbio.sequence.Protein.__str__": [[361, "skbio-sequence-protein-str"]], "skbio.sequence.Protein.concat": [[362, "skbio-sequence-protein-concat"]], "skbio.sequence.Protein.count": [[363, "skbio-sequence-protein-count"]], "skbio.sequence.Protein.definites": [[364, "skbio-sequence-protein-definites"]], "skbio.sequence.Protein.degap": [[365, "skbio-sequence-protein-degap"]], "skbio.sequence.Protein.degenerates": [[366, "skbio-sequence-protein-degenerates"]], "skbio.sequence.Protein.distance": [[367, "skbio-sequence-protein-distance"]], "skbio.sequence.Protein.expand_degenerates": [[368, "skbio-sequence-protein-expand-degenerates"]], "skbio.sequence.Protein.find_motifs": [[369, "skbio-sequence-protein-find-motifs"]], "skbio.sequence.Protein.find_with_regex": [[370, "skbio-sequence-protein-find-with-regex"]], "skbio.sequence.Protein.frequencies": [[371, "skbio-sequence-protein-frequencies"]], "skbio.sequence.Protein.gaps": [[372, "skbio-sequence-protein-gaps"]], "skbio.sequence.Protein.has_definites": [[373, "skbio-sequence-protein-has-definites"]], "skbio.sequence.Protein.has_degenerates": [[374, "skbio-sequence-protein-has-degenerates"]], "skbio.sequence.Protein.has_gaps": [[375, "skbio-sequence-protein-has-gaps"]], "skbio.sequence.Protein.has_interval_metadata": [[376, "skbio-sequence-protein-has-interval-metadata"]], "skbio.sequence.Protein.has_metadata": [[377, "skbio-sequence-protein-has-metadata"]], "skbio.sequence.Protein.has_nondegenerates": [[378, "skbio-sequence-protein-has-nondegenerates"]], "skbio.sequence.Protein.has_positional_metadata": [[379, "skbio-sequence-protein-has-positional-metadata"]], "skbio.sequence.Protein.has_stops": [[380, "skbio-sequence-protein-has-stops"]], "skbio.sequence.Protein.index": [[381, "skbio-sequence-protein-index"]], "skbio.sequence.Protein.iter_contiguous": [[382, "skbio-sequence-protein-iter-contiguous"]], "skbio.sequence.Protein.iter_kmers": [[383, "skbio-sequence-protein-iter-kmers"]], "skbio.sequence.Protein.kmer_frequencies": [[384, "skbio-sequence-protein-kmer-frequencies"]], "skbio.sequence.Protein.lowercase": [[385, "skbio-sequence-protein-lowercase"]], "skbio.sequence.Protein.match_frequency": [[386, "skbio-sequence-protein-match-frequency"]], "skbio.sequence.Protein.matches": [[387, "skbio-sequence-protein-matches"]], "skbio.sequence.Protein.mismatch_frequency": [[388, "skbio-sequence-protein-mismatch-frequency"]], "skbio.sequence.Protein.mismatches": [[389, "skbio-sequence-protein-mismatches"]], "skbio.sequence.Protein.nondegenerates": [[390, "skbio-sequence-protein-nondegenerates"]], "skbio.sequence.Protein.read": [[391, "skbio-sequence-protein-read"]], "skbio.sequence.Protein.replace": [[392, "skbio-sequence-protein-replace"]], "skbio.sequence.Protein.stops": [[393, "skbio-sequence-protein-stops"]], "skbio.sequence.Protein.to_definites": [[394, "skbio-sequence-protein-to-definites"]], "skbio.sequence.Protein.to_indices": [[395, "skbio-sequence-protein-to-indices"]], "skbio.sequence.Protein.to_regex": [[396, "skbio-sequence-protein-to-regex"]], "skbio.sequence.Protein.write": [[397, "skbio-sequence-protein-write"]], "skbio.sequence.RNA": [[398, "skbio-sequence-rna"]], "skbio.sequence.RNA.__bool__": [[399, "skbio-sequence-rna-bool"]], "skbio.sequence.RNA.__contains__": [[400, "skbio-sequence-rna-contains"]], "skbio.sequence.RNA.__copy__": [[401, "skbio-sequence-rna-copy"]], "skbio.sequence.RNA.__deepcopy__": [[402, "skbio-sequence-rna-deepcopy"]], "skbio.sequence.RNA.__eq__": [[403, "skbio-sequence-rna-eq"]], "skbio.sequence.RNA.__ge__": [[404, "skbio-sequence-rna-ge"]], "skbio.sequence.RNA.__getitem__": [[405, "skbio-sequence-rna-getitem"]], "skbio.sequence.RNA.__getstate__": [[406, "skbio-sequence-rna-getstate"]], "skbio.sequence.RNA.__gt__": [[407, "skbio-sequence-rna-gt"]], "skbio.sequence.RNA.__iter__": [[408, "skbio-sequence-rna-iter"]], "skbio.sequence.RNA.__le__": [[409, "skbio-sequence-rna-le"]], "skbio.sequence.RNA.__len__": [[410, "skbio-sequence-rna-len"]], "skbio.sequence.RNA.__lt__": [[411, "skbio-sequence-rna-lt"]], "skbio.sequence.RNA.__ne__": [[412, "skbio-sequence-rna-ne"]], "skbio.sequence.RNA.__reversed__": [[413, "skbio-sequence-rna-reversed"]], "skbio.sequence.RNA.__str__": [[414, "skbio-sequence-rna-str"]], "skbio.sequence.RNA.complement": [[415, "skbio-sequence-rna-complement"]], "skbio.sequence.RNA.concat": [[416, "skbio-sequence-rna-concat"]], "skbio.sequence.RNA.count": [[417, "skbio-sequence-rna-count"]], "skbio.sequence.RNA.definites": [[418, "skbio-sequence-rna-definites"]], "skbio.sequence.RNA.degap": [[419, "skbio-sequence-rna-degap"]], "skbio.sequence.RNA.degenerates": [[420, "skbio-sequence-rna-degenerates"]], "skbio.sequence.RNA.distance": [[421, "skbio-sequence-rna-distance"]], "skbio.sequence.RNA.expand_degenerates": [[422, "skbio-sequence-rna-expand-degenerates"]], "skbio.sequence.RNA.find_motifs": [[423, "skbio-sequence-rna-find-motifs"]], "skbio.sequence.RNA.find_with_regex": [[424, "skbio-sequence-rna-find-with-regex"]], "skbio.sequence.RNA.frequencies": [[425, "skbio-sequence-rna-frequencies"]], "skbio.sequence.RNA.gaps": [[426, "skbio-sequence-rna-gaps"]], "skbio.sequence.RNA.gc_content": [[427, "skbio-sequence-rna-gc-content"]], "skbio.sequence.RNA.gc_frequency": [[428, "skbio-sequence-rna-gc-frequency"]], "skbio.sequence.RNA.has_definites": [[429, "skbio-sequence-rna-has-definites"]], "skbio.sequence.RNA.has_degenerates": [[430, "skbio-sequence-rna-has-degenerates"]], "skbio.sequence.RNA.has_gaps": [[431, "skbio-sequence-rna-has-gaps"]], "skbio.sequence.RNA.has_interval_metadata": [[432, "skbio-sequence-rna-has-interval-metadata"]], "skbio.sequence.RNA.has_metadata": [[433, "skbio-sequence-rna-has-metadata"]], "skbio.sequence.RNA.has_nondegenerates": [[434, "skbio-sequence-rna-has-nondegenerates"]], "skbio.sequence.RNA.has_positional_metadata": [[435, "skbio-sequence-rna-has-positional-metadata"]], "skbio.sequence.RNA.index": [[436, "skbio-sequence-rna-index"]], "skbio.sequence.RNA.is_reverse_complement": [[437, "skbio-sequence-rna-is-reverse-complement"]], "skbio.sequence.RNA.iter_contiguous": [[438, "skbio-sequence-rna-iter-contiguous"]], "skbio.sequence.RNA.iter_kmers": [[439, "skbio-sequence-rna-iter-kmers"]], "skbio.sequence.RNA.kmer_frequencies": [[440, "skbio-sequence-rna-kmer-frequencies"]], "skbio.sequence.RNA.lowercase": [[441, "skbio-sequence-rna-lowercase"]], "skbio.sequence.RNA.match_frequency": [[442, "skbio-sequence-rna-match-frequency"]], "skbio.sequence.RNA.matches": [[443, "skbio-sequence-rna-matches"]], "skbio.sequence.RNA.mismatch_frequency": [[444, "skbio-sequence-rna-mismatch-frequency"]], "skbio.sequence.RNA.mismatches": [[445, "skbio-sequence-rna-mismatches"]], "skbio.sequence.RNA.nondegenerates": [[446, "skbio-sequence-rna-nondegenerates"]], "skbio.sequence.RNA.read": [[447, "skbio-sequence-rna-read"]], "skbio.sequence.RNA.replace": [[448, "skbio-sequence-rna-replace"]], "skbio.sequence.RNA.reverse_complement": [[449, "skbio-sequence-rna-reverse-complement"]], "skbio.sequence.RNA.reverse_transcribe": [[450, "skbio-sequence-rna-reverse-transcribe"]], "skbio.sequence.RNA.to_definites": [[451, "skbio-sequence-rna-to-definites"]], "skbio.sequence.RNA.to_indices": [[452, "skbio-sequence-rna-to-indices"]], "skbio.sequence.RNA.to_regex": [[453, "skbio-sequence-rna-to-regex"]], "skbio.sequence.RNA.translate": [[454, "skbio-sequence-rna-translate"]], "skbio.sequence.RNA.translate_six_frames": [[455, "skbio-sequence-rna-translate-six-frames"]], "skbio.sequence.RNA.write": [[456, "skbio-sequence-rna-write"]], "skbio.sequence.Sequence": [[457, "skbio-sequence-sequence"]], "skbio.sequence.Sequence.__bool__": [[458, "skbio-sequence-sequence-bool"]], "skbio.sequence.Sequence.__contains__": [[459, "skbio-sequence-sequence-contains"]], "skbio.sequence.Sequence.__copy__": [[460, "skbio-sequence-sequence-copy"]], "skbio.sequence.Sequence.__deepcopy__": [[461, "skbio-sequence-sequence-deepcopy"]], "skbio.sequence.Sequence.__eq__": [[462, "skbio-sequence-sequence-eq"]], "skbio.sequence.Sequence.__ge__": [[463, "skbio-sequence-sequence-ge"]], "skbio.sequence.Sequence.__getitem__": [[464, "skbio-sequence-sequence-getitem"]], "skbio.sequence.Sequence.__getstate__": [[465, "skbio-sequence-sequence-getstate"]], "skbio.sequence.Sequence.__gt__": [[466, "skbio-sequence-sequence-gt"]], "skbio.sequence.Sequence.__iter__": [[467, "skbio-sequence-sequence-iter"]], "skbio.sequence.Sequence.__le__": [[468, "skbio-sequence-sequence-le"]], "skbio.sequence.Sequence.__len__": [[469, "skbio-sequence-sequence-len"]], "skbio.sequence.Sequence.__lt__": [[470, "skbio-sequence-sequence-lt"]], "skbio.sequence.Sequence.__ne__": [[471, "skbio-sequence-sequence-ne"]], "skbio.sequence.Sequence.__reversed__": [[472, "skbio-sequence-sequence-reversed"]], "skbio.sequence.Sequence.__str__": [[473, "skbio-sequence-sequence-str"]], "skbio.sequence.Sequence.concat": [[474, "skbio-sequence-sequence-concat"]], "skbio.sequence.Sequence.count": [[475, "skbio-sequence-sequence-count"]], "skbio.sequence.Sequence.distance": [[476, "skbio-sequence-sequence-distance"]], "skbio.sequence.Sequence.find_with_regex": [[477, "skbio-sequence-sequence-find-with-regex"]], "skbio.sequence.Sequence.frequencies": [[478, "skbio-sequence-sequence-frequencies"]], "skbio.sequence.Sequence.has_interval_metadata": [[479, "skbio-sequence-sequence-has-interval-metadata"]], "skbio.sequence.Sequence.has_metadata": [[480, "skbio-sequence-sequence-has-metadata"]], "skbio.sequence.Sequence.has_positional_metadata": [[481, "skbio-sequence-sequence-has-positional-metadata"]], "skbio.sequence.Sequence.index": [[482, "skbio-sequence-sequence-index"]], "skbio.sequence.Sequence.iter_contiguous": [[483, "skbio-sequence-sequence-iter-contiguous"]], "skbio.sequence.Sequence.iter_kmers": [[484, "skbio-sequence-sequence-iter-kmers"]], "skbio.sequence.Sequence.kmer_frequencies": [[485, "skbio-sequence-sequence-kmer-frequencies"]], "skbio.sequence.Sequence.lowercase": [[486, "skbio-sequence-sequence-lowercase"]], "skbio.sequence.Sequence.match_frequency": [[487, "skbio-sequence-sequence-match-frequency"]], "skbio.sequence.Sequence.matches": [[488, "skbio-sequence-sequence-matches"]], "skbio.sequence.Sequence.mismatch_frequency": [[489, "skbio-sequence-sequence-mismatch-frequency"]], "skbio.sequence.Sequence.mismatches": [[490, "skbio-sequence-sequence-mismatches"]], "skbio.sequence.Sequence.read": [[491, "skbio-sequence-sequence-read"]], "skbio.sequence.Sequence.replace": [[492, "skbio-sequence-sequence-replace"]], "skbio.sequence.Sequence.to_indices": [[493, "skbio-sequence-sequence-to-indices"]], "skbio.sequence.Sequence.write": [[494, "skbio-sequence-sequence-write"]], "skbio.sequence.SubstitutionMatrix": [[495, "skbio-sequence-substitutionmatrix"]], "skbio.sequence.SubstitutionMatrix.__contains__": [[496, "skbio-sequence-substitutionmatrix-contains"]], "skbio.sequence.SubstitutionMatrix.__eq__": [[497, "skbio-sequence-substitutionmatrix-eq"]], "skbio.sequence.SubstitutionMatrix.__ge__": [[498, "skbio-sequence-substitutionmatrix-ge"]], "skbio.sequence.SubstitutionMatrix.__getitem__": [[499, "skbio-sequence-substitutionmatrix-getitem"]], "skbio.sequence.SubstitutionMatrix.__getstate__": [[500, "skbio-sequence-substitutionmatrix-getstate"]], "skbio.sequence.SubstitutionMatrix.__gt__": [[501, "skbio-sequence-substitutionmatrix-gt"]], "skbio.sequence.SubstitutionMatrix.__le__": [[502, "skbio-sequence-substitutionmatrix-le"]], "skbio.sequence.SubstitutionMatrix.__lt__": [[503, "skbio-sequence-substitutionmatrix-lt"]], "skbio.sequence.SubstitutionMatrix.__ne__": [[504, "skbio-sequence-substitutionmatrix-ne"]], "skbio.sequence.SubstitutionMatrix.__str__": [[505, "skbio-sequence-substitutionmatrix-str"]], "skbio.sequence.SubstitutionMatrix.between": [[506, "skbio-sequence-substitutionmatrix-between"]], "skbio.sequence.SubstitutionMatrix.by_name": [[507, "skbio-sequence-substitutionmatrix-by-name"]], "skbio.sequence.SubstitutionMatrix.copy": [[508, "skbio-sequence-substitutionmatrix-copy"]], "skbio.sequence.SubstitutionMatrix.filter": [[509, "skbio-sequence-substitutionmatrix-filter"]], "skbio.sequence.SubstitutionMatrix.from_dict": [[510, "skbio-sequence-substitutionmatrix-from-dict"]], "skbio.sequence.SubstitutionMatrix.from_iterable": [[511, "skbio-sequence-substitutionmatrix-from-iterable"]], "skbio.sequence.SubstitutionMatrix.get_names": [[512, "skbio-sequence-substitutionmatrix-get-names"]], "skbio.sequence.SubstitutionMatrix.identity": [[513, "skbio-sequence-substitutionmatrix-identity"]], "skbio.sequence.SubstitutionMatrix.index": [[514, "skbio-sequence-substitutionmatrix-index"]], "skbio.sequence.SubstitutionMatrix.plot": [[515, "skbio-sequence-substitutionmatrix-plot"]], "skbio.sequence.SubstitutionMatrix.read": [[516, "skbio-sequence-substitutionmatrix-read"]], "skbio.sequence.SubstitutionMatrix.redundant_form": [[517, "skbio-sequence-substitutionmatrix-redundant-form"]], "skbio.sequence.SubstitutionMatrix.to_data_frame": [[518, "skbio-sequence-substitutionmatrix-to-data-frame"]], "skbio.sequence.SubstitutionMatrix.to_dict": [[519, "skbio-sequence-substitutionmatrix-to-dict"]], "skbio.sequence.SubstitutionMatrix.transpose": [[520, "skbio-sequence-substitutionmatrix-transpose"]], "skbio.sequence.SubstitutionMatrix.within": [[521, "skbio-sequence-substitutionmatrix-within"]], "skbio.sequence.SubstitutionMatrix.write": [[522, "skbio-sequence-substitutionmatrix-write"]], "Sequence distance metrics (skbio.sequence.distance)": [[523, "sequence-distance-metrics-skbio-sequence-distance"]], "skbio.sequence.distance.hamming": [[524, "skbio-sequence-distance-hamming"]], "skbio.sequence.distance.kmer_distance": [[525, "skbio-sequence-distance-kmer-distance"]], "Composition Statistics (skbio.stats.composition)": [[526, "composition-statistics-skbio-stats-composition"]], "skbio.stats.composition.alr": [[527, "skbio-stats-composition-alr"]], "skbio.stats.composition.alr_inv": [[528, "skbio-stats-composition-alr-inv"]], "skbio.stats.composition.ancom": [[529, "skbio-stats-composition-ancom"]], "skbio.stats.composition.centralize": [[530, "skbio-stats-composition-centralize"]], "skbio.stats.composition.closure": [[531, "skbio-stats-composition-closure"]], "skbio.stats.composition.clr": [[532, "skbio-stats-composition-clr"]], "skbio.stats.composition.clr_inv": [[533, "skbio-stats-composition-clr-inv"]], "skbio.stats.composition.dirmult_ttest": [[534, "skbio-stats-composition-dirmult-ttest"]], "skbio.stats.composition.ilr": [[535, "skbio-stats-composition-ilr"]], "skbio.stats.composition.ilr_inv": [[536, "skbio-stats-composition-ilr-inv"]], "skbio.stats.composition.inner": [[537, "skbio-stats-composition-inner"]], "skbio.stats.composition.multi_replace": [[538, "skbio-stats-composition-multi-replace"]], "skbio.stats.composition.multiplicative_replacement": [[539, "skbio-stats-composition-multiplicative-replacement"]], "skbio.stats.composition.pairwise_vlr": [[540, "skbio-stats-composition-pairwise-vlr"]], "skbio.stats.composition.perturb": [[541, "skbio-stats-composition-perturb"]], "skbio.stats.composition.perturb_inv": [[542, "skbio-stats-composition-perturb-inv"]], "skbio.stats.composition.power": [[543, "skbio-stats-composition-power"]], "skbio.stats.composition.sbp_basis": [[544, "skbio-stats-composition-sbp-basis"]], "skbio.stats.composition.tree_basis": [[545, "skbio-stats-composition-tree-basis"]], "skbio.stats.composition.vlr": [[546, "skbio-stats-composition-vlr"]], "Distance matrices and distance-based statistics (skbio.stats.distance)": [[547, "distance-matrices-and-distance-based-statistics-skbio-stats-distance"]], "Data Structures: DissimilarityMatrix and DistanceMatrix": [[547, "data-structures-dissimilaritymatrix-and-distancematrix"]], "Distance-based statistics": [[547, "distance-based-statistics"]], "Categorical Variable Stats": [[547, "categorical-variable-stats"]], "Continuous Variable Stats": [[547, "continuous-variable-stats"]], "Distance Matrix Comparisons": [[547, "distance-matrix-comparisons"]], "skbio.stats.distance.DissimilarityMatrix": [[548, "skbio-stats-distance-dissimilaritymatrix"]], "skbio.stats.distance.DissimilarityMatrix.__contains__": [[549, "skbio-stats-distance-dissimilaritymatrix-contains"]], "skbio.stats.distance.DissimilarityMatrix.__eq__": [[550, "skbio-stats-distance-dissimilaritymatrix-eq"]], "skbio.stats.distance.DissimilarityMatrix.__ge__": [[551, "skbio-stats-distance-dissimilaritymatrix-ge"]], "skbio.stats.distance.DissimilarityMatrix.__getitem__": [[552, "skbio-stats-distance-dissimilaritymatrix-getitem"]], "skbio.stats.distance.DissimilarityMatrix.__getstate__": [[553, "skbio-stats-distance-dissimilaritymatrix-getstate"]], "skbio.stats.distance.DissimilarityMatrix.__gt__": [[554, "skbio-stats-distance-dissimilaritymatrix-gt"]], "skbio.stats.distance.DissimilarityMatrix.__le__": [[555, "skbio-stats-distance-dissimilaritymatrix-le"]], "skbio.stats.distance.DissimilarityMatrix.__lt__": [[556, "skbio-stats-distance-dissimilaritymatrix-lt"]], "skbio.stats.distance.DissimilarityMatrix.__ne__": [[557, "skbio-stats-distance-dissimilaritymatrix-ne"]], "skbio.stats.distance.DissimilarityMatrix.__str__": [[558, "skbio-stats-distance-dissimilaritymatrix-str"]], "skbio.stats.distance.DissimilarityMatrix.between": [[559, "skbio-stats-distance-dissimilaritymatrix-between"]], "skbio.stats.distance.DissimilarityMatrix.copy": [[560, "skbio-stats-distance-dissimilaritymatrix-copy"]], "skbio.stats.distance.DissimilarityMatrix.filter": [[561, "skbio-stats-distance-dissimilaritymatrix-filter"]], "skbio.stats.distance.DissimilarityMatrix.from_iterable": [[562, "skbio-stats-distance-dissimilaritymatrix-from-iterable"]], "skbio.stats.distance.DissimilarityMatrix.index": [[563, "skbio-stats-distance-dissimilaritymatrix-index"]], "skbio.stats.distance.DissimilarityMatrix.plot": [[564, "skbio-stats-distance-dissimilaritymatrix-plot"]], "skbio.stats.distance.DissimilarityMatrix.read": [[565, "skbio-stats-distance-dissimilaritymatrix-read"]], "skbio.stats.distance.DissimilarityMatrix.redundant_form": [[566, "skbio-stats-distance-dissimilaritymatrix-redundant-form"]], "skbio.stats.distance.DissimilarityMatrix.to_data_frame": [[567, "skbio-stats-distance-dissimilaritymatrix-to-data-frame"]], "skbio.stats.distance.DissimilarityMatrix.transpose": [[568, "skbio-stats-distance-dissimilaritymatrix-transpose"]], "skbio.stats.distance.DissimilarityMatrix.within": [[569, "skbio-stats-distance-dissimilaritymatrix-within"]], "skbio.stats.distance.DissimilarityMatrix.write": [[570, "skbio-stats-distance-dissimilaritymatrix-write"]], "skbio.stats.distance.DissimilarityMatrixError": [[571, "skbio-stats-distance-dissimilaritymatrixerror"]], "skbio.stats.distance.DistanceMatrix": [[572, "skbio-stats-distance-distancematrix"]], "skbio.stats.distance.DistanceMatrix.__contains__": [[573, "skbio-stats-distance-distancematrix-contains"]], "skbio.stats.distance.DistanceMatrix.__eq__": [[574, "skbio-stats-distance-distancematrix-eq"]], "skbio.stats.distance.DistanceMatrix.__ge__": [[575, "skbio-stats-distance-distancematrix-ge"]], "skbio.stats.distance.DistanceMatrix.__getitem__": [[576, "skbio-stats-distance-distancematrix-getitem"]], "skbio.stats.distance.DistanceMatrix.__getstate__": [[577, "skbio-stats-distance-distancematrix-getstate"]], "skbio.stats.distance.DistanceMatrix.__gt__": [[578, "skbio-stats-distance-distancematrix-gt"]], "skbio.stats.distance.DistanceMatrix.__le__": [[579, "skbio-stats-distance-distancematrix-le"]], "skbio.stats.distance.DistanceMatrix.__lt__": [[580, "skbio-stats-distance-distancematrix-lt"]], "skbio.stats.distance.DistanceMatrix.__ne__": [[581, "skbio-stats-distance-distancematrix-ne"]], "skbio.stats.distance.DistanceMatrix.__str__": [[582, "skbio-stats-distance-distancematrix-str"]], "skbio.stats.distance.DistanceMatrix.between": [[583, "skbio-stats-distance-distancematrix-between"]], "skbio.stats.distance.DistanceMatrix.condensed_form": [[584, "skbio-stats-distance-distancematrix-condensed-form"]], "skbio.stats.distance.DistanceMatrix.copy": [[585, "skbio-stats-distance-distancematrix-copy"]], "skbio.stats.distance.DistanceMatrix.filter": [[586, "skbio-stats-distance-distancematrix-filter"]], "skbio.stats.distance.DistanceMatrix.from_iterable": [[587, "skbio-stats-distance-distancematrix-from-iterable"]], "skbio.stats.distance.DistanceMatrix.index": [[588, "skbio-stats-distance-distancematrix-index"]], "skbio.stats.distance.DistanceMatrix.permute": [[589, "skbio-stats-distance-distancematrix-permute"]], "skbio.stats.distance.DistanceMatrix.plot": [[590, "skbio-stats-distance-distancematrix-plot"]], "skbio.stats.distance.DistanceMatrix.read": [[591, "skbio-stats-distance-distancematrix-read"]], "skbio.stats.distance.DistanceMatrix.redundant_form": [[592, "skbio-stats-distance-distancematrix-redundant-form"]], "skbio.stats.distance.DistanceMatrix.to_data_frame": [[593, "skbio-stats-distance-distancematrix-to-data-frame"]], "skbio.stats.distance.DistanceMatrix.to_series": [[594, "skbio-stats-distance-distancematrix-to-series"]], "skbio.stats.distance.DistanceMatrix.transpose": [[595, "skbio-stats-distance-distancematrix-transpose"]], "skbio.stats.distance.DistanceMatrix.within": [[596, "skbio-stats-distance-distancematrix-within"]], "skbio.stats.distance.DistanceMatrix.write": [[597, "skbio-stats-distance-distancematrix-write"]], "skbio.stats.distance.DistanceMatrixError": [[598, "skbio-stats-distance-distancematrixerror"]], "skbio.stats.distance.MissingIDError": [[599, "skbio-stats-distance-missingiderror"]], "skbio.stats.distance.anosim": [[600, "skbio-stats-distance-anosim"]], "skbio.stats.distance.bioenv": [[601, "skbio-stats-distance-bioenv"]], "skbio.stats.distance.mantel": [[602, "skbio-stats-distance-mantel"]], "skbio.stats.distance.permanova": [[603, "skbio-stats-distance-permanova"]], "skbio.stats.distance.permdisp": [[604, "skbio-stats-distance-permdisp"]], "skbio.stats.distance.pwmantel": [[605, "skbio-stats-distance-pwmantel"]], "skbio.stats.distance.randdm": [[606, "skbio-stats-distance-randdm"]], "Evolutionary statistics (skbio.stats.evolve)": [[607, "evolutionary-statistics-skbio-stats-evolve"]], "Cophylogenetic methods": [[607, "cophylogenetic-methods"]], "skbio.stats.evolve.hommola_cospeciation": [[608, "skbio-stats-evolve-hommola-cospeciation"]], "Gradient analyses (skbio.stats.gradient)": [[609, "gradient-analyses-skbio-stats-gradient"]], "skbio.stats.gradient.AverageGradientANOVA": [[610, "skbio-stats-gradient-averagegradientanova"]], "skbio.stats.gradient.AverageGradientANOVA.__eq__": [[611, "skbio-stats-gradient-averagegradientanova-eq"]], "skbio.stats.gradient.AverageGradientANOVA.__ge__": [[612, "skbio-stats-gradient-averagegradientanova-ge"]], "skbio.stats.gradient.AverageGradientANOVA.__getstate__": [[613, "skbio-stats-gradient-averagegradientanova-getstate"]], "skbio.stats.gradient.AverageGradientANOVA.__gt__": [[614, "skbio-stats-gradient-averagegradientanova-gt"]], "skbio.stats.gradient.AverageGradientANOVA.__hash__": [[615, "skbio-stats-gradient-averagegradientanova-hash"]], "skbio.stats.gradient.AverageGradientANOVA.__le__": [[616, "skbio-stats-gradient-averagegradientanova-le"]], "skbio.stats.gradient.AverageGradientANOVA.__lt__": [[617, "skbio-stats-gradient-averagegradientanova-lt"]], "skbio.stats.gradient.AverageGradientANOVA.__ne__": [[618, "skbio-stats-gradient-averagegradientanova-ne"]], "skbio.stats.gradient.AverageGradientANOVA.__str__": [[619, "skbio-stats-gradient-averagegradientanova-str"]], "skbio.stats.gradient.AverageGradientANOVA.get_trajectories": [[620, "skbio-stats-gradient-averagegradientanova-get-trajectories"]], "skbio.stats.gradient.CategoryResults": [[621, "skbio-stats-gradient-categoryresults"]], "skbio.stats.gradient.CategoryResults.__eq__": [[622, "skbio-stats-gradient-categoryresults-eq"]], "skbio.stats.gradient.CategoryResults.__ge__": [[623, "skbio-stats-gradient-categoryresults-ge"]], "skbio.stats.gradient.CategoryResults.__getstate__": [[624, "skbio-stats-gradient-categoryresults-getstate"]], "skbio.stats.gradient.CategoryResults.__gt__": [[625, "skbio-stats-gradient-categoryresults-gt"]], "skbio.stats.gradient.CategoryResults.__hash__": [[626, "skbio-stats-gradient-categoryresults-hash"]], "skbio.stats.gradient.CategoryResults.__le__": [[627, "skbio-stats-gradient-categoryresults-le"]], "skbio.stats.gradient.CategoryResults.__lt__": [[628, "skbio-stats-gradient-categoryresults-lt"]], "skbio.stats.gradient.CategoryResults.__ne__": [[629, "skbio-stats-gradient-categoryresults-ne"]], "skbio.stats.gradient.CategoryResults.__str__": [[630, "skbio-stats-gradient-categoryresults-str"]], "skbio.stats.gradient.CategoryResults.to_files": [[631, "skbio-stats-gradient-categoryresults-to-files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[632, "skbio-stats-gradient-firstdifferencegradientanova"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__": [[633, "skbio-stats-gradient-firstdifferencegradientanova-eq"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__": [[634, "skbio-stats-gradient-firstdifferencegradientanova-ge"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__": [[635, "skbio-stats-gradient-firstdifferencegradientanova-getstate"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__": [[636, "skbio-stats-gradient-firstdifferencegradientanova-gt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__": [[637, "skbio-stats-gradient-firstdifferencegradientanova-hash"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__": [[638, "skbio-stats-gradient-firstdifferencegradientanova-le"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__": [[639, "skbio-stats-gradient-firstdifferencegradientanova-lt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__": [[640, "skbio-stats-gradient-firstdifferencegradientanova-ne"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__": [[641, "skbio-stats-gradient-firstdifferencegradientanova-str"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories": [[642, "skbio-stats-gradient-firstdifferencegradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVA": [[643, "skbio-stats-gradient-gradientanova"]], "skbio.stats.gradient.GradientANOVA.__eq__": [[644, "skbio-stats-gradient-gradientanova-eq"]], "skbio.stats.gradient.GradientANOVA.__ge__": [[645, "skbio-stats-gradient-gradientanova-ge"]], "skbio.stats.gradient.GradientANOVA.__getstate__": [[646, "skbio-stats-gradient-gradientanova-getstate"]], "skbio.stats.gradient.GradientANOVA.__gt__": [[647, "skbio-stats-gradient-gradientanova-gt"]], "skbio.stats.gradient.GradientANOVA.__hash__": [[648, "skbio-stats-gradient-gradientanova-hash"]], "skbio.stats.gradient.GradientANOVA.__le__": [[649, "skbio-stats-gradient-gradientanova-le"]], "skbio.stats.gradient.GradientANOVA.__lt__": [[650, "skbio-stats-gradient-gradientanova-lt"]], "skbio.stats.gradient.GradientANOVA.__ne__": [[651, "skbio-stats-gradient-gradientanova-ne"]], "skbio.stats.gradient.GradientANOVA.__str__": [[652, "skbio-stats-gradient-gradientanova-str"]], "skbio.stats.gradient.GradientANOVA.get_trajectories": [[653, "skbio-stats-gradient-gradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[654, "skbio-stats-gradient-gradientanovaresults"]], "skbio.stats.gradient.GradientANOVAResults.__eq__": [[655, "skbio-stats-gradient-gradientanovaresults-eq"]], "skbio.stats.gradient.GradientANOVAResults.__ge__": [[656, "skbio-stats-gradient-gradientanovaresults-ge"]], "skbio.stats.gradient.GradientANOVAResults.__getstate__": [[657, "skbio-stats-gradient-gradientanovaresults-getstate"]], "skbio.stats.gradient.GradientANOVAResults.__gt__": [[658, "skbio-stats-gradient-gradientanovaresults-gt"]], "skbio.stats.gradient.GradientANOVAResults.__hash__": [[659, "skbio-stats-gradient-gradientanovaresults-hash"]], "skbio.stats.gradient.GradientANOVAResults.__le__": [[660, "skbio-stats-gradient-gradientanovaresults-le"]], "skbio.stats.gradient.GradientANOVAResults.__lt__": [[661, "skbio-stats-gradient-gradientanovaresults-lt"]], "skbio.stats.gradient.GradientANOVAResults.__ne__": [[662, "skbio-stats-gradient-gradientanovaresults-ne"]], "skbio.stats.gradient.GradientANOVAResults.__str__": [[663, "skbio-stats-gradient-gradientanovaresults-str"]], "skbio.stats.gradient.GradientANOVAResults.to_files": [[664, "skbio-stats-gradient-gradientanovaresults-to-files"]], "skbio.stats.gradient.GroupResults": [[665, "skbio-stats-gradient-groupresults"]], "skbio.stats.gradient.GroupResults.__eq__": [[666, "skbio-stats-gradient-groupresults-eq"]], "skbio.stats.gradient.GroupResults.__ge__": [[667, "skbio-stats-gradient-groupresults-ge"]], "skbio.stats.gradient.GroupResults.__getstate__": [[668, "skbio-stats-gradient-groupresults-getstate"]], "skbio.stats.gradient.GroupResults.__gt__": [[669, "skbio-stats-gradient-groupresults-gt"]], "skbio.stats.gradient.GroupResults.__hash__": [[670, "skbio-stats-gradient-groupresults-hash"]], "skbio.stats.gradient.GroupResults.__le__": [[671, "skbio-stats-gradient-groupresults-le"]], "skbio.stats.gradient.GroupResults.__lt__": [[672, "skbio-stats-gradient-groupresults-lt"]], "skbio.stats.gradient.GroupResults.__ne__": [[673, "skbio-stats-gradient-groupresults-ne"]], "skbio.stats.gradient.GroupResults.__str__": [[674, "skbio-stats-gradient-groupresults-str"]], "skbio.stats.gradient.GroupResults.to_files": [[675, "skbio-stats-gradient-groupresults-to-files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[676, "skbio-stats-gradient-trajectorygradientanova"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__": [[677, "skbio-stats-gradient-trajectorygradientanova-eq"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__": [[678, "skbio-stats-gradient-trajectorygradientanova-ge"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__": [[679, "skbio-stats-gradient-trajectorygradientanova-getstate"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__": [[680, "skbio-stats-gradient-trajectorygradientanova-gt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__": [[681, "skbio-stats-gradient-trajectorygradientanova-hash"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__le__": [[682, "skbio-stats-gradient-trajectorygradientanova-le"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__": [[683, "skbio-stats-gradient-trajectorygradientanova-lt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__": [[684, "skbio-stats-gradient-trajectorygradientanova-ne"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__str__": [[685, "skbio-stats-gradient-trajectorygradientanova-str"]], "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories": [[686, "skbio-stats-gradient-trajectorygradientanova-get-trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[687, "skbio-stats-gradient-windowdifferencegradientanova"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__": [[688, "skbio-stats-gradient-windowdifferencegradientanova-eq"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__": [[689, "skbio-stats-gradient-windowdifferencegradientanova-ge"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__": [[690, "skbio-stats-gradient-windowdifferencegradientanova-getstate"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__": [[691, "skbio-stats-gradient-windowdifferencegradientanova-gt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__": [[692, "skbio-stats-gradient-windowdifferencegradientanova-hash"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__": [[693, "skbio-stats-gradient-windowdifferencegradientanova-le"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__": [[694, "skbio-stats-gradient-windowdifferencegradientanova-lt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__": [[695, "skbio-stats-gradient-windowdifferencegradientanova-ne"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__": [[696, "skbio-stats-gradient-windowdifferencegradientanova-str"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories": [[697, "skbio-stats-gradient-windowdifferencegradientanova-get-trajectories"]], "skbio.stats.isubsample": [[698, "skbio-stats-isubsample"]], "Ordination methods (skbio.stats.ordination)": [[699, "ordination-methods-skbio-stats-ordination"]], "Ordination Functions": [[699, "ordination-functions"]], "Utility Functions": [[699, "utility-functions"], [881, "utility-functions"]], "skbio.stats.ordination.OrdinationResults": [[700, "skbio-stats-ordination-ordinationresults"]], "skbio.stats.ordination.OrdinationResults.__eq__": [[701, "skbio-stats-ordination-ordinationresults-eq"]], "skbio.stats.ordination.OrdinationResults.__ge__": [[702, "skbio-stats-ordination-ordinationresults-ge"]], "skbio.stats.ordination.OrdinationResults.__getstate__": [[703, "skbio-stats-ordination-ordinationresults-getstate"]], "skbio.stats.ordination.OrdinationResults.__gt__": [[704, "skbio-stats-ordination-ordinationresults-gt"]], "skbio.stats.ordination.OrdinationResults.__hash__": [[705, "skbio-stats-ordination-ordinationresults-hash"]], "skbio.stats.ordination.OrdinationResults.__le__": [[706, "skbio-stats-ordination-ordinationresults-le"]], "skbio.stats.ordination.OrdinationResults.__lt__": [[707, "skbio-stats-ordination-ordinationresults-lt"]], "skbio.stats.ordination.OrdinationResults.__ne__": [[708, "skbio-stats-ordination-ordinationresults-ne"]], "skbio.stats.ordination.OrdinationResults.__str__": [[709, "skbio-stats-ordination-ordinationresults-str"]], "skbio.stats.ordination.OrdinationResults.plot": [[710, "skbio-stats-ordination-ordinationresults-plot"]], "skbio.stats.ordination.OrdinationResults.read": [[711, "skbio-stats-ordination-ordinationresults-read"]], "skbio.stats.ordination.OrdinationResults.write": [[712, "skbio-stats-ordination-ordinationresults-write"]], "skbio.stats.ordination.ca": [[713, "skbio-stats-ordination-ca"]], "skbio.stats.ordination.cca": [[714, "skbio-stats-ordination-cca"]], "skbio.stats.ordination.corr": [[715, "skbio-stats-ordination-corr"]], "skbio.stats.ordination.e_matrix": [[716, "skbio-stats-ordination-e-matrix"]], "skbio.stats.ordination.f_matrix": [[717, "skbio-stats-ordination-f-matrix"]], "skbio.stats.ordination.mean_and_std": [[718, "skbio-stats-ordination-mean-and-std"]], "skbio.stats.ordination.pcoa": [[719, "skbio-stats-ordination-pcoa"]], "skbio.stats.ordination.pcoa_biplot": [[720, "skbio-stats-ordination-pcoa-biplot"]], "skbio.stats.ordination.rda": [[721, "skbio-stats-ordination-rda"]], "skbio.stats.ordination.scale": [[722, "skbio-stats-ordination-scale"]], "skbio.stats.ordination.svd_rank": [[723, "skbio-stats-ordination-svd-rank"]], "Empirical Power Estimation (skbio.stats.power)": [[724, "empirical-power-estimation-skbio-stats-power"]], "skbio.stats.power.confidence_bound": [[725, "skbio-stats-power-confidence-bound"]], "skbio.stats.power.paired_subsamples": [[726, "skbio-stats-power-paired-subsamples"]], "skbio.stats.power.subsample_paired_power": [[727, "skbio-stats-power-subsample-paired-power"]], "skbio.stats.power.subsample_power": [[728, "skbio-stats-power-subsample-power"]], "skbio.stats.subsample_counts": [[729, "skbio-stats-subsample-counts"]], "skbio.tree.DuplicateNodeError": [[730, "skbio-tree-duplicatenodeerror"]], "skbio.tree.MissingNodeError": [[731, "skbio-tree-missingnodeerror"]], "skbio.tree.NoLengthError": [[732, "skbio-tree-nolengtherror"]], "skbio.tree.NoParentError": [[733, "skbio-tree-noparenterror"]], "skbio.tree.TreeError": [[734, "skbio-tree-treeerror"]], "skbio.tree.TreeNode": [[735, "skbio-tree-treenode"]], "skbio.tree.TreeNode.__copy__": [[736, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.__deepcopy__": [[737, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.__eq__": [[738, "skbio-tree-treenode-eq"]], "skbio.tree.TreeNode.__ge__": [[739, "skbio-tree-treenode-ge"]], "skbio.tree.TreeNode.__getitem__": [[740, "skbio-tree-treenode-getitem"]], "skbio.tree.TreeNode.__getstate__": [[741, "skbio-tree-treenode-getstate"]], "skbio.tree.TreeNode.__gt__": [[742, "skbio-tree-treenode-gt"]], "skbio.tree.TreeNode.__hash__": [[743, "skbio-tree-treenode-hash"]], "skbio.tree.TreeNode.__iter__": [[744, "skbio-tree-treenode-iter"]], "skbio.tree.TreeNode.__le__": [[745, "skbio-tree-treenode-le"]], "skbio.tree.TreeNode.__len__": [[746, "skbio-tree-treenode-len"]], "skbio.tree.TreeNode.__lt__": [[747, "skbio-tree-treenode-lt"]], "skbio.tree.TreeNode.__ne__": [[748, "skbio-tree-treenode-ne"]], "skbio.tree.TreeNode.__str__": [[749, "skbio-tree-treenode-str"]], "skbio.tree.TreeNode.accumulate_to_ancestor": [[750, "skbio-tree-treenode-accumulate-to-ancestor"]], "skbio.tree.TreeNode.ancestors": [[751, "skbio-tree-treenode-ancestors"]], "skbio.tree.TreeNode.append": [[752, "skbio-tree-treenode-append"]], "skbio.tree.TreeNode.ascii_art": [[753, "skbio-tree-treenode-ascii-art"]], "skbio.tree.TreeNode.assign_ids": [[754, "skbio-tree-treenode-assign-ids"]], "skbio.tree.TreeNode.assign_supports": [[755, "skbio-tree-treenode-assign-supports"]], "skbio.tree.TreeNode.bifurcate": [[756, "skbio-tree-treenode-bifurcate"]], "skbio.tree.TreeNode.cache_attr": [[757, "skbio-tree-treenode-cache-attr"]], "skbio.tree.TreeNode.compare_rfd": [[758, "skbio-tree-treenode-compare-rfd"]], "skbio.tree.TreeNode.compare_subsets": [[759, "skbio-tree-treenode-compare-subsets"]], "skbio.tree.TreeNode.compare_tip_distances": [[760, "skbio-tree-treenode-compare-tip-distances"]], "skbio.tree.TreeNode.copy": [[761, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.count": [[762, "skbio-tree-treenode-count"]], "skbio.tree.TreeNode.create_caches": [[763, "skbio-tree-treenode-create-caches"]], "skbio.tree.TreeNode.deepcopy": [[764, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.descending_branch_length": [[765, "skbio-tree-treenode-descending-branch-length"]], "skbio.tree.TreeNode.distance": [[766, "skbio-tree-treenode-distance"]], "skbio.tree.TreeNode.extend": [[767, "skbio-tree-treenode-extend"]], "skbio.tree.TreeNode.find": [[768, "skbio-tree-treenode-find"]], "skbio.tree.TreeNode.find_all": [[769, "skbio-tree-treenode-find-all"]], "skbio.tree.TreeNode.find_by_func": [[770, "skbio-tree-treenode-find-by-func"]], "skbio.tree.TreeNode.find_by_id": [[771, "skbio-tree-treenode-find-by-id"]], "skbio.tree.TreeNode.from_linkage_matrix": [[772, "skbio-tree-treenode-from-linkage-matrix"]], "skbio.tree.TreeNode.from_taxdump": [[773, "skbio-tree-treenode-from-taxdump"]], "skbio.tree.TreeNode.from_taxonomy": [[774, "skbio-tree-treenode-from-taxonomy"]], "skbio.tree.TreeNode.get_max_distance": [[775, "skbio-tree-treenode-get-max-distance"]], "skbio.tree.TreeNode.has_children": [[776, "skbio-tree-treenode-has-children"]], "skbio.tree.TreeNode.index_tree": [[777, "skbio-tree-treenode-index-tree"]], "skbio.tree.TreeNode.invalidate_caches": [[778, "skbio-tree-treenode-invalidate-caches"]], "skbio.tree.TreeNode.is_root": [[779, "skbio-tree-treenode-is-root"]], "skbio.tree.TreeNode.is_tip": [[780, "skbio-tree-treenode-is-tip"]], "skbio.tree.TreeNode.lca": [[781, "skbio-tree-treenode-lca"]], "skbio.tree.TreeNode.levelorder": [[782, "skbio-tree-treenode-levelorder"]], "skbio.tree.TreeNode.lowest_common_ancestor": [[783, "skbio-tree-treenode-lowest-common-ancestor"]], "skbio.tree.TreeNode.neighbors": [[784, "skbio-tree-treenode-neighbors"]], "skbio.tree.TreeNode.non_tips": [[785, "skbio-tree-treenode-non-tips"]], "skbio.tree.TreeNode.observed_node_counts": [[786, "skbio-tree-treenode-observed-node-counts"]], "skbio.tree.TreeNode.pop": [[787, "skbio-tree-treenode-pop"]], "skbio.tree.TreeNode.postorder": [[788, "skbio-tree-treenode-postorder"]], "skbio.tree.TreeNode.pre_and_postorder": [[789, "skbio-tree-treenode-pre-and-postorder"]], "skbio.tree.TreeNode.preorder": [[790, "skbio-tree-treenode-preorder"]], "skbio.tree.TreeNode.prune": [[791, "skbio-tree-treenode-prune"]], "skbio.tree.TreeNode.read": [[792, "skbio-tree-treenode-read"]], "skbio.tree.TreeNode.remove": [[793, "skbio-tree-treenode-remove"]], "skbio.tree.TreeNode.remove_deleted": [[794, "skbio-tree-treenode-remove-deleted"]], "skbio.tree.TreeNode.root": [[795, "skbio-tree-treenode-root"]], "skbio.tree.TreeNode.root_at": [[796, "skbio-tree-treenode-root-at"]], "skbio.tree.TreeNode.root_at_midpoint": [[797, "skbio-tree-treenode-root-at-midpoint"]], "skbio.tree.TreeNode.shear": [[798, "skbio-tree-treenode-shear"]], "skbio.tree.TreeNode.shuffle": [[799, "skbio-tree-treenode-shuffle"]], "skbio.tree.TreeNode.siblings": [[800, "skbio-tree-treenode-siblings"]], "skbio.tree.TreeNode.subset": [[801, "skbio-tree-treenode-subset"]], "skbio.tree.TreeNode.subsets": [[802, "skbio-tree-treenode-subsets"]], "skbio.tree.TreeNode.subtree": [[803, "skbio-tree-treenode-subtree"]], "skbio.tree.TreeNode.tip_tip_distances": [[804, "skbio-tree-treenode-tip-tip-distances"]], "skbio.tree.TreeNode.tips": [[805, "skbio-tree-treenode-tips"]], "skbio.tree.TreeNode.to_array": [[806, "skbio-tree-treenode-to-array"]], "skbio.tree.TreeNode.to_taxonomy": [[807, "skbio-tree-treenode-to-taxonomy"]], "skbio.tree.TreeNode.traverse": [[808, "skbio-tree-treenode-traverse"]], "skbio.tree.TreeNode.unpack": [[809, "skbio-tree-treenode-unpack"]], "skbio.tree.TreeNode.unpack_by_func": [[810, "skbio-tree-treenode-unpack-by-func"]], "skbio.tree.TreeNode.unrooted_copy": [[811, "skbio-tree-treenode-unrooted-copy"]], "skbio.tree.TreeNode.unrooted_deepcopy": [[812, "skbio-tree-treenode-unrooted-deepcopy"]], "skbio.tree.TreeNode.write": [[813, "skbio-tree-treenode-write"]], "skbio.tree.majority_rule": [[814, "skbio-tree-majority-rule"]], "skbio.tree.nj": [[815, "skbio-tree-nj"]], "skbio.util.EfficiencyWarning": [[816, "skbio-util-efficiencywarning"]], "skbio.util.RepresentationWarning": [[817, "skbio-util-representationwarning"]], "skbio.util.assert_data_frame_almost_equal": [[818, "skbio-util-assert-data-frame-almost-equal"]], "skbio.util.assert_ordination_results_equal": [[819, "skbio-util-assert-ordination-results-equal"]], "skbio.util.cardinal_to_ordinal": [[820, "skbio-util-cardinal-to-ordinal"]], "skbio.util.classproperty": [[821, "skbio-util-classproperty"]], "skbio.util.classproperty.__delete__": [[822, "skbio-util-classproperty-delete"]], "skbio.util.classproperty.__eq__": [[823, "skbio-util-classproperty-eq"]], "skbio.util.classproperty.__ge__": [[824, "skbio-util-classproperty-ge"]], "skbio.util.classproperty.__get__": [[825, "skbio-util-classproperty-get"]], "skbio.util.classproperty.__getstate__": [[826, "skbio-util-classproperty-getstate"]], "skbio.util.classproperty.__gt__": [[827, "skbio-util-classproperty-gt"]], "skbio.util.classproperty.__hash__": [[828, "skbio-util-classproperty-hash"]], "skbio.util.classproperty.__le__": [[829, "skbio-util-classproperty-le"]], "skbio.util.classproperty.__lt__": [[830, "skbio-util-classproperty-lt"]], "skbio.util.classproperty.__ne__": [[831, "skbio-util-classproperty-ne"]], "skbio.util.classproperty.__set__": [[832, "skbio-util-classproperty-set"]], "skbio.util.classproperty.__set_name__": [[833, "skbio-util-classproperty-set-name"]], "skbio.util.classproperty.__str__": [[834, "skbio-util-classproperty-str"]], "skbio.util.classproperty.deleter": [[835, "skbio-util-classproperty-deleter"]], "skbio.util.classproperty.getter": [[836, "skbio-util-classproperty-getter"]], "skbio.util.classproperty.setter": [[837, "skbio-util-classproperty-setter"]], "skbio.util.find_duplicates": [[838, "skbio-util-find-duplicates"]], "skbio.util.get_data_path": [[839, "skbio-util-get-data-path"]], "skbio.util.safe_md5": [[840, "skbio-util-safe-md5"]], "skbio.workflow.Workflow": [[841, "skbio-workflow-workflow"]], "skbio.workflow.Workflow.__call__": [[842, "skbio-workflow-workflow-call"]], "skbio.workflow.Workflow.__eq__": [[843, "skbio-workflow-workflow-eq"]], "skbio.workflow.Workflow.__ge__": [[844, "skbio-workflow-workflow-ge"]], "skbio.workflow.Workflow.__getstate__": [[845, "skbio-workflow-workflow-getstate"]], "skbio.workflow.Workflow.__gt__": [[846, "skbio-workflow-workflow-gt"]], "skbio.workflow.Workflow.__hash__": [[847, "skbio-workflow-workflow-hash"]], "skbio.workflow.Workflow.__le__": [[848, "skbio-workflow-workflow-le"]], "skbio.workflow.Workflow.__lt__": [[849, "skbio-workflow-workflow-lt"]], "skbio.workflow.Workflow.__ne__": [[850, "skbio-workflow-workflow-ne"]], "skbio.workflow.Workflow.__str__": [[851, "skbio-workflow-workflow-str"]], "skbio.workflow.Workflow.initialize_state": [[852, "skbio-workflow-workflow-initialize-state"]], "skbio.workflow.method": [[853, "skbio-workflow-method"]], "skbio.workflow.method.__call__": [[854, "skbio-workflow-method-call"]], "skbio.workflow.method.__eq__": [[855, "skbio-workflow-method-eq"]], "skbio.workflow.method.__ge__": [[856, "skbio-workflow-method-ge"]], "skbio.workflow.method.__getstate__": [[857, "skbio-workflow-method-getstate"]], "skbio.workflow.method.__gt__": [[858, "skbio-workflow-method-gt"]], "skbio.workflow.method.__hash__": [[859, "skbio-workflow-method-hash"]], "skbio.workflow.method.__le__": [[860, "skbio-workflow-method-le"]], "skbio.workflow.method.__lt__": [[861, "skbio-workflow-method-lt"]], "skbio.workflow.method.__ne__": [[862, "skbio-workflow-method-ne"]], "skbio.workflow.method.__str__": [[863, "skbio-workflow-method-str"]], "skbio.workflow.requires": [[864, "skbio-workflow-requires"]], "skbio.workflow.requires.__call__": [[865, "skbio-workflow-requires-call"]], "skbio.workflow.requires.__eq__": [[866, "skbio-workflow-requires-eq"]], "skbio.workflow.requires.__ge__": [[867, "skbio-workflow-requires-ge"]], "skbio.workflow.requires.__getstate__": [[868, "skbio-workflow-requires-getstate"]], "skbio.workflow.requires.__gt__": [[869, "skbio-workflow-requires-gt"]], "skbio.workflow.requires.__hash__": [[870, "skbio-workflow-requires-hash"]], "skbio.workflow.requires.__le__": [[871, "skbio-workflow-requires-le"]], "skbio.workflow.requires.__lt__": [[872, "skbio-workflow-requires-lt"]], "skbio.workflow.requires.__ne__": [[873, "skbio-workflow-requires-ne"]], "skbio.workflow.requires.__str__": [[874, "skbio-workflow-requires-str"]], "scikit-bio 0.6.0-dev": [[875, "scikit-bio-version"]], "API Reference": [[875, "api-reference"]], "File I/O (skbio.io)": [[876, "file-i-o-skbio-io"]], "Supported file formats": [[876, "supported-file-formats"]], "User functions": [[876, "user-functions"]], "User exceptions and warnings": [[876, "user-exceptions-and-warnings"]], "Introduction to I/O": [[876, "introduction-to-i-o"]], "What kinds of files scikit-bio can use": [[876, "what-kinds-of-files-scikit-bio-can-use"]], "Reading files into scikit-bio": [[876, "reading-files-into-scikit-bio"]], "Writing files from scikit-bio": [[876, "writing-files-from-scikit-bio"]], "Metadata (skbio.metadata)": [[877, "metadata-skbio-metadata"]], "Sequences (skbio.sequence)": [[878, "sequences-skbio-sequence"]], "Statistics (skbio.stats)": [[879, "statistics-skbio-stats"]], "Feature Table (skbio.table)": [[880, "feature-table-skbio-table"]], "Tree representations (skbio.tree)": [[881, "tree-representations-skbio-tree"]], "Phylogenetic Reconstruction": [[881, "phylogenetic-reconstruction"]], "Utility functionality (skbio.util)": [[882, "utility-functionality-skbio-util"]], "Testing functionality": [[882, "testing-functionality"]], "Miscellaneous functionality": [[882, "miscellaneous-functionality"]], "Warnings": [[882, "warnings"]], "Constructing workflows (skbio.workflow)": [[883, "constructing-workflows-skbio-workflow"]], "Decorators": [[883, "decorators"]]}, "indexentries": {"module": [[0, "module-skbio.alignment"], [1, "module-skbio.diversity"], [68, "module-skbio.diversity.alpha"], [104, "module-skbio.diversity.beta"], [131, "module-skbio.io.format.binary_dm"], [132, "module-skbio.io.format.biom"], [133, "module-skbio.io.format.blast6"], [134, "module-skbio.io.format.blast7"], [135, "module-skbio.io.format.clustal"], [136, "module-skbio.io.format.embl"], [137, "module-skbio.io.format.fasta"], [138, "module-skbio.io.format.fastq"], [139, "module-skbio.io.format.genbank"], [140, "module-skbio.io.format.gff3"], [141, "module-skbio.io.format.lsmat"], [142, "module-skbio.io.format.newick"], [143, "module-skbio.io.format.ordination"], [144, "module-skbio.io.format.phylip"], [145, "module-skbio.io.format.qseq"], [146, "module-skbio.io.format.sample_metadata"], [147, "module-skbio.io.format.stockholm"], [148, "module-skbio.io.format.taxdump"], [149, "module-skbio.io.registry"], [190, "module-skbio.io.util"], [523, "module-skbio.sequence.distance"], [526, "module-skbio.stats.composition"], [547, "module-skbio.stats.distance"], [607, "module-skbio.stats.evolve"], [609, "module-skbio.stats.gradient"], [699, "module-skbio.stats.ordination"], [724, "module-skbio.stats.power"], [876, "module-skbio.io"], [877, "module-skbio.metadata"], [878, "module-skbio.sequence"], [879, "module-skbio.stats"], [880, "module-skbio.table"], [881, "module-skbio.tree"], [882, "module-skbio.util"], [883, "module-skbio.workflow"]], "skbio.alignment": [[0, "module-skbio.alignment"]], "skbio.diversity": [[1, "module-skbio.diversity"]], "alignmentstructure (class in skbio.alignment)": [[2, "skbio.alignment.AlignmentStructure"]], "__eq__() (skbio.alignment.alignmentstructure method)": [[3, "skbio.alignment.AlignmentStructure.__eq__"]], "__ge__() (skbio.alignment.alignmentstructure method)": [[4, "skbio.alignment.AlignmentStructure.__ge__"]], "__getitem__() (skbio.alignment.alignmentstructure method)": [[5, "skbio.alignment.AlignmentStructure.__getitem__"]], "__getstate__() (skbio.alignment.alignmentstructure method)": [[6, "skbio.alignment.AlignmentStructure.__getstate__"]], "__gt__() (skbio.alignment.alignmentstructure method)": [[7, "skbio.alignment.AlignmentStructure.__gt__"]], "__hash__() (skbio.alignment.alignmentstructure method)": [[8, "skbio.alignment.AlignmentStructure.__hash__"]], "__le__() (skbio.alignment.alignmentstructure method)": [[9, "skbio.alignment.AlignmentStructure.__le__"]], "__lt__() (skbio.alignment.alignmentstructure method)": [[10, "skbio.alignment.AlignmentStructure.__lt__"]], "__ne__() (skbio.alignment.alignmentstructure method)": [[11, "skbio.alignment.AlignmentStructure.__ne__"]], "__setstate__() (skbio.alignment.alignmentstructure method)": [[12, "skbio.alignment.AlignmentStructure.__setstate__"]], "__str__() (skbio.alignment.alignmentstructure method)": [[13, "skbio.alignment.AlignmentStructure.__str__"]], "is_zero_based() (skbio.alignment.alignmentstructure method)": [[14, "skbio.alignment.AlignmentStructure.is_zero_based"]], "set_zero_based() (skbio.alignment.alignmentstructure method)": [[15, "skbio.alignment.AlignmentStructure.set_zero_based"]], "stripedsmithwaterman (class in skbio.alignment)": [[16, "skbio.alignment.StripedSmithWaterman"]], "__call__() (skbio.alignment.stripedsmithwaterman method)": [[17, "skbio.alignment.StripedSmithWaterman.__call__"]], "__eq__() (skbio.alignment.stripedsmithwaterman method)": [[18, "skbio.alignment.StripedSmithWaterman.__eq__"]], "__ge__() (skbio.alignment.stripedsmithwaterman method)": [[19, "skbio.alignment.StripedSmithWaterman.__ge__"]], "__getstate__() (skbio.alignment.stripedsmithwaterman method)": [[20, "skbio.alignment.StripedSmithWaterman.__getstate__"]], "__gt__() (skbio.alignment.stripedsmithwaterman method)": [[21, "skbio.alignment.StripedSmithWaterman.__gt__"]], "__hash__() (skbio.alignment.stripedsmithwaterman method)": [[22, "skbio.alignment.StripedSmithWaterman.__hash__"]], "__le__() (skbio.alignment.stripedsmithwaterman method)": [[23, "skbio.alignment.StripedSmithWaterman.__le__"]], "__lt__() (skbio.alignment.stripedsmithwaterman method)": [[24, "skbio.alignment.StripedSmithWaterman.__lt__"]], "__ne__() (skbio.alignment.stripedsmithwaterman method)": [[25, "skbio.alignment.StripedSmithWaterman.__ne__"]], "__setstate__() (skbio.alignment.stripedsmithwaterman method)": [[26, "skbio.alignment.StripedSmithWaterman.__setstate__"]], "__str__() (skbio.alignment.stripedsmithwaterman method)": [[27, "skbio.alignment.StripedSmithWaterman.__str__"]], "tabularmsa (class in skbio.alignment)": [[28, "skbio.alignment.TabularMSA"]], "__bool__() (skbio.alignment.tabularmsa method)": [[29, "skbio.alignment.TabularMSA.__bool__"]], "__contains__() (skbio.alignment.tabularmsa method)": [[30, "skbio.alignment.TabularMSA.__contains__"]], "__copy__() (skbio.alignment.tabularmsa method)": [[31, "skbio.alignment.TabularMSA.__copy__"]], "__deepcopy__() (skbio.alignment.tabularmsa method)": [[32, "skbio.alignment.TabularMSA.__deepcopy__"]], "__eq__() (skbio.alignment.tabularmsa method)": [[33, "skbio.alignment.TabularMSA.__eq__"]], "__ge__() (skbio.alignment.tabularmsa method)": [[34, "skbio.alignment.TabularMSA.__ge__"]], "__getitem__() (skbio.alignment.tabularmsa method)": [[35, "skbio.alignment.TabularMSA.__getitem__"]], "__getstate__() (skbio.alignment.tabularmsa method)": [[36, "skbio.alignment.TabularMSA.__getstate__"]], "__gt__() (skbio.alignment.tabularmsa method)": [[37, "skbio.alignment.TabularMSA.__gt__"]], "__iter__() (skbio.alignment.tabularmsa method)": [[38, "skbio.alignment.TabularMSA.__iter__"]], "__le__() (skbio.alignment.tabularmsa method)": [[39, "skbio.alignment.TabularMSA.__le__"]], "__len__() (skbio.alignment.tabularmsa method)": [[40, "skbio.alignment.TabularMSA.__len__"]], "__lt__() (skbio.alignment.tabularmsa method)": [[41, "skbio.alignment.TabularMSA.__lt__"]], "__ne__() (skbio.alignment.tabularmsa method)": [[42, "skbio.alignment.TabularMSA.__ne__"]], "__reversed__() (skbio.alignment.tabularmsa method)": [[43, "skbio.alignment.TabularMSA.__reversed__"]], "__str__() (skbio.alignment.tabularmsa method)": [[44, "skbio.alignment.TabularMSA.__str__"]], "append() (skbio.alignment.tabularmsa method)": [[45, "skbio.alignment.TabularMSA.append"]], "consensus() (skbio.alignment.tabularmsa method)": [[46, "skbio.alignment.TabularMSA.consensus"]], "conservation() (skbio.alignment.tabularmsa method)": [[47, "skbio.alignment.TabularMSA.conservation"]], "extend() (skbio.alignment.tabularmsa method)": [[48, "skbio.alignment.TabularMSA.extend"]], "from_dict() (skbio.alignment.tabularmsa class method)": [[49, "skbio.alignment.TabularMSA.from_dict"]], "gap_frequencies() (skbio.alignment.tabularmsa method)": [[50, "skbio.alignment.TabularMSA.gap_frequencies"]], "has_metadata() (skbio.alignment.tabularmsa method)": [[51, "skbio.alignment.TabularMSA.has_metadata"]], "has_positional_metadata() (skbio.alignment.tabularmsa method)": [[52, "skbio.alignment.TabularMSA.has_positional_metadata"]], "iter_positions() (skbio.alignment.tabularmsa method)": [[53, "skbio.alignment.TabularMSA.iter_positions"]], "join() (skbio.alignment.tabularmsa method)": [[54, "skbio.alignment.TabularMSA.join"]], "read() (skbio.alignment.tabularmsa class method)": [[55, "skbio.alignment.TabularMSA.read"]], "reassign_index() (skbio.alignment.tabularmsa method)": [[56, "skbio.alignment.TabularMSA.reassign_index"]], "sort() (skbio.alignment.tabularmsa method)": [[57, "skbio.alignment.TabularMSA.sort"]], "to_dict() (skbio.alignment.tabularmsa method)": [[58, "skbio.alignment.TabularMSA.to_dict"]], "write() (skbio.alignment.tabularmsa method)": [[59, "skbio.alignment.TabularMSA.write"]], "global_pairwise_align() (in module skbio.alignment)": [[60, "skbio.alignment.global_pairwise_align"]], "global_pairwise_align_nucleotide() (in module skbio.alignment)": [[61, "skbio.alignment.global_pairwise_align_nucleotide"]], "global_pairwise_align_protein() (in module skbio.alignment)": [[62, "skbio.alignment.global_pairwise_align_protein"]], "local_pairwise_align() (in module skbio.alignment)": [[63, "skbio.alignment.local_pairwise_align"]], "local_pairwise_align_nucleotide() (in module skbio.alignment)": [[64, "skbio.alignment.local_pairwise_align_nucleotide"]], "local_pairwise_align_protein() (in module skbio.alignment)": [[65, "skbio.alignment.local_pairwise_align_protein"]], "local_pairwise_align_ssw() (in module skbio.alignment)": [[66, "skbio.alignment.local_pairwise_align_ssw"]], "make_identity_substitution_matrix() (in module skbio.alignment)": [[67, "skbio.alignment.make_identity_substitution_matrix"]], "skbio.diversity.alpha": [[68, "module-skbio.diversity.alpha"]], "ace() (in module skbio.diversity.alpha)": [[69, "skbio.diversity.alpha.ace"]], "berger_parker_d() (in module skbio.diversity.alpha)": [[70, "skbio.diversity.alpha.berger_parker_d"]], "brillouin_d() (in module skbio.diversity.alpha)": [[71, "skbio.diversity.alpha.brillouin_d"]], "chao1() (in module skbio.diversity.alpha)": [[72, "skbio.diversity.alpha.chao1"]], "chao1_ci() (in module skbio.diversity.alpha)": [[73, "skbio.diversity.alpha.chao1_ci"]], "dominance() (in module skbio.diversity.alpha)": [[74, "skbio.diversity.alpha.dominance"]], "doubles() (in module skbio.diversity.alpha)": [[75, "skbio.diversity.alpha.doubles"]], "enspie() (in module skbio.diversity.alpha)": [[76, "skbio.diversity.alpha.enspie"]], "esty_ci() (in module skbio.diversity.alpha)": [[77, "skbio.diversity.alpha.esty_ci"]], "faith_pd() (in module skbio.diversity.alpha)": [[78, "skbio.diversity.alpha.faith_pd"]], "fisher_alpha() (in module skbio.diversity.alpha)": [[79, "skbio.diversity.alpha.fisher_alpha"]], "gini_index() (in module skbio.diversity.alpha)": [[80, "skbio.diversity.alpha.gini_index"]], "goods_coverage() (in module skbio.diversity.alpha)": [[81, "skbio.diversity.alpha.goods_coverage"]], "heip_e() (in module skbio.diversity.alpha)": [[82, "skbio.diversity.alpha.heip_e"]], "kempton_taylor_q() (in module skbio.diversity.alpha)": [[83, "skbio.diversity.alpha.kempton_taylor_q"]], "lladser_ci() (in module skbio.diversity.alpha)": [[84, "skbio.diversity.alpha.lladser_ci"]], "lladser_pe() (in module skbio.diversity.alpha)": [[85, "skbio.diversity.alpha.lladser_pe"]], "margalef() (in module skbio.diversity.alpha)": [[86, "skbio.diversity.alpha.margalef"]], "mcintosh_d() (in module skbio.diversity.alpha)": [[87, "skbio.diversity.alpha.mcintosh_d"]], "mcintosh_e() (in module skbio.diversity.alpha)": [[88, "skbio.diversity.alpha.mcintosh_e"]], "menhinick() (in module skbio.diversity.alpha)": [[89, "skbio.diversity.alpha.menhinick"]], "michaelis_menten_fit() (in module skbio.diversity.alpha)": [[90, "skbio.diversity.alpha.michaelis_menten_fit"]], "observed_features() (in module skbio.diversity.alpha)": [[91, "skbio.diversity.alpha.observed_features"]], "observed_otus() (in module skbio.diversity.alpha)": [[92, "skbio.diversity.alpha.observed_otus"]], "osd() (in module skbio.diversity.alpha)": [[93, "skbio.diversity.alpha.osd"]], "phydiv() (in module skbio.diversity.alpha)": [[94, "skbio.diversity.alpha.phydiv"]], "pielou_e() (in module skbio.diversity.alpha)": [[95, "skbio.diversity.alpha.pielou_e"]], "robbins() (in module skbio.diversity.alpha)": [[96, "skbio.diversity.alpha.robbins"]], "shannon() (in module skbio.diversity.alpha)": [[97, "skbio.diversity.alpha.shannon"]], "simpson() (in module skbio.diversity.alpha)": [[98, "skbio.diversity.alpha.simpson"]], "simpson_e() (in module skbio.diversity.alpha)": [[99, "skbio.diversity.alpha.simpson_e"]], "singles() (in module skbio.diversity.alpha)": [[100, "skbio.diversity.alpha.singles"]], "sobs() (in module skbio.diversity.alpha)": [[101, "skbio.diversity.alpha.sobs"]], "strong() (in module skbio.diversity.alpha)": [[102, "skbio.diversity.alpha.strong"]], "alpha_diversity() (in module skbio.diversity)": [[103, "skbio.diversity.alpha_diversity"]], "skbio.diversity.beta": [[104, "module-skbio.diversity.beta"]], "unweighted_unifrac() (in module skbio.diversity.beta)": [[105, "skbio.diversity.beta.unweighted_unifrac"]], "weighted_unifrac() (in module skbio.diversity.beta)": [[106, "skbio.diversity.beta.weighted_unifrac"]], "beta_diversity() (in module skbio.diversity)": [[107, "skbio.diversity.beta_diversity"]], "block_beta_diversity() (in module skbio.diversity)": [[108, "skbio.diversity.block_beta_diversity"]], "get_alpha_diversity_metrics() (in module skbio.diversity)": [[109, "skbio.diversity.get_alpha_diversity_metrics"]], "get_beta_diversity_metrics() (in module skbio.diversity)": [[110, "skbio.diversity.get_beta_diversity_metrics"]], "partial_beta_diversity() (in module skbio.diversity)": [[111, "skbio.diversity.partial_beta_diversity"]], "argumentoverridewarning": [[112, "skbio.io.ArgumentOverrideWarning"]], "blast7formaterror": [[113, "skbio.io.BLAST7FormatError"]], "clustalformaterror": [[114, "skbio.io.ClustalFormatError"]], "emblformaterror": [[115, "skbio.io.EMBLFormatError"]], "fastaformaterror": [[116, "skbio.io.FASTAFormatError"]], "fastqformaterror": [[117, "skbio.io.FASTQFormatError"]], "fileformaterror": [[118, "skbio.io.FileFormatError"]], "formatidentificationwarning": [[119, "skbio.io.FormatIdentificationWarning"]], "gff3formaterror": [[120, "skbio.io.GFF3FormatError"]], "genbankformaterror": [[121, "skbio.io.GenBankFormatError"]], "iosourceerror": [[122, "skbio.io.IOSourceError"]], "lsmatformaterror": [[123, "skbio.io.LSMatFormatError"]], "newickformaterror": [[124, "skbio.io.NewickFormatError"]], "ordinationformaterror": [[125, "skbio.io.OrdinationFormatError"]], "phylipformaterror": [[126, "skbio.io.PhylipFormatError"]], "qseqformaterror": [[127, "skbio.io.QSeqFormatError"]], "qualformaterror": [[128, "skbio.io.QUALFormatError"]], "stockholmformaterror": [[129, "skbio.io.StockholmFormatError"]], "unrecognizedformaterror": [[130, "skbio.io.UnrecognizedFormatError"]], "skbio.io.format.binary_dm": [[131, "module-skbio.io.format.binary_dm"]], "skbio.io.format.biom": [[132, "module-skbio.io.format.biom"]], "skbio.io.format.blast6": [[133, "module-skbio.io.format.blast6"]], "skbio.io.format.blast7": [[134, "module-skbio.io.format.blast7"]], "skbio.io.format.clustal": [[135, "module-skbio.io.format.clustal"]], "skbio.io.format.embl": [[136, "module-skbio.io.format.embl"]], "skbio.io.format.fasta": [[137, "module-skbio.io.format.fasta"]], "skbio.io.format.fastq": [[138, "module-skbio.io.format.fastq"]], "skbio.io.format.genbank": [[139, "module-skbio.io.format.genbank"]], "skbio.io.format.gff3": [[140, "module-skbio.io.format.gff3"]], "skbio.io.format.lsmat": [[141, "module-skbio.io.format.lsmat"]], "skbio.io.format.newick": [[142, "module-skbio.io.format.newick"]], "skbio.io.format.ordination": [[143, "module-skbio.io.format.ordination"]], "skbio.io.format.phylip": [[144, "module-skbio.io.format.phylip"]], "skbio.io.format.qseq": [[145, "module-skbio.io.format.qseq"]], "skbio.io.format.sample_metadata": [[146, "module-skbio.io.format.sample_metadata"]], "skbio.io.format.stockholm": [[147, "module-skbio.io.format.stockholm"]], "skbio.io.format.taxdump": [[148, "module-skbio.io.format.taxdump"]], "skbio.io.registry": [[149, "module-skbio.io.registry"]], "duplicateregistrationerror": [[150, "skbio.io.registry.DuplicateRegistrationError"]], "format (class in skbio.io.registry)": [[151, "skbio.io.registry.Format"]], "__eq__() (skbio.io.registry.format method)": [[152, "skbio.io.registry.Format.__eq__"]], "__ge__() (skbio.io.registry.format method)": [[153, "skbio.io.registry.Format.__ge__"]], "__getstate__() (skbio.io.registry.format method)": [[154, "skbio.io.registry.Format.__getstate__"]], "__gt__() (skbio.io.registry.format method)": [[155, "skbio.io.registry.Format.__gt__"]], "__hash__() (skbio.io.registry.format method)": [[156, "skbio.io.registry.Format.__hash__"]], "__le__() (skbio.io.registry.format method)": [[157, "skbio.io.registry.Format.__le__"]], "__lt__() (skbio.io.registry.format method)": [[158, "skbio.io.registry.Format.__lt__"]], "__ne__() (skbio.io.registry.format method)": [[159, "skbio.io.registry.Format.__ne__"]], "__str__() (skbio.io.registry.format method)": [[160, "skbio.io.registry.Format.__str__"]], "reader() (skbio.io.registry.format method)": [[161, "skbio.io.registry.Format.reader"]], "sniffer() (skbio.io.registry.format method)": [[162, "skbio.io.registry.Format.sniffer"]], "writer() (skbio.io.registry.format method)": [[163, "skbio.io.registry.Format.writer"]], "ioregistry (class in skbio.io.registry)": [[164, "skbio.io.registry.IORegistry"]], "__eq__() (skbio.io.registry.ioregistry method)": [[165, "skbio.io.registry.IORegistry.__eq__"]], "__ge__() (skbio.io.registry.ioregistry method)": [[166, "skbio.io.registry.IORegistry.__ge__"]], "__getstate__() (skbio.io.registry.ioregistry method)": [[167, "skbio.io.registry.IORegistry.__getstate__"]], "__gt__() (skbio.io.registry.ioregistry method)": [[168, "skbio.io.registry.IORegistry.__gt__"]], "__hash__() (skbio.io.registry.ioregistry method)": [[169, "skbio.io.registry.IORegistry.__hash__"]], "__le__() (skbio.io.registry.ioregistry method)": [[170, "skbio.io.registry.IORegistry.__le__"]], "__lt__() (skbio.io.registry.ioregistry method)": [[171, "skbio.io.registry.IORegistry.__lt__"]], "__ne__() (skbio.io.registry.ioregistry method)": [[172, "skbio.io.registry.IORegistry.__ne__"]], "__str__() (skbio.io.registry.ioregistry method)": [[173, "skbio.io.registry.IORegistry.__str__"]], "add_format() (skbio.io.registry.ioregistry method)": [[174, "skbio.io.registry.IORegistry.add_format"]], "create_format() (skbio.io.registry.ioregistry method)": [[175, "skbio.io.registry.IORegistry.create_format"]], "get_reader() (skbio.io.registry.ioregistry method)": [[176, "skbio.io.registry.IORegistry.get_reader"]], "get_sniffer() (skbio.io.registry.ioregistry method)": [[177, "skbio.io.registry.IORegistry.get_sniffer"]], "get_writer() (skbio.io.registry.ioregistry method)": [[178, "skbio.io.registry.IORegistry.get_writer"]], "list_read_formats() (skbio.io.registry.ioregistry method)": [[179, "skbio.io.registry.IORegistry.list_read_formats"]], "list_write_formats() (skbio.io.registry.ioregistry method)": [[180, "skbio.io.registry.IORegistry.list_write_formats"]], "monkey_patch() (skbio.io.registry.ioregistry method)": [[181, "skbio.io.registry.IORegistry.monkey_patch"]], "read() (skbio.io.registry.ioregistry method)": [[182, "skbio.io.registry.IORegistry.read"]], "sniff() (skbio.io.registry.ioregistry method)": [[183, "skbio.io.registry.IORegistry.sniff"]], "write() (skbio.io.registry.ioregistry method)": [[184, "skbio.io.registry.IORegistry.write"]], "invalidregistrationerror": [[185, "skbio.io.registry.InvalidRegistrationError"]], "create_format() (in module skbio.io.registry)": [[186, "skbio.io.registry.create_format"]], "read() (in module skbio.io.registry)": [[187, "skbio.io.registry.read"]], "sniff() (in module skbio.io.registry)": [[188, "skbio.io.registry.sniff"]], "write() (in module skbio.io.registry)": [[189, "skbio.io.registry.write"]], "skbio.io.util": [[190, "module-skbio.io.util"]], "open() (in module skbio.io.util)": [[191, "skbio.io.util.open"]], "open_file() (in module skbio.io.util)": [[192, "skbio.io.util.open_file"]], "open_files() (in module skbio.io.util)": [[193, "skbio.io.util.open_files"]], "interval (class in skbio.metadata)": [[194, "skbio.metadata.Interval"]], "__eq__() (skbio.metadata.interval method)": [[195, "skbio.metadata.Interval.__eq__"]], "__ge__() (skbio.metadata.interval method)": [[196, "skbio.metadata.Interval.__ge__"]], "__getstate__() (skbio.metadata.interval method)": [[197, "skbio.metadata.Interval.__getstate__"]], "__gt__() (skbio.metadata.interval method)": [[198, "skbio.metadata.Interval.__gt__"]], "__le__() (skbio.metadata.interval method)": [[199, "skbio.metadata.Interval.__le__"]], "__lt__() (skbio.metadata.interval method)": [[200, "skbio.metadata.Interval.__lt__"]], "__ne__() (skbio.metadata.interval method)": [[201, "skbio.metadata.Interval.__ne__"]], "__str__() (skbio.metadata.interval method)": [[202, "skbio.metadata.Interval.__str__"]], "drop() (skbio.metadata.interval method)": [[203, "skbio.metadata.Interval.drop"]], "intervalmetadata (class in skbio.metadata)": [[204, "skbio.metadata.IntervalMetadata"]], "__copy__() (skbio.metadata.intervalmetadata method)": [[205, "skbio.metadata.IntervalMetadata.__copy__"]], "__deepcopy__() (skbio.metadata.intervalmetadata method)": [[206, "skbio.metadata.IntervalMetadata.__deepcopy__"]], "__eq__() (skbio.metadata.intervalmetadata method)": [[207, "skbio.metadata.IntervalMetadata.__eq__"]], "__ge__() (skbio.metadata.intervalmetadata method)": [[208, "skbio.metadata.IntervalMetadata.__ge__"]], "__getstate__() (skbio.metadata.intervalmetadata method)": [[209, "skbio.metadata.IntervalMetadata.__getstate__"]], "__gt__() (skbio.metadata.intervalmetadata method)": [[210, "skbio.metadata.IntervalMetadata.__gt__"]], "__le__() (skbio.metadata.intervalmetadata method)": [[211, "skbio.metadata.IntervalMetadata.__le__"]], "__lt__() (skbio.metadata.intervalmetadata method)": [[212, "skbio.metadata.IntervalMetadata.__lt__"]], "__ne__() (skbio.metadata.intervalmetadata method)": [[213, "skbio.metadata.IntervalMetadata.__ne__"]], "__str__() (skbio.metadata.intervalmetadata method)": [[214, "skbio.metadata.IntervalMetadata.__str__"]], "add() (skbio.metadata.intervalmetadata method)": [[215, "skbio.metadata.IntervalMetadata.add"]], "concat() (skbio.metadata.intervalmetadata class method)": [[216, "skbio.metadata.IntervalMetadata.concat"]], "drop() (skbio.metadata.intervalmetadata method)": [[217, "skbio.metadata.IntervalMetadata.drop"]], "merge() (skbio.metadata.intervalmetadata method)": [[218, "skbio.metadata.IntervalMetadata.merge"]], "query() (skbio.metadata.intervalmetadata method)": [[219, "skbio.metadata.IntervalMetadata.query"]], "read() (skbio.metadata.intervalmetadata class method)": [[220, "skbio.metadata.IntervalMetadata.read"]], "sort() (skbio.metadata.intervalmetadata method)": [[221, "skbio.metadata.IntervalMetadata.sort"]], "write() (skbio.metadata.intervalmetadata method)": [[222, "skbio.metadata.IntervalMetadata.write"]], "dna (class in skbio.sequence)": [[223, "skbio.sequence.DNA"]], "__bool__() (skbio.sequence.dna method)": [[224, "skbio.sequence.DNA.__bool__"]], "__contains__() (skbio.sequence.dna method)": [[225, "skbio.sequence.DNA.__contains__"]], "__copy__() (skbio.sequence.dna method)": [[226, "skbio.sequence.DNA.__copy__"]], "__deepcopy__() (skbio.sequence.dna method)": [[227, "skbio.sequence.DNA.__deepcopy__"]], "__eq__() (skbio.sequence.dna method)": [[228, "skbio.sequence.DNA.__eq__"]], "__ge__() (skbio.sequence.dna method)": [[229, "skbio.sequence.DNA.__ge__"]], "__getitem__() (skbio.sequence.dna method)": [[230, "skbio.sequence.DNA.__getitem__"]], "__getstate__() (skbio.sequence.dna method)": [[231, "skbio.sequence.DNA.__getstate__"]], "__gt__() (skbio.sequence.dna method)": [[232, "skbio.sequence.DNA.__gt__"]], "__iter__() (skbio.sequence.dna method)": [[233, "skbio.sequence.DNA.__iter__"]], "__le__() (skbio.sequence.dna method)": [[234, "skbio.sequence.DNA.__le__"]], "__len__() (skbio.sequence.dna method)": [[235, "skbio.sequence.DNA.__len__"]], "__lt__() (skbio.sequence.dna method)": [[236, "skbio.sequence.DNA.__lt__"]], "__ne__() (skbio.sequence.dna method)": [[237, "skbio.sequence.DNA.__ne__"]], "__reversed__() (skbio.sequence.dna method)": [[238, "skbio.sequence.DNA.__reversed__"]], "__str__() (skbio.sequence.dna method)": [[239, "skbio.sequence.DNA.__str__"]], "complement() (skbio.sequence.dna method)": [[240, "skbio.sequence.DNA.complement"]], "concat() (skbio.sequence.dna class method)": [[241, "skbio.sequence.DNA.concat"]], "count() (skbio.sequence.dna method)": [[242, "skbio.sequence.DNA.count"]], "definites() (skbio.sequence.dna method)": [[243, "skbio.sequence.DNA.definites"]], "degap() (skbio.sequence.dna method)": [[244, "skbio.sequence.DNA.degap"]], "degenerates() (skbio.sequence.dna method)": [[245, "skbio.sequence.DNA.degenerates"]], "distance() (skbio.sequence.dna method)": [[246, "skbio.sequence.DNA.distance"]], "expand_degenerates() (skbio.sequence.dna method)": [[247, "skbio.sequence.DNA.expand_degenerates"]], "find_motifs() (skbio.sequence.dna method)": [[248, "skbio.sequence.DNA.find_motifs"]], "find_with_regex() (skbio.sequence.dna method)": [[249, "skbio.sequence.DNA.find_with_regex"]], "frequencies() (skbio.sequence.dna method)": [[250, "skbio.sequence.DNA.frequencies"]], "gaps() (skbio.sequence.dna method)": [[251, "skbio.sequence.DNA.gaps"]], "gc_content() (skbio.sequence.dna method)": [[252, "skbio.sequence.DNA.gc_content"]], "gc_frequency() (skbio.sequence.dna method)": [[253, "skbio.sequence.DNA.gc_frequency"]], "has_definites() (skbio.sequence.dna method)": [[254, "skbio.sequence.DNA.has_definites"]], "has_degenerates() (skbio.sequence.dna method)": [[255, "skbio.sequence.DNA.has_degenerates"]], "has_gaps() (skbio.sequence.dna method)": [[256, "skbio.sequence.DNA.has_gaps"]], "has_interval_metadata() (skbio.sequence.dna method)": [[257, "skbio.sequence.DNA.has_interval_metadata"]], "has_metadata() (skbio.sequence.dna method)": [[258, "skbio.sequence.DNA.has_metadata"]], "has_nondegenerates() (skbio.sequence.dna method)": [[259, "skbio.sequence.DNA.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.dna method)": [[260, "skbio.sequence.DNA.has_positional_metadata"]], "index() (skbio.sequence.dna method)": [[261, "skbio.sequence.DNA.index"]], "is_reverse_complement() (skbio.sequence.dna method)": [[262, "skbio.sequence.DNA.is_reverse_complement"]], "iter_contiguous() (skbio.sequence.dna method)": [[263, "skbio.sequence.DNA.iter_contiguous"]], "iter_kmers() (skbio.sequence.dna method)": [[264, "skbio.sequence.DNA.iter_kmers"]], "kmer_frequencies() (skbio.sequence.dna method)": [[265, "skbio.sequence.DNA.kmer_frequencies"]], "lowercase() (skbio.sequence.dna method)": [[266, "skbio.sequence.DNA.lowercase"]], "match_frequency() (skbio.sequence.dna method)": [[267, "skbio.sequence.DNA.match_frequency"]], "matches() (skbio.sequence.dna method)": [[268, "skbio.sequence.DNA.matches"]], "mismatch_frequency() (skbio.sequence.dna method)": [[269, "skbio.sequence.DNA.mismatch_frequency"]], "mismatches() (skbio.sequence.dna method)": [[270, "skbio.sequence.DNA.mismatches"]], "nondegenerates() (skbio.sequence.dna method)": [[271, "skbio.sequence.DNA.nondegenerates"]], "read() (skbio.sequence.dna class method)": [[272, "skbio.sequence.DNA.read"]], "replace() (skbio.sequence.dna method)": [[273, "skbio.sequence.DNA.replace"]], "reverse_complement() (skbio.sequence.dna method)": [[274, "skbio.sequence.DNA.reverse_complement"]], "to_definites() (skbio.sequence.dna method)": [[275, "skbio.sequence.DNA.to_definites"]], "to_indices() (skbio.sequence.dna method)": [[276, "skbio.sequence.DNA.to_indices"]], "to_regex() (skbio.sequence.dna method)": [[277, "skbio.sequence.DNA.to_regex"]], "transcribe() (skbio.sequence.dna method)": [[278, "skbio.sequence.DNA.transcribe"]], "translate() (skbio.sequence.dna method)": [[279, "skbio.sequence.DNA.translate"]], "translate_six_frames() (skbio.sequence.dna method)": [[280, "skbio.sequence.DNA.translate_six_frames"]], "write() (skbio.sequence.dna method)": [[281, "skbio.sequence.DNA.write"]], "geneticcode (class in skbio.sequence)": [[282, "skbio.sequence.GeneticCode"]], "__eq__() (skbio.sequence.geneticcode method)": [[283, "skbio.sequence.GeneticCode.__eq__"]], "__ge__() (skbio.sequence.geneticcode method)": [[284, "skbio.sequence.GeneticCode.__ge__"]], "__getstate__() (skbio.sequence.geneticcode method)": [[285, "skbio.sequence.GeneticCode.__getstate__"]], "__gt__() (skbio.sequence.geneticcode method)": [[286, "skbio.sequence.GeneticCode.__gt__"]], "__le__() (skbio.sequence.geneticcode method)": [[287, "skbio.sequence.GeneticCode.__le__"]], "__lt__() (skbio.sequence.geneticcode method)": [[288, "skbio.sequence.GeneticCode.__lt__"]], "__ne__() (skbio.sequence.geneticcode method)": [[289, "skbio.sequence.GeneticCode.__ne__"]], "__str__() (skbio.sequence.geneticcode method)": [[290, "skbio.sequence.GeneticCode.__str__"]], "from_ncbi() (skbio.sequence.geneticcode class method)": [[291, "skbio.sequence.GeneticCode.from_ncbi"]], "translate() (skbio.sequence.geneticcode method)": [[292, "skbio.sequence.GeneticCode.translate"]], "translate_six_frames() (skbio.sequence.geneticcode method)": [[293, "skbio.sequence.GeneticCode.translate_six_frames"]], "grammaredsequence (class in skbio.sequence)": [[294, "skbio.sequence.GrammaredSequence"]], "__bool__() (skbio.sequence.grammaredsequence method)": [[295, "skbio.sequence.GrammaredSequence.__bool__"]], "__contains__() (skbio.sequence.grammaredsequence method)": [[296, "skbio.sequence.GrammaredSequence.__contains__"]], "__copy__() (skbio.sequence.grammaredsequence method)": [[297, "skbio.sequence.GrammaredSequence.__copy__"]], "__deepcopy__() (skbio.sequence.grammaredsequence method)": [[298, "skbio.sequence.GrammaredSequence.__deepcopy__"]], "__eq__() (skbio.sequence.grammaredsequence method)": [[299, "skbio.sequence.GrammaredSequence.__eq__"]], "__ge__() (skbio.sequence.grammaredsequence method)": [[300, "skbio.sequence.GrammaredSequence.__ge__"]], "__getitem__() (skbio.sequence.grammaredsequence method)": [[301, "skbio.sequence.GrammaredSequence.__getitem__"]], "__getstate__() (skbio.sequence.grammaredsequence method)": [[302, "skbio.sequence.GrammaredSequence.__getstate__"]], "__gt__() (skbio.sequence.grammaredsequence method)": [[303, "skbio.sequence.GrammaredSequence.__gt__"]], "__iter__() (skbio.sequence.grammaredsequence method)": [[304, "skbio.sequence.GrammaredSequence.__iter__"]], "__le__() (skbio.sequence.grammaredsequence method)": [[305, "skbio.sequence.GrammaredSequence.__le__"]], "__len__() (skbio.sequence.grammaredsequence method)": [[306, "skbio.sequence.GrammaredSequence.__len__"]], "__lt__() (skbio.sequence.grammaredsequence method)": [[307, "skbio.sequence.GrammaredSequence.__lt__"]], "__ne__() (skbio.sequence.grammaredsequence method)": [[308, "skbio.sequence.GrammaredSequence.__ne__"]], "__reversed__() (skbio.sequence.grammaredsequence method)": [[309, "skbio.sequence.GrammaredSequence.__reversed__"]], "__str__() (skbio.sequence.grammaredsequence method)": [[310, "skbio.sequence.GrammaredSequence.__str__"]], "concat() (skbio.sequence.grammaredsequence class method)": [[311, "skbio.sequence.GrammaredSequence.concat"]], "count() (skbio.sequence.grammaredsequence method)": [[312, "skbio.sequence.GrammaredSequence.count"]], "definites() (skbio.sequence.grammaredsequence method)": [[313, "skbio.sequence.GrammaredSequence.definites"]], "degap() (skbio.sequence.grammaredsequence method)": [[314, "skbio.sequence.GrammaredSequence.degap"]], "degenerates() (skbio.sequence.grammaredsequence method)": [[315, "skbio.sequence.GrammaredSequence.degenerates"]], "distance() (skbio.sequence.grammaredsequence method)": [[316, "skbio.sequence.GrammaredSequence.distance"]], "expand_degenerates() (skbio.sequence.grammaredsequence method)": [[317, "skbio.sequence.GrammaredSequence.expand_degenerates"]], "find_motifs() (skbio.sequence.grammaredsequence method)": [[318, "skbio.sequence.GrammaredSequence.find_motifs"]], "find_with_regex() (skbio.sequence.grammaredsequence method)": [[319, "skbio.sequence.GrammaredSequence.find_with_regex"]], "frequencies() (skbio.sequence.grammaredsequence method)": [[320, "skbio.sequence.GrammaredSequence.frequencies"]], "gaps() (skbio.sequence.grammaredsequence method)": [[321, "skbio.sequence.GrammaredSequence.gaps"]], "has_definites() (skbio.sequence.grammaredsequence method)": [[322, "skbio.sequence.GrammaredSequence.has_definites"]], "has_degenerates() (skbio.sequence.grammaredsequence method)": [[323, "skbio.sequence.GrammaredSequence.has_degenerates"]], "has_gaps() (skbio.sequence.grammaredsequence method)": [[324, "skbio.sequence.GrammaredSequence.has_gaps"]], "has_interval_metadata() (skbio.sequence.grammaredsequence method)": [[325, "skbio.sequence.GrammaredSequence.has_interval_metadata"]], "has_metadata() (skbio.sequence.grammaredsequence method)": [[326, "skbio.sequence.GrammaredSequence.has_metadata"]], "has_nondegenerates() (skbio.sequence.grammaredsequence method)": [[327, "skbio.sequence.GrammaredSequence.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.grammaredsequence method)": [[328, "skbio.sequence.GrammaredSequence.has_positional_metadata"]], "index() (skbio.sequence.grammaredsequence method)": [[329, "skbio.sequence.GrammaredSequence.index"]], "iter_contiguous() (skbio.sequence.grammaredsequence method)": [[330, "skbio.sequence.GrammaredSequence.iter_contiguous"]], "iter_kmers() (skbio.sequence.grammaredsequence method)": [[331, "skbio.sequence.GrammaredSequence.iter_kmers"]], "kmer_frequencies() (skbio.sequence.grammaredsequence method)": [[332, "skbio.sequence.GrammaredSequence.kmer_frequencies"]], "lowercase() (skbio.sequence.grammaredsequence method)": [[333, "skbio.sequence.GrammaredSequence.lowercase"]], "match_frequency() (skbio.sequence.grammaredsequence method)": [[334, "skbio.sequence.GrammaredSequence.match_frequency"]], "matches() (skbio.sequence.grammaredsequence method)": [[335, "skbio.sequence.GrammaredSequence.matches"]], "mismatch_frequency() (skbio.sequence.grammaredsequence method)": [[336, "skbio.sequence.GrammaredSequence.mismatch_frequency"]], "mismatches() (skbio.sequence.grammaredsequence method)": [[337, "skbio.sequence.GrammaredSequence.mismatches"]], "nondegenerates() (skbio.sequence.grammaredsequence method)": [[338, "skbio.sequence.GrammaredSequence.nondegenerates"]], "read() (skbio.sequence.grammaredsequence class method)": [[339, "skbio.sequence.GrammaredSequence.read"]], "replace() (skbio.sequence.grammaredsequence method)": [[340, "skbio.sequence.GrammaredSequence.replace"]], "to_definites() (skbio.sequence.grammaredsequence method)": [[341, "skbio.sequence.GrammaredSequence.to_definites"]], "to_indices() (skbio.sequence.grammaredsequence method)": [[342, "skbio.sequence.GrammaredSequence.to_indices"]], "to_regex() (skbio.sequence.grammaredsequence method)": [[343, "skbio.sequence.GrammaredSequence.to_regex"]], "write() (skbio.sequence.grammaredsequence method)": [[344, "skbio.sequence.GrammaredSequence.write"]], "protein (class in skbio.sequence)": [[345, "skbio.sequence.Protein"]], "__bool__() (skbio.sequence.protein method)": [[346, "skbio.sequence.Protein.__bool__"]], "__contains__() (skbio.sequence.protein method)": [[347, "skbio.sequence.Protein.__contains__"]], "__copy__() (skbio.sequence.protein method)": [[348, "skbio.sequence.Protein.__copy__"]], "__deepcopy__() (skbio.sequence.protein method)": [[349, "skbio.sequence.Protein.__deepcopy__"]], "__eq__() (skbio.sequence.protein method)": [[350, "skbio.sequence.Protein.__eq__"]], "__ge__() (skbio.sequence.protein method)": [[351, "skbio.sequence.Protein.__ge__"]], "__getitem__() (skbio.sequence.protein method)": [[352, "skbio.sequence.Protein.__getitem__"]], "__getstate__() (skbio.sequence.protein method)": [[353, "skbio.sequence.Protein.__getstate__"]], "__gt__() (skbio.sequence.protein method)": [[354, "skbio.sequence.Protein.__gt__"]], "__iter__() (skbio.sequence.protein method)": [[355, "skbio.sequence.Protein.__iter__"]], "__le__() (skbio.sequence.protein method)": [[356, "skbio.sequence.Protein.__le__"]], "__len__() (skbio.sequence.protein method)": [[357, "skbio.sequence.Protein.__len__"]], "__lt__() (skbio.sequence.protein method)": [[358, "skbio.sequence.Protein.__lt__"]], "__ne__() (skbio.sequence.protein method)": [[359, "skbio.sequence.Protein.__ne__"]], "__reversed__() (skbio.sequence.protein method)": [[360, "skbio.sequence.Protein.__reversed__"]], "__str__() (skbio.sequence.protein method)": [[361, "skbio.sequence.Protein.__str__"]], "concat() (skbio.sequence.protein class method)": [[362, "skbio.sequence.Protein.concat"]], "count() (skbio.sequence.protein method)": [[363, "skbio.sequence.Protein.count"]], "definites() (skbio.sequence.protein method)": [[364, "skbio.sequence.Protein.definites"]], "degap() (skbio.sequence.protein method)": [[365, "skbio.sequence.Protein.degap"]], "degenerates() (skbio.sequence.protein method)": [[366, "skbio.sequence.Protein.degenerates"]], "distance() (skbio.sequence.protein method)": [[367, "skbio.sequence.Protein.distance"]], "expand_degenerates() (skbio.sequence.protein method)": [[368, "skbio.sequence.Protein.expand_degenerates"]], "find_motifs() (skbio.sequence.protein method)": [[369, "skbio.sequence.Protein.find_motifs"]], "find_with_regex() (skbio.sequence.protein method)": [[370, "skbio.sequence.Protein.find_with_regex"]], "frequencies() (skbio.sequence.protein method)": [[371, "skbio.sequence.Protein.frequencies"]], "gaps() (skbio.sequence.protein method)": [[372, "skbio.sequence.Protein.gaps"]], "has_definites() (skbio.sequence.protein method)": [[373, "skbio.sequence.Protein.has_definites"]], "has_degenerates() (skbio.sequence.protein method)": [[374, "skbio.sequence.Protein.has_degenerates"]], "has_gaps() (skbio.sequence.protein method)": [[375, "skbio.sequence.Protein.has_gaps"]], "has_interval_metadata() (skbio.sequence.protein method)": [[376, "skbio.sequence.Protein.has_interval_metadata"]], "has_metadata() (skbio.sequence.protein method)": [[377, "skbio.sequence.Protein.has_metadata"]], "has_nondegenerates() (skbio.sequence.protein method)": [[378, "skbio.sequence.Protein.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.protein method)": [[379, "skbio.sequence.Protein.has_positional_metadata"]], "has_stops() (skbio.sequence.protein method)": [[380, "skbio.sequence.Protein.has_stops"]], "index() (skbio.sequence.protein method)": [[381, "skbio.sequence.Protein.index"]], "iter_contiguous() (skbio.sequence.protein method)": [[382, "skbio.sequence.Protein.iter_contiguous"]], "iter_kmers() (skbio.sequence.protein method)": [[383, "skbio.sequence.Protein.iter_kmers"]], "kmer_frequencies() (skbio.sequence.protein method)": [[384, "skbio.sequence.Protein.kmer_frequencies"]], "lowercase() (skbio.sequence.protein method)": [[385, "skbio.sequence.Protein.lowercase"]], "match_frequency() (skbio.sequence.protein method)": [[386, "skbio.sequence.Protein.match_frequency"]], "matches() (skbio.sequence.protein method)": [[387, "skbio.sequence.Protein.matches"]], "mismatch_frequency() (skbio.sequence.protein method)": [[388, "skbio.sequence.Protein.mismatch_frequency"]], "mismatches() (skbio.sequence.protein method)": [[389, "skbio.sequence.Protein.mismatches"]], "nondegenerates() (skbio.sequence.protein method)": [[390, "skbio.sequence.Protein.nondegenerates"]], "read() (skbio.sequence.protein class method)": [[391, "skbio.sequence.Protein.read"]], "replace() (skbio.sequence.protein method)": [[392, "skbio.sequence.Protein.replace"]], "stops() (skbio.sequence.protein method)": [[393, "skbio.sequence.Protein.stops"]], "to_definites() (skbio.sequence.protein method)": [[394, "skbio.sequence.Protein.to_definites"]], "to_indices() (skbio.sequence.protein method)": [[395, "skbio.sequence.Protein.to_indices"]], "to_regex() (skbio.sequence.protein method)": [[396, "skbio.sequence.Protein.to_regex"]], "write() (skbio.sequence.protein method)": [[397, "skbio.sequence.Protein.write"]], "rna (class in skbio.sequence)": [[398, "skbio.sequence.RNA"]], "__bool__() (skbio.sequence.rna method)": [[399, "skbio.sequence.RNA.__bool__"]], "__contains__() (skbio.sequence.rna method)": [[400, "skbio.sequence.RNA.__contains__"]], "__copy__() (skbio.sequence.rna method)": [[401, "skbio.sequence.RNA.__copy__"]], "__deepcopy__() (skbio.sequence.rna method)": [[402, "skbio.sequence.RNA.__deepcopy__"]], "__eq__() (skbio.sequence.rna method)": [[403, "skbio.sequence.RNA.__eq__"]], "__ge__() (skbio.sequence.rna method)": [[404, "skbio.sequence.RNA.__ge__"]], "__getitem__() (skbio.sequence.rna method)": [[405, "skbio.sequence.RNA.__getitem__"]], "__getstate__() (skbio.sequence.rna method)": [[406, "skbio.sequence.RNA.__getstate__"]], "__gt__() (skbio.sequence.rna method)": [[407, "skbio.sequence.RNA.__gt__"]], "__iter__() (skbio.sequence.rna method)": [[408, "skbio.sequence.RNA.__iter__"]], "__le__() (skbio.sequence.rna method)": [[409, "skbio.sequence.RNA.__le__"]], "__len__() (skbio.sequence.rna method)": [[410, "skbio.sequence.RNA.__len__"]], "__lt__() (skbio.sequence.rna method)": [[411, "skbio.sequence.RNA.__lt__"]], "__ne__() (skbio.sequence.rna method)": [[412, "skbio.sequence.RNA.__ne__"]], "__reversed__() (skbio.sequence.rna method)": [[413, "skbio.sequence.RNA.__reversed__"]], "__str__() (skbio.sequence.rna method)": [[414, "skbio.sequence.RNA.__str__"]], "complement() (skbio.sequence.rna method)": [[415, "skbio.sequence.RNA.complement"]], "concat() (skbio.sequence.rna class method)": [[416, "skbio.sequence.RNA.concat"]], "count() (skbio.sequence.rna method)": [[417, "skbio.sequence.RNA.count"]], "definites() (skbio.sequence.rna method)": [[418, "skbio.sequence.RNA.definites"]], "degap() (skbio.sequence.rna method)": [[419, "skbio.sequence.RNA.degap"]], "degenerates() (skbio.sequence.rna method)": [[420, "skbio.sequence.RNA.degenerates"]], "distance() (skbio.sequence.rna method)": [[421, "skbio.sequence.RNA.distance"]], "expand_degenerates() (skbio.sequence.rna method)": [[422, "skbio.sequence.RNA.expand_degenerates"]], "find_motifs() (skbio.sequence.rna method)": [[423, "skbio.sequence.RNA.find_motifs"]], "find_with_regex() (skbio.sequence.rna method)": [[424, "skbio.sequence.RNA.find_with_regex"]], "frequencies() (skbio.sequence.rna method)": [[425, "skbio.sequence.RNA.frequencies"]], "gaps() (skbio.sequence.rna method)": [[426, "skbio.sequence.RNA.gaps"]], "gc_content() (skbio.sequence.rna method)": [[427, "skbio.sequence.RNA.gc_content"]], "gc_frequency() (skbio.sequence.rna method)": [[428, "skbio.sequence.RNA.gc_frequency"]], "has_definites() (skbio.sequence.rna method)": [[429, "skbio.sequence.RNA.has_definites"]], "has_degenerates() (skbio.sequence.rna method)": [[430, "skbio.sequence.RNA.has_degenerates"]], "has_gaps() (skbio.sequence.rna method)": [[431, "skbio.sequence.RNA.has_gaps"]], "has_interval_metadata() (skbio.sequence.rna method)": [[432, "skbio.sequence.RNA.has_interval_metadata"]], "has_metadata() (skbio.sequence.rna method)": [[433, "skbio.sequence.RNA.has_metadata"]], "has_nondegenerates() (skbio.sequence.rna method)": [[434, "skbio.sequence.RNA.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.rna method)": [[435, "skbio.sequence.RNA.has_positional_metadata"]], "index() (skbio.sequence.rna method)": [[436, "skbio.sequence.RNA.index"]], "is_reverse_complement() (skbio.sequence.rna method)": [[437, "skbio.sequence.RNA.is_reverse_complement"]], "iter_contiguous() (skbio.sequence.rna method)": [[438, "skbio.sequence.RNA.iter_contiguous"]], "iter_kmers() (skbio.sequence.rna method)": [[439, "skbio.sequence.RNA.iter_kmers"]], "kmer_frequencies() (skbio.sequence.rna method)": [[440, "skbio.sequence.RNA.kmer_frequencies"]], "lowercase() (skbio.sequence.rna method)": [[441, "skbio.sequence.RNA.lowercase"]], "match_frequency() (skbio.sequence.rna method)": [[442, "skbio.sequence.RNA.match_frequency"]], "matches() (skbio.sequence.rna method)": [[443, "skbio.sequence.RNA.matches"]], "mismatch_frequency() (skbio.sequence.rna method)": [[444, "skbio.sequence.RNA.mismatch_frequency"]], "mismatches() (skbio.sequence.rna method)": [[445, "skbio.sequence.RNA.mismatches"]], "nondegenerates() (skbio.sequence.rna method)": [[446, "skbio.sequence.RNA.nondegenerates"]], "read() (skbio.sequence.rna class method)": [[447, "skbio.sequence.RNA.read"]], "replace() (skbio.sequence.rna method)": [[448, "skbio.sequence.RNA.replace"]], "reverse_complement() (skbio.sequence.rna method)": [[449, "skbio.sequence.RNA.reverse_complement"]], "reverse_transcribe() (skbio.sequence.rna method)": [[450, "skbio.sequence.RNA.reverse_transcribe"]], "to_definites() (skbio.sequence.rna method)": [[451, "skbio.sequence.RNA.to_definites"]], "to_indices() (skbio.sequence.rna method)": [[452, "skbio.sequence.RNA.to_indices"]], "to_regex() (skbio.sequence.rna method)": [[453, "skbio.sequence.RNA.to_regex"]], "translate() (skbio.sequence.rna method)": [[454, "skbio.sequence.RNA.translate"]], "translate_six_frames() (skbio.sequence.rna method)": [[455, "skbio.sequence.RNA.translate_six_frames"]], "write() (skbio.sequence.rna method)": [[456, "skbio.sequence.RNA.write"]], "sequence (class in skbio.sequence)": [[457, "skbio.sequence.Sequence"]], "__bool__() (skbio.sequence.sequence method)": [[458, "skbio.sequence.Sequence.__bool__"]], "__contains__() (skbio.sequence.sequence method)": [[459, "skbio.sequence.Sequence.__contains__"]], "__copy__() (skbio.sequence.sequence method)": [[460, "skbio.sequence.Sequence.__copy__"]], "__deepcopy__() (skbio.sequence.sequence method)": [[461, "skbio.sequence.Sequence.__deepcopy__"]], "__eq__() (skbio.sequence.sequence method)": [[462, "skbio.sequence.Sequence.__eq__"]], "__ge__() (skbio.sequence.sequence method)": [[463, "skbio.sequence.Sequence.__ge__"]], "__getitem__() (skbio.sequence.sequence method)": [[464, "skbio.sequence.Sequence.__getitem__"]], "__getstate__() (skbio.sequence.sequence method)": [[465, "skbio.sequence.Sequence.__getstate__"]], "__gt__() (skbio.sequence.sequence method)": [[466, "skbio.sequence.Sequence.__gt__"]], "__iter__() (skbio.sequence.sequence method)": [[467, "skbio.sequence.Sequence.__iter__"]], "__le__() (skbio.sequence.sequence method)": [[468, "skbio.sequence.Sequence.__le__"]], "__len__() (skbio.sequence.sequence method)": [[469, "skbio.sequence.Sequence.__len__"]], "__lt__() (skbio.sequence.sequence method)": [[470, "skbio.sequence.Sequence.__lt__"]], "__ne__() (skbio.sequence.sequence method)": [[471, "skbio.sequence.Sequence.__ne__"]], "__reversed__() (skbio.sequence.sequence method)": [[472, "skbio.sequence.Sequence.__reversed__"]], "__str__() (skbio.sequence.sequence method)": [[473, "skbio.sequence.Sequence.__str__"]], "concat() (skbio.sequence.sequence class method)": [[474, "skbio.sequence.Sequence.concat"]], "count() (skbio.sequence.sequence method)": [[475, "skbio.sequence.Sequence.count"]], "distance() (skbio.sequence.sequence method)": [[476, "skbio.sequence.Sequence.distance"]], "find_with_regex() (skbio.sequence.sequence method)": [[477, "skbio.sequence.Sequence.find_with_regex"]], "frequencies() (skbio.sequence.sequence method)": [[478, "skbio.sequence.Sequence.frequencies"]], "has_interval_metadata() (skbio.sequence.sequence method)": [[479, "skbio.sequence.Sequence.has_interval_metadata"]], "has_metadata() (skbio.sequence.sequence method)": [[480, "skbio.sequence.Sequence.has_metadata"]], "has_positional_metadata() (skbio.sequence.sequence method)": [[481, "skbio.sequence.Sequence.has_positional_metadata"]], "index() (skbio.sequence.sequence method)": [[482, "skbio.sequence.Sequence.index"]], "iter_contiguous() (skbio.sequence.sequence method)": [[483, "skbio.sequence.Sequence.iter_contiguous"]], "iter_kmers() (skbio.sequence.sequence method)": [[484, "skbio.sequence.Sequence.iter_kmers"]], "kmer_frequencies() (skbio.sequence.sequence method)": [[485, "skbio.sequence.Sequence.kmer_frequencies"]], "lowercase() (skbio.sequence.sequence method)": [[486, "skbio.sequence.Sequence.lowercase"]], "match_frequency() (skbio.sequence.sequence method)": [[487, "skbio.sequence.Sequence.match_frequency"]], "matches() (skbio.sequence.sequence method)": [[488, "skbio.sequence.Sequence.matches"]], "mismatch_frequency() (skbio.sequence.sequence method)": [[489, "skbio.sequence.Sequence.mismatch_frequency"]], "mismatches() (skbio.sequence.sequence method)": [[490, "skbio.sequence.Sequence.mismatches"]], "read() (skbio.sequence.sequence class method)": [[491, "skbio.sequence.Sequence.read"]], "replace() (skbio.sequence.sequence method)": [[492, "skbio.sequence.Sequence.replace"]], "to_indices() (skbio.sequence.sequence method)": [[493, "skbio.sequence.Sequence.to_indices"]], "write() (skbio.sequence.sequence method)": [[494, "skbio.sequence.Sequence.write"]], "substitutionmatrix (class in skbio.sequence)": [[495, "skbio.sequence.SubstitutionMatrix"]], "__contains__() (skbio.sequence.substitutionmatrix method)": [[496, "skbio.sequence.SubstitutionMatrix.__contains__"]], "__eq__() (skbio.sequence.substitutionmatrix method)": [[497, "skbio.sequence.SubstitutionMatrix.__eq__"]], "__ge__() (skbio.sequence.substitutionmatrix method)": [[498, "skbio.sequence.SubstitutionMatrix.__ge__"]], "__getitem__() (skbio.sequence.substitutionmatrix method)": [[499, "skbio.sequence.SubstitutionMatrix.__getitem__"]], "__getstate__() (skbio.sequence.substitutionmatrix method)": [[500, "skbio.sequence.SubstitutionMatrix.__getstate__"]], "__gt__() (skbio.sequence.substitutionmatrix method)": [[501, "skbio.sequence.SubstitutionMatrix.__gt__"]], "__le__() (skbio.sequence.substitutionmatrix method)": [[502, "skbio.sequence.SubstitutionMatrix.__le__"]], "__lt__() (skbio.sequence.substitutionmatrix method)": [[503, "skbio.sequence.SubstitutionMatrix.__lt__"]], "__ne__() (skbio.sequence.substitutionmatrix method)": [[504, "skbio.sequence.SubstitutionMatrix.__ne__"]], "__str__() (skbio.sequence.substitutionmatrix method)": [[505, "skbio.sequence.SubstitutionMatrix.__str__"]], "between() (skbio.sequence.substitutionmatrix method)": [[506, "skbio.sequence.SubstitutionMatrix.between"]], "by_name() (skbio.sequence.substitutionmatrix class method)": [[507, "skbio.sequence.SubstitutionMatrix.by_name"]], "copy() (skbio.sequence.substitutionmatrix method)": [[508, "skbio.sequence.SubstitutionMatrix.copy"]], "filter() (skbio.sequence.substitutionmatrix method)": [[509, "skbio.sequence.SubstitutionMatrix.filter"]], "from_dict() (skbio.sequence.substitutionmatrix class method)": [[510, "skbio.sequence.SubstitutionMatrix.from_dict"]], "from_iterable() (skbio.sequence.substitutionmatrix class method)": [[511, "skbio.sequence.SubstitutionMatrix.from_iterable"]], "get_names() (skbio.sequence.substitutionmatrix class method)": [[512, "skbio.sequence.SubstitutionMatrix.get_names"]], "identity() (skbio.sequence.substitutionmatrix class method)": [[513, "skbio.sequence.SubstitutionMatrix.identity"]], "index() (skbio.sequence.substitutionmatrix method)": [[514, "skbio.sequence.SubstitutionMatrix.index"]], "plot() (skbio.sequence.substitutionmatrix method)": [[515, "skbio.sequence.SubstitutionMatrix.plot"]], "read() (skbio.sequence.substitutionmatrix class method)": [[516, "skbio.sequence.SubstitutionMatrix.read"]], "redundant_form() (skbio.sequence.substitutionmatrix method)": [[517, "skbio.sequence.SubstitutionMatrix.redundant_form"]], "to_data_frame() (skbio.sequence.substitutionmatrix method)": [[518, "skbio.sequence.SubstitutionMatrix.to_data_frame"]], "to_dict() (skbio.sequence.substitutionmatrix method)": [[519, "skbio.sequence.SubstitutionMatrix.to_dict"]], "transpose() (skbio.sequence.substitutionmatrix method)": [[520, "skbio.sequence.SubstitutionMatrix.transpose"]], "within() (skbio.sequence.substitutionmatrix method)": [[521, "skbio.sequence.SubstitutionMatrix.within"]], "write() (skbio.sequence.substitutionmatrix method)": [[522, "skbio.sequence.SubstitutionMatrix.write"]], "skbio.sequence.distance": [[523, "module-skbio.sequence.distance"]], "hamming() (in module skbio.sequence.distance)": [[524, "skbio.sequence.distance.hamming"]], "kmer_distance() (in module skbio.sequence.distance)": [[525, "skbio.sequence.distance.kmer_distance"]], "skbio.stats.composition": [[526, "module-skbio.stats.composition"]], "alr() (in module skbio.stats.composition)": [[527, "skbio.stats.composition.alr"]], "alr_inv() (in module skbio.stats.composition)": [[528, "skbio.stats.composition.alr_inv"]], "ancom() (in module skbio.stats.composition)": [[529, "skbio.stats.composition.ancom"]], "centralize() (in module skbio.stats.composition)": [[530, "skbio.stats.composition.centralize"]], "closure() (in module skbio.stats.composition)": [[531, "skbio.stats.composition.closure"]], "clr() (in module skbio.stats.composition)": [[532, "skbio.stats.composition.clr"]], "clr_inv() (in module skbio.stats.composition)": [[533, "skbio.stats.composition.clr_inv"]], "dirmult_ttest() (in module skbio.stats.composition)": [[534, "skbio.stats.composition.dirmult_ttest"]], "ilr() (in module skbio.stats.composition)": [[535, "skbio.stats.composition.ilr"]], "ilr_inv() (in module skbio.stats.composition)": [[536, "skbio.stats.composition.ilr_inv"]], "inner() (in module skbio.stats.composition)": [[537, "skbio.stats.composition.inner"]], "multi_replace() (in module skbio.stats.composition)": [[538, "skbio.stats.composition.multi_replace"]], "multiplicative_replacement() (in module skbio.stats.composition)": [[539, "skbio.stats.composition.multiplicative_replacement"]], "pairwise_vlr() (in module skbio.stats.composition)": [[540, "skbio.stats.composition.pairwise_vlr"]], "perturb() (in module skbio.stats.composition)": [[541, "skbio.stats.composition.perturb"]], "perturb_inv() (in module skbio.stats.composition)": [[542, "skbio.stats.composition.perturb_inv"]], "power() (in module skbio.stats.composition)": [[543, "skbio.stats.composition.power"]], "sbp_basis() (in module skbio.stats.composition)": [[544, "skbio.stats.composition.sbp_basis"]], "tree_basis() (in module skbio.stats.composition)": [[545, "skbio.stats.composition.tree_basis"]], "vlr() (in module skbio.stats.composition)": [[546, "skbio.stats.composition.vlr"]], "skbio.stats.distance": [[547, "module-skbio.stats.distance"]], "dissimilaritymatrix (class in skbio.stats.distance)": [[548, "skbio.stats.distance.DissimilarityMatrix"]], "__contains__() (skbio.stats.distance.dissimilaritymatrix method)": [[549, "skbio.stats.distance.DissimilarityMatrix.__contains__"]], "__eq__() (skbio.stats.distance.dissimilaritymatrix method)": [[550, "skbio.stats.distance.DissimilarityMatrix.__eq__"]], "__ge__() (skbio.stats.distance.dissimilaritymatrix method)": [[551, "skbio.stats.distance.DissimilarityMatrix.__ge__"]], "__getitem__() (skbio.stats.distance.dissimilaritymatrix method)": [[552, "skbio.stats.distance.DissimilarityMatrix.__getitem__"]], "__getstate__() (skbio.stats.distance.dissimilaritymatrix method)": [[553, "skbio.stats.distance.DissimilarityMatrix.__getstate__"]], "__gt__() (skbio.stats.distance.dissimilaritymatrix method)": [[554, "skbio.stats.distance.DissimilarityMatrix.__gt__"]], "__le__() (skbio.stats.distance.dissimilaritymatrix method)": [[555, "skbio.stats.distance.DissimilarityMatrix.__le__"]], "__lt__() (skbio.stats.distance.dissimilaritymatrix method)": [[556, "skbio.stats.distance.DissimilarityMatrix.__lt__"]], "__ne__() (skbio.stats.distance.dissimilaritymatrix method)": [[557, "skbio.stats.distance.DissimilarityMatrix.__ne__"]], "__str__() (skbio.stats.distance.dissimilaritymatrix method)": [[558, "skbio.stats.distance.DissimilarityMatrix.__str__"]], "between() (skbio.stats.distance.dissimilaritymatrix method)": [[559, "skbio.stats.distance.DissimilarityMatrix.between"]], "copy() (skbio.stats.distance.dissimilaritymatrix method)": [[560, "skbio.stats.distance.DissimilarityMatrix.copy"]], "filter() (skbio.stats.distance.dissimilaritymatrix method)": [[561, "skbio.stats.distance.DissimilarityMatrix.filter"]], "from_iterable() (skbio.stats.distance.dissimilaritymatrix class method)": [[562, "skbio.stats.distance.DissimilarityMatrix.from_iterable"]], "index() (skbio.stats.distance.dissimilaritymatrix method)": [[563, "skbio.stats.distance.DissimilarityMatrix.index"]], "plot() (skbio.stats.distance.dissimilaritymatrix method)": [[564, "skbio.stats.distance.DissimilarityMatrix.plot"]], "read() (skbio.stats.distance.dissimilaritymatrix class method)": [[565, "skbio.stats.distance.DissimilarityMatrix.read"]], "redundant_form() (skbio.stats.distance.dissimilaritymatrix method)": [[566, "skbio.stats.distance.DissimilarityMatrix.redundant_form"]], "to_data_frame() (skbio.stats.distance.dissimilaritymatrix method)": [[567, "skbio.stats.distance.DissimilarityMatrix.to_data_frame"]], "transpose() (skbio.stats.distance.dissimilaritymatrix method)": [[568, "skbio.stats.distance.DissimilarityMatrix.transpose"]], "within() (skbio.stats.distance.dissimilaritymatrix method)": [[569, "skbio.stats.distance.DissimilarityMatrix.within"]], "write() (skbio.stats.distance.dissimilaritymatrix method)": [[570, "skbio.stats.distance.DissimilarityMatrix.write"]], "dissimilaritymatrixerror": [[571, "skbio.stats.distance.DissimilarityMatrixError"]], "distancematrix (class in skbio.stats.distance)": [[572, "skbio.stats.distance.DistanceMatrix"]], "__contains__() (skbio.stats.distance.distancematrix method)": [[573, "skbio.stats.distance.DistanceMatrix.__contains__"]], "__eq__() (skbio.stats.distance.distancematrix method)": [[574, "skbio.stats.distance.DistanceMatrix.__eq__"]], "__ge__() (skbio.stats.distance.distancematrix method)": [[575, "skbio.stats.distance.DistanceMatrix.__ge__"]], "__getitem__() (skbio.stats.distance.distancematrix method)": [[576, "skbio.stats.distance.DistanceMatrix.__getitem__"]], "__getstate__() (skbio.stats.distance.distancematrix method)": [[577, "skbio.stats.distance.DistanceMatrix.__getstate__"]], "__gt__() (skbio.stats.distance.distancematrix method)": [[578, "skbio.stats.distance.DistanceMatrix.__gt__"]], "__le__() (skbio.stats.distance.distancematrix method)": [[579, "skbio.stats.distance.DistanceMatrix.__le__"]], "__lt__() (skbio.stats.distance.distancematrix method)": [[580, "skbio.stats.distance.DistanceMatrix.__lt__"]], "__ne__() (skbio.stats.distance.distancematrix method)": [[581, "skbio.stats.distance.DistanceMatrix.__ne__"]], "__str__() (skbio.stats.distance.distancematrix method)": [[582, "skbio.stats.distance.DistanceMatrix.__str__"]], "between() (skbio.stats.distance.distancematrix method)": [[583, "skbio.stats.distance.DistanceMatrix.between"]], "condensed_form() (skbio.stats.distance.distancematrix method)": [[584, "skbio.stats.distance.DistanceMatrix.condensed_form"]], "copy() (skbio.stats.distance.distancematrix method)": [[585, "skbio.stats.distance.DistanceMatrix.copy"]], "filter() (skbio.stats.distance.distancematrix method)": [[586, "skbio.stats.distance.DistanceMatrix.filter"]], "from_iterable() (skbio.stats.distance.distancematrix class method)": [[587, "skbio.stats.distance.DistanceMatrix.from_iterable"]], "index() (skbio.stats.distance.distancematrix method)": [[588, "skbio.stats.distance.DistanceMatrix.index"]], "permute() (skbio.stats.distance.distancematrix method)": [[589, "skbio.stats.distance.DistanceMatrix.permute"]], "plot() (skbio.stats.distance.distancematrix method)": [[590, "skbio.stats.distance.DistanceMatrix.plot"]], "read() (skbio.stats.distance.distancematrix class method)": [[591, "skbio.stats.distance.DistanceMatrix.read"]], "redundant_form() (skbio.stats.distance.distancematrix method)": [[592, "skbio.stats.distance.DistanceMatrix.redundant_form"]], "to_data_frame() (skbio.stats.distance.distancematrix method)": [[593, "skbio.stats.distance.DistanceMatrix.to_data_frame"]], "to_series() (skbio.stats.distance.distancematrix method)": [[594, "skbio.stats.distance.DistanceMatrix.to_series"]], "transpose() (skbio.stats.distance.distancematrix method)": [[595, "skbio.stats.distance.DistanceMatrix.transpose"]], "within() (skbio.stats.distance.distancematrix method)": [[596, "skbio.stats.distance.DistanceMatrix.within"]], "write() (skbio.stats.distance.distancematrix method)": [[597, "skbio.stats.distance.DistanceMatrix.write"]], "distancematrixerror": [[598, "skbio.stats.distance.DistanceMatrixError"]], "missingiderror": [[599, "skbio.stats.distance.MissingIDError"]], "anosim() (in module skbio.stats.distance)": [[600, "skbio.stats.distance.anosim"]], "bioenv() (in module skbio.stats.distance)": [[601, "skbio.stats.distance.bioenv"]], "mantel() (in module skbio.stats.distance)": [[602, "skbio.stats.distance.mantel"]], "permanova() (in module skbio.stats.distance)": [[603, "skbio.stats.distance.permanova"]], "permdisp() (in module skbio.stats.distance)": [[604, "skbio.stats.distance.permdisp"]], "pwmantel() (in module skbio.stats.distance)": [[605, "skbio.stats.distance.pwmantel"]], "randdm() (in module skbio.stats.distance)": [[606, "skbio.stats.distance.randdm"]], "skbio.stats.evolve": [[607, "module-skbio.stats.evolve"]], "hommola_cospeciation() (in module skbio.stats.evolve)": [[608, "skbio.stats.evolve.hommola_cospeciation"]], "skbio.stats.gradient": [[609, "module-skbio.stats.gradient"]], "averagegradientanova (class in skbio.stats.gradient)": [[610, "skbio.stats.gradient.AverageGradientANOVA"]], "__eq__() (skbio.stats.gradient.averagegradientanova method)": [[611, "skbio.stats.gradient.AverageGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.averagegradientanova method)": [[612, "skbio.stats.gradient.AverageGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.averagegradientanova method)": [[613, "skbio.stats.gradient.AverageGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.averagegradientanova method)": [[614, "skbio.stats.gradient.AverageGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.averagegradientanova method)": [[615, "skbio.stats.gradient.AverageGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.averagegradientanova method)": [[616, "skbio.stats.gradient.AverageGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.averagegradientanova method)": [[617, "skbio.stats.gradient.AverageGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.averagegradientanova method)": [[618, "skbio.stats.gradient.AverageGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.averagegradientanova method)": [[619, "skbio.stats.gradient.AverageGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.averagegradientanova method)": [[620, "skbio.stats.gradient.AverageGradientANOVA.get_trajectories"]], "categoryresults (class in skbio.stats.gradient)": [[621, "skbio.stats.gradient.CategoryResults"]], "__eq__() (skbio.stats.gradient.categoryresults method)": [[622, "skbio.stats.gradient.CategoryResults.__eq__"]], "__ge__() (skbio.stats.gradient.categoryresults method)": [[623, "skbio.stats.gradient.CategoryResults.__ge__"]], "__getstate__() (skbio.stats.gradient.categoryresults method)": [[624, "skbio.stats.gradient.CategoryResults.__getstate__"]], "__gt__() (skbio.stats.gradient.categoryresults method)": [[625, "skbio.stats.gradient.CategoryResults.__gt__"]], "__hash__() (skbio.stats.gradient.categoryresults method)": [[626, "skbio.stats.gradient.CategoryResults.__hash__"]], "__le__() (skbio.stats.gradient.categoryresults method)": [[627, "skbio.stats.gradient.CategoryResults.__le__"]], "__lt__() (skbio.stats.gradient.categoryresults method)": [[628, "skbio.stats.gradient.CategoryResults.__lt__"]], "__ne__() (skbio.stats.gradient.categoryresults method)": [[629, "skbio.stats.gradient.CategoryResults.__ne__"]], "__str__() (skbio.stats.gradient.categoryresults method)": [[630, "skbio.stats.gradient.CategoryResults.__str__"]], "to_files() (skbio.stats.gradient.categoryresults method)": [[631, "skbio.stats.gradient.CategoryResults.to_files"]], "firstdifferencegradientanova (class in skbio.stats.gradient)": [[632, "skbio.stats.gradient.FirstDifferenceGradientANOVA"]], "__eq__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[633, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[634, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[635, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[636, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[637, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[638, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[639, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[640, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[641, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.firstdifferencegradientanova method)": [[642, "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories"]], "gradientanova (class in skbio.stats.gradient)": [[643, "skbio.stats.gradient.GradientANOVA"]], "__eq__() (skbio.stats.gradient.gradientanova method)": [[644, "skbio.stats.gradient.GradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.gradientanova method)": [[645, "skbio.stats.gradient.GradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.gradientanova method)": [[646, "skbio.stats.gradient.GradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.gradientanova method)": [[647, "skbio.stats.gradient.GradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.gradientanova method)": [[648, "skbio.stats.gradient.GradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.gradientanova method)": [[649, "skbio.stats.gradient.GradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.gradientanova method)": [[650, "skbio.stats.gradient.GradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.gradientanova method)": [[651, "skbio.stats.gradient.GradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.gradientanova method)": [[652, "skbio.stats.gradient.GradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.gradientanova method)": [[653, "skbio.stats.gradient.GradientANOVA.get_trajectories"]], "gradientanovaresults (class in skbio.stats.gradient)": [[654, "skbio.stats.gradient.GradientANOVAResults"]], "__eq__() (skbio.stats.gradient.gradientanovaresults method)": [[655, "skbio.stats.gradient.GradientANOVAResults.__eq__"]], "__ge__() (skbio.stats.gradient.gradientanovaresults method)": [[656, "skbio.stats.gradient.GradientANOVAResults.__ge__"]], "__getstate__() (skbio.stats.gradient.gradientanovaresults method)": [[657, "skbio.stats.gradient.GradientANOVAResults.__getstate__"]], "__gt__() (skbio.stats.gradient.gradientanovaresults method)": [[658, "skbio.stats.gradient.GradientANOVAResults.__gt__"]], "__hash__() (skbio.stats.gradient.gradientanovaresults method)": [[659, "skbio.stats.gradient.GradientANOVAResults.__hash__"]], "__le__() (skbio.stats.gradient.gradientanovaresults method)": [[660, "skbio.stats.gradient.GradientANOVAResults.__le__"]], "__lt__() (skbio.stats.gradient.gradientanovaresults method)": [[661, "skbio.stats.gradient.GradientANOVAResults.__lt__"]], "__ne__() (skbio.stats.gradient.gradientanovaresults method)": [[662, "skbio.stats.gradient.GradientANOVAResults.__ne__"]], "__str__() (skbio.stats.gradient.gradientanovaresults method)": [[663, "skbio.stats.gradient.GradientANOVAResults.__str__"]], "to_files() (skbio.stats.gradient.gradientanovaresults method)": [[664, "skbio.stats.gradient.GradientANOVAResults.to_files"]], "groupresults (class in skbio.stats.gradient)": [[665, "skbio.stats.gradient.GroupResults"]], "__eq__() (skbio.stats.gradient.groupresults method)": [[666, "skbio.stats.gradient.GroupResults.__eq__"]], "__ge__() (skbio.stats.gradient.groupresults method)": [[667, "skbio.stats.gradient.GroupResults.__ge__"]], "__getstate__() (skbio.stats.gradient.groupresults method)": [[668, "skbio.stats.gradient.GroupResults.__getstate__"]], "__gt__() (skbio.stats.gradient.groupresults method)": [[669, "skbio.stats.gradient.GroupResults.__gt__"]], "__hash__() (skbio.stats.gradient.groupresults method)": [[670, "skbio.stats.gradient.GroupResults.__hash__"]], "__le__() (skbio.stats.gradient.groupresults method)": [[671, "skbio.stats.gradient.GroupResults.__le__"]], "__lt__() (skbio.stats.gradient.groupresults method)": [[672, "skbio.stats.gradient.GroupResults.__lt__"]], "__ne__() (skbio.stats.gradient.groupresults method)": [[673, "skbio.stats.gradient.GroupResults.__ne__"]], "__str__() (skbio.stats.gradient.groupresults method)": [[674, "skbio.stats.gradient.GroupResults.__str__"]], "to_files() (skbio.stats.gradient.groupresults method)": [[675, "skbio.stats.gradient.GroupResults.to_files"]], "trajectorygradientanova (class in skbio.stats.gradient)": [[676, "skbio.stats.gradient.TrajectoryGradientANOVA"]], "__eq__() (skbio.stats.gradient.trajectorygradientanova method)": [[677, "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.trajectorygradientanova method)": [[678, "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.trajectorygradientanova method)": [[679, "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.trajectorygradientanova method)": [[680, "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.trajectorygradientanova method)": [[681, "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.trajectorygradientanova method)": [[682, "skbio.stats.gradient.TrajectoryGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.trajectorygradientanova method)": [[683, "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.trajectorygradientanova method)": [[684, "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.trajectorygradientanova method)": [[685, "skbio.stats.gradient.TrajectoryGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.trajectorygradientanova method)": [[686, "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories"]], "windowdifferencegradientanova (class in skbio.stats.gradient)": [[687, "skbio.stats.gradient.WindowDifferenceGradientANOVA"]], "__eq__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[688, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[689, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[690, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[691, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[692, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[693, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[694, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[695, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[696, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.windowdifferencegradientanova method)": [[697, "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories"]], "isubsample() (in module skbio.stats)": [[698, "skbio.stats.isubsample"]], "skbio.stats.ordination": [[699, "module-skbio.stats.ordination"]], "ordinationresults (class in skbio.stats.ordination)": [[700, "skbio.stats.ordination.OrdinationResults"]], "__eq__() (skbio.stats.ordination.ordinationresults method)": [[701, "skbio.stats.ordination.OrdinationResults.__eq__"]], "__ge__() (skbio.stats.ordination.ordinationresults method)": [[702, "skbio.stats.ordination.OrdinationResults.__ge__"]], "__getstate__() (skbio.stats.ordination.ordinationresults method)": [[703, "skbio.stats.ordination.OrdinationResults.__getstate__"]], "__gt__() (skbio.stats.ordination.ordinationresults method)": [[704, "skbio.stats.ordination.OrdinationResults.__gt__"]], "__hash__() (skbio.stats.ordination.ordinationresults method)": [[705, "skbio.stats.ordination.OrdinationResults.__hash__"]], "__le__() (skbio.stats.ordination.ordinationresults method)": [[706, "skbio.stats.ordination.OrdinationResults.__le__"]], "__lt__() (skbio.stats.ordination.ordinationresults method)": [[707, "skbio.stats.ordination.OrdinationResults.__lt__"]], "__ne__() (skbio.stats.ordination.ordinationresults method)": [[708, "skbio.stats.ordination.OrdinationResults.__ne__"]], "__str__() (skbio.stats.ordination.ordinationresults method)": [[709, "skbio.stats.ordination.OrdinationResults.__str__"]], "plot() (skbio.stats.ordination.ordinationresults method)": [[710, "skbio.stats.ordination.OrdinationResults.plot"]], "read() (skbio.stats.ordination.ordinationresults class method)": [[711, "skbio.stats.ordination.OrdinationResults.read"]], "write() (skbio.stats.ordination.ordinationresults method)": [[712, "skbio.stats.ordination.OrdinationResults.write"]], "ca() (in module skbio.stats.ordination)": [[713, "skbio.stats.ordination.ca"]], "cca() (in module skbio.stats.ordination)": [[714, "skbio.stats.ordination.cca"]], "corr() (in module skbio.stats.ordination)": [[715, "skbio.stats.ordination.corr"]], "e_matrix() (in module skbio.stats.ordination)": [[716, "skbio.stats.ordination.e_matrix"]], "f_matrix() (in module skbio.stats.ordination)": [[717, "skbio.stats.ordination.f_matrix"]], "mean_and_std() (in module skbio.stats.ordination)": [[718, "skbio.stats.ordination.mean_and_std"]], "pcoa() (in module skbio.stats.ordination)": [[719, "skbio.stats.ordination.pcoa"]], "pcoa_biplot() (in module skbio.stats.ordination)": [[720, "skbio.stats.ordination.pcoa_biplot"]], "rda() (in module skbio.stats.ordination)": [[721, "skbio.stats.ordination.rda"]], "scale() (in module skbio.stats.ordination)": [[722, "skbio.stats.ordination.scale"]], "svd_rank() (in module skbio.stats.ordination)": [[723, "skbio.stats.ordination.svd_rank"]], "skbio.stats.power": [[724, "module-skbio.stats.power"]], "confidence_bound() (in module skbio.stats.power)": [[725, "skbio.stats.power.confidence_bound"]], "paired_subsamples() (in module skbio.stats.power)": [[726, "skbio.stats.power.paired_subsamples"]], "subsample_paired_power() (in module skbio.stats.power)": [[727, "skbio.stats.power.subsample_paired_power"]], "subsample_power() (in module skbio.stats.power)": [[728, "skbio.stats.power.subsample_power"]], "subsample_counts() (in module skbio.stats)": [[729, "skbio.stats.subsample_counts"]], "duplicatenodeerror": [[730, "skbio.tree.DuplicateNodeError"]], "missingnodeerror": [[731, "skbio.tree.MissingNodeError"]], "nolengtherror": [[732, "skbio.tree.NoLengthError"]], "noparenterror": [[733, "skbio.tree.NoParentError"]], "treeerror": [[734, "skbio.tree.TreeError"]], "treenode (class in skbio.tree)": [[735, "skbio.tree.TreeNode"]], "__copy__() (skbio.tree.treenode method)": [[736, "skbio.tree.TreeNode.__copy__"]], "__deepcopy__() (skbio.tree.treenode method)": [[737, "skbio.tree.TreeNode.__deepcopy__"]], "__eq__() (skbio.tree.treenode method)": [[738, "skbio.tree.TreeNode.__eq__"]], "__ge__() (skbio.tree.treenode method)": [[739, "skbio.tree.TreeNode.__ge__"]], "__getitem__() (skbio.tree.treenode method)": [[740, "skbio.tree.TreeNode.__getitem__"]], "__getstate__() (skbio.tree.treenode method)": [[741, "skbio.tree.TreeNode.__getstate__"]], "__gt__() (skbio.tree.treenode method)": [[742, "skbio.tree.TreeNode.__gt__"]], "__hash__() (skbio.tree.treenode method)": [[743, "skbio.tree.TreeNode.__hash__"]], "__iter__() (skbio.tree.treenode method)": [[744, "skbio.tree.TreeNode.__iter__"]], "__le__() (skbio.tree.treenode method)": [[745, "skbio.tree.TreeNode.__le__"]], "__len__() (skbio.tree.treenode method)": [[746, "skbio.tree.TreeNode.__len__"]], "__lt__() (skbio.tree.treenode method)": [[747, "skbio.tree.TreeNode.__lt__"]], "__ne__() (skbio.tree.treenode method)": [[748, "skbio.tree.TreeNode.__ne__"]], "__str__() (skbio.tree.treenode method)": [[749, "skbio.tree.TreeNode.__str__"]], "accumulate_to_ancestor() (skbio.tree.treenode method)": [[750, "skbio.tree.TreeNode.accumulate_to_ancestor"]], "ancestors() (skbio.tree.treenode method)": [[751, "skbio.tree.TreeNode.ancestors"]], "append() (skbio.tree.treenode method)": [[752, "skbio.tree.TreeNode.append"]], "ascii_art() (skbio.tree.treenode method)": [[753, "skbio.tree.TreeNode.ascii_art"]], "assign_ids() (skbio.tree.treenode method)": [[754, "skbio.tree.TreeNode.assign_ids"]], "assign_supports() (skbio.tree.treenode method)": [[755, "skbio.tree.TreeNode.assign_supports"]], "bifurcate() (skbio.tree.treenode method)": [[756, "skbio.tree.TreeNode.bifurcate"]], "cache_attr() (skbio.tree.treenode method)": [[757, "skbio.tree.TreeNode.cache_attr"]], "compare_rfd() (skbio.tree.treenode method)": [[758, "skbio.tree.TreeNode.compare_rfd"]], "compare_subsets() (skbio.tree.treenode method)": [[759, "skbio.tree.TreeNode.compare_subsets"]], "compare_tip_distances() (skbio.tree.treenode method)": [[760, "skbio.tree.TreeNode.compare_tip_distances"]], "copy() (skbio.tree.treenode method)": [[761, "skbio.tree.TreeNode.copy"]], "count() (skbio.tree.treenode method)": [[762, "skbio.tree.TreeNode.count"]], "create_caches() (skbio.tree.treenode method)": [[763, "skbio.tree.TreeNode.create_caches"]], "deepcopy() (skbio.tree.treenode method)": [[764, "skbio.tree.TreeNode.deepcopy"]], "descending_branch_length() (skbio.tree.treenode method)": [[765, "skbio.tree.TreeNode.descending_branch_length"]], "distance() (skbio.tree.treenode method)": [[766, "skbio.tree.TreeNode.distance"]], "extend() (skbio.tree.treenode method)": [[767, "skbio.tree.TreeNode.extend"]], "find() (skbio.tree.treenode method)": [[768, "skbio.tree.TreeNode.find"]], "find_all() (skbio.tree.treenode method)": [[769, "skbio.tree.TreeNode.find_all"]], "find_by_func() (skbio.tree.treenode method)": [[770, "skbio.tree.TreeNode.find_by_func"]], "find_by_id() (skbio.tree.treenode method)": [[771, "skbio.tree.TreeNode.find_by_id"]], "from_linkage_matrix() (skbio.tree.treenode class method)": [[772, "skbio.tree.TreeNode.from_linkage_matrix"]], "from_taxdump() (skbio.tree.treenode class method)": [[773, "skbio.tree.TreeNode.from_taxdump"]], "from_taxonomy() (skbio.tree.treenode class method)": [[774, "skbio.tree.TreeNode.from_taxonomy"]], "get_max_distance() (skbio.tree.treenode method)": [[775, "skbio.tree.TreeNode.get_max_distance"]], "has_children() (skbio.tree.treenode method)": [[776, "skbio.tree.TreeNode.has_children"]], "index_tree() (skbio.tree.treenode method)": [[777, "skbio.tree.TreeNode.index_tree"]], "invalidate_caches() (skbio.tree.treenode method)": [[778, "skbio.tree.TreeNode.invalidate_caches"]], "is_root() (skbio.tree.treenode method)": [[779, "skbio.tree.TreeNode.is_root"]], "is_tip() (skbio.tree.treenode method)": [[780, "skbio.tree.TreeNode.is_tip"]], "lca() (skbio.tree.treenode method)": [[781, "skbio.tree.TreeNode.lca"]], "levelorder() (skbio.tree.treenode method)": [[782, "skbio.tree.TreeNode.levelorder"]], "lowest_common_ancestor() (skbio.tree.treenode method)": [[783, "skbio.tree.TreeNode.lowest_common_ancestor"]], "neighbors() (skbio.tree.treenode method)": [[784, "skbio.tree.TreeNode.neighbors"]], "non_tips() (skbio.tree.treenode method)": [[785, "skbio.tree.TreeNode.non_tips"]], "observed_node_counts() (skbio.tree.treenode method)": [[786, "skbio.tree.TreeNode.observed_node_counts"]], "pop() (skbio.tree.treenode method)": [[787, "skbio.tree.TreeNode.pop"]], "postorder() (skbio.tree.treenode method)": [[788, "skbio.tree.TreeNode.postorder"]], "pre_and_postorder() (skbio.tree.treenode method)": [[789, "skbio.tree.TreeNode.pre_and_postorder"]], "preorder() (skbio.tree.treenode method)": [[790, "skbio.tree.TreeNode.preorder"]], "prune() (skbio.tree.treenode method)": [[791, "skbio.tree.TreeNode.prune"]], "read() (skbio.tree.treenode class method)": [[792, "skbio.tree.TreeNode.read"]], "remove() (skbio.tree.treenode method)": [[793, "skbio.tree.TreeNode.remove"]], "remove_deleted() (skbio.tree.treenode method)": [[794, "skbio.tree.TreeNode.remove_deleted"]], "root() (skbio.tree.treenode method)": [[795, "skbio.tree.TreeNode.root"]], "root_at() (skbio.tree.treenode method)": [[796, "skbio.tree.TreeNode.root_at"]], "root_at_midpoint() (skbio.tree.treenode method)": [[797, "skbio.tree.TreeNode.root_at_midpoint"]], "shear() (skbio.tree.treenode method)": [[798, "skbio.tree.TreeNode.shear"]], "shuffle() (skbio.tree.treenode method)": [[799, "skbio.tree.TreeNode.shuffle"]], "siblings() (skbio.tree.treenode method)": [[800, "skbio.tree.TreeNode.siblings"]], "subset() (skbio.tree.treenode method)": [[801, "skbio.tree.TreeNode.subset"]], "subsets() (skbio.tree.treenode method)": [[802, "skbio.tree.TreeNode.subsets"]], "subtree() (skbio.tree.treenode method)": [[803, "skbio.tree.TreeNode.subtree"]], "tip_tip_distances() (skbio.tree.treenode method)": [[804, "skbio.tree.TreeNode.tip_tip_distances"]], "tips() (skbio.tree.treenode method)": [[805, "skbio.tree.TreeNode.tips"]], "to_array() (skbio.tree.treenode method)": [[806, "skbio.tree.TreeNode.to_array"]], "to_taxonomy() (skbio.tree.treenode method)": [[807, "skbio.tree.TreeNode.to_taxonomy"]], "traverse() (skbio.tree.treenode method)": [[808, "skbio.tree.TreeNode.traverse"]], "unpack() (skbio.tree.treenode method)": [[809, "skbio.tree.TreeNode.unpack"]], "unpack_by_func() (skbio.tree.treenode method)": [[810, "skbio.tree.TreeNode.unpack_by_func"]], "unrooted_copy() (skbio.tree.treenode method)": [[811, "skbio.tree.TreeNode.unrooted_copy"]], "unrooted_deepcopy() (skbio.tree.treenode method)": [[812, "skbio.tree.TreeNode.unrooted_deepcopy"]], "write() (skbio.tree.treenode method)": [[813, "skbio.tree.TreeNode.write"]], "majority_rule() (in module skbio.tree)": [[814, "skbio.tree.majority_rule"]], "nj() (in module skbio.tree)": [[815, "skbio.tree.nj"]], "efficiencywarning": [[816, "skbio.util.EfficiencyWarning"]], "representationwarning": [[817, "skbio.util.RepresentationWarning"]], "assert_data_frame_almost_equal() (in module skbio.util)": [[818, "skbio.util.assert_data_frame_almost_equal"]], "assert_ordination_results_equal() (in module skbio.util)": [[819, "skbio.util.assert_ordination_results_equal"]], "cardinal_to_ordinal() (in module skbio.util)": [[820, "skbio.util.cardinal_to_ordinal"]], "classproperty (class in skbio.util)": [[821, "skbio.util.classproperty"]], "__delete__() (skbio.util.classproperty method)": [[822, "skbio.util.classproperty.__delete__"]], "__eq__() (skbio.util.classproperty method)": [[823, "skbio.util.classproperty.__eq__"]], "__ge__() (skbio.util.classproperty method)": [[824, "skbio.util.classproperty.__ge__"]], "__get__() (skbio.util.classproperty method)": [[825, "skbio.util.classproperty.__get__"]], "__getstate__() (skbio.util.classproperty method)": [[826, "skbio.util.classproperty.__getstate__"]], "__gt__() (skbio.util.classproperty method)": [[827, "skbio.util.classproperty.__gt__"]], "__hash__() (skbio.util.classproperty method)": [[828, "skbio.util.classproperty.__hash__"]], "__le__() (skbio.util.classproperty method)": [[829, "skbio.util.classproperty.__le__"]], "__lt__() (skbio.util.classproperty method)": [[830, "skbio.util.classproperty.__lt__"]], "__ne__() (skbio.util.classproperty method)": [[831, "skbio.util.classproperty.__ne__"]], "__set__() (skbio.util.classproperty method)": [[832, "skbio.util.classproperty.__set__"]], "__set_name__() (skbio.util.classproperty method)": [[833, "skbio.util.classproperty.__set_name__"]], "__str__() (skbio.util.classproperty method)": [[834, "skbio.util.classproperty.__str__"]], "deleter() (skbio.util.classproperty method)": [[835, "skbio.util.classproperty.deleter"]], "getter() (skbio.util.classproperty method)": [[836, "skbio.util.classproperty.getter"]], "setter() (skbio.util.classproperty method)": [[837, "skbio.util.classproperty.setter"]], "find_duplicates() (in module skbio.util)": [[838, "skbio.util.find_duplicates"]], "get_data_path() (in module skbio.util)": [[839, "skbio.util.get_data_path"]], "safe_md5() (in module skbio.util)": [[840, "skbio.util.safe_md5"]], "workflow (class in skbio.workflow)": [[841, "skbio.workflow.Workflow"]], "__call__() (skbio.workflow.workflow method)": [[842, "skbio.workflow.Workflow.__call__"]], "__eq__() (skbio.workflow.workflow method)": [[843, "skbio.workflow.Workflow.__eq__"]], "__ge__() (skbio.workflow.workflow method)": [[844, "skbio.workflow.Workflow.__ge__"]], "__getstate__() (skbio.workflow.workflow method)": [[845, "skbio.workflow.Workflow.__getstate__"]], "__gt__() (skbio.workflow.workflow method)": [[846, "skbio.workflow.Workflow.__gt__"]], "__hash__() (skbio.workflow.workflow method)": [[847, "skbio.workflow.Workflow.__hash__"]], "__le__() (skbio.workflow.workflow method)": [[848, "skbio.workflow.Workflow.__le__"]], "__lt__() (skbio.workflow.workflow method)": [[849, "skbio.workflow.Workflow.__lt__"]], "__ne__() (skbio.workflow.workflow method)": [[850, "skbio.workflow.Workflow.__ne__"]], "__str__() (skbio.workflow.workflow method)": [[851, "skbio.workflow.Workflow.__str__"]], "initialize_state() (skbio.workflow.workflow method)": [[852, "skbio.workflow.Workflow.initialize_state"]], "method (class in skbio.workflow)": [[853, "skbio.workflow.method"]], "__call__() (skbio.workflow.method method)": [[854, "skbio.workflow.method.__call__"]], "__eq__() (skbio.workflow.method method)": [[855, "skbio.workflow.method.__eq__"]], "__ge__() (skbio.workflow.method method)": [[856, "skbio.workflow.method.__ge__"]], "__getstate__() (skbio.workflow.method method)": [[857, "skbio.workflow.method.__getstate__"]], "__gt__() (skbio.workflow.method method)": [[858, "skbio.workflow.method.__gt__"]], "__hash__() (skbio.workflow.method method)": [[859, "skbio.workflow.method.__hash__"]], "__le__() (skbio.workflow.method method)": [[860, "skbio.workflow.method.__le__"]], "__lt__() (skbio.workflow.method method)": [[861, "skbio.workflow.method.__lt__"]], "__ne__() (skbio.workflow.method method)": [[862, "skbio.workflow.method.__ne__"]], "__str__() (skbio.workflow.method method)": [[863, "skbio.workflow.method.__str__"]], "requires (class in skbio.workflow)": [[864, "skbio.workflow.requires"]], "__call__() (skbio.workflow.requires method)": [[865, "skbio.workflow.requires.__call__"]], "__eq__() (skbio.workflow.requires method)": [[866, "skbio.workflow.requires.__eq__"]], "__ge__() (skbio.workflow.requires method)": [[867, "skbio.workflow.requires.__ge__"]], "__getstate__() (skbio.workflow.requires method)": [[868, "skbio.workflow.requires.__getstate__"]], "__gt__() (skbio.workflow.requires method)": [[869, "skbio.workflow.requires.__gt__"]], "__hash__() (skbio.workflow.requires method)": [[870, "skbio.workflow.requires.__hash__"]], "__le__() (skbio.workflow.requires method)": [[871, "skbio.workflow.requires.__le__"]], "__lt__() (skbio.workflow.requires method)": [[872, "skbio.workflow.requires.__lt__"]], "__ne__() (skbio.workflow.requires method)": [[873, "skbio.workflow.requires.__ne__"]], "__str__() (skbio.workflow.requires method)": [[874, "skbio.workflow.requires.__str__"]], "skbio.io": [[876, "module-skbio.io"]], "skbio.metadata": [[877, "module-skbio.metadata"]], "skbio.sequence": [[878, "module-skbio.sequence"]], "skbio.stats": [[879, "module-skbio.stats"]], "skbio.table": [[880, "module-skbio.table"]], "skbio.tree": [[881, "module-skbio.tree"]], "skbio.util": [[882, "module-skbio.util"]], "skbio.workflow": [[883, "module-skbio.workflow"]]}})