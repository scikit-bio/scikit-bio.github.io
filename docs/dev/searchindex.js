Search.setIndex({"alltitles": {"Adding Node Information": [[230, "adding-node-information"]], "Advanced Label and Length Rules": [[230, "advanced-label-and-length-rules"]], "Alignment Section": [[222, "alignment-section"], [232, "alignment-section"]], "Alignment algorithms": [[0, "alignment-algorithms"]], "Alignment data structure": [[0, "alignment-data-structure"]], "Alignment structure": [[0, "alignment-structure"]], "Alpha diversity": [[1, "alpha-diversity"]], "Alpha diversity measures (skbio.diversity.alpha)": [[106, "alpha-diversity-measures-skbio-diversity-alpha"]], "Application of Rules": [[230, "application-of-rules"]], "BIOM table": [[1104, "biom-table"]], "BIOM-Format (skbio.io.format.biom)": [[219, "biom-format-skbio-io-format-biom"]], "BLAST Column Types": [[220, "blast-column-types"], [221, "blast-column-types"]], "BLAST+6 format (skbio.io.format.blast6)": [[220, "blast-6-format-skbio-io-format-blast6"]], "BLAST+7 format (skbio.io.format.blast7)": [[221, "blast-7-format-skbio-io-format-blast7"]], "Basic Symbols": [[230, "basic-symbols"]], "Beta diversity": [[1, "beta-diversity"]], "Beta diversity measures (skbio.diversity.beta)": [[147, "beta-diversity-measures-skbio-diversity-beta"]], "Biological Embeddings (skbio.embedding)": [[2, "biological-embeddings-skbio-embedding"]], "Biological Sequences (skbio.sequence)": [[1102, "biological-sequences-skbio-sequence"]], "Canonical analysis": [[855, "canonical-analysis"]], "Categorical Variable Stats": [[706, "categorical-variable-stats"]], "Caveats": [[230, "caveats"]], "Classes": [[237, "classes"], [706, "classes"], [765, "classes"], [1107, "classes"]], "Clustal format (skbio.io.format.clustal)": [[222, "clustal-format-skbio-io-format-clustal"]], "Column Types": [[234, "column-types"]], "Comments and Empty Rows": [[234, "comments-and-empty-rows"]], "Community Diversity (skbio.diversity)": [[1, "community-diversity-skbio-diversity"]], "Composition Statistics (skbio.stats.composition)": [[685, "composition-statistics-skbio-stats-composition"]], "Composition statistics": [[1103, "composition-statistics"]], "Continuous Variable Stats": [[706, "continuous-variable-stats"]], "Cophylogenetic methods": [[763, "cophylogenetic-methods"]], "Correspondence analysis": [[855, "correspondence-analysis"]], "Count vectors": [[1, "count-vectors"]], "Coverage metrics": [[106, "coverage-metrics"]], "Creating a new format for scikit-bio": [[237, "creating-a-new-format-for-scikit-bio"]], "Data Table (skbio.table)": [[1104, "data-table-skbio-table"]], "Data structures": [[706, "data-structures"]], "Data subsampling": [[1103, "data-subsampling"]], "Decorators": [[1107, "decorators"]], "Deprecated functionality": [[0, "deprecated-functionality"]], "Develop custom formats": [[1100, "develop-custom-formats"]], "Developer warnings": [[1106, "developer-warnings"]], "Distance Matrix Comparisons": [[706, "distance-matrix-comparisons"]], "Distance calculation": [[1102, "distance-calculation"]], "Distance matrix statistics": [[1103, "distance-matrix-statistics"]], "Distance matrix-based statistics (skbio.stats.distance)": [[706, "distance-matrix-based-statistics-skbio-stats-distance"]], "Distance-based statistics": [[706, "distance-based-statistics"]], "Diversity metrics": [[106, "diversity-metrics"]], "Dominance metrics": [[106, "dominance-metrics"]], "EMBL format (skbio.io.format.embl)": [[224, "embl-format-skbio-io-format-embl"]], "Embedding format (skbio.io.format.embed).": [[223, "embedding-format-skbio-io-format-embed"]], "Embedding types": [[2, "embedding-types"]], "Embedding vector types": [[2, "embedding-vector-types"]], "Embedding vector utilities": [[2, "embedding-vector-utilities"]], "Empirical Power Estimation (skbio.stats.power)": [[881, "empirical-power-estimation-skbio-stats-power"]], "Evenness metrics": [[106, "evenness-metrics"]], "Evolutionary statistics (skbio.stats.evolve)": [[763, "evolutionary-statistics-skbio-stats-evolve"]], "Example data": [[1104, "example-data"]], "Examples": [[219, "examples"], [220, "examples"], [221, "examples"], [222, "examples"], [223, "examples"], [224, "examples"], [225, "examples"], [226, "examples"], [227, "examples"], [228, "examples"], [230, "examples"], [231, "examples"], [232, "examples"], [233, "examples"], [235, "examples"], [236, "examples"], [706, "examples"], [765, "examples"], [855, "examples"], [881, "examples"]], "Exceptions": [[237, "exceptions"], [706, "exceptions"], [1105, "exceptions"]], "Exceptions and warnings": [[1100, "exceptions-and-warnings"]], "Explanation": [[230, "explanation"]], "FASTA Format": [[225, "fasta-format"]], "FASTA/QUAL format (skbio.io.format.fasta)": [[225, "fasta-qual-format-skbio-io-format-fasta"]], "FASTQ format (skbio.io.format.fastq)": [[226, "fastq-format-skbio-io-format-fastq"]], "FEATURES section": [[227, "features-section"]], "FT section": [[224, "ft-section"]], "Feature Level Products": [[224, "feature-level-products"]], "Footer": [[235, "footer"]], "Formal Grammar": [[230, "formal-grammar"]], "Format Parameters": [[220, "format-parameters"], [222, "format-parameters"], [225, "format-parameters"], [226, "format-parameters"], [227, "format-parameters"], [228, "format-parameters"], [229, "format-parameters"], [230, "format-parameters"], [232, "format-parameters"], [233, "format-parameters"], [235, "format-parameters"], [236, "format-parameters"]], "Format Specification": [[218, "format-specification"], [219, "format-specification"], [220, "format-specification"], [221, "format-specification"], [222, "format-specification"], [223, "format-specification"], [224, "format-specification"], [225, "format-specification"], [226, "format-specification"], [227, "format-specification"], [228, "format-specification"], [229, "format-specification"], [230, "format-specification"], [231, "format-specification"], [232, "format-specification"], [233, "format-specification"], [234, "format-specification"], [235, "format-specification"], [236, "format-specification"]], "Format Support": [[218, "format-support"], [219, "format-support"], [220, "format-support"], [221, "format-support"], [222, "format-support"], [223, "format-support"], [224, "format-support"], [225, "format-support"], [226, "format-support"], [227, "format-support"], [228, "format-support"], [229, "format-support"], [230, "format-support"], [231, "format-support"], [232, "format-support"], [233, "format-support"], [234, "format-support"], [235, "format-support"], [236, "format-support"]], "Functions": [[147, "functions"], [237, "functions"], [276, "functions"], [682, "functions"], [685, "functions"], [706, "functions"], [763, "functions"], [881, "functions"]], "GC metadata": [[235, "gc-metadata"]], "GF metadata": [[235, "gf-metadata"]], "GFF3 format (skbio.io.format.gff3)": [[228, "gff3-format-skbio-io-format-gff3"]], "GR metadata": [[235, "gr-metadata"]], "GS metadata": [[235, "gs-metadata"]], "GenBank format (skbio.io.format.genbank)": [[227, "genbank-format-skbio-io-format-genbank"]], "Generator and TabularMSA Reader Parameters": [[225, "generator-and-tabularmsa-reader-parameters"]], "Generators Only": [[233, "generators-only"]], "Gradient analyses (skbio.stats.gradient)": [[765, "gradient-analyses-skbio-stats-gradient"]], "Header": [[235, "header"]], "Header Section": [[232, "header-section"]], "I/O Registry (skbio.io.registry)": [[237, "i-o-registry-skbio-io-registry"]], "I/O utilities (skbio.io.util)": [[276, "i-o-utilities-skbio-io-util"]], "Identifier Column": [[234, "identifier-column"]], "Inline Comments": [[230, "inline-comments"]], "Input and Output (skbio.io)": [[1100, "input-and-output-skbio-io"]], "Input validation": [[1, "input-validation"]], "Interval metadata": [[1101, "interval-metadata"]], "Introduction": [[1, "introduction"]], "Labeled square matrix format (skbio.io.format.lsmat)": [[229, "labeled-square-matrix-format-skbio-io-format-lsmat"]], "Leading and trailing whitespace characters": [[234, "leading-and-trailing-whitespace-characters"]], "Location string": [[227, "location-string"]], "Metadata": [[235, "metadata"]], "Metadata (skbio.metadata)": [[1101, "metadata-skbio-metadata"]], "Metadata Columns": [[234, "metadata-columns"]], "Metadata Formatting Requirements": [[234, "metadata-formatting-requirements"]], "Metadata Validation": [[234, "metadata-validation"]], "Metadata columns": [[1101, "metadata-columns"]], "Miscellaneous functionality": [[1106, "miscellaneous-functionality"]], "Multidimensional scaling": [[855, "multidimensional-scaling"]], "Multiple Sequence Alignment": [[235, "multiple-sequence-alignment"]], "Multivariate Statistics (skbio.stats)": [[1103, "multivariate-statistics-skbio-stats"]], "Newick format (skbio.io.format.newick)": [[230, "newick-format-skbio-io-format-newick"]], "Number Formatting": [[234, "number-formatting"]], "ORIGIN section": [[227, "origin-section"]], "Ordination methods": [[1103, "ordination-methods"]], "Ordination methods (skbio.stats.ordination)": [[855, "ordination-methods-skbio-stats-ordination"]], "Ordination results": [[855, "ordination-results"]], "Ordination results format (skbio.io.format.ordination)": [[231, "ordination-results-format-skbio-io-format-ordination"]], "Other statistical methods": [[1103, "other-statistical-methods"]], "PHYLIP multiple sequence alignment format (skbio.io.format.phylip)": [[232, "phylip-multiple-sequence-alignment-format-skbio-io-format-phylip"]], "Phylogenetic reconstruction": [[1105, "phylogenetic-reconstruction"]], "QSeq format (skbio.io.format.qseq)": [[233, "qseq-format-skbio-io-format-qseq"]], "QUAL File Parameter (Readers and Writers)": [[225, "qual-file-parameter-readers-and-writers"]], "QUAL Format": [[225, "qual-format"]], "Quality Score Variants": [[226, "quality-score-variants"]], "Read/write files": [[1100, "read-write-files"]], "Reader-specific Parameters": [[225, "reader-specific-parameters"], [227, "reader-specific-parameters"], [228, "reader-specific-parameters"]], "Reading EMBL Files": [[224, "reading-embl-files"]], "Reading EMBL Files using generators": [[224, "reading-embl-files-using-generators"]], "Reading and Writing FASTA Files": [[225, "reading-and-writing-fasta-files"]], "Reading and Writing FASTA/QUAL Files": [[225, "reading-and-writing-fasta-qual-files"]], "Reading and Writing GenBank Files": [[227, "reading-and-writing-genbank-files"]], "Reading files into scikit-bio": [[1100, "reading-files-into-scikit-bio"]], "Recommendations for Identifiers": [[234, "recommendations-for-identifiers"]], "References": [[106, "references"], [218, "references"], [219, "references"], [220, "references"], [221, "references"], [222, "references"], [224, "references"], [225, "references"], [226, "references"], [227, "references"], [228, "references"], [230, "references"], [232, "references"], [233, "references"], [235, "references"], [236, "references"], [685, "references"], [706, "references"], [855, "references"]], "Reserved Keyword Arguments": [[237, "reserved-keyword-arguments"]], "Richness metrics": [[106, "richness-metrics"]], "SQ section": [[224, "sq-section"]], "Sample metadata": [[1101, "sample-metadata"]], "Sections before FEATURES": [[227, "sections-before-features"]], "Sections before FH (Feature Header)": [[224, "sections-before-fh-feature-header"]], "Sequence Alignments (skbio.alignment)": [[0, "sequence-alignments-skbio-alignment"]], "Sequence Data": [[225, "sequence-data"]], "Sequence Header": [[225, "sequence-header"]], "Sequence Reader Parameters": [[225, "sequence-reader-parameters"]], "Sequence distance metrics (skbio.sequence.distance)": [[682, "sequence-distance-metrics-skbio-sequence-distance"]], "Sequence types": [[1102, "sequence-types"]], "Sequence utilities": [[1102, "sequence-utilities"]], "Simple binary dissimilarity matrix format (skbio.io.format.binary_dm)": [[218, "simple-binary-dissimilarity-matrix-format-skbio-io-format-binary-dm"]], "Specifying a diversity metric": [[1, "specifying-a-diversity-metric"]], "Stockholm format (skbio.io.format.stockholm)": [[235, "stockholm-format-skbio-io-format-stockholm"]], "Supported file formats": [[1100, "supported-file-formats"]], "Taxdump format (skbio.io.format.taxdump)": [[236, "taxdump-format-skbio-io-format-taxdump"]], "Testing functionality": [[1106, "testing-functionality"]], "Tree structure and operations": [[1105, "tree-structure-and-operations"]], "Tree utilities": [[1105, "tree-utilities"]], "Trees and Phylogenetics (skbio.tree)": [[1105, "trees-and-phylogenetics-skbio-tree"]], "Tutorial": [[0, "tutorial"], [1, "tutorial"], [1100, "tutorial"], [1102, "tutorial"], [1105, "tutorial"], [1107, "tutorial"]], "Using the optimized alignment algorithm": [[0, "using-the-optimized-alignment-algorithm"]], "Using the slow alignment algorithm": [[0, "using-the-slow-alignment-algorithm"]], "Utilities for Developers (skbio.util)": [[1106, "utilities-for-developers-skbio-util"]], "Utility functions": [[855, "utility-functions"]], "What kinds of files scikit-bio can use": [[1100, "what-kinds-of-files-scikit-bio-can-use"]], "Whitespace": [[230, "whitespace"]], "Workflow construction (skbio.workflow)": [[1107, "workflow-construction-skbio-workflow"]], "Writer-specific Parameters": [[225, "writer-specific-parameters"], [228, "writer-specific-parameters"]], "Writing files from scikit-bio": [[1100, "writing-files-from-scikit-bio"]], "division.dmp": [[236, "division-dmp"]], "gencode.dmp": [[236, "gencode-dmp"]], "names.dmp": [[236, "names-dmp"]], "nodes.dmp": [[236, "nodes-dmp"]], "scikit-bio 0.6.2-dev documentation": [[1099, "scikit-bio-version-documentation"]], "skbio.alignment.AlignPath": [[3, "skbio-alignment-alignpath"]], "skbio.alignment.AlignPath.__eq__": [[4, "skbio-alignment-alignpath-eq"]], "skbio.alignment.AlignPath.__ge__": [[5, "skbio-alignment-alignpath-ge"]], "skbio.alignment.AlignPath.__getstate__": [[6, "skbio-alignment-alignpath-getstate"]], "skbio.alignment.AlignPath.__gt__": [[7, "skbio-alignment-alignpath-gt"]], "skbio.alignment.AlignPath.__hash__": [[8, "skbio-alignment-alignpath-hash"]], "skbio.alignment.AlignPath.__le__": [[9, "skbio-alignment-alignpath-le"]], "skbio.alignment.AlignPath.__lt__": [[10, "skbio-alignment-alignpath-lt"]], "skbio.alignment.AlignPath.__ne__": [[11, "skbio-alignment-alignpath-ne"]], "skbio.alignment.AlignPath.__str__": [[12, "skbio-alignment-alignpath-str"]], "skbio.alignment.AlignPath.from_bits": [[13, "skbio-alignment-alignpath-from-bits"]], "skbio.alignment.AlignPath.from_coordinates": [[14, "skbio-alignment-alignpath-from-coordinates"]], "skbio.alignment.AlignPath.from_indices": [[15, "skbio-alignment-alignpath-from-indices"]], "skbio.alignment.AlignPath.from_tabular": [[16, "skbio-alignment-alignpath-from-tabular"]], "skbio.alignment.AlignPath.to_bits": [[17, "skbio-alignment-alignpath-to-bits"]], "skbio.alignment.AlignPath.to_coordinates": [[18, "skbio-alignment-alignpath-to-coordinates"]], "skbio.alignment.AlignPath.to_indices": [[19, "skbio-alignment-alignpath-to-indices"]], "skbio.alignment.AlignmentStructure": [[20, "skbio-alignment-alignmentstructure"]], "skbio.alignment.AlignmentStructure.__eq__": [[21, "skbio-alignment-alignmentstructure-eq"]], "skbio.alignment.AlignmentStructure.__ge__": [[22, "skbio-alignment-alignmentstructure-ge"]], "skbio.alignment.AlignmentStructure.__getitem__": [[23, "skbio-alignment-alignmentstructure-getitem"]], "skbio.alignment.AlignmentStructure.__getstate__": [[24, "skbio-alignment-alignmentstructure-getstate"]], "skbio.alignment.AlignmentStructure.__gt__": [[25, "skbio-alignment-alignmentstructure-gt"]], "skbio.alignment.AlignmentStructure.__hash__": [[26, "skbio-alignment-alignmentstructure-hash"]], "skbio.alignment.AlignmentStructure.__le__": [[27, "skbio-alignment-alignmentstructure-le"]], "skbio.alignment.AlignmentStructure.__lt__": [[28, "skbio-alignment-alignmentstructure-lt"]], "skbio.alignment.AlignmentStructure.__ne__": [[29, "skbio-alignment-alignmentstructure-ne"]], "skbio.alignment.AlignmentStructure.__setstate__": [[30, "skbio-alignment-alignmentstructure-setstate"]], "skbio.alignment.AlignmentStructure.__str__": [[31, "skbio-alignment-alignmentstructure-str"]], "skbio.alignment.AlignmentStructure.is_zero_based": [[32, "skbio-alignment-alignmentstructure-is-zero-based"]], "skbio.alignment.AlignmentStructure.set_zero_based": [[33, "skbio-alignment-alignmentstructure-set-zero-based"]], "skbio.alignment.PairAlignPath": [[34, "skbio-alignment-pairalignpath"]], "skbio.alignment.PairAlignPath.__eq__": [[35, "skbio-alignment-pairalignpath-eq"]], "skbio.alignment.PairAlignPath.__ge__": [[36, "skbio-alignment-pairalignpath-ge"]], "skbio.alignment.PairAlignPath.__getstate__": [[37, "skbio-alignment-pairalignpath-getstate"]], "skbio.alignment.PairAlignPath.__gt__": [[38, "skbio-alignment-pairalignpath-gt"]], "skbio.alignment.PairAlignPath.__hash__": [[39, "skbio-alignment-pairalignpath-hash"]], "skbio.alignment.PairAlignPath.__le__": [[40, "skbio-alignment-pairalignpath-le"]], "skbio.alignment.PairAlignPath.__lt__": [[41, "skbio-alignment-pairalignpath-lt"]], "skbio.alignment.PairAlignPath.__ne__": [[42, "skbio-alignment-pairalignpath-ne"]], "skbio.alignment.PairAlignPath.__str__": [[43, "skbio-alignment-pairalignpath-str"]], "skbio.alignment.PairAlignPath.from_bits": [[44, "skbio-alignment-pairalignpath-from-bits"]], "skbio.alignment.PairAlignPath.from_cigar": [[45, "skbio-alignment-pairalignpath-from-cigar"]], "skbio.alignment.PairAlignPath.from_coordinates": [[46, "skbio-alignment-pairalignpath-from-coordinates"]], "skbio.alignment.PairAlignPath.from_indices": [[47, "skbio-alignment-pairalignpath-from-indices"]], "skbio.alignment.PairAlignPath.from_tabular": [[48, "skbio-alignment-pairalignpath-from-tabular"]], "skbio.alignment.PairAlignPath.to_bits": [[49, "skbio-alignment-pairalignpath-to-bits"]], "skbio.alignment.PairAlignPath.to_cigar": [[50, "skbio-alignment-pairalignpath-to-cigar"]], "skbio.alignment.PairAlignPath.to_coordinates": [[51, "skbio-alignment-pairalignpath-to-coordinates"]], "skbio.alignment.PairAlignPath.to_indices": [[52, "skbio-alignment-pairalignpath-to-indices"]], "skbio.alignment.StripedSmithWaterman": [[53, "skbio-alignment-stripedsmithwaterman"]], "skbio.alignment.StripedSmithWaterman.__call__": [[54, "skbio-alignment-stripedsmithwaterman-call"]], "skbio.alignment.StripedSmithWaterman.__eq__": [[55, "skbio-alignment-stripedsmithwaterman-eq"]], "skbio.alignment.StripedSmithWaterman.__ge__": [[56, "skbio-alignment-stripedsmithwaterman-ge"]], "skbio.alignment.StripedSmithWaterman.__getstate__": [[57, "skbio-alignment-stripedsmithwaterman-getstate"]], "skbio.alignment.StripedSmithWaterman.__gt__": [[58, "skbio-alignment-stripedsmithwaterman-gt"]], "skbio.alignment.StripedSmithWaterman.__hash__": [[59, "skbio-alignment-stripedsmithwaterman-hash"]], "skbio.alignment.StripedSmithWaterman.__le__": [[60, "skbio-alignment-stripedsmithwaterman-le"]], "skbio.alignment.StripedSmithWaterman.__lt__": [[61, "skbio-alignment-stripedsmithwaterman-lt"]], "skbio.alignment.StripedSmithWaterman.__ne__": [[62, "skbio-alignment-stripedsmithwaterman-ne"]], "skbio.alignment.StripedSmithWaterman.__setstate__": [[63, "skbio-alignment-stripedsmithwaterman-setstate"]], "skbio.alignment.StripedSmithWaterman.__str__": [[64, "skbio-alignment-stripedsmithwaterman-str"]], "skbio.alignment.TabularMSA": [[65, "skbio-alignment-tabularmsa"]], "skbio.alignment.TabularMSA.__bool__": [[66, "skbio-alignment-tabularmsa-bool"]], "skbio.alignment.TabularMSA.__contains__": [[67, "skbio-alignment-tabularmsa-contains"]], "skbio.alignment.TabularMSA.__copy__": [[68, "skbio-alignment-tabularmsa-copy"]], "skbio.alignment.TabularMSA.__deepcopy__": [[69, "skbio-alignment-tabularmsa-deepcopy"]], "skbio.alignment.TabularMSA.__eq__": [[70, "skbio-alignment-tabularmsa-eq"]], "skbio.alignment.TabularMSA.__ge__": [[71, "skbio-alignment-tabularmsa-ge"]], "skbio.alignment.TabularMSA.__getitem__": [[72, "skbio-alignment-tabularmsa-getitem"]], "skbio.alignment.TabularMSA.__getstate__": [[73, "skbio-alignment-tabularmsa-getstate"]], "skbio.alignment.TabularMSA.__gt__": [[74, "skbio-alignment-tabularmsa-gt"]], "skbio.alignment.TabularMSA.__iter__": [[75, "skbio-alignment-tabularmsa-iter"]], "skbio.alignment.TabularMSA.__le__": [[76, "skbio-alignment-tabularmsa-le"]], "skbio.alignment.TabularMSA.__len__": [[77, "skbio-alignment-tabularmsa-len"]], "skbio.alignment.TabularMSA.__lt__": [[78, "skbio-alignment-tabularmsa-lt"]], "skbio.alignment.TabularMSA.__ne__": [[79, "skbio-alignment-tabularmsa-ne"]], "skbio.alignment.TabularMSA.__reversed__": [[80, "skbio-alignment-tabularmsa-reversed"]], "skbio.alignment.TabularMSA.__str__": [[81, "skbio-alignment-tabularmsa-str"]], "skbio.alignment.TabularMSA.append": [[82, "skbio-alignment-tabularmsa-append"]], "skbio.alignment.TabularMSA.consensus": [[83, "skbio-alignment-tabularmsa-consensus"]], "skbio.alignment.TabularMSA.conservation": [[84, "skbio-alignment-tabularmsa-conservation"]], "skbio.alignment.TabularMSA.extend": [[85, "skbio-alignment-tabularmsa-extend"]], "skbio.alignment.TabularMSA.from_dict": [[86, "skbio-alignment-tabularmsa-from-dict"]], "skbio.alignment.TabularMSA.from_path_seqs": [[87, "skbio-alignment-tabularmsa-from-path-seqs"]], "skbio.alignment.TabularMSA.gap_frequencies": [[88, "skbio-alignment-tabularmsa-gap-frequencies"]], "skbio.alignment.TabularMSA.has_metadata": [[89, "skbio-alignment-tabularmsa-has-metadata"]], "skbio.alignment.TabularMSA.has_positional_metadata": [[90, "skbio-alignment-tabularmsa-has-positional-metadata"]], "skbio.alignment.TabularMSA.iter_positions": [[91, "skbio-alignment-tabularmsa-iter-positions"]], "skbio.alignment.TabularMSA.join": [[92, "skbio-alignment-tabularmsa-join"]], "skbio.alignment.TabularMSA.read": [[93, "skbio-alignment-tabularmsa-read"]], "skbio.alignment.TabularMSA.reassign_index": [[94, "skbio-alignment-tabularmsa-reassign-index"]], "skbio.alignment.TabularMSA.sort": [[95, "skbio-alignment-tabularmsa-sort"]], "skbio.alignment.TabularMSA.to_dict": [[96, "skbio-alignment-tabularmsa-to-dict"]], "skbio.alignment.TabularMSA.write": [[97, "skbio-alignment-tabularmsa-write"]], "skbio.alignment.global_pairwise_align": [[98, "skbio-alignment-global-pairwise-align"]], "skbio.alignment.global_pairwise_align_nucleotide": [[99, "skbio-alignment-global-pairwise-align-nucleotide"]], "skbio.alignment.global_pairwise_align_protein": [[100, "skbio-alignment-global-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align": [[101, "skbio-alignment-local-pairwise-align"]], "skbio.alignment.local_pairwise_align_nucleotide": [[102, "skbio-alignment-local-pairwise-align-nucleotide"]], "skbio.alignment.local_pairwise_align_protein": [[103, "skbio-alignment-local-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align_ssw": [[104, "skbio-alignment-local-pairwise-align-ssw"]], "skbio.alignment.make_identity_substitution_matrix": [[105, "skbio-alignment-make-identity-substitution-matrix"]], "skbio.diversity.alpha.ace": [[107, "skbio-diversity-alpha-ace"]], "skbio.diversity.alpha.berger_parker_d": [[108, "skbio-diversity-alpha-berger-parker-d"]], "skbio.diversity.alpha.brillouin_d": [[109, "skbio-diversity-alpha-brillouin-d"]], "skbio.diversity.alpha.chao1": [[110, "skbio-diversity-alpha-chao1"]], "skbio.diversity.alpha.chao1_ci": [[111, "skbio-diversity-alpha-chao1-ci"]], "skbio.diversity.alpha.dominance": [[112, "skbio-diversity-alpha-dominance"]], "skbio.diversity.alpha.doubles": [[113, "skbio-diversity-alpha-doubles"]], "skbio.diversity.alpha.enspie": [[114, "skbio-diversity-alpha-enspie"]], "skbio.diversity.alpha.esty_ci": [[115, "skbio-diversity-alpha-esty-ci"]], "skbio.diversity.alpha.faith_pd": [[116, "skbio-diversity-alpha-faith-pd"]], "skbio.diversity.alpha.fisher_alpha": [[117, "skbio-diversity-alpha-fisher-alpha"]], "skbio.diversity.alpha.gini_index": [[118, "skbio-diversity-alpha-gini-index"]], "skbio.diversity.alpha.goods_coverage": [[119, "skbio-diversity-alpha-goods-coverage"]], "skbio.diversity.alpha.heip_e": [[120, "skbio-diversity-alpha-heip-e"]], "skbio.diversity.alpha.hill": [[121, "skbio-diversity-alpha-hill"]], "skbio.diversity.alpha.inv_simpson": [[122, "skbio-diversity-alpha-inv-simpson"]], "skbio.diversity.alpha.kempton_taylor_q": [[123, "skbio-diversity-alpha-kempton-taylor-q"]], "skbio.diversity.alpha.lladser_ci": [[124, "skbio-diversity-alpha-lladser-ci"]], "skbio.diversity.alpha.lladser_pe": [[125, "skbio-diversity-alpha-lladser-pe"]], "skbio.diversity.alpha.margalef": [[126, "skbio-diversity-alpha-margalef"]], "skbio.diversity.alpha.mcintosh_d": [[127, "skbio-diversity-alpha-mcintosh-d"]], "skbio.diversity.alpha.mcintosh_e": [[128, "skbio-diversity-alpha-mcintosh-e"]], "skbio.diversity.alpha.menhinick": [[129, "skbio-diversity-alpha-menhinick"]], "skbio.diversity.alpha.michaelis_menten_fit": [[130, "skbio-diversity-alpha-michaelis-menten-fit"]], "skbio.diversity.alpha.observed_features": [[131, "skbio-diversity-alpha-observed-features"]], "skbio.diversity.alpha.observed_otus": [[132, "skbio-diversity-alpha-observed-otus"]], "skbio.diversity.alpha.osd": [[133, "skbio-diversity-alpha-osd"]], "skbio.diversity.alpha.phydiv": [[134, "skbio-diversity-alpha-phydiv"]], "skbio.diversity.alpha.pielou_e": [[135, "skbio-diversity-alpha-pielou-e"]], "skbio.diversity.alpha.renyi": [[136, "skbio-diversity-alpha-renyi"]], "skbio.diversity.alpha.robbins": [[137, "skbio-diversity-alpha-robbins"]], "skbio.diversity.alpha.shannon": [[138, "skbio-diversity-alpha-shannon"]], "skbio.diversity.alpha.simpson": [[139, "skbio-diversity-alpha-simpson"]], "skbio.diversity.alpha.simpson_d": [[140, "skbio-diversity-alpha-simpson-d"]], "skbio.diversity.alpha.simpson_e": [[141, "skbio-diversity-alpha-simpson-e"]], "skbio.diversity.alpha.singles": [[142, "skbio-diversity-alpha-singles"]], "skbio.diversity.alpha.sobs": [[143, "skbio-diversity-alpha-sobs"]], "skbio.diversity.alpha.strong": [[144, "skbio-diversity-alpha-strong"]], "skbio.diversity.alpha.tsallis": [[145, "skbio-diversity-alpha-tsallis"]], "skbio.diversity.alpha_diversity": [[146, "skbio-diversity-alpha-diversity"]], "skbio.diversity.beta.unweighted_unifrac": [[148, "skbio-diversity-beta-unweighted-unifrac"]], "skbio.diversity.beta.weighted_unifrac": [[149, "skbio-diversity-beta-weighted-unifrac"]], "skbio.diversity.beta_diversity": [[150, "skbio-diversity-beta-diversity"]], "skbio.diversity.block_beta_diversity": [[151, "skbio-diversity-block-beta-diversity"]], "skbio.diversity.get_alpha_diversity_metrics": [[152, "skbio-diversity-get-alpha-diversity-metrics"]], "skbio.diversity.get_beta_diversity_metrics": [[153, "skbio-diversity-get-beta-diversity-metrics"]], "skbio.diversity.partial_beta_diversity": [[154, "skbio-diversity-partial-beta-diversity"]], "skbio.embedding.Embedding": [[155, "skbio-embedding-embedding"]], "skbio.embedding.Embedding.__eq__": [[156, "skbio-embedding-embedding-eq"]], "skbio.embedding.Embedding.__ge__": [[157, "skbio-embedding-embedding-ge"]], "skbio.embedding.Embedding.__getstate__": [[158, "skbio-embedding-embedding-getstate"]], "skbio.embedding.Embedding.__gt__": [[159, "skbio-embedding-embedding-gt"]], "skbio.embedding.Embedding.__hash__": [[160, "skbio-embedding-embedding-hash"]], "skbio.embedding.Embedding.__le__": [[161, "skbio-embedding-embedding-le"]], "skbio.embedding.Embedding.__lt__": [[162, "skbio-embedding-embedding-lt"]], "skbio.embedding.Embedding.__ne__": [[163, "skbio-embedding-embedding-ne"]], "skbio.embedding.Embedding.__str__": [[164, "skbio-embedding-embedding-str"]], "skbio.embedding.Embedding.bytes": [[165, "skbio-embedding-embedding-bytes"]], "skbio.embedding.ProteinEmbedding": [[166, "skbio-embedding-proteinembedding"]], "skbio.embedding.ProteinEmbedding.__eq__": [[167, "skbio-embedding-proteinembedding-eq"]], "skbio.embedding.ProteinEmbedding.__ge__": [[168, "skbio-embedding-proteinembedding-ge"]], "skbio.embedding.ProteinEmbedding.__getstate__": [[169, "skbio-embedding-proteinembedding-getstate"]], "skbio.embedding.ProteinEmbedding.__gt__": [[170, "skbio-embedding-proteinembedding-gt"]], "skbio.embedding.ProteinEmbedding.__hash__": [[171, "skbio-embedding-proteinembedding-hash"]], "skbio.embedding.ProteinEmbedding.__le__": [[172, "skbio-embedding-proteinembedding-le"]], "skbio.embedding.ProteinEmbedding.__lt__": [[173, "skbio-embedding-proteinembedding-lt"]], "skbio.embedding.ProteinEmbedding.__ne__": [[174, "skbio-embedding-proteinembedding-ne"]], "skbio.embedding.ProteinEmbedding.__str__": [[175, "skbio-embedding-proteinembedding-str"]], "skbio.embedding.ProteinEmbedding.bytes": [[176, "skbio-embedding-proteinembedding-bytes"]], "skbio.embedding.ProteinEmbedding.read": [[177, "skbio-embedding-proteinembedding-read"]], "skbio.embedding.ProteinEmbedding.write": [[178, "skbio-embedding-proteinembedding-write"]], "skbio.embedding.ProteinVector": [[179, "skbio-embedding-proteinvector"]], "skbio.embedding.ProteinVector.__eq__": [[180, "skbio-embedding-proteinvector-eq"]], "skbio.embedding.ProteinVector.__ge__": [[181, "skbio-embedding-proteinvector-ge"]], "skbio.embedding.ProteinVector.__getstate__": [[182, "skbio-embedding-proteinvector-getstate"]], "skbio.embedding.ProteinVector.__gt__": [[183, "skbio-embedding-proteinvector-gt"]], "skbio.embedding.ProteinVector.__hash__": [[184, "skbio-embedding-proteinvector-hash"]], "skbio.embedding.ProteinVector.__le__": [[185, "skbio-embedding-proteinvector-le"]], "skbio.embedding.ProteinVector.__lt__": [[186, "skbio-embedding-proteinvector-lt"]], "skbio.embedding.ProteinVector.__ne__": [[187, "skbio-embedding-proteinvector-ne"]], "skbio.embedding.ProteinVector.__str__": [[188, "skbio-embedding-proteinvector-str"]], "skbio.embedding.ProteinVector.bytes": [[189, "skbio-embedding-proteinvector-bytes"]], "skbio.embedding.ProteinVector.read": [[190, "skbio-embedding-proteinvector-read"]], "skbio.embedding.ProteinVector.write": [[191, "skbio-embedding-proteinvector-write"]], "skbio.embedding.SequenceEmbedding": [[192, "skbio-embedding-sequenceembedding"]], "skbio.embedding.SequenceEmbedding.__eq__": [[193, "skbio-embedding-sequenceembedding-eq"]], "skbio.embedding.SequenceEmbedding.__ge__": [[194, "skbio-embedding-sequenceembedding-ge"]], "skbio.embedding.SequenceEmbedding.__getstate__": [[195, "skbio-embedding-sequenceembedding-getstate"]], "skbio.embedding.SequenceEmbedding.__gt__": [[196, "skbio-embedding-sequenceembedding-gt"]], "skbio.embedding.SequenceEmbedding.__hash__": [[197, "skbio-embedding-sequenceembedding-hash"]], "skbio.embedding.SequenceEmbedding.__le__": [[198, "skbio-embedding-sequenceembedding-le"]], "skbio.embedding.SequenceEmbedding.__lt__": [[199, "skbio-embedding-sequenceembedding-lt"]], "skbio.embedding.SequenceEmbedding.__ne__": [[200, "skbio-embedding-sequenceembedding-ne"]], "skbio.embedding.SequenceEmbedding.__str__": [[201, "skbio-embedding-sequenceembedding-str"]], "skbio.embedding.SequenceEmbedding.bytes": [[202, "skbio-embedding-sequenceembedding-bytes"]], "skbio.embedding.SequenceVector": [[203, "skbio-embedding-sequencevector"]], "skbio.embedding.SequenceVector.__eq__": [[204, "skbio-embedding-sequencevector-eq"]], "skbio.embedding.SequenceVector.__ge__": [[205, "skbio-embedding-sequencevector-ge"]], "skbio.embedding.SequenceVector.__getstate__": [[206, "skbio-embedding-sequencevector-getstate"]], "skbio.embedding.SequenceVector.__gt__": [[207, "skbio-embedding-sequencevector-gt"]], "skbio.embedding.SequenceVector.__hash__": [[208, "skbio-embedding-sequencevector-hash"]], "skbio.embedding.SequenceVector.__le__": [[209, "skbio-embedding-sequencevector-le"]], "skbio.embedding.SequenceVector.__lt__": [[210, "skbio-embedding-sequencevector-lt"]], "skbio.embedding.SequenceVector.__ne__": [[211, "skbio-embedding-sequencevector-ne"]], "skbio.embedding.SequenceVector.__str__": [[212, "skbio-embedding-sequencevector-str"]], "skbio.embedding.SequenceVector.bytes": [[213, "skbio-embedding-sequencevector-bytes"]], "skbio.embedding.embed_vec_to_dataframe": [[214, "skbio-embedding-embed-vec-to-dataframe"]], "skbio.embedding.embed_vec_to_distances": [[215, "skbio-embedding-embed-vec-to-distances"]], "skbio.embedding.embed_vec_to_numpy": [[216, "skbio-embedding-embed-vec-to-numpy"]], "skbio.embedding.embed_vec_to_ordination": [[217, "skbio-embedding-embed-vec-to-ordination"]], "skbio.io.registry.Format": [[238, "skbio-io-registry-format"]], "skbio.io.registry.Format.__eq__": [[239, "skbio-io-registry-format-eq"]], "skbio.io.registry.Format.__ge__": [[240, "skbio-io-registry-format-ge"]], "skbio.io.registry.Format.__getstate__": [[241, "skbio-io-registry-format-getstate"]], "skbio.io.registry.Format.__gt__": [[242, "skbio-io-registry-format-gt"]], "skbio.io.registry.Format.__hash__": [[243, "skbio-io-registry-format-hash"]], "skbio.io.registry.Format.__le__": [[244, "skbio-io-registry-format-le"]], "skbio.io.registry.Format.__lt__": [[245, "skbio-io-registry-format-lt"]], "skbio.io.registry.Format.__ne__": [[246, "skbio-io-registry-format-ne"]], "skbio.io.registry.Format.__str__": [[247, "skbio-io-registry-format-str"]], "skbio.io.registry.Format.reader": [[248, "skbio-io-registry-format-reader"]], "skbio.io.registry.Format.sniffer": [[249, "skbio-io-registry-format-sniffer"]], "skbio.io.registry.Format.writer": [[250, "skbio-io-registry-format-writer"]], "skbio.io.registry.IORegistry": [[251, "skbio-io-registry-ioregistry"]], "skbio.io.registry.IORegistry.__eq__": [[252, "skbio-io-registry-ioregistry-eq"]], "skbio.io.registry.IORegistry.__ge__": [[253, "skbio-io-registry-ioregistry-ge"]], "skbio.io.registry.IORegistry.__getstate__": [[254, "skbio-io-registry-ioregistry-getstate"]], "skbio.io.registry.IORegistry.__gt__": [[255, "skbio-io-registry-ioregistry-gt"]], "skbio.io.registry.IORegistry.__hash__": [[256, "skbio-io-registry-ioregistry-hash"]], "skbio.io.registry.IORegistry.__le__": [[257, "skbio-io-registry-ioregistry-le"]], "skbio.io.registry.IORegistry.__lt__": [[258, "skbio-io-registry-ioregistry-lt"]], "skbio.io.registry.IORegistry.__ne__": [[259, "skbio-io-registry-ioregistry-ne"]], "skbio.io.registry.IORegistry.__str__": [[260, "skbio-io-registry-ioregistry-str"]], "skbio.io.registry.IORegistry.add_format": [[261, "skbio-io-registry-ioregistry-add-format"]], "skbio.io.registry.IORegistry.create_format": [[262, "skbio-io-registry-ioregistry-create-format"]], "skbio.io.registry.IORegistry.get_reader": [[263, "skbio-io-registry-ioregistry-get-reader"]], "skbio.io.registry.IORegistry.get_sniffer": [[264, "skbio-io-registry-ioregistry-get-sniffer"]], "skbio.io.registry.IORegistry.get_writer": [[265, "skbio-io-registry-ioregistry-get-writer"]], "skbio.io.registry.IORegistry.list_read_formats": [[266, "skbio-io-registry-ioregistry-list-read-formats"]], "skbio.io.registry.IORegistry.list_write_formats": [[267, "skbio-io-registry-ioregistry-list-write-formats"]], "skbio.io.registry.IORegistry.monkey_patch": [[268, "skbio-io-registry-ioregistry-monkey-patch"]], "skbio.io.registry.IORegistry.read": [[269, "skbio-io-registry-ioregistry-read"]], "skbio.io.registry.IORegistry.sniff": [[270, "skbio-io-registry-ioregistry-sniff"]], "skbio.io.registry.IORegistry.write": [[271, "skbio-io-registry-ioregistry-write"]], "skbio.io.registry.create_format": [[272, "skbio-io-registry-create-format"]], "skbio.io.registry.read": [[273, "skbio-io-registry-read"]], "skbio.io.registry.sniff": [[274, "skbio-io-registry-sniff"]], "skbio.io.registry.write": [[275, "skbio-io-registry-write"]], "skbio.io.util.open": [[277, "skbio-io-util-open"]], "skbio.io.util.open_file": [[278, "skbio-io-util-open-file"]], "skbio.io.util.open_files": [[279, "skbio-io-util-open-files"]], "skbio.metadata.CategoricalMetadataColumn": [[280, "skbio-metadata-categoricalmetadatacolumn"]], "skbio.metadata.CategoricalMetadataColumn.__eq__": [[281, "skbio-metadata-categoricalmetadatacolumn-eq"]], "skbio.metadata.CategoricalMetadataColumn.__ge__": [[282, "skbio-metadata-categoricalmetadatacolumn-ge"]], "skbio.metadata.CategoricalMetadataColumn.__getstate__": [[283, "skbio-metadata-categoricalmetadatacolumn-getstate"]], "skbio.metadata.CategoricalMetadataColumn.__gt__": [[284, "skbio-metadata-categoricalmetadatacolumn-gt"]], "skbio.metadata.CategoricalMetadataColumn.__le__": [[285, "skbio-metadata-categoricalmetadatacolumn-le"]], "skbio.metadata.CategoricalMetadataColumn.__lt__": [[286, "skbio-metadata-categoricalmetadatacolumn-lt"]], "skbio.metadata.CategoricalMetadataColumn.__ne__": [[287, "skbio-metadata-categoricalmetadatacolumn-ne"]], "skbio.metadata.CategoricalMetadataColumn.__str__": [[288, "skbio-metadata-categoricalmetadatacolumn-str"]], "skbio.metadata.CategoricalMetadataColumn.drop_missing_values": [[289, "skbio-metadata-categoricalmetadatacolumn-drop-missing-values"]], "skbio.metadata.CategoricalMetadataColumn.filter_ids": [[290, "skbio-metadata-categoricalmetadatacolumn-filter-ids"]], "skbio.metadata.CategoricalMetadataColumn.get_ids": [[291, "skbio-metadata-categoricalmetadatacolumn-get-ids"]], "skbio.metadata.CategoricalMetadataColumn.get_missing": [[292, "skbio-metadata-categoricalmetadatacolumn-get-missing"]], "skbio.metadata.CategoricalMetadataColumn.get_value": [[293, "skbio-metadata-categoricalmetadatacolumn-get-value"]], "skbio.metadata.CategoricalMetadataColumn.has_missing_values": [[294, "skbio-metadata-categoricalmetadatacolumn-has-missing-values"]], "skbio.metadata.CategoricalMetadataColumn.save": [[295, "skbio-metadata-categoricalmetadatacolumn-save"]], "skbio.metadata.CategoricalMetadataColumn.to_dataframe": [[296, "skbio-metadata-categoricalmetadatacolumn-to-dataframe"]], "skbio.metadata.CategoricalMetadataColumn.to_series": [[297, "skbio-metadata-categoricalmetadatacolumn-to-series"]], "skbio.metadata.Interval": [[298, "skbio-metadata-interval"]], "skbio.metadata.Interval.__eq__": [[299, "skbio-metadata-interval-eq"]], "skbio.metadata.Interval.__ge__": [[300, "skbio-metadata-interval-ge"]], "skbio.metadata.Interval.__getstate__": [[301, "skbio-metadata-interval-getstate"]], "skbio.metadata.Interval.__gt__": [[302, "skbio-metadata-interval-gt"]], "skbio.metadata.Interval.__le__": [[303, "skbio-metadata-interval-le"]], "skbio.metadata.Interval.__lt__": [[304, "skbio-metadata-interval-lt"]], "skbio.metadata.Interval.__ne__": [[305, "skbio-metadata-interval-ne"]], "skbio.metadata.Interval.__str__": [[306, "skbio-metadata-interval-str"]], "skbio.metadata.Interval.drop": [[307, "skbio-metadata-interval-drop"]], "skbio.metadata.IntervalMetadata": [[308, "skbio-metadata-intervalmetadata"]], "skbio.metadata.IntervalMetadata.__copy__": [[309, "skbio-metadata-intervalmetadata-copy"]], "skbio.metadata.IntervalMetadata.__deepcopy__": [[310, "skbio-metadata-intervalmetadata-deepcopy"]], "skbio.metadata.IntervalMetadata.__eq__": [[311, "skbio-metadata-intervalmetadata-eq"]], "skbio.metadata.IntervalMetadata.__ge__": [[312, "skbio-metadata-intervalmetadata-ge"]], "skbio.metadata.IntervalMetadata.__getstate__": [[313, "skbio-metadata-intervalmetadata-getstate"]], "skbio.metadata.IntervalMetadata.__gt__": [[314, "skbio-metadata-intervalmetadata-gt"]], "skbio.metadata.IntervalMetadata.__le__": [[315, "skbio-metadata-intervalmetadata-le"]], "skbio.metadata.IntervalMetadata.__lt__": [[316, "skbio-metadata-intervalmetadata-lt"]], "skbio.metadata.IntervalMetadata.__ne__": [[317, "skbio-metadata-intervalmetadata-ne"]], "skbio.metadata.IntervalMetadata.__str__": [[318, "skbio-metadata-intervalmetadata-str"]], "skbio.metadata.IntervalMetadata.add": [[319, "skbio-metadata-intervalmetadata-add"]], "skbio.metadata.IntervalMetadata.concat": [[320, "skbio-metadata-intervalmetadata-concat"]], "skbio.metadata.IntervalMetadata.drop": [[321, "skbio-metadata-intervalmetadata-drop"]], "skbio.metadata.IntervalMetadata.merge": [[322, "skbio-metadata-intervalmetadata-merge"]], "skbio.metadata.IntervalMetadata.query": [[323, "skbio-metadata-intervalmetadata-query"]], "skbio.metadata.IntervalMetadata.read": [[324, "skbio-metadata-intervalmetadata-read"]], "skbio.metadata.IntervalMetadata.sort": [[325, "skbio-metadata-intervalmetadata-sort"]], "skbio.metadata.IntervalMetadata.write": [[326, "skbio-metadata-intervalmetadata-write"]], "skbio.metadata.MetadataColumn": [[327, "skbio-metadata-metadatacolumn"]], "skbio.metadata.MetadataColumn.__eq__": [[328, "skbio-metadata-metadatacolumn-eq"]], "skbio.metadata.MetadataColumn.__ge__": [[329, "skbio-metadata-metadatacolumn-ge"]], "skbio.metadata.MetadataColumn.__getstate__": [[330, "skbio-metadata-metadatacolumn-getstate"]], "skbio.metadata.MetadataColumn.__gt__": [[331, "skbio-metadata-metadatacolumn-gt"]], "skbio.metadata.MetadataColumn.__le__": [[332, "skbio-metadata-metadatacolumn-le"]], "skbio.metadata.MetadataColumn.__lt__": [[333, "skbio-metadata-metadatacolumn-lt"]], "skbio.metadata.MetadataColumn.__ne__": [[334, "skbio-metadata-metadatacolumn-ne"]], "skbio.metadata.MetadataColumn.__str__": [[335, "skbio-metadata-metadatacolumn-str"]], "skbio.metadata.MetadataColumn.drop_missing_values": [[336, "skbio-metadata-metadatacolumn-drop-missing-values"]], "skbio.metadata.MetadataColumn.filter_ids": [[337, "skbio-metadata-metadatacolumn-filter-ids"]], "skbio.metadata.MetadataColumn.get_ids": [[338, "skbio-metadata-metadatacolumn-get-ids"]], "skbio.metadata.MetadataColumn.get_missing": [[339, "skbio-metadata-metadatacolumn-get-missing"]], "skbio.metadata.MetadataColumn.get_value": [[340, "skbio-metadata-metadatacolumn-get-value"]], "skbio.metadata.MetadataColumn.has_missing_values": [[341, "skbio-metadata-metadatacolumn-has-missing-values"]], "skbio.metadata.MetadataColumn.save": [[342, "skbio-metadata-metadatacolumn-save"]], "skbio.metadata.MetadataColumn.to_dataframe": [[343, "skbio-metadata-metadatacolumn-to-dataframe"]], "skbio.metadata.MetadataColumn.to_series": [[344, "skbio-metadata-metadatacolumn-to-series"]], "skbio.metadata.NumericMetadataColumn": [[345, "skbio-metadata-numericmetadatacolumn"]], "skbio.metadata.NumericMetadataColumn.__eq__": [[346, "skbio-metadata-numericmetadatacolumn-eq"]], "skbio.metadata.NumericMetadataColumn.__ge__": [[347, "skbio-metadata-numericmetadatacolumn-ge"]], "skbio.metadata.NumericMetadataColumn.__getstate__": [[348, "skbio-metadata-numericmetadatacolumn-getstate"]], "skbio.metadata.NumericMetadataColumn.__gt__": [[349, "skbio-metadata-numericmetadatacolumn-gt"]], "skbio.metadata.NumericMetadataColumn.__le__": [[350, "skbio-metadata-numericmetadatacolumn-le"]], "skbio.metadata.NumericMetadataColumn.__lt__": [[351, "skbio-metadata-numericmetadatacolumn-lt"]], "skbio.metadata.NumericMetadataColumn.__ne__": [[352, "skbio-metadata-numericmetadatacolumn-ne"]], "skbio.metadata.NumericMetadataColumn.__str__": [[353, "skbio-metadata-numericmetadatacolumn-str"]], "skbio.metadata.NumericMetadataColumn.drop_missing_values": [[354, "skbio-metadata-numericmetadatacolumn-drop-missing-values"]], "skbio.metadata.NumericMetadataColumn.filter_ids": [[355, "skbio-metadata-numericmetadatacolumn-filter-ids"]], "skbio.metadata.NumericMetadataColumn.get_ids": [[356, "skbio-metadata-numericmetadatacolumn-get-ids"]], "skbio.metadata.NumericMetadataColumn.get_missing": [[357, "skbio-metadata-numericmetadatacolumn-get-missing"]], "skbio.metadata.NumericMetadataColumn.get_value": [[358, "skbio-metadata-numericmetadatacolumn-get-value"]], "skbio.metadata.NumericMetadataColumn.has_missing_values": [[359, "skbio-metadata-numericmetadatacolumn-has-missing-values"]], "skbio.metadata.NumericMetadataColumn.save": [[360, "skbio-metadata-numericmetadatacolumn-save"]], "skbio.metadata.NumericMetadataColumn.to_dataframe": [[361, "skbio-metadata-numericmetadatacolumn-to-dataframe"]], "skbio.metadata.NumericMetadataColumn.to_series": [[362, "skbio-metadata-numericmetadatacolumn-to-series"]], "skbio.metadata.SampleMetadata": [[363, "skbio-metadata-samplemetadata"]], "skbio.metadata.SampleMetadata.__eq__": [[364, "skbio-metadata-samplemetadata-eq"]], "skbio.metadata.SampleMetadata.__ge__": [[365, "skbio-metadata-samplemetadata-ge"]], "skbio.metadata.SampleMetadata.__getstate__": [[366, "skbio-metadata-samplemetadata-getstate"]], "skbio.metadata.SampleMetadata.__gt__": [[367, "skbio-metadata-samplemetadata-gt"]], "skbio.metadata.SampleMetadata.__le__": [[368, "skbio-metadata-samplemetadata-le"]], "skbio.metadata.SampleMetadata.__lt__": [[369, "skbio-metadata-samplemetadata-lt"]], "skbio.metadata.SampleMetadata.__ne__": [[370, "skbio-metadata-samplemetadata-ne"]], "skbio.metadata.SampleMetadata.__str__": [[371, "skbio-metadata-samplemetadata-str"]], "skbio.metadata.SampleMetadata.filter_columns": [[372, "skbio-metadata-samplemetadata-filter-columns"]], "skbio.metadata.SampleMetadata.filter_ids": [[373, "skbio-metadata-samplemetadata-filter-ids"]], "skbio.metadata.SampleMetadata.get_column": [[374, "skbio-metadata-samplemetadata-get-column"]], "skbio.metadata.SampleMetadata.get_ids": [[375, "skbio-metadata-samplemetadata-get-ids"]], "skbio.metadata.SampleMetadata.load": [[376, "skbio-metadata-samplemetadata-load"]], "skbio.metadata.SampleMetadata.merge": [[377, "skbio-metadata-samplemetadata-merge"]], "skbio.metadata.SampleMetadata.read": [[378, "skbio-metadata-samplemetadata-read"]], "skbio.metadata.SampleMetadata.save": [[379, "skbio-metadata-samplemetadata-save"]], "skbio.metadata.SampleMetadata.to_dataframe": [[380, "skbio-metadata-samplemetadata-to-dataframe"]], "skbio.metadata.SampleMetadata.write": [[381, "skbio-metadata-samplemetadata-write"]], "skbio.sequence.DNA": [[382, "skbio-sequence-dna"]], "skbio.sequence.DNA.__bool__": [[383, "skbio-sequence-dna-bool"]], "skbio.sequence.DNA.__contains__": [[384, "skbio-sequence-dna-contains"]], "skbio.sequence.DNA.__copy__": [[385, "skbio-sequence-dna-copy"]], "skbio.sequence.DNA.__deepcopy__": [[386, "skbio-sequence-dna-deepcopy"]], "skbio.sequence.DNA.__eq__": [[387, "skbio-sequence-dna-eq"]], "skbio.sequence.DNA.__ge__": [[388, "skbio-sequence-dna-ge"]], "skbio.sequence.DNA.__getitem__": [[389, "skbio-sequence-dna-getitem"]], "skbio.sequence.DNA.__getstate__": [[390, "skbio-sequence-dna-getstate"]], "skbio.sequence.DNA.__gt__": [[391, "skbio-sequence-dna-gt"]], "skbio.sequence.DNA.__iter__": [[392, "skbio-sequence-dna-iter"]], "skbio.sequence.DNA.__le__": [[393, "skbio-sequence-dna-le"]], "skbio.sequence.DNA.__len__": [[394, "skbio-sequence-dna-len"]], "skbio.sequence.DNA.__lt__": [[395, "skbio-sequence-dna-lt"]], "skbio.sequence.DNA.__ne__": [[396, "skbio-sequence-dna-ne"]], "skbio.sequence.DNA.__reversed__": [[397, "skbio-sequence-dna-reversed"]], "skbio.sequence.DNA.__str__": [[398, "skbio-sequence-dna-str"]], "skbio.sequence.DNA.complement": [[399, "skbio-sequence-dna-complement"]], "skbio.sequence.DNA.concat": [[400, "skbio-sequence-dna-concat"]], "skbio.sequence.DNA.count": [[401, "skbio-sequence-dna-count"]], "skbio.sequence.DNA.definites": [[402, "skbio-sequence-dna-definites"]], "skbio.sequence.DNA.degap": [[403, "skbio-sequence-dna-degap"]], "skbio.sequence.DNA.degenerates": [[404, "skbio-sequence-dna-degenerates"]], "skbio.sequence.DNA.distance": [[405, "skbio-sequence-dna-distance"]], "skbio.sequence.DNA.expand_degenerates": [[406, "skbio-sequence-dna-expand-degenerates"]], "skbio.sequence.DNA.find_motifs": [[407, "skbio-sequence-dna-find-motifs"]], "skbio.sequence.DNA.find_with_regex": [[408, "skbio-sequence-dna-find-with-regex"]], "skbio.sequence.DNA.frequencies": [[409, "skbio-sequence-dna-frequencies"]], "skbio.sequence.DNA.gaps": [[410, "skbio-sequence-dna-gaps"]], "skbio.sequence.DNA.gc_content": [[411, "skbio-sequence-dna-gc-content"]], "skbio.sequence.DNA.gc_frequency": [[412, "skbio-sequence-dna-gc-frequency"]], "skbio.sequence.DNA.has_definites": [[413, "skbio-sequence-dna-has-definites"]], "skbio.sequence.DNA.has_degenerates": [[414, "skbio-sequence-dna-has-degenerates"]], "skbio.sequence.DNA.has_gaps": [[415, "skbio-sequence-dna-has-gaps"]], "skbio.sequence.DNA.has_interval_metadata": [[416, "skbio-sequence-dna-has-interval-metadata"]], "skbio.sequence.DNA.has_metadata": [[417, "skbio-sequence-dna-has-metadata"]], "skbio.sequence.DNA.has_nondegenerates": [[418, "skbio-sequence-dna-has-nondegenerates"]], "skbio.sequence.DNA.has_positional_metadata": [[419, "skbio-sequence-dna-has-positional-metadata"]], "skbio.sequence.DNA.index": [[420, "skbio-sequence-dna-index"]], "skbio.sequence.DNA.is_reverse_complement": [[421, "skbio-sequence-dna-is-reverse-complement"]], "skbio.sequence.DNA.iter_contiguous": [[422, "skbio-sequence-dna-iter-contiguous"]], "skbio.sequence.DNA.iter_kmers": [[423, "skbio-sequence-dna-iter-kmers"]], "skbio.sequence.DNA.kmer_frequencies": [[424, "skbio-sequence-dna-kmer-frequencies"]], "skbio.sequence.DNA.lowercase": [[425, "skbio-sequence-dna-lowercase"]], "skbio.sequence.DNA.match_frequency": [[426, "skbio-sequence-dna-match-frequency"]], "skbio.sequence.DNA.matches": [[427, "skbio-sequence-dna-matches"]], "skbio.sequence.DNA.mismatch_frequency": [[428, "skbio-sequence-dna-mismatch-frequency"]], "skbio.sequence.DNA.mismatches": [[429, "skbio-sequence-dna-mismatches"]], "skbio.sequence.DNA.nondegenerates": [[430, "skbio-sequence-dna-nondegenerates"]], "skbio.sequence.DNA.read": [[431, "skbio-sequence-dna-read"]], "skbio.sequence.DNA.replace": [[432, "skbio-sequence-dna-replace"]], "skbio.sequence.DNA.reverse_complement": [[433, "skbio-sequence-dna-reverse-complement"]], "skbio.sequence.DNA.to_definites": [[434, "skbio-sequence-dna-to-definites"]], "skbio.sequence.DNA.to_indices": [[435, "skbio-sequence-dna-to-indices"]], "skbio.sequence.DNA.to_regex": [[436, "skbio-sequence-dna-to-regex"]], "skbio.sequence.DNA.transcribe": [[437, "skbio-sequence-dna-transcribe"]], "skbio.sequence.DNA.translate": [[438, "skbio-sequence-dna-translate"]], "skbio.sequence.DNA.translate_six_frames": [[439, "skbio-sequence-dna-translate-six-frames"]], "skbio.sequence.DNA.write": [[440, "skbio-sequence-dna-write"]], "skbio.sequence.GeneticCode": [[441, "skbio-sequence-geneticcode"]], "skbio.sequence.GeneticCode.__eq__": [[442, "skbio-sequence-geneticcode-eq"]], "skbio.sequence.GeneticCode.__ge__": [[443, "skbio-sequence-geneticcode-ge"]], "skbio.sequence.GeneticCode.__getstate__": [[444, "skbio-sequence-geneticcode-getstate"]], "skbio.sequence.GeneticCode.__gt__": [[445, "skbio-sequence-geneticcode-gt"]], "skbio.sequence.GeneticCode.__le__": [[446, "skbio-sequence-geneticcode-le"]], "skbio.sequence.GeneticCode.__lt__": [[447, "skbio-sequence-geneticcode-lt"]], "skbio.sequence.GeneticCode.__ne__": [[448, "skbio-sequence-geneticcode-ne"]], "skbio.sequence.GeneticCode.__str__": [[449, "skbio-sequence-geneticcode-str"]], "skbio.sequence.GeneticCode.from_ncbi": [[450, "skbio-sequence-geneticcode-from-ncbi"]], "skbio.sequence.GeneticCode.translate": [[451, "skbio-sequence-geneticcode-translate"]], "skbio.sequence.GeneticCode.translate_six_frames": [[452, "skbio-sequence-geneticcode-translate-six-frames"]], "skbio.sequence.GrammaredSequence": [[453, "skbio-sequence-grammaredsequence"]], "skbio.sequence.GrammaredSequence.__bool__": [[454, "skbio-sequence-grammaredsequence-bool"]], "skbio.sequence.GrammaredSequence.__contains__": [[455, "skbio-sequence-grammaredsequence-contains"]], "skbio.sequence.GrammaredSequence.__copy__": [[456, "skbio-sequence-grammaredsequence-copy"]], "skbio.sequence.GrammaredSequence.__deepcopy__": [[457, "skbio-sequence-grammaredsequence-deepcopy"]], "skbio.sequence.GrammaredSequence.__eq__": [[458, "skbio-sequence-grammaredsequence-eq"]], "skbio.sequence.GrammaredSequence.__ge__": [[459, "skbio-sequence-grammaredsequence-ge"]], "skbio.sequence.GrammaredSequence.__getitem__": [[460, "skbio-sequence-grammaredsequence-getitem"]], "skbio.sequence.GrammaredSequence.__getstate__": [[461, "skbio-sequence-grammaredsequence-getstate"]], "skbio.sequence.GrammaredSequence.__gt__": [[462, "skbio-sequence-grammaredsequence-gt"]], "skbio.sequence.GrammaredSequence.__iter__": [[463, "skbio-sequence-grammaredsequence-iter"]], "skbio.sequence.GrammaredSequence.__le__": [[464, "skbio-sequence-grammaredsequence-le"]], "skbio.sequence.GrammaredSequence.__len__": [[465, "skbio-sequence-grammaredsequence-len"]], "skbio.sequence.GrammaredSequence.__lt__": [[466, "skbio-sequence-grammaredsequence-lt"]], "skbio.sequence.GrammaredSequence.__ne__": [[467, "skbio-sequence-grammaredsequence-ne"]], "skbio.sequence.GrammaredSequence.__reversed__": [[468, "skbio-sequence-grammaredsequence-reversed"]], "skbio.sequence.GrammaredSequence.__str__": [[469, "skbio-sequence-grammaredsequence-str"]], "skbio.sequence.GrammaredSequence.concat": [[470, "skbio-sequence-grammaredsequence-concat"]], "skbio.sequence.GrammaredSequence.count": [[471, "skbio-sequence-grammaredsequence-count"]], "skbio.sequence.GrammaredSequence.definites": [[472, "skbio-sequence-grammaredsequence-definites"]], "skbio.sequence.GrammaredSequence.degap": [[473, "skbio-sequence-grammaredsequence-degap"]], "skbio.sequence.GrammaredSequence.degenerates": [[474, "skbio-sequence-grammaredsequence-degenerates"]], "skbio.sequence.GrammaredSequence.distance": [[475, "skbio-sequence-grammaredsequence-distance"]], "skbio.sequence.GrammaredSequence.expand_degenerates": [[476, "skbio-sequence-grammaredsequence-expand-degenerates"]], "skbio.sequence.GrammaredSequence.find_motifs": [[477, "skbio-sequence-grammaredsequence-find-motifs"]], "skbio.sequence.GrammaredSequence.find_with_regex": [[478, "skbio-sequence-grammaredsequence-find-with-regex"]], "skbio.sequence.GrammaredSequence.frequencies": [[479, "skbio-sequence-grammaredsequence-frequencies"]], "skbio.sequence.GrammaredSequence.gaps": [[480, "skbio-sequence-grammaredsequence-gaps"]], "skbio.sequence.GrammaredSequence.has_definites": [[481, "skbio-sequence-grammaredsequence-has-definites"]], "skbio.sequence.GrammaredSequence.has_degenerates": [[482, "skbio-sequence-grammaredsequence-has-degenerates"]], "skbio.sequence.GrammaredSequence.has_gaps": [[483, "skbio-sequence-grammaredsequence-has-gaps"]], "skbio.sequence.GrammaredSequence.has_interval_metadata": [[484, "skbio-sequence-grammaredsequence-has-interval-metadata"]], "skbio.sequence.GrammaredSequence.has_metadata": [[485, "skbio-sequence-grammaredsequence-has-metadata"]], "skbio.sequence.GrammaredSequence.has_nondegenerates": [[486, "skbio-sequence-grammaredsequence-has-nondegenerates"]], "skbio.sequence.GrammaredSequence.has_positional_metadata": [[487, "skbio-sequence-grammaredsequence-has-positional-metadata"]], "skbio.sequence.GrammaredSequence.index": [[488, "skbio-sequence-grammaredsequence-index"]], "skbio.sequence.GrammaredSequence.iter_contiguous": [[489, "skbio-sequence-grammaredsequence-iter-contiguous"]], "skbio.sequence.GrammaredSequence.iter_kmers": [[490, "skbio-sequence-grammaredsequence-iter-kmers"]], "skbio.sequence.GrammaredSequence.kmer_frequencies": [[491, "skbio-sequence-grammaredsequence-kmer-frequencies"]], "skbio.sequence.GrammaredSequence.lowercase": [[492, "skbio-sequence-grammaredsequence-lowercase"]], "skbio.sequence.GrammaredSequence.match_frequency": [[493, "skbio-sequence-grammaredsequence-match-frequency"]], "skbio.sequence.GrammaredSequence.matches": [[494, "skbio-sequence-grammaredsequence-matches"]], "skbio.sequence.GrammaredSequence.mismatch_frequency": [[495, "skbio-sequence-grammaredsequence-mismatch-frequency"]], "skbio.sequence.GrammaredSequence.mismatches": [[496, "skbio-sequence-grammaredsequence-mismatches"]], "skbio.sequence.GrammaredSequence.nondegenerates": [[497, "skbio-sequence-grammaredsequence-nondegenerates"]], "skbio.sequence.GrammaredSequence.read": [[498, "skbio-sequence-grammaredsequence-read"]], "skbio.sequence.GrammaredSequence.replace": [[499, "skbio-sequence-grammaredsequence-replace"]], "skbio.sequence.GrammaredSequence.to_definites": [[500, "skbio-sequence-grammaredsequence-to-definites"]], "skbio.sequence.GrammaredSequence.to_indices": [[501, "skbio-sequence-grammaredsequence-to-indices"]], "skbio.sequence.GrammaredSequence.to_regex": [[502, "skbio-sequence-grammaredsequence-to-regex"]], "skbio.sequence.GrammaredSequence.write": [[503, "skbio-sequence-grammaredsequence-write"]], "skbio.sequence.Protein": [[504, "skbio-sequence-protein"]], "skbio.sequence.Protein.__bool__": [[505, "skbio-sequence-protein-bool"]], "skbio.sequence.Protein.__contains__": [[506, "skbio-sequence-protein-contains"]], "skbio.sequence.Protein.__copy__": [[507, "skbio-sequence-protein-copy"]], "skbio.sequence.Protein.__deepcopy__": [[508, "skbio-sequence-protein-deepcopy"]], "skbio.sequence.Protein.__eq__": [[509, "skbio-sequence-protein-eq"]], "skbio.sequence.Protein.__ge__": [[510, "skbio-sequence-protein-ge"]], "skbio.sequence.Protein.__getitem__": [[511, "skbio-sequence-protein-getitem"]], "skbio.sequence.Protein.__getstate__": [[512, "skbio-sequence-protein-getstate"]], "skbio.sequence.Protein.__gt__": [[513, "skbio-sequence-protein-gt"]], "skbio.sequence.Protein.__iter__": [[514, "skbio-sequence-protein-iter"]], "skbio.sequence.Protein.__le__": [[515, "skbio-sequence-protein-le"]], "skbio.sequence.Protein.__len__": [[516, "skbio-sequence-protein-len"]], "skbio.sequence.Protein.__lt__": [[517, "skbio-sequence-protein-lt"]], "skbio.sequence.Protein.__ne__": [[518, "skbio-sequence-protein-ne"]], "skbio.sequence.Protein.__reversed__": [[519, "skbio-sequence-protein-reversed"]], "skbio.sequence.Protein.__str__": [[520, "skbio-sequence-protein-str"]], "skbio.sequence.Protein.concat": [[521, "skbio-sequence-protein-concat"]], "skbio.sequence.Protein.count": [[522, "skbio-sequence-protein-count"]], "skbio.sequence.Protein.definites": [[523, "skbio-sequence-protein-definites"]], "skbio.sequence.Protein.degap": [[524, "skbio-sequence-protein-degap"]], "skbio.sequence.Protein.degenerates": [[525, "skbio-sequence-protein-degenerates"]], "skbio.sequence.Protein.distance": [[526, "skbio-sequence-protein-distance"]], "skbio.sequence.Protein.expand_degenerates": [[527, "skbio-sequence-protein-expand-degenerates"]], "skbio.sequence.Protein.find_motifs": [[528, "skbio-sequence-protein-find-motifs"]], "skbio.sequence.Protein.find_with_regex": [[529, "skbio-sequence-protein-find-with-regex"]], "skbio.sequence.Protein.frequencies": [[530, "skbio-sequence-protein-frequencies"]], "skbio.sequence.Protein.gaps": [[531, "skbio-sequence-protein-gaps"]], "skbio.sequence.Protein.has_definites": [[532, "skbio-sequence-protein-has-definites"]], "skbio.sequence.Protein.has_degenerates": [[533, "skbio-sequence-protein-has-degenerates"]], "skbio.sequence.Protein.has_gaps": [[534, "skbio-sequence-protein-has-gaps"]], "skbio.sequence.Protein.has_interval_metadata": [[535, "skbio-sequence-protein-has-interval-metadata"]], "skbio.sequence.Protein.has_metadata": [[536, "skbio-sequence-protein-has-metadata"]], "skbio.sequence.Protein.has_nondegenerates": [[537, "skbio-sequence-protein-has-nondegenerates"]], "skbio.sequence.Protein.has_positional_metadata": [[538, "skbio-sequence-protein-has-positional-metadata"]], "skbio.sequence.Protein.has_stops": [[539, "skbio-sequence-protein-has-stops"]], "skbio.sequence.Protein.index": [[540, "skbio-sequence-protein-index"]], "skbio.sequence.Protein.iter_contiguous": [[541, "skbio-sequence-protein-iter-contiguous"]], "skbio.sequence.Protein.iter_kmers": [[542, "skbio-sequence-protein-iter-kmers"]], "skbio.sequence.Protein.kmer_frequencies": [[543, "skbio-sequence-protein-kmer-frequencies"]], "skbio.sequence.Protein.lowercase": [[544, "skbio-sequence-protein-lowercase"]], "skbio.sequence.Protein.match_frequency": [[545, "skbio-sequence-protein-match-frequency"]], "skbio.sequence.Protein.matches": [[546, "skbio-sequence-protein-matches"]], "skbio.sequence.Protein.mismatch_frequency": [[547, "skbio-sequence-protein-mismatch-frequency"]], "skbio.sequence.Protein.mismatches": [[548, "skbio-sequence-protein-mismatches"]], "skbio.sequence.Protein.nondegenerates": [[549, "skbio-sequence-protein-nondegenerates"]], "skbio.sequence.Protein.read": [[550, "skbio-sequence-protein-read"]], "skbio.sequence.Protein.replace": [[551, "skbio-sequence-protein-replace"]], "skbio.sequence.Protein.stops": [[552, "skbio-sequence-protein-stops"]], "skbio.sequence.Protein.to_definites": [[553, "skbio-sequence-protein-to-definites"]], "skbio.sequence.Protein.to_indices": [[554, "skbio-sequence-protein-to-indices"]], "skbio.sequence.Protein.to_regex": [[555, "skbio-sequence-protein-to-regex"]], "skbio.sequence.Protein.write": [[556, "skbio-sequence-protein-write"]], "skbio.sequence.RNA": [[557, "skbio-sequence-rna"]], "skbio.sequence.RNA.__bool__": [[558, "skbio-sequence-rna-bool"]], "skbio.sequence.RNA.__contains__": [[559, "skbio-sequence-rna-contains"]], "skbio.sequence.RNA.__copy__": [[560, "skbio-sequence-rna-copy"]], "skbio.sequence.RNA.__deepcopy__": [[561, "skbio-sequence-rna-deepcopy"]], "skbio.sequence.RNA.__eq__": [[562, "skbio-sequence-rna-eq"]], "skbio.sequence.RNA.__ge__": [[563, "skbio-sequence-rna-ge"]], "skbio.sequence.RNA.__getitem__": [[564, "skbio-sequence-rna-getitem"]], "skbio.sequence.RNA.__getstate__": [[565, "skbio-sequence-rna-getstate"]], "skbio.sequence.RNA.__gt__": [[566, "skbio-sequence-rna-gt"]], "skbio.sequence.RNA.__iter__": [[567, "skbio-sequence-rna-iter"]], "skbio.sequence.RNA.__le__": [[568, "skbio-sequence-rna-le"]], "skbio.sequence.RNA.__len__": [[569, "skbio-sequence-rna-len"]], "skbio.sequence.RNA.__lt__": [[570, "skbio-sequence-rna-lt"]], "skbio.sequence.RNA.__ne__": [[571, "skbio-sequence-rna-ne"]], "skbio.sequence.RNA.__reversed__": [[572, "skbio-sequence-rna-reversed"]], "skbio.sequence.RNA.__str__": [[573, "skbio-sequence-rna-str"]], "skbio.sequence.RNA.complement": [[574, "skbio-sequence-rna-complement"]], "skbio.sequence.RNA.concat": [[575, "skbio-sequence-rna-concat"]], "skbio.sequence.RNA.count": [[576, "skbio-sequence-rna-count"]], "skbio.sequence.RNA.definites": [[577, "skbio-sequence-rna-definites"]], "skbio.sequence.RNA.degap": [[578, "skbio-sequence-rna-degap"]], "skbio.sequence.RNA.degenerates": [[579, "skbio-sequence-rna-degenerates"]], "skbio.sequence.RNA.distance": [[580, "skbio-sequence-rna-distance"]], "skbio.sequence.RNA.expand_degenerates": [[581, "skbio-sequence-rna-expand-degenerates"]], "skbio.sequence.RNA.find_motifs": [[582, "skbio-sequence-rna-find-motifs"]], "skbio.sequence.RNA.find_with_regex": [[583, "skbio-sequence-rna-find-with-regex"]], "skbio.sequence.RNA.frequencies": [[584, "skbio-sequence-rna-frequencies"]], "skbio.sequence.RNA.gaps": [[585, "skbio-sequence-rna-gaps"]], "skbio.sequence.RNA.gc_content": [[586, "skbio-sequence-rna-gc-content"]], "skbio.sequence.RNA.gc_frequency": [[587, "skbio-sequence-rna-gc-frequency"]], "skbio.sequence.RNA.has_definites": [[588, "skbio-sequence-rna-has-definites"]], "skbio.sequence.RNA.has_degenerates": [[589, "skbio-sequence-rna-has-degenerates"]], "skbio.sequence.RNA.has_gaps": [[590, "skbio-sequence-rna-has-gaps"]], "skbio.sequence.RNA.has_interval_metadata": [[591, "skbio-sequence-rna-has-interval-metadata"]], "skbio.sequence.RNA.has_metadata": [[592, "skbio-sequence-rna-has-metadata"]], "skbio.sequence.RNA.has_nondegenerates": [[593, "skbio-sequence-rna-has-nondegenerates"]], "skbio.sequence.RNA.has_positional_metadata": [[594, "skbio-sequence-rna-has-positional-metadata"]], "skbio.sequence.RNA.index": [[595, "skbio-sequence-rna-index"]], "skbio.sequence.RNA.is_reverse_complement": [[596, "skbio-sequence-rna-is-reverse-complement"]], "skbio.sequence.RNA.iter_contiguous": [[597, "skbio-sequence-rna-iter-contiguous"]], "skbio.sequence.RNA.iter_kmers": [[598, "skbio-sequence-rna-iter-kmers"]], "skbio.sequence.RNA.kmer_frequencies": [[599, "skbio-sequence-rna-kmer-frequencies"]], "skbio.sequence.RNA.lowercase": [[600, "skbio-sequence-rna-lowercase"]], "skbio.sequence.RNA.match_frequency": [[601, "skbio-sequence-rna-match-frequency"]], "skbio.sequence.RNA.matches": [[602, "skbio-sequence-rna-matches"]], "skbio.sequence.RNA.mismatch_frequency": [[603, "skbio-sequence-rna-mismatch-frequency"]], "skbio.sequence.RNA.mismatches": [[604, "skbio-sequence-rna-mismatches"]], "skbio.sequence.RNA.nondegenerates": [[605, "skbio-sequence-rna-nondegenerates"]], "skbio.sequence.RNA.read": [[606, "skbio-sequence-rna-read"]], "skbio.sequence.RNA.replace": [[607, "skbio-sequence-rna-replace"]], "skbio.sequence.RNA.reverse_complement": [[608, "skbio-sequence-rna-reverse-complement"]], "skbio.sequence.RNA.reverse_transcribe": [[609, "skbio-sequence-rna-reverse-transcribe"]], "skbio.sequence.RNA.to_definites": [[610, "skbio-sequence-rna-to-definites"]], "skbio.sequence.RNA.to_indices": [[611, "skbio-sequence-rna-to-indices"]], "skbio.sequence.RNA.to_regex": [[612, "skbio-sequence-rna-to-regex"]], "skbio.sequence.RNA.translate": [[613, "skbio-sequence-rna-translate"]], "skbio.sequence.RNA.translate_six_frames": [[614, "skbio-sequence-rna-translate-six-frames"]], "skbio.sequence.RNA.write": [[615, "skbio-sequence-rna-write"]], "skbio.sequence.Sequence": [[616, "skbio-sequence-sequence"]], "skbio.sequence.Sequence.__bool__": [[617, "skbio-sequence-sequence-bool"]], "skbio.sequence.Sequence.__contains__": [[618, "skbio-sequence-sequence-contains"]], "skbio.sequence.Sequence.__copy__": [[619, "skbio-sequence-sequence-copy"]], "skbio.sequence.Sequence.__deepcopy__": [[620, "skbio-sequence-sequence-deepcopy"]], "skbio.sequence.Sequence.__eq__": [[621, "skbio-sequence-sequence-eq"]], "skbio.sequence.Sequence.__ge__": [[622, "skbio-sequence-sequence-ge"]], "skbio.sequence.Sequence.__getitem__": [[623, "skbio-sequence-sequence-getitem"]], "skbio.sequence.Sequence.__getstate__": [[624, "skbio-sequence-sequence-getstate"]], "skbio.sequence.Sequence.__gt__": [[625, "skbio-sequence-sequence-gt"]], "skbio.sequence.Sequence.__iter__": [[626, "skbio-sequence-sequence-iter"]], "skbio.sequence.Sequence.__le__": [[627, "skbio-sequence-sequence-le"]], "skbio.sequence.Sequence.__len__": [[628, "skbio-sequence-sequence-len"]], "skbio.sequence.Sequence.__lt__": [[629, "skbio-sequence-sequence-lt"]], "skbio.sequence.Sequence.__ne__": [[630, "skbio-sequence-sequence-ne"]], "skbio.sequence.Sequence.__reversed__": [[631, "skbio-sequence-sequence-reversed"]], "skbio.sequence.Sequence.__str__": [[632, "skbio-sequence-sequence-str"]], "skbio.sequence.Sequence.concat": [[633, "skbio-sequence-sequence-concat"]], "skbio.sequence.Sequence.count": [[634, "skbio-sequence-sequence-count"]], "skbio.sequence.Sequence.distance": [[635, "skbio-sequence-sequence-distance"]], "skbio.sequence.Sequence.find_with_regex": [[636, "skbio-sequence-sequence-find-with-regex"]], "skbio.sequence.Sequence.frequencies": [[637, "skbio-sequence-sequence-frequencies"]], "skbio.sequence.Sequence.has_interval_metadata": [[638, "skbio-sequence-sequence-has-interval-metadata"]], "skbio.sequence.Sequence.has_metadata": [[639, "skbio-sequence-sequence-has-metadata"]], "skbio.sequence.Sequence.has_positional_metadata": [[640, "skbio-sequence-sequence-has-positional-metadata"]], "skbio.sequence.Sequence.index": [[641, "skbio-sequence-sequence-index"]], "skbio.sequence.Sequence.iter_contiguous": [[642, "skbio-sequence-sequence-iter-contiguous"]], "skbio.sequence.Sequence.iter_kmers": [[643, "skbio-sequence-sequence-iter-kmers"]], "skbio.sequence.Sequence.kmer_frequencies": [[644, "skbio-sequence-sequence-kmer-frequencies"]], "skbio.sequence.Sequence.lowercase": [[645, "skbio-sequence-sequence-lowercase"]], "skbio.sequence.Sequence.match_frequency": [[646, "skbio-sequence-sequence-match-frequency"]], "skbio.sequence.Sequence.matches": [[647, "skbio-sequence-sequence-matches"]], "skbio.sequence.Sequence.mismatch_frequency": [[648, "skbio-sequence-sequence-mismatch-frequency"]], "skbio.sequence.Sequence.mismatches": [[649, "skbio-sequence-sequence-mismatches"]], "skbio.sequence.Sequence.read": [[650, "skbio-sequence-sequence-read"]], "skbio.sequence.Sequence.replace": [[651, "skbio-sequence-sequence-replace"]], "skbio.sequence.Sequence.to_indices": [[652, "skbio-sequence-sequence-to-indices"]], "skbio.sequence.Sequence.write": [[653, "skbio-sequence-sequence-write"]], "skbio.sequence.SubstitutionMatrix": [[654, "skbio-sequence-substitutionmatrix"]], "skbio.sequence.SubstitutionMatrix.__contains__": [[655, "skbio-sequence-substitutionmatrix-contains"]], "skbio.sequence.SubstitutionMatrix.__eq__": [[656, "skbio-sequence-substitutionmatrix-eq"]], "skbio.sequence.SubstitutionMatrix.__ge__": [[657, "skbio-sequence-substitutionmatrix-ge"]], "skbio.sequence.SubstitutionMatrix.__getitem__": [[658, "skbio-sequence-substitutionmatrix-getitem"]], "skbio.sequence.SubstitutionMatrix.__getstate__": [[659, "skbio-sequence-substitutionmatrix-getstate"]], "skbio.sequence.SubstitutionMatrix.__gt__": [[660, "skbio-sequence-substitutionmatrix-gt"]], "skbio.sequence.SubstitutionMatrix.__le__": [[661, "skbio-sequence-substitutionmatrix-le"]], "skbio.sequence.SubstitutionMatrix.__lt__": [[662, "skbio-sequence-substitutionmatrix-lt"]], "skbio.sequence.SubstitutionMatrix.__ne__": [[663, "skbio-sequence-substitutionmatrix-ne"]], "skbio.sequence.SubstitutionMatrix.__str__": [[664, "skbio-sequence-substitutionmatrix-str"]], "skbio.sequence.SubstitutionMatrix.between": [[665, "skbio-sequence-substitutionmatrix-between"]], "skbio.sequence.SubstitutionMatrix.by_name": [[666, "skbio-sequence-substitutionmatrix-by-name"]], "skbio.sequence.SubstitutionMatrix.copy": [[667, "skbio-sequence-substitutionmatrix-copy"]], "skbio.sequence.SubstitutionMatrix.filter": [[668, "skbio-sequence-substitutionmatrix-filter"]], "skbio.sequence.SubstitutionMatrix.from_dict": [[669, "skbio-sequence-substitutionmatrix-from-dict"]], "skbio.sequence.SubstitutionMatrix.from_iterable": [[670, "skbio-sequence-substitutionmatrix-from-iterable"]], "skbio.sequence.SubstitutionMatrix.get_names": [[671, "skbio-sequence-substitutionmatrix-get-names"]], "skbio.sequence.SubstitutionMatrix.identity": [[672, "skbio-sequence-substitutionmatrix-identity"]], "skbio.sequence.SubstitutionMatrix.index": [[673, "skbio-sequence-substitutionmatrix-index"]], "skbio.sequence.SubstitutionMatrix.plot": [[674, "skbio-sequence-substitutionmatrix-plot"]], "skbio.sequence.SubstitutionMatrix.read": [[675, "skbio-sequence-substitutionmatrix-read"]], "skbio.sequence.SubstitutionMatrix.redundant_form": [[676, "skbio-sequence-substitutionmatrix-redundant-form"]], "skbio.sequence.SubstitutionMatrix.to_data_frame": [[677, "skbio-sequence-substitutionmatrix-to-data-frame"]], "skbio.sequence.SubstitutionMatrix.to_dict": [[678, "skbio-sequence-substitutionmatrix-to-dict"]], "skbio.sequence.SubstitutionMatrix.transpose": [[679, "skbio-sequence-substitutionmatrix-transpose"]], "skbio.sequence.SubstitutionMatrix.within": [[680, "skbio-sequence-substitutionmatrix-within"]], "skbio.sequence.SubstitutionMatrix.write": [[681, "skbio-sequence-substitutionmatrix-write"]], "skbio.sequence.distance.hamming": [[683, "skbio-sequence-distance-hamming"]], "skbio.sequence.distance.kmer_distance": [[684, "skbio-sequence-distance-kmer-distance"]], "skbio.stats.composition.alr": [[686, "skbio-stats-composition-alr"]], "skbio.stats.composition.alr_inv": [[687, "skbio-stats-composition-alr-inv"]], "skbio.stats.composition.ancom": [[688, "skbio-stats-composition-ancom"]], "skbio.stats.composition.centralize": [[689, "skbio-stats-composition-centralize"]], "skbio.stats.composition.closure": [[690, "skbio-stats-composition-closure"]], "skbio.stats.composition.clr": [[691, "skbio-stats-composition-clr"]], "skbio.stats.composition.clr_inv": [[692, "skbio-stats-composition-clr-inv"]], "skbio.stats.composition.dirmult_ttest": [[693, "skbio-stats-composition-dirmult-ttest"]], "skbio.stats.composition.ilr": [[694, "skbio-stats-composition-ilr"]], "skbio.stats.composition.ilr_inv": [[695, "skbio-stats-composition-ilr-inv"]], "skbio.stats.composition.inner": [[696, "skbio-stats-composition-inner"]], "skbio.stats.composition.multi_replace": [[697, "skbio-stats-composition-multi-replace"]], "skbio.stats.composition.multiplicative_replacement": [[698, "skbio-stats-composition-multiplicative-replacement"]], "skbio.stats.composition.pairwise_vlr": [[699, "skbio-stats-composition-pairwise-vlr"]], "skbio.stats.composition.perturb": [[700, "skbio-stats-composition-perturb"]], "skbio.stats.composition.perturb_inv": [[701, "skbio-stats-composition-perturb-inv"]], "skbio.stats.composition.power": [[702, "skbio-stats-composition-power"]], "skbio.stats.composition.sbp_basis": [[703, "skbio-stats-composition-sbp-basis"]], "skbio.stats.composition.tree_basis": [[704, "skbio-stats-composition-tree-basis"]], "skbio.stats.composition.vlr": [[705, "skbio-stats-composition-vlr"]], "skbio.stats.distance.DissimilarityMatrix": [[707, "skbio-stats-distance-dissimilaritymatrix"]], "skbio.stats.distance.DissimilarityMatrix.__contains__": [[708, "skbio-stats-distance-dissimilaritymatrix-contains"]], "skbio.stats.distance.DissimilarityMatrix.__eq__": [[709, "skbio-stats-distance-dissimilaritymatrix-eq"]], "skbio.stats.distance.DissimilarityMatrix.__ge__": [[710, "skbio-stats-distance-dissimilaritymatrix-ge"]], "skbio.stats.distance.DissimilarityMatrix.__getitem__": [[711, "skbio-stats-distance-dissimilaritymatrix-getitem"]], "skbio.stats.distance.DissimilarityMatrix.__getstate__": [[712, "skbio-stats-distance-dissimilaritymatrix-getstate"]], "skbio.stats.distance.DissimilarityMatrix.__gt__": [[713, "skbio-stats-distance-dissimilaritymatrix-gt"]], "skbio.stats.distance.DissimilarityMatrix.__le__": [[714, "skbio-stats-distance-dissimilaritymatrix-le"]], "skbio.stats.distance.DissimilarityMatrix.__lt__": [[715, "skbio-stats-distance-dissimilaritymatrix-lt"]], "skbio.stats.distance.DissimilarityMatrix.__ne__": [[716, "skbio-stats-distance-dissimilaritymatrix-ne"]], "skbio.stats.distance.DissimilarityMatrix.__str__": [[717, "skbio-stats-distance-dissimilaritymatrix-str"]], "skbio.stats.distance.DissimilarityMatrix.between": [[718, "skbio-stats-distance-dissimilaritymatrix-between"]], "skbio.stats.distance.DissimilarityMatrix.copy": [[719, "skbio-stats-distance-dissimilaritymatrix-copy"]], "skbio.stats.distance.DissimilarityMatrix.filter": [[720, "skbio-stats-distance-dissimilaritymatrix-filter"]], "skbio.stats.distance.DissimilarityMatrix.from_iterable": [[721, "skbio-stats-distance-dissimilaritymatrix-from-iterable"]], "skbio.stats.distance.DissimilarityMatrix.index": [[722, "skbio-stats-distance-dissimilaritymatrix-index"]], "skbio.stats.distance.DissimilarityMatrix.plot": [[723, "skbio-stats-distance-dissimilaritymatrix-plot"]], "skbio.stats.distance.DissimilarityMatrix.read": [[724, "skbio-stats-distance-dissimilaritymatrix-read"]], "skbio.stats.distance.DissimilarityMatrix.redundant_form": [[725, "skbio-stats-distance-dissimilaritymatrix-redundant-form"]], "skbio.stats.distance.DissimilarityMatrix.to_data_frame": [[726, "skbio-stats-distance-dissimilaritymatrix-to-data-frame"]], "skbio.stats.distance.DissimilarityMatrix.transpose": [[727, "skbio-stats-distance-dissimilaritymatrix-transpose"]], "skbio.stats.distance.DissimilarityMatrix.within": [[728, "skbio-stats-distance-dissimilaritymatrix-within"]], "skbio.stats.distance.DissimilarityMatrix.write": [[729, "skbio-stats-distance-dissimilaritymatrix-write"]], "skbio.stats.distance.DistanceMatrix": [[730, "skbio-stats-distance-distancematrix"]], "skbio.stats.distance.DistanceMatrix.__contains__": [[731, "skbio-stats-distance-distancematrix-contains"]], "skbio.stats.distance.DistanceMatrix.__eq__": [[732, "skbio-stats-distance-distancematrix-eq"]], "skbio.stats.distance.DistanceMatrix.__ge__": [[733, "skbio-stats-distance-distancematrix-ge"]], "skbio.stats.distance.DistanceMatrix.__getitem__": [[734, "skbio-stats-distance-distancematrix-getitem"]], "skbio.stats.distance.DistanceMatrix.__getstate__": [[735, "skbio-stats-distance-distancematrix-getstate"]], "skbio.stats.distance.DistanceMatrix.__gt__": [[736, "skbio-stats-distance-distancematrix-gt"]], "skbio.stats.distance.DistanceMatrix.__le__": [[737, "skbio-stats-distance-distancematrix-le"]], "skbio.stats.distance.DistanceMatrix.__lt__": [[738, "skbio-stats-distance-distancematrix-lt"]], "skbio.stats.distance.DistanceMatrix.__ne__": [[739, "skbio-stats-distance-distancematrix-ne"]], "skbio.stats.distance.DistanceMatrix.__str__": [[740, "skbio-stats-distance-distancematrix-str"]], "skbio.stats.distance.DistanceMatrix.between": [[741, "skbio-stats-distance-distancematrix-between"]], "skbio.stats.distance.DistanceMatrix.condensed_form": [[742, "skbio-stats-distance-distancematrix-condensed-form"]], "skbio.stats.distance.DistanceMatrix.copy": [[743, "skbio-stats-distance-distancematrix-copy"]], "skbio.stats.distance.DistanceMatrix.filter": [[744, "skbio-stats-distance-distancematrix-filter"]], "skbio.stats.distance.DistanceMatrix.from_iterable": [[745, "skbio-stats-distance-distancematrix-from-iterable"]], "skbio.stats.distance.DistanceMatrix.index": [[746, "skbio-stats-distance-distancematrix-index"]], "skbio.stats.distance.DistanceMatrix.permute": [[747, "skbio-stats-distance-distancematrix-permute"]], "skbio.stats.distance.DistanceMatrix.plot": [[748, "skbio-stats-distance-distancematrix-plot"]], "skbio.stats.distance.DistanceMatrix.read": [[749, "skbio-stats-distance-distancematrix-read"]], "skbio.stats.distance.DistanceMatrix.redundant_form": [[750, "skbio-stats-distance-distancematrix-redundant-form"]], "skbio.stats.distance.DistanceMatrix.to_data_frame": [[751, "skbio-stats-distance-distancematrix-to-data-frame"]], "skbio.stats.distance.DistanceMatrix.to_series": [[752, "skbio-stats-distance-distancematrix-to-series"]], "skbio.stats.distance.DistanceMatrix.transpose": [[753, "skbio-stats-distance-distancematrix-transpose"]], "skbio.stats.distance.DistanceMatrix.within": [[754, "skbio-stats-distance-distancematrix-within"]], "skbio.stats.distance.DistanceMatrix.write": [[755, "skbio-stats-distance-distancematrix-write"]], "skbio.stats.distance.anosim": [[756, "skbio-stats-distance-anosim"]], "skbio.stats.distance.bioenv": [[757, "skbio-stats-distance-bioenv"]], "skbio.stats.distance.mantel": [[758, "skbio-stats-distance-mantel"]], "skbio.stats.distance.permanova": [[759, "skbio-stats-distance-permanova"]], "skbio.stats.distance.permdisp": [[760, "skbio-stats-distance-permdisp"]], "skbio.stats.distance.pwmantel": [[761, "skbio-stats-distance-pwmantel"]], "skbio.stats.distance.randdm": [[762, "skbio-stats-distance-randdm"]], "skbio.stats.evolve.hommola_cospeciation": [[764, "skbio-stats-evolve-hommola-cospeciation"]], "skbio.stats.gradient.AverageGradientANOVA": [[766, "skbio-stats-gradient-averagegradientanova"]], "skbio.stats.gradient.AverageGradientANOVA.__eq__": [[767, "skbio-stats-gradient-averagegradientanova-eq"]], "skbio.stats.gradient.AverageGradientANOVA.__ge__": [[768, "skbio-stats-gradient-averagegradientanova-ge"]], "skbio.stats.gradient.AverageGradientANOVA.__getstate__": [[769, "skbio-stats-gradient-averagegradientanova-getstate"]], "skbio.stats.gradient.AverageGradientANOVA.__gt__": [[770, "skbio-stats-gradient-averagegradientanova-gt"]], "skbio.stats.gradient.AverageGradientANOVA.__hash__": [[771, "skbio-stats-gradient-averagegradientanova-hash"]], "skbio.stats.gradient.AverageGradientANOVA.__le__": [[772, "skbio-stats-gradient-averagegradientanova-le"]], "skbio.stats.gradient.AverageGradientANOVA.__lt__": [[773, "skbio-stats-gradient-averagegradientanova-lt"]], "skbio.stats.gradient.AverageGradientANOVA.__ne__": [[774, "skbio-stats-gradient-averagegradientanova-ne"]], "skbio.stats.gradient.AverageGradientANOVA.__str__": [[775, "skbio-stats-gradient-averagegradientanova-str"]], "skbio.stats.gradient.AverageGradientANOVA.get_trajectories": [[776, "skbio-stats-gradient-averagegradientanova-get-trajectories"]], "skbio.stats.gradient.CategoryResults": [[777, "skbio-stats-gradient-categoryresults"]], "skbio.stats.gradient.CategoryResults.__eq__": [[778, "skbio-stats-gradient-categoryresults-eq"]], "skbio.stats.gradient.CategoryResults.__ge__": [[779, "skbio-stats-gradient-categoryresults-ge"]], "skbio.stats.gradient.CategoryResults.__getstate__": [[780, "skbio-stats-gradient-categoryresults-getstate"]], "skbio.stats.gradient.CategoryResults.__gt__": [[781, "skbio-stats-gradient-categoryresults-gt"]], "skbio.stats.gradient.CategoryResults.__hash__": [[782, "skbio-stats-gradient-categoryresults-hash"]], "skbio.stats.gradient.CategoryResults.__le__": [[783, "skbio-stats-gradient-categoryresults-le"]], "skbio.stats.gradient.CategoryResults.__lt__": [[784, "skbio-stats-gradient-categoryresults-lt"]], "skbio.stats.gradient.CategoryResults.__ne__": [[785, "skbio-stats-gradient-categoryresults-ne"]], "skbio.stats.gradient.CategoryResults.__str__": [[786, "skbio-stats-gradient-categoryresults-str"]], "skbio.stats.gradient.CategoryResults.to_files": [[787, "skbio-stats-gradient-categoryresults-to-files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[788, "skbio-stats-gradient-firstdifferencegradientanova"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__": [[789, "skbio-stats-gradient-firstdifferencegradientanova-eq"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__": [[790, "skbio-stats-gradient-firstdifferencegradientanova-ge"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__": [[791, "skbio-stats-gradient-firstdifferencegradientanova-getstate"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__": [[792, "skbio-stats-gradient-firstdifferencegradientanova-gt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__": [[793, "skbio-stats-gradient-firstdifferencegradientanova-hash"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__": [[794, "skbio-stats-gradient-firstdifferencegradientanova-le"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__": [[795, "skbio-stats-gradient-firstdifferencegradientanova-lt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__": [[796, "skbio-stats-gradient-firstdifferencegradientanova-ne"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__": [[797, "skbio-stats-gradient-firstdifferencegradientanova-str"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories": [[798, "skbio-stats-gradient-firstdifferencegradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVA": [[799, "skbio-stats-gradient-gradientanova"]], "skbio.stats.gradient.GradientANOVA.__eq__": [[800, "skbio-stats-gradient-gradientanova-eq"]], "skbio.stats.gradient.GradientANOVA.__ge__": [[801, "skbio-stats-gradient-gradientanova-ge"]], "skbio.stats.gradient.GradientANOVA.__getstate__": [[802, "skbio-stats-gradient-gradientanova-getstate"]], "skbio.stats.gradient.GradientANOVA.__gt__": [[803, "skbio-stats-gradient-gradientanova-gt"]], "skbio.stats.gradient.GradientANOVA.__hash__": [[804, "skbio-stats-gradient-gradientanova-hash"]], "skbio.stats.gradient.GradientANOVA.__le__": [[805, "skbio-stats-gradient-gradientanova-le"]], "skbio.stats.gradient.GradientANOVA.__lt__": [[806, "skbio-stats-gradient-gradientanova-lt"]], "skbio.stats.gradient.GradientANOVA.__ne__": [[807, "skbio-stats-gradient-gradientanova-ne"]], "skbio.stats.gradient.GradientANOVA.__str__": [[808, "skbio-stats-gradient-gradientanova-str"]], "skbio.stats.gradient.GradientANOVA.get_trajectories": [[809, "skbio-stats-gradient-gradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[810, "skbio-stats-gradient-gradientanovaresults"]], "skbio.stats.gradient.GradientANOVAResults.__eq__": [[811, "skbio-stats-gradient-gradientanovaresults-eq"]], "skbio.stats.gradient.GradientANOVAResults.__ge__": [[812, "skbio-stats-gradient-gradientanovaresults-ge"]], "skbio.stats.gradient.GradientANOVAResults.__getstate__": [[813, "skbio-stats-gradient-gradientanovaresults-getstate"]], "skbio.stats.gradient.GradientANOVAResults.__gt__": [[814, "skbio-stats-gradient-gradientanovaresults-gt"]], "skbio.stats.gradient.GradientANOVAResults.__hash__": [[815, "skbio-stats-gradient-gradientanovaresults-hash"]], "skbio.stats.gradient.GradientANOVAResults.__le__": [[816, "skbio-stats-gradient-gradientanovaresults-le"]], "skbio.stats.gradient.GradientANOVAResults.__lt__": [[817, "skbio-stats-gradient-gradientanovaresults-lt"]], "skbio.stats.gradient.GradientANOVAResults.__ne__": [[818, "skbio-stats-gradient-gradientanovaresults-ne"]], "skbio.stats.gradient.GradientANOVAResults.__str__": [[819, "skbio-stats-gradient-gradientanovaresults-str"]], "skbio.stats.gradient.GradientANOVAResults.to_files": [[820, "skbio-stats-gradient-gradientanovaresults-to-files"]], "skbio.stats.gradient.GroupResults": [[821, "skbio-stats-gradient-groupresults"]], "skbio.stats.gradient.GroupResults.__eq__": [[822, "skbio-stats-gradient-groupresults-eq"]], "skbio.stats.gradient.GroupResults.__ge__": [[823, "skbio-stats-gradient-groupresults-ge"]], "skbio.stats.gradient.GroupResults.__getstate__": [[824, "skbio-stats-gradient-groupresults-getstate"]], "skbio.stats.gradient.GroupResults.__gt__": [[825, "skbio-stats-gradient-groupresults-gt"]], "skbio.stats.gradient.GroupResults.__hash__": [[826, "skbio-stats-gradient-groupresults-hash"]], "skbio.stats.gradient.GroupResults.__le__": [[827, "skbio-stats-gradient-groupresults-le"]], "skbio.stats.gradient.GroupResults.__lt__": [[828, "skbio-stats-gradient-groupresults-lt"]], "skbio.stats.gradient.GroupResults.__ne__": [[829, "skbio-stats-gradient-groupresults-ne"]], "skbio.stats.gradient.GroupResults.__str__": [[830, "skbio-stats-gradient-groupresults-str"]], "skbio.stats.gradient.GroupResults.to_files": [[831, "skbio-stats-gradient-groupresults-to-files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[832, "skbio-stats-gradient-trajectorygradientanova"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__": [[833, "skbio-stats-gradient-trajectorygradientanova-eq"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__": [[834, "skbio-stats-gradient-trajectorygradientanova-ge"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__": [[835, "skbio-stats-gradient-trajectorygradientanova-getstate"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__": [[836, "skbio-stats-gradient-trajectorygradientanova-gt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__": [[837, "skbio-stats-gradient-trajectorygradientanova-hash"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__le__": [[838, "skbio-stats-gradient-trajectorygradientanova-le"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__": [[839, "skbio-stats-gradient-trajectorygradientanova-lt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__": [[840, "skbio-stats-gradient-trajectorygradientanova-ne"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__str__": [[841, "skbio-stats-gradient-trajectorygradientanova-str"]], "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories": [[842, "skbio-stats-gradient-trajectorygradientanova-get-trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[843, "skbio-stats-gradient-windowdifferencegradientanova"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__": [[844, "skbio-stats-gradient-windowdifferencegradientanova-eq"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__": [[845, "skbio-stats-gradient-windowdifferencegradientanova-ge"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__": [[846, "skbio-stats-gradient-windowdifferencegradientanova-getstate"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__": [[847, "skbio-stats-gradient-windowdifferencegradientanova-gt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__": [[848, "skbio-stats-gradient-windowdifferencegradientanova-hash"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__": [[849, "skbio-stats-gradient-windowdifferencegradientanova-le"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__": [[850, "skbio-stats-gradient-windowdifferencegradientanova-lt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__": [[851, "skbio-stats-gradient-windowdifferencegradientanova-ne"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__": [[852, "skbio-stats-gradient-windowdifferencegradientanova-str"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories": [[853, "skbio-stats-gradient-windowdifferencegradientanova-get-trajectories"]], "skbio.stats.isubsample": [[854, "skbio-stats-isubsample"]], "skbio.stats.ordination.OrdinationResults": [[856, "skbio-stats-ordination-ordinationresults"]], "skbio.stats.ordination.OrdinationResults.__eq__": [[857, "skbio-stats-ordination-ordinationresults-eq"]], "skbio.stats.ordination.OrdinationResults.__ge__": [[858, "skbio-stats-ordination-ordinationresults-ge"]], "skbio.stats.ordination.OrdinationResults.__getstate__": [[859, "skbio-stats-ordination-ordinationresults-getstate"]], "skbio.stats.ordination.OrdinationResults.__gt__": [[860, "skbio-stats-ordination-ordinationresults-gt"]], "skbio.stats.ordination.OrdinationResults.__hash__": [[861, "skbio-stats-ordination-ordinationresults-hash"]], "skbio.stats.ordination.OrdinationResults.__le__": [[862, "skbio-stats-ordination-ordinationresults-le"]], "skbio.stats.ordination.OrdinationResults.__lt__": [[863, "skbio-stats-ordination-ordinationresults-lt"]], "skbio.stats.ordination.OrdinationResults.__ne__": [[864, "skbio-stats-ordination-ordinationresults-ne"]], "skbio.stats.ordination.OrdinationResults.__str__": [[865, "skbio-stats-ordination-ordinationresults-str"]], "skbio.stats.ordination.OrdinationResults.plot": [[866, "skbio-stats-ordination-ordinationresults-plot"]], "skbio.stats.ordination.OrdinationResults.read": [[867, "skbio-stats-ordination-ordinationresults-read"]], "skbio.stats.ordination.OrdinationResults.rename": [[868, "skbio-stats-ordination-ordinationresults-rename"]], "skbio.stats.ordination.OrdinationResults.write": [[869, "skbio-stats-ordination-ordinationresults-write"]], "skbio.stats.ordination.ca": [[870, "skbio-stats-ordination-ca"]], "skbio.stats.ordination.cca": [[871, "skbio-stats-ordination-cca"]], "skbio.stats.ordination.corr": [[872, "skbio-stats-ordination-corr"]], "skbio.stats.ordination.e_matrix": [[873, "skbio-stats-ordination-e-matrix"]], "skbio.stats.ordination.f_matrix": [[874, "skbio-stats-ordination-f-matrix"]], "skbio.stats.ordination.mean_and_std": [[875, "skbio-stats-ordination-mean-and-std"]], "skbio.stats.ordination.pcoa": [[876, "skbio-stats-ordination-pcoa"]], "skbio.stats.ordination.pcoa_biplot": [[877, "skbio-stats-ordination-pcoa-biplot"]], "skbio.stats.ordination.rda": [[878, "skbio-stats-ordination-rda"]], "skbio.stats.ordination.scale": [[879, "skbio-stats-ordination-scale"]], "skbio.stats.ordination.svd_rank": [[880, "skbio-stats-ordination-svd-rank"]], "skbio.stats.power.confidence_bound": [[882, "skbio-stats-power-confidence-bound"]], "skbio.stats.power.paired_subsamples": [[883, "skbio-stats-power-paired-subsamples"]], "skbio.stats.power.subsample_paired_power": [[884, "skbio-stats-power-subsample-paired-power"]], "skbio.stats.power.subsample_power": [[885, "skbio-stats-power-subsample-power"]], "skbio.stats.subsample_counts": [[886, "skbio-stats-subsample-counts"]], "skbio.table.Table": [[887, "skbio-table-table"]], "skbio.table.Table.__eq__": [[888, "skbio-table-table-eq"]], "skbio.table.Table.__ge__": [[889, "skbio-table-table-ge"]], "skbio.table.Table.__getitem__": [[890, "skbio-table-table-getitem"]], "skbio.table.Table.__getstate__": [[891, "skbio-table-table-getstate"]], "skbio.table.Table.__gt__": [[892, "skbio-table-table-gt"]], "skbio.table.Table.__iter__": [[893, "skbio-table-table-iter"]], "skbio.table.Table.__le__": [[894, "skbio-table-table-le"]], "skbio.table.Table.__lt__": [[895, "skbio-table-table-lt"]], "skbio.table.Table.__ne__": [[896, "skbio-table-table-ne"]], "skbio.table.Table.__str__": [[897, "skbio-table-table-str"]], "skbio.table.Table.add_group_metadata": [[898, "skbio-table-table-add-group-metadata"]], "skbio.table.Table.add_metadata": [[899, "skbio-table-table-add-metadata"]], "skbio.table.Table.align_to": [[900, "skbio-table-table-align-to"]], "skbio.table.Table.align_to_dataframe": [[901, "skbio-table-table-align-to-dataframe"]], "skbio.table.Table.align_tree": [[902, "skbio-table-table-align-tree"]], "skbio.table.Table.collapse": [[903, "skbio-table-table-collapse"]], "skbio.table.Table.concat": [[904, "skbio-table-table-concat"]], "skbio.table.Table.copy": [[905, "skbio-table-table-copy"]], "skbio.table.Table.data": [[906, "skbio-table-table-data"]], "skbio.table.Table.del_metadata": [[907, "skbio-table-table-del-metadata"]], "skbio.table.Table.delimited_self": [[908, "skbio-table-table-delimited-self"]], "skbio.table.Table.descriptive_equality": [[909, "skbio-table-table-descriptive-equality"]], "skbio.table.Table.exists": [[910, "skbio-table-table-exists"]], "skbio.table.Table.filter": [[911, "skbio-table-table-filter"]], "skbio.table.Table.from_adjacency": [[912, "skbio-table-table-from-adjacency"]], "skbio.table.Table.from_hdf5": [[913, "skbio-table-table-from-hdf5"]], "skbio.table.Table.from_json": [[914, "skbio-table-table-from-json"]], "skbio.table.Table.from_tsv": [[915, "skbio-table-table-from-tsv"]], "skbio.table.Table.get_table_density": [[916, "skbio-table-table-get-table-density"]], "skbio.table.Table.get_value_by_ids": [[917, "skbio-table-table-get-value-by-ids"]], "skbio.table.Table.group_metadata": [[918, "skbio-table-table-group-metadata"]], "skbio.table.Table.head": [[919, "skbio-table-table-head"]], "skbio.table.Table.ids": [[920, "skbio-table-table-ids"]], "skbio.table.Table.index": [[921, "skbio-table-table-index"]], "skbio.table.Table.is_empty": [[922, "skbio-table-table-is-empty"]], "skbio.table.Table.iter": [[923, "skbio-table-table-iter"]], "skbio.table.Table.iter_data": [[924, "skbio-table-table-iter-data"]], "skbio.table.Table.iter_pairwise": [[925, "skbio-table-table-iter-pairwise"]], "skbio.table.Table.length": [[926, "skbio-table-table-length"]], "skbio.table.Table.max": [[927, "skbio-table-table-max"]], "skbio.table.Table.merge": [[928, "skbio-table-table-merge"]], "skbio.table.Table.metadata": [[929, "skbio-table-table-metadata"]], "skbio.table.Table.metadata_to_dataframe": [[930, "skbio-table-table-metadata-to-dataframe"]], "skbio.table.Table.min": [[931, "skbio-table-table-min"]], "skbio.table.Table.nonzero": [[932, "skbio-table-table-nonzero"]], "skbio.table.Table.nonzero_counts": [[933, "skbio-table-table-nonzero-counts"]], "skbio.table.Table.norm": [[934, "skbio-table-table-norm"]], "skbio.table.Table.pa": [[935, "skbio-table-table-pa"]], "skbio.table.Table.partition": [[936, "skbio-table-table-partition"]], "skbio.table.Table.rankdata": [[937, "skbio-table-table-rankdata"]], "skbio.table.Table.read": [[938, "skbio-table-table-read"]], "skbio.table.Table.reduce": [[939, "skbio-table-table-reduce"]], "skbio.table.Table.remove_empty": [[940, "skbio-table-table-remove-empty"]], "skbio.table.Table.sort": [[941, "skbio-table-table-sort"]], "skbio.table.Table.sort_order": [[942, "skbio-table-table-sort-order"]], "skbio.table.Table.subsample": [[943, "skbio-table-table-subsample"]], "skbio.table.Table.sum": [[944, "skbio-table-table-sum"]], "skbio.table.Table.to_anndata": [[945, "skbio-table-table-to-anndata"]], "skbio.table.Table.to_dataframe": [[946, "skbio-table-table-to-dataframe"]], "skbio.table.Table.to_hdf5": [[947, "skbio-table-table-to-hdf5"]], "skbio.table.Table.to_json": [[948, "skbio-table-table-to-json"]], "skbio.table.Table.to_tsv": [[949, "skbio-table-table-to-tsv"]], "skbio.table.Table.transform": [[950, "skbio-table-table-transform"]], "skbio.table.Table.transpose": [[951, "skbio-table-table-transpose"]], "skbio.table.Table.update_ids": [[952, "skbio-table-table-update-ids"]], "skbio.table.Table.write": [[953, "skbio-table-table-write"]], "skbio.table.example_table": [[954, "skbio-table-example-table"]], "skbio.tree.TreeNode": [[955, "skbio-tree-treenode"]], "skbio.tree.TreeNode.__copy__": [[956, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.__deepcopy__": [[957, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.__eq__": [[958, "skbio-tree-treenode-eq"]], "skbio.tree.TreeNode.__ge__": [[959, "skbio-tree-treenode-ge"]], "skbio.tree.TreeNode.__getitem__": [[960, "skbio-tree-treenode-getitem"]], "skbio.tree.TreeNode.__getstate__": [[961, "skbio-tree-treenode-getstate"]], "skbio.tree.TreeNode.__gt__": [[962, "skbio-tree-treenode-gt"]], "skbio.tree.TreeNode.__hash__": [[963, "skbio-tree-treenode-hash"]], "skbio.tree.TreeNode.__iter__": [[964, "skbio-tree-treenode-iter"]], "skbio.tree.TreeNode.__le__": [[965, "skbio-tree-treenode-le"]], "skbio.tree.TreeNode.__len__": [[966, "skbio-tree-treenode-len"]], "skbio.tree.TreeNode.__lt__": [[967, "skbio-tree-treenode-lt"]], "skbio.tree.TreeNode.__ne__": [[968, "skbio-tree-treenode-ne"]], "skbio.tree.TreeNode.__str__": [[969, "skbio-tree-treenode-str"]], "skbio.tree.TreeNode.accumulate_to_ancestor": [[970, "skbio-tree-treenode-accumulate-to-ancestor"]], "skbio.tree.TreeNode.ancestors": [[971, "skbio-tree-treenode-ancestors"]], "skbio.tree.TreeNode.append": [[972, "skbio-tree-treenode-append"]], "skbio.tree.TreeNode.ascii_art": [[973, "skbio-tree-treenode-ascii-art"]], "skbio.tree.TreeNode.assign_ids": [[974, "skbio-tree-treenode-assign-ids"]], "skbio.tree.TreeNode.assign_supports": [[975, "skbio-tree-treenode-assign-supports"]], "skbio.tree.TreeNode.bifurcate": [[976, "skbio-tree-treenode-bifurcate"]], "skbio.tree.TreeNode.cache_attr": [[977, "skbio-tree-treenode-cache-attr"]], "skbio.tree.TreeNode.compare_rfd": [[978, "skbio-tree-treenode-compare-rfd"]], "skbio.tree.TreeNode.compare_subsets": [[979, "skbio-tree-treenode-compare-subsets"]], "skbio.tree.TreeNode.compare_tip_distances": [[980, "skbio-tree-treenode-compare-tip-distances"]], "skbio.tree.TreeNode.copy": [[981, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.count": [[982, "skbio-tree-treenode-count"]], "skbio.tree.TreeNode.create_caches": [[983, "skbio-tree-treenode-create-caches"]], "skbio.tree.TreeNode.deepcopy": [[984, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.descending_branch_length": [[985, "skbio-tree-treenode-descending-branch-length"]], "skbio.tree.TreeNode.distance": [[986, "skbio-tree-treenode-distance"]], "skbio.tree.TreeNode.extend": [[987, "skbio-tree-treenode-extend"]], "skbio.tree.TreeNode.find": [[988, "skbio-tree-treenode-find"]], "skbio.tree.TreeNode.find_all": [[989, "skbio-tree-treenode-find-all"]], "skbio.tree.TreeNode.find_by_func": [[990, "skbio-tree-treenode-find-by-func"]], "skbio.tree.TreeNode.find_by_id": [[991, "skbio-tree-treenode-find-by-id"]], "skbio.tree.TreeNode.from_linkage_matrix": [[992, "skbio-tree-treenode-from-linkage-matrix"]], "skbio.tree.TreeNode.from_taxdump": [[993, "skbio-tree-treenode-from-taxdump"]], "skbio.tree.TreeNode.from_taxonomy": [[994, "skbio-tree-treenode-from-taxonomy"]], "skbio.tree.TreeNode.get_max_distance": [[995, "skbio-tree-treenode-get-max-distance"]], "skbio.tree.TreeNode.has_children": [[996, "skbio-tree-treenode-has-children"]], "skbio.tree.TreeNode.index_tree": [[997, "skbio-tree-treenode-index-tree"]], "skbio.tree.TreeNode.insert": [[998, "skbio-tree-treenode-insert"]], "skbio.tree.TreeNode.invalidate_caches": [[999, "skbio-tree-treenode-invalidate-caches"]], "skbio.tree.TreeNode.is_root": [[1000, "skbio-tree-treenode-is-root"]], "skbio.tree.TreeNode.is_tip": [[1001, "skbio-tree-treenode-is-tip"]], "skbio.tree.TreeNode.lca": [[1002, "skbio-tree-treenode-lca"]], "skbio.tree.TreeNode.levelorder": [[1003, "skbio-tree-treenode-levelorder"]], "skbio.tree.TreeNode.lowest_common_ancestor": [[1004, "skbio-tree-treenode-lowest-common-ancestor"]], "skbio.tree.TreeNode.neighbors": [[1005, "skbio-tree-treenode-neighbors"]], "skbio.tree.TreeNode.non_tips": [[1006, "skbio-tree-treenode-non-tips"]], "skbio.tree.TreeNode.observed_node_counts": [[1007, "skbio-tree-treenode-observed-node-counts"]], "skbio.tree.TreeNode.pop": [[1008, "skbio-tree-treenode-pop"]], "skbio.tree.TreeNode.postorder": [[1009, "skbio-tree-treenode-postorder"]], "skbio.tree.TreeNode.pre_and_postorder": [[1010, "skbio-tree-treenode-pre-and-postorder"]], "skbio.tree.TreeNode.preorder": [[1011, "skbio-tree-treenode-preorder"]], "skbio.tree.TreeNode.prune": [[1012, "skbio-tree-treenode-prune"]], "skbio.tree.TreeNode.read": [[1013, "skbio-tree-treenode-read"]], "skbio.tree.TreeNode.remove": [[1014, "skbio-tree-treenode-remove"]], "skbio.tree.TreeNode.remove_deleted": [[1015, "skbio-tree-treenode-remove-deleted"]], "skbio.tree.TreeNode.root": [[1016, "skbio-tree-treenode-root"]], "skbio.tree.TreeNode.root_at": [[1017, "skbio-tree-treenode-root-at"]], "skbio.tree.TreeNode.root_at_midpoint": [[1018, "skbio-tree-treenode-root-at-midpoint"]], "skbio.tree.TreeNode.root_by_outgroup": [[1019, "skbio-tree-treenode-root-by-outgroup"]], "skbio.tree.TreeNode.shear": [[1020, "skbio-tree-treenode-shear"]], "skbio.tree.TreeNode.shuffle": [[1021, "skbio-tree-treenode-shuffle"]], "skbio.tree.TreeNode.siblings": [[1022, "skbio-tree-treenode-siblings"]], "skbio.tree.TreeNode.subset": [[1023, "skbio-tree-treenode-subset"]], "skbio.tree.TreeNode.subsets": [[1024, "skbio-tree-treenode-subsets"]], "skbio.tree.TreeNode.subtree": [[1025, "skbio-tree-treenode-subtree"]], "skbio.tree.TreeNode.tip_tip_distances": [[1026, "skbio-tree-treenode-tip-tip-distances"]], "skbio.tree.TreeNode.tips": [[1027, "skbio-tree-treenode-tips"]], "skbio.tree.TreeNode.to_array": [[1028, "skbio-tree-treenode-to-array"]], "skbio.tree.TreeNode.to_taxonomy": [[1029, "skbio-tree-treenode-to-taxonomy"]], "skbio.tree.TreeNode.traverse": [[1030, "skbio-tree-treenode-traverse"]], "skbio.tree.TreeNode.unpack": [[1031, "skbio-tree-treenode-unpack"]], "skbio.tree.TreeNode.unpack_by_func": [[1032, "skbio-tree-treenode-unpack-by-func"]], "skbio.tree.TreeNode.unroot": [[1033, "skbio-tree-treenode-unroot"]], "skbio.tree.TreeNode.unrooted_copy": [[1034, "skbio-tree-treenode-unrooted-copy"]], "skbio.tree.TreeNode.unrooted_deepcopy": [[1035, "skbio-tree-treenode-unrooted-deepcopy"]], "skbio.tree.TreeNode.unrooted_move": [[1036, "skbio-tree-treenode-unrooted-move"]], "skbio.tree.TreeNode.write": [[1037, "skbio-tree-treenode-write"]], "skbio.tree.majority_rule": [[1038, "skbio-tree-majority-rule"]], "skbio.tree.nj": [[1039, "skbio-tree-nj"]], "skbio.util.EfficiencyWarning": [[1040, "skbio-util-efficiencywarning"]], "skbio.util.RepresentationWarning": [[1041, "skbio-util-representationwarning"]], "skbio.util.assert_data_frame_almost_equal": [[1042, "skbio-util-assert-data-frame-almost-equal"]], "skbio.util.assert_ordination_results_equal": [[1043, "skbio-util-assert-ordination-results-equal"]], "skbio.util.cardinal_to_ordinal": [[1044, "skbio-util-cardinal-to-ordinal"]], "skbio.util.classproperty": [[1045, "skbio-util-classproperty"]], "skbio.util.classproperty.__delete__": [[1046, "skbio-util-classproperty-delete"]], "skbio.util.classproperty.__eq__": [[1047, "skbio-util-classproperty-eq"]], "skbio.util.classproperty.__ge__": [[1048, "skbio-util-classproperty-ge"]], "skbio.util.classproperty.__get__": [[1049, "skbio-util-classproperty-get"]], "skbio.util.classproperty.__getstate__": [[1050, "skbio-util-classproperty-getstate"]], "skbio.util.classproperty.__gt__": [[1051, "skbio-util-classproperty-gt"]], "skbio.util.classproperty.__hash__": [[1052, "skbio-util-classproperty-hash"]], "skbio.util.classproperty.__le__": [[1053, "skbio-util-classproperty-le"]], "skbio.util.classproperty.__lt__": [[1054, "skbio-util-classproperty-lt"]], "skbio.util.classproperty.__ne__": [[1055, "skbio-util-classproperty-ne"]], "skbio.util.classproperty.__set__": [[1056, "skbio-util-classproperty-set"]], "skbio.util.classproperty.__set_name__": [[1057, "skbio-util-classproperty-set-name"]], "skbio.util.classproperty.__str__": [[1058, "skbio-util-classproperty-str"]], "skbio.util.classproperty.deleter": [[1059, "skbio-util-classproperty-deleter"]], "skbio.util.classproperty.getter": [[1060, "skbio-util-classproperty-getter"]], "skbio.util.classproperty.setter": [[1061, "skbio-util-classproperty-setter"]], "skbio.util.find_duplicates": [[1062, "skbio-util-find-duplicates"]], "skbio.util.get_data_path": [[1063, "skbio-util-get-data-path"]], "skbio.util.safe_md5": [[1064, "skbio-util-safe-md5"]], "skbio.workflow.Workflow": [[1065, "skbio-workflow-workflow"]], "skbio.workflow.Workflow.__call__": [[1066, "skbio-workflow-workflow-call"]], "skbio.workflow.Workflow.__eq__": [[1067, "skbio-workflow-workflow-eq"]], "skbio.workflow.Workflow.__ge__": [[1068, "skbio-workflow-workflow-ge"]], "skbio.workflow.Workflow.__getstate__": [[1069, "skbio-workflow-workflow-getstate"]], "skbio.workflow.Workflow.__gt__": [[1070, "skbio-workflow-workflow-gt"]], "skbio.workflow.Workflow.__hash__": [[1071, "skbio-workflow-workflow-hash"]], "skbio.workflow.Workflow.__le__": [[1072, "skbio-workflow-workflow-le"]], "skbio.workflow.Workflow.__lt__": [[1073, "skbio-workflow-workflow-lt"]], "skbio.workflow.Workflow.__ne__": [[1074, "skbio-workflow-workflow-ne"]], "skbio.workflow.Workflow.__str__": [[1075, "skbio-workflow-workflow-str"]], "skbio.workflow.Workflow.initialize_state": [[1076, "skbio-workflow-workflow-initialize-state"]], "skbio.workflow.method": [[1077, "skbio-workflow-method"]], "skbio.workflow.method.__call__": [[1078, "skbio-workflow-method-call"]], "skbio.workflow.method.__eq__": [[1079, "skbio-workflow-method-eq"]], "skbio.workflow.method.__ge__": [[1080, "skbio-workflow-method-ge"]], "skbio.workflow.method.__getstate__": [[1081, "skbio-workflow-method-getstate"]], "skbio.workflow.method.__gt__": [[1082, "skbio-workflow-method-gt"]], "skbio.workflow.method.__hash__": [[1083, "skbio-workflow-method-hash"]], "skbio.workflow.method.__le__": [[1084, "skbio-workflow-method-le"]], "skbio.workflow.method.__lt__": [[1085, "skbio-workflow-method-lt"]], "skbio.workflow.method.__ne__": [[1086, "skbio-workflow-method-ne"]], "skbio.workflow.method.__str__": [[1087, "skbio-workflow-method-str"]], "skbio.workflow.requires": [[1088, "skbio-workflow-requires"]], "skbio.workflow.requires.__call__": [[1089, "skbio-workflow-requires-call"]], "skbio.workflow.requires.__eq__": [[1090, "skbio-workflow-requires-eq"]], "skbio.workflow.requires.__ge__": [[1091, "skbio-workflow-requires-ge"]], "skbio.workflow.requires.__getstate__": [[1092, "skbio-workflow-requires-getstate"]], "skbio.workflow.requires.__gt__": [[1093, "skbio-workflow-requires-gt"]], "skbio.workflow.requires.__hash__": [[1094, "skbio-workflow-requires-hash"]], "skbio.workflow.requires.__le__": [[1095, "skbio-workflow-requires-le"]], "skbio.workflow.requires.__lt__": [[1096, "skbio-workflow-requires-lt"]], "skbio.workflow.requires.__ne__": [[1097, "skbio-workflow-requires-ne"]], "skbio.workflow.requires.__str__": [[1098, "skbio-workflow-requires-str"]]}, "docnames": ["alignment", "diversity", "embedding", "generated/skbio.alignment.AlignPath", "generated/skbio.alignment.AlignPath.__eq__", "generated/skbio.alignment.AlignPath.__ge__", "generated/skbio.alignment.AlignPath.__getstate__", "generated/skbio.alignment.AlignPath.__gt__", "generated/skbio.alignment.AlignPath.__hash__", "generated/skbio.alignment.AlignPath.__le__", "generated/skbio.alignment.AlignPath.__lt__", "generated/skbio.alignment.AlignPath.__ne__", "generated/skbio.alignment.AlignPath.__str__", "generated/skbio.alignment.AlignPath.from_bits", "generated/skbio.alignment.AlignPath.from_coordinates", "generated/skbio.alignment.AlignPath.from_indices", "generated/skbio.alignment.AlignPath.from_tabular", "generated/skbio.alignment.AlignPath.to_bits", "generated/skbio.alignment.AlignPath.to_coordinates", "generated/skbio.alignment.AlignPath.to_indices", "generated/skbio.alignment.AlignmentStructure", "generated/skbio.alignment.AlignmentStructure.__eq__", "generated/skbio.alignment.AlignmentStructure.__ge__", "generated/skbio.alignment.AlignmentStructure.__getitem__", "generated/skbio.alignment.AlignmentStructure.__getstate__", "generated/skbio.alignment.AlignmentStructure.__gt__", "generated/skbio.alignment.AlignmentStructure.__hash__", "generated/skbio.alignment.AlignmentStructure.__le__", "generated/skbio.alignment.AlignmentStructure.__lt__", "generated/skbio.alignment.AlignmentStructure.__ne__", "generated/skbio.alignment.AlignmentStructure.__setstate__", "generated/skbio.alignment.AlignmentStructure.__str__", "generated/skbio.alignment.AlignmentStructure.is_zero_based", "generated/skbio.alignment.AlignmentStructure.set_zero_based", "generated/skbio.alignment.PairAlignPath", "generated/skbio.alignment.PairAlignPath.__eq__", "generated/skbio.alignment.PairAlignPath.__ge__", "generated/skbio.alignment.PairAlignPath.__getstate__", "generated/skbio.alignment.PairAlignPath.__gt__", "generated/skbio.alignment.PairAlignPath.__hash__", "generated/skbio.alignment.PairAlignPath.__le__", "generated/skbio.alignment.PairAlignPath.__lt__", "generated/skbio.alignment.PairAlignPath.__ne__", "generated/skbio.alignment.PairAlignPath.__str__", "generated/skbio.alignment.PairAlignPath.from_bits", "generated/skbio.alignment.PairAlignPath.from_cigar", "generated/skbio.alignment.PairAlignPath.from_coordinates", "generated/skbio.alignment.PairAlignPath.from_indices", "generated/skbio.alignment.PairAlignPath.from_tabular", "generated/skbio.alignment.PairAlignPath.to_bits", "generated/skbio.alignment.PairAlignPath.to_cigar", "generated/skbio.alignment.PairAlignPath.to_coordinates", "generated/skbio.alignment.PairAlignPath.to_indices", "generated/skbio.alignment.StripedSmithWaterman", "generated/skbio.alignment.StripedSmithWaterman.__call__", "generated/skbio.alignment.StripedSmithWaterman.__eq__", "generated/skbio.alignment.StripedSmithWaterman.__ge__", "generated/skbio.alignment.StripedSmithWaterman.__getstate__", "generated/skbio.alignment.StripedSmithWaterman.__gt__", "generated/skbio.alignment.StripedSmithWaterman.__hash__", "generated/skbio.alignment.StripedSmithWaterman.__le__", "generated/skbio.alignment.StripedSmithWaterman.__lt__", "generated/skbio.alignment.StripedSmithWaterman.__ne__", "generated/skbio.alignment.StripedSmithWaterman.__setstate__", "generated/skbio.alignment.StripedSmithWaterman.__str__", "generated/skbio.alignment.TabularMSA", "generated/skbio.alignment.TabularMSA.__bool__", "generated/skbio.alignment.TabularMSA.__contains__", "generated/skbio.alignment.TabularMSA.__copy__", "generated/skbio.alignment.TabularMSA.__deepcopy__", "generated/skbio.alignment.TabularMSA.__eq__", "generated/skbio.alignment.TabularMSA.__ge__", "generated/skbio.alignment.TabularMSA.__getitem__", "generated/skbio.alignment.TabularMSA.__getstate__", "generated/skbio.alignment.TabularMSA.__gt__", "generated/skbio.alignment.TabularMSA.__iter__", "generated/skbio.alignment.TabularMSA.__le__", "generated/skbio.alignment.TabularMSA.__len__", "generated/skbio.alignment.TabularMSA.__lt__", "generated/skbio.alignment.TabularMSA.__ne__", "generated/skbio.alignment.TabularMSA.__reversed__", "generated/skbio.alignment.TabularMSA.__str__", "generated/skbio.alignment.TabularMSA.append", "generated/skbio.alignment.TabularMSA.consensus", "generated/skbio.alignment.TabularMSA.conservation", "generated/skbio.alignment.TabularMSA.extend", "generated/skbio.alignment.TabularMSA.from_dict", "generated/skbio.alignment.TabularMSA.from_path_seqs", "generated/skbio.alignment.TabularMSA.gap_frequencies", "generated/skbio.alignment.TabularMSA.has_metadata", "generated/skbio.alignment.TabularMSA.has_positional_metadata", "generated/skbio.alignment.TabularMSA.iter_positions", "generated/skbio.alignment.TabularMSA.join", "generated/skbio.alignment.TabularMSA.read", "generated/skbio.alignment.TabularMSA.reassign_index", "generated/skbio.alignment.TabularMSA.sort", "generated/skbio.alignment.TabularMSA.to_dict", "generated/skbio.alignment.TabularMSA.write", "generated/skbio.alignment.global_pairwise_align", "generated/skbio.alignment.global_pairwise_align_nucleotide", "generated/skbio.alignment.global_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align", "generated/skbio.alignment.local_pairwise_align_nucleotide", "generated/skbio.alignment.local_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align_ssw", "generated/skbio.alignment.make_identity_substitution_matrix", "generated/skbio.diversity.alpha", "generated/skbio.diversity.alpha.ace", "generated/skbio.diversity.alpha.berger_parker_d", "generated/skbio.diversity.alpha.brillouin_d", "generated/skbio.diversity.alpha.chao1", "generated/skbio.diversity.alpha.chao1_ci", "generated/skbio.diversity.alpha.dominance", "generated/skbio.diversity.alpha.doubles", "generated/skbio.diversity.alpha.enspie", "generated/skbio.diversity.alpha.esty_ci", "generated/skbio.diversity.alpha.faith_pd", "generated/skbio.diversity.alpha.fisher_alpha", "generated/skbio.diversity.alpha.gini_index", "generated/skbio.diversity.alpha.goods_coverage", "generated/skbio.diversity.alpha.heip_e", "generated/skbio.diversity.alpha.hill", "generated/skbio.diversity.alpha.inv_simpson", "generated/skbio.diversity.alpha.kempton_taylor_q", "generated/skbio.diversity.alpha.lladser_ci", "generated/skbio.diversity.alpha.lladser_pe", "generated/skbio.diversity.alpha.margalef", "generated/skbio.diversity.alpha.mcintosh_d", "generated/skbio.diversity.alpha.mcintosh_e", "generated/skbio.diversity.alpha.menhinick", "generated/skbio.diversity.alpha.michaelis_menten_fit", "generated/skbio.diversity.alpha.observed_features", "generated/skbio.diversity.alpha.observed_otus", "generated/skbio.diversity.alpha.osd", "generated/skbio.diversity.alpha.phydiv", "generated/skbio.diversity.alpha.pielou_e", "generated/skbio.diversity.alpha.renyi", "generated/skbio.diversity.alpha.robbins", "generated/skbio.diversity.alpha.shannon", "generated/skbio.diversity.alpha.simpson", "generated/skbio.diversity.alpha.simpson_d", "generated/skbio.diversity.alpha.simpson_e", "generated/skbio.diversity.alpha.singles", "generated/skbio.diversity.alpha.sobs", "generated/skbio.diversity.alpha.strong", "generated/skbio.diversity.alpha.tsallis", "generated/skbio.diversity.alpha_diversity", "generated/skbio.diversity.beta", "generated/skbio.diversity.beta.unweighted_unifrac", "generated/skbio.diversity.beta.weighted_unifrac", "generated/skbio.diversity.beta_diversity", "generated/skbio.diversity.block_beta_diversity", "generated/skbio.diversity.get_alpha_diversity_metrics", "generated/skbio.diversity.get_beta_diversity_metrics", "generated/skbio.diversity.partial_beta_diversity", "generated/skbio.embedding.Embedding", "generated/skbio.embedding.Embedding.__eq__", "generated/skbio.embedding.Embedding.__ge__", "generated/skbio.embedding.Embedding.__getstate__", "generated/skbio.embedding.Embedding.__gt__", "generated/skbio.embedding.Embedding.__hash__", "generated/skbio.embedding.Embedding.__le__", "generated/skbio.embedding.Embedding.__lt__", "generated/skbio.embedding.Embedding.__ne__", "generated/skbio.embedding.Embedding.__str__", "generated/skbio.embedding.Embedding.bytes", "generated/skbio.embedding.ProteinEmbedding", "generated/skbio.embedding.ProteinEmbedding.__eq__", "generated/skbio.embedding.ProteinEmbedding.__ge__", "generated/skbio.embedding.ProteinEmbedding.__getstate__", "generated/skbio.embedding.ProteinEmbedding.__gt__", "generated/skbio.embedding.ProteinEmbedding.__hash__", "generated/skbio.embedding.ProteinEmbedding.__le__", "generated/skbio.embedding.ProteinEmbedding.__lt__", "generated/skbio.embedding.ProteinEmbedding.__ne__", "generated/skbio.embedding.ProteinEmbedding.__str__", "generated/skbio.embedding.ProteinEmbedding.bytes", "generated/skbio.embedding.ProteinEmbedding.read", "generated/skbio.embedding.ProteinEmbedding.write", "generated/skbio.embedding.ProteinVector", "generated/skbio.embedding.ProteinVector.__eq__", "generated/skbio.embedding.ProteinVector.__ge__", "generated/skbio.embedding.ProteinVector.__getstate__", "generated/skbio.embedding.ProteinVector.__gt__", "generated/skbio.embedding.ProteinVector.__hash__", "generated/skbio.embedding.ProteinVector.__le__", "generated/skbio.embedding.ProteinVector.__lt__", "generated/skbio.embedding.ProteinVector.__ne__", "generated/skbio.embedding.ProteinVector.__str__", "generated/skbio.embedding.ProteinVector.bytes", "generated/skbio.embedding.ProteinVector.read", "generated/skbio.embedding.ProteinVector.write", "generated/skbio.embedding.SequenceEmbedding", "generated/skbio.embedding.SequenceEmbedding.__eq__", "generated/skbio.embedding.SequenceEmbedding.__ge__", "generated/skbio.embedding.SequenceEmbedding.__getstate__", "generated/skbio.embedding.SequenceEmbedding.__gt__", "generated/skbio.embedding.SequenceEmbedding.__hash__", "generated/skbio.embedding.SequenceEmbedding.__le__", "generated/skbio.embedding.SequenceEmbedding.__lt__", "generated/skbio.embedding.SequenceEmbedding.__ne__", "generated/skbio.embedding.SequenceEmbedding.__str__", "generated/skbio.embedding.SequenceEmbedding.bytes", "generated/skbio.embedding.SequenceVector", "generated/skbio.embedding.SequenceVector.__eq__", "generated/skbio.embedding.SequenceVector.__ge__", "generated/skbio.embedding.SequenceVector.__getstate__", "generated/skbio.embedding.SequenceVector.__gt__", "generated/skbio.embedding.SequenceVector.__hash__", "generated/skbio.embedding.SequenceVector.__le__", "generated/skbio.embedding.SequenceVector.__lt__", "generated/skbio.embedding.SequenceVector.__ne__", "generated/skbio.embedding.SequenceVector.__str__", "generated/skbio.embedding.SequenceVector.bytes", "generated/skbio.embedding.embed_vec_to_dataframe", "generated/skbio.embedding.embed_vec_to_distances", "generated/skbio.embedding.embed_vec_to_numpy", "generated/skbio.embedding.embed_vec_to_ordination", "generated/skbio.io.format.binary_dm", "generated/skbio.io.format.biom", "generated/skbio.io.format.blast6", "generated/skbio.io.format.blast7", "generated/skbio.io.format.clustal", "generated/skbio.io.format.embed", "generated/skbio.io.format.embl", "generated/skbio.io.format.fasta", "generated/skbio.io.format.fastq", "generated/skbio.io.format.genbank", "generated/skbio.io.format.gff3", "generated/skbio.io.format.lsmat", "generated/skbio.io.format.newick", "generated/skbio.io.format.ordination", "generated/skbio.io.format.phylip", "generated/skbio.io.format.qseq", "generated/skbio.io.format.sample_metadata", "generated/skbio.io.format.stockholm", "generated/skbio.io.format.taxdump", "generated/skbio.io.registry", "generated/skbio.io.registry.Format", "generated/skbio.io.registry.Format.__eq__", "generated/skbio.io.registry.Format.__ge__", "generated/skbio.io.registry.Format.__getstate__", "generated/skbio.io.registry.Format.__gt__", "generated/skbio.io.registry.Format.__hash__", "generated/skbio.io.registry.Format.__le__", "generated/skbio.io.registry.Format.__lt__", "generated/skbio.io.registry.Format.__ne__", "generated/skbio.io.registry.Format.__str__", "generated/skbio.io.registry.Format.reader", "generated/skbio.io.registry.Format.sniffer", "generated/skbio.io.registry.Format.writer", "generated/skbio.io.registry.IORegistry", "generated/skbio.io.registry.IORegistry.__eq__", "generated/skbio.io.registry.IORegistry.__ge__", "generated/skbio.io.registry.IORegistry.__getstate__", "generated/skbio.io.registry.IORegistry.__gt__", "generated/skbio.io.registry.IORegistry.__hash__", "generated/skbio.io.registry.IORegistry.__le__", "generated/skbio.io.registry.IORegistry.__lt__", "generated/skbio.io.registry.IORegistry.__ne__", "generated/skbio.io.registry.IORegistry.__str__", "generated/skbio.io.registry.IORegistry.add_format", "generated/skbio.io.registry.IORegistry.create_format", "generated/skbio.io.registry.IORegistry.get_reader", "generated/skbio.io.registry.IORegistry.get_sniffer", "generated/skbio.io.registry.IORegistry.get_writer", "generated/skbio.io.registry.IORegistry.list_read_formats", "generated/skbio.io.registry.IORegistry.list_write_formats", "generated/skbio.io.registry.IORegistry.monkey_patch", "generated/skbio.io.registry.IORegistry.read", "generated/skbio.io.registry.IORegistry.sniff", "generated/skbio.io.registry.IORegistry.write", "generated/skbio.io.registry.create_format", "generated/skbio.io.registry.read", "generated/skbio.io.registry.sniff", "generated/skbio.io.registry.write", "generated/skbio.io.util", "generated/skbio.io.util.open", "generated/skbio.io.util.open_file", "generated/skbio.io.util.open_files", "generated/skbio.metadata.CategoricalMetadataColumn", "generated/skbio.metadata.CategoricalMetadataColumn.__eq__", "generated/skbio.metadata.CategoricalMetadataColumn.__ge__", "generated/skbio.metadata.CategoricalMetadataColumn.__getstate__", "generated/skbio.metadata.CategoricalMetadataColumn.__gt__", "generated/skbio.metadata.CategoricalMetadataColumn.__le__", "generated/skbio.metadata.CategoricalMetadataColumn.__lt__", "generated/skbio.metadata.CategoricalMetadataColumn.__ne__", "generated/skbio.metadata.CategoricalMetadataColumn.__str__", "generated/skbio.metadata.CategoricalMetadataColumn.drop_missing_values", "generated/skbio.metadata.CategoricalMetadataColumn.filter_ids", "generated/skbio.metadata.CategoricalMetadataColumn.get_ids", "generated/skbio.metadata.CategoricalMetadataColumn.get_missing", "generated/skbio.metadata.CategoricalMetadataColumn.get_value", "generated/skbio.metadata.CategoricalMetadataColumn.has_missing_values", "generated/skbio.metadata.CategoricalMetadataColumn.save", "generated/skbio.metadata.CategoricalMetadataColumn.to_dataframe", "generated/skbio.metadata.CategoricalMetadataColumn.to_series", "generated/skbio.metadata.Interval", "generated/skbio.metadata.Interval.__eq__", "generated/skbio.metadata.Interval.__ge__", "generated/skbio.metadata.Interval.__getstate__", "generated/skbio.metadata.Interval.__gt__", "generated/skbio.metadata.Interval.__le__", "generated/skbio.metadata.Interval.__lt__", "generated/skbio.metadata.Interval.__ne__", "generated/skbio.metadata.Interval.__str__", "generated/skbio.metadata.Interval.drop", "generated/skbio.metadata.IntervalMetadata", "generated/skbio.metadata.IntervalMetadata.__copy__", "generated/skbio.metadata.IntervalMetadata.__deepcopy__", "generated/skbio.metadata.IntervalMetadata.__eq__", "generated/skbio.metadata.IntervalMetadata.__ge__", "generated/skbio.metadata.IntervalMetadata.__getstate__", "generated/skbio.metadata.IntervalMetadata.__gt__", "generated/skbio.metadata.IntervalMetadata.__le__", "generated/skbio.metadata.IntervalMetadata.__lt__", "generated/skbio.metadata.IntervalMetadata.__ne__", "generated/skbio.metadata.IntervalMetadata.__str__", "generated/skbio.metadata.IntervalMetadata.add", "generated/skbio.metadata.IntervalMetadata.concat", "generated/skbio.metadata.IntervalMetadata.drop", "generated/skbio.metadata.IntervalMetadata.merge", "generated/skbio.metadata.IntervalMetadata.query", "generated/skbio.metadata.IntervalMetadata.read", "generated/skbio.metadata.IntervalMetadata.sort", "generated/skbio.metadata.IntervalMetadata.write", "generated/skbio.metadata.MetadataColumn", "generated/skbio.metadata.MetadataColumn.__eq__", "generated/skbio.metadata.MetadataColumn.__ge__", "generated/skbio.metadata.MetadataColumn.__getstate__", "generated/skbio.metadata.MetadataColumn.__gt__", "generated/skbio.metadata.MetadataColumn.__le__", "generated/skbio.metadata.MetadataColumn.__lt__", "generated/skbio.metadata.MetadataColumn.__ne__", "generated/skbio.metadata.MetadataColumn.__str__", "generated/skbio.metadata.MetadataColumn.drop_missing_values", "generated/skbio.metadata.MetadataColumn.filter_ids", "generated/skbio.metadata.MetadataColumn.get_ids", "generated/skbio.metadata.MetadataColumn.get_missing", "generated/skbio.metadata.MetadataColumn.get_value", "generated/skbio.metadata.MetadataColumn.has_missing_values", "generated/skbio.metadata.MetadataColumn.save", "generated/skbio.metadata.MetadataColumn.to_dataframe", "generated/skbio.metadata.MetadataColumn.to_series", "generated/skbio.metadata.NumericMetadataColumn", "generated/skbio.metadata.NumericMetadataColumn.__eq__", "generated/skbio.metadata.NumericMetadataColumn.__ge__", "generated/skbio.metadata.NumericMetadataColumn.__getstate__", "generated/skbio.metadata.NumericMetadataColumn.__gt__", "generated/skbio.metadata.NumericMetadataColumn.__le__", "generated/skbio.metadata.NumericMetadataColumn.__lt__", "generated/skbio.metadata.NumericMetadataColumn.__ne__", "generated/skbio.metadata.NumericMetadataColumn.__str__", "generated/skbio.metadata.NumericMetadataColumn.drop_missing_values", "generated/skbio.metadata.NumericMetadataColumn.filter_ids", "generated/skbio.metadata.NumericMetadataColumn.get_ids", "generated/skbio.metadata.NumericMetadataColumn.get_missing", "generated/skbio.metadata.NumericMetadataColumn.get_value", "generated/skbio.metadata.NumericMetadataColumn.has_missing_values", "generated/skbio.metadata.NumericMetadataColumn.save", "generated/skbio.metadata.NumericMetadataColumn.to_dataframe", "generated/skbio.metadata.NumericMetadataColumn.to_series", "generated/skbio.metadata.SampleMetadata", "generated/skbio.metadata.SampleMetadata.__eq__", "generated/skbio.metadata.SampleMetadata.__ge__", "generated/skbio.metadata.SampleMetadata.__getstate__", "generated/skbio.metadata.SampleMetadata.__gt__", "generated/skbio.metadata.SampleMetadata.__le__", "generated/skbio.metadata.SampleMetadata.__lt__", "generated/skbio.metadata.SampleMetadata.__ne__", "generated/skbio.metadata.SampleMetadata.__str__", "generated/skbio.metadata.SampleMetadata.filter_columns", "generated/skbio.metadata.SampleMetadata.filter_ids", "generated/skbio.metadata.SampleMetadata.get_column", "generated/skbio.metadata.SampleMetadata.get_ids", "generated/skbio.metadata.SampleMetadata.load", "generated/skbio.metadata.SampleMetadata.merge", "generated/skbio.metadata.SampleMetadata.read", "generated/skbio.metadata.SampleMetadata.save", "generated/skbio.metadata.SampleMetadata.to_dataframe", "generated/skbio.metadata.SampleMetadata.write", "generated/skbio.sequence.DNA", "generated/skbio.sequence.DNA.__bool__", "generated/skbio.sequence.DNA.__contains__", "generated/skbio.sequence.DNA.__copy__", "generated/skbio.sequence.DNA.__deepcopy__", "generated/skbio.sequence.DNA.__eq__", "generated/skbio.sequence.DNA.__ge__", "generated/skbio.sequence.DNA.__getitem__", "generated/skbio.sequence.DNA.__getstate__", "generated/skbio.sequence.DNA.__gt__", "generated/skbio.sequence.DNA.__iter__", "generated/skbio.sequence.DNA.__le__", "generated/skbio.sequence.DNA.__len__", "generated/skbio.sequence.DNA.__lt__", "generated/skbio.sequence.DNA.__ne__", "generated/skbio.sequence.DNA.__reversed__", "generated/skbio.sequence.DNA.__str__", "generated/skbio.sequence.DNA.complement", "generated/skbio.sequence.DNA.concat", "generated/skbio.sequence.DNA.count", "generated/skbio.sequence.DNA.definites", "generated/skbio.sequence.DNA.degap", "generated/skbio.sequence.DNA.degenerates", "generated/skbio.sequence.DNA.distance", "generated/skbio.sequence.DNA.expand_degenerates", "generated/skbio.sequence.DNA.find_motifs", "generated/skbio.sequence.DNA.find_with_regex", "generated/skbio.sequence.DNA.frequencies", "generated/skbio.sequence.DNA.gaps", "generated/skbio.sequence.DNA.gc_content", "generated/skbio.sequence.DNA.gc_frequency", "generated/skbio.sequence.DNA.has_definites", "generated/skbio.sequence.DNA.has_degenerates", "generated/skbio.sequence.DNA.has_gaps", "generated/skbio.sequence.DNA.has_interval_metadata", "generated/skbio.sequence.DNA.has_metadata", "generated/skbio.sequence.DNA.has_nondegenerates", "generated/skbio.sequence.DNA.has_positional_metadata", "generated/skbio.sequence.DNA.index", "generated/skbio.sequence.DNA.is_reverse_complement", "generated/skbio.sequence.DNA.iter_contiguous", "generated/skbio.sequence.DNA.iter_kmers", "generated/skbio.sequence.DNA.kmer_frequencies", "generated/skbio.sequence.DNA.lowercase", "generated/skbio.sequence.DNA.match_frequency", "generated/skbio.sequence.DNA.matches", "generated/skbio.sequence.DNA.mismatch_frequency", "generated/skbio.sequence.DNA.mismatches", "generated/skbio.sequence.DNA.nondegenerates", "generated/skbio.sequence.DNA.read", "generated/skbio.sequence.DNA.replace", "generated/skbio.sequence.DNA.reverse_complement", "generated/skbio.sequence.DNA.to_definites", "generated/skbio.sequence.DNA.to_indices", "generated/skbio.sequence.DNA.to_regex", "generated/skbio.sequence.DNA.transcribe", "generated/skbio.sequence.DNA.translate", "generated/skbio.sequence.DNA.translate_six_frames", "generated/skbio.sequence.DNA.write", "generated/skbio.sequence.GeneticCode", "generated/skbio.sequence.GeneticCode.__eq__", "generated/skbio.sequence.GeneticCode.__ge__", "generated/skbio.sequence.GeneticCode.__getstate__", "generated/skbio.sequence.GeneticCode.__gt__", "generated/skbio.sequence.GeneticCode.__le__", "generated/skbio.sequence.GeneticCode.__lt__", "generated/skbio.sequence.GeneticCode.__ne__", "generated/skbio.sequence.GeneticCode.__str__", "generated/skbio.sequence.GeneticCode.from_ncbi", "generated/skbio.sequence.GeneticCode.translate", "generated/skbio.sequence.GeneticCode.translate_six_frames", "generated/skbio.sequence.GrammaredSequence", "generated/skbio.sequence.GrammaredSequence.__bool__", "generated/skbio.sequence.GrammaredSequence.__contains__", "generated/skbio.sequence.GrammaredSequence.__copy__", "generated/skbio.sequence.GrammaredSequence.__deepcopy__", "generated/skbio.sequence.GrammaredSequence.__eq__", "generated/skbio.sequence.GrammaredSequence.__ge__", "generated/skbio.sequence.GrammaredSequence.__getitem__", "generated/skbio.sequence.GrammaredSequence.__getstate__", "generated/skbio.sequence.GrammaredSequence.__gt__", "generated/skbio.sequence.GrammaredSequence.__iter__", "generated/skbio.sequence.GrammaredSequence.__le__", "generated/skbio.sequence.GrammaredSequence.__len__", "generated/skbio.sequence.GrammaredSequence.__lt__", "generated/skbio.sequence.GrammaredSequence.__ne__", "generated/skbio.sequence.GrammaredSequence.__reversed__", "generated/skbio.sequence.GrammaredSequence.__str__", "generated/skbio.sequence.GrammaredSequence.concat", "generated/skbio.sequence.GrammaredSequence.count", "generated/skbio.sequence.GrammaredSequence.definites", "generated/skbio.sequence.GrammaredSequence.degap", "generated/skbio.sequence.GrammaredSequence.degenerates", "generated/skbio.sequence.GrammaredSequence.distance", "generated/skbio.sequence.GrammaredSequence.expand_degenerates", "generated/skbio.sequence.GrammaredSequence.find_motifs", "generated/skbio.sequence.GrammaredSequence.find_with_regex", "generated/skbio.sequence.GrammaredSequence.frequencies", "generated/skbio.sequence.GrammaredSequence.gaps", "generated/skbio.sequence.GrammaredSequence.has_definites", "generated/skbio.sequence.GrammaredSequence.has_degenerates", "generated/skbio.sequence.GrammaredSequence.has_gaps", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata", "generated/skbio.sequence.GrammaredSequence.has_metadata", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata", "generated/skbio.sequence.GrammaredSequence.index", "generated/skbio.sequence.GrammaredSequence.iter_contiguous", "generated/skbio.sequence.GrammaredSequence.iter_kmers", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies", "generated/skbio.sequence.GrammaredSequence.lowercase", "generated/skbio.sequence.GrammaredSequence.match_frequency", "generated/skbio.sequence.GrammaredSequence.matches", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency", "generated/skbio.sequence.GrammaredSequence.mismatches", "generated/skbio.sequence.GrammaredSequence.nondegenerates", "generated/skbio.sequence.GrammaredSequence.read", "generated/skbio.sequence.GrammaredSequence.replace", "generated/skbio.sequence.GrammaredSequence.to_definites", "generated/skbio.sequence.GrammaredSequence.to_indices", "generated/skbio.sequence.GrammaredSequence.to_regex", "generated/skbio.sequence.GrammaredSequence.write", "generated/skbio.sequence.Protein", "generated/skbio.sequence.Protein.__bool__", "generated/skbio.sequence.Protein.__contains__", "generated/skbio.sequence.Protein.__copy__", "generated/skbio.sequence.Protein.__deepcopy__", "generated/skbio.sequence.Protein.__eq__", "generated/skbio.sequence.Protein.__ge__", "generated/skbio.sequence.Protein.__getitem__", "generated/skbio.sequence.Protein.__getstate__", "generated/skbio.sequence.Protein.__gt__", "generated/skbio.sequence.Protein.__iter__", "generated/skbio.sequence.Protein.__le__", "generated/skbio.sequence.Protein.__len__", "generated/skbio.sequence.Protein.__lt__", "generated/skbio.sequence.Protein.__ne__", "generated/skbio.sequence.Protein.__reversed__", "generated/skbio.sequence.Protein.__str__", "generated/skbio.sequence.Protein.concat", "generated/skbio.sequence.Protein.count", "generated/skbio.sequence.Protein.definites", "generated/skbio.sequence.Protein.degap", "generated/skbio.sequence.Protein.degenerates", "generated/skbio.sequence.Protein.distance", "generated/skbio.sequence.Protein.expand_degenerates", "generated/skbio.sequence.Protein.find_motifs", "generated/skbio.sequence.Protein.find_with_regex", "generated/skbio.sequence.Protein.frequencies", "generated/skbio.sequence.Protein.gaps", "generated/skbio.sequence.Protein.has_definites", "generated/skbio.sequence.Protein.has_degenerates", "generated/skbio.sequence.Protein.has_gaps", "generated/skbio.sequence.Protein.has_interval_metadata", "generated/skbio.sequence.Protein.has_metadata", "generated/skbio.sequence.Protein.has_nondegenerates", "generated/skbio.sequence.Protein.has_positional_metadata", "generated/skbio.sequence.Protein.has_stops", "generated/skbio.sequence.Protein.index", "generated/skbio.sequence.Protein.iter_contiguous", "generated/skbio.sequence.Protein.iter_kmers", "generated/skbio.sequence.Protein.kmer_frequencies", "generated/skbio.sequence.Protein.lowercase", "generated/skbio.sequence.Protein.match_frequency", "generated/skbio.sequence.Protein.matches", "generated/skbio.sequence.Protein.mismatch_frequency", "generated/skbio.sequence.Protein.mismatches", "generated/skbio.sequence.Protein.nondegenerates", "generated/skbio.sequence.Protein.read", "generated/skbio.sequence.Protein.replace", "generated/skbio.sequence.Protein.stops", "generated/skbio.sequence.Protein.to_definites", "generated/skbio.sequence.Protein.to_indices", "generated/skbio.sequence.Protein.to_regex", "generated/skbio.sequence.Protein.write", "generated/skbio.sequence.RNA", "generated/skbio.sequence.RNA.__bool__", "generated/skbio.sequence.RNA.__contains__", "generated/skbio.sequence.RNA.__copy__", "generated/skbio.sequence.RNA.__deepcopy__", "generated/skbio.sequence.RNA.__eq__", "generated/skbio.sequence.RNA.__ge__", "generated/skbio.sequence.RNA.__getitem__", "generated/skbio.sequence.RNA.__getstate__", "generated/skbio.sequence.RNA.__gt__", "generated/skbio.sequence.RNA.__iter__", "generated/skbio.sequence.RNA.__le__", "generated/skbio.sequence.RNA.__len__", "generated/skbio.sequence.RNA.__lt__", "generated/skbio.sequence.RNA.__ne__", "generated/skbio.sequence.RNA.__reversed__", "generated/skbio.sequence.RNA.__str__", "generated/skbio.sequence.RNA.complement", "generated/skbio.sequence.RNA.concat", "generated/skbio.sequence.RNA.count", "generated/skbio.sequence.RNA.definites", "generated/skbio.sequence.RNA.degap", "generated/skbio.sequence.RNA.degenerates", "generated/skbio.sequence.RNA.distance", "generated/skbio.sequence.RNA.expand_degenerates", "generated/skbio.sequence.RNA.find_motifs", "generated/skbio.sequence.RNA.find_with_regex", "generated/skbio.sequence.RNA.frequencies", "generated/skbio.sequence.RNA.gaps", "generated/skbio.sequence.RNA.gc_content", "generated/skbio.sequence.RNA.gc_frequency", "generated/skbio.sequence.RNA.has_definites", "generated/skbio.sequence.RNA.has_degenerates", "generated/skbio.sequence.RNA.has_gaps", "generated/skbio.sequence.RNA.has_interval_metadata", "generated/skbio.sequence.RNA.has_metadata", "generated/skbio.sequence.RNA.has_nondegenerates", "generated/skbio.sequence.RNA.has_positional_metadata", "generated/skbio.sequence.RNA.index", "generated/skbio.sequence.RNA.is_reverse_complement", "generated/skbio.sequence.RNA.iter_contiguous", "generated/skbio.sequence.RNA.iter_kmers", "generated/skbio.sequence.RNA.kmer_frequencies", "generated/skbio.sequence.RNA.lowercase", "generated/skbio.sequence.RNA.match_frequency", "generated/skbio.sequence.RNA.matches", "generated/skbio.sequence.RNA.mismatch_frequency", "generated/skbio.sequence.RNA.mismatches", "generated/skbio.sequence.RNA.nondegenerates", "generated/skbio.sequence.RNA.read", "generated/skbio.sequence.RNA.replace", "generated/skbio.sequence.RNA.reverse_complement", "generated/skbio.sequence.RNA.reverse_transcribe", "generated/skbio.sequence.RNA.to_definites", "generated/skbio.sequence.RNA.to_indices", "generated/skbio.sequence.RNA.to_regex", "generated/skbio.sequence.RNA.translate", "generated/skbio.sequence.RNA.translate_six_frames", "generated/skbio.sequence.RNA.write", "generated/skbio.sequence.Sequence", "generated/skbio.sequence.Sequence.__bool__", "generated/skbio.sequence.Sequence.__contains__", "generated/skbio.sequence.Sequence.__copy__", "generated/skbio.sequence.Sequence.__deepcopy__", "generated/skbio.sequence.Sequence.__eq__", "generated/skbio.sequence.Sequence.__ge__", "generated/skbio.sequence.Sequence.__getitem__", "generated/skbio.sequence.Sequence.__getstate__", "generated/skbio.sequence.Sequence.__gt__", "generated/skbio.sequence.Sequence.__iter__", "generated/skbio.sequence.Sequence.__le__", "generated/skbio.sequence.Sequence.__len__", "generated/skbio.sequence.Sequence.__lt__", "generated/skbio.sequence.Sequence.__ne__", "generated/skbio.sequence.Sequence.__reversed__", "generated/skbio.sequence.Sequence.__str__", "generated/skbio.sequence.Sequence.concat", "generated/skbio.sequence.Sequence.count", "generated/skbio.sequence.Sequence.distance", "generated/skbio.sequence.Sequence.find_with_regex", "generated/skbio.sequence.Sequence.frequencies", "generated/skbio.sequence.Sequence.has_interval_metadata", "generated/skbio.sequence.Sequence.has_metadata", "generated/skbio.sequence.Sequence.has_positional_metadata", "generated/skbio.sequence.Sequence.index", "generated/skbio.sequence.Sequence.iter_contiguous", "generated/skbio.sequence.Sequence.iter_kmers", "generated/skbio.sequence.Sequence.kmer_frequencies", "generated/skbio.sequence.Sequence.lowercase", "generated/skbio.sequence.Sequence.match_frequency", "generated/skbio.sequence.Sequence.matches", "generated/skbio.sequence.Sequence.mismatch_frequency", "generated/skbio.sequence.Sequence.mismatches", "generated/skbio.sequence.Sequence.read", "generated/skbio.sequence.Sequence.replace", "generated/skbio.sequence.Sequence.to_indices", "generated/skbio.sequence.Sequence.write", "generated/skbio.sequence.SubstitutionMatrix", "generated/skbio.sequence.SubstitutionMatrix.__contains__", "generated/skbio.sequence.SubstitutionMatrix.__eq__", "generated/skbio.sequence.SubstitutionMatrix.__ge__", "generated/skbio.sequence.SubstitutionMatrix.__getitem__", "generated/skbio.sequence.SubstitutionMatrix.__getstate__", "generated/skbio.sequence.SubstitutionMatrix.__gt__", "generated/skbio.sequence.SubstitutionMatrix.__le__", "generated/skbio.sequence.SubstitutionMatrix.__lt__", "generated/skbio.sequence.SubstitutionMatrix.__ne__", "generated/skbio.sequence.SubstitutionMatrix.__str__", "generated/skbio.sequence.SubstitutionMatrix.between", "generated/skbio.sequence.SubstitutionMatrix.by_name", "generated/skbio.sequence.SubstitutionMatrix.copy", "generated/skbio.sequence.SubstitutionMatrix.filter", "generated/skbio.sequence.SubstitutionMatrix.from_dict", "generated/skbio.sequence.SubstitutionMatrix.from_iterable", "generated/skbio.sequence.SubstitutionMatrix.get_names", "generated/skbio.sequence.SubstitutionMatrix.identity", "generated/skbio.sequence.SubstitutionMatrix.index", "generated/skbio.sequence.SubstitutionMatrix.plot", "generated/skbio.sequence.SubstitutionMatrix.read", "generated/skbio.sequence.SubstitutionMatrix.redundant_form", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame", "generated/skbio.sequence.SubstitutionMatrix.to_dict", "generated/skbio.sequence.SubstitutionMatrix.transpose", "generated/skbio.sequence.SubstitutionMatrix.within", "generated/skbio.sequence.SubstitutionMatrix.write", "generated/skbio.sequence.distance", "generated/skbio.sequence.distance.hamming", "generated/skbio.sequence.distance.kmer_distance", "generated/skbio.stats.composition", "generated/skbio.stats.composition.alr", "generated/skbio.stats.composition.alr_inv", "generated/skbio.stats.composition.ancom", "generated/skbio.stats.composition.centralize", "generated/skbio.stats.composition.closure", "generated/skbio.stats.composition.clr", "generated/skbio.stats.composition.clr_inv", "generated/skbio.stats.composition.dirmult_ttest", "generated/skbio.stats.composition.ilr", "generated/skbio.stats.composition.ilr_inv", "generated/skbio.stats.composition.inner", "generated/skbio.stats.composition.multi_replace", "generated/skbio.stats.composition.multiplicative_replacement", "generated/skbio.stats.composition.pairwise_vlr", "generated/skbio.stats.composition.perturb", "generated/skbio.stats.composition.perturb_inv", "generated/skbio.stats.composition.power", "generated/skbio.stats.composition.sbp_basis", "generated/skbio.stats.composition.tree_basis", "generated/skbio.stats.composition.vlr", "generated/skbio.stats.distance", "generated/skbio.stats.distance.DissimilarityMatrix", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__", "generated/skbio.stats.distance.DissimilarityMatrix.__le__", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__", "generated/skbio.stats.distance.DissimilarityMatrix.__str__", "generated/skbio.stats.distance.DissimilarityMatrix.between", "generated/skbio.stats.distance.DissimilarityMatrix.copy", "generated/skbio.stats.distance.DissimilarityMatrix.filter", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable", "generated/skbio.stats.distance.DissimilarityMatrix.index", "generated/skbio.stats.distance.DissimilarityMatrix.plot", "generated/skbio.stats.distance.DissimilarityMatrix.read", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame", "generated/skbio.stats.distance.DissimilarityMatrix.transpose", "generated/skbio.stats.distance.DissimilarityMatrix.within", "generated/skbio.stats.distance.DissimilarityMatrix.write", "generated/skbio.stats.distance.DistanceMatrix", "generated/skbio.stats.distance.DistanceMatrix.__contains__", "generated/skbio.stats.distance.DistanceMatrix.__eq__", "generated/skbio.stats.distance.DistanceMatrix.__ge__", "generated/skbio.stats.distance.DistanceMatrix.__getitem__", "generated/skbio.stats.distance.DistanceMatrix.__getstate__", "generated/skbio.stats.distance.DistanceMatrix.__gt__", "generated/skbio.stats.distance.DistanceMatrix.__le__", "generated/skbio.stats.distance.DistanceMatrix.__lt__", "generated/skbio.stats.distance.DistanceMatrix.__ne__", "generated/skbio.stats.distance.DistanceMatrix.__str__", "generated/skbio.stats.distance.DistanceMatrix.between", "generated/skbio.stats.distance.DistanceMatrix.condensed_form", "generated/skbio.stats.distance.DistanceMatrix.copy", "generated/skbio.stats.distance.DistanceMatrix.filter", "generated/skbio.stats.distance.DistanceMatrix.from_iterable", "generated/skbio.stats.distance.DistanceMatrix.index", "generated/skbio.stats.distance.DistanceMatrix.permute", "generated/skbio.stats.distance.DistanceMatrix.plot", "generated/skbio.stats.distance.DistanceMatrix.read", "generated/skbio.stats.distance.DistanceMatrix.redundant_form", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame", "generated/skbio.stats.distance.DistanceMatrix.to_series", "generated/skbio.stats.distance.DistanceMatrix.transpose", "generated/skbio.stats.distance.DistanceMatrix.within", "generated/skbio.stats.distance.DistanceMatrix.write", "generated/skbio.stats.distance.anosim", "generated/skbio.stats.distance.bioenv", "generated/skbio.stats.distance.mantel", "generated/skbio.stats.distance.permanova", "generated/skbio.stats.distance.permdisp", "generated/skbio.stats.distance.pwmantel", "generated/skbio.stats.distance.randdm", "generated/skbio.stats.evolve", "generated/skbio.stats.evolve.hommola_cospeciation", "generated/skbio.stats.gradient", "generated/skbio.stats.gradient.AverageGradientANOVA", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.CategoryResults", "generated/skbio.stats.gradient.CategoryResults.__eq__", "generated/skbio.stats.gradient.CategoryResults.__ge__", "generated/skbio.stats.gradient.CategoryResults.__getstate__", "generated/skbio.stats.gradient.CategoryResults.__gt__", "generated/skbio.stats.gradient.CategoryResults.__hash__", "generated/skbio.stats.gradient.CategoryResults.__le__", "generated/skbio.stats.gradient.CategoryResults.__lt__", "generated/skbio.stats.gradient.CategoryResults.__ne__", "generated/skbio.stats.gradient.CategoryResults.__str__", "generated/skbio.stats.gradient.CategoryResults.to_files", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVA", "generated/skbio.stats.gradient.GradientANOVA.__eq__", "generated/skbio.stats.gradient.GradientANOVA.__ge__", "generated/skbio.stats.gradient.GradientANOVA.__getstate__", "generated/skbio.stats.gradient.GradientANOVA.__gt__", "generated/skbio.stats.gradient.GradientANOVA.__hash__", "generated/skbio.stats.gradient.GradientANOVA.__le__", "generated/skbio.stats.gradient.GradientANOVA.__lt__", "generated/skbio.stats.gradient.GradientANOVA.__ne__", "generated/skbio.stats.gradient.GradientANOVA.__str__", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVAResults", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__", "generated/skbio.stats.gradient.GradientANOVAResults.__le__", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__", "generated/skbio.stats.gradient.GradientANOVAResults.__str__", "generated/skbio.stats.gradient.GradientANOVAResults.to_files", "generated/skbio.stats.gradient.GroupResults", "generated/skbio.stats.gradient.GroupResults.__eq__", "generated/skbio.stats.gradient.GroupResults.__ge__", "generated/skbio.stats.gradient.GroupResults.__getstate__", "generated/skbio.stats.gradient.GroupResults.__gt__", "generated/skbio.stats.gradient.GroupResults.__hash__", "generated/skbio.stats.gradient.GroupResults.__le__", "generated/skbio.stats.gradient.GroupResults.__lt__", "generated/skbio.stats.gradient.GroupResults.__ne__", "generated/skbio.stats.gradient.GroupResults.__str__", "generated/skbio.stats.gradient.GroupResults.to_files", "generated/skbio.stats.gradient.TrajectoryGradientANOVA", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.isubsample", "generated/skbio.stats.ordination", "generated/skbio.stats.ordination.OrdinationResults", "generated/skbio.stats.ordination.OrdinationResults.__eq__", "generated/skbio.stats.ordination.OrdinationResults.__ge__", "generated/skbio.stats.ordination.OrdinationResults.__getstate__", "generated/skbio.stats.ordination.OrdinationResults.__gt__", "generated/skbio.stats.ordination.OrdinationResults.__hash__", "generated/skbio.stats.ordination.OrdinationResults.__le__", "generated/skbio.stats.ordination.OrdinationResults.__lt__", "generated/skbio.stats.ordination.OrdinationResults.__ne__", "generated/skbio.stats.ordination.OrdinationResults.__str__", "generated/skbio.stats.ordination.OrdinationResults.plot", "generated/skbio.stats.ordination.OrdinationResults.read", "generated/skbio.stats.ordination.OrdinationResults.rename", "generated/skbio.stats.ordination.OrdinationResults.write", "generated/skbio.stats.ordination.ca", "generated/skbio.stats.ordination.cca", "generated/skbio.stats.ordination.corr", "generated/skbio.stats.ordination.e_matrix", "generated/skbio.stats.ordination.f_matrix", "generated/skbio.stats.ordination.mean_and_std", "generated/skbio.stats.ordination.pcoa", "generated/skbio.stats.ordination.pcoa_biplot", "generated/skbio.stats.ordination.rda", "generated/skbio.stats.ordination.scale", "generated/skbio.stats.ordination.svd_rank", "generated/skbio.stats.power", "generated/skbio.stats.power.confidence_bound", "generated/skbio.stats.power.paired_subsamples", "generated/skbio.stats.power.subsample_paired_power", "generated/skbio.stats.power.subsample_power", "generated/skbio.stats.subsample_counts", "generated/skbio.table.Table", "generated/skbio.table.Table.__eq__", "generated/skbio.table.Table.__ge__", "generated/skbio.table.Table.__getitem__", "generated/skbio.table.Table.__getstate__", "generated/skbio.table.Table.__gt__", "generated/skbio.table.Table.__iter__", "generated/skbio.table.Table.__le__", "generated/skbio.table.Table.__lt__", "generated/skbio.table.Table.__ne__", "generated/skbio.table.Table.__str__", "generated/skbio.table.Table.add_group_metadata", "generated/skbio.table.Table.add_metadata", "generated/skbio.table.Table.align_to", "generated/skbio.table.Table.align_to_dataframe", "generated/skbio.table.Table.align_tree", "generated/skbio.table.Table.collapse", "generated/skbio.table.Table.concat", "generated/skbio.table.Table.copy", "generated/skbio.table.Table.data", "generated/skbio.table.Table.del_metadata", "generated/skbio.table.Table.delimited_self", "generated/skbio.table.Table.descriptive_equality", "generated/skbio.table.Table.exists", "generated/skbio.table.Table.filter", "generated/skbio.table.Table.from_adjacency", "generated/skbio.table.Table.from_hdf5", "generated/skbio.table.Table.from_json", "generated/skbio.table.Table.from_tsv", "generated/skbio.table.Table.get_table_density", "generated/skbio.table.Table.get_value_by_ids", "generated/skbio.table.Table.group_metadata", "generated/skbio.table.Table.head", "generated/skbio.table.Table.ids", "generated/skbio.table.Table.index", "generated/skbio.table.Table.is_empty", "generated/skbio.table.Table.iter", "generated/skbio.table.Table.iter_data", "generated/skbio.table.Table.iter_pairwise", "generated/skbio.table.Table.length", "generated/skbio.table.Table.max", "generated/skbio.table.Table.merge", "generated/skbio.table.Table.metadata", "generated/skbio.table.Table.metadata_to_dataframe", "generated/skbio.table.Table.min", "generated/skbio.table.Table.nonzero", "generated/skbio.table.Table.nonzero_counts", "generated/skbio.table.Table.norm", "generated/skbio.table.Table.pa", "generated/skbio.table.Table.partition", "generated/skbio.table.Table.rankdata", "generated/skbio.table.Table.read", "generated/skbio.table.Table.reduce", "generated/skbio.table.Table.remove_empty", "generated/skbio.table.Table.sort", "generated/skbio.table.Table.sort_order", "generated/skbio.table.Table.subsample", "generated/skbio.table.Table.sum", "generated/skbio.table.Table.to_anndata", "generated/skbio.table.Table.to_dataframe", "generated/skbio.table.Table.to_hdf5", "generated/skbio.table.Table.to_json", "generated/skbio.table.Table.to_tsv", "generated/skbio.table.Table.transform", "generated/skbio.table.Table.transpose", "generated/skbio.table.Table.update_ids", "generated/skbio.table.Table.write", "generated/skbio.table.example_table", "generated/skbio.tree.TreeNode", "generated/skbio.tree.TreeNode.__copy__", "generated/skbio.tree.TreeNode.__deepcopy__", "generated/skbio.tree.TreeNode.__eq__", "generated/skbio.tree.TreeNode.__ge__", "generated/skbio.tree.TreeNode.__getitem__", "generated/skbio.tree.TreeNode.__getstate__", "generated/skbio.tree.TreeNode.__gt__", "generated/skbio.tree.TreeNode.__hash__", "generated/skbio.tree.TreeNode.__iter__", "generated/skbio.tree.TreeNode.__le__", "generated/skbio.tree.TreeNode.__len__", "generated/skbio.tree.TreeNode.__lt__", "generated/skbio.tree.TreeNode.__ne__", "generated/skbio.tree.TreeNode.__str__", "generated/skbio.tree.TreeNode.accumulate_to_ancestor", "generated/skbio.tree.TreeNode.ancestors", "generated/skbio.tree.TreeNode.append", "generated/skbio.tree.TreeNode.ascii_art", "generated/skbio.tree.TreeNode.assign_ids", "generated/skbio.tree.TreeNode.assign_supports", "generated/skbio.tree.TreeNode.bifurcate", "generated/skbio.tree.TreeNode.cache_attr", "generated/skbio.tree.TreeNode.compare_rfd", "generated/skbio.tree.TreeNode.compare_subsets", "generated/skbio.tree.TreeNode.compare_tip_distances", "generated/skbio.tree.TreeNode.copy", "generated/skbio.tree.TreeNode.count", "generated/skbio.tree.TreeNode.create_caches", "generated/skbio.tree.TreeNode.deepcopy", "generated/skbio.tree.TreeNode.descending_branch_length", "generated/skbio.tree.TreeNode.distance", "generated/skbio.tree.TreeNode.extend", "generated/skbio.tree.TreeNode.find", "generated/skbio.tree.TreeNode.find_all", "generated/skbio.tree.TreeNode.find_by_func", "generated/skbio.tree.TreeNode.find_by_id", "generated/skbio.tree.TreeNode.from_linkage_matrix", "generated/skbio.tree.TreeNode.from_taxdump", "generated/skbio.tree.TreeNode.from_taxonomy", "generated/skbio.tree.TreeNode.get_max_distance", "generated/skbio.tree.TreeNode.has_children", "generated/skbio.tree.TreeNode.index_tree", "generated/skbio.tree.TreeNode.insert", "generated/skbio.tree.TreeNode.invalidate_caches", "generated/skbio.tree.TreeNode.is_root", "generated/skbio.tree.TreeNode.is_tip", "generated/skbio.tree.TreeNode.lca", "generated/skbio.tree.TreeNode.levelorder", "generated/skbio.tree.TreeNode.lowest_common_ancestor", "generated/skbio.tree.TreeNode.neighbors", "generated/skbio.tree.TreeNode.non_tips", "generated/skbio.tree.TreeNode.observed_node_counts", "generated/skbio.tree.TreeNode.pop", "generated/skbio.tree.TreeNode.postorder", "generated/skbio.tree.TreeNode.pre_and_postorder", "generated/skbio.tree.TreeNode.preorder", "generated/skbio.tree.TreeNode.prune", "generated/skbio.tree.TreeNode.read", "generated/skbio.tree.TreeNode.remove", "generated/skbio.tree.TreeNode.remove_deleted", "generated/skbio.tree.TreeNode.root", "generated/skbio.tree.TreeNode.root_at", "generated/skbio.tree.TreeNode.root_at_midpoint", "generated/skbio.tree.TreeNode.root_by_outgroup", "generated/skbio.tree.TreeNode.shear", "generated/skbio.tree.TreeNode.shuffle", "generated/skbio.tree.TreeNode.siblings", "generated/skbio.tree.TreeNode.subset", "generated/skbio.tree.TreeNode.subsets", "generated/skbio.tree.TreeNode.subtree", "generated/skbio.tree.TreeNode.tip_tip_distances", "generated/skbio.tree.TreeNode.tips", "generated/skbio.tree.TreeNode.to_array", "generated/skbio.tree.TreeNode.to_taxonomy", "generated/skbio.tree.TreeNode.traverse", "generated/skbio.tree.TreeNode.unpack", "generated/skbio.tree.TreeNode.unpack_by_func", "generated/skbio.tree.TreeNode.unroot", "generated/skbio.tree.TreeNode.unrooted_copy", "generated/skbio.tree.TreeNode.unrooted_deepcopy", "generated/skbio.tree.TreeNode.unrooted_move", "generated/skbio.tree.TreeNode.write", "generated/skbio.tree.majority_rule", "generated/skbio.tree.nj", "generated/skbio.util.EfficiencyWarning", "generated/skbio.util.RepresentationWarning", "generated/skbio.util.assert_data_frame_almost_equal", "generated/skbio.util.assert_ordination_results_equal", "generated/skbio.util.cardinal_to_ordinal", "generated/skbio.util.classproperty", "generated/skbio.util.classproperty.__delete__", "generated/skbio.util.classproperty.__eq__", "generated/skbio.util.classproperty.__ge__", "generated/skbio.util.classproperty.__get__", "generated/skbio.util.classproperty.__getstate__", "generated/skbio.util.classproperty.__gt__", "generated/skbio.util.classproperty.__hash__", "generated/skbio.util.classproperty.__le__", "generated/skbio.util.classproperty.__lt__", "generated/skbio.util.classproperty.__ne__", "generated/skbio.util.classproperty.__set__", "generated/skbio.util.classproperty.__set_name__", "generated/skbio.util.classproperty.__str__", "generated/skbio.util.classproperty.deleter", "generated/skbio.util.classproperty.getter", "generated/skbio.util.classproperty.setter", "generated/skbio.util.find_duplicates", "generated/skbio.util.get_data_path", "generated/skbio.util.safe_md5", "generated/skbio.workflow.Workflow", "generated/skbio.workflow.Workflow.__call__", "generated/skbio.workflow.Workflow.__eq__", "generated/skbio.workflow.Workflow.__ge__", "generated/skbio.workflow.Workflow.__getstate__", "generated/skbio.workflow.Workflow.__gt__", "generated/skbio.workflow.Workflow.__hash__", "generated/skbio.workflow.Workflow.__le__", "generated/skbio.workflow.Workflow.__lt__", "generated/skbio.workflow.Workflow.__ne__", "generated/skbio.workflow.Workflow.__str__", "generated/skbio.workflow.Workflow.initialize_state", "generated/skbio.workflow.method", "generated/skbio.workflow.method.__call__", "generated/skbio.workflow.method.__eq__", "generated/skbio.workflow.method.__ge__", "generated/skbio.workflow.method.__getstate__", "generated/skbio.workflow.method.__gt__", "generated/skbio.workflow.method.__hash__", "generated/skbio.workflow.method.__le__", "generated/skbio.workflow.method.__lt__", "generated/skbio.workflow.method.__ne__", "generated/skbio.workflow.method.__str__", "generated/skbio.workflow.requires", "generated/skbio.workflow.requires.__call__", "generated/skbio.workflow.requires.__eq__", "generated/skbio.workflow.requires.__ge__", "generated/skbio.workflow.requires.__getstate__", "generated/skbio.workflow.requires.__gt__", "generated/skbio.workflow.requires.__hash__", "generated/skbio.workflow.requires.__le__", "generated/skbio.workflow.requires.__lt__", "generated/skbio.workflow.requires.__ne__", "generated/skbio.workflow.requires.__str__", "index", "io", "metadata", "sequence", "stats", "table", "tree", "util", "workflow"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["alignment.rst", "diversity.rst", "embedding.rst", "generated/skbio.alignment.AlignPath.rst", "generated/skbio.alignment.AlignPath.__eq__.rst", "generated/skbio.alignment.AlignPath.__ge__.rst", "generated/skbio.alignment.AlignPath.__getstate__.rst", "generated/skbio.alignment.AlignPath.__gt__.rst", "generated/skbio.alignment.AlignPath.__hash__.rst", "generated/skbio.alignment.AlignPath.__le__.rst", "generated/skbio.alignment.AlignPath.__lt__.rst", "generated/skbio.alignment.AlignPath.__ne__.rst", "generated/skbio.alignment.AlignPath.__str__.rst", "generated/skbio.alignment.AlignPath.from_bits.rst", "generated/skbio.alignment.AlignPath.from_coordinates.rst", "generated/skbio.alignment.AlignPath.from_indices.rst", "generated/skbio.alignment.AlignPath.from_tabular.rst", "generated/skbio.alignment.AlignPath.to_bits.rst", "generated/skbio.alignment.AlignPath.to_coordinates.rst", "generated/skbio.alignment.AlignPath.to_indices.rst", "generated/skbio.alignment.AlignmentStructure.rst", "generated/skbio.alignment.AlignmentStructure.__eq__.rst", "generated/skbio.alignment.AlignmentStructure.__ge__.rst", "generated/skbio.alignment.AlignmentStructure.__getitem__.rst", "generated/skbio.alignment.AlignmentStructure.__getstate__.rst", "generated/skbio.alignment.AlignmentStructure.__gt__.rst", "generated/skbio.alignment.AlignmentStructure.__hash__.rst", "generated/skbio.alignment.AlignmentStructure.__le__.rst", "generated/skbio.alignment.AlignmentStructure.__lt__.rst", "generated/skbio.alignment.AlignmentStructure.__ne__.rst", "generated/skbio.alignment.AlignmentStructure.__setstate__.rst", "generated/skbio.alignment.AlignmentStructure.__str__.rst", "generated/skbio.alignment.AlignmentStructure.is_zero_based.rst", "generated/skbio.alignment.AlignmentStructure.set_zero_based.rst", "generated/skbio.alignment.PairAlignPath.rst", "generated/skbio.alignment.PairAlignPath.__eq__.rst", "generated/skbio.alignment.PairAlignPath.__ge__.rst", "generated/skbio.alignment.PairAlignPath.__getstate__.rst", "generated/skbio.alignment.PairAlignPath.__gt__.rst", "generated/skbio.alignment.PairAlignPath.__hash__.rst", "generated/skbio.alignment.PairAlignPath.__le__.rst", "generated/skbio.alignment.PairAlignPath.__lt__.rst", "generated/skbio.alignment.PairAlignPath.__ne__.rst", "generated/skbio.alignment.PairAlignPath.__str__.rst", "generated/skbio.alignment.PairAlignPath.from_bits.rst", "generated/skbio.alignment.PairAlignPath.from_cigar.rst", "generated/skbio.alignment.PairAlignPath.from_coordinates.rst", "generated/skbio.alignment.PairAlignPath.from_indices.rst", "generated/skbio.alignment.PairAlignPath.from_tabular.rst", "generated/skbio.alignment.PairAlignPath.to_bits.rst", "generated/skbio.alignment.PairAlignPath.to_cigar.rst", "generated/skbio.alignment.PairAlignPath.to_coordinates.rst", "generated/skbio.alignment.PairAlignPath.to_indices.rst", "generated/skbio.alignment.StripedSmithWaterman.rst", "generated/skbio.alignment.StripedSmithWaterman.__call__.rst", "generated/skbio.alignment.StripedSmithWaterman.__eq__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ge__.rst", "generated/skbio.alignment.StripedSmithWaterman.__getstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__gt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__hash__.rst", "generated/skbio.alignment.StripedSmithWaterman.__le__.rst", "generated/skbio.alignment.StripedSmithWaterman.__lt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ne__.rst", "generated/skbio.alignment.StripedSmithWaterman.__setstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__str__.rst", "generated/skbio.alignment.TabularMSA.rst", "generated/skbio.alignment.TabularMSA.__bool__.rst", "generated/skbio.alignment.TabularMSA.__contains__.rst", "generated/skbio.alignment.TabularMSA.__copy__.rst", "generated/skbio.alignment.TabularMSA.__deepcopy__.rst", "generated/skbio.alignment.TabularMSA.__eq__.rst", "generated/skbio.alignment.TabularMSA.__ge__.rst", "generated/skbio.alignment.TabularMSA.__getitem__.rst", "generated/skbio.alignment.TabularMSA.__getstate__.rst", "generated/skbio.alignment.TabularMSA.__gt__.rst", "generated/skbio.alignment.TabularMSA.__iter__.rst", "generated/skbio.alignment.TabularMSA.__le__.rst", "generated/skbio.alignment.TabularMSA.__len__.rst", "generated/skbio.alignment.TabularMSA.__lt__.rst", "generated/skbio.alignment.TabularMSA.__ne__.rst", "generated/skbio.alignment.TabularMSA.__reversed__.rst", "generated/skbio.alignment.TabularMSA.__str__.rst", "generated/skbio.alignment.TabularMSA.append.rst", "generated/skbio.alignment.TabularMSA.consensus.rst", "generated/skbio.alignment.TabularMSA.conservation.rst", "generated/skbio.alignment.TabularMSA.extend.rst", "generated/skbio.alignment.TabularMSA.from_dict.rst", "generated/skbio.alignment.TabularMSA.from_path_seqs.rst", "generated/skbio.alignment.TabularMSA.gap_frequencies.rst", "generated/skbio.alignment.TabularMSA.has_metadata.rst", "generated/skbio.alignment.TabularMSA.has_positional_metadata.rst", "generated/skbio.alignment.TabularMSA.iter_positions.rst", "generated/skbio.alignment.TabularMSA.join.rst", "generated/skbio.alignment.TabularMSA.read.rst", "generated/skbio.alignment.TabularMSA.reassign_index.rst", "generated/skbio.alignment.TabularMSA.sort.rst", "generated/skbio.alignment.TabularMSA.to_dict.rst", "generated/skbio.alignment.TabularMSA.write.rst", "generated/skbio.alignment.global_pairwise_align.rst", "generated/skbio.alignment.global_pairwise_align_nucleotide.rst", "generated/skbio.alignment.global_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align.rst", "generated/skbio.alignment.local_pairwise_align_nucleotide.rst", "generated/skbio.alignment.local_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align_ssw.rst", "generated/skbio.alignment.make_identity_substitution_matrix.rst", "generated/skbio.diversity.alpha.rst", "generated/skbio.diversity.alpha.ace.rst", "generated/skbio.diversity.alpha.berger_parker_d.rst", "generated/skbio.diversity.alpha.brillouin_d.rst", "generated/skbio.diversity.alpha.chao1.rst", "generated/skbio.diversity.alpha.chao1_ci.rst", "generated/skbio.diversity.alpha.dominance.rst", "generated/skbio.diversity.alpha.doubles.rst", "generated/skbio.diversity.alpha.enspie.rst", "generated/skbio.diversity.alpha.esty_ci.rst", "generated/skbio.diversity.alpha.faith_pd.rst", "generated/skbio.diversity.alpha.fisher_alpha.rst", "generated/skbio.diversity.alpha.gini_index.rst", "generated/skbio.diversity.alpha.goods_coverage.rst", "generated/skbio.diversity.alpha.heip_e.rst", "generated/skbio.diversity.alpha.hill.rst", "generated/skbio.diversity.alpha.inv_simpson.rst", "generated/skbio.diversity.alpha.kempton_taylor_q.rst", "generated/skbio.diversity.alpha.lladser_ci.rst", "generated/skbio.diversity.alpha.lladser_pe.rst", "generated/skbio.diversity.alpha.margalef.rst", "generated/skbio.diversity.alpha.mcintosh_d.rst", "generated/skbio.diversity.alpha.mcintosh_e.rst", "generated/skbio.diversity.alpha.menhinick.rst", "generated/skbio.diversity.alpha.michaelis_menten_fit.rst", "generated/skbio.diversity.alpha.observed_features.rst", "generated/skbio.diversity.alpha.observed_otus.rst", "generated/skbio.diversity.alpha.osd.rst", "generated/skbio.diversity.alpha.phydiv.rst", "generated/skbio.diversity.alpha.pielou_e.rst", "generated/skbio.diversity.alpha.renyi.rst", "generated/skbio.diversity.alpha.robbins.rst", "generated/skbio.diversity.alpha.shannon.rst", "generated/skbio.diversity.alpha.simpson.rst", "generated/skbio.diversity.alpha.simpson_d.rst", "generated/skbio.diversity.alpha.simpson_e.rst", "generated/skbio.diversity.alpha.singles.rst", "generated/skbio.diversity.alpha.sobs.rst", "generated/skbio.diversity.alpha.strong.rst", "generated/skbio.diversity.alpha.tsallis.rst", "generated/skbio.diversity.alpha_diversity.rst", "generated/skbio.diversity.beta.rst", "generated/skbio.diversity.beta.unweighted_unifrac.rst", "generated/skbio.diversity.beta.weighted_unifrac.rst", "generated/skbio.diversity.beta_diversity.rst", "generated/skbio.diversity.block_beta_diversity.rst", "generated/skbio.diversity.get_alpha_diversity_metrics.rst", "generated/skbio.diversity.get_beta_diversity_metrics.rst", "generated/skbio.diversity.partial_beta_diversity.rst", "generated/skbio.embedding.Embedding.rst", "generated/skbio.embedding.Embedding.__eq__.rst", "generated/skbio.embedding.Embedding.__ge__.rst", "generated/skbio.embedding.Embedding.__getstate__.rst", "generated/skbio.embedding.Embedding.__gt__.rst", "generated/skbio.embedding.Embedding.__hash__.rst", "generated/skbio.embedding.Embedding.__le__.rst", "generated/skbio.embedding.Embedding.__lt__.rst", "generated/skbio.embedding.Embedding.__ne__.rst", "generated/skbio.embedding.Embedding.__str__.rst", "generated/skbio.embedding.Embedding.bytes.rst", "generated/skbio.embedding.ProteinEmbedding.rst", "generated/skbio.embedding.ProteinEmbedding.__eq__.rst", "generated/skbio.embedding.ProteinEmbedding.__ge__.rst", "generated/skbio.embedding.ProteinEmbedding.__getstate__.rst", "generated/skbio.embedding.ProteinEmbedding.__gt__.rst", "generated/skbio.embedding.ProteinEmbedding.__hash__.rst", "generated/skbio.embedding.ProteinEmbedding.__le__.rst", "generated/skbio.embedding.ProteinEmbedding.__lt__.rst", "generated/skbio.embedding.ProteinEmbedding.__ne__.rst", "generated/skbio.embedding.ProteinEmbedding.__str__.rst", "generated/skbio.embedding.ProteinEmbedding.bytes.rst", "generated/skbio.embedding.ProteinEmbedding.read.rst", "generated/skbio.embedding.ProteinEmbedding.write.rst", "generated/skbio.embedding.ProteinVector.rst", "generated/skbio.embedding.ProteinVector.__eq__.rst", "generated/skbio.embedding.ProteinVector.__ge__.rst", "generated/skbio.embedding.ProteinVector.__getstate__.rst", "generated/skbio.embedding.ProteinVector.__gt__.rst", "generated/skbio.embedding.ProteinVector.__hash__.rst", "generated/skbio.embedding.ProteinVector.__le__.rst", "generated/skbio.embedding.ProteinVector.__lt__.rst", "generated/skbio.embedding.ProteinVector.__ne__.rst", "generated/skbio.embedding.ProteinVector.__str__.rst", "generated/skbio.embedding.ProteinVector.bytes.rst", "generated/skbio.embedding.ProteinVector.read.rst", "generated/skbio.embedding.ProteinVector.write.rst", "generated/skbio.embedding.SequenceEmbedding.rst", "generated/skbio.embedding.SequenceEmbedding.__eq__.rst", "generated/skbio.embedding.SequenceEmbedding.__ge__.rst", "generated/skbio.embedding.SequenceEmbedding.__getstate__.rst", "generated/skbio.embedding.SequenceEmbedding.__gt__.rst", "generated/skbio.embedding.SequenceEmbedding.__hash__.rst", "generated/skbio.embedding.SequenceEmbedding.__le__.rst", "generated/skbio.embedding.SequenceEmbedding.__lt__.rst", "generated/skbio.embedding.SequenceEmbedding.__ne__.rst", "generated/skbio.embedding.SequenceEmbedding.__str__.rst", "generated/skbio.embedding.SequenceEmbedding.bytes.rst", "generated/skbio.embedding.SequenceVector.rst", "generated/skbio.embedding.SequenceVector.__eq__.rst", "generated/skbio.embedding.SequenceVector.__ge__.rst", "generated/skbio.embedding.SequenceVector.__getstate__.rst", "generated/skbio.embedding.SequenceVector.__gt__.rst", "generated/skbio.embedding.SequenceVector.__hash__.rst", "generated/skbio.embedding.SequenceVector.__le__.rst", "generated/skbio.embedding.SequenceVector.__lt__.rst", "generated/skbio.embedding.SequenceVector.__ne__.rst", "generated/skbio.embedding.SequenceVector.__str__.rst", "generated/skbio.embedding.SequenceVector.bytes.rst", "generated/skbio.embedding.embed_vec_to_dataframe.rst", "generated/skbio.embedding.embed_vec_to_distances.rst", "generated/skbio.embedding.embed_vec_to_numpy.rst", "generated/skbio.embedding.embed_vec_to_ordination.rst", "generated/skbio.io.format.binary_dm.rst", "generated/skbio.io.format.biom.rst", "generated/skbio.io.format.blast6.rst", "generated/skbio.io.format.blast7.rst", "generated/skbio.io.format.clustal.rst", "generated/skbio.io.format.embed.rst", "generated/skbio.io.format.embl.rst", "generated/skbio.io.format.fasta.rst", "generated/skbio.io.format.fastq.rst", "generated/skbio.io.format.genbank.rst", "generated/skbio.io.format.gff3.rst", "generated/skbio.io.format.lsmat.rst", "generated/skbio.io.format.newick.rst", "generated/skbio.io.format.ordination.rst", "generated/skbio.io.format.phylip.rst", "generated/skbio.io.format.qseq.rst", "generated/skbio.io.format.sample_metadata.rst", "generated/skbio.io.format.stockholm.rst", "generated/skbio.io.format.taxdump.rst", "generated/skbio.io.registry.rst", "generated/skbio.io.registry.Format.rst", "generated/skbio.io.registry.Format.__eq__.rst", "generated/skbio.io.registry.Format.__ge__.rst", "generated/skbio.io.registry.Format.__getstate__.rst", "generated/skbio.io.registry.Format.__gt__.rst", "generated/skbio.io.registry.Format.__hash__.rst", "generated/skbio.io.registry.Format.__le__.rst", "generated/skbio.io.registry.Format.__lt__.rst", "generated/skbio.io.registry.Format.__ne__.rst", "generated/skbio.io.registry.Format.__str__.rst", "generated/skbio.io.registry.Format.reader.rst", "generated/skbio.io.registry.Format.sniffer.rst", "generated/skbio.io.registry.Format.writer.rst", "generated/skbio.io.registry.IORegistry.rst", "generated/skbio.io.registry.IORegistry.__eq__.rst", "generated/skbio.io.registry.IORegistry.__ge__.rst", "generated/skbio.io.registry.IORegistry.__getstate__.rst", "generated/skbio.io.registry.IORegistry.__gt__.rst", "generated/skbio.io.registry.IORegistry.__hash__.rst", "generated/skbio.io.registry.IORegistry.__le__.rst", "generated/skbio.io.registry.IORegistry.__lt__.rst", "generated/skbio.io.registry.IORegistry.__ne__.rst", "generated/skbio.io.registry.IORegistry.__str__.rst", "generated/skbio.io.registry.IORegistry.add_format.rst", "generated/skbio.io.registry.IORegistry.create_format.rst", "generated/skbio.io.registry.IORegistry.get_reader.rst", "generated/skbio.io.registry.IORegistry.get_sniffer.rst", "generated/skbio.io.registry.IORegistry.get_writer.rst", "generated/skbio.io.registry.IORegistry.list_read_formats.rst", "generated/skbio.io.registry.IORegistry.list_write_formats.rst", "generated/skbio.io.registry.IORegistry.monkey_patch.rst", "generated/skbio.io.registry.IORegistry.read.rst", "generated/skbio.io.registry.IORegistry.sniff.rst", "generated/skbio.io.registry.IORegistry.write.rst", "generated/skbio.io.registry.create_format.rst", "generated/skbio.io.registry.read.rst", "generated/skbio.io.registry.sniff.rst", "generated/skbio.io.registry.write.rst", "generated/skbio.io.util.rst", "generated/skbio.io.util.open.rst", "generated/skbio.io.util.open_file.rst", "generated/skbio.io.util.open_files.rst", "generated/skbio.metadata.CategoricalMetadataColumn.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__eq__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__ge__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__getstate__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__gt__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__le__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__lt__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__ne__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__str__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.drop_missing_values.rst", "generated/skbio.metadata.CategoricalMetadataColumn.filter_ids.rst", "generated/skbio.metadata.CategoricalMetadataColumn.get_ids.rst", "generated/skbio.metadata.CategoricalMetadataColumn.get_missing.rst", "generated/skbio.metadata.CategoricalMetadataColumn.get_value.rst", "generated/skbio.metadata.CategoricalMetadataColumn.has_missing_values.rst", "generated/skbio.metadata.CategoricalMetadataColumn.save.rst", "generated/skbio.metadata.CategoricalMetadataColumn.to_dataframe.rst", "generated/skbio.metadata.CategoricalMetadataColumn.to_series.rst", "generated/skbio.metadata.Interval.rst", "generated/skbio.metadata.Interval.__eq__.rst", "generated/skbio.metadata.Interval.__ge__.rst", "generated/skbio.metadata.Interval.__getstate__.rst", "generated/skbio.metadata.Interval.__gt__.rst", "generated/skbio.metadata.Interval.__le__.rst", "generated/skbio.metadata.Interval.__lt__.rst", "generated/skbio.metadata.Interval.__ne__.rst", "generated/skbio.metadata.Interval.__str__.rst", "generated/skbio.metadata.Interval.drop.rst", "generated/skbio.metadata.IntervalMetadata.rst", "generated/skbio.metadata.IntervalMetadata.__copy__.rst", "generated/skbio.metadata.IntervalMetadata.__deepcopy__.rst", "generated/skbio.metadata.IntervalMetadata.__eq__.rst", "generated/skbio.metadata.IntervalMetadata.__ge__.rst", "generated/skbio.metadata.IntervalMetadata.__getstate__.rst", "generated/skbio.metadata.IntervalMetadata.__gt__.rst", "generated/skbio.metadata.IntervalMetadata.__le__.rst", "generated/skbio.metadata.IntervalMetadata.__lt__.rst", "generated/skbio.metadata.IntervalMetadata.__ne__.rst", "generated/skbio.metadata.IntervalMetadata.__str__.rst", "generated/skbio.metadata.IntervalMetadata.add.rst", "generated/skbio.metadata.IntervalMetadata.concat.rst", "generated/skbio.metadata.IntervalMetadata.drop.rst", "generated/skbio.metadata.IntervalMetadata.merge.rst", "generated/skbio.metadata.IntervalMetadata.query.rst", "generated/skbio.metadata.IntervalMetadata.read.rst", "generated/skbio.metadata.IntervalMetadata.sort.rst", "generated/skbio.metadata.IntervalMetadata.write.rst", "generated/skbio.metadata.MetadataColumn.rst", "generated/skbio.metadata.MetadataColumn.__eq__.rst", "generated/skbio.metadata.MetadataColumn.__ge__.rst", "generated/skbio.metadata.MetadataColumn.__getstate__.rst", "generated/skbio.metadata.MetadataColumn.__gt__.rst", "generated/skbio.metadata.MetadataColumn.__le__.rst", "generated/skbio.metadata.MetadataColumn.__lt__.rst", "generated/skbio.metadata.MetadataColumn.__ne__.rst", "generated/skbio.metadata.MetadataColumn.__str__.rst", "generated/skbio.metadata.MetadataColumn.drop_missing_values.rst", "generated/skbio.metadata.MetadataColumn.filter_ids.rst", "generated/skbio.metadata.MetadataColumn.get_ids.rst", "generated/skbio.metadata.MetadataColumn.get_missing.rst", "generated/skbio.metadata.MetadataColumn.get_value.rst", "generated/skbio.metadata.MetadataColumn.has_missing_values.rst", "generated/skbio.metadata.MetadataColumn.save.rst", "generated/skbio.metadata.MetadataColumn.to_dataframe.rst", "generated/skbio.metadata.MetadataColumn.to_series.rst", "generated/skbio.metadata.NumericMetadataColumn.rst", "generated/skbio.metadata.NumericMetadataColumn.__eq__.rst", "generated/skbio.metadata.NumericMetadataColumn.__ge__.rst", "generated/skbio.metadata.NumericMetadataColumn.__getstate__.rst", "generated/skbio.metadata.NumericMetadataColumn.__gt__.rst", "generated/skbio.metadata.NumericMetadataColumn.__le__.rst", "generated/skbio.metadata.NumericMetadataColumn.__lt__.rst", "generated/skbio.metadata.NumericMetadataColumn.__ne__.rst", "generated/skbio.metadata.NumericMetadataColumn.__str__.rst", "generated/skbio.metadata.NumericMetadataColumn.drop_missing_values.rst", "generated/skbio.metadata.NumericMetadataColumn.filter_ids.rst", "generated/skbio.metadata.NumericMetadataColumn.get_ids.rst", "generated/skbio.metadata.NumericMetadataColumn.get_missing.rst", "generated/skbio.metadata.NumericMetadataColumn.get_value.rst", "generated/skbio.metadata.NumericMetadataColumn.has_missing_values.rst", "generated/skbio.metadata.NumericMetadataColumn.save.rst", "generated/skbio.metadata.NumericMetadataColumn.to_dataframe.rst", "generated/skbio.metadata.NumericMetadataColumn.to_series.rst", "generated/skbio.metadata.SampleMetadata.rst", "generated/skbio.metadata.SampleMetadata.__eq__.rst", "generated/skbio.metadata.SampleMetadata.__ge__.rst", "generated/skbio.metadata.SampleMetadata.__getstate__.rst", "generated/skbio.metadata.SampleMetadata.__gt__.rst", "generated/skbio.metadata.SampleMetadata.__le__.rst", "generated/skbio.metadata.SampleMetadata.__lt__.rst", "generated/skbio.metadata.SampleMetadata.__ne__.rst", "generated/skbio.metadata.SampleMetadata.__str__.rst", "generated/skbio.metadata.SampleMetadata.filter_columns.rst", "generated/skbio.metadata.SampleMetadata.filter_ids.rst", "generated/skbio.metadata.SampleMetadata.get_column.rst", "generated/skbio.metadata.SampleMetadata.get_ids.rst", "generated/skbio.metadata.SampleMetadata.load.rst", "generated/skbio.metadata.SampleMetadata.merge.rst", "generated/skbio.metadata.SampleMetadata.read.rst", "generated/skbio.metadata.SampleMetadata.save.rst", "generated/skbio.metadata.SampleMetadata.to_dataframe.rst", "generated/skbio.metadata.SampleMetadata.write.rst", "generated/skbio.sequence.DNA.rst", "generated/skbio.sequence.DNA.__bool__.rst", "generated/skbio.sequence.DNA.__contains__.rst", "generated/skbio.sequence.DNA.__copy__.rst", "generated/skbio.sequence.DNA.__deepcopy__.rst", "generated/skbio.sequence.DNA.__eq__.rst", "generated/skbio.sequence.DNA.__ge__.rst", "generated/skbio.sequence.DNA.__getitem__.rst", "generated/skbio.sequence.DNA.__getstate__.rst", "generated/skbio.sequence.DNA.__gt__.rst", "generated/skbio.sequence.DNA.__iter__.rst", "generated/skbio.sequence.DNA.__le__.rst", "generated/skbio.sequence.DNA.__len__.rst", "generated/skbio.sequence.DNA.__lt__.rst", "generated/skbio.sequence.DNA.__ne__.rst", "generated/skbio.sequence.DNA.__reversed__.rst", "generated/skbio.sequence.DNA.__str__.rst", "generated/skbio.sequence.DNA.complement.rst", "generated/skbio.sequence.DNA.concat.rst", "generated/skbio.sequence.DNA.count.rst", "generated/skbio.sequence.DNA.definites.rst", "generated/skbio.sequence.DNA.degap.rst", "generated/skbio.sequence.DNA.degenerates.rst", "generated/skbio.sequence.DNA.distance.rst", "generated/skbio.sequence.DNA.expand_degenerates.rst", "generated/skbio.sequence.DNA.find_motifs.rst", "generated/skbio.sequence.DNA.find_with_regex.rst", "generated/skbio.sequence.DNA.frequencies.rst", "generated/skbio.sequence.DNA.gaps.rst", "generated/skbio.sequence.DNA.gc_content.rst", "generated/skbio.sequence.DNA.gc_frequency.rst", "generated/skbio.sequence.DNA.has_definites.rst", "generated/skbio.sequence.DNA.has_degenerates.rst", "generated/skbio.sequence.DNA.has_gaps.rst", "generated/skbio.sequence.DNA.has_interval_metadata.rst", "generated/skbio.sequence.DNA.has_metadata.rst", "generated/skbio.sequence.DNA.has_nondegenerates.rst", "generated/skbio.sequence.DNA.has_positional_metadata.rst", "generated/skbio.sequence.DNA.index.rst", "generated/skbio.sequence.DNA.is_reverse_complement.rst", "generated/skbio.sequence.DNA.iter_contiguous.rst", "generated/skbio.sequence.DNA.iter_kmers.rst", "generated/skbio.sequence.DNA.kmer_frequencies.rst", "generated/skbio.sequence.DNA.lowercase.rst", "generated/skbio.sequence.DNA.match_frequency.rst", "generated/skbio.sequence.DNA.matches.rst", "generated/skbio.sequence.DNA.mismatch_frequency.rst", "generated/skbio.sequence.DNA.mismatches.rst", "generated/skbio.sequence.DNA.nondegenerates.rst", "generated/skbio.sequence.DNA.read.rst", "generated/skbio.sequence.DNA.replace.rst", "generated/skbio.sequence.DNA.reverse_complement.rst", "generated/skbio.sequence.DNA.to_definites.rst", "generated/skbio.sequence.DNA.to_indices.rst", "generated/skbio.sequence.DNA.to_regex.rst", "generated/skbio.sequence.DNA.transcribe.rst", "generated/skbio.sequence.DNA.translate.rst", "generated/skbio.sequence.DNA.translate_six_frames.rst", "generated/skbio.sequence.DNA.write.rst", "generated/skbio.sequence.GeneticCode.rst", "generated/skbio.sequence.GeneticCode.__eq__.rst", "generated/skbio.sequence.GeneticCode.__ge__.rst", "generated/skbio.sequence.GeneticCode.__getstate__.rst", "generated/skbio.sequence.GeneticCode.__gt__.rst", "generated/skbio.sequence.GeneticCode.__le__.rst", "generated/skbio.sequence.GeneticCode.__lt__.rst", "generated/skbio.sequence.GeneticCode.__ne__.rst", "generated/skbio.sequence.GeneticCode.__str__.rst", "generated/skbio.sequence.GeneticCode.from_ncbi.rst", "generated/skbio.sequence.GeneticCode.translate.rst", "generated/skbio.sequence.GeneticCode.translate_six_frames.rst", "generated/skbio.sequence.GrammaredSequence.rst", "generated/skbio.sequence.GrammaredSequence.__bool__.rst", "generated/skbio.sequence.GrammaredSequence.__contains__.rst", "generated/skbio.sequence.GrammaredSequence.__copy__.rst", "generated/skbio.sequence.GrammaredSequence.__deepcopy__.rst", "generated/skbio.sequence.GrammaredSequence.__eq__.rst", "generated/skbio.sequence.GrammaredSequence.__ge__.rst", "generated/skbio.sequence.GrammaredSequence.__getitem__.rst", "generated/skbio.sequence.GrammaredSequence.__getstate__.rst", "generated/skbio.sequence.GrammaredSequence.__gt__.rst", "generated/skbio.sequence.GrammaredSequence.__iter__.rst", "generated/skbio.sequence.GrammaredSequence.__le__.rst", "generated/skbio.sequence.GrammaredSequence.__len__.rst", "generated/skbio.sequence.GrammaredSequence.__lt__.rst", "generated/skbio.sequence.GrammaredSequence.__ne__.rst", "generated/skbio.sequence.GrammaredSequence.__reversed__.rst", "generated/skbio.sequence.GrammaredSequence.__str__.rst", "generated/skbio.sequence.GrammaredSequence.concat.rst", "generated/skbio.sequence.GrammaredSequence.count.rst", "generated/skbio.sequence.GrammaredSequence.definites.rst", "generated/skbio.sequence.GrammaredSequence.degap.rst", "generated/skbio.sequence.GrammaredSequence.degenerates.rst", "generated/skbio.sequence.GrammaredSequence.distance.rst", "generated/skbio.sequence.GrammaredSequence.expand_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.find_motifs.rst", "generated/skbio.sequence.GrammaredSequence.find_with_regex.rst", "generated/skbio.sequence.GrammaredSequence.frequencies.rst", "generated/skbio.sequence.GrammaredSequence.gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_definites.rst", "generated/skbio.sequence.GrammaredSequence.has_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata.rst", "generated/skbio.sequence.GrammaredSequence.index.rst", "generated/skbio.sequence.GrammaredSequence.iter_contiguous.rst", "generated/skbio.sequence.GrammaredSequence.iter_kmers.rst", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies.rst", "generated/skbio.sequence.GrammaredSequence.lowercase.rst", "generated/skbio.sequence.GrammaredSequence.match_frequency.rst", "generated/skbio.sequence.GrammaredSequence.matches.rst", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency.rst", "generated/skbio.sequence.GrammaredSequence.mismatches.rst", "generated/skbio.sequence.GrammaredSequence.nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.read.rst", "generated/skbio.sequence.GrammaredSequence.replace.rst", "generated/skbio.sequence.GrammaredSequence.to_definites.rst", "generated/skbio.sequence.GrammaredSequence.to_indices.rst", "generated/skbio.sequence.GrammaredSequence.to_regex.rst", "generated/skbio.sequence.GrammaredSequence.write.rst", "generated/skbio.sequence.Protein.rst", "generated/skbio.sequence.Protein.__bool__.rst", "generated/skbio.sequence.Protein.__contains__.rst", "generated/skbio.sequence.Protein.__copy__.rst", "generated/skbio.sequence.Protein.__deepcopy__.rst", "generated/skbio.sequence.Protein.__eq__.rst", "generated/skbio.sequence.Protein.__ge__.rst", "generated/skbio.sequence.Protein.__getitem__.rst", "generated/skbio.sequence.Protein.__getstate__.rst", "generated/skbio.sequence.Protein.__gt__.rst", "generated/skbio.sequence.Protein.__iter__.rst", "generated/skbio.sequence.Protein.__le__.rst", "generated/skbio.sequence.Protein.__len__.rst", "generated/skbio.sequence.Protein.__lt__.rst", "generated/skbio.sequence.Protein.__ne__.rst", "generated/skbio.sequence.Protein.__reversed__.rst", "generated/skbio.sequence.Protein.__str__.rst", "generated/skbio.sequence.Protein.concat.rst", "generated/skbio.sequence.Protein.count.rst", "generated/skbio.sequence.Protein.definites.rst", "generated/skbio.sequence.Protein.degap.rst", "generated/skbio.sequence.Protein.degenerates.rst", "generated/skbio.sequence.Protein.distance.rst", "generated/skbio.sequence.Protein.expand_degenerates.rst", "generated/skbio.sequence.Protein.find_motifs.rst", "generated/skbio.sequence.Protein.find_with_regex.rst", "generated/skbio.sequence.Protein.frequencies.rst", "generated/skbio.sequence.Protein.gaps.rst", "generated/skbio.sequence.Protein.has_definites.rst", "generated/skbio.sequence.Protein.has_degenerates.rst", "generated/skbio.sequence.Protein.has_gaps.rst", "generated/skbio.sequence.Protein.has_interval_metadata.rst", "generated/skbio.sequence.Protein.has_metadata.rst", "generated/skbio.sequence.Protein.has_nondegenerates.rst", "generated/skbio.sequence.Protein.has_positional_metadata.rst", "generated/skbio.sequence.Protein.has_stops.rst", "generated/skbio.sequence.Protein.index.rst", "generated/skbio.sequence.Protein.iter_contiguous.rst", "generated/skbio.sequence.Protein.iter_kmers.rst", "generated/skbio.sequence.Protein.kmer_frequencies.rst", "generated/skbio.sequence.Protein.lowercase.rst", "generated/skbio.sequence.Protein.match_frequency.rst", "generated/skbio.sequence.Protein.matches.rst", "generated/skbio.sequence.Protein.mismatch_frequency.rst", "generated/skbio.sequence.Protein.mismatches.rst", "generated/skbio.sequence.Protein.nondegenerates.rst", "generated/skbio.sequence.Protein.read.rst", "generated/skbio.sequence.Protein.replace.rst", "generated/skbio.sequence.Protein.stops.rst", "generated/skbio.sequence.Protein.to_definites.rst", "generated/skbio.sequence.Protein.to_indices.rst", "generated/skbio.sequence.Protein.to_regex.rst", "generated/skbio.sequence.Protein.write.rst", "generated/skbio.sequence.RNA.rst", "generated/skbio.sequence.RNA.__bool__.rst", "generated/skbio.sequence.RNA.__contains__.rst", "generated/skbio.sequence.RNA.__copy__.rst", "generated/skbio.sequence.RNA.__deepcopy__.rst", "generated/skbio.sequence.RNA.__eq__.rst", "generated/skbio.sequence.RNA.__ge__.rst", "generated/skbio.sequence.RNA.__getitem__.rst", "generated/skbio.sequence.RNA.__getstate__.rst", "generated/skbio.sequence.RNA.__gt__.rst", "generated/skbio.sequence.RNA.__iter__.rst", "generated/skbio.sequence.RNA.__le__.rst", "generated/skbio.sequence.RNA.__len__.rst", "generated/skbio.sequence.RNA.__lt__.rst", "generated/skbio.sequence.RNA.__ne__.rst", "generated/skbio.sequence.RNA.__reversed__.rst", "generated/skbio.sequence.RNA.__str__.rst", "generated/skbio.sequence.RNA.complement.rst", "generated/skbio.sequence.RNA.concat.rst", "generated/skbio.sequence.RNA.count.rst", "generated/skbio.sequence.RNA.definites.rst", "generated/skbio.sequence.RNA.degap.rst", "generated/skbio.sequence.RNA.degenerates.rst", "generated/skbio.sequence.RNA.distance.rst", "generated/skbio.sequence.RNA.expand_degenerates.rst", "generated/skbio.sequence.RNA.find_motifs.rst", "generated/skbio.sequence.RNA.find_with_regex.rst", "generated/skbio.sequence.RNA.frequencies.rst", "generated/skbio.sequence.RNA.gaps.rst", "generated/skbio.sequence.RNA.gc_content.rst", "generated/skbio.sequence.RNA.gc_frequency.rst", "generated/skbio.sequence.RNA.has_definites.rst", "generated/skbio.sequence.RNA.has_degenerates.rst", "generated/skbio.sequence.RNA.has_gaps.rst", "generated/skbio.sequence.RNA.has_interval_metadata.rst", "generated/skbio.sequence.RNA.has_metadata.rst", "generated/skbio.sequence.RNA.has_nondegenerates.rst", "generated/skbio.sequence.RNA.has_positional_metadata.rst", "generated/skbio.sequence.RNA.index.rst", "generated/skbio.sequence.RNA.is_reverse_complement.rst", "generated/skbio.sequence.RNA.iter_contiguous.rst", "generated/skbio.sequence.RNA.iter_kmers.rst", "generated/skbio.sequence.RNA.kmer_frequencies.rst", "generated/skbio.sequence.RNA.lowercase.rst", "generated/skbio.sequence.RNA.match_frequency.rst", "generated/skbio.sequence.RNA.matches.rst", "generated/skbio.sequence.RNA.mismatch_frequency.rst", "generated/skbio.sequence.RNA.mismatches.rst", "generated/skbio.sequence.RNA.nondegenerates.rst", "generated/skbio.sequence.RNA.read.rst", "generated/skbio.sequence.RNA.replace.rst", "generated/skbio.sequence.RNA.reverse_complement.rst", "generated/skbio.sequence.RNA.reverse_transcribe.rst", "generated/skbio.sequence.RNA.to_definites.rst", "generated/skbio.sequence.RNA.to_indices.rst", "generated/skbio.sequence.RNA.to_regex.rst", "generated/skbio.sequence.RNA.translate.rst", "generated/skbio.sequence.RNA.translate_six_frames.rst", "generated/skbio.sequence.RNA.write.rst", "generated/skbio.sequence.Sequence.rst", "generated/skbio.sequence.Sequence.__bool__.rst", "generated/skbio.sequence.Sequence.__contains__.rst", "generated/skbio.sequence.Sequence.__copy__.rst", "generated/skbio.sequence.Sequence.__deepcopy__.rst", "generated/skbio.sequence.Sequence.__eq__.rst", "generated/skbio.sequence.Sequence.__ge__.rst", "generated/skbio.sequence.Sequence.__getitem__.rst", "generated/skbio.sequence.Sequence.__getstate__.rst", "generated/skbio.sequence.Sequence.__gt__.rst", "generated/skbio.sequence.Sequence.__iter__.rst", "generated/skbio.sequence.Sequence.__le__.rst", "generated/skbio.sequence.Sequence.__len__.rst", "generated/skbio.sequence.Sequence.__lt__.rst", "generated/skbio.sequence.Sequence.__ne__.rst", "generated/skbio.sequence.Sequence.__reversed__.rst", "generated/skbio.sequence.Sequence.__str__.rst", "generated/skbio.sequence.Sequence.concat.rst", "generated/skbio.sequence.Sequence.count.rst", "generated/skbio.sequence.Sequence.distance.rst", "generated/skbio.sequence.Sequence.find_with_regex.rst", "generated/skbio.sequence.Sequence.frequencies.rst", "generated/skbio.sequence.Sequence.has_interval_metadata.rst", "generated/skbio.sequence.Sequence.has_metadata.rst", "generated/skbio.sequence.Sequence.has_positional_metadata.rst", "generated/skbio.sequence.Sequence.index.rst", "generated/skbio.sequence.Sequence.iter_contiguous.rst", "generated/skbio.sequence.Sequence.iter_kmers.rst", "generated/skbio.sequence.Sequence.kmer_frequencies.rst", "generated/skbio.sequence.Sequence.lowercase.rst", "generated/skbio.sequence.Sequence.match_frequency.rst", "generated/skbio.sequence.Sequence.matches.rst", "generated/skbio.sequence.Sequence.mismatch_frequency.rst", "generated/skbio.sequence.Sequence.mismatches.rst", "generated/skbio.sequence.Sequence.read.rst", "generated/skbio.sequence.Sequence.replace.rst", "generated/skbio.sequence.Sequence.to_indices.rst", "generated/skbio.sequence.Sequence.write.rst", "generated/skbio.sequence.SubstitutionMatrix.rst", "generated/skbio.sequence.SubstitutionMatrix.__contains__.rst", "generated/skbio.sequence.SubstitutionMatrix.__eq__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ge__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getitem__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getstate__.rst", "generated/skbio.sequence.SubstitutionMatrix.__gt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__le__.rst", "generated/skbio.sequence.SubstitutionMatrix.__lt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ne__.rst", "generated/skbio.sequence.SubstitutionMatrix.__str__.rst", "generated/skbio.sequence.SubstitutionMatrix.between.rst", "generated/skbio.sequence.SubstitutionMatrix.by_name.rst", "generated/skbio.sequence.SubstitutionMatrix.copy.rst", "generated/skbio.sequence.SubstitutionMatrix.filter.rst", "generated/skbio.sequence.SubstitutionMatrix.from_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.from_iterable.rst", "generated/skbio.sequence.SubstitutionMatrix.get_names.rst", "generated/skbio.sequence.SubstitutionMatrix.identity.rst", "generated/skbio.sequence.SubstitutionMatrix.index.rst", "generated/skbio.sequence.SubstitutionMatrix.plot.rst", "generated/skbio.sequence.SubstitutionMatrix.read.rst", "generated/skbio.sequence.SubstitutionMatrix.redundant_form.rst", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame.rst", "generated/skbio.sequence.SubstitutionMatrix.to_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.transpose.rst", "generated/skbio.sequence.SubstitutionMatrix.within.rst", "generated/skbio.sequence.SubstitutionMatrix.write.rst", "generated/skbio.sequence.distance.rst", "generated/skbio.sequence.distance.hamming.rst", "generated/skbio.sequence.distance.kmer_distance.rst", "generated/skbio.stats.composition.rst", "generated/skbio.stats.composition.alr.rst", "generated/skbio.stats.composition.alr_inv.rst", "generated/skbio.stats.composition.ancom.rst", "generated/skbio.stats.composition.centralize.rst", "generated/skbio.stats.composition.closure.rst", "generated/skbio.stats.composition.clr.rst", "generated/skbio.stats.composition.clr_inv.rst", "generated/skbio.stats.composition.dirmult_ttest.rst", "generated/skbio.stats.composition.ilr.rst", "generated/skbio.stats.composition.ilr_inv.rst", "generated/skbio.stats.composition.inner.rst", "generated/skbio.stats.composition.multi_replace.rst", "generated/skbio.stats.composition.multiplicative_replacement.rst", "generated/skbio.stats.composition.pairwise_vlr.rst", "generated/skbio.stats.composition.perturb.rst", "generated/skbio.stats.composition.perturb_inv.rst", "generated/skbio.stats.composition.power.rst", "generated/skbio.stats.composition.sbp_basis.rst", "generated/skbio.stats.composition.tree_basis.rst", "generated/skbio.stats.composition.vlr.rst", "generated/skbio.stats.distance.rst", "generated/skbio.stats.distance.DissimilarityMatrix.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__le__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__str__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.between.rst", "generated/skbio.stats.distance.DissimilarityMatrix.copy.rst", "generated/skbio.stats.distance.DissimilarityMatrix.filter.rst", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable.rst", "generated/skbio.stats.distance.DissimilarityMatrix.index.rst", "generated/skbio.stats.distance.DissimilarityMatrix.plot.rst", "generated/skbio.stats.distance.DissimilarityMatrix.read.rst", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form.rst", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DissimilarityMatrix.transpose.rst", "generated/skbio.stats.distance.DissimilarityMatrix.within.rst", "generated/skbio.stats.distance.DissimilarityMatrix.write.rst", "generated/skbio.stats.distance.DistanceMatrix.rst", "generated/skbio.stats.distance.DistanceMatrix.__contains__.rst", "generated/skbio.stats.distance.DistanceMatrix.__eq__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ge__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getitem__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getstate__.rst", "generated/skbio.stats.distance.DistanceMatrix.__gt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__le__.rst", "generated/skbio.stats.distance.DistanceMatrix.__lt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ne__.rst", "generated/skbio.stats.distance.DistanceMatrix.__str__.rst", "generated/skbio.stats.distance.DistanceMatrix.between.rst", "generated/skbio.stats.distance.DistanceMatrix.condensed_form.rst", "generated/skbio.stats.distance.DistanceMatrix.copy.rst", "generated/skbio.stats.distance.DistanceMatrix.filter.rst", "generated/skbio.stats.distance.DistanceMatrix.from_iterable.rst", "generated/skbio.stats.distance.DistanceMatrix.index.rst", "generated/skbio.stats.distance.DistanceMatrix.permute.rst", "generated/skbio.stats.distance.DistanceMatrix.plot.rst", "generated/skbio.stats.distance.DistanceMatrix.read.rst", "generated/skbio.stats.distance.DistanceMatrix.redundant_form.rst", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DistanceMatrix.to_series.rst", "generated/skbio.stats.distance.DistanceMatrix.transpose.rst", "generated/skbio.stats.distance.DistanceMatrix.within.rst", "generated/skbio.stats.distance.DistanceMatrix.write.rst", "generated/skbio.stats.distance.anosim.rst", "generated/skbio.stats.distance.bioenv.rst", "generated/skbio.stats.distance.mantel.rst", "generated/skbio.stats.distance.permanova.rst", "generated/skbio.stats.distance.permdisp.rst", "generated/skbio.stats.distance.pwmantel.rst", "generated/skbio.stats.distance.randdm.rst", "generated/skbio.stats.evolve.rst", "generated/skbio.stats.evolve.hommola_cospeciation.rst", "generated/skbio.stats.gradient.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.CategoryResults.rst", "generated/skbio.stats.gradient.CategoryResults.__eq__.rst", "generated/skbio.stats.gradient.CategoryResults.__ge__.rst", "generated/skbio.stats.gradient.CategoryResults.__getstate__.rst", "generated/skbio.stats.gradient.CategoryResults.__gt__.rst", "generated/skbio.stats.gradient.CategoryResults.__hash__.rst", "generated/skbio.stats.gradient.CategoryResults.__le__.rst", "generated/skbio.stats.gradient.CategoryResults.__lt__.rst", "generated/skbio.stats.gradient.CategoryResults.__ne__.rst", "generated/skbio.stats.gradient.CategoryResults.__str__.rst", "generated/skbio.stats.gradient.CategoryResults.to_files.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVA.rst", "generated/skbio.stats.gradient.GradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVA.__le__.rst", "generated/skbio.stats.gradient.GradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVA.__str__.rst", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVAResults.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__le__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__str__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.to_files.rst", "generated/skbio.stats.gradient.GroupResults.rst", "generated/skbio.stats.gradient.GroupResults.__eq__.rst", "generated/skbio.stats.gradient.GroupResults.__ge__.rst", "generated/skbio.stats.gradient.GroupResults.__getstate__.rst", "generated/skbio.stats.gradient.GroupResults.__gt__.rst", "generated/skbio.stats.gradient.GroupResults.__hash__.rst", "generated/skbio.stats.gradient.GroupResults.__le__.rst", "generated/skbio.stats.gradient.GroupResults.__lt__.rst", "generated/skbio.stats.gradient.GroupResults.__ne__.rst", "generated/skbio.stats.gradient.GroupResults.__str__.rst", "generated/skbio.stats.gradient.GroupResults.to_files.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.isubsample.rst", "generated/skbio.stats.ordination.rst", "generated/skbio.stats.ordination.OrdinationResults.rst", "generated/skbio.stats.ordination.OrdinationResults.__eq__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ge__.rst", "generated/skbio.stats.ordination.OrdinationResults.__getstate__.rst", "generated/skbio.stats.ordination.OrdinationResults.__gt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__hash__.rst", "generated/skbio.stats.ordination.OrdinationResults.__le__.rst", "generated/skbio.stats.ordination.OrdinationResults.__lt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ne__.rst", "generated/skbio.stats.ordination.OrdinationResults.__str__.rst", "generated/skbio.stats.ordination.OrdinationResults.plot.rst", "generated/skbio.stats.ordination.OrdinationResults.read.rst", "generated/skbio.stats.ordination.OrdinationResults.rename.rst", "generated/skbio.stats.ordination.OrdinationResults.write.rst", "generated/skbio.stats.ordination.ca.rst", "generated/skbio.stats.ordination.cca.rst", "generated/skbio.stats.ordination.corr.rst", "generated/skbio.stats.ordination.e_matrix.rst", "generated/skbio.stats.ordination.f_matrix.rst", "generated/skbio.stats.ordination.mean_and_std.rst", "generated/skbio.stats.ordination.pcoa.rst", "generated/skbio.stats.ordination.pcoa_biplot.rst", "generated/skbio.stats.ordination.rda.rst", "generated/skbio.stats.ordination.scale.rst", "generated/skbio.stats.ordination.svd_rank.rst", "generated/skbio.stats.power.rst", "generated/skbio.stats.power.confidence_bound.rst", "generated/skbio.stats.power.paired_subsamples.rst", "generated/skbio.stats.power.subsample_paired_power.rst", "generated/skbio.stats.power.subsample_power.rst", "generated/skbio.stats.subsample_counts.rst", "generated/skbio.table.Table.rst", "generated/skbio.table.Table.__eq__.rst", "generated/skbio.table.Table.__ge__.rst", "generated/skbio.table.Table.__getitem__.rst", "generated/skbio.table.Table.__getstate__.rst", "generated/skbio.table.Table.__gt__.rst", "generated/skbio.table.Table.__iter__.rst", "generated/skbio.table.Table.__le__.rst", "generated/skbio.table.Table.__lt__.rst", "generated/skbio.table.Table.__ne__.rst", "generated/skbio.table.Table.__str__.rst", "generated/skbio.table.Table.add_group_metadata.rst", "generated/skbio.table.Table.add_metadata.rst", "generated/skbio.table.Table.align_to.rst", "generated/skbio.table.Table.align_to_dataframe.rst", "generated/skbio.table.Table.align_tree.rst", "generated/skbio.table.Table.collapse.rst", "generated/skbio.table.Table.concat.rst", "generated/skbio.table.Table.copy.rst", "generated/skbio.table.Table.data.rst", "generated/skbio.table.Table.del_metadata.rst", "generated/skbio.table.Table.delimited_self.rst", "generated/skbio.table.Table.descriptive_equality.rst", "generated/skbio.table.Table.exists.rst", "generated/skbio.table.Table.filter.rst", "generated/skbio.table.Table.from_adjacency.rst", "generated/skbio.table.Table.from_hdf5.rst", "generated/skbio.table.Table.from_json.rst", "generated/skbio.table.Table.from_tsv.rst", "generated/skbio.table.Table.get_table_density.rst", "generated/skbio.table.Table.get_value_by_ids.rst", "generated/skbio.table.Table.group_metadata.rst", "generated/skbio.table.Table.head.rst", "generated/skbio.table.Table.ids.rst", "generated/skbio.table.Table.index.rst", "generated/skbio.table.Table.is_empty.rst", "generated/skbio.table.Table.iter.rst", "generated/skbio.table.Table.iter_data.rst", "generated/skbio.table.Table.iter_pairwise.rst", "generated/skbio.table.Table.length.rst", "generated/skbio.table.Table.max.rst", "generated/skbio.table.Table.merge.rst", "generated/skbio.table.Table.metadata.rst", "generated/skbio.table.Table.metadata_to_dataframe.rst", "generated/skbio.table.Table.min.rst", "generated/skbio.table.Table.nonzero.rst", "generated/skbio.table.Table.nonzero_counts.rst", "generated/skbio.table.Table.norm.rst", "generated/skbio.table.Table.pa.rst", "generated/skbio.table.Table.partition.rst", "generated/skbio.table.Table.rankdata.rst", "generated/skbio.table.Table.read.rst", "generated/skbio.table.Table.reduce.rst", "generated/skbio.table.Table.remove_empty.rst", "generated/skbio.table.Table.sort.rst", "generated/skbio.table.Table.sort_order.rst", "generated/skbio.table.Table.subsample.rst", "generated/skbio.table.Table.sum.rst", "generated/skbio.table.Table.to_anndata.rst", "generated/skbio.table.Table.to_dataframe.rst", "generated/skbio.table.Table.to_hdf5.rst", "generated/skbio.table.Table.to_json.rst", "generated/skbio.table.Table.to_tsv.rst", "generated/skbio.table.Table.transform.rst", "generated/skbio.table.Table.transpose.rst", "generated/skbio.table.Table.update_ids.rst", "generated/skbio.table.Table.write.rst", "generated/skbio.table.example_table.rst", "generated/skbio.tree.TreeNode.rst", "generated/skbio.tree.TreeNode.__copy__.rst", "generated/skbio.tree.TreeNode.__deepcopy__.rst", "generated/skbio.tree.TreeNode.__eq__.rst", "generated/skbio.tree.TreeNode.__ge__.rst", "generated/skbio.tree.TreeNode.__getitem__.rst", "generated/skbio.tree.TreeNode.__getstate__.rst", "generated/skbio.tree.TreeNode.__gt__.rst", "generated/skbio.tree.TreeNode.__hash__.rst", "generated/skbio.tree.TreeNode.__iter__.rst", "generated/skbio.tree.TreeNode.__le__.rst", "generated/skbio.tree.TreeNode.__len__.rst", "generated/skbio.tree.TreeNode.__lt__.rst", "generated/skbio.tree.TreeNode.__ne__.rst", "generated/skbio.tree.TreeNode.__str__.rst", "generated/skbio.tree.TreeNode.accumulate_to_ancestor.rst", "generated/skbio.tree.TreeNode.ancestors.rst", "generated/skbio.tree.TreeNode.append.rst", "generated/skbio.tree.TreeNode.ascii_art.rst", "generated/skbio.tree.TreeNode.assign_ids.rst", "generated/skbio.tree.TreeNode.assign_supports.rst", "generated/skbio.tree.TreeNode.bifurcate.rst", "generated/skbio.tree.TreeNode.cache_attr.rst", "generated/skbio.tree.TreeNode.compare_rfd.rst", "generated/skbio.tree.TreeNode.compare_subsets.rst", "generated/skbio.tree.TreeNode.compare_tip_distances.rst", "generated/skbio.tree.TreeNode.copy.rst", "generated/skbio.tree.TreeNode.count.rst", "generated/skbio.tree.TreeNode.create_caches.rst", "generated/skbio.tree.TreeNode.deepcopy.rst", "generated/skbio.tree.TreeNode.descending_branch_length.rst", "generated/skbio.tree.TreeNode.distance.rst", "generated/skbio.tree.TreeNode.extend.rst", "generated/skbio.tree.TreeNode.find.rst", "generated/skbio.tree.TreeNode.find_all.rst", "generated/skbio.tree.TreeNode.find_by_func.rst", "generated/skbio.tree.TreeNode.find_by_id.rst", "generated/skbio.tree.TreeNode.from_linkage_matrix.rst", "generated/skbio.tree.TreeNode.from_taxdump.rst", "generated/skbio.tree.TreeNode.from_taxonomy.rst", "generated/skbio.tree.TreeNode.get_max_distance.rst", "generated/skbio.tree.TreeNode.has_children.rst", "generated/skbio.tree.TreeNode.index_tree.rst", "generated/skbio.tree.TreeNode.insert.rst", "generated/skbio.tree.TreeNode.invalidate_caches.rst", "generated/skbio.tree.TreeNode.is_root.rst", "generated/skbio.tree.TreeNode.is_tip.rst", "generated/skbio.tree.TreeNode.lca.rst", "generated/skbio.tree.TreeNode.levelorder.rst", "generated/skbio.tree.TreeNode.lowest_common_ancestor.rst", "generated/skbio.tree.TreeNode.neighbors.rst", "generated/skbio.tree.TreeNode.non_tips.rst", "generated/skbio.tree.TreeNode.observed_node_counts.rst", "generated/skbio.tree.TreeNode.pop.rst", "generated/skbio.tree.TreeNode.postorder.rst", "generated/skbio.tree.TreeNode.pre_and_postorder.rst", "generated/skbio.tree.TreeNode.preorder.rst", "generated/skbio.tree.TreeNode.prune.rst", "generated/skbio.tree.TreeNode.read.rst", "generated/skbio.tree.TreeNode.remove.rst", "generated/skbio.tree.TreeNode.remove_deleted.rst", "generated/skbio.tree.TreeNode.root.rst", "generated/skbio.tree.TreeNode.root_at.rst", "generated/skbio.tree.TreeNode.root_at_midpoint.rst", "generated/skbio.tree.TreeNode.root_by_outgroup.rst", "generated/skbio.tree.TreeNode.shear.rst", "generated/skbio.tree.TreeNode.shuffle.rst", "generated/skbio.tree.TreeNode.siblings.rst", "generated/skbio.tree.TreeNode.subset.rst", "generated/skbio.tree.TreeNode.subsets.rst", "generated/skbio.tree.TreeNode.subtree.rst", "generated/skbio.tree.TreeNode.tip_tip_distances.rst", "generated/skbio.tree.TreeNode.tips.rst", "generated/skbio.tree.TreeNode.to_array.rst", "generated/skbio.tree.TreeNode.to_taxonomy.rst", "generated/skbio.tree.TreeNode.traverse.rst", "generated/skbio.tree.TreeNode.unpack.rst", "generated/skbio.tree.TreeNode.unpack_by_func.rst", "generated/skbio.tree.TreeNode.unroot.rst", "generated/skbio.tree.TreeNode.unrooted_copy.rst", "generated/skbio.tree.TreeNode.unrooted_deepcopy.rst", "generated/skbio.tree.TreeNode.unrooted_move.rst", "generated/skbio.tree.TreeNode.write.rst", "generated/skbio.tree.majority_rule.rst", "generated/skbio.tree.nj.rst", "generated/skbio.util.EfficiencyWarning.rst", "generated/skbio.util.RepresentationWarning.rst", "generated/skbio.util.assert_data_frame_almost_equal.rst", "generated/skbio.util.assert_ordination_results_equal.rst", "generated/skbio.util.cardinal_to_ordinal.rst", "generated/skbio.util.classproperty.rst", "generated/skbio.util.classproperty.__delete__.rst", "generated/skbio.util.classproperty.__eq__.rst", "generated/skbio.util.classproperty.__ge__.rst", "generated/skbio.util.classproperty.__get__.rst", "generated/skbio.util.classproperty.__getstate__.rst", "generated/skbio.util.classproperty.__gt__.rst", "generated/skbio.util.classproperty.__hash__.rst", "generated/skbio.util.classproperty.__le__.rst", "generated/skbio.util.classproperty.__lt__.rst", "generated/skbio.util.classproperty.__ne__.rst", "generated/skbio.util.classproperty.__set__.rst", "generated/skbio.util.classproperty.__set_name__.rst", "generated/skbio.util.classproperty.__str__.rst", "generated/skbio.util.classproperty.deleter.rst", "generated/skbio.util.classproperty.getter.rst", "generated/skbio.util.classproperty.setter.rst", "generated/skbio.util.find_duplicates.rst", "generated/skbio.util.get_data_path.rst", "generated/skbio.util.safe_md5.rst", "generated/skbio.workflow.Workflow.rst", "generated/skbio.workflow.Workflow.__call__.rst", "generated/skbio.workflow.Workflow.__eq__.rst", "generated/skbio.workflow.Workflow.__ge__.rst", "generated/skbio.workflow.Workflow.__getstate__.rst", "generated/skbio.workflow.Workflow.__gt__.rst", "generated/skbio.workflow.Workflow.__hash__.rst", "generated/skbio.workflow.Workflow.__le__.rst", "generated/skbio.workflow.Workflow.__lt__.rst", "generated/skbio.workflow.Workflow.__ne__.rst", "generated/skbio.workflow.Workflow.__str__.rst", "generated/skbio.workflow.Workflow.initialize_state.rst", "generated/skbio.workflow.method.rst", "generated/skbio.workflow.method.__call__.rst", "generated/skbio.workflow.method.__eq__.rst", "generated/skbio.workflow.method.__ge__.rst", "generated/skbio.workflow.method.__getstate__.rst", "generated/skbio.workflow.method.__gt__.rst", "generated/skbio.workflow.method.__hash__.rst", "generated/skbio.workflow.method.__le__.rst", "generated/skbio.workflow.method.__lt__.rst", "generated/skbio.workflow.method.__ne__.rst", "generated/skbio.workflow.method.__str__.rst", "generated/skbio.workflow.requires.rst", "generated/skbio.workflow.requires.__call__.rst", "generated/skbio.workflow.requires.__eq__.rst", "generated/skbio.workflow.requires.__ge__.rst", "generated/skbio.workflow.requires.__getstate__.rst", "generated/skbio.workflow.requires.__gt__.rst", "generated/skbio.workflow.requires.__hash__.rst", "generated/skbio.workflow.requires.__le__.rst", "generated/skbio.workflow.requires.__lt__.rst", "generated/skbio.workflow.requires.__ne__.rst", "generated/skbio.workflow.requires.__str__.rst", "index.rst", "io.rst", "metadata.rst", "sequence.rst", "stats.rst", "table.rst", "tree.rst", "util.rst", "workflow.rst"], "indexentries": {"__bool__() (skbio.alignment.tabularmsa method)": [[66, "skbio.alignment.TabularMSA.__bool__", false]], "__bool__() (skbio.sequence.dna method)": [[383, "skbio.sequence.DNA.__bool__", false]], "__bool__() (skbio.sequence.grammaredsequence method)": [[454, "skbio.sequence.GrammaredSequence.__bool__", false]], "__bool__() (skbio.sequence.protein method)": [[505, "skbio.sequence.Protein.__bool__", false]], "__bool__() (skbio.sequence.rna method)": [[558, "skbio.sequence.RNA.__bool__", false]], "__bool__() (skbio.sequence.sequence method)": [[617, "skbio.sequence.Sequence.__bool__", false]], "__call__() (skbio.alignment.stripedsmithwaterman method)": [[54, "skbio.alignment.StripedSmithWaterman.__call__", false]], "__call__() (skbio.workflow.method method)": [[1078, "skbio.workflow.method.__call__", false]], "__call__() (skbio.workflow.requires method)": [[1089, "skbio.workflow.requires.__call__", false]], "__call__() (skbio.workflow.workflow method)": [[1066, "skbio.workflow.Workflow.__call__", false]], "__contains__() (skbio.alignment.tabularmsa method)": [[67, "skbio.alignment.TabularMSA.__contains__", false]], "__contains__() (skbio.sequence.dna method)": [[384, "skbio.sequence.DNA.__contains__", false]], "__contains__() (skbio.sequence.grammaredsequence method)": [[455, "skbio.sequence.GrammaredSequence.__contains__", false]], "__contains__() (skbio.sequence.protein method)": [[506, "skbio.sequence.Protein.__contains__", false]], "__contains__() (skbio.sequence.rna method)": [[559, "skbio.sequence.RNA.__contains__", false]], "__contains__() (skbio.sequence.sequence method)": [[618, "skbio.sequence.Sequence.__contains__", false]], "__contains__() (skbio.sequence.substitutionmatrix method)": [[655, "skbio.sequence.SubstitutionMatrix.__contains__", false]], "__contains__() (skbio.stats.distance.dissimilaritymatrix method)": [[708, "skbio.stats.distance.DissimilarityMatrix.__contains__", false]], "__contains__() (skbio.stats.distance.distancematrix method)": [[731, "skbio.stats.distance.DistanceMatrix.__contains__", false]], "__copy__() (skbio.alignment.tabularmsa method)": [[68, "skbio.alignment.TabularMSA.__copy__", false]], "__copy__() (skbio.metadata.intervalmetadata method)": [[309, "skbio.metadata.IntervalMetadata.__copy__", false]], "__copy__() (skbio.sequence.dna method)": [[385, "skbio.sequence.DNA.__copy__", false]], "__copy__() (skbio.sequence.grammaredsequence method)": [[456, "skbio.sequence.GrammaredSequence.__copy__", false]], "__copy__() (skbio.sequence.protein method)": [[507, "skbio.sequence.Protein.__copy__", false]], "__copy__() (skbio.sequence.rna method)": [[560, "skbio.sequence.RNA.__copy__", false]], "__copy__() (skbio.sequence.sequence method)": [[619, "skbio.sequence.Sequence.__copy__", false]], "__copy__() (skbio.tree.treenode method)": [[956, "skbio.tree.TreeNode.__copy__", false]], "__deepcopy__() (skbio.alignment.tabularmsa method)": [[69, "skbio.alignment.TabularMSA.__deepcopy__", false]], "__deepcopy__() (skbio.metadata.intervalmetadata method)": [[310, "skbio.metadata.IntervalMetadata.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.dna method)": [[386, "skbio.sequence.DNA.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.grammaredsequence method)": [[457, "skbio.sequence.GrammaredSequence.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.protein method)": [[508, "skbio.sequence.Protein.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.rna method)": [[561, "skbio.sequence.RNA.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.sequence method)": [[620, "skbio.sequence.Sequence.__deepcopy__", false]], "__deepcopy__() (skbio.tree.treenode method)": [[957, "skbio.tree.TreeNode.__deepcopy__", false]], "__delete__() (skbio.util.classproperty method)": [[1046, "skbio.util.classproperty.__delete__", false]], "__eq__() (skbio.alignment.alignmentstructure method)": [[21, "skbio.alignment.AlignmentStructure.__eq__", false]], "__eq__() (skbio.alignment.alignpath method)": [[4, "skbio.alignment.AlignPath.__eq__", false]], "__eq__() (skbio.alignment.pairalignpath method)": [[35, "skbio.alignment.PairAlignPath.__eq__", false]], "__eq__() (skbio.alignment.stripedsmithwaterman method)": [[55, "skbio.alignment.StripedSmithWaterman.__eq__", false]], "__eq__() (skbio.alignment.tabularmsa method)": [[70, "skbio.alignment.TabularMSA.__eq__", false]], "__eq__() (skbio.embedding.embedding method)": [[156, "skbio.embedding.Embedding.__eq__", false]], "__eq__() (skbio.embedding.proteinembedding method)": [[167, "skbio.embedding.ProteinEmbedding.__eq__", false]], "__eq__() (skbio.embedding.proteinvector method)": [[180, "skbio.embedding.ProteinVector.__eq__", false]], "__eq__() (skbio.embedding.sequenceembedding method)": [[193, "skbio.embedding.SequenceEmbedding.__eq__", false]], "__eq__() (skbio.embedding.sequencevector method)": [[204, "skbio.embedding.SequenceVector.__eq__", false]], "__eq__() (skbio.io.registry.format method)": [[239, "skbio.io.registry.Format.__eq__", false]], "__eq__() (skbio.io.registry.ioregistry method)": [[252, "skbio.io.registry.IORegistry.__eq__", false]], "__eq__() (skbio.metadata.categoricalmetadatacolumn method)": [[281, "skbio.metadata.CategoricalMetadataColumn.__eq__", false]], "__eq__() (skbio.metadata.interval method)": [[299, "skbio.metadata.Interval.__eq__", false]], "__eq__() (skbio.metadata.intervalmetadata method)": [[311, "skbio.metadata.IntervalMetadata.__eq__", false]], "__eq__() (skbio.metadata.metadatacolumn method)": [[328, "skbio.metadata.MetadataColumn.__eq__", false]], "__eq__() (skbio.metadata.numericmetadatacolumn method)": [[346, "skbio.metadata.NumericMetadataColumn.__eq__", false]], "__eq__() (skbio.metadata.samplemetadata method)": [[364, "skbio.metadata.SampleMetadata.__eq__", false]], "__eq__() (skbio.sequence.dna method)": [[387, "skbio.sequence.DNA.__eq__", false]], "__eq__() (skbio.sequence.geneticcode method)": [[442, "skbio.sequence.GeneticCode.__eq__", false]], "__eq__() (skbio.sequence.grammaredsequence method)": [[458, "skbio.sequence.GrammaredSequence.__eq__", false]], "__eq__() (skbio.sequence.protein method)": [[509, "skbio.sequence.Protein.__eq__", false]], "__eq__() (skbio.sequence.rna method)": [[562, "skbio.sequence.RNA.__eq__", false]], "__eq__() (skbio.sequence.sequence method)": [[621, "skbio.sequence.Sequence.__eq__", false]], "__eq__() (skbio.sequence.substitutionmatrix method)": [[656, "skbio.sequence.SubstitutionMatrix.__eq__", false]], "__eq__() (skbio.stats.distance.dissimilaritymatrix method)": [[709, "skbio.stats.distance.DissimilarityMatrix.__eq__", false]], "__eq__() (skbio.stats.distance.distancematrix method)": [[732, "skbio.stats.distance.DistanceMatrix.__eq__", false]], "__eq__() (skbio.stats.gradient.averagegradientanova method)": [[767, "skbio.stats.gradient.AverageGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.categoryresults method)": [[778, "skbio.stats.gradient.CategoryResults.__eq__", false]], "__eq__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[789, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.gradientanova method)": [[800, "skbio.stats.gradient.GradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.gradientanovaresults method)": [[811, "skbio.stats.gradient.GradientANOVAResults.__eq__", false]], "__eq__() (skbio.stats.gradient.groupresults method)": [[822, "skbio.stats.gradient.GroupResults.__eq__", false]], "__eq__() (skbio.stats.gradient.trajectorygradientanova method)": [[833, "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[844, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.ordination.ordinationresults method)": [[857, "skbio.stats.ordination.OrdinationResults.__eq__", false]], "__eq__() (skbio.table.table method)": [[888, "skbio.table.Table.__eq__", false]], "__eq__() (skbio.tree.treenode method)": [[958, "skbio.tree.TreeNode.__eq__", false]], "__eq__() (skbio.util.classproperty method)": [[1047, "skbio.util.classproperty.__eq__", false]], "__eq__() (skbio.workflow.method method)": [[1079, "skbio.workflow.method.__eq__", false]], "__eq__() (skbio.workflow.requires method)": [[1090, "skbio.workflow.requires.__eq__", false]], "__eq__() (skbio.workflow.workflow method)": [[1067, "skbio.workflow.Workflow.__eq__", false]], "__ge__() (skbio.alignment.alignmentstructure method)": [[22, "skbio.alignment.AlignmentStructure.__ge__", false]], "__ge__() (skbio.alignment.alignpath method)": [[5, "skbio.alignment.AlignPath.__ge__", false]], "__ge__() (skbio.alignment.pairalignpath method)": [[36, "skbio.alignment.PairAlignPath.__ge__", false]], "__ge__() (skbio.alignment.stripedsmithwaterman method)": [[56, "skbio.alignment.StripedSmithWaterman.__ge__", false]], "__ge__() (skbio.alignment.tabularmsa method)": [[71, "skbio.alignment.TabularMSA.__ge__", false]], "__ge__() (skbio.embedding.embedding method)": [[157, "skbio.embedding.Embedding.__ge__", false]], "__ge__() (skbio.embedding.proteinembedding method)": [[168, "skbio.embedding.ProteinEmbedding.__ge__", false]], "__ge__() (skbio.embedding.proteinvector method)": [[181, "skbio.embedding.ProteinVector.__ge__", false]], "__ge__() (skbio.embedding.sequenceembedding method)": [[194, "skbio.embedding.SequenceEmbedding.__ge__", false]], "__ge__() (skbio.embedding.sequencevector method)": [[205, "skbio.embedding.SequenceVector.__ge__", false]], "__ge__() (skbio.io.registry.format method)": [[240, "skbio.io.registry.Format.__ge__", false]], "__ge__() (skbio.io.registry.ioregistry method)": [[253, "skbio.io.registry.IORegistry.__ge__", false]], "__ge__() (skbio.metadata.categoricalmetadatacolumn method)": [[282, "skbio.metadata.CategoricalMetadataColumn.__ge__", false]], "__ge__() (skbio.metadata.interval method)": [[300, "skbio.metadata.Interval.__ge__", false]], "__ge__() (skbio.metadata.intervalmetadata method)": [[312, "skbio.metadata.IntervalMetadata.__ge__", false]], "__ge__() (skbio.metadata.metadatacolumn method)": [[329, "skbio.metadata.MetadataColumn.__ge__", false]], "__ge__() (skbio.metadata.numericmetadatacolumn method)": [[347, "skbio.metadata.NumericMetadataColumn.__ge__", false]], "__ge__() (skbio.metadata.samplemetadata method)": [[365, "skbio.metadata.SampleMetadata.__ge__", false]], "__ge__() (skbio.sequence.dna method)": [[388, "skbio.sequence.DNA.__ge__", false]], "__ge__() (skbio.sequence.geneticcode method)": [[443, "skbio.sequence.GeneticCode.__ge__", false]], "__ge__() (skbio.sequence.grammaredsequence method)": [[459, "skbio.sequence.GrammaredSequence.__ge__", false]], "__ge__() (skbio.sequence.protein method)": [[510, "skbio.sequence.Protein.__ge__", false]], "__ge__() (skbio.sequence.rna method)": [[563, "skbio.sequence.RNA.__ge__", false]], "__ge__() (skbio.sequence.sequence method)": [[622, "skbio.sequence.Sequence.__ge__", false]], "__ge__() (skbio.sequence.substitutionmatrix method)": [[657, "skbio.sequence.SubstitutionMatrix.__ge__", false]], "__ge__() (skbio.stats.distance.dissimilaritymatrix method)": [[710, "skbio.stats.distance.DissimilarityMatrix.__ge__", false]], "__ge__() (skbio.stats.distance.distancematrix method)": [[733, "skbio.stats.distance.DistanceMatrix.__ge__", false]], "__ge__() (skbio.stats.gradient.averagegradientanova method)": [[768, "skbio.stats.gradient.AverageGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.categoryresults method)": [[779, "skbio.stats.gradient.CategoryResults.__ge__", false]], "__ge__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[790, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.gradientanova method)": [[801, "skbio.stats.gradient.GradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.gradientanovaresults method)": [[812, "skbio.stats.gradient.GradientANOVAResults.__ge__", false]], "__ge__() (skbio.stats.gradient.groupresults method)": [[823, "skbio.stats.gradient.GroupResults.__ge__", false]], "__ge__() (skbio.stats.gradient.trajectorygradientanova method)": [[834, "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[845, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.ordination.ordinationresults method)": [[858, "skbio.stats.ordination.OrdinationResults.__ge__", false]], "__ge__() (skbio.table.table method)": [[889, "skbio.table.Table.__ge__", false]], "__ge__() (skbio.tree.treenode method)": [[959, "skbio.tree.TreeNode.__ge__", false]], "__ge__() (skbio.util.classproperty method)": [[1048, "skbio.util.classproperty.__ge__", false]], "__ge__() (skbio.workflow.method method)": [[1080, "skbio.workflow.method.__ge__", false]], "__ge__() (skbio.workflow.requires method)": [[1091, "skbio.workflow.requires.__ge__", false]], "__ge__() (skbio.workflow.workflow method)": [[1068, "skbio.workflow.Workflow.__ge__", false]], "__get__() (skbio.util.classproperty method)": [[1049, "skbio.util.classproperty.__get__", false]], "__getitem__() (skbio.alignment.alignmentstructure method)": [[23, "skbio.alignment.AlignmentStructure.__getitem__", false]], "__getitem__() (skbio.alignment.tabularmsa method)": [[72, "skbio.alignment.TabularMSA.__getitem__", false]], "__getitem__() (skbio.sequence.dna method)": [[389, "skbio.sequence.DNA.__getitem__", false]], "__getitem__() (skbio.sequence.grammaredsequence method)": [[460, "skbio.sequence.GrammaredSequence.__getitem__", false]], "__getitem__() (skbio.sequence.protein method)": [[511, "skbio.sequence.Protein.__getitem__", false]], "__getitem__() (skbio.sequence.rna method)": [[564, "skbio.sequence.RNA.__getitem__", false]], "__getitem__() (skbio.sequence.sequence method)": [[623, "skbio.sequence.Sequence.__getitem__", false]], "__getitem__() (skbio.sequence.substitutionmatrix method)": [[658, "skbio.sequence.SubstitutionMatrix.__getitem__", false]], "__getitem__() (skbio.stats.distance.dissimilaritymatrix method)": [[711, "skbio.stats.distance.DissimilarityMatrix.__getitem__", false]], "__getitem__() (skbio.stats.distance.distancematrix method)": [[734, "skbio.stats.distance.DistanceMatrix.__getitem__", false]], "__getitem__() (skbio.table.table method)": [[890, "skbio.table.Table.__getitem__", false]], "__getitem__() (skbio.tree.treenode method)": [[960, "skbio.tree.TreeNode.__getitem__", false]], "__getstate__() (skbio.alignment.alignmentstructure method)": [[24, "skbio.alignment.AlignmentStructure.__getstate__", false]], "__getstate__() (skbio.alignment.alignpath method)": [[6, "skbio.alignment.AlignPath.__getstate__", false]], "__getstate__() (skbio.alignment.pairalignpath method)": [[37, "skbio.alignment.PairAlignPath.__getstate__", false]], "__getstate__() (skbio.alignment.stripedsmithwaterman method)": [[57, "skbio.alignment.StripedSmithWaterman.__getstate__", false]], "__getstate__() (skbio.alignment.tabularmsa method)": [[73, "skbio.alignment.TabularMSA.__getstate__", false]], "__getstate__() (skbio.embedding.embedding method)": [[158, "skbio.embedding.Embedding.__getstate__", false]], "__getstate__() (skbio.embedding.proteinembedding method)": [[169, "skbio.embedding.ProteinEmbedding.__getstate__", false]], "__getstate__() (skbio.embedding.proteinvector method)": [[182, "skbio.embedding.ProteinVector.__getstate__", false]], "__getstate__() (skbio.embedding.sequenceembedding method)": [[195, "skbio.embedding.SequenceEmbedding.__getstate__", false]], "__getstate__() (skbio.embedding.sequencevector method)": [[206, "skbio.embedding.SequenceVector.__getstate__", false]], "__getstate__() (skbio.io.registry.format method)": [[241, "skbio.io.registry.Format.__getstate__", false]], "__getstate__() (skbio.io.registry.ioregistry method)": [[254, "skbio.io.registry.IORegistry.__getstate__", false]], "__getstate__() (skbio.metadata.categoricalmetadatacolumn method)": [[283, "skbio.metadata.CategoricalMetadataColumn.__getstate__", false]], "__getstate__() (skbio.metadata.interval method)": [[301, "skbio.metadata.Interval.__getstate__", false]], "__getstate__() (skbio.metadata.intervalmetadata method)": [[313, "skbio.metadata.IntervalMetadata.__getstate__", false]], "__getstate__() (skbio.metadata.metadatacolumn method)": [[330, "skbio.metadata.MetadataColumn.__getstate__", false]], "__getstate__() (skbio.metadata.numericmetadatacolumn method)": [[348, "skbio.metadata.NumericMetadataColumn.__getstate__", false]], "__getstate__() (skbio.metadata.samplemetadata method)": [[366, "skbio.metadata.SampleMetadata.__getstate__", false]], "__getstate__() (skbio.sequence.dna method)": [[390, "skbio.sequence.DNA.__getstate__", false]], "__getstate__() (skbio.sequence.geneticcode method)": [[444, "skbio.sequence.GeneticCode.__getstate__", false]], "__getstate__() (skbio.sequence.grammaredsequence method)": [[461, "skbio.sequence.GrammaredSequence.__getstate__", false]], "__getstate__() (skbio.sequence.protein method)": [[512, "skbio.sequence.Protein.__getstate__", false]], "__getstate__() (skbio.sequence.rna method)": [[565, "skbio.sequence.RNA.__getstate__", false]], "__getstate__() (skbio.sequence.sequence method)": [[624, "skbio.sequence.Sequence.__getstate__", false]], "__getstate__() (skbio.sequence.substitutionmatrix method)": [[659, "skbio.sequence.SubstitutionMatrix.__getstate__", false]], "__getstate__() (skbio.stats.distance.dissimilaritymatrix method)": [[712, "skbio.stats.distance.DissimilarityMatrix.__getstate__", false]], "__getstate__() (skbio.stats.distance.distancematrix method)": [[735, "skbio.stats.distance.DistanceMatrix.__getstate__", false]], "__getstate__() (skbio.stats.gradient.averagegradientanova method)": [[769, "skbio.stats.gradient.AverageGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.categoryresults method)": [[780, "skbio.stats.gradient.CategoryResults.__getstate__", false]], "__getstate__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[791, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.gradientanova method)": [[802, "skbio.stats.gradient.GradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.gradientanovaresults method)": [[813, "skbio.stats.gradient.GradientANOVAResults.__getstate__", false]], "__getstate__() (skbio.stats.gradient.groupresults method)": [[824, "skbio.stats.gradient.GroupResults.__getstate__", false]], "__getstate__() (skbio.stats.gradient.trajectorygradientanova method)": [[835, "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[846, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.ordination.ordinationresults method)": [[859, "skbio.stats.ordination.OrdinationResults.__getstate__", false]], "__getstate__() (skbio.table.table method)": [[891, "skbio.table.Table.__getstate__", false]], "__getstate__() (skbio.tree.treenode method)": [[961, "skbio.tree.TreeNode.__getstate__", false]], "__getstate__() (skbio.util.classproperty method)": [[1050, "skbio.util.classproperty.__getstate__", false]], "__getstate__() (skbio.workflow.method method)": [[1081, "skbio.workflow.method.__getstate__", false]], "__getstate__() (skbio.workflow.requires method)": [[1092, "skbio.workflow.requires.__getstate__", false]], "__getstate__() (skbio.workflow.workflow method)": [[1069, "skbio.workflow.Workflow.__getstate__", false]], "__gt__() (skbio.alignment.alignmentstructure method)": [[25, "skbio.alignment.AlignmentStructure.__gt__", false]], "__gt__() (skbio.alignment.alignpath method)": [[7, "skbio.alignment.AlignPath.__gt__", false]], "__gt__() (skbio.alignment.pairalignpath method)": [[38, "skbio.alignment.PairAlignPath.__gt__", false]], "__gt__() (skbio.alignment.stripedsmithwaterman method)": [[58, "skbio.alignment.StripedSmithWaterman.__gt__", false]], "__gt__() (skbio.alignment.tabularmsa method)": [[74, "skbio.alignment.TabularMSA.__gt__", false]], "__gt__() (skbio.embedding.embedding method)": [[159, "skbio.embedding.Embedding.__gt__", false]], "__gt__() (skbio.embedding.proteinembedding method)": [[170, "skbio.embedding.ProteinEmbedding.__gt__", false]], "__gt__() (skbio.embedding.proteinvector method)": [[183, "skbio.embedding.ProteinVector.__gt__", false]], "__gt__() (skbio.embedding.sequenceembedding method)": [[196, "skbio.embedding.SequenceEmbedding.__gt__", false]], "__gt__() (skbio.embedding.sequencevector method)": [[207, "skbio.embedding.SequenceVector.__gt__", false]], "__gt__() (skbio.io.registry.format method)": [[242, "skbio.io.registry.Format.__gt__", false]], "__gt__() (skbio.io.registry.ioregistry method)": [[255, "skbio.io.registry.IORegistry.__gt__", false]], "__gt__() (skbio.metadata.categoricalmetadatacolumn method)": [[284, "skbio.metadata.CategoricalMetadataColumn.__gt__", false]], "__gt__() (skbio.metadata.interval method)": [[302, "skbio.metadata.Interval.__gt__", false]], "__gt__() (skbio.metadata.intervalmetadata method)": [[314, "skbio.metadata.IntervalMetadata.__gt__", false]], "__gt__() (skbio.metadata.metadatacolumn method)": [[331, "skbio.metadata.MetadataColumn.__gt__", false]], "__gt__() (skbio.metadata.numericmetadatacolumn method)": [[349, "skbio.metadata.NumericMetadataColumn.__gt__", false]], "__gt__() (skbio.metadata.samplemetadata method)": [[367, "skbio.metadata.SampleMetadata.__gt__", false]], "__gt__() (skbio.sequence.dna method)": [[391, "skbio.sequence.DNA.__gt__", false]], "__gt__() (skbio.sequence.geneticcode method)": [[445, "skbio.sequence.GeneticCode.__gt__", false]], "__gt__() (skbio.sequence.grammaredsequence method)": [[462, "skbio.sequence.GrammaredSequence.__gt__", false]], "__gt__() (skbio.sequence.protein method)": [[513, "skbio.sequence.Protein.__gt__", false]], "__gt__() (skbio.sequence.rna method)": [[566, "skbio.sequence.RNA.__gt__", false]], "__gt__() (skbio.sequence.sequence method)": [[625, "skbio.sequence.Sequence.__gt__", false]], "__gt__() (skbio.sequence.substitutionmatrix method)": [[660, "skbio.sequence.SubstitutionMatrix.__gt__", false]], "__gt__() (skbio.stats.distance.dissimilaritymatrix method)": [[713, "skbio.stats.distance.DissimilarityMatrix.__gt__", false]], "__gt__() (skbio.stats.distance.distancematrix method)": [[736, "skbio.stats.distance.DistanceMatrix.__gt__", false]], "__gt__() (skbio.stats.gradient.averagegradientanova method)": [[770, "skbio.stats.gradient.AverageGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.categoryresults method)": [[781, "skbio.stats.gradient.CategoryResults.__gt__", false]], "__gt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[792, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.gradientanova method)": [[803, "skbio.stats.gradient.GradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.gradientanovaresults method)": [[814, "skbio.stats.gradient.GradientANOVAResults.__gt__", false]], "__gt__() (skbio.stats.gradient.groupresults method)": [[825, "skbio.stats.gradient.GroupResults.__gt__", false]], "__gt__() (skbio.stats.gradient.trajectorygradientanova method)": [[836, "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[847, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.ordination.ordinationresults method)": [[860, "skbio.stats.ordination.OrdinationResults.__gt__", false]], "__gt__() (skbio.table.table method)": [[892, "skbio.table.Table.__gt__", false]], "__gt__() (skbio.tree.treenode method)": [[962, "skbio.tree.TreeNode.__gt__", false]], "__gt__() (skbio.util.classproperty method)": [[1051, "skbio.util.classproperty.__gt__", false]], "__gt__() (skbio.workflow.method method)": [[1082, "skbio.workflow.method.__gt__", false]], "__gt__() (skbio.workflow.requires method)": [[1093, "skbio.workflow.requires.__gt__", false]], "__gt__() (skbio.workflow.workflow method)": [[1070, "skbio.workflow.Workflow.__gt__", false]], "__hash__() (skbio.alignment.alignmentstructure method)": [[26, "skbio.alignment.AlignmentStructure.__hash__", false]], "__hash__() (skbio.alignment.alignpath method)": [[8, "skbio.alignment.AlignPath.__hash__", false]], "__hash__() (skbio.alignment.pairalignpath method)": [[39, "skbio.alignment.PairAlignPath.__hash__", false]], "__hash__() (skbio.alignment.stripedsmithwaterman method)": [[59, "skbio.alignment.StripedSmithWaterman.__hash__", false]], "__hash__() (skbio.embedding.embedding method)": [[160, "skbio.embedding.Embedding.__hash__", false]], "__hash__() (skbio.embedding.proteinembedding method)": [[171, "skbio.embedding.ProteinEmbedding.__hash__", false]], "__hash__() (skbio.embedding.proteinvector method)": [[184, "skbio.embedding.ProteinVector.__hash__", false]], "__hash__() (skbio.embedding.sequenceembedding method)": [[197, "skbio.embedding.SequenceEmbedding.__hash__", false]], "__hash__() (skbio.embedding.sequencevector method)": [[208, "skbio.embedding.SequenceVector.__hash__", false]], "__hash__() (skbio.io.registry.format method)": [[243, "skbio.io.registry.Format.__hash__", false]], "__hash__() (skbio.io.registry.ioregistry method)": [[256, "skbio.io.registry.IORegistry.__hash__", false]], "__hash__() (skbio.stats.gradient.averagegradientanova method)": [[771, "skbio.stats.gradient.AverageGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.categoryresults method)": [[782, "skbio.stats.gradient.CategoryResults.__hash__", false]], "__hash__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[793, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.gradientanova method)": [[804, "skbio.stats.gradient.GradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.gradientanovaresults method)": [[815, "skbio.stats.gradient.GradientANOVAResults.__hash__", false]], "__hash__() (skbio.stats.gradient.groupresults method)": [[826, "skbio.stats.gradient.GroupResults.__hash__", false]], "__hash__() (skbio.stats.gradient.trajectorygradientanova method)": [[837, "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[848, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.ordination.ordinationresults method)": [[861, "skbio.stats.ordination.OrdinationResults.__hash__", false]], "__hash__() (skbio.tree.treenode method)": [[963, "skbio.tree.TreeNode.__hash__", false]], "__hash__() (skbio.util.classproperty method)": [[1052, "skbio.util.classproperty.__hash__", false]], "__hash__() (skbio.workflow.method method)": [[1083, "skbio.workflow.method.__hash__", false]], "__hash__() (skbio.workflow.requires method)": [[1094, "skbio.workflow.requires.__hash__", false]], "__hash__() (skbio.workflow.workflow method)": [[1071, "skbio.workflow.Workflow.__hash__", false]], "__iter__() (skbio.alignment.tabularmsa method)": [[75, "skbio.alignment.TabularMSA.__iter__", false]], "__iter__() (skbio.sequence.dna method)": [[392, "skbio.sequence.DNA.__iter__", false]], "__iter__() (skbio.sequence.grammaredsequence method)": [[463, "skbio.sequence.GrammaredSequence.__iter__", false]], "__iter__() (skbio.sequence.protein method)": [[514, "skbio.sequence.Protein.__iter__", false]], "__iter__() (skbio.sequence.rna method)": [[567, "skbio.sequence.RNA.__iter__", false]], "__iter__() (skbio.sequence.sequence method)": [[626, "skbio.sequence.Sequence.__iter__", false]], "__iter__() (skbio.table.table method)": [[893, "skbio.table.Table.__iter__", false]], "__iter__() (skbio.tree.treenode method)": [[964, "skbio.tree.TreeNode.__iter__", false]], "__le__() (skbio.alignment.alignmentstructure method)": [[27, "skbio.alignment.AlignmentStructure.__le__", false]], "__le__() (skbio.alignment.alignpath method)": [[9, "skbio.alignment.AlignPath.__le__", false]], "__le__() (skbio.alignment.pairalignpath method)": [[40, "skbio.alignment.PairAlignPath.__le__", false]], "__le__() (skbio.alignment.stripedsmithwaterman method)": [[60, "skbio.alignment.StripedSmithWaterman.__le__", false]], "__le__() (skbio.alignment.tabularmsa method)": [[76, "skbio.alignment.TabularMSA.__le__", false]], "__le__() (skbio.embedding.embedding method)": [[161, "skbio.embedding.Embedding.__le__", false]], "__le__() (skbio.embedding.proteinembedding method)": [[172, "skbio.embedding.ProteinEmbedding.__le__", false]], "__le__() (skbio.embedding.proteinvector method)": [[185, "skbio.embedding.ProteinVector.__le__", false]], "__le__() (skbio.embedding.sequenceembedding method)": [[198, "skbio.embedding.SequenceEmbedding.__le__", false]], "__le__() (skbio.embedding.sequencevector method)": [[209, "skbio.embedding.SequenceVector.__le__", false]], "__le__() (skbio.io.registry.format method)": [[244, "skbio.io.registry.Format.__le__", false]], "__le__() (skbio.io.registry.ioregistry method)": [[257, "skbio.io.registry.IORegistry.__le__", false]], "__le__() (skbio.metadata.categoricalmetadatacolumn method)": [[285, "skbio.metadata.CategoricalMetadataColumn.__le__", false]], "__le__() (skbio.metadata.interval method)": [[303, "skbio.metadata.Interval.__le__", false]], "__le__() (skbio.metadata.intervalmetadata method)": [[315, "skbio.metadata.IntervalMetadata.__le__", false]], "__le__() (skbio.metadata.metadatacolumn method)": [[332, "skbio.metadata.MetadataColumn.__le__", false]], "__le__() (skbio.metadata.numericmetadatacolumn method)": [[350, "skbio.metadata.NumericMetadataColumn.__le__", false]], "__le__() (skbio.metadata.samplemetadata method)": [[368, "skbio.metadata.SampleMetadata.__le__", false]], "__le__() (skbio.sequence.dna method)": [[393, "skbio.sequence.DNA.__le__", false]], "__le__() (skbio.sequence.geneticcode method)": [[446, "skbio.sequence.GeneticCode.__le__", false]], "__le__() (skbio.sequence.grammaredsequence method)": [[464, "skbio.sequence.GrammaredSequence.__le__", false]], "__le__() (skbio.sequence.protein method)": [[515, "skbio.sequence.Protein.__le__", false]], "__le__() (skbio.sequence.rna method)": [[568, "skbio.sequence.RNA.__le__", false]], "__le__() (skbio.sequence.sequence method)": [[627, "skbio.sequence.Sequence.__le__", false]], "__le__() (skbio.sequence.substitutionmatrix method)": [[661, "skbio.sequence.SubstitutionMatrix.__le__", false]], "__le__() (skbio.stats.distance.dissimilaritymatrix method)": [[714, "skbio.stats.distance.DissimilarityMatrix.__le__", false]], "__le__() (skbio.stats.distance.distancematrix method)": [[737, "skbio.stats.distance.DistanceMatrix.__le__", false]], "__le__() (skbio.stats.gradient.averagegradientanova method)": [[772, "skbio.stats.gradient.AverageGradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.categoryresults method)": [[783, "skbio.stats.gradient.CategoryResults.__le__", false]], "__le__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[794, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.gradientanova method)": [[805, "skbio.stats.gradient.GradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.gradientanovaresults method)": [[816, "skbio.stats.gradient.GradientANOVAResults.__le__", false]], "__le__() (skbio.stats.gradient.groupresults method)": [[827, "skbio.stats.gradient.GroupResults.__le__", false]], "__le__() (skbio.stats.gradient.trajectorygradientanova method)": [[838, "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[849, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", false]], "__le__() (skbio.stats.ordination.ordinationresults method)": [[862, "skbio.stats.ordination.OrdinationResults.__le__", false]], "__le__() (skbio.table.table method)": [[894, "skbio.table.Table.__le__", false]], "__le__() (skbio.tree.treenode method)": [[965, "skbio.tree.TreeNode.__le__", false]], "__le__() (skbio.util.classproperty method)": [[1053, "skbio.util.classproperty.__le__", false]], "__le__() (skbio.workflow.method method)": [[1084, "skbio.workflow.method.__le__", false]], "__le__() (skbio.workflow.requires method)": [[1095, "skbio.workflow.requires.__le__", false]], "__le__() (skbio.workflow.workflow method)": [[1072, "skbio.workflow.Workflow.__le__", false]], "__len__() (skbio.alignment.tabularmsa method)": [[77, "skbio.alignment.TabularMSA.__len__", false]], "__len__() (skbio.sequence.dna method)": [[394, "skbio.sequence.DNA.__len__", false]], "__len__() (skbio.sequence.grammaredsequence method)": [[465, "skbio.sequence.GrammaredSequence.__len__", false]], "__len__() (skbio.sequence.protein method)": [[516, "skbio.sequence.Protein.__len__", false]], "__len__() (skbio.sequence.rna method)": [[569, "skbio.sequence.RNA.__len__", false]], "__len__() (skbio.sequence.sequence method)": [[628, "skbio.sequence.Sequence.__len__", false]], "__len__() (skbio.tree.treenode method)": [[966, "skbio.tree.TreeNode.__len__", false]], "__lt__() (skbio.alignment.alignmentstructure method)": [[28, "skbio.alignment.AlignmentStructure.__lt__", false]], "__lt__() (skbio.alignment.alignpath method)": [[10, "skbio.alignment.AlignPath.__lt__", false]], "__lt__() (skbio.alignment.pairalignpath method)": [[41, "skbio.alignment.PairAlignPath.__lt__", false]], "__lt__() (skbio.alignment.stripedsmithwaterman method)": [[61, "skbio.alignment.StripedSmithWaterman.__lt__", false]], "__lt__() (skbio.alignment.tabularmsa method)": [[78, "skbio.alignment.TabularMSA.__lt__", false]], "__lt__() (skbio.embedding.embedding method)": [[162, "skbio.embedding.Embedding.__lt__", false]], "__lt__() (skbio.embedding.proteinembedding method)": [[173, "skbio.embedding.ProteinEmbedding.__lt__", false]], "__lt__() (skbio.embedding.proteinvector method)": [[186, "skbio.embedding.ProteinVector.__lt__", false]], "__lt__() (skbio.embedding.sequenceembedding method)": [[199, "skbio.embedding.SequenceEmbedding.__lt__", false]], "__lt__() (skbio.embedding.sequencevector method)": [[210, "skbio.embedding.SequenceVector.__lt__", false]], "__lt__() (skbio.io.registry.format method)": [[245, "skbio.io.registry.Format.__lt__", false]], "__lt__() (skbio.io.registry.ioregistry method)": [[258, "skbio.io.registry.IORegistry.__lt__", false]], "__lt__() (skbio.metadata.categoricalmetadatacolumn method)": [[286, "skbio.metadata.CategoricalMetadataColumn.__lt__", false]], "__lt__() (skbio.metadata.interval method)": [[304, "skbio.metadata.Interval.__lt__", false]], "__lt__() (skbio.metadata.intervalmetadata method)": [[316, "skbio.metadata.IntervalMetadata.__lt__", false]], "__lt__() (skbio.metadata.metadatacolumn method)": [[333, "skbio.metadata.MetadataColumn.__lt__", false]], "__lt__() (skbio.metadata.numericmetadatacolumn method)": [[351, "skbio.metadata.NumericMetadataColumn.__lt__", false]], "__lt__() (skbio.metadata.samplemetadata method)": [[369, "skbio.metadata.SampleMetadata.__lt__", false]], "__lt__() (skbio.sequence.dna method)": [[395, "skbio.sequence.DNA.__lt__", false]], "__lt__() (skbio.sequence.geneticcode method)": [[447, "skbio.sequence.GeneticCode.__lt__", false]], "__lt__() (skbio.sequence.grammaredsequence method)": [[466, "skbio.sequence.GrammaredSequence.__lt__", false]], "__lt__() (skbio.sequence.protein method)": [[517, "skbio.sequence.Protein.__lt__", false]], "__lt__() (skbio.sequence.rna method)": [[570, "skbio.sequence.RNA.__lt__", false]], "__lt__() (skbio.sequence.sequence method)": [[629, "skbio.sequence.Sequence.__lt__", false]], "__lt__() (skbio.sequence.substitutionmatrix method)": [[662, "skbio.sequence.SubstitutionMatrix.__lt__", false]], "__lt__() (skbio.stats.distance.dissimilaritymatrix method)": [[715, "skbio.stats.distance.DissimilarityMatrix.__lt__", false]], "__lt__() (skbio.stats.distance.distancematrix method)": [[738, "skbio.stats.distance.DistanceMatrix.__lt__", false]], "__lt__() (skbio.stats.gradient.averagegradientanova method)": [[773, "skbio.stats.gradient.AverageGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.categoryresults method)": [[784, "skbio.stats.gradient.CategoryResults.__lt__", false]], "__lt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[795, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.gradientanova method)": [[806, "skbio.stats.gradient.GradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.gradientanovaresults method)": [[817, "skbio.stats.gradient.GradientANOVAResults.__lt__", false]], "__lt__() (skbio.stats.gradient.groupresults method)": [[828, "skbio.stats.gradient.GroupResults.__lt__", false]], "__lt__() (skbio.stats.gradient.trajectorygradientanova method)": [[839, "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[850, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.ordination.ordinationresults method)": [[863, "skbio.stats.ordination.OrdinationResults.__lt__", false]], "__lt__() (skbio.table.table method)": [[895, "skbio.table.Table.__lt__", false]], "__lt__() (skbio.tree.treenode method)": [[967, "skbio.tree.TreeNode.__lt__", false]], "__lt__() (skbio.util.classproperty method)": [[1054, "skbio.util.classproperty.__lt__", false]], "__lt__() (skbio.workflow.method method)": [[1085, "skbio.workflow.method.__lt__", false]], "__lt__() (skbio.workflow.requires method)": [[1096, "skbio.workflow.requires.__lt__", false]], "__lt__() (skbio.workflow.workflow method)": [[1073, "skbio.workflow.Workflow.__lt__", false]], "__ne__() (skbio.alignment.alignmentstructure method)": [[29, "skbio.alignment.AlignmentStructure.__ne__", false]], "__ne__() (skbio.alignment.alignpath method)": [[11, "skbio.alignment.AlignPath.__ne__", false]], "__ne__() (skbio.alignment.pairalignpath method)": [[42, "skbio.alignment.PairAlignPath.__ne__", false]], "__ne__() (skbio.alignment.stripedsmithwaterman method)": [[62, "skbio.alignment.StripedSmithWaterman.__ne__", false]], "__ne__() (skbio.alignment.tabularmsa method)": [[79, "skbio.alignment.TabularMSA.__ne__", false]], "__ne__() (skbio.embedding.embedding method)": [[163, "skbio.embedding.Embedding.__ne__", false]], "__ne__() (skbio.embedding.proteinembedding method)": [[174, "skbio.embedding.ProteinEmbedding.__ne__", false]], "__ne__() (skbio.embedding.proteinvector method)": [[187, "skbio.embedding.ProteinVector.__ne__", false]], "__ne__() (skbio.embedding.sequenceembedding method)": [[200, "skbio.embedding.SequenceEmbedding.__ne__", false]], "__ne__() (skbio.embedding.sequencevector method)": [[211, "skbio.embedding.SequenceVector.__ne__", false]], "__ne__() (skbio.io.registry.format method)": [[246, "skbio.io.registry.Format.__ne__", false]], "__ne__() (skbio.io.registry.ioregistry method)": [[259, "skbio.io.registry.IORegistry.__ne__", false]], "__ne__() (skbio.metadata.categoricalmetadatacolumn method)": [[287, "skbio.metadata.CategoricalMetadataColumn.__ne__", false]], "__ne__() (skbio.metadata.interval method)": [[305, "skbio.metadata.Interval.__ne__", false]], "__ne__() (skbio.metadata.intervalmetadata method)": [[317, "skbio.metadata.IntervalMetadata.__ne__", false]], "__ne__() (skbio.metadata.metadatacolumn method)": [[334, "skbio.metadata.MetadataColumn.__ne__", false]], "__ne__() (skbio.metadata.numericmetadatacolumn method)": [[352, "skbio.metadata.NumericMetadataColumn.__ne__", false]], "__ne__() (skbio.metadata.samplemetadata method)": [[370, "skbio.metadata.SampleMetadata.__ne__", false]], "__ne__() (skbio.sequence.dna method)": [[396, "skbio.sequence.DNA.__ne__", false]], "__ne__() (skbio.sequence.geneticcode method)": [[448, "skbio.sequence.GeneticCode.__ne__", false]], "__ne__() (skbio.sequence.grammaredsequence method)": [[467, "skbio.sequence.GrammaredSequence.__ne__", false]], "__ne__() (skbio.sequence.protein method)": [[518, "skbio.sequence.Protein.__ne__", false]], "__ne__() (skbio.sequence.rna method)": [[571, "skbio.sequence.RNA.__ne__", false]], "__ne__() (skbio.sequence.sequence method)": [[630, "skbio.sequence.Sequence.__ne__", false]], "__ne__() (skbio.sequence.substitutionmatrix method)": [[663, "skbio.sequence.SubstitutionMatrix.__ne__", false]], "__ne__() (skbio.stats.distance.dissimilaritymatrix method)": [[716, "skbio.stats.distance.DissimilarityMatrix.__ne__", false]], "__ne__() (skbio.stats.distance.distancematrix method)": [[739, "skbio.stats.distance.DistanceMatrix.__ne__", false]], "__ne__() (skbio.stats.gradient.averagegradientanova method)": [[774, "skbio.stats.gradient.AverageGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.categoryresults method)": [[785, "skbio.stats.gradient.CategoryResults.__ne__", false]], "__ne__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[796, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.gradientanova method)": [[807, "skbio.stats.gradient.GradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.gradientanovaresults method)": [[818, "skbio.stats.gradient.GradientANOVAResults.__ne__", false]], "__ne__() (skbio.stats.gradient.groupresults method)": [[829, "skbio.stats.gradient.GroupResults.__ne__", false]], "__ne__() (skbio.stats.gradient.trajectorygradientanova method)": [[840, "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[851, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.ordination.ordinationresults method)": [[864, "skbio.stats.ordination.OrdinationResults.__ne__", false]], "__ne__() (skbio.table.table method)": [[896, "skbio.table.Table.__ne__", false]], "__ne__() (skbio.tree.treenode method)": [[968, "skbio.tree.TreeNode.__ne__", false]], "__ne__() (skbio.util.classproperty method)": [[1055, "skbio.util.classproperty.__ne__", false]], "__ne__() (skbio.workflow.method method)": [[1086, "skbio.workflow.method.__ne__", false]], "__ne__() (skbio.workflow.requires method)": [[1097, "skbio.workflow.requires.__ne__", false]], "__ne__() (skbio.workflow.workflow method)": [[1074, "skbio.workflow.Workflow.__ne__", false]], "__reversed__() (skbio.alignment.tabularmsa method)": [[80, "skbio.alignment.TabularMSA.__reversed__", false]], "__reversed__() (skbio.sequence.dna method)": [[397, "skbio.sequence.DNA.__reversed__", false]], "__reversed__() (skbio.sequence.grammaredsequence method)": [[468, "skbio.sequence.GrammaredSequence.__reversed__", false]], "__reversed__() (skbio.sequence.protein method)": [[519, "skbio.sequence.Protein.__reversed__", false]], "__reversed__() (skbio.sequence.rna method)": [[572, "skbio.sequence.RNA.__reversed__", false]], "__reversed__() (skbio.sequence.sequence method)": [[631, "skbio.sequence.Sequence.__reversed__", false]], "__set__() (skbio.util.classproperty method)": [[1056, "skbio.util.classproperty.__set__", false]], "__set_name__() (skbio.util.classproperty method)": [[1057, "skbio.util.classproperty.__set_name__", false]], "__setstate__() (skbio.alignment.alignmentstructure method)": [[30, "skbio.alignment.AlignmentStructure.__setstate__", false]], "__setstate__() (skbio.alignment.stripedsmithwaterman method)": [[63, "skbio.alignment.StripedSmithWaterman.__setstate__", false]], "__str__() (skbio.alignment.alignmentstructure method)": [[31, "skbio.alignment.AlignmentStructure.__str__", false]], "__str__() (skbio.alignment.alignpath method)": [[12, "skbio.alignment.AlignPath.__str__", false]], "__str__() (skbio.alignment.pairalignpath method)": [[43, "skbio.alignment.PairAlignPath.__str__", false]], "__str__() (skbio.alignment.stripedsmithwaterman method)": [[64, "skbio.alignment.StripedSmithWaterman.__str__", false]], "__str__() (skbio.alignment.tabularmsa method)": [[81, "skbio.alignment.TabularMSA.__str__", false]], "__str__() (skbio.embedding.embedding method)": [[164, "skbio.embedding.Embedding.__str__", false]], "__str__() (skbio.embedding.proteinembedding method)": [[175, "skbio.embedding.ProteinEmbedding.__str__", false]], "__str__() (skbio.embedding.proteinvector method)": [[188, "skbio.embedding.ProteinVector.__str__", false]], "__str__() (skbio.embedding.sequenceembedding method)": [[201, "skbio.embedding.SequenceEmbedding.__str__", false]], "__str__() (skbio.embedding.sequencevector method)": [[212, "skbio.embedding.SequenceVector.__str__", false]], "__str__() (skbio.io.registry.format method)": [[247, "skbio.io.registry.Format.__str__", false]], "__str__() (skbio.io.registry.ioregistry method)": [[260, "skbio.io.registry.IORegistry.__str__", false]], "__str__() (skbio.metadata.categoricalmetadatacolumn method)": [[288, "skbio.metadata.CategoricalMetadataColumn.__str__", false]], "__str__() (skbio.metadata.interval method)": [[306, "skbio.metadata.Interval.__str__", false]], "__str__() (skbio.metadata.intervalmetadata method)": [[318, "skbio.metadata.IntervalMetadata.__str__", false]], "__str__() (skbio.metadata.metadatacolumn method)": [[335, "skbio.metadata.MetadataColumn.__str__", false]], "__str__() (skbio.metadata.numericmetadatacolumn method)": [[353, "skbio.metadata.NumericMetadataColumn.__str__", false]], "__str__() (skbio.metadata.samplemetadata method)": [[371, "skbio.metadata.SampleMetadata.__str__", false]], "__str__() (skbio.sequence.dna method)": [[398, "skbio.sequence.DNA.__str__", false]], "__str__() (skbio.sequence.geneticcode method)": [[449, "skbio.sequence.GeneticCode.__str__", false]], "__str__() (skbio.sequence.grammaredsequence method)": [[469, "skbio.sequence.GrammaredSequence.__str__", false]], "__str__() (skbio.sequence.protein method)": [[520, "skbio.sequence.Protein.__str__", false]], "__str__() (skbio.sequence.rna method)": [[573, "skbio.sequence.RNA.__str__", false]], "__str__() (skbio.sequence.sequence method)": [[632, "skbio.sequence.Sequence.__str__", false]], "__str__() (skbio.sequence.substitutionmatrix method)": [[664, "skbio.sequence.SubstitutionMatrix.__str__", false]], "__str__() (skbio.stats.distance.dissimilaritymatrix method)": [[717, "skbio.stats.distance.DissimilarityMatrix.__str__", false]], "__str__() (skbio.stats.distance.distancematrix method)": [[740, "skbio.stats.distance.DistanceMatrix.__str__", false]], "__str__() (skbio.stats.gradient.averagegradientanova method)": [[775, "skbio.stats.gradient.AverageGradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.categoryresults method)": [[786, "skbio.stats.gradient.CategoryResults.__str__", false]], "__str__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[797, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.gradientanova method)": [[808, "skbio.stats.gradient.GradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.gradientanovaresults method)": [[819, "skbio.stats.gradient.GradientANOVAResults.__str__", false]], "__str__() (skbio.stats.gradient.groupresults method)": [[830, "skbio.stats.gradient.GroupResults.__str__", false]], "__str__() (skbio.stats.gradient.trajectorygradientanova method)": [[841, "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[852, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", false]], "__str__() (skbio.stats.ordination.ordinationresults method)": [[865, "skbio.stats.ordination.OrdinationResults.__str__", false]], "__str__() (skbio.table.table method)": [[897, "skbio.table.Table.__str__", false]], "__str__() (skbio.tree.treenode method)": [[969, "skbio.tree.TreeNode.__str__", false]], "__str__() (skbio.util.classproperty method)": [[1058, "skbio.util.classproperty.__str__", false]], "__str__() (skbio.workflow.method method)": [[1087, "skbio.workflow.method.__str__", false]], "__str__() (skbio.workflow.requires method)": [[1098, "skbio.workflow.requires.__str__", false]], "__str__() (skbio.workflow.workflow method)": [[1075, "skbio.workflow.Workflow.__str__", false]], "accumulate_to_ancestor() (skbio.tree.treenode method)": [[970, "skbio.tree.TreeNode.accumulate_to_ancestor", false]], "ace() (in module skbio.diversity.alpha)": [[107, "skbio.diversity.alpha.ace", false]], "add() (skbio.metadata.intervalmetadata method)": [[319, "skbio.metadata.IntervalMetadata.add", false]], "add_format() (skbio.io.registry.ioregistry method)": [[261, "skbio.io.registry.IORegistry.add_format", false]], "add_group_metadata() (skbio.table.table method)": [[898, "skbio.table.Table.add_group_metadata", false]], "add_metadata() (skbio.table.table method)": [[899, "skbio.table.Table.add_metadata", false]], "align_to() (skbio.table.table method)": [[900, "skbio.table.Table.align_to", false]], "align_to_dataframe() (skbio.table.table method)": [[901, "skbio.table.Table.align_to_dataframe", false]], "align_tree() (skbio.table.table method)": [[902, "skbio.table.Table.align_tree", false]], "alignmentstructure (class in skbio.alignment)": [[20, "skbio.alignment.AlignmentStructure", false]], "alignpath (class in skbio.alignment)": [[3, "skbio.alignment.AlignPath", false]], "alpha_diversity() (in module skbio.diversity)": [[146, "skbio.diversity.alpha_diversity", false]], "alr() (in module skbio.stats.composition)": [[686, "skbio.stats.composition.alr", false]], "alr_inv() (in module skbio.stats.composition)": [[687, "skbio.stats.composition.alr_inv", false]], "ancestors() (skbio.tree.treenode method)": [[971, "skbio.tree.TreeNode.ancestors", false]], "ancom() (in module skbio.stats.composition)": [[688, "skbio.stats.composition.ancom", false]], "anosim() (in module skbio.stats.distance)": [[756, "skbio.stats.distance.anosim", false]], "append() (skbio.alignment.tabularmsa method)": [[82, "skbio.alignment.TabularMSA.append", false]], "append() (skbio.tree.treenode method)": [[972, "skbio.tree.TreeNode.append", false]], "ascii_art() (skbio.tree.treenode method)": [[973, "skbio.tree.TreeNode.ascii_art", false]], "assert_data_frame_almost_equal() (in module skbio.util)": [[1042, "skbio.util.assert_data_frame_almost_equal", false]], "assert_ordination_results_equal() (in module skbio.util)": [[1043, "skbio.util.assert_ordination_results_equal", false]], "assign_ids() (skbio.tree.treenode method)": [[974, "skbio.tree.TreeNode.assign_ids", false]], "assign_supports() (skbio.tree.treenode method)": [[975, "skbio.tree.TreeNode.assign_supports", false]], "averagegradientanova (class in skbio.stats.gradient)": [[766, "skbio.stats.gradient.AverageGradientANOVA", false]], "berger_parker_d() (in module skbio.diversity.alpha)": [[108, "skbio.diversity.alpha.berger_parker_d", false]], "beta_diversity() (in module skbio.diversity)": [[150, "skbio.diversity.beta_diversity", false]], "between() (skbio.sequence.substitutionmatrix method)": [[665, "skbio.sequence.SubstitutionMatrix.between", false]], "between() (skbio.stats.distance.dissimilaritymatrix method)": [[718, "skbio.stats.distance.DissimilarityMatrix.between", false]], "between() (skbio.stats.distance.distancematrix method)": [[741, "skbio.stats.distance.DistanceMatrix.between", false]], "bifurcate() (skbio.tree.treenode method)": [[976, "skbio.tree.TreeNode.bifurcate", false]], "bioenv() (in module skbio.stats.distance)": [[757, "skbio.stats.distance.bioenv", false]], "block_beta_diversity() (in module skbio.diversity)": [[151, "skbio.diversity.block_beta_diversity", false]], "brillouin_d() (in module skbio.diversity.alpha)": [[109, "skbio.diversity.alpha.brillouin_d", false]], "by_name() (skbio.sequence.substitutionmatrix class method)": [[666, "skbio.sequence.SubstitutionMatrix.by_name", false]], "bytes() (skbio.embedding.embedding method)": [[165, "skbio.embedding.Embedding.bytes", false]], "bytes() (skbio.embedding.proteinembedding method)": [[176, "skbio.embedding.ProteinEmbedding.bytes", false]], "bytes() (skbio.embedding.proteinvector method)": [[189, "skbio.embedding.ProteinVector.bytes", false]], "bytes() (skbio.embedding.sequenceembedding method)": [[202, "skbio.embedding.SequenceEmbedding.bytes", false]], "bytes() (skbio.embedding.sequencevector method)": [[213, "skbio.embedding.SequenceVector.bytes", false]], "ca() (in module skbio.stats.ordination)": [[870, "skbio.stats.ordination.ca", false]], "cache_attr() (skbio.tree.treenode method)": [[977, "skbio.tree.TreeNode.cache_attr", false]], "cardinal_to_ordinal() (in module skbio.util)": [[1044, "skbio.util.cardinal_to_ordinal", false]], "categoricalmetadatacolumn (class in skbio.metadata)": [[280, "skbio.metadata.CategoricalMetadataColumn", false]], "categoryresults (class in skbio.stats.gradient)": [[777, "skbio.stats.gradient.CategoryResults", false]], "cca() (in module skbio.stats.ordination)": [[871, "skbio.stats.ordination.cca", false]], "centralize() (in module skbio.stats.composition)": [[689, "skbio.stats.composition.centralize", false]], "chao1() (in module skbio.diversity.alpha)": [[110, "skbio.diversity.alpha.chao1", false]], "chao1_ci() (in module skbio.diversity.alpha)": [[111, "skbio.diversity.alpha.chao1_ci", false]], "classproperty (class in skbio.util)": [[1045, "skbio.util.classproperty", false]], "closure() (in module skbio.stats.composition)": [[690, "skbio.stats.composition.closure", false]], "clr() (in module skbio.stats.composition)": [[691, "skbio.stats.composition.clr", false]], "clr_inv() (in module skbio.stats.composition)": [[692, "skbio.stats.composition.clr_inv", false]], "collapse() (skbio.table.table method)": [[903, "skbio.table.Table.collapse", false]], "compare_rfd() (skbio.tree.treenode method)": [[978, "skbio.tree.TreeNode.compare_rfd", false]], "compare_subsets() (skbio.tree.treenode method)": [[979, "skbio.tree.TreeNode.compare_subsets", false]], "compare_tip_distances() (skbio.tree.treenode method)": [[980, "skbio.tree.TreeNode.compare_tip_distances", false]], "complement() (skbio.sequence.dna method)": [[399, "skbio.sequence.DNA.complement", false]], "complement() (skbio.sequence.rna method)": [[574, "skbio.sequence.RNA.complement", false]], "concat() (skbio.metadata.intervalmetadata class method)": [[320, "skbio.metadata.IntervalMetadata.concat", false]], "concat() (skbio.sequence.dna class method)": [[400, "skbio.sequence.DNA.concat", false]], "concat() (skbio.sequence.grammaredsequence class method)": [[470, "skbio.sequence.GrammaredSequence.concat", false]], "concat() (skbio.sequence.protein class method)": [[521, "skbio.sequence.Protein.concat", false]], "concat() (skbio.sequence.rna class method)": [[575, "skbio.sequence.RNA.concat", false]], "concat() (skbio.sequence.sequence class method)": [[633, "skbio.sequence.Sequence.concat", false]], "concat() (skbio.table.table method)": [[904, "skbio.table.Table.concat", false]], "condensed_form() (skbio.stats.distance.distancematrix method)": [[742, "skbio.stats.distance.DistanceMatrix.condensed_form", false]], "confidence_bound() (in module skbio.stats.power)": [[882, "skbio.stats.power.confidence_bound", false]], "consensus() (skbio.alignment.tabularmsa method)": [[83, "skbio.alignment.TabularMSA.consensus", false]], "conservation() (skbio.alignment.tabularmsa method)": [[84, "skbio.alignment.TabularMSA.conservation", false]], "copy() (skbio.sequence.substitutionmatrix method)": [[667, "skbio.sequence.SubstitutionMatrix.copy", false]], "copy() (skbio.stats.distance.dissimilaritymatrix method)": [[719, "skbio.stats.distance.DissimilarityMatrix.copy", false]], "copy() (skbio.stats.distance.distancematrix method)": [[743, "skbio.stats.distance.DistanceMatrix.copy", false]], "copy() (skbio.table.table method)": [[905, "skbio.table.Table.copy", false]], "copy() (skbio.tree.treenode method)": [[981, "skbio.tree.TreeNode.copy", false]], "corr() (in module skbio.stats.ordination)": [[872, "skbio.stats.ordination.corr", false]], "count() (skbio.sequence.dna method)": [[401, "skbio.sequence.DNA.count", false]], "count() (skbio.sequence.grammaredsequence method)": [[471, "skbio.sequence.GrammaredSequence.count", false]], "count() (skbio.sequence.protein method)": [[522, "skbio.sequence.Protein.count", false]], "count() (skbio.sequence.rna method)": [[576, "skbio.sequence.RNA.count", false]], "count() (skbio.sequence.sequence method)": [[634, "skbio.sequence.Sequence.count", false]], "count() (skbio.tree.treenode method)": [[982, "skbio.tree.TreeNode.count", false]], "create_caches() (skbio.tree.treenode method)": [[983, "skbio.tree.TreeNode.create_caches", false]], "create_format() (in module skbio.io.registry)": [[272, "skbio.io.registry.create_format", false]], "create_format() (skbio.io.registry.ioregistry method)": [[262, "skbio.io.registry.IORegistry.create_format", false]], "data() (skbio.table.table method)": [[906, "skbio.table.Table.data", false]], "deepcopy() (skbio.tree.treenode method)": [[984, "skbio.tree.TreeNode.deepcopy", false]], "definites() (skbio.sequence.dna method)": [[402, "skbio.sequence.DNA.definites", false]], "definites() (skbio.sequence.grammaredsequence method)": [[472, "skbio.sequence.GrammaredSequence.definites", false]], "definites() (skbio.sequence.protein method)": [[523, "skbio.sequence.Protein.definites", false]], "definites() (skbio.sequence.rna method)": [[577, "skbio.sequence.RNA.definites", false]], "degap() (skbio.sequence.dna method)": [[403, "skbio.sequence.DNA.degap", false]], "degap() (skbio.sequence.grammaredsequence method)": [[473, "skbio.sequence.GrammaredSequence.degap", false]], "degap() (skbio.sequence.protein method)": [[524, "skbio.sequence.Protein.degap", false]], "degap() (skbio.sequence.rna method)": [[578, "skbio.sequence.RNA.degap", false]], "degenerates() (skbio.sequence.dna method)": [[404, "skbio.sequence.DNA.degenerates", false]], "degenerates() (skbio.sequence.grammaredsequence method)": [[474, "skbio.sequence.GrammaredSequence.degenerates", false]], "degenerates() (skbio.sequence.protein method)": [[525, "skbio.sequence.Protein.degenerates", false]], "degenerates() (skbio.sequence.rna method)": [[579, "skbio.sequence.RNA.degenerates", false]], "del_metadata() (skbio.table.table method)": [[907, "skbio.table.Table.del_metadata", false]], "deleter() (skbio.util.classproperty method)": [[1059, "skbio.util.classproperty.deleter", false]], "delimited_self() (skbio.table.table method)": [[908, "skbio.table.Table.delimited_self", false]], "descending_branch_length() (skbio.tree.treenode method)": [[985, "skbio.tree.TreeNode.descending_branch_length", false]], "descriptive_equality() (skbio.table.table method)": [[909, "skbio.table.Table.descriptive_equality", false]], "dirmult_ttest() (in module skbio.stats.composition)": [[693, "skbio.stats.composition.dirmult_ttest", false]], "dissimilaritymatrix (class in skbio.stats.distance)": [[707, "skbio.stats.distance.DissimilarityMatrix", false]], "distance() (skbio.sequence.dna method)": [[405, "skbio.sequence.DNA.distance", false]], "distance() (skbio.sequence.grammaredsequence method)": [[475, "skbio.sequence.GrammaredSequence.distance", false]], "distance() (skbio.sequence.protein method)": [[526, "skbio.sequence.Protein.distance", false]], "distance() (skbio.sequence.rna method)": [[580, "skbio.sequence.RNA.distance", false]], "distance() (skbio.sequence.sequence method)": [[635, "skbio.sequence.Sequence.distance", false]], "distance() (skbio.tree.treenode method)": [[986, "skbio.tree.TreeNode.distance", false]], "distancematrix (class in skbio.stats.distance)": [[730, "skbio.stats.distance.DistanceMatrix", false]], "dna (class in skbio.sequence)": [[382, "skbio.sequence.DNA", false]], "dominance() (in module skbio.diversity.alpha)": [[112, "skbio.diversity.alpha.dominance", false]], "doubles() (in module skbio.diversity.alpha)": [[113, "skbio.diversity.alpha.doubles", false]], "drop() (skbio.metadata.interval method)": [[307, "skbio.metadata.Interval.drop", false]], "drop() (skbio.metadata.intervalmetadata method)": [[321, "skbio.metadata.IntervalMetadata.drop", false]], "drop_missing_values() (skbio.metadata.categoricalmetadatacolumn method)": [[289, "skbio.metadata.CategoricalMetadataColumn.drop_missing_values", false]], "drop_missing_values() (skbio.metadata.metadatacolumn method)": [[336, "skbio.metadata.MetadataColumn.drop_missing_values", false]], "drop_missing_values() (skbio.metadata.numericmetadatacolumn method)": [[354, "skbio.metadata.NumericMetadataColumn.drop_missing_values", false]], "e_matrix() (in module skbio.stats.ordination)": [[873, "skbio.stats.ordination.e_matrix", false]], "efficiencywarning": [[1040, "skbio.util.EfficiencyWarning", false]], "embed_vec_to_dataframe() (in module skbio.embedding)": [[214, "skbio.embedding.embed_vec_to_dataframe", false]], "embed_vec_to_distances() (in module skbio.embedding)": [[215, "skbio.embedding.embed_vec_to_distances", false]], "embed_vec_to_numpy() (in module skbio.embedding)": [[216, "skbio.embedding.embed_vec_to_numpy", false]], "embed_vec_to_ordination() (in module skbio.embedding)": [[217, "skbio.embedding.embed_vec_to_ordination", false]], "embedding (class in skbio.embedding)": [[155, "skbio.embedding.Embedding", false]], "enspie() (in module skbio.diversity.alpha)": [[114, "skbio.diversity.alpha.enspie", false]], "esty_ci() (in module skbio.diversity.alpha)": [[115, "skbio.diversity.alpha.esty_ci", false]], "example_table (in module skbio.table)": [[954, "skbio.table.example_table", false]], "exists() (skbio.table.table method)": [[910, "skbio.table.Table.exists", false]], "expand_degenerates() (skbio.sequence.dna method)": [[406, "skbio.sequence.DNA.expand_degenerates", false]], "expand_degenerates() (skbio.sequence.grammaredsequence method)": [[476, "skbio.sequence.GrammaredSequence.expand_degenerates", false]], "expand_degenerates() (skbio.sequence.protein method)": [[527, "skbio.sequence.Protein.expand_degenerates", false]], "expand_degenerates() (skbio.sequence.rna method)": [[581, "skbio.sequence.RNA.expand_degenerates", false]], "extend() (skbio.alignment.tabularmsa method)": [[85, "skbio.alignment.TabularMSA.extend", false]], "extend() (skbio.tree.treenode method)": [[987, "skbio.tree.TreeNode.extend", false]], "f_matrix() (in module skbio.stats.ordination)": [[874, "skbio.stats.ordination.f_matrix", false]], "faith_pd() (in module skbio.diversity.alpha)": [[116, "skbio.diversity.alpha.faith_pd", false]], "filter() (skbio.sequence.substitutionmatrix method)": [[668, "skbio.sequence.SubstitutionMatrix.filter", false]], "filter() (skbio.stats.distance.dissimilaritymatrix method)": [[720, "skbio.stats.distance.DissimilarityMatrix.filter", false]], "filter() (skbio.stats.distance.distancematrix method)": [[744, "skbio.stats.distance.DistanceMatrix.filter", false]], "filter() (skbio.table.table method)": [[911, "skbio.table.Table.filter", false]], "filter_columns() (skbio.metadata.samplemetadata method)": [[372, "skbio.metadata.SampleMetadata.filter_columns", false]], "filter_ids() (skbio.metadata.categoricalmetadatacolumn method)": [[290, "skbio.metadata.CategoricalMetadataColumn.filter_ids", false]], "filter_ids() (skbio.metadata.metadatacolumn method)": [[337, "skbio.metadata.MetadataColumn.filter_ids", false]], "filter_ids() (skbio.metadata.numericmetadatacolumn method)": [[355, "skbio.metadata.NumericMetadataColumn.filter_ids", false]], "filter_ids() (skbio.metadata.samplemetadata method)": [[373, "skbio.metadata.SampleMetadata.filter_ids", false]], "find() (skbio.tree.treenode method)": [[988, "skbio.tree.TreeNode.find", false]], "find_all() (skbio.tree.treenode method)": [[989, "skbio.tree.TreeNode.find_all", false]], "find_by_func() (skbio.tree.treenode method)": [[990, "skbio.tree.TreeNode.find_by_func", false]], "find_by_id() (skbio.tree.treenode method)": [[991, "skbio.tree.TreeNode.find_by_id", false]], "find_duplicates() (in module skbio.util)": [[1062, "skbio.util.find_duplicates", false]], "find_motifs() (skbio.sequence.dna method)": [[407, "skbio.sequence.DNA.find_motifs", false]], "find_motifs() (skbio.sequence.grammaredsequence method)": [[477, "skbio.sequence.GrammaredSequence.find_motifs", false]], "find_motifs() (skbio.sequence.protein method)": [[528, "skbio.sequence.Protein.find_motifs", false]], "find_motifs() (skbio.sequence.rna method)": [[582, "skbio.sequence.RNA.find_motifs", false]], "find_with_regex() (skbio.sequence.dna method)": [[408, "skbio.sequence.DNA.find_with_regex", false]], "find_with_regex() (skbio.sequence.grammaredsequence method)": [[478, "skbio.sequence.GrammaredSequence.find_with_regex", false]], "find_with_regex() (skbio.sequence.protein method)": [[529, "skbio.sequence.Protein.find_with_regex", false]], "find_with_regex() (skbio.sequence.rna method)": [[583, "skbio.sequence.RNA.find_with_regex", false]], "find_with_regex() (skbio.sequence.sequence method)": [[636, "skbio.sequence.Sequence.find_with_regex", false]], "firstdifferencegradientanova (class in skbio.stats.gradient)": [[788, "skbio.stats.gradient.FirstDifferenceGradientANOVA", false]], "fisher_alpha() (in module skbio.diversity.alpha)": [[117, "skbio.diversity.alpha.fisher_alpha", false]], "format (class in skbio.io.registry)": [[238, "skbio.io.registry.Format", false]], "frequencies() (skbio.sequence.dna method)": [[409, "skbio.sequence.DNA.frequencies", false]], "frequencies() (skbio.sequence.grammaredsequence method)": [[479, "skbio.sequence.GrammaredSequence.frequencies", false]], "frequencies() (skbio.sequence.protein method)": [[530, "skbio.sequence.Protein.frequencies", false]], "frequencies() (skbio.sequence.rna method)": [[584, "skbio.sequence.RNA.frequencies", false]], "frequencies() (skbio.sequence.sequence method)": [[637, "skbio.sequence.Sequence.frequencies", false]], "from_adjacency() (skbio.table.table static method)": [[912, "skbio.table.Table.from_adjacency", false]], "from_bits() (skbio.alignment.alignpath class method)": [[13, "skbio.alignment.AlignPath.from_bits", false]], "from_bits() (skbio.alignment.pairalignpath class method)": [[44, "skbio.alignment.PairAlignPath.from_bits", false]], "from_cigar() (skbio.alignment.pairalignpath class method)": [[45, "skbio.alignment.PairAlignPath.from_cigar", false]], "from_coordinates() (skbio.alignment.alignpath class method)": [[14, "skbio.alignment.AlignPath.from_coordinates", false]], "from_coordinates() (skbio.alignment.pairalignpath class method)": [[46, "skbio.alignment.PairAlignPath.from_coordinates", false]], "from_dict() (skbio.alignment.tabularmsa class method)": [[86, "skbio.alignment.TabularMSA.from_dict", false]], "from_dict() (skbio.sequence.substitutionmatrix class method)": [[669, "skbio.sequence.SubstitutionMatrix.from_dict", false]], "from_hdf5() (skbio.table.table class method)": [[913, "skbio.table.Table.from_hdf5", false]], "from_indices() (skbio.alignment.alignpath class method)": [[15, "skbio.alignment.AlignPath.from_indices", false]], "from_indices() (skbio.alignment.pairalignpath class method)": [[47, "skbio.alignment.PairAlignPath.from_indices", false]], "from_iterable() (skbio.sequence.substitutionmatrix class method)": [[670, "skbio.sequence.SubstitutionMatrix.from_iterable", false]], "from_iterable() (skbio.stats.distance.dissimilaritymatrix class method)": [[721, "skbio.stats.distance.DissimilarityMatrix.from_iterable", false]], "from_iterable() (skbio.stats.distance.distancematrix class method)": [[745, "skbio.stats.distance.DistanceMatrix.from_iterable", false]], "from_json() (skbio.table.table class method)": [[914, "skbio.table.Table.from_json", false]], "from_linkage_matrix() (skbio.tree.treenode class method)": [[992, "skbio.tree.TreeNode.from_linkage_matrix", false]], "from_ncbi() (skbio.sequence.geneticcode class method)": [[450, "skbio.sequence.GeneticCode.from_ncbi", false]], "from_path_seqs() (skbio.alignment.tabularmsa class method)": [[87, "skbio.alignment.TabularMSA.from_path_seqs", false]], "from_tabular() (skbio.alignment.alignpath class method)": [[16, "skbio.alignment.AlignPath.from_tabular", false]], "from_tabular() (skbio.alignment.pairalignpath class method)": [[48, "skbio.alignment.PairAlignPath.from_tabular", false]], "from_taxdump() (skbio.tree.treenode class method)": [[993, "skbio.tree.TreeNode.from_taxdump", false]], "from_taxonomy() (skbio.tree.treenode class method)": [[994, "skbio.tree.TreeNode.from_taxonomy", false]], "from_tsv() (skbio.table.table static method)": [[915, "skbio.table.Table.from_tsv", false]], "gap_frequencies() (skbio.alignment.tabularmsa method)": [[88, "skbio.alignment.TabularMSA.gap_frequencies", false]], "gaps() (skbio.sequence.dna method)": [[410, "skbio.sequence.DNA.gaps", false]], "gaps() (skbio.sequence.grammaredsequence method)": [[480, "skbio.sequence.GrammaredSequence.gaps", false]], "gaps() (skbio.sequence.protein method)": [[531, "skbio.sequence.Protein.gaps", false]], "gaps() (skbio.sequence.rna method)": [[585, "skbio.sequence.RNA.gaps", false]], "gc_content() (skbio.sequence.dna method)": [[411, "skbio.sequence.DNA.gc_content", false]], "gc_content() (skbio.sequence.rna method)": [[586, "skbio.sequence.RNA.gc_content", false]], "gc_frequency() (skbio.sequence.dna method)": [[412, "skbio.sequence.DNA.gc_frequency", false]], "gc_frequency() (skbio.sequence.rna method)": [[587, "skbio.sequence.RNA.gc_frequency", false]], "geneticcode (class in skbio.sequence)": [[441, "skbio.sequence.GeneticCode", false]], "get_alpha_diversity_metrics() (in module skbio.diversity)": [[152, "skbio.diversity.get_alpha_diversity_metrics", false]], "get_beta_diversity_metrics() (in module skbio.diversity)": [[153, "skbio.diversity.get_beta_diversity_metrics", false]], "get_column() (skbio.metadata.samplemetadata method)": [[374, "skbio.metadata.SampleMetadata.get_column", false]], "get_data_path() (in module skbio.util)": [[1063, "skbio.util.get_data_path", false]], "get_ids() (skbio.metadata.categoricalmetadatacolumn method)": [[291, "skbio.metadata.CategoricalMetadataColumn.get_ids", false]], "get_ids() (skbio.metadata.metadatacolumn method)": [[338, "skbio.metadata.MetadataColumn.get_ids", false]], "get_ids() (skbio.metadata.numericmetadatacolumn method)": [[356, "skbio.metadata.NumericMetadataColumn.get_ids", false]], "get_ids() (skbio.metadata.samplemetadata method)": [[375, "skbio.metadata.SampleMetadata.get_ids", false]], "get_max_distance() (skbio.tree.treenode method)": [[995, "skbio.tree.TreeNode.get_max_distance", false]], "get_missing() (skbio.metadata.categoricalmetadatacolumn method)": [[292, "skbio.metadata.CategoricalMetadataColumn.get_missing", false]], "get_missing() (skbio.metadata.metadatacolumn method)": [[339, "skbio.metadata.MetadataColumn.get_missing", false]], "get_missing() (skbio.metadata.numericmetadatacolumn method)": [[357, "skbio.metadata.NumericMetadataColumn.get_missing", false]], "get_names() (skbio.sequence.substitutionmatrix class method)": [[671, "skbio.sequence.SubstitutionMatrix.get_names", false]], "get_reader() (skbio.io.registry.ioregistry method)": [[263, "skbio.io.registry.IORegistry.get_reader", false]], "get_sniffer() (skbio.io.registry.ioregistry method)": [[264, "skbio.io.registry.IORegistry.get_sniffer", false]], "get_table_density() (skbio.table.table method)": [[916, "skbio.table.Table.get_table_density", false]], "get_trajectories() (skbio.stats.gradient.averagegradientanova method)": [[776, "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.firstdifferencegradientanova method)": [[798, "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.gradientanova method)": [[809, "skbio.stats.gradient.GradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.trajectorygradientanova method)": [[842, "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.windowdifferencegradientanova method)": [[853, "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", false]], "get_value() (skbio.metadata.categoricalmetadatacolumn method)": [[293, "skbio.metadata.CategoricalMetadataColumn.get_value", false]], "get_value() (skbio.metadata.metadatacolumn method)": [[340, "skbio.metadata.MetadataColumn.get_value", false]], "get_value() (skbio.metadata.numericmetadatacolumn method)": [[358, "skbio.metadata.NumericMetadataColumn.get_value", false]], "get_value_by_ids() (skbio.table.table method)": [[917, "skbio.table.Table.get_value_by_ids", false]], "get_writer() (skbio.io.registry.ioregistry method)": [[265, "skbio.io.registry.IORegistry.get_writer", false]], "getter() (skbio.util.classproperty method)": [[1060, "skbio.util.classproperty.getter", false]], "gini_index() (in module skbio.diversity.alpha)": [[118, "skbio.diversity.alpha.gini_index", false]], "global_pairwise_align() (in module skbio.alignment)": [[98, "skbio.alignment.global_pairwise_align", false]], "global_pairwise_align_nucleotide() (in module skbio.alignment)": [[99, "skbio.alignment.global_pairwise_align_nucleotide", false]], "global_pairwise_align_protein() (in module skbio.alignment)": [[100, "skbio.alignment.global_pairwise_align_protein", false]], "goods_coverage() (in module skbio.diversity.alpha)": [[119, "skbio.diversity.alpha.goods_coverage", false]], "gradientanova (class in skbio.stats.gradient)": [[799, "skbio.stats.gradient.GradientANOVA", false]], "gradientanovaresults (class in skbio.stats.gradient)": [[810, "skbio.stats.gradient.GradientANOVAResults", false]], "grammaredsequence (class in skbio.sequence)": [[453, "skbio.sequence.GrammaredSequence", false]], "group_metadata() (skbio.table.table method)": [[918, "skbio.table.Table.group_metadata", false]], "groupresults (class in skbio.stats.gradient)": [[821, "skbio.stats.gradient.GroupResults", false]], "hamming() (in module skbio.sequence.distance)": [[683, "skbio.sequence.distance.hamming", false]], "has_children() (skbio.tree.treenode method)": [[996, "skbio.tree.TreeNode.has_children", false]], "has_definites() (skbio.sequence.dna method)": [[413, "skbio.sequence.DNA.has_definites", false]], "has_definites() (skbio.sequence.grammaredsequence method)": [[481, "skbio.sequence.GrammaredSequence.has_definites", false]], "has_definites() (skbio.sequence.protein method)": [[532, "skbio.sequence.Protein.has_definites", false]], "has_definites() (skbio.sequence.rna method)": [[588, "skbio.sequence.RNA.has_definites", false]], "has_degenerates() (skbio.sequence.dna method)": [[414, "skbio.sequence.DNA.has_degenerates", false]], "has_degenerates() (skbio.sequence.grammaredsequence method)": [[482, "skbio.sequence.GrammaredSequence.has_degenerates", false]], "has_degenerates() (skbio.sequence.protein method)": [[533, "skbio.sequence.Protein.has_degenerates", false]], "has_degenerates() (skbio.sequence.rna method)": [[589, "skbio.sequence.RNA.has_degenerates", false]], "has_gaps() (skbio.sequence.dna method)": [[415, "skbio.sequence.DNA.has_gaps", false]], "has_gaps() (skbio.sequence.grammaredsequence method)": [[483, "skbio.sequence.GrammaredSequence.has_gaps", false]], "has_gaps() (skbio.sequence.protein method)": [[534, "skbio.sequence.Protein.has_gaps", false]], "has_gaps() (skbio.sequence.rna method)": [[590, "skbio.sequence.RNA.has_gaps", false]], "has_interval_metadata() (skbio.sequence.dna method)": [[416, "skbio.sequence.DNA.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.grammaredsequence method)": [[484, "skbio.sequence.GrammaredSequence.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.protein method)": [[535, "skbio.sequence.Protein.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.rna method)": [[591, "skbio.sequence.RNA.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.sequence method)": [[638, "skbio.sequence.Sequence.has_interval_metadata", false]], "has_metadata() (skbio.alignment.tabularmsa method)": [[89, "skbio.alignment.TabularMSA.has_metadata", false]], "has_metadata() (skbio.sequence.dna method)": [[417, "skbio.sequence.DNA.has_metadata", false]], "has_metadata() (skbio.sequence.grammaredsequence method)": [[485, "skbio.sequence.GrammaredSequence.has_metadata", false]], "has_metadata() (skbio.sequence.protein method)": [[536, "skbio.sequence.Protein.has_metadata", false]], "has_metadata() (skbio.sequence.rna method)": [[592, "skbio.sequence.RNA.has_metadata", false]], "has_metadata() (skbio.sequence.sequence method)": [[639, "skbio.sequence.Sequence.has_metadata", false]], "has_missing_values() (skbio.metadata.categoricalmetadatacolumn method)": [[294, "skbio.metadata.CategoricalMetadataColumn.has_missing_values", false]], "has_missing_values() (skbio.metadata.metadatacolumn method)": [[341, "skbio.metadata.MetadataColumn.has_missing_values", false]], "has_missing_values() (skbio.metadata.numericmetadatacolumn method)": [[359, "skbio.metadata.NumericMetadataColumn.has_missing_values", false]], "has_nondegenerates() (skbio.sequence.dna method)": [[418, "skbio.sequence.DNA.has_nondegenerates", false]], "has_nondegenerates() (skbio.sequence.grammaredsequence method)": [[486, "skbio.sequence.GrammaredSequence.has_nondegenerates", false]], "has_nondegenerates() (skbio.sequence.protein method)": [[537, "skbio.sequence.Protein.has_nondegenerates", false]], "has_nondegenerates() (skbio.sequence.rna method)": [[593, "skbio.sequence.RNA.has_nondegenerates", false]], "has_positional_metadata() (skbio.alignment.tabularmsa method)": [[90, "skbio.alignment.TabularMSA.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.dna method)": [[419, "skbio.sequence.DNA.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.grammaredsequence method)": [[487, "skbio.sequence.GrammaredSequence.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.protein method)": [[538, "skbio.sequence.Protein.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.rna method)": [[594, "skbio.sequence.RNA.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.sequence method)": [[640, "skbio.sequence.Sequence.has_positional_metadata", false]], "has_stops() (skbio.sequence.protein method)": [[539, "skbio.sequence.Protein.has_stops", false]], "head() (skbio.table.table method)": [[919, "skbio.table.Table.head", false]], "heip_e() (in module skbio.diversity.alpha)": [[120, "skbio.diversity.alpha.heip_e", false]], "hill() (in module skbio.diversity.alpha)": [[121, "skbio.diversity.alpha.hill", false]], "hommola_cospeciation() (in module skbio.stats.evolve)": [[764, "skbio.stats.evolve.hommola_cospeciation", false]], "identity() (skbio.sequence.substitutionmatrix class method)": [[672, "skbio.sequence.SubstitutionMatrix.identity", false]], "ids() (skbio.table.table method)": [[920, "skbio.table.Table.ids", false]], "ilr() (in module skbio.stats.composition)": [[694, "skbio.stats.composition.ilr", false]], "ilr_inv() (in module skbio.stats.composition)": [[695, "skbio.stats.composition.ilr_inv", false]], "index() (skbio.sequence.dna method)": [[420, "skbio.sequence.DNA.index", false]], "index() (skbio.sequence.grammaredsequence method)": [[488, "skbio.sequence.GrammaredSequence.index", false]], "index() (skbio.sequence.protein method)": [[540, "skbio.sequence.Protein.index", false]], "index() (skbio.sequence.rna method)": [[595, "skbio.sequence.RNA.index", false]], "index() (skbio.sequence.sequence method)": [[641, "skbio.sequence.Sequence.index", false]], "index() (skbio.sequence.substitutionmatrix method)": [[673, "skbio.sequence.SubstitutionMatrix.index", false]], "index() (skbio.stats.distance.dissimilaritymatrix method)": [[722, "skbio.stats.distance.DissimilarityMatrix.index", false]], "index() (skbio.stats.distance.distancematrix method)": [[746, "skbio.stats.distance.DistanceMatrix.index", false]], "index() (skbio.table.table method)": [[921, "skbio.table.Table.index", false]], "index_tree() (skbio.tree.treenode method)": [[997, "skbio.tree.TreeNode.index_tree", false]], "initialize_state() (skbio.workflow.workflow method)": [[1076, "skbio.workflow.Workflow.initialize_state", false]], "inner() (in module skbio.stats.composition)": [[696, "skbio.stats.composition.inner", false]], "insert() (skbio.tree.treenode method)": [[998, "skbio.tree.TreeNode.insert", false]], "interval (class in skbio.metadata)": [[298, "skbio.metadata.Interval", false]], "intervalmetadata (class in skbio.metadata)": [[308, "skbio.metadata.IntervalMetadata", false]], "inv_simpson() (in module skbio.diversity.alpha)": [[122, "skbio.diversity.alpha.inv_simpson", false]], "invalidate_caches() (skbio.tree.treenode method)": [[999, "skbio.tree.TreeNode.invalidate_caches", false]], "ioregistry (class in skbio.io.registry)": [[251, "skbio.io.registry.IORegistry", false]], "is_empty() (skbio.table.table method)": [[922, "skbio.table.Table.is_empty", false]], "is_reverse_complement() (skbio.sequence.dna method)": [[421, "skbio.sequence.DNA.is_reverse_complement", false]], "is_reverse_complement() (skbio.sequence.rna method)": [[596, "skbio.sequence.RNA.is_reverse_complement", false]], "is_root() (skbio.tree.treenode method)": [[1000, "skbio.tree.TreeNode.is_root", false]], "is_tip() (skbio.tree.treenode method)": [[1001, "skbio.tree.TreeNode.is_tip", false]], "is_zero_based() (skbio.alignment.alignmentstructure method)": [[32, "skbio.alignment.AlignmentStructure.is_zero_based", false]], "isubsample() (in module skbio.stats)": [[854, "skbio.stats.isubsample", false]], "iter() (skbio.table.table method)": [[923, "skbio.table.Table.iter", false]], "iter_contiguous() (skbio.sequence.dna method)": [[422, "skbio.sequence.DNA.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.grammaredsequence method)": [[489, "skbio.sequence.GrammaredSequence.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.protein method)": [[541, "skbio.sequence.Protein.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.rna method)": [[597, "skbio.sequence.RNA.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.sequence method)": [[642, "skbio.sequence.Sequence.iter_contiguous", false]], "iter_data() (skbio.table.table method)": [[924, "skbio.table.Table.iter_data", false]], "iter_kmers() (skbio.sequence.dna method)": [[423, "skbio.sequence.DNA.iter_kmers", false]], "iter_kmers() (skbio.sequence.grammaredsequence method)": [[490, "skbio.sequence.GrammaredSequence.iter_kmers", false]], "iter_kmers() (skbio.sequence.protein method)": [[542, "skbio.sequence.Protein.iter_kmers", false]], "iter_kmers() (skbio.sequence.rna method)": [[598, "skbio.sequence.RNA.iter_kmers", false]], "iter_kmers() (skbio.sequence.sequence method)": [[643, "skbio.sequence.Sequence.iter_kmers", false]], "iter_pairwise() (skbio.table.table method)": [[925, "skbio.table.Table.iter_pairwise", false]], "iter_positions() (skbio.alignment.tabularmsa method)": [[91, "skbio.alignment.TabularMSA.iter_positions", false]], "join() (skbio.alignment.tabularmsa method)": [[92, "skbio.alignment.TabularMSA.join", false]], "kempton_taylor_q() (in module skbio.diversity.alpha)": [[123, "skbio.diversity.alpha.kempton_taylor_q", false]], "kmer_distance() (in module skbio.sequence.distance)": [[684, "skbio.sequence.distance.kmer_distance", false]], "kmer_frequencies() (skbio.sequence.dna method)": [[424, "skbio.sequence.DNA.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.grammaredsequence method)": [[491, "skbio.sequence.GrammaredSequence.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.protein method)": [[543, "skbio.sequence.Protein.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.rna method)": [[599, "skbio.sequence.RNA.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.sequence method)": [[644, "skbio.sequence.Sequence.kmer_frequencies", false]], "lca() (skbio.tree.treenode method)": [[1002, "skbio.tree.TreeNode.lca", false]], "length() (skbio.table.table method)": [[926, "skbio.table.Table.length", false]], "levelorder() (skbio.tree.treenode method)": [[1003, "skbio.tree.TreeNode.levelorder", false]], "list_read_formats() (skbio.io.registry.ioregistry method)": [[266, "skbio.io.registry.IORegistry.list_read_formats", false]], "list_write_formats() (skbio.io.registry.ioregistry method)": [[267, "skbio.io.registry.IORegistry.list_write_formats", false]], "lladser_ci() (in module skbio.diversity.alpha)": [[124, "skbio.diversity.alpha.lladser_ci", false]], "lladser_pe() (in module skbio.diversity.alpha)": [[125, "skbio.diversity.alpha.lladser_pe", false]], "load() (skbio.metadata.samplemetadata class method)": [[376, "skbio.metadata.SampleMetadata.load", false]], "local_pairwise_align() (in module skbio.alignment)": [[101, "skbio.alignment.local_pairwise_align", false]], "local_pairwise_align_nucleotide() (in module skbio.alignment)": [[102, "skbio.alignment.local_pairwise_align_nucleotide", false]], "local_pairwise_align_protein() (in module skbio.alignment)": [[103, "skbio.alignment.local_pairwise_align_protein", false]], "local_pairwise_align_ssw() (in module skbio.alignment)": [[104, "skbio.alignment.local_pairwise_align_ssw", false]], "lowercase() (skbio.sequence.dna method)": [[425, "skbio.sequence.DNA.lowercase", false]], "lowercase() (skbio.sequence.grammaredsequence method)": [[492, "skbio.sequence.GrammaredSequence.lowercase", false]], "lowercase() (skbio.sequence.protein method)": [[544, "skbio.sequence.Protein.lowercase", false]], "lowercase() (skbio.sequence.rna method)": [[600, "skbio.sequence.RNA.lowercase", false]], "lowercase() (skbio.sequence.sequence method)": [[645, "skbio.sequence.Sequence.lowercase", false]], "lowest_common_ancestor() (skbio.tree.treenode method)": [[1004, "skbio.tree.TreeNode.lowest_common_ancestor", false]], "majority_rule() (in module skbio.tree)": [[1038, "skbio.tree.majority_rule", false]], "make_identity_substitution_matrix() (in module skbio.alignment)": [[105, "skbio.alignment.make_identity_substitution_matrix", false]], "mantel() (in module skbio.stats.distance)": [[758, "skbio.stats.distance.mantel", false]], "margalef() (in module skbio.diversity.alpha)": [[126, "skbio.diversity.alpha.margalef", false]], "match_frequency() (skbio.sequence.dna method)": [[426, "skbio.sequence.DNA.match_frequency", false]], "match_frequency() (skbio.sequence.grammaredsequence method)": [[493, "skbio.sequence.GrammaredSequence.match_frequency", false]], "match_frequency() (skbio.sequence.protein method)": [[545, "skbio.sequence.Protein.match_frequency", false]], "match_frequency() (skbio.sequence.rna method)": [[601, "skbio.sequence.RNA.match_frequency", false]], "match_frequency() (skbio.sequence.sequence method)": [[646, "skbio.sequence.Sequence.match_frequency", false]], "matches() (skbio.sequence.dna method)": [[427, "skbio.sequence.DNA.matches", false]], "matches() (skbio.sequence.grammaredsequence method)": [[494, "skbio.sequence.GrammaredSequence.matches", false]], "matches() (skbio.sequence.protein method)": [[546, "skbio.sequence.Protein.matches", false]], "matches() (skbio.sequence.rna method)": [[602, "skbio.sequence.RNA.matches", false]], "matches() (skbio.sequence.sequence method)": [[647, "skbio.sequence.Sequence.matches", false]], "max() (skbio.table.table method)": [[927, "skbio.table.Table.max", false]], "mcintosh_d() (in module skbio.diversity.alpha)": [[127, "skbio.diversity.alpha.mcintosh_d", false]], "mcintosh_e() (in module skbio.diversity.alpha)": [[128, "skbio.diversity.alpha.mcintosh_e", false]], "mean_and_std() (in module skbio.stats.ordination)": [[875, "skbio.stats.ordination.mean_and_std", false]], "menhinick() (in module skbio.diversity.alpha)": [[129, "skbio.diversity.alpha.menhinick", false]], "merge() (skbio.metadata.intervalmetadata method)": [[322, "skbio.metadata.IntervalMetadata.merge", false]], "merge() (skbio.metadata.samplemetadata method)": [[377, "skbio.metadata.SampleMetadata.merge", false]], "merge() (skbio.table.table method)": [[928, "skbio.table.Table.merge", false]], "metadata() (skbio.table.table method)": [[929, "skbio.table.Table.metadata", false]], "metadata_to_dataframe() (skbio.table.table method)": [[930, "skbio.table.Table.metadata_to_dataframe", false]], "metadatacolumn (class in skbio.metadata)": [[327, "skbio.metadata.MetadataColumn", false]], "method (class in skbio.workflow)": [[1077, "skbio.workflow.method", false]], "michaelis_menten_fit() (in module skbio.diversity.alpha)": [[130, "skbio.diversity.alpha.michaelis_menten_fit", false]], "min() (skbio.table.table method)": [[931, "skbio.table.Table.min", false]], "mismatch_frequency() (skbio.sequence.dna method)": [[428, "skbio.sequence.DNA.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.grammaredsequence method)": [[495, "skbio.sequence.GrammaredSequence.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.protein method)": [[547, "skbio.sequence.Protein.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.rna method)": [[603, "skbio.sequence.RNA.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.sequence method)": [[648, "skbio.sequence.Sequence.mismatch_frequency", false]], "mismatches() (skbio.sequence.dna method)": [[429, "skbio.sequence.DNA.mismatches", false]], "mismatches() (skbio.sequence.grammaredsequence method)": [[496, "skbio.sequence.GrammaredSequence.mismatches", false]], "mismatches() (skbio.sequence.protein method)": [[548, "skbio.sequence.Protein.mismatches", false]], "mismatches() (skbio.sequence.rna method)": [[604, "skbio.sequence.RNA.mismatches", false]], "mismatches() (skbio.sequence.sequence method)": [[649, "skbio.sequence.Sequence.mismatches", false]], "module": [[0, "module-skbio.alignment", false], [1, "module-skbio.diversity", false], [2, "module-skbio.embedding", false], [106, "module-skbio.diversity.alpha", false], [147, "module-skbio.diversity.beta", false], [218, "module-skbio.io.format.binary_dm", false], [219, "module-skbio.io.format.biom", false], [220, "module-skbio.io.format.blast6", false], [221, "module-skbio.io.format.blast7", false], [222, "module-skbio.io.format.clustal", false], [223, "module-skbio.io.format.embed", false], [224, "module-skbio.io.format.embl", false], [225, "module-skbio.io.format.fasta", false], [226, "module-skbio.io.format.fastq", false], [227, "module-skbio.io.format.genbank", false], [228, "module-skbio.io.format.gff3", false], [229, "module-skbio.io.format.lsmat", false], [230, "module-skbio.io.format.newick", false], [231, "module-skbio.io.format.ordination", false], [232, "module-skbio.io.format.phylip", false], [233, "module-skbio.io.format.qseq", false], [234, "module-skbio.io.format.sample_metadata", false], [235, "module-skbio.io.format.stockholm", false], [236, "module-skbio.io.format.taxdump", false], [237, "module-skbio.io.registry", false], [276, "module-skbio.io.util", false], [682, "module-skbio.sequence.distance", false], [685, "module-skbio.stats.composition", false], [706, "module-skbio.stats.distance", false], [763, "module-skbio.stats.evolve", false], [765, "module-skbio.stats.gradient", false], [855, "module-skbio.stats.ordination", false], [881, "module-skbio.stats.power", false], [1100, "module-skbio.io", false], [1101, "module-skbio.metadata", false], [1102, "module-skbio.sequence", false], [1103, "module-skbio.stats", false], [1104, "module-skbio.table", false], [1105, "module-skbio.tree", false], [1106, "module-skbio.util", false], [1107, "module-skbio.workflow", false]], "monkey_patch() (skbio.io.registry.ioregistry method)": [[268, "skbio.io.registry.IORegistry.monkey_patch", false]], "multi_replace() (in module skbio.stats.composition)": [[697, "skbio.stats.composition.multi_replace", false]], "multiplicative_replacement() (in module skbio.stats.composition)": [[698, "skbio.stats.composition.multiplicative_replacement", false]], "neighbors() (skbio.tree.treenode method)": [[1005, "skbio.tree.TreeNode.neighbors", false]], "nj() (in module skbio.tree)": [[1039, "skbio.tree.nj", false]], "non_tips() (skbio.tree.treenode method)": [[1006, "skbio.tree.TreeNode.non_tips", false]], "nondegenerates() (skbio.sequence.dna method)": [[430, "skbio.sequence.DNA.nondegenerates", false]], "nondegenerates() (skbio.sequence.grammaredsequence method)": [[497, "skbio.sequence.GrammaredSequence.nondegenerates", false]], "nondegenerates() (skbio.sequence.protein method)": [[549, "skbio.sequence.Protein.nondegenerates", false]], "nondegenerates() (skbio.sequence.rna method)": [[605, "skbio.sequence.RNA.nondegenerates", false]], "nonzero() (skbio.table.table method)": [[932, "skbio.table.Table.nonzero", false]], "nonzero_counts() (skbio.table.table method)": [[933, "skbio.table.Table.nonzero_counts", false]], "norm() (skbio.table.table method)": [[934, "skbio.table.Table.norm", false]], "numericmetadatacolumn (class in skbio.metadata)": [[345, "skbio.metadata.NumericMetadataColumn", false]], "observed_features() (in module skbio.diversity.alpha)": [[131, "skbio.diversity.alpha.observed_features", false]], "observed_node_counts() (skbio.tree.treenode method)": [[1007, "skbio.tree.TreeNode.observed_node_counts", false]], "observed_otus() (in module skbio.diversity.alpha)": [[132, "skbio.diversity.alpha.observed_otus", false]], "open() (in module skbio.io.util)": [[277, "skbio.io.util.open", false]], "open_file() (in module skbio.io.util)": [[278, "skbio.io.util.open_file", false]], "open_files() (in module skbio.io.util)": [[279, "skbio.io.util.open_files", false]], "ordinationresults (class in skbio.stats.ordination)": [[856, "skbio.stats.ordination.OrdinationResults", false]], "osd() (in module skbio.diversity.alpha)": [[133, "skbio.diversity.alpha.osd", false]], "pa() (skbio.table.table method)": [[935, "skbio.table.Table.pa", false]], "pairalignpath (class in skbio.alignment)": [[34, "skbio.alignment.PairAlignPath", false]], "paired_subsamples() (in module skbio.stats.power)": [[883, "skbio.stats.power.paired_subsamples", false]], "pairwise_vlr() (in module skbio.stats.composition)": [[699, "skbio.stats.composition.pairwise_vlr", false]], "partial_beta_diversity() (in module skbio.diversity)": [[154, "skbio.diversity.partial_beta_diversity", false]], "partition() (skbio.table.table method)": [[936, "skbio.table.Table.partition", false]], "pcoa() (in module skbio.stats.ordination)": [[876, "skbio.stats.ordination.pcoa", false]], "pcoa_biplot() (in module skbio.stats.ordination)": [[877, "skbio.stats.ordination.pcoa_biplot", false]], "permanova() (in module skbio.stats.distance)": [[759, "skbio.stats.distance.permanova", false]], "permdisp() (in module skbio.stats.distance)": [[760, "skbio.stats.distance.permdisp", false]], "permute() (skbio.stats.distance.distancematrix method)": [[747, "skbio.stats.distance.DistanceMatrix.permute", false]], "perturb() (in module skbio.stats.composition)": [[700, "skbio.stats.composition.perturb", false]], "perturb_inv() (in module skbio.stats.composition)": [[701, "skbio.stats.composition.perturb_inv", false]], "phydiv() (in module skbio.diversity.alpha)": [[134, "skbio.diversity.alpha.phydiv", false]], "pielou_e() (in module skbio.diversity.alpha)": [[135, "skbio.diversity.alpha.pielou_e", false]], "plot() (skbio.sequence.substitutionmatrix method)": [[674, "skbio.sequence.SubstitutionMatrix.plot", false]], "plot() (skbio.stats.distance.dissimilaritymatrix method)": [[723, "skbio.stats.distance.DissimilarityMatrix.plot", false]], "plot() (skbio.stats.distance.distancematrix method)": [[748, "skbio.stats.distance.DistanceMatrix.plot", false]], "plot() (skbio.stats.ordination.ordinationresults method)": [[866, "skbio.stats.ordination.OrdinationResults.plot", false]], "pop() (skbio.tree.treenode method)": [[1008, "skbio.tree.TreeNode.pop", false]], "postorder() (skbio.tree.treenode method)": [[1009, "skbio.tree.TreeNode.postorder", false]], "power() (in module skbio.stats.composition)": [[702, "skbio.stats.composition.power", false]], "pre_and_postorder() (skbio.tree.treenode method)": [[1010, "skbio.tree.TreeNode.pre_and_postorder", false]], "preorder() (skbio.tree.treenode method)": [[1011, "skbio.tree.TreeNode.preorder", false]], "protein (class in skbio.sequence)": [[504, "skbio.sequence.Protein", false]], "proteinembedding (class in skbio.embedding)": [[166, "skbio.embedding.ProteinEmbedding", false]], "proteinvector (class in skbio.embedding)": [[179, "skbio.embedding.ProteinVector", false]], "prune() (skbio.tree.treenode method)": [[1012, "skbio.tree.TreeNode.prune", false]], "pwmantel() (in module skbio.stats.distance)": [[761, "skbio.stats.distance.pwmantel", false]], "query() (skbio.metadata.intervalmetadata method)": [[323, "skbio.metadata.IntervalMetadata.query", false]], "randdm() (in module skbio.stats.distance)": [[762, "skbio.stats.distance.randdm", false]], "rankdata() (skbio.table.table method)": [[937, "skbio.table.Table.rankdata", false]], "rda() (in module skbio.stats.ordination)": [[878, "skbio.stats.ordination.rda", false]], "read() (in module skbio.io.registry)": [[273, "skbio.io.registry.read", false]], "read() (skbio.alignment.tabularmsa class method)": [[93, "skbio.alignment.TabularMSA.read", false]], "read() (skbio.embedding.proteinembedding class method)": [[177, "skbio.embedding.ProteinEmbedding.read", false]], "read() (skbio.embedding.proteinvector class method)": [[190, "skbio.embedding.ProteinVector.read", false]], "read() (skbio.io.registry.ioregistry method)": [[269, "skbio.io.registry.IORegistry.read", false]], "read() (skbio.metadata.intervalmetadata class method)": [[324, "skbio.metadata.IntervalMetadata.read", false]], "read() (skbio.metadata.samplemetadata class method)": [[378, "skbio.metadata.SampleMetadata.read", false]], "read() (skbio.sequence.dna class method)": [[431, "skbio.sequence.DNA.read", false]], "read() (skbio.sequence.grammaredsequence class method)": [[498, "skbio.sequence.GrammaredSequence.read", false]], "read() (skbio.sequence.protein class method)": [[550, "skbio.sequence.Protein.read", false]], "read() (skbio.sequence.rna class method)": [[606, "skbio.sequence.RNA.read", false]], "read() (skbio.sequence.sequence class method)": [[650, "skbio.sequence.Sequence.read", false]], "read() (skbio.sequence.substitutionmatrix class method)": [[675, "skbio.sequence.SubstitutionMatrix.read", false]], "read() (skbio.stats.distance.dissimilaritymatrix class method)": [[724, "skbio.stats.distance.DissimilarityMatrix.read", false]], "read() (skbio.stats.distance.distancematrix class method)": [[749, "skbio.stats.distance.DistanceMatrix.read", false]], "read() (skbio.stats.ordination.ordinationresults class method)": [[867, "skbio.stats.ordination.OrdinationResults.read", false]], "read() (skbio.table.table class method)": [[938, "skbio.table.Table.read", false]], "read() (skbio.tree.treenode class method)": [[1013, "skbio.tree.TreeNode.read", false]], "reader() (skbio.io.registry.format method)": [[248, "skbio.io.registry.Format.reader", false]], "reassign_index() (skbio.alignment.tabularmsa method)": [[94, "skbio.alignment.TabularMSA.reassign_index", false]], "reduce() (skbio.table.table method)": [[939, "skbio.table.Table.reduce", false]], "redundant_form() (skbio.sequence.substitutionmatrix method)": [[676, "skbio.sequence.SubstitutionMatrix.redundant_form", false]], "redundant_form() (skbio.stats.distance.dissimilaritymatrix method)": [[725, "skbio.stats.distance.DissimilarityMatrix.redundant_form", false]], "redundant_form() (skbio.stats.distance.distancematrix method)": [[750, "skbio.stats.distance.DistanceMatrix.redundant_form", false]], "remove() (skbio.tree.treenode method)": [[1014, "skbio.tree.TreeNode.remove", false]], "remove_deleted() (skbio.tree.treenode method)": [[1015, "skbio.tree.TreeNode.remove_deleted", false]], "remove_empty() (skbio.table.table method)": [[940, "skbio.table.Table.remove_empty", false]], "rename() (skbio.stats.ordination.ordinationresults method)": [[868, "skbio.stats.ordination.OrdinationResults.rename", false]], "renyi() (in module skbio.diversity.alpha)": [[136, "skbio.diversity.alpha.renyi", false]], "replace() (skbio.sequence.dna method)": [[432, "skbio.sequence.DNA.replace", false]], "replace() (skbio.sequence.grammaredsequence method)": [[499, "skbio.sequence.GrammaredSequence.replace", false]], "replace() (skbio.sequence.protein method)": [[551, "skbio.sequence.Protein.replace", false]], "replace() (skbio.sequence.rna method)": [[607, "skbio.sequence.RNA.replace", false]], "replace() (skbio.sequence.sequence method)": [[651, "skbio.sequence.Sequence.replace", false]], "representationwarning": [[1041, "skbio.util.RepresentationWarning", false]], "requires (class in skbio.workflow)": [[1088, "skbio.workflow.requires", false]], "reverse_complement() (skbio.sequence.dna method)": [[433, "skbio.sequence.DNA.reverse_complement", false]], "reverse_complement() (skbio.sequence.rna method)": [[608, "skbio.sequence.RNA.reverse_complement", false]], "reverse_transcribe() (skbio.sequence.rna method)": [[609, "skbio.sequence.RNA.reverse_transcribe", false]], "rna (class in skbio.sequence)": [[557, "skbio.sequence.RNA", false]], "robbins() (in module skbio.diversity.alpha)": [[137, "skbio.diversity.alpha.robbins", false]], "root() (skbio.tree.treenode method)": [[1016, "skbio.tree.TreeNode.root", false]], "root_at() (skbio.tree.treenode method)": [[1017, "skbio.tree.TreeNode.root_at", false]], "root_at_midpoint() (skbio.tree.treenode method)": [[1018, "skbio.tree.TreeNode.root_at_midpoint", false]], "root_by_outgroup() (skbio.tree.treenode method)": [[1019, "skbio.tree.TreeNode.root_by_outgroup", false]], "safe_md5() (in module skbio.util)": [[1064, "skbio.util.safe_md5", false]], "samplemetadata (class in skbio.metadata)": [[363, "skbio.metadata.SampleMetadata", false]], "save() (skbio.metadata.categoricalmetadatacolumn method)": [[295, "skbio.metadata.CategoricalMetadataColumn.save", false]], "save() (skbio.metadata.metadatacolumn method)": [[342, "skbio.metadata.MetadataColumn.save", false]], "save() (skbio.metadata.numericmetadatacolumn method)": [[360, "skbio.metadata.NumericMetadataColumn.save", false]], "save() (skbio.metadata.samplemetadata method)": [[379, "skbio.metadata.SampleMetadata.save", false]], "sbp_basis() (in module skbio.stats.composition)": [[703, "skbio.stats.composition.sbp_basis", false]], "scale() (in module skbio.stats.ordination)": [[879, "skbio.stats.ordination.scale", false]], "sequence (class in skbio.sequence)": [[616, "skbio.sequence.Sequence", false]], "sequenceembedding (class in skbio.embedding)": [[192, "skbio.embedding.SequenceEmbedding", false]], "sequencevector (class in skbio.embedding)": [[203, "skbio.embedding.SequenceVector", false]], "set_zero_based() (skbio.alignment.alignmentstructure method)": [[33, "skbio.alignment.AlignmentStructure.set_zero_based", false]], "setter() (skbio.util.classproperty method)": [[1061, "skbio.util.classproperty.setter", false]], "shannon() (in module skbio.diversity.alpha)": [[138, "skbio.diversity.alpha.shannon", false]], "shear() (skbio.tree.treenode method)": [[1020, "skbio.tree.TreeNode.shear", false]], "shuffle() (skbio.tree.treenode method)": [[1021, "skbio.tree.TreeNode.shuffle", false]], "siblings() (skbio.tree.treenode method)": [[1022, "skbio.tree.TreeNode.siblings", false]], "simpson() (in module skbio.diversity.alpha)": [[139, "skbio.diversity.alpha.simpson", false]], "simpson_d() (in module skbio.diversity.alpha)": [[140, "skbio.diversity.alpha.simpson_d", false]], "simpson_e() (in module skbio.diversity.alpha)": [[141, "skbio.diversity.alpha.simpson_e", false]], "singles() (in module skbio.diversity.alpha)": [[142, "skbio.diversity.alpha.singles", false]], "skbio.alignment": [[0, "module-skbio.alignment", false]], "skbio.diversity": [[1, "module-skbio.diversity", false]], "skbio.diversity.alpha": [[106, "module-skbio.diversity.alpha", false]], "skbio.diversity.beta": [[147, "module-skbio.diversity.beta", false]], "skbio.embedding": [[2, "module-skbio.embedding", false]], "skbio.io": [[1100, "module-skbio.io", false]], "skbio.io.format.binary_dm": [[218, "module-skbio.io.format.binary_dm", false]], "skbio.io.format.biom": [[219, "module-skbio.io.format.biom", false]], "skbio.io.format.blast6": [[220, "module-skbio.io.format.blast6", false]], "skbio.io.format.blast7": [[221, "module-skbio.io.format.blast7", false]], "skbio.io.format.clustal": [[222, "module-skbio.io.format.clustal", false]], "skbio.io.format.embed": [[223, "module-skbio.io.format.embed", false]], "skbio.io.format.embl": [[224, "module-skbio.io.format.embl", false]], "skbio.io.format.fasta": [[225, "module-skbio.io.format.fasta", false]], "skbio.io.format.fastq": [[226, "module-skbio.io.format.fastq", false]], "skbio.io.format.genbank": [[227, "module-skbio.io.format.genbank", false]], "skbio.io.format.gff3": [[228, "module-skbio.io.format.gff3", false]], "skbio.io.format.lsmat": [[229, "module-skbio.io.format.lsmat", false]], "skbio.io.format.newick": [[230, "module-skbio.io.format.newick", false]], "skbio.io.format.ordination": [[231, "module-skbio.io.format.ordination", false]], "skbio.io.format.phylip": [[232, "module-skbio.io.format.phylip", false]], "skbio.io.format.qseq": [[233, "module-skbio.io.format.qseq", false]], "skbio.io.format.sample_metadata": [[234, "module-skbio.io.format.sample_metadata", false]], "skbio.io.format.stockholm": [[235, "module-skbio.io.format.stockholm", false]], "skbio.io.format.taxdump": [[236, "module-skbio.io.format.taxdump", false]], "skbio.io.registry": [[237, "module-skbio.io.registry", false]], "skbio.io.util": [[276, "module-skbio.io.util", false]], "skbio.metadata": [[1101, "module-skbio.metadata", false]], "skbio.sequence": [[1102, "module-skbio.sequence", false]], "skbio.sequence.distance": [[682, "module-skbio.sequence.distance", false]], "skbio.stats": [[1103, "module-skbio.stats", false]], "skbio.stats.composition": [[685, "module-skbio.stats.composition", false]], "skbio.stats.distance": [[706, "module-skbio.stats.distance", false]], "skbio.stats.evolve": [[763, "module-skbio.stats.evolve", false]], "skbio.stats.gradient": [[765, "module-skbio.stats.gradient", false]], "skbio.stats.ordination": [[855, "module-skbio.stats.ordination", false]], "skbio.stats.power": [[881, "module-skbio.stats.power", false]], "skbio.table": [[1104, "module-skbio.table", false]], "skbio.tree": [[1105, "module-skbio.tree", false]], "skbio.util": [[1106, "module-skbio.util", false]], "skbio.workflow": [[1107, "module-skbio.workflow", false]], "sniff() (in module skbio.io.registry)": [[274, "skbio.io.registry.sniff", false]], "sniff() (skbio.io.registry.ioregistry method)": [[270, "skbio.io.registry.IORegistry.sniff", false]], "sniffer() (skbio.io.registry.format method)": [[249, "skbio.io.registry.Format.sniffer", false]], "sobs() (in module skbio.diversity.alpha)": [[143, "skbio.diversity.alpha.sobs", false]], "sort() (skbio.alignment.tabularmsa method)": [[95, "skbio.alignment.TabularMSA.sort", false]], "sort() (skbio.metadata.intervalmetadata method)": [[325, "skbio.metadata.IntervalMetadata.sort", false]], "sort() (skbio.table.table method)": [[941, "skbio.table.Table.sort", false]], "sort_order() (skbio.table.table method)": [[942, "skbio.table.Table.sort_order", false]], "stops() (skbio.sequence.protein method)": [[552, "skbio.sequence.Protein.stops", false]], "stripedsmithwaterman (class in skbio.alignment)": [[53, "skbio.alignment.StripedSmithWaterman", false]], "strong() (in module skbio.diversity.alpha)": [[144, "skbio.diversity.alpha.strong", false]], "subsample() (skbio.table.table method)": [[943, "skbio.table.Table.subsample", false]], "subsample_counts() (in module skbio.stats)": [[886, "skbio.stats.subsample_counts", false]], "subsample_paired_power() (in module skbio.stats.power)": [[884, "skbio.stats.power.subsample_paired_power", false]], "subsample_power() (in module skbio.stats.power)": [[885, "skbio.stats.power.subsample_power", false]], "subset() (skbio.tree.treenode method)": [[1023, "skbio.tree.TreeNode.subset", false]], "subsets() (skbio.tree.treenode method)": [[1024, "skbio.tree.TreeNode.subsets", false]], "substitutionmatrix (class in skbio.sequence)": [[654, "skbio.sequence.SubstitutionMatrix", false]], "subtree() (skbio.tree.treenode method)": [[1025, "skbio.tree.TreeNode.subtree", false]], "sum() (skbio.table.table method)": [[944, "skbio.table.Table.sum", false]], "svd_rank() (in module skbio.stats.ordination)": [[880, "skbio.stats.ordination.svd_rank", false]], "table (class in skbio.table)": [[887, "skbio.table.Table", false]], "tabularmsa (class in skbio.alignment)": [[65, "skbio.alignment.TabularMSA", false]], "tip_tip_distances() (skbio.tree.treenode method)": [[1026, "skbio.tree.TreeNode.tip_tip_distances", false]], "tips() (skbio.tree.treenode method)": [[1027, "skbio.tree.TreeNode.tips", false]], "to_anndata() (skbio.table.table method)": [[945, "skbio.table.Table.to_anndata", false]], "to_array() (skbio.tree.treenode method)": [[1028, "skbio.tree.TreeNode.to_array", false]], "to_bits() (skbio.alignment.alignpath method)": [[17, "skbio.alignment.AlignPath.to_bits", false]], "to_bits() (skbio.alignment.pairalignpath method)": [[49, "skbio.alignment.PairAlignPath.to_bits", false]], "to_cigar() (skbio.alignment.pairalignpath method)": [[50, "skbio.alignment.PairAlignPath.to_cigar", false]], "to_coordinates() (skbio.alignment.alignpath method)": [[18, "skbio.alignment.AlignPath.to_coordinates", false]], "to_coordinates() (skbio.alignment.pairalignpath method)": [[51, "skbio.alignment.PairAlignPath.to_coordinates", false]], "to_data_frame() (skbio.sequence.substitutionmatrix method)": [[677, "skbio.sequence.SubstitutionMatrix.to_data_frame", false]], "to_data_frame() (skbio.stats.distance.dissimilaritymatrix method)": [[726, "skbio.stats.distance.DissimilarityMatrix.to_data_frame", false]], "to_data_frame() (skbio.stats.distance.distancematrix method)": [[751, "skbio.stats.distance.DistanceMatrix.to_data_frame", false]], "to_dataframe() (skbio.metadata.categoricalmetadatacolumn method)": [[296, "skbio.metadata.CategoricalMetadataColumn.to_dataframe", false]], "to_dataframe() (skbio.metadata.metadatacolumn method)": [[343, "skbio.metadata.MetadataColumn.to_dataframe", false]], "to_dataframe() (skbio.metadata.numericmetadatacolumn method)": [[361, "skbio.metadata.NumericMetadataColumn.to_dataframe", false]], "to_dataframe() (skbio.metadata.samplemetadata method)": [[380, "skbio.metadata.SampleMetadata.to_dataframe", false]], "to_dataframe() (skbio.table.table method)": [[946, "skbio.table.Table.to_dataframe", false]], "to_definites() (skbio.sequence.dna method)": [[434, "skbio.sequence.DNA.to_definites", false]], "to_definites() (skbio.sequence.grammaredsequence method)": [[500, "skbio.sequence.GrammaredSequence.to_definites", false]], "to_definites() (skbio.sequence.protein method)": [[553, "skbio.sequence.Protein.to_definites", false]], "to_definites() (skbio.sequence.rna method)": [[610, "skbio.sequence.RNA.to_definites", false]], "to_dict() (skbio.alignment.tabularmsa method)": [[96, "skbio.alignment.TabularMSA.to_dict", false]], "to_dict() (skbio.sequence.substitutionmatrix method)": [[678, "skbio.sequence.SubstitutionMatrix.to_dict", false]], "to_files() (skbio.stats.gradient.categoryresults method)": [[787, "skbio.stats.gradient.CategoryResults.to_files", false]], "to_files() (skbio.stats.gradient.gradientanovaresults method)": [[820, "skbio.stats.gradient.GradientANOVAResults.to_files", false]], "to_files() (skbio.stats.gradient.groupresults method)": [[831, "skbio.stats.gradient.GroupResults.to_files", false]], "to_hdf5() (skbio.table.table method)": [[947, "skbio.table.Table.to_hdf5", false]], "to_indices() (skbio.alignment.alignpath method)": [[19, "skbio.alignment.AlignPath.to_indices", false]], "to_indices() (skbio.alignment.pairalignpath method)": [[52, "skbio.alignment.PairAlignPath.to_indices", false]], "to_indices() (skbio.sequence.dna method)": [[435, "skbio.sequence.DNA.to_indices", false]], "to_indices() (skbio.sequence.grammaredsequence method)": [[501, "skbio.sequence.GrammaredSequence.to_indices", false]], "to_indices() (skbio.sequence.protein method)": [[554, "skbio.sequence.Protein.to_indices", false]], "to_indices() (skbio.sequence.rna method)": [[611, "skbio.sequence.RNA.to_indices", false]], "to_indices() (skbio.sequence.sequence method)": [[652, "skbio.sequence.Sequence.to_indices", false]], "to_json() (skbio.table.table method)": [[948, "skbio.table.Table.to_json", false]], "to_regex() (skbio.sequence.dna method)": [[436, "skbio.sequence.DNA.to_regex", false]], "to_regex() (skbio.sequence.grammaredsequence method)": [[502, "skbio.sequence.GrammaredSequence.to_regex", false]], "to_regex() (skbio.sequence.protein method)": [[555, "skbio.sequence.Protein.to_regex", false]], "to_regex() (skbio.sequence.rna method)": [[612, "skbio.sequence.RNA.to_regex", false]], "to_series() (skbio.metadata.categoricalmetadatacolumn method)": [[297, "skbio.metadata.CategoricalMetadataColumn.to_series", false]], "to_series() (skbio.metadata.metadatacolumn method)": [[344, "skbio.metadata.MetadataColumn.to_series", false]], "to_series() (skbio.metadata.numericmetadatacolumn method)": [[362, "skbio.metadata.NumericMetadataColumn.to_series", false]], "to_series() (skbio.stats.distance.distancematrix method)": [[752, "skbio.stats.distance.DistanceMatrix.to_series", false]], "to_taxonomy() (skbio.tree.treenode method)": [[1029, "skbio.tree.TreeNode.to_taxonomy", false]], "to_tsv() (skbio.table.table method)": [[949, "skbio.table.Table.to_tsv", false]], "trajectorygradientanova (class in skbio.stats.gradient)": [[832, "skbio.stats.gradient.TrajectoryGradientANOVA", false]], "transcribe() (skbio.sequence.dna method)": [[437, "skbio.sequence.DNA.transcribe", false]], "transform() (skbio.table.table method)": [[950, "skbio.table.Table.transform", false]], "translate() (skbio.sequence.dna method)": [[438, "skbio.sequence.DNA.translate", false]], "translate() (skbio.sequence.geneticcode method)": [[451, "skbio.sequence.GeneticCode.translate", false]], "translate() (skbio.sequence.rna method)": [[613, "skbio.sequence.RNA.translate", false]], "translate_six_frames() (skbio.sequence.dna method)": [[439, "skbio.sequence.DNA.translate_six_frames", false]], "translate_six_frames() (skbio.sequence.geneticcode method)": [[452, "skbio.sequence.GeneticCode.translate_six_frames", false]], "translate_six_frames() (skbio.sequence.rna method)": [[614, "skbio.sequence.RNA.translate_six_frames", false]], "transpose() (skbio.sequence.substitutionmatrix method)": [[679, "skbio.sequence.SubstitutionMatrix.transpose", false]], "transpose() (skbio.stats.distance.dissimilaritymatrix method)": [[727, "skbio.stats.distance.DissimilarityMatrix.transpose", false]], "transpose() (skbio.stats.distance.distancematrix method)": [[753, "skbio.stats.distance.DistanceMatrix.transpose", false]], "transpose() (skbio.table.table method)": [[951, "skbio.table.Table.transpose", false]], "traverse() (skbio.tree.treenode method)": [[1030, "skbio.tree.TreeNode.traverse", false]], "tree_basis() (in module skbio.stats.composition)": [[704, "skbio.stats.composition.tree_basis", false]], "treenode (class in skbio.tree)": [[955, "skbio.tree.TreeNode", false]], "tsallis() (in module skbio.diversity.alpha)": [[145, "skbio.diversity.alpha.tsallis", false]], "unpack() (skbio.tree.treenode method)": [[1031, "skbio.tree.TreeNode.unpack", false]], "unpack_by_func() (skbio.tree.treenode method)": [[1032, "skbio.tree.TreeNode.unpack_by_func", false]], "unroot() (skbio.tree.treenode method)": [[1033, "skbio.tree.TreeNode.unroot", false]], "unrooted_copy() (skbio.tree.treenode method)": [[1034, "skbio.tree.TreeNode.unrooted_copy", false]], "unrooted_deepcopy() (skbio.tree.treenode method)": [[1035, "skbio.tree.TreeNode.unrooted_deepcopy", false]], "unrooted_move() (skbio.tree.treenode method)": [[1036, "skbio.tree.TreeNode.unrooted_move", false]], "unweighted_unifrac() (in module skbio.diversity.beta)": [[148, "skbio.diversity.beta.unweighted_unifrac", false]], "update_ids() (skbio.table.table method)": [[952, "skbio.table.Table.update_ids", false]], "vlr() (in module skbio.stats.composition)": [[705, "skbio.stats.composition.vlr", false]], "weighted_unifrac() (in module skbio.diversity.beta)": [[149, "skbio.diversity.beta.weighted_unifrac", false]], "windowdifferencegradientanova (class in skbio.stats.gradient)": [[843, "skbio.stats.gradient.WindowDifferenceGradientANOVA", false]], "within() (skbio.sequence.substitutionmatrix method)": [[680, "skbio.sequence.SubstitutionMatrix.within", false]], "within() (skbio.stats.distance.dissimilaritymatrix method)": [[728, "skbio.stats.distance.DissimilarityMatrix.within", false]], "within() (skbio.stats.distance.distancematrix method)": [[754, "skbio.stats.distance.DistanceMatrix.within", false]], "workflow (class in skbio.workflow)": [[1065, "skbio.workflow.Workflow", false]], "write() (in module skbio.io.registry)": [[275, "skbio.io.registry.write", false]], "write() (skbio.alignment.tabularmsa method)": [[97, "skbio.alignment.TabularMSA.write", false]], "write() (skbio.embedding.proteinembedding method)": [[178, "skbio.embedding.ProteinEmbedding.write", false]], "write() (skbio.embedding.proteinvector method)": [[191, "skbio.embedding.ProteinVector.write", false]], "write() (skbio.io.registry.ioregistry method)": [[271, "skbio.io.registry.IORegistry.write", false]], "write() (skbio.metadata.intervalmetadata method)": [[326, "skbio.metadata.IntervalMetadata.write", false]], "write() (skbio.metadata.samplemetadata method)": [[381, "skbio.metadata.SampleMetadata.write", false]], "write() (skbio.sequence.dna method)": [[440, "skbio.sequence.DNA.write", false]], "write() (skbio.sequence.grammaredsequence method)": [[503, "skbio.sequence.GrammaredSequence.write", false]], "write() (skbio.sequence.protein method)": [[556, "skbio.sequence.Protein.write", false]], "write() (skbio.sequence.rna method)": [[615, "skbio.sequence.RNA.write", false]], "write() (skbio.sequence.sequence method)": [[653, "skbio.sequence.Sequence.write", false]], "write() (skbio.sequence.substitutionmatrix method)": [[681, "skbio.sequence.SubstitutionMatrix.write", false]], "write() (skbio.stats.distance.dissimilaritymatrix method)": [[729, "skbio.stats.distance.DissimilarityMatrix.write", false]], "write() (skbio.stats.distance.distancematrix method)": [[755, "skbio.stats.distance.DistanceMatrix.write", false]], "write() (skbio.stats.ordination.ordinationresults method)": [[869, "skbio.stats.ordination.OrdinationResults.write", false]], "write() (skbio.table.table method)": [[953, "skbio.table.Table.write", false]], "write() (skbio.tree.treenode method)": [[1037, "skbio.tree.TreeNode.write", false]], "writer() (skbio.io.registry.format method)": [[250, "skbio.io.registry.Format.writer", false]]}, "objects": {"skbio": [[0, 0, 0, "-", "alignment"], [1, 0, 0, "-", "diversity"], [2, 0, 0, "-", "embedding"], [1100, 0, 0, "-", "io"], [1101, 0, 0, "-", "metadata"], [1102, 0, 0, "-", "sequence"], [1103, 0, 0, "-", "stats"], [1104, 0, 0, "-", "table"], [1105, 0, 0, "-", "tree"], [1106, 0, 0, "-", "util"], [1107, 0, 0, "-", "workflow"]], "skbio.alignment": [[3, 1, 1, "", "AlignPath"], [20, 1, 1, "", "AlignmentStructure"], [34, 1, 1, "", "PairAlignPath"], [53, 1, 1, "", "StripedSmithWaterman"], [65, 1, 1, "", "TabularMSA"], [98, 3, 1, "", "global_pairwise_align"], [99, 3, 1, "", "global_pairwise_align_nucleotide"], [100, 3, 1, "", "global_pairwise_align_protein"], [101, 3, 1, "", "local_pairwise_align"], [102, 3, 1, "", "local_pairwise_align_nucleotide"], [103, 3, 1, "", "local_pairwise_align_protein"], [104, 3, 1, "", "local_pairwise_align_ssw"], [105, 3, 1, "", "make_identity_substitution_matrix"]], "skbio.alignment.AlignPath": [[4, 2, 1, "", "__eq__"], [5, 2, 1, "", "__ge__"], [6, 2, 1, "", "__getstate__"], [7, 2, 1, "", "__gt__"], [8, 2, 1, "", "__hash__"], [9, 2, 1, "", "__le__"], [10, 2, 1, "", "__lt__"], [11, 2, 1, "", "__ne__"], [12, 2, 1, "", "__str__"], [13, 2, 1, "", "from_bits"], [14, 2, 1, "", "from_coordinates"], [15, 2, 1, "", "from_indices"], [16, 2, 1, "", "from_tabular"], [17, 2, 1, "", "to_bits"], [18, 2, 1, "", "to_coordinates"], [19, 2, 1, "", "to_indices"]], "skbio.alignment.AlignmentStructure": [[21, 2, 1, "", "__eq__"], [22, 2, 1, "", "__ge__"], [23, 2, 1, "", "__getitem__"], [24, 2, 1, "", "__getstate__"], [25, 2, 1, "", "__gt__"], [26, 2, 1, "", "__hash__"], [27, 2, 1, "", "__le__"], [28, 2, 1, "", "__lt__"], [29, 2, 1, "", "__ne__"], [30, 2, 1, "", "__setstate__"], [31, 2, 1, "", "__str__"], [32, 2, 1, "", "is_zero_based"], [33, 2, 1, "", "set_zero_based"]], "skbio.alignment.PairAlignPath": [[35, 2, 1, "", "__eq__"], [36, 2, 1, "", "__ge__"], [37, 2, 1, "", "__getstate__"], [38, 2, 1, "", "__gt__"], [39, 2, 1, "", "__hash__"], [40, 2, 1, "", "__le__"], [41, 2, 1, "", "__lt__"], [42, 2, 1, "", "__ne__"], [43, 2, 1, "", "__str__"], [44, 2, 1, "", "from_bits"], [45, 2, 1, "", "from_cigar"], [46, 2, 1, "", "from_coordinates"], [47, 2, 1, "", "from_indices"], [48, 2, 1, "", "from_tabular"], [49, 2, 1, "", "to_bits"], [50, 2, 1, "", "to_cigar"], [51, 2, 1, "", "to_coordinates"], [52, 2, 1, "", "to_indices"]], "skbio.alignment.StripedSmithWaterman": [[54, 2, 1, "", "__call__"], [55, 2, 1, "", "__eq__"], [56, 2, 1, "", "__ge__"], [57, 2, 1, "", "__getstate__"], [58, 2, 1, "", "__gt__"], [59, 2, 1, "", "__hash__"], [60, 2, 1, "", "__le__"], [61, 2, 1, "", "__lt__"], [62, 2, 1, "", "__ne__"], [63, 2, 1, "", "__setstate__"], [64, 2, 1, "", "__str__"]], "skbio.alignment.TabularMSA": [[66, 2, 1, "", "__bool__"], [67, 2, 1, "", "__contains__"], [68, 2, 1, "", "__copy__"], [69, 2, 1, "", "__deepcopy__"], [70, 2, 1, "", "__eq__"], [71, 2, 1, "", "__ge__"], [72, 2, 1, "", "__getitem__"], [73, 2, 1, "", "__getstate__"], [74, 2, 1, "", "__gt__"], [75, 2, 1, "", "__iter__"], [76, 2, 1, "", "__le__"], [77, 2, 1, "", "__len__"], [78, 2, 1, "", "__lt__"], [79, 2, 1, "", "__ne__"], [80, 2, 1, "", "__reversed__"], [81, 2, 1, "", "__str__"], [82, 2, 1, "", "append"], [83, 2, 1, "", "consensus"], [84, 2, 1, "", "conservation"], [85, 2, 1, "", "extend"], [86, 2, 1, "", "from_dict"], [87, 2, 1, "", "from_path_seqs"], [88, 2, 1, "", "gap_frequencies"], [89, 2, 1, "", "has_metadata"], [90, 2, 1, "", "has_positional_metadata"], [91, 2, 1, "", "iter_positions"], [92, 2, 1, "", "join"], [93, 2, 1, "", "read"], [94, 2, 1, "", "reassign_index"], [95, 2, 1, "", "sort"], [96, 2, 1, "", "to_dict"], [97, 2, 1, "", "write"]], "skbio.diversity": [[106, 0, 0, "-", "alpha"], [146, 3, 1, "", "alpha_diversity"], [147, 0, 0, "-", "beta"], [150, 3, 1, "", "beta_diversity"], [151, 3, 1, "", "block_beta_diversity"], [152, 3, 1, "", "get_alpha_diversity_metrics"], [153, 3, 1, "", "get_beta_diversity_metrics"], [154, 3, 1, "", "partial_beta_diversity"]], "skbio.diversity.alpha": [[107, 3, 1, "", "ace"], [108, 3, 1, "", "berger_parker_d"], [109, 3, 1, "", "brillouin_d"], [110, 3, 1, "", "chao1"], [111, 3, 1, "", "chao1_ci"], [112, 3, 1, "", "dominance"], [113, 3, 1, "", "doubles"], [114, 3, 1, "", "enspie"], [115, 3, 1, "", "esty_ci"], [116, 3, 1, "", "faith_pd"], [117, 3, 1, "", "fisher_alpha"], [118, 3, 1, "", "gini_index"], [119, 3, 1, "", "goods_coverage"], [120, 3, 1, "", "heip_e"], [121, 3, 1, "", "hill"], [122, 3, 1, "", "inv_simpson"], [123, 3, 1, "", "kempton_taylor_q"], [124, 3, 1, "", "lladser_ci"], [125, 3, 1, "", "lladser_pe"], [126, 3, 1, "", "margalef"], [127, 3, 1, "", "mcintosh_d"], [128, 3, 1, "", "mcintosh_e"], [129, 3, 1, "", "menhinick"], [130, 3, 1, "", "michaelis_menten_fit"], [131, 3, 1, "", "observed_features"], [132, 3, 1, "", "observed_otus"], [133, 3, 1, "", "osd"], [134, 3, 1, "", "phydiv"], [135, 3, 1, "", "pielou_e"], [136, 3, 1, "", "renyi"], [137, 3, 1, "", "robbins"], [138, 3, 1, "", "shannon"], [139, 3, 1, "", "simpson"], [140, 3, 1, "", "simpson_d"], [141, 3, 1, "", "simpson_e"], [142, 3, 1, "", "singles"], [143, 3, 1, "", "sobs"], [144, 3, 1, "", "strong"], [145, 3, 1, "", "tsallis"]], "skbio.diversity.beta": [[148, 3, 1, "", "unweighted_unifrac"], [149, 3, 1, "", "weighted_unifrac"]], "skbio.embedding": [[155, 1, 1, "", "Embedding"], [166, 1, 1, "", "ProteinEmbedding"], [179, 1, 1, "", "ProteinVector"], [192, 1, 1, "", "SequenceEmbedding"], [203, 1, 1, "", "SequenceVector"], [214, 3, 1, "", "embed_vec_to_dataframe"], [215, 3, 1, "", "embed_vec_to_distances"], [216, 3, 1, "", "embed_vec_to_numpy"], [217, 3, 1, "", "embed_vec_to_ordination"]], "skbio.embedding.Embedding": [[156, 2, 1, "", "__eq__"], [157, 2, 1, "", "__ge__"], [158, 2, 1, "", "__getstate__"], [159, 2, 1, "", "__gt__"], [160, 2, 1, "", "__hash__"], [161, 2, 1, "", "__le__"], [162, 2, 1, "", "__lt__"], [163, 2, 1, "", "__ne__"], [164, 2, 1, "", "__str__"], [165, 2, 1, "", "bytes"]], "skbio.embedding.ProteinEmbedding": [[167, 2, 1, "", "__eq__"], [168, 2, 1, "", "__ge__"], [169, 2, 1, "", "__getstate__"], [170, 2, 1, "", "__gt__"], [171, 2, 1, "", "__hash__"], [172, 2, 1, "", "__le__"], [173, 2, 1, "", "__lt__"], [174, 2, 1, "", "__ne__"], [175, 2, 1, "", "__str__"], [176, 2, 1, "", "bytes"], [177, 2, 1, "", "read"], [178, 2, 1, "", "write"]], "skbio.embedding.ProteinVector": [[180, 2, 1, "", "__eq__"], [181, 2, 1, "", "__ge__"], [182, 2, 1, "", "__getstate__"], [183, 2, 1, "", "__gt__"], [184, 2, 1, "", "__hash__"], [185, 2, 1, "", "__le__"], [186, 2, 1, "", "__lt__"], [187, 2, 1, "", "__ne__"], [188, 2, 1, "", "__str__"], [189, 2, 1, "", "bytes"], [190, 2, 1, "", "read"], [191, 2, 1, "", "write"]], "skbio.embedding.SequenceEmbedding": [[193, 2, 1, "", "__eq__"], [194, 2, 1, "", "__ge__"], [195, 2, 1, "", "__getstate__"], [196, 2, 1, "", "__gt__"], [197, 2, 1, "", "__hash__"], [198, 2, 1, "", "__le__"], [199, 2, 1, "", "__lt__"], [200, 2, 1, "", "__ne__"], [201, 2, 1, "", "__str__"], [202, 2, 1, "", "bytes"]], "skbio.embedding.SequenceVector": [[204, 2, 1, "", "__eq__"], [205, 2, 1, "", "__ge__"], [206, 2, 1, "", "__getstate__"], [207, 2, 1, "", "__gt__"], [208, 2, 1, "", "__hash__"], [209, 2, 1, "", "__le__"], [210, 2, 1, "", "__lt__"], [211, 2, 1, "", "__ne__"], [212, 2, 1, "", "__str__"], [213, 2, 1, "", "bytes"]], "skbio.io": [[237, 0, 0, "-", "registry"], [276, 0, 0, "-", "util"]], "skbio.io.format": [[218, 0, 0, "-", "binary_dm"], [219, 0, 0, "-", "biom"], [220, 0, 0, "-", "blast6"], [221, 0, 0, "-", "blast7"], [222, 0, 0, "-", "clustal"], [223, 0, 0, "-", "embed"], [224, 0, 0, "-", "embl"], [225, 0, 0, "-", "fasta"], [226, 0, 0, "-", "fastq"], [227, 0, 0, "-", "genbank"], [228, 0, 0, "-", "gff3"], [229, 0, 0, "-", "lsmat"], [230, 0, 0, "-", "newick"], [231, 0, 0, "-", "ordination"], [232, 0, 0, "-", "phylip"], [233, 0, 0, "-", "qseq"], [234, 0, 0, "-", "sample_metadata"], [235, 0, 0, "-", "stockholm"], [236, 0, 0, "-", "taxdump"]], "skbio.io.registry": [[238, 1, 1, "", "Format"], [251, 1, 1, "", "IORegistry"], [272, 3, 1, "", "create_format"], [273, 3, 1, "", "read"], [274, 3, 1, "", "sniff"], [275, 3, 1, "", "write"]], "skbio.io.registry.Format": [[239, 2, 1, "", "__eq__"], [240, 2, 1, "", "__ge__"], [241, 2, 1, "", "__getstate__"], [242, 2, 1, "", "__gt__"], [243, 2, 1, "", "__hash__"], [244, 2, 1, "", "__le__"], [245, 2, 1, "", "__lt__"], [246, 2, 1, "", "__ne__"], [247, 2, 1, "", "__str__"], [248, 2, 1, "", "reader"], [249, 2, 1, "", "sniffer"], [250, 2, 1, "", "writer"]], "skbio.io.registry.IORegistry": [[252, 2, 1, "", "__eq__"], [253, 2, 1, "", "__ge__"], [254, 2, 1, "", "__getstate__"], [255, 2, 1, "", "__gt__"], [256, 2, 1, "", "__hash__"], [257, 2, 1, "", "__le__"], [258, 2, 1, "", "__lt__"], [259, 2, 1, "", "__ne__"], [260, 2, 1, "", "__str__"], [261, 2, 1, "", "add_format"], [262, 2, 1, "", "create_format"], [263, 2, 1, "", "get_reader"], [264, 2, 1, "", "get_sniffer"], [265, 2, 1, "", "get_writer"], [266, 2, 1, "", "list_read_formats"], [267, 2, 1, "", "list_write_formats"], [268, 2, 1, "", "monkey_patch"], [269, 2, 1, "", "read"], [270, 2, 1, "", "sniff"], [271, 2, 1, "", "write"]], "skbio.io.util": [[277, 3, 1, "", "open"], [278, 3, 1, "", "open_file"], [279, 3, 1, "", "open_files"]], "skbio.metadata": [[280, 1, 1, "", "CategoricalMetadataColumn"], [298, 1, 1, "", "Interval"], [308, 1, 1, "", "IntervalMetadata"], [327, 1, 1, "", "MetadataColumn"], [345, 1, 1, "", "NumericMetadataColumn"], [363, 1, 1, "", "SampleMetadata"]], "skbio.metadata.CategoricalMetadataColumn": [[281, 2, 1, "", "__eq__"], [282, 2, 1, "", "__ge__"], [283, 2, 1, "", "__getstate__"], [284, 2, 1, "", "__gt__"], [285, 2, 1, "", "__le__"], [286, 2, 1, "", "__lt__"], [287, 2, 1, "", "__ne__"], [288, 2, 1, "", "__str__"], [289, 2, 1, "", "drop_missing_values"], [290, 2, 1, "", "filter_ids"], [291, 2, 1, "", "get_ids"], [292, 2, 1, "", "get_missing"], [293, 2, 1, "", "get_value"], [294, 2, 1, "", "has_missing_values"], [295, 2, 1, "", "save"], [296, 2, 1, "", "to_dataframe"], [297, 2, 1, "", "to_series"]], "skbio.metadata.Interval": [[299, 2, 1, "", "__eq__"], [300, 2, 1, "", "__ge__"], [301, 2, 1, "", "__getstate__"], [302, 2, 1, "", "__gt__"], [303, 2, 1, "", "__le__"], [304, 2, 1, "", "__lt__"], [305, 2, 1, "", "__ne__"], [306, 2, 1, "", "__str__"], [307, 2, 1, "", "drop"]], "skbio.metadata.IntervalMetadata": [[309, 2, 1, "", "__copy__"], [310, 2, 1, "", "__deepcopy__"], [311, 2, 1, "", "__eq__"], [312, 2, 1, "", "__ge__"], [313, 2, 1, "", "__getstate__"], [314, 2, 1, "", "__gt__"], [315, 2, 1, "", "__le__"], [316, 2, 1, "", "__lt__"], [317, 2, 1, "", "__ne__"], [318, 2, 1, "", "__str__"], [319, 2, 1, "", "add"], [320, 2, 1, "", "concat"], [321, 2, 1, "", "drop"], [322, 2, 1, "", "merge"], [323, 2, 1, "", "query"], [324, 2, 1, "", "read"], [325, 2, 1, "", "sort"], [326, 2, 1, "", "write"]], "skbio.metadata.MetadataColumn": [[328, 2, 1, "", "__eq__"], [329, 2, 1, "", "__ge__"], [330, 2, 1, "", "__getstate__"], [331, 2, 1, "", "__gt__"], [332, 2, 1, "", "__le__"], [333, 2, 1, "", "__lt__"], [334, 2, 1, "", "__ne__"], [335, 2, 1, "", "__str__"], [336, 2, 1, "", "drop_missing_values"], [337, 2, 1, "", "filter_ids"], [338, 2, 1, "", "get_ids"], [339, 2, 1, "", "get_missing"], [340, 2, 1, "", "get_value"], [341, 2, 1, "", "has_missing_values"], [342, 2, 1, "", "save"], [343, 2, 1, "", "to_dataframe"], [344, 2, 1, "", "to_series"]], "skbio.metadata.NumericMetadataColumn": [[346, 2, 1, "", "__eq__"], [347, 2, 1, "", "__ge__"], [348, 2, 1, "", "__getstate__"], [349, 2, 1, "", "__gt__"], [350, 2, 1, "", "__le__"], [351, 2, 1, "", "__lt__"], [352, 2, 1, "", "__ne__"], [353, 2, 1, "", "__str__"], [354, 2, 1, "", "drop_missing_values"], [355, 2, 1, "", "filter_ids"], [356, 2, 1, "", "get_ids"], [357, 2, 1, "", "get_missing"], [358, 2, 1, "", "get_value"], [359, 2, 1, "", "has_missing_values"], [360, 2, 1, "", "save"], [361, 2, 1, "", "to_dataframe"], [362, 2, 1, "", "to_series"]], "skbio.metadata.SampleMetadata": [[364, 2, 1, "", "__eq__"], [365, 2, 1, "", "__ge__"], [366, 2, 1, "", "__getstate__"], [367, 2, 1, "", "__gt__"], [368, 2, 1, "", "__le__"], [369, 2, 1, "", "__lt__"], [370, 2, 1, "", "__ne__"], [371, 2, 1, "", "__str__"], [372, 2, 1, "", "filter_columns"], [373, 2, 1, "", "filter_ids"], [374, 2, 1, "", "get_column"], [375, 2, 1, "", "get_ids"], [376, 2, 1, "", "load"], [377, 2, 1, "", "merge"], [378, 2, 1, "", "read"], [379, 2, 1, "", "save"], [380, 2, 1, "", "to_dataframe"], [381, 2, 1, "", "write"]], "skbio.sequence": [[382, 1, 1, "", "DNA"], [441, 1, 1, "", "GeneticCode"], [453, 1, 1, "", "GrammaredSequence"], [504, 1, 1, "", "Protein"], [557, 1, 1, "", "RNA"], [616, 1, 1, "", "Sequence"], [654, 1, 1, "", "SubstitutionMatrix"], [682, 0, 0, "-", "distance"]], "skbio.sequence.DNA": [[383, 2, 1, "", "__bool__"], [384, 2, 1, "", "__contains__"], [385, 2, 1, "", "__copy__"], [386, 2, 1, "", "__deepcopy__"], [387, 2, 1, "", "__eq__"], [388, 2, 1, "", "__ge__"], [389, 2, 1, "", "__getitem__"], [390, 2, 1, "", "__getstate__"], [391, 2, 1, "", "__gt__"], [392, 2, 1, "", "__iter__"], [393, 2, 1, "", "__le__"], [394, 2, 1, "", "__len__"], [395, 2, 1, "", "__lt__"], [396, 2, 1, "", "__ne__"], [397, 2, 1, "", "__reversed__"], [398, 2, 1, "", "__str__"], [399, 2, 1, "", "complement"], [400, 2, 1, "", "concat"], [401, 2, 1, "", "count"], [402, 2, 1, "", "definites"], [403, 2, 1, "", "degap"], [404, 2, 1, "", "degenerates"], [405, 2, 1, "", "distance"], [406, 2, 1, "", "expand_degenerates"], [407, 2, 1, "", "find_motifs"], [408, 2, 1, "", "find_with_regex"], [409, 2, 1, "", "frequencies"], [410, 2, 1, "", "gaps"], [411, 2, 1, "", "gc_content"], [412, 2, 1, "", "gc_frequency"], [413, 2, 1, "", "has_definites"], [414, 2, 1, "", "has_degenerates"], [415, 2, 1, "", "has_gaps"], [416, 2, 1, "", "has_interval_metadata"], [417, 2, 1, "", "has_metadata"], [418, 2, 1, "", "has_nondegenerates"], [419, 2, 1, "", "has_positional_metadata"], [420, 2, 1, "", "index"], [421, 2, 1, "", "is_reverse_complement"], [422, 2, 1, "", "iter_contiguous"], [423, 2, 1, "", "iter_kmers"], [424, 2, 1, "", "kmer_frequencies"], [425, 2, 1, "", "lowercase"], [426, 2, 1, "", "match_frequency"], [427, 2, 1, "", "matches"], [428, 2, 1, "", "mismatch_frequency"], [429, 2, 1, "", "mismatches"], [430, 2, 1, "", "nondegenerates"], [431, 2, 1, "", "read"], [432, 2, 1, "", "replace"], [433, 2, 1, "", "reverse_complement"], [434, 2, 1, "", "to_definites"], [435, 2, 1, "", "to_indices"], [436, 2, 1, "", "to_regex"], [437, 2, 1, "", "transcribe"], [438, 2, 1, "", "translate"], [439, 2, 1, "", "translate_six_frames"], [440, 2, 1, "", "write"]], "skbio.sequence.GeneticCode": [[442, 2, 1, "", "__eq__"], [443, 2, 1, "", "__ge__"], [444, 2, 1, "", "__getstate__"], [445, 2, 1, "", "__gt__"], [446, 2, 1, "", "__le__"], [447, 2, 1, "", "__lt__"], [448, 2, 1, "", "__ne__"], [449, 2, 1, "", "__str__"], [450, 2, 1, "", "from_ncbi"], [451, 2, 1, "", "translate"], [452, 2, 1, "", "translate_six_frames"]], "skbio.sequence.GrammaredSequence": [[454, 2, 1, "", "__bool__"], [455, 2, 1, "", "__contains__"], [456, 2, 1, "", "__copy__"], [457, 2, 1, "", "__deepcopy__"], [458, 2, 1, "", "__eq__"], [459, 2, 1, "", "__ge__"], [460, 2, 1, "", "__getitem__"], [461, 2, 1, "", "__getstate__"], [462, 2, 1, "", "__gt__"], [463, 2, 1, "", "__iter__"], [464, 2, 1, "", "__le__"], [465, 2, 1, "", "__len__"], [466, 2, 1, "", "__lt__"], [467, 2, 1, "", "__ne__"], [468, 2, 1, "", "__reversed__"], [469, 2, 1, "", "__str__"], [470, 2, 1, "", "concat"], [471, 2, 1, "", "count"], [472, 2, 1, "", "definites"], [473, 2, 1, "", "degap"], [474, 2, 1, "", "degenerates"], [475, 2, 1, "", "distance"], [476, 2, 1, "", "expand_degenerates"], [477, 2, 1, "", "find_motifs"], [478, 2, 1, "", "find_with_regex"], [479, 2, 1, "", "frequencies"], [480, 2, 1, "", "gaps"], [481, 2, 1, "", "has_definites"], [482, 2, 1, "", "has_degenerates"], [483, 2, 1, "", "has_gaps"], [484, 2, 1, "", "has_interval_metadata"], [485, 2, 1, "", "has_metadata"], [486, 2, 1, "", "has_nondegenerates"], [487, 2, 1, "", "has_positional_metadata"], [488, 2, 1, "", "index"], [489, 2, 1, "", "iter_contiguous"], [490, 2, 1, "", "iter_kmers"], [491, 2, 1, "", "kmer_frequencies"], [492, 2, 1, "", "lowercase"], [493, 2, 1, "", "match_frequency"], [494, 2, 1, "", "matches"], [495, 2, 1, "", "mismatch_frequency"], [496, 2, 1, "", "mismatches"], [497, 2, 1, "", "nondegenerates"], [498, 2, 1, "", "read"], [499, 2, 1, "", "replace"], [500, 2, 1, "", "to_definites"], [501, 2, 1, "", "to_indices"], [502, 2, 1, "", "to_regex"], [503, 2, 1, "", "write"]], "skbio.sequence.Protein": [[505, 2, 1, "", "__bool__"], [506, 2, 1, "", "__contains__"], [507, 2, 1, "", "__copy__"], [508, 2, 1, "", "__deepcopy__"], [509, 2, 1, "", "__eq__"], [510, 2, 1, "", "__ge__"], [511, 2, 1, "", "__getitem__"], [512, 2, 1, "", "__getstate__"], [513, 2, 1, "", "__gt__"], [514, 2, 1, "", "__iter__"], [515, 2, 1, "", "__le__"], [516, 2, 1, "", "__len__"], [517, 2, 1, "", "__lt__"], [518, 2, 1, "", "__ne__"], [519, 2, 1, "", "__reversed__"], [520, 2, 1, "", "__str__"], [521, 2, 1, "", "concat"], [522, 2, 1, "", "count"], [523, 2, 1, "", "definites"], [524, 2, 1, "", "degap"], [525, 2, 1, "", "degenerates"], [526, 2, 1, "", "distance"], [527, 2, 1, "", "expand_degenerates"], [528, 2, 1, "", "find_motifs"], [529, 2, 1, "", "find_with_regex"], [530, 2, 1, "", "frequencies"], [531, 2, 1, "", "gaps"], [532, 2, 1, "", "has_definites"], [533, 2, 1, "", "has_degenerates"], [534, 2, 1, "", "has_gaps"], [535, 2, 1, "", "has_interval_metadata"], [536, 2, 1, "", "has_metadata"], [537, 2, 1, "", "has_nondegenerates"], [538, 2, 1, "", "has_positional_metadata"], [539, 2, 1, "", "has_stops"], [540, 2, 1, "", "index"], [541, 2, 1, "", "iter_contiguous"], [542, 2, 1, "", "iter_kmers"], [543, 2, 1, "", "kmer_frequencies"], [544, 2, 1, "", "lowercase"], [545, 2, 1, "", "match_frequency"], [546, 2, 1, "", "matches"], [547, 2, 1, "", "mismatch_frequency"], [548, 2, 1, "", "mismatches"], [549, 2, 1, "", "nondegenerates"], [550, 2, 1, "", "read"], [551, 2, 1, "", "replace"], [552, 2, 1, "", "stops"], [553, 2, 1, "", "to_definites"], [554, 2, 1, "", "to_indices"], [555, 2, 1, "", "to_regex"], [556, 2, 1, "", "write"]], "skbio.sequence.RNA": [[558, 2, 1, "", "__bool__"], [559, 2, 1, "", "__contains__"], [560, 2, 1, "", "__copy__"], [561, 2, 1, "", "__deepcopy__"], [562, 2, 1, "", "__eq__"], [563, 2, 1, "", "__ge__"], [564, 2, 1, "", "__getitem__"], [565, 2, 1, "", "__getstate__"], [566, 2, 1, "", "__gt__"], [567, 2, 1, "", "__iter__"], [568, 2, 1, "", "__le__"], [569, 2, 1, "", "__len__"], [570, 2, 1, "", "__lt__"], [571, 2, 1, "", "__ne__"], [572, 2, 1, "", "__reversed__"], [573, 2, 1, "", "__str__"], [574, 2, 1, "", "complement"], [575, 2, 1, "", "concat"], [576, 2, 1, "", "count"], [577, 2, 1, "", "definites"], [578, 2, 1, "", "degap"], [579, 2, 1, "", "degenerates"], [580, 2, 1, "", "distance"], [581, 2, 1, "", "expand_degenerates"], [582, 2, 1, "", "find_motifs"], [583, 2, 1, "", "find_with_regex"], [584, 2, 1, "", "frequencies"], [585, 2, 1, "", "gaps"], [586, 2, 1, "", "gc_content"], [587, 2, 1, "", "gc_frequency"], [588, 2, 1, "", "has_definites"], [589, 2, 1, "", "has_degenerates"], [590, 2, 1, "", "has_gaps"], [591, 2, 1, "", "has_interval_metadata"], [592, 2, 1, "", "has_metadata"], [593, 2, 1, "", "has_nondegenerates"], [594, 2, 1, "", "has_positional_metadata"], [595, 2, 1, "", "index"], [596, 2, 1, "", "is_reverse_complement"], [597, 2, 1, "", "iter_contiguous"], [598, 2, 1, "", "iter_kmers"], [599, 2, 1, "", "kmer_frequencies"], [600, 2, 1, "", "lowercase"], [601, 2, 1, "", "match_frequency"], [602, 2, 1, "", "matches"], [603, 2, 1, "", "mismatch_frequency"], [604, 2, 1, "", "mismatches"], [605, 2, 1, "", "nondegenerates"], [606, 2, 1, "", "read"], [607, 2, 1, "", "replace"], [608, 2, 1, "", "reverse_complement"], [609, 2, 1, "", "reverse_transcribe"], [610, 2, 1, "", "to_definites"], [611, 2, 1, "", "to_indices"], [612, 2, 1, "", "to_regex"], [613, 2, 1, "", "translate"], [614, 2, 1, "", "translate_six_frames"], [615, 2, 1, "", "write"]], "skbio.sequence.Sequence": [[617, 2, 1, "", "__bool__"], [618, 2, 1, "", "__contains__"], [619, 2, 1, "", "__copy__"], [620, 2, 1, "", "__deepcopy__"], [621, 2, 1, "", "__eq__"], [622, 2, 1, "", "__ge__"], [623, 2, 1, "", "__getitem__"], [624, 2, 1, "", "__getstate__"], [625, 2, 1, "", "__gt__"], [626, 2, 1, "", "__iter__"], [627, 2, 1, "", "__le__"], [628, 2, 1, "", "__len__"], [629, 2, 1, "", "__lt__"], [630, 2, 1, "", "__ne__"], [631, 2, 1, "", "__reversed__"], [632, 2, 1, "", "__str__"], [633, 2, 1, "", "concat"], [634, 2, 1, "", "count"], [635, 2, 1, "", "distance"], [636, 2, 1, "", "find_with_regex"], [637, 2, 1, "", "frequencies"], [638, 2, 1, "", "has_interval_metadata"], [639, 2, 1, "", "has_metadata"], [640, 2, 1, "", "has_positional_metadata"], [641, 2, 1, "", "index"], [642, 2, 1, "", "iter_contiguous"], [643, 2, 1, "", "iter_kmers"], [644, 2, 1, "", "kmer_frequencies"], [645, 2, 1, "", "lowercase"], [646, 2, 1, "", "match_frequency"], [647, 2, 1, "", "matches"], [648, 2, 1, "", "mismatch_frequency"], [649, 2, 1, "", "mismatches"], [650, 2, 1, "", "read"], [651, 2, 1, "", "replace"], [652, 2, 1, "", "to_indices"], [653, 2, 1, "", "write"]], "skbio.sequence.SubstitutionMatrix": [[655, 2, 1, "", "__contains__"], [656, 2, 1, "", "__eq__"], [657, 2, 1, "", "__ge__"], [658, 2, 1, "", "__getitem__"], [659, 2, 1, "", "__getstate__"], [660, 2, 1, "", "__gt__"], [661, 2, 1, "", "__le__"], [662, 2, 1, "", "__lt__"], [663, 2, 1, "", "__ne__"], [664, 2, 1, "", "__str__"], [665, 2, 1, "", "between"], [666, 2, 1, "", "by_name"], [667, 2, 1, "", "copy"], [668, 2, 1, "", "filter"], [669, 2, 1, "", "from_dict"], [670, 2, 1, "", "from_iterable"], [671, 2, 1, "", "get_names"], [672, 2, 1, "", "identity"], [673, 2, 1, "", "index"], [674, 2, 1, "", "plot"], [675, 2, 1, "", "read"], [676, 2, 1, "", "redundant_form"], [677, 2, 1, "", "to_data_frame"], [678, 2, 1, "", "to_dict"], [679, 2, 1, "", "transpose"], [680, 2, 1, "", "within"], [681, 2, 1, "", "write"]], "skbio.sequence.distance": [[683, 3, 1, "", "hamming"], [684, 3, 1, "", "kmer_distance"]], "skbio.stats": [[685, 0, 0, "-", "composition"], [706, 0, 0, "-", "distance"], [763, 0, 0, "-", "evolve"], [765, 0, 0, "-", "gradient"], [854, 3, 1, "", "isubsample"], [855, 0, 0, "-", "ordination"], [881, 0, 0, "-", "power"], [886, 3, 1, "", "subsample_counts"]], "skbio.stats.composition": [[686, 3, 1, "", "alr"], [687, 3, 1, "", "alr_inv"], [688, 3, 1, "", "ancom"], [689, 3, 1, "", "centralize"], [690, 3, 1, "", "closure"], [691, 3, 1, "", "clr"], [692, 3, 1, "", "clr_inv"], [693, 3, 1, "", "dirmult_ttest"], [694, 3, 1, "", "ilr"], [695, 3, 1, "", "ilr_inv"], [696, 3, 1, "", "inner"], [697, 3, 1, "", "multi_replace"], [698, 3, 1, "", "multiplicative_replacement"], [699, 3, 1, "", "pairwise_vlr"], [700, 3, 1, "", "perturb"], [701, 3, 1, "", "perturb_inv"], [702, 3, 1, "", "power"], [703, 3, 1, "", "sbp_basis"], [704, 3, 1, "", "tree_basis"], [705, 3, 1, "", "vlr"]], "skbio.stats.distance": [[707, 1, 1, "", "DissimilarityMatrix"], [730, 1, 1, "", "DistanceMatrix"], [756, 3, 1, "", "anosim"], [757, 3, 1, "", "bioenv"], [758, 3, 1, "", "mantel"], [759, 3, 1, "", "permanova"], [760, 3, 1, "", "permdisp"], [761, 3, 1, "", "pwmantel"], [762, 3, 1, "", "randdm"]], "skbio.stats.distance.DissimilarityMatrix": [[708, 2, 1, "", "__contains__"], [709, 2, 1, "", "__eq__"], [710, 2, 1, "", "__ge__"], [711, 2, 1, "", "__getitem__"], [712, 2, 1, "", "__getstate__"], [713, 2, 1, "", "__gt__"], [714, 2, 1, "", "__le__"], [715, 2, 1, "", "__lt__"], [716, 2, 1, "", "__ne__"], [717, 2, 1, "", "__str__"], [718, 2, 1, "", "between"], [719, 2, 1, "", "copy"], [720, 2, 1, "", "filter"], [721, 2, 1, "", "from_iterable"], [722, 2, 1, "", "index"], [723, 2, 1, "", "plot"], [724, 2, 1, "", "read"], [725, 2, 1, "", "redundant_form"], [726, 2, 1, "", "to_data_frame"], [727, 2, 1, "", "transpose"], [728, 2, 1, "", "within"], [729, 2, 1, "", "write"]], "skbio.stats.distance.DistanceMatrix": [[731, 2, 1, "", "__contains__"], [732, 2, 1, "", "__eq__"], [733, 2, 1, "", "__ge__"], [734, 2, 1, "", "__getitem__"], [735, 2, 1, "", "__getstate__"], [736, 2, 1, "", "__gt__"], [737, 2, 1, "", "__le__"], [738, 2, 1, "", "__lt__"], [739, 2, 1, "", "__ne__"], [740, 2, 1, "", "__str__"], [741, 2, 1, "", "between"], [742, 2, 1, "", "condensed_form"], [743, 2, 1, "", "copy"], [744, 2, 1, "", "filter"], [745, 2, 1, "", "from_iterable"], [746, 2, 1, "", "index"], [747, 2, 1, "", "permute"], [748, 2, 1, "", "plot"], [749, 2, 1, "", "read"], [750, 2, 1, "", "redundant_form"], [751, 2, 1, "", "to_data_frame"], [752, 2, 1, "", "to_series"], [753, 2, 1, "", "transpose"], [754, 2, 1, "", "within"], [755, 2, 1, "", "write"]], "skbio.stats.evolve": [[764, 3, 1, "", "hommola_cospeciation"]], "skbio.stats.gradient": [[766, 1, 1, "", "AverageGradientANOVA"], [777, 1, 1, "", "CategoryResults"], [788, 1, 1, "", "FirstDifferenceGradientANOVA"], [799, 1, 1, "", "GradientANOVA"], [810, 1, 1, "", "GradientANOVAResults"], [821, 1, 1, "", "GroupResults"], [832, 1, 1, "", "TrajectoryGradientANOVA"], [843, 1, 1, "", "WindowDifferenceGradientANOVA"]], "skbio.stats.gradient.AverageGradientANOVA": [[767, 2, 1, "", "__eq__"], [768, 2, 1, "", "__ge__"], [769, 2, 1, "", "__getstate__"], [770, 2, 1, "", "__gt__"], [771, 2, 1, "", "__hash__"], [772, 2, 1, "", "__le__"], [773, 2, 1, "", "__lt__"], [774, 2, 1, "", "__ne__"], [775, 2, 1, "", "__str__"], [776, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.CategoryResults": [[778, 2, 1, "", "__eq__"], [779, 2, 1, "", "__ge__"], [780, 2, 1, "", "__getstate__"], [781, 2, 1, "", "__gt__"], [782, 2, 1, "", "__hash__"], [783, 2, 1, "", "__le__"], [784, 2, 1, "", "__lt__"], [785, 2, 1, "", "__ne__"], [786, 2, 1, "", "__str__"], [787, 2, 1, "", "to_files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[789, 2, 1, "", "__eq__"], [790, 2, 1, "", "__ge__"], [791, 2, 1, "", "__getstate__"], [792, 2, 1, "", "__gt__"], [793, 2, 1, "", "__hash__"], [794, 2, 1, "", "__le__"], [795, 2, 1, "", "__lt__"], [796, 2, 1, "", "__ne__"], [797, 2, 1, "", "__str__"], [798, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVA": [[800, 2, 1, "", "__eq__"], [801, 2, 1, "", "__ge__"], [802, 2, 1, "", "__getstate__"], [803, 2, 1, "", "__gt__"], [804, 2, 1, "", "__hash__"], [805, 2, 1, "", "__le__"], [806, 2, 1, "", "__lt__"], [807, 2, 1, "", "__ne__"], [808, 2, 1, "", "__str__"], [809, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[811, 2, 1, "", "__eq__"], [812, 2, 1, "", "__ge__"], [813, 2, 1, "", "__getstate__"], [814, 2, 1, "", "__gt__"], [815, 2, 1, "", "__hash__"], [816, 2, 1, "", "__le__"], [817, 2, 1, "", "__lt__"], [818, 2, 1, "", "__ne__"], [819, 2, 1, "", "__str__"], [820, 2, 1, "", "to_files"]], "skbio.stats.gradient.GroupResults": [[822, 2, 1, "", "__eq__"], [823, 2, 1, "", "__ge__"], [824, 2, 1, "", "__getstate__"], [825, 2, 1, "", "__gt__"], [826, 2, 1, "", "__hash__"], [827, 2, 1, "", "__le__"], [828, 2, 1, "", "__lt__"], [829, 2, 1, "", "__ne__"], [830, 2, 1, "", "__str__"], [831, 2, 1, "", "to_files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[833, 2, 1, "", "__eq__"], [834, 2, 1, "", "__ge__"], [835, 2, 1, "", "__getstate__"], [836, 2, 1, "", "__gt__"], [837, 2, 1, "", "__hash__"], [838, 2, 1, "", "__le__"], [839, 2, 1, "", "__lt__"], [840, 2, 1, "", "__ne__"], [841, 2, 1, "", "__str__"], [842, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[844, 2, 1, "", "__eq__"], [845, 2, 1, "", "__ge__"], [846, 2, 1, "", "__getstate__"], [847, 2, 1, "", "__gt__"], [848, 2, 1, "", "__hash__"], [849, 2, 1, "", "__le__"], [850, 2, 1, "", "__lt__"], [851, 2, 1, "", "__ne__"], [852, 2, 1, "", "__str__"], [853, 2, 1, "", "get_trajectories"]], "skbio.stats.ordination": [[856, 1, 1, "", "OrdinationResults"], [870, 3, 1, "", "ca"], [871, 3, 1, "", "cca"], [872, 3, 1, "", "corr"], [873, 3, 1, "", "e_matrix"], [874, 3, 1, "", "f_matrix"], [875, 3, 1, "", "mean_and_std"], [876, 3, 1, "", "pcoa"], [877, 3, 1, "", "pcoa_biplot"], [878, 3, 1, "", "rda"], [879, 3, 1, "", "scale"], [880, 3, 1, "", "svd_rank"]], "skbio.stats.ordination.OrdinationResults": [[857, 2, 1, "", "__eq__"], [858, 2, 1, "", "__ge__"], [859, 2, 1, "", "__getstate__"], [860, 2, 1, "", "__gt__"], [861, 2, 1, "", "__hash__"], [862, 2, 1, "", "__le__"], [863, 2, 1, "", "__lt__"], [864, 2, 1, "", "__ne__"], [865, 2, 1, "", "__str__"], [866, 2, 1, "", "plot"], [867, 2, 1, "", "read"], [868, 2, 1, "", "rename"], [869, 2, 1, "", "write"]], "skbio.stats.power": [[882, 3, 1, "", "confidence_bound"], [883, 3, 1, "", "paired_subsamples"], [884, 3, 1, "", "subsample_paired_power"], [885, 3, 1, "", "subsample_power"]], "skbio.table": [[887, 1, 1, "", "Table"], [954, 4, 1, "", "example_table"]], "skbio.table.Table": [[888, 2, 1, "", "__eq__"], [889, 2, 1, "", "__ge__"], [890, 2, 1, "", "__getitem__"], [891, 2, 1, "", "__getstate__"], [892, 2, 1, "", "__gt__"], [893, 2, 1, "", "__iter__"], [894, 2, 1, "", "__le__"], [895, 2, 1, "", "__lt__"], [896, 2, 1, "", "__ne__"], [897, 2, 1, "", "__str__"], [898, 2, 1, "", "add_group_metadata"], [899, 2, 1, "", "add_metadata"], [900, 2, 1, "", "align_to"], [901, 2, 1, "", "align_to_dataframe"], [902, 2, 1, "", "align_tree"], [903, 2, 1, "", "collapse"], [904, 2, 1, "", "concat"], [905, 2, 1, "", "copy"], [906, 2, 1, "", "data"], [907, 2, 1, "", "del_metadata"], [908, 2, 1, "", "delimited_self"], [909, 2, 1, "", "descriptive_equality"], [910, 2, 1, "", "exists"], [911, 2, 1, "", "filter"], [912, 2, 1, "", "from_adjacency"], [913, 2, 1, "", "from_hdf5"], [914, 2, 1, "", "from_json"], [915, 2, 1, "", "from_tsv"], [916, 2, 1, "", "get_table_density"], [917, 2, 1, "", "get_value_by_ids"], [918, 2, 1, "", "group_metadata"], [919, 2, 1, "", "head"], [920, 2, 1, "", "ids"], [921, 2, 1, "", "index"], [922, 2, 1, "", "is_empty"], [923, 2, 1, "", "iter"], [924, 2, 1, "", "iter_data"], [925, 2, 1, "", "iter_pairwise"], [926, 2, 1, "", "length"], [927, 2, 1, "", "max"], [928, 2, 1, "", "merge"], [929, 2, 1, "", "metadata"], [930, 2, 1, "", "metadata_to_dataframe"], [931, 2, 1, "", "min"], [932, 2, 1, "", "nonzero"], [933, 2, 1, "", "nonzero_counts"], [934, 2, 1, "", "norm"], [935, 2, 1, "", "pa"], [936, 2, 1, "", "partition"], [937, 2, 1, "", "rankdata"], [938, 2, 1, "", "read"], [939, 2, 1, "", "reduce"], [940, 2, 1, "", "remove_empty"], [941, 2, 1, "", "sort"], [942, 2, 1, "", "sort_order"], [943, 2, 1, "", "subsample"], [944, 2, 1, "", "sum"], [945, 2, 1, "", "to_anndata"], [946, 2, 1, "", "to_dataframe"], [947, 2, 1, "", "to_hdf5"], [948, 2, 1, "", "to_json"], [949, 2, 1, "", "to_tsv"], [950, 2, 1, "", "transform"], [951, 2, 1, "", "transpose"], [952, 2, 1, "", "update_ids"], [953, 2, 1, "", "write"]], "skbio.tree": [[955, 1, 1, "", "TreeNode"], [1038, 3, 1, "", "majority_rule"], [1039, 3, 1, "", "nj"]], "skbio.tree.TreeNode": [[956, 2, 1, "", "__copy__"], [957, 2, 1, "", "__deepcopy__"], [958, 2, 1, "", "__eq__"], [959, 2, 1, "", "__ge__"], [960, 2, 1, "", "__getitem__"], [961, 2, 1, "", "__getstate__"], [962, 2, 1, "", "__gt__"], [963, 2, 1, "", "__hash__"], [964, 2, 1, "", "__iter__"], [965, 2, 1, "", "__le__"], [966, 2, 1, "", "__len__"], [967, 2, 1, "", "__lt__"], [968, 2, 1, "", "__ne__"], [969, 2, 1, "", "__str__"], [970, 2, 1, "", "accumulate_to_ancestor"], [971, 2, 1, "", "ancestors"], [972, 2, 1, "", "append"], [973, 2, 1, "", "ascii_art"], [974, 2, 1, "", "assign_ids"], [975, 2, 1, "", "assign_supports"], [976, 2, 1, "", "bifurcate"], [977, 2, 1, "", "cache_attr"], [978, 2, 1, "", "compare_rfd"], [979, 2, 1, "", "compare_subsets"], [980, 2, 1, "", "compare_tip_distances"], [981, 2, 1, "", "copy"], [982, 2, 1, "", "count"], [983, 2, 1, "", "create_caches"], [984, 2, 1, "", "deepcopy"], [985, 2, 1, "", "descending_branch_length"], [986, 2, 1, "", "distance"], [987, 2, 1, "", "extend"], [988, 2, 1, "", "find"], [989, 2, 1, "", "find_all"], [990, 2, 1, "", "find_by_func"], [991, 2, 1, "", "find_by_id"], [992, 2, 1, "", "from_linkage_matrix"], [993, 2, 1, "", "from_taxdump"], [994, 2, 1, "", "from_taxonomy"], [995, 2, 1, "", "get_max_distance"], [996, 2, 1, "", "has_children"], [997, 2, 1, "", "index_tree"], [998, 2, 1, "", "insert"], [999, 2, 1, "", "invalidate_caches"], [1000, 2, 1, "", "is_root"], [1001, 2, 1, "", "is_tip"], [1002, 2, 1, "", "lca"], [1003, 2, 1, "", "levelorder"], [1004, 2, 1, "", "lowest_common_ancestor"], [1005, 2, 1, "", "neighbors"], [1006, 2, 1, "", "non_tips"], [1007, 2, 1, "", "observed_node_counts"], [1008, 2, 1, "", "pop"], [1009, 2, 1, "", "postorder"], [1010, 2, 1, "", "pre_and_postorder"], [1011, 2, 1, "", "preorder"], [1012, 2, 1, "", "prune"], [1013, 2, 1, "", "read"], [1014, 2, 1, "", "remove"], [1015, 2, 1, "", "remove_deleted"], [1016, 2, 1, "", "root"], [1017, 2, 1, "", "root_at"], [1018, 2, 1, "", "root_at_midpoint"], [1019, 2, 1, "", "root_by_outgroup"], [1020, 2, 1, "", "shear"], [1021, 2, 1, "", "shuffle"], [1022, 2, 1, "", "siblings"], [1023, 2, 1, "", "subset"], [1024, 2, 1, "", "subsets"], [1025, 2, 1, "", "subtree"], [1026, 2, 1, "", "tip_tip_distances"], [1027, 2, 1, "", "tips"], [1028, 2, 1, "", "to_array"], [1029, 2, 1, "", "to_taxonomy"], [1030, 2, 1, "", "traverse"], [1031, 2, 1, "", "unpack"], [1032, 2, 1, "", "unpack_by_func"], [1033, 2, 1, "", "unroot"], [1034, 2, 1, "", "unrooted_copy"], [1035, 2, 1, "", "unrooted_deepcopy"], [1036, 2, 1, "", "unrooted_move"], [1037, 2, 1, "", "write"]], "skbio.util": [[1040, 5, 1, "", "EfficiencyWarning"], [1041, 5, 1, "", "RepresentationWarning"], [1042, 3, 1, "", "assert_data_frame_almost_equal"], [1043, 3, 1, "", "assert_ordination_results_equal"], [1044, 3, 1, "", "cardinal_to_ordinal"], [1045, 1, 1, "", "classproperty"], [1062, 3, 1, "", "find_duplicates"], [1063, 3, 1, "", "get_data_path"], [1064, 3, 1, "", "safe_md5"]], "skbio.util.classproperty": [[1046, 2, 1, "", "__delete__"], [1047, 2, 1, "", "__eq__"], [1048, 2, 1, "", "__ge__"], [1049, 2, 1, "", "__get__"], [1050, 2, 1, "", "__getstate__"], [1051, 2, 1, "", "__gt__"], [1052, 2, 1, "", "__hash__"], [1053, 2, 1, "", "__le__"], [1054, 2, 1, "", "__lt__"], [1055, 2, 1, "", "__ne__"], [1056, 2, 1, "", "__set__"], [1057, 2, 1, "", "__set_name__"], [1058, 2, 1, "", "__str__"], [1059, 2, 1, "", "deleter"], [1060, 2, 1, "", "getter"], [1061, 2, 1, "", "setter"]], "skbio.workflow": [[1065, 1, 1, "", "Workflow"], [1077, 1, 1, "", "method"], [1088, 1, 1, "", "requires"]], "skbio.workflow.Workflow": [[1066, 2, 1, "", "__call__"], [1067, 2, 1, "", "__eq__"], [1068, 2, 1, "", "__ge__"], [1069, 2, 1, "", "__getstate__"], [1070, 2, 1, "", "__gt__"], [1071, 2, 1, "", "__hash__"], [1072, 2, 1, "", "__le__"], [1073, 2, 1, "", "__lt__"], [1074, 2, 1, "", "__ne__"], [1075, 2, 1, "", "__str__"], [1076, 2, 1, "", "initialize_state"]], "skbio.workflow.method": [[1078, 2, 1, "", "__call__"], [1079, 2, 1, "", "__eq__"], [1080, 2, 1, "", "__ge__"], [1081, 2, 1, "", "__getstate__"], [1082, 2, 1, "", "__gt__"], [1083, 2, 1, "", "__hash__"], [1084, 2, 1, "", "__le__"], [1085, 2, 1, "", "__lt__"], [1086, 2, 1, "", "__ne__"], [1087, 2, 1, "", "__str__"]], "skbio.workflow.requires": [[1089, 2, 1, "", "__call__"], [1090, 2, 1, "", "__eq__"], [1091, 2, 1, "", "__ge__"], [1092, 2, 1, "", "__getstate__"], [1093, 2, 1, "", "__gt__"], [1094, 2, 1, "", "__hash__"], [1095, 2, 1, "", "__le__"], [1096, 2, 1, "", "__lt__"], [1097, 2, 1, "", "__ne__"], [1098, 2, 1, "", "__str__"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "data", "Python data"], "5": ["py", "exception", "Python exception"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:data", "5": "py:exception"}, "terms": {"": [0, 1, 3, 44, 53, 65, 82, 83, 84, 85, 89, 90, 91, 92, 94, 98, 99, 100, 103, 107, 109, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 126, 128, 129, 130, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 151, 152, 153, 220, 221, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 296, 297, 298, 308, 320, 343, 344, 361, 362, 363, 375, 376, 380, 382, 384, 387, 389, 392, 394, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 435, 437, 438, 439, 441, 442, 448, 451, 452, 453, 455, 458, 460, 463, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 501, 504, 506, 509, 511, 514, 516, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 557, 559, 562, 564, 567, 569, 571, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 609, 611, 613, 614, 616, 618, 621, 623, 626, 628, 630, 631, 632, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 658, 665, 666, 668, 680, 683, 686, 687, 688, 691, 692, 694, 695, 699, 703, 705, 707, 711, 718, 720, 728, 734, 741, 744, 754, 756, 757, 758, 759, 760, 787, 820, 831, 854, 866, 870, 871, 872, 876, 878, 880, 881, 883, 884, 885, 903, 911, 919, 924, 939, 942, 972, 977, 985, 987, 997, 1014, 1018, 1033, 1038, 1088, 1100, 1102, 1105, 1107], "0": [0, 1, 3, 13, 14, 15, 17, 18, 19, 32, 33, 34, 44, 45, 46, 47, 50, 51, 52, 53, 65, 77, 82, 83, 85, 88, 91, 92, 94, 104, 105, 107, 112, 116, 117, 118, 120, 121, 123, 124, 132, 134, 135, 136, 138, 145, 148, 149, 154, 166, 179, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 277, 320, 382, 383, 387, 389, 399, 400, 401, 403, 405, 406, 407, 409, 411, 412, 418, 424, 426, 428, 430, 433, 435, 436, 437, 438, 439, 441, 451, 452, 453, 454, 458, 460, 470, 471, 473, 475, 476, 477, 479, 486, 491, 493, 495, 497, 501, 502, 504, 505, 509, 511, 521, 522, 524, 526, 527, 528, 530, 537, 543, 545, 547, 549, 554, 555, 557, 558, 562, 564, 574, 575, 576, 578, 580, 581, 582, 584, 586, 587, 593, 599, 601, 603, 605, 608, 609, 611, 612, 613, 614, 616, 617, 621, 623, 633, 634, 635, 637, 644, 646, 648, 652, 654, 665, 666, 669, 674, 677, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 718, 723, 726, 728, 741, 748, 751, 752, 754, 756, 757, 758, 760, 761, 762, 764, 765, 799, 854, 855, 866, 871, 875, 876, 879, 881, 882, 884, 885, 886, 887, 890, 900, 901, 902, 903, 904, 906, 910, 911, 914, 917, 918, 919, 920, 921, 923, 924, 928, 929, 934, 935, 936, 937, 939, 941, 942, 943, 944, 946, 947, 949, 950, 952, 954, 970, 975, 978, 979, 980, 981, 984, 985, 986, 989, 995, 998, 1008, 1014, 1017, 1018, 1019, 1020, 1021, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1044, 1077, 1100, 1102, 1105, 1107], "00": [1, 220, 221, 225, 228, 231, 400, 437, 470, 521, 575, 609, 633, 1039, 1102], "000": 151, "000000": [1, 1039], "000000e": [220, 221], "000123": 234, "000133446": 980, "000532": 855, "001": [688, 881], "001562": 855, "00193863362662502": 884, "003": 885, "0031": 765, "005": 885, "007022633956606": 765, "007446": 693, "0082138": [53, 104], "01": [231, 881], "0118478282382": 765, "0123": 234, "0123456789": 298, "012631": 855, "015": [699, 705], "016": 881, "02": [231, 236, 688], "020131": 693, "0220": [699, 705], "0225": 765, "029747": 855, "03": [231, 760], "0301": 765, "032": 881, "0341": 765, "036910": 693, "0378111988903307": 222, "03t14": 914, "04": [231, 881], "043888": 693, "044": 881, "044805": 855, "048219": 693, "05": [1, 231, 688, 693, 764, 881, 882, 884, 885, 1042], "051": 881, "056": 885, "06": [231, 914], "0625": 697, "0633": 765, "065613": 693, "068310": 693, "07": 231, "0721": 765, "074": 885, "08": [231, 234, 881, 884], "083071": 235, "0874": 765, "088": 884, "0898": 765, "09": 231, "09392265": 1, "09861229": 686, "0i": 688, "0th": [930, 1044], "1": [0, 1, 3, 13, 14, 15, 17, 18, 19, 20, 33, 34, 44, 46, 47, 50, 51, 52, 53, 65, 70, 82, 83, 84, 85, 88, 91, 92, 94, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 151, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 248, 249, 298, 308, 320, 323, 325, 382, 387, 389, 399, 400, 401, 407, 409, 422, 423, 424, 428, 433, 434, 435, 438, 439, 441, 442, 449, 450, 451, 452, 453, 458, 460, 470, 471, 477, 479, 489, 490, 491, 495, 500, 501, 504, 509, 511, 521, 522, 528, 530, 541, 542, 543, 547, 553, 554, 557, 562, 564, 574, 575, 576, 582, 584, 597, 598, 599, 603, 608, 610, 611, 613, 614, 616, 621, 623, 633, 634, 637, 642, 643, 644, 648, 652, 654, 665, 666, 669, 672, 674, 676, 677, 680, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 718, 723, 725, 726, 728, 730, 741, 742, 748, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 764, 799, 821, 843, 854, 855, 866, 870, 871, 875, 878, 879, 881, 883, 884, 885, 886, 887, 900, 901, 902, 903, 904, 907, 910, 911, 913, 914, 917, 918, 919, 920, 921, 923, 924, 928, 929, 931, 934, 935, 936, 937, 939, 941, 942, 943, 944, 946, 947, 949, 950, 952, 954, 970, 975, 978, 980, 985, 986, 989, 993, 994, 995, 998, 1008, 1018, 1020, 1021, 1026, 1028, 1029, 1031, 1032, 1033, 1038, 1039, 1044, 1102, 1105, 1107], "10": [53, 84, 104, 107, 124, 125, 138, 166, 179, 221, 224, 225, 226, 227, 228, 230, 231, 232, 298, 308, 323, 382, 407, 453, 477, 504, 528, 557, 582, 616, 688, 693, 699, 705, 760, 855, 881, 884, 885, 890, 900, 903, 904, 908, 924, 928, 1039, 1107], "100": [1, 220, 221, 225, 228, 323, 688, 693, 885, 919, 943, 1107], "1000": [323, 854], "1004": 765, "1004075": [699, 705], "100548": 855, "1007": [224, 699, 705], "101": 693, "10136628": 691, "102": 693, "1024": 223, "103": 693, "104": [235, 693], "1048576": 1064, "104937": 855, "1055": 765, "10596": 221, "106": 1018, "108": 881, "10915": [100, 103, 666], "10919": [100, 103, 666], "1093": [226, 1039], "10937312": 1, "11": [0, 45, 53, 100, 103, 104, 110, 115, 116, 220, 224, 231, 233, 382, 408, 478, 529, 557, 583, 636, 688, 693, 699, 705, 765, 855, 871, 878, 881, 900, 903, 904, 924, 1039], "110": 693, "1115": 127, "112": 937, "1126": 127, "113": [121, 138], "1131255": 1064, "114": 220, "1154": 765, "116": 765, "1167": 871, "117": 756, "11704769": 694, "117693430600200007": 116, "1179": 871, "11th": 232, "12": [1, 224, 231, 616, 688, 693, 699, 881, 903, 904, 937, 1102], "120": [228, 693], "120492524415": 1105, "1215": 765, "123": [234, 854], "12345": [225, 616], "126": 226, "127": 884, "128": 693, "13": [0, 111, 135, 141, 221, 225, 231, 233, 382, 453, 504, 557, 616, 688, 693, 855, 903, 904, 947], "131": [135, 141, 978], "131567": 236, "1345": 108, "1347": 108, "135": [221, 699, 705], "1371": [53, 104, 699, 705], "139": 235, "14": [1, 111, 123, 134, 224, 226, 231, 403, 407, 473, 477, 524, 528, 578, 582, 688, 693, 765, 885, 904, 986, 1026], "14092516": 695, "141": [134, 978], "142857": 761, "14285714": 701, "142857142857": 934, "143": 756, "1435": 225, "144": 141, "1457": 764, "1468": 764, "147": 101, "1495": 224, "149855": 225, "1499": 224, "15": [53, 100, 103, 123, 221, 231, 234, 765, 881, 884, 885, 904, 1026], "1535": 975, "1542": [221, 975], "156": 118, "1566": 221, "157": 881, "1576": [148, 149], "15800534": 220, "1585": [148, 149], "16": [1, 114, 134, 222, 225, 226, 227, 231, 232, 399, 408, 433, 478, 529, 574, 583, 608, 636, 693, 866, 881, 885, 900, 904, 995, 1026], "16025641": 1, "161": 220, "16247744": 689, "1627907": 1, "163": [112, 122, 139, 141], "164998": 693, "165": 134, "168": [108, 884], "169": [148, 149], "17": [114, 116, 148, 149, 224, 231, 382, 557, 855, 884, 904], "170768970": 220, "172": [148, 149], "1740": 224, "17445763": 689, "1767": 226, "1771": 226, "1786181": 221, "18": [221, 231, 235, 756, 881, 1102], "1800": 224, "1814": 104, "182343": 693, "1859": 224, "1875": 697, "18761279": 689, "19": [1, 224, 231, 881, 903], "1907511": 224, "1912": 118, "1913": 105, "192": 235, "19234468": 227, "193": 107, "194": 134, "1943": 117, "1948": 138, "1949": [112, 122, 139, 141], "195": 101, "1953": [106, 119], "1955": 118, "1956": 109, "1958": 126, "1961": 136, "1966": [135, 141], "1967": [127, 758], "1968": 137, "1970": [98, 108], "1971": [114, 139], "1972": 1018, "1973": 121, "1974": [120, 128], "1976": 123, "1978": 666, "1981": [101, 978, 1038], "1983": 115, "1984": [110, 382, 453, 504, 557, 616], "1985": [225, 382, 453, 504, 557, 616], "1986": [225, 230, 232, 871], "1987": [130, 1039], "1988": 145, "199": 227, "1990": [220, 221, 224], "1991": 224, "1992": [100, 103, 107, 116, 134, 666, 706], "1993": [107, 756, 757], "1995": 871, "1997": [116, 235, 1039], "1998": [123, 855, 870, 871, 873, 874, 876, 878], "1d": [88, 138, 146, 166, 179, 192, 203, 382, 384, 389, 401, 402, 404, 405, 407, 408, 410, 420, 421, 422, 426, 427, 428, 429, 430, 432, 435, 455, 460, 471, 472, 474, 475, 477, 478, 480, 488, 489, 493, 494, 495, 496, 497, 499, 501, 504, 506, 511, 522, 523, 525, 526, 528, 529, 531, 540, 541, 545, 546, 547, 548, 549, 551, 552, 554, 557, 559, 564, 576, 577, 579, 580, 582, 583, 585, 595, 596, 597, 601, 602, 603, 604, 605, 607, 611, 616, 618, 623, 634, 635, 636, 641, 642, 646, 647, 648, 649, 651, 652], "1e": [221, 230, 1042], "1e51ca3a5450c43524b9185c236cc5cc": 224, "1e9": 234, "1st": [77, 832, 1044], "1x1": 232, "2": [0, 1, 3, 13, 14, 15, 18, 19, 45, 46, 47, 50, 51, 52, 53, 65, 70, 77, 82, 83, 84, 86, 88, 91, 92, 94, 98, 99, 100, 101, 102, 103, 106, 107, 110, 112, 114, 116, 118, 121, 122, 123, 124, 125, 127, 128, 130, 134, 136, 138, 139, 141, 145, 148, 149, 150, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 249, 308, 320, 323, 325, 363, 382, 399, 400, 401, 407, 408, 409, 412, 420, 422, 424, 433, 435, 439, 442, 451, 452, 470, 471, 477, 478, 479, 488, 489, 491, 501, 521, 522, 528, 529, 530, 540, 541, 543, 554, 574, 575, 576, 582, 583, 584, 587, 595, 597, 599, 608, 611, 614, 616, 633, 634, 636, 637, 641, 642, 644, 652, 654, 665, 666, 672, 674, 677, 680, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 718, 723, 726, 728, 730, 741, 748, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 764, 765, 854, 855, 866, 870, 871, 873, 876, 878, 881, 883, 884, 885, 886, 887, 900, 901, 902, 903, 904, 907, 908, 911, 913, 914, 919, 926, 927, 928, 931, 934, 937, 943, 945, 946, 947, 950, 952, 954, 970, 975, 978, 980, 981, 984, 985, 986, 991, 993, 994, 995, 998, 1017, 1018, 1019, 1020, 1021, 1026, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1044, 1100, 1102, 1105, 1107], "20": [0, 3, 231, 504, 688, 693, 866, 873, 881, 884, 885, 919], "200": [227, 693], "2000": [107, 885, 1039], "2001": 759, "2002": [84, 116, 134, 144, 221, 225], "2003": [225, 685], "2004": 129, "2005": [148, 224], "2006": [116, 121, 138, 760, 1039], "2007": [134, 148, 149], "2008": [225, 232], "2009": [226, 227, 764], "201": [107, 693], "2010": [116, 148, 149, 226], "2011": [124, 125, 134, 148, 149], "2012": [134, 227, 236, 758, 887, 954], "2013": [53, 104, 114, 134, 703, 866], "2014": [53, 104, 220, 232, 693, 703, 914], "2015": [84, 685, 688, 699, 705], "2016": [134, 699, 705], "2017": 975, "2018": 236, "202": 693, "2020": 236, "2022": 236, "2024": 234, "203": 693, "20309816": 765, "205": 757, "207": 134, "209": [224, 227, 758], "21": [224, 231, 688, 699, 705, 874, 885, 903, 919, 950], "210": 107, "2106": 134, "2107852473": 696, "2113": 134, "2130": 221, "21383822": 692, "215": [220, 221], "217": 107, "21712454": 866, "2186": 765, "219": [221, 224, 757], "22": [100, 103, 231, 236, 666, 688, 881, 919, 1102], "220": 758, "22054469": 695, "2208": 765, "2214": 221, "224": 881, "226": 885, "227": [107, 225], "229": 881, "23": [1, 231, 234, 235, 450, 688, 903, 919, 1039, 1102], "23059566": 702, "23632778": 692, "2364": 765, "237": [106, 119, 144], "238327": 855, "239": 1038, "23e": 234, "24": [0, 221, 231, 666, 884, 914, 919], "24270353": 1, "245": 760, "246": [107, 144, 235], "24714631": 702, "25": [0, 1, 88, 101, 116, 123, 134, 148, 149, 151, 224, 230, 231, 405, 409, 411, 424, 428, 437, 441, 475, 479, 491, 495, 526, 530, 543, 547, 580, 584, 586, 599, 603, 609, 635, 637, 644, 648, 688, 700, 756, 757, 760, 765, 881, 884, 885, 934, 1102], "2500": 885, "253": 760, "255": [53, 871], "256": [137, 881], "257": 137, "25737316": 702, "259": 235, "25th": 688, "26": [114, 221, 230, 688, 759, 764, 866], "260656459": 227, "26118259": 692, "262": 123, "264": [106, 119], "26433692": 1, "26488486": 702, "265": 110, "27": [0, 116, 138, 148, 149, 221, 504, 699, 758], "270": 110, "272": 885, "2761": 765, "278": 116, "28": [0, 134, 231, 881], "28571429": 701, "28865141": 692, "289": 871, "28ecologi": 106, "29": [106, 224, 226, 227], "293463": 693, "29597001": 765, "29672718": 695, "2_": 107, "2a": 232, "2b": 118, "2d": [53, 98, 99, 100, 101, 102, 103, 122, 146, 150, 151, 154, 179, 203, 654, 669, 678, 696, 762, 872, 879], "2e": 234, "2f_2": 110, "2m5p3d1i": [45, 50], "2nd": [832, 923, 1044], "2nf_2": 115, "2x2": [1, 229, 928, 934], "2x3": [910, 911, 917, 918, 920, 921, 923, 929, 935, 936, 939, 941, 942, 944, 949, 950, 952], "3": [1, 3, 13, 14, 15, 18, 19, 46, 47, 50, 51, 52, 53, 65, 70, 82, 83, 85, 88, 91, 92, 94, 95, 98, 102, 106, 107, 115, 116, 119, 126, 134, 138, 144, 148, 149, 166, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 298, 308, 320, 325, 387, 389, 399, 400, 401, 406, 407, 423, 424, 426, 432, 433, 435, 438, 439, 451, 452, 458, 460, 470, 471, 476, 477, 490, 491, 493, 499, 501, 504, 509, 511, 521, 522, 527, 528, 542, 543, 545, 551, 554, 562, 564, 574, 575, 576, 581, 582, 598, 599, 601, 607, 608, 611, 613, 614, 616, 621, 623, 633, 634, 643, 644, 646, 651, 652, 665, 674, 677, 680, 684, 685, 686, 687, 689, 691, 692, 693, 694, 695, 696, 699, 700, 701, 702, 705, 707, 718, 723, 726, 728, 741, 748, 751, 752, 754, 756, 757, 758, 760, 761, 762, 764, 765, 766, 788, 799, 832, 855, 856, 866, 870, 871, 876, 881, 883, 884, 885, 886, 900, 901, 902, 903, 904, 906, 907, 910, 911, 914, 917, 918, 919, 920, 921, 923, 924, 926, 928, 929, 931, 934, 935, 936, 937, 939, 941, 942, 943, 944, 945, 946, 947, 949, 950, 952, 954, 970, 980, 985, 986, 993, 994, 995, 1018, 1020, 1024, 1026, 1028, 1029, 1031, 1032, 1039, 1044, 1099, 1102, 1105, 1107], "30": [0, 221, 227, 228, 231, 233, 884, 885, 924, 1009], "3021": [382, 453, 504, 557, 616], "30216948": 689, "3030": [382, 453, 504, 557, 616], "30409883": 691, "30870431": 1, "30927835": 1, "31": 221, "312": 235, "314": 224, "32": [231, 759], "32495488": 689, "32630": 227, "329": 220, "33": [83, 116, 148, 149, 226, 406, 476, 527, 581, 693, 757, 760, 881, 884, 1102], "330": 220, "332": 881, "33333333333333331": 1, "335928": 236, "34": [227, 233, 975], "34180297": 695, "343": 227, "344": 227, "3447015": 1039, "345": 666, "34891526": 689, "34989": 225, "35": [1, 224, 226, 227, 233, 685, 885], "3519": 765, "352": 666, "354": 765, "355": [224, 765], "356": 765, "36": [126, 231, 234, 699, 705, 881], "363": [121, 138], "36463": 235, "36514837": 703, "37": [148, 235], "3716": 765, "375": [121, 138, 697], "379": 138, "379593": 1064, "38": [0, 220, 226, 231, 881], "38629436": 686, "3899": 224, "39": [137, 225, 231, 703], "3937": 108, "3e": [220, 221, 881], "3f": 764, "3k1v_a": 227, "3rd": [758, 832, 877, 1044, 1107], "3x": 1009, "3x2": 928, "3x3": [706, 758, 761, 762], "4": [0, 1, 3, 14, 18, 46, 51, 65, 82, 85, 86, 90, 92, 105, 106, 107, 114, 116, 119, 134, 136, 139, 148, 149, 224, 225, 227, 230, 231, 232, 234, 235, 236, 298, 308, 320, 325, 382, 389, 394, 399, 400, 409, 419, 423, 433, 435, 438, 439, 441, 452, 460, 465, 470, 479, 487, 490, 501, 511, 516, 521, 530, 538, 542, 554, 564, 569, 574, 575, 584, 594, 598, 608, 611, 613, 614, 616, 623, 628, 633, 637, 640, 643, 652, 654, 665, 666, 674, 680, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 701, 702, 703, 705, 718, 723, 728, 741, 748, 752, 754, 756, 758, 764, 855, 870, 871, 878, 881, 886, 900, 901, 902, 904, 907, 908, 914, 918, 919, 928, 937, 941, 942, 946, 947, 970, 980, 985, 986, 993, 994, 995, 998, 1018, 1026, 1028, 1029, 1031, 1032, 1038, 1039, 1102, 1105], "40": [1, 106, 119, 225, 234, 236, 703, 883, 885, 914, 919], "400": 757, "402": 116, "403": [220, 221], "40824829": [703, 704], "41": [225, 231, 919], "410": [220, 221], "4140": 765, "4148": [112, 122, 139, 141], "42": [1, 92, 117, 225, 231, 232, 234, 382, 405, 475, 526, 557, 580, 635, 757, 760, 910, 911, 917, 918, 919, 920, 921, 923, 929, 935, 936, 937, 939, 944, 949, 950, 952], "423": 138, "42512039": 1, "426": 885, "427": 121, "42857143": 701, "43": [92, 130, 231, 919, 939, 944, 1038], "431": 134, "432": 121, "4375": 697, "44": [1, 135, 760, 919, 1038], "443": 98, "444": 134, "45": [1, 231, 234, 885], "450": 757, "456": 870, "45995501": 866, "46": [231, 759, 885, 923, 939, 944], "4603377592": 228, "4603378712": 228, "4604421736": 228, "462339": 693, "466911": 855, "467481": 693, "46774194": 1, "4693": 225, "47": [231, 881, 944], "479": 145, "48": [98, 127], "480232": 693, "484": 881, "487": 145, "49": [0, 228, 231], "4hh": 224, "4x4": [756, 757, 1026], "5": [0, 1, 3, 14, 15, 18, 19, 46, 47, 50, 51, 52, 53, 83, 92, 99, 102, 104, 106, 111, 116, 118, 134, 148, 149, 151, 154, 219, 221, 224, 225, 226, 227, 230, 232, 235, 236, 298, 387, 389, 399, 400, 401, 407, 409, 411, 412, 418, 424, 430, 433, 435, 451, 458, 460, 470, 471, 477, 479, 486, 491, 497, 501, 509, 511, 521, 522, 528, 530, 537, 543, 549, 554, 562, 564, 574, 575, 576, 582, 584, 586, 587, 593, 599, 605, 608, 611, 621, 623, 633, 634, 637, 644, 652, 665, 666, 680, 683, 688, 693, 697, 700, 706, 718, 728, 741, 752, 754, 756, 757, 760, 761, 764, 855, 871, 881, 884, 885, 886, 890, 900, 901, 902, 903, 904, 914, 919, 927, 928, 937, 946, 950, 954, 970, 975, 979, 980, 982, 985, 986, 993, 994, 995, 998, 1018, 1020, 1021, 1026, 1028, 1029, 1038, 1039, 1042, 1105], "50": [1, 100, 103, 225, 228, 231, 400, 470, 521, 575, 633, 688, 693, 765, 866, 884, 885, 911, 1102], "500": [884, 885], "5007512": 866, "50th": [225, 688], "52": [114, 139, 145, 231], "52199973": 765, "528": 884, "528243": 693, "53": [98, 231, 978], "530": 757, "533": 881, "533729": 693, "5338": 116, "54": [120, 121, 149], "547": 136, "54772256": 703, "55": [231, 403, 473, 524, 578, 760, 765, 881, 1039], "55152525": 235, "555": 120, "556061": 693, "5565": 221, "557": 120, "5587": 221, "56": [134, 403, 473, 524, 578], "560": 128, "562": 136, "5671": 221, "57": [221, 231, 871, 924], "572": 881, "577": [114, 139], "58": [117, 231, 881], "581": 224, "586": [114, 139], "59": 226, "5917809": 691, "594590": 693, "5990": 235, "5996": 235, "5e": 234, "6": [1, 3, 13, 14, 15, 18, 19, 46, 47, 51, 52, 85, 106, 110, 111, 116, 132, 134, 137, 138, 148, 149, 221, 224, 225, 226, 227, 234, 235, 236, 399, 400, 408, 409, 432, 433, 435, 453, 470, 478, 479, 499, 501, 521, 529, 530, 551, 554, 574, 575, 583, 584, 607, 608, 611, 633, 636, 637, 651, 652, 680, 688, 690, 695, 698, 699, 701, 728, 752, 754, 758, 760, 761, 764, 855, 881, 900, 903, 904, 914, 919, 928, 934, 937, 970, 975, 981, 984, 985, 986, 994, 995, 998, 1017, 1018, 1019, 1026, 1028, 1029, 1033, 1034, 1035, 1036, 1038, 1102], "60": [222, 223, 224, 228, 765, 884, 919], "601": 881, "601277": 693, "6018555": 758, "602": 881, "607": 765, "609": 224, "61": [231, 760, 885, 919], "617": 881, "619": 235, "62": [116, 148, 149, 222, 223, 226, 760, 919, 1102], "6212": 235, "6216": 765, "6234": 235, "627677": 693, "63": [221, 231, 919], "634": 765, "64": [1, 151, 226, 234, 441, 442, 919, 1032], "641": 235, "645": 1018, "646": 885, "646e": 881, "65": 765, "65463348": 866, "66": [227, 231, 406, 476, 527, 581, 760, 1102], "664": 881, "6666666666666667": 1105, "668": 1018, "67": [227, 231, 399, 406, 433, 476, 527, 574, 581, 608, 756, 760, 871, 881, 1102], "68": [227, 765, 884], "6821": 221, "68235294": 1, "68339802": 694, "688": [112, 122, 139, 141], "69": 231, "6913": 765, "692": 116, "6928": 221, "69314718": 686, "694": 116, "6e": 221, "6x6": [1, 760], "7": [1, 101, 111, 134, 151, 225, 226, 227, 235, 236, 298, 308, 320, 325, 382, 389, 400, 451, 460, 470, 511, 521, 557, 564, 575, 623, 633, 680, 693, 728, 754, 757, 758, 760, 761, 764, 855, 881, 887, 900, 903, 904, 937, 954, 980, 981, 994, 1017, 1018, 1020, 1028, 1029, 1034, 1039, 1043, 1102], "70": 231, "702656": 693, "70710678": [703, 704], "707221": 693, "71": [126, 148, 231, 235], "714286": 757, "71597633": 1, "72": 134, "73": [148, 149], "74": 231, "75": [1, 88, 116, 123, 148, 149, 426, 493, 545, 601, 646, 688, 706, 757, 760, 934, 937, 1032], "750792": 693, "7559": 758, "755929": 761, "75th": 688, "76": [129, 134, 231], "77": [129, 760], "7715": 765, "771517": 757, "77549923": 1, "7768362": 694, "779": 881, "78": [231, 1032], "78142077": 1, "783": 881, "78787879": 1, "788": 881, "79": [225, 228, 231], "793": 130, "79451346": 691, "8": [0, 1, 13, 104, 220, 221, 226, 227, 232, 235, 236, 249, 325, 400, 409, 432, 437, 453, 470, 479, 499, 521, 530, 551, 575, 584, 607, 609, 633, 637, 651, 680, 699, 705, 728, 754, 757, 764, 855, 881, 885, 886, 900, 903, 904, 908, 937, 985, 994, 1029, 1039, 1102, 1105], "80": [107, 225, 855, 884, 885, 919, 975, 1032, 1107], "803": 130, "80332382": 866, "806": 885, "81": 919, "810": 757, "811": 221, "81521739": 1, "81649658": [703, 704], "818": 123, "82": [221, 222, 235, 919], "820": 123, "8228": 148, "8235": 148, "824": 885, "82857143": 1, "82967033": 1, "83": [219, 919, 954], "8304": 765, "832": 764, "836": 881, "838": 881, "84": 919, "844": 881, "8468": 221, "848": 881, "85": [224, 231, 885, 1032], "8547619": 1, "8552": 221, "857142857143": 934, "85714286": 1, "86": [382, 557], "86111111": 1, "86666667": 1, "86813187": 1, "87": [107, 231], "87709497": 1, "87777778": 1, "88": [235, 760, 884], "884420": 914, "884498": 693, "89": [100, 103, 227, 666], "89285714": 1, "8e": 221, "9": [1, 220, 221, 222, 225, 228, 231, 234, 235, 277, 298, 308, 382, 403, 407, 453, 473, 477, 504, 524, 528, 557, 578, 582, 616, 688, 693, 764, 765, 855, 870, 871, 873, 874, 876, 877, 878, 881, 900, 903, 904, 982, 985, 994, 1026, 1029, 1038, 1039, 1102], "90": [84, 228, 693, 1107], "900": 323, "905": 115, "909": 221, "912": 115, "91769271": 866, "92": 757, "9223489": 235, "922404392093": 1, "9230769230": 684, "928": 881, "93": 226, "932": 881, "939336": 1, "94": [221, 231], "95": [111, 115, 116, 124, 226, 231, 975], "951": 1018, "952": 885, "95224719": 1, "956": 881, "96": [111, 228], "97": [231, 693], "978387": 693, "984": 881, "98435423": 1, "98796148": 1, "99": [220, 221, 224, 231, 756, 760, 764, 937], "991987": 693, "996": [881, 885], "999": [1, 616, 756, 758, 759, 760, 761, 764], "999887756453524252": 235, "9e": 220, "9f": 980, "A": [1, 50, 53, 65, 86, 88, 91, 92, 93, 96, 98, 100, 103, 107, 110, 115, 116, 117, 118, 120, 121, 123, 129, 134, 136, 138, 148, 149, 151, 177, 190, 215, 216, 217, 218, 220, 222, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 262, 266, 267, 272, 279, 280, 298, 319, 323, 324, 345, 363, 378, 382, 403, 409, 415, 431, 435, 442, 448, 453, 473, 479, 483, 498, 501, 504, 524, 530, 534, 550, 554, 557, 578, 584, 590, 606, 611, 616, 637, 650, 652, 654, 665, 666, 670, 672, 674, 675, 679, 680, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 718, 721, 723, 724, 727, 728, 730, 741, 745, 748, 749, 753, 754, 757, 758, 759, 760, 762, 764, 777, 799, 821, 865, 866, 867, 868, 870, 871, 876, 878, 883, 884, 885, 886, 890, 901, 902, 903, 907, 912, 913, 914, 915, 923, 930, 936, 938, 939, 940, 941, 942, 943, 946, 947, 948, 950, 955, 970, 975, 978, 980, 981, 984, 985, 986, 990, 991, 992, 995, 997, 1005, 1013, 1015, 1017, 1018, 1019, 1024, 1026, 1033, 1034, 1035, 1038, 1088, 1100, 1105, 1107], "AS": 235, "AT": [83, 225, 226, 232], "And": [228, 382, 504, 700, 1102], "As": [1, 224, 227, 230, 234, 616, 676, 725, 750, 758, 760, 871, 988, 1100, 1107], "At": [234, 237, 903], "Be": 616, "But": 1019, "By": [92, 123, 134, 146, 150, 225, 227, 234, 688, 760, 875, 876, 879, 913, 925, 1019, 1026, 1039, 1066], "For": [1, 65, 84, 93, 97, 104, 134, 177, 178, 190, 191, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 308, 323, 324, 325, 326, 363, 378, 381, 382, 431, 440, 498, 503, 504, 550, 556, 557, 606, 615, 616, 650, 653, 666, 675, 681, 688, 693, 724, 729, 749, 755, 756, 757, 758, 759, 760, 762, 764, 766, 832, 866, 867, 869, 870, 871, 881, 883, 884, 885, 887, 903, 908, 909, 930, 938, 943, 953, 954, 975, 1013, 1037, 1038, 1040, 1041, 1100, 1102, 1105], "IF": 930, "IN": 235, "If": [1, 13, 15, 19, 45, 47, 50, 52, 53, 65, 82, 84, 85, 88, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 104, 107, 110, 111, 112, 114, 116, 117, 118, 122, 124, 130, 134, 138, 139, 140, 146, 148, 149, 150, 151, 154, 166, 177, 190, 214, 215, 216, 217, 220, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 248, 249, 250, 263, 265, 269, 270, 273, 274, 277, 290, 291, 292, 298, 307, 311, 324, 325, 337, 338, 339, 355, 356, 357, 363, 372, 373, 376, 377, 378, 382, 384, 389, 399, 400, 401, 403, 405, 407, 409, 412, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 435, 436, 451, 453, 455, 460, 470, 471, 473, 475, 477, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 501, 502, 504, 506, 511, 521, 522, 524, 526, 528, 530, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 554, 555, 557, 559, 564, 574, 575, 576, 578, 580, 582, 584, 587, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 608, 611, 612, 613, 614, 616, 618, 623, 633, 634, 635, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 658, 665, 666, 668, 669, 670, 673, 674, 675, 680, 683, 684, 688, 690, 693, 694, 695, 697, 698, 704, 707, 711, 718, 720, 721, 722, 723, 724, 728, 734, 741, 744, 745, 746, 747, 748, 749, 754, 756, 757, 758, 759, 760, 761, 762, 764, 799, 810, 843, 854, 865, 866, 867, 868, 870, 871, 872, 875, 876, 879, 881, 882, 883, 884, 885, 886, 890, 898, 900, 903, 904, 906, 907, 908, 911, 912, 913, 914, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 936, 937, 938, 939, 940, 943, 944, 945, 946, 947, 948, 949, 950, 952, 975, 977, 978, 982, 985, 988, 989, 993, 998, 999, 1002, 1004, 1007, 1013, 1017, 1018, 1019, 1020, 1021, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1042, 1043, 1044, 1045], "In": [1, 3, 53, 84, 116, 134, 136, 148, 149, 151, 225, 226, 227, 228, 230, 232, 236, 363, 382, 412, 451, 504, 557, 587, 654, 685, 688, 693, 706, 757, 758, 764, 854, 870, 871, 876, 881, 885, 900, 955, 975, 988, 1033, 1038, 1100, 1102, 1105, 1107], "It": [1, 3, 53, 105, 106, 112, 116, 117, 119, 121, 122, 123, 130, 134, 136, 138, 139, 143, 145, 219, 220, 222, 225, 226, 227, 228, 230, 232, 234, 236, 249, 298, 308, 311, 319, 320, 322, 323, 325, 382, 418, 430, 486, 497, 504, 537, 549, 557, 593, 605, 609, 688, 691, 693, 697, 706, 747, 758, 759, 764, 787, 788, 820, 831, 843, 870, 871, 875, 878, 881, 884, 885, 911, 950, 955, 1036, 1042, 1064, 1088, 1102], "Its": [16, 48, 878], "NOT": [53, 277], "No": [66, 111, 220, 221, 224, 233, 236, 308, 398, 469, 520, 573, 632, 758], "Not": [226, 382, 435, 501, 554, 611, 652, 760], "ONE": [53, 104], "OR": 66, "Of": 227, "On": [136, 876], "One": [116, 232, 237, 377, 693, 742, 1039], "That": [135, 141, 230, 425, 492, 544, 600, 645, 981], "The": [0, 1, 3, 13, 14, 15, 16, 44, 45, 46, 47, 48, 50, 53, 54, 82, 83, 84, 85, 86, 89, 90, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 118, 119, 121, 122, 123, 130, 134, 135, 137, 138, 139, 141, 144, 146, 148, 149, 150, 151, 152, 153, 154, 166, 177, 178, 179, 190, 191, 192, 203, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 248, 249, 250, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 277, 278, 290, 295, 296, 297, 298, 299, 308, 309, 310, 319, 320, 321, 322, 323, 324, 326, 327, 337, 342, 343, 344, 355, 360, 361, 362, 363, 372, 373, 375, 376, 377, 378, 379, 380, 381, 384, 387, 389, 394, 399, 400, 401, 403, 405, 409, 417, 419, 420, 422, 423, 424, 431, 433, 435, 439, 440, 441, 450, 451, 452, 455, 458, 460, 465, 470, 471, 473, 475, 479, 485, 487, 488, 489, 490, 491, 498, 501, 503, 506, 509, 511, 516, 521, 522, 524, 526, 530, 536, 538, 540, 541, 542, 543, 550, 554, 556, 557, 559, 562, 564, 569, 574, 575, 576, 578, 580, 584, 592, 594, 595, 597, 598, 599, 606, 608, 611, 614, 615, 616, 618, 621, 623, 628, 633, 634, 635, 637, 639, 640, 641, 642, 643, 644, 650, 652, 653, 654, 658, 665, 670, 675, 680, 681, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 700, 702, 703, 704, 707, 711, 718, 721, 724, 728, 729, 730, 734, 741, 742, 745, 747, 749, 752, 754, 755, 756, 757, 758, 759, 760, 762, 764, 765, 777, 799, 810, 821, 843, 854, 856, 867, 869, 870, 871, 875, 876, 877, 878, 881, 882, 883, 884, 885, 887, 890, 898, 899, 900, 901, 902, 903, 904, 907, 910, 912, 913, 915, 916, 917, 918, 919, 920, 923, 925, 926, 927, 928, 929, 930, 931, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 947, 949, 950, 951, 953, 954, 970, 971, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 988, 989, 991, 992, 993, 994, 995, 997, 1002, 1004, 1005, 1008, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1028, 1033, 1034, 1036, 1037, 1038, 1039, 1042, 1045, 1063, 1065, 1066, 1100, 1102, 1105, 1107], "Then": [1, 3, 688, 700, 765, 855], "There": [1, 92, 117, 130, 221, 227, 230, 233, 406, 476, 527, 581, 730, 876, 884, 885, 903, 928, 1033, 1036, 1100, 1105, 1107], "These": [0, 1, 83, 89, 90, 106, 116, 148, 149, 227, 230, 234, 235, 236, 327, 417, 419, 485, 487, 536, 538, 592, 594, 639, 640, 682, 761, 763, 856, 877, 883, 890, 928], "To": [1, 72, 116, 148, 149, 225, 226, 227, 230, 233, 234, 237, 277, 363, 382, 504, 557, 688, 693, 730, 752, 756, 758, 760, 764, 881, 975, 1033, 1100, 1107], "Will": [88, 268, 271, 275, 277, 295, 342, 360, 379, 667, 679, 719, 727, 743, 753, 856, 886], "With": [220, 685, 697], "_": [107, 222, 225, 226, 230, 235, 320, 387, 458, 509, 562, 621, 706, 758, 935], "_1": 230, "__": 227, "______": 868, "____________1______________2_________": 235, "________________": 235, "____________________": 235, "__copy__": [69, 310], "__deepcopy__": [68, 309], "__eq__": [79, 287, 317, 334, 352, 370, 663, 716, 739], "__init__": [237, 248, 250], "__iter__": 91, "__locat": 227, "__ne__": [281, 328, 346, 364], "__reversed__": 91, "_block_comput": 151, "_ci": 106, "_except": 232, "_interval_tre": 308, "_io": [219, 223], "_is_stale_tre": 308, "_leaf_index": 997, "_myformat_sniff": 237, "_myformat_to_some_skbio_class": 237, "_not_": 903, "_rebuild_tre": 308, "_setup_debug_trac": 1076, "_some_skbio_class_to_myformat": 237, "_tree": 1038, "aT": 226, "a_1": 230, "aa": [91, 225, 227, 232, 441], "aaa": [235, 422, 489, 541, 597, 642], "aaaaaaaaa": 224, "aaaaaaaaaa": 224, "aaaaaaattttttt": 1107, "aaaaaactctctaaactcactaaggctctctacccctcttcagagaagtcga": 0, "aaaaaccgat": 224, "aaaataaata": 224, "aaacaaacca": 224, "aaaccattgc": [225, 232], "aaacccttgc": [225, 232], "aaacccttgccg": 225, "aaacccttgccggtacgcttaaaccattgccggtacgcttaa": 225, "aaacccttgccgttacgcttaaaccgaggccgggacactcat": 225, "aaaccgaggc": [225, 232], "aaagataggc": 224, "aaatatggat": 224, "aaatcctatg": 224, "aac": 233, "aacaaatgca": 224, "aacaacagga": 224, "aacaccaaacttctccacc": 226, "aacaccaaacttctccaccacgtgagctacaaaag": 226, "aaccttatca": 224, "aacgaaggcg": 224, "aactttgtag": 224, "aagaactttc": 224, "aagaggttac": 224, "aagcctggtg": 224, "aagccttggc": 225, "aagccttggcagtgcagggtgagccgtgg": 225, "aagccttggcagtgcagggtgagccgtggccgggcacggtat": 225, "aagctngggc": [225, 232], "aagctngggcatttcagggtgagcccgggcaatacagggtat": 225, "aagga": [389, 460, 511, 564, 623], "aaggaatcaa": 224, "aaggaatttg": 224, "aagtaa": [399, 574], "aagtatttgg": 224, "aagtcttaga": 224, "aagtcttttt": 224, "aagttgttag": 224, "aagucuuuuu": 224, "aata": 233, "aataaac": 233, "aataagtgca": 224, "aatacagggt": [225, 232], "aatataccggttataa": [408, 478, 529, 583, 636], "aatatggatt": 224, "aatgaa": [399, 421, 433, 574, 596, 608], "aatgtt": [421, 596], "aatt": 903, "aattaaataa": 224, "aattctggat": 224, "aattg": 1107, "aattgccggac": 1107, "aattgg": 854, "aauauggauu": 224, "ab": [226, 453], "ab07acbb1e496801937adfa772424bf7": 1064, "ababacac": 453, "abbrevi": [236, 856], "abc": [222, 387, 453, 458, 509, 562, 621], "abcd": 1039, "abcdef": 1, "abil": 230, "abl": [65, 85, 151, 382, 504, 557, 616, 688, 884, 985], "about": [1, 93, 97, 130, 177, 178, 190, 191, 222, 225, 226, 230, 234, 235, 237, 280, 308, 324, 326, 327, 345, 363, 378, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 683, 724, 729, 749, 755, 855, 867, 869, 878, 884, 885, 903, 933, 938, 953, 1013, 1037, 1040, 1041, 1101, 1102], "abov": [0, 1, 3, 92, 112, 225, 227, 231, 232, 233, 234, 235, 237, 248, 250, 382, 504, 557, 616, 706, 756, 758, 760, 764, 1017, 1019, 1102], "absenc": [111, 885, 935], "absent": [435, 501, 554, 611, 652, 876], "absolut": [685, 693, 758, 943, 1063], "abstract": [327, 453], "abund": [1, 106, 107, 108, 116, 118, 121, 123, 130, 134, 144, 146, 148, 149, 150, 151, 154, 219, 688, 693, 855, 870, 871, 877, 878, 885, 937, 943], "abx": 883, "ac": [66, 67, 68, 69, 70, 75, 77, 80, 83, 85, 88, 92, 94, 95, 98, 101, 224, 226, 227, 235, 298, 410, 480, 531, 585, 1102], "aca": [423, 424, 490, 491, 542, 543, 598, 599, 643, 644], "acaatcaaat": 224, "acac": [414, 423, 482, 490, 533, 542, 589, 598, 643], "acacatttatta": [424, 491, 543, 599, 644], "acacgacgtt": [415, 420, 423, 483, 488, 490, 534, 540, 542, 590, 595, 598, 641, 643], "acad": [100, 103], "academ": 109, "academi": 666, "acagaattga": 224, "acaggttggc": [225, 232], "acata": 226, "acatggcaat": 224, "acatgggata": 224, "acc": [0, 221, 1102], "accaatattt": 224, "accaatttga": 224, "acccc": 0, "acceler": 886, "accept": [1, 65, 94, 151, 432, 438, 439, 499, 551, 607, 613, 614, 651, 666, 682, 688, 758, 762, 764, 881, 884, 885, 990, 1021, 1029, 1032, 1088], "acces": 220, "access": [20, 89, 90, 218, 224, 225, 227, 236, 363, 417, 419, 442, 448, 485, 487, 536, 538, 592, 594, 639, 640, 706, 1039, 1045], "accgaat": 382, "accgaau": 557, "accgggta": 1102, "accggttggc": 225, "accggttggccgttcagggtacaggttggccgttcagggtaa": 225, "accgttcg": 235, "accgttgta": [222, 232], "accguuaguc": 1102, "accident": 1040, "accommod": 298, "accompani": [225, 707, 1041], "accomplish": [1, 685, 1100], "accord": [112, 116, 382, 504, 557, 875, 879, 941, 942], "accordingli": [1034, 1036], "account": [112, 166, 436, 502, 555, 612, 799, 870, 878, 885, 1105], "accumul": [126, 129, 970], "accumulate_to_ancestor": 986, "accur": [112, 118, 124, 125], "accuraci": [760, 876], "acdefghikl": [166, 179], "acdfnasanftacgnpnrtesl": [422, 489, 541, 597, 642], "acg": [66, 67, 68, 69, 70, 75, 77, 80, 88, 91, 92, 94, 95, 233, 235, 420, 423, 488, 490, 540, 542, 595, 598, 641, 643], "acga": [82, 85, 387, 396, 458, 467, 509, 518, 562, 571, 621, 630], "acgaactatt": 224, "acggggaggcggag": [407, 477, 528, 582], "acgggu": 1102, "acgt": [65, 82, 85, 86, 89, 90, 96, 383, 387, 396, 400, 411, 412, 417, 419, 421, 425, 454, 458, 467, 470, 485, 487, 492, 505, 509, 518, 521, 536, 538, 544, 558, 562, 571, 575, 586, 587, 592, 594, 596, 600, 616, 617, 621, 630, 633, 639, 640, 645, 654, 672], "acgta": 233, "acgtac": 233, "acgtacgt": [411, 586], "acgtgagctacaaaag": 226, "acgtgccta": 0, "acgtgcctaggtacgcaag": 0, "acgtggaa": [400, 470, 521, 575, 633], "acgtn": [435, 501, 554, 611, 652], "acgtu": 105, "achiev": [134, 1017, 1018, 1034, 1102], "acid": [98, 100, 103, 224, 225, 226, 229, 232, 236, 382, 435, 441, 451, 453, 501, 504, 554, 557, 611, 616, 652, 654, 666], "acquir": 884, "across": [16, 48, 88, 134, 225, 226, 232, 308, 377, 688, 693, 758, 884, 904, 1019, 1038], "act": [0, 92, 248, 249, 250], "actaaggctc": 0, "actaaggctcctaacccccttttctcaga": 0, "actaaggctctct": 0, "actaaggctctctacccctctcagaga": 0, "actacattcg": 224, "actatacgga": 224, "actcat": 225, "action": 327, "activ": 1099, "acttagtt": [411, 586], "actual": [135, 141, 234, 237, 268, 758], "acwgn": [402, 404, 430, 472, 474, 497, 523, 525, 549, 577, 579, 605], "ad": [53, 98, 99, 100, 101, 102, 103, 225, 235, 319, 616, 688, 693, 871, 874, 903, 928, 981, 998, 1017, 1018, 1019, 1033, 1034, 1036, 1065, 1105], "adapt": 1038, "adata": 945, "add": [1, 99, 102, 234, 235, 237, 261, 298, 308, 320, 322, 387, 458, 509, 562, 616, 621, 690, 697, 698, 700, 701, 702, 898, 899, 903, 923, 944, 972, 985, 987], "add_format": [248, 250], "addit": [1, 104, 105, 116, 147, 148, 149, 153, 224, 225, 226, 227, 228, 232, 233, 234, 295, 342, 360, 363, 379, 382, 504, 557, 654, 685, 686, 687, 688, 706, 730, 955, 976, 988, 989, 1038, 1065, 1100], "addition": [1, 219, 230, 277, 308, 942, 1033, 1102, 1105], "additon": 225, "address": [688, 1100], "adenin": [382, 557], "adequ": 884, "adher": 234, "adiv_faith_pd": 1, "adiv_sob": 1, "adjac": [422, 489, 541, 597, 642, 912], "adjust": 134, "adoni": 759, "adopt": [134, 435, 501, 554, 611, 652], "advanc": 1, "advantag": [134, 730, 1065], "advis": [148, 149, 154], "ae000111": 221, "ae000171": 221, "ae000174": 221, "ae000394": 221, "ae000425": 221, "af031394": 221, "af035635": 235, "af178031": 221, "af178032": 221, "af178033": 221, "affect": [225, 230, 441, 442, 448, 616, 756, 760, 1033], "aforement": 236, "after": [53, 82, 85, 98, 99, 100, 225, 226, 234, 235, 236, 237, 311, 322, 377, 693, 699, 700, 757, 758, 761, 764, 870, 885, 1010, 1012, 1030], "ag": [65, 82, 85, 88, 706, 883, 884], "agaagacc": [409, 479, 530, 584, 637], "agaagctatg": 224, "agaagctctt": 224, "agaagcuaug": 224, "agacatcacg": 224, "agagcatgcg": 224, "agaggttcta": 227, "agagguucua": 227, "agagttgaag": 232, "agagttgaaggtatct": [222, 232], "again": [1, 225, 226, 363, 703, 934, 1039], "against": [70, 79, 98, 101, 226, 299, 305, 311, 317, 387, 396, 442, 448, 458, 467, 509, 518, 562, 571, 621, 630, 688, 764, 901, 902, 978], "agatataaag": 224, "agatcttttg": 224, "agatgagtat": 224, "agctttctgc": 224, "agg": 1102, "aggaccttat": 224, "aggctc": 0, "aggctcccttctacccctctcagaga": 0, "agggaaagtt": 224, "agggctggct": 224, "agggga": 1102, "agggta": 683, "aggreg": 1107, "aggtacccta": 224, "aggtgcagta": 224, "agre": [269, 273], "agtactctaa": 224, "agtgcagggt": [225, 232], "aguauucugccacuguaagaa": 451, "aguc": [405, 426, 428, 475, 493, 495, 526, 545, 547, 580, 601, 603, 635, 646, 648], "ahead": 1107, "aiacaqkm": 235, "aim": 855, "ainsworth": 757, "aitchison": [685, 686, 687, 691, 692, 694, 695, 703], "aitchson": 696, "al": [688, 693, 764, 887, 954], "ala": 504, "alanin": [84, 504], "aldex2": 693, "alexandro": 975, "algorithm": [98, 101, 227, 756, 757, 758, 760, 765, 766, 777, 788, 799, 810, 821, 832, 843, 870, 871, 878, 978, 1039, 1040], "alia": [20, 114, 116, 131, 132, 134, 140, 148, 149, 228, 676, 688, 698, 725, 750, 1002, 1004], "alic": 616, "alig": 33, "align": [220, 221, 225, 226, 298, 308, 616, 654, 900, 901, 902, 1099, 1100, 1102], "aligned_query_sequ": 0, "aligned_target_sequ": 0, "alignmentstructur": 54, "alignpath": [43, 46, 47, 48, 51, 52], "all": [1, 53, 65, 66, 83, 84, 89, 90, 92, 98, 99, 100, 105, 107, 116, 117, 118, 130, 134, 135, 141, 144, 146, 148, 149, 150, 151, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 262, 272, 291, 298, 308, 311, 320, 322, 323, 338, 356, 375, 377, 382, 400, 403, 406, 409, 417, 419, 422, 432, 436, 451, 470, 473, 476, 479, 485, 487, 489, 499, 502, 504, 521, 524, 527, 530, 536, 538, 541, 551, 555, 557, 575, 578, 581, 584, 592, 594, 597, 607, 612, 616, 633, 637, 639, 640, 642, 651, 654, 665, 666, 670, 672, 680, 688, 690, 693, 697, 698, 700, 701, 702, 703, 706, 718, 721, 728, 741, 745, 752, 754, 756, 757, 758, 759, 760, 761, 788, 799, 843, 854, 855, 866, 868, 875, 876, 884, 885, 886, 903, 904, 907, 911, 944, 952, 955, 971, 974, 975, 976, 981, 985, 988, 989, 990, 1002, 1004, 1005, 1008, 1015, 1021, 1022, 1024, 1026, 1033, 1034, 1036, 1038, 1065, 1066, 1105], "all_char": 230, "allow": [220, 225, 226, 230, 232, 233, 234, 237, 248, 250, 277, 308, 382, 400, 409, 470, 479, 504, 521, 530, 557, 575, 584, 633, 637, 658, 665, 685, 711, 718, 734, 741, 756, 757, 759, 760, 761, 765, 876, 887, 903, 954, 985, 1029, 1066, 1107], "allow_empti": 1029, "allow_overlap": [665, 718, 741], "allvltkt": 235, "almost": 1042, "alon": [230, 757], "along": [229, 866, 875, 876, 920, 941, 952], "alpha": [146, 152, 688, 881, 882, 886], "alpha_divers": [1, 106, 116, 134, 150, 152], "alpha_pwr": [881, 884, 885], "alphabet": [0, 95, 105, 152, 153, 220, 225, 382, 435, 441, 453, 501, 504, 554, 557, 611, 616, 652, 654, 666, 669, 672, 683, 1102], "alphanumer": 234, "alr": 687, "alreadi": [230, 235, 237, 248, 249, 250, 616, 707, 758, 1017, 1019, 1033], "also": [0, 1, 83, 84, 112, 116, 139, 147, 148, 149, 150, 179, 203, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 308, 363, 412, 422, 432, 435, 451, 489, 499, 501, 541, 551, 554, 587, 597, 607, 611, 616, 642, 651, 652, 654, 688, 703, 704, 706, 756, 757, 758, 760, 764, 855, 871, 878, 881, 884, 885, 908, 913, 925, 1034, 1042, 1088, 1100, 1102, 1107], "alter": 1041, "altern": [94, 114, 139, 236, 237, 434, 451, 500, 553, 610, 670, 685, 699, 705, 721, 745, 758, 760, 761, 764, 876, 881, 993, 1021], "although": [134, 764, 884, 904, 975], "altschul": [220, 221], "alwai": [1, 53, 224, 227, 230, 232, 234, 249, 277, 295, 298, 319, 342, 360, 363, 377, 379, 451, 928, 985, 998, 1017, 1018, 1019, 1045, 1107], "amar": 227, "ambigu": [270, 274], "amen": 686, "american": [107, 1018], "amino": [98, 100, 103, 224, 225, 229, 382, 435, 441, 451, 501, 504, 554, 611, 652, 654, 666], "amino_acid": [441, 442, 448], "among": [1, 112, 134, 215, 227, 680, 728, 754, 766, 871, 878, 1103], "amount": [761, 955, 1107], "amplicon": [1, 900], "amsterdam": [855, 870, 871, 878], "an": [0, 1, 3, 13, 14, 15, 16, 17, 18, 19, 20, 46, 47, 48, 49, 51, 52, 53, 65, 67, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 97, 98, 99, 100, 104, 114, 116, 117, 119, 127, 130, 131, 132, 136, 137, 140, 145, 146, 148, 149, 150, 154, 178, 191, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 248, 249, 250, 263, 265, 266, 267, 269, 271, 273, 275, 277, 278, 292, 293, 298, 308, 319, 320, 322, 323, 325, 326, 339, 340, 357, 358, 363, 377, 381, 389, 400, 407, 416, 417, 419, 426, 428, 432, 435, 440, 441, 451, 453, 460, 470, 477, 484, 485, 487, 493, 495, 499, 501, 503, 511, 521, 528, 535, 536, 538, 545, 547, 551, 554, 556, 557, 564, 575, 582, 591, 592, 594, 601, 603, 607, 611, 615, 616, 623, 633, 638, 639, 640, 646, 648, 651, 652, 653, 654, 658, 665, 668, 670, 672, 676, 680, 681, 688, 691, 692, 694, 695, 698, 700, 703, 704, 706, 711, 718, 720, 721, 725, 728, 729, 734, 741, 742, 744, 745, 750, 754, 755, 756, 758, 759, 760, 764, 776, 798, 809, 821, 842, 853, 854, 855, 865, 869, 875, 876, 881, 883, 884, 885, 886, 887, 890, 898, 899, 900, 906, 907, 910, 911, 912, 913, 918, 920, 921, 923, 926, 927, 928, 929, 931, 933, 934, 944, 947, 950, 951, 952, 953, 954, 970, 973, 975, 977, 981, 983, 984, 988, 991, 992, 1002, 1004, 1007, 1017, 1018, 1019, 1021, 1026, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1045, 1046, 1049, 1056, 1062, 1063, 1064, 1066, 1088, 1100, 1102, 1105, 1107], "analog": 134, "analogu": 760, "analys": [116, 148, 149, 756, 1103], "analysi": [1, 116, 130, 148, 149, 225, 232, 685, 686, 688, 693, 703, 756, 759, 760, 765, 766, 787, 788, 820, 831, 832, 843, 866, 870, 871, 876, 877, 878, 881, 884, 885], "analyt": 117, "analyz": [1, 685, 871, 884], "ancacwwgacgtt": [413, 414, 418, 481, 482, 486, 532, 533, 537, 588, 589, 593], "ancestor": [116, 134, 400, 470, 521, 575, 633, 970, 1002, 1004, 1019], "ancestr": 116, "ancom_df": 688, "anderson": [759, 760], "ani": [1, 19, 52, 53, 83, 84, 92, 94, 104, 105, 108, 143, 144, 225, 227, 229, 230, 234, 235, 248, 249, 250, 270, 274, 277, 290, 295, 298, 308, 322, 323, 337, 342, 355, 360, 363, 373, 376, 379, 382, 504, 557, 616, 654, 683, 688, 690, 693, 758, 761, 765, 799, 821, 870, 875, 881, 883, 884, 908, 913, 937, 947, 949, 972, 975, 976, 977, 987, 995, 1026, 1028, 1038, 1065, 1066, 1076, 1088, 1105, 1107], "anim": 117, "ann": [115, 137], "anndata": 945, "annot": [224, 227, 228, 234, 308], "announc": 234, "anosim": [1, 759, 760], "anoth": [1, 70, 79, 82, 92, 116, 148, 149, 227, 229, 230, 281, 287, 299, 305, 308, 311, 317, 322, 325, 328, 334, 346, 352, 364, 370, 387, 396, 405, 427, 429, 442, 448, 458, 467, 475, 494, 496, 509, 518, 526, 546, 548, 562, 571, 580, 602, 604, 616, 621, 630, 635, 647, 649, 654, 656, 709, 732, 764, 900], "anova": [688, 759, 776, 777, 798, 809, 842, 853], "answer": 1064, "anti": [1, 756], "antibiot": [700, 883], "anticip": 1107, "anyon": 234, "anyth": [1, 225, 226, 233, 237, 616, 947, 1065, 1076, 1088, 1107], "anytim": 234, "anywher": [229, 230, 234, 688], "apart": 1018, "api": [225, 363, 682], "app": 233, "appear": [1, 107, 220, 232, 234, 235, 668, 720, 744, 757, 870, 871, 876, 881, 890, 1033], "append": [0, 85, 232, 237, 616, 987, 998], "appl": [148, 149], "appli": [0, 1, 53, 65, 84, 89, 90, 146, 149, 150, 151, 154, 224, 225, 230, 234, 236, 308, 327, 382, 417, 419, 485, 487, 504, 536, 538, 557, 592, 594, 616, 639, 640, 654, 670, 685, 721, 745, 747, 758, 761, 765, 870, 884, 907, 928, 934, 937, 943, 950, 981, 1039, 1066, 1107], "applic": [53, 84, 98, 104, 363, 855, 980, 1107], "approach": [693, 758, 884, 981, 984], "appropri": [1, 218, 229, 277, 400, 470, 521, 575, 633, 688, 1100, 1105], "approx": 881, "approxim": [878, 881], "aqfvdhwkel": 223, "aquat": 871, "ar": [0, 1, 3, 53, 65, 66, 70, 75, 79, 80, 83, 84, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 110, 111, 112, 116, 117, 123, 124, 125, 134, 146, 148, 149, 150, 151, 153, 154, 177, 178, 190, 191, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 248, 249, 250, 262, 269, 272, 273, 277, 281, 287, 290, 291, 298, 299, 305, 311, 317, 320, 322, 324, 325, 326, 327, 328, 334, 337, 338, 346, 352, 355, 356, 363, 364, 370, 372, 373, 375, 376, 377, 378, 381, 382, 387, 389, 396, 399, 400, 406, 409, 413, 414, 415, 418, 426, 427, 428, 429, 431, 432, 435, 437, 438, 439, 440, 441, 442, 448, 450, 451, 452, 453, 458, 460, 467, 470, 476, 479, 481, 482, 483, 486, 493, 494, 495, 496, 498, 499, 501, 503, 504, 509, 511, 518, 521, 527, 530, 532, 533, 534, 537, 539, 545, 546, 547, 548, 550, 551, 554, 556, 557, 562, 564, 571, 574, 575, 581, 584, 588, 589, 590, 593, 601, 602, 603, 604, 606, 607, 609, 611, 613, 614, 615, 616, 621, 623, 630, 633, 637, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 658, 663, 666, 669, 670, 675, 676, 680, 681, 683, 684, 685, 686, 688, 690, 693, 694, 695, 697, 698, 700, 701, 702, 703, 706, 707, 709, 711, 716, 721, 724, 725, 728, 729, 730, 732, 734, 739, 745, 747, 749, 750, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 777, 799, 843, 854, 855, 856, 865, 866, 867, 869, 870, 871, 874, 875, 876, 878, 879, 881, 883, 884, 885, 887, 890, 903, 904, 907, 909, 913, 919, 928, 930, 938, 940, 941, 942, 943, 945, 946, 947, 952, 953, 954, 955, 975, 978, 981, 983, 993, 998, 1005, 1007, 1008, 1012, 1013, 1017, 1018, 1019, 1021, 1022, 1026, 1028, 1029, 1030, 1033, 1034, 1036, 1037, 1038, 1040, 1042, 1043, 1045, 1062, 1065, 1066, 1077, 1088, 1100, 1102, 1105, 1107], "arang": [919, 924], "arbitrari": [65, 83, 86, 229, 234, 235, 382, 504, 557, 616, 854, 913, 947, 1065, 1102], "arbitrarili": [1038, 1107], "archaea": [993, 994, 1029], "archiv": [236, 1064], "area": [1, 118], "arg": [237, 262, 272, 438, 439, 504, 613, 614, 890], "arginin": 504, "argument": [53, 65, 93, 94, 97, 104, 177, 178, 190, 191, 229, 248, 249, 250, 262, 269, 270, 271, 272, 273, 274, 275, 324, 326, 378, 381, 425, 431, 438, 439, 440, 492, 498, 503, 544, 550, 556, 600, 606, 613, 614, 615, 645, 650, 653, 654, 670, 675, 681, 686, 721, 724, 729, 745, 749, 755, 762, 867, 869, 890, 938, 953, 1013, 1037, 1065, 1088], "argumentoverridewarn": [269, 273], "aris": [1028, 1038], "around": [124, 125, 151, 225, 232, 235, 654, 689, 758, 882, 1105], "arrai": [1, 3, 13, 14, 15, 17, 18, 19, 44, 46, 47, 49, 51, 52, 53, 84, 88, 116, 134, 148, 149, 179, 203, 216, 225, 231, 382, 399, 402, 404, 410, 427, 429, 430, 433, 435, 472, 474, 480, 494, 496, 497, 501, 504, 523, 525, 531, 546, 548, 549, 552, 554, 557, 574, 577, 579, 585, 602, 604, 605, 608, 611, 616, 647, 649, 652, 654, 656, 664, 669, 672, 676, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 706, 709, 717, 725, 732, 740, 742, 750, 764, 765, 799, 821, 843, 855, 875, 879, 881, 882, 883, 884, 885, 886, 900, 901, 902, 903, 904, 906, 907, 920, 923, 927, 931, 933, 937, 939, 943, 944, 947, 950, 997, 1028, 1038, 1102], "arrang": 855, "array_lik": [1, 3, 13, 14, 15, 34, 44, 45, 46, 47, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 154, 155, 166, 179, 192, 203, 389, 407, 408, 422, 432, 460, 477, 478, 489, 499, 511, 528, 529, 541, 551, 564, 582, 583, 597, 607, 623, 636, 642, 651, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 756, 758, 759, 760, 761, 764, 872, 875, 879, 882, 885, 886], "articl": [53, 104, 222], "artifact": [91, 98, 99, 100], "artifici": [227, 855], "asarrai": [707, 910, 911, 917, 918, 920, 921, 923, 928, 929, 934, 935, 936, 939, 941, 942, 944, 949, 950, 952], "ascend": [95, 325], "ascii": [226, 233, 234, 237, 435, 501, 554, 611, 652, 973, 1105], "ascii_art": [230, 902, 976, 993, 994, 998, 1017, 1018, 1019, 1033, 1039, 1105], "ask": 249, "asn": 504, "asp": 504, "asparagin": 504, "aspart": 504, "aspect": 1066, "ass": 120, "assai": 884, "assembl": 224, "assert": 1043, "assert_frame_equ": 1042, "assertionerror": [1042, 1043], "assess": [134, 144, 756, 758, 759, 760, 764], "assign": [84, 94, 105, 146, 150, 232, 234, 299, 432, 499, 551, 607, 616, 651, 672, 688, 693, 756, 759, 760, 854, 885, 974, 975, 976], "assign_support": 1032, "assist": [234, 1107], "associ": [1, 72, 107, 134, 226, 234, 235, 236, 263, 264, 265, 291, 293, 298, 319, 321, 323, 338, 340, 356, 358, 363, 382, 504, 557, 616, 757, 764, 854, 875, 879, 882, 883, 884, 903, 906, 913, 928, 945, 947, 985, 991, 1026, 1100], "asst": [411, 412, 586, 587], "assum": [1, 107, 116, 118, 126, 129, 148, 149, 222, 225, 226, 229, 231, 248, 250, 363, 389, 437, 438, 439, 460, 511, 564, 623, 658, 693, 706, 707, 711, 734, 745, 764, 765, 871, 875, 881, 882, 884, 885, 943, 1034, 1036], "assumpt": [130, 230, 683, 688, 693, 988, 989, 1041], "asv": 1, "asx": 504, "asymmetr": [654, 658, 711, 734], "asymptot": 130, "ataaatcacg": 224, "ataacgttgg": 224, "ataagggatg": 224, "atacaaccat": 224, "atactcccaa": 224, "atagacc": 1107, "atagcatacc": 224, "atagttacac": 224, "atatatacat": 226, "atatatat": 854, "atatatgttt": 224, "atatgaacaaa": 1107, "atattacaac": 224, "atcaaaaggg": 224, "atcaccgcta": 224, "atcactgaaa": 224, "atcataacta": 224, "atccatatat": 224, "atcggcgat": 684, "atgagccatg": 224, "atgc": 907, "atgcactagg": 224, "atgcatgcat": 228, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 228, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 228, "atgccactttaa": [438, 439], "atgccccttc": 224, "atggca": 854, "atggcc": 854, "atggcg": 854, "atggct": 854, "atggtatgaa": 224, "atgtgtatttga": 1102, "atgttgtagt": 224, "atl": [439, 452, 614], "atla": 666, "atom": [913, 947], "att": [403, 473, 524, 578], "attach": [248, 250, 975, 1033], "attagaaaga": 224, "attcgttgtg": 224, "attctggaac": 224, "attempt": [93, 177, 190, 225, 234, 277, 324, 378, 431, 498, 550, 606, 650, 675, 724, 749, 867, 938, 975, 988, 1013], "attr": [228, 913, 947, 999, 1028], "attr_1": 1028, "attr_n": 1028, "attribut": [3, 20, 34, 65, 94, 155, 166, 179, 192, 203, 218, 223, 224, 225, 227, 228, 231, 233, 234, 235, 238, 280, 298, 307, 308, 323, 327, 345, 363, 382, 387, 435, 441, 453, 458, 501, 504, 509, 554, 557, 562, 611, 616, 621, 652, 654, 665, 680, 707, 718, 728, 730, 741, 754, 777, 810, 821, 856, 865, 877, 884, 887, 913, 947, 954, 955, 970, 974, 977, 981, 998, 999, 1017, 1018, 1019, 1028, 1034, 1036, 1038, 1043, 1045, 1046, 1049, 1056, 1077, 1102], "attribute_nam": 1028, "attributeerror": [616, 1045], "atttcagggt": [225, 232], "aucauaacua": 224, "aug": 225, "augccacuuuaa": [441, 452, 613, 614], "auguguauuu": 1102, "austral": 759, "australian": 756, "auth": 237, "author": [134, 227, 235, 616, 688], "auto": [277, 435, 501, 554, 611, 652], "automat": [53, 82, 85, 92, 93, 97, 177, 178, 190, 191, 229, 233, 234, 262, 272, 298, 324, 326, 378, 381, 425, 431, 440, 492, 498, 503, 544, 550, 556, 600, 606, 615, 645, 650, 653, 675, 681, 706, 724, 729, 749, 755, 856, 867, 869, 938, 953, 980, 998, 1013, 1017, 1018, 1019, 1037, 1100], "auxilari": 237, "av": 765, "avail": [1, 150, 220, 225, 226, 227, 231, 234, 236, 266, 267, 435, 441, 450, 501, 554, 611, 652, 666, 730, 756, 757, 758, 759, 760, 799, 881, 885, 913, 947, 1033, 1040, 1100, 1107], "averag": [689, 693, 765, 766, 875, 879, 937, 1009, 1038], "averagegradientanova": 765, "avg": 765, "avoid": [53, 223, 234, 235, 237, 322, 855, 879, 1033], "aw": [0, 134], "awar": [84, 134, 234, 616], "awesom": 1107, "awgh": 0, "ax": [766, 788, 799, 832, 855, 866, 870, 871, 890, 900, 907, 928], "axes3d": 866, "axi": [72, 88, 118, 155, 229, 654, 799, 843, 856, 866, 875, 882, 885, 890, 898, 899, 900, 901, 902, 903, 904, 906, 907, 910, 911, 913, 918, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 936, 937, 939, 940, 941, 942, 943, 944, 947, 950, 952, 1043], "axis_label": [1, 866], "b": [1, 53, 86, 92, 94, 95, 96, 116, 117, 118, 130, 134, 138, 154, 226, 229, 230, 234, 278, 382, 504, 557, 616, 658, 665, 666, 669, 674, 677, 680, 704, 706, 711, 718, 723, 726, 728, 734, 741, 748, 751, 752, 754, 757, 758, 854, 866, 883, 884, 901, 903, 904, 907, 911, 936, 947, 969, 970, 971, 973, 975, 976, 977, 978, 979, 980, 981, 982, 985, 986, 988, 989, 990, 991, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1064, 1100, 1102, 1105], "b1": [688, 693], "b2": [688, 693], "b3": [688, 693], "b4": [688, 693], "b5": [688, 693], "b6": [688, 693], "b7": [688, 693], "b_b": 230, "b_i": [144, 703], "ba": 235, "babp": 53, "bacilli": [994, 1029], "bacillu": 235, "back": [134, 223, 225, 228, 271, 275, 296, 297, 343, 344, 361, 362, 380, 971, 1105], "backward": [116, 134, 148, 149, 234, 688], "bacteri": 688, "bacteria": [885, 930, 993, 994, 1029], "bacteroidet": [930, 993, 994, 1029], "baeza": 866, "baker": 116, "balanc": [134, 703], "band": 53, "bar": [234, 904, 929, 939, 949, 950, 1064, 1107], "barcod": [901, 903, 907], "barker": 134, "barlow": 703, "basal": 1033, "base": [1, 3, 13, 34, 45, 92, 99, 102, 106, 107, 110, 111, 115, 116, 123, 129, 130, 134, 135, 136, 138, 141, 148, 149, 219, 220, 225, 227, 231, 233, 234, 298, 319, 327, 363, 374, 382, 422, 453, 489, 504, 541, 557, 597, 616, 642, 658, 707, 711, 734, 756, 758, 759, 760, 764, 799, 870, 871, 878, 881, 883, 884, 885, 887, 903, 911, 943, 954, 978, 990, 991, 1038, 1064, 1102, 1103, 1105, 1107], "base1": 441, "base2": 441, "base3": 441, "basi": [694, 695, 703, 704], "basic": [98, 118, 220, 221, 764, 856, 866, 913, 947], "baz": [904, 1064], "bb": 883, "bbb": 226, "bbf": 226, "bbx": 226, "bc_dm": 1, "bct": 236, "becam": 230, "becaus": [1, 84, 91, 92, 116, 148, 149, 220, 225, 226, 227, 230, 232, 233, 234, 237, 363, 387, 422, 451, 458, 489, 509, 541, 562, 597, 616, 621, 642, 688, 758, 871, 876, 878, 880, 883, 980, 983, 1029], "becom": [1, 3, 117, 225, 226, 230, 234, 308, 903, 930, 1017, 1034, 1036], "been": [0, 98, 99, 100, 105, 106, 154, 225, 226, 227, 232, 268, 270, 274, 277, 363, 376, 418, 422, 430, 486, 489, 497, 537, 541, 549, 593, 597, 605, 616, 642, 688, 758, 764, 886, 913, 947, 952, 1012], "befor": [1, 84, 225, 229, 234, 235, 411, 412, 451, 586, 587, 700, 757, 758, 885, 903, 1010, 1017, 1018, 1019, 1030, 1105, 1107], "begin": [53, 224, 225, 226, 227, 231, 234, 235, 249, 298, 363, 451, 885], "behav": [382, 504, 557, 758], "behavior": [89, 90, 92, 98, 99, 100, 225, 226, 227, 234, 277, 417, 419, 435, 451, 485, 487, 501, 536, 538, 554, 592, 594, 611, 616, 639, 640, 652, 756, 758, 760, 979, 984, 1017, 1018, 1019, 1034, 1107], "being": [1, 53, 82, 84, 85, 98, 99, 100, 116, 146, 150, 225, 226, 232, 236, 363, 377, 703, 760, 764, 854, 884, 903, 947, 977, 1018, 1100, 1102], "bell": 138, "belong": [53, 108, 112, 139, 228, 688, 693, 756, 759, 760, 903], "below": [222, 225, 226, 230, 232, 234, 235, 236, 363, 441, 453, 616, 757, 758, 866, 884, 913, 943, 947, 955, 981], "benefit": 693, "benjamini": [688, 693], "berger": [108, 121], "berkelei": 136, "best": [53, 98, 99, 100, 101, 102, 103, 124, 125, 685, 757, 870, 1041], "beta": [150, 151, 153, 224], "beta_divers": [1, 146, 148, 149, 151, 153, 154], "betadisp": 760, "bethesda": 225, "better": [225, 870, 871, 1100], "between": [1, 3, 53, 99, 102, 117, 118, 121, 124, 135, 136, 144, 145, 148, 149, 150, 154, 218, 225, 226, 227, 229, 232, 235, 236, 311, 325, 400, 405, 426, 427, 428, 429, 470, 475, 493, 494, 495, 496, 521, 526, 545, 546, 547, 548, 575, 580, 601, 602, 603, 604, 633, 635, 646, 647, 648, 649, 654, 658, 670, 682, 683, 684, 688, 693, 703, 706, 707, 711, 721, 730, 734, 745, 756, 757, 758, 759, 760, 761, 763, 764, 799, 870, 871, 872, 878, 881, 884, 885, 890, 928, 955, 970, 978, 979, 980, 981, 986, 995, 998, 1006, 1017, 1019, 1026, 1027, 1039, 1102, 1105], "bf00039495": 224, "bh": [688, 693], "bia": [110, 111, 693], "bias": [110, 111, 693], "bias_correct": [110, 111], "bifurc": [230, 704, 992], "bigoplu": 695, "bin": [854, 903, 936], "bin_": 854, "bin_f": [854, 903], "binari": [237, 238, 248, 249, 250, 277, 703, 704, 764, 870, 878, 933, 1030, 1064], "binary_dm": [675, 681, 724, 729, 749, 755], "binomi": [884, 885], "bio": [0, 1, 89, 90, 93, 97, 98, 101, 104, 105, 116, 148, 149, 150, 151, 152, 153, 154, 177, 178, 190, 191, 219, 220, 221, 222, 224, 225, 226, 230, 231, 232, 233, 235, 236, 324, 326, 378, 381, 417, 419, 431, 438, 439, 440, 441, 451, 452, 485, 487, 498, 503, 536, 538, 550, 556, 592, 594, 606, 613, 614, 615, 639, 640, 650, 653, 675, 681, 682, 724, 729, 749, 755, 757, 855, 867, 869, 938, 953, 1013, 1033, 1037, 1040, 1102, 1106], "biocor": [148, 149, 866], "biodivers": [1, 106, 114, 116, 134], "bioinformat": [116, 134, 226, 232, 234, 975], "biol": [98, 101, 116, 120, 134, 220, 221, 224, 227, 699, 705], "biolog": [1, 91, 98, 99, 100, 129, 134, 135, 141, 143, 155, 192, 203, 225, 226, 228, 230, 233, 298, 402, 403, 404, 406, 407, 410, 413, 414, 415, 418, 430, 472, 473, 474, 476, 477, 480, 481, 482, 483, 486, 497, 523, 524, 525, 527, 528, 531, 532, 533, 534, 537, 549, 577, 578, 579, 581, 582, 585, 588, 589, 590, 593, 605, 616, 654, 884, 887, 914, 954, 1039, 1099, 1103, 1104], "biologi": [134, 135, 141, 451, 764, 975, 988, 1038, 1039], "biom": [234, 887, 893, 900, 901, 902, 903, 904, 906, 907, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954], "biom_format": [887, 954], "biom_open": [913, 947], "biometr": [130, 760], "biometrika": [106, 107, 119], "bioperl": [226, 232], "biopython": [3, 226], "biosci": [699, 705], "bioscienc": 978, "biotechnologi": [225, 236], "biotit": 3, "biowulf": 233, "biplot": [231, 870, 878], "biplot_scor": [856, 1043], "bit": [3, 13, 17, 34, 44, 49, 220, 221, 234], "bit_arr": 13, "bitscor": [220, 221], "bitting": 134, "biz": 904, "blackwel": 129, "blank": [225, 226, 230, 231, 232, 234, 280, 295, 327, 342, 345, 360, 363, 376, 379, 674, 723, 748], "blast": [99, 100, 102, 103, 225], "blast6": 221, "blastcgihelp": 225, "blastedbio": 220, "blastn": 221, "blastp": 221, "block": [100, 103, 151, 666, 1064], "block_siz": 1064, "blocksiz": 151, "blogspot": 220, "blosum": [100, 103, 504, 654, 666], "blosum45": 666, "blosum50": 666, "blosum62": [654, 666], "blosum80": 666, "blosum90": 666, "bmi": 885, "bob": 616, "bodi": [1, 866], "body_sit": [1, 866], "boilerpl": 237, "bologna": 118, "boltzmann": 145, "bone": 884, "bonferroni": [688, 693], "boniferroni": [688, 693], "boogaart": 703, "book": [220, 221, 225], "bool": [32, 53, 66, 67, 70, 79, 82, 85, 88, 89, 90, 91, 95, 98, 99, 100, 110, 111, 112, 114, 116, 122, 134, 138, 139, 140, 146, 148, 149, 150, 151, 154, 166, 214, 215, 216, 217, 248, 249, 250, 269, 273, 281, 287, 291, 294, 296, 297, 298, 299, 305, 311, 317, 319, 321, 325, 328, 334, 338, 341, 343, 344, 346, 352, 356, 359, 361, 362, 364, 370, 372, 380, 382, 383, 384, 387, 389, 396, 399, 400, 402, 404, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 432, 434, 435, 436, 442, 448, 454, 455, 458, 460, 467, 470, 472, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 506, 509, 511, 518, 521, 523, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 557, 558, 559, 562, 564, 571, 574, 575, 577, 579, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 607, 610, 611, 612, 616, 617, 618, 621, 623, 630, 633, 636, 637, 638, 639, 640, 642, 643, 644, 646, 647, 648, 649, 651, 652, 655, 656, 663, 665, 668, 684, 688, 694, 695, 699, 705, 707, 708, 709, 716, 718, 720, 731, 732, 739, 741, 744, 747, 758, 761, 764, 799, 810, 868, 875, 876, 878, 879, 883, 884, 886, 903, 906, 910, 911, 913, 914, 922, 923, 924, 925, 933, 934, 935, 936, 937, 940, 945, 946, 947, 950, 952, 973, 978, 979, 981, 982, 996, 999, 1000, 1001, 1003, 1006, 1009, 1010, 1011, 1014, 1017, 1018, 1019, 1027, 1029, 1030, 1034, 1039, 1043, 1065], "boolean": [66, 149, 225, 228, 233, 382, 389, 402, 404, 407, 410, 422, 425, 427, 429, 430, 432, 460, 472, 474, 477, 480, 489, 492, 494, 496, 497, 499, 504, 511, 523, 525, 528, 531, 541, 544, 546, 548, 549, 551, 552, 557, 564, 577, 579, 582, 585, 597, 600, 602, 604, 605, 607, 616, 623, 642, 645, 647, 649, 651, 745, 911, 943], "bootstrap": 955, "both": [65, 83, 92, 94, 105, 110, 111, 112, 116, 134, 218, 219, 220, 221, 223, 225, 226, 232, 234, 236, 269, 273, 323, 451, 670, 691, 692, 694, 695, 706, 721, 745, 747, 752, 757, 758, 759, 760, 876, 890, 900, 903, 907, 913, 928, 943, 947, 979, 980, 1021, 1030, 1100, 1102], "bound": [123, 124, 227, 228, 237, 298, 299, 307, 308, 311, 319, 320, 322, 323, 616, 688, 693, 882, 885, 980, 1021], "bound_moieti": 227, "bowden": [382, 453, 504, 557, 616], "boxplot": 1, "bp": [224, 227], "braak": 871, "bracket": [144, 230], "brai": 1, "branch": [1, 116, 134, 149, 704, 955, 975, 976, 985, 998, 1017, 1018, 1019, 1028, 1031, 1033, 1034, 1036, 1039, 1105], "branch_attr": [998, 1017, 1018, 1019, 1034, 1036], "braycurti": 1, "break": [382, 504, 557], "bren": 703, "brillouin": 109, "broader": 855, "broadinstitut": 225, "broken": [83, 1038], "brows": 224, "bsd": 1099, "bt": [226, 924], "btop": [220, 221], "buf_siz": 854, "buffer": [237, 277, 854], "buffer_s": 237, "bufferedrandom": 277, "bufferedread": [238, 248, 249, 277], "bufferedwrit": [238, 250, 277], "bui": 1099, "build": [45, 308, 703, 948], "buildilrbas": 703, "built": [3, 20, 34, 53, 65, 155, 166, 179, 192, 203, 238, 251, 280, 298, 308, 327, 345, 363, 382, 441, 453, 504, 557, 616, 654, 707, 730, 766, 777, 788, 799, 810, 821, 832, 843, 856, 887, 955, 1045, 1065, 1077, 1088, 1100], "bulletin": 1038, "busi": 237, "bwpd_": 134, "by_id": 943, "by_nam": [435, 501, 554, 611, 652, 654, 671], "bypass": [116, 146, 148, 149, 150], "byte": [3, 277, 432, 499, 551, 607, 651], "byteio": [219, 223], "bytesio": [219, 223, 277, 278, 1064], "bz2": 277, "bzh91ai": 278, "b\u00e4hler": [699, 705], "c": [1, 17, 20, 53, 65, 83, 91, 92, 94, 95, 104, 107, 116, 117, 118, 119, 120, 134, 135, 138, 141, 145, 148, 149, 154, 224, 225, 226, 230, 232, 234, 235, 236, 250, 382, 392, 397, 403, 409, 411, 412, 463, 468, 473, 479, 504, 514, 519, 524, 530, 557, 567, 572, 578, 584, 586, 587, 616, 626, 631, 637, 654, 665, 669, 672, 674, 677, 680, 685, 687, 692, 699, 700, 701, 702, 704, 705, 706, 718, 723, 726, 728, 741, 748, 751, 752, 754, 757, 758, 866, 877, 883, 884, 901, 903, 904, 969, 970, 971, 973, 975, 976, 977, 978, 979, 980, 981, 982, 985, 986, 988, 989, 990, 991, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1102, 1105], "c_": 107, "ca": [3, 17, 84, 231, 856, 871, 878], "caa40058": 224, "caaatgtgaa": 224, "caacgtggcc": 224, "caaggaagat": 224, "caagggctgc": 224, "cabcacc": 226, "cac": [415, 423, 483, 490, 534, 542, 590, 598, 643], "cacaattact": 224, "cacaauuacu": 224, "cach": [972, 977, 983, 987, 988, 989, 991, 999, 1008, 1012], "cache_attr": [983, 999], "cache_attrnam": 977, "cache_typ": 977, "cag": 3, "caggcc": 1107, "cagttgaagc": 224, "cagtttgatg": 224, "caguugaagc": 224, "caguuugaug": 224, "cajo": 871, "calcul": [3, 53, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 151, 154, 215, 218, 411, 412, 586, 587, 688, 693, 696, 704, 705, 756, 757, 758, 759, 760, 764, 788, 799, 843, 875, 879, 882, 884, 885, 927, 931, 943, 978, 985, 1026], "california": 136, "call": [1, 92, 116, 117, 124, 125, 148, 149, 222, 225, 232, 235, 237, 277, 298, 400, 408, 411, 432, 451, 470, 478, 499, 521, 529, 551, 575, 583, 586, 607, 616, 633, 636, 651, 747, 757, 758, 854, 871, 881, 911, 971, 973, 974, 977, 988, 989, 991, 1005, 1006, 1012, 1022, 1027, 1033, 1035, 1063, 1065, 1066, 1076, 1100, 1107], "callabl": [53, 65, 82, 85, 94, 146, 150, 151, 154, 215, 670, 688, 721, 745], "callback": [1066, 1107], "caller": [93, 97, 177, 178, 190, 191, 324, 326, 378, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 787, 820, 831, 867, 869, 938, 951, 953, 1013, 1037], "calucul": 760, "can": [0, 1, 15, 47, 53, 65, 91, 94, 98, 99, 100, 104, 105, 106, 112, 116, 117, 134, 137, 139, 146, 148, 149, 150, 152, 153, 154, 166, 179, 203, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 277, 298, 307, 308, 323, 363, 400, 405, 407, 422, 432, 470, 475, 477, 489, 499, 521, 526, 528, 541, 551, 575, 580, 582, 597, 607, 616, 633, 635, 642, 651, 654, 658, 666, 682, 685, 688, 693, 703, 706, 707, 711, 730, 734, 756, 757, 758, 760, 761, 762, 765, 855, 866, 870, 875, 876, 877, 878, 881, 883, 884, 885, 890, 900, 904, 913, 925, 928, 937, 947, 950, 955, 976, 978, 986, 1017, 1018, 1019, 1021, 1028, 1034, 1038, 1039, 1040, 1044, 1045, 1065, 1088, 1102, 1105, 1107], "cancer": 758, "candid": [441, 885], "cannot": [15, 47, 53, 65, 82, 85, 225, 226, 229, 230, 234, 269, 270, 273, 274, 277, 363, 400, 453, 470, 521, 575, 633, 688, 756, 757, 758, 759, 760, 854, 866, 883, 885, 988, 991, 1021, 1100], "canon": [382, 434, 500, 504, 553, 557, 610, 654, 871, 878, 887, 954, 1099], "captur": [436, 502, 555, 612], "cardin": 1044, "care": [1, 84, 225, 227, 760], "carlo": 881, "carol": 616, "casava": 233, "casava_ug_15011196b": 233, "case": [1, 84, 98, 99, 100, 108, 136, 145, 151, 219, 223, 225, 230, 232, 234, 236, 238, 363, 377, 382, 412, 425, 435, 492, 501, 544, 554, 557, 587, 600, 611, 645, 652, 666, 688, 693, 707, 758, 764, 870, 875, 877, 885, 975, 1009, 1033, 1038, 1065, 1066, 1100, 1105], "cast": [1, 230, 363, 400, 470, 521, 575, 633, 706, 707, 762, 866, 929], "cat": [424, 491, 543, 599, 644, 883, 884], "catacctca": 3, "catatttgct": 224, "catcgatcgatcgatgcatgcatgcatg": 225, "catcgtc": 225, "categor": [234, 280, 363, 372, 376, 380, 756, 759, 855, 866], "categori": [1, 234, 235, 765, 766, 776, 777, 787, 798, 799, 809, 810, 821, 831, 832, 842, 843, 853, 855, 866, 881, 883, 884, 898, 903, 947, 1101], "categoricalmetadatacolumn": [327, 363, 374], "categoryresult": 810, "catttagga": 233, "catttgaaaa": 224, "cauauuugcu": 224, "caugcaucguacguacgcaugac": 222, "caus": [53, 234, 277, 451], "caution": 154, "cauucguacguacgcaugac": 222, "caveat": [225, 685], "cb": [235, 883], "cc": [235, 432, 441, 499, 551, 607, 651], "cca": [231, 855, 856, 870, 878], "cca1": 855, "cca2": 855, "cca3": 855, "cca4": 855, "cca5": 855, "cca6": 855, "cca7": 855, "cca8": 855, "cca9": 855, "ccaatggtac": 224, "ccaggtcgat": 224, "ccc": [384, 455, 506, 559, 618], "cccataaata": 224, "cccc": [422, 489, 541, 597, 642], "ccccchhhhhhhhhhhhh": 235, "ccchhhhhhhhhhhhhhh": 235, "cccttaggtc": 224, "ccg": 94, "ccggac": 1107, "ccgggcacggtat": 225, "ccgwllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 441, "ccora": 871, "ccyt": 226, "cd": [98, 224, 227, 451], "cde": 236, "ceil": 943, "cell": [234, 884], "cell_lin": 884, "center": [225, 236, 689, 757, 870, 872, 876, 879], "centr": [685, 691, 692, 874], "centroid": 760, "cepa": 975, "certain": [116, 127, 146, 148, 149, 150, 269, 271, 273, 275, 363, 382, 504, 557, 683, 1032], "cg": [83, 432, 499, 551, 607, 616, 651], "cga": [423, 490, 542, 598, 643], "cgac": 222, "cgagc": [389, 460, 511, 564, 623], "cgaggccgggac": 225, "cgatgtc": 225, "cgatgtcgatcgatcgatcgatcag": 225, "cgau": 222, "cgcgaugcaugcau": 222, "cgggacactc": [225, 232], "cgggcacggt": [225, 232], "cgggcasdgca": 233, "cgggcattgca": 233, "cggtacgctt": [225, 232], "cggtcgtaacgcgta": 3, "cggtcgtcac": 3, "cgi": [99, 100, 102, 103, 441, 449, 450], "cgt": [423, 490, 542, 598, 643], "cgtcacttat": 224, "cgtcgt": 17, "cgtcgtgc": 17, "cgttacgctt": [225, 232], "cgttcagggt": [225, 232], "cgttta": 683, "cgugcaugcau": 222, "chain": 227, "challeng": 116, "chanc": [654, 764, 943], "chang": [123, 138, 225, 307, 308, 451, 616, 666, 688, 693, 756, 854, 950, 977, 981, 1012, 1017, 1018, 1034, 1107], "chao": [107, 110, 134], "chao1": 111, "chao1_ci": 110, "chapter": [225, 877], "char": [409, 436, 479, 502, 530, 555, 584, 612, 637], "charact": [3, 13, 15, 17, 19, 34, 44, 47, 52, 53, 70, 83, 84, 88, 92, 105, 166, 179, 192, 203, 220, 221, 222, 225, 226, 229, 230, 231, 232, 233, 235, 236, 237, 363, 382, 387, 389, 392, 394, 396, 397, 398, 402, 403, 404, 407, 409, 410, 411, 412, 413, 414, 415, 418, 425, 430, 432, 434, 435, 441, 451, 453, 458, 460, 463, 465, 467, 468, 469, 472, 473, 474, 477, 479, 480, 481, 482, 483, 486, 492, 497, 499, 500, 501, 504, 509, 511, 514, 516, 518, 519, 520, 523, 524, 525, 528, 530, 531, 532, 533, 534, 537, 539, 544, 549, 551, 552, 553, 554, 557, 562, 564, 567, 569, 571, 572, 573, 577, 578, 579, 582, 584, 585, 586, 587, 588, 589, 590, 593, 600, 605, 607, 610, 611, 616, 621, 623, 626, 628, 630, 631, 632, 637, 645, 651, 652, 654, 669, 672, 683, 913, 947, 1102], "character": 693, "charg": [225, 232], "charlson": 134, "chase": 114, "check": [53, 226, 249, 269, 273, 299, 308, 311, 322, 655, 656, 694, 695, 706, 707, 708, 709, 730, 731, 732, 765, 870, 871, 884, 910, 922, 1042, 1043, 1063, 1107], "check_length": 1107, "checksum": 1064, "chemic": [654, 885], "chen": [107, 134], "chf": [439, 452, 614], "chi": [870, 871], "chichest": 685, "child": [230, 308, 400, 470, 521, 575, 633, 703, 955, 972, 976, 1008, 1012, 1031, 1033, 1105], "child1": [972, 987], "child2": [972, 987], "child_index": 1028, "children": [230, 704, 955, 960, 964, 972, 976, 987, 989, 996, 1001, 1008, 1012, 1014, 1017, 1022, 1033], "chimp": [225, 232], "chisquar": 885, "chiu": 134, "choic": [82, 85, 229, 876, 1033], "choos": [116, 234, 871, 881], "chosen": [432, 499, 551, 607, 651, 697, 757, 866, 878, 886], "christoph": 226, "chunk": 232, "ci": [106, 124, 693], "ci_typ": 124, "cigar": [3, 20, 45, 50, 53], "circuit": 1107, "circumst": [118, 504, 884], "citat": 236, "ciufo": 236, "cl": [248, 250, 263, 265, 266, 267, 453, 1049], "clade": [1015, 1019, 1023, 1038, 1105], "cladogenesi": 764, "claim": [270, 274], "clarifi": 116, "clariti": 230, "clark": [756, 757], "class": [3, 20, 34, 53, 65, 89, 90, 105, 107, 110, 155, 166, 179, 192, 203, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 248, 250, 251, 263, 265, 266, 267, 268, 280, 298, 308, 327, 345, 363, 382, 400, 417, 419, 441, 453, 470, 485, 487, 504, 521, 536, 538, 557, 575, 592, 594, 616, 633, 639, 640, 654, 688, 707, 730, 766, 777, 788, 799, 810, 821, 832, 843, 856, 887, 908, 911, 934, 949, 954, 955, 977, 1038, 1045, 1065, 1077, 1088, 1100, 1102], "classic": 236, "classif": [236, 866], "classmethod": [13, 14, 15, 16, 44, 45, 46, 47, 48, 86, 87, 93, 177, 190, 320, 324, 376, 378, 400, 431, 450, 470, 498, 521, 550, 575, 606, 633, 650, 666, 669, 670, 671, 672, 675, 721, 724, 745, 749, 867, 913, 914, 938, 992, 993, 994, 1013], "classproperti": 453, "claus": 375, "clean": [277, 1012], "clear": 233, "clinic": [885, 1101], "clip_head": 166, "clip_tail": 166, "clone": 224, "clone_lib": 224, "close": [93, 97, 106, 117, 177, 178, 190, 191, 225, 226, 230, 232, 235, 277, 278, 324, 326, 363, 378, 381, 431, 440, 451, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 688, 724, 729, 749, 755, 787, 820, 831, 867, 869, 938, 953, 1013, 1037, 1064], "closeabl": 277, "closefd": 237, "closer": [1, 1107], "clostridia": [994, 1029], "closur": [687, 700, 701, 702], "clover": 224, "clr": [685, 692, 693, 704], "clustal": [93, 97, 1100], "clustal_f": 222, "clustalw": 222, "cluster": [1, 758, 760, 992, 1102], "cmap": [1, 674, 723, 748, 866], "cnt": 884, "co": 764, "co2": 884, "cock": 226, "cocryst": 227, "code": [222, 225, 226, 227, 236, 323, 382, 435, 437, 438, 439, 441, 442, 448, 449, 450, 451, 452, 501, 504, 554, 557, 609, 611, 613, 614, 652, 764, 886, 943, 978, 1038, 1040, 1102], "codon": [227, 236, 438, 441, 451, 452, 613, 654], "codon_start": 227, "coeff": 758, "coeffici": [107, 757, 758, 764, 856, 878, 881, 980], "coercion": [400, 470, 521, 575, 633], "cogent": 985, "col": [707, 897, 908, 923, 949], "col1": [92, 234], "col2": [92, 234], "col3": [92, 234], "collabor": 227, "collaps": [234, 976], "collapse_f": 903, "collapsed_id": [903, 913, 947], "collat": 761, "collect": [53, 135, 141, 143, 277, 363, 665, 703, 718, 741, 854], "collinear": [855, 871], "collis": 136, "colon": 230, "color": [1, 124, 125, 674, 723, 748, 866], "colorbar": [674, 723, 748, 866], "colormap": [674, 723, 748, 866], "colormaps_refer": 866, "column": [1, 19, 52, 53, 65, 90, 91, 92, 150, 214, 218, 219, 225, 227, 228, 231, 232, 235, 236, 280, 281, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 327, 328, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 370, 372, 374, 375, 376, 377, 379, 380, 400, 419, 425, 470, 487, 492, 521, 538, 544, 575, 594, 600, 616, 633, 640, 645, 654, 658, 673, 677, 686, 687, 688, 693, 694, 695, 706, 711, 722, 726, 734, 746, 747, 751, 756, 757, 758, 759, 760, 761, 762, 764, 799, 843, 855, 866, 870, 871, 872, 874, 878, 879, 883, 884, 890, 901, 903, 908, 913, 914, 919, 923, 924, 925, 930, 939, 940, 945, 946, 947, 949, 993, 997, 1042, 1043], "column_missing_schem": [363, 376], "column_typ": [372, 376], "columnwis": 872, "com": [123, 220, 221, 222, 757, 1064], "comb": 1009, "combin": [53, 65, 82, 85, 106, 227, 693, 757, 856, 871, 925], "come": [235, 764, 1017, 1024], "comma": [228, 229, 230], "command": [234, 236, 451], "comment": [224, 225, 227, 228, 229, 235, 236, 363], "comment_char": 230, "commit": 881, "common": [83, 89, 90, 101, 116, 134, 220, 225, 226, 227, 234, 235, 236, 417, 419, 485, 487, 536, 538, 592, 594, 639, 640, 686, 707, 799, 901, 902, 955, 980, 988, 1002, 1004, 1019, 1028, 1029, 1033, 1039, 1102, 1105, 1106], "commonli": [230, 234, 654, 760, 878, 1105], "commun": [106, 107, 112, 116, 121, 130, 134, 138, 144, 148, 149, 693, 706, 756, 757, 759, 760, 855, 866, 871, 878, 885, 1099], "compact": 973, "compani": 884, "compar": [1, 128, 148, 154, 220, 221, 325, 421, 426, 427, 428, 429, 432, 493, 494, 495, 496, 499, 545, 546, 547, 548, 551, 596, 601, 602, 603, 604, 607, 646, 647, 648, 649, 651, 656, 663, 688, 706, 709, 716, 732, 739, 758, 764, 883, 884, 885, 978, 979, 980, 1009, 1042, 1043, 1102, 1105], "compare_rfd": [979, 980], "compare_subset": [978, 980, 1023, 1024, 1105], "compare_tip_dist": [978, 979, 986, 995, 1026, 1105], "comparison": [148, 149, 688, 693, 764, 883, 978, 1042, 1105], "compat": [116, 134, 148, 149, 234, 236, 441, 688], "compil": [408, 436, 478, 502, 529, 555, 583, 612, 636, 886], "complement": [421, 433, 451, 596, 608, 1102], "complement_map": [399, 574], "complet": [104, 106, 112, 124, 125, 226, 227, 230, 881, 1041, 1100], "complex": [230, 1107], "compliant": [382, 504, 557], "complic": [654, 1100], "compon": [685, 687, 697, 698, 699, 700, 701, 702, 832, 856, 870, 876, 1107], "compos": [84, 226, 233, 363], "composit": [112, 116, 134, 277, 871], "compound": 693, "comprehens": 236, "compress": [219, 237, 277, 913, 923, 924, 925, 947], "compresslevel": [237, 277], "comput": [0, 1, 83, 84, 88, 107, 110, 116, 125, 144, 146, 147, 148, 149, 150, 151, 154, 308, 405, 409, 475, 479, 526, 530, 580, 584, 635, 637, 670, 682, 683, 684, 688, 693, 699, 703, 704, 705, 706, 721, 745, 756, 757, 758, 759, 760, 761, 764, 765, 766, 776, 798, 799, 809, 810, 821, 832, 842, 843, 853, 855, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 986, 1024, 1026, 1038, 1064, 1102, 1105], "computation": 53, "concat": [91, 92], "concaten": [91, 235, 320, 400, 470, 521, 575, 633, 904], "concentr": [106, 112, 885], "concept": [3, 127, 703], "conceptu": [226, 759], "concern": [53, 229], "concis": 688, "conclud": 688, "concret": 327, "condens": [730, 742, 747, 752], "condensed_form": [730, 747, 752], "condit": [1, 124, 125, 884, 943], "confid": [1, 106, 111, 115, 124, 693, 881, 882, 955, 975], "confirm": [1, 756, 760, 885], "conflict": 983, "conform": 453, "confus": 871, "conjunct": 760, "connect": [116, 118, 134, 230, 955, 998, 1005, 1012, 1017, 1018, 1019, 1033], "consens": 1038, "consensu": 1038, "consensus_tre": 1038, "consequ": 121, "conserv": [116, 123, 124, 134, 222, 400, 470, 521, 575, 633, 688, 706], "consid": [3, 84, 106, 107, 116, 123, 134, 148, 149, 225, 230, 363, 387, 422, 458, 489, 509, 541, 562, 597, 621, 642, 683, 685, 700, 760, 761, 854, 883, 884, 885, 998, 1017, 1018, 1019, 1033, 1034, 1036, 1042, 1065], "consider": [123, 134, 327, 363, 884], "consist": [3, 15, 47, 138, 221, 225, 226, 228, 231, 232, 234, 235, 236, 372, 435, 501, 554, 611, 616, 652, 654, 884, 1006, 1027], "constant": [115, 685, 688, 742, 758, 883], "constitut": [1, 654, 672], "constrain": [856, 871], "constraint": [231, 856, 871, 878], "construct": [86, 96, 227, 236, 292, 296, 297, 298, 299, 327, 339, 343, 344, 357, 361, 362, 363, 380, 654, 669, 672, 678, 699, 706, 855, 900, 901, 902, 903, 904, 919, 928, 934, 936, 937, 941, 942, 949, 950, 983, 993, 994, 1039, 1099, 1100, 1105], "constructor": [65, 82, 85, 94, 222, 225, 226, 227, 232, 233, 235, 249, 262, 272, 382, 425, 441, 492, 504, 544, 557, 600, 616, 645, 654, 762], "consum": [65, 85, 250, 382, 441, 504, 557, 616], "consumpt": [761, 876, 903], "contain": [1, 3, 53, 65, 83, 85, 92, 98, 99, 100, 101, 102, 103, 104, 107, 146, 147, 150, 151, 154, 214, 218, 220, 222, 223, 224, 225, 226, 228, 229, 231, 232, 234, 235, 236, 237, 268, 280, 290, 292, 296, 297, 337, 339, 343, 344, 345, 355, 357, 361, 362, 363, 372, 373, 377, 380, 382, 384, 389, 402, 404, 409, 410, 413, 414, 415, 418, 422, 423, 424, 430, 432, 435, 441, 455, 460, 472, 474, 479, 480, 481, 482, 483, 486, 489, 490, 491, 497, 499, 501, 504, 506, 511, 523, 525, 530, 531, 532, 533, 534, 537, 539, 541, 542, 543, 549, 551, 552, 554, 557, 559, 564, 577, 579, 584, 585, 588, 589, 590, 593, 597, 598, 599, 605, 607, 611, 618, 623, 637, 642, 643, 644, 651, 652, 668, 670, 674, 682, 683, 688, 703, 704, 706, 720, 721, 723, 744, 745, 748, 752, 756, 757, 758, 759, 760, 761, 763, 765, 855, 866, 868, 871, 903, 913, 914, 943, 947, 973, 977, 985, 1016, 1038, 1039, 1063, 1066, 1088, 1102, 1105], "content": [65, 83, 224, 225, 226, 227, 228, 230, 234, 237, 248, 249, 250, 377, 382, 399, 400, 403, 406, 433, 437, 470, 473, 476, 521, 524, 527, 557, 574, 575, 578, 581, 608, 609, 633, 1102], "context": [1, 53, 138, 278, 279, 683, 866, 1039], "contextu": 1065, "contigu": [228, 298, 422, 489, 541, 597, 642], "conting": [693, 878, 887, 951], "continu": [98, 99, 100, 855], "contrast": [134, 703, 1033], "contribut": [83, 134, 136, 764, 870, 875], "control": [92, 225, 756, 758, 759, 765, 878, 881, 883, 884, 885, 901, 911, 928], "control_cat": [883, 884], "controversi": 130, "conveni": [0, 53, 93, 97, 133, 177, 178, 190, 191, 271, 275, 324, 326, 378, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 867, 869, 938, 953, 1013, 1037, 1106], "convent": [116, 148, 149, 220, 224, 227], "convers": [3, 226, 277, 742, 928], "convert": [1, 3, 16, 48, 214, 215, 216, 217, 220, 222, 224, 225, 227, 230, 232, 235, 277, 296, 297, 327, 343, 344, 361, 362, 380, 382, 405, 434, 435, 475, 500, 501, 504, 526, 553, 554, 557, 580, 610, 611, 616, 635, 652, 707, 747, 757, 930, 935, 937, 945, 946, 975, 1033, 1044], "convert_underscor": 230, "convienc": [1002, 1004], "coo_matrix": 704, "coord": [14, 46, 765, 766, 788, 799, 832, 843], "coord_data": 765, "coordin": [1, 3, 14, 18, 46, 51, 166, 192, 227, 233, 298, 308, 311, 319, 320, 325, 693, 704, 760, 765, 799, 832, 843, 856, 866, 870, 876, 877, 878], "copi": [65, 68, 69, 225, 232, 235, 308, 309, 310, 385, 386, 432, 456, 457, 499, 507, 508, 551, 560, 561, 607, 616, 619, 620, 651, 676, 679, 707, 725, 727, 750, 753, 879, 886, 951, 956, 957, 984, 1017, 1025, 1034, 1035, 1059, 1060, 1061], "copy_from": 308, "copyright": [225, 232], "corbet": 117, "cornish": [382, 453, 504, 557, 616], "cornwel": 134, "corr": 1, "corr_coeff": [758, 764], "correct": [110, 111, 112, 114, 118, 122, 139, 140, 225, 688, 693, 1012, 1017, 1018, 1019, 1100], "correl": [1, 699, 705, 706, 757, 758, 761, 763, 764, 856, 871, 872, 878, 881, 885, 980, 1105], "correspond": [1, 15, 47, 91, 106, 116, 134, 148, 149, 166, 192, 216, 223, 225, 226, 228, 233, 235, 270, 274, 293, 340, 358, 363, 412, 425, 441, 451, 492, 544, 587, 600, 613, 614, 645, 658, 688, 703, 711, 734, 856, 870, 871, 874, 885, 903, 908, 913, 915, 917, 918, 929, 930, 947, 949, 950, 955, 988, 993, 997, 1007, 1029, 1038], "cospeci": 764, "cost": [699, 705], "costli": 0, "could": [1, 65, 125, 223, 225, 226, 233, 237, 269, 271, 273, 275, 688, 693, 707, 756, 758, 759, 760, 761, 764, 866, 883, 942, 1002, 1004, 1040, 1041, 1100], "count": [0, 3, 65, 82, 85, 88, 92, 95, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 154, 219, 222, 225, 226, 232, 235, 409, 411, 412, 424, 426, 428, 479, 491, 493, 495, 530, 543, 545, 547, 584, 586, 587, 599, 601, 603, 637, 644, 646, 648, 684, 685, 688, 693, 764, 871, 877, 884, 885, 886, 903, 917, 933, 937, 943, 979, 980, 1007, 1038, 1100], "counts2": 885, "counts_001": 881, "counts_010": 881, "counts_100": 881, "counts_interv": [881, 884, 885], "coupl": 308, "covari": [134, 872], "cover": [308, 666, 1105], "coverag": [107, 115, 119, 125, 220, 221], "cprofil": 1107, "cran": [703, 756, 757, 758, 759, 760], "crd": 225, "creat": [1, 3, 13, 14, 15, 16, 34, 44, 45, 46, 47, 48, 53, 65, 82, 85, 86, 87, 91, 93, 94, 95, 96, 177, 190, 224, 225, 228, 230, 232, 234, 251, 262, 272, 277, 278, 296, 297, 298, 308, 319, 320, 324, 343, 344, 361, 362, 378, 380, 382, 431, 432, 453, 498, 499, 504, 550, 551, 557, 606, 607, 616, 650, 651, 669, 670, 672, 674, 675, 677, 678, 688, 697, 698, 706, 721, 723, 724, 726, 745, 748, 749, 751, 752, 762, 764, 799, 855, 866, 867, 887, 903, 910, 911, 917, 918, 920, 921, 923, 928, 929, 934, 935, 936, 938, 939, 941, 942, 944, 949, 950, 952, 954, 976, 977, 999, 1013, 1017, 1019, 1039, 1102, 1105, 1107], "create_cach": 999, "create_d": [887, 954], "create_format": [237, 248, 249, 250], "creation": [913, 947, 948], "creation_d": [947, 948], "credibl": 693, "criteria": [291, 323, 338, 356, 375, 883, 1032], "critic": [881, 882, 884, 885, 975], "critiqu": [114, 139], "crop": 236, "cross": 227, "cross_refer": 224, "csc": [890, 947], "csc_matrix": 947, "csr": [890, 947], "csr_matrix": 947, "csv": [220, 229, 1100], "ctaa": 227, "ctaacccccttttctcaga": 0, "ctagctagta": 224, "ctataaaaaa": 227, "ctattatact": 224, "ctc": [435, 501, 554, 611, 652], "ctcaaaagtc": [435, 501, 554, 611, 652], "ctcaaaattc": 224, "ctcttctagt": 224, "ctgtttgtta": 224, "cttcatgtat": 224, "cttccaattt": 224, "cttgacatag": 224, "cttgatgata": 224, "cuaa": 227, "cual": 234, "cuauaaaaaa": 227, "cug": 451, "cuguuuguua": 224, "cultur": 884, "cumbersom": 234, "cumul": [123, 144, 222, 223], "cuppini": 118, "curat": 236, "current": [137, 218, 220, 223, 224, 225, 226, 227, 232, 234, 235, 236, 308, 322, 363, 372, 439, 452, 614, 666, 688, 758, 843, 868, 870, 876, 913, 947, 977, 981, 984, 990, 1000, 1001, 1006, 1099], "curti": 1, "curv": [118, 123, 130, 871, 881, 884, 885], "custom": [0, 1, 138, 236, 382, 405, 441, 442, 453, 475, 504, 526, 557, 580, 635, 866, 913, 941, 947, 1019, 1102], "custom_metr": [405, 475, 526, 580, 635], "customsequ": 453, "cutoff": [688, 1038], "cuucauguau": 224, "cuugacauag": 224, "cw": 235, "cy": 504, "cyanogen": 224, "cystein": 504, "cytokin": 884, "cytophagia": [994, 1029], "cytosin": [382, 557], "czech": 975, "d": [1, 53, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 220, 221, 227, 230, 231, 382, 504, 557, 665, 669, 674, 680, 685, 686, 687, 688, 691, 692, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 706, 718, 723, 728, 741, 748, 752, 754, 756, 757, 758, 759, 760, 764, 799, 821, 843, 856, 866, 875, 884, 885, 886, 887, 904, 919, 920, 940, 954, 970, 971, 973, 975, 976, 977, 978, 979, 981, 982, 985, 986, 988, 989, 990, 991, 995, 998, 1002, 1003, 1004, 1005, 1006, 1012, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1100, 1102, 1105, 1107], "d1": [236, 1102], "d136": 236, "d143": 236, "d2": 1102, "d3": 1102, "d_": [129, 141], "d_a": 928, "d_b": 928, "d_d": 230, "d_w": 144, "d_x": 758, "d_y": 758, "daili": 236, "danger": 1, "dash": 234, "data": [1, 3, 92, 116, 118, 130, 134, 146, 148, 149, 150, 151, 154, 214, 217, 219, 220, 223, 224, 226, 228, 229, 231, 233, 234, 235, 236, 277, 280, 327, 345, 363, 372, 382, 453, 504, 557, 616, 656, 658, 676, 685, 686, 687, 688, 689, 692, 693, 695, 697, 699, 703, 705, 707, 709, 711, 725, 730, 732, 734, 750, 757, 764, 765, 787, 820, 831, 854, 855, 866, 870, 871, 875, 881, 883, 884, 885, 887, 888, 890, 897, 898, 900, 903, 908, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 924, 929, 932, 934, 935, 936, 937, 939, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 993, 1026, 1030, 1039, 1063, 1066, 1099, 1100, 1101, 1102, 1107], "data_fh": 912, "data_fram": 757, "data_pump": 914, "data_typ": [913, 947], "databas": [220, 221, 224, 227, 234, 236, 298, 993], "datafram": [1, 65, 90, 150, 214, 220, 221, 236, 296, 327, 343, 361, 363, 380, 382, 419, 487, 504, 538, 557, 594, 616, 640, 665, 677, 680, 688, 693, 718, 726, 728, 741, 751, 754, 756, 757, 759, 760, 761, 765, 799, 843, 855, 856, 866, 868, 870, 871, 877, 878, 883, 884, 901, 930, 946, 993, 994, 1042, 1102], "datapoint": 130, "dataset": [151, 218, 223, 685, 693, 760, 855, 871, 876, 913, 947], "datatyp": [218, 854], "date": [224, 913, 914, 947, 948], "datetim": [947, 948], "dayhoff": 666, "db": 225, "db_xref": [224, 227], "dbsourc": 224, "dbxref": [227, 228], "ddbj": 227, "ddl": [913, 947], "ddof": [699, 705, 875, 879], "de": [224, 235], "deal": [223, 224, 276, 685, 697, 876, 1100], "debug": [107, 1065, 1076, 1107], "debug_post_st": 1107, "debug_pre_st": 1107, "debug_runtim": 1107, "debug_trac": 1107, "decemb": 226, "decid": [876, 1107], "decim": [230, 234, 1043], "declar": [231, 234], "decod": [226, 277], "decomposit": [134, 151, 217], "decompress": 277, "decor": [237, 248, 249, 250, 308, 453, 977, 1038, 1045, 1065, 1077, 1078, 1088], "decreas": 854, "deem": 871, "deep": [69, 108, 310, 385, 386, 456, 457, 507, 508, 560, 561, 616, 619, 620, 667, 679, 719, 727, 743, 753, 957, 981, 984, 1034], "deepcopi": [69, 1035], "deeper": [148, 149], "def": [222, 237, 248, 249, 250, 405, 453, 475, 526, 580, 635, 885, 1107], "default": [0, 1, 15, 19, 47, 52, 53, 65, 82, 83, 85, 92, 94, 97, 98, 99, 100, 102, 103, 107, 111, 121, 123, 130, 134, 135, 136, 138, 145, 146, 150, 178, 191, 220, 225, 227, 228, 229, 230, 232, 233, 234, 237, 238, 248, 250, 263, 265, 291, 323, 326, 327, 338, 356, 363, 375, 381, 405, 422, 434, 435, 438, 439, 440, 441, 451, 452, 475, 489, 500, 501, 503, 526, 541, 553, 554, 556, 580, 597, 610, 611, 613, 614, 615, 635, 642, 652, 653, 665, 670, 674, 681, 686, 687, 688, 693, 694, 695, 697, 698, 707, 718, 721, 723, 729, 741, 745, 748, 755, 757, 758, 760, 761, 762, 799, 854, 866, 869, 875, 876, 878, 879, 886, 897, 903, 908, 911, 913, 918, 920, 923, 924, 925, 927, 928, 931, 933, 934, 935, 936, 937, 941, 943, 947, 948, 949, 950, 952, 953, 980, 981, 984, 1006, 1017, 1018, 1019, 1026, 1034, 1037, 1038, 1039, 1042, 1043, 1063, 1066, 1088, 1100, 1102, 1105, 1107], "default_column": 220, "default_gap_char": [83, 84, 92, 453], "default_missing_schem": [363, 376], "default_write_format": 250, "defaultdict": 929, "defer": 308, "defin": [1, 14, 18, 46, 51, 65, 92, 94, 100, 103, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 144, 145, 154, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 238, 298, 308, 322, 363, 387, 405, 423, 424, 434, 435, 441, 442, 449, 450, 458, 475, 490, 491, 500, 501, 509, 526, 542, 543, 553, 554, 562, 580, 598, 599, 610, 611, 621, 635, 643, 644, 652, 654, 666, 671, 674, 684, 686, 687, 691, 692, 694, 695, 696, 700, 701, 702, 707, 723, 748, 758, 761, 866, 881, 911, 913, 928, 936, 947, 952, 1035, 1039, 1042, 1076, 1100, 1102, 1105, 1107], "definit": [1, 83, 112, 166, 179, 223, 224, 225, 226, 227, 228, 236, 382, 399, 400, 403, 404, 406, 413, 414, 418, 430, 433, 436, 437, 438, 439, 441, 451, 452, 453, 470, 473, 474, 476, 481, 482, 486, 497, 502, 504, 521, 524, 525, 527, 532, 533, 537, 549, 555, 557, 574, 575, 578, 579, 581, 588, 589, 593, 605, 608, 609, 612, 613, 614, 633, 666, 913, 947, 1039, 1102, 1106, 1107], "definite_char": 453, "deflin": 225, "degap": [411, 412, 586, 587, 1102], "degener": [83, 84, 166, 179, 223, 224, 225, 226, 227, 228, 382, 399, 400, 402, 403, 406, 411, 412, 413, 414, 418, 430, 433, 434, 436, 437, 438, 439, 441, 451, 452, 453, 470, 472, 473, 476, 481, 482, 486, 497, 500, 502, 504, 521, 523, 524, 527, 532, 533, 537, 549, 553, 555, 557, 574, 575, 577, 578, 581, 586, 587, 588, 589, 593, 605, 608, 609, 610, 612, 613, 614, 633, 666, 1102], "degenerate_map": [406, 453, 476, 527, 581, 1102], "degenerate_mod": 84, "degre": [106, 112, 134, 222, 693, 699, 705, 875, 882, 884], "deiman": 235, "del": [15, 19, 47, 52, 229, 434, 500, 553, 610, 855], "deleg": 960, "delet": [19, 52, 308, 999, 1015, 1046], "deleteri": 1041, "delgado": [685, 703], "delim": 908, "delimit": [228, 229, 231, 233, 236, 295, 342, 360, 379, 706, 908, 912, 915, 949], "delta": [134, 697, 698, 875], "demograph": 1101, "demonstr": [89, 90, 237, 417, 419, 485, 487, 536, 538, 592, 594, 639, 640], "dempqsv": [435, 501, 554, 611, 652], "demultiplex": 854, "den": 703, "denomin": [686, 703], "denominator_col": 686, "denominator_idx": [686, 687], "denot": [112, 134, 139, 143, 144, 225, 688, 693, 756, 759, 760], "dens": [219, 903, 906, 911, 914, 923, 924, 925, 934, 945, 946, 954], "densiti": 950, "dep": 881, "depend": [20, 111, 114, 115, 116, 121, 134, 146, 148, 149, 150, 225, 226, 235, 248, 249, 250, 277, 412, 587, 658, 711, 734, 758, 760, 762, 821, 876, 913, 980, 1030, 1038, 1065, 1076, 1100, 1105, 1107], "deprec": [104, 105, 116, 132, 134, 148, 149, 154, 418, 430, 486, 497, 537, 549, 593, 605, 688, 698, 984, 1035], "depth": [134, 855, 881, 884, 885, 1030, 1105], "deriv": [99, 100, 102, 103, 114, 224, 422, 489, 541, 597, 616, 642, 694, 695, 703, 884, 1039], "derives_from": 228, "desc": 616, "descend": [95, 134, 325, 955, 981, 985, 997, 1006, 1015, 1023, 1024, 1027, 1030, 1105], "describ": [0, 1, 84, 98, 101, 106, 108, 109, 112, 115, 116, 119, 120, 122, 124, 125, 126, 127, 128, 134, 135, 139, 148, 149, 154, 219, 224, 225, 226, 227, 228, 231, 232, 234, 235, 295, 342, 360, 363, 376, 379, 422, 425, 489, 492, 541, 544, 597, 600, 616, 642, 645, 676, 699, 705, 706, 725, 742, 750, 758, 764, 877, 903, 909, 913, 947, 948, 997, 1018, 1039, 1101, 1102, 1105], "descript": [53, 107, 116, 123, 129, 141, 146, 148, 149, 150, 218, 220, 225, 226, 227, 228, 230, 232, 234, 236, 280, 327, 345, 658, 711, 734, 947, 978, 1038, 1102, 1105], "description_newline_replac": [225, 226], "descriptor": [227, 877, 1059, 1060, 1061], "deseri": [706, 856], "design": [1, 151, 218, 219, 224, 234, 363, 706, 883], "desir": [118, 124, 220, 229, 876, 930, 942, 1020, 1107], "destin": 616, "detach": 3, "detail": [53, 91, 92, 104, 105, 134, 151, 153, 154, 224, 225, 226, 227, 228, 232, 233, 235, 236, 237, 280, 327, 345, 363, 452, 616, 658, 711, 734, 757, 761, 866, 870, 871, 878, 1039, 1100], "detect": [225, 227, 234, 270, 274, 688, 758, 885, 900], "determin": [1, 67, 70, 79, 89, 90, 116, 121, 134, 136, 146, 148, 149, 150, 229, 237, 266, 267, 277, 281, 287, 290, 294, 328, 334, 337, 341, 346, 352, 355, 359, 363, 364, 370, 372, 373, 384, 387, 396, 413, 414, 415, 416, 417, 418, 419, 421, 442, 448, 455, 458, 467, 481, 482, 483, 484, 485, 486, 487, 506, 509, 518, 532, 533, 534, 535, 536, 537, 538, 539, 559, 562, 571, 588, 589, 590, 591, 592, 593, 594, 596, 618, 621, 630, 638, 639, 640, 663, 688, 716, 739, 760, 764, 854, 876, 881, 883, 884, 888, 903, 1038, 1107], "determinist": [117, 756, 760], "develop": [1, 20, 151, 154, 224, 234, 248, 249, 250, 688, 1039, 1099, 1107], "deviat": [757, 875, 878, 879, 882], "df": [220, 221, 236, 677, 693, 726, 751, 756, 757, 760, 866, 882, 946], "di": [118, 1102], "diag": 925, "diagnos": 1107, "diagon": [218, 745, 752, 925], "diagram": 298, "dict": [53, 65, 86, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 177, 178, 190, 191, 224, 227, 249, 269, 270, 271, 273, 274, 275, 298, 319, 323, 324, 326, 363, 376, 378, 381, 382, 409, 424, 431, 438, 439, 440, 479, 491, 498, 503, 504, 530, 543, 550, 556, 557, 584, 599, 606, 613, 614, 615, 616, 637, 644, 650, 653, 654, 669, 675, 678, 681, 724, 729, 749, 755, 758, 761, 821, 867, 868, 869, 898, 899, 913, 914, 915, 918, 928, 929, 936, 938, 947, 952, 953, 993, 994, 997, 1007, 1013, 1028, 1037, 1065, 1102, 1107], "dict_of_metadata": 899, "dictionari": [86, 89, 94, 96, 105, 235, 236, 298, 309, 310, 319, 323, 417, 485, 536, 592, 616, 639, 669, 678, 758, 868, 911, 993], "did": [107, 225, 233, 269, 273, 278, 1107], "didn": [225, 1107], "diet": 883, "differ": [0, 1, 70, 83, 84, 86, 98, 99, 100, 111, 116, 123, 135, 139, 141, 148, 149, 221, 223, 225, 226, 232, 235, 236, 237, 327, 384, 387, 396, 400, 401, 405, 420, 421, 426, 427, 428, 429, 432, 438, 441, 448, 455, 458, 467, 470, 471, 475, 488, 493, 494, 495, 496, 499, 506, 509, 518, 521, 522, 526, 540, 545, 546, 547, 548, 551, 559, 562, 571, 575, 576, 580, 595, 596, 601, 602, 603, 604, 607, 613, 618, 621, 630, 633, 634, 635, 641, 646, 647, 648, 649, 651, 658, 683, 688, 693, 706, 711, 734, 756, 759, 760, 764, 788, 843, 855, 870, 871, 876, 884, 885, 950, 978, 979, 1042, 1043, 1059, 1060, 1061, 1102, 1105], "differenti": [688, 693], "difficult": 1, "digit": 234, "dim": 223, "dimens": [77, 166, 179, 223, 231, 232, 664, 686, 690, 694, 695, 717, 740, 760, 856, 865, 866, 876, 877], "dimension": [1, 216, 223, 676, 687, 700, 701, 702, 707, 725, 742, 750, 855, 870, 877, 878, 884, 885, 939, 1103], "direct": [234, 236, 295, 342, 360, 379, 871, 955, 1034, 1035, 1036], "direct_io": [908, 948, 949], "direction": 1043, "directli": [65, 82, 85, 234, 382, 441, 504, 557, 616, 682, 688, 764, 948, 949, 1033, 1065, 1107], "dirichilet": 693, "dirichlet": 693, "disabl": [1, 116, 146, 148, 149, 150, 1107], "disallow": [230, 235, 758], "disallow_negative_branch_length": 1039, "discard": [227, 758, 911], "discov": [1, 137, 983], "discoveri": 1, "discrep": 112, "discret": 143, "discuss": [134, 138, 148, 149, 234, 1107], "diseas": [688, 758, 901], "disjoint": [904, 1038], "disjointiderror": [900, 904], "disk": [225, 363, 707], "dism": 699, "disperison": 760, "dispers": 760, "displai": [224, 409, 432, 441, 479, 499, 530, 551, 584, 607, 637, 651, 761, 856], "disrupt": [407, 477, 528, 582, 1102], "dissimilar": [147, 150, 229, 655, 656, 658, 663, 664, 665, 667, 668, 670, 673, 674, 676, 679, 680, 699, 706, 707, 708, 709, 711, 716, 717, 718, 719, 720, 721, 722, 723, 725, 727, 728, 731, 732, 734, 739, 740, 741, 743, 744, 746, 748, 750, 753, 754], "dissimilaritymatrix": [218, 229, 654, 656, 658, 663, 665, 667, 668, 670, 674, 675, 677, 679, 680, 681, 699, 706, 730, 732, 734, 739, 741, 743, 744, 748, 751, 753, 754, 762], "dist": [980, 995], "dist_f": 980, "distanc": [1, 53, 134, 147, 148, 149, 150, 151, 153, 154, 215, 218, 229, 230, 426, 428, 493, 495, 545, 547, 601, 603, 646, 648, 654, 665, 668, 674, 676, 680, 686, 699, 763, 764, 866, 870, 871, 873, 876, 878, 955, 969, 970, 978, 980, 995, 998, 1017, 1018, 1019, 1026, 1039, 1105], "distance_filt": 53, "distance_from_r": 980, "distance_from_r_squar": 980, "distance_matrix": [756, 757, 759, 760, 873, 876], "distancematrix": [150, 151, 154, 215, 218, 229, 677, 682, 699, 706, 707, 726, 756, 757, 758, 759, 760, 761, 762, 764, 866, 876, 1026, 1039], "distant": 995, "distantli": 1019, "distinct": [83, 131, 132, 143, 683, 706, 981], "distinguish": [50, 112, 134], "distort": 685, "distribut": [106, 115, 123, 224, 693, 700, 762, 876, 881, 882, 884, 885, 943], "div": 236, "diverg": 1, "divers": [706, 886, 1099], "divid": [222, 703, 873, 875, 879, 903], "divis": [441, 703, 879], "dj": 225, "dm": [218, 658, 665, 674, 677, 680, 706, 711, 718, 723, 726, 728, 734, 741, 748, 751, 752, 754, 756, 757, 760, 761, 866, 1039], "dm1": 761, "dm2": 761, "dm_fh": 706, "dm_from_np": 706, "dmp": 993, "dna": [0, 3, 17, 65, 66, 67, 68, 69, 70, 75, 77, 80, 82, 83, 85, 86, 88, 90, 91, 92, 94, 95, 96, 99, 102, 104, 222, 224, 225, 226, 227, 228, 232, 233, 235, 441, 453, 470, 472, 473, 474, 476, 477, 480, 481, 482, 483, 486, 487, 489, 497, 501, 502, 521, 523, 524, 525, 527, 528, 531, 532, 533, 534, 537, 538, 541, 549, 554, 555, 557, 574, 575, 577, 578, 579, 581, 582, 585, 586, 587, 588, 589, 590, 593, 594, 596, 597, 605, 608, 609, 611, 612, 616, 633, 640, 642, 652, 707, 1100, 1102], "dna_seq": [224, 225, 227], "dnaful": 666, "do": [1, 82, 85, 130, 216, 218, 223, 225, 232, 234, 237, 277, 382, 387, 429, 458, 496, 504, 509, 548, 557, 562, 604, 616, 621, 649, 683, 688, 758, 761, 799, 878, 890, 911, 934, 943, 975, 988, 1020, 1021, 1105, 1107], "do_someth": 1107, "do_something_awesom": 1107, "do_something_els": 1107, "doc": [150, 222, 224, 225, 232, 234, 295, 298, 342, 360, 363, 376, 379, 676, 707, 725, 730, 742, 750, 947, 1038], "docstr": [280, 327, 345], "doctest": 913, "document": [1, 72, 153, 219, 225, 227, 232, 233, 268, 688, 866, 887, 913, 947, 954, 955, 1100, 1104], "doe": [65, 82, 83, 85, 92, 95, 104, 116, 134, 220, 222, 223, 225, 226, 228, 230, 232, 235, 277, 290, 337, 355, 373, 400, 441, 442, 448, 451, 470, 521, 575, 633, 666, 676, 683, 706, 725, 747, 750, 756, 758, 760, 799, 868, 876, 884, 885, 907, 929, 930, 947, 971, 980, 991, 1005, 1026, 1029, 1033, 1038, 1042, 1100], "doesn": [92, 225, 234, 376, 451, 700, 704, 870, 876, 880, 1017, 1018, 1019, 1034, 1040, 1106], "doi": [53, 104, 224, 226, 699, 705, 1039], "domain": [235, 504, 993, 1029], "domin": [108, 114, 121, 122, 127, 139, 140, 141, 144], "dominance_": 106, "domrachev": 236, "don": [1, 53, 92, 225, 234, 411, 412, 586, 587, 686, 688, 761, 878, 881, 885, 979, 980, 1018, 1039], "done": [84, 688, 760, 787, 820, 831, 890], "doubl": [107, 110, 125, 133, 269, 273, 870, 876], "doubleton": [1, 110, 111, 113, 115, 133], "doubt": 234, "download": [224, 227, 236], "dqyhrykedvgimkdqnmdsyrfsiswprilpkgklsgginhegikyynnli": 224, "dr": 224, "draw": [693, 881, 883, 884, 885, 973], "draw_mod": [881, 885], "drawn": [693, 762, 881, 884, 885], "driver": [1, 114], "drop": [308, 372, 389, 460, 511, 564, 623, 761, 855, 871, 911, 1015, 1038], "drop_all_miss": 372, "drop_all_uniqu": 372, "drop_missing_valu": [291, 294, 338, 341, 356, 359], "drop_zero_vari": 372, "dt": 224, "dt_rich": 903, "dtype": [0, 1, 17, 65, 70, 82, 83, 84, 85, 88, 91, 92, 94, 95, 222, 223, 225, 226, 232, 233, 235, 363, 380, 399, 400, 402, 403, 404, 410, 427, 429, 430, 433, 435, 470, 472, 473, 474, 480, 494, 496, 497, 501, 521, 523, 524, 525, 531, 546, 548, 549, 552, 554, 574, 575, 577, 578, 579, 585, 602, 604, 605, 608, 611, 616, 633, 647, 649, 652, 688, 707, 752, 756, 760, 855, 887, 927, 931, 945, 954, 1028, 1102], "due": [106, 132, 230, 322, 697, 698, 757, 760, 871, 884], "dump": [236, 1105, 1107], "dunn": 224, "duplic": [92, 154, 226, 234, 235, 322, 435, 501, 554, 611, 652, 668, 720, 744, 1062], "duplicatenodeerror": [116, 134, 146, 148, 149, 150, 983], "duplicateregistrationerror": [248, 249, 250], "dure": [92, 225, 299, 400, 470, 521, 575, 633, 760, 928, 948, 949, 1034, 1036, 1063], "dx": 118, "e": [0, 1, 53, 66, 77, 84, 88, 89, 95, 112, 117, 118, 119, 120, 121, 122, 123, 128, 129, 134, 135, 136, 137, 138, 139, 141, 143, 148, 149, 150, 151, 154, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 298, 321, 327, 363, 376, 377, 400, 408, 409, 417, 451, 470, 478, 479, 485, 504, 521, 529, 530, 536, 539, 552, 575, 583, 584, 592, 609, 616, 633, 636, 637, 639, 654, 658, 665, 674, 680, 683, 688, 693, 703, 704, 706, 707, 711, 718, 723, 728, 730, 734, 741, 748, 752, 754, 756, 757, 758, 759, 760, 866, 873, 874, 883, 884, 886, 904, 908, 913, 930, 943, 947, 955, 970, 971, 973, 975, 976, 977, 981, 982, 985, 986, 988, 989, 990, 991, 995, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1012, 1016, 1017, 1018, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1043, 1062, 1065, 1100, 1102, 1105, 1107], "e1004075": [699, 705], "e157": 134, "e_": [694, 695], "e_1": [694, 695], "e_d": 141, "e_h": 135, "e_i": 695, "e_matrix": 874, "each": [0, 1, 3, 13, 14, 15, 18, 34, 45, 46, 47, 51, 53, 65, 75, 80, 83, 84, 88, 91, 94, 98, 99, 100, 101, 102, 103, 104, 116, 130, 146, 148, 149, 150, 151, 154, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 298, 309, 310, 319, 363, 377, 382, 392, 397, 400, 406, 409, 422, 424, 439, 452, 463, 468, 470, 476, 479, 489, 491, 504, 514, 519, 521, 527, 530, 541, 543, 567, 572, 575, 581, 584, 597, 599, 614, 616, 626, 631, 633, 637, 642, 644, 654, 658, 668, 670, 683, 688, 690, 693, 697, 698, 700, 701, 702, 703, 706, 711, 720, 721, 734, 744, 745, 756, 757, 758, 759, 760, 761, 764, 765, 766, 776, 777, 788, 798, 799, 809, 810, 832, 842, 843, 853, 854, 855, 856, 866, 871, 872, 874, 875, 876, 878, 881, 884, 885, 903, 911, 913, 924, 930, 932, 944, 947, 950, 981, 1017, 1018, 1019, 1030, 1034, 1038, 1100, 1102, 1107], "earlier": 1107, "earth": 151, "earthmicrobiom": 151, "easi": [225, 226, 234], "easier": [298, 654], "easili": [229, 1102], "ebi": [98, 101, 224, 227, 298], "ec_numb": 224, "ecoli": [221, 900], "ecolog": [1, 114, 855, 871, 876], "ecologi": [1, 114, 116, 117, 121, 126, 127, 139, 144, 688, 756, 757, 758, 759, 855, 870, 871, 876, 877, 878], "ecologist": 870, "ed": [118, 223], "edg": [230, 764, 870, 973, 1028], "edit": [234, 758, 877], "editor": 225, "edu": [107, 111, 222, 225, 230, 232, 1038], "educ": [0, 883], "edward": 227, "eeb": [107, 111], "eeeee": 235, "eeeeeeee": 235, "eeeeeeeeeeh": 235, "eeeeeeeehhh": 235, "effect": [53, 104, 106, 112, 114, 121, 122, 138, 148, 149, 234, 277, 435, 501, 554, 611, 652, 665, 718, 741, 881, 883, 884, 885], "effici": [0, 3, 229, 747], "efficiencywarn": 886, "effort": 227, "egozcu": [685, 694, 695, 699, 703, 705], "eh": 116, "eifcyilkinitilqfsitengmnefndatlpveeallntyridyyyrhlyi": 224, "eigendecomposit": [760, 876], "eigenvalu": [760, 856, 870, 876, 878], "eigenvector": [760, 871, 876], "eigh": [760, 876], "eight": 885, "eigval": [231, 856], "either": [1, 65, 72, 92, 94, 98, 99, 100, 134, 220, 234, 235, 248, 249, 250, 363, 412, 422, 453, 489, 541, 587, 597, 642, 684, 758, 760, 854, 866, 868, 870, 875, 883, 885, 901, 902, 928, 936, 944, 1017, 1038], "elem": [913, 947], "element": [15, 47, 53, 229, 277, 658, 670, 690, 694, 695, 711, 721, 734, 745, 843, 866, 870, 874, 875, 879, 882, 884, 885, 886, 887, 890, 913, 916, 932, 947, 1062], "elementwis": 873, "elev": [757, 1033], "ellaps": 955, "elong": 1031, "els": [32, 33, 230, 237, 249, 269, 273, 383, 436, 454, 502, 505, 555, 558, 612, 616, 617, 872, 911, 935, 950, 977], "elsevi": [758, 855, 870, 871, 878], "elsewher": [116, 146, 148, 149, 150], "emb": [177, 178, 190, 191], "embed": [855, 1099], "embedding_ptr": 223, "embeddingvector": [203, 214, 215, 216, 217], "embl": [227, 236, 298, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653], "embl_gen": 224, "embl_str": 224, "emboss": [98, 101], "emboss_needl": 98, "emboss_wat": 101, "embptr": 223, "embryophyta": 224, "emdptr": 223, "emorg": 221, "emperor": 866, "emploi": 111, "empti": [20, 66, 89, 117, 221, 225, 228, 232, 266, 267, 409, 417, 479, 485, 530, 536, 584, 592, 637, 639, 668, 688, 720, 744, 883, 890, 922, 936, 939, 940, 977, 1029, 1042, 1100], "en": [106, 114, 121, 122, 225, 226, 235, 1039], "ena": [224, 227], "enabl": [3, 947, 1065, 1107], "encod": [3, 19, 52, 165, 176, 189, 202, 213, 218, 225, 226, 233, 237, 238, 277, 363, 703, 855], "encode_miss": [296, 297, 343, 344, 361, 362, 380], "encount": [1, 114, 139, 234, 986, 988, 995], "encourag": 884, "end": [0, 53, 98, 99, 100, 101, 102, 103, 104, 166, 220, 221, 224, 225, 226, 227, 228, 235, 236, 298, 308, 319, 325, 401, 420, 451, 471, 488, 522, 540, 576, 595, 634, 641, 1018], "endpoint": [885, 1026], "enforc": [225, 363, 616], "engel": 128, "engin": 1066, "english": [230, 758], "enough": [114, 225, 230, 885], "enrol": 885, "ens_": 114, "ens_pi": 114, "ensur": [1, 53, 84, 116, 148, 149, 237, 382, 504, 557, 656, 690, 693, 697, 709, 730, 732, 943, 976, 1042], "entail": [116, 146, 148, 149, 150], "entir": [1, 15, 16, 47, 48, 53, 65, 382, 504, 557, 616, 890, 947, 951, 981], "entiti": [143, 298, 947], "entrez": 236, "entri": [118, 218, 219, 224, 236, 854, 908, 911, 933, 934, 949, 950, 954], "entropi": [84, 121, 136, 138, 145], "enumer": 53, "env": [757, 907], "environ": [107, 148, 149, 700, 871, 945], "environment": [134, 757, 855, 871, 876, 877], "enzym": 130, "eq": [873, 874], "equal": [1, 3, 15, 47, 70, 79, 84, 105, 106, 107, 121, 143, 148, 149, 150, 225, 281, 287, 299, 305, 311, 317, 328, 334, 346, 352, 364, 370, 387, 396, 442, 448, 458, 467, 509, 518, 562, 571, 616, 621, 630, 654, 656, 663, 683, 700, 709, 716, 732, 739, 756, 758, 759, 760, 762, 764, 854, 870, 875, 876, 879, 884, 885, 886, 888, 909, 978, 1038, 1042, 1043], "equat": [110, 111, 117, 130, 758], "equit": [106, 135, 141], "equival": [77, 114, 116, 121, 122, 134, 136, 138, 226, 234, 385, 386, 409, 411, 432, 433, 439, 452, 456, 457, 479, 499, 507, 508, 530, 551, 560, 561, 584, 586, 607, 608, 614, 619, 620, 637, 651, 665, 680, 683, 688, 718, 728, 741, 754, 758, 855, 984, 1102], "erb": [699, 705], "eredi": 118, "erik": [53, 104], "error": [1, 84, 116, 130, 134, 146, 148, 149, 150, 225, 226, 232, 234, 237, 277, 322, 363, 377, 435, 501, 554, 611, 652, 756, 758, 760, 881, 885, 952, 1044, 1100], "escap": 230, "especi": [218, 225, 234, 764, 878], "essenti": 227, "esti": 115, "estim": [53, 106, 107, 110, 111, 115, 117, 119, 123, 124, 125, 130, 137, 693, 875, 883, 884, 885, 1018], "estrang": 230, "esty_ci": 119, "et": [688, 693, 764, 887, 954], "etc": [93, 97, 118, 177, 178, 190, 191, 225, 226, 234, 269, 270, 271, 273, 274, 275, 295, 298, 324, 326, 342, 360, 378, 379, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 654, 675, 681, 724, 729, 749, 755, 867, 869, 876, 878, 930, 938, 953, 955, 1013, 1037, 1101, 1102], "euclidean": [215, 685, 706, 757, 870, 876, 878], "euclidian": 876, "eudicotyledon": 224, "eukaryota": 224, "euryarchaeota": [994, 1029], "evalu": [116, 134, 220, 221, 389, 460, 511, 564, 623, 706, 757, 854, 881, 977, 1015, 1018, 1105, 1107], "evaul": 237, "even": [98, 99, 100, 120, 121, 128, 135, 141, 225, 230, 451, 756, 760, 885, 1030], "evenli": [700, 866], "everi": [107, 234, 236, 372, 687, 700, 701, 702, 703, 704, 761, 868, 976, 991, 997, 1033], "evid": [224, 230], "evmltdiprlhindpimk": 235, "evolut": [225, 230, 232, 763, 764, 975, 1038, 1039], "evolutionari": [116, 654, 666, 955, 1039], "ex": 1107, "exact": [116, 134, 146, 148, 149, 150, 234, 298, 400, 470, 521, 575, 633, 760, 876, 1100], "exactli": [65, 82, 85, 91, 101, 102, 103, 225, 226, 232, 237, 296, 343, 361, 363, 387, 396, 442, 458, 467, 509, 518, 562, 571, 621, 630, 704, 866, 973, 1033], "examin": [1066, 1107], "exampl": [0, 1, 3, 13, 14, 15, 17, 18, 19, 45, 46, 47, 50, 51, 52, 65, 66, 67, 68, 69, 70, 75, 77, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 116, 148, 149, 150, 166, 179, 229, 234, 237, 248, 249, 250, 278, 298, 308, 320, 325, 363, 382, 383, 384, 387, 389, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 441, 442, 450, 451, 452, 453, 454, 455, 458, 460, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 501, 502, 504, 505, 506, 509, 511, 514, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 557, 558, 559, 562, 564, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 614, 616, 617, 618, 621, 623, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 654, 665, 666, 669, 672, 674, 677, 680, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 718, 723, 726, 728, 741, 748, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 854, 866, 876, 883, 884, 885, 886, 900, 901, 902, 903, 904, 906, 907, 908, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 937, 939, 941, 942, 943, 944, 945, 946, 947, 949, 950, 952, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1064, 1100, 1101, 1102, 1103, 1105, 1107], "example_protein_embed": 223, "example_t": [219, 906, 925, 926, 927, 930, 931, 945, 946], "exce": [225, 232, 998], "exceed": 234, "excel": [226, 234], "except": [1, 225, 230, 231, 232, 234, 249, 451, 668, 720, 744, 759, 871, 983, 1038, 1040, 1041, 1076, 1106], "excit": 1107, "exclud": [233, 703, 745, 752, 1022], "exclude_absent_taxa": 979, "exclus": [237, 298, 308, 319, 401, 420, 471, 488, 522, 540, 576, 595, 634, 641, 688], "execut": [237, 777, 821, 1066, 1088, 1107], "exercis": 883, "exhibit": 870, "exist": [0, 94, 107, 112, 219, 230, 237, 248, 249, 250, 266, 267, 451, 654, 666, 670, 706, 721, 745, 758, 761, 866, 907, 913, 919, 955, 972, 980, 985, 987, 1020, 1034, 1063, 1088, 1102], "exon": [228, 298, 425, 492, 544, 557, 600, 616, 645], "exp": [121, 138, 687, 692, 699, 705], "expand": [764, 930, 1029], "expect": [1, 151, 220, 237, 265, 382, 504, 557, 693, 694, 695, 706, 764, 870, 871, 878, 903, 912, 913, 928, 947, 1028, 1107], "expens": 890, "experi": [0, 137, 224, 227, 234, 688, 693, 884], "experienc": 885, "experiment": [224, 760, 1101], "explain": [227, 228, 231, 765, 799, 843, 855, 856, 870, 876, 878], "explan": [870, 871], "explanatori": [764, 855, 856, 871, 878], "explicit": 226, "explicitli": [134, 232, 234, 435, 501, 554, 611, 652, 855], "explor": [1, 147, 855], "exploratori": 1, "expon": [136, 145, 230, 702], "exponenti": [121, 138], "export": 234, "expos": 913, "express": [144, 408, 436, 478, 502, 529, 555, 583, 612, 636, 693, 699, 705, 884, 1102], "ext": [295, 342, 360, 379], "extend": [0, 53, 82, 92, 98, 99, 100, 101, 102, 103, 116, 884, 972, 985, 1038, 1100], "extens": [224, 234, 295, 342, 360, 379], "extern": 230, "extinct": 116, "extra": [236, 237, 756, 757, 759, 760, 821], "extract": [658, 693, 706, 707, 711, 734, 756, 760, 871, 975, 1102], "extrapol": [124, 125, 881], "extrem": 758, "f": [1, 53, 92, 108, 124, 134, 151, 219, 220, 221, 223, 226, 230, 233, 235, 236, 278, 504, 758, 759, 760, 871, 874, 881, 884, 902, 903, 913, 936, 939, 947, 949, 950, 970, 971, 973, 975, 976, 977, 981, 982, 985, 986, 988, 989, 990, 991, 995, 1002, 1003, 1004, 1005, 1006, 1012, 1016, 1017, 1018, 1019, 1022, 1023, 1024, 1026, 1027, 1031, 1032, 1033, 1034, 1036, 1038, 1105], "f_1": [107, 110, 115, 119, 137], "f_2": [110, 115], "f_i": 107, "f_onewai": 688, "fabacea": 224, "fabal": 224, "fabid": 224, "facilit": [116, 148, 149, 151, 218, 730, 855, 881, 983, 1039], "fact": 451, "factor": [134, 148, 149, 756, 759, 764, 871, 885], "factori": [237, 248, 249, 250, 262, 272], "fail": [116, 117, 134, 146, 148, 149, 150, 322, 760, 881, 1065, 1066, 1107], "fail_callback": [1066, 1107], "fail_f": 1107, "failur": [107, 1066, 1107], "fairli": 764, "faith": [1, 116, 134, 706], "faith_pd": [1, 134], "fall": [118, 123, 134, 149, 854], "fals": [1, 32, 33, 53, 66, 67, 68, 69, 70, 82, 83, 85, 88, 89, 90, 91, 95, 98, 99, 100, 110, 111, 112, 114, 116, 122, 134, 138, 139, 140, 146, 148, 149, 150, 166, 179, 220, 223, 224, 225, 226, 227, 228, 230, 233, 248, 249, 250, 277, 278, 291, 294, 296, 297, 298, 308, 320, 321, 338, 341, 343, 344, 356, 359, 361, 362, 372, 380, 382, 383, 384, 385, 387, 389, 396, 399, 400, 402, 403, 404, 406, 409, 410, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 451, 452, 453, 454, 455, 456, 458, 460, 467, 470, 472, 473, 474, 476, 479, 480, 481, 482, 483, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 506, 507, 509, 511, 518, 521, 523, 524, 525, 527, 530, 531, 532, 533, 534, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 557, 558, 559, 560, 562, 564, 571, 574, 575, 577, 578, 579, 581, 584, 585, 587, 588, 589, 590, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 623, 630, 633, 637, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 655, 656, 663, 665, 688, 693, 699, 705, 708, 709, 716, 718, 731, 732, 739, 741, 745, 747, 758, 761, 764, 765, 766, 788, 799, 832, 868, 876, 878, 881, 883, 884, 886, 903, 910, 911, 914, 922, 923, 924, 925, 933, 934, 936, 940, 943, 945, 946, 947, 950, 952, 973, 978, 979, 981, 982, 990, 996, 1000, 1001, 1006, 1014, 1017, 1018, 1019, 1027, 1029, 1030, 1032, 1034, 1043, 1065, 1088, 1102, 1105, 1107], "famili": 1, "far": 870, "farri": 1018, "farthest": 1018, "fasffbf": 226, "fast": [116, 148, 149, 765, 876, 928], "fasta": [93, 97, 226, 228, 233, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 1100], "fasta_fl": 225, "fasta_format": 225, "faster": [1, 116, 148, 149, 151, 409, 439, 452, 479, 530, 584, 614, 637, 760, 876, 1009], "fastq": [93, 97, 233, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 1100], "fastq_format": 226, "favor": [104, 698], "fc": 693, "fd": [116, 1064], "fdr_bh": [688, 693], "featur": [1, 118, 131, 217, 219, 225, 228, 234, 235, 298, 308, 311, 320, 322, 323, 325, 363, 382, 504, 557, 616, 685, 688, 693, 703, 856, 865, 868, 870, 871, 877, 878, 943, 1043, 1101, 1102, 1103], "feature_t": 227, "fecal": 885, "federhen": 236, "fee": [225, 232], "felsenstein": [225, 232, 1105], "fernand": 693, "fernandez": [685, 697], "ferr": 227, "fetch": [308, 943, 1105], "fetureid": 234, "few": [106, 116, 148, 149, 151, 913, 947, 1100, 1105, 1107], "fewer": [107, 232, 884, 885], "fff": 226, "ffffx": 226, "ffllssssyi": 441, "fglfmeqlttgdysksmrrivknrlpkfskfesslvngsfdfiginyysssi": 224, "fh": [220, 221, 222, 225, 226, 227, 228, 232, 233, 235, 236, 237, 248, 249, 250], "field": [1, 221, 226, 233, 441, 855, 913, 947], "fifth": 225, "fig": [1, 674, 723, 748, 866], "figur": [674, 723, 748, 866], "file": [93, 97, 177, 178, 190, 191, 218, 219, 220, 221, 222, 223, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 249, 262, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 295, 324, 326, 342, 360, 363, 376, 378, 379, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 674, 675, 681, 688, 706, 723, 724, 729, 748, 749, 755, 787, 820, 831, 866, 867, 869, 883, 887, 900, 901, 902, 903, 904, 908, 912, 913, 915, 919, 928, 934, 936, 937, 938, 941, 942, 947, 948, 949, 950, 953, 954, 975, 1013, 1037, 1063, 1064, 1105], "fileformaterror": 237, "filehandl": [93, 97, 177, 178, 190, 191, 237, 248, 249, 250, 269, 270, 271, 273, 274, 275, 277, 278, 324, 326, 378, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 867, 869, 938, 953, 1013, 1037], "filenam": 1063, "filepath": [93, 97, 177, 178, 190, 191, 269, 270, 271, 273, 274, 275, 277, 295, 324, 326, 342, 360, 376, 378, 379, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 761, 867, 869, 938, 953, 1013, 1037], "filesentinel": [237, 248, 250], "filter": [53, 84, 104, 233, 289, 290, 336, 337, 354, 355, 363, 372, 373, 403, 473, 524, 578, 761, 901, 902, 943, 1029, 1107], "filter_column": 373, "filter_f": 1029, "filter_fn": 911, "filter_id": [291, 338, 356, 372, 375], "final": [235, 764, 903, 948, 949, 1107], "find": [0, 117, 402, 404, 407, 410, 420, 422, 427, 429, 430, 472, 474, 477, 480, 488, 489, 494, 496, 497, 523, 525, 528, 531, 540, 541, 546, 548, 549, 552, 577, 579, 582, 585, 595, 597, 602, 604, 605, 641, 642, 647, 649, 757, 760, 764, 871, 885, 924, 970, 971, 983, 985, 986, 989, 990, 991, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1012, 1016, 1022, 1031, 1034, 1036, 1062], "find_al": [988, 990, 991], "find_by_func": [988, 989, 991], "find_by_id": [988, 989, 990], "find_motif": [422, 489, 541, 597, 642, 1102], "find_with_regex": [422, 489, 541, 597, 642, 1102], "fine": 950, "finit": [112, 114, 122, 139, 140], "firmicut": [930, 993, 994, 1029], "first": [1, 3, 50, 53, 98, 99, 100, 101, 102, 103, 104, 107, 116, 148, 149, 155, 166, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 250, 320, 325, 420, 422, 438, 439, 451, 488, 489, 540, 541, 595, 597, 613, 616, 641, 642, 658, 686, 687, 688, 693, 700, 711, 734, 756, 758, 788, 843, 855, 872, 881, 884, 908, 919, 949, 975, 979, 988, 989, 997, 1029, 1030, 1033, 1076, 1100, 1105, 1107], "fish": 855, "fisher": 117, "fit": [130, 693, 854, 856, 878, 1106], "five": [225, 236, 674, 688, 723, 748, 1039], "fix": [124, 229, 232], "fl": 225, "flag": [236, 1105], "flat": [227, 422, 489, 541, 597, 642], "flatfil": 224, "flatten": 875, "float": [84, 88, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 144, 145, 146, 148, 149, 150, 151, 154, 218, 220, 227, 229, 230, 234, 363, 380, 405, 411, 412, 426, 428, 475, 493, 495, 526, 545, 547, 580, 586, 587, 601, 603, 635, 646, 648, 670, 672, 683, 684, 688, 693, 697, 698, 702, 705, 706, 707, 721, 745, 758, 760, 762, 764, 777, 821, 866, 882, 884, 885, 886, 890, 913, 914, 916, 917, 928, 944, 947, 955, 970, 978, 979, 980, 985, 986, 995, 998, 1017, 1019, 1028, 1038, 1042], "float32": [218, 223, 760, 945], "float64": [1, 92, 218, 223, 400, 470, 521, 575, 633, 688, 752, 760, 855, 913, 947], "flush": 277, "fmet": 451, "fn": 1063, "focu": 237, "focus": [363, 878], "fold": [693, 1100], "folder": 1063, "follow": [1, 89, 90, 92, 104, 111, 116, 117, 134, 148, 149, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 298, 363, 382, 389, 417, 419, 460, 485, 487, 504, 511, 536, 538, 557, 564, 592, 594, 616, 623, 639, 640, 658, 666, 686, 687, 688, 691, 692, 694, 695, 696, 700, 702, 703, 706, 711, 734, 756, 757, 758, 760, 761, 765, 866, 870, 885, 974, 1012, 1066, 1100, 1105, 1107], "foo": [228, 234, 308, 616, 890, 903, 904, 913, 914, 929, 939, 947, 949, 950, 1064, 1107], "foobar": [904, 1107], "foral": [691, 692], "foraminifera": 108, "ford": 134, "form": [1, 65, 98, 279, 658, 707, 711, 730, 734, 752, 898, 899, 908, 912, 949, 1019, 1028], "formal": [226, 236, 685], "format": [3, 45, 93, 97, 177, 178, 190, 191, 251, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 280, 295, 298, 324, 326, 342, 345, 360, 363, 376, 378, 379, 381, 431, 436, 440, 441, 449, 498, 502, 503, 550, 555, 556, 606, 612, 615, 650, 653, 675, 676, 681, 707, 724, 725, 729, 730, 742, 747, 749, 750, 755, 787, 820, 831, 867, 869, 887, 908, 912, 913, 914, 915, 938, 945, 947, 948, 949, 953, 954, 973, 975, 993, 1013, 1037, 1039, 1104, 1105], "format_f": 947, "format_nam": [263, 264, 265], "format_object": 261, "format_url": 914, "format_vers": [219, 887, 913, 947, 954], "formatidentificationwarn": [269, 273], "former": 654, "formula": [118, 760], "forum": 234, "forward": [1, 439, 451, 452, 614], "fould": 978, "found": [53, 143, 219, 221, 224, 225, 226, 227, 230, 232, 235, 269, 271, 273, 275, 435, 501, 554, 611, 652, 668, 720, 744, 757, 758, 760, 885, 913, 947, 978, 988, 989, 990, 991, 1002, 1004, 1021, 1038], "foundat": 226, "four": [65, 226, 235, 382, 504, 557, 688, 866], "fourth": [3, 136], "fr": 1038, "frac": [107, 108, 109, 110, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 135, 136, 137, 141, 144, 145, 686, 687, 691, 696, 697, 698, 700, 701, 702, 703, 758, 878], "fraction": [108, 684, 885, 916, 979, 1105], "fraction_diff": [405, 475, 526, 580, 635], "fraction_sam": [405, 475, 526, 580, 635], "frame": [214, 220, 221, 439, 451, 452, 614, 693, 757, 993], "framework": [134, 685], "free": [236, 1065, 1107], "freedom": [693, 699, 705, 875, 882], "freq": [409, 424, 479, 491, 530, 543, 584, 599, 637, 644], "frequenc": [1, 84, 88, 106, 107, 119, 411, 412, 424, 426, 428, 491, 493, 495, 543, 545, 547, 586, 587, 599, 601, 603, 644, 646, 648, 881, 883, 885, 955, 975], "frequent": [890, 955, 977], "friedman": 688, "friedmanchisquar": 688, "from": [0, 1, 2, 3, 13, 14, 15, 16, 17, 18, 19, 34, 44, 45, 46, 47, 48, 50, 51, 52, 53, 65, 66, 67, 68, 69, 70, 75, 77, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 112, 114, 116, 123, 134, 138, 143, 144, 148, 149, 166, 177, 179, 190, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 248, 249, 250, 269, 273, 289, 296, 297, 298, 307, 308, 320, 321, 324, 327, 336, 343, 344, 354, 361, 362, 363, 376, 377, 378, 380, 382, 383, 384, 387, 389, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 441, 451, 452, 453, 454, 455, 458, 460, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 504, 505, 506, 509, 511, 514, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 562, 564, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 616, 617, 618, 621, 623, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 658, 665, 666, 669, 670, 672, 674, 675, 677, 678, 680, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 711, 718, 721, 723, 724, 726, 728, 734, 741, 745, 748, 749, 751, 752, 754, 756, 757, 758, 760, 761, 762, 764, 765, 766, 854, 855, 866, 867, 870, 871, 873, 874, 876, 881, 883, 884, 885, 886, 900, 901, 902, 903, 904, 906, 907, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 952, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1044, 1064, 1066, 1102, 1105, 1107], "from_": [665, 718, 741], "from_dict": [96, 756, 760, 765, 866, 883, 884], "from_hdf5": 947, "from_iter": 682, "from_ncbi": [441, 442, 451, 452, 613, 614], "from_path_seq": [16, 48], "from_tabular": [3, 17], "from_taxdump": 994, "from_taxonomi": [993, 1029], "front": [325, 703], "frontier": 134, "frozenset": [977, 1023, 1024], "fsvd": [760, 876], "ft_current": 298, "ftp": [224, 236, 298], "full": [124, 125, 222, 223, 688, 890, 903, 925, 991, 1063], "full_genome_avail": [911, 936], "fulli": [3, 134, 227, 1100], "fun": 1107, "func": [915, 939, 977, 990, 1015, 1021, 1032, 1045, 1078, 1089], "function": [1, 98, 99, 100, 106, 116, 117, 124, 125, 130, 133, 148, 149, 150, 151, 154, 225, 226, 233, 248, 249, 250, 263, 264, 265, 268, 298, 308, 320, 382, 405, 441, 475, 504, 526, 557, 580, 635, 654, 670, 683, 686, 687, 688, 691, 692, 693, 694, 695, 698, 703, 721, 745, 757, 758, 759, 760, 761, 762, 765, 854, 868, 871, 880, 883, 884, 885, 887, 903, 908, 911, 913, 915, 928, 936, 939, 941, 947, 948, 949, 950, 954, 973, 977, 980, 985, 990, 1015, 1021, 1029, 1032, 1039, 1040, 1042, 1043, 1044, 1045, 1063, 1065, 1077, 1078, 1088, 1089, 1100, 1101, 1102, 1105], "further": [237, 363, 884, 1105], "futher": 237, "futur": [116, 134, 148, 149, 225], "fuzzi": [228, 298, 299, 307, 308, 319, 320, 616], "g": [0, 1, 53, 70, 84, 85, 92, 100, 103, 118, 123, 130, 134, 151, 154, 220, 222, 224, 225, 226, 227, 229, 230, 231, 232, 234, 236, 237, 298, 327, 363, 376, 382, 389, 392, 397, 400, 401, 408, 409, 410, 411, 412, 422, 460, 463, 468, 470, 471, 478, 479, 480, 489, 504, 511, 514, 519, 521, 522, 529, 530, 531, 541, 557, 564, 567, 572, 575, 576, 583, 584, 585, 586, 587, 597, 616, 623, 626, 631, 633, 634, 636, 637, 642, 654, 658, 666, 672, 683, 688, 703, 706, 707, 711, 730, 734, 752, 756, 757, 759, 760, 866, 884, 885, 913, 930, 943, 947, 955, 976, 977, 982, 985, 989, 1017, 1018, 1019, 1020, 1022, 1023, 1029, 1032, 1033, 1034, 1036, 1038, 1065, 1100, 1102, 1105, 1107], "g1": 760, "g2": 760, "g_m": 691, "ga": [616, 1102], "gaa": 1102, "gaagcaatgc": 224, "gaagttgagt": 224, "gaatcaagcc": 224, "gabor": [53, 104], "gac": [423, 490, 542, 598, 643], "gacccgcuuu": 1102, "gacg": [423, 490, 542, 598, 643], "gacgtt": [414, 415, 482, 483, 533, 534, 589, 590], "gag": [435, 501, 554, 611, 652], "gagatagagt": 224, "gagcccgggc": [225, 232], "gagccgtggc": [225, 232], "gagcggaggc": 224, "gaggacttcg": 224, "gaggtattgg": 224, "gagrctc": [435, 501, 554, 611, 652], "gain": [363, 706, 876], "gair": 225, "gairaagccttggc": 232, "gamma": 107, "gap": [0, 3, 13, 15, 17, 19, 34, 44, 47, 52, 53, 83, 84, 88, 92, 98, 99, 100, 101, 102, 103, 166, 179, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 382, 399, 400, 403, 406, 407, 411, 412, 415, 422, 433, 434, 435, 437, 438, 439, 441, 451, 452, 453, 470, 473, 476, 477, 483, 489, 500, 501, 504, 521, 524, 527, 528, 534, 541, 553, 554, 557, 574, 575, 578, 581, 582, 586, 587, 590, 597, 608, 609, 610, 611, 613, 614, 616, 633, 642, 652, 683, 1029, 1102, 1107], "gap_char": [403, 453, 473, 524, 578], "gap_charact": [435, 501, 554, 611, 652], "gap_extend_penalti": [53, 98, 99, 100, 101, 102, 103], "gap_mod": 84, "gap_open_penalti": [53, 98, 99, 100, 101, 102, 103], "gapopen": [220, 221], "garbag": 277, "gardnerella": 885, "garrison": [53, 104], "gascuel": 1039, "gaston": 116, "gataccttca": 224, "gatcacttga": 224, "gatcttcccc": 224, "gatgcaacac": 224, "gather": [680, 728, 754, 1105], "gattattcta": 224, "gattttcgag": 224, "gauu": [427, 429, 494, 496, 546, 548, 602, 604, 647, 649], "gb": [221, 227], "gb_str": 227, "gbk": 227, "gc": [83, 224, 225, 226, 227, 228, 236, 382, 399, 400, 403, 406, 412, 433, 437, 442, 452, 470, 473, 476, 521, 524, 527, 557, 574, 575, 578, 581, 587, 608, 609, 633, 1102], "gc_content": [412, 587], "gc_frequenc": [411, 586], "gcaattttca": 224, "gcacatccct": 227, "gcacaucccu": 227, "gcagaagctg": 224, "gcagatgtg": 684, "gcatgcatgc": 228, "gcatggtcat": 224, "gcaugcaucugcauacguacguacgcaugca": 222, "gcaugcaucugcauacguacguacgcaugcagucgauacauacguacgucgguacgu": 222, "gcaugcaucugcauacguacguacgcaugcauca": 222, "gccaaaccca": 224, "gcccagtagcttcccaatatgagagcatcaattgtagatcgggcc": 0, "gccccccuuu": 1102, "gcgtatagtt": 224, "gcgtgcctaaggtatgcaag": 0, "gctaactaggctcccttctacccctctcagaga": 0, "gctgccgaga": 224, "gctgttattt": 224, "gcttcatctt": 224, "gen": [228, 1107], "gen1": 228, "gen2": 228, "gena": 298, "genbank": [224, 228, 236, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653], "gender": [706, 883, 884], "gene": [1, 228, 298, 308, 320, 323, 382, 616, 693, 699, 705, 887, 954, 1101], "gene_nam": 298, "genea": 900, "geneb": 900, "gener": [1, 14, 18, 19, 46, 50, 51, 52, 82, 85, 98, 104, 105, 106, 121, 126, 134, 136, 145, 151, 223, 226, 227, 228, 230, 235, 236, 248, 250, 263, 265, 269, 273, 276, 408, 422, 423, 478, 489, 490, 529, 541, 542, 583, 597, 598, 616, 636, 642, 643, 654, 693, 706, 756, 757, 758, 762, 854, 856, 866, 870, 881, 884, 885, 886, 913, 923, 924, 932, 936, 947, 1035, 1100, 1102, 1106], "generated_bi": [887, 914, 947, 948, 954], "generatortyp": [923, 925, 936], "genet": [225, 230, 232, 236, 438, 439, 441, 442, 448, 449, 450, 451, 452, 613, 614, 763, 1038, 1102], "genetic_cod": [613, 614], "geneticcod": [439, 613, 614, 1102], "genom": [1, 308], "genpept": 227, "gentil": 703, "genu": [1, 236], "geologi": 685, "geometr": [689, 691, 693, 703, 760], "geometri": [685, 687, 691, 692, 695], "geq": 878, "gerald": 703, "get": [105, 219, 223, 234, 277, 278, 307, 308, 441, 450, 706, 758, 854, 871, 911, 918, 919, 920, 921, 927, 929, 931, 933, 934, 952, 982, 1023], "get_alpha_diversity_metr": [1, 146, 153], "get_beta_diversity_metr": [1, 150, 152, 154], "get_column": 375, "get_id": [289, 290, 294, 336, 337, 341, 354, 355, 359, 373, 374], "get_max_dist": 986, "get_nam": 666, "get_trajectori": 765, "get_value_by_id": 906, "getaaafhwqaaf": 233, "getvalu": [222, 225, 226, 227, 228, 232, 235, 706], "gff": 228, "gff3": [227, 324, 326, 431, 440, 498, 503, 650, 653], "gff_str": 228, "gfgmvinn": 235, "gfp": 1102, "gfv": 235, "gg": [401, 407, 471, 477, 522, 528, 576, 582, 634], "gg_otu_1": [913, 914], "gg_otu_2": 914, "gg_otu_3": 914, "gg_otu_4": 914, "gg_otu_5": 914, "gga": 1102, "ggaa": [400, 470, 521, 575, 633], "ggacugaa": 1102, "ggag": [407, 477, 528, 582], "ggattgttta": 224, "ggca": 0, "ggctaacggt": 224, "ggg": 1102, "ggggagg": [407, 477, 528, 582], "gggtttttac": 224, "ggt": [235, 432, 499, 551, 607, 651], "ggta": 0, "ggtaccaacg": [432, 499, 551, 607, 651], "ggtacgcaag": 0, "ggtc": [403, 473, 524, 578], "ggtccattc": [403, 473, 524, 578], "ggtggtttct": 224, "ggtgtttagc": 224, "ggtt": 907, "ggu": [384, 455, 506, 559, 618], "gguc": [392, 394, 397, 405, 426, 427, 428, 429, 463, 465, 468, 475, 493, 494, 495, 496, 514, 516, 519, 526, 545, 546, 547, 548, 567, 569, 572, 580, 601, 602, 603, 604, 626, 628, 631, 635, 646, 647, 648, 649], "ggucg": [389, 401, 460, 471, 511, 522, 564, 576, 623, 634], "ggucguaaagga": [398, 469, 520, 573, 632], "ggucgugaag": 616, "ggucgugaagga": [384, 389, 455, 460, 506, 511, 559, 564, 616, 618, 623], "gi": [220, 221, 227], "gibb": 145, "gigasci": [866, 887, 954], "gilk": 764, "gini": [118, 139], "gish": [220, 221], "github": 866, "give": [1, 230, 870, 871, 878, 887, 954, 980, 1017], "given": [1, 13, 14, 15, 45, 46, 47, 93, 97, 107, 118, 121, 123, 130, 137, 141, 145, 146, 150, 151, 154, 177, 178, 190, 191, 215, 225, 226, 230, 231, 234, 248, 250, 266, 267, 269, 270, 273, 274, 321, 324, 326, 378, 381, 431, 435, 440, 498, 501, 503, 550, 554, 556, 606, 611, 615, 650, 652, 653, 670, 675, 681, 703, 721, 724, 729, 745, 749, 755, 757, 758, 761, 867, 869, 871, 875, 880, 882, 884, 918, 920, 928, 936, 938, 952, 953, 955, 990, 1013, 1017, 1019, 1034, 1035, 1036, 1037, 1064, 1065, 1077, 1107], "gkp1137": 226, "glahn": [685, 699, 705], "gln": 504, "global": [0, 98, 99, 100], "global_pairwise_align": [99, 100, 101, 102, 103], "global_pairwise_align_nucelotid": [98, 100, 101, 102, 103], "global_pairwise_align_nucleotid": 0, "global_pairwise_align_protein": [98, 99, 101, 102, 103], "glossari": 84, "glu": 504, "glucosidas": 224, "glutam": 504, "glutamin": 504, "glx": 504, "gly": 504, "glycin": [84, 504], "glycosyl": [422, 489, 528, 541, 597, 642, 1102], "go": [885, 943, 1105, 1107], "goa": 224, "goal": [234, 1100], "goldman": 134, "gonzalez": 866, "good": [106, 115, 119, 876], "goodrich": 978, "goods_coverag": [115, 137], "googl": 234, "gorilla": [225, 232], "gorlick": 235, "goto": 226, "gouet": [124, 125], "gov": [84, 99, 100, 102, 103, 220, 221, 225, 227, 233, 236, 441, 449, 450], "gracilibacteria": 441, "gradient": [118, 855, 870, 871, 876, 878], "gradientanova": [766, 788, 832, 843], "gradientanovaresult": [776, 798, 809, 842, 853], "graft": 1031, "gram": [694, 695], "grammar": [453, 616], "grammaredsequ": [65, 75, 80, 82, 85, 86, 98, 101, 222, 225, 232, 235, 382, 403, 406, 434, 504, 524, 527, 553, 557, 578, 581, 610, 1102], "grand": 955, "grant": [225, 232], "great": 106, "greater": [225, 308, 383, 454, 505, 558, 617, 693, 756, 758, 759, 760, 761, 764, 884, 885, 886, 919], "grei": 866, "group": [1, 143, 234, 436, 502, 555, 612, 665, 688, 693, 703, 718, 741, 756, 759, 760, 765, 766, 776, 777, 798, 809, 821, 831, 832, 842, 853, 855, 883, 884, 885, 898, 913, 918, 936, 947, 1065, 1101, 1105], "group1": 756, "group2": 756, "group3": 756, "group_md": 898, "group_observation_md": 918, "groupbi": 884, "groupresult": 777, "growth": [693, 884], "gsi": 703, "gt": [17, 91, 119], "gt10": 224, "gtaacctgag": 224, "gtaag": 3, "gtacct": [222, 232], "gtagaggacc": 224, "gtagct": [222, 232], "gtatct": 232, "gtcgaa": [222, 232], "gtt": [423, 490, 542, 598, 643], "gttaatgcca": 224, "gttactcaac": 224, "gttcggcctc": 224, "gttgaccaat": 224, "gttgggatta": 224, "gtttatccaa": 224, "guaaccugag": 224, "guanin": [382, 557], "guarante": [92, 125, 234, 382, 406, 476, 504, 527, 557, 581, 707, 762, 985], "guc": [389, 460, 511, 564, 623], "gucgauacauacguacgucgguacgu": 222, "gucgauacauacguacgucguacguacgu": 222, "guess": [93, 130, 177, 190, 225, 269, 273, 324, 378, 431, 498, 550, 606, 650, 675, 724, 749, 867, 938, 1013, 1041], "gunnerida": 224, "gut": [1, 234, 866], "gytai": 235, "gzip": [277, 947], "h": [53, 107, 108, 112, 114, 120, 121, 122, 134, 135, 137, 138, 139, 141, 145, 225, 232, 235, 278, 382, 504, 557, 976, 977, 982, 985, 1017, 1018, 1020, 1023, 1024, 1033, 1034, 1036, 1038, 1105], "h5grp": [913, 947], "h5py": [913, 947], "h_": 688, "h_0": 118, "h_b": 109, "h_i": 118, "h_n": 118, "ha": [1, 3, 53, 65, 83, 89, 90, 98, 99, 100, 105, 154, 166, 179, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 270, 274, 277, 294, 341, 359, 363, 376, 382, 399, 400, 403, 406, 416, 417, 418, 419, 430, 433, 437, 438, 439, 441, 451, 452, 453, 470, 473, 476, 484, 485, 486, 487, 497, 504, 521, 524, 527, 535, 536, 537, 538, 549, 557, 574, 575, 578, 581, 591, 592, 593, 594, 605, 608, 609, 613, 614, 616, 633, 638, 639, 640, 688, 690, 706, 854, 870, 872, 883, 884, 885, 903, 911, 928, 976, 996, 998, 1000, 1001, 1015, 1017, 1020, 1033, 1036, 1038, 1065, 1102, 1105], "habitat": 871, "had": [116, 148, 149, 756, 760, 885], "half": [123, 700], "halobacteria": [994, 1029], "ham": [405, 475, 526, 580, 635, 706, 1102], "hamadi": [116, 148, 149], "hand": [1, 876], "handbook": 225, "handi": [1065, 1107], "handl": [84, 92, 225, 226, 233, 235, 236, 237, 238, 248, 250, 277, 363, 376, 451, 452, 688, 758, 760, 761, 881, 890, 903, 928, 937, 1030, 1039, 1064, 1107], "handler": [238, 269, 271, 273, 275, 277], "happen": [230, 422, 489, 541, 597, 642, 1038, 1107], "hard": [116, 146, 148, 149, 150], "hardcod": 115, "harm": 700, "has_children": [1000, 1001], "has_definit": [402, 404, 414, 418, 430, 472, 474, 482, 486, 497, 523, 525, 533, 537, 549, 577, 579, 589, 593, 605], "has_degener": [404, 413, 418, 474, 481, 486, 525, 532, 537, 579, 588, 593], "has_gap": [410, 480, 531, 585], "has_missing_valu": [289, 291, 336, 338, 354, 356], "has_nuc_pattern": 1107, "has_stop": 552, "hash": [8, 26, 39, 59, 160, 171, 184, 197, 208, 243, 256, 771, 782, 793, 804, 815, 826, 837, 848, 861, 963, 1052, 1071, 1083, 1094], "hashabl": [65, 67, 854, 1088], "hashlib": 1064, "hasn": [616, 886, 950], "have": [0, 1, 19, 52, 53, 83, 86, 88, 91, 92, 104, 106, 116, 123, 135, 141, 148, 149, 214, 215, 216, 217, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 268, 277, 298, 308, 309, 310, 363, 372, 377, 387, 400, 406, 422, 451, 458, 470, 476, 489, 509, 521, 527, 541, 562, 575, 581, 597, 621, 633, 642, 656, 672, 688, 704, 706, 709, 732, 758, 764, 765, 787, 799, 820, 831, 854, 866, 870, 871, 872, 875, 876, 878, 879, 881, 883, 884, 885, 886, 911, 913, 928, 929, 930, 943, 947, 952, 955, 974, 975, 976, 985, 987, 988, 1012, 1017, 1018, 1019, 1026, 1028, 1029, 1033, 1034, 1040, 1042, 1105, 1107], "hcdt": 145, "hdf5": [218, 219, 223, 887, 913, 947, 954], "hdfgroup": 218, "hdist": 764, "he": 0, "header": [220, 221, 222, 226, 227, 229, 231, 234, 281, 287, 328, 334, 346, 352, 363, 364, 370, 375, 908, 912], "header_kei": [908, 949], "header_valu": [908, 949], "heagawghe": 0, "health": [688, 883, 884], "healthi": [883, 884, 885], "heatmap": [674, 723, 748], "heip": [120, 128], "heip_": 135, "held": 943, "hello": [398, 469, 520, 573, 632], "help": [234, 236, 1019], "helper": [6, 24, 37, 57, 73, 158, 169, 182, 195, 206, 241, 254, 283, 301, 313, 330, 348, 366, 390, 444, 461, 512, 565, 624, 659, 712, 735, 769, 780, 791, 802, 813, 824, 835, 846, 859, 891, 961, 1042, 1043, 1050, 1069, 1081, 1092, 1105], "henc": 758, "henikoff": [100, 103, 666], "here": [0, 1, 84, 107, 111, 116, 123, 130, 141, 146, 147, 148, 149, 150, 151, 152, 153, 219, 223, 224, 227, 232, 237, 248, 250, 278, 422, 489, 541, 597, 642, 688, 693, 764, 876, 878, 913, 947, 1030, 1039, 1105], "hernand": 703, "heterogen": 877, "heuer": 226, "heurist": [53, 760, 876], "hexdigest": 1064, "hgc": 236, "hi": 504, "hidden": 236, "hierarch": [236, 703], "hierarchi": [903, 992, 993, 1105], "high": [116, 148, 149, 225, 226, 693, 855, 866, 870, 876, 994, 1103], "higher": [84, 106, 654, 688, 693, 1077], "highest": [53, 230], "highli": [3, 84], "highlight": 226, "hill": [122, 134, 136, 138], "histidin": 504, "histor": [1, 132, 441], "histori": [116, 885], "hit": 221, "hoc": 881, "hochberg": [688, 693], "hoffmann": 134, "hold": [730, 776, 798, 809, 842, 853, 854, 876, 883, 944, 983, 1088], "hollow": [150, 218, 707, 745, 747, 762], "holm": [688, 693], "hommola": 764, "homogen": [760, 870, 878], "homolog": 654, "horizont": 92, "host": [236, 764], "host_dist": 764, "hot": 855, "hotton": 236, "hous": 883, "how": [80, 91, 92, 130, 225, 227, 234, 277, 327, 363, 400, 422, 434, 451, 452, 470, 489, 500, 521, 541, 553, 575, 597, 610, 633, 642, 699, 705, 758, 876, 881, 883, 884, 885, 887, 909, 928, 954, 1100, 1107], "howev": [1, 116, 117, 134, 146, 148, 149, 150, 225, 229, 230, 234, 236, 382, 504, 557, 616, 685, 693, 760, 764, 855, 876, 890, 950, 986, 1045], "hsp": [220, 221], "hstack": [883, 884], "htm": 757, "html": [84, 123, 219, 220, 222, 225, 227, 230, 232, 235, 298, 676, 707, 725, 730, 742, 750, 756, 757, 758, 759, 760, 866, 887, 913, 947, 954, 1038], "http": [53, 84, 98, 99, 100, 101, 102, 103, 104, 106, 107, 111, 123, 151, 218, 219, 220, 221, 222, 224, 225, 226, 227, 230, 232, 233, 234, 235, 236, 295, 342, 360, 363, 376, 379, 441, 449, 450, 676, 699, 703, 705, 707, 725, 730, 742, 750, 756, 757, 758, 759, 760, 866, 887, 913, 914, 947, 954, 1038, 1039, 1064], "huerta": 975, "hugh": 224, "human": [218, 225, 226, 229, 230, 231, 1044], "hundr": [1, 151], "hurlbert": [114, 139], "hwang": 107, "hydrogenosom": 236, "hypothesi": [685, 688, 693, 758, 761, 764, 881], "hypothet": 298, "h\u00e9bert": 703, "i": [0, 1, 3, 15, 19, 20, 47, 50, 52, 53, 65, 66, 67, 68, 69, 70, 72, 77, 79, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 154, 155, 177, 178, 190, 191, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 248, 249, 250, 262, 263, 265, 269, 270, 271, 272, 273, 274, 275, 277, 281, 287, 295, 298, 299, 305, 307, 308, 311, 317, 319, 320, 321, 322, 324, 326, 327, 328, 334, 342, 346, 352, 360, 363, 364, 370, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 389, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 448, 451, 452, 453, 454, 455, 456, 457, 458, 460, 467, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 518, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 571, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 630, 633, 634, 635, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 663, 665, 668, 673, 674, 675, 676, 679, 680, 681, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 716, 718, 720, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 739, 741, 742, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 764, 787, 799, 820, 831, 832, 843, 854, 855, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 890, 897, 900, 903, 904, 907, 908, 910, 911, 912, 913, 919, 922, 923, 924, 925, 928, 929, 930, 936, 937, 938, 939, 940, 943, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 960, 970, 973, 975, 977, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 993, 995, 997, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1012, 1013, 1017, 1018, 1019, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1049, 1062, 1063, 1064, 1065, 1066, 1076, 1077, 1088, 1099, 1100, 1102, 1105, 1106, 1107], "id": [0, 1, 65, 70, 89, 94, 95, 116, 134, 146, 148, 149, 150, 151, 154, 155, 214, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 281, 287, 290, 291, 293, 296, 297, 328, 334, 337, 338, 340, 343, 344, 346, 352, 355, 356, 358, 361, 362, 363, 364, 370, 372, 373, 375, 377, 380, 387, 396, 398, 417, 438, 439, 441, 450, 451, 452, 458, 467, 469, 485, 509, 518, 520, 536, 562, 571, 573, 592, 613, 614, 616, 621, 630, 632, 639, 655, 656, 658, 664, 665, 668, 670, 673, 677, 680, 699, 706, 707, 708, 709, 711, 717, 718, 720, 721, 722, 726, 728, 730, 731, 732, 734, 740, 741, 744, 745, 746, 747, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 799, 843, 856, 865, 866, 868, 883, 884, 885, 888, 897, 899, 900, 901, 902, 903, 904, 906, 907, 908, 910, 911, 912, 913, 914, 917, 919, 921, 923, 928, 929, 930, 934, 936, 937, 941, 942, 943, 946, 947, 949, 950, 951, 952, 974, 981, 991, 993, 994, 997, 1026, 1028, 1039, 1102], "id1": 234, "id2": 234, "id3": 234, "id_": [903, 911, 936, 950], "id_head": [296, 297, 343, 344, 361, 362, 375, 377, 380], "id_i": 925, "id_index": 1028, "id_j": 925, "id_list": 992, "id_map": 952, "id_pair": 154, "id_whitespace_replac": [225, 226], "idea": 884, "ideal": 237, "ident": [1, 220, 221, 230, 234, 658, 711, 730, 734, 764, 980, 1014, 1034, 1105], "identif": 101, "identifi": [95, 146, 150, 151, 154, 218, 222, 225, 226, 227, 228, 229, 232, 235, 236, 323, 363, 407, 528, 582, 706, 761, 881, 885, 921, 929, 952, 1100], "idptr": 223, "ids_to_keep": [290, 337, 355, 373, 911], "idx": [435, 501, 554, 611, 652], "ie": [412, 587], "igkeeiqqrl": 223, "ignor": [53, 84, 107, 116, 148, 149, 221, 222, 224, 225, 226, 229, 230, 234, 237, 372, 407, 408, 451, 452, 477, 478, 528, 529, 582, 583, 636, 668, 720, 744, 756, 757, 758, 759, 760, 876, 883, 884, 936, 947, 985, 1005, 1043, 1065, 1066, 1102, 1105, 1107], "ignore_axis_label": 1043, "ignore_direction": 1043, "ignore_metadata": 91, "ignore_method_nam": 1043, "ignore_non": 936, "ii": 881, "iii": 124, "ij": 758, "il": 504, "illumina": [226, 233], "illumina1": [226, 233], "illumina_1": 233, "illustr": [616, 756, 760], "iloc": 72, "ilr": [685, 695, 704], "ilr_inv": 704, "im": [228, 308, 320], "im1": 320, "im2": 320, "imagin": 230, "immedi": [225, 232, 997], "immut": [616, 1102], "implement": [0, 1, 98, 101, 106, 107, 111, 116, 123, 141, 147, 148, 149, 152, 153, 226, 230, 234, 237, 248, 249, 250, 251, 277, 363, 703, 855, 870, 871, 876, 877, 948, 949, 978, 1038, 1040], "impli": [84, 277, 764], "implicit": 928, "implicitli": [219, 223], "import": [0, 1, 3, 13, 14, 15, 17, 18, 19, 45, 46, 47, 50, 51, 52, 65, 66, 67, 68, 69, 70, 75, 77, 80, 82, 83, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 112, 116, 134, 148, 149, 166, 179, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 248, 249, 250, 298, 308, 320, 382, 383, 384, 387, 389, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 441, 451, 452, 453, 454, 455, 458, 460, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 501, 502, 504, 505, 506, 509, 511, 514, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 557, 558, 559, 562, 564, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 614, 616, 617, 618, 621, 623, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 654, 665, 666, 669, 672, 674, 677, 680, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 718, 723, 726, 728, 741, 748, 751, 752, 754, 756, 757, 758, 760, 761, 764, 765, 854, 855, 866, 881, 883, 884, 885, 886, 900, 901, 902, 903, 904, 906, 907, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 937, 939, 941, 942, 943, 944, 945, 946, 947, 949, 950, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1044, 1064, 1100, 1102, 1105, 1107], "import_modul": 237, "impos": [116, 148, 149], "improv": [91, 230, 232, 382, 504, 557, 745], "impur": 139, "imput": [685, 697], "incid": 764, "includ": [1, 84, 91, 93, 97, 105, 106, 116, 134, 136, 145, 148, 149, 153, 154, 177, 178, 190, 191, 222, 223, 224, 225, 226, 229, 230, 231, 232, 234, 235, 280, 295, 324, 326, 327, 342, 345, 360, 363, 364, 370, 375, 377, 378, 379, 381, 389, 398, 403, 411, 412, 422, 431, 435, 437, 438, 439, 440, 451, 452, 460, 469, 473, 489, 498, 501, 503, 511, 520, 524, 541, 550, 554, 556, 557, 564, 573, 578, 586, 587, 597, 606, 609, 611, 613, 614, 615, 623, 632, 642, 650, 652, 653, 654, 664, 666, 675, 681, 688, 706, 717, 724, 729, 740, 745, 749, 752, 755, 756, 757, 759, 760, 761, 765, 865, 866, 867, 868, 869, 871, 876, 877, 881, 885, 903, 908, 938, 945, 946, 951, 953, 970, 971, 973, 998, 1003, 1005, 1006, 1009, 1010, 1011, 1013, 1017, 1018, 1019, 1027, 1029, 1030, 1037, 1100, 1101, 1102, 1103, 1105, 1106], "include_collapsed_metadata": 903, "include_self": [977, 1003, 1006, 1009, 1010, 1011, 1027, 1030, 1105], "inclus": [277, 298, 319, 401, 420, 471, 488, 522, 540, 576, 595, 634, 641, 757], "incom": 975, "incomplet": [106, 382, 453, 504, 557, 616], "inconsist": 669, "incorpor": [1, 134, 684], "incorrect": 1, "incorrectli": 912, "increas": [693, 706, 707, 761, 762, 764, 854, 881, 884, 903, 950], "incub": 884, "ind": [881, 885], "inde": 764, "independ": [138, 439, 452, 614, 764, 776, 777, 798, 809, 842, 853, 928, 1030], "index": [0, 1, 14, 15, 18, 46, 47, 51, 65, 67, 70, 72, 79, 82, 85, 86, 90, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 108, 109, 112, 114, 118, 120, 121, 122, 123, 126, 127, 129, 135, 136, 138, 139, 140, 141, 144, 145, 146, 155, 214, 222, 223, 225, 232, 233, 235, 292, 296, 297, 339, 343, 344, 357, 361, 362, 363, 380, 389, 419, 460, 487, 511, 538, 564, 594, 623, 640, 655, 658, 677, 686, 687, 688, 693, 706, 708, 711, 726, 731, 734, 751, 752, 756, 757, 758, 759, 760, 765, 799, 843, 856, 866, 883, 890, 901, 903, 913, 929, 930, 933, 946, 947, 997, 1008, 1009, 1028, 1038, 1042], "indexerror": [890, 919], "indic": [1, 3, 15, 19, 33, 47, 52, 66, 67, 70, 79, 89, 90, 107, 110, 111, 128, 134, 154, 218, 225, 226, 234, 237, 281, 287, 298, 299, 305, 308, 311, 317, 328, 334, 346, 352, 363, 364, 370, 384, 387, 389, 396, 402, 404, 407, 408, 410, 413, 414, 415, 416, 417, 418, 419, 422, 427, 429, 430, 432, 435, 441, 442, 448, 455, 458, 460, 467, 472, 474, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 489, 494, 496, 497, 499, 501, 506, 509, 511, 518, 523, 525, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 546, 548, 549, 551, 552, 554, 559, 562, 564, 571, 577, 579, 582, 583, 585, 588, 589, 590, 591, 592, 593, 594, 597, 602, 604, 605, 607, 611, 618, 621, 623, 630, 636, 638, 639, 640, 642, 647, 649, 651, 652, 654, 688, 693, 704, 756, 758, 759, 760, 764, 854, 865, 866, 868, 883, 913, 947, 990, 992, 1032, 1077, 1088, 1105, 1107], "indicatd": 1107, "indirectli": 1018, "indiscern": 730, "individu": [1, 3, 106, 107, 108, 109, 112, 115, 116, 117, 119, 123, 126, 127, 128, 129, 130, 135, 137, 139, 141, 144, 148, 149, 218, 223, 225, 363, 654, 688, 883, 890, 1107], "indptr": [913, 947], "ineffici": [890, 1040], "inekmtlva": 223, "ineleg": 1009, "inequ": [79, 287, 305, 317, 334, 352, 370, 396, 448, 467, 518, 571, 630, 730, 876], "inf": [19, 52, 117, 234, 1021], "infeas": 225, "infect": 885, "infer": [227, 234, 269, 273, 295, 342, 360, 376, 379, 1063, 1100], "infern": 235, "infin": [121, 136, 145, 234], "infinit": [112, 1021], "infinitum": 230, "influenc": 121, "info": [53, 104, 308, 765, 821], "inform": [53, 84, 93, 97, 109, 126, 134, 136, 138, 177, 178, 190, 191, 220, 221, 222, 224, 225, 226, 227, 233, 234, 236, 298, 324, 326, 378, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 777, 821, 855, 867, 869, 878, 884, 885, 887, 903, 938, 953, 954, 1013, 1037, 1065, 1101, 1102, 1107], "infti": [121, 136, 145], "ingroup": 1019, "inher": [685, 764], "inherit": [236, 453, 616, 904], "inidic": [32, 53], "initi": [130, 225, 884, 1003, 1006, 1009, 1010, 1011, 1027, 1030, 1039, 1076], "initialize_st": 1107, "inlin": 234, "inner": [92, 230, 377, 400, 470, 521, 575, 633, 669], "inord": 1030, "inosin": 382, "inplac": [876, 911, 934, 935, 937, 940, 950, 952, 1021], "input": [98, 99, 100, 101, 102, 103, 104, 116, 134, 146, 148, 149, 150, 236, 248, 250, 277, 278, 308, 320, 405, 432, 451, 452, 475, 499, 526, 551, 580, 607, 635, 651, 682, 688, 693, 704, 707, 757, 758, 854, 866, 870, 871, 873, 877, 886, 912, 1031, 1038, 1039, 1099, 1102], "input_is_dens": 914, "ins": [3, 20, 34, 53, 65, 155, 166, 179, 192, 203, 238, 251, 280, 298, 308, 327, 345, 363, 382, 441, 453, 504, 557, 616, 654, 707, 730, 766, 777, 788, 799, 810, 821, 832, 843, 856, 887, 955, 1045, 1065, 1077, 1088], "insdc": [224, 227, 298, 327, 363, 376], "insensit": [234, 666, 688, 693], "insert": [230, 319, 976, 1017, 1019], "insert_length": 976, "insid": [227, 230], "insight": [148, 149], "insignific": 1, "instal": 1040, "instanc": [93, 97, 177, 178, 190, 191, 223, 237, 250, 263, 265, 266, 267, 269, 273, 308, 323, 324, 326, 378, 381, 400, 431, 440, 470, 498, 503, 521, 550, 556, 575, 606, 615, 633, 650, 653, 656, 666, 675, 681, 683, 684, 693, 707, 709, 724, 729, 730, 732, 747, 749, 755, 758, 760, 761, 762, 776, 798, 809, 842, 853, 866, 867, 869, 885, 886, 900, 904, 930, 938, 953, 955, 971, 1013, 1037, 1038, 1045, 1046, 1049, 1056, 1105, 1107], "instanti": [53, 224, 237, 453, 1107], "instead": [1, 88, 136, 224, 225, 227, 234, 237, 238, 248, 249, 250, 292, 321, 327, 339, 357, 409, 422, 424, 426, 428, 435, 479, 489, 491, 493, 495, 501, 530, 541, 543, 545, 547, 554, 584, 597, 599, 601, 603, 611, 637, 642, 644, 646, 648, 652, 707, 756, 758, 760, 875, 884, 885, 945, 946, 980, 981, 984, 1017, 1018, 1034, 1035, 1039, 1040, 1100], "institut": 226, "instruct": 1104, "instrument": 225, "int": [3, 13, 14, 15, 18, 19, 34, 45, 46, 47, 51, 52, 53, 77, 88, 95, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 154, 220, 227, 228, 233, 249, 277, 298, 308, 319, 323, 363, 389, 394, 401, 407, 408, 412, 420, 422, 423, 424, 426, 428, 432, 450, 460, 465, 471, 477, 478, 488, 489, 490, 491, 493, 495, 499, 511, 516, 522, 528, 529, 540, 541, 542, 543, 545, 547, 551, 564, 569, 576, 582, 583, 587, 595, 597, 598, 599, 601, 603, 607, 613, 614, 623, 628, 634, 636, 641, 642, 643, 644, 646, 648, 651, 672, 673, 684, 686, 687, 693, 699, 705, 722, 746, 756, 758, 759, 760, 761, 762, 764, 799, 843, 854, 866, 871, 875, 876, 878, 879, 882, 884, 885, 886, 903, 913, 919, 921, 943, 947, 955, 976, 980, 982, 991, 997, 998, 1007, 1008, 1017, 1019, 1021, 1033, 1038, 1043, 1044, 1064, 1077], "int32": [913, 947], "int64": [65, 83, 92, 399, 403, 433, 473, 524, 574, 578, 608, 616, 913, 947, 1102], "integ": [1, 53, 146, 150, 218, 220, 223, 225, 226, 229, 230, 231, 232, 233, 363, 389, 460, 511, 564, 623, 688, 693, 706, 707, 756, 759, 760, 761, 762, 843, 886], "intend": [1, 124, 125, 234, 382, 453, 504, 854, 866, 1042, 1043], "intens": 884, "interablemetadata": 320, "interact": [764, 1104], "interest": [1, 234, 616, 688, 706, 764, 870, 878, 884, 1002, 1004, 1019, 1107], "interfac": [89, 90, 147, 234, 417, 419, 485, 487, 536, 538, 592, 594, 639, 640, 654, 756, 757, 758, 759, 1038, 1100], "interleav": [232, 235], "intermedi": 976, "intern": [95, 219, 227, 230, 704, 973, 975, 977, 983, 985, 988, 997, 1007, 1012, 1029, 1031, 1032, 1033, 1100, 1105], "internet": [225, 236], "interpret": [1, 84, 112, 116, 137, 139, 146, 148, 149, 150, 218, 230, 234, 327, 363, 685, 870, 871, 878, 914], "interpro": 224, "interquantil": 123, "interrog": 1065, "intersect": [400, 470, 521, 575, 633, 928, 981], "interspecif": [114, 139], "interv": [106, 111, 115, 124, 224, 227, 228, 308, 309, 310, 311, 317, 319, 320, 321, 322, 323, 325, 382, 387, 399, 416, 437, 458, 484, 504, 509, 535, 557, 562, 574, 591, 616, 621, 638, 693, 882], "interval_metadata": [227, 228, 298, 308, 320, 323, 382, 387, 389, 416, 453, 458, 460, 484, 504, 509, 511, 535, 557, 562, 564, 591, 616, 621, 623, 638], "intervalmetadata": [228, 298, 307, 382, 504, 557, 616], "intracellular": 235, "introduc": [107, 118, 222, 225, 685], "intron": [425, 492, 544, 557, 600, 645], "intvl": 308, "inv_simpson": [114, 121, 136], "invalid": [1, 88, 92, 116, 134, 146, 148, 149, 150, 225, 376, 382, 504, 557, 757, 758, 866, 887, 954, 972, 977, 987, 999, 1008, 1012], "invalidate_cach": [977, 983], "invent": 226, "invers": [84, 112, 114, 121, 122, 136, 687, 692, 695, 701], "inverse_shannon_uncertainti": 84, "invert": [422, 489, 541, 597, 642, 911], "investig": 1, "involv": [106, 134, 686], "inward": 123, "io": [1, 93, 97, 116, 148, 149, 177, 178, 190, 191, 324, 326, 378, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 706, 724, 729, 749, 755, 866, 867, 869, 912, 915, 938, 953, 993, 1013, 1037, 1038, 1064, 1099, 1105], "io_registri": 237, "ionom": 703, "ioregistri": [237, 248, 250], "ipr001360": 224, "ipr013781": 224, "ipr017853": 224, "ipr033132": 224, "ipyparallel": 151, "ipython": 856, "irrelev": [98, 99, 100], "irsairagsnvkgfyawsfldcnewfagftvrfglnfvd": 224, "is_circular": 228, "is_reverse_compl": [433, 608], "is_root": [996, 1001, 1105], "is_tip": [977, 996, 1000, 1105], "is_zero_bas": 33, "ism": [116, 148, 149], "isn": [65, 82, 85, 92, 118, 234, 235, 248, 250, 278, 298, 694, 695, 886, 930], "isnapshgnakpsystnpmtnisfekhgiplgpraasiwiyvypymfiqedf": 224, "iso": [913, 947], "isoleucin": 504, "isometr": [685, 686, 687, 694, 695], "isometri": [691, 692, 694, 695], "isomorph": [230, 691, 692, 694, 695], "issu": [224, 225, 226, 234, 249, 1039, 1100], "isubsampl": 886, "item": [98, 99, 100, 101, 102, 103, 104, 235, 409, 432, 479, 499, 530, 551, 584, 607, 616, 637, 651, 665, 680, 718, 728, 741, 754, 854, 886, 907, 943, 977, 1021, 1028, 1029, 1065, 1066, 1076, 1107], "iter": [65, 75, 80, 85, 91, 98, 99, 100, 101, 102, 103, 104, 105, 146, 150, 151, 154, 214, 215, 216, 217, 223, 233, 290, 298, 319, 320, 321, 323, 337, 355, 373, 389, 392, 397, 400, 408, 422, 432, 435, 460, 463, 468, 470, 478, 489, 499, 501, 511, 514, 519, 521, 529, 541, 551, 554, 564, 567, 572, 575, 583, 597, 607, 611, 623, 626, 631, 633, 636, 642, 651, 652, 654, 665, 668, 670, 672, 680, 688, 718, 720, 721, 728, 741, 744, 745, 754, 757, 760, 761, 854, 866, 884, 885, 893, 903, 904, 911, 912, 913, 924, 925, 928, 936, 942, 950, 964, 981, 984, 985, 994, 998, 1002, 1003, 1004, 1006, 1009, 1010, 1011, 1017, 1018, 1019, 1020, 1021, 1027, 1030, 1062, 1064, 1066, 1088, 1105, 1107], "iter_": [925, 1066], "iter_km": [409, 479, 530, 584, 637], "its": [1, 15, 47, 65, 82, 83, 85, 86, 89, 90, 91, 92, 98, 99, 100, 121, 132, 224, 225, 226, 227, 230, 231, 235, 237, 250, 277, 298, 308, 363, 377, 409, 416, 417, 419, 424, 479, 484, 485, 487, 491, 530, 535, 536, 538, 543, 584, 591, 592, 594, 599, 616, 637, 638, 639, 640, 644, 658, 666, 689, 711, 734, 757, 865, 870, 872, 875, 880, 911, 955, 977, 981, 998, 1008, 1009, 1017, 1018, 1019, 1024, 1029, 1030, 1033, 1038, 1039, 1063, 1100, 1105], "itself": [166, 179, 192, 203, 225, 232, 236, 278, 298, 382, 441, 504, 557, 616, 654, 764, 856, 911, 935, 950, 955, 1102], "itypeerror": 150, "iupac": [225, 226, 232, 233, 382, 412, 441, 451, 504, 557, 587, 616, 1102], "iv": [123, 134], "j": [98, 100, 101, 103, 106, 114, 116, 119, 120, 130, 134, 135, 148, 149, 218, 220, 221, 225, 226, 227, 235, 236, 504, 665, 666, 680, 685, 694, 695, 696, 697, 699, 703, 705, 718, 728, 741, 754, 758, 759, 760, 871, 925, 985, 1018, 1033, 1038], "j00123": 227, "j04373": 235, "jag": 930, "jaim": 975, "januari": 136, "je": 764, "jet": 1, "jim": 226, "jj": [699, 705], "joe": 232, "join": [91, 220, 221, 226, 233, 235, 236, 377, 400, 470, 521, 575, 633, 904, 1029, 1038, 1039], "joint": 227, "joseph": [225, 232, 1105], "jost": [121, 134, 138], "journal": [53, 104, 107, 110, 117, 134, 135, 138, 141, 145, 227, 699, 705, 756], "json": [887, 914, 948, 954], "json_obj": 914, "json_tabl": 914, "juli": [53, 104], "julia": 978, "june": 230, "jupyt": 866, "just": [123, 124, 125, 130, 237, 897, 908, 925, 928, 949, 1020, 1033, 1100, 1105, 1107], "justif": 123, "jyzox": 226, "k": [53, 106, 107, 112, 119, 122, 134, 135, 136, 138, 139, 140, 141, 145, 151, 382, 409, 423, 424, 479, 490, 491, 504, 530, 542, 543, 557, 584, 598, 599, 637, 643, 644, 654, 666, 684, 703, 757, 764, 985, 1021, 1028, 1033, 1038], "k_": 881, "k__a": 903, "ka": 226, "kan": 236, "kannan": 236, "karsch": 236, "keemei": 234, "keep": [223, 227, 234, 321, 389, 460, 511, 564, 623, 854, 901, 902, 911, 923, 928, 1020], "kegg_pathwai": [913, 930, 947], "kei": [23, 65, 82, 85, 86, 89, 94, 105, 224, 225, 227, 235, 319, 323, 382, 406, 417, 425, 432, 476, 485, 492, 499, 504, 527, 536, 544, 551, 557, 581, 592, 600, 607, 616, 639, 645, 651, 670, 721, 745, 903, 907, 930, 952, 1007, 1028, 1038, 1107], "kellei": [148, 149], "kempton": 123, "kendalltau": 758, "kept": 227, "kestrel": 235, "keto": 382, "keyerror": [760, 930], "keyword": [93, 97, 104, 177, 178, 190, 191, 224, 227, 229, 249, 269, 270, 271, 273, 274, 275, 323, 324, 326, 378, 381, 425, 431, 438, 439, 440, 492, 498, 503, 544, 550, 556, 600, 606, 613, 614, 615, 645, 650, 653, 675, 681, 724, 729, 749, 755, 867, 869, 938, 953, 1013, 1037], "khovanskaya": 236, "kill": 700, "kind": 870, "kinet": 130, "kingdom": [220, 221, 236], "kit": 1099, "kj": 116, "klein": 227, "kmer": [423, 424, 490, 491, 542, 543, 598, 599, 643, 644, 684], "kmer_frequ": [409, 479, 530, 584, 637], "knight": [114, 116, 148, 149, 866], "know": [1, 53, 116, 148, 149, 222, 225, 232, 235, 237, 688, 881, 1040, 1100], "knowledg": [1017, 1100], "known": [107, 139, 230, 269, 273, 703, 704, 871, 876, 1102], "kortlev": 235, "kqlaaargqr": 223, "kr": 756, "kruskal": [688, 884, 885], "kuo": 107, "kva": [439, 452, 614], "kw": 224, "kwarg": [93, 97, 104, 146, 150, 151, 154, 155, 166, 177, 178, 179, 190, 191, 192, 203, 248, 250, 262, 269, 270, 271, 272, 273, 274, 275, 278, 279, 324, 326, 378, 381, 431, 438, 439, 440, 498, 503, 550, 556, 606, 613, 614, 615, 650, 653, 654, 675, 681, 724, 729, 749, 755, 843, 867, 869, 887, 915, 938, 953, 1013, 1037, 1065, 1100], "kwarg1": 237, "kz": 226, "l": [53, 108, 109, 116, 121, 123, 124, 134, 138, 144, 224, 226, 236, 451, 504, 703, 758, 855, 870, 871, 878, 1029], "l1": 67, "l2": 67, "l3": 67, "lab": [866, 884], "label": [65, 67, 70, 72, 82, 85, 86, 92, 94, 95, 96, 222, 225, 227, 232, 234, 235, 674, 703, 706, 723, 748, 756, 757, 759, 760, 761, 856, 866, 936, 975, 1043], "labor": 884, "lack": 970, "lafond": 703, "lahaeavhvyktkyqayqkgkigitlvsnwlmplddnsipdikaaersldfq": 224, "lambda": [224, 854, 881, 884, 885, 903, 911, 915, 936, 939, 941, 950, 977, 990, 1012, 1015, 1021, 1032, 1038, 1039, 1107], "lane": 233, "lane_numb": 233, "langl": [694, 696], "languag": [2, 166, 223], "lapoint": 703, "larg": [53, 117, 123, 148, 149, 218, 225, 232, 697, 698, 757, 878, 884, 913, 973, 980], "larger": [84, 121, 884], "largest": [53, 144, 924, 937], "last": [83, 166, 224, 232, 422, 451, 489, 541, 597, 616, 642, 758, 855, 1107], "latent": [166, 192, 216, 217], "later": [226, 883], "latter": [1, 106, 654, 984], "law": 115, "layout": 227, "lb": 226, "lca": [116, 134, 975, 1004, 1019], "ldot": [686, 687, 691, 692, 694, 695, 700, 701, 702], "lead": [116, 146, 148, 149, 150, 225, 226, 229], "learn": [887, 954], "least": [89, 90, 130, 230, 234, 363, 407, 416, 417, 419, 477, 484, 485, 487, 528, 535, 536, 538, 582, 591, 592, 594, 638, 639, 640, 688, 758, 866, 884, 885, 1041, 1107], "leav": [123, 224, 434, 500, 553, 610, 911, 934], "lee": [53, 104, 107], "leesleyqqf": 223, "left": [92, 107, 138, 230, 295, 342, 360, 377, 379, 686, 687, 691, 696, 700, 701, 702, 703, 975, 997, 1042, 1043, 1105], "left_child_id": 1028, "leftmost": 236, "legaci": [220, 221, 225], "legal": 277, "legend": 866, "legendr": [758, 855, 870, 871, 873, 874, 876, 877, 878], "len": [53, 65, 77, 394, 465, 516, 569, 628, 666, 762, 885, 981, 1024, 1038, 1107], "length": [0, 1, 3, 13, 14, 15, 18, 19, 34, 46, 47, 50, 51, 52, 53, 65, 82, 83, 85, 91, 98, 99, 100, 116, 134, 148, 149, 166, 179, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 235, 308, 320, 382, 383, 389, 394, 399, 400, 401, 403, 406, 409, 411, 412, 422, 423, 424, 426, 427, 428, 429, 433, 434, 435, 437, 438, 439, 441, 451, 452, 453, 454, 460, 465, 470, 471, 473, 476, 479, 489, 490, 491, 493, 494, 495, 496, 500, 501, 504, 505, 511, 516, 521, 522, 524, 527, 530, 541, 542, 543, 545, 546, 547, 548, 553, 554, 557, 558, 564, 569, 574, 575, 576, 578, 581, 584, 586, 587, 597, 598, 599, 601, 602, 603, 604, 608, 609, 610, 611, 613, 614, 616, 617, 623, 628, 633, 634, 637, 642, 643, 644, 646, 647, 648, 649, 652, 670, 683, 684, 688, 693, 721, 745, 756, 759, 760, 764, 875, 876, 884, 885, 913, 947, 955, 970, 976, 985, 986, 995, 998, 1017, 1018, 1019, 1026, 1028, 1031, 1032, 1033, 1034, 1036, 1039, 1102, 1105, 1107], "lengtherror": 1018, "leq": 685, "less": [53, 107, 116, 125, 148, 149, 151, 232, 234, 423, 424, 490, 491, 542, 543, 598, 599, 643, 644, 684, 758, 761, 854, 870, 886, 903, 943, 1007, 1044], "lesser": 134, "let": [1, 225, 226, 228, 232, 233, 235, 298, 308, 432, 499, 551, 607, 616, 651, 688, 758, 854, 880, 881, 884, 885, 924, 1040, 1102, 1105, 1107], "letter": [114, 116, 225, 227, 504], "leu": 504, "leucin": 504, "level": [95, 124, 230, 277, 363, 688, 883, 884, 993, 1045, 1102], "levelord": [1006, 1009, 1010, 1011, 1027, 1030], "leven": 760, "lewi": 134, "lexicon": [225, 226, 232], "lfc_result": 693, "li": 134, "librari": [53, 104, 148, 149, 225, 1099, 1100], "libreria": 118, "licens": 1099, "life": 116, "like": [1, 98, 99, 100, 151, 225, 227, 228, 229, 231, 234, 237, 425, 492, 544, 600, 645, 654, 706, 764, 787, 799, 820, 821, 831, 843, 876, 878, 884, 885, 908, 912, 915, 919, 948, 949, 1064, 1100, 1107], "likelihood": 654, "likelyhood": [875, 879], "likewis": [92, 134, 235], "limit": [1, 115, 220, 230, 231, 232, 883, 884, 1039], "limits_": [691, 692, 695, 696, 703], "linalg": 880, "linamaras": 224, "line": [118, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 277, 884, 912, 915, 973], "lineag": [236, 884, 994, 1029], "lineage_map": 994, "linear": [118, 224, 227, 856, 871], "link": [150, 307, 363, 757, 764, 955], "linkag": [885, 992], "linkage_matrix": 992, "linnean": 134, "linux": 919, "lipman": [220, 221, 225], "list": [1, 50, 104, 116, 134, 148, 149, 152, 153, 214, 220, 224, 226, 227, 228, 231, 234, 235, 236, 237, 248, 250, 266, 267, 277, 308, 432, 499, 551, 607, 616, 651, 664, 668, 671, 704, 706, 717, 720, 740, 744, 758, 760, 761, 777, 799, 810, 832, 865, 881, 883, 884, 885, 903, 907, 911, 912, 913, 915, 924, 930, 936, 941, 942, 947, 955, 971, 977, 985, 987, 989, 992, 1002, 1004, 1005, 1021, 1022, 1026, 1028, 1029, 1038, 1039, 1100, 1107], "liter": 230, "literatur": [1, 112, 138, 885], "live": [1, 322], "lkwh": [439, 452, 614], "ll": [1, 116, 148, 149, 757, 758, 761, 855, 881, 884, 885, 1105, 1107], "lladser": [124, 125, 148, 149], "lladser_ci": 125, "lladser_p": 124, "ln": [109, 117, 123, 126, 686, 688, 691, 696, 703], "load": [0, 223, 225, 226, 231, 233, 234, 295, 342, 360, 363, 379, 666, 688, 706, 707, 756, 757, 760, 761, 913, 1063, 1064, 1100], "loc": [72, 616, 688, 884], "local": [0, 101, 102, 103, 220, 221, 227], "local_pairwise_align": [98, 99, 100, 102, 103], "local_pairwise_align_nucleotid": [98, 99, 100, 101, 103], "local_pairwise_align_protein": [0, 98, 99, 100, 101, 102], "local_pairwise_align_ssw": [0, 98, 99, 100, 101, 102, 103], "locat": [53, 93, 97, 177, 178, 190, 191, 224, 230, 235, 263, 264, 265, 298, 324, 326, 378, 381, 407, 408, 431, 440, 477, 478, 498, 503, 528, 529, 550, 556, 582, 583, 606, 615, 636, 650, 653, 675, 681, 724, 729, 749, 755, 867, 869, 932, 938, 953, 1013, 1017, 1019, 1037, 1042, 1106], "loci": 53, "locu": [224, 227, 236], "log": [126, 135, 136, 685, 686, 687, 688, 691, 692, 693, 694, 695, 699, 705], "log2": 693, "log_b": [136, 138], "logarithm": [135, 136, 138, 688], "logic": [3, 237, 1065], "logratio": 685, "long": [222, 225, 232, 234, 407, 477, 528, 582, 686, 757, 843, 870], "long_method_nam": [856, 1043], "longer": [225, 232, 685, 885], "look": [105, 229, 231, 232, 237, 323, 432, 499, 551, 607, 613, 614, 651, 658, 688, 711, 734, 866, 883, 884, 885, 908, 977, 1088, 1105, 1107], "lookup": [98, 99, 100, 101, 102, 103, 263, 264, 265, 658, 711, 734, 758, 761, 972, 983, 987, 997, 999, 1008, 1012, 1028, 1065], "lookup_id": [655, 673, 708, 722, 731, 746], "loop": 225, "loos": [1, 764], "lorenz": 118, "lose": [760, 876], "loss": [116, 764], "lost": [760, 876], "lot": 870, "love": [887, 954], "lovel": [699, 705], "low": [125, 855, 876, 884, 943, 994], "lower": [106, 123, 124, 225, 232, 298, 363, 688, 693, 745, 752, 758, 854, 855, 885], "lower_bound": [111, 115, 124], "lower_quantil": 123, "lowercas": [53, 224, 225, 226, 227, 233, 382, 400, 453, 470, 504, 521, 557, 575, 616, 633], "lowest": [116, 134, 1002, 1004, 1019], "lowest_common_ancestor": 1002, "lozupon": [116, 148, 149], "lq": 123, "lsmat": [675, 681, 724, 729, 749, 755], "luca": 975, "ly": 504, "lysin": 504, "m": [50, 53, 101, 107, 114, 116, 121, 134, 148, 149, 220, 221, 224, 226, 232, 236, 382, 441, 442, 451, 504, 557, 666, 757, 760, 764, 866, 870, 871, 877, 878, 880, 883, 913, 919, 947, 1020, 1039], "m1": 980, "m2": 980, "m24803": 235, "m24804": 235, "m_shape": 880, "ma": [15, 19, 47, 52, 107, 435, 501, 554, 611, 652], "machin": 233, "machine_nam": 233, "macrophag": 884, "madden": 225, "made": [65, 130, 616, 688, 707, 730, 854, 903, 971, 988, 989, 1012, 1041], "magnitud": [130, 693, 758, 760, 876, 1040], "magnoliophyta": 224, "magnuson": 134, "magurran": [123, 129], "mai": [1, 20, 53, 84, 94, 112, 116, 125, 138, 221, 224, 225, 226, 227, 229, 230, 232, 234, 235, 236, 237, 249, 266, 267, 277, 298, 322, 363, 375, 376, 382, 409, 453, 479, 504, 530, 557, 584, 616, 637, 654, 658, 668, 683, 688, 706, 711, 720, 734, 744, 758, 760, 764, 854, 870, 881, 883, 884, 885, 886, 903, 993, 1033, 1040, 1063, 1065, 1100, 1102], "main": 327, "mainli": [765, 855], "maintain": [225, 230, 237, 747, 870, 871, 881, 884], "major": [83, 106, 138, 685, 752, 913, 947, 1038], "make": [84, 92, 121, 225, 230, 234, 237, 295, 342, 360, 363, 379, 442, 658, 683, 711, 734, 756, 760, 885, 1025, 1028, 1029, 1039, 1045, 1065, 1107], "mam": 236, "manag": [277, 278, 279], "mandal": 688, "mani": [1, 107, 133, 153, 230, 234, 654, 685, 688, 764, 870, 876, 884, 885, 903, 1107], "manipul": [0, 89, 90, 234, 363, 417, 419, 485, 487, 536, 538, 592, 594, 616, 639, 640, 685, 706, 913, 1033, 1036], "mann": 688, "manner": [83, 225, 232, 389, 403, 460, 473, 511, 524, 564, 578, 623, 758, 876], "mannwhitneyu": 688, "mantel": [1, 706, 761, 764], "manual": [107, 111, 123, 234, 1038], "map": [1, 86, 94, 151, 251, 363, 376, 758, 761, 764, 765, 799, 843, 866, 868, 883, 885, 903, 936, 952, 994, 997, 1102], "map_async": 151, "map_f": 151, "mapper": 868, "mar": [98, 101, 120], "marchand": 703, "margalef": 129, "marguerat": [699, 705], "margush": 1038, "marin": 757, "mark": [224, 227, 235, 1107], "marrow": 884, "marth": [53, 104], "marti": [759, 760], "martin": [685, 697], "mask": [15, 19, 47, 52, 53, 435, 501, 554, 611, 652, 699, 705], "mask_auto": 53, "mask_gap": [435, 501, 554, 611, 652], "mask_length": 53, "maskedarrai": [15, 19, 47, 52], "mat": [654, 666, 669, 672, 686, 687, 689, 690, 691, 692, 694, 695, 697, 698, 699, 1026], "match": [0, 50, 53, 82, 85, 92, 99, 102, 105, 220, 225, 226, 234, 277, 278, 291, 296, 297, 338, 343, 344, 356, 361, 362, 363, 375, 377, 380, 387, 407, 408, 426, 428, 429, 436, 451, 458, 477, 478, 493, 495, 496, 502, 509, 528, 529, 545, 547, 548, 555, 562, 582, 583, 601, 603, 604, 612, 621, 636, 646, 648, 649, 672, 707, 756, 758, 760, 761, 881, 883, 884, 885, 979, 980, 989, 991, 1102, 1107], "match_frequ": [428, 495, 547, 603, 648, 1102], "match_scor": [53, 99, 102, 105], "matevz": 703, "math": 137, "mathbb": [686, 687, 688, 691, 692, 694, 695], "mathemat": [112, 136, 138, 148, 685, 855, 975, 978, 1038], "mathemt": 149, "matplotlib": [674, 723, 748, 856, 866], "matric": [1, 100, 103, 218, 229, 504, 654, 656, 663, 666, 671, 706, 707, 709, 716, 732, 739, 757, 758, 761, 763, 764, 872, 876, 980, 1018], "matrix": [1, 53, 105, 146, 150, 151, 154, 155, 215, 435, 501, 554, 611, 652, 654, 655, 656, 658, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 678, 679, 680, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 711, 716, 717, 718, 719, 720, 721, 722, 723, 727, 728, 730, 731, 732, 734, 739, 740, 741, 743, 744, 745, 746, 747, 748, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 764, 855, 866, 868, 870, 872, 873, 874, 876, 877, 878, 880, 882, 887, 888, 890, 903, 913, 914, 917, 932, 939, 943, 945, 946, 947, 954, 992, 1026, 1039, 1104], "matrix_data": [887, 954], "matrix_element_typ": 914, "matrix_rank": 880, "matsen": 134, "matter": [234, 299, 320, 658, 711, 734], "matthew": 1038, "matto": 703, "max": [53, 107, 108, 121, 130, 136, 884, 885, 924, 995], "max_count": [881, 884, 885], "max_i": 144, "max_sample_count": 924, "max_width": 225, "maxim": [53, 134, 757, 871], "maxima": 927, "maximum": [135, 144, 225, 226, 688, 693, 757, 799, 854, 871, 875, 879, 884, 885, 927, 980], "mccoi": 134, "mcdonald": [887, 954], "mcentyr": 225, "mci": 1102, "mcintosh": [127, 128], "mcintosh_": 127, "mcintosh_d": 128, "mcmorri": 1038, "md": [225, 899, 907, 911, 936, 950], "md5": [224, 1064], "md_i": 925, "md_j": 925, "mdfivaifalfvissftitstnaveastlldignlsr": 224, "mean": [228, 230, 237, 277, 308, 323, 382, 411, 412, 586, 587, 665, 680, 685, 688, 691, 693, 703, 718, 728, 741, 754, 821, 843, 870, 874, 875, 876, 879, 881, 882, 884, 885, 913, 947, 1100, 1105], "meaning": [53, 82, 85, 92, 876, 1102], "measur": [1, 112, 114, 120, 121, 122, 123, 124, 125, 128, 129, 133, 134, 135, 136, 138, 139, 141, 148, 149, 654, 688, 699, 705, 706, 870, 883, 884, 955, 975, 1101], "mechan": [1065, 1107], "media": 884, "median": [688, 760], "medic": 224, "medlin": 235, "meepqsdpsv": [435, 501, 554, 611, 652], "meet": [104, 234, 323, 375, 376, 1032], "member": [269, 273, 1065, 1088, 1107], "membership": 237, "meme_v4": 222, "memo": [69, 310, 386, 457, 508, 561, 620, 957], "memori": [3, 118, 222, 223, 225, 226, 227, 232, 233, 235, 363, 706, 761, 854, 876, 887, 954, 1064, 1100], "mengyao": [53, 104], "menhinick": 126, "menopaus": 885, "menten": 130, "mention": 230, "merg": 363, "merged_t": 928, "messag": [1, 116, 146, 148, 149, 150, 777, 821, 1044, 1100], "met": [1, 504, 1088], "met_neg": 885, "met_po": 885, "meta": [234, 883, 884], "metabolit": [1, 885, 887, 954, 1101], "metabolite_test": 885, "metadata": [0, 1, 65, 70, 79, 82, 83, 85, 89, 90, 91, 92, 94, 95, 219, 222, 224, 225, 226, 227, 228, 232, 233, 382, 387, 389, 396, 398, 399, 400, 403, 406, 416, 417, 419, 425, 432, 433, 437, 438, 439, 441, 451, 452, 453, 458, 460, 467, 469, 470, 473, 476, 484, 485, 487, 492, 499, 504, 509, 511, 518, 520, 521, 524, 527, 535, 536, 538, 544, 551, 557, 562, 564, 571, 573, 574, 575, 578, 581, 591, 592, 594, 600, 607, 608, 609, 613, 614, 616, 621, 623, 630, 632, 633, 638, 639, 640, 645, 651, 670, 721, 745, 757, 765, 777, 799, 810, 821, 843, 866, 878, 881, 883, 884, 885, 888, 898, 899, 901, 902, 903, 907, 908, 911, 913, 914, 915, 918, 923, 928, 930, 936, 945, 946, 947, 949, 950, 951, 1099, 1102, 1103], "metadata_f": 903, "metadata_field": [913, 947], "metadata_formatt": [908, 949], "metadata_i": 925, "metadata_j": 925, "metadata_map": [765, 766, 788, 799, 832, 843], "metadatacolumn": [280, 281, 287, 289, 290, 345, 346, 352, 354, 355, 363, 374], "metadatafileerror": 376, "metag": 900, "metagenom": 900, "metatdata": 224, "metdata": [616, 928], "methionin": [451, 504], "method": [0, 1, 3, 19, 20, 34, 52, 53, 65, 72, 84, 92, 93, 97, 98, 118, 146, 148, 150, 151, 154, 155, 166, 177, 178, 179, 190, 191, 192, 203, 219, 223, 231, 234, 238, 248, 250, 251, 268, 280, 298, 308, 319, 324, 326, 327, 345, 363, 378, 381, 382, 385, 386, 400, 409, 431, 433, 439, 440, 441, 450, 452, 453, 456, 457, 470, 479, 498, 503, 504, 507, 508, 521, 530, 550, 556, 557, 560, 561, 575, 584, 606, 608, 614, 615, 616, 619, 620, 633, 637, 650, 653, 654, 675, 681, 685, 688, 693, 697, 703, 706, 707, 724, 729, 730, 747, 749, 755, 756, 757, 758, 759, 760, 761, 766, 777, 787, 788, 799, 810, 820, 821, 831, 832, 843, 854, 856, 866, 867, 869, 870, 871, 876, 887, 937, 938, 947, 953, 955, 973, 975, 976, 977, 980, 981, 983, 985, 986, 988, 990, 991, 1012, 1013, 1018, 1019, 1021, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1045, 1057, 1064, 1065, 1066, 1076, 1088, 1102, 1105, 1107], "metodologica": 118, "metric": [84, 107, 112, 116, 117, 121, 134, 146, 147, 148, 149, 150, 151, 152, 153, 154, 215, 226, 405, 475, 526, 580, 635, 670, 684, 721, 730, 745, 955, 1102], "metricspac": 730, "mgc": 236, "mi": 50, "micha": 130, "michael": 226, "microbi": [116, 124, 125, 134, 148, 149, 688, 756, 757, 759, 760, 866], "microbiol": [148, 149], "microbiom": [1, 134, 151, 688, 693, 876], "microsoft": 234, "mid": 1018, "middl": [123, 322], "midpoint": [998, 1017, 1018, 1019, 1039], "mieadkvahvqvgnnleh": 235, "might": [1, 118, 229, 231, 757, 883, 884, 885, 980, 1100], "miller": [220, 221], "million": 151, "min": [134, 136, 141, 885], "min_count": [881, 884, 885], "min_group_s": 903, "min_length": [407, 422, 477, 489, 528, 541, 582, 597, 642, 1102], "minim": 230, "minima": 931, "minimize_scalar": 117, "minimum": [116, 134, 141, 236, 412, 422, 489, 541, 587, 597, 642, 688, 760, 854, 884, 885, 903, 931], "mininum": 693, "minor": [221, 913, 947], "minter": [0, 65, 70, 82, 85, 94, 95, 222, 232], "minu": [84, 145, 227, 235, 832], "mirror": 693, "misc_bind": 227, "mislead": [84, 154], "mismatch": [0, 50, 53, 99, 102, 105, 220, 221, 426, 427, 428, 493, 494, 495, 545, 546, 547, 601, 602, 603, 646, 647, 648, 672, 758, 979], "mismatch_frequ": [426, 493, 545, 601, 646, 1102], "mismatch_scor": [53, 99, 102, 105], "miss": [220, 225, 234, 235, 289, 291, 292, 294, 296, 297, 327, 336, 338, 339, 341, 343, 344, 354, 356, 357, 359, 361, 362, 363, 372, 376, 380, 400, 470, 521, 575, 633, 685, 697, 757, 866, 883, 884, 1107], "missing_schem": [280, 327, 345], "missingiderror": [658, 665, 668, 673, 680, 711, 718, 720, 722, 728, 734, 741, 744, 746, 754], "missingnodeerror": [116, 134, 146, 148, 149, 150, 988, 989, 991, 1007, 1021], "mit": 222, "mitochondri": [236, 438, 450, 613], "mix": 234, "mizrachi": 236, "ml": 130, "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm": 441, "mn": 129, "moac": 220, "mode": [84, 237, 277, 451, 885, 903, 1065], "model": [2, 123, 124, 125, 130, 166, 223, 666, 685, 693, 706, 885], "moder": 758, "modif": [308, 764], "modifi": [95, 225, 227, 235, 268, 382, 504, 557, 616, 747, 843, 877, 911, 950, 1021, 1033], "modul": [0, 1, 2, 223, 235, 237, 276, 682, 685, 706, 765, 855, 881, 1063, 1064, 1100, 1101, 1102, 1103, 1104, 1105, 1107], "mol": [98, 101, 220, 221, 224, 227], "mol_typ": [224, 227], "molbev": 1039, "molecul": [224, 225, 227, 616, 654, 1102], "molecular": [101, 764, 975, 1039, 1102], "moment": [224, 758, 1107], "monkei": 268, "monkey_patch": [248, 250], "monophylet": 1019, "monoton": [706, 707, 761, 762], "mont": 881, "month": 236, "mooer": 134, "more": [0, 1, 83, 84, 85, 93, 97, 98, 104, 107, 112, 118, 121, 146, 153, 177, 178, 190, 191, 221, 224, 225, 226, 230, 231, 232, 233, 234, 235, 270, 274, 294, 324, 326, 341, 359, 363, 377, 378, 381, 413, 414, 415, 418, 431, 440, 481, 482, 483, 486, 498, 503, 504, 532, 533, 534, 537, 539, 550, 556, 588, 589, 590, 593, 606, 615, 650, 653, 658, 675, 681, 685, 688, 690, 693, 706, 711, 724, 729, 734, 747, 749, 755, 756, 757, 758, 759, 760, 761, 764, 776, 798, 809, 842, 853, 854, 866, 867, 869, 870, 871, 878, 884, 885, 887, 903, 919, 938, 953, 954, 976, 993, 1013, 1033, 1037, 1038, 1100, 1105, 1106], "mosaic": 235, "most": [83, 106, 108, 117, 134, 218, 222, 225, 226, 229, 230, 232, 234, 236, 451, 616, 758, 854, 878, 881, 995, 997, 1033, 1038, 1105], "mostli": [234, 235], "motif": [407, 477, 528, 582, 1102], "motif_slic": [407, 477, 528, 582], "motif_typ": [407, 477, 528, 582], "motiv": 151, "mpl": [438, 439, 441, 451, 452, 613, 614], "mpr": 1018, "mpt": [438, 613], "mqhvsapvfvfectrlai": 235, "mrna": 224, "msa": [0, 3, 16, 17, 48, 65, 66, 67, 68, 69, 70, 72, 75, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 91, 92, 94, 95, 96, 222, 225, 226, 232, 235], "msa1": 92, "msa2": 92, "msa_copi": [68, 69], "msl072": 1039, "mt19937": [980, 1021], "mtcraqliavprassla": 235, "mu": 881, "mu_": 881, "much": [0, 1, 116, 148, 149, 230, 1100], "mullikin": 226, "multi": 688, "multi_replac": [688, 698], "multifurc": [230, 1105], "multiindex": [95, 752], "multimod": 870, "multinomi": [693, 943], "multipl": [0, 65, 91, 116, 121, 136, 148, 149, 222, 224, 225, 226, 227, 228, 230, 236, 298, 320, 616, 654, 685, 688, 693, 697, 764, 855, 878, 884, 903, 1029, 1038, 1100, 1105], "multiple_comparisons_correct": 688, "multipletest": [688, 693], "multipli": 134, "multivari": [686, 756, 757, 759, 760, 870, 871, 1099], "must": [15, 47, 53, 65, 82, 85, 92, 93, 97, 116, 118, 134, 148, 149, 150, 151, 154, 177, 178, 190, 191, 215, 220, 222, 225, 226, 229, 230, 231, 232, 234, 235, 249, 323, 324, 326, 363, 375, 377, 378, 381, 382, 400, 405, 425, 431, 438, 440, 470, 475, 492, 498, 503, 504, 521, 526, 544, 550, 556, 557, 575, 580, 600, 606, 613, 615, 616, 633, 635, 645, 650, 653, 668, 675, 681, 688, 693, 704, 707, 720, 724, 729, 744, 749, 755, 756, 757, 758, 759, 760, 762, 764, 787, 820, 831, 854, 866, 867, 868, 869, 870, 875, 884, 885, 886, 903, 911, 912, 919, 928, 936, 938, 948, 949, 950, 953, 977, 998, 1013, 1019, 1021, 1029, 1033, 1037, 1038, 1039, 1042, 1044, 1064, 1065, 1088, 1107], "mutabl": [118, 616, 1045, 1102], "mutant": 227, "mutat": [654, 666, 955], "my": 1102, "my_obj": 1100, "myeloid": 884, "myer": [220, 221], "myformat": [237, 248, 249, 250], "myformat2": [248, 249, 250], "myformat_read": [248, 250], "myformat_sniff": 249, "myobject": [248, 250], "n": [1, 53, 108, 109, 112, 115, 117, 118, 119, 123, 126, 127, 128, 129, 130, 134, 137, 144, 218, 220, 221, 222, 225, 226, 227, 231, 232, 233, 235, 236, 237, 248, 249, 250, 277, 278, 382, 422, 435, 489, 501, 504, 528, 541, 554, 557, 597, 611, 642, 652, 697, 698, 706, 758, 761, 764, 854, 870, 871, 872, 875, 877, 878, 879, 881, 885, 886, 913, 919, 943, 947, 969, 977, 981, 990, 995, 997, 1005, 1021, 1022, 1029, 1038, 1039, 1044, 1102], "n1": 915, "n4": 915, "n_": [107, 108, 123], "n_compon": [686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705], "n_composit": [686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702], "n_featur": [216, 703], "n_i": [109, 112, 127, 128], "n_ob": 945, "n_object": 216, "n_pack": 3, "n_partit": 703, "n_posit": [13, 15, 17, 19, 44, 47, 52], "n_segment": [3, 14, 18, 34, 46, 51], "n_seq": [13, 14, 15, 17, 18, 19, 44, 46, 47, 51, 52], "n_sequenc": [3, 13], "n_var": 945, "na": [234, 912], "naess": 703, "name": [1, 93, 97, 116, 134, 148, 149, 177, 178, 190, 191, 220, 221, 226, 227, 228, 230, 231, 233, 234, 235, 237, 238, 263, 264, 265, 270, 274, 281, 287, 296, 297, 298, 324, 326, 328, 334, 343, 344, 346, 352, 361, 362, 363, 364, 370, 374, 376, 377, 378, 380, 381, 425, 431, 440, 441, 442, 448, 450, 492, 498, 503, 544, 550, 556, 600, 606, 615, 645, 650, 653, 654, 666, 671, 675, 681, 688, 693, 699, 704, 724, 729, 749, 755, 756, 757, 759, 760, 765, 777, 821, 856, 866, 867, 869, 903, 908, 938, 946, 949, 953, 955, 969, 971, 972, 973, 975, 977, 978, 979, 980, 983, 987, 988, 989, 990, 991, 993, 995, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1037, 1038, 1057, 1063, 1100, 1105], "name_txt": 236, "named_gc": 442, "namedtemporaryfil": 277, "nan": [19, 52, 84, 88, 92, 125, 220, 234, 291, 292, 294, 296, 297, 327, 338, 339, 341, 343, 344, 356, 357, 359, 361, 362, 363, 372, 380, 400, 409, 470, 479, 521, 530, 575, 584, 633, 637, 683, 684, 756, 757, 758, 759, 760, 761, 764, 866, 883, 884, 1028, 1042], "nan_length_valu": 1028, "nanmean": 885, "naohisa": 226, "nar": 226, "nasanfta": [422, 489, 541, 597, 642], "nat": 227, "natal": 703, "nation": [225, 236, 666], "nativ": [1, 676, 725, 750, 876], "natl": [100, 103], "natsort": 941, "natur": [112, 122, 123, 139, 141, 363, 941], "naturalist": 1018, "nb": 278, "nbk21097": 225, "nbk279675": 220, "nbk279682": 221, "nc": 278, "ncbi": [99, 100, 102, 103, 220, 221, 225, 227, 236, 438, 439, 441, 442, 449, 450, 451, 452, 613, 614, 993, 1102], "ncbiinsight": 236, "ncifcrf": 84, "ncrna": 616, "nd": 912, "ndarrai": [17, 18, 19, 51, 52, 88, 150, 166, 179, 192, 203, 216, 382, 384, 401, 402, 404, 405, 410, 420, 421, 426, 427, 428, 429, 430, 435, 455, 471, 472, 474, 475, 480, 488, 493, 494, 495, 496, 497, 501, 504, 506, 522, 523, 525, 526, 531, 540, 545, 546, 547, 548, 549, 552, 554, 557, 559, 576, 577, 579, 580, 585, 595, 596, 601, 602, 603, 604, 605, 611, 616, 618, 634, 635, 641, 646, 647, 648, 649, 652, 658, 676, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 703, 707, 711, 725, 734, 742, 747, 750, 762, 764, 879, 886, 906, 945, 992], "ne2": 224, "nearbi": 53, "nearli": [98, 99, 100], "necessari": [92, 220, 232, 308, 616, 707, 756, 757, 758, 787, 820, 831, 980, 1063, 1100], "necessarili": [82, 85, 92, 231, 409, 479, 530, 584, 616, 637, 886], "nee": 116, "need": [1, 82, 85, 91, 116, 148, 149, 151, 218, 223, 228, 230, 237, 248, 250, 277, 308, 323, 453, 688, 693, 694, 695, 704, 756, 757, 759, 760, 761, 854, 855, 871, 878, 881, 884, 885, 913, 977, 980, 1042, 1043, 1065, 1107], "needl": 98, "needleman": [0, 98, 99, 100], "neg": [1, 53, 99, 102, 105, 118, 234, 451, 690, 697, 698, 730, 870, 871, 876, 881, 885, 1039], "negat": 321, "neglig": 1, "nei": 1039, "neighbor": [227, 1022, 1039], "neighbour_join": 1039, "neither": [65, 94, 278, 868, 939, 1021, 1030], "nellangiqpfvtlfhwdlpqvledeyggflnsgvindfrdytdlcfkefgd": 224, "neq": 881, "nest": [230, 706, 758, 930, 945, 1024, 1105], "never": [225, 235], "new": [0, 82, 85, 93, 94, 95, 109, 120, 124, 125, 137, 148, 177, 190, 236, 248, 249, 250, 262, 272, 308, 324, 377, 378, 389, 400, 403, 431, 432, 460, 470, 473, 498, 499, 511, 521, 524, 550, 551, 564, 575, 578, 606, 607, 616, 623, 633, 650, 651, 675, 724, 747, 749, 758, 759, 761, 867, 868, 871, 879, 911, 934, 935, 937, 938, 940, 942, 950, 951, 952, 981, 984, 1012, 1013, 1017, 1018, 1019, 1034, 1035, 1036, 1039, 1102, 1105, 1107], "new_fasta_fh": 225, "new_fh": 226, "new_qual_fh": 225, "new_root": 1036, "new_tabl": [911, 934, 941], "new_taxdump": 236, "new_tre": 1034, "newcastl": 224, "newick": [116, 148, 149, 913, 918, 947, 969, 975, 1013, 1037, 1039, 1100, 1105], "newick_doc": 230, "newick_str": 1039, "newicktre": 230, "newlin": [225, 230, 232, 237, 238, 269, 270, 273, 274, 277], "next": [1, 116, 124, 125, 148, 149, 224, 230, 237, 616, 688, 843, 870, 1038, 1105, 1107], "nh": 235, "nhx": 235, "nich": 871, "nident": [220, 221], "nih": [99, 100, 102, 103, 220, 221, 225, 227, 233, 236, 441, 449, 450], "nlm": [99, 100, 102, 103, 220, 221, 225, 227, 236, 441, 449, 450], "nnz": [887, 913, 947, 954], "no_gap": [422, 489, 541, 597, 642], "node": [1, 116, 148, 149, 704, 955, 960, 964, 970, 971, 972, 974, 975, 976, 977, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 993, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1100, 1105], "node_c": 1005, "node_id": [991, 997, 1028], "node_info": 230, "nodes_new": 236, "nodes_slim": 236, "nolengtherror": [970, 986, 995], "nomenclatur": [382, 453, 504, 557, 616], "non": [65, 110, 118, 220, 222, 224, 228, 234, 298, 382, 418, 430, 434, 486, 497, 500, 504, 537, 549, 553, 593, 605, 610, 654, 685, 686, 687, 688, 690, 693, 697, 698, 700, 701, 702, 730, 756, 759, 760, 764, 870, 876, 881, 887, 913, 928, 947, 950, 979, 980, 985, 1102], "non_tip": [1003, 1009, 1010, 1011, 1027, 1030, 1038, 1105], "noncanon": [434, 500, 553, 610], "nonconcept": [114, 139], "none": [13, 45, 50, 53, 65, 82, 84, 85, 93, 94, 95, 99, 100, 102, 103, 104, 116, 130, 134, 135, 136, 138, 146, 148, 149, 150, 151, 177, 190, 220, 225, 229, 237, 238, 248, 250, 263, 264, 265, 269, 273, 277, 295, 298, 308, 319, 321, 323, 324, 342, 360, 363, 372, 375, 376, 378, 379, 382, 401, 405, 407, 408, 409, 420, 431, 435, 436, 453, 471, 475, 477, 478, 479, 488, 498, 501, 502, 504, 522, 526, 528, 529, 530, 540, 550, 554, 555, 557, 576, 580, 582, 583, 584, 595, 606, 611, 612, 616, 634, 635, 636, 637, 641, 650, 652, 670, 674, 675, 688, 693, 694, 695, 697, 698, 699, 707, 721, 723, 724, 730, 745, 748, 749, 756, 757, 758, 759, 760, 761, 762, 766, 788, 799, 832, 854, 856, 866, 867, 872, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 903, 907, 908, 913, 914, 915, 918, 923, 928, 929, 936, 938, 939, 943, 947, 948, 949, 950, 954, 955, 975, 976, 980, 983, 985, 993, 998, 1003, 1005, 1008, 1009, 1010, 1011, 1013, 1017, 1018, 1019, 1021, 1025, 1026, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1038, 1039, 1065, 1066, 1088, 1102, 1105, 1107], "nonlinear": 130, "nonmatch": [758, 761], "nonneg": 225, "nonparametr": [115, 685, 697], "nontip": 1006, "nonzero": [219, 911, 916, 927, 931, 933, 934, 950, 954], "noparenterror": [970, 998], "noqa": 913, "nor": [65, 82, 85, 94, 229, 232, 707, 868, 939, 1021], "norm": [766, 788, 832, 843, 903], "normal": [115, 149, 226, 227, 327, 363, 756, 760, 876, 877, 878, 881, 882, 884, 885, 903, 934, 977], "not_non": [1088, 1107], "notabl": 226, "notat": [121, 230, 234, 504], "note": [3, 15, 16, 20, 47, 48, 50, 53, 65, 72, 77, 82, 83, 84, 85, 86, 88, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 148, 149, 151, 153, 219, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 298, 308, 309, 310, 322, 375, 377, 382, 385, 386, 389, 400, 403, 406, 409, 411, 422, 433, 435, 437, 438, 439, 441, 442, 449, 450, 451, 452, 453, 456, 457, 460, 470, 473, 476, 479, 489, 501, 504, 507, 508, 511, 521, 524, 527, 530, 541, 554, 557, 560, 561, 564, 575, 578, 581, 584, 586, 597, 608, 609, 611, 613, 614, 616, 619, 620, 623, 633, 637, 642, 652, 654, 658, 665, 666, 676, 679, 680, 683, 684, 688, 693, 694, 695, 697, 699, 703, 704, 705, 707, 711, 718, 725, 727, 728, 730, 734, 741, 742, 747, 750, 753, 754, 756, 757, 758, 759, 760, 761, 764, 854, 866, 870, 871, 876, 878, 879, 884, 885, 886, 887, 890, 903, 904, 912, 913, 919, 928, 930, 943, 945, 946, 947, 954, 972, 973, 975, 976, 977, 978, 980, 981, 983, 984, 985, 987, 988, 991, 993, 1008, 1017, 1018, 1019, 1021, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1042, 1044, 1063, 1064, 1102, 1105, 1107], "notebook": 856, "noth": [95, 277, 377, 436, 502, 555, 612, 1065], "notic": [1, 225, 230, 232, 885, 1107], "notifi": 758, "notimplementederror": [870, 871], "notion": [136, 758], "notredam": [699, 705], "notstart": 234, "nov": [100, 103, 224, 866], "novel": 688, "novemb": 1039, "now": [1, 123, 224, 225, 227, 232, 616, 685, 688, 757, 854, 855, 881, 884, 885, 950, 1105, 1107], "np": [13, 14, 15, 19, 46, 47, 52, 84, 88, 116, 125, 134, 148, 149, 166, 179, 220, 291, 294, 338, 341, 356, 359, 363, 372, 382, 384, 401, 402, 404, 405, 409, 410, 420, 421, 426, 427, 428, 429, 430, 435, 455, 471, 472, 474, 475, 479, 480, 488, 493, 494, 495, 496, 497, 501, 504, 506, 522, 523, 525, 526, 530, 531, 540, 545, 546, 547, 548, 549, 552, 554, 557, 559, 576, 577, 579, 580, 584, 585, 595, 596, 601, 602, 603, 604, 605, 611, 616, 618, 634, 635, 637, 641, 646, 647, 648, 649, 652, 654, 683, 684, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 705, 706, 756, 758, 759, 760, 761, 764, 765, 854, 855, 866, 880, 881, 883, 884, 885, 886, 900, 901, 902, 903, 904, 906, 907, 910, 911, 917, 918, 919, 920, 921, 923, 924, 927, 928, 929, 931, 934, 935, 936, 937, 939, 941, 942, 943, 944, 945, 949, 950, 952, 997, 1021, 1038, 1042], "np_286546": 220, "npd": 134, "nrte": [422, 489, 541, 597, 642], "ns_": 130, "nt": 298, "nuc": [435, 501, 554, 611, 652, 654, 666], "nuc_pattern": 1107, "nuccor": 227, "nucl": 226, "nucleic": [232, 236, 382, 453, 504, 557, 616], "nucleobas": [382, 557], "nucleotid": [0, 53, 99, 102, 221, 224, 225, 226, 227, 382, 399, 421, 433, 435, 501, 554, 557, 574, 596, 608, 611, 652, 654, 666, 1107], "nucleotidemixin": [399, 433, 574, 608], "null": [230, 688, 693, 764, 881, 950], "num_it": [881, 884, 885], "num_object": 762, "num_repeat": 130, "num_run": [884, 885], "number": [1, 65, 77, 82, 85, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 148, 149, 150, 218, 220, 222, 224, 225, 227, 230, 232, 233, 235, 236, 277, 298, 319, 363, 394, 401, 409, 426, 428, 465, 471, 479, 493, 495, 516, 522, 530, 545, 547, 569, 576, 584, 601, 603, 628, 634, 637, 646, 648, 654, 669, 687, 688, 693, 697, 698, 700, 701, 702, 703, 707, 756, 757, 758, 759, 760, 761, 762, 764, 799, 843, 854, 871, 875, 876, 878, 879, 881, 882, 884, 885, 886, 887, 903, 913, 917, 919, 933, 943, 947, 975, 982, 1017, 1019, 1021, 1042, 1043], "number_of_dimens": [760, 876], "numer": [1, 19, 52, 117, 123, 220, 229, 234, 236, 345, 363, 372, 376, 380, 703, 757, 758, 799, 855, 866, 870, 871, 877, 878, 885, 1043], "numeric_onli": 1, "numericmetadatacolumn": [327, 363, 374], "numpi": [1, 13, 14, 15, 46, 47, 150, 166, 179, 216, 658, 676, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 705, 706, 707, 711, 725, 734, 742, 750, 756, 760, 762, 764, 765, 799, 821, 843, 854, 855, 881, 883, 884, 885, 886, 900, 901, 902, 903, 904, 907, 910, 911, 917, 918, 919, 920, 921, 923, 924, 928, 929, 933, 934, 935, 936, 937, 939, 941, 942, 943, 944, 947, 949, 950, 1102], "nutrient": 703, "nwnnnnnn": [413, 418, 481, 486, 532, 537, 588, 593], "o": [92, 93, 97, 121, 134, 177, 178, 190, 191, 224, 225, 226, 233, 235, 324, 326, 378, 381, 431, 440, 498, 503, 504, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 867, 869, 919, 938, 953, 1013, 1037, 1039, 1100, 1106], "o1": [901, 902, 904, 907, 910, 911, 917, 918, 919, 920, 921, 923, 924, 928, 929, 930, 934, 935, 936, 937, 939, 941, 942, 943, 944, 946, 949, 950, 952], "o2": [901, 902, 904, 907, 910, 911, 917, 918, 919, 920, 921, 923, 924, 928, 929, 930, 934, 935, 936, 937, 939, 941, 942, 943, 944, 946, 949, 950, 952], "o3": [901, 902, 904, 910, 919, 924, 928, 937], "o31698": 235, "o31699": 235, "o4": [901, 902, 904, 919, 937], "o5": [904, 919], "o83071": 235, "ob": [1, 110, 121, 143, 145, 945], "obesrvation_metadata_f": 928, "obf": 226, "obj": [237, 250, 271, 275, 1056, 1107], "object": [0, 1, 2, 3, 16, 48, 53, 65, 68, 69, 70, 79, 82, 85, 86, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 151, 154, 155, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 269, 271, 273, 275, 280, 281, 287, 290, 293, 298, 299, 305, 307, 308, 309, 310, 311, 317, 319, 320, 321, 322, 323, 327, 328, 334, 337, 340, 345, 346, 352, 355, 358, 363, 364, 370, 373, 376, 377, 380, 382, 384, 387, 389, 400, 401, 405, 408, 409, 416, 417, 419, 420, 421, 426, 427, 428, 429, 436, 455, 458, 460, 470, 471, 475, 478, 479, 484, 485, 487, 488, 493, 494, 495, 496, 502, 504, 506, 509, 511, 521, 522, 526, 529, 530, 535, 536, 538, 540, 545, 546, 547, 548, 555, 557, 559, 562, 564, 575, 576, 580, 583, 584, 591, 592, 594, 595, 596, 601, 602, 603, 604, 612, 616, 618, 621, 623, 633, 634, 635, 636, 637, 638, 639, 640, 641, 646, 647, 648, 649, 658, 668, 670, 674, 682, 683, 688, 706, 707, 711, 720, 721, 723, 730, 734, 744, 745, 748, 756, 757, 759, 760, 761, 762, 787, 820, 831, 870, 871, 876, 877, 878, 887, 890, 902, 912, 913, 914, 915, 940, 945, 947, 948, 949, 952, 955, 981, 988, 1017, 1026, 1028, 1034, 1036, 1039, 1042, 1043, 1064, 1065, 1088, 1100, 1102, 1105, 1107], "obs_id": [917, 919, 924], "obs_map": 915, "obs_phi": 903, "observ": [1, 106, 116, 119, 121, 130, 133, 143, 145, 148, 149, 154, 219, 409, 435, 479, 501, 530, 554, 584, 611, 637, 652, 688, 764, 855, 881, 884, 885, 887, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 954, 1007, 1038, 1104, 1107], "observation_column_nam": [908, 949], "observation_group_metadata": [887, 918], "observation_id": [887, 924, 932, 937], "observation_index": 887, "observation_metadata": 887, "observation_metadata_f": 928, "observed_char": [409, 479, 530, 584, 637], "observed_featur": 143, "obsolet": 232, "obtain": [117, 363, 389, 460, 511, 564, 616, 623, 665, 666, 680, 688, 706, 718, 728, 741, 752, 754, 756, 758, 760, 1059, 1060, 1061], "obviou": 230, "oc": 224, "occur": [53, 221, 225, 226, 229, 230, 270, 274, 277, 420, 488, 540, 595, 616, 641, 885, 979], "occurr": [113, 142, 401, 413, 414, 415, 418, 471, 481, 482, 483, 486, 522, 532, 533, 534, 537, 539, 576, 588, 589, 590, 593, 634, 988], "oct": [225, 227], "odot": [695, 702], "off": [123, 382, 504, 557, 700, 884, 978, 1038, 1042, 1107], "offer": 1065, "offici": 219, "offset": [226, 227], "often": [1, 116, 146, 150, 224, 225, 227, 706, 764, 871, 876, 881, 1063], "oh": 1099, "oiko": [121, 138], "ol": 116, "old": 952, "older": 232, "om": [887, 954], "omic": 685, "ominu": 701, "omit": [13, 45, 230, 363, 376, 706, 943, 993, 1029, 1031, 1038, 1100], "ommit": 233, "onc": [119, 225, 237, 1030], "one": [0, 1, 82, 83, 84, 85, 89, 90, 92, 98, 99, 100, 106, 116, 117, 118, 120, 123, 134, 135, 146, 148, 149, 179, 203, 224, 225, 226, 227, 228, 230, 231, 232, 234, 235, 236, 237, 249, 270, 274, 294, 296, 320, 323, 325, 341, 343, 359, 361, 363, 392, 397, 400, 413, 414, 415, 416, 417, 418, 419, 451, 463, 468, 470, 481, 482, 483, 484, 485, 486, 487, 504, 514, 519, 521, 532, 533, 534, 535, 536, 537, 538, 539, 567, 572, 575, 588, 589, 590, 591, 592, 593, 594, 626, 631, 633, 638, 639, 640, 654, 658, 670, 688, 707, 711, 721, 734, 745, 752, 757, 758, 760, 761, 764, 765, 766, 855, 872, 875, 876, 883, 884, 885, 900, 903, 928, 939, 970, 973, 979, 993, 1007, 1012, 1017, 1018, 1019, 1021, 1033, 1034, 1100, 1105, 1107], "one_to_mani": 903, "one_to_many_md_kei": 903, "one_to_many_mod": 903, "ones": [13, 17, 44, 871, 884, 928], "onli": [0, 1, 53, 92, 119, 120, 124, 134, 135, 154, 179, 203, 222, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 277, 291, 292, 308, 323, 338, 339, 356, 357, 363, 372, 377, 382, 400, 407, 441, 470, 477, 504, 521, 528, 557, 575, 582, 616, 633, 654, 668, 685, 688, 700, 720, 730, 744, 745, 747, 752, 756, 760, 761, 854, 855, 868, 871, 876, 878, 883, 884, 885, 901, 902, 903, 911, 913, 925, 950, 976, 979, 980, 981, 982, 985, 988, 1012, 1021, 1026, 1030, 1045, 1088, 1105, 1107], "onlin": [123, 226], "ons": 234, "onto": [237, 268, 877, 1038], "ontologi": 228, "ontology_term": 228, "oo": 1100, "open": [0, 93, 97, 98, 99, 100, 101, 102, 103, 151, 177, 178, 190, 191, 220, 221, 226, 237, 248, 250, 269, 270, 271, 273, 274, 275, 278, 279, 324, 326, 378, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 867, 869, 913, 938, 949, 953, 1013, 1037, 1064, 1099, 1100], "open_fil": 1064, "open_filehandl": 1100, "oper": [1, 3, 82, 85, 92, 148, 220, 225, 230, 321, 382, 411, 412, 504, 557, 586, 587, 616, 685, 687, 700, 701, 702, 706, 707, 742, 758, 759, 876, 898, 899, 901, 902, 903, 907, 913, 926, 930, 939, 940, 941, 942, 943, 944, 947, 950, 993, 1017, 1018, 1019, 1034, 1036, 1038, 1066, 1100, 1102], "operon": 298, "opinion": 118, "oplu": 700, "oppos": [761, 1107], "optim": [1, 53, 117, 146, 148, 149, 150, 760, 986, 1040], "option": [13, 15, 19, 34, 45, 47, 52, 53, 65, 82, 84, 85, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 110, 111, 112, 114, 116, 121, 122, 123, 124, 125, 130, 134, 135, 136, 138, 139, 140, 145, 146, 148, 149, 150, 151, 154, 166, 177, 178, 190, 191, 214, 215, 216, 217, 222, 223, 225, 226, 231, 232, 234, 235, 236, 238, 248, 249, 250, 269, 270, 271, 273, 274, 275, 277, 291, 295, 296, 297, 298, 308, 319, 323, 324, 325, 326, 338, 342, 343, 344, 356, 360, 361, 362, 363, 372, 375, 376, 378, 379, 380, 381, 382, 387, 399, 400, 401, 405, 407, 408, 409, 412, 420, 422, 423, 424, 426, 428, 431, 434, 435, 440, 441, 450, 451, 452, 458, 470, 471, 475, 477, 478, 479, 488, 489, 490, 491, 493, 495, 498, 500, 501, 503, 504, 509, 521, 522, 526, 528, 529, 530, 540, 541, 542, 543, 545, 547, 550, 553, 554, 556, 557, 562, 574, 575, 576, 580, 582, 583, 584, 587, 595, 597, 598, 599, 601, 603, 606, 610, 611, 613, 614, 615, 616, 621, 633, 634, 635, 636, 637, 641, 642, 643, 644, 646, 648, 650, 652, 653, 665, 668, 670, 674, 675, 681, 684, 688, 693, 694, 695, 697, 698, 707, 718, 720, 721, 723, 724, 729, 741, 744, 745, 747, 748, 749, 755, 756, 757, 758, 759, 760, 761, 762, 764, 799, 854, 866, 867, 868, 869, 871, 872, 875, 876, 878, 879, 882, 883, 884, 885, 886, 898, 899, 900, 903, 904, 906, 907, 910, 911, 913, 918, 919, 920, 923, 924, 925, 926, 927, 928, 931, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 955, 976, 981, 993, 998, 999, 1013, 1017, 1018, 1019, 1021, 1028, 1029, 1033, 1034, 1036, 1037, 1038, 1039, 1042, 1043, 1064, 1065, 1066, 1088, 1102, 1107], "or_f": 231, "oral": 1, "orcutt": 666, "ord_r": 231, "order": [1, 53, 75, 80, 86, 91, 92, 95, 121, 122, 136, 138, 145, 146, 150, 218, 220, 225, 229, 230, 231, 232, 235, 290, 295, 320, 337, 342, 355, 360, 363, 364, 370, 373, 377, 379, 382, 397, 406, 409, 435, 439, 441, 452, 468, 476, 479, 501, 504, 519, 527, 530, 554, 557, 572, 581, 584, 611, 614, 631, 637, 652, 656, 658, 665, 668, 680, 688, 693, 704, 709, 711, 718, 720, 728, 732, 734, 741, 744, 747, 752, 754, 756, 757, 758, 759, 760, 761, 764, 870, 879, 883, 884, 913, 933, 941, 942, 947, 1006, 1026, 1027, 1028, 1038, 1040, 1042, 1105, 1107], "ordin": [1, 217, 760, 1043, 1044], "ordination_result": 855, "ordinationresult": [217, 231, 760, 870, 871, 876, 877, 878, 1043], "org": [53, 104, 106, 151, 218, 219, 225, 226, 227, 232, 234, 235, 295, 342, 360, 363, 376, 379, 676, 699, 703, 705, 707, 725, 730, 742, 750, 756, 757, 758, 759, 760, 866, 887, 913, 914, 947, 954, 1039], "organ": [1, 224, 227, 236], "organis": 227, "orient": [765, 866, 883, 913, 947, 1017, 1100], "origin": [1, 3, 15, 18, 19, 47, 51, 52, 98, 100, 101, 103, 108, 109, 112, 115, 116, 119, 120, 121, 122, 126, 127, 128, 134, 135, 136, 138, 139, 145, 148, 149, 151, 222, 223, 225, 230, 232, 233, 292, 296, 297, 339, 343, 344, 357, 361, 362, 380, 400, 470, 521, 575, 616, 633, 756, 757, 758, 759, 760, 764, 870, 878, 886, 903, 911, 934, 950, 978, 981, 1017, 1018, 1019, 1038, 1039, 1105, 1107], "orthogon": [694, 695, 703], "ortholog": [887, 954], "orthonorm": [694, 695, 703, 704], "orthornorm": 694, "ostel": 225, "other": [0, 1, 15, 47, 53, 70, 79, 89, 90, 92, 116, 133, 138, 151, 224, 225, 226, 227, 229, 230, 232, 234, 235, 236, 277, 281, 287, 299, 305, 311, 317, 322, 328, 334, 346, 352, 363, 364, 370, 377, 382, 387, 396, 405, 411, 412, 417, 419, 421, 426, 427, 428, 429, 432, 442, 448, 458, 467, 475, 485, 487, 493, 494, 495, 496, 499, 504, 509, 518, 526, 536, 538, 545, 546, 547, 548, 551, 557, 562, 571, 580, 586, 587, 592, 594, 596, 601, 602, 603, 604, 607, 616, 621, 630, 635, 639, 640, 646, 647, 648, 649, 651, 654, 656, 663, 682, 688, 693, 706, 709, 716, 730, 732, 739, 760, 855, 866, 870, 871, 876, 883, 885, 888, 896, 900, 904, 909, 924, 928, 955, 978, 979, 980, 986, 988, 989, 1033, 1034, 1036, 1042, 1065, 1076, 1100, 1101, 1102, 1105, 1107], "other_vertebr": 221, "otherwis": [50, 53, 66, 82, 85, 95, 110, 111, 225, 227, 230, 233, 234, 277, 294, 327, 341, 359, 435, 501, 554, 611, 652, 655, 656, 658, 663, 668, 708, 709, 711, 716, 720, 731, 732, 734, 739, 744, 747, 761, 890, 906, 910, 922, 928, 934, 937, 1014, 1102], "otu": [1, 132, 234, 887, 900, 901, 902, 903, 904, 908, 912, 913, 914, 919, 924, 928, 934, 936, 937, 941, 942, 947, 949, 950, 954], "otu1": 908, "otu2": 908, "otu_id": [116, 134, 148, 149], "otuid": 234, "our": [1, 118, 226, 234, 237, 249, 278, 422, 489, 541, 597, 642, 855, 881, 884, 885, 886, 1102, 1107], "out": [84, 223, 233, 234, 237, 289, 336, 354, 866, 911, 943, 979, 980, 1107], "out_f": [787, 820, 831], "out_fh": 706, "outcom": [137, 884, 1033], "outer": [91, 92, 400, 470, 521, 575, 633, 669], "outfmt": [220, 221], "outgroup": 1019, "output": [2, 92, 220, 221, 223, 230, 232, 233, 235, 425, 492, 544, 600, 645, 693, 756, 760, 761, 799, 871, 897, 903, 908, 948, 949, 1029, 1039, 1099, 1107], "outsid": [226, 298, 322, 409, 479, 530, 584, 637], "over": [75, 80, 91, 151, 225, 226, 233, 234, 235, 392, 397, 463, 468, 514, 519, 567, 572, 626, 631, 654, 693, 762, 776, 798, 809, 842, 853, 881, 882, 890, 900, 903, 904, 923, 924, 925, 927, 930, 931, 936, 939, 943, 950, 964, 1003, 1006, 1009, 1010, 1011, 1024, 1027, 1030, 1105], "overal": [887, 954], "overhead": [854, 913], "overlap": [123, 323, 377, 423, 424, 490, 491, 542, 543, 598, 599, 643, 644, 665, 684, 693, 718, 741, 928, 979], "overrid": [53, 99, 102, 134, 238, 248, 249, 250, 269, 273, 376, 1012, 1107], "overridden": [53, 65, 227, 1039], "override_skip_babp": 53, "overriden": [248, 249, 250], "overview": 1039, "own": [82, 85, 92, 218, 225, 231, 235, 237, 881], "owner": 1049, "oxfordjourn": 226, "oxtobi": 224, "p": [1, 53, 104, 116, 121, 127, 128, 134, 136, 504, 688, 693, 703, 706, 756, 758, 759, 760, 761, 764, 855, 870, 871, 872, 878, 881, 884, 885, 943], "p26204": 224, "p__b": 903, "p__c": 903, "p_adjust": [688, 693], "p_i": [112, 114, 121, 122, 136, 138, 139, 145], "p_valu": [1, 758, 764], "pack": 3, "packag": [53, 104, 106, 147, 222, 225, 230, 232, 693, 703, 706, 756, 757, 758, 759, 760, 763, 870, 871, 878, 881, 1105, 1106], "pad": [92, 232, 400, 470, 521, 575, 633], "page": [118, 688, 1039, 1105], "pair": [0, 1, 50, 89, 98, 99, 100, 102, 105, 148, 149, 150, 154, 224, 226, 227, 228, 230, 235, 319, 323, 417, 485, 536, 592, 639, 654, 658, 665, 680, 684, 688, 711, 718, 728, 734, 741, 745, 752, 754, 761, 881, 995, 1026, 1102], "pairwis": [34, 44, 45, 50, 150, 151, 154, 215, 670, 688, 699, 721, 745, 761, 764, 903, 925, 986, 1026, 1105], "pairwise_dist": 150, "pairwise_func": 150, "pam": [504, 654, 666], "pam250": 666, "pam30": 666, "pam70": 666, "pancoro": 224, "panda": [1, 65, 90, 95, 150, 214, 220, 221, 236, 296, 297, 327, 343, 344, 361, 362, 363, 380, 382, 419, 487, 504, 538, 557, 594, 640, 677, 688, 693, 726, 751, 752, 756, 757, 759, 760, 761, 765, 799, 843, 855, 866, 883, 884, 901, 930, 946, 993, 1042, 1102], "paper": 234, "papilionoidea": 224, "par_dist": 764, "parallel": [118, 151], "paramet": [1, 3, 13, 14, 15, 16, 19, 20, 34, 44, 45, 46, 47, 48, 50, 52, 53, 54, 65, 67, 70, 79, 82, 84, 85, 86, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 154, 155, 166, 177, 178, 179, 190, 191, 192, 203, 214, 215, 216, 217, 237, 238, 248, 249, 250, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 277, 281, 287, 290, 291, 293, 295, 296, 297, 298, 299, 305, 308, 311, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 334, 337, 338, 340, 342, 343, 344, 346, 352, 355, 356, 358, 360, 361, 362, 363, 364, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 389, 396, 399, 400, 401, 405, 407, 408, 409, 412, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 434, 435, 436, 438, 439, 440, 441, 442, 448, 450, 451, 452, 455, 458, 460, 467, 470, 471, 475, 477, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 506, 509, 511, 518, 521, 522, 526, 528, 529, 530, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 559, 562, 564, 571, 574, 575, 576, 580, 582, 583, 584, 587, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 610, 611, 612, 613, 614, 615, 616, 618, 621, 623, 630, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 663, 665, 666, 668, 669, 670, 672, 673, 674, 675, 680, 681, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 711, 716, 718, 720, 721, 722, 723, 724, 728, 729, 731, 732, 734, 739, 741, 744, 745, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 787, 799, 820, 831, 843, 854, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 890, 898, 899, 900, 901, 902, 903, 904, 906, 907, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 955, 970, 972, 973, 976, 977, 978, 979, 980, 981, 982, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1062, 1063, 1064, 1065, 1066, 1076, 1077, 1088, 1107], "parametr": [110, 685, 688, 756, 759], "params_guess": 130, "parasit": 764, "pardi": 134, "parent": [224, 228, 230, 236, 616, 703, 955, 972, 975, 987, 990, 998, 1000, 1008, 1012, 1017, 1018, 1019, 1022, 1028, 1031, 1034, 1035, 1036, 1105], "parent_tax_id": [236, 993], "parenthes": 1105, "parenthesi": 230, "parker": [108, 121], "pars": [225, 226, 227, 229, 237, 912, 913, 914, 915, 1100], "parse_biom_t": 913, "parse_f": 913, "parser": [228, 230, 1100], "part": [220, 225, 227, 230, 233, 682, 686, 703, 854, 936, 1006, 1065, 1105], "partial": [53, 134, 322, 890], "partial_beta_divers": 151, "partialdistancematrix": 151, "particip": 885, "particuarli": 225, "particular": [1, 955, 1041, 1107], "particularli": 977, "partit": [703, 704, 903], "pass": [1, 65, 72, 85, 93, 94, 97, 104, 146, 150, 151, 152, 153, 177, 178, 190, 191, 220, 222, 225, 227, 232, 233, 235, 248, 249, 250, 262, 268, 269, 270, 271, 272, 273, 274, 275, 277, 324, 326, 378, 381, 382, 405, 407, 409, 431, 432, 440, 451, 475, 477, 479, 498, 499, 503, 504, 526, 528, 530, 550, 551, 556, 557, 580, 582, 584, 606, 607, 615, 616, 635, 637, 650, 651, 653, 658, 675, 681, 711, 724, 729, 734, 745, 747, 749, 755, 758, 761, 799, 867, 869, 884, 924, 937, 938, 953, 1002, 1004, 1013, 1037, 1039, 1088, 1105, 1107], "passthrough": 95, "password": 237, "patch": 268, "path": [3, 13, 14, 15, 16, 17, 18, 19, 34, 44, 45, 46, 47, 48, 50, 51, 52, 87, 219, 223, 225, 226, 233, 277, 295, 342, 360, 376, 379, 903, 971, 1063], "pathwai": [887, 903, 954], "pattern": [236, 408, 436, 478, 502, 529, 555, 583, 612, 636, 855, 1102, 1107], "paw": [504, 539, 552], "pawhea": 0, "pawlowski": [685, 699, 705], "pc": [1, 765, 866], "pca": [870, 876, 878], "pcbi": [699, 705], "pcoa": [1, 231, 760, 856, 866, 877], "pcoa_result": 866, "pcr": 885, "pd": [1, 65, 85, 90, 95, 116, 134, 146, 214, 220, 221, 236, 327, 419, 487, 538, 594, 616, 640, 665, 677, 680, 688, 693, 706, 718, 726, 728, 741, 751, 752, 754, 756, 757, 760, 765, 855, 856, 866, 870, 878, 883, 884, 901, 930, 946, 993, 994, 1042], "pd_": 134, "pdf": 233, "pdist": [1, 147, 150, 153, 215, 764], "pearson": [225, 758, 761, 764, 980], "pearsonr": [758, 764, 881], "peerj": 134, "penal": [98, 99, 100], "penalize_terminal_gap": [98, 99, 100], "penalti": [0, 53, 98, 99, 100, 101, 102, 103], "pentapetala": 224, "per": [3, 34, 92, 220, 221, 233, 235, 382, 504, 557, 616, 693, 761, 764, 854, 878, 884, 885, 944, 973, 1064], "percent": [220, 1102], "percentag": [220, 685], "percentil": 688, "percentile_df": 688, "perfect": [855, 871], "perform": [0, 1, 3, 53, 91, 92, 104, 116, 130, 146, 148, 149, 150, 151, 217, 225, 226, 234, 299, 377, 382, 439, 452, 504, 557, 614, 616, 656, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 699, 700, 701, 702, 704, 705, 707, 709, 730, 732, 742, 745, 760, 761, 764, 765, 766, 788, 832, 843, 855, 876, 878, 879, 885, 886, 890, 903, 934, 937, 943, 981, 991, 1003, 1009, 1010, 1011, 1017, 1018, 1019, 1021, 1034, 1035, 1042, 1100], "period": [234, 295, 342, 360, 379], "periton": 884, "perm_stat": 764, "permanova": [756, 760], "permdisp2": 760, "permiss": [225, 230, 232], "permit": [3, 230, 249], "permut": [1, 299, 756, 758, 759, 760, 761, 764], "perplex": [121, 138], "perspect": [134, 1033], "pertain": 763, "perturb": [685, 701], "petchei": 116, "peter": 226, "pfam": 235, "pgc": 236, "ph": 757, "phagocyt": 884, "phase": [227, 228], "phe": 504, "phenylalanin": 504, "php": 225, "phred": [225, 226], "phred_offset": [226, 233], "phydiv": 116, "phylip": [93, 97, 225, 230, 1038, 1100, 1105], "phylip_multiple_alignment_format": 232, "phylipformaterror": 232, "phylo": 232, "phylochip": [116, 148, 149], "phylogenet": [1, 116, 134, 148, 149, 230, 232, 706, 764, 955, 978, 988, 1018, 1033, 1039, 1099, 1102], "phylogeni": [232, 763, 764], "phylum": 993, "physic": [145, 877, 885], "pick": [53, 884], "pickl": [6, 24, 37, 57, 73, 158, 169, 182, 195, 206, 241, 254, 283, 301, 313, 330, 348, 366, 390, 444, 461, 512, 565, 624, 659, 712, 735, 769, 780, 791, 802, 813, 824, 835, 846, 859, 891, 961, 1050, 1069, 1081, 1092], "pident": [220, 221], "pie": [114, 139], "piec": 1107, "pielou": [135, 141], "pielou_": 120, "piet": 871, "pii": 222, "ping": [53, 104], "pipe": 236, "pirrung": 866, "pisc": 123, "pitfal": 84, "pizetti": 118, "place": [95, 230, 235, 377, 451, 854, 876, 879, 911, 934, 937, 947, 950, 997, 1019, 1031, 1033, 1036, 1043], "placebo": [688, 693], "plain": [222, 225, 226, 227, 230, 232, 233], "plan": 234, "planetmath": 730, "plankton": 108, "plant": [144, 224, 703], "plastid": 236, "pleas": [72, 93, 97, 177, 178, 190, 191, 225, 233, 324, 326, 378, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 867, 869, 938, 953, 1013, 1037, 1104], "pleij": 235, "plm": [2, 223], "pln": [224, 236], "plo": [53, 104, 124, 125, 699, 705], "ploson": [53, 104], "plot": [1, 856], "plu": [236, 382, 504, 557], "plugin": 234, "plural": [1, 279], "pm": 115, "pmid": [235, 758, 1039], "png": 856, "point": [84, 118, 123, 125, 218, 222, 234, 237, 249, 298, 363, 425, 432, 435, 492, 499, 501, 544, 551, 554, 600, 607, 611, 645, 651, 652, 666, 760, 766, 788, 843, 855, 866, 884, 885, 998, 1018, 1042, 1063], "poisson": [124, 125], "polymeras": 235, "pone": [53, 104], "pool": 107, "poorli": [764, 876], "pop": [1012, 1014, 1015, 1020], "popul": [106, 110, 117, 119, 143, 233, 235, 425, 492, 544, 600, 645, 700, 762, 881, 885], "port": 234, "portal": 236, "portion": 758, "pos_rat": 885, "posit": [0, 3, 13, 14, 15, 16, 18, 34, 45, 46, 47, 48, 51, 53, 65, 66, 70, 79, 82, 83, 84, 85, 86, 88, 90, 91, 92, 95, 98, 99, 100, 101, 102, 103, 104, 105, 220, 221, 222, 225, 226, 227, 230, 232, 233, 234, 235, 382, 387, 389, 392, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 419, 420, 422, 425, 426, 427, 428, 429, 430, 432, 433, 437, 438, 439, 451, 452, 458, 460, 463, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 480, 487, 488, 489, 492, 493, 494, 495, 496, 497, 499, 504, 509, 511, 514, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 538, 540, 541, 544, 545, 546, 547, 548, 549, 551, 552, 557, 562, 564, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 585, 594, 595, 597, 600, 601, 602, 603, 604, 605, 607, 608, 609, 613, 614, 616, 621, 623, 626, 630, 631, 632, 633, 634, 636, 640, 641, 642, 645, 646, 647, 648, 649, 651, 686, 687, 688, 697, 758, 764, 843, 856, 881, 882, 884, 885, 890, 917, 930, 1008, 1017, 1033, 1034, 1036, 1102], "positional_metadata": [65, 70, 83, 90, 91, 92, 225, 235, 382, 387, 399, 400, 403, 419, 425, 432, 433, 453, 458, 470, 473, 487, 492, 499, 504, 509, 521, 524, 538, 544, 551, 557, 562, 574, 575, 578, 594, 600, 607, 608, 616, 621, 633, 640, 645, 651, 1102], "possibl": [1, 53, 72, 135, 141, 145, 225, 226, 234, 235, 322, 406, 439, 452, 476, 527, 581, 614, 757, 761, 884, 980, 1030, 1038], "post": [232, 881, 885], "posterior": [693, 955], "postmenopaus": 885, "postord": [985, 988, 1003, 1006, 1010, 1011, 1027, 1030, 1105], "potenti": [225, 422, 489, 541, 597, 642, 854, 1015, 1040, 1107], "pound": [234, 363], "power": [685, 693, 887, 954, 1100], "pp": [117, 129, 136, 871], "ppo": [220, 221], "practic": [1, 92, 134, 225, 226, 233, 854, 983, 988], "pre": [408, 436, 478, 502, 529, 555, 583, 612, 636, 654, 666, 671, 885], "pre_and_postord": [1003, 1006, 1009, 1011, 1027, 1030], "pre_rat": 885, "prealloc": 1065, "preced": [53, 222, 230, 232], "precomput": 880, "predefin": [228, 405, 475, 526, 580, 635], "predict": [124, 125, 235, 884], "prefer": [84, 146, 150, 226, 295, 342, 360, 379, 870, 871], "prefer_self": 928, "prefix": 236, "preliminari": 884, "premenopaus": 885, "preorder": [1003, 1006, 1009, 1010, 1027, 1030, 1105], "prepar": 234, "preq1": 227, "presenc": [111, 134, 442, 451, 885, 935], "present": [83, 84, 116, 148, 149, 220, 223, 225, 231, 234, 235, 309, 310, 363, 382, 399, 402, 403, 404, 409, 410, 420, 430, 433, 451, 472, 473, 474, 479, 480, 488, 497, 504, 523, 524, 525, 530, 531, 540, 549, 552, 557, 574, 577, 578, 579, 584, 585, 595, 605, 608, 637, 641, 668, 688, 720, 744, 756, 757, 759, 760, 799, 865, 876, 885, 886, 903, 912, 913, 952, 979, 1038, 1039, 1041, 1105], "preserv": [230, 363, 855, 870, 871, 876], "press": [109, 136], "presum": 225, "prevent": 53, "previou": [1, 98, 99, 100, 101, 102, 103, 387, 458, 509, 562, 621, 756, 758, 760], "previous": [0, 425, 432, 492, 499, 544, 551, 600, 607, 645, 651, 1107], "pri": 236, "primari": [237, 1102], "primer": 757, "princip": [1, 760, 866, 870, 876, 877], "principl": 881, "print": [0, 1, 91, 116, 148, 149, 222, 225, 226, 227, 228, 230, 232, 233, 235, 406, 422, 435, 439, 452, 476, 489, 501, 527, 541, 554, 581, 597, 611, 614, 616, 642, 652, 706, 758, 764, 765, 854, 881, 885, 900, 901, 902, 903, 904, 907, 911, 917, 919, 920, 924, 925, 926, 927, 928, 931, 934, 935, 936, 937, 941, 942, 943, 949, 950, 952, 972, 973, 976, 977, 980, 981, 982, 985, 987, 988, 989, 991, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1015, 1017, 1018, 1019, 1020, 1021, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1102, 1105, 1107], "printabl": [226, 233], "prior": [451, 758, 761, 943, 993, 1019, 1066, 1076, 1107], "prioriti": [134, 1077, 1078, 1107], "privat": [227, 973], "prng": 854, "pro": 504, "prob": [65, 70, 83, 91], "probabl": [112, 114, 124, 125, 136, 137, 139, 693, 765, 777, 854, 870, 881, 885, 955], "problem": [234, 688, 876], "problemat": [234, 1028], "proc": [100, 103], "procedur": [760, 1100], "proceed": [136, 666], "process": [151, 225, 235, 322, 693, 878, 948, 949, 1041, 1066, 1107], "process_func": 915, "processor": 1107, "prod": [691, 703], "prod_": 138, "produc": [106, 220, 221, 232, 233, 248, 422, 489, 541, 597, 642, 870, 878], "product": [0, 298, 696, 758], "program": [229, 230, 234, 236], "progress": 757, "prohibit": [1034, 1035, 1036], "project": [151, 226, 686, 703, 756, 757, 758, 759, 760, 877], "prolin": 504, "promis": 688, "pronounc": [887, 954, 1099], "prop_expl": [765, 766, 788, 799, 832, 843], "propag": 616, "proper": 1019, "properli": [230, 277], "properti": [222, 232, 236, 377, 442, 448, 453, 654, 670, 721, 730, 745, 881, 975, 1012, 1045, 1057, 1059, 1060, 1061, 1101], "proport": [106, 112, 114, 118, 119, 121, 122, 130, 134, 136, 138, 139, 145, 231, 412, 587, 683, 685, 686, 688, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 756, 758, 759, 765, 799, 843, 856, 870, 876, 878, 978], "proportion": [699, 705], "proportion_explain": [855, 856], "propos": [106, 138, 1039], "prot": 224, "protein": [0, 2, 53, 65, 84, 98, 100, 103, 104, 166, 179, 220, 222, 223, 224, 225, 226, 227, 232, 233, 235, 422, 435, 438, 439, 441, 451, 452, 453, 489, 501, 597, 611, 613, 614, 616, 642, 652, 666, 884, 1102], "protein_from_dna": 1102, "protein_from_rna": 1102, "protein_id": 224, "proteinembed": 223, "proteinvector": 223, "provid": [0, 1, 2, 44, 50, 53, 65, 82, 84, 85, 93, 94, 99, 102, 104, 106, 116, 123, 134, 146, 147, 148, 149, 150, 177, 190, 220, 223, 225, 226, 230, 232, 234, 235, 236, 237, 248, 250, 269, 270, 273, 274, 276, 278, 293, 295, 324, 340, 342, 358, 360, 363, 376, 377, 378, 379, 387, 409, 422, 425, 431, 435, 458, 479, 489, 492, 498, 501, 509, 530, 541, 544, 550, 554, 557, 562, 584, 597, 600, 606, 611, 616, 621, 637, 642, 645, 650, 652, 654, 670, 675, 680, 685, 693, 706, 707, 721, 724, 728, 745, 749, 754, 756, 757, 758, 759, 760, 762, 765, 799, 854, 855, 856, 866, 867, 872, 881, 883, 884, 886, 887, 898, 906, 908, 911, 913, 918, 920, 921, 926, 927, 929, 931, 936, 937, 938, 943, 947, 948, 950, 952, 954, 977, 985, 988, 993, 1007, 1013, 1017, 1021, 1028, 1033, 1038, 1039, 1066, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107], "proxim": 855, "prune": [976, 1020, 1031, 1032, 1033], "psa": [98, 101], "pseudo": [759, 881], "pseudocount": [685, 688, 693], "pseudoknot": 235, "pub": [224, 236, 298], "public": [134, 226, 866], "publish": [226, 235], "pubm": [224, 227, 616], "pull": 225, "pure": [0, 1040], "purin": [382, 407, 477, 528, 582, 1102], "purpos": [0, 1, 104, 107, 234, 236, 441, 881, 1107], "put": [121, 384, 455, 506, 559, 618], "pvalu": 693, "pwmantel": 758, "pwr": 884, "pwr_001": 881, "pwr_010": 881, "pwr_100": 881, "pwr_est": 885, "pwr_est2": 885, "py": [226, 237], "pycog": [116, 148, 149, 1038], "pyl": 504, "pyrimidin": [382, 407, 582], "pyrosequenc": [116, 148, 149], "pyrrolysin": 504, "python": [0, 1, 20, 616, 706, 730, 758, 1040, 1045, 1099, 1100, 1102], "q": [53, 121, 123, 136, 145, 221, 504, 871, 872], "q2": 234, "q2cli": 234, "qacc": [220, 221], "qaccver": [220, 221], "qcov": [220, 221], "qcovhsp": [220, 221], "qd": 121, "qend": [220, 221], "qframe": [220, 221], "qgi": [220, 221], "qh": [136, 145], "qiim": [116, 148, 149, 234, 363], "qiime2": [234, 295, 342, 360, 363, 376, 379], "qiita": 234, "qiu": 764, "qlen": [220, 221], "qseq": [220, 221, 431, 498, 550, 606, 650], "qseqid": [220, 221], "qstart": [220, 221], "quadrat": 136, "qual": 226, "qual_fl": 225, "qualifi": [224, 227], "qualit": [148, 149, 866], "qualiti": [90, 225, 233, 382, 387, 399, 403, 419, 433, 458, 473, 487, 504, 509, 524, 538, 557, 562, 574, 578, 594, 608, 616, 621, 640, 866, 1102], "quantifi": 1, "quantil": [123, 693], "quantit": [134, 148, 149, 870, 885], "quantiti": 149, "quartil": 123, "queri": [0, 50, 53, 104, 220, 221, 308, 375, 616], "query1": 221, "query_begin": 20, "query_sequ": [0, 20, 53, 54], "quick": [658, 711, 734, 742, 866, 870], "quit": 1107, "quot": 230, "qvalu": 693, "r": [1, 53, 116, 117, 123, 124, 125, 126, 127, 134, 148, 149, 226, 227, 236, 277, 382, 504, 557, 666, 685, 686, 687, 691, 692, 693, 694, 695, 703, 756, 757, 758, 759, 760, 764, 866, 870, 871, 878, 902, 977, 1020], "r1": 1102, "r2": 1102, "r3": 1102, "r4": 1102, "r5": 1102, "r_i": 703, "r_m": 758, "ra": [224, 235], "raaijmak": 130, "raimon": 703, "rais": [65, 82, 84, 85, 88, 92, 94, 96, 107, 116, 117, 118, 134, 146, 148, 149, 150, 154, 216, 225, 226, 232, 237, 248, 249, 250, 269, 270, 271, 273, 274, 275, 290, 322, 337, 355, 373, 376, 377, 384, 400, 401, 405, 407, 409, 420, 421, 423, 424, 426, 427, 428, 429, 435, 451, 453, 455, 470, 471, 475, 477, 479, 488, 490, 491, 493, 494, 495, 496, 501, 506, 521, 522, 526, 528, 530, 540, 542, 543, 545, 546, 547, 548, 554, 559, 575, 576, 580, 582, 584, 595, 596, 598, 599, 601, 602, 603, 604, 611, 618, 633, 634, 635, 637, 641, 643, 644, 646, 647, 648, 649, 652, 658, 665, 666, 668, 669, 670, 673, 680, 683, 684, 690, 697, 698, 704, 711, 718, 720, 721, 722, 728, 734, 741, 744, 745, 746, 754, 756, 757, 758, 760, 761, 799, 843, 854, 866, 868, 870, 871, 876, 884, 885, 886, 887, 890, 898, 900, 904, 906, 907, 911, 912, 913, 918, 919, 920, 921, 924, 925, 926, 927, 929, 930, 931, 937, 939, 940, 943, 950, 952, 954, 970, 977, 978, 980, 983, 985, 986, 988, 989, 991, 993, 995, 998, 1002, 1004, 1007, 1018, 1019, 1020, 1021, 1026, 1031, 1042, 1043, 1044, 1045], "rand": [166, 179, 762], "randint": 881, "randn": [881, 884, 885], "random": [115, 117, 130, 166, 179, 218, 693, 756, 760, 762, 854, 871, 881, 883, 884, 885, 886, 943], "random_fn": 762, "randomli": [112, 139, 747, 756, 758, 759, 762, 854, 886, 943, 980, 1021], "randomst": [980, 1021], "rang": [90, 112, 121, 123, 135, 136, 145, 149, 226, 227, 234, 399, 403, 409, 419, 422, 433, 473, 479, 487, 489, 524, 530, 538, 541, 574, 578, 584, 594, 597, 608, 637, 640, 642, 756, 757, 866, 885, 919, 924, 943, 997, 1017, 1107], "rangeindex": [65, 82, 85, 94, 232], "rangle_a": [694, 696], "rank": [1, 123, 144, 236, 688, 756, 757, 758, 880, 937, 993, 994], "rapid": [218, 225, 997], "rapidli": 1107, "rare": [107, 121, 885], "rare_threshold": 107, "rarefact": [130, 943], "rate": [107, 654, 881], "rather": [1, 123, 230, 654, 685, 764, 981, 1039], "ratio": [124, 135, 141, 685, 686, 687, 688, 691, 692, 694, 695, 699, 705, 885], "rational": 880, "raw": [220, 787, 820], "raw_f": [787, 820, 831], "raxml": 232, "rbwpd_": 134, "rc": [235, 399, 574, 674, 723, 748, 866], "rda": [231, 856, 870, 871], "re": [0, 1, 82, 85, 92, 116, 146, 148, 149, 150, 219, 222, 225, 226, 232, 235, 382, 408, 436, 453, 478, 502, 504, 529, 555, 557, 583, 612, 616, 636, 761, 870, 878, 880, 881, 885, 900, 943, 1028, 1033, 1034, 1036, 1105, 1107], "reach": 232, "read": [1, 53, 97, 116, 148, 149, 178, 191, 219, 220, 221, 222, 223, 226, 228, 229, 230, 231, 232, 233, 235, 236, 248, 249, 266, 268, 270, 274, 277, 278, 326, 376, 381, 382, 439, 440, 451, 452, 503, 504, 556, 557, 614, 615, 616, 653, 681, 704, 706, 729, 755, 761, 869, 902, 953, 969, 970, 971, 973, 975, 976, 977, 978, 979, 980, 981, 982, 985, 986, 988, 989, 990, 991, 993, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1045, 1105], "read_numb": 233, "read_sequ": 20, "readabl": [218, 225, 226, 229, 230, 231, 232, 277, 1044], "reader": [93, 177, 190, 218, 219, 220, 221, 222, 223, 224, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 249, 263, 268, 269, 270, 273, 274, 324, 378, 431, 498, 550, 606, 650, 675, 724, 749, 867, 938, 1013], "readi": [0, 237], "reading_fram": [439, 451, 452, 614], "readlin": [248, 277], "real": [91, 225, 226, 233, 685, 686, 687, 691, 692, 694, 695, 700, 701, 702], "realli": 1, "rearrang": 1036, "reason": [1, 117, 130, 224, 230, 884, 913], "reassign": [94, 232, 758], "reassign_index": [65, 82, 85, 95, 96, 232], "reca": 323, "recal": 230, "recapitul": 764, "recaptur": 107, "receiv": [237, 238, 249, 409, 479, 530, 584, 637, 1038], "recent": [232, 451, 616, 758], "receptor": 884, "reciproc": [122, 885], "recod": 84, "recogn": [234, 930, 940], "recommend": [1, 123, 134, 232, 235, 382, 453, 504, 557, 616, 688, 706, 866, 870, 878, 884], "recomput": [82, 85, 92], "reconstruct": [1012, 1039, 1102], "record": [221, 224, 225, 226, 227, 228, 233], "rectangl": 118, "recurs": [230, 973, 1034, 1035, 1036], "red": [674, 723, 748], "redefin": [758, 1045], "reduc": [151, 295, 342, 360, 379, 760, 854, 876, 903], "reduce_f": 151, "reduct": 855, "redund": [676, 707, 725, 730, 750, 878, 1035], "redundant_form": 699, "reeder": [124, 125], "ref": 220, "refer": [1, 50, 53, 72, 84, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 144, 145, 148, 149, 151, 298, 382, 441, 449, 450, 453, 504, 557, 616, 654, 666, 676, 686, 687, 688, 693, 697, 699, 703, 705, 707, 725, 730, 742, 750, 756, 757, 758, 759, 760, 764, 866, 870, 871, 878, 887, 913, 947, 954, 975, 978, 981, 1008, 1018, 1036, 1038, 1039, 1104], "reference_sequ": 20, "reflect": [277, 764, 1012, 1017], "regard": 693, "regardless": [53, 83, 91, 92, 235, 363, 377, 451, 672, 762], "regex": [408, 436, 478, 502, 529, 555, 583, 612, 636], "region": [228, 298, 308, 422, 489, 541, 597, 642], "regist": [97, 178, 191, 237, 238, 248, 249, 250, 262, 268, 270, 272, 274, 326, 381, 440, 503, 556, 615, 653, 681, 729, 755, 869, 953, 1037], "registri": [93, 97, 177, 178, 190, 191, 219, 223, 225, 226, 233, 324, 326, 378, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 867, 869, 938, 953, 1013, 1037, 1100], "regress": [685, 758, 878, 885], "regsistri": [262, 272], "regular": [219, 223, 230, 408, 436, 478, 502, 529, 555, 583, 612, 636, 1102], "reject": [688, 693, 881], "rel": [88, 106, 134, 219, 224, 227, 290, 337, 355, 373, 377, 409, 411, 412, 424, 426, 428, 479, 491, 493, 495, 530, 543, 545, 547, 584, 586, 587, 599, 601, 603, 637, 644, 646, 648, 699, 705, 742, 1022, 1042, 1077, 1102], "relat": [1, 116, 117, 127, 134, 148, 149, 151, 224, 225, 229, 235, 706, 752, 870, 871, 878, 913, 947, 1019], "relationship": [1, 134, 230, 870, 871, 878, 881, 885, 903, 1039, 1103], "relax": 232, "releas": [116, 134, 148, 149, 224, 236], "relev": [1, 53, 227, 693, 884, 903, 913, 947, 1039, 1102], "reli": [133, 234, 295, 342, 360, 379, 382, 504, 557], "reliabl": 693, "reload": 226, "remain": [94, 225, 1019, 1036], "remaind": [225, 903], "rememb": [234, 298], "remot": 227, "remov": [84, 104, 116, 134, 148, 149, 166, 225, 229, 232, 289, 321, 336, 354, 403, 434, 473, 500, 524, 553, 578, 610, 907, 936, 940, 972, 987, 1008, 1012, 1015, 1017, 1018, 1019, 1020, 1031, 1033, 1034, 1102], "remove_delet": [1008, 1012, 1014, 1020], "remove_empti": 936, "renam": [227, 418, 430, 486, 497, 537, 549, 593, 605, 688, 1034], "render": 1039, "renyi": [121, 145], "reorder": [758, 761, 976, 980], "repeat": [1, 226, 881, 1062], "repeatedli": 881, "repect": 225, "repen": 224, "replac": [1, 19, 52, 105, 112, 130, 225, 382, 434, 437, 500, 504, 553, 557, 609, 610, 654, 685, 688, 697, 698, 854, 879, 886, 943, 950, 1028], "replic": 985, "report": [134, 234, 249, 693, 764, 878], "repres": [1, 3, 13, 15, 17, 34, 44, 47, 50, 83, 106, 112, 114, 116, 119, 121, 122, 130, 136, 138, 139, 145, 148, 149, 151, 166, 179, 192, 203, 215, 218, 219, 220, 221, 224, 225, 229, 230, 232, 234, 235, 236, 298, 319, 327, 363, 382, 435, 501, 504, 554, 557, 611, 616, 652, 654, 658, 665, 670, 680, 694, 695, 703, 704, 711, 718, 721, 728, 734, 741, 745, 754, 764, 855, 866, 881, 890, 903, 914, 939, 944, 948, 955, 1024, 1029, 1038, 1039, 1102, 1105], "represent": [0, 1, 12, 43, 165, 175, 176, 179, 189, 201, 202, 203, 213, 218, 219, 225, 230, 234, 308, 425, 449, 492, 544, 600, 645, 664, 704, 717, 740, 763, 856, 865, 887, 890, 903, 913, 949, 954, 955, 969, 1028, 1029, 1100, 1105], "representationwarn": 1026, "reprint": 118, "reproduc": [92, 116, 148, 149], "reproduct": 885, "request": [225, 374, 665, 680, 718, 728, 741, 754, 900, 907, 919, 930, 985, 1063, 1100], "requir": [53, 116, 124, 125, 134, 148, 149, 218, 221, 222, 225, 228, 232, 235, 236, 323, 363, 376, 438, 451, 452, 613, 704, 706, 730, 758, 764, 854, 875, 883, 890, 903, 912, 977, 983, 1018, 1019, 1041, 1065, 1100, 1102, 1107], "reroot": [1017, 1018, 1019], "rerrang": 1036, "rerun": 758, "res_metadata": 901, "res_tabl": [901, 902], "res_tre": 902, "resampl": 943, "research": [1, 236, 758, 876], "resembl": 225, "reserv": [232, 234], "reset": [82, 85, 94, 1017, 1018, 1019], "reset_index": [82, 85], "reshap": [919, 924], "resid": 854, "residu": [84, 166, 223, 878], "resolv": [151, 154, 234, 764], "resourc": [134, 234, 236, 277], "respect": [1, 65, 110, 225, 228, 231, 234, 236, 248, 249, 250, 268, 269, 271, 273, 275, 277, 363, 409, 479, 530, 584, 616, 637, 665, 670, 672, 680, 688, 703, 718, 721, 728, 741, 745, 752, 754, 764, 855, 856, 901, 902, 923, 924, 925, 944], "respons": [93, 97, 177, 178, 190, 191, 324, 326, 378, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 787, 820, 831, 855, 867, 869, 871, 878, 938, 953, 1013, 1037], "restrict": [72, 116, 148, 149, 232, 327, 363, 1102], "result": [1, 20, 53, 54, 84, 86, 92, 98, 99, 100, 116, 117, 123, 137, 146, 148, 149, 150, 154, 217, 220, 221, 225, 234, 237, 277, 320, 375, 377, 382, 399, 400, 403, 433, 435, 470, 473, 501, 504, 521, 524, 554, 557, 574, 575, 578, 608, 611, 633, 652, 688, 693, 696, 697, 700, 745, 756, 758, 759, 760, 761, 762, 765, 776, 777, 787, 788, 798, 809, 810, 820, 821, 831, 832, 842, 853, 854, 856, 865, 866, 870, 871, 876, 878, 881, 886, 903, 904, 925, 928, 936, 943, 947, 949, 988, 1005, 1020, 1028, 1029, 1033, 1038, 1039, 1043, 1100, 1102, 1107], "result_constructor": 1039, "retain": [92, 290, 337, 355, 372, 373, 400, 432, 470, 499, 521, 551, 575, 607, 633, 651, 668, 720, 744, 854, 903, 943, 952], "retriev": [291, 293, 338, 340, 356, 358, 363, 374, 375, 616, 730, 913, 917, 919], "return": [0, 1, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 74, 76, 77, 78, 79, 81, 83, 84, 86, 88, 89, 90, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 173, 174, 177, 180, 181, 183, 184, 185, 186, 187, 188, 190, 193, 194, 196, 197, 198, 199, 200, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 220, 228, 237, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 302, 303, 304, 305, 306, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 324, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 391, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 462, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 513, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 617, 618, 619, 620, 621, 622, 623, 625, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 764, 767, 768, 770, 771, 772, 773, 774, 775, 776, 778, 779, 781, 782, 783, 784, 785, 786, 789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 804, 805, 806, 807, 808, 809, 811, 812, 814, 815, 816, 817, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 889, 890, 892, 894, 895, 896, 901, 902, 903, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 956, 957, 958, 959, 962, 963, 965, 967, 968, 969, 970, 971, 973, 977, 978, 979, 980, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1058, 1062, 1063, 1064, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1102, 1107], "return_cod": [435, 501, 554, 611, 652], "reus": [53, 880], "rev": 1021, "reveal": [855, 1039], "revers": [80, 91, 95, 237, 397, 399, 421, 433, 439, 451, 452, 468, 519, 572, 574, 596, 608, 609, 614, 631, 756, 760, 941, 1021, 1102, 1107], "reverse_compl": [399, 421, 574, 596, 1102], "reverse_transcrib": 438, "review": 975, "revisit": 703, "rf": [439, 452, 614], "rfam": 235, "rho": 757, "riboswitch": [227, 298], "rice": 226, "rich": [1, 110, 116, 121, 126, 129, 130, 134, 143, 145], "rich_sparse_otu_table_hdf5": 913, "right": [92, 107, 138, 230, 377, 685, 686, 687, 691, 696, 700, 701, 702, 703, 997, 1042, 1043, 1107], "right_child_id": 1028, "rightarrow": [686, 687, 691, 692, 694, 695], "risk": 885, "rl": [224, 235], "rm": [235, 766, 832], "rn": [224, 235], "rna": [0, 65, 70, 99, 102, 104, 222, 224, 225, 226, 227, 232, 233, 235, 382, 400, 437, 438, 439, 441, 451, 452, 453, 470, 521, 616, 633, 693, 1102], "rna_seq": [224, 227], "robbin": 119, "robinson": 978, "robust": [134, 234, 699, 705, 760, 764], "role": [235, 654, 884], "rome": 118, "root": [1, 3, 116, 129, 134, 148, 149, 230, 236, 704, 970, 971, 972, 973, 975, 976, 977, 981, 985, 986, 987, 990, 991, 993, 995, 1000, 1002, 1004, 1005, 1012, 1017, 1018, 1019, 1022, 1024, 1026, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1105], "root_at": [1018, 1033, 1035, 1036], "root_at_midpoint": [1017, 1039], "root_nam": [1017, 1018, 1019, 1034], "rosid": 224, "roughli": 130, "round": [116, 123, 130, 148, 149, 758, 881, 884, 885, 985], "roundtrip": [219, 223], "roundtripp": [295, 342, 360, 363, 379], "routin": 730, "row": [1, 65, 146, 150, 151, 154, 166, 179, 192, 203, 214, 218, 219, 223, 232, 298, 363, 654, 658, 673, 687, 688, 690, 693, 694, 695, 697, 698, 700, 701, 702, 703, 706, 707, 711, 722, 734, 746, 747, 752, 756, 757, 758, 759, 760, 761, 762, 764, 856, 870, 871, 874, 878, 884, 885, 890, 897, 908, 913, 914, 919, 923, 924, 925, 939, 940, 947, 949, 1042], "rozan": 703, "rp": 224, "rpd": 134, "rpd_": 134, "rrna": [1, 693], "rt": [224, 235], "rtol": 1042, "rubbbbrbcefgh": 233, "rule": [107, 225, 232, 234, 235, 1038], "run": [1, 3, 116, 146, 148, 149, 150, 226, 233, 234, 407, 477, 528, 582, 688, 756, 757, 758, 760, 761, 764, 776, 798, 809, 842, 853, 866, 1102, 1107], "run_numb": 233, "runtim": [225, 382, 504, 557, 1065, 1107], "runtimeerror": 117, "rvrywstlnepwvfsnsgyalgtnapgrcsasnvakpgdsgtgpyivthnqi": 224, "rvsrv": 235, "rx": 224, "rykmbdhvn": [411, 412, 586, 587], "r\u00e9nyi": 136, "s1": [0, 1, 382, 384, 400, 401, 405, 420, 421, 426, 427, 428, 429, 455, 470, 471, 475, 488, 493, 494, 495, 496, 504, 506, 521, 522, 526, 540, 545, 546, 547, 548, 557, 559, 575, 576, 580, 595, 596, 601, 602, 603, 604, 616, 618, 633, 634, 635, 641, 646, 647, 648, 649, 688, 693, 756, 760, 900, 901, 902, 904, 906, 907, 910, 911, 917, 918, 919, 920, 921, 923, 925, 928, 929, 934, 935, 936, 937, 939, 941, 942, 943, 944, 946, 949, 950, 952], "s12064": [699, 705], "s2": [0, 1, 400, 405, 470, 475, 521, 526, 575, 580, 633, 635, 688, 693, 756, 760, 900, 901, 902, 904, 907, 910, 911, 917, 918, 919, 920, 921, 923, 925, 928, 929, 934, 935, 936, 937, 939, 941, 942, 943, 944, 946, 949, 950, 952], "s3": [688, 693, 756, 760, 900, 901, 902, 904, 910, 911, 918, 919, 920, 921, 925, 928, 929, 935, 936, 937, 939, 941, 942, 943, 944, 946, 949, 950, 952], "s4": [688, 693, 756, 760, 901, 902, 904, 910, 919], "s46826": 224, "s5": [688, 693, 756, 760, 904, 919], "s6": [688, 693, 760, 904], "s7": [760, 904], "s8": 904, "s9": 904, "s_": [1, 107, 110, 121, 123, 130, 143, 145], "s_i": 703, "sa": 235, "sacc": [220, 221], "saccver": [220, 221], "safe": [1, 116, 146, 148, 149, 150, 234, 876, 973], "safe_char": 230, "saga": [308, 320, 616], "sagb": [308, 320], "sagc": 308, "sai": [298, 308, 885], "saitou": 1039, "sallacc": [220, 221], "sallgi": [220, 221], "sallseqid": [220, 221], "salltitl": [220, 221], "salmo": [225, 232], "salvemini": 118, "sam_id": 924, "same": [1, 65, 83, 84, 85, 88, 92, 94, 106, 112, 116, 121, 123, 134, 135, 141, 148, 149, 214, 215, 216, 217, 223, 225, 226, 227, 228, 230, 233, 235, 237, 290, 311, 325, 327, 337, 355, 372, 373, 377, 387, 389, 396, 399, 400, 403, 405, 406, 422, 426, 427, 428, 429, 433, 434, 438, 441, 442, 451, 458, 460, 467, 470, 473, 475, 476, 489, 493, 494, 495, 496, 500, 509, 511, 518, 521, 524, 526, 527, 541, 545, 546, 547, 548, 553, 562, 564, 571, 574, 575, 578, 580, 581, 597, 601, 602, 603, 604, 608, 610, 613, 616, 621, 623, 630, 633, 635, 642, 646, 647, 648, 649, 656, 658, 666, 667, 668, 670, 679, 683, 684, 688, 693, 709, 711, 719, 720, 721, 727, 732, 734, 743, 744, 745, 747, 753, 756, 757, 758, 759, 760, 761, 764, 854, 868, 870, 871, 875, 876, 878, 884, 885, 886, 890, 903, 911, 934, 950, 989, 1021, 1036, 1038, 1042, 1102, 1105], "samp_id": [917, 919], "sampl": [1, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 217, 218, 219, 234, 363, 685, 688, 693, 707, 756, 757, 759, 760, 766, 799, 832, 843, 854, 856, 865, 866, 868, 870, 871, 876, 877, 878, 881, 883, 884, 885, 898, 899, 900, 901, 902, 903, 904, 906, 907, 910, 911, 912, 913, 915, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 980, 1043, 1103], "sample1": [908, 914], "sample2": [908, 914], "sample3": 914, "sample4": 914, "sample5": 914, "sample6": 914, "sample_constraint": 856, "sample_count": [884, 885], "sample_gen": 924, "sample_group_metadata": 887, "sample_id": [887, 924, 932, 937], "sample_index": 887, "sample_map": 915, "sample_md": 1, "sample_metadata": [234, 378, 381, 887, 907], "sample_metadata_f": 928, "sample_nam": 234, "sample_typ": [911, 936], "samplea": 854, "sampleb": 854, "samplec": 854, "sampleid": [234, 912], "samplemetadata": 234, "samplerecord": 227, "sanger": 226, "sapien": 225, "sapiensaccggttggc": 232, "satisfi": [237, 323, 883, 1088], "save": [53, 308, 363, 376, 707, 787, 820, 831, 1009], "sb": 98, "sbc": 235, "sbjct": 221, "sbjctframe": 221, "sblastnam": [220, 221], "sbp": 703, "scalar": [111, 435, 501, 554, 611, 652, 654, 658, 696, 702, 706, 711, 734, 866, 927, 931], "scale": [114, 757, 870, 871, 872, 878], "scale_i": 878, "scandinavian": 110, "scatter": 866, "scatterplot": [856, 866], "scenario": [223, 688, 1033], "scheme": [236, 277, 292, 296, 297, 339, 343, 344, 357, 361, 362, 363, 376, 380, 674, 723, 748], "schmidt": [694, 695], "schneider": 84, "schoch": 236, "school": 224, "schwartz": 666, "sci": [100, 103, 221, 703], "scienc": [108, 109, 116, 222, 225, 666, 871], "sciencedirect": 222, "scientif": [220, 234, 730, 855], "sciki": 225, "scikit": [0, 1, 89, 90, 93, 97, 98, 101, 104, 105, 116, 148, 149, 150, 151, 152, 153, 154, 177, 178, 190, 191, 219, 220, 221, 222, 224, 225, 226, 230, 231, 232, 233, 235, 236, 324, 326, 378, 381, 417, 419, 431, 438, 439, 440, 441, 451, 452, 485, 487, 498, 503, 536, 538, 550, 556, 592, 594, 606, 613, 614, 615, 639, 640, 650, 653, 675, 681, 682, 724, 729, 749, 755, 855, 867, 869, 938, 953, 1013, 1033, 1037, 1040, 1102, 1106], "scipi": [1, 117, 147, 150, 153, 215, 676, 683, 688, 693, 704, 707, 725, 730, 742, 750, 752, 757, 758, 760, 764, 876, 881, 884, 885, 906, 937, 947, 992], "scomnam": [220, 221], "scope": [116, 1107], "score": [0, 53, 84, 98, 99, 100, 101, 102, 103, 104, 105, 111, 220, 221, 225, 227, 228, 233, 616, 654, 669, 672, 856, 878, 1102], "score_filt": 53, "score_onli": 53, "score_s": 53, "sdbl": 985, "sdr": 123, "sdrhelp": 123, "se": 235, "sea": 108, "search": [67, 98, 220, 221, 225, 291, 323, 338, 356, 375, 407, 420, 477, 488, 528, 540, 582, 595, 641, 655, 708, 731, 871, 906, 918, 921, 929, 952, 983, 988, 989, 990, 991, 1062, 1102], "sec": 504, "second": [1, 50, 53, 98, 99, 100, 101, 102, 103, 104, 223, 226, 232, 237, 250, 298, 320, 442, 658, 688, 711, 734, 885, 997, 1029, 1100, 1107], "secondari": [885, 914], "section": [92, 225, 226, 231, 234, 235, 363, 441, 616, 757, 758, 870, 871], "sediment": 108, "see": [1, 91, 92, 93, 97, 104, 116, 134, 146, 148, 149, 150, 151, 153, 154, 177, 178, 190, 191, 221, 224, 225, 226, 230, 232, 233, 234, 236, 237, 280, 324, 326, 327, 345, 363, 378, 381, 405, 431, 440, 441, 452, 475, 498, 503, 526, 550, 556, 580, 606, 615, 616, 635, 650, 653, 658, 675, 681, 694, 695, 711, 724, 729, 734, 749, 755, 756, 757, 758, 759, 760, 761, 764, 855, 866, 867, 869, 876, 878, 880, 881, 885, 887, 893, 928, 938, 953, 954, 1013, 1037, 1100, 1101, 1107], "seed": [693, 756, 760, 854, 881, 884, 885, 886, 943], "seem": 884, "seen": [224, 227, 885], "segment": [3, 14, 18, 34, 46, 51, 118], "select": [112, 134, 139, 234, 693, 760, 883, 884, 943, 1021], "selenocystein": 504, "self": [4, 5, 7, 8, 9, 10, 11, 21, 22, 23, 25, 26, 27, 28, 29, 31, 35, 36, 38, 39, 40, 41, 42, 55, 56, 58, 59, 60, 61, 62, 64, 71, 74, 76, 78, 156, 157, 159, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 173, 174, 180, 181, 183, 184, 185, 186, 187, 188, 193, 194, 196, 197, 198, 199, 200, 204, 205, 207, 208, 209, 210, 211, 212, 239, 240, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 255, 256, 257, 258, 259, 260, 272, 273, 274, 275, 282, 284, 285, 286, 288, 300, 302, 303, 304, 306, 308, 312, 314, 315, 316, 318, 322, 329, 331, 332, 333, 335, 347, 349, 350, 351, 353, 365, 367, 368, 369, 371, 388, 389, 391, 393, 395, 433, 443, 445, 446, 447, 459, 460, 462, 464, 466, 510, 511, 513, 515, 517, 563, 564, 566, 568, 570, 608, 622, 623, 625, 627, 629, 656, 657, 660, 661, 662, 663, 665, 667, 679, 680, 709, 710, 713, 714, 715, 716, 718, 719, 727, 728, 732, 733, 736, 737, 738, 739, 741, 743, 753, 754, 767, 768, 770, 771, 772, 773, 774, 775, 778, 779, 781, 782, 783, 784, 785, 786, 789, 790, 792, 793, 794, 795, 796, 797, 800, 801, 803, 804, 805, 806, 807, 808, 811, 812, 814, 815, 816, 817, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 833, 834, 836, 837, 838, 839, 840, 841, 844, 845, 847, 848, 849, 850, 851, 852, 857, 858, 860, 861, 862, 863, 864, 868, 889, 892, 894, 895, 896, 897, 900, 904, 908, 919, 925, 927, 928, 931, 940, 943, 949, 952, 958, 959, 962, 963, 965, 967, 968, 969, 970, 971, 972, 974, 975, 978, 979, 980, 981, 984, 985, 986, 987, 998, 1005, 1006, 1007, 1008, 1014, 1015, 1016, 1017, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1047, 1048, 1051, 1052, 1053, 1054, 1055, 1058, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1105, 1107], "self_aft": 1030, "self_befor": 1030, "semi": 230, "semicolon": [225, 228], "semimetr": 876, "send": [220, 221], "sens": [871, 885, 1029, 1039], "sensit": [225, 234, 425, 492, 544, 600, 645], "sep": 224, "separ": [1, 220, 221, 223, 225, 226, 228, 229, 230, 231, 232, 234, 760, 871, 912, 915], "seq": [0, 3, 17, 50, 65, 75, 80, 86, 87, 89, 90, 94, 95, 96, 98, 99, 100, 101, 102, 103, 220, 221, 222, 225, 226, 228, 232, 233, 385, 386, 399, 406, 409, 417, 419, 432, 433, 435, 436, 439, 452, 453, 456, 457, 476, 479, 485, 487, 499, 501, 502, 507, 508, 527, 530, 536, 538, 551, 554, 555, 560, 561, 574, 581, 584, 592, 594, 607, 608, 611, 612, 614, 616, 619, 620, 637, 639, 640, 651, 652, 693, 854, 1107], "seq1": [0, 65, 82, 85, 94, 98, 99, 100, 101, 102, 103, 222, 225, 226, 232, 235, 683, 684], "seq2": [0, 65, 82, 85, 94, 98, 99, 100, 101, 102, 103, 225, 226, 235, 683, 684], "seq3": [65, 85, 225, 232], "seq4": 225, "seq5": 225, "seq_1": 228, "seq_2": 228, "seq_gener": [406, 476, 527, 581], "seq_id": 228, "seq_num": [225, 226, 227, 228, 233], "seqid": 228, "seqr": 227, "sequenc": [1, 3, 13, 14, 15, 18, 19, 34, 45, 46, 47, 50, 51, 52, 53, 65, 66, 68, 69, 70, 75, 77, 79, 80, 82, 83, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 166, 175, 179, 192, 201, 203, 220, 221, 222, 223, 224, 226, 227, 228, 233, 236, 298, 308, 320, 693, 707, 762, 854, 885, 1099, 1100, 1107], "sequence1": 104, "sequence2": 104, "sequenceprocessor": 1107, "sequencevector": [179, 214], "sequenti": [144, 223, 225, 226, 232, 703, 704, 866, 1031], "ser": 504, "seri": [1, 95, 146, 228, 280, 292, 297, 327, 339, 344, 345, 357, 362, 688, 693, 752, 756, 757, 759, 760, 765, 856, 881], "serial": [229, 363, 706, 856, 1100], "serin": 504, "serv": [0, 236, 855, 866, 1017, 1019], "server": [98, 99, 100, 101, 102, 103, 236], "set": [13, 33, 45, 53, 83, 86, 91, 92, 116, 134, 148, 149, 154, 225, 227, 229, 232, 238, 277, 291, 308, 321, 338, 356, 375, 377, 382, 400, 409, 422, 425, 435, 453, 470, 479, 489, 492, 501, 504, 521, 530, 541, 544, 554, 557, 575, 584, 597, 600, 611, 616, 633, 637, 642, 645, 652, 666, 674, 680, 685, 697, 723, 728, 748, 754, 764, 854, 876, 878, 881, 883, 884, 885, 903, 904, 911, 943, 945, 972, 974, 977, 981, 985, 987, 1008, 1017, 1018, 1019, 1023, 1024, 1034, 1036, 1038, 1045, 1056, 1057, 1062, 1102, 1107], "set1": 866, "set_index": 993, "setter": 307, "setup": 1107, "seven": 688, "sever": [116, 230, 232, 881], "sex": [883, 884], "sffaaa": 226, "sfprgfifgagssayqfegavneggrgpsiwdtfthkypekirdgsnaditv": 224, "sframe": [220, 221], "sg": [439, 452, 614], "sgc": [451, 452], "sgi": [220, 221], "shallow": [65, 68, 308, 309, 385, 456, 507, 560, 616, 619, 956, 981, 1034], "shannon": [84, 120, 121, 135, 136, 145], "shannon_entropi": 84, "shape": [3, 13, 14, 15, 17, 18, 19, 34, 44, 45, 46, 47, 51, 52, 77, 86, 216, 218, 231, 656, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 709, 732, 758, 872, 875, 886, 887, 913, 914, 947, 954], "share": [53, 89, 90, 92, 107, 377, 400, 417, 419, 470, 485, 487, 521, 536, 538, 575, 592, 594, 616, 633, 639, 640, 855, 1105], "shear": 1012, "sheet": 234, "shift": 320, "short": 1107, "short_cicruit": 1066, "short_circuit": 1065, "short_method_nam": [856, 1043], "shorter": 232, "should": [1, 53, 84, 105, 106, 112, 116, 117, 130, 134, 143, 146, 147, 148, 149, 150, 220, 227, 231, 234, 236, 237, 248, 249, 250, 290, 308, 337, 355, 363, 373, 382, 405, 422, 423, 424, 434, 441, 475, 489, 490, 491, 500, 504, 526, 541, 542, 543, 553, 557, 580, 597, 598, 599, 610, 635, 642, 643, 644, 684, 686, 687, 688, 699, 705, 742, 758, 760, 764, 854, 870, 871, 876, 877, 878, 881, 884, 885, 898, 899, 908, 943, 949, 952, 993, 998, 1015, 1017, 1018, 1019, 1034, 1036], "shouldn": 871, "show": [1, 308, 881, 1105], "show_intern": 973, "shown": [298, 688, 870], "shrink": 693, "shtml": 225, "shuffl": 980, "shuffle_f": [980, 1021], "shuffled_tre": 1021, "shuffler": 1021, "sibl": [230, 400, 470, 521, 575, 633], "side": [134, 758, 761, 764, 1033], "sigh": 1099, "sign": [234, 688, 1043], "signatur": [151, 278, 903, 913, 947], "signific": [1, 234, 688, 693, 756, 758, 759, 760, 761, 764, 884, 885], "significance_test": 688, "significantli": [1, 91, 688, 756, 759, 760], "silent": [116, 148, 149, 919], "silpl": 451, "simd": [53, 104], "similar": [98, 99, 100, 101, 102, 103, 147, 221, 224, 225, 226, 229, 232, 234, 237, 616, 654, 756, 757, 758, 759, 760, 855, 871, 876, 878, 884, 885, 1102, 1105], "similarli": [0, 1, 225, 1102], "simpl": [220, 221, 225, 226, 230, 234, 235, 237, 262, 272, 700, 757, 764, 1100, 1105], "simpler": 0, "simplex": [686, 694, 695, 703], "simpli": [84, 92, 143, 237, 441, 676, 725, 750, 876, 881, 988, 1107], "simplifi": 118, "simpson": [112, 114, 121, 122, 136, 140, 141, 145], "simpson_": 140, "simul": [685, 881, 884, 885], "sinc": [1, 65, 82, 85, 95, 118, 224, 225, 227, 232, 234, 236, 299, 409, 451, 479, 530, 584, 616, 637, 688, 758, 881, 885, 1030, 1045, 1107], "singl": [1, 65, 82, 85, 94, 116, 124, 125, 133, 148, 149, 151, 223, 224, 225, 226, 227, 230, 232, 233, 234, 235, 280, 295, 298, 308, 320, 327, 342, 345, 360, 363, 379, 389, 392, 397, 409, 422, 436, 460, 463, 468, 479, 489, 502, 511, 514, 519, 530, 541, 555, 564, 567, 572, 584, 597, 612, 623, 626, 631, 637, 642, 688, 703, 764, 882, 903, 904, 913, 928, 976, 1019, 1088, 1100, 1105, 1107], "singleton": [1, 107, 110, 111, 115, 117, 119, 133, 137, 142, 237], "singular": [1, 217, 880, 1012, 1088], "sinica": 107, "site": [1, 227, 231, 422, 489, 541, 597, 642, 855, 856, 866, 876], "site0": 231, "site1": [231, 855], "site10": 855, "site2": [231, 855], "site3": [231, 855], "site4": [231, 855], "site5": [231, 855], "site6": [231, 855], "site7": [231, 855], "site8": [231, 855], "site9": [231, 855], "sitemap": 227, "situat": [1, 866, 883], "six": [231, 439, 452, 614, 688], "size": [77, 114, 693, 756, 757, 758, 760, 843, 854, 866, 875, 881, 883, 884, 885, 903, 913, 947, 1064], "sk": [234, 295, 342, 360, 379], "skbio": [234, 1099], "skin": [1, 866], "skip": [422, 489, 541, 597, 642, 756, 758, 759, 760, 764, 913], "skip_subregion": 228, "sklearn": 150, "slen": [220, 221], "slice": [72, 389, 407, 408, 422, 432, 460, 477, 478, 489, 499, 511, 528, 529, 541, 551, 564, 582, 583, 597, 607, 623, 636, 642, 651, 658, 706, 711, 734, 890, 960, 1102], "slightli": [98, 123, 760], "slope": 123, "slow": [1, 116, 146, 148, 149, 150], "slower": [0, 1040], "sm": [435, 501, 554, 611, 652], "small": [1, 112, 229, 235, 685, 697, 698, 878], "smaller": [121, 143, 422, 489, 541, 597, 642, 761], "smallest": [144, 232, 884, 885, 937], "smith": [0, 53, 101, 102, 103, 104, 764], "snif": 1100, "sniffer": [218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 264, 269, 270, 273, 274, 1100], "so": [1, 3, 20, 84, 98, 99, 100, 101, 102, 103, 105, 116, 146, 148, 149, 150, 225, 230, 234, 237, 277, 278, 308, 311, 411, 412, 586, 587, 758, 832, 855, 870, 871, 872, 876, 878, 881, 883, 884, 885, 945, 1038, 1100, 1105, 1107], "sob": [1, 106, 121, 131, 132, 133, 145], "societi": 134, "softwar": [1, 225, 226, 234, 948, 1099], "sole": [234, 372], "solexa": 226, "solut": 117, "solv": [117, 881], "some": [1, 53, 106, 116, 118, 130, 134, 166, 225, 227, 230, 233, 234, 248, 249, 250, 298, 322, 382, 504, 557, 687, 700, 701, 702, 871, 881, 884, 1065, 1105, 1107], "someformat": 1100, "someskbioclass": [237, 1100], "someth": [93, 97, 177, 178, 190, 191, 237, 249, 269, 270, 271, 273, 274, 275, 324, 326, 378, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 762, 867, 869, 908, 938, 953, 1013, 1037, 1107], "sometim": [112, 225, 227, 234, 871, 1100], "somewhat": [764, 1009], "sonnhamm": 235, "soppos": 224, "sort": [86, 92, 152, 153, 299, 308, 311, 406, 409, 435, 476, 479, 501, 527, 530, 554, 581, 584, 611, 637, 652, 799, 832, 854, 903, 942, 943, 1023, 1028, 1029, 1038, 1102, 1107], "sort_categori": [765, 766, 788, 799, 832], "sort_f": 941, "sort_index": 95, "sorted_t": 942, "sourc": [3, 12, 13, 14, 15, 16, 17, 18, 19, 34, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 72, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 164, 165, 166, 175, 176, 177, 178, 179, 188, 189, 190, 191, 192, 201, 202, 203, 212, 213, 214, 215, 216, 217, 224, 225, 227, 228, 238, 248, 249, 250, 251, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 307, 308, 309, 310, 311, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 514, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 711, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 766, 776, 777, 787, 788, 798, 799, 809, 810, 820, 821, 831, 832, 842, 843, 853, 854, 856, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 890, 893, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 960, 964, 966, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1056, 1062, 1063, 1064, 1065, 1066, 1076, 1077, 1078, 1088, 1089, 1099], "space": [1, 216, 225, 230, 232, 234, 235, 308, 311, 320, 685, 686, 687, 691, 692, 694, 695, 799, 855, 856, 866, 870, 877, 903], "spaitial": 760, "span": [16, 48, 116, 134, 151, 225, 227, 230, 298, 323, 903, 1019], "spars": [219, 694, 695, 704, 870, 878, 887, 890, 906, 913, 923, 924, 925, 945, 947], "sparse_vector": 903, "sparsedatafram": 946, "spatial": [1, 147, 150, 153, 215, 676, 683, 707, 725, 730, 742, 750, 752, 760], "spearman": [1, 757, 758, 761], "spearmanr": [757, 758], "spec": 363, "specfi": 1107, "speci": [1, 106, 107, 114, 116, 119, 121, 122, 123, 128, 134, 138, 139, 143, 144, 145, 231, 236, 693, 700, 855, 871, 876, 878, 955], "special": [53, 136, 145, 229, 237, 913, 947], "speciat": 764, "specie1": 855, "specie2": 855, "specie3": 855, "specie4": 855, "specie5": 855, "specie6": 855, "specie7": 855, "specie8": 855, "specie9": 855, "species0": 231, "species1": 231, "species2": 231, "species3": 231, "species4": 231, "species5": 231, "species6": 231, "species7": 231, "species8": 231, "species_a": 975, "species_divers": 106, "species_even": 106, "species_rich": 106, "speciesa": 975, "specif": [111, 116, 123, 146, 148, 149, 150, 151, 154, 237, 323, 327, 616, 764, 776, 798, 799, 809, 842, 853, 884, 885, 890, 903, 913, 947, 1021, 1033, 1100, 1106, 1107], "specifi": [88, 92, 134, 154, 166, 220, 222, 223, 225, 226, 227, 228, 229, 232, 235, 236, 237, 268, 277, 298, 308, 321, 323, 375, 376, 382, 389, 407, 409, 425, 438, 450, 451, 453, 460, 477, 479, 492, 504, 511, 528, 530, 544, 557, 564, 582, 584, 600, 613, 616, 623, 637, 645, 655, 658, 665, 668, 673, 674, 680, 686, 687, 688, 693, 694, 695, 697, 698, 704, 708, 711, 718, 720, 722, 723, 728, 731, 734, 741, 744, 746, 748, 754, 756, 757, 758, 759, 760, 764, 843, 866, 868, 875, 876, 882, 890, 900, 903, 913, 917, 919, 940, 947, 977, 985, 998, 1017, 1018, 1021, 1023, 1026, 1029, 1034, 1035, 1036, 1038, 1065, 1077, 1078, 1088, 1107], "speed": [308, 876], "spermatophyta": 224, "sphingobacteria": [994, 1029], "split": [225, 226, 232, 235], "spmatrix": [890, 906], "spreadsheet": [229, 234], "sqcup": [116, 134], "sqlite": 375, "sqrt": [115, 127, 128, 129, 703, 878], "squar": [129, 130, 150, 230, 654, 707, 730, 873], "squareform": [707, 752], "sr1": 441, "srava": 235, "ss": [235, 943], "ss_con": 235, "sscinam": [220, 221], "sseq": [220, 221], "sseqid": [220, 221], "sskingdom": [220, 221], "sstart": [220, 221], "sstrand": [220, 221], "ssw": [20, 53, 104], "stabl": [665, 680, 718, 728, 741, 754, 974], "stack": 1009, "stackoverflow": 1064, "stai": 234, "stale": 308, "stamataki": 975, "stand": [412, 587, 758], "standalon": 225, "standard": [225, 226, 228, 230, 234, 435, 438, 439, 441, 451, 452, 501, 554, 611, 613, 614, 652, 658, 685, 688, 711, 734, 757, 758, 872, 875, 878, 879, 1100, 1102], "standardis": 114, "staphylococcu": 900, "start": [0, 3, 13, 14, 15, 16, 18, 19, 32, 33, 34, 45, 46, 47, 48, 50, 51, 52, 53, 65, 82, 85, 94, 98, 99, 100, 101, 102, 103, 104, 166, 220, 221, 224, 227, 228, 229, 230, 232, 235, 236, 298, 319, 325, 401, 420, 441, 442, 448, 451, 452, 471, 488, 522, 540, 576, 595, 634, 641, 707, 761, 762, 881, 884, 885, 923, 1036, 1107], "start_end_posit": 0, "stat": [0, 1, 3, 65, 82, 83, 85, 91, 92, 95, 130, 166, 179, 215, 217, 218, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 382, 389, 399, 400, 403, 406, 433, 437, 438, 439, 441, 451, 452, 453, 460, 470, 473, 476, 504, 511, 521, 524, 527, 557, 564, 574, 575, 578, 581, 608, 609, 613, 614, 616, 623, 633, 654, 665, 674, 680, 682, 937, 1099, 1102], "state": [3, 13, 14, 15, 17, 18, 19, 34, 46, 47, 49, 50, 51, 52, 134, 222, 232, 234, 277, 1065, 1066, 1076, 1088, 1107], "static": [453, 912, 915], "statis": [756, 759], "statist": [1, 107, 110, 115, 123, 130, 136, 137, 145, 686, 688, 693, 756, 758, 759, 760, 761, 764, 855, 870, 871, 875, 881, 884, 885, 1099], "statistica": [107, 118], "statsmodel": [688, 693, 881], "statu": [3, 34, 883, 884], "staxid": [220, 221], "std": [224, 875, 879, 884], "steel": 1039, "steep": 870, "step": [1, 65, 82, 85, 94, 116, 146, 148, 149, 150, 232, 237, 874, 881], "still": [230, 231, 277, 307, 688, 693, 697, 758, 760, 1033], "stimat": 879, "stitl": [220, 221], "stockholm": [93, 97], "stockholm_format": 235, "stombaugh": [148, 149], "stool": 885, "stop": [65, 82, 85, 94, 107, 166, 179, 223, 232, 401, 420, 438, 439, 441, 451, 452, 471, 488, 504, 522, 539, 540, 576, 595, 613, 614, 634, 641, 887, 954, 975, 1066, 1102], "storag": [308, 945], "store": [2, 65, 75, 80, 89, 90, 91, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 298, 308, 363, 380, 382, 417, 419, 453, 485, 487, 504, 536, 538, 557, 592, 594, 616, 639, 640, 676, 706, 707, 725, 730, 750, 761, 777, 810, 821, 856, 870, 871, 876, 878, 903, 913, 947, 955, 1101, 1102], "str": [31, 45, 50, 54, 64, 70, 75, 80, 93, 97, 105, 146, 150, 151, 152, 153, 154, 164, 166, 177, 178, 179, 188, 190, 191, 192, 203, 212, 215, 220, 227, 228, 235, 238, 247, 260, 263, 264, 265, 269, 270, 271, 273, 274, 275, 277, 288, 290, 293, 295, 306, 318, 324, 326, 335, 337, 340, 342, 353, 355, 358, 360, 363, 371, 372, 373, 374, 375, 376, 378, 379, 381, 382, 384, 392, 397, 398, 401, 405, 406, 407, 408, 409, 420, 421, 423, 425, 426, 427, 428, 429, 431, 432, 434, 435, 440, 441, 449, 455, 463, 468, 469, 471, 475, 476, 477, 478, 479, 488, 490, 492, 493, 494, 495, 496, 498, 499, 500, 501, 503, 504, 506, 514, 519, 520, 522, 526, 527, 528, 529, 530, 540, 542, 544, 545, 546, 547, 548, 550, 551, 553, 554, 556, 557, 559, 567, 572, 573, 576, 580, 581, 582, 583, 584, 595, 596, 598, 600, 601, 602, 603, 604, 606, 607, 610, 611, 615, 616, 618, 626, 631, 632, 634, 635, 636, 637, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 658, 664, 665, 666, 668, 671, 673, 674, 675, 680, 681, 688, 693, 699, 704, 707, 708, 711, 717, 718, 720, 722, 723, 724, 728, 729, 731, 734, 740, 741, 744, 746, 748, 749, 754, 755, 756, 757, 759, 760, 761, 762, 775, 777, 786, 797, 799, 808, 810, 819, 821, 830, 841, 852, 856, 865, 866, 867, 869, 876, 883, 884, 897, 900, 903, 906, 907, 908, 910, 912, 913, 917, 921, 929, 937, 938, 945, 947, 948, 949, 953, 955, 969, 973, 977, 988, 989, 998, 1002, 1004, 1013, 1017, 1018, 1019, 1020, 1024, 1026, 1034, 1036, 1037, 1038, 1039, 1044, 1058, 1063, 1075, 1087, 1098], "straight": 1, "straightforward": [234, 1102], "strand": [220, 221, 227, 228, 235, 298, 437, 438, 439, 609], "stranded": 227, "strategi": [685, 697, 1039], "stream": [225, 228, 1100], "strength": 1, "streptophyta": 224, "strict": [92, 232, 400, 470, 521, 575, 633, 668, 720, 744, 758, 761, 764, 868, 903, 952], "strict_match": [883, 884], "stricter": [230, 1042], "strictli": [225, 688, 693, 704, 976], "string": [1, 12, 43, 45, 50, 53, 81, 146, 150, 151, 154, 165, 175, 176, 189, 201, 202, 213, 218, 222, 223, 225, 226, 230, 232, 234, 235, 296, 297, 343, 344, 361, 362, 363, 380, 398, 408, 409, 425, 432, 435, 436, 441, 449, 469, 478, 479, 492, 499, 501, 502, 520, 529, 530, 544, 551, 554, 555, 573, 583, 584, 600, 607, 611, 612, 632, 636, 637, 645, 651, 652, 654, 658, 664, 670, 688, 693, 706, 707, 711, 717, 721, 734, 740, 745, 756, 759, 760, 762, 865, 866, 908, 911, 937, 948, 949, 952, 969, 973, 1029, 1039, 1044, 1105], "stringifi": 897, "stringio": [1, 116, 148, 149, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 277, 706, 912, 915, 1038, 1039, 1100, 1105], "strip": [975, 979, 980], "stripe": [53, 104], "stripedsmithwaterman": [0, 104], "strong": [1, 382, 756, 758, 764], "struct": [20, 227], "structur": [3, 148, 149, 221, 223, 227, 230, 236, 666, 707, 756, 757, 764, 855, 887, 903, 913, 947, 954, 1065], "studi": [1, 116, 234, 363, 685, 688, 855, 870, 878, 885, 1019], "style": [685, 1034, 1035, 1036], "su": 235, "sub": [227, 228, 298, 886], "subclass": [92, 214, 215, 216, 217, 222, 225, 232, 235, 237, 327, 400, 470, 521, 575, 616, 633, 654, 706, 707, 762, 1038, 1065], "subfold": 1063, "subject": [1, 220, 221, 234, 1017, 1018, 1034, 1101, 1107], "subject1": 221, "subject2": 221, "sublist": 885, "submit": [224, 225, 885], "submodul": 237, "suboptim": 53, "subsampl": [130, 854, 881, 884, 885, 886, 980], "subsample_count": [130, 854], "subsample_paired_pow": 885, "subsample_pow": 881, "subseq": [422, 489, 541, 597, 616, 642], "subsequ": [101, 222, 225, 234, 384, 392, 397, 401, 420, 422, 455, 463, 468, 471, 488, 489, 506, 514, 519, 522, 540, 541, 559, 567, 572, 576, 595, 597, 616, 618, 626, 631, 634, 641, 642, 1065, 1102], "subset": [116, 134, 148, 149, 154, 218, 224, 757, 913, 919, 943, 979, 985, 1019, 1105], "subset_with_metadata": 913, "subsitut": [435, 501, 554, 611, 652], "substitut": [53, 98, 99, 100, 101, 102, 103, 105, 229, 435, 501, 504, 554, 611, 652, 654, 666, 669, 671, 672, 678, 685, 1041, 1102], "substitution_matrix": [53, 98, 99, 100, 101, 102, 103], "substitutionmatrix": [105, 435, 501, 554, 611, 652, 1102], "substract": [98, 99, 100, 101, 102, 103, 874], "substrat": 855, "substrate_cor": 855, "substrate_oth": 855, "substrate_sand": 855, "subtili": 235, "subtract": [53, 843], "subtre": [230, 236, 981, 990, 1105], "success": [1041, 1066, 1107], "success_callback": [1066, 1107], "success_f": 1107, "successfulli": 975, "suffix": 106, "suggest": [53, 249, 269, 270, 273, 274, 884], "suit": 871, "sum": [107, 116, 127, 128, 130, 134, 223, 320, 409, 479, 530, 584, 637, 687, 691, 692, 696, 885, 886, 923, 924, 928, 933, 943, 970, 1028, 1064], "sum_": [109, 112, 114, 116, 118, 121, 122, 134, 136, 138, 139, 145, 685, 687, 700, 701, 702, 758], "summar": 688, "summari": [81, 664, 688, 717, 740, 933], "super": [220, 221], "superkingdom": 236, "superset": [116, 134, 148, 149, 756, 760], "supplementari": [226, 688], "suppli": [53, 220, 225, 233, 269, 273, 372, 405, 475, 526, 580, 635, 682, 885, 903, 985], "support": [1, 2, 84, 93, 97, 118, 177, 178, 190, 191, 277, 280, 324, 326, 345, 363, 372, 378, 381, 382, 431, 440, 498, 503, 504, 550, 556, 557, 606, 615, 650, 653, 654, 666, 675, 681, 688, 693, 724, 729, 749, 755, 758, 856, 867, 869, 876, 881, 890, 903, 930, 938, 953, 955, 975, 998, 1013, 1017, 1018, 1019, 1032, 1034, 1036, 1037, 1038, 1045, 1065, 1088, 1103, 1104, 1105, 1106, 1107], "support_attr": 1038, "support_valu": 1038, "suppos": [220, 221, 224, 225, 226, 227, 230, 233, 235, 700, 881, 885], "suppress": [236, 756, 760, 761], "suppress_sequ": [53, 104], "sure": [745, 885, 1107], "surpass": 232, "surround": [230, 693], "survei": 1, "sv": 224, "svd": [217, 880], "svg": 856, "sw": [53, 883], "swab": 1, "swiss": 224, "switch": 890, "sy": 278, "symbiont": 764, "symbol": [84, 225], "symmetr": [1, 654, 658, 706, 707, 711, 730, 734, 745, 758, 762, 764, 870, 978], "symmetri": [706, 707, 730, 745, 747], "symposium": 136, "symptom": 885, "syn": 227, "synonym": [1, 236], "synthesi": 235, "synthet": 227, "system": [93, 97, 126, 138, 177, 178, 190, 191, 234, 236, 237, 308, 324, 326, 378, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 867, 869, 884, 919, 938, 953, 1013, 1037], "systemat": 134, "t": [1, 17, 53, 65, 82, 84, 85, 86, 91, 92, 96, 104, 114, 116, 118, 134, 146, 148, 149, 150, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 248, 250, 278, 298, 299, 376, 382, 387, 396, 401, 405, 409, 411, 412, 413, 414, 415, 418, 426, 427, 428, 429, 437, 451, 458, 467, 471, 475, 479, 481, 482, 483, 486, 493, 494, 495, 496, 504, 509, 518, 522, 526, 530, 532, 533, 534, 537, 545, 546, 547, 548, 557, 562, 571, 576, 580, 584, 586, 587, 588, 589, 590, 593, 601, 602, 603, 604, 609, 616, 621, 630, 634, 635, 637, 646, 647, 648, 649, 654, 672, 686, 688, 693, 694, 695, 699, 700, 704, 761, 870, 871, 876, 878, 880, 881, 883, 885, 886, 900, 908, 913, 914, 930, 937, 947, 950, 979, 980, 1017, 1018, 1019, 1020, 1028, 1034, 1038, 1039, 1040, 1102, 1106, 1107], "t0": [220, 221, 228, 231, 233, 706], "t1": [220, 221, 231, 233, 236, 706, 912, 1017], "t10": [228, 231], "t100": [220, 221], "t10596": 221, "t1217": 221, "t1233": 221, "t131567": 236, "t1566": 221, "t161": 220, "t2": [231, 233, 912, 915, 1017], "t2130": 221, "t2214": 221, "t3": [233, 912, 915], "t30": [228, 233], "t329": 220, "t330": 220, "t335928": 236, "t34": 233, "t35": 233, "t3e": [220, 221], "t4": 231, "t42": 221, "t44": 221, "t5": 915, "t50": 228, "t5565": 221, "t5587": 221, "t5671": 221, "t6": 915, "t6821": 221, "t6928": 221, "t6e": 221, "t80": 228, "t811": 221, "t8468": 221, "t8552": 221, "t8e": 221, "t9": 231, "t90": 228, "t94": 221, "t96": 228, "t99": 220, "t9e": 220, "t_a": 928, "t_b": 928, "ta": [706, 1102], "taaactatta": 224, "taaactccgg": 224, "taacaatcct": 224, "taacatatac": 226, "taacgtta": [437, 609], "taagactaaa": 224, "taatgaatgg": 224, "tab": [220, 221, 228, 229, 230, 231, 233, 234, 236, 907, 912, 915, 949], "tabl": [1, 146, 150, 219, 226, 227, 234, 236, 375, 438, 439, 441, 450, 451, 452, 613, 614, 688, 693, 855, 870, 871, 877, 878, 983, 1065, 1099, 1101, 1102], "table2": 950, "table3": 950, "table_id": [450, 887, 954], "tableexcept": [887, 939, 952, 954], "tabular": [3, 16, 48, 65, 87, 220, 221, 234, 236, 363], "tabularmsa": [0, 3, 16, 17, 34, 48, 98, 99, 100, 101, 102, 103, 104, 222, 226, 232, 235, 308, 1100], "tac": 233, "tacatcgttt": 224, "tacatgtgta": 224, "taccaggcat": 224, "tacccggt": 1102, "tacctaagtt": 224, "tacg": 233, "tacgta": 233, "tae000111": 221, "tae000171": 221, "tae000174": 221, "tae000425": 221, "tag": [228, 235, 406, 436, 476, 502, 527, 555, 581, 612, 703], "tagagattaattgccactgccaaaattctg": 0, "tagattacag": 224, "taggttgatc": 224, "tagtgaatgg": 224, "take": [1, 150, 232, 237, 248, 249, 250, 327, 405, 432, 475, 499, 526, 551, 580, 607, 635, 651, 670, 688, 721, 730, 745, 757, 758, 832, 870, 878, 881, 882, 898, 899, 908, 928, 941, 949, 950, 1039, 1065, 1105, 1107], "taken": [1, 220, 221, 225, 232, 235, 236, 688, 764, 1064], "target": [0, 1, 53, 104, 115, 228, 665, 680, 718, 728, 741, 754, 1017], "target_begin": 20, "target_sequ": [0, 20, 53, 54], "task": [1041, 1100], "tata": [408, 478, 529, 583, 636], "tataa": [408, 478, 529, 583, 636], "tatattagca": 224, "tatctaactg": 224, "tatgtatata": 226, "tatgtatatataacatatacatatatacatacata": 226, "tau": 688, "tax": 221, "tax_id": [236, 993], "taxa": [1, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 126, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 154, 234, 236, 688, 871, 885, 980, 1019, 1039], "taxdump": 993, "taxdump_readm": 236, "taxid": 236, "taxon": [1, 107, 108, 109, 112, 114, 116, 120, 121, 122, 127, 128, 134, 135, 136, 137, 138, 139, 144, 145, 148, 149, 224, 227, 887, 954, 993, 994, 1019, 1105], "taxonom": [1, 148, 994], "taxonomi": [220, 230, 234, 236, 441, 449, 450, 903, 904, 913, 930, 947, 993, 994, 1029], "taxonomy_0": [930, 945], "taxonomy_1": [930, 945], "taylor": 123, "tb": [706, 912, 915], "tc": [706, 912, 915], "tcaaaagaaa": 224, "tcatttagga": 233, "tcc": 0, "tccacaaatg": 224, "tccagaaaaa": 224, "tcg": [436, 502, 555, 612], "tcga": [435, 501, 554, 611, 652], "tcggagcagt": 224, "tcgggcasdgca": 233, "tcgggcattgca": 233, "tcgtatagat": 224, "tctacccctctcagaga": 0, "tctataagattccgcatgcgttacttataagatgtctcaacgg": 0, "tctcaatctc": 224, "tctcaga": 0, "tcttaacata": 224, "tcttcagcat": 224, "tcttgctcat": 224, "tctttgcttc": 224, "tdbl": 985, "technic": [138, 230], "techniqu": [1, 117, 685, 870, 871, 1103], "teh": [887, 954], "tell": 688, "temorg": 221, "temperatur": 884, "tempfil": 277, "temporari": 903, "temporaryfil": 277, "ten": 1, "tend": 234, "ter": [504, 871], "term": [1, 84, 106, 112, 132, 134, 219, 227, 292, 327, 339, 357, 363, 764, 855, 1039], "termin": [224, 438, 451, 613, 1030], "test": [1, 70, 79, 134, 237, 281, 287, 299, 305, 311, 317, 328, 334, 346, 352, 364, 370, 387, 396, 442, 448, 458, 467, 509, 518, 562, 571, 621, 630, 685, 688, 693, 706, 756, 758, 759, 760, 761, 763, 764, 776, 798, 809, 842, 853, 881, 884, 885, 909, 1042, 1043, 1063], "test_tabl": [912, 915], "texon": 228, "text": [109, 112, 127, 128, 144, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 248, 249, 250, 277, 363, 706, 787, 820, 831], "textiobas": [238, 248, 249, 250, 277], "textiowrapp": 277, "tf": 101, "tgaaggatca": 224, "tgaattcaac": 224, "tgca": 233, "tgene": 228, "tgenu": 236, "tgetaaafhwqaaf": 233, "tgg": [406, 436, 476, 502, 527, 555, 581, 612], "tggaacaatt": 224, "tggattaaaa": 224, "tggattctgc": 298, "tggtgcacct": 224, "tggtgctgga": 224, "tgi": 220, "tgtaataaat": 224, "tgtacacta": 3, "th": [109, 112, 127, 128, 137, 144, 703], "than": [0, 1, 53, 83, 84, 106, 107, 116, 123, 125, 143, 148, 149, 225, 230, 232, 235, 270, 274, 308, 363, 382, 383, 384, 387, 401, 405, 409, 420, 421, 422, 423, 424, 426, 427, 428, 429, 439, 452, 454, 455, 458, 471, 475, 479, 488, 489, 490, 491, 493, 494, 495, 496, 504, 505, 506, 509, 522, 526, 530, 540, 541, 542, 543, 545, 546, 547, 548, 557, 558, 559, 562, 576, 580, 584, 595, 596, 597, 598, 599, 601, 602, 603, 604, 614, 617, 618, 621, 634, 635, 637, 641, 642, 643, 644, 646, 647, 648, 649, 654, 684, 685, 688, 690, 693, 706, 747, 756, 758, 759, 760, 764, 854, 870, 871, 884, 885, 886, 919, 924, 943, 976, 981, 993, 1007, 1033, 1034, 1039, 1044, 1100, 1105], "thei": [0, 1, 75, 80, 84, 91, 107, 146, 150, 220, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 325, 382, 387, 396, 399, 422, 442, 458, 467, 489, 509, 518, 541, 557, 562, 571, 574, 597, 621, 630, 642, 656, 668, 685, 709, 720, 732, 744, 756, 757, 758, 759, 760, 761, 765, 865, 866, 870, 876, 881, 904, 913, 947, 975, 980, 987, 998, 1017, 1018, 1019, 1040, 1042, 1107], "them": [1, 50, 118, 227, 232, 234, 299, 311, 320, 321, 434, 500, 553, 610, 616, 758, 799, 875, 876, 878, 1066], "themselv": [1101, 1102], "theorem": [124, 125], "theoret": [135, 141], "theori": [84, 109, 126, 136, 138, 699, 705], "therebi": 855, "therefor": [1, 82, 85, 92, 112, 114, 116, 123, 134, 139, 148, 149, 154, 234, 363, 654, 688], "thermoplasmata": [994, 1029], "theta": [134, 688], "thi": [0, 1, 2, 3, 12, 19, 43, 52, 53, 67, 68, 69, 70, 72, 77, 79, 81, 82, 83, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 116, 117, 118, 123, 124, 125, 130, 133, 134, 146, 147, 148, 149, 150, 151, 153, 154, 166, 177, 178, 190, 191, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 248, 249, 250, 262, 270, 272, 274, 276, 277, 278, 281, 287, 290, 296, 297, 298, 299, 305, 307, 308, 309, 310, 311, 317, 319, 320, 321, 322, 323, 324, 326, 328, 334, 337, 343, 344, 346, 352, 355, 361, 362, 363, 364, 370, 372, 373, 376, 377, 378, 380, 381, 384, 385, 386, 387, 389, 392, 394, 396, 397, 400, 401, 405, 409, 411, 412, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 435, 436, 439, 440, 441, 450, 451, 452, 453, 455, 456, 457, 458, 460, 463, 465, 467, 468, 470, 471, 475, 479, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 501, 502, 503, 506, 507, 508, 509, 511, 514, 516, 518, 519, 521, 522, 526, 530, 540, 541, 542, 543, 545, 546, 547, 548, 550, 551, 554, 555, 556, 559, 560, 561, 562, 564, 567, 569, 571, 572, 575, 576, 580, 584, 586, 587, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 611, 612, 614, 615, 616, 618, 619, 620, 621, 623, 626, 628, 630, 631, 633, 634, 635, 637, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 658, 675, 676, 677, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 704, 706, 709, 711, 724, 725, 726, 729, 730, 732, 734, 747, 749, 750, 751, 752, 755, 756, 757, 758, 760, 762, 763, 764, 765, 854, 855, 866, 867, 869, 871, 876, 877, 878, 881, 883, 884, 885, 900, 903, 904, 911, 913, 919, 928, 934, 937, 938, 943, 947, 948, 952, 953, 955, 971, 973, 975, 977, 979, 980, 981, 983, 985, 986, 988, 990, 991, 993, 997, 1005, 1009, 1012, 1013, 1015, 1017, 1018, 1019, 1021, 1022, 1023, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1063, 1064, 1065, 1066, 1076, 1088, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107], "thing": 1107, "third": [700, 706, 997, 1107], "those": [1, 147, 234, 363, 377, 764, 854, 870, 885, 923, 985, 1021, 1026, 1039, 1065, 1102], "though": [118, 225, 226, 232, 233, 234, 688, 742, 756, 760, 925, 1039, 1107], "thought": 760, "thr": 504, "thraustochytrium": 450, "three": [1, 3, 65, 133, 232, 236, 700, 706, 730, 761, 855, 866, 884, 885, 903, 904, 950, 980, 1017, 1033, 1107], "threonin": 504, "threshold": [107, 1042], "through": [1, 72, 98, 99, 100, 223, 234, 262, 268, 272, 658, 711, 734, 876, 988, 1107], "throughout": [1, 229, 441, 450, 884, 1106], "throughput": [116, 148, 149, 225, 226, 693, 866, 884], "thrown": [249, 995], "thu": [1, 225, 226, 230, 234, 290, 337, 355, 373, 409, 479, 530, 584, 616, 637, 658, 711, 730, 734, 756, 758, 760, 764, 876], "thymin": [224, 227, 382, 437, 609], "ti": [83, 108, 937, 1038], "tid": 228, "tile": 233, "tile_numb": 233, "till": 236, "time": [1, 53, 82, 85, 116, 130, 141, 148, 149, 151, 225, 226, 234, 654, 694, 695, 703, 742, 756, 757, 758, 759, 761, 765, 788, 843, 878, 881, 884, 885, 890, 903, 934, 943, 955, 1021, 1107], "timestamp": 947, "tip": [1, 116, 134, 148, 149, 955, 973, 975, 977, 978, 979, 980, 982, 983, 985, 986, 988, 995, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1018, 1020, 1021, 1023, 1024, 1026, 1029, 1030, 1031, 1033, 1038, 1100, 1105], "tip_": 1022, "tip_a": [986, 1016], "tip_count": 1007, "tip_d": 986, "tip_list": 1025, "tip_nam": 977, "tip_subset": 985, "tip_tip_dist": [986, 995], "tipnam": [1002, 1004], "tissue_typ": 224, "titl": [1, 220, 221, 227, 235, 674, 723, 748, 866], "tjflkafnkkghvm": 233, "tmgc": 450, "tn": 235, "tno": 236, "to_": [665, 718, 741], "to_data_fram": 752, "to_datafram": [297, 344, 362, 363], "to_delet": 1012, "to_dict": 86, "to_hdf5": 913, "to_seri": [296, 343, 361], "toarrai": 704, "tobacco": 885, "togeth": [92, 224, 225, 227, 235, 688, 903, 928, 1065], "token": 166, "tol": 880, "toler": [880, 1042], "tolosana": [685, 703], "ton": 1, "tongu": 1, "too": [125, 876, 900, 970], "tool": [98, 101, 220, 221, 225, 232, 234, 236, 866, 871], "toolkit": 975, "top": [688, 993], "topolog": 974, "topologi": [977, 1012, 1033, 1034, 1036, 1105], "total": [108, 109, 112, 115, 116, 117, 119, 121, 126, 127, 128, 129, 130, 137, 144, 218, 220, 234, 409, 479, 530, 584, 637, 757, 903, 985], "totaldescendingbranch": 985, "toward": 971, "tparent": 228, "tr": 985, "traceback": [220, 232, 451, 616, 758], "tracheophyta": 224, "track": [223, 224], "tracker": [225, 249], "tract": 885, "trail": [225, 226, 229], "trajectori": [765, 766, 776, 777, 787, 788, 798, 799, 809, 810, 820, 821, 831, 832, 842, 843, 853], "trajectory_categori": [765, 766, 788, 799, 832], "trajectory_result": 765, "tranform": 950, "tranpos": 945, "transcrib": [224, 227, 438, 439, 609, 1102], "transcript": 298, "transect": 855, "transfer": [998, 1033], "transform": [248, 250, 422, 489, 541, 597, 642, 685, 686, 687, 691, 692, 694, 695, 699, 704, 870, 876, 878, 890, 915, 937], "translat": [224, 227, 230, 236, 277, 437, 439, 441, 452, 609, 614, 1102], "translate_six_fram": [437, 438, 451, 609, 613], "transloc": 884, "transpar": [234, 277], "transpos": 945, "trapezoid": 118, "trascrib": 224, "traver": 1105, "travers": [977, 981, 988, 991, 1003, 1006, 1009, 1010, 1011, 1027, 1105], "tre361": 224, "treat": [82, 83, 84, 85, 225, 229, 234, 363, 382, 425, 434, 492, 500, 504, 544, 553, 557, 600, 610, 616, 645, 683, 884], "treatment": [327, 688, 693, 765, 884, 901], "treatment_stat": 884, "tree": [1, 116, 134, 148, 149, 230, 235, 236, 308, 704, 902, 918, 1099, 1100], "tree1": [978, 979, 980, 1105], "tree2": [978, 979, 980, 1105], "tree3": 1105, "tree_copi": 981, "tree_copy_nod": 981, "tree_nod": 981, "tree_node_class": 1038, "treeerror": [1018, 1019], "treenod": [1, 116, 134, 148, 149, 230, 704, 902, 1038, 1039, 1100, 1105], "trg": [406, 436, 476, 502, 527, 555, 581, 612], "tri": 925, "triangl": [730, 745, 752, 758, 876, 925], "triangular": 758, "trifoliea": 224, "trifolium": 224, "trifuc": 1033, "trifurc": [116, 148, 149, 230], "trim": 451, "tripleton": 1, "trp": 504, "trubbbbrbcefgh": 233, "true": [1, 32, 33, 53, 66, 67, 68, 69, 70, 82, 83, 85, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 106, 110, 111, 112, 114, 116, 117, 121, 122, 130, 134, 138, 139, 140, 143, 146, 148, 149, 150, 151, 154, 166, 179, 214, 215, 216, 217, 220, 223, 224, 225, 226, 227, 228, 230, 233, 248, 249, 250, 269, 273, 277, 278, 291, 294, 298, 308, 320, 325, 338, 341, 356, 359, 372, 382, 383, 384, 386, 387, 389, 396, 399, 400, 402, 403, 404, 406, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 451, 452, 453, 454, 455, 457, 458, 460, 467, 470, 472, 473, 474, 476, 479, 480, 481, 482, 483, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 506, 508, 509, 511, 518, 521, 523, 524, 525, 527, 530, 531, 532, 533, 534, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 564, 571, 574, 575, 577, 578, 579, 581, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 623, 630, 633, 637, 639, 640, 643, 644, 645, 646, 647, 648, 649, 651, 652, 655, 656, 663, 665, 668, 684, 688, 693, 694, 695, 699, 706, 707, 708, 709, 716, 718, 720, 730, 731, 732, 739, 741, 744, 745, 747, 756, 758, 760, 761, 764, 799, 810, 868, 875, 876, 878, 879, 883, 884, 886, 887, 903, 906, 910, 911, 913, 914, 922, 923, 924, 925, 929, 933, 934, 935, 936, 937, 940, 941, 943, 945, 946, 947, 950, 952, 973, 975, 977, 981, 982, 984, 990, 996, 999, 1000, 1001, 1003, 1006, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1027, 1029, 1030, 1032, 1034, 1038, 1039, 1065, 1066, 1076, 1088, 1102, 1105, 1107], "truncat": [226, 664, 717, 740, 865, 1039, 1107], "trust": 226, "truth": [383, 454, 505, 558, 617], "truthi": [383, 454, 505, 558, 617], "try": [885, 886], "tryptophan": [84, 504], "tsalli": 136, "tsuperkingdom": 236, "tsv": [229, 234, 295, 342, 360, 363, 376, 379, 915, 949], "tsv_fh": 915, "tt": [83, 422, 489, 541, 597, 642], "tta": [424, 491, 543, 599, 644], "ttacatatta": 224, "ttacgcttaaac": 225, "ttactattac": 224, "ttactgttcg": 224, "ttagctcatt": 224, "ttattaaaag": 224, "ttattgtagc": 224, "ttattttttt": 224, "ttcaatttgg": 224, "ttcatt": [399, 421, 433, 574, 596, 608], "ttcatttgat": 224, "ttccagtaga": 224, "ttctactctt": 224, "ttctgcaatc": 224, "ttest_ind": [688, 693], "ttest_rel": 688, "ttgaatactt": 224, "ttgagaatac": 224, "ttgg": 903, "ttggccaaga": 224, "ttgtaactct": 224, "ttgttgtacc": 224, "ttjflkafnkkghvm": 233, "tttattggta": 224, "tttcctcgtg": 224, "tttgaattaa": 224, "tttgcaggct": 224, "ttttcattgg": 224, "ttttggactg": 224, "ttttggatta": 224, "tttttaggcc": 224, "tttttttaaaaaaa": 1107, "tupl": [98, 99, 100, 101, 102, 103, 104, 111, 115, 124, 130, 133, 154, 228, 249, 298, 319, 323, 377, 438, 439, 613, 614, 658, 711, 734, 890, 898, 903, 913, 914, 930, 943, 947, 994, 995, 1028, 1029], "ture": 119, "turkei": [225, 232], "turn": [3, 382, 504, 557, 878, 1042, 1107], "turnip": 235, "tutori": [234, 237, 295, 342, 360, 363, 376, 379], "twice": 885, "two": [0, 1, 3, 98, 99, 100, 101, 102, 103, 104, 107, 112, 134, 139, 148, 149, 220, 221, 225, 226, 227, 228, 230, 232, 233, 236, 298, 299, 305, 311, 317, 320, 325, 382, 387, 400, 405, 422, 426, 428, 458, 470, 475, 489, 493, 495, 504, 509, 521, 526, 541, 545, 547, 557, 562, 575, 580, 597, 601, 603, 621, 633, 635, 642, 646, 648, 654, 656, 658, 663, 665, 670, 676, 683, 684, 685, 688, 690, 693, 700, 703, 704, 706, 707, 709, 711, 716, 718, 721, 725, 732, 734, 739, 741, 745, 750, 756, 757, 758, 759, 760, 761, 762, 764, 871, 876, 881, 884, 885, 900, 903, 913, 928, 947, 976, 979, 980, 986, 995, 1017, 1018, 1021, 1033, 1038, 1043, 1100, 1102, 1105], "txt": [224, 234, 236, 295, 342, 360, 379], "tyne": 224, "type": [1, 53, 65, 70, 82, 83, 85, 124, 135, 141, 150, 154, 214, 215, 216, 217, 218, 222, 223, 225, 226, 227, 228, 229, 232, 235, 236, 248, 250, 263, 265, 266, 267, 269, 273, 277, 280, 281, 287, 295, 327, 328, 334, 342, 345, 346, 352, 360, 363, 364, 370, 372, 376, 379, 384, 387, 396, 399, 400, 401, 403, 405, 406, 407, 420, 421, 426, 427, 428, 429, 432, 433, 442, 448, 455, 458, 467, 470, 471, 473, 475, 476, 477, 488, 493, 494, 495, 496, 499, 506, 509, 518, 521, 522, 524, 526, 527, 528, 540, 545, 546, 547, 548, 551, 559, 562, 571, 574, 575, 576, 578, 580, 581, 582, 595, 596, 601, 602, 603, 604, 607, 608, 616, 618, 621, 630, 633, 634, 635, 641, 646, 647, 648, 649, 651, 658, 667, 679, 683, 684, 706, 711, 719, 727, 734, 743, 753, 757, 760, 762, 855, 868, 870, 871, 878, 881, 883, 887, 898, 904, 913, 914, 928, 947, 954, 977, 1028, 1038, 1042, 1049, 1100], "typeerror": [65, 82, 85, 92, 146, 269, 270, 273, 274, 384, 400, 401, 405, 409, 420, 421, 426, 427, 428, 429, 455, 470, 471, 475, 479, 488, 493, 494, 495, 496, 506, 521, 522, 526, 530, 540, 545, 546, 547, 548, 559, 575, 576, 580, 584, 595, 596, 601, 602, 603, 604, 618, 633, 634, 635, 637, 641, 646, 647, 648, 649, 683, 684, 757, 758, 760, 884, 885, 930, 977], "typic": [98, 99, 100, 101, 102, 103, 105, 179, 203, 225, 226, 233, 234, 235, 298, 308, 876, 1017, 1101], "tyr": 504, "tyrosin": 504, "u": [1, 100, 103, 116, 124, 127, 148, 149, 224, 225, 227, 236, 387, 392, 396, 397, 437, 458, 463, 467, 468, 504, 509, 514, 518, 519, 557, 562, 567, 571, 572, 609, 621, 626, 630, 631, 688, 691, 692, 704, 758, 880, 885, 902, 1102, 1107], "u1": [1, 116, 148, 149], "u2": [1, 116, 148, 149], "u3": [1, 116, 148, 149], "u4": [1, 116, 148, 149], "u5": [1, 116, 148, 149], "u6": [1, 116, 148, 149], "u7": [1, 116, 148, 149], "u8": [116, 148, 149], "u_count": [116, 148, 149], "u_i": 688, "uaacguua": [437, 609], "uaaguucucgaucucuaaaaucg": 235, "uaaguucucgaucuuuaaaaucg": 235, "uagguugauc": 224, "uc": 1102, "ucagucagucagucagucagucagucagucagucagucagucagucagucagucagucagucag": 441, "uccacaaaug": 224, "uconn": [107, 111], "ugaguucucgaucucuaaaaucg": 235, "ugaguucucuaucucuaaaaucg": 235, "uint8": [3, 17, 34, 225, 226, 233, 382, 384, 401, 405, 420, 421, 426, 427, 428, 429, 435, 455, 471, 475, 488, 493, 494, 495, 496, 501, 504, 506, 522, 526, 540, 545, 546, 547, 548, 554, 557, 559, 576, 580, 595, 596, 601, 602, 603, 604, 611, 616, 618, 634, 635, 641, 646, 647, 648, 649, 652], "uk": [98, 101, 120, 224, 227, 298, 685], "ulcl": 124, "ulcu": 124, "un": 230, "unabl": 238, "unalign": [98, 99, 100, 101, 102, 103, 104, 1102], "unbound": [308, 322], "uncertainti": [84, 693, 764], "unclear": 123, "unconstrain": 871, "uncorrect": [110, 111], "uncov": [124, 125, 1103], "undefin": [234, 883, 884, 980], "under": [118, 150, 225, 382, 504, 557, 616, 688, 799, 884, 903, 1099], "underli": [0, 3, 175, 201, 277, 387, 451, 458, 509, 562, 616, 621, 683, 855, 881, 887, 1102], "underlii": 3, "underpow": 881, "underscor": [230, 232], "understand": [234, 688], "understood": [93, 97, 177, 178, 190, 191, 230, 269, 270, 271, 273, 274, 275, 324, 326, 378, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 867, 869, 938, 953, 1013, 1037], "unequ": [107, 442, 654], "unescap": 230, "uneven": [106, 144], "unfortun": [226, 884], "ungap": [422, 489, 541, 597, 642], "ungapped_subsequ": [422, 489, 541, 597, 642], "unicod": [218, 234, 277], "unifi": [121, 693], "uniform": [1, 762], "uniformli": [16, 48, 50], "unifrac": [1, 116, 134, 148, 149, 151, 154, 876], "unimod": [871, 876], "union": [904, 928], "uniprotkb": 224, "uniq": [435, 501, 554, 611, 652], "uniqu": [1, 92, 96, 220, 225, 229, 230, 234, 235, 236, 372, 377, 435, 501, 554, 611, 652, 684, 706, 760, 866, 903, 930, 974, 983, 988], "unit": [1, 3, 148, 227, 237, 654, 876, 878, 879, 994, 1042, 1043, 1106], "univers": [136, 224, 225, 232, 234, 238], "unix": 236, "unknown": [84, 124, 125, 227, 298, 407, 477, 528, 582, 854, 937], "unknownaxiserror": [898, 900, 906, 907, 911, 918, 920, 921, 924, 925, 926, 927, 929, 930, 931, 939, 940, 950, 952], "unknowniderror": [921, 929], "unless": [53, 65, 91, 110, 233, 1066], "unlik": [235, 854], "unmask": 53, "unnam": 1100, "unnecessari": 92, "unobserv": [106, 137], "unpack": [17, 49, 1032], "unpack_by_func": 1031, "unpair": 230, "unpermut": [756, 758, 759], "unread": 277, "unrecogn": [898, 900, 906, 911, 918, 920, 921, 926, 927, 929, 931, 950, 952], "unrecognizedformaterror": [269, 270, 271, 273, 274, 275], "unresolv": 154, "unroot": [116, 134, 148, 149, 230, 992, 1017, 1034, 1035, 1036, 1039], "unrooted_copi": [981, 1017, 1018, 1035, 1036], "unrooted_mov": 1034, "unshar": 92, "unsign": [854, 1007], "unsolv": 688, "unstabl": 154, "unsupport": [234, 504], "until": [308, 703, 1020], "untouch": [911, 934], "untreat": 884, "unweight": [1, 134, 148, 149, 879], "unweighted_unifrac": [1, 149], "unwrit": 277, "unzip": 936, "up": [84, 105, 222, 232, 234, 235, 277, 308, 320, 613, 614, 658, 690, 697, 698, 700, 701, 702, 711, 734, 758, 854, 885, 903, 977, 980, 1012, 1018, 1088, 1105], "upd": 134, "upd_": 134, "updat": [224, 225, 236, 308, 322, 616, 952], "updated_t": 952, "upon": 224, "upper": [53, 123, 124, 225, 232, 298, 308, 320, 322, 745, 752, 758, 925], "upper_bound": [111, 115, 124, 308, 320], "upper_quantil": 123, "uppercas": [382, 504, 557, 616], "upsk": 235, "uq": 123, "uracil": [224, 227, 437, 557, 609], "urinari": 885, "url": [93, 97, 177, 178, 190, 191, 269, 270, 271, 273, 274, 275, 277, 324, 326, 378, 381, 431, 440, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 867, 869, 913, 938, 947, 953, 1013, 1037], "urn": [124, 125], "us": [1, 15, 20, 45, 47, 53, 65, 72, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 98, 99, 100, 110, 111, 112, 116, 117, 123, 130, 133, 134, 135, 136, 138, 146, 148, 149, 150, 151, 154, 166, 215, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 236, 237, 238, 248, 249, 250, 266, 267, 270, 274, 277, 296, 297, 308, 320, 343, 344, 361, 362, 363, 375, 376, 380, 382, 400, 405, 417, 419, 422, 425, 432, 435, 438, 439, 441, 449, 450, 451, 452, 453, 470, 475, 485, 487, 489, 492, 499, 501, 504, 521, 526, 536, 538, 541, 544, 551, 554, 557, 575, 580, 592, 594, 597, 600, 607, 611, 613, 614, 616, 633, 635, 639, 640, 642, 645, 651, 652, 654, 658, 670, 682, 683, 685, 686, 687, 688, 693, 694, 695, 697, 698, 704, 706, 707, 711, 721, 730, 734, 745, 752, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 788, 799, 810, 832, 843, 855, 866, 870, 876, 880, 881, 882, 883, 884, 885, 903, 908, 909, 911, 934, 937, 939, 941, 942, 945, 947, 948, 955, 973, 975, 976, 977, 980, 981, 984, 986, 992, 993, 1012, 1017, 1026, 1028, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1065, 1088, 1102, 1105, 1106, 1107], "usag": [132, 759], "useabl": 268, "usefulli": 1038, "user": [1, 84, 147, 220, 234, 236, 237, 238, 248, 249, 250, 269, 271, 273, 275, 434, 500, 553, 610, 688, 693, 871, 876, 886, 1040, 1102], "usrman": 224, "usual": [1, 106, 143, 224, 227, 234, 236, 654, 975, 1017, 1018, 1019, 1034], "ut": 1102, "uti": 885, "util": [1, 93, 97, 177, 178, 190, 191, 236, 248, 250, 324, 326, 378, 381, 431, 440, 441, 449, 450, 453, 498, 503, 550, 556, 606, 615, 650, 653, 675, 681, 724, 729, 749, 755, 867, 869, 913, 928, 936, 938, 941, 947, 953, 1013, 1037, 1099, 1100], "uu": 148, "uuagcucauu": 224, "uuauuguagc": 224, "uuauuuuuuu": 224, "uucuacucuu": 224, "uugagaauac": 224, "uuugaauuaa": 224, "uuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggg": 441, "uuuuuuuuuuuuuuuuccccccccccccccccaaaaaaaaaaaaaaaagggggggggggggggg": 441, "v": [53, 148, 149, 327, 363, 382, 387, 396, 458, 467, 504, 509, 518, 557, 562, 571, 621, 630, 685, 699, 703, 705, 883, 884, 1028], "v2": 219, "v_count": [148, 149], "vagin": 885, "vaginali": 885, "val": [504, 911], "val_i": 925, "val_j": 925, "valdar": 84, "valid": [98, 101, 116, 134, 146, 148, 149, 150, 151, 154, 214, 215, 216, 217, 223, 225, 226, 230, 232, 363, 376, 382, 435, 453, 501, 504, 554, 557, 611, 652, 699, 705, 707, 730, 745, 887, 913, 937, 947, 1102, 1107], "valin": 504, "valu": [1, 3, 4, 5, 7, 9, 10, 11, 14, 15, 18, 19, 21, 22, 25, 27, 28, 29, 35, 36, 38, 40, 41, 42, 46, 47, 51, 52, 55, 56, 58, 60, 61, 62, 71, 74, 76, 78, 84, 89, 98, 99, 100, 101, 102, 103, 105, 107, 118, 120, 130, 135, 138, 144, 146, 149, 156, 157, 159, 161, 162, 163, 167, 168, 170, 172, 173, 174, 180, 181, 183, 185, 186, 187, 193, 194, 196, 198, 199, 200, 204, 205, 207, 209, 210, 211, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 234, 235, 239, 240, 242, 244, 245, 246, 252, 253, 255, 257, 258, 259, 277, 281, 282, 284, 285, 286, 287, 289, 291, 292, 293, 294, 296, 297, 300, 302, 303, 304, 307, 312, 314, 315, 316, 319, 323, 327, 328, 329, 331, 332, 333, 334, 336, 338, 339, 340, 341, 343, 344, 346, 347, 349, 350, 351, 352, 354, 356, 357, 358, 359, 361, 362, 363, 364, 365, 367, 368, 369, 370, 372, 376, 377, 380, 382, 383, 388, 391, 393, 395, 399, 400, 417, 425, 432, 433, 443, 445, 446, 447, 454, 459, 462, 464, 466, 470, 485, 492, 499, 504, 505, 510, 513, 515, 517, 521, 536, 544, 551, 557, 558, 563, 566, 568, 570, 574, 575, 592, 600, 607, 608, 616, 617, 622, 625, 627, 629, 633, 639, 645, 651, 657, 660, 661, 662, 665, 680, 685, 688, 690, 693, 697, 698, 699, 700, 701, 702, 705, 710, 713, 714, 715, 718, 728, 733, 736, 737, 738, 741, 754, 756, 757, 758, 759, 760, 761, 762, 764, 767, 768, 770, 772, 773, 774, 778, 779, 781, 783, 784, 785, 787, 789, 790, 792, 794, 795, 796, 799, 800, 801, 803, 805, 806, 807, 811, 812, 814, 816, 817, 818, 820, 822, 823, 825, 827, 828, 829, 831, 833, 834, 836, 838, 839, 840, 844, 845, 847, 849, 850, 851, 854, 857, 858, 860, 862, 863, 864, 866, 870, 871, 875, 876, 878, 880, 881, 882, 883, 884, 885, 889, 892, 894, 895, 896, 897, 898, 903, 911, 912, 913, 917, 923, 924, 927, 931, 933, 934, 937, 941, 943, 944, 950, 952, 955, 958, 959, 962, 965, 967, 968, 975, 977, 980, 981, 1017, 1018, 1021, 1028, 1033, 1036, 1041, 1042, 1043, 1047, 1048, 1051, 1053, 1054, 1055, 1056, 1065, 1067, 1068, 1070, 1072, 1073, 1074, 1077, 1079, 1080, 1082, 1084, 1085, 1086, 1088, 1090, 1091, 1093, 1095, 1096, 1097, 1107], "valueerror": [65, 82, 84, 85, 88, 92, 94, 96, 107, 116, 118, 134, 146, 148, 149, 150, 154, 216, 269, 273, 290, 337, 355, 373, 377, 400, 401, 407, 409, 420, 423, 424, 426, 427, 428, 429, 435, 451, 453, 470, 471, 477, 479, 488, 490, 491, 493, 494, 495, 496, 501, 521, 522, 528, 530, 540, 542, 543, 545, 546, 547, 548, 554, 575, 576, 582, 584, 595, 598, 599, 601, 602, 603, 604, 611, 616, 633, 634, 637, 641, 643, 644, 646, 647, 648, 649, 652, 666, 669, 670, 683, 684, 690, 697, 698, 704, 721, 745, 757, 758, 760, 761, 799, 843, 854, 866, 868, 870, 871, 884, 885, 886, 912, 913, 937, 943, 978, 980, 985, 993, 998, 1002, 1004, 1007, 1020, 1021, 1026, 1031, 1044], "van": 703, "vanveeeeaw": 223, "var": [757, 945], "vari": [1, 760, 881, 883, 884], "variabl": [118, 217, 218, 432, 499, 551, 607, 616, 651, 688, 757, 760, 855, 856, 866, 871, 876, 877, 878, 881, 883, 884, 1065, 1088, 1107], "varianc": [111, 372, 699, 705, 757, 759, 760, 855, 872, 875, 879, 884], "variant": [1, 116, 134, 233, 236, 654], "variat": [107, 758, 871], "varieti": 229, "variou": [1, 3, 106, 231, 363, 706, 856, 881, 1103, 1106], "vazquez": 866, "ve": [1, 225, 226, 885, 1105], "vec": 882, "vector": [3, 88, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 166, 179, 192, 203, 214, 215, 216, 217, 223, 229, 402, 404, 407, 410, 422, 425, 427, 429, 430, 432, 435, 441, 472, 474, 477, 480, 489, 492, 494, 496, 497, 499, 501, 523, 525, 528, 531, 541, 544, 546, 548, 549, 551, 552, 554, 577, 579, 582, 585, 597, 600, 602, 604, 605, 607, 611, 642, 645, 647, 649, 651, 652, 658, 686, 687, 688, 693, 694, 695, 700, 701, 702, 705, 706, 707, 711, 730, 734, 756, 759, 760, 810, 871, 885, 886, 890, 903, 936, 940, 943, 950, 1028], "vegan": [756, 757, 758, 759, 760, 870, 871, 878], "vellend": 134, "ver": 221, "verdonschot": 871, "veri": [1, 98, 99, 100, 123, 225, 230, 237, 700, 913, 980], "verifi": [224, 237, 269, 273], "versa": [230, 764, 934], "versatil": 855, "version": [1, 110, 111, 116, 134, 138, 146, 148, 149, 150, 218, 220, 222, 223, 224, 227, 228, 232, 249, 406, 434, 436, 476, 500, 502, 527, 553, 555, 581, 610, 612, 688, 703, 887, 908, 911, 913, 934, 943, 947, 949, 954, 969, 973, 981, 998, 1017, 1018, 1019, 1033, 1034, 1036, 1040, 1044, 1102], "versu": [135, 141, 148, 149], "veschi": 118, "via": [82, 85, 94, 107, 124, 125, 225, 232, 405, 441, 442, 448, 475, 526, 580, 635, 756, 758, 759, 903, 943], "vice": [230, 764, 934], "viceroi": [107, 111], "view": [224, 936], "viewer": 975, "violat": 693, "viral": 235, "virgilio": 118, "viridiplanta": 224, "virol": 235, "viru": 235, "visit": [1010, 1034], "visual": [1, 855, 866], "vlen": [913, 947], "vocabulari": [227, 228, 296, 297, 343, 344, 361, 362, 363, 380], "vol": 136, "volatil": 765, "volum": [136, 1039], "vqhklrah": 235, "vrt": 236, "w": [53, 84, 107, 108, 115, 130, 134, 144, 220, 221, 222, 277, 382, 504, 557, 688, 703, 947, 949], "wa": [1, 98, 101, 107, 108, 109, 112, 115, 116, 118, 119, 120, 121, 122, 126, 127, 128, 134, 135, 136, 138, 139, 145, 146, 148, 149, 150, 151, 222, 225, 226, 230, 232, 277, 292, 295, 296, 297, 339, 342, 343, 344, 357, 360, 361, 362, 379, 380, 422, 451, 489, 541, 597, 616, 642, 688, 699, 703, 705, 758, 810, 875, 883, 885, 971, 1014, 1018, 1038, 1039, 1100, 1105, 1107], "wai": [0, 1, 225, 226, 230, 232, 235, 237, 298, 376, 434, 500, 553, 610, 654, 688, 758, 876, 881, 903, 913, 947, 1100, 1105], "wakefield": 1038, "walk": [1034, 1035, 1036, 1105, 1107], "walli": [688, 884, 885], "wan": [53, 104], "want": [98, 99, 100, 224, 227, 308, 881, 883, 884, 885, 979, 980, 1100], "warn": [226, 234, 876, 977, 1040, 1041], "washington": [225, 230, 232, 1038], "wasn": [65, 226], "water": 101, "waterman": [0, 53, 101, 102, 103, 104], "we": [0, 1, 53, 82, 84, 85, 116, 123, 130, 134, 148, 149, 151, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 278, 298, 308, 409, 422, 432, 451, 479, 489, 499, 530, 541, 551, 584, 597, 607, 616, 637, 642, 651, 688, 693, 699, 705, 706, 756, 757, 758, 760, 761, 764, 765, 855, 866, 870, 878, 880, 881, 883, 884, 885, 900, 913, 943, 980, 1038, 1100, 1105, 1107], "weak": 382, "weaker": 764, "web": [53, 98, 101, 104, 222, 236, 756, 757, 758, 759, 760], "webfeat": 227, "webpag": 227, "websit": 84, "week": 885, "weight": [1, 116, 121, 134, 148, 149, 230, 765, 766, 788, 799, 810, 832, 875, 879, 1038], "weighted_unifrac": [1, 148], "welcom": 225, "well": [0, 226, 234, 237, 363, 616, 693, 706, 707, 757, 759, 760, 764, 856, 871, 913, 1038, 1100, 1105, 1106], "wellcom": 226, "were": [1, 100, 103, 116, 123, 146, 148, 149, 150, 230, 232, 233, 387, 422, 458, 489, 509, 541, 562, 597, 621, 642, 756, 758, 760, 866, 884, 885, 1002, 1004, 1041, 1107], "wf": [226, 1107], "what": [1, 116, 134, 146, 148, 149, 150, 230, 234, 237, 238, 266, 267, 271, 275, 323, 422, 489, 541, 597, 642, 764, 854, 884, 900, 903, 913, 936, 947, 1105, 1107], "whatev": 237, "when": [1, 53, 82, 84, 85, 92, 95, 98, 99, 100, 107, 112, 117, 120, 122, 134, 135, 139, 141, 151, 154, 218, 220, 222, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 248, 249, 250, 269, 270, 271, 273, 274, 275, 277, 308, 320, 363, 372, 376, 400, 407, 408, 411, 412, 425, 470, 477, 478, 492, 521, 528, 529, 544, 575, 582, 583, 586, 587, 600, 616, 633, 636, 645, 683, 688, 706, 756, 758, 759, 760, 762, 764, 787, 820, 831, 870, 878, 881, 882, 883, 884, 885, 886, 887, 903, 913, 943, 954, 980, 1015, 1039, 1043, 1044, 1065, 1100, 1105, 1107], "whenev": [226, 876], "where": [1, 3, 14, 18, 46, 51, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 144, 145, 150, 151, 154, 155, 216, 218, 223, 225, 229, 230, 231, 234, 235, 237, 375, 402, 404, 408, 410, 420, 422, 427, 429, 430, 432, 472, 474, 478, 480, 488, 489, 494, 496, 497, 499, 523, 525, 529, 531, 540, 541, 546, 548, 549, 551, 552, 577, 579, 583, 585, 595, 597, 602, 604, 605, 607, 636, 641, 642, 647, 649, 651, 654, 658, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 703, 711, 734, 758, 764, 854, 866, 875, 877, 878, 879, 881, 885, 886, 911, 913, 930, 942, 947, 952, 955, 979, 980, 990, 1017, 1019, 1029, 1032, 1033, 1036, 1063, 1105, 1107], "where_values_miss": [291, 338, 356], "wherea": [219, 854, 998, 1034, 1036], "wherev": 879, "whether": [32, 66, 67, 70, 79, 89, 90, 110, 111, 134, 228, 237, 248, 250, 277, 281, 287, 296, 297, 328, 334, 343, 344, 346, 352, 361, 362, 364, 370, 380, 384, 387, 396, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 442, 448, 455, 458, 467, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 506, 509, 518, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 559, 562, 571, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 618, 621, 630, 638, 639, 640, 642, 643, 644, 663, 684, 688, 699, 705, 716, 739, 756, 758, 759, 760, 865, 878, 879, 910, 911, 913, 922, 947, 950, 981, 1017, 1018, 1019, 1034], "which": [1, 3, 13, 15, 17, 44, 47, 65, 98, 99, 100, 107, 112, 116, 121, 134, 139, 143, 148, 149, 151, 220, 222, 223, 225, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 248, 249, 250, 251, 263, 265, 266, 267, 268, 269, 273, 363, 382, 400, 401, 412, 420, 422, 425, 435, 451, 470, 471, 488, 489, 492, 501, 504, 521, 522, 540, 541, 544, 554, 557, 575, 576, 587, 595, 597, 600, 611, 616, 633, 634, 641, 642, 645, 652, 665, 685, 686, 687, 688, 693, 707, 718, 741, 756, 759, 760, 764, 868, 871, 875, 876, 881, 882, 883, 884, 885, 901, 902, 903, 904, 908, 911, 927, 930, 931, 933, 939, 940, 944, 947, 949, 980, 984, 1015, 1016, 1019, 1028, 1029, 1033, 1035, 1038, 1039, 1049, 1066, 1088, 1100, 1102, 1105, 1107], "while": [0, 1, 218, 224, 225, 226, 227, 232, 298, 441, 616, 688, 760, 799, 843, 855, 866, 883, 887, 890, 954, 955, 983, 1065, 1101, 1102, 1107], "white": 224, "whitespac": [225, 226, 229, 231, 235], "whitnei": 688, "who": [230, 885], "whole": [235, 874, 882, 907, 927, 931, 933, 940, 944], "whose": [227, 233, 234, 673, 722, 746, 757, 758, 879, 906, 921, 929, 941, 983], "why": 114, "wide": [1, 92, 134, 400, 470, 521, 575, 633], "width": [225, 229, 232], "wiener": 138, "wiki": [106, 225, 226, 232, 235, 1039], "wikipedia": [106, 225, 226, 235, 1039, 1105], "wilcoxon": 688, "wild": [434, 500, 553, 610], "wildcard": [434, 435, 500, 501, 553, 554, 610, 611, 652], "wildcard_char": [435, 501, 554, 611, 652], "wilei": 685, "william": 117, "window": 843, "window_s": 843, "wish": [234, 1105], "with_mean": [875, 879], "with_replac": 943, "with_std": [875, 879], "within": [1, 84, 106, 134, 144, 151, 218, 221, 225, 226, 230, 232, 234, 235, 363, 382, 504, 557, 616, 665, 693, 718, 741, 760, 761, 821, 855, 856, 866, 883, 884, 903, 932, 955, 997, 1019, 1042, 1045, 1088, 1105, 1107], "within_captur": [436, 502, 555, 612], "without": [82, 85, 92, 94, 112, 130, 149, 221, 230, 232, 234, 235, 295, 342, 360, 379, 616, 685, 854, 866, 885, 886, 908, 925, 943, 949, 986, 995, 1029, 1064, 1065, 1100], "wllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 441, "woman": 885, "women": 885, "won": [1, 116, 146, 148, 149, 150, 226, 299, 871], "word": [0, 224, 225, 227, 230, 235, 323, 424, 491, 543, 599, 644], "work": [1, 53, 151, 225, 232, 234, 237, 363, 382, 504, 557, 706, 758, 871, 885, 919, 928, 1099, 1101, 1102, 1104, 1105], "workflow": 1099, "worri": [230, 887, 954], "worst": 1009, "would": [3, 84, 116, 118, 121, 123, 148, 149, 222, 225, 228, 230, 232, 234, 235, 237, 363, 400, 422, 470, 489, 521, 541, 575, 597, 633, 642, 665, 700, 703, 718, 741, 764, 883, 884, 977, 1029, 1030, 1038, 1100], "wprintgc": [441, 449, 450], "wr": [225, 764], "wrap": [20, 232, 235, 1089], "wrapper": [53, 104, 124, 125, 1042], "writabl": 277, "write": [93, 177, 190, 219, 222, 223, 224, 226, 228, 229, 230, 232, 235, 237, 250, 267, 268, 277, 324, 378, 431, 498, 550, 606, 650, 675, 706, 724, 749, 787, 820, 831, 867, 938, 947, 948, 949, 969, 1013, 1044], "writeabl": 1100, "writer": [97, 178, 191, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 265, 268, 271, 275, 277, 326, 381, 440, 503, 556, 615, 653, 681, 729, 755, 869, 953, 1037], "written": [222, 225, 226, 230, 232, 363, 908, 948, 949, 1038, 1100, 1105], "wu": [134, 149], "wu_dm": 1, "wu_pc": 1, "wunsch": [0, 98, 99, 100], "www": [53, 98, 101, 104, 123, 151, 218, 220, 221, 222, 224, 225, 226, 227, 232, 236, 441, 449, 450, 757], "x": [50, 53, 118, 219, 226, 233, 435, 453, 501, 504, 554, 611, 652, 685, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 700, 701, 702, 703, 705, 758, 761, 764, 855, 856, 866, 870, 871, 872, 878, 881, 884, 885, 903, 911, 915, 924, 929, 934, 939, 941, 945, 947, 949, 950, 954, 980, 990, 998, 1012, 1015, 1028, 1032, 1039, 1064, 1107], "x00": 278, "x01": 278, "x03": 278, "x0c": 278, "x108": 278, "x1c": 278, "x56734": 224, "x86": 278, "x89": 278, "x8b": 278, "x9ah3m": 278, "x9c": 278, "x_": [685, 686, 703, 881, 885], "x_1": [686, 687, 691, 692, 700, 701, 702], "x_d": [686, 687, 691, 692, 700, 701, 702], "x_i": [687, 691, 696, 700, 701, 702, 703], "x_j": 696, "xa6": 278, "xaa": 504, "xb7": 278, "xb9": 278, "xc1": 278, "xc4": 278, "xle": 504, "xx": 224, "xxxxxx": 453, "xyz": 222, "y": [53, 107, 118, 226, 233, 382, 504, 557, 696, 700, 701, 705, 758, 761, 764, 855, 866, 871, 872, 877, 878, 883, 929, 939, 947, 949, 950, 980, 1028], "y_": [687, 885], "y_1": [687, 700, 701], "y_2": 687, "y_d": [700, 701], "y_i": 696, "y_j": 696, "yang": 107, "ye": [218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236], "yeast": [438, 613], "yeild": 760, "yellow": 235, "yet": [230, 236, 237], "yield": [75, 80, 91, 225, 323, 392, 397, 406, 407, 408, 422, 423, 439, 452, 463, 468, 476, 477, 478, 489, 490, 514, 519, 527, 528, 529, 541, 542, 567, 572, 581, 582, 583, 597, 598, 614, 626, 631, 636, 642, 643, 760, 923, 924, 925, 932, 936, 990, 1003, 1006, 1009, 1010, 1011, 1021, 1027, 1029, 1030, 1066, 1100, 1107], "york": 109, "you": [1, 53, 98, 99, 100, 116, 146, 148, 149, 150, 151, 220, 222, 225, 226, 228, 232, 234, 235, 237, 307, 308, 320, 322, 323, 382, 504, 557, 616, 654, 745, 756, 760, 878, 881, 883, 884, 885, 942, 977, 979, 980, 1100, 1102, 1105, 1107], "your": [53, 92, 116, 146, 148, 149, 150, 226, 234, 237, 308, 760, 881, 884, 1100, 1105, 1107], "yy": 226, "z": [53, 92, 115, 234, 504, 761, 866, 923, 980, 1028], "z3": [917, 923], "zero": [3, 13, 16, 17, 44, 45, 48, 107, 117, 154, 218, 298, 319, 363, 377, 409, 479, 530, 584, 637, 685, 688, 690, 693, 697, 698, 699, 700, 701, 702, 705, 707, 756, 757, 758, 759, 760, 761, 764, 870, 876, 879, 884, 886, 887, 913, 940, 943, 947, 950, 1039, 1107], "zero_index": [53, 104], "zhao": [53, 104], "zip": 907, "zp_02903423": 220, "zscore": 111, "zxx": 226, "\u00e9": 703, "\u00f8": 134}, "titles": ["Sequence Alignments (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.alignment</span></code>)", "Community Diversity (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity</span></code>)", "Biological Embeddings (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.embedding</span></code>)", "skbio.alignment.AlignPath", "skbio.alignment.AlignPath.__eq__", "skbio.alignment.AlignPath.__ge__", "skbio.alignment.AlignPath.__getstate__", "skbio.alignment.AlignPath.__gt__", "skbio.alignment.AlignPath.__hash__", "skbio.alignment.AlignPath.__le__", "skbio.alignment.AlignPath.__lt__", "skbio.alignment.AlignPath.__ne__", "skbio.alignment.AlignPath.__str__", "skbio.alignment.AlignPath.from_bits", "skbio.alignment.AlignPath.from_coordinates", "skbio.alignment.AlignPath.from_indices", "skbio.alignment.AlignPath.from_tabular", "skbio.alignment.AlignPath.to_bits", "skbio.alignment.AlignPath.to_coordinates", "skbio.alignment.AlignPath.to_indices", "skbio.alignment.AlignmentStructure", "skbio.alignment.AlignmentStructure.__eq__", "skbio.alignment.AlignmentStructure.__ge__", "skbio.alignment.AlignmentStructure.__getitem__", "skbio.alignment.AlignmentStructure.__getstate__", "skbio.alignment.AlignmentStructure.__gt__", "skbio.alignment.AlignmentStructure.__hash__", "skbio.alignment.AlignmentStructure.__le__", "skbio.alignment.AlignmentStructure.__lt__", "skbio.alignment.AlignmentStructure.__ne__", "skbio.alignment.AlignmentStructure.__setstate__", "skbio.alignment.AlignmentStructure.__str__", "skbio.alignment.AlignmentStructure.is_zero_based", "skbio.alignment.AlignmentStructure.set_zero_based", "skbio.alignment.PairAlignPath", "skbio.alignment.PairAlignPath.__eq__", "skbio.alignment.PairAlignPath.__ge__", "skbio.alignment.PairAlignPath.__getstate__", "skbio.alignment.PairAlignPath.__gt__", "skbio.alignment.PairAlignPath.__hash__", "skbio.alignment.PairAlignPath.__le__", "skbio.alignment.PairAlignPath.__lt__", "skbio.alignment.PairAlignPath.__ne__", "skbio.alignment.PairAlignPath.__str__", "skbio.alignment.PairAlignPath.from_bits", "skbio.alignment.PairAlignPath.from_cigar", "skbio.alignment.PairAlignPath.from_coordinates", "skbio.alignment.PairAlignPath.from_indices", "skbio.alignment.PairAlignPath.from_tabular", "skbio.alignment.PairAlignPath.to_bits", "skbio.alignment.PairAlignPath.to_cigar", "skbio.alignment.PairAlignPath.to_coordinates", "skbio.alignment.PairAlignPath.to_indices", "skbio.alignment.StripedSmithWaterman", "skbio.alignment.StripedSmithWaterman.__call__", "skbio.alignment.StripedSmithWaterman.__eq__", "skbio.alignment.StripedSmithWaterman.__ge__", "skbio.alignment.StripedSmithWaterman.__getstate__", "skbio.alignment.StripedSmithWaterman.__gt__", "skbio.alignment.StripedSmithWaterman.__hash__", "skbio.alignment.StripedSmithWaterman.__le__", "skbio.alignment.StripedSmithWaterman.__lt__", "skbio.alignment.StripedSmithWaterman.__ne__", "skbio.alignment.StripedSmithWaterman.__setstate__", "skbio.alignment.StripedSmithWaterman.__str__", "skbio.alignment.TabularMSA", "skbio.alignment.TabularMSA.__bool__", "skbio.alignment.TabularMSA.__contains__", "skbio.alignment.TabularMSA.__copy__", "skbio.alignment.TabularMSA.__deepcopy__", "skbio.alignment.TabularMSA.__eq__", "skbio.alignment.TabularMSA.__ge__", "skbio.alignment.TabularMSA.__getitem__", "skbio.alignment.TabularMSA.__getstate__", "skbio.alignment.TabularMSA.__gt__", "skbio.alignment.TabularMSA.__iter__", "skbio.alignment.TabularMSA.__le__", "skbio.alignment.TabularMSA.__len__", "skbio.alignment.TabularMSA.__lt__", "skbio.alignment.TabularMSA.__ne__", "skbio.alignment.TabularMSA.__reversed__", "skbio.alignment.TabularMSA.__str__", "skbio.alignment.TabularMSA.append", "skbio.alignment.TabularMSA.consensus", "skbio.alignment.TabularMSA.conservation", "skbio.alignment.TabularMSA.extend", "skbio.alignment.TabularMSA.from_dict", "skbio.alignment.TabularMSA.from_path_seqs", "skbio.alignment.TabularMSA.gap_frequencies", "skbio.alignment.TabularMSA.has_metadata", "skbio.alignment.TabularMSA.has_positional_metadata", "skbio.alignment.TabularMSA.iter_positions", "skbio.alignment.TabularMSA.join", "skbio.alignment.TabularMSA.read", "skbio.alignment.TabularMSA.reassign_index", "skbio.alignment.TabularMSA.sort", "skbio.alignment.TabularMSA.to_dict", "skbio.alignment.TabularMSA.write", "skbio.alignment.global_pairwise_align", "skbio.alignment.global_pairwise_align_nucleotide", "skbio.alignment.global_pairwise_align_protein", "skbio.alignment.local_pairwise_align", "skbio.alignment.local_pairwise_align_nucleotide", "skbio.alignment.local_pairwise_align_protein", "skbio.alignment.local_pairwise_align_ssw", "skbio.alignment.make_identity_substitution_matrix", "Alpha diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.alpha</span></code>)", "skbio.diversity.alpha.ace", "skbio.diversity.alpha.berger_parker_d", "skbio.diversity.alpha.brillouin_d", "skbio.diversity.alpha.chao1", "skbio.diversity.alpha.chao1_ci", "skbio.diversity.alpha.dominance", "skbio.diversity.alpha.doubles", "skbio.diversity.alpha.enspie", "skbio.diversity.alpha.esty_ci", "skbio.diversity.alpha.faith_pd", "skbio.diversity.alpha.fisher_alpha", "skbio.diversity.alpha.gini_index", "skbio.diversity.alpha.goods_coverage", "skbio.diversity.alpha.heip_e", "skbio.diversity.alpha.hill", "skbio.diversity.alpha.inv_simpson", "skbio.diversity.alpha.kempton_taylor_q", "skbio.diversity.alpha.lladser_ci", "skbio.diversity.alpha.lladser_pe", "skbio.diversity.alpha.margalef", "skbio.diversity.alpha.mcintosh_d", "skbio.diversity.alpha.mcintosh_e", "skbio.diversity.alpha.menhinick", "skbio.diversity.alpha.michaelis_menten_fit", "skbio.diversity.alpha.observed_features", "skbio.diversity.alpha.observed_otus", "skbio.diversity.alpha.osd", "skbio.diversity.alpha.phydiv", "skbio.diversity.alpha.pielou_e", "skbio.diversity.alpha.renyi", "skbio.diversity.alpha.robbins", "skbio.diversity.alpha.shannon", "skbio.diversity.alpha.simpson", "skbio.diversity.alpha.simpson_d", "skbio.diversity.alpha.simpson_e", "skbio.diversity.alpha.singles", "skbio.diversity.alpha.sobs", "skbio.diversity.alpha.strong", "skbio.diversity.alpha.tsallis", "skbio.diversity.alpha_diversity", "Beta diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.beta</span></code>)", "skbio.diversity.beta.unweighted_unifrac", "skbio.diversity.beta.weighted_unifrac", "skbio.diversity.beta_diversity", "skbio.diversity.block_beta_diversity", "skbio.diversity.get_alpha_diversity_metrics", "skbio.diversity.get_beta_diversity_metrics", "skbio.diversity.partial_beta_diversity", "skbio.embedding.Embedding", "skbio.embedding.Embedding.__eq__", "skbio.embedding.Embedding.__ge__", "skbio.embedding.Embedding.__getstate__", "skbio.embedding.Embedding.__gt__", "skbio.embedding.Embedding.__hash__", "skbio.embedding.Embedding.__le__", "skbio.embedding.Embedding.__lt__", "skbio.embedding.Embedding.__ne__", "skbio.embedding.Embedding.__str__", "skbio.embedding.Embedding.bytes", "skbio.embedding.ProteinEmbedding", "skbio.embedding.ProteinEmbedding.__eq__", "skbio.embedding.ProteinEmbedding.__ge__", "skbio.embedding.ProteinEmbedding.__getstate__", "skbio.embedding.ProteinEmbedding.__gt__", "skbio.embedding.ProteinEmbedding.__hash__", "skbio.embedding.ProteinEmbedding.__le__", "skbio.embedding.ProteinEmbedding.__lt__", "skbio.embedding.ProteinEmbedding.__ne__", "skbio.embedding.ProteinEmbedding.__str__", "skbio.embedding.ProteinEmbedding.bytes", "skbio.embedding.ProteinEmbedding.read", "skbio.embedding.ProteinEmbedding.write", "skbio.embedding.ProteinVector", "skbio.embedding.ProteinVector.__eq__", "skbio.embedding.ProteinVector.__ge__", "skbio.embedding.ProteinVector.__getstate__", "skbio.embedding.ProteinVector.__gt__", "skbio.embedding.ProteinVector.__hash__", "skbio.embedding.ProteinVector.__le__", "skbio.embedding.ProteinVector.__lt__", "skbio.embedding.ProteinVector.__ne__", "skbio.embedding.ProteinVector.__str__", "skbio.embedding.ProteinVector.bytes", "skbio.embedding.ProteinVector.read", "skbio.embedding.ProteinVector.write", "skbio.embedding.SequenceEmbedding", "skbio.embedding.SequenceEmbedding.__eq__", "skbio.embedding.SequenceEmbedding.__ge__", "skbio.embedding.SequenceEmbedding.__getstate__", "skbio.embedding.SequenceEmbedding.__gt__", "skbio.embedding.SequenceEmbedding.__hash__", "skbio.embedding.SequenceEmbedding.__le__", "skbio.embedding.SequenceEmbedding.__lt__", "skbio.embedding.SequenceEmbedding.__ne__", "skbio.embedding.SequenceEmbedding.__str__", "skbio.embedding.SequenceEmbedding.bytes", "skbio.embedding.SequenceVector", "skbio.embedding.SequenceVector.__eq__", "skbio.embedding.SequenceVector.__ge__", "skbio.embedding.SequenceVector.__getstate__", "skbio.embedding.SequenceVector.__gt__", "skbio.embedding.SequenceVector.__hash__", "skbio.embedding.SequenceVector.__le__", "skbio.embedding.SequenceVector.__lt__", "skbio.embedding.SequenceVector.__ne__", "skbio.embedding.SequenceVector.__str__", "skbio.embedding.SequenceVector.bytes", "skbio.embedding.embed_vec_to_dataframe", "skbio.embedding.embed_vec_to_distances", "skbio.embedding.embed_vec_to_numpy", "skbio.embedding.embed_vec_to_ordination", "Simple binary dissimilarity matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.binary_dm</span></code>)", "BIOM-Format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.biom</span></code>)", "BLAST+6 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast6</span></code>)", "BLAST+7 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast7</span></code>)", "Clustal format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.clustal</span></code>)", "Embedding format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embed</span></code>).", "EMBL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embl</span></code>)", "FASTA/QUAL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fasta</span></code>)", "FASTQ format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fastq</span></code>)", "GenBank format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.genbank</span></code>)", "GFF3 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.gff3</span></code>)", "Labeled square matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.lsmat</span></code>)", "Newick format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.newick</span></code>)", "Ordination results format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.ordination</span></code>)", "PHYLIP multiple sequence alignment format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.phylip</span></code>)", "QSeq format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.qseq</span></code>)", "Format Support", "Stockholm format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.stockholm</span></code>)", "Taxdump format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.taxdump</span></code>)", "I/O Registry (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.registry</span></code>)", "skbio.io.registry.Format", "skbio.io.registry.Format.__eq__", "skbio.io.registry.Format.__ge__", "skbio.io.registry.Format.__getstate__", "skbio.io.registry.Format.__gt__", "skbio.io.registry.Format.__hash__", "skbio.io.registry.Format.__le__", "skbio.io.registry.Format.__lt__", "skbio.io.registry.Format.__ne__", "skbio.io.registry.Format.__str__", "skbio.io.registry.Format.reader", "skbio.io.registry.Format.sniffer", "skbio.io.registry.Format.writer", "skbio.io.registry.IORegistry", "skbio.io.registry.IORegistry.__eq__", "skbio.io.registry.IORegistry.__ge__", "skbio.io.registry.IORegistry.__getstate__", "skbio.io.registry.IORegistry.__gt__", "skbio.io.registry.IORegistry.__hash__", "skbio.io.registry.IORegistry.__le__", "skbio.io.registry.IORegistry.__lt__", "skbio.io.registry.IORegistry.__ne__", "skbio.io.registry.IORegistry.__str__", "skbio.io.registry.IORegistry.add_format", "skbio.io.registry.IORegistry.create_format", "skbio.io.registry.IORegistry.get_reader", "skbio.io.registry.IORegistry.get_sniffer", "skbio.io.registry.IORegistry.get_writer", "skbio.io.registry.IORegistry.list_read_formats", "skbio.io.registry.IORegistry.list_write_formats", "skbio.io.registry.IORegistry.monkey_patch", "skbio.io.registry.IORegistry.read", "skbio.io.registry.IORegistry.sniff", "skbio.io.registry.IORegistry.write", "skbio.io.registry.create_format", "skbio.io.registry.read", "skbio.io.registry.sniff", "skbio.io.registry.write", "I/O utilities (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.util</span></code>)", "skbio.io.util.open", "skbio.io.util.open_file", "skbio.io.util.open_files", "skbio.metadata.CategoricalMetadataColumn", "skbio.metadata.CategoricalMetadataColumn.__eq__", "skbio.metadata.CategoricalMetadataColumn.__ge__", "skbio.metadata.CategoricalMetadataColumn.__getstate__", "skbio.metadata.CategoricalMetadataColumn.__gt__", "skbio.metadata.CategoricalMetadataColumn.__le__", "skbio.metadata.CategoricalMetadataColumn.__lt__", "skbio.metadata.CategoricalMetadataColumn.__ne__", "skbio.metadata.CategoricalMetadataColumn.__str__", "skbio.metadata.CategoricalMetadataColumn.drop_missing_values", "skbio.metadata.CategoricalMetadataColumn.filter_ids", "skbio.metadata.CategoricalMetadataColumn.get_ids", "skbio.metadata.CategoricalMetadataColumn.get_missing", "skbio.metadata.CategoricalMetadataColumn.get_value", "skbio.metadata.CategoricalMetadataColumn.has_missing_values", "skbio.metadata.CategoricalMetadataColumn.save", "skbio.metadata.CategoricalMetadataColumn.to_dataframe", "skbio.metadata.CategoricalMetadataColumn.to_series", "skbio.metadata.Interval", "skbio.metadata.Interval.__eq__", "skbio.metadata.Interval.__ge__", "skbio.metadata.Interval.__getstate__", "skbio.metadata.Interval.__gt__", "skbio.metadata.Interval.__le__", "skbio.metadata.Interval.__lt__", "skbio.metadata.Interval.__ne__", "skbio.metadata.Interval.__str__", "skbio.metadata.Interval.drop", "skbio.metadata.IntervalMetadata", "skbio.metadata.IntervalMetadata.__copy__", "skbio.metadata.IntervalMetadata.__deepcopy__", "skbio.metadata.IntervalMetadata.__eq__", "skbio.metadata.IntervalMetadata.__ge__", "skbio.metadata.IntervalMetadata.__getstate__", "skbio.metadata.IntervalMetadata.__gt__", "skbio.metadata.IntervalMetadata.__le__", "skbio.metadata.IntervalMetadata.__lt__", "skbio.metadata.IntervalMetadata.__ne__", "skbio.metadata.IntervalMetadata.__str__", "skbio.metadata.IntervalMetadata.add", "skbio.metadata.IntervalMetadata.concat", "skbio.metadata.IntervalMetadata.drop", "skbio.metadata.IntervalMetadata.merge", "skbio.metadata.IntervalMetadata.query", "skbio.metadata.IntervalMetadata.read", "skbio.metadata.IntervalMetadata.sort", "skbio.metadata.IntervalMetadata.write", "skbio.metadata.MetadataColumn", "skbio.metadata.MetadataColumn.__eq__", "skbio.metadata.MetadataColumn.__ge__", "skbio.metadata.MetadataColumn.__getstate__", "skbio.metadata.MetadataColumn.__gt__", "skbio.metadata.MetadataColumn.__le__", "skbio.metadata.MetadataColumn.__lt__", "skbio.metadata.MetadataColumn.__ne__", "skbio.metadata.MetadataColumn.__str__", "skbio.metadata.MetadataColumn.drop_missing_values", "skbio.metadata.MetadataColumn.filter_ids", "skbio.metadata.MetadataColumn.get_ids", "skbio.metadata.MetadataColumn.get_missing", "skbio.metadata.MetadataColumn.get_value", "skbio.metadata.MetadataColumn.has_missing_values", "skbio.metadata.MetadataColumn.save", "skbio.metadata.MetadataColumn.to_dataframe", "skbio.metadata.MetadataColumn.to_series", "skbio.metadata.NumericMetadataColumn", "skbio.metadata.NumericMetadataColumn.__eq__", "skbio.metadata.NumericMetadataColumn.__ge__", "skbio.metadata.NumericMetadataColumn.__getstate__", "skbio.metadata.NumericMetadataColumn.__gt__", "skbio.metadata.NumericMetadataColumn.__le__", "skbio.metadata.NumericMetadataColumn.__lt__", "skbio.metadata.NumericMetadataColumn.__ne__", "skbio.metadata.NumericMetadataColumn.__str__", "skbio.metadata.NumericMetadataColumn.drop_missing_values", "skbio.metadata.NumericMetadataColumn.filter_ids", "skbio.metadata.NumericMetadataColumn.get_ids", "skbio.metadata.NumericMetadataColumn.get_missing", "skbio.metadata.NumericMetadataColumn.get_value", "skbio.metadata.NumericMetadataColumn.has_missing_values", "skbio.metadata.NumericMetadataColumn.save", "skbio.metadata.NumericMetadataColumn.to_dataframe", "skbio.metadata.NumericMetadataColumn.to_series", "skbio.metadata.SampleMetadata", "skbio.metadata.SampleMetadata.__eq__", "skbio.metadata.SampleMetadata.__ge__", "skbio.metadata.SampleMetadata.__getstate__", "skbio.metadata.SampleMetadata.__gt__", "skbio.metadata.SampleMetadata.__le__", "skbio.metadata.SampleMetadata.__lt__", "skbio.metadata.SampleMetadata.__ne__", "skbio.metadata.SampleMetadata.__str__", "skbio.metadata.SampleMetadata.filter_columns", "skbio.metadata.SampleMetadata.filter_ids", "skbio.metadata.SampleMetadata.get_column", "skbio.metadata.SampleMetadata.get_ids", "skbio.metadata.SampleMetadata.load", "skbio.metadata.SampleMetadata.merge", "skbio.metadata.SampleMetadata.read", "skbio.metadata.SampleMetadata.save", "skbio.metadata.SampleMetadata.to_dataframe", "skbio.metadata.SampleMetadata.write", "skbio.sequence.DNA", "skbio.sequence.DNA.__bool__", "skbio.sequence.DNA.__contains__", "skbio.sequence.DNA.__copy__", "skbio.sequence.DNA.__deepcopy__", "skbio.sequence.DNA.__eq__", "skbio.sequence.DNA.__ge__", "skbio.sequence.DNA.__getitem__", "skbio.sequence.DNA.__getstate__", "skbio.sequence.DNA.__gt__", "skbio.sequence.DNA.__iter__", "skbio.sequence.DNA.__le__", "skbio.sequence.DNA.__len__", "skbio.sequence.DNA.__lt__", "skbio.sequence.DNA.__ne__", "skbio.sequence.DNA.__reversed__", "skbio.sequence.DNA.__str__", "skbio.sequence.DNA.complement", "skbio.sequence.DNA.concat", "skbio.sequence.DNA.count", "skbio.sequence.DNA.definites", "skbio.sequence.DNA.degap", "skbio.sequence.DNA.degenerates", "skbio.sequence.DNA.distance", "skbio.sequence.DNA.expand_degenerates", "skbio.sequence.DNA.find_motifs", "skbio.sequence.DNA.find_with_regex", "skbio.sequence.DNA.frequencies", "skbio.sequence.DNA.gaps", "skbio.sequence.DNA.gc_content", "skbio.sequence.DNA.gc_frequency", "skbio.sequence.DNA.has_definites", "skbio.sequence.DNA.has_degenerates", "skbio.sequence.DNA.has_gaps", "skbio.sequence.DNA.has_interval_metadata", "skbio.sequence.DNA.has_metadata", "skbio.sequence.DNA.has_nondegenerates", "skbio.sequence.DNA.has_positional_metadata", "skbio.sequence.DNA.index", "skbio.sequence.DNA.is_reverse_complement", "skbio.sequence.DNA.iter_contiguous", "skbio.sequence.DNA.iter_kmers", "skbio.sequence.DNA.kmer_frequencies", "skbio.sequence.DNA.lowercase", "skbio.sequence.DNA.match_frequency", "skbio.sequence.DNA.matches", "skbio.sequence.DNA.mismatch_frequency", "skbio.sequence.DNA.mismatches", "skbio.sequence.DNA.nondegenerates", "skbio.sequence.DNA.read", "skbio.sequence.DNA.replace", "skbio.sequence.DNA.reverse_complement", "skbio.sequence.DNA.to_definites", "skbio.sequence.DNA.to_indices", "skbio.sequence.DNA.to_regex", "skbio.sequence.DNA.transcribe", "skbio.sequence.DNA.translate", "skbio.sequence.DNA.translate_six_frames", "skbio.sequence.DNA.write", "skbio.sequence.GeneticCode", "skbio.sequence.GeneticCode.__eq__", "skbio.sequence.GeneticCode.__ge__", "skbio.sequence.GeneticCode.__getstate__", "skbio.sequence.GeneticCode.__gt__", "skbio.sequence.GeneticCode.__le__", "skbio.sequence.GeneticCode.__lt__", "skbio.sequence.GeneticCode.__ne__", "skbio.sequence.GeneticCode.__str__", "skbio.sequence.GeneticCode.from_ncbi", "skbio.sequence.GeneticCode.translate", "skbio.sequence.GeneticCode.translate_six_frames", "skbio.sequence.GrammaredSequence", "skbio.sequence.GrammaredSequence.__bool__", "skbio.sequence.GrammaredSequence.__contains__", "skbio.sequence.GrammaredSequence.__copy__", "skbio.sequence.GrammaredSequence.__deepcopy__", "skbio.sequence.GrammaredSequence.__eq__", "skbio.sequence.GrammaredSequence.__ge__", "skbio.sequence.GrammaredSequence.__getitem__", "skbio.sequence.GrammaredSequence.__getstate__", "skbio.sequence.GrammaredSequence.__gt__", "skbio.sequence.GrammaredSequence.__iter__", "skbio.sequence.GrammaredSequence.__le__", "skbio.sequence.GrammaredSequence.__len__", "skbio.sequence.GrammaredSequence.__lt__", "skbio.sequence.GrammaredSequence.__ne__", "skbio.sequence.GrammaredSequence.__reversed__", "skbio.sequence.GrammaredSequence.__str__", "skbio.sequence.GrammaredSequence.concat", "skbio.sequence.GrammaredSequence.count", "skbio.sequence.GrammaredSequence.definites", "skbio.sequence.GrammaredSequence.degap", "skbio.sequence.GrammaredSequence.degenerates", "skbio.sequence.GrammaredSequence.distance", "skbio.sequence.GrammaredSequence.expand_degenerates", "skbio.sequence.GrammaredSequence.find_motifs", "skbio.sequence.GrammaredSequence.find_with_regex", "skbio.sequence.GrammaredSequence.frequencies", "skbio.sequence.GrammaredSequence.gaps", "skbio.sequence.GrammaredSequence.has_definites", "skbio.sequence.GrammaredSequence.has_degenerates", "skbio.sequence.GrammaredSequence.has_gaps", "skbio.sequence.GrammaredSequence.has_interval_metadata", "skbio.sequence.GrammaredSequence.has_metadata", "skbio.sequence.GrammaredSequence.has_nondegenerates", "skbio.sequence.GrammaredSequence.has_positional_metadata", "skbio.sequence.GrammaredSequence.index", "skbio.sequence.GrammaredSequence.iter_contiguous", "skbio.sequence.GrammaredSequence.iter_kmers", "skbio.sequence.GrammaredSequence.kmer_frequencies", "skbio.sequence.GrammaredSequence.lowercase", "skbio.sequence.GrammaredSequence.match_frequency", "skbio.sequence.GrammaredSequence.matches", "skbio.sequence.GrammaredSequence.mismatch_frequency", "skbio.sequence.GrammaredSequence.mismatches", "skbio.sequence.GrammaredSequence.nondegenerates", "skbio.sequence.GrammaredSequence.read", "skbio.sequence.GrammaredSequence.replace", "skbio.sequence.GrammaredSequence.to_definites", "skbio.sequence.GrammaredSequence.to_indices", "skbio.sequence.GrammaredSequence.to_regex", "skbio.sequence.GrammaredSequence.write", "skbio.sequence.Protein", "skbio.sequence.Protein.__bool__", "skbio.sequence.Protein.__contains__", "skbio.sequence.Protein.__copy__", "skbio.sequence.Protein.__deepcopy__", "skbio.sequence.Protein.__eq__", "skbio.sequence.Protein.__ge__", "skbio.sequence.Protein.__getitem__", "skbio.sequence.Protein.__getstate__", "skbio.sequence.Protein.__gt__", "skbio.sequence.Protein.__iter__", "skbio.sequence.Protein.__le__", "skbio.sequence.Protein.__len__", "skbio.sequence.Protein.__lt__", "skbio.sequence.Protein.__ne__", "skbio.sequence.Protein.__reversed__", "skbio.sequence.Protein.__str__", "skbio.sequence.Protein.concat", "skbio.sequence.Protein.count", "skbio.sequence.Protein.definites", "skbio.sequence.Protein.degap", "skbio.sequence.Protein.degenerates", "skbio.sequence.Protein.distance", "skbio.sequence.Protein.expand_degenerates", "skbio.sequence.Protein.find_motifs", "skbio.sequence.Protein.find_with_regex", "skbio.sequence.Protein.frequencies", "skbio.sequence.Protein.gaps", "skbio.sequence.Protein.has_definites", "skbio.sequence.Protein.has_degenerates", "skbio.sequence.Protein.has_gaps", "skbio.sequence.Protein.has_interval_metadata", "skbio.sequence.Protein.has_metadata", "skbio.sequence.Protein.has_nondegenerates", "skbio.sequence.Protein.has_positional_metadata", "skbio.sequence.Protein.has_stops", "skbio.sequence.Protein.index", "skbio.sequence.Protein.iter_contiguous", "skbio.sequence.Protein.iter_kmers", "skbio.sequence.Protein.kmer_frequencies", "skbio.sequence.Protein.lowercase", "skbio.sequence.Protein.match_frequency", "skbio.sequence.Protein.matches", "skbio.sequence.Protein.mismatch_frequency", "skbio.sequence.Protein.mismatches", "skbio.sequence.Protein.nondegenerates", "skbio.sequence.Protein.read", "skbio.sequence.Protein.replace", "skbio.sequence.Protein.stops", "skbio.sequence.Protein.to_definites", "skbio.sequence.Protein.to_indices", "skbio.sequence.Protein.to_regex", "skbio.sequence.Protein.write", "skbio.sequence.RNA", "skbio.sequence.RNA.__bool__", "skbio.sequence.RNA.__contains__", "skbio.sequence.RNA.__copy__", "skbio.sequence.RNA.__deepcopy__", "skbio.sequence.RNA.__eq__", "skbio.sequence.RNA.__ge__", "skbio.sequence.RNA.__getitem__", "skbio.sequence.RNA.__getstate__", "skbio.sequence.RNA.__gt__", "skbio.sequence.RNA.__iter__", "skbio.sequence.RNA.__le__", "skbio.sequence.RNA.__len__", "skbio.sequence.RNA.__lt__", "skbio.sequence.RNA.__ne__", "skbio.sequence.RNA.__reversed__", "skbio.sequence.RNA.__str__", "skbio.sequence.RNA.complement", "skbio.sequence.RNA.concat", "skbio.sequence.RNA.count", "skbio.sequence.RNA.definites", "skbio.sequence.RNA.degap", "skbio.sequence.RNA.degenerates", "skbio.sequence.RNA.distance", "skbio.sequence.RNA.expand_degenerates", "skbio.sequence.RNA.find_motifs", "skbio.sequence.RNA.find_with_regex", "skbio.sequence.RNA.frequencies", "skbio.sequence.RNA.gaps", "skbio.sequence.RNA.gc_content", "skbio.sequence.RNA.gc_frequency", "skbio.sequence.RNA.has_definites", "skbio.sequence.RNA.has_degenerates", "skbio.sequence.RNA.has_gaps", "skbio.sequence.RNA.has_interval_metadata", "skbio.sequence.RNA.has_metadata", "skbio.sequence.RNA.has_nondegenerates", "skbio.sequence.RNA.has_positional_metadata", "skbio.sequence.RNA.index", "skbio.sequence.RNA.is_reverse_complement", "skbio.sequence.RNA.iter_contiguous", "skbio.sequence.RNA.iter_kmers", "skbio.sequence.RNA.kmer_frequencies", "skbio.sequence.RNA.lowercase", "skbio.sequence.RNA.match_frequency", "skbio.sequence.RNA.matches", "skbio.sequence.RNA.mismatch_frequency", "skbio.sequence.RNA.mismatches", "skbio.sequence.RNA.nondegenerates", "skbio.sequence.RNA.read", "skbio.sequence.RNA.replace", "skbio.sequence.RNA.reverse_complement", "skbio.sequence.RNA.reverse_transcribe", "skbio.sequence.RNA.to_definites", "skbio.sequence.RNA.to_indices", "skbio.sequence.RNA.to_regex", "skbio.sequence.RNA.translate", "skbio.sequence.RNA.translate_six_frames", "skbio.sequence.RNA.write", "skbio.sequence.Sequence", "skbio.sequence.Sequence.__bool__", "skbio.sequence.Sequence.__contains__", "skbio.sequence.Sequence.__copy__", "skbio.sequence.Sequence.__deepcopy__", "skbio.sequence.Sequence.__eq__", "skbio.sequence.Sequence.__ge__", "skbio.sequence.Sequence.__getitem__", "skbio.sequence.Sequence.__getstate__", "skbio.sequence.Sequence.__gt__", "skbio.sequence.Sequence.__iter__", "skbio.sequence.Sequence.__le__", "skbio.sequence.Sequence.__len__", "skbio.sequence.Sequence.__lt__", "skbio.sequence.Sequence.__ne__", "skbio.sequence.Sequence.__reversed__", "skbio.sequence.Sequence.__str__", "skbio.sequence.Sequence.concat", "skbio.sequence.Sequence.count", "skbio.sequence.Sequence.distance", "skbio.sequence.Sequence.find_with_regex", "skbio.sequence.Sequence.frequencies", "skbio.sequence.Sequence.has_interval_metadata", "skbio.sequence.Sequence.has_metadata", "skbio.sequence.Sequence.has_positional_metadata", "skbio.sequence.Sequence.index", "skbio.sequence.Sequence.iter_contiguous", "skbio.sequence.Sequence.iter_kmers", "skbio.sequence.Sequence.kmer_frequencies", "skbio.sequence.Sequence.lowercase", "skbio.sequence.Sequence.match_frequency", "skbio.sequence.Sequence.matches", "skbio.sequence.Sequence.mismatch_frequency", "skbio.sequence.Sequence.mismatches", "skbio.sequence.Sequence.read", "skbio.sequence.Sequence.replace", "skbio.sequence.Sequence.to_indices", "skbio.sequence.Sequence.write", "skbio.sequence.SubstitutionMatrix", "skbio.sequence.SubstitutionMatrix.__contains__", "skbio.sequence.SubstitutionMatrix.__eq__", "skbio.sequence.SubstitutionMatrix.__ge__", "skbio.sequence.SubstitutionMatrix.__getitem__", "skbio.sequence.SubstitutionMatrix.__getstate__", "skbio.sequence.SubstitutionMatrix.__gt__", "skbio.sequence.SubstitutionMatrix.__le__", "skbio.sequence.SubstitutionMatrix.__lt__", "skbio.sequence.SubstitutionMatrix.__ne__", "skbio.sequence.SubstitutionMatrix.__str__", "skbio.sequence.SubstitutionMatrix.between", "skbio.sequence.SubstitutionMatrix.by_name", "skbio.sequence.SubstitutionMatrix.copy", "skbio.sequence.SubstitutionMatrix.filter", "skbio.sequence.SubstitutionMatrix.from_dict", "skbio.sequence.SubstitutionMatrix.from_iterable", "skbio.sequence.SubstitutionMatrix.get_names", "skbio.sequence.SubstitutionMatrix.identity", "skbio.sequence.SubstitutionMatrix.index", "skbio.sequence.SubstitutionMatrix.plot", "skbio.sequence.SubstitutionMatrix.read", "skbio.sequence.SubstitutionMatrix.redundant_form", "skbio.sequence.SubstitutionMatrix.to_data_frame", "skbio.sequence.SubstitutionMatrix.to_dict", "skbio.sequence.SubstitutionMatrix.transpose", "skbio.sequence.SubstitutionMatrix.within", "skbio.sequence.SubstitutionMatrix.write", "Sequence distance metrics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence.distance</span></code>)", "skbio.sequence.distance.hamming", "skbio.sequence.distance.kmer_distance", "Composition Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.composition</span></code>)", "skbio.stats.composition.alr", "skbio.stats.composition.alr_inv", "skbio.stats.composition.ancom", "skbio.stats.composition.centralize", "skbio.stats.composition.closure", "skbio.stats.composition.clr", "skbio.stats.composition.clr_inv", "skbio.stats.composition.dirmult_ttest", "skbio.stats.composition.ilr", "skbio.stats.composition.ilr_inv", "skbio.stats.composition.inner", "skbio.stats.composition.multi_replace", "skbio.stats.composition.multiplicative_replacement", "skbio.stats.composition.pairwise_vlr", "skbio.stats.composition.perturb", "skbio.stats.composition.perturb_inv", "skbio.stats.composition.power", "skbio.stats.composition.sbp_basis", "skbio.stats.composition.tree_basis", "skbio.stats.composition.vlr", "Distance matrix-based statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.distance</span></code>)", "skbio.stats.distance.DissimilarityMatrix", "skbio.stats.distance.DissimilarityMatrix.__contains__", "skbio.stats.distance.DissimilarityMatrix.__eq__", "skbio.stats.distance.DissimilarityMatrix.__ge__", "skbio.stats.distance.DissimilarityMatrix.__getitem__", "skbio.stats.distance.DissimilarityMatrix.__getstate__", "skbio.stats.distance.DissimilarityMatrix.__gt__", "skbio.stats.distance.DissimilarityMatrix.__le__", "skbio.stats.distance.DissimilarityMatrix.__lt__", "skbio.stats.distance.DissimilarityMatrix.__ne__", "skbio.stats.distance.DissimilarityMatrix.__str__", "skbio.stats.distance.DissimilarityMatrix.between", "skbio.stats.distance.DissimilarityMatrix.copy", "skbio.stats.distance.DissimilarityMatrix.filter", "skbio.stats.distance.DissimilarityMatrix.from_iterable", "skbio.stats.distance.DissimilarityMatrix.index", "skbio.stats.distance.DissimilarityMatrix.plot", "skbio.stats.distance.DissimilarityMatrix.read", "skbio.stats.distance.DissimilarityMatrix.redundant_form", "skbio.stats.distance.DissimilarityMatrix.to_data_frame", "skbio.stats.distance.DissimilarityMatrix.transpose", "skbio.stats.distance.DissimilarityMatrix.within", "skbio.stats.distance.DissimilarityMatrix.write", "skbio.stats.distance.DistanceMatrix", "skbio.stats.distance.DistanceMatrix.__contains__", "skbio.stats.distance.DistanceMatrix.__eq__", "skbio.stats.distance.DistanceMatrix.__ge__", "skbio.stats.distance.DistanceMatrix.__getitem__", "skbio.stats.distance.DistanceMatrix.__getstate__", "skbio.stats.distance.DistanceMatrix.__gt__", "skbio.stats.distance.DistanceMatrix.__le__", "skbio.stats.distance.DistanceMatrix.__lt__", "skbio.stats.distance.DistanceMatrix.__ne__", "skbio.stats.distance.DistanceMatrix.__str__", "skbio.stats.distance.DistanceMatrix.between", "skbio.stats.distance.DistanceMatrix.condensed_form", "skbio.stats.distance.DistanceMatrix.copy", "skbio.stats.distance.DistanceMatrix.filter", "skbio.stats.distance.DistanceMatrix.from_iterable", "skbio.stats.distance.DistanceMatrix.index", "skbio.stats.distance.DistanceMatrix.permute", "skbio.stats.distance.DistanceMatrix.plot", "skbio.stats.distance.DistanceMatrix.read", "skbio.stats.distance.DistanceMatrix.redundant_form", "skbio.stats.distance.DistanceMatrix.to_data_frame", "skbio.stats.distance.DistanceMatrix.to_series", "skbio.stats.distance.DistanceMatrix.transpose", "skbio.stats.distance.DistanceMatrix.within", "skbio.stats.distance.DistanceMatrix.write", "skbio.stats.distance.anosim", "skbio.stats.distance.bioenv", "skbio.stats.distance.mantel", "skbio.stats.distance.permanova", "skbio.stats.distance.permdisp", "skbio.stats.distance.pwmantel", "skbio.stats.distance.randdm", "Evolutionary statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.evolve</span></code>)", "skbio.stats.evolve.hommola_cospeciation", "Gradient analyses (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.gradient</span></code>)", "skbio.stats.gradient.AverageGradientANOVA", "skbio.stats.gradient.AverageGradientANOVA.__eq__", "skbio.stats.gradient.AverageGradientANOVA.__ge__", "skbio.stats.gradient.AverageGradientANOVA.__getstate__", "skbio.stats.gradient.AverageGradientANOVA.__gt__", "skbio.stats.gradient.AverageGradientANOVA.__hash__", "skbio.stats.gradient.AverageGradientANOVA.__le__", "skbio.stats.gradient.AverageGradientANOVA.__lt__", "skbio.stats.gradient.AverageGradientANOVA.__ne__", "skbio.stats.gradient.AverageGradientANOVA.__str__", "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "skbio.stats.gradient.CategoryResults", "skbio.stats.gradient.CategoryResults.__eq__", "skbio.stats.gradient.CategoryResults.__ge__", "skbio.stats.gradient.CategoryResults.__getstate__", "skbio.stats.gradient.CategoryResults.__gt__", "skbio.stats.gradient.CategoryResults.__hash__", "skbio.stats.gradient.CategoryResults.__le__", "skbio.stats.gradient.CategoryResults.__lt__", "skbio.stats.gradient.CategoryResults.__ne__", "skbio.stats.gradient.CategoryResults.__str__", "skbio.stats.gradient.CategoryResults.to_files", "skbio.stats.gradient.FirstDifferenceGradientANOVA", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVA", "skbio.stats.gradient.GradientANOVA.__eq__", "skbio.stats.gradient.GradientANOVA.__ge__", "skbio.stats.gradient.GradientANOVA.__getstate__", "skbio.stats.gradient.GradientANOVA.__gt__", "skbio.stats.gradient.GradientANOVA.__hash__", "skbio.stats.gradient.GradientANOVA.__le__", "skbio.stats.gradient.GradientANOVA.__lt__", "skbio.stats.gradient.GradientANOVA.__ne__", "skbio.stats.gradient.GradientANOVA.__str__", "skbio.stats.gradient.GradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVAResults", "skbio.stats.gradient.GradientANOVAResults.__eq__", "skbio.stats.gradient.GradientANOVAResults.__ge__", "skbio.stats.gradient.GradientANOVAResults.__getstate__", "skbio.stats.gradient.GradientANOVAResults.__gt__", "skbio.stats.gradient.GradientANOVAResults.__hash__", "skbio.stats.gradient.GradientANOVAResults.__le__", "skbio.stats.gradient.GradientANOVAResults.__lt__", "skbio.stats.gradient.GradientANOVAResults.__ne__", "skbio.stats.gradient.GradientANOVAResults.__str__", "skbio.stats.gradient.GradientANOVAResults.to_files", "skbio.stats.gradient.GroupResults", "skbio.stats.gradient.GroupResults.__eq__", "skbio.stats.gradient.GroupResults.__ge__", "skbio.stats.gradient.GroupResults.__getstate__", "skbio.stats.gradient.GroupResults.__gt__", "skbio.stats.gradient.GroupResults.__hash__", "skbio.stats.gradient.GroupResults.__le__", "skbio.stats.gradient.GroupResults.__lt__", "skbio.stats.gradient.GroupResults.__ne__", "skbio.stats.gradient.GroupResults.__str__", "skbio.stats.gradient.GroupResults.to_files", "skbio.stats.gradient.TrajectoryGradientANOVA", "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "skbio.stats.gradient.WindowDifferenceGradientANOVA", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "skbio.stats.isubsample", "Ordination methods (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.ordination</span></code>)", "skbio.stats.ordination.OrdinationResults", "skbio.stats.ordination.OrdinationResults.__eq__", "skbio.stats.ordination.OrdinationResults.__ge__", "skbio.stats.ordination.OrdinationResults.__getstate__", "skbio.stats.ordination.OrdinationResults.__gt__", "skbio.stats.ordination.OrdinationResults.__hash__", "skbio.stats.ordination.OrdinationResults.__le__", "skbio.stats.ordination.OrdinationResults.__lt__", "skbio.stats.ordination.OrdinationResults.__ne__", "skbio.stats.ordination.OrdinationResults.__str__", "skbio.stats.ordination.OrdinationResults.plot", "skbio.stats.ordination.OrdinationResults.read", "skbio.stats.ordination.OrdinationResults.rename", "skbio.stats.ordination.OrdinationResults.write", "skbio.stats.ordination.ca", "skbio.stats.ordination.cca", "skbio.stats.ordination.corr", "skbio.stats.ordination.e_matrix", "skbio.stats.ordination.f_matrix", "skbio.stats.ordination.mean_and_std", "skbio.stats.ordination.pcoa", "skbio.stats.ordination.pcoa_biplot", "skbio.stats.ordination.rda", "skbio.stats.ordination.scale", "skbio.stats.ordination.svd_rank", "Empirical Power Estimation (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.power</span></code>)", "skbio.stats.power.confidence_bound", "skbio.stats.power.paired_subsamples", "skbio.stats.power.subsample_paired_power", "skbio.stats.power.subsample_power", "skbio.stats.subsample_counts", "skbio.table.Table", "skbio.table.Table.__eq__", "skbio.table.Table.__ge__", "skbio.table.Table.__getitem__", "skbio.table.Table.__getstate__", "skbio.table.Table.__gt__", "skbio.table.Table.__iter__", "skbio.table.Table.__le__", "skbio.table.Table.__lt__", "skbio.table.Table.__ne__", "skbio.table.Table.__str__", "skbio.table.Table.add_group_metadata", "skbio.table.Table.add_metadata", "skbio.table.Table.align_to", "skbio.table.Table.align_to_dataframe", "skbio.table.Table.align_tree", "skbio.table.Table.collapse", "skbio.table.Table.concat", "skbio.table.Table.copy", "skbio.table.Table.data", "skbio.table.Table.del_metadata", "skbio.table.Table.delimited_self", "skbio.table.Table.descriptive_equality", "skbio.table.Table.exists", "skbio.table.Table.filter", "skbio.table.Table.from_adjacency", "skbio.table.Table.from_hdf5", "skbio.table.Table.from_json", "skbio.table.Table.from_tsv", "skbio.table.Table.get_table_density", "skbio.table.Table.get_value_by_ids", "skbio.table.Table.group_metadata", "skbio.table.Table.head", "skbio.table.Table.ids", "skbio.table.Table.index", "skbio.table.Table.is_empty", "skbio.table.Table.iter", "skbio.table.Table.iter_data", "skbio.table.Table.iter_pairwise", "skbio.table.Table.length", "skbio.table.Table.max", "skbio.table.Table.merge", "skbio.table.Table.metadata", "skbio.table.Table.metadata_to_dataframe", "skbio.table.Table.min", "skbio.table.Table.nonzero", "skbio.table.Table.nonzero_counts", "skbio.table.Table.norm", "skbio.table.Table.pa", "skbio.table.Table.partition", "skbio.table.Table.rankdata", "skbio.table.Table.read", "skbio.table.Table.reduce", "skbio.table.Table.remove_empty", "skbio.table.Table.sort", "skbio.table.Table.sort_order", "skbio.table.Table.subsample", "skbio.table.Table.sum", "skbio.table.Table.to_anndata", "skbio.table.Table.to_dataframe", "skbio.table.Table.to_hdf5", "skbio.table.Table.to_json", "skbio.table.Table.to_tsv", "skbio.table.Table.transform", "skbio.table.Table.transpose", "skbio.table.Table.update_ids", "skbio.table.Table.write", "skbio.table.example_table", "skbio.tree.TreeNode", "skbio.tree.TreeNode.__copy__", "skbio.tree.TreeNode.__deepcopy__", "skbio.tree.TreeNode.__eq__", "skbio.tree.TreeNode.__ge__", "skbio.tree.TreeNode.__getitem__", "skbio.tree.TreeNode.__getstate__", "skbio.tree.TreeNode.__gt__", "skbio.tree.TreeNode.__hash__", "skbio.tree.TreeNode.__iter__", "skbio.tree.TreeNode.__le__", "skbio.tree.TreeNode.__len__", "skbio.tree.TreeNode.__lt__", "skbio.tree.TreeNode.__ne__", "skbio.tree.TreeNode.__str__", "skbio.tree.TreeNode.accumulate_to_ancestor", "skbio.tree.TreeNode.ancestors", "skbio.tree.TreeNode.append", "skbio.tree.TreeNode.ascii_art", "skbio.tree.TreeNode.assign_ids", "skbio.tree.TreeNode.assign_supports", "skbio.tree.TreeNode.bifurcate", "skbio.tree.TreeNode.cache_attr", "skbio.tree.TreeNode.compare_rfd", "skbio.tree.TreeNode.compare_subsets", "skbio.tree.TreeNode.compare_tip_distances", "skbio.tree.TreeNode.copy", "skbio.tree.TreeNode.count", "skbio.tree.TreeNode.create_caches", "skbio.tree.TreeNode.deepcopy", "skbio.tree.TreeNode.descending_branch_length", "skbio.tree.TreeNode.distance", "skbio.tree.TreeNode.extend", "skbio.tree.TreeNode.find", "skbio.tree.TreeNode.find_all", "skbio.tree.TreeNode.find_by_func", "skbio.tree.TreeNode.find_by_id", "skbio.tree.TreeNode.from_linkage_matrix", "skbio.tree.TreeNode.from_taxdump", "skbio.tree.TreeNode.from_taxonomy", "skbio.tree.TreeNode.get_max_distance", "skbio.tree.TreeNode.has_children", "skbio.tree.TreeNode.index_tree", "skbio.tree.TreeNode.insert", "skbio.tree.TreeNode.invalidate_caches", "skbio.tree.TreeNode.is_root", "skbio.tree.TreeNode.is_tip", "skbio.tree.TreeNode.lca", "skbio.tree.TreeNode.levelorder", "skbio.tree.TreeNode.lowest_common_ancestor", "skbio.tree.TreeNode.neighbors", "skbio.tree.TreeNode.non_tips", "skbio.tree.TreeNode.observed_node_counts", "skbio.tree.TreeNode.pop", "skbio.tree.TreeNode.postorder", "skbio.tree.TreeNode.pre_and_postorder", "skbio.tree.TreeNode.preorder", "skbio.tree.TreeNode.prune", "skbio.tree.TreeNode.read", "skbio.tree.TreeNode.remove", "skbio.tree.TreeNode.remove_deleted", "skbio.tree.TreeNode.root", "skbio.tree.TreeNode.root_at", "skbio.tree.TreeNode.root_at_midpoint", "skbio.tree.TreeNode.root_by_outgroup", "skbio.tree.TreeNode.shear", "skbio.tree.TreeNode.shuffle", "skbio.tree.TreeNode.siblings", "skbio.tree.TreeNode.subset", "skbio.tree.TreeNode.subsets", "skbio.tree.TreeNode.subtree", "skbio.tree.TreeNode.tip_tip_distances", "skbio.tree.TreeNode.tips", "skbio.tree.TreeNode.to_array", "skbio.tree.TreeNode.to_taxonomy", "skbio.tree.TreeNode.traverse", "skbio.tree.TreeNode.unpack", "skbio.tree.TreeNode.unpack_by_func", "skbio.tree.TreeNode.unroot", "skbio.tree.TreeNode.unrooted_copy", "skbio.tree.TreeNode.unrooted_deepcopy", "skbio.tree.TreeNode.unrooted_move", "skbio.tree.TreeNode.write", "skbio.tree.majority_rule", "skbio.tree.nj", "skbio.util.EfficiencyWarning", "skbio.util.RepresentationWarning", "skbio.util.assert_data_frame_almost_equal", "skbio.util.assert_ordination_results_equal", "skbio.util.cardinal_to_ordinal", "skbio.util.classproperty", "skbio.util.classproperty.__delete__", "skbio.util.classproperty.__eq__", "skbio.util.classproperty.__ge__", "skbio.util.classproperty.__get__", "skbio.util.classproperty.__getstate__", "skbio.util.classproperty.__gt__", "skbio.util.classproperty.__hash__", "skbio.util.classproperty.__le__", "skbio.util.classproperty.__lt__", "skbio.util.classproperty.__ne__", "skbio.util.classproperty.__set__", "skbio.util.classproperty.__set_name__", "skbio.util.classproperty.__str__", "skbio.util.classproperty.deleter", "skbio.util.classproperty.getter", "skbio.util.classproperty.setter", "skbio.util.find_duplicates", "skbio.util.get_data_path", "skbio.util.safe_md5", "skbio.workflow.Workflow", "skbio.workflow.Workflow.__call__", "skbio.workflow.Workflow.__eq__", "skbio.workflow.Workflow.__ge__", "skbio.workflow.Workflow.__getstate__", "skbio.workflow.Workflow.__gt__", "skbio.workflow.Workflow.__hash__", "skbio.workflow.Workflow.__le__", "skbio.workflow.Workflow.__lt__", "skbio.workflow.Workflow.__ne__", "skbio.workflow.Workflow.__str__", "skbio.workflow.Workflow.initialize_state", "skbio.workflow.method", "skbio.workflow.method.__call__", "skbio.workflow.method.__eq__", "skbio.workflow.method.__ge__", "skbio.workflow.method.__getstate__", "skbio.workflow.method.__gt__", "skbio.workflow.method.__hash__", "skbio.workflow.method.__le__", "skbio.workflow.method.__lt__", "skbio.workflow.method.__ne__", "skbio.workflow.method.__str__", "skbio.workflow.requires", "skbio.workflow.requires.__call__", "skbio.workflow.requires.__eq__", "skbio.workflow.requires.__ge__", "skbio.workflow.requires.__getstate__", "skbio.workflow.requires.__gt__", "skbio.workflow.requires.__hash__", "skbio.workflow.requires.__le__", "skbio.workflow.requires.__lt__", "skbio.workflow.requires.__ne__", "skbio.workflow.requires.__str__", "Home", "Input and Output (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io</span></code>)", "Metadata (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.metadata</span></code>)", "Biological Sequences (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence</span></code>)", "Multivariate Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats</span></code>)", "Data Table (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.table</span></code>)", "Trees and Phylogenetics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.tree</span></code>)", "Utilities for Developers (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.util</span></code>)", "Workflow construction (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.workflow</span></code>)"], "titleterms": {"0": 1099, "2": 1099, "6": [220, 1099], "7": 221, "__bool__": [66, 383, 454, 505, 558, 617], "__call__": [54, 1066, 1078, 1089], "__contains__": [67, 384, 455, 506, 559, 618, 655, 708, 731], "__copy__": [68, 309, 385, 456, 507, 560, 619, 956], "__deepcopy__": [69, 310, 386, 457, 508, 561, 620, 957], "__delete__": 1046, "__eq__": [4, 21, 35, 55, 70, 156, 167, 180, 193, 204, 239, 252, 281, 299, 311, 328, 346, 364, 387, 442, 458, 509, 562, 621, 656, 709, 732, 767, 778, 789, 800, 811, 822, 833, 844, 857, 888, 958, 1047, 1067, 1079, 1090], "__ge__": [5, 22, 36, 56, 71, 157, 168, 181, 194, 205, 240, 253, 282, 300, 312, 329, 347, 365, 388, 443, 459, 510, 563, 622, 657, 710, 733, 768, 779, 790, 801, 812, 823, 834, 845, 858, 889, 959, 1048, 1068, 1080, 1091], "__get__": 1049, "__getitem__": [23, 72, 389, 460, 511, 564, 623, 658, 711, 734, 890, 960], "__getstate__": [6, 24, 37, 57, 73, 158, 169, 182, 195, 206, 241, 254, 283, 301, 313, 330, 348, 366, 390, 444, 461, 512, 565, 624, 659, 712, 735, 769, 780, 791, 802, 813, 824, 835, 846, 859, 891, 961, 1050, 1069, 1081, 1092], "__gt__": [7, 25, 38, 58, 74, 159, 170, 183, 196, 207, 242, 255, 284, 302, 314, 331, 349, 367, 391, 445, 462, 513, 566, 625, 660, 713, 736, 770, 781, 792, 803, 814, 825, 836, 847, 860, 892, 962, 1051, 1070, 1082, 1093], "__hash__": [8, 26, 39, 59, 160, 171, 184, 197, 208, 243, 256, 771, 782, 793, 804, 815, 826, 837, 848, 861, 963, 1052, 1071, 1083, 1094], "__iter__": [75, 392, 463, 514, 567, 626, 893, 964], "__le__": [9, 27, 40, 60, 76, 161, 172, 185, 198, 209, 244, 257, 285, 303, 315, 332, 350, 368, 393, 446, 464, 515, 568, 627, 661, 714, 737, 772, 783, 794, 805, 816, 827, 838, 849, 862, 894, 965, 1053, 1072, 1084, 1095], "__len__": [77, 394, 465, 516, 569, 628, 966], "__lt__": [10, 28, 41, 61, 78, 162, 173, 186, 199, 210, 245, 258, 286, 304, 316, 333, 351, 369, 395, 447, 466, 517, 570, 629, 662, 715, 738, 773, 784, 795, 806, 817, 828, 839, 850, 863, 895, 967, 1054, 1073, 1085, 1096], "__ne__": [11, 29, 42, 62, 79, 163, 174, 187, 200, 211, 246, 259, 287, 305, 317, 334, 352, 370, 396, 448, 467, 518, 571, 630, 663, 716, 739, 774, 785, 796, 807, 818, 829, 840, 851, 864, 896, 968, 1055, 1074, 1086, 1097], "__reversed__": [80, 397, 468, 519, 572, 631], "__set__": 1056, "__set_name__": 1057, "__setstate__": [30, 63], "__str__": [12, 31, 43, 64, 81, 164, 175, 188, 201, 212, 247, 260, 288, 306, 318, 335, 353, 371, 398, 449, 469, 520, 573, 632, 664, 717, 740, 775, 786, 797, 808, 819, 830, 841, 852, 865, 897, 969, 1058, 1075, 1087, 1098], "ac": 107, "accumulate_to_ancestor": 970, "ad": 230, "add": 319, "add_format": 261, "add_group_metadata": 898, "add_metadata": 899, "advanc": 230, "algorithm": 0, "align": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 222, 232, 235], "align_to": 900, "align_to_datafram": 901, "align_tre": 902, "alignmentstructur": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "alignpath": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "alpha": [1, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "alpha_divers": 146, "alr": 686, "alr_inv": 687, "analys": 765, "analysi": 855, "ancestor": 971, "ancom": 688, "anosim": 756, "append": [82, 972], "applic": 230, "argument": 237, "ascii_art": 973, "assert_data_frame_almost_equ": 1042, "assert_ordination_results_equ": 1043, "assign_id": 974, "assign_support": 975, "averagegradientanova": [766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776], "base": 706, "basic": 230, "befor": [224, 227], "berger_parker_d": 108, "beta": [1, 147, 148, 149], "beta_divers": 150, "between": [665, 718, 741], "bifurc": 976, "binari": 218, "binary_dm": 218, "bio": [237, 1099, 1100], "bioenv": 757, "biolog": [2, 1102], "biom": [219, 1104], "blast": [220, 221], "blast6": 220, "blast7": 221, "block_beta_divers": 151, "brillouin_d": 109, "by_nam": 666, "byte": [165, 176, 189, 202, 213], "ca": 870, "cache_attr": 977, "calcul": 1102, "can": 1100, "canon": 855, "cardinal_to_ordin": 1044, "categor": 706, "categoricalmetadatacolumn": [280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "categoryresult": [777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787], "caveat": 230, "cca": 871, "central": 689, "chao1": 110, "chao1_ci": 111, "charact": 234, "class": [237, 706, 765, 1107], "classproperti": [1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061], "closur": 690, "clr": 691, "clr_inv": 692, "clustal": 222, "collaps": 903, "column": [220, 221, 234, 1101], "comment": [230, 234], "commun": 1, "compare_rfd": 978, "compare_subset": 979, "compare_tip_dist": 980, "comparison": 706, "complement": [399, 574], "composit": [685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 1103], "concat": [320, 400, 470, 521, 575, 633, 904], "condensed_form": 742, "confidence_bound": 882, "consensu": 83, "conserv": 84, "construct": 1107, "continu": 706, "cophylogenet": 763, "copi": [667, 719, 743, 905, 981], "corr": 872, "correspond": 855, "count": [1, 401, 471, 522, 576, 634, 982], "coverag": 106, "creat": 237, "create_cach": 983, "create_format": [262, 272], "custom": 1100, "data": [0, 225, 706, 906, 1103, 1104], "decor": 1107, "deepcopi": 984, "definit": [402, 472, 523, 577], "degap": [403, 473, 524, 578], "degener": [404, 474, 525, 579], "del_metadata": 907, "delet": 1059, "delimited_self": 908, "deprec": 0, "descending_branch_length": 985, "descriptive_equ": 909, "dev": 1099, "develop": [1100, 1106], "dirmult_ttest": 693, "dissimilar": 218, "dissimilaritymatrix": [707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729], "distanc": [405, 475, 526, 580, 635, 682, 683, 684, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 986, 1102, 1103], "distancematrix": [730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755], "divers": [1, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "divis": 236, "dmp": 236, "dna": [382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], "document": 1099, "domin": [106, 112], "doubl": 113, "drop": [307, 321], "drop_missing_valu": [289, 336, 354], "e_matrix": 873, "efficiencywarn": 1040, "emb": 223, "embed": [2, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 223], "embed_vec_to_datafram": 214, "embed_vec_to_dist": 215, "embed_vec_to_numpi": 216, "embed_vec_to_ordin": 217, "embl": 224, "empir": 881, "empti": 234, "enspi": 114, "estim": 881, "esty_ci": 115, "even": 106, "evolutionari": 763, "evolv": [763, 764], "exampl": [219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 706, 765, 855, 881, 1104], "example_t": 954, "except": [237, 706, 1100, 1105], "exist": 910, "expand_degener": [406, 476, 527, 581], "explan": 230, "extend": [85, 987], "f_matrix": 874, "faith_pd": 116, "fasta": 225, "fastq": 226, "featur": [224, 227], "fh": 224, "file": [224, 225, 227, 1100], "filter": [668, 720, 744, 911], "filter_column": 372, "filter_id": [290, 337, 355, 373], "find": 988, "find_al": 989, "find_by_func": 990, "find_by_id": 991, "find_dupl": 1062, "find_motif": [407, 477, 528, 582], "find_with_regex": [408, 478, 529, 583, 636], "firstdifferencegradientanova": [788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798], "fisher_alpha": 117, "footer": 235, "formal": 230, "format": [218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 1100], "frequenc": [409, 479, 530, 584, 637], "from": 1100, "from_adjac": 912, "from_bit": [13, 44], "from_cigar": 45, "from_coordin": [14, 46], "from_dict": [86, 669], "from_hdf5": 913, "from_indic": [15, 47], "from_iter": [670, 721, 745], "from_json": 914, "from_linkage_matrix": 992, "from_ncbi": 450, "from_path_seq": 87, "from_tabular": [16, 48], "from_taxdump": 993, "from_taxonomi": 994, "from_tsv": 915, "ft": 224, "function": [0, 147, 237, 276, 682, 685, 706, 763, 855, 881, 1106], "g": 235, "gap": [410, 480, 531, 585], "gap_frequ": 88, "gc": 235, "gc_content": [411, 586], "gc_frequenc": [412, 587], "genbank": 227, "gencod": 236, "gener": [224, 225, 233], "geneticcod": [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452], "get_alpha_diversity_metr": 152, "get_beta_diversity_metr": 153, "get_column": 374, "get_data_path": 1063, "get_id": [291, 338, 356, 375], "get_max_dist": 995, "get_miss": [292, 339, 357], "get_nam": 671, "get_read": 263, "get_sniff": 264, "get_table_dens": 916, "get_trajectori": [776, 798, 809, 842, 853], "get_valu": [293, 340, 358], "get_value_by_id": 917, "get_writ": 265, "getter": 1060, "gf": 235, "gff3": 228, "gini_index": 118, "global_pairwise_align": 98, "global_pairwise_align_nucleotid": 99, "global_pairwise_align_protein": 100, "goods_coverag": 119, "gr": 235, "gradient": [765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853], "gradientanova": [799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809], "gradientanovaresult": [810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820], "grammar": 230, "grammaredsequ": [453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503], "group_metadata": 918, "groupresult": [821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831], "ham": 683, "has_children": 996, "has_definit": [413, 481, 532, 588], "has_degener": [414, 482, 533, 589], "has_gap": [415, 483, 534, 590], "has_interval_metadata": [416, 484, 535, 591, 638], "has_metadata": [89, 417, 485, 536, 592, 639], "has_missing_valu": [294, 341, 359], "has_nondegener": [418, 486, 537, 593], "has_positional_metadata": [90, 419, 487, 538, 594, 640], "has_stop": 539, "head": 919, "header": [224, 225, 232, 235], "heip_": 120, "hill": 121, "hommola_cospeci": 764, "i": [237, 276], "id": 920, "ident": 672, "identifi": 234, "ilr": 694, "ilr_inv": 695, "index": [420, 488, 540, 595, 641, 673, 722, 746, 921], "index_tre": 997, "inform": 230, "initialize_st": 1076, "inlin": 230, "inner": 696, "input": [1, 1100], "insert": 998, "interv": [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 1101], "intervalmetadata": [308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326], "introduct": 1, "inv_simpson": 122, "invalidate_cach": 999, "io": [218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 1100], "ioregistri": [251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271], "is_empti": 922, "is_reverse_compl": [421, 596], "is_root": 1000, "is_tip": 1001, "is_zero_bas": 32, "isubsampl": 854, "iter": 923, "iter_contigu": [422, 489, 541, 597, 642], "iter_data": 924, "iter_km": [423, 490, 542, 598, 643], "iter_pairwis": 925, "iter_posit": 91, "join": 92, "kempton_taylor_q": 123, "keyword": 237, "kind": 1100, "kmer_dist": 684, "kmer_frequ": [424, 491, 543, 599, 644], "label": [229, 230], "lca": 1002, "lead": 234, "length": [230, 926], "level": 224, "levelord": 1003, "list_read_format": 266, "list_write_format": 267, "lladser_ci": 124, "lladser_p": 125, "load": 376, "local_pairwise_align": 101, "local_pairwise_align_nucleotid": 102, "local_pairwise_align_protein": 103, "local_pairwise_align_ssw": 104, "locat": 227, "lowercas": [425, 492, 544, 600, 645], "lowest_common_ancestor": 1004, "lsmat": 229, "majority_rul": 1038, "make_identity_substitution_matrix": 105, "mantel": 758, "margalef": 126, "match": [427, 494, 546, 602, 647], "match_frequ": [426, 493, 545, 601, 646], "matrix": [218, 229, 706, 1103], "max": 927, "mcintosh_": 128, "mcintosh_d": 127, "mean_and_std": 875, "measur": [106, 147], "menhinick": 129, "merg": [322, 377, 928], "metadata": [234, 235, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 929, 1101], "metadata_to_datafram": 930, "metadatacolumn": [327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344], "method": [763, 855, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1103], "metric": [1, 106, 682], "michaelis_menten_fit": 130, "min": 931, "miscellan": 1106, "mismatch": [429, 496, 548, 604, 649], "mismatch_frequ": [428, 495, 547, 603, 648], "monkey_patch": 268, "multi_replac": 697, "multidimension": 855, "multipl": [232, 235], "multiplicative_replac": 698, "multivari": 1103, "name": 236, "neighbor": 1005, "new": 237, "newick": 230, "nj": 1039, "node": [230, 236], "non_tip": 1006, "nondegener": [430, 497, 549, 605], "nonzero": 932, "nonzero_count": 933, "norm": 934, "number": 234, "numericmetadatacolumn": [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362], "o": [237, 276], "observed_featur": 131, "observed_node_count": 1007, "observed_otu": 132, "onli": 233, "open": 277, "open_fil": [278, 279], "oper": 1105, "optim": 0, "ordin": [231, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 1103], "ordinationresult": [856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869], "origin": 227, "osd": 133, "other": 1103, "output": 1100, "pa": 935, "pairalignpath": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "paired_subsampl": 883, "pairwise_vlr": 699, "paramet": [220, 222, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236], "partial_beta_divers": 154, "partit": 936, "pcoa": 876, "pcoa_biplot": 877, "permanova": 759, "permdisp": 760, "permut": 747, "perturb": 700, "perturb_inv": 701, "phydiv": 134, "phylip": 232, "phylogenet": 1105, "pielou_": 135, "plot": [674, 723, 748, 866], "pop": 1008, "postord": 1009, "power": [702, 881, 882, 883, 884, 885], "pre_and_postord": 1010, "preorder": 1011, "product": 224, "protein": [504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556], "proteinembed": [166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178], "proteinvector": [179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "prune": 1012, "pwmantel": 761, "qseq": 233, "qual": 225, "qualiti": 226, "queri": 323, "randdm": 762, "rankdata": 937, "rda": 878, "read": [93, 177, 190, 224, 225, 227, 269, 273, 324, 378, 431, 498, 550, 606, 650, 675, 724, 749, 867, 938, 1013, 1100], "reader": [225, 227, 228, 248], "reassign_index": 94, "recommend": 234, "reconstruct": 1105, "reduc": 939, "redundant_form": [676, 725, 750], "refer": [106, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 232, 233, 235, 236, 685, 706, 855], "registri": [237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "remov": 1014, "remove_delet": 1015, "remove_empti": 940, "renam": 868, "renyi": 136, "replac": [432, 499, 551, 607, 651], "representationwarn": 1041, "requir": [234, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098], "reserv": 237, "result": [231, 855], "reverse_compl": [433, 608], "reverse_transcrib": 609, "rich": 106, "rna": [557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615], "robbin": 137, "root": 1016, "root_at": 1017, "root_at_midpoint": 1018, "root_by_outgroup": 1019, "row": 234, "rule": 230, "safe_md5": 1064, "sampl": 1101, "samplemetadata": [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381], "save": [295, 342, 360, 379], "sbp_basi": 703, "scale": [855, 879], "scikit": [237, 1099, 1100], "score": 226, "section": [222, 224, 227, 232], "sequenc": [0, 225, 232, 235, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 1102], "sequenceembed": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "sequencevector": [203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "set_zero_bas": 33, "setter": 1061, "shannon": 138, "shear": 1020, "shuffl": 1021, "sibl": 1022, "simpl": 218, "simpson": 139, "simpson_": 141, "simpson_d": 140, "singl": 142, "skbio": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107], "slow": 0, "sniff": [270, 274], "sniffer": 249, "sob": 143, "sort": [95, 325, 941], "sort_ord": 942, "specif": [218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236], "specifi": 1, "sq": 224, "squar": 229, "stat": [685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 1103], "statist": [685, 706, 763, 1103], "stockholm": 235, "stop": 552, "string": 227, "stripedsmithwaterman": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], "strong": 144, "structur": [0, 706, 1105], "subsampl": [943, 1103], "subsample_count": 886, "subsample_paired_pow": 884, "subsample_pow": 885, "subset": [1023, 1024], "substitutionmatrix": [654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681], "subtre": 1025, "sum": 944, "support": [218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 1100], "svd_rank": 880, "symbol": 230, "tabl": [887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 1104], "tabularmsa": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 225], "taxdump": 236, "test": 1106, "tip": 1027, "tip_tip_dist": 1026, "to_anndata": 945, "to_arrai": 1028, "to_bit": [17, 49], "to_cigar": 50, "to_coordin": [18, 51], "to_data_fram": [677, 726, 751], "to_datafram": [296, 343, 361, 380, 946], "to_definit": [434, 500, 553, 610], "to_dict": [96, 678], "to_fil": [787, 820, 831], "to_hdf5": 947, "to_indic": [19, 52, 435, 501, 554, 611, 652], "to_json": 948, "to_regex": [436, 502, 555, 612], "to_seri": [297, 344, 362, 752], "to_taxonomi": 1029, "to_tsv": 949, "trail": 234, "trajectorygradientanova": [832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842], "transcrib": 437, "transform": 950, "translat": [438, 451, 613], "translate_six_fram": [439, 452, 614], "transpos": [679, 727, 753, 951], "travers": 1030, "tree": [955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1105], "tree_basi": 704, "treenod": [955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "tsalli": 145, "tutori": [0, 1, 1100, 1102, 1105, 1107], "type": [2, 220, 221, 234, 1102], "unpack": 1031, "unpack_by_func": 1032, "unroot": 1033, "unrooted_copi": 1034, "unrooted_deepcopi": 1035, "unrooted_mov": 1036, "unweighted_unifrac": 148, "update_id": 952, "us": [0, 224, 1100], "util": [2, 276, 277, 278, 279, 855, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1102, 1105, 1106], "valid": [1, 234], "variabl": 706, "variant": 226, "vector": [1, 2], "vlr": 705, "warn": [1100, 1106], "weighted_unifrac": 149, "what": 1100, "whitespac": [230, 234], "windowdifferencegradientanova": [843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853], "within": [680, 728, 754], "workflow": [1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1107], "write": [97, 178, 191, 225, 227, 271, 275, 326, 381, 440, 503, 556, 615, 653, 681, 729, 755, 869, 953, 1037, 1100], "writer": [225, 228, 250]}})