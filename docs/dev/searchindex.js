Search.setIndex({"docnames": ["alignment", "diversity", "generated/skbio.alignment.AlignmentStructure", "generated/skbio.alignment.AlignmentStructure.__eq__", "generated/skbio.alignment.AlignmentStructure.__ge__", "generated/skbio.alignment.AlignmentStructure.__getitem__", "generated/skbio.alignment.AlignmentStructure.__getstate__", "generated/skbio.alignment.AlignmentStructure.__gt__", "generated/skbio.alignment.AlignmentStructure.__hash__", "generated/skbio.alignment.AlignmentStructure.__le__", "generated/skbio.alignment.AlignmentStructure.__lt__", "generated/skbio.alignment.AlignmentStructure.__ne__", "generated/skbio.alignment.AlignmentStructure.__setstate__", "generated/skbio.alignment.AlignmentStructure.__str__", "generated/skbio.alignment.AlignmentStructure.is_zero_based", "generated/skbio.alignment.AlignmentStructure.set_zero_based", "generated/skbio.alignment.StripedSmithWaterman", "generated/skbio.alignment.StripedSmithWaterman.__call__", "generated/skbio.alignment.StripedSmithWaterman.__eq__", "generated/skbio.alignment.StripedSmithWaterman.__ge__", "generated/skbio.alignment.StripedSmithWaterman.__getstate__", "generated/skbio.alignment.StripedSmithWaterman.__gt__", "generated/skbio.alignment.StripedSmithWaterman.__hash__", "generated/skbio.alignment.StripedSmithWaterman.__le__", "generated/skbio.alignment.StripedSmithWaterman.__lt__", "generated/skbio.alignment.StripedSmithWaterman.__ne__", "generated/skbio.alignment.StripedSmithWaterman.__setstate__", "generated/skbio.alignment.StripedSmithWaterman.__str__", "generated/skbio.alignment.TabularMSA", "generated/skbio.alignment.TabularMSA.__bool__", "generated/skbio.alignment.TabularMSA.__contains__", "generated/skbio.alignment.TabularMSA.__copy__", "generated/skbio.alignment.TabularMSA.__deepcopy__", "generated/skbio.alignment.TabularMSA.__eq__", "generated/skbio.alignment.TabularMSA.__ge__", "generated/skbio.alignment.TabularMSA.__getitem__", "generated/skbio.alignment.TabularMSA.__getstate__", "generated/skbio.alignment.TabularMSA.__gt__", "generated/skbio.alignment.TabularMSA.__iter__", "generated/skbio.alignment.TabularMSA.__le__", "generated/skbio.alignment.TabularMSA.__len__", "generated/skbio.alignment.TabularMSA.__lt__", "generated/skbio.alignment.TabularMSA.__ne__", "generated/skbio.alignment.TabularMSA.__reversed__", "generated/skbio.alignment.TabularMSA.__str__", "generated/skbio.alignment.TabularMSA.append", "generated/skbio.alignment.TabularMSA.consensus", "generated/skbio.alignment.TabularMSA.conservation", "generated/skbio.alignment.TabularMSA.extend", "generated/skbio.alignment.TabularMSA.from_dict", "generated/skbio.alignment.TabularMSA.gap_frequencies", "generated/skbio.alignment.TabularMSA.has_metadata", "generated/skbio.alignment.TabularMSA.has_positional_metadata", "generated/skbio.alignment.TabularMSA.iter_positions", "generated/skbio.alignment.TabularMSA.join", "generated/skbio.alignment.TabularMSA.read", "generated/skbio.alignment.TabularMSA.reassign_index", "generated/skbio.alignment.TabularMSA.sort", "generated/skbio.alignment.TabularMSA.to_dict", "generated/skbio.alignment.TabularMSA.write", "generated/skbio.alignment.global_pairwise_align", "generated/skbio.alignment.global_pairwise_align_nucleotide", "generated/skbio.alignment.global_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align", "generated/skbio.alignment.local_pairwise_align_nucleotide", "generated/skbio.alignment.local_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align_ssw", "generated/skbio.alignment.make_identity_substitution_matrix", "generated/skbio.diversity.alpha", "generated/skbio.diversity.alpha.ace", "generated/skbio.diversity.alpha.berger_parker_d", "generated/skbio.diversity.alpha.brillouin_d", "generated/skbio.diversity.alpha.chao1", "generated/skbio.diversity.alpha.chao1_ci", "generated/skbio.diversity.alpha.dominance", "generated/skbio.diversity.alpha.doubles", "generated/skbio.diversity.alpha.enspie", "generated/skbio.diversity.alpha.esty_ci", "generated/skbio.diversity.alpha.faith_pd", "generated/skbio.diversity.alpha.fisher_alpha", "generated/skbio.diversity.alpha.gini_index", "generated/skbio.diversity.alpha.goods_coverage", "generated/skbio.diversity.alpha.heip_e", "generated/skbio.diversity.alpha.kempton_taylor_q", "generated/skbio.diversity.alpha.lladser_ci", "generated/skbio.diversity.alpha.lladser_pe", "generated/skbio.diversity.alpha.margalef", "generated/skbio.diversity.alpha.mcintosh_d", "generated/skbio.diversity.alpha.mcintosh_e", "generated/skbio.diversity.alpha.menhinick", "generated/skbio.diversity.alpha.michaelis_menten_fit", "generated/skbio.diversity.alpha.observed_features", "generated/skbio.diversity.alpha.observed_otus", "generated/skbio.diversity.alpha.osd", "generated/skbio.diversity.alpha.phydiv", "generated/skbio.diversity.alpha.pielou_e", "generated/skbio.diversity.alpha.robbins", "generated/skbio.diversity.alpha.shannon", "generated/skbio.diversity.alpha.simpson", "generated/skbio.diversity.alpha.simpson_e", "generated/skbio.diversity.alpha.singles", "generated/skbio.diversity.alpha.sobs", "generated/skbio.diversity.alpha.strong", "generated/skbio.diversity.alpha_diversity", "generated/skbio.diversity.beta", "generated/skbio.diversity.beta.unweighted_unifrac", "generated/skbio.diversity.beta.weighted_unifrac", "generated/skbio.diversity.beta_diversity", "generated/skbio.diversity.block_beta_diversity", "generated/skbio.diversity.get_alpha_diversity_metrics", "generated/skbio.diversity.get_beta_diversity_metrics", "generated/skbio.diversity.partial_beta_diversity", "generated/skbio.io.ArgumentOverrideWarning", "generated/skbio.io.BLAST7FormatError", "generated/skbio.io.ClustalFormatError", "generated/skbio.io.EMBLFormatError", "generated/skbio.io.FASTAFormatError", "generated/skbio.io.FASTQFormatError", "generated/skbio.io.FileFormatError", "generated/skbio.io.FormatIdentificationWarning", "generated/skbio.io.GFF3FormatError", "generated/skbio.io.GenBankFormatError", "generated/skbio.io.IOSourceError", "generated/skbio.io.LSMatFormatError", "generated/skbio.io.NewickFormatError", "generated/skbio.io.OrdinationFormatError", "generated/skbio.io.PhylipFormatError", "generated/skbio.io.QSeqFormatError", "generated/skbio.io.QUALFormatError", "generated/skbio.io.StockholmFormatError", "generated/skbio.io.UnrecognizedFormatError", "generated/skbio.io.format.binary_dm", "generated/skbio.io.format.blast6", "generated/skbio.io.format.blast7", "generated/skbio.io.format.clustal", "generated/skbio.io.format.embl", "generated/skbio.io.format.fasta", "generated/skbio.io.format.fastq", "generated/skbio.io.format.genbank", "generated/skbio.io.format.gff3", "generated/skbio.io.format.lsmat", "generated/skbio.io.format.newick", "generated/skbio.io.format.ordination", "generated/skbio.io.format.phylip", "generated/skbio.io.format.qseq", "generated/skbio.io.format.sample_metadata", "generated/skbio.io.format.stockholm", "generated/skbio.io.format.taxdump", "generated/skbio.io.registry", "generated/skbio.io.registry.DuplicateRegistrationError", "generated/skbio.io.registry.Format", "generated/skbio.io.registry.Format.__eq__", "generated/skbio.io.registry.Format.__ge__", "generated/skbio.io.registry.Format.__getstate__", "generated/skbio.io.registry.Format.__gt__", "generated/skbio.io.registry.Format.__hash__", "generated/skbio.io.registry.Format.__le__", "generated/skbio.io.registry.Format.__lt__", "generated/skbio.io.registry.Format.__ne__", "generated/skbio.io.registry.Format.__str__", "generated/skbio.io.registry.Format.reader", "generated/skbio.io.registry.Format.sniffer", "generated/skbio.io.registry.Format.writer", "generated/skbio.io.registry.IORegistry", "generated/skbio.io.registry.IORegistry.__eq__", "generated/skbio.io.registry.IORegistry.__ge__", "generated/skbio.io.registry.IORegistry.__getstate__", "generated/skbio.io.registry.IORegistry.__gt__", "generated/skbio.io.registry.IORegistry.__hash__", "generated/skbio.io.registry.IORegistry.__le__", "generated/skbio.io.registry.IORegistry.__lt__", "generated/skbio.io.registry.IORegistry.__ne__", "generated/skbio.io.registry.IORegistry.__str__", "generated/skbio.io.registry.IORegistry.add_format", "generated/skbio.io.registry.IORegistry.create_format", "generated/skbio.io.registry.IORegistry.get_reader", "generated/skbio.io.registry.IORegistry.get_sniffer", "generated/skbio.io.registry.IORegistry.get_writer", "generated/skbio.io.registry.IORegistry.list_read_formats", "generated/skbio.io.registry.IORegistry.list_write_formats", "generated/skbio.io.registry.IORegistry.monkey_patch", "generated/skbio.io.registry.IORegistry.read", "generated/skbio.io.registry.IORegistry.sniff", "generated/skbio.io.registry.IORegistry.write", "generated/skbio.io.registry.InvalidRegistrationError", "generated/skbio.io.registry.create_format", "generated/skbio.io.registry.read", "generated/skbio.io.registry.sniff", "generated/skbio.io.registry.write", "generated/skbio.io.util", "generated/skbio.io.util.open", "generated/skbio.io.util.open_file", "generated/skbio.io.util.open_files", "generated/skbio.metadata.Interval", "generated/skbio.metadata.Interval.__eq__", "generated/skbio.metadata.Interval.__ge__", "generated/skbio.metadata.Interval.__getstate__", "generated/skbio.metadata.Interval.__gt__", "generated/skbio.metadata.Interval.__le__", "generated/skbio.metadata.Interval.__lt__", "generated/skbio.metadata.Interval.__ne__", "generated/skbio.metadata.Interval.__str__", "generated/skbio.metadata.Interval.drop", "generated/skbio.metadata.IntervalMetadata", "generated/skbio.metadata.IntervalMetadata.__copy__", "generated/skbio.metadata.IntervalMetadata.__deepcopy__", "generated/skbio.metadata.IntervalMetadata.__eq__", "generated/skbio.metadata.IntervalMetadata.__ge__", "generated/skbio.metadata.IntervalMetadata.__getstate__", "generated/skbio.metadata.IntervalMetadata.__gt__", "generated/skbio.metadata.IntervalMetadata.__le__", "generated/skbio.metadata.IntervalMetadata.__lt__", "generated/skbio.metadata.IntervalMetadata.__ne__", "generated/skbio.metadata.IntervalMetadata.__str__", "generated/skbio.metadata.IntervalMetadata.add", "generated/skbio.metadata.IntervalMetadata.concat", "generated/skbio.metadata.IntervalMetadata.drop", "generated/skbio.metadata.IntervalMetadata.merge", "generated/skbio.metadata.IntervalMetadata.query", "generated/skbio.metadata.IntervalMetadata.read", "generated/skbio.metadata.IntervalMetadata.sort", "generated/skbio.metadata.IntervalMetadata.write", "generated/skbio.sequence.DNA", "generated/skbio.sequence.DNA.__bool__", "generated/skbio.sequence.DNA.__contains__", "generated/skbio.sequence.DNA.__copy__", "generated/skbio.sequence.DNA.__deepcopy__", "generated/skbio.sequence.DNA.__eq__", "generated/skbio.sequence.DNA.__ge__", "generated/skbio.sequence.DNA.__getitem__", "generated/skbio.sequence.DNA.__getstate__", "generated/skbio.sequence.DNA.__gt__", "generated/skbio.sequence.DNA.__iter__", "generated/skbio.sequence.DNA.__le__", "generated/skbio.sequence.DNA.__len__", "generated/skbio.sequence.DNA.__lt__", "generated/skbio.sequence.DNA.__ne__", "generated/skbio.sequence.DNA.__reversed__", "generated/skbio.sequence.DNA.__str__", "generated/skbio.sequence.DNA.complement", "generated/skbio.sequence.DNA.concat", "generated/skbio.sequence.DNA.count", "generated/skbio.sequence.DNA.definites", "generated/skbio.sequence.DNA.degap", "generated/skbio.sequence.DNA.degenerates", "generated/skbio.sequence.DNA.distance", "generated/skbio.sequence.DNA.expand_degenerates", "generated/skbio.sequence.DNA.find_motifs", "generated/skbio.sequence.DNA.find_with_regex", "generated/skbio.sequence.DNA.frequencies", "generated/skbio.sequence.DNA.gaps", "generated/skbio.sequence.DNA.gc_content", "generated/skbio.sequence.DNA.gc_frequency", "generated/skbio.sequence.DNA.has_definites", "generated/skbio.sequence.DNA.has_degenerates", "generated/skbio.sequence.DNA.has_gaps", "generated/skbio.sequence.DNA.has_interval_metadata", "generated/skbio.sequence.DNA.has_metadata", "generated/skbio.sequence.DNA.has_nondegenerates", "generated/skbio.sequence.DNA.has_positional_metadata", "generated/skbio.sequence.DNA.index", "generated/skbio.sequence.DNA.is_reverse_complement", "generated/skbio.sequence.DNA.iter_contiguous", "generated/skbio.sequence.DNA.iter_kmers", "generated/skbio.sequence.DNA.kmer_frequencies", "generated/skbio.sequence.DNA.lowercase", "generated/skbio.sequence.DNA.match_frequency", "generated/skbio.sequence.DNA.matches", "generated/skbio.sequence.DNA.mismatch_frequency", "generated/skbio.sequence.DNA.mismatches", "generated/skbio.sequence.DNA.nondegenerates", "generated/skbio.sequence.DNA.read", "generated/skbio.sequence.DNA.replace", "generated/skbio.sequence.DNA.reverse_complement", "generated/skbio.sequence.DNA.to_indices", "generated/skbio.sequence.DNA.to_regex", "generated/skbio.sequence.DNA.transcribe", "generated/skbio.sequence.DNA.translate", "generated/skbio.sequence.DNA.translate_six_frames", "generated/skbio.sequence.DNA.write", "generated/skbio.sequence.GeneticCode", "generated/skbio.sequence.GeneticCode.__eq__", "generated/skbio.sequence.GeneticCode.__ge__", "generated/skbio.sequence.GeneticCode.__getstate__", "generated/skbio.sequence.GeneticCode.__gt__", "generated/skbio.sequence.GeneticCode.__le__", "generated/skbio.sequence.GeneticCode.__lt__", "generated/skbio.sequence.GeneticCode.__ne__", "generated/skbio.sequence.GeneticCode.__str__", "generated/skbio.sequence.GeneticCode.from_ncbi", "generated/skbio.sequence.GeneticCode.translate", "generated/skbio.sequence.GeneticCode.translate_six_frames", "generated/skbio.sequence.GrammaredSequence", "generated/skbio.sequence.GrammaredSequence.__bool__", "generated/skbio.sequence.GrammaredSequence.__contains__", "generated/skbio.sequence.GrammaredSequence.__copy__", "generated/skbio.sequence.GrammaredSequence.__deepcopy__", "generated/skbio.sequence.GrammaredSequence.__eq__", "generated/skbio.sequence.GrammaredSequence.__ge__", "generated/skbio.sequence.GrammaredSequence.__getitem__", "generated/skbio.sequence.GrammaredSequence.__getstate__", "generated/skbio.sequence.GrammaredSequence.__gt__", "generated/skbio.sequence.GrammaredSequence.__iter__", "generated/skbio.sequence.GrammaredSequence.__le__", "generated/skbio.sequence.GrammaredSequence.__len__", "generated/skbio.sequence.GrammaredSequence.__lt__", "generated/skbio.sequence.GrammaredSequence.__ne__", "generated/skbio.sequence.GrammaredSequence.__reversed__", "generated/skbio.sequence.GrammaredSequence.__str__", "generated/skbio.sequence.GrammaredSequence.concat", "generated/skbio.sequence.GrammaredSequence.count", "generated/skbio.sequence.GrammaredSequence.definites", "generated/skbio.sequence.GrammaredSequence.degap", "generated/skbio.sequence.GrammaredSequence.degenerates", "generated/skbio.sequence.GrammaredSequence.distance", "generated/skbio.sequence.GrammaredSequence.expand_degenerates", "generated/skbio.sequence.GrammaredSequence.find_motifs", "generated/skbio.sequence.GrammaredSequence.find_with_regex", "generated/skbio.sequence.GrammaredSequence.frequencies", "generated/skbio.sequence.GrammaredSequence.gaps", "generated/skbio.sequence.GrammaredSequence.has_definites", "generated/skbio.sequence.GrammaredSequence.has_degenerates", "generated/skbio.sequence.GrammaredSequence.has_gaps", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata", "generated/skbio.sequence.GrammaredSequence.has_metadata", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata", "generated/skbio.sequence.GrammaredSequence.index", "generated/skbio.sequence.GrammaredSequence.iter_contiguous", "generated/skbio.sequence.GrammaredSequence.iter_kmers", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies", "generated/skbio.sequence.GrammaredSequence.lowercase", "generated/skbio.sequence.GrammaredSequence.match_frequency", "generated/skbio.sequence.GrammaredSequence.matches", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency", "generated/skbio.sequence.GrammaredSequence.mismatches", "generated/skbio.sequence.GrammaredSequence.nondegenerates", "generated/skbio.sequence.GrammaredSequence.read", "generated/skbio.sequence.GrammaredSequence.replace", "generated/skbio.sequence.GrammaredSequence.to_indices", "generated/skbio.sequence.GrammaredSequence.to_regex", "generated/skbio.sequence.GrammaredSequence.write", "generated/skbio.sequence.Protein", "generated/skbio.sequence.Protein.__bool__", "generated/skbio.sequence.Protein.__contains__", "generated/skbio.sequence.Protein.__copy__", "generated/skbio.sequence.Protein.__deepcopy__", "generated/skbio.sequence.Protein.__eq__", "generated/skbio.sequence.Protein.__ge__", "generated/skbio.sequence.Protein.__getitem__", "generated/skbio.sequence.Protein.__getstate__", "generated/skbio.sequence.Protein.__gt__", "generated/skbio.sequence.Protein.__iter__", "generated/skbio.sequence.Protein.__le__", "generated/skbio.sequence.Protein.__len__", "generated/skbio.sequence.Protein.__lt__", "generated/skbio.sequence.Protein.__ne__", "generated/skbio.sequence.Protein.__reversed__", "generated/skbio.sequence.Protein.__str__", "generated/skbio.sequence.Protein.concat", "generated/skbio.sequence.Protein.count", "generated/skbio.sequence.Protein.definites", "generated/skbio.sequence.Protein.degap", "generated/skbio.sequence.Protein.degenerates", "generated/skbio.sequence.Protein.distance", "generated/skbio.sequence.Protein.expand_degenerates", "generated/skbio.sequence.Protein.find_motifs", "generated/skbio.sequence.Protein.find_with_regex", "generated/skbio.sequence.Protein.frequencies", "generated/skbio.sequence.Protein.gaps", "generated/skbio.sequence.Protein.has_definites", "generated/skbio.sequence.Protein.has_degenerates", "generated/skbio.sequence.Protein.has_gaps", "generated/skbio.sequence.Protein.has_interval_metadata", "generated/skbio.sequence.Protein.has_metadata", "generated/skbio.sequence.Protein.has_nondegenerates", "generated/skbio.sequence.Protein.has_positional_metadata", "generated/skbio.sequence.Protein.has_stops", "generated/skbio.sequence.Protein.index", "generated/skbio.sequence.Protein.iter_contiguous", "generated/skbio.sequence.Protein.iter_kmers", "generated/skbio.sequence.Protein.kmer_frequencies", "generated/skbio.sequence.Protein.lowercase", "generated/skbio.sequence.Protein.match_frequency", "generated/skbio.sequence.Protein.matches", "generated/skbio.sequence.Protein.mismatch_frequency", "generated/skbio.sequence.Protein.mismatches", "generated/skbio.sequence.Protein.nondegenerates", "generated/skbio.sequence.Protein.read", "generated/skbio.sequence.Protein.replace", "generated/skbio.sequence.Protein.stops", "generated/skbio.sequence.Protein.to_indices", "generated/skbio.sequence.Protein.to_regex", "generated/skbio.sequence.Protein.write", "generated/skbio.sequence.RNA", "generated/skbio.sequence.RNA.__bool__", "generated/skbio.sequence.RNA.__contains__", "generated/skbio.sequence.RNA.__copy__", "generated/skbio.sequence.RNA.__deepcopy__", "generated/skbio.sequence.RNA.__eq__", "generated/skbio.sequence.RNA.__ge__", "generated/skbio.sequence.RNA.__getitem__", "generated/skbio.sequence.RNA.__getstate__", "generated/skbio.sequence.RNA.__gt__", "generated/skbio.sequence.RNA.__iter__", "generated/skbio.sequence.RNA.__le__", "generated/skbio.sequence.RNA.__len__", "generated/skbio.sequence.RNA.__lt__", "generated/skbio.sequence.RNA.__ne__", "generated/skbio.sequence.RNA.__reversed__", "generated/skbio.sequence.RNA.__str__", "generated/skbio.sequence.RNA.complement", "generated/skbio.sequence.RNA.concat", "generated/skbio.sequence.RNA.count", "generated/skbio.sequence.RNA.definites", "generated/skbio.sequence.RNA.degap", "generated/skbio.sequence.RNA.degenerates", "generated/skbio.sequence.RNA.distance", "generated/skbio.sequence.RNA.expand_degenerates", "generated/skbio.sequence.RNA.find_motifs", "generated/skbio.sequence.RNA.find_with_regex", "generated/skbio.sequence.RNA.frequencies", "generated/skbio.sequence.RNA.gaps", "generated/skbio.sequence.RNA.gc_content", "generated/skbio.sequence.RNA.gc_frequency", "generated/skbio.sequence.RNA.has_definites", "generated/skbio.sequence.RNA.has_degenerates", "generated/skbio.sequence.RNA.has_gaps", "generated/skbio.sequence.RNA.has_interval_metadata", "generated/skbio.sequence.RNA.has_metadata", "generated/skbio.sequence.RNA.has_nondegenerates", "generated/skbio.sequence.RNA.has_positional_metadata", "generated/skbio.sequence.RNA.index", "generated/skbio.sequence.RNA.is_reverse_complement", "generated/skbio.sequence.RNA.iter_contiguous", "generated/skbio.sequence.RNA.iter_kmers", "generated/skbio.sequence.RNA.kmer_frequencies", "generated/skbio.sequence.RNA.lowercase", "generated/skbio.sequence.RNA.match_frequency", "generated/skbio.sequence.RNA.matches", "generated/skbio.sequence.RNA.mismatch_frequency", "generated/skbio.sequence.RNA.mismatches", "generated/skbio.sequence.RNA.nondegenerates", "generated/skbio.sequence.RNA.read", "generated/skbio.sequence.RNA.replace", "generated/skbio.sequence.RNA.reverse_complement", "generated/skbio.sequence.RNA.reverse_transcribe", "generated/skbio.sequence.RNA.to_indices", "generated/skbio.sequence.RNA.to_regex", "generated/skbio.sequence.RNA.translate", "generated/skbio.sequence.RNA.translate_six_frames", "generated/skbio.sequence.RNA.write", "generated/skbio.sequence.Sequence", "generated/skbio.sequence.Sequence.__bool__", "generated/skbio.sequence.Sequence.__contains__", "generated/skbio.sequence.Sequence.__copy__", "generated/skbio.sequence.Sequence.__deepcopy__", "generated/skbio.sequence.Sequence.__eq__", "generated/skbio.sequence.Sequence.__ge__", "generated/skbio.sequence.Sequence.__getitem__", "generated/skbio.sequence.Sequence.__getstate__", "generated/skbio.sequence.Sequence.__gt__", "generated/skbio.sequence.Sequence.__iter__", "generated/skbio.sequence.Sequence.__le__", "generated/skbio.sequence.Sequence.__len__", "generated/skbio.sequence.Sequence.__lt__", "generated/skbio.sequence.Sequence.__ne__", "generated/skbio.sequence.Sequence.__reversed__", "generated/skbio.sequence.Sequence.__str__", "generated/skbio.sequence.Sequence.concat", "generated/skbio.sequence.Sequence.count", "generated/skbio.sequence.Sequence.distance", "generated/skbio.sequence.Sequence.find_with_regex", "generated/skbio.sequence.Sequence.frequencies", "generated/skbio.sequence.Sequence.has_interval_metadata", "generated/skbio.sequence.Sequence.has_metadata", "generated/skbio.sequence.Sequence.has_positional_metadata", "generated/skbio.sequence.Sequence.index", "generated/skbio.sequence.Sequence.iter_contiguous", "generated/skbio.sequence.Sequence.iter_kmers", "generated/skbio.sequence.Sequence.kmer_frequencies", "generated/skbio.sequence.Sequence.lowercase", "generated/skbio.sequence.Sequence.match_frequency", "generated/skbio.sequence.Sequence.matches", "generated/skbio.sequence.Sequence.mismatch_frequency", "generated/skbio.sequence.Sequence.mismatches", "generated/skbio.sequence.Sequence.read", "generated/skbio.sequence.Sequence.replace", "generated/skbio.sequence.Sequence.to_indices", "generated/skbio.sequence.Sequence.write", "generated/skbio.sequence.SubstitutionMatrix", "generated/skbio.sequence.SubstitutionMatrix.__contains__", "generated/skbio.sequence.SubstitutionMatrix.__eq__", "generated/skbio.sequence.SubstitutionMatrix.__ge__", "generated/skbio.sequence.SubstitutionMatrix.__getitem__", "generated/skbio.sequence.SubstitutionMatrix.__getstate__", "generated/skbio.sequence.SubstitutionMatrix.__gt__", "generated/skbio.sequence.SubstitutionMatrix.__le__", "generated/skbio.sequence.SubstitutionMatrix.__lt__", "generated/skbio.sequence.SubstitutionMatrix.__ne__", "generated/skbio.sequence.SubstitutionMatrix.__str__", "generated/skbio.sequence.SubstitutionMatrix.between", "generated/skbio.sequence.SubstitutionMatrix.by_name", "generated/skbio.sequence.SubstitutionMatrix.copy", "generated/skbio.sequence.SubstitutionMatrix.filter", "generated/skbio.sequence.SubstitutionMatrix.from_dict", "generated/skbio.sequence.SubstitutionMatrix.from_iterable", "generated/skbio.sequence.SubstitutionMatrix.get_names", "generated/skbio.sequence.SubstitutionMatrix.identity", "generated/skbio.sequence.SubstitutionMatrix.index", "generated/skbio.sequence.SubstitutionMatrix.plot", "generated/skbio.sequence.SubstitutionMatrix.read", "generated/skbio.sequence.SubstitutionMatrix.redundant_form", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame", "generated/skbio.sequence.SubstitutionMatrix.to_dict", "generated/skbio.sequence.SubstitutionMatrix.transpose", "generated/skbio.sequence.SubstitutionMatrix.within", "generated/skbio.sequence.SubstitutionMatrix.write", "generated/skbio.sequence.distance", "generated/skbio.sequence.distance.hamming", "generated/skbio.sequence.distance.kmer_distance", "generated/skbio.stats.composition", "generated/skbio.stats.composition.alr", "generated/skbio.stats.composition.alr_inv", "generated/skbio.stats.composition.ancom", "generated/skbio.stats.composition.centralize", "generated/skbio.stats.composition.closure", "generated/skbio.stats.composition.clr", "generated/skbio.stats.composition.clr_inv", "generated/skbio.stats.composition.ilr", "generated/skbio.stats.composition.ilr_inv", "generated/skbio.stats.composition.inner", "generated/skbio.stats.composition.multiplicative_replacement", "generated/skbio.stats.composition.pairwise_vlr", "generated/skbio.stats.composition.perturb", "generated/skbio.stats.composition.perturb_inv", "generated/skbio.stats.composition.power", "generated/skbio.stats.composition.sbp_basis", "generated/skbio.stats.composition.tree_basis", "generated/skbio.stats.composition.vlr", "generated/skbio.stats.distance", "generated/skbio.stats.distance.DissimilarityMatrix", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__", "generated/skbio.stats.distance.DissimilarityMatrix.__le__", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__", "generated/skbio.stats.distance.DissimilarityMatrix.__str__", "generated/skbio.stats.distance.DissimilarityMatrix.between", "generated/skbio.stats.distance.DissimilarityMatrix.copy", "generated/skbio.stats.distance.DissimilarityMatrix.filter", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable", "generated/skbio.stats.distance.DissimilarityMatrix.index", "generated/skbio.stats.distance.DissimilarityMatrix.plot", "generated/skbio.stats.distance.DissimilarityMatrix.read", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame", "generated/skbio.stats.distance.DissimilarityMatrix.transpose", "generated/skbio.stats.distance.DissimilarityMatrix.within", "generated/skbio.stats.distance.DissimilarityMatrix.write", "generated/skbio.stats.distance.DissimilarityMatrixError", "generated/skbio.stats.distance.DistanceMatrix", "generated/skbio.stats.distance.DistanceMatrix.__contains__", "generated/skbio.stats.distance.DistanceMatrix.__eq__", "generated/skbio.stats.distance.DistanceMatrix.__ge__", "generated/skbio.stats.distance.DistanceMatrix.__getitem__", "generated/skbio.stats.distance.DistanceMatrix.__getstate__", "generated/skbio.stats.distance.DistanceMatrix.__gt__", "generated/skbio.stats.distance.DistanceMatrix.__le__", "generated/skbio.stats.distance.DistanceMatrix.__lt__", "generated/skbio.stats.distance.DistanceMatrix.__ne__", "generated/skbio.stats.distance.DistanceMatrix.__str__", "generated/skbio.stats.distance.DistanceMatrix.between", "generated/skbio.stats.distance.DistanceMatrix.condensed_form", "generated/skbio.stats.distance.DistanceMatrix.copy", "generated/skbio.stats.distance.DistanceMatrix.filter", "generated/skbio.stats.distance.DistanceMatrix.from_iterable", "generated/skbio.stats.distance.DistanceMatrix.index", "generated/skbio.stats.distance.DistanceMatrix.permute", "generated/skbio.stats.distance.DistanceMatrix.plot", "generated/skbio.stats.distance.DistanceMatrix.read", "generated/skbio.stats.distance.DistanceMatrix.redundant_form", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame", "generated/skbio.stats.distance.DistanceMatrix.to_series", "generated/skbio.stats.distance.DistanceMatrix.transpose", "generated/skbio.stats.distance.DistanceMatrix.within", "generated/skbio.stats.distance.DistanceMatrix.write", "generated/skbio.stats.distance.DistanceMatrixError", "generated/skbio.stats.distance.MissingIDError", "generated/skbio.stats.distance.anosim", "generated/skbio.stats.distance.bioenv", "generated/skbio.stats.distance.mantel", "generated/skbio.stats.distance.permanova", "generated/skbio.stats.distance.permdisp", "generated/skbio.stats.distance.pwmantel", "generated/skbio.stats.distance.randdm", "generated/skbio.stats.evolve", "generated/skbio.stats.evolve.hommola_cospeciation", "generated/skbio.stats.gradient", "generated/skbio.stats.gradient.AverageGradientANOVA", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.CategoryResults", "generated/skbio.stats.gradient.CategoryResults.__eq__", "generated/skbio.stats.gradient.CategoryResults.__ge__", "generated/skbio.stats.gradient.CategoryResults.__getstate__", "generated/skbio.stats.gradient.CategoryResults.__gt__", "generated/skbio.stats.gradient.CategoryResults.__hash__", "generated/skbio.stats.gradient.CategoryResults.__le__", "generated/skbio.stats.gradient.CategoryResults.__lt__", "generated/skbio.stats.gradient.CategoryResults.__ne__", "generated/skbio.stats.gradient.CategoryResults.__str__", "generated/skbio.stats.gradient.CategoryResults.to_files", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVA", "generated/skbio.stats.gradient.GradientANOVA.__eq__", "generated/skbio.stats.gradient.GradientANOVA.__ge__", "generated/skbio.stats.gradient.GradientANOVA.__getstate__", "generated/skbio.stats.gradient.GradientANOVA.__gt__", "generated/skbio.stats.gradient.GradientANOVA.__hash__", "generated/skbio.stats.gradient.GradientANOVA.__le__", "generated/skbio.stats.gradient.GradientANOVA.__lt__", "generated/skbio.stats.gradient.GradientANOVA.__ne__", "generated/skbio.stats.gradient.GradientANOVA.__str__", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVAResults", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__", "generated/skbio.stats.gradient.GradientANOVAResults.__le__", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__", "generated/skbio.stats.gradient.GradientANOVAResults.__str__", "generated/skbio.stats.gradient.GradientANOVAResults.to_files", "generated/skbio.stats.gradient.GroupResults", "generated/skbio.stats.gradient.GroupResults.__eq__", "generated/skbio.stats.gradient.GroupResults.__ge__", "generated/skbio.stats.gradient.GroupResults.__getstate__", "generated/skbio.stats.gradient.GroupResults.__gt__", "generated/skbio.stats.gradient.GroupResults.__hash__", "generated/skbio.stats.gradient.GroupResults.__le__", "generated/skbio.stats.gradient.GroupResults.__lt__", "generated/skbio.stats.gradient.GroupResults.__ne__", "generated/skbio.stats.gradient.GroupResults.__str__", "generated/skbio.stats.gradient.GroupResults.to_files", "generated/skbio.stats.gradient.TrajectoryGradientANOVA", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.isubsample", "generated/skbio.stats.ordination", "generated/skbio.stats.ordination.OrdinationResults", "generated/skbio.stats.ordination.OrdinationResults.__eq__", "generated/skbio.stats.ordination.OrdinationResults.__ge__", "generated/skbio.stats.ordination.OrdinationResults.__getstate__", "generated/skbio.stats.ordination.OrdinationResults.__gt__", "generated/skbio.stats.ordination.OrdinationResults.__hash__", "generated/skbio.stats.ordination.OrdinationResults.__le__", "generated/skbio.stats.ordination.OrdinationResults.__lt__", "generated/skbio.stats.ordination.OrdinationResults.__ne__", "generated/skbio.stats.ordination.OrdinationResults.__str__", "generated/skbio.stats.ordination.OrdinationResults.plot", "generated/skbio.stats.ordination.OrdinationResults.read", "generated/skbio.stats.ordination.OrdinationResults.write", "generated/skbio.stats.ordination.ca", "generated/skbio.stats.ordination.cca", "generated/skbio.stats.ordination.corr", "generated/skbio.stats.ordination.e_matrix", "generated/skbio.stats.ordination.f_matrix", "generated/skbio.stats.ordination.mean_and_std", "generated/skbio.stats.ordination.pcoa", "generated/skbio.stats.ordination.pcoa_biplot", "generated/skbio.stats.ordination.rda", "generated/skbio.stats.ordination.scale", "generated/skbio.stats.ordination.svd_rank", "generated/skbio.stats.power", "generated/skbio.stats.power.confidence_bound", "generated/skbio.stats.power.paired_subsamples", "generated/skbio.stats.power.subsample_paired_power", "generated/skbio.stats.power.subsample_power", "generated/skbio.stats.subsample_counts", "generated/skbio.tree.DuplicateNodeError", "generated/skbio.tree.MissingNodeError", "generated/skbio.tree.NoLengthError", "generated/skbio.tree.NoParentError", "generated/skbio.tree.TreeError", "generated/skbio.tree.TreeNode", "generated/skbio.tree.TreeNode.__copy__", "generated/skbio.tree.TreeNode.__deepcopy__", "generated/skbio.tree.TreeNode.__eq__", "generated/skbio.tree.TreeNode.__ge__", "generated/skbio.tree.TreeNode.__getitem__", "generated/skbio.tree.TreeNode.__getstate__", "generated/skbio.tree.TreeNode.__gt__", "generated/skbio.tree.TreeNode.__hash__", "generated/skbio.tree.TreeNode.__iter__", "generated/skbio.tree.TreeNode.__le__", "generated/skbio.tree.TreeNode.__len__", "generated/skbio.tree.TreeNode.__lt__", "generated/skbio.tree.TreeNode.__ne__", "generated/skbio.tree.TreeNode.__str__", "generated/skbio.tree.TreeNode.accumulate_to_ancestor", "generated/skbio.tree.TreeNode.ancestors", "generated/skbio.tree.TreeNode.append", "generated/skbio.tree.TreeNode.ascii_art", "generated/skbio.tree.TreeNode.assign_ids", "generated/skbio.tree.TreeNode.assign_supports", "generated/skbio.tree.TreeNode.bifurcate", "generated/skbio.tree.TreeNode.cache_attr", "generated/skbio.tree.TreeNode.compare_rfd", "generated/skbio.tree.TreeNode.compare_subsets", "generated/skbio.tree.TreeNode.compare_tip_distances", "generated/skbio.tree.TreeNode.copy", "generated/skbio.tree.TreeNode.count", "generated/skbio.tree.TreeNode.create_caches", "generated/skbio.tree.TreeNode.deepcopy", "generated/skbio.tree.TreeNode.descending_branch_length", "generated/skbio.tree.TreeNode.distance", "generated/skbio.tree.TreeNode.extend", "generated/skbio.tree.TreeNode.find", "generated/skbio.tree.TreeNode.find_all", "generated/skbio.tree.TreeNode.find_by_func", "generated/skbio.tree.TreeNode.find_by_id", "generated/skbio.tree.TreeNode.from_linkage_matrix", "generated/skbio.tree.TreeNode.from_taxdump", "generated/skbio.tree.TreeNode.from_taxonomy", "generated/skbio.tree.TreeNode.get_max_distance", "generated/skbio.tree.TreeNode.has_children", "generated/skbio.tree.TreeNode.index_tree", "generated/skbio.tree.TreeNode.invalidate_caches", "generated/skbio.tree.TreeNode.is_root", "generated/skbio.tree.TreeNode.is_tip", "generated/skbio.tree.TreeNode.lca", "generated/skbio.tree.TreeNode.levelorder", "generated/skbio.tree.TreeNode.lowest_common_ancestor", "generated/skbio.tree.TreeNode.neighbors", "generated/skbio.tree.TreeNode.non_tips", "generated/skbio.tree.TreeNode.observed_node_counts", "generated/skbio.tree.TreeNode.pop", "generated/skbio.tree.TreeNode.postorder", "generated/skbio.tree.TreeNode.pre_and_postorder", "generated/skbio.tree.TreeNode.preorder", "generated/skbio.tree.TreeNode.prune", "generated/skbio.tree.TreeNode.read", "generated/skbio.tree.TreeNode.remove", "generated/skbio.tree.TreeNode.remove_deleted", "generated/skbio.tree.TreeNode.root", "generated/skbio.tree.TreeNode.root_at", "generated/skbio.tree.TreeNode.root_at_midpoint", "generated/skbio.tree.TreeNode.shear", "generated/skbio.tree.TreeNode.shuffle", "generated/skbio.tree.TreeNode.siblings", "generated/skbio.tree.TreeNode.subset", "generated/skbio.tree.TreeNode.subsets", "generated/skbio.tree.TreeNode.subtree", "generated/skbio.tree.TreeNode.tip_tip_distances", "generated/skbio.tree.TreeNode.tips", "generated/skbio.tree.TreeNode.to_array", "generated/skbio.tree.TreeNode.to_taxonomy", "generated/skbio.tree.TreeNode.traverse", "generated/skbio.tree.TreeNode.unpack", "generated/skbio.tree.TreeNode.unpack_by_func", "generated/skbio.tree.TreeNode.unrooted_copy", "generated/skbio.tree.TreeNode.unrooted_deepcopy", "generated/skbio.tree.TreeNode.write", "generated/skbio.tree.majority_rule", "generated/skbio.tree.nj", "generated/skbio.util.EfficiencyWarning", "generated/skbio.util.RepresentationWarning", "generated/skbio.util.assert_data_frame_almost_equal", "generated/skbio.util.assert_ordination_results_equal", "generated/skbio.util.cardinal_to_ordinal", "generated/skbio.util.classproperty", "generated/skbio.util.classproperty.__delete__", "generated/skbio.util.classproperty.__eq__", "generated/skbio.util.classproperty.__ge__", "generated/skbio.util.classproperty.__get__", "generated/skbio.util.classproperty.__getstate__", "generated/skbio.util.classproperty.__gt__", "generated/skbio.util.classproperty.__hash__", "generated/skbio.util.classproperty.__le__", "generated/skbio.util.classproperty.__lt__", "generated/skbio.util.classproperty.__ne__", "generated/skbio.util.classproperty.__set__", "generated/skbio.util.classproperty.__set_name__", "generated/skbio.util.classproperty.__str__", "generated/skbio.util.classproperty.deleter", "generated/skbio.util.classproperty.getter", "generated/skbio.util.classproperty.setter", "generated/skbio.util.find_duplicates", "generated/skbio.util.get_data_path", "generated/skbio.util.safe_md5", "generated/skbio.workflow.Workflow", "generated/skbio.workflow.Workflow.__call__", "generated/skbio.workflow.Workflow.__eq__", "generated/skbio.workflow.Workflow.__ge__", "generated/skbio.workflow.Workflow.__getstate__", "generated/skbio.workflow.Workflow.__gt__", "generated/skbio.workflow.Workflow.__hash__", "generated/skbio.workflow.Workflow.__le__", "generated/skbio.workflow.Workflow.__lt__", "generated/skbio.workflow.Workflow.__ne__", "generated/skbio.workflow.Workflow.__str__", "generated/skbio.workflow.Workflow.initialize_state", "generated/skbio.workflow.method", "generated/skbio.workflow.method.__call__", "generated/skbio.workflow.method.__eq__", "generated/skbio.workflow.method.__ge__", "generated/skbio.workflow.method.__getstate__", "generated/skbio.workflow.method.__gt__", "generated/skbio.workflow.method.__hash__", "generated/skbio.workflow.method.__le__", "generated/skbio.workflow.method.__lt__", "generated/skbio.workflow.method.__ne__", "generated/skbio.workflow.method.__str__", "generated/skbio.workflow.requires", "generated/skbio.workflow.requires.__call__", "generated/skbio.workflow.requires.__eq__", "generated/skbio.workflow.requires.__ge__", "generated/skbio.workflow.requires.__getstate__", "generated/skbio.workflow.requires.__gt__", "generated/skbio.workflow.requires.__hash__", "generated/skbio.workflow.requires.__le__", "generated/skbio.workflow.requires.__lt__", "generated/skbio.workflow.requires.__ne__", "generated/skbio.workflow.requires.__str__", "index", "io", "metadata", "sequence", "stats", "tree", "util", "workflow"], "filenames": ["alignment.rst", "diversity.rst", "generated/skbio.alignment.AlignmentStructure.rst", "generated/skbio.alignment.AlignmentStructure.__eq__.rst", "generated/skbio.alignment.AlignmentStructure.__ge__.rst", "generated/skbio.alignment.AlignmentStructure.__getitem__.rst", "generated/skbio.alignment.AlignmentStructure.__getstate__.rst", "generated/skbio.alignment.AlignmentStructure.__gt__.rst", "generated/skbio.alignment.AlignmentStructure.__hash__.rst", "generated/skbio.alignment.AlignmentStructure.__le__.rst", "generated/skbio.alignment.AlignmentStructure.__lt__.rst", "generated/skbio.alignment.AlignmentStructure.__ne__.rst", "generated/skbio.alignment.AlignmentStructure.__setstate__.rst", "generated/skbio.alignment.AlignmentStructure.__str__.rst", "generated/skbio.alignment.AlignmentStructure.is_zero_based.rst", "generated/skbio.alignment.AlignmentStructure.set_zero_based.rst", "generated/skbio.alignment.StripedSmithWaterman.rst", "generated/skbio.alignment.StripedSmithWaterman.__call__.rst", "generated/skbio.alignment.StripedSmithWaterman.__eq__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ge__.rst", "generated/skbio.alignment.StripedSmithWaterman.__getstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__gt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__hash__.rst", "generated/skbio.alignment.StripedSmithWaterman.__le__.rst", "generated/skbio.alignment.StripedSmithWaterman.__lt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ne__.rst", "generated/skbio.alignment.StripedSmithWaterman.__setstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__str__.rst", "generated/skbio.alignment.TabularMSA.rst", "generated/skbio.alignment.TabularMSA.__bool__.rst", "generated/skbio.alignment.TabularMSA.__contains__.rst", "generated/skbio.alignment.TabularMSA.__copy__.rst", "generated/skbio.alignment.TabularMSA.__deepcopy__.rst", "generated/skbio.alignment.TabularMSA.__eq__.rst", "generated/skbio.alignment.TabularMSA.__ge__.rst", "generated/skbio.alignment.TabularMSA.__getitem__.rst", "generated/skbio.alignment.TabularMSA.__getstate__.rst", "generated/skbio.alignment.TabularMSA.__gt__.rst", "generated/skbio.alignment.TabularMSA.__iter__.rst", "generated/skbio.alignment.TabularMSA.__le__.rst", "generated/skbio.alignment.TabularMSA.__len__.rst", "generated/skbio.alignment.TabularMSA.__lt__.rst", "generated/skbio.alignment.TabularMSA.__ne__.rst", "generated/skbio.alignment.TabularMSA.__reversed__.rst", "generated/skbio.alignment.TabularMSA.__str__.rst", "generated/skbio.alignment.TabularMSA.append.rst", "generated/skbio.alignment.TabularMSA.consensus.rst", "generated/skbio.alignment.TabularMSA.conservation.rst", "generated/skbio.alignment.TabularMSA.extend.rst", "generated/skbio.alignment.TabularMSA.from_dict.rst", "generated/skbio.alignment.TabularMSA.gap_frequencies.rst", "generated/skbio.alignment.TabularMSA.has_metadata.rst", "generated/skbio.alignment.TabularMSA.has_positional_metadata.rst", "generated/skbio.alignment.TabularMSA.iter_positions.rst", "generated/skbio.alignment.TabularMSA.join.rst", "generated/skbio.alignment.TabularMSA.read.rst", "generated/skbio.alignment.TabularMSA.reassign_index.rst", "generated/skbio.alignment.TabularMSA.sort.rst", "generated/skbio.alignment.TabularMSA.to_dict.rst", "generated/skbio.alignment.TabularMSA.write.rst", "generated/skbio.alignment.global_pairwise_align.rst", "generated/skbio.alignment.global_pairwise_align_nucleotide.rst", "generated/skbio.alignment.global_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align.rst", "generated/skbio.alignment.local_pairwise_align_nucleotide.rst", "generated/skbio.alignment.local_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align_ssw.rst", "generated/skbio.alignment.make_identity_substitution_matrix.rst", "generated/skbio.diversity.alpha.rst", "generated/skbio.diversity.alpha.ace.rst", "generated/skbio.diversity.alpha.berger_parker_d.rst", "generated/skbio.diversity.alpha.brillouin_d.rst", "generated/skbio.diversity.alpha.chao1.rst", "generated/skbio.diversity.alpha.chao1_ci.rst", "generated/skbio.diversity.alpha.dominance.rst", "generated/skbio.diversity.alpha.doubles.rst", "generated/skbio.diversity.alpha.enspie.rst", "generated/skbio.diversity.alpha.esty_ci.rst", "generated/skbio.diversity.alpha.faith_pd.rst", "generated/skbio.diversity.alpha.fisher_alpha.rst", "generated/skbio.diversity.alpha.gini_index.rst", "generated/skbio.diversity.alpha.goods_coverage.rst", "generated/skbio.diversity.alpha.heip_e.rst", "generated/skbio.diversity.alpha.kempton_taylor_q.rst", "generated/skbio.diversity.alpha.lladser_ci.rst", "generated/skbio.diversity.alpha.lladser_pe.rst", "generated/skbio.diversity.alpha.margalef.rst", "generated/skbio.diversity.alpha.mcintosh_d.rst", "generated/skbio.diversity.alpha.mcintosh_e.rst", "generated/skbio.diversity.alpha.menhinick.rst", "generated/skbio.diversity.alpha.michaelis_menten_fit.rst", "generated/skbio.diversity.alpha.observed_features.rst", "generated/skbio.diversity.alpha.observed_otus.rst", "generated/skbio.diversity.alpha.osd.rst", "generated/skbio.diversity.alpha.phydiv.rst", "generated/skbio.diversity.alpha.pielou_e.rst", "generated/skbio.diversity.alpha.robbins.rst", "generated/skbio.diversity.alpha.shannon.rst", "generated/skbio.diversity.alpha.simpson.rst", "generated/skbio.diversity.alpha.simpson_e.rst", "generated/skbio.diversity.alpha.singles.rst", "generated/skbio.diversity.alpha.sobs.rst", "generated/skbio.diversity.alpha.strong.rst", "generated/skbio.diversity.alpha_diversity.rst", "generated/skbio.diversity.beta.rst", "generated/skbio.diversity.beta.unweighted_unifrac.rst", "generated/skbio.diversity.beta.weighted_unifrac.rst", "generated/skbio.diversity.beta_diversity.rst", "generated/skbio.diversity.block_beta_diversity.rst", "generated/skbio.diversity.get_alpha_diversity_metrics.rst", "generated/skbio.diversity.get_beta_diversity_metrics.rst", "generated/skbio.diversity.partial_beta_diversity.rst", "generated/skbio.io.ArgumentOverrideWarning.rst", "generated/skbio.io.BLAST7FormatError.rst", "generated/skbio.io.ClustalFormatError.rst", "generated/skbio.io.EMBLFormatError.rst", "generated/skbio.io.FASTAFormatError.rst", "generated/skbio.io.FASTQFormatError.rst", "generated/skbio.io.FileFormatError.rst", "generated/skbio.io.FormatIdentificationWarning.rst", "generated/skbio.io.GFF3FormatError.rst", "generated/skbio.io.GenBankFormatError.rst", "generated/skbio.io.IOSourceError.rst", "generated/skbio.io.LSMatFormatError.rst", "generated/skbio.io.NewickFormatError.rst", "generated/skbio.io.OrdinationFormatError.rst", "generated/skbio.io.PhylipFormatError.rst", "generated/skbio.io.QSeqFormatError.rst", "generated/skbio.io.QUALFormatError.rst", "generated/skbio.io.StockholmFormatError.rst", "generated/skbio.io.UnrecognizedFormatError.rst", "generated/skbio.io.format.binary_dm.rst", "generated/skbio.io.format.blast6.rst", "generated/skbio.io.format.blast7.rst", "generated/skbio.io.format.clustal.rst", "generated/skbio.io.format.embl.rst", "generated/skbio.io.format.fasta.rst", "generated/skbio.io.format.fastq.rst", "generated/skbio.io.format.genbank.rst", "generated/skbio.io.format.gff3.rst", "generated/skbio.io.format.lsmat.rst", "generated/skbio.io.format.newick.rst", "generated/skbio.io.format.ordination.rst", "generated/skbio.io.format.phylip.rst", "generated/skbio.io.format.qseq.rst", "generated/skbio.io.format.sample_metadata.rst", "generated/skbio.io.format.stockholm.rst", "generated/skbio.io.format.taxdump.rst", "generated/skbio.io.registry.rst", "generated/skbio.io.registry.DuplicateRegistrationError.rst", "generated/skbio.io.registry.Format.rst", "generated/skbio.io.registry.Format.__eq__.rst", "generated/skbio.io.registry.Format.__ge__.rst", "generated/skbio.io.registry.Format.__getstate__.rst", "generated/skbio.io.registry.Format.__gt__.rst", "generated/skbio.io.registry.Format.__hash__.rst", "generated/skbio.io.registry.Format.__le__.rst", "generated/skbio.io.registry.Format.__lt__.rst", "generated/skbio.io.registry.Format.__ne__.rst", "generated/skbio.io.registry.Format.__str__.rst", "generated/skbio.io.registry.Format.reader.rst", "generated/skbio.io.registry.Format.sniffer.rst", "generated/skbio.io.registry.Format.writer.rst", "generated/skbio.io.registry.IORegistry.rst", "generated/skbio.io.registry.IORegistry.__eq__.rst", "generated/skbio.io.registry.IORegistry.__ge__.rst", "generated/skbio.io.registry.IORegistry.__getstate__.rst", "generated/skbio.io.registry.IORegistry.__gt__.rst", "generated/skbio.io.registry.IORegistry.__hash__.rst", "generated/skbio.io.registry.IORegistry.__le__.rst", "generated/skbio.io.registry.IORegistry.__lt__.rst", "generated/skbio.io.registry.IORegistry.__ne__.rst", "generated/skbio.io.registry.IORegistry.__str__.rst", "generated/skbio.io.registry.IORegistry.add_format.rst", "generated/skbio.io.registry.IORegistry.create_format.rst", "generated/skbio.io.registry.IORegistry.get_reader.rst", "generated/skbio.io.registry.IORegistry.get_sniffer.rst", "generated/skbio.io.registry.IORegistry.get_writer.rst", "generated/skbio.io.registry.IORegistry.list_read_formats.rst", "generated/skbio.io.registry.IORegistry.list_write_formats.rst", "generated/skbio.io.registry.IORegistry.monkey_patch.rst", "generated/skbio.io.registry.IORegistry.read.rst", "generated/skbio.io.registry.IORegistry.sniff.rst", "generated/skbio.io.registry.IORegistry.write.rst", "generated/skbio.io.registry.InvalidRegistrationError.rst", "generated/skbio.io.registry.create_format.rst", "generated/skbio.io.registry.read.rst", "generated/skbio.io.registry.sniff.rst", "generated/skbio.io.registry.write.rst", "generated/skbio.io.util.rst", "generated/skbio.io.util.open.rst", "generated/skbio.io.util.open_file.rst", "generated/skbio.io.util.open_files.rst", "generated/skbio.metadata.Interval.rst", "generated/skbio.metadata.Interval.__eq__.rst", "generated/skbio.metadata.Interval.__ge__.rst", "generated/skbio.metadata.Interval.__getstate__.rst", "generated/skbio.metadata.Interval.__gt__.rst", "generated/skbio.metadata.Interval.__le__.rst", "generated/skbio.metadata.Interval.__lt__.rst", "generated/skbio.metadata.Interval.__ne__.rst", "generated/skbio.metadata.Interval.__str__.rst", "generated/skbio.metadata.Interval.drop.rst", "generated/skbio.metadata.IntervalMetadata.rst", "generated/skbio.metadata.IntervalMetadata.__copy__.rst", "generated/skbio.metadata.IntervalMetadata.__deepcopy__.rst", "generated/skbio.metadata.IntervalMetadata.__eq__.rst", "generated/skbio.metadata.IntervalMetadata.__ge__.rst", "generated/skbio.metadata.IntervalMetadata.__getstate__.rst", "generated/skbio.metadata.IntervalMetadata.__gt__.rst", "generated/skbio.metadata.IntervalMetadata.__le__.rst", "generated/skbio.metadata.IntervalMetadata.__lt__.rst", "generated/skbio.metadata.IntervalMetadata.__ne__.rst", "generated/skbio.metadata.IntervalMetadata.__str__.rst", "generated/skbio.metadata.IntervalMetadata.add.rst", "generated/skbio.metadata.IntervalMetadata.concat.rst", "generated/skbio.metadata.IntervalMetadata.drop.rst", "generated/skbio.metadata.IntervalMetadata.merge.rst", "generated/skbio.metadata.IntervalMetadata.query.rst", "generated/skbio.metadata.IntervalMetadata.read.rst", "generated/skbio.metadata.IntervalMetadata.sort.rst", "generated/skbio.metadata.IntervalMetadata.write.rst", "generated/skbio.sequence.DNA.rst", "generated/skbio.sequence.DNA.__bool__.rst", "generated/skbio.sequence.DNA.__contains__.rst", "generated/skbio.sequence.DNA.__copy__.rst", "generated/skbio.sequence.DNA.__deepcopy__.rst", "generated/skbio.sequence.DNA.__eq__.rst", "generated/skbio.sequence.DNA.__ge__.rst", "generated/skbio.sequence.DNA.__getitem__.rst", "generated/skbio.sequence.DNA.__getstate__.rst", "generated/skbio.sequence.DNA.__gt__.rst", "generated/skbio.sequence.DNA.__iter__.rst", "generated/skbio.sequence.DNA.__le__.rst", "generated/skbio.sequence.DNA.__len__.rst", "generated/skbio.sequence.DNA.__lt__.rst", "generated/skbio.sequence.DNA.__ne__.rst", "generated/skbio.sequence.DNA.__reversed__.rst", "generated/skbio.sequence.DNA.__str__.rst", "generated/skbio.sequence.DNA.complement.rst", "generated/skbio.sequence.DNA.concat.rst", "generated/skbio.sequence.DNA.count.rst", "generated/skbio.sequence.DNA.definites.rst", "generated/skbio.sequence.DNA.degap.rst", "generated/skbio.sequence.DNA.degenerates.rst", "generated/skbio.sequence.DNA.distance.rst", "generated/skbio.sequence.DNA.expand_degenerates.rst", "generated/skbio.sequence.DNA.find_motifs.rst", "generated/skbio.sequence.DNA.find_with_regex.rst", "generated/skbio.sequence.DNA.frequencies.rst", "generated/skbio.sequence.DNA.gaps.rst", "generated/skbio.sequence.DNA.gc_content.rst", "generated/skbio.sequence.DNA.gc_frequency.rst", "generated/skbio.sequence.DNA.has_definites.rst", "generated/skbio.sequence.DNA.has_degenerates.rst", "generated/skbio.sequence.DNA.has_gaps.rst", "generated/skbio.sequence.DNA.has_interval_metadata.rst", "generated/skbio.sequence.DNA.has_metadata.rst", "generated/skbio.sequence.DNA.has_nondegenerates.rst", "generated/skbio.sequence.DNA.has_positional_metadata.rst", "generated/skbio.sequence.DNA.index.rst", "generated/skbio.sequence.DNA.is_reverse_complement.rst", "generated/skbio.sequence.DNA.iter_contiguous.rst", "generated/skbio.sequence.DNA.iter_kmers.rst", "generated/skbio.sequence.DNA.kmer_frequencies.rst", "generated/skbio.sequence.DNA.lowercase.rst", "generated/skbio.sequence.DNA.match_frequency.rst", "generated/skbio.sequence.DNA.matches.rst", "generated/skbio.sequence.DNA.mismatch_frequency.rst", "generated/skbio.sequence.DNA.mismatches.rst", "generated/skbio.sequence.DNA.nondegenerates.rst", "generated/skbio.sequence.DNA.read.rst", "generated/skbio.sequence.DNA.replace.rst", "generated/skbio.sequence.DNA.reverse_complement.rst", "generated/skbio.sequence.DNA.to_indices.rst", "generated/skbio.sequence.DNA.to_regex.rst", "generated/skbio.sequence.DNA.transcribe.rst", "generated/skbio.sequence.DNA.translate.rst", "generated/skbio.sequence.DNA.translate_six_frames.rst", "generated/skbio.sequence.DNA.write.rst", "generated/skbio.sequence.GeneticCode.rst", "generated/skbio.sequence.GeneticCode.__eq__.rst", "generated/skbio.sequence.GeneticCode.__ge__.rst", "generated/skbio.sequence.GeneticCode.__getstate__.rst", "generated/skbio.sequence.GeneticCode.__gt__.rst", "generated/skbio.sequence.GeneticCode.__le__.rst", "generated/skbio.sequence.GeneticCode.__lt__.rst", "generated/skbio.sequence.GeneticCode.__ne__.rst", "generated/skbio.sequence.GeneticCode.__str__.rst", "generated/skbio.sequence.GeneticCode.from_ncbi.rst", "generated/skbio.sequence.GeneticCode.translate.rst", "generated/skbio.sequence.GeneticCode.translate_six_frames.rst", "generated/skbio.sequence.GrammaredSequence.rst", "generated/skbio.sequence.GrammaredSequence.__bool__.rst", "generated/skbio.sequence.GrammaredSequence.__contains__.rst", "generated/skbio.sequence.GrammaredSequence.__copy__.rst", "generated/skbio.sequence.GrammaredSequence.__deepcopy__.rst", "generated/skbio.sequence.GrammaredSequence.__eq__.rst", "generated/skbio.sequence.GrammaredSequence.__ge__.rst", "generated/skbio.sequence.GrammaredSequence.__getitem__.rst", "generated/skbio.sequence.GrammaredSequence.__getstate__.rst", "generated/skbio.sequence.GrammaredSequence.__gt__.rst", "generated/skbio.sequence.GrammaredSequence.__iter__.rst", "generated/skbio.sequence.GrammaredSequence.__le__.rst", "generated/skbio.sequence.GrammaredSequence.__len__.rst", "generated/skbio.sequence.GrammaredSequence.__lt__.rst", "generated/skbio.sequence.GrammaredSequence.__ne__.rst", "generated/skbio.sequence.GrammaredSequence.__reversed__.rst", "generated/skbio.sequence.GrammaredSequence.__str__.rst", "generated/skbio.sequence.GrammaredSequence.concat.rst", "generated/skbio.sequence.GrammaredSequence.count.rst", "generated/skbio.sequence.GrammaredSequence.definites.rst", "generated/skbio.sequence.GrammaredSequence.degap.rst", "generated/skbio.sequence.GrammaredSequence.degenerates.rst", "generated/skbio.sequence.GrammaredSequence.distance.rst", "generated/skbio.sequence.GrammaredSequence.expand_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.find_motifs.rst", "generated/skbio.sequence.GrammaredSequence.find_with_regex.rst", "generated/skbio.sequence.GrammaredSequence.frequencies.rst", "generated/skbio.sequence.GrammaredSequence.gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_definites.rst", "generated/skbio.sequence.GrammaredSequence.has_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata.rst", "generated/skbio.sequence.GrammaredSequence.index.rst", "generated/skbio.sequence.GrammaredSequence.iter_contiguous.rst", "generated/skbio.sequence.GrammaredSequence.iter_kmers.rst", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies.rst", "generated/skbio.sequence.GrammaredSequence.lowercase.rst", "generated/skbio.sequence.GrammaredSequence.match_frequency.rst", "generated/skbio.sequence.GrammaredSequence.matches.rst", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency.rst", "generated/skbio.sequence.GrammaredSequence.mismatches.rst", "generated/skbio.sequence.GrammaredSequence.nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.read.rst", "generated/skbio.sequence.GrammaredSequence.replace.rst", "generated/skbio.sequence.GrammaredSequence.to_indices.rst", "generated/skbio.sequence.GrammaredSequence.to_regex.rst", "generated/skbio.sequence.GrammaredSequence.write.rst", "generated/skbio.sequence.Protein.rst", "generated/skbio.sequence.Protein.__bool__.rst", "generated/skbio.sequence.Protein.__contains__.rst", "generated/skbio.sequence.Protein.__copy__.rst", "generated/skbio.sequence.Protein.__deepcopy__.rst", "generated/skbio.sequence.Protein.__eq__.rst", "generated/skbio.sequence.Protein.__ge__.rst", "generated/skbio.sequence.Protein.__getitem__.rst", "generated/skbio.sequence.Protein.__getstate__.rst", "generated/skbio.sequence.Protein.__gt__.rst", "generated/skbio.sequence.Protein.__iter__.rst", "generated/skbio.sequence.Protein.__le__.rst", "generated/skbio.sequence.Protein.__len__.rst", "generated/skbio.sequence.Protein.__lt__.rst", "generated/skbio.sequence.Protein.__ne__.rst", "generated/skbio.sequence.Protein.__reversed__.rst", "generated/skbio.sequence.Protein.__str__.rst", "generated/skbio.sequence.Protein.concat.rst", "generated/skbio.sequence.Protein.count.rst", "generated/skbio.sequence.Protein.definites.rst", "generated/skbio.sequence.Protein.degap.rst", "generated/skbio.sequence.Protein.degenerates.rst", "generated/skbio.sequence.Protein.distance.rst", "generated/skbio.sequence.Protein.expand_degenerates.rst", "generated/skbio.sequence.Protein.find_motifs.rst", "generated/skbio.sequence.Protein.find_with_regex.rst", "generated/skbio.sequence.Protein.frequencies.rst", "generated/skbio.sequence.Protein.gaps.rst", "generated/skbio.sequence.Protein.has_definites.rst", "generated/skbio.sequence.Protein.has_degenerates.rst", "generated/skbio.sequence.Protein.has_gaps.rst", "generated/skbio.sequence.Protein.has_interval_metadata.rst", "generated/skbio.sequence.Protein.has_metadata.rst", "generated/skbio.sequence.Protein.has_nondegenerates.rst", "generated/skbio.sequence.Protein.has_positional_metadata.rst", "generated/skbio.sequence.Protein.has_stops.rst", "generated/skbio.sequence.Protein.index.rst", "generated/skbio.sequence.Protein.iter_contiguous.rst", "generated/skbio.sequence.Protein.iter_kmers.rst", "generated/skbio.sequence.Protein.kmer_frequencies.rst", "generated/skbio.sequence.Protein.lowercase.rst", "generated/skbio.sequence.Protein.match_frequency.rst", "generated/skbio.sequence.Protein.matches.rst", "generated/skbio.sequence.Protein.mismatch_frequency.rst", "generated/skbio.sequence.Protein.mismatches.rst", "generated/skbio.sequence.Protein.nondegenerates.rst", "generated/skbio.sequence.Protein.read.rst", "generated/skbio.sequence.Protein.replace.rst", "generated/skbio.sequence.Protein.stops.rst", "generated/skbio.sequence.Protein.to_indices.rst", "generated/skbio.sequence.Protein.to_regex.rst", "generated/skbio.sequence.Protein.write.rst", "generated/skbio.sequence.RNA.rst", "generated/skbio.sequence.RNA.__bool__.rst", "generated/skbio.sequence.RNA.__contains__.rst", "generated/skbio.sequence.RNA.__copy__.rst", "generated/skbio.sequence.RNA.__deepcopy__.rst", "generated/skbio.sequence.RNA.__eq__.rst", "generated/skbio.sequence.RNA.__ge__.rst", "generated/skbio.sequence.RNA.__getitem__.rst", "generated/skbio.sequence.RNA.__getstate__.rst", "generated/skbio.sequence.RNA.__gt__.rst", "generated/skbio.sequence.RNA.__iter__.rst", "generated/skbio.sequence.RNA.__le__.rst", "generated/skbio.sequence.RNA.__len__.rst", "generated/skbio.sequence.RNA.__lt__.rst", "generated/skbio.sequence.RNA.__ne__.rst", "generated/skbio.sequence.RNA.__reversed__.rst", "generated/skbio.sequence.RNA.__str__.rst", "generated/skbio.sequence.RNA.complement.rst", "generated/skbio.sequence.RNA.concat.rst", "generated/skbio.sequence.RNA.count.rst", "generated/skbio.sequence.RNA.definites.rst", "generated/skbio.sequence.RNA.degap.rst", "generated/skbio.sequence.RNA.degenerates.rst", "generated/skbio.sequence.RNA.distance.rst", "generated/skbio.sequence.RNA.expand_degenerates.rst", "generated/skbio.sequence.RNA.find_motifs.rst", "generated/skbio.sequence.RNA.find_with_regex.rst", "generated/skbio.sequence.RNA.frequencies.rst", "generated/skbio.sequence.RNA.gaps.rst", "generated/skbio.sequence.RNA.gc_content.rst", "generated/skbio.sequence.RNA.gc_frequency.rst", "generated/skbio.sequence.RNA.has_definites.rst", "generated/skbio.sequence.RNA.has_degenerates.rst", "generated/skbio.sequence.RNA.has_gaps.rst", "generated/skbio.sequence.RNA.has_interval_metadata.rst", "generated/skbio.sequence.RNA.has_metadata.rst", "generated/skbio.sequence.RNA.has_nondegenerates.rst", "generated/skbio.sequence.RNA.has_positional_metadata.rst", "generated/skbio.sequence.RNA.index.rst", "generated/skbio.sequence.RNA.is_reverse_complement.rst", "generated/skbio.sequence.RNA.iter_contiguous.rst", "generated/skbio.sequence.RNA.iter_kmers.rst", "generated/skbio.sequence.RNA.kmer_frequencies.rst", "generated/skbio.sequence.RNA.lowercase.rst", "generated/skbio.sequence.RNA.match_frequency.rst", "generated/skbio.sequence.RNA.matches.rst", "generated/skbio.sequence.RNA.mismatch_frequency.rst", "generated/skbio.sequence.RNA.mismatches.rst", "generated/skbio.sequence.RNA.nondegenerates.rst", "generated/skbio.sequence.RNA.read.rst", "generated/skbio.sequence.RNA.replace.rst", "generated/skbio.sequence.RNA.reverse_complement.rst", "generated/skbio.sequence.RNA.reverse_transcribe.rst", "generated/skbio.sequence.RNA.to_indices.rst", "generated/skbio.sequence.RNA.to_regex.rst", "generated/skbio.sequence.RNA.translate.rst", "generated/skbio.sequence.RNA.translate_six_frames.rst", "generated/skbio.sequence.RNA.write.rst", "generated/skbio.sequence.Sequence.rst", "generated/skbio.sequence.Sequence.__bool__.rst", "generated/skbio.sequence.Sequence.__contains__.rst", "generated/skbio.sequence.Sequence.__copy__.rst", "generated/skbio.sequence.Sequence.__deepcopy__.rst", "generated/skbio.sequence.Sequence.__eq__.rst", "generated/skbio.sequence.Sequence.__ge__.rst", "generated/skbio.sequence.Sequence.__getitem__.rst", "generated/skbio.sequence.Sequence.__getstate__.rst", "generated/skbio.sequence.Sequence.__gt__.rst", "generated/skbio.sequence.Sequence.__iter__.rst", "generated/skbio.sequence.Sequence.__le__.rst", "generated/skbio.sequence.Sequence.__len__.rst", "generated/skbio.sequence.Sequence.__lt__.rst", "generated/skbio.sequence.Sequence.__ne__.rst", "generated/skbio.sequence.Sequence.__reversed__.rst", "generated/skbio.sequence.Sequence.__str__.rst", "generated/skbio.sequence.Sequence.concat.rst", "generated/skbio.sequence.Sequence.count.rst", "generated/skbio.sequence.Sequence.distance.rst", "generated/skbio.sequence.Sequence.find_with_regex.rst", "generated/skbio.sequence.Sequence.frequencies.rst", "generated/skbio.sequence.Sequence.has_interval_metadata.rst", "generated/skbio.sequence.Sequence.has_metadata.rst", "generated/skbio.sequence.Sequence.has_positional_metadata.rst", "generated/skbio.sequence.Sequence.index.rst", "generated/skbio.sequence.Sequence.iter_contiguous.rst", "generated/skbio.sequence.Sequence.iter_kmers.rst", "generated/skbio.sequence.Sequence.kmer_frequencies.rst", "generated/skbio.sequence.Sequence.lowercase.rst", "generated/skbio.sequence.Sequence.match_frequency.rst", "generated/skbio.sequence.Sequence.matches.rst", "generated/skbio.sequence.Sequence.mismatch_frequency.rst", "generated/skbio.sequence.Sequence.mismatches.rst", "generated/skbio.sequence.Sequence.read.rst", "generated/skbio.sequence.Sequence.replace.rst", "generated/skbio.sequence.Sequence.to_indices.rst", "generated/skbio.sequence.Sequence.write.rst", "generated/skbio.sequence.SubstitutionMatrix.rst", "generated/skbio.sequence.SubstitutionMatrix.__contains__.rst", "generated/skbio.sequence.SubstitutionMatrix.__eq__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ge__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getitem__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getstate__.rst", "generated/skbio.sequence.SubstitutionMatrix.__gt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__le__.rst", "generated/skbio.sequence.SubstitutionMatrix.__lt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ne__.rst", "generated/skbio.sequence.SubstitutionMatrix.__str__.rst", "generated/skbio.sequence.SubstitutionMatrix.between.rst", "generated/skbio.sequence.SubstitutionMatrix.by_name.rst", "generated/skbio.sequence.SubstitutionMatrix.copy.rst", "generated/skbio.sequence.SubstitutionMatrix.filter.rst", "generated/skbio.sequence.SubstitutionMatrix.from_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.from_iterable.rst", "generated/skbio.sequence.SubstitutionMatrix.get_names.rst", "generated/skbio.sequence.SubstitutionMatrix.identity.rst", "generated/skbio.sequence.SubstitutionMatrix.index.rst", "generated/skbio.sequence.SubstitutionMatrix.plot.rst", "generated/skbio.sequence.SubstitutionMatrix.read.rst", "generated/skbio.sequence.SubstitutionMatrix.redundant_form.rst", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame.rst", "generated/skbio.sequence.SubstitutionMatrix.to_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.transpose.rst", "generated/skbio.sequence.SubstitutionMatrix.within.rst", "generated/skbio.sequence.SubstitutionMatrix.write.rst", "generated/skbio.sequence.distance.rst", "generated/skbio.sequence.distance.hamming.rst", "generated/skbio.sequence.distance.kmer_distance.rst", "generated/skbio.stats.composition.rst", "generated/skbio.stats.composition.alr.rst", "generated/skbio.stats.composition.alr_inv.rst", "generated/skbio.stats.composition.ancom.rst", "generated/skbio.stats.composition.centralize.rst", "generated/skbio.stats.composition.closure.rst", "generated/skbio.stats.composition.clr.rst", "generated/skbio.stats.composition.clr_inv.rst", "generated/skbio.stats.composition.ilr.rst", "generated/skbio.stats.composition.ilr_inv.rst", "generated/skbio.stats.composition.inner.rst", "generated/skbio.stats.composition.multiplicative_replacement.rst", "generated/skbio.stats.composition.pairwise_vlr.rst", "generated/skbio.stats.composition.perturb.rst", "generated/skbio.stats.composition.perturb_inv.rst", "generated/skbio.stats.composition.power.rst", "generated/skbio.stats.composition.sbp_basis.rst", "generated/skbio.stats.composition.tree_basis.rst", "generated/skbio.stats.composition.vlr.rst", "generated/skbio.stats.distance.rst", "generated/skbio.stats.distance.DissimilarityMatrix.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__le__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__str__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.between.rst", "generated/skbio.stats.distance.DissimilarityMatrix.copy.rst", "generated/skbio.stats.distance.DissimilarityMatrix.filter.rst", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable.rst", "generated/skbio.stats.distance.DissimilarityMatrix.index.rst", "generated/skbio.stats.distance.DissimilarityMatrix.plot.rst", "generated/skbio.stats.distance.DissimilarityMatrix.read.rst", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form.rst", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DissimilarityMatrix.transpose.rst", "generated/skbio.stats.distance.DissimilarityMatrix.within.rst", "generated/skbio.stats.distance.DissimilarityMatrix.write.rst", "generated/skbio.stats.distance.DissimilarityMatrixError.rst", "generated/skbio.stats.distance.DistanceMatrix.rst", "generated/skbio.stats.distance.DistanceMatrix.__contains__.rst", "generated/skbio.stats.distance.DistanceMatrix.__eq__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ge__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getitem__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getstate__.rst", "generated/skbio.stats.distance.DistanceMatrix.__gt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__le__.rst", "generated/skbio.stats.distance.DistanceMatrix.__lt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ne__.rst", "generated/skbio.stats.distance.DistanceMatrix.__str__.rst", "generated/skbio.stats.distance.DistanceMatrix.between.rst", "generated/skbio.stats.distance.DistanceMatrix.condensed_form.rst", "generated/skbio.stats.distance.DistanceMatrix.copy.rst", "generated/skbio.stats.distance.DistanceMatrix.filter.rst", "generated/skbio.stats.distance.DistanceMatrix.from_iterable.rst", "generated/skbio.stats.distance.DistanceMatrix.index.rst", "generated/skbio.stats.distance.DistanceMatrix.permute.rst", "generated/skbio.stats.distance.DistanceMatrix.plot.rst", "generated/skbio.stats.distance.DistanceMatrix.read.rst", "generated/skbio.stats.distance.DistanceMatrix.redundant_form.rst", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DistanceMatrix.to_series.rst", "generated/skbio.stats.distance.DistanceMatrix.transpose.rst", "generated/skbio.stats.distance.DistanceMatrix.within.rst", "generated/skbio.stats.distance.DistanceMatrix.write.rst", "generated/skbio.stats.distance.DistanceMatrixError.rst", "generated/skbio.stats.distance.MissingIDError.rst", "generated/skbio.stats.distance.anosim.rst", "generated/skbio.stats.distance.bioenv.rst", "generated/skbio.stats.distance.mantel.rst", "generated/skbio.stats.distance.permanova.rst", "generated/skbio.stats.distance.permdisp.rst", "generated/skbio.stats.distance.pwmantel.rst", "generated/skbio.stats.distance.randdm.rst", "generated/skbio.stats.evolve.rst", "generated/skbio.stats.evolve.hommola_cospeciation.rst", "generated/skbio.stats.gradient.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.CategoryResults.rst", "generated/skbio.stats.gradient.CategoryResults.__eq__.rst", "generated/skbio.stats.gradient.CategoryResults.__ge__.rst", "generated/skbio.stats.gradient.CategoryResults.__getstate__.rst", "generated/skbio.stats.gradient.CategoryResults.__gt__.rst", "generated/skbio.stats.gradient.CategoryResults.__hash__.rst", "generated/skbio.stats.gradient.CategoryResults.__le__.rst", "generated/skbio.stats.gradient.CategoryResults.__lt__.rst", "generated/skbio.stats.gradient.CategoryResults.__ne__.rst", "generated/skbio.stats.gradient.CategoryResults.__str__.rst", "generated/skbio.stats.gradient.CategoryResults.to_files.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVA.rst", "generated/skbio.stats.gradient.GradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVA.__le__.rst", "generated/skbio.stats.gradient.GradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVA.__str__.rst", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVAResults.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__le__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__str__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.to_files.rst", "generated/skbio.stats.gradient.GroupResults.rst", "generated/skbio.stats.gradient.GroupResults.__eq__.rst", "generated/skbio.stats.gradient.GroupResults.__ge__.rst", "generated/skbio.stats.gradient.GroupResults.__getstate__.rst", "generated/skbio.stats.gradient.GroupResults.__gt__.rst", "generated/skbio.stats.gradient.GroupResults.__hash__.rst", "generated/skbio.stats.gradient.GroupResults.__le__.rst", "generated/skbio.stats.gradient.GroupResults.__lt__.rst", "generated/skbio.stats.gradient.GroupResults.__ne__.rst", "generated/skbio.stats.gradient.GroupResults.__str__.rst", "generated/skbio.stats.gradient.GroupResults.to_files.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.isubsample.rst", "generated/skbio.stats.ordination.rst", "generated/skbio.stats.ordination.OrdinationResults.rst", "generated/skbio.stats.ordination.OrdinationResults.__eq__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ge__.rst", "generated/skbio.stats.ordination.OrdinationResults.__getstate__.rst", "generated/skbio.stats.ordination.OrdinationResults.__gt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__hash__.rst", "generated/skbio.stats.ordination.OrdinationResults.__le__.rst", "generated/skbio.stats.ordination.OrdinationResults.__lt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ne__.rst", "generated/skbio.stats.ordination.OrdinationResults.__str__.rst", "generated/skbio.stats.ordination.OrdinationResults.plot.rst", "generated/skbio.stats.ordination.OrdinationResults.read.rst", "generated/skbio.stats.ordination.OrdinationResults.write.rst", "generated/skbio.stats.ordination.ca.rst", "generated/skbio.stats.ordination.cca.rst", "generated/skbio.stats.ordination.corr.rst", "generated/skbio.stats.ordination.e_matrix.rst", "generated/skbio.stats.ordination.f_matrix.rst", "generated/skbio.stats.ordination.mean_and_std.rst", "generated/skbio.stats.ordination.pcoa.rst", "generated/skbio.stats.ordination.pcoa_biplot.rst", "generated/skbio.stats.ordination.rda.rst", "generated/skbio.stats.ordination.scale.rst", "generated/skbio.stats.ordination.svd_rank.rst", "generated/skbio.stats.power.rst", "generated/skbio.stats.power.confidence_bound.rst", "generated/skbio.stats.power.paired_subsamples.rst", "generated/skbio.stats.power.subsample_paired_power.rst", "generated/skbio.stats.power.subsample_power.rst", "generated/skbio.stats.subsample_counts.rst", "generated/skbio.tree.DuplicateNodeError.rst", "generated/skbio.tree.MissingNodeError.rst", "generated/skbio.tree.NoLengthError.rst", "generated/skbio.tree.NoParentError.rst", "generated/skbio.tree.TreeError.rst", "generated/skbio.tree.TreeNode.rst", "generated/skbio.tree.TreeNode.__copy__.rst", "generated/skbio.tree.TreeNode.__deepcopy__.rst", "generated/skbio.tree.TreeNode.__eq__.rst", "generated/skbio.tree.TreeNode.__ge__.rst", "generated/skbio.tree.TreeNode.__getitem__.rst", "generated/skbio.tree.TreeNode.__getstate__.rst", "generated/skbio.tree.TreeNode.__gt__.rst", "generated/skbio.tree.TreeNode.__hash__.rst", "generated/skbio.tree.TreeNode.__iter__.rst", "generated/skbio.tree.TreeNode.__le__.rst", "generated/skbio.tree.TreeNode.__len__.rst", "generated/skbio.tree.TreeNode.__lt__.rst", "generated/skbio.tree.TreeNode.__ne__.rst", "generated/skbio.tree.TreeNode.__str__.rst", "generated/skbio.tree.TreeNode.accumulate_to_ancestor.rst", "generated/skbio.tree.TreeNode.ancestors.rst", "generated/skbio.tree.TreeNode.append.rst", "generated/skbio.tree.TreeNode.ascii_art.rst", "generated/skbio.tree.TreeNode.assign_ids.rst", "generated/skbio.tree.TreeNode.assign_supports.rst", "generated/skbio.tree.TreeNode.bifurcate.rst", "generated/skbio.tree.TreeNode.cache_attr.rst", "generated/skbio.tree.TreeNode.compare_rfd.rst", "generated/skbio.tree.TreeNode.compare_subsets.rst", "generated/skbio.tree.TreeNode.compare_tip_distances.rst", "generated/skbio.tree.TreeNode.copy.rst", "generated/skbio.tree.TreeNode.count.rst", "generated/skbio.tree.TreeNode.create_caches.rst", "generated/skbio.tree.TreeNode.deepcopy.rst", "generated/skbio.tree.TreeNode.descending_branch_length.rst", "generated/skbio.tree.TreeNode.distance.rst", "generated/skbio.tree.TreeNode.extend.rst", "generated/skbio.tree.TreeNode.find.rst", "generated/skbio.tree.TreeNode.find_all.rst", "generated/skbio.tree.TreeNode.find_by_func.rst", "generated/skbio.tree.TreeNode.find_by_id.rst", "generated/skbio.tree.TreeNode.from_linkage_matrix.rst", "generated/skbio.tree.TreeNode.from_taxdump.rst", "generated/skbio.tree.TreeNode.from_taxonomy.rst", "generated/skbio.tree.TreeNode.get_max_distance.rst", "generated/skbio.tree.TreeNode.has_children.rst", "generated/skbio.tree.TreeNode.index_tree.rst", "generated/skbio.tree.TreeNode.invalidate_caches.rst", "generated/skbio.tree.TreeNode.is_root.rst", "generated/skbio.tree.TreeNode.is_tip.rst", "generated/skbio.tree.TreeNode.lca.rst", "generated/skbio.tree.TreeNode.levelorder.rst", "generated/skbio.tree.TreeNode.lowest_common_ancestor.rst", "generated/skbio.tree.TreeNode.neighbors.rst", "generated/skbio.tree.TreeNode.non_tips.rst", "generated/skbio.tree.TreeNode.observed_node_counts.rst", "generated/skbio.tree.TreeNode.pop.rst", "generated/skbio.tree.TreeNode.postorder.rst", "generated/skbio.tree.TreeNode.pre_and_postorder.rst", "generated/skbio.tree.TreeNode.preorder.rst", "generated/skbio.tree.TreeNode.prune.rst", "generated/skbio.tree.TreeNode.read.rst", "generated/skbio.tree.TreeNode.remove.rst", "generated/skbio.tree.TreeNode.remove_deleted.rst", "generated/skbio.tree.TreeNode.root.rst", "generated/skbio.tree.TreeNode.root_at.rst", "generated/skbio.tree.TreeNode.root_at_midpoint.rst", "generated/skbio.tree.TreeNode.shear.rst", "generated/skbio.tree.TreeNode.shuffle.rst", "generated/skbio.tree.TreeNode.siblings.rst", "generated/skbio.tree.TreeNode.subset.rst", "generated/skbio.tree.TreeNode.subsets.rst", "generated/skbio.tree.TreeNode.subtree.rst", "generated/skbio.tree.TreeNode.tip_tip_distances.rst", "generated/skbio.tree.TreeNode.tips.rst", "generated/skbio.tree.TreeNode.to_array.rst", "generated/skbio.tree.TreeNode.to_taxonomy.rst", "generated/skbio.tree.TreeNode.traverse.rst", "generated/skbio.tree.TreeNode.unpack.rst", "generated/skbio.tree.TreeNode.unpack_by_func.rst", "generated/skbio.tree.TreeNode.unrooted_copy.rst", "generated/skbio.tree.TreeNode.unrooted_deepcopy.rst", "generated/skbio.tree.TreeNode.write.rst", "generated/skbio.tree.majority_rule.rst", "generated/skbio.tree.nj.rst", "generated/skbio.util.EfficiencyWarning.rst", "generated/skbio.util.RepresentationWarning.rst", "generated/skbio.util.assert_data_frame_almost_equal.rst", "generated/skbio.util.assert_ordination_results_equal.rst", "generated/skbio.util.cardinal_to_ordinal.rst", "generated/skbio.util.classproperty.rst", "generated/skbio.util.classproperty.__delete__.rst", "generated/skbio.util.classproperty.__eq__.rst", "generated/skbio.util.classproperty.__ge__.rst", "generated/skbio.util.classproperty.__get__.rst", "generated/skbio.util.classproperty.__getstate__.rst", "generated/skbio.util.classproperty.__gt__.rst", "generated/skbio.util.classproperty.__hash__.rst", "generated/skbio.util.classproperty.__le__.rst", "generated/skbio.util.classproperty.__lt__.rst", "generated/skbio.util.classproperty.__ne__.rst", "generated/skbio.util.classproperty.__set__.rst", "generated/skbio.util.classproperty.__set_name__.rst", "generated/skbio.util.classproperty.__str__.rst", "generated/skbio.util.classproperty.deleter.rst", "generated/skbio.util.classproperty.getter.rst", "generated/skbio.util.classproperty.setter.rst", "generated/skbio.util.find_duplicates.rst", "generated/skbio.util.get_data_path.rst", "generated/skbio.util.safe_md5.rst", "generated/skbio.workflow.Workflow.rst", "generated/skbio.workflow.Workflow.__call__.rst", "generated/skbio.workflow.Workflow.__eq__.rst", "generated/skbio.workflow.Workflow.__ge__.rst", "generated/skbio.workflow.Workflow.__getstate__.rst", "generated/skbio.workflow.Workflow.__gt__.rst", "generated/skbio.workflow.Workflow.__hash__.rst", "generated/skbio.workflow.Workflow.__le__.rst", "generated/skbio.workflow.Workflow.__lt__.rst", "generated/skbio.workflow.Workflow.__ne__.rst", "generated/skbio.workflow.Workflow.__str__.rst", "generated/skbio.workflow.Workflow.initialize_state.rst", "generated/skbio.workflow.method.rst", "generated/skbio.workflow.method.__call__.rst", "generated/skbio.workflow.method.__eq__.rst", "generated/skbio.workflow.method.__ge__.rst", "generated/skbio.workflow.method.__getstate__.rst", "generated/skbio.workflow.method.__gt__.rst", "generated/skbio.workflow.method.__hash__.rst", "generated/skbio.workflow.method.__le__.rst", "generated/skbio.workflow.method.__lt__.rst", "generated/skbio.workflow.method.__ne__.rst", "generated/skbio.workflow.method.__str__.rst", "generated/skbio.workflow.requires.rst", "generated/skbio.workflow.requires.__call__.rst", "generated/skbio.workflow.requires.__eq__.rst", "generated/skbio.workflow.requires.__ge__.rst", "generated/skbio.workflow.requires.__getstate__.rst", "generated/skbio.workflow.requires.__gt__.rst", "generated/skbio.workflow.requires.__hash__.rst", "generated/skbio.workflow.requires.__le__.rst", "generated/skbio.workflow.requires.__lt__.rst", "generated/skbio.workflow.requires.__ne__.rst", "generated/skbio.workflow.requires.__str__.rst", "index.rst", "io.rst", "metadata.rst", "sequence.rst", "stats.rst", "tree.rst", "util.rst", "workflow.rst"], "titles": ["Alignments (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.alignment</span></code>)", "Diversity calculations (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity</span></code>)", "skbio.alignment.AlignmentStructure", "skbio.alignment.AlignmentStructure.__eq__", "skbio.alignment.AlignmentStructure.__ge__", "skbio.alignment.AlignmentStructure.__getitem__", "skbio.alignment.AlignmentStructure.__getstate__", "skbio.alignment.AlignmentStructure.__gt__", "skbio.alignment.AlignmentStructure.__hash__", "skbio.alignment.AlignmentStructure.__le__", "skbio.alignment.AlignmentStructure.__lt__", "skbio.alignment.AlignmentStructure.__ne__", "skbio.alignment.AlignmentStructure.__setstate__", "skbio.alignment.AlignmentStructure.__str__", "skbio.alignment.AlignmentStructure.is_zero_based", "skbio.alignment.AlignmentStructure.set_zero_based", "skbio.alignment.StripedSmithWaterman", "skbio.alignment.StripedSmithWaterman.__call__", "skbio.alignment.StripedSmithWaterman.__eq__", "skbio.alignment.StripedSmithWaterman.__ge__", "skbio.alignment.StripedSmithWaterman.__getstate__", "skbio.alignment.StripedSmithWaterman.__gt__", "skbio.alignment.StripedSmithWaterman.__hash__", "skbio.alignment.StripedSmithWaterman.__le__", "skbio.alignment.StripedSmithWaterman.__lt__", "skbio.alignment.StripedSmithWaterman.__ne__", "skbio.alignment.StripedSmithWaterman.__setstate__", "skbio.alignment.StripedSmithWaterman.__str__", "skbio.alignment.TabularMSA", "skbio.alignment.TabularMSA.__bool__", "skbio.alignment.TabularMSA.__contains__", "skbio.alignment.TabularMSA.__copy__", "skbio.alignment.TabularMSA.__deepcopy__", "skbio.alignment.TabularMSA.__eq__", "skbio.alignment.TabularMSA.__ge__", "skbio.alignment.TabularMSA.__getitem__", "skbio.alignment.TabularMSA.__getstate__", "skbio.alignment.TabularMSA.__gt__", "skbio.alignment.TabularMSA.__iter__", "skbio.alignment.TabularMSA.__le__", "skbio.alignment.TabularMSA.__len__", "skbio.alignment.TabularMSA.__lt__", "skbio.alignment.TabularMSA.__ne__", "skbio.alignment.TabularMSA.__reversed__", "skbio.alignment.TabularMSA.__str__", "skbio.alignment.TabularMSA.append", "skbio.alignment.TabularMSA.consensus", "skbio.alignment.TabularMSA.conservation", "skbio.alignment.TabularMSA.extend", "skbio.alignment.TabularMSA.from_dict", "skbio.alignment.TabularMSA.gap_frequencies", "skbio.alignment.TabularMSA.has_metadata", "skbio.alignment.TabularMSA.has_positional_metadata", "skbio.alignment.TabularMSA.iter_positions", "skbio.alignment.TabularMSA.join", "skbio.alignment.TabularMSA.read", "skbio.alignment.TabularMSA.reassign_index", "skbio.alignment.TabularMSA.sort", "skbio.alignment.TabularMSA.to_dict", "skbio.alignment.TabularMSA.write", "skbio.alignment.global_pairwise_align", "skbio.alignment.global_pairwise_align_nucleotide", "skbio.alignment.global_pairwise_align_protein", "skbio.alignment.local_pairwise_align", "skbio.alignment.local_pairwise_align_nucleotide", "skbio.alignment.local_pairwise_align_protein", "skbio.alignment.local_pairwise_align_ssw", "skbio.alignment.make_identity_substitution_matrix", "Alpha diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.alpha</span></code>)", "skbio.diversity.alpha.ace", "skbio.diversity.alpha.berger_parker_d", "skbio.diversity.alpha.brillouin_d", "skbio.diversity.alpha.chao1", "skbio.diversity.alpha.chao1_ci", "skbio.diversity.alpha.dominance", "skbio.diversity.alpha.doubles", "skbio.diversity.alpha.enspie", "skbio.diversity.alpha.esty_ci", "skbio.diversity.alpha.faith_pd", "skbio.diversity.alpha.fisher_alpha", "skbio.diversity.alpha.gini_index", "skbio.diversity.alpha.goods_coverage", "skbio.diversity.alpha.heip_e", "skbio.diversity.alpha.kempton_taylor_q", "skbio.diversity.alpha.lladser_ci", "skbio.diversity.alpha.lladser_pe", "skbio.diversity.alpha.margalef", "skbio.diversity.alpha.mcintosh_d", "skbio.diversity.alpha.mcintosh_e", "skbio.diversity.alpha.menhinick", "skbio.diversity.alpha.michaelis_menten_fit", "skbio.diversity.alpha.observed_features", "skbio.diversity.alpha.observed_otus", "skbio.diversity.alpha.osd", "skbio.diversity.alpha.phydiv", "skbio.diversity.alpha.pielou_e", "skbio.diversity.alpha.robbins", "skbio.diversity.alpha.shannon", "skbio.diversity.alpha.simpson", "skbio.diversity.alpha.simpson_e", "skbio.diversity.alpha.singles", "skbio.diversity.alpha.sobs", "skbio.diversity.alpha.strong", "skbio.diversity.alpha_diversity", "Beta diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.beta</span></code>)", "skbio.diversity.beta.unweighted_unifrac", "skbio.diversity.beta.weighted_unifrac", "skbio.diversity.beta_diversity", "skbio.diversity.block_beta_diversity", "skbio.diversity.get_alpha_diversity_metrics", "skbio.diversity.get_beta_diversity_metrics", "skbio.diversity.partial_beta_diversity", "skbio.io.ArgumentOverrideWarning", "skbio.io.BLAST7FormatError", "skbio.io.ClustalFormatError", "skbio.io.EMBLFormatError", "skbio.io.FASTAFormatError", "skbio.io.FASTQFormatError", "skbio.io.FileFormatError", "skbio.io.FormatIdentificationWarning", "skbio.io.GFF3FormatError", "skbio.io.GenBankFormatError", "skbio.io.IOSourceError", "skbio.io.LSMatFormatError", "skbio.io.NewickFormatError", "skbio.io.OrdinationFormatError", "skbio.io.PhylipFormatError", "skbio.io.QSeqFormatError", "skbio.io.QUALFormatError", "skbio.io.StockholmFormatError", "skbio.io.UnrecognizedFormatError", "Simple binary dissimilarity matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.binary_dm</span></code>)", "BLAST+6 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast6</span></code>)", "BLAST+7 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast7</span></code>)", "Clustal format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.clustal</span></code>)", "EMBL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embl</span></code>)", "FASTA/QUAL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fasta</span></code>)", "FASTQ format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fastq</span></code>)", "GenBank format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.genbank</span></code>)", "GFF3 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.gff3</span></code>)", "Labeled square matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.lsmat</span></code>)", "Newick format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.newick</span></code>)", "Ordination results format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.ordination</span></code>)", "PHYLIP multiple sequence alignment format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.phylip</span></code>)", "QSeq format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.qseq</span></code>)", "Format Support", "Stockholm format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.stockholm</span></code>)", "Taxdump format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.taxdump</span></code>)", "I/O Registry (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.registry</span></code>)", "skbio.io.registry.DuplicateRegistrationError", "skbio.io.registry.Format", "skbio.io.registry.Format.__eq__", "skbio.io.registry.Format.__ge__", "skbio.io.registry.Format.__getstate__", "skbio.io.registry.Format.__gt__", "skbio.io.registry.Format.__hash__", "skbio.io.registry.Format.__le__", "skbio.io.registry.Format.__lt__", "skbio.io.registry.Format.__ne__", "skbio.io.registry.Format.__str__", "skbio.io.registry.Format.reader", "skbio.io.registry.Format.sniffer", "skbio.io.registry.Format.writer", "skbio.io.registry.IORegistry", "skbio.io.registry.IORegistry.__eq__", "skbio.io.registry.IORegistry.__ge__", "skbio.io.registry.IORegistry.__getstate__", "skbio.io.registry.IORegistry.__gt__", "skbio.io.registry.IORegistry.__hash__", "skbio.io.registry.IORegistry.__le__", "skbio.io.registry.IORegistry.__lt__", "skbio.io.registry.IORegistry.__ne__", "skbio.io.registry.IORegistry.__str__", "skbio.io.registry.IORegistry.add_format", "skbio.io.registry.IORegistry.create_format", "skbio.io.registry.IORegistry.get_reader", "skbio.io.registry.IORegistry.get_sniffer", "skbio.io.registry.IORegistry.get_writer", "skbio.io.registry.IORegistry.list_read_formats", "skbio.io.registry.IORegistry.list_write_formats", "skbio.io.registry.IORegistry.monkey_patch", "skbio.io.registry.IORegistry.read", "skbio.io.registry.IORegistry.sniff", "skbio.io.registry.IORegistry.write", "skbio.io.registry.InvalidRegistrationError", "skbio.io.registry.create_format", "skbio.io.registry.read", "skbio.io.registry.sniff", "skbio.io.registry.write", "I/O utils (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.util</span></code>)", "skbio.io.util.open", "skbio.io.util.open_file", "skbio.io.util.open_files", "skbio.metadata.Interval", "skbio.metadata.Interval.__eq__", "skbio.metadata.Interval.__ge__", "skbio.metadata.Interval.__getstate__", "skbio.metadata.Interval.__gt__", "skbio.metadata.Interval.__le__", "skbio.metadata.Interval.__lt__", "skbio.metadata.Interval.__ne__", "skbio.metadata.Interval.__str__", "skbio.metadata.Interval.drop", "skbio.metadata.IntervalMetadata", "skbio.metadata.IntervalMetadata.__copy__", "skbio.metadata.IntervalMetadata.__deepcopy__", "skbio.metadata.IntervalMetadata.__eq__", "skbio.metadata.IntervalMetadata.__ge__", "skbio.metadata.IntervalMetadata.__getstate__", "skbio.metadata.IntervalMetadata.__gt__", "skbio.metadata.IntervalMetadata.__le__", "skbio.metadata.IntervalMetadata.__lt__", "skbio.metadata.IntervalMetadata.__ne__", "skbio.metadata.IntervalMetadata.__str__", "skbio.metadata.IntervalMetadata.add", "skbio.metadata.IntervalMetadata.concat", "skbio.metadata.IntervalMetadata.drop", "skbio.metadata.IntervalMetadata.merge", "skbio.metadata.IntervalMetadata.query", "skbio.metadata.IntervalMetadata.read", "skbio.metadata.IntervalMetadata.sort", "skbio.metadata.IntervalMetadata.write", "skbio.sequence.DNA", "skbio.sequence.DNA.__bool__", "skbio.sequence.DNA.__contains__", "skbio.sequence.DNA.__copy__", "skbio.sequence.DNA.__deepcopy__", "skbio.sequence.DNA.__eq__", "skbio.sequence.DNA.__ge__", "skbio.sequence.DNA.__getitem__", "skbio.sequence.DNA.__getstate__", "skbio.sequence.DNA.__gt__", "skbio.sequence.DNA.__iter__", "skbio.sequence.DNA.__le__", "skbio.sequence.DNA.__len__", "skbio.sequence.DNA.__lt__", "skbio.sequence.DNA.__ne__", "skbio.sequence.DNA.__reversed__", "skbio.sequence.DNA.__str__", "skbio.sequence.DNA.complement", "skbio.sequence.DNA.concat", "skbio.sequence.DNA.count", "skbio.sequence.DNA.definites", "skbio.sequence.DNA.degap", "skbio.sequence.DNA.degenerates", "skbio.sequence.DNA.distance", "skbio.sequence.DNA.expand_degenerates", "skbio.sequence.DNA.find_motifs", "skbio.sequence.DNA.find_with_regex", "skbio.sequence.DNA.frequencies", "skbio.sequence.DNA.gaps", "skbio.sequence.DNA.gc_content", "skbio.sequence.DNA.gc_frequency", "skbio.sequence.DNA.has_definites", "skbio.sequence.DNA.has_degenerates", "skbio.sequence.DNA.has_gaps", "skbio.sequence.DNA.has_interval_metadata", "skbio.sequence.DNA.has_metadata", "skbio.sequence.DNA.has_nondegenerates", "skbio.sequence.DNA.has_positional_metadata", "skbio.sequence.DNA.index", "skbio.sequence.DNA.is_reverse_complement", "skbio.sequence.DNA.iter_contiguous", "skbio.sequence.DNA.iter_kmers", "skbio.sequence.DNA.kmer_frequencies", "skbio.sequence.DNA.lowercase", "skbio.sequence.DNA.match_frequency", "skbio.sequence.DNA.matches", "skbio.sequence.DNA.mismatch_frequency", "skbio.sequence.DNA.mismatches", "skbio.sequence.DNA.nondegenerates", "skbio.sequence.DNA.read", "skbio.sequence.DNA.replace", "skbio.sequence.DNA.reverse_complement", "skbio.sequence.DNA.to_indices", "skbio.sequence.DNA.to_regex", "skbio.sequence.DNA.transcribe", "skbio.sequence.DNA.translate", "skbio.sequence.DNA.translate_six_frames", "skbio.sequence.DNA.write", "skbio.sequence.GeneticCode", "skbio.sequence.GeneticCode.__eq__", "skbio.sequence.GeneticCode.__ge__", "skbio.sequence.GeneticCode.__getstate__", "skbio.sequence.GeneticCode.__gt__", "skbio.sequence.GeneticCode.__le__", "skbio.sequence.GeneticCode.__lt__", "skbio.sequence.GeneticCode.__ne__", "skbio.sequence.GeneticCode.__str__", "skbio.sequence.GeneticCode.from_ncbi", "skbio.sequence.GeneticCode.translate", "skbio.sequence.GeneticCode.translate_six_frames", "skbio.sequence.GrammaredSequence", "skbio.sequence.GrammaredSequence.__bool__", "skbio.sequence.GrammaredSequence.__contains__", "skbio.sequence.GrammaredSequence.__copy__", "skbio.sequence.GrammaredSequence.__deepcopy__", "skbio.sequence.GrammaredSequence.__eq__", "skbio.sequence.GrammaredSequence.__ge__", "skbio.sequence.GrammaredSequence.__getitem__", "skbio.sequence.GrammaredSequence.__getstate__", "skbio.sequence.GrammaredSequence.__gt__", "skbio.sequence.GrammaredSequence.__iter__", "skbio.sequence.GrammaredSequence.__le__", "skbio.sequence.GrammaredSequence.__len__", "skbio.sequence.GrammaredSequence.__lt__", "skbio.sequence.GrammaredSequence.__ne__", "skbio.sequence.GrammaredSequence.__reversed__", "skbio.sequence.GrammaredSequence.__str__", "skbio.sequence.GrammaredSequence.concat", "skbio.sequence.GrammaredSequence.count", "skbio.sequence.GrammaredSequence.definites", "skbio.sequence.GrammaredSequence.degap", "skbio.sequence.GrammaredSequence.degenerates", "skbio.sequence.GrammaredSequence.distance", "skbio.sequence.GrammaredSequence.expand_degenerates", "skbio.sequence.GrammaredSequence.find_motifs", "skbio.sequence.GrammaredSequence.find_with_regex", "skbio.sequence.GrammaredSequence.frequencies", "skbio.sequence.GrammaredSequence.gaps", "skbio.sequence.GrammaredSequence.has_definites", "skbio.sequence.GrammaredSequence.has_degenerates", "skbio.sequence.GrammaredSequence.has_gaps", "skbio.sequence.GrammaredSequence.has_interval_metadata", "skbio.sequence.GrammaredSequence.has_metadata", "skbio.sequence.GrammaredSequence.has_nondegenerates", "skbio.sequence.GrammaredSequence.has_positional_metadata", "skbio.sequence.GrammaredSequence.index", "skbio.sequence.GrammaredSequence.iter_contiguous", "skbio.sequence.GrammaredSequence.iter_kmers", "skbio.sequence.GrammaredSequence.kmer_frequencies", "skbio.sequence.GrammaredSequence.lowercase", "skbio.sequence.GrammaredSequence.match_frequency", "skbio.sequence.GrammaredSequence.matches", "skbio.sequence.GrammaredSequence.mismatch_frequency", "skbio.sequence.GrammaredSequence.mismatches", "skbio.sequence.GrammaredSequence.nondegenerates", "skbio.sequence.GrammaredSequence.read", "skbio.sequence.GrammaredSequence.replace", "skbio.sequence.GrammaredSequence.to_indices", "skbio.sequence.GrammaredSequence.to_regex", "skbio.sequence.GrammaredSequence.write", "skbio.sequence.Protein", "skbio.sequence.Protein.__bool__", "skbio.sequence.Protein.__contains__", "skbio.sequence.Protein.__copy__", "skbio.sequence.Protein.__deepcopy__", "skbio.sequence.Protein.__eq__", "skbio.sequence.Protein.__ge__", "skbio.sequence.Protein.__getitem__", "skbio.sequence.Protein.__getstate__", "skbio.sequence.Protein.__gt__", "skbio.sequence.Protein.__iter__", "skbio.sequence.Protein.__le__", "skbio.sequence.Protein.__len__", "skbio.sequence.Protein.__lt__", "skbio.sequence.Protein.__ne__", "skbio.sequence.Protein.__reversed__", "skbio.sequence.Protein.__str__", "skbio.sequence.Protein.concat", "skbio.sequence.Protein.count", "skbio.sequence.Protein.definites", "skbio.sequence.Protein.degap", "skbio.sequence.Protein.degenerates", "skbio.sequence.Protein.distance", "skbio.sequence.Protein.expand_degenerates", "skbio.sequence.Protein.find_motifs", "skbio.sequence.Protein.find_with_regex", "skbio.sequence.Protein.frequencies", "skbio.sequence.Protein.gaps", "skbio.sequence.Protein.has_definites", "skbio.sequence.Protein.has_degenerates", "skbio.sequence.Protein.has_gaps", "skbio.sequence.Protein.has_interval_metadata", "skbio.sequence.Protein.has_metadata", "skbio.sequence.Protein.has_nondegenerates", "skbio.sequence.Protein.has_positional_metadata", "skbio.sequence.Protein.has_stops", "skbio.sequence.Protein.index", "skbio.sequence.Protein.iter_contiguous", "skbio.sequence.Protein.iter_kmers", "skbio.sequence.Protein.kmer_frequencies", "skbio.sequence.Protein.lowercase", "skbio.sequence.Protein.match_frequency", "skbio.sequence.Protein.matches", "skbio.sequence.Protein.mismatch_frequency", "skbio.sequence.Protein.mismatches", "skbio.sequence.Protein.nondegenerates", "skbio.sequence.Protein.read", "skbio.sequence.Protein.replace", "skbio.sequence.Protein.stops", "skbio.sequence.Protein.to_indices", "skbio.sequence.Protein.to_regex", "skbio.sequence.Protein.write", "skbio.sequence.RNA", "skbio.sequence.RNA.__bool__", "skbio.sequence.RNA.__contains__", "skbio.sequence.RNA.__copy__", "skbio.sequence.RNA.__deepcopy__", "skbio.sequence.RNA.__eq__", "skbio.sequence.RNA.__ge__", "skbio.sequence.RNA.__getitem__", "skbio.sequence.RNA.__getstate__", "skbio.sequence.RNA.__gt__", "skbio.sequence.RNA.__iter__", "skbio.sequence.RNA.__le__", "skbio.sequence.RNA.__len__", "skbio.sequence.RNA.__lt__", "skbio.sequence.RNA.__ne__", "skbio.sequence.RNA.__reversed__", "skbio.sequence.RNA.__str__", "skbio.sequence.RNA.complement", "skbio.sequence.RNA.concat", "skbio.sequence.RNA.count", "skbio.sequence.RNA.definites", "skbio.sequence.RNA.degap", "skbio.sequence.RNA.degenerates", "skbio.sequence.RNA.distance", "skbio.sequence.RNA.expand_degenerates", "skbio.sequence.RNA.find_motifs", "skbio.sequence.RNA.find_with_regex", "skbio.sequence.RNA.frequencies", "skbio.sequence.RNA.gaps", "skbio.sequence.RNA.gc_content", "skbio.sequence.RNA.gc_frequency", "skbio.sequence.RNA.has_definites", "skbio.sequence.RNA.has_degenerates", "skbio.sequence.RNA.has_gaps", "skbio.sequence.RNA.has_interval_metadata", "skbio.sequence.RNA.has_metadata", "skbio.sequence.RNA.has_nondegenerates", "skbio.sequence.RNA.has_positional_metadata", "skbio.sequence.RNA.index", "skbio.sequence.RNA.is_reverse_complement", "skbio.sequence.RNA.iter_contiguous", "skbio.sequence.RNA.iter_kmers", "skbio.sequence.RNA.kmer_frequencies", "skbio.sequence.RNA.lowercase", "skbio.sequence.RNA.match_frequency", "skbio.sequence.RNA.matches", "skbio.sequence.RNA.mismatch_frequency", "skbio.sequence.RNA.mismatches", "skbio.sequence.RNA.nondegenerates", "skbio.sequence.RNA.read", "skbio.sequence.RNA.replace", "skbio.sequence.RNA.reverse_complement", "skbio.sequence.RNA.reverse_transcribe", "skbio.sequence.RNA.to_indices", "skbio.sequence.RNA.to_regex", "skbio.sequence.RNA.translate", "skbio.sequence.RNA.translate_six_frames", "skbio.sequence.RNA.write", "skbio.sequence.Sequence", "skbio.sequence.Sequence.__bool__", "skbio.sequence.Sequence.__contains__", "skbio.sequence.Sequence.__copy__", "skbio.sequence.Sequence.__deepcopy__", "skbio.sequence.Sequence.__eq__", "skbio.sequence.Sequence.__ge__", "skbio.sequence.Sequence.__getitem__", "skbio.sequence.Sequence.__getstate__", "skbio.sequence.Sequence.__gt__", "skbio.sequence.Sequence.__iter__", "skbio.sequence.Sequence.__le__", "skbio.sequence.Sequence.__len__", "skbio.sequence.Sequence.__lt__", "skbio.sequence.Sequence.__ne__", "skbio.sequence.Sequence.__reversed__", "skbio.sequence.Sequence.__str__", "skbio.sequence.Sequence.concat", "skbio.sequence.Sequence.count", "skbio.sequence.Sequence.distance", "skbio.sequence.Sequence.find_with_regex", "skbio.sequence.Sequence.frequencies", "skbio.sequence.Sequence.has_interval_metadata", "skbio.sequence.Sequence.has_metadata", "skbio.sequence.Sequence.has_positional_metadata", "skbio.sequence.Sequence.index", "skbio.sequence.Sequence.iter_contiguous", "skbio.sequence.Sequence.iter_kmers", "skbio.sequence.Sequence.kmer_frequencies", "skbio.sequence.Sequence.lowercase", "skbio.sequence.Sequence.match_frequency", "skbio.sequence.Sequence.matches", "skbio.sequence.Sequence.mismatch_frequency", "skbio.sequence.Sequence.mismatches", "skbio.sequence.Sequence.read", "skbio.sequence.Sequence.replace", "skbio.sequence.Sequence.to_indices", "skbio.sequence.Sequence.write", "skbio.sequence.SubstitutionMatrix", "skbio.sequence.SubstitutionMatrix.__contains__", "skbio.sequence.SubstitutionMatrix.__eq__", "skbio.sequence.SubstitutionMatrix.__ge__", "skbio.sequence.SubstitutionMatrix.__getitem__", "skbio.sequence.SubstitutionMatrix.__getstate__", "skbio.sequence.SubstitutionMatrix.__gt__", "skbio.sequence.SubstitutionMatrix.__le__", "skbio.sequence.SubstitutionMatrix.__lt__", "skbio.sequence.SubstitutionMatrix.__ne__", "skbio.sequence.SubstitutionMatrix.__str__", "skbio.sequence.SubstitutionMatrix.between", "skbio.sequence.SubstitutionMatrix.by_name", "skbio.sequence.SubstitutionMatrix.copy", "skbio.sequence.SubstitutionMatrix.filter", "skbio.sequence.SubstitutionMatrix.from_dict", "skbio.sequence.SubstitutionMatrix.from_iterable", "skbio.sequence.SubstitutionMatrix.get_names", "skbio.sequence.SubstitutionMatrix.identity", "skbio.sequence.SubstitutionMatrix.index", "skbio.sequence.SubstitutionMatrix.plot", "skbio.sequence.SubstitutionMatrix.read", "skbio.sequence.SubstitutionMatrix.redundant_form", "skbio.sequence.SubstitutionMatrix.to_data_frame", "skbio.sequence.SubstitutionMatrix.to_dict", "skbio.sequence.SubstitutionMatrix.transpose", "skbio.sequence.SubstitutionMatrix.within", "skbio.sequence.SubstitutionMatrix.write", "Sequence distance metrics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence.distance</span></code>)", "skbio.sequence.distance.hamming", "skbio.sequence.distance.kmer_distance", "Composition Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.composition</span></code>)", "skbio.stats.composition.alr", "skbio.stats.composition.alr_inv", "skbio.stats.composition.ancom", "skbio.stats.composition.centralize", "skbio.stats.composition.closure", "skbio.stats.composition.clr", "skbio.stats.composition.clr_inv", "skbio.stats.composition.ilr", "skbio.stats.composition.ilr_inv", "skbio.stats.composition.inner", "skbio.stats.composition.multiplicative_replacement", "skbio.stats.composition.pairwise_vlr", "skbio.stats.composition.perturb", "skbio.stats.composition.perturb_inv", "skbio.stats.composition.power", "skbio.stats.composition.sbp_basis", "skbio.stats.composition.tree_basis", "skbio.stats.composition.vlr", "Distance matrices and distance-based statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.distance</span></code>)", "skbio.stats.distance.DissimilarityMatrix", "skbio.stats.distance.DissimilarityMatrix.__contains__", "skbio.stats.distance.DissimilarityMatrix.__eq__", "skbio.stats.distance.DissimilarityMatrix.__ge__", "skbio.stats.distance.DissimilarityMatrix.__getitem__", "skbio.stats.distance.DissimilarityMatrix.__getstate__", "skbio.stats.distance.DissimilarityMatrix.__gt__", "skbio.stats.distance.DissimilarityMatrix.__le__", "skbio.stats.distance.DissimilarityMatrix.__lt__", "skbio.stats.distance.DissimilarityMatrix.__ne__", "skbio.stats.distance.DissimilarityMatrix.__str__", "skbio.stats.distance.DissimilarityMatrix.between", "skbio.stats.distance.DissimilarityMatrix.copy", "skbio.stats.distance.DissimilarityMatrix.filter", "skbio.stats.distance.DissimilarityMatrix.from_iterable", "skbio.stats.distance.DissimilarityMatrix.index", "skbio.stats.distance.DissimilarityMatrix.plot", "skbio.stats.distance.DissimilarityMatrix.read", "skbio.stats.distance.DissimilarityMatrix.redundant_form", "skbio.stats.distance.DissimilarityMatrix.to_data_frame", "skbio.stats.distance.DissimilarityMatrix.transpose", "skbio.stats.distance.DissimilarityMatrix.within", "skbio.stats.distance.DissimilarityMatrix.write", "skbio.stats.distance.DissimilarityMatrixError", "skbio.stats.distance.DistanceMatrix", "skbio.stats.distance.DistanceMatrix.__contains__", "skbio.stats.distance.DistanceMatrix.__eq__", "skbio.stats.distance.DistanceMatrix.__ge__", "skbio.stats.distance.DistanceMatrix.__getitem__", "skbio.stats.distance.DistanceMatrix.__getstate__", "skbio.stats.distance.DistanceMatrix.__gt__", "skbio.stats.distance.DistanceMatrix.__le__", "skbio.stats.distance.DistanceMatrix.__lt__", "skbio.stats.distance.DistanceMatrix.__ne__", "skbio.stats.distance.DistanceMatrix.__str__", "skbio.stats.distance.DistanceMatrix.between", "skbio.stats.distance.DistanceMatrix.condensed_form", "skbio.stats.distance.DistanceMatrix.copy", "skbio.stats.distance.DistanceMatrix.filter", "skbio.stats.distance.DistanceMatrix.from_iterable", "skbio.stats.distance.DistanceMatrix.index", "skbio.stats.distance.DistanceMatrix.permute", "skbio.stats.distance.DistanceMatrix.plot", "skbio.stats.distance.DistanceMatrix.read", "skbio.stats.distance.DistanceMatrix.redundant_form", "skbio.stats.distance.DistanceMatrix.to_data_frame", "skbio.stats.distance.DistanceMatrix.to_series", "skbio.stats.distance.DistanceMatrix.transpose", "skbio.stats.distance.DistanceMatrix.within", "skbio.stats.distance.DistanceMatrix.write", "skbio.stats.distance.DistanceMatrixError", "skbio.stats.distance.MissingIDError", "skbio.stats.distance.anosim", "skbio.stats.distance.bioenv", "skbio.stats.distance.mantel", "skbio.stats.distance.permanova", "skbio.stats.distance.permdisp", "skbio.stats.distance.pwmantel", "skbio.stats.distance.randdm", "Evolutionary statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.evolve</span></code>)", "skbio.stats.evolve.hommola_cospeciation", "Gradient analyses (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.gradient</span></code>)", "skbio.stats.gradient.AverageGradientANOVA", "skbio.stats.gradient.AverageGradientANOVA.__eq__", "skbio.stats.gradient.AverageGradientANOVA.__ge__", "skbio.stats.gradient.AverageGradientANOVA.__getstate__", "skbio.stats.gradient.AverageGradientANOVA.__gt__", "skbio.stats.gradient.AverageGradientANOVA.__hash__", "skbio.stats.gradient.AverageGradientANOVA.__le__", "skbio.stats.gradient.AverageGradientANOVA.__lt__", "skbio.stats.gradient.AverageGradientANOVA.__ne__", "skbio.stats.gradient.AverageGradientANOVA.__str__", "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "skbio.stats.gradient.CategoryResults", "skbio.stats.gradient.CategoryResults.__eq__", "skbio.stats.gradient.CategoryResults.__ge__", "skbio.stats.gradient.CategoryResults.__getstate__", "skbio.stats.gradient.CategoryResults.__gt__", "skbio.stats.gradient.CategoryResults.__hash__", "skbio.stats.gradient.CategoryResults.__le__", "skbio.stats.gradient.CategoryResults.__lt__", "skbio.stats.gradient.CategoryResults.__ne__", "skbio.stats.gradient.CategoryResults.__str__", "skbio.stats.gradient.CategoryResults.to_files", "skbio.stats.gradient.FirstDifferenceGradientANOVA", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVA", "skbio.stats.gradient.GradientANOVA.__eq__", "skbio.stats.gradient.GradientANOVA.__ge__", "skbio.stats.gradient.GradientANOVA.__getstate__", "skbio.stats.gradient.GradientANOVA.__gt__", "skbio.stats.gradient.GradientANOVA.__hash__", "skbio.stats.gradient.GradientANOVA.__le__", "skbio.stats.gradient.GradientANOVA.__lt__", "skbio.stats.gradient.GradientANOVA.__ne__", "skbio.stats.gradient.GradientANOVA.__str__", "skbio.stats.gradient.GradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVAResults", "skbio.stats.gradient.GradientANOVAResults.__eq__", "skbio.stats.gradient.GradientANOVAResults.__ge__", "skbio.stats.gradient.GradientANOVAResults.__getstate__", "skbio.stats.gradient.GradientANOVAResults.__gt__", "skbio.stats.gradient.GradientANOVAResults.__hash__", "skbio.stats.gradient.GradientANOVAResults.__le__", "skbio.stats.gradient.GradientANOVAResults.__lt__", "skbio.stats.gradient.GradientANOVAResults.__ne__", "skbio.stats.gradient.GradientANOVAResults.__str__", "skbio.stats.gradient.GradientANOVAResults.to_files", "skbio.stats.gradient.GroupResults", "skbio.stats.gradient.GroupResults.__eq__", "skbio.stats.gradient.GroupResults.__ge__", "skbio.stats.gradient.GroupResults.__getstate__", "skbio.stats.gradient.GroupResults.__gt__", "skbio.stats.gradient.GroupResults.__hash__", "skbio.stats.gradient.GroupResults.__le__", "skbio.stats.gradient.GroupResults.__lt__", "skbio.stats.gradient.GroupResults.__ne__", "skbio.stats.gradient.GroupResults.__str__", "skbio.stats.gradient.GroupResults.to_files", "skbio.stats.gradient.TrajectoryGradientANOVA", "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "skbio.stats.gradient.WindowDifferenceGradientANOVA", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "skbio.stats.isubsample", "Ordination methods (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.ordination</span></code>)", "skbio.stats.ordination.OrdinationResults", "skbio.stats.ordination.OrdinationResults.__eq__", "skbio.stats.ordination.OrdinationResults.__ge__", "skbio.stats.ordination.OrdinationResults.__getstate__", "skbio.stats.ordination.OrdinationResults.__gt__", "skbio.stats.ordination.OrdinationResults.__hash__", "skbio.stats.ordination.OrdinationResults.__le__", "skbio.stats.ordination.OrdinationResults.__lt__", "skbio.stats.ordination.OrdinationResults.__ne__", "skbio.stats.ordination.OrdinationResults.__str__", "skbio.stats.ordination.OrdinationResults.plot", "skbio.stats.ordination.OrdinationResults.read", "skbio.stats.ordination.OrdinationResults.write", "skbio.stats.ordination.ca", "skbio.stats.ordination.cca", "skbio.stats.ordination.corr", "skbio.stats.ordination.e_matrix", "skbio.stats.ordination.f_matrix", "skbio.stats.ordination.mean_and_std", "skbio.stats.ordination.pcoa", "skbio.stats.ordination.pcoa_biplot", "skbio.stats.ordination.rda", "skbio.stats.ordination.scale", "skbio.stats.ordination.svd_rank", "Empirical Power Estimation (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.power</span></code>)", "skbio.stats.power.confidence_bound", "skbio.stats.power.paired_subsamples", "skbio.stats.power.subsample_paired_power", "skbio.stats.power.subsample_power", "skbio.stats.subsample_counts", "skbio.tree.DuplicateNodeError", "skbio.tree.MissingNodeError", "skbio.tree.NoLengthError", "skbio.tree.NoParentError", "skbio.tree.TreeError", "skbio.tree.TreeNode", "skbio.tree.TreeNode.__copy__", "skbio.tree.TreeNode.__deepcopy__", "skbio.tree.TreeNode.__eq__", "skbio.tree.TreeNode.__ge__", "skbio.tree.TreeNode.__getitem__", "skbio.tree.TreeNode.__getstate__", "skbio.tree.TreeNode.__gt__", "skbio.tree.TreeNode.__hash__", "skbio.tree.TreeNode.__iter__", "skbio.tree.TreeNode.__le__", "skbio.tree.TreeNode.__len__", "skbio.tree.TreeNode.__lt__", "skbio.tree.TreeNode.__ne__", "skbio.tree.TreeNode.__str__", "skbio.tree.TreeNode.accumulate_to_ancestor", "skbio.tree.TreeNode.ancestors", "skbio.tree.TreeNode.append", "skbio.tree.TreeNode.ascii_art", "skbio.tree.TreeNode.assign_ids", "skbio.tree.TreeNode.assign_supports", "skbio.tree.TreeNode.bifurcate", "skbio.tree.TreeNode.cache_attr", "skbio.tree.TreeNode.compare_rfd", "skbio.tree.TreeNode.compare_subsets", "skbio.tree.TreeNode.compare_tip_distances", "skbio.tree.TreeNode.copy", "skbio.tree.TreeNode.count", "skbio.tree.TreeNode.create_caches", "skbio.tree.TreeNode.deepcopy", "skbio.tree.TreeNode.descending_branch_length", "skbio.tree.TreeNode.distance", "skbio.tree.TreeNode.extend", "skbio.tree.TreeNode.find", "skbio.tree.TreeNode.find_all", "skbio.tree.TreeNode.find_by_func", "skbio.tree.TreeNode.find_by_id", "skbio.tree.TreeNode.from_linkage_matrix", "skbio.tree.TreeNode.from_taxdump", "skbio.tree.TreeNode.from_taxonomy", "skbio.tree.TreeNode.get_max_distance", "skbio.tree.TreeNode.has_children", "skbio.tree.TreeNode.index_tree", "skbio.tree.TreeNode.invalidate_caches", "skbio.tree.TreeNode.is_root", "skbio.tree.TreeNode.is_tip", "skbio.tree.TreeNode.lca", "skbio.tree.TreeNode.levelorder", "skbio.tree.TreeNode.lowest_common_ancestor", "skbio.tree.TreeNode.neighbors", "skbio.tree.TreeNode.non_tips", "skbio.tree.TreeNode.observed_node_counts", "skbio.tree.TreeNode.pop", "skbio.tree.TreeNode.postorder", "skbio.tree.TreeNode.pre_and_postorder", "skbio.tree.TreeNode.preorder", "skbio.tree.TreeNode.prune", "skbio.tree.TreeNode.read", "skbio.tree.TreeNode.remove", "skbio.tree.TreeNode.remove_deleted", "skbio.tree.TreeNode.root", "skbio.tree.TreeNode.root_at", "skbio.tree.TreeNode.root_at_midpoint", "skbio.tree.TreeNode.shear", "skbio.tree.TreeNode.shuffle", "skbio.tree.TreeNode.siblings", "skbio.tree.TreeNode.subset", "skbio.tree.TreeNode.subsets", "skbio.tree.TreeNode.subtree", "skbio.tree.TreeNode.tip_tip_distances", "skbio.tree.TreeNode.tips", "skbio.tree.TreeNode.to_array", "skbio.tree.TreeNode.to_taxonomy", "skbio.tree.TreeNode.traverse", "skbio.tree.TreeNode.unpack", "skbio.tree.TreeNode.unpack_by_func", "skbio.tree.TreeNode.unrooted_copy", "skbio.tree.TreeNode.unrooted_deepcopy", "skbio.tree.TreeNode.write", "skbio.tree.majority_rule", "skbio.tree.nj", "skbio.util.EfficiencyWarning", "skbio.util.RepresentationWarning", "skbio.util.assert_data_frame_almost_equal", "skbio.util.assert_ordination_results_equal", "skbio.util.cardinal_to_ordinal", "skbio.util.classproperty", "skbio.util.classproperty.__delete__", "skbio.util.classproperty.__eq__", "skbio.util.classproperty.__ge__", "skbio.util.classproperty.__get__", "skbio.util.classproperty.__getstate__", "skbio.util.classproperty.__gt__", "skbio.util.classproperty.__hash__", "skbio.util.classproperty.__le__", "skbio.util.classproperty.__lt__", "skbio.util.classproperty.__ne__", "skbio.util.classproperty.__set__", "skbio.util.classproperty.__set_name__", "skbio.util.classproperty.__str__", "skbio.util.classproperty.deleter", "skbio.util.classproperty.getter", "skbio.util.classproperty.setter", "skbio.util.find_duplicates", "skbio.util.get_data_path", "skbio.util.safe_md5", "skbio.workflow.Workflow", "skbio.workflow.Workflow.__call__", "skbio.workflow.Workflow.__eq__", "skbio.workflow.Workflow.__ge__", "skbio.workflow.Workflow.__getstate__", "skbio.workflow.Workflow.__gt__", "skbio.workflow.Workflow.__hash__", "skbio.workflow.Workflow.__le__", "skbio.workflow.Workflow.__lt__", "skbio.workflow.Workflow.__ne__", "skbio.workflow.Workflow.__str__", "skbio.workflow.Workflow.initialize_state", "skbio.workflow.method", "skbio.workflow.method.__call__", "skbio.workflow.method.__eq__", "skbio.workflow.method.__ge__", "skbio.workflow.method.__getstate__", "skbio.workflow.method.__gt__", "skbio.workflow.method.__hash__", "skbio.workflow.method.__le__", "skbio.workflow.method.__lt__", "skbio.workflow.method.__ne__", "skbio.workflow.method.__str__", "skbio.workflow.requires", "skbio.workflow.requires.__call__", "skbio.workflow.requires.__eq__", "skbio.workflow.requires.__ge__", "skbio.workflow.requires.__getstate__", "skbio.workflow.requires.__gt__", "skbio.workflow.requires.__hash__", "skbio.workflow.requires.__le__", "skbio.workflow.requires.__lt__", "skbio.workflow.requires.__ne__", "skbio.workflow.requires.__str__", "Home", "File I/O (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io</span></code>)", "Metadata (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.metadata</span></code>)", "Sequences (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence</span></code>)", "Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats</span></code>)", "Tree representations (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.tree</span></code>)", "Utility functionality (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.util</span></code>)", "Constructing workflows (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.workflow</span></code>)"], "terms": {"thi": [0, 1, 16, 30, 31, 32, 33, 35, 40, 42, 44, 45, 46, 47, 48, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 78, 79, 80, 83, 84, 85, 90, 93, 94, 103, 104, 105, 106, 107, 108, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 160, 161, 162, 174, 182, 185, 187, 189, 190, 191, 193, 194, 200, 202, 203, 204, 205, 206, 212, 214, 215, 216, 217, 218, 219, 221, 224, 225, 226, 227, 229, 232, 234, 236, 237, 240, 241, 245, 249, 251, 252, 260, 261, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 278, 279, 280, 289, 290, 291, 292, 294, 295, 296, 297, 299, 302, 304, 306, 307, 309, 310, 314, 318, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 344, 345, 346, 347, 349, 352, 354, 356, 357, 359, 360, 364, 368, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 391, 392, 393, 396, 397, 398, 399, 401, 404, 406, 408, 409, 412, 413, 417, 421, 423, 424, 432, 433, 434, 435, 436, 438, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 454, 455, 456, 457, 459, 462, 464, 466, 467, 469, 470, 471, 473, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 494, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 531, 532, 534, 535, 536, 538, 540, 543, 545, 558, 559, 560, 563, 565, 567, 569, 582, 584, 585, 586, 587, 590, 593, 594, 595, 597, 599, 600, 601, 602, 691, 692, 703, 704, 705, 707, 712, 713, 714, 717, 719, 720, 721, 728, 744, 746, 748, 750, 752, 753, 756, 758, 759, 761, 763, 764, 766, 770, 777, 781, 784, 785, 787, 789, 790, 792, 793, 794, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 832, 833, 834, 835, 845, 857, 869, 870, 871, 872, 873, 874, 875], "modul": [0, 1, 146, 148, 189, 518, 521, 524, 602, 692, 717, 832, 833, 870, 871, 873, 875], "provid": [0, 1, 16, 28, 45, 47, 48, 55, 56, 61, 64, 66, 68, 78, 83, 94, 103, 104, 105, 106, 107, 112, 132, 136, 137, 141, 143, 145, 146, 147, 148, 160, 162, 181, 182, 186, 187, 189, 191, 219, 227, 249, 262, 265, 271, 274, 297, 318, 328, 331, 337, 339, 347, 368, 379, 382, 388, 391, 394, 399, 421, 434, 437, 443, 447, 452, 457, 473, 478, 481, 486, 488, 490, 506, 511, 516, 521, 540, 541, 555, 558, 562, 580, 584, 589, 593, 594, 595, 596, 597, 599, 602, 636, 691, 693, 703, 704, 708, 717, 719, 720, 750, 758, 766, 779, 785, 789, 792, 799, 807, 808, 835, 869, 870, 871, 873, 874, 875], "comput": [0, 1, 46, 47, 50, 69, 72, 78, 85, 96, 102, 103, 104, 105, 106, 107, 108, 111, 203, 245, 249, 314, 318, 364, 368, 417, 421, 471, 473, 506, 518, 519, 520, 524, 533, 537, 538, 539, 540, 555, 580, 593, 594, 595, 596, 597, 598, 601, 602, 603, 613, 635, 636, 646, 647, 658, 669, 679, 680, 690, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 759, 795, 797, 807, 833, 871, 873], "manipul": [0, 51, 52, 145, 257, 259, 324, 326, 374, 376, 429, 431, 452, 475, 476, 521, 540], "sequenc": [0, 1, 2, 16, 28, 29, 31, 32, 33, 38, 40, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 132, 133, 134, 135, 137, 138, 139, 144, 147, 193, 203, 215, 541, 599, 691, 721, 868, 869, 875], "dna": [0, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 48, 49, 50, 52, 53, 54, 56, 57, 58, 61, 64, 66, 134, 135, 136, 137, 138, 139, 143, 144, 146, 280, 292, 309, 311, 312, 313, 315, 316, 319, 320, 321, 322, 325, 326, 328, 336, 339, 340, 359, 361, 362, 363, 365, 366, 369, 370, 371, 372, 375, 376, 379, 387, 391, 392, 394, 411, 412, 414, 415, 416, 418, 419, 422, 423, 424, 425, 426, 427, 430, 431, 433, 434, 442, 445, 446, 447, 448, 452, 469, 476, 478, 488, 541, 869, 871], "rna": [0, 28, 33, 61, 64, 66, 134, 135, 136, 137, 138, 143, 144, 146, 222, 240, 276, 277, 278, 280, 290, 291, 292, 309, 359, 452, 469, 871], "protein": [0, 16, 28, 47, 60, 62, 65, 66, 132, 134, 135, 136, 137, 138, 143, 144, 146, 262, 274, 277, 278, 280, 290, 291, 292, 328, 339, 434, 447, 449, 450, 452, 478, 488, 502, 720, 871], "can": [0, 1, 16, 28, 53, 56, 60, 61, 62, 66, 67, 74, 78, 79, 94, 103, 105, 106, 107, 109, 110, 111, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 150, 190, 193, 202, 203, 218, 240, 245, 247, 262, 272, 309, 314, 316, 328, 338, 359, 364, 366, 379, 389, 412, 417, 419, 434, 444, 452, 469, 471, 478, 487, 490, 494, 502, 518, 521, 524, 537, 540, 541, 545, 565, 569, 593, 594, 595, 597, 598, 599, 602, 692, 703, 706, 711, 712, 713, 714, 717, 719, 720, 721, 728, 749, 751, 759, 789, 792, 799, 807, 808, 809, 813, 814, 834, 857, 871, 873, 875], "well": [0, 137, 145, 148, 452, 540, 541, 594, 596, 597, 601, 693, 707, 807, 869, 873, 874], "custom": [0, 1, 147, 222, 245, 280, 281, 292, 314, 342, 364, 394, 417, 471, 703], "alphabet": [0, 57, 67, 109, 110, 132, 136, 222, 274, 280, 292, 339, 342, 391, 394, 447, 452, 488, 490, 502, 505, 508, 519, 871], "load": [0, 136, 137, 142, 144, 145, 502, 524, 540, 541, 593, 594, 597, 598, 832, 833, 869], "two": [0, 1, 60, 61, 62, 63, 64, 65, 66, 69, 74, 94, 105, 106, 132, 133, 136, 137, 138, 139, 141, 143, 144, 147, 193, 194, 200, 206, 212, 215, 220, 222, 227, 240, 245, 262, 266, 268, 297, 309, 314, 328, 332, 334, 342, 347, 359, 364, 379, 383, 385, 394, 399, 412, 417, 434, 438, 440, 457, 469, 471, 478, 482, 484, 490, 492, 494, 499, 501, 506, 512, 519, 520, 521, 524, 537, 538, 540, 541, 543, 545, 550, 552, 555, 559, 565, 567, 569, 574, 576, 580, 585, 593, 594, 595, 596, 597, 598, 599, 601, 707, 712, 717, 720, 721, 752, 753, 759, 768, 790, 792, 807, 812, 869, 871, 873], "have": [0, 1, 16, 46, 49, 50, 53, 54, 66, 68, 78, 83, 95, 99, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 180, 190, 193, 203, 204, 205, 227, 240, 246, 262, 290, 297, 309, 315, 328, 347, 359, 365, 379, 399, 412, 418, 434, 457, 469, 478, 492, 508, 524, 538, 540, 543, 567, 595, 601, 602, 624, 636, 657, 668, 691, 703, 706, 707, 708, 711, 712, 714, 715, 717, 719, 720, 721, 722, 728, 747, 748, 749, 758, 760, 761, 784, 790, 797, 799, 800, 809, 811, 871, 873, 875], "been": [0, 60, 61, 62, 111, 136, 137, 138, 143, 180, 182, 187, 190, 262, 328, 379, 434, 452, 478, 595, 601, 722, 784], "previous": [0, 265, 272, 331, 338, 382, 389, 437, 444, 481, 487, 875], "tabularmsa": [0, 60, 61, 62, 63, 64, 65, 66, 126, 134, 137, 143, 146, 203, 869], "object": [0, 1, 16, 28, 31, 32, 33, 42, 45, 48, 49, 51, 52, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 108, 111, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 181, 183, 186, 188, 193, 194, 200, 202, 203, 204, 205, 206, 212, 214, 215, 216, 217, 218, 222, 224, 227, 229, 240, 241, 245, 248, 249, 256, 257, 259, 260, 261, 266, 267, 268, 269, 275, 292, 294, 297, 299, 309, 310, 314, 317, 318, 323, 324, 326, 327, 332, 333, 334, 335, 340, 342, 344, 347, 349, 359, 360, 364, 367, 368, 373, 374, 376, 378, 383, 384, 385, 386, 392, 394, 396, 399, 401, 412, 413, 417, 420, 421, 428, 429, 431, 432, 433, 438, 439, 440, 441, 448, 452, 454, 457, 459, 469, 470, 471, 472, 473, 474, 475, 476, 477, 482, 483, 484, 485, 490, 494, 504, 506, 510, 518, 519, 524, 540, 541, 545, 554, 555, 557, 565, 569, 579, 580, 583, 593, 594, 596, 597, 598, 599, 624, 657, 668, 706, 707, 712, 713, 714, 728, 745, 753, 760, 792, 797, 799, 808, 811, 812, 833, 834, 857, 869, 871, 873, 875], "us": [0, 1, 2, 16, 28, 35, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 60, 61, 62, 72, 73, 74, 78, 79, 82, 83, 90, 93, 94, 97, 103, 105, 106, 107, 108, 111, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 150, 160, 161, 162, 178, 179, 182, 187, 190, 203, 215, 222, 240, 245, 257, 259, 262, 265, 272, 274, 277, 278, 280, 288, 289, 290, 291, 292, 309, 314, 324, 326, 328, 331, 338, 339, 342, 359, 364, 374, 376, 379, 382, 389, 391, 394, 412, 417, 429, 431, 434, 437, 444, 447, 449, 450, 452, 469, 471, 475, 476, 478, 481, 487, 488, 490, 494, 506, 518, 519, 521, 522, 524, 529, 530, 532, 538, 540, 541, 545, 555, 565, 569, 580, 587, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 625, 636, 647, 669, 680, 692, 703, 706, 712, 716, 717, 718, 719, 720, 721, 728, 729, 730, 746, 748, 749, 750, 753, 754, 757, 759, 765, 766, 784, 789, 790, 797, 799, 804, 805, 807, 808, 809, 810, 811, 812, 813, 834, 857, 871, 873, 874, 875], "id": [0, 1, 28, 33, 51, 56, 57, 78, 94, 103, 105, 106, 107, 108, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 227, 236, 238, 257, 277, 278, 280, 289, 290, 291, 297, 306, 308, 324, 347, 356, 358, 374, 399, 408, 410, 429, 449, 450, 452, 457, 466, 468, 475, 490, 491, 492, 494, 500, 501, 504, 506, 509, 513, 516, 533, 540, 541, 542, 543, 545, 551, 552, 554, 555, 556, 560, 562, 565, 566, 567, 569, 575, 576, 579, 580, 581, 582, 586, 587, 589, 592, 593, 594, 595, 596, 597, 598, 599, 636, 680, 693, 702, 703, 719, 720, 721, 729, 730, 747, 754, 757, 764, 766, 767, 770, 797, 799, 808, 871], "msa": [0, 28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 48, 49, 50, 53, 54, 56, 57, 58, 134, 136, 137, 143, 146], "": [0, 1, 2, 16, 28, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 61, 62, 65, 69, 71, 74, 76, 77, 78, 79, 81, 82, 86, 88, 89, 90, 94, 95, 97, 98, 99, 101, 102, 103, 105, 106, 108, 109, 110, 130, 132, 133, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 193, 203, 215, 222, 224, 227, 229, 232, 234, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 276, 277, 278, 280, 281, 287, 290, 291, 292, 294, 297, 299, 302, 304, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 342, 344, 347, 349, 352, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 394, 396, 399, 401, 404, 406, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 446, 447, 449, 450, 452, 454, 457, 459, 462, 464, 466, 467, 468, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 494, 501, 502, 504, 516, 519, 522, 523, 524, 527, 528, 529, 530, 533, 537, 539, 541, 545, 552, 554, 562, 569, 576, 579, 589, 593, 594, 595, 596, 597, 624, 657, 668, 691, 703, 706, 707, 708, 712, 714, 716, 717, 719, 720, 721, 750, 758, 770, 786, 807, 857, 869, 871, 873, 875], "index": [0, 1, 2, 28, 30, 33, 35, 42, 45, 48, 49, 52, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 71, 74, 80, 82, 83, 86, 87, 89, 95, 97, 98, 99, 102, 103, 134, 136, 143, 144, 146, 229, 259, 299, 326, 349, 376, 401, 431, 459, 476, 491, 494, 513, 522, 523, 524, 540, 542, 545, 560, 566, 569, 586, 587, 593, 594, 595, 596, 597, 602, 636, 680, 693, 703, 719, 767, 770, 780, 781, 799, 807, 811], "from": [0, 1, 16, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 74, 78, 83, 94, 101, 102, 105, 106, 112, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 160, 161, 162, 181, 186, 193, 202, 203, 215, 216, 219, 222, 223, 224, 227, 229, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 290, 291, 292, 293, 294, 297, 299, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 347, 349, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 399, 401, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 457, 459, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 494, 501, 502, 505, 506, 508, 510, 511, 513, 514, 516, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 545, 552, 555, 557, 558, 560, 562, 569, 576, 580, 583, 584, 586, 587, 589, 593, 594, 595, 597, 598, 599, 601, 602, 603, 691, 692, 703, 704, 706, 707, 709, 710, 712, 717, 719, 720, 721, 722, 729, 730, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 813, 833, 835, 871, 873, 875], "import": [0, 1, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 74, 78, 94, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 160, 161, 162, 193, 203, 215, 222, 223, 224, 227, 229, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 290, 291, 292, 293, 294, 297, 299, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 347, 349, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 394, 395, 396, 399, 401, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 457, 459, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 501, 502, 505, 508, 510, 513, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 552, 557, 560, 562, 576, 583, 586, 587, 589, 593, 594, 595, 597, 598, 601, 602, 691, 692, 703, 717, 719, 720, 721, 722, 729, 730, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 813, 833, 869, 871, 873, 875], "seq": [0, 28, 38, 43, 49, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 132, 133, 134, 136, 137, 139, 143, 144, 225, 226, 239, 246, 249, 257, 259, 272, 273, 274, 275, 278, 291, 292, 295, 296, 315, 318, 324, 326, 338, 339, 340, 345, 346, 365, 368, 374, 376, 389, 391, 392, 397, 398, 411, 418, 421, 429, 431, 444, 445, 447, 448, 450, 452, 455, 456, 473, 475, 476, 487, 488, 691, 875], "acc": [0, 133, 871], "g": [0, 1, 16, 33, 47, 48, 54, 62, 65, 80, 83, 90, 94, 108, 111, 126, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 147, 148, 193, 222, 229, 232, 237, 240, 241, 248, 249, 250, 251, 252, 262, 299, 302, 307, 309, 310, 317, 318, 319, 328, 342, 349, 352, 357, 359, 360, 367, 368, 369, 379, 394, 401, 404, 409, 412, 413, 420, 421, 422, 423, 424, 434, 452, 459, 462, 467, 469, 470, 472, 473, 478, 490, 494, 502, 508, 519, 524, 537, 540, 541, 545, 565, 569, 587, 593, 594, 596, 597, 703, 720, 721, 728, 749, 750, 755, 758, 762, 789, 790, 791, 793, 794, 800, 803, 804, 805, 807, 834, 869, 871, 873, 875], "ggta": 0, "metadata": [0, 1, 28, 33, 42, 45, 46, 48, 51, 52, 53, 54, 56, 57, 134, 135, 136, 137, 138, 139, 143, 144, 222, 227, 229, 236, 238, 239, 240, 243, 246, 256, 257, 259, 265, 272, 273, 276, 277, 278, 280, 290, 291, 292, 297, 299, 306, 308, 309, 312, 315, 323, 324, 326, 331, 338, 342, 347, 349, 356, 358, 359, 362, 365, 373, 374, 376, 382, 389, 394, 399, 401, 408, 410, 411, 412, 415, 418, 428, 429, 431, 437, 444, 445, 446, 449, 450, 452, 457, 459, 466, 468, 469, 474, 475, 476, 481, 487, 506, 555, 580, 594, 602, 614, 636, 647, 658, 680, 703, 714, 717, 719, 720, 721, 868, 871], "seq1": [0, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 134, 136, 137, 143, 146, 519, 520], "tcc": 0, "ggca": 0, "seq2": [0, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 136, 137, 146, 519, 520], "minter": [0, 28, 33, 45, 48, 56, 57, 134, 143], "stat": [0, 1, 28, 45, 46, 48, 53, 54, 57, 90, 96, 131, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 222, 229, 239, 240, 243, 246, 273, 276, 277, 278, 280, 290, 291, 292, 299, 309, 312, 315, 342, 349, 359, 362, 365, 394, 401, 411, 412, 415, 418, 445, 446, 449, 450, 452, 459, 469, 501, 510, 516, 518, 868, 871], "count": [0, 28, 45, 48, 50, 54, 57, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 134, 136, 137, 143, 146, 249, 251, 252, 264, 266, 268, 318, 330, 332, 334, 368, 381, 383, 385, 421, 423, 424, 436, 438, 440, 473, 480, 482, 484, 520, 521, 524, 601, 707, 713, 720, 721, 722, 752, 753, 779, 807, 868, 869], "2": [0, 1, 16, 28, 33, 40, 45, 46, 47, 49, 50, 53, 54, 56, 60, 61, 62, 63, 64, 65, 69, 72, 74, 76, 78, 80, 83, 84, 85, 87, 88, 90, 94, 97, 98, 99, 105, 106, 107, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 161, 203, 215, 218, 220, 222, 239, 240, 241, 247, 248, 249, 252, 260, 262, 264, 273, 274, 278, 281, 290, 291, 309, 310, 316, 317, 318, 327, 328, 330, 339, 359, 360, 366, 367, 368, 378, 379, 381, 391, 411, 412, 413, 419, 420, 421, 424, 432, 434, 436, 445, 447, 450, 452, 469, 470, 472, 473, 477, 478, 480, 488, 490, 501, 502, 508, 510, 513, 516, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 552, 557, 560, 562, 565, 576, 583, 586, 587, 589, 593, 594, 595, 596, 597, 598, 599, 601, 602, 691, 692, 703, 706, 707, 709, 712, 714, 717, 719, 720, 721, 722, 743, 748, 749, 751, 753, 758, 759, 764, 766, 767, 768, 791, 792, 797, 799, 800, 802, 803, 807, 808, 813, 869, 871, 873, 875], "posit": [0, 16, 28, 29, 33, 42, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 60, 61, 62, 63, 64, 65, 66, 67, 132, 133, 134, 136, 137, 138, 141, 143, 144, 145, 146, 222, 227, 229, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 259, 260, 262, 265, 266, 267, 268, 269, 270, 272, 273, 276, 277, 278, 290, 291, 297, 299, 302, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 319, 326, 327, 328, 331, 332, 333, 334, 335, 336, 338, 342, 347, 349, 352, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 369, 376, 378, 379, 382, 383, 384, 385, 386, 387, 389, 390, 394, 399, 401, 404, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 431, 432, 434, 437, 438, 439, 440, 441, 442, 444, 445, 446, 449, 450, 452, 457, 459, 462, 466, 467, 468, 469, 470, 472, 476, 477, 478, 481, 482, 483, 484, 485, 487, 522, 523, 524, 532, 595, 601, 680, 693, 717, 718, 720, 721, 780, 871], "13": [0, 73, 95, 99, 133, 136, 142, 144, 222, 292, 342, 394, 452, 524, 692], "dtype": [0, 1, 28, 33, 45, 46, 47, 48, 50, 53, 54, 56, 57, 134, 136, 137, 143, 144, 146, 239, 240, 242, 243, 244, 250, 267, 269, 270, 273, 274, 309, 311, 312, 313, 319, 333, 335, 336, 339, 359, 361, 362, 363, 369, 384, 386, 387, 390, 391, 411, 412, 414, 415, 416, 422, 439, 441, 442, 445, 447, 452, 469, 483, 485, 488, 490, 524, 541, 565, 587, 593, 597, 692, 799, 871], "conveni": [0, 16, 55, 59, 93, 183, 188, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 704, 705, 785, 806, 874], "local_pairwise_align_ssw": [0, 60, 61, 62, 63, 64, 65], "score": [0, 2, 16, 47, 60, 61, 62, 63, 64, 65, 66, 67, 73, 132, 133, 136, 138, 139, 144, 452, 490, 505, 508, 693, 714], "start_end_posit": 0, "actaaggctctctacccctctcagaga": 0, "actaaggctcctaacccccttttctcaga": 0, "30": [0, 133, 138, 139, 142, 144, 720, 721, 781], "actaaggctctct": 0, "acccc": 0, "tctcaga": 0, "actaaggctc": 0, "ctaacccccttttctcaga": 0, "27": [0, 78, 97, 105, 106, 133, 342, 533, 595], "0": [0, 1, 14, 15, 16, 28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 160, 161, 162, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 194, 200, 202, 204, 205, 206, 212, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 229, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 401, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 459, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 566, 567, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 601, 602, 613, 624, 635, 636, 646, 657, 668, 679, 690, 691, 692, 702, 703, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 729, 730, 733, 737, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 811, 812, 813, 831, 832, 833, 835, 845, 846, 847, 858, 869, 871, 873, 875], "24": [0, 133, 142, 502, 720], "28": [0, 94, 142, 717], "stripedsmithwaterman": [0, 66], "queri": [0, 2, 16, 66, 132, 133, 203, 452], "aaaaaactctctaaactcactaaggctctctacccctcttcagagaagtcga": 0, "print": [0, 1, 53, 78, 105, 106, 134, 136, 137, 138, 139, 141, 143, 144, 146, 246, 262, 274, 278, 291, 315, 328, 339, 365, 379, 391, 418, 434, 447, 450, 452, 478, 488, 540, 595, 601, 602, 691, 717, 721, 729, 730, 745, 746, 749, 750, 753, 754, 755, 757, 758, 760, 761, 762, 764, 766, 767, 769, 772, 773, 774, 775, 776, 778, 780, 781, 782, 783, 784, 787, 789, 790, 791, 792, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 871, 873, 875], "49": [0, 139, 142], "length": [0, 1, 16, 28, 45, 46, 48, 53, 60, 61, 62, 78, 94, 105, 106, 131, 132, 133, 135, 136, 137, 138, 139, 140, 143, 144, 146, 203, 215, 222, 223, 229, 234, 239, 240, 241, 243, 246, 249, 251, 252, 262, 263, 264, 266, 267, 268, 269, 273, 274, 276, 277, 278, 280, 290, 291, 292, 293, 299, 304, 309, 310, 312, 315, 318, 328, 329, 330, 332, 333, 334, 335, 339, 342, 343, 349, 354, 359, 360, 362, 365, 368, 379, 380, 381, 383, 384, 385, 386, 391, 394, 395, 401, 406, 411, 412, 413, 415, 418, 421, 423, 424, 434, 435, 436, 438, 439, 440, 441, 445, 446, 447, 449, 450, 452, 453, 459, 464, 469, 470, 473, 478, 479, 480, 482, 483, 484, 485, 488, 506, 519, 520, 524, 555, 580, 593, 596, 597, 601, 711, 712, 720, 721, 725, 728, 743, 749, 758, 759, 768, 790, 797, 799, 802, 803, 808, 871, 873, 875], "multipl": [0, 28, 53, 78, 105, 106, 134, 135, 136, 137, 138, 139, 141, 147, 193, 215, 452, 490, 521, 524, 532, 601, 714, 720, 800, 807, 869, 873], "target": [0, 2, 16, 66, 77, 139, 501, 516, 552, 562, 576, 589], "an": [0, 1, 2, 16, 28, 30, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 66, 69, 78, 79, 81, 87, 91, 92, 103, 105, 106, 107, 111, 125, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 160, 161, 162, 175, 177, 178, 179, 181, 186, 190, 191, 193, 203, 214, 215, 217, 218, 220, 221, 222, 229, 240, 247, 256, 257, 259, 266, 268, 272, 274, 279, 280, 290, 292, 299, 309, 316, 323, 324, 326, 332, 334, 338, 339, 341, 342, 349, 359, 366, 373, 374, 376, 383, 385, 389, 391, 393, 394, 401, 412, 419, 428, 429, 431, 438, 440, 444, 447, 451, 452, 459, 469, 474, 475, 476, 482, 484, 487, 488, 489, 490, 494, 501, 504, 506, 508, 512, 516, 517, 521, 524, 526, 527, 528, 529, 530, 532, 537, 538, 540, 545, 552, 554, 555, 559, 562, 563, 569, 576, 577, 579, 580, 585, 589, 590, 593, 595, 596, 597, 601, 613, 635, 646, 658, 679, 690, 691, 692, 702, 705, 711, 712, 717, 719, 720, 721, 722, 729, 730, 743, 745, 746, 748, 750, 754, 756, 757, 761, 764, 765, 767, 774, 776, 779, 789, 792, 797, 799, 802, 804, 805, 806, 807, 808, 809, 814, 815, 818, 825, 831, 832, 833, 835, 857, 869, 871, 873, 875], "effici": [0, 140, 582], "wai": [0, 1, 136, 137, 141, 143, 146, 148, 193, 490, 524, 595, 712, 717, 869, 873], "find": [0, 79, 242, 244, 247, 250, 260, 262, 267, 269, 270, 311, 313, 316, 319, 327, 328, 333, 335, 336, 361, 363, 366, 369, 378, 379, 384, 386, 387, 390, 414, 416, 419, 422, 432, 434, 439, 441, 442, 477, 478, 483, 485, 594, 597, 601, 707, 721, 743, 744, 756, 758, 759, 762, 763, 764, 769, 771, 772, 773, 774, 776, 777, 784, 788, 793, 802, 804, 805, 831], "represent": [0, 1, 131, 136, 141, 145, 203, 265, 288, 331, 382, 437, 481, 500, 538, 551, 575, 600, 693, 702, 728, 742, 799, 800, 868, 869], "target_sequ": [0, 2, 16, 17], "gctaactaggctcccttctacccctctcagaga": 0, "gcccagtagcttcccaatatgagagcatcaattgtagatcgggcc": 0, "tctataagattccgcatgcgttacttataagatgtctcaacgg": 0, "tagagattaattgccactgccaaaattctg": 0, "query_sequ": [0, 2, 16, 17], "append": [0, 48, 143, 148, 452, 760], "act": [0, 54, 160, 161, 162], "aggctc": 0, "38": [0, 132, 137, 142, 717], "aligned_query_sequ": [0, 2], "tctacccctctcagaga": 0, "aligned_target_sequ": [0, 2], "aggctcccttctacccctctcagaga": 0, "scikit": [0, 1, 51, 52, 55, 59, 60, 63, 66, 67, 78, 105, 106, 107, 108, 109, 110, 111, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 146, 147, 219, 221, 257, 259, 271, 277, 278, 279, 280, 290, 291, 324, 326, 337, 341, 374, 376, 388, 393, 429, 431, 443, 449, 450, 451, 475, 476, 486, 489, 511, 517, 518, 558, 563, 584, 590, 704, 705, 785, 806, 809, 871, 874], "bio": [0, 1, 51, 52, 55, 59, 60, 63, 66, 67, 78, 105, 106, 107, 108, 109, 110, 111, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 146, 147, 219, 221, 257, 259, 271, 277, 278, 279, 280, 290, 291, 324, 326, 337, 341, 374, 376, 388, 393, 429, 431, 443, 449, 450, 451, 475, 476, 486, 489, 511, 517, 518, 558, 563, 584, 590, 594, 704, 705, 785, 806, 809, 871, 874], "also": [0, 1, 46, 47, 74, 78, 98, 104, 105, 106, 107, 126, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 150, 203, 252, 262, 272, 274, 290, 328, 338, 339, 379, 389, 391, 424, 434, 444, 447, 452, 478, 487, 488, 490, 524, 537, 538, 540, 593, 594, 595, 597, 601, 707, 714, 717, 720, 721, 808, 811, 857, 869, 871, 875], "pure": [0, 809], "python": [0, 1, 2, 452, 540, 565, 595, 809, 814, 868, 869, 871], "implement": [0, 1, 60, 63, 68, 69, 73, 78, 83, 88, 99, 104, 105, 106, 109, 110, 137, 141, 145, 148, 160, 161, 162, 163, 190, 706, 707, 712, 713, 751, 807, 808, 809], "smith": [0, 16, 63, 64, 65, 66, 601], "waterman": [0, 16, 63, 64, 65, 66], "needleman": [0, 60, 61, 62], "wunsch": [0, 60, 61, 62], "These": [0, 1, 46, 51, 52, 68, 78, 105, 106, 138, 141, 145, 146, 147, 257, 259, 324, 326, 374, 376, 429, 431, 475, 476, 518, 598, 600, 693, 713, 719], "ar": [0, 1, 16, 28, 29, 33, 38, 42, 43, 46, 47, 50, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 74, 78, 79, 84, 85, 94, 103, 105, 106, 107, 108, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 160, 161, 162, 174, 181, 185, 186, 190, 193, 194, 200, 206, 212, 215, 217, 219, 220, 221, 222, 227, 229, 236, 239, 240, 246, 249, 253, 254, 255, 258, 266, 267, 268, 269, 271, 272, 274, 276, 277, 278, 279, 280, 281, 287, 289, 290, 291, 292, 297, 299, 306, 309, 315, 318, 320, 321, 322, 325, 332, 333, 334, 335, 337, 338, 339, 341, 342, 347, 349, 356, 359, 365, 368, 370, 371, 372, 375, 377, 383, 384, 385, 386, 388, 389, 391, 393, 394, 399, 401, 408, 411, 412, 418, 421, 425, 426, 427, 430, 438, 439, 440, 441, 443, 444, 446, 447, 449, 450, 451, 452, 457, 459, 466, 469, 473, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 494, 499, 502, 505, 506, 511, 512, 516, 517, 519, 520, 521, 522, 524, 526, 529, 530, 532, 534, 535, 536, 537, 540, 541, 543, 545, 550, 555, 558, 559, 562, 563, 565, 567, 569, 574, 580, 582, 584, 585, 587, 589, 590, 593, 594, 595, 596, 597, 598, 599, 601, 614, 636, 680, 691, 693, 702, 703, 704, 705, 706, 707, 710, 711, 712, 714, 715, 717, 719, 720, 721, 728, 748, 751, 756, 766, 777, 779, 780, 784, 785, 792, 793, 797, 799, 800, 801, 806, 807, 809, 811, 812, 814, 831, 834, 835, 846, 857, 869, 871, 873, 875], "much": [0, 1, 78, 105, 106, 141, 869], "slower": [0, 809], "than": [0, 1, 16, 46, 47, 69, 78, 83, 85, 101, 105, 106, 136, 141, 143, 146, 182, 187, 203, 222, 223, 224, 227, 241, 245, 249, 260, 261, 262, 263, 264, 266, 267, 268, 269, 278, 291, 293, 294, 297, 310, 314, 318, 327, 328, 329, 330, 332, 333, 334, 335, 342, 343, 344, 347, 360, 364, 368, 378, 379, 380, 381, 383, 384, 385, 386, 394, 395, 396, 399, 413, 417, 421, 432, 433, 434, 435, 436, 438, 439, 440, 441, 450, 453, 454, 457, 470, 471, 473, 477, 478, 479, 480, 482, 483, 484, 485, 490, 520, 521, 524, 526, 540, 582, 593, 595, 596, 597, 601, 691, 706, 707, 720, 721, 722, 749, 766, 779, 808, 813, 869, 873], "method": [0, 1, 2, 16, 28, 35, 47, 54, 55, 59, 60, 80, 103, 105, 107, 108, 111, 142, 145, 150, 160, 162, 163, 180, 193, 203, 214, 219, 221, 222, 225, 226, 240, 249, 271, 273, 278, 279, 280, 289, 291, 292, 295, 296, 309, 318, 337, 341, 342, 345, 346, 359, 368, 388, 393, 394, 397, 398, 412, 421, 443, 445, 450, 451, 452, 455, 456, 469, 473, 486, 489, 490, 511, 517, 524, 532, 537, 540, 541, 558, 563, 565, 582, 584, 590, 593, 594, 595, 596, 597, 598, 603, 614, 624, 625, 636, 647, 657, 658, 668, 669, 680, 691, 693, 703, 704, 705, 706, 707, 712, 728, 729, 730, 746, 748, 749, 750, 753, 754, 756, 757, 758, 759, 761, 763, 764, 784, 785, 790, 792, 804, 805, 806, 807, 808, 814, 826, 833, 834, 835, 845, 857, 871, 872, 873, 875], "describ": [0, 47, 60, 63, 70, 71, 74, 77, 78, 81, 82, 84, 85, 86, 87, 94, 95, 98, 105, 106, 111, 135, 136, 137, 138, 139, 142, 143, 145, 146, 262, 265, 328, 331, 379, 382, 434, 437, 452, 478, 481, 512, 533, 539, 540, 559, 577, 585, 595, 601, 713, 770, 808, 871, 873], "abov": [0, 1, 54, 136, 138, 142, 143, 144, 145, 146, 148, 160, 162, 222, 342, 394, 452, 540, 593, 595, 597, 601, 871], "serv": [0, 147, 703], "thei": [0, 1, 38, 43, 47, 53, 69, 103, 107, 132, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 220, 222, 227, 236, 239, 262, 281, 297, 306, 328, 347, 356, 379, 394, 399, 408, 411, 434, 457, 466, 478, 492, 504, 521, 543, 554, 567, 579, 593, 594, 595, 596, 597, 598, 602, 702, 703, 706, 712, 717, 753, 760, 809, 811, 875], "re": [0, 1, 45, 48, 54, 78, 103, 105, 106, 107, 134, 136, 137, 143, 146, 222, 248, 275, 292, 317, 340, 342, 367, 392, 394, 420, 448, 452, 472, 598, 706, 714, 716, 717, 721, 799, 873, 875], "simpler": 0, "experi": [0, 135, 138, 145, 524, 720], "local": [0, 63, 64, 65, 132, 133, 138], "global": [0, 60, 61, 62], "nucleotid": [0, 16, 61, 64, 133, 135, 136, 137, 138, 222, 239, 261, 273, 274, 339, 391, 394, 411, 433, 445, 447, 488, 490, 502, 875], "The": [0, 1, 16, 17, 45, 46, 47, 48, 49, 51, 52, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 78, 79, 80, 81, 83, 88, 90, 94, 95, 96, 97, 99, 102, 103, 105, 106, 107, 108, 109, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 160, 161, 162, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 193, 194, 203, 204, 205, 214, 215, 216, 217, 218, 219, 221, 224, 227, 229, 234, 239, 240, 241, 243, 245, 249, 257, 259, 260, 262, 263, 264, 271, 273, 274, 278, 279, 280, 289, 290, 291, 294, 297, 299, 304, 309, 310, 312, 314, 318, 324, 326, 327, 328, 329, 330, 337, 339, 341, 344, 347, 349, 354, 359, 360, 362, 364, 368, 374, 376, 378, 379, 380, 381, 388, 391, 393, 394, 396, 399, 401, 406, 411, 412, 413, 415, 417, 421, 429, 431, 432, 434, 435, 436, 443, 445, 447, 450, 451, 452, 454, 457, 459, 464, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 486, 488, 489, 490, 494, 501, 506, 511, 516, 517, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 537, 538, 541, 545, 552, 555, 558, 562, 563, 565, 569, 576, 577, 580, 582, 584, 587, 589, 590, 593, 594, 595, 596, 597, 599, 601, 602, 614, 636, 647, 658, 680, 691, 693, 704, 705, 706, 707, 711, 712, 713, 714, 717, 718, 719, 720, 721, 743, 744, 749, 750, 751, 752, 753, 755, 756, 758, 759, 761, 762, 764, 765, 766, 767, 768, 770, 774, 776, 777, 780, 785, 786, 788, 789, 791, 792, 793, 794, 797, 799, 806, 807, 808, 811, 814, 832, 834, 835, 869, 871, 873, 875], "differ": [0, 1, 33, 46, 47, 49, 60, 61, 62, 73, 78, 83, 95, 99, 105, 106, 112, 133, 136, 137, 143, 146, 147, 148, 224, 227, 236, 240, 241, 245, 260, 261, 266, 267, 268, 269, 272, 277, 280, 287, 294, 297, 306, 309, 310, 314, 327, 332, 333, 334, 335, 338, 344, 347, 356, 359, 360, 364, 378, 383, 384, 385, 386, 389, 396, 399, 408, 412, 413, 417, 432, 433, 438, 439, 440, 441, 444, 449, 454, 457, 466, 469, 470, 471, 477, 482, 483, 484, 485, 487, 494, 519, 524, 540, 545, 569, 593, 596, 597, 601, 625, 680, 692, 706, 707, 712, 720, 721, 751, 752, 811, 812, 828, 829, 830, 871, 873], "underli": [0, 190, 222, 227, 290, 292, 297, 342, 347, 394, 399, 452, 457, 519, 717, 871], "appli": [0, 1, 16, 28, 47, 51, 52, 103, 106, 107, 108, 111, 135, 136, 141, 145, 147, 203, 222, 257, 259, 292, 324, 326, 342, 374, 376, 394, 429, 431, 452, 475, 476, 490, 506, 521, 555, 580, 582, 595, 598, 602, 706, 720, 808, 835, 875], "while": [0, 1, 131, 135, 136, 137, 138, 143, 193, 280, 452, 524, 597, 636, 680, 703, 719, 728, 756, 834, 871, 875], "default": [0, 1, 16, 28, 45, 46, 48, 54, 56, 59, 60, 61, 62, 64, 65, 69, 73, 83, 90, 94, 97, 103, 107, 132, 136, 138, 139, 140, 141, 143, 144, 145, 148, 150, 160, 162, 175, 177, 218, 221, 245, 262, 274, 277, 278, 279, 280, 290, 291, 314, 328, 339, 341, 364, 379, 391, 393, 417, 434, 447, 449, 450, 451, 471, 478, 488, 489, 501, 506, 510, 517, 522, 523, 524, 529, 530, 532, 541, 552, 555, 557, 563, 576, 580, 583, 590, 594, 595, 597, 598, 599, 636, 691, 703, 705, 711, 712, 714, 715, 722, 753, 778, 797, 806, 807, 808, 811, 812, 832, 835, 857, 869, 871, 873, 875], "match": [0, 16, 45, 48, 54, 61, 64, 67, 132, 136, 137, 145, 190, 191, 227, 247, 248, 266, 268, 269, 275, 290, 297, 316, 317, 332, 334, 335, 340, 347, 366, 367, 383, 385, 386, 392, 399, 419, 420, 438, 440, 441, 448, 457, 472, 482, 484, 485, 508, 541, 593, 595, 597, 598, 717, 719, 720, 721, 752, 753, 762, 764, 871, 875], "mismatch": [0, 16, 61, 64, 67, 132, 133, 266, 267, 268, 332, 333, 334, 383, 384, 385, 438, 439, 440, 482, 483, 484, 508, 595, 752], "gap": [0, 16, 46, 47, 50, 54, 60, 61, 62, 63, 64, 65, 132, 133, 134, 135, 136, 137, 138, 139, 143, 222, 239, 240, 243, 246, 247, 251, 252, 255, 262, 273, 274, 276, 277, 278, 280, 290, 291, 292, 309, 312, 315, 316, 322, 328, 339, 342, 359, 362, 365, 366, 372, 379, 391, 394, 411, 412, 415, 418, 419, 423, 424, 427, 434, 445, 446, 447, 449, 450, 452, 469, 478, 488, 519, 800, 871, 875], "here": [0, 1, 47, 69, 73, 78, 83, 88, 90, 96, 97, 99, 103, 104, 105, 106, 107, 108, 109, 110, 135, 138, 143, 148, 160, 162, 191, 262, 328, 379, 434, 478, 524, 601, 712, 714, 801, 808, 873], "we": [0, 1, 16, 45, 47, 48, 78, 83, 90, 94, 105, 106, 108, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 191, 193, 203, 249, 262, 272, 290, 318, 328, 338, 368, 379, 389, 421, 434, 444, 452, 473, 478, 487, 524, 533, 539, 540, 593, 594, 595, 597, 598, 601, 602, 692, 703, 706, 714, 716, 717, 719, 720, 721, 753, 807, 869, 873, 875], "pair": [0, 1, 51, 60, 61, 62, 64, 67, 105, 106, 107, 111, 135, 137, 138, 139, 141, 146, 214, 218, 257, 324, 374, 429, 475, 490, 494, 501, 516, 520, 524, 545, 552, 562, 569, 576, 580, 587, 589, 598, 717, 768, 797, 871], "open": [0, 55, 59, 60, 61, 62, 63, 64, 65, 108, 132, 133, 137, 148, 160, 162, 181, 182, 183, 186, 187, 188, 191, 192, 193, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 704, 705, 785, 806, 833, 868, 869], "penalti": [0, 16, 60, 61, 62, 63, 64, 65], "11": [0, 16, 62, 65, 66, 72, 77, 78, 132, 135, 142, 144, 222, 248, 317, 367, 394, 420, 472, 524, 533, 539, 602, 692, 707, 714, 717], "extend": [0, 16, 45, 54, 60, 61, 62, 63, 64, 65, 78, 720, 745, 758, 807, 869], "1": [0, 1, 2, 15, 16, 28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 56, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 160, 161, 193, 194, 200, 202, 203, 204, 205, 206, 212, 214, 215, 216, 217, 218, 220, 222, 227, 229, 239, 240, 241, 247, 249, 256, 262, 263, 264, 268, 273, 274, 275, 277, 278, 280, 281, 288, 289, 290, 291, 292, 297, 299, 309, 310, 316, 318, 323, 328, 329, 330, 334, 339, 340, 342, 347, 349, 359, 360, 366, 368, 373, 379, 380, 381, 385, 391, 392, 394, 399, 401, 411, 412, 413, 419, 421, 428, 434, 435, 436, 440, 445, 446, 447, 448, 449, 450, 452, 457, 459, 469, 470, 473, 474, 478, 479, 480, 484, 488, 490, 501, 502, 505, 506, 508, 510, 512, 513, 516, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 552, 555, 557, 559, 560, 562, 565, 576, 577, 580, 583, 585, 586, 587, 589, 593, 594, 595, 596, 597, 598, 599, 601, 636, 658, 680, 691, 692, 703, 706, 707, 711, 714, 715, 717, 719, 720, 721, 722, 743, 748, 751, 753, 758, 759, 762, 766, 767, 768, 779, 780, 790, 791, 792, 797, 799, 800, 802, 803, 807, 808, 813, 871, 873, 875], "other": [0, 1, 16, 33, 42, 51, 52, 54, 78, 93, 108, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 190, 194, 200, 206, 212, 217, 222, 227, 236, 245, 251, 252, 257, 259, 261, 266, 267, 268, 269, 272, 281, 287, 297, 306, 314, 324, 326, 332, 333, 334, 335, 338, 342, 347, 356, 364, 374, 376, 383, 384, 385, 386, 389, 394, 399, 408, 417, 423, 424, 429, 431, 433, 438, 439, 440, 441, 444, 452, 457, 466, 471, 475, 476, 482, 483, 484, 485, 487, 490, 492, 499, 518, 524, 540, 543, 550, 565, 567, 574, 597, 703, 706, 707, 712, 719, 721, 728, 751, 752, 753, 759, 761, 762, 811, 834, 845, 869, 871, 873, 875], "word": [0, 135, 136, 138, 141, 146, 218, 264, 330, 381, 436, 480], "more": [0, 1, 46, 47, 48, 55, 59, 60, 66, 69, 80, 103, 110, 133, 135, 136, 137, 141, 142, 143, 144, 145, 146, 182, 187, 219, 221, 253, 254, 255, 258, 271, 279, 320, 321, 322, 325, 337, 341, 342, 370, 371, 372, 375, 377, 388, 393, 425, 426, 427, 430, 443, 451, 486, 489, 494, 511, 517, 521, 524, 526, 540, 545, 558, 563, 569, 582, 584, 590, 593, 594, 595, 596, 597, 598, 601, 613, 635, 646, 679, 690, 691, 703, 704, 705, 706, 707, 714, 720, 721, 749, 766, 785, 806, 807, 869, 873, 874], "costli": 0, "new": [0, 45, 48, 55, 56, 57, 71, 82, 84, 85, 105, 147, 160, 161, 162, 174, 185, 203, 219, 222, 229, 240, 243, 271, 272, 292, 299, 309, 312, 337, 338, 342, 349, 359, 362, 388, 389, 394, 401, 412, 415, 443, 444, 452, 459, 469, 486, 487, 511, 558, 582, 584, 595, 596, 598, 704, 707, 715, 729, 730, 754, 757, 784, 785, 789, 790, 804, 805, 808, 871, 873, 875], "exist": [0, 56, 69, 74, 141, 148, 160, 161, 162, 178, 179, 290, 490, 502, 506, 540, 555, 580, 592, 595, 598, 703, 728, 745, 753, 758, 760, 791, 832, 857, 871], "one": [0, 1, 45, 46, 47, 48, 51, 52, 54, 60, 61, 62, 78, 79, 80, 83, 88, 94, 103, 105, 106, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 161, 182, 187, 215, 218, 220, 232, 237, 240, 253, 254, 255, 256, 257, 258, 259, 290, 302, 307, 309, 320, 321, 322, 323, 324, 325, 326, 342, 352, 357, 359, 370, 371, 372, 373, 374, 375, 376, 377, 404, 409, 412, 425, 426, 427, 428, 429, 430, 431, 462, 467, 469, 474, 475, 476, 490, 494, 506, 524, 541, 545, 555, 569, 580, 587, 594, 595, 597, 598, 601, 602, 603, 692, 708, 711, 712, 719, 720, 721, 743, 745, 746, 752, 766, 779, 784, 792, 869, 873, 875], "local_pairwise_align_protein": [0, 60, 61, 62, 63, 64], "s1": [0, 1, 76, 222, 224, 240, 241, 245, 260, 261, 266, 267, 268, 269, 294, 309, 310, 314, 327, 332, 333, 334, 335, 342, 344, 359, 360, 364, 378, 383, 384, 385, 386, 394, 396, 412, 413, 417, 432, 433, 438, 439, 440, 441, 452, 454, 469, 470, 471, 477, 482, 483, 484, 485, 524, 593, 597], "heagawghe": 0, "s2": [0, 1, 240, 245, 309, 314, 359, 364, 412, 417, 469, 471, 524, 593, 597], "pawhea": 0, "return": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 37, 39, 40, 41, 42, 44, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 132, 139, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 190, 194, 195, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 219, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 601, 604, 605, 607, 608, 609, 610, 611, 612, 613, 615, 616, 618, 619, 620, 621, 622, 623, 626, 627, 629, 630, 631, 632, 633, 634, 635, 637, 638, 640, 641, 642, 643, 644, 645, 646, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 662, 663, 664, 665, 666, 667, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 729, 730, 731, 732, 735, 736, 738, 740, 741, 742, 743, 744, 746, 750, 751, 752, 753, 754, 755, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 776, 777, 778, 779, 780, 785, 786, 788, 789, 790, 791, 793, 794, 795, 797, 799, 800, 801, 803, 804, 805, 807, 808, 813, 814, 816, 817, 818, 820, 821, 822, 823, 824, 827, 831, 832, 833, 836, 837, 839, 840, 841, 842, 843, 844, 848, 849, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 869, 871, 875], "start": [0, 14, 15, 16, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 66, 132, 133, 135, 138, 139, 140, 141, 143, 146, 147, 193, 214, 220, 241, 260, 280, 281, 287, 290, 291, 310, 327, 360, 378, 413, 432, 470, 477, 541, 598, 599, 717, 720, 721, 875], "end": [0, 2, 16, 60, 61, 62, 63, 64, 65, 66, 132, 133, 135, 136, 137, 138, 139, 146, 147, 193, 203, 214, 220, 241, 260, 290, 310, 327, 360, 378, 413, 432, 470, 477, 790], "each": [0, 1, 16, 28, 38, 43, 46, 47, 50, 53, 56, 60, 61, 62, 63, 64, 65, 66, 78, 90, 103, 105, 106, 107, 108, 111, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 193, 204, 205, 214, 222, 232, 237, 240, 246, 249, 262, 264, 278, 291, 302, 307, 309, 315, 318, 328, 330, 342, 352, 357, 359, 365, 368, 379, 381, 404, 409, 412, 418, 421, 434, 436, 450, 452, 462, 467, 469, 473, 478, 480, 490, 494, 504, 506, 519, 521, 524, 526, 532, 534, 535, 536, 537, 540, 545, 554, 555, 569, 579, 580, 593, 594, 595, 596, 597, 598, 601, 602, 603, 613, 614, 625, 635, 636, 646, 647, 669, 679, 680, 690, 691, 693, 703, 707, 708, 710, 711, 712, 714, 717, 720, 721, 801, 807, 869, 871, 875], "5": [0, 1, 16, 46, 54, 61, 64, 66, 73, 78, 80, 94, 105, 106, 108, 111, 133, 135, 136, 137, 138, 139, 141, 143, 146, 147, 193, 194, 200, 202, 204, 205, 206, 212, 214, 215, 216, 217, 218, 220, 227, 229, 239, 240, 241, 242, 247, 249, 251, 252, 253, 256, 258, 264, 270, 272, 273, 274, 290, 297, 299, 309, 310, 311, 316, 318, 320, 323, 325, 330, 336, 338, 339, 347, 349, 359, 360, 361, 366, 368, 370, 373, 375, 381, 387, 389, 391, 399, 401, 411, 412, 413, 414, 419, 421, 423, 424, 425, 428, 430, 436, 442, 444, 445, 447, 457, 459, 469, 470, 473, 474, 480, 487, 488, 501, 502, 506, 516, 519, 520, 521, 522, 523, 524, 532, 533, 534, 537, 538, 539, 540, 552, 555, 562, 576, 587, 589, 593, 594, 597, 598, 601, 692, 707, 713, 717, 720, 721, 722, 743, 748, 752, 753, 755, 758, 759, 766, 767, 768, 790, 791, 792, 797, 799, 800, 802, 803, 807, 808, 811, 873], "awgh": 0, "aw": [0, 94], "he": 0, "25": [0, 1, 50, 63, 78, 83, 94, 105, 106, 108, 135, 141, 142, 245, 249, 251, 264, 268, 276, 280, 314, 318, 330, 334, 364, 368, 381, 385, 417, 421, 423, 436, 440, 446, 471, 473, 480, 484, 521, 524, 534, 593, 594, 597, 602, 717, 720, 721, 871], "4": [0, 1, 28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 109, 110, 132, 133, 135, 136, 138, 141, 142, 143, 145, 146, 147, 160, 161, 162, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 203, 215, 220, 222, 223, 224, 225, 226, 227, 229, 232, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 280, 281, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 302, 304, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 340, 343, 344, 345, 346, 347, 349, 352, 354, 356, 357, 358, 359, 360, 362, 363, 364, 365, 367, 368, 369, 371, 372, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 391, 392, 395, 396, 397, 398, 399, 401, 404, 406, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 426, 427, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 459, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 490, 491, 492, 494, 499, 500, 501, 502, 503, 504, 509, 510, 512, 513, 515, 516, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 539, 542, 543, 545, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 566, 567, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 593, 594, 595, 596, 598, 599, 601, 613, 624, 635, 646, 657, 668, 679, 690, 691, 692, 702, 703, 706, 707, 708, 709, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 729, 730, 733, 737, 739, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 811, 812, 813, 831, 832, 833, 835, 845, 847, 858, 871, 873], "8": [0, 1, 66, 132, 133, 137, 138, 143, 146, 147, 161, 220, 240, 249, 272, 276, 292, 309, 318, 338, 359, 368, 389, 412, 421, 444, 446, 469, 473, 487, 516, 533, 538, 539, 562, 589, 594, 601, 692, 717, 721, 722, 758, 766, 767, 800, 808, 871, 873], "similarli": [0, 1, 136, 871], "perform": [0, 1, 16, 53, 54, 66, 78, 90, 103, 105, 106, 107, 108, 136, 137, 145, 194, 222, 278, 291, 342, 394, 450, 452, 492, 521, 522, 523, 524, 526, 527, 528, 529, 530, 533, 534, 535, 536, 538, 539, 541, 543, 565, 567, 577, 580, 597, 598, 601, 602, 603, 625, 669, 680, 692, 712, 714, 715, 721, 722, 729, 730, 754, 757, 764, 775, 781, 782, 783, 792, 804, 805, 811, 869], "global_pairwise_align_nucleotid": 0, "gcgtgcctaaggtatgcaag": 0, "acgtgcctaggtacgcaag": 0, "20": [0, 142, 342, 524, 703, 709, 717, 720, 721], "acgtgccta": 0, "ggtacgcaag": 0, "packag": [1, 16, 66, 68, 104, 134, 136, 141, 143, 537, 540, 593, 594, 595, 596, 597, 600, 706, 707, 714, 717, 869, 872, 873, 874], "analyz": [1, 521, 707, 720], "biolog": [1, 53, 60, 61, 62, 89, 94, 95, 99, 101, 136, 137, 139, 141, 144, 193, 242, 243, 244, 246, 247, 250, 253, 254, 255, 258, 270, 311, 312, 313, 315, 316, 319, 320, 321, 322, 325, 336, 361, 362, 363, 365, 366, 369, 370, 371, 372, 375, 387, 414, 415, 416, 418, 419, 422, 425, 426, 427, 430, 442, 452, 490, 720, 868], "It": [1, 16, 74, 78, 79, 81, 94, 101, 132, 134, 136, 137, 138, 139, 141, 143, 145, 147, 161, 193, 203, 206, 214, 215, 217, 218, 220, 222, 342, 394, 446, 524, 527, 532, 540, 582, 595, 596, 601, 624, 625, 657, 668, 680, 706, 707, 711, 714, 717, 720, 721, 728, 729, 730, 754, 757, 811, 833, 857, 871], "alpha": [1, 103, 109, 524, 717, 718, 722], "beta": [1, 107, 108, 110, 135], "intend": [1, 84, 85, 145, 222, 292, 342, 691, 703, 811, 812], "primari": [1, 148, 871], "interfac": [1, 51, 52, 104, 145, 257, 259, 324, 326, 374, 376, 429, 431, 475, 476, 490, 593, 594, 595, 596, 807, 869], "addition": [1, 141, 190, 203, 871, 873], "support": [1, 47, 55, 59, 80, 190, 219, 221, 222, 271, 279, 337, 341, 342, 388, 393, 394, 443, 451, 486, 489, 490, 502, 511, 517, 558, 563, 584, 590, 595, 693, 704, 705, 712, 717, 728, 748, 785, 803, 806, 807, 814, 834, 857, 868, 873, 874, 875], "discoveri": 1, "avail": [1, 107, 132, 136, 137, 138, 142, 145, 147, 178, 179, 274, 280, 289, 339, 391, 447, 488, 502, 565, 593, 594, 595, 596, 597, 636, 717, 721, 809, 869, 875], "document": [1, 35, 110, 136, 138, 143, 144, 180, 524, 703, 728, 869], "high": [1, 78, 105, 106, 136, 137, 703, 706, 712], "level": [1, 57, 84, 141, 190, 524, 719, 720, 766, 814, 871], "discuss": [1, 94, 105, 106, 145, 875], "how": [1, 43, 53, 54, 90, 136, 138, 145, 190, 240, 262, 290, 291, 309, 328, 359, 379, 412, 434, 469, 478, 533, 539, 595, 712, 717, 719, 720, 721, 869, 875], "work": [1, 16, 108, 136, 143, 145, 148, 222, 342, 394, 540, 595, 707, 721, 868, 870, 871, 873], "should": [1, 16, 47, 67, 74, 78, 79, 90, 94, 101, 103, 104, 105, 106, 107, 132, 138, 142, 145, 147, 148, 160, 161, 162, 203, 222, 245, 262, 263, 264, 280, 314, 328, 329, 330, 342, 364, 379, 380, 381, 394, 417, 434, 435, 436, 471, 478, 479, 480, 520, 522, 523, 524, 533, 539, 577, 595, 597, 601, 691, 706, 707, 712, 713, 714, 717, 720, 721, 766, 787], "first": [1, 16, 28, 60, 61, 62, 63, 64, 65, 66, 69, 78, 105, 106, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 162, 215, 220, 260, 262, 277, 278, 290, 327, 328, 378, 379, 432, 434, 449, 452, 477, 478, 494, 521, 522, 523, 524, 545, 569, 593, 595, 625, 680, 692, 708, 717, 720, 748, 752, 761, 762, 767, 770, 800, 801, 845, 869, 873, 875], "you": [1, 16, 60, 61, 62, 78, 103, 105, 106, 107, 108, 132, 134, 136, 137, 139, 143, 145, 146, 148, 202, 203, 215, 217, 218, 222, 342, 394, 452, 490, 580, 593, 597, 714, 717, 719, 720, 721, 750, 752, 753, 869, 871, 873, 875], "read": [1, 16, 59, 78, 105, 106, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 146, 147, 160, 161, 178, 180, 182, 187, 190, 191, 221, 222, 278, 279, 280, 290, 291, 341, 342, 393, 394, 450, 451, 452, 489, 517, 538, 540, 563, 590, 598, 705, 729, 730, 742, 743, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 761, 762, 763, 764, 766, 768, 769, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 814, 873], "befor": [1, 47, 136, 140, 145, 146, 251, 252, 290, 423, 424, 594, 595, 721, 782, 801, 873, 875], "alpha_divers": [1, 78, 94, 107, 109], "beta_divers": [1, 103, 105, 106, 108, 110, 111], "design": [1, 108, 131, 135, 145, 540, 719], "sampl": [1, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 131, 145, 524, 541, 593, 594, 596, 597, 603, 636, 669, 680, 691, 693, 702, 703, 706, 707, 712, 713, 714, 717, 719, 720, 721, 753, 812], "accept": [1, 28, 56, 108, 272, 277, 278, 338, 389, 444, 449, 450, 487, 502, 518, 524, 595, 599, 601, 717, 720, 721, 763, 792, 800, 803, 857], "matrix": [1, 16, 67, 103, 107, 108, 111, 274, 339, 391, 447, 488, 490, 491, 492, 494, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 514, 515, 516, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 545, 550, 551, 552, 553, 554, 555, 556, 557, 561, 562, 564, 565, 566, 567, 569, 574, 575, 576, 578, 579, 580, 581, 582, 583, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 692, 703, 706, 708, 709, 710, 712, 713, 714, 716, 718, 765, 797, 808, 872], "contain": [1, 16, 28, 46, 48, 54, 60, 61, 62, 63, 64, 65, 66, 69, 103, 104, 107, 108, 111, 131, 132, 134, 135, 136, 137, 139, 140, 142, 143, 145, 146, 147, 148, 180, 222, 224, 229, 242, 244, 249, 250, 253, 254, 255, 258, 262, 263, 264, 270, 272, 274, 280, 292, 294, 299, 311, 313, 318, 319, 320, 321, 322, 325, 328, 329, 330, 336, 338, 339, 342, 344, 349, 361, 363, 368, 369, 370, 371, 372, 375, 377, 379, 380, 381, 387, 389, 390, 391, 394, 396, 401, 414, 416, 421, 422, 425, 426, 427, 430, 434, 435, 436, 442, 444, 447, 452, 454, 459, 473, 478, 479, 480, 487, 488, 490, 504, 506, 510, 518, 519, 524, 537, 538, 540, 541, 554, 555, 557, 565, 579, 580, 583, 587, 593, 594, 595, 596, 597, 598, 600, 602, 692, 703, 707, 746, 750, 758, 788, 807, 808, 832, 835, 857, 871, 872, 873], "frequenc": [1, 47, 50, 69, 81, 251, 252, 264, 266, 268, 330, 332, 334, 381, 383, 385, 423, 424, 436, 438, 440, 480, 482, 484, 717, 719, 721, 728, 748], "otu": [1, 69, 78, 83, 90, 92, 94, 103, 105, 106, 107, 108, 111, 145, 521, 524, 808], "within": [1, 47, 94, 102, 108, 131, 133, 136, 137, 141, 143, 145, 146, 222, 342, 394, 452, 501, 552, 576, 597, 598, 658, 693, 703, 719, 720, 728, 770, 811, 814, 857, 873, 875], "term": [1, 47, 74, 92, 94, 138, 601], "veri": [1, 60, 61, 62, 83, 136, 141, 148, 521, 753], "loos": [1, 601], "practic": [1, 54, 94, 136, 137, 144, 691, 756, 761], "repres": [1, 46, 74, 76, 78, 81, 90, 97, 98, 105, 106, 108, 131, 132, 133, 135, 136, 140, 141, 143, 145, 146, 147, 193, 214, 222, 274, 339, 342, 391, 394, 447, 452, 488, 490, 494, 501, 506, 516, 529, 530, 537, 538, 545, 552, 555, 562, 569, 576, 580, 589, 601, 692, 703, 717, 728, 795, 800, 807, 808, 871, 873], "featur": [1, 80, 91, 136, 139, 145, 146, 193, 203, 206, 215, 217, 218, 220, 222, 292, 342, 394, 452, 524, 537, 693, 702, 706, 707, 713, 714, 812, 871], "type": [1, 16, 28, 33, 45, 46, 48, 84, 95, 99, 107, 111, 131, 134, 136, 137, 138, 139, 140, 143, 146, 147, 160, 162, 175, 177, 178, 179, 181, 186, 190, 224, 227, 236, 239, 240, 241, 243, 245, 246, 247, 260, 261, 266, 267, 268, 269, 272, 273, 281, 287, 294, 297, 306, 309, 310, 312, 314, 315, 316, 327, 332, 333, 334, 335, 338, 344, 347, 356, 359, 360, 362, 364, 365, 366, 378, 383, 384, 385, 386, 389, 396, 399, 408, 411, 412, 413, 415, 417, 418, 419, 432, 433, 438, 439, 440, 441, 444, 445, 452, 454, 457, 466, 469, 470, 471, 477, 482, 483, 484, 485, 487, 490, 494, 503, 515, 519, 520, 540, 541, 545, 553, 561, 565, 569, 578, 588, 594, 597, 599, 692, 706, 707, 714, 717, 719, 729, 730, 750, 754, 757, 799, 807, 811, 818, 869, 871], "includ": [1, 47, 53, 55, 59, 67, 68, 78, 94, 105, 106, 110, 111, 134, 135, 136, 137, 140, 141, 142, 143, 145, 146, 219, 221, 229, 238, 243, 251, 252, 262, 271, 274, 276, 277, 278, 279, 290, 291, 299, 308, 312, 328, 337, 339, 341, 349, 358, 362, 379, 388, 391, 393, 394, 401, 410, 415, 423, 424, 434, 443, 446, 447, 449, 450, 451, 459, 468, 478, 486, 488, 489, 490, 500, 502, 511, 517, 524, 540, 551, 558, 563, 575, 580, 584, 587, 590, 593, 594, 596, 597, 598, 602, 692, 702, 703, 704, 705, 707, 712, 713, 717, 721, 743, 744, 746, 775, 777, 778, 781, 782, 783, 785, 798, 800, 801, 806, 869, 871, 872, 873, 874], "bacteri": [1, 524], "speci": [1, 69, 70, 71, 74, 75, 76, 77, 78, 79, 81, 82, 83, 86, 87, 88, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 142, 147, 521, 692, 707, 712, 714, 728], "gene": [1, 139, 193, 203, 215, 218, 222, 452, 533, 539], "metabolit": [1, 721], "i": [1, 2, 16, 28, 29, 30, 31, 32, 33, 35, 40, 42, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 111, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 160, 161, 162, 174, 175, 177, 181, 182, 183, 185, 186, 187, 188, 190, 193, 194, 200, 202, 203, 206, 212, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 229, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 287, 290, 291, 292, 293, 294, 295, 296, 297, 299, 306, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 356, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 466, 469, 470, 471, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 499, 501, 504, 509, 510, 511, 512, 515, 516, 517, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 550, 552, 554, 556, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 574, 576, 577, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 593, 594, 595, 596, 597, 599, 601, 624, 636, 657, 668, 669, 680, 691, 692, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 728, 729, 730, 733, 743, 746, 748, 750, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 766, 767, 768, 770, 772, 773, 774, 776, 778, 779, 781, 784, 785, 789, 792, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 818, 831, 832, 833, 834, 835, 845, 846, 857, 868, 871, 873, 874, 875], "defin": [1, 28, 54, 56, 62, 65, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 111, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 150, 193, 203, 217, 222, 227, 245, 263, 264, 274, 280, 281, 288, 289, 292, 297, 314, 329, 330, 339, 342, 347, 364, 380, 381, 391, 394, 399, 417, 435, 436, 447, 457, 471, 479, 480, 488, 490, 502, 507, 510, 520, 522, 523, 527, 528, 529, 530, 531, 534, 535, 536, 541, 557, 583, 595, 598, 703, 717, 804, 805, 808, 811, 845, 869, 871, 873, 875], "purpos": [1, 66, 69, 145, 147, 280, 717, 868, 875], "singl": [1, 28, 45, 48, 56, 78, 84, 85, 93, 105, 106, 108, 135, 136, 137, 138, 141, 143, 144, 145, 146, 193, 203, 215, 229, 232, 237, 249, 262, 275, 299, 302, 307, 318, 328, 340, 349, 352, 357, 368, 379, 392, 401, 404, 409, 421, 434, 448, 459, 462, 467, 473, 478, 490, 524, 537, 601, 718, 749, 857, 869, 873, 875], "unit": [1, 78, 105, 106, 138, 148, 490, 712, 714, 715, 811, 812, 874], "what": [1, 78, 94, 103, 105, 106, 107, 141, 145, 148, 150, 178, 179, 183, 188, 218, 262, 328, 379, 434, 478, 601, 691, 720, 873, 875], "vari": [1, 597, 717, 719, 720], "wide": [1, 54, 94, 240, 309, 359, 412, 469], "For": [1, 28, 47, 55, 59, 66, 94, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 203, 218, 219, 220, 221, 222, 271, 279, 337, 341, 342, 388, 393, 394, 443, 451, 452, 486, 489, 502, 511, 517, 524, 558, 563, 584, 590, 593, 594, 595, 596, 597, 599, 601, 603, 669, 703, 704, 705, 706, 707, 717, 719, 720, 721, 748, 785, 806, 807, 809, 810, 869, 871, 873], "microbiom": [1, 94, 108, 524, 712], "survei": 1, "could": [1, 28, 85, 136, 137, 144, 148, 181, 183, 186, 188, 524, 541, 593, 595, 596, 597, 598, 601, 703, 719, 774, 776, 809, 810, 869], "all": [1, 16, 28, 29, 46, 47, 51, 52, 54, 60, 61, 62, 67, 69, 78, 79, 80, 90, 94, 95, 99, 102, 103, 105, 106, 107, 108, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 150, 174, 185, 193, 203, 206, 215, 217, 218, 222, 240, 243, 246, 249, 257, 259, 262, 272, 275, 290, 309, 312, 315, 318, 324, 326, 328, 338, 340, 342, 359, 362, 365, 368, 374, 376, 379, 389, 392, 394, 412, 415, 418, 421, 429, 431, 434, 444, 448, 452, 469, 473, 475, 476, 478, 487, 490, 501, 502, 506, 508, 516, 524, 526, 532, 534, 535, 536, 537, 540, 552, 555, 562, 576, 580, 587, 589, 593, 594, 595, 596, 597, 598, 625, 636, 680, 691, 692, 703, 711, 712, 720, 721, 722, 728, 744, 747, 748, 749, 758, 761, 762, 763, 774, 776, 777, 780, 787, 792, 793, 795, 797, 807, 834, 835, 873], "16": [1, 76, 94, 134, 136, 137, 138, 142, 143, 239, 248, 273, 317, 367, 411, 420, 445, 472, 703, 717, 721, 768, 797], "rrna": 1, "oral": 1, "swab": 1, "In": [1, 16, 47, 78, 94, 105, 106, 108, 136, 137, 138, 139, 141, 143, 147, 222, 252, 290, 342, 394, 424, 490, 521, 524, 540, 594, 595, 601, 691, 706, 707, 712, 717, 721, 728, 748, 761, 807, 869, 871, 873, 875], "compar": [1, 88, 105, 111, 132, 133, 220, 261, 266, 267, 268, 269, 272, 332, 333, 334, 335, 338, 383, 384, 385, 386, 389, 433, 438, 439, 440, 441, 444, 482, 483, 484, 485, 487, 492, 499, 524, 540, 543, 550, 567, 574, 595, 601, 719, 720, 721, 751, 752, 753, 781, 811, 812, 871, 873], "genom": [1, 203], "studi": [1, 78, 145, 521, 524, 706, 714, 721], "hand": [1, 712], "individu": [1, 69, 70, 71, 74, 77, 78, 79, 81, 86, 87, 88, 89, 90, 95, 99, 102, 105, 106, 131, 136, 490, 524, 719, 875], "organ": [1, 135, 138, 147], "given": [1, 55, 59, 69, 80, 83, 88, 90, 99, 103, 107, 108, 111, 136, 137, 141, 142, 145, 160, 162, 178, 179, 181, 182, 186, 187, 216, 219, 221, 271, 274, 279, 337, 339, 341, 388, 391, 393, 443, 447, 451, 486, 488, 489, 506, 511, 517, 537, 555, 558, 563, 580, 584, 590, 594, 595, 598, 704, 705, 707, 711, 716, 718, 720, 728, 763, 785, 806, 833, 834, 846, 875], "number": [1, 28, 40, 45, 48, 69, 70, 71, 72, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 131, 132, 134, 135, 136, 138, 141, 143, 144, 146, 147, 190, 193, 203, 214, 234, 241, 249, 266, 268, 304, 310, 318, 332, 334, 354, 360, 368, 383, 385, 406, 413, 421, 438, 440, 464, 470, 473, 482, 484, 490, 505, 523, 524, 532, 534, 535, 536, 537, 541, 565, 593, 594, 595, 596, 597, 598, 599, 601, 636, 680, 691, 707, 711, 712, 714, 715, 717, 718, 720, 721, 722, 748, 755, 792, 811, 812], "observ": [1, 78, 81, 90, 93, 101, 105, 106, 111, 222, 249, 274, 292, 318, 339, 342, 368, 391, 394, 421, 447, 452, 473, 488, 524, 601, 692, 717, 720, 721, 779, 807, 875], "particular": [1, 728, 810, 875], "refer": [1, 16, 35, 47, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 105, 106, 108, 193, 222, 280, 288, 289, 292, 342, 394, 452, 490, 502, 512, 522, 524, 532, 533, 537, 539, 541, 559, 565, 577, 585, 593, 594, 595, 596, 597, 601, 703, 706, 707, 714, 751, 780, 807, 808], "associ": [1, 35, 69, 94, 137, 145, 146, 147, 150, 175, 176, 177, 193, 214, 216, 218, 222, 342, 394, 452, 594, 601, 691, 711, 715, 718, 719, 720, 758, 764, 797, 869], "throughout": [1, 140, 280, 289, 720, 874], "array_lik": [1, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 111, 229, 247, 248, 262, 272, 299, 316, 317, 328, 338, 349, 366, 367, 379, 389, 401, 419, 420, 434, 444, 459, 472, 478, 487, 524, 525, 526, 527, 528, 531, 532, 533, 534, 535, 536, 539, 541, 593, 595, 596, 597, 598, 601, 708, 711, 715, 718, 721, 722], "anyth": [1, 136, 137, 144, 148, 452, 834, 845, 857, 875], "convert": [1, 132, 134, 135, 136, 138, 141, 143, 146, 190, 222, 245, 274, 314, 339, 342, 364, 391, 394, 417, 447, 452, 471, 488, 541, 582, 594, 722, 748, 813], "d": [1, 16, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 132, 133, 138, 141, 142, 222, 342, 394, 501, 505, 510, 516, 521, 522, 523, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 552, 557, 562, 576, 583, 587, 589, 593, 594, 595, 596, 597, 601, 636, 658, 680, 693, 703, 711, 720, 721, 722, 729, 730, 743, 744, 746, 748, 749, 750, 751, 752, 754, 755, 757, 758, 759, 761, 762, 763, 764, 768, 774, 775, 776, 777, 778, 784, 788, 789, 790, 792, 793, 794, 795, 797, 798, 799, 802, 803, 804, 805, 807, 808, 869, 871, 873, 875], "numpi": [1, 107, 494, 512, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 545, 559, 569, 577, 585, 593, 597, 599, 601, 602, 636, 658, 680, 691, 692, 717, 719, 720, 721, 722, 753, 792, 871], "arrai": [1, 16, 47, 50, 78, 94, 105, 106, 136, 142, 222, 239, 242, 244, 250, 267, 269, 270, 273, 274, 292, 311, 313, 319, 333, 335, 336, 339, 342, 361, 363, 369, 384, 386, 387, 390, 391, 394, 411, 414, 416, 422, 439, 441, 442, 445, 447, 452, 483, 485, 488, 490, 492, 500, 505, 508, 512, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 543, 551, 559, 565, 567, 575, 577, 585, 601, 602, 636, 658, 680, 692, 711, 715, 717, 718, 719, 720, 721, 722, 770, 799, 807, 871], "nativ": [1, 512, 559, 585, 712], "list": [1, 66, 78, 94, 105, 106, 109, 110, 132, 135, 137, 138, 139, 142, 145, 146, 147, 148, 160, 162, 178, 179, 190, 203, 272, 338, 389, 444, 452, 487, 500, 504, 507, 538, 540, 551, 554, 575, 579, 595, 597, 598, 614, 636, 647, 669, 702, 717, 719, 720, 721, 728, 744, 750, 758, 760, 762, 765, 774, 776, 777, 792, 793, 797, 799, 800, 807, 808, 869, 875], "result": [1, 2, 16, 17, 47, 49, 54, 60, 61, 62, 78, 79, 83, 103, 105, 106, 107, 111, 132, 133, 136, 145, 148, 190, 215, 222, 239, 240, 243, 273, 274, 309, 312, 339, 342, 359, 362, 391, 394, 411, 412, 415, 445, 447, 469, 488, 521, 524, 531, 532, 580, 593, 595, 596, 597, 598, 599, 602, 613, 614, 624, 625, 635, 646, 647, 657, 658, 668, 669, 679, 690, 691, 692, 693, 702, 703, 706, 707, 712, 714, 717, 722, 761, 777, 791, 799, 800, 807, 808, 812, 869, 871, 875], "ident": [1, 132, 133, 141, 145, 494, 545, 565, 569, 601, 723, 753, 786, 873], "As": [1, 135, 138, 141, 145, 452, 512, 537, 559, 585, 595, 597, 707, 761, 869, 875], "mention": [1, 141], "which": [1, 2, 28, 60, 61, 62, 69, 74, 78, 88, 94, 98, 101, 105, 106, 108, 132, 134, 136, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 160, 161, 162, 163, 175, 177, 178, 179, 180, 181, 186, 222, 240, 241, 252, 260, 262, 265, 274, 290, 292, 309, 310, 327, 328, 331, 339, 342, 359, 360, 378, 379, 382, 391, 394, 412, 413, 424, 432, 434, 437, 447, 452, 469, 470, 477, 478, 481, 488, 501, 521, 522, 524, 541, 552, 576, 593, 596, 597, 601, 707, 711, 712, 717, 718, 719, 720, 721, 753, 756, 787, 788, 799, 800, 805, 807, 808, 818, 835, 857, 869, 871, 873, 875], "row": [1, 28, 103, 107, 108, 111, 131, 143, 193, 490, 494, 509, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 545, 556, 569, 581, 582, 587, 593, 594, 595, 596, 597, 598, 599, 601, 693, 706, 707, 710, 714, 720, 721, 811], "so": [1, 2, 47, 60, 61, 62, 63, 64, 65, 67, 78, 103, 105, 106, 107, 136, 141, 145, 148, 190, 191, 203, 206, 251, 252, 423, 424, 595, 669, 692, 706, 707, 708, 712, 714, 717, 719, 720, 721, 807, 869, 873, 875], "column": [1, 16, 28, 52, 53, 54, 107, 131, 136, 138, 139, 142, 143, 146, 147, 240, 259, 265, 309, 326, 331, 359, 376, 382, 412, 431, 437, 452, 469, 476, 481, 490, 494, 509, 513, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 540, 545, 556, 560, 569, 581, 582, 586, 593, 594, 595, 596, 597, 598, 599, 601, 636, 680, 692, 703, 706, 707, 708, 710, 714, 715, 719, 720, 766, 770, 811, 812], "some": [1, 16, 68, 78, 80, 90, 94, 136, 138, 141, 144, 145, 160, 161, 162, 193, 217, 222, 342, 394, 523, 534, 535, 536, 707, 717, 720, 834, 873, 875], "incorpor": [1, 94, 520], "relationship": [1, 94, 141, 706, 707, 714, 717, 721, 808], "between": [1, 16, 61, 64, 74, 79, 80, 84, 95, 102, 105, 106, 107, 111, 131, 136, 137, 138, 140, 143, 146, 147, 206, 220, 240, 245, 266, 267, 268, 269, 309, 314, 332, 333, 334, 335, 359, 364, 383, 384, 385, 386, 412, 417, 438, 439, 440, 441, 469, 471, 482, 483, 484, 485, 490, 494, 506, 518, 519, 520, 524, 537, 540, 541, 545, 555, 565, 569, 580, 593, 594, 595, 596, 597, 598, 600, 601, 636, 706, 707, 708, 714, 717, 720, 721, 728, 743, 751, 752, 753, 759, 768, 778, 797, 798, 808, 871, 873], "through": [1, 35, 60, 61, 62, 145, 174, 180, 185, 494, 545, 569, 712, 761, 875], "phylogenet": [1, 78, 94, 105, 106, 141, 143, 540, 601, 728, 751, 761, 808, 868, 871], "tree": [1, 78, 94, 105, 106, 141, 146, 147, 203, 538, 868, 869], "take": [1, 107, 143, 148, 160, 161, 162, 245, 272, 314, 338, 364, 389, 417, 444, 471, 487, 506, 524, 555, 565, 580, 594, 595, 669, 706, 714, 717, 718, 808, 834, 873, 875], "treenod": [1, 78, 94, 105, 106, 141, 538, 807, 808, 869, 873], "identifi": [1, 57, 103, 107, 108, 111, 131, 134, 136, 137, 138, 139, 140, 143, 146, 147, 218, 247, 366, 419, 540, 598, 717, 721, 869], "map": [1, 49, 56, 108, 150, 163, 222, 292, 342, 394, 595, 598, 601, 602, 636, 680, 703, 719, 721, 767, 770, 871], "valu": [1, 3, 4, 7, 9, 10, 11, 18, 19, 21, 23, 24, 25, 34, 37, 39, 41, 47, 51, 60, 61, 62, 63, 64, 65, 67, 69, 80, 90, 102, 103, 106, 131, 132, 133, 135, 136, 137, 138, 139, 140, 145, 146, 151, 152, 154, 156, 157, 158, 164, 165, 167, 169, 170, 171, 190, 193, 195, 197, 198, 199, 202, 207, 209, 210, 211, 214, 218, 222, 223, 228, 231, 233, 235, 239, 240, 257, 265, 272, 273, 282, 284, 285, 286, 292, 293, 298, 301, 303, 305, 309, 324, 331, 338, 342, 343, 348, 351, 353, 355, 359, 374, 382, 389, 394, 395, 400, 403, 405, 407, 411, 412, 429, 437, 444, 445, 452, 453, 458, 461, 463, 465, 469, 475, 481, 487, 493, 496, 497, 498, 501, 516, 521, 524, 526, 528, 532, 533, 534, 535, 536, 539, 544, 547, 548, 549, 552, 562, 568, 571, 572, 573, 576, 589, 593, 594, 595, 596, 597, 598, 599, 601, 604, 605, 607, 609, 610, 611, 615, 616, 618, 620, 621, 622, 624, 626, 627, 629, 631, 632, 633, 636, 637, 638, 640, 642, 643, 644, 648, 649, 651, 653, 654, 655, 657, 659, 660, 662, 664, 665, 666, 668, 670, 671, 673, 675, 676, 677, 681, 682, 684, 686, 687, 688, 691, 694, 695, 697, 699, 700, 701, 703, 706, 707, 711, 712, 714, 716, 717, 718, 719, 720, 721, 728, 731, 732, 735, 738, 740, 741, 748, 750, 753, 792, 799, 810, 811, 812, 816, 817, 820, 822, 823, 824, 825, 834, 836, 837, 839, 841, 842, 843, 846, 848, 849, 851, 853, 854, 855, 857, 859, 860, 862, 864, 865, 866, 875], "tip": [1, 78, 94, 105, 106, 728, 746, 748, 750, 751, 752, 753, 755, 756, 758, 759, 761, 768, 773, 774, 775, 776, 778, 779, 781, 782, 783, 789, 790, 791, 792, 794, 795, 797, 800, 801, 802, 807, 869, 873], "optim": [1, 2, 16, 79, 103, 105, 106, 107, 597, 759, 809, 868], "time": [1, 16, 45, 48, 78, 90, 99, 105, 106, 108, 136, 137, 145, 490, 537, 577, 593, 594, 595, 596, 598, 602, 625, 680, 714, 717, 720, 721, 728, 792, 875], "e": [1, 16, 29, 40, 47, 50, 51, 57, 74, 79, 80, 81, 82, 83, 88, 89, 94, 95, 96, 97, 98, 99, 105, 106, 107, 108, 111, 126, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 193, 216, 240, 248, 249, 257, 290, 309, 317, 318, 324, 342, 359, 367, 368, 374, 377, 390, 412, 420, 421, 429, 446, 452, 469, 472, 473, 475, 490, 494, 501, 510, 516, 519, 524, 537, 538, 540, 541, 545, 552, 557, 562, 565, 569, 576, 583, 587, 589, 593, 594, 595, 596, 597, 703, 709, 710, 719, 720, 722, 728, 729, 730, 743, 744, 746, 748, 749, 750, 754, 755, 757, 758, 759, 761, 762, 763, 764, 768, 772, 774, 775, 776, 777, 778, 784, 788, 789, 790, 793, 794, 795, 797, 798, 799, 800, 802, 803, 804, 805, 807, 808, 812, 831, 834, 868, 869, 871, 873, 875], "often": [1, 78, 103, 107, 135, 136, 138, 540, 601, 707, 712, 717, 832], "faster": [1, 78, 105, 106, 108, 249, 278, 291, 318, 368, 421, 450, 473, 597, 712, 781], "repeat": [1, 137, 717, 831], "call": [1, 54, 78, 79, 84, 85, 105, 106, 134, 136, 143, 146, 148, 190, 193, 240, 248, 251, 272, 290, 309, 317, 338, 359, 367, 389, 412, 420, 423, 444, 452, 469, 472, 487, 582, 594, 595, 691, 707, 717, 744, 746, 747, 750, 761, 762, 764, 777, 778, 784, 793, 798, 805, 832, 834, 835, 845, 869, 875], "reason": [1, 79, 90, 135, 141, 720, 748], "matric": [1, 62, 65, 131, 140, 342, 490, 492, 499, 502, 507, 541, 543, 550, 567, 574, 594, 595, 598, 600, 601, 708, 712, 753], "rather": [1, 83, 141, 490, 521, 601, 808], "thu": [1, 136, 137, 141, 145, 249, 318, 368, 421, 452, 473, 494, 545, 565, 569, 593, 595, 597, 601, 712], "slow": [1, 78, 103, 105, 106, 107, 868], "possibl": [1, 16, 35, 95, 99, 136, 137, 145, 146, 217, 246, 278, 280, 291, 315, 365, 418, 450, 594, 598, 720, 753, 801, 807], "disabl": [1, 78, 103, 105, 106, 107, 875], "step": [1, 28, 45, 48, 56, 78, 103, 105, 106, 107, 143, 148, 710, 717], "pass": [1, 28, 35, 48, 55, 56, 59, 66, 103, 107, 108, 109, 110, 132, 134, 136, 138, 143, 144, 146, 160, 161, 162, 174, 180, 181, 182, 183, 185, 186, 187, 188, 190, 219, 221, 222, 245, 247, 249, 271, 272, 279, 290, 314, 316, 318, 337, 338, 341, 342, 364, 366, 368, 388, 389, 393, 394, 417, 419, 421, 443, 444, 451, 452, 471, 473, 486, 487, 489, 494, 511, 517, 545, 558, 563, 569, 580, 582, 584, 590, 595, 598, 636, 704, 705, 720, 774, 776, 785, 806, 808, 857, 873, 875], "fals": [1, 14, 15, 16, 29, 30, 31, 32, 33, 45, 46, 48, 50, 51, 52, 53, 57, 60, 61, 62, 72, 73, 78, 94, 103, 105, 106, 107, 132, 135, 136, 137, 138, 139, 141, 144, 160, 161, 162, 190, 191, 193, 203, 215, 216, 222, 223, 224, 225, 227, 229, 236, 239, 240, 242, 243, 244, 246, 249, 250, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 290, 291, 292, 293, 294, 295, 297, 299, 306, 309, 311, 312, 313, 315, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 345, 347, 349, 356, 359, 361, 362, 363, 365, 368, 369, 370, 371, 372, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 394, 395, 396, 397, 399, 401, 408, 411, 412, 414, 415, 416, 418, 421, 422, 424, 425, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 457, 459, 466, 469, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 491, 492, 499, 501, 524, 533, 539, 542, 543, 550, 552, 566, 567, 574, 576, 580, 582, 595, 598, 601, 602, 603, 625, 636, 669, 712, 714, 717, 719, 720, 722, 746, 751, 752, 755, 763, 769, 772, 773, 778, 786, 798, 800, 801, 803, 812, 834, 857, 871, 873, 875], "danger": 1, "howev": [1, 78, 79, 94, 103, 105, 106, 107, 136, 140, 141, 145, 147, 222, 342, 394, 452, 521, 597, 601, 712, 759, 814], "If": [1, 16, 28, 45, 47, 48, 50, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 66, 69, 72, 73, 78, 79, 80, 84, 90, 94, 103, 105, 106, 107, 108, 111, 132, 136, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 160, 161, 162, 175, 177, 181, 182, 186, 187, 190, 193, 202, 206, 219, 220, 222, 224, 229, 239, 240, 241, 243, 245, 247, 249, 252, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 290, 292, 294, 299, 309, 310, 312, 314, 316, 318, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 339, 340, 342, 344, 349, 359, 360, 362, 364, 366, 368, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 391, 392, 394, 396, 401, 411, 412, 413, 415, 417, 419, 421, 424, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 445, 447, 448, 449, 450, 452, 454, 459, 469, 470, 471, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 494, 501, 502, 504, 505, 506, 509, 510, 511, 516, 519, 520, 524, 529, 530, 532, 541, 545, 552, 554, 555, 556, 557, 558, 562, 569, 576, 579, 580, 581, 582, 583, 584, 589, 593, 594, 595, 596, 597, 598, 599, 601, 636, 647, 680, 691, 702, 703, 704, 706, 707, 708, 711, 712, 715, 717, 718, 719, 720, 721, 722, 748, 750, 751, 755, 758, 761, 762, 766, 771, 774, 776, 779, 785, 790, 791, 792, 797, 799, 800, 801, 807, 808, 811, 812, 813, 814], "invalid": [1, 50, 54, 78, 94, 103, 105, 106, 107, 136, 222, 342, 394, 594, 595, 703, 745, 750, 760, 771, 780, 784], "encount": [1, 145, 759, 761, 768], "when": [1, 16, 45, 47, 48, 54, 57, 60, 61, 62, 69, 79, 94, 95, 99, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 160, 161, 162, 181, 182, 183, 186, 187, 188, 190, 203, 215, 222, 240, 247, 248, 251, 252, 265, 292, 309, 316, 317, 331, 342, 359, 366, 367, 382, 394, 412, 419, 420, 423, 424, 437, 452, 469, 472, 481, 519, 524, 540, 593, 595, 596, 597, 599, 601, 624, 657, 668, 706, 714, 717, 718, 719, 720, 721, 722, 725, 753, 787, 804, 805, 808, 812, 813, 834, 869, 873, 875], "difficult": 1, "interpret": [1, 47, 74, 78, 103, 105, 106, 107, 131, 141, 145, 521, 706, 707, 714], "error": [1, 47, 78, 90, 94, 103, 105, 106, 107, 136, 137, 143, 145, 148, 190, 217, 274, 339, 391, 447, 488, 526, 532, 564, 591, 592, 593, 595, 597, 717, 721, 727, 813, 869], "messag": [1, 78, 103, 105, 106, 107, 614, 658, 813, 869], "incorrect": 1, "therefor": [1, 45, 48, 54, 74, 78, 94, 98, 105, 106, 111, 145, 490, 524], "recommend": [1, 83, 94, 143, 146, 222, 292, 342, 394, 452, 524, 540, 703, 706, 714, 720], "user": [1, 47, 104, 112, 132, 145, 147, 148, 150, 160, 161, 162, 181, 183, 186, 188, 524, 707, 712, 809, 868, 871], "care": [1, 47, 136, 138, 597], "ensur": [1, 16, 47, 78, 105, 106, 148, 222, 342, 394, 492, 526, 532, 543, 565, 567, 749, 811], "data": [1, 28, 54, 78, 80, 90, 94, 103, 105, 106, 107, 108, 111, 132, 135, 137, 139, 140, 142, 144, 145, 146, 147, 190, 222, 292, 342, 394, 452, 490, 492, 494, 512, 521, 522, 523, 524, 525, 532, 533, 537, 539, 541, 543, 545, 559, 565, 567, 569, 585, 594, 601, 602, 624, 657, 668, 691, 703, 706, 707, 711, 717, 719, 720, 721, 766, 797, 801, 808, 832, 835, 868, 869, 871, 875], "condit": [1, 84, 85, 720], "follow": [1, 51, 52, 54, 66, 73, 78, 79, 94, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 193, 222, 229, 257, 259, 299, 324, 326, 342, 349, 374, 376, 394, 401, 429, 431, 452, 459, 475, 476, 494, 502, 521, 522, 523, 524, 527, 528, 529, 530, 531, 536, 537, 540, 545, 569, 593, 594, 595, 597, 598, 602, 703, 706, 721, 747, 784, 835, 873, 875], "confid": [1, 68, 73, 77, 84, 717, 718, 728, 748], "met": [1, 342, 857], "safe": [1, 78, 103, 105, 106, 107, 145, 712, 722, 746], "cast": [1, 141, 240, 309, 359, 412, 469, 540, 541, 599, 703], "integ": [1, 16, 103, 107, 131, 132, 136, 137, 140, 141, 142, 143, 144, 229, 299, 349, 401, 459, 524, 540, 541, 593, 596, 597, 598, 599, 680, 722], "neg": [1, 16, 61, 64, 67, 80, 145, 290, 526, 532, 565, 706, 707, 712, 717, 721, 808], "dimension": [1, 512, 523, 534, 535, 536, 539, 541, 559, 577, 585, 706, 713, 714, 720, 721], "equal": [1, 33, 42, 47, 67, 69, 101, 105, 106, 107, 136, 194, 200, 206, 212, 227, 236, 281, 287, 297, 306, 347, 356, 399, 408, 452, 457, 466, 490, 492, 499, 519, 521, 543, 550, 567, 574, 593, 595, 596, 597, 599, 601, 691, 706, 711, 712, 715, 720, 721, 722, 751, 807, 811, 812], "being": [1, 16, 45, 47, 48, 60, 61, 62, 78, 103, 107, 136, 137, 143, 147, 537, 597, 601, 691, 720, 729, 730, 750, 754, 757, 790, 869, 871], "confirm": [1, 119, 593, 597, 721], "uniqu": [1, 54, 58, 132, 136, 140, 141, 145, 146, 147, 274, 339, 391, 447, 488, 520, 540, 597, 703, 747, 756, 761], "root": [1, 78, 89, 94, 105, 106, 141, 147, 538, 729, 730, 743, 744, 745, 746, 748, 749, 750, 754, 757, 758, 759, 760, 763, 764, 766, 768, 772, 774, 776, 777, 784, 789, 790, 793, 795, 797, 799, 800, 802, 804, 805, 807, 808, 873], "ha": [1, 16, 28, 46, 51, 52, 60, 61, 62, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 182, 187, 190, 222, 239, 240, 243, 246, 256, 257, 259, 273, 276, 277, 278, 280, 290, 291, 292, 309, 312, 315, 323, 324, 326, 342, 359, 362, 365, 373, 374, 376, 394, 411, 412, 415, 418, 428, 429, 431, 445, 446, 449, 450, 452, 469, 474, 475, 476, 526, 540, 691, 706, 708, 719, 720, 721, 749, 769, 772, 773, 787, 791, 807, 834, 871, 873], "node": [1, 78, 105, 106, 538, 723, 724, 728, 729, 730, 733, 737, 743, 744, 745, 747, 748, 749, 750, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 789, 790, 793, 794, 797, 798, 799, 800, 801, 802, 803, 807, 869, 873], "except": [1, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 141, 142, 143, 145, 149, 161, 184, 290, 504, 554, 564, 579, 591, 592, 596, 707, 723, 724, 725, 726, 727, 756, 807, 809, 810, 845, 868, 874], "branch": [1, 78, 94, 106, 538, 728, 748, 749, 758, 799, 802, 808, 873], "name": [1, 55, 59, 78, 94, 105, 106, 132, 133, 137, 138, 139, 141, 142, 144, 145, 146, 148, 150, 175, 176, 177, 182, 187, 193, 219, 221, 265, 271, 279, 280, 281, 287, 289, 331, 337, 341, 382, 388, 393, 437, 443, 451, 481, 486, 489, 490, 502, 507, 511, 517, 524, 533, 558, 563, 584, 590, 593, 594, 596, 597, 602, 614, 658, 693, 703, 704, 705, 723, 728, 742, 744, 745, 746, 748, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 766, 768, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 787, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 806, 807, 826, 832, 869, 873], "correspond": [1, 53, 78, 94, 105, 106, 136, 137, 139, 144, 146, 182, 187, 252, 265, 280, 290, 331, 382, 424, 437, 449, 450, 481, 494, 524, 537, 545, 569, 692, 693, 706, 707, 710, 721, 728, 761, 766, 770, 779, 800, 807], "There": [1, 54, 79, 90, 133, 138, 141, 144, 246, 315, 365, 418, 565, 712, 720, 721, 869, 873, 875], "ecolog": [1, 76, 707, 712], "literatur": [1, 74, 721], "relat": [1, 78, 79, 87, 94, 105, 106, 108, 135, 136, 140, 146, 540, 587, 706, 707, 714], "softwar": [1, 136, 137, 145, 868], "measur": [1, 74, 76, 82, 84, 85, 88, 89, 93, 94, 95, 97, 98, 99, 105, 106, 490, 524, 533, 539, 540, 706, 719, 720, 728, 748], "alwai": [1, 16, 135, 138, 141, 143, 145, 161, 190, 193, 214, 290, 758, 814, 875], "assum": [1, 69, 78, 80, 86, 89, 105, 106, 134, 136, 137, 140, 142, 160, 162, 229, 276, 277, 278, 299, 349, 401, 459, 494, 540, 541, 545, 569, 580, 601, 602, 707, 711, 717, 718, 720, 721], "abund": [1, 69, 70, 78, 80, 83, 90, 94, 102, 103, 105, 106, 107, 108, 111, 524, 692, 706, 707, 713, 714, 721], "where": [1, 2, 67, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 107, 108, 111, 131, 136, 140, 141, 142, 145, 146, 148, 242, 244, 248, 250, 260, 262, 267, 269, 270, 272, 311, 313, 317, 319, 327, 328, 333, 335, 336, 338, 361, 363, 367, 369, 378, 379, 384, 386, 387, 389, 390, 414, 416, 420, 422, 432, 434, 439, 441, 442, 444, 472, 477, 478, 483, 485, 487, 490, 494, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 545, 569, 595, 601, 691, 703, 711, 713, 714, 715, 717, 721, 722, 728, 752, 753, 763, 767, 800, 803, 832, 873, 875], "three": [1, 28, 93, 143, 147, 540, 565, 598, 692, 703, 720, 721, 753, 875], "were": [1, 62, 65, 78, 83, 103, 105, 106, 107, 141, 143, 144, 227, 262, 297, 328, 347, 379, 399, 434, 457, 478, 593, 595, 597, 703, 720, 721, 774, 776, 810, 875], "onli": [1, 16, 54, 81, 84, 94, 111, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 190, 203, 218, 222, 240, 247, 280, 309, 316, 342, 359, 366, 394, 412, 419, 452, 469, 490, 504, 521, 524, 554, 565, 579, 580, 582, 587, 593, 597, 598, 691, 707, 712, 714, 719, 720, 721, 749, 752, 753, 755, 758, 761, 784, 792, 797, 801, 814, 857, 868, 873, 875], "wa": [1, 60, 63, 69, 70, 71, 74, 77, 78, 80, 81, 82, 86, 87, 94, 95, 97, 98, 103, 105, 106, 107, 108, 134, 136, 137, 141, 143, 190, 262, 290, 328, 379, 434, 452, 478, 524, 533, 537, 539, 595, 647, 711, 719, 721, 744, 786, 807, 808, 869, 873, 875], "second": [1, 16, 28, 60, 61, 62, 63, 64, 65, 66, 137, 143, 148, 162, 193, 215, 281, 494, 524, 545, 569, 721, 767, 770, 800, 869, 875], "form": [1, 28, 60, 192, 494, 541, 545, 565, 569, 587, 799], "among": [1, 74, 94, 138, 516, 562, 589, 603, 707, 714], "expect": [1, 108, 132, 148, 177, 184, 222, 342, 394, 529, 530, 540, 601, 706, 707, 714, 724, 725, 799, 875], "3": [1, 16, 28, 33, 45, 46, 48, 50, 53, 54, 56, 57, 60, 64, 69, 77, 78, 81, 86, 94, 97, 102, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 193, 203, 215, 220, 227, 229, 239, 240, 241, 246, 247, 263, 264, 266, 272, 273, 274, 277, 278, 290, 291, 297, 299, 309, 310, 315, 316, 329, 330, 332, 338, 339, 342, 347, 349, 359, 360, 365, 366, 380, 381, 383, 389, 391, 399, 401, 411, 412, 413, 418, 419, 435, 436, 438, 444, 445, 447, 449, 450, 452, 457, 459, 469, 470, 479, 480, 482, 487, 488, 501, 510, 513, 516, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 533, 534, 535, 536, 539, 541, 552, 557, 560, 562, 576, 583, 586, 587, 589, 593, 594, 595, 597, 598, 599, 601, 602, 603, 625, 636, 669, 692, 693, 703, 706, 707, 712, 713, 717, 719, 720, 721, 722, 743, 753, 758, 759, 766, 767, 768, 791, 795, 797, 799, 800, 802, 803, 808, 813, 868, 871, 873, 875], "indic": [1, 15, 29, 30, 33, 42, 51, 52, 69, 72, 73, 88, 94, 111, 131, 136, 137, 145, 148, 193, 194, 200, 203, 206, 212, 224, 227, 229, 236, 242, 244, 247, 248, 250, 253, 254, 255, 256, 257, 258, 259, 262, 267, 269, 270, 272, 274, 280, 281, 287, 294, 297, 299, 306, 311, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 333, 335, 336, 338, 339, 344, 347, 349, 356, 361, 363, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 384, 386, 387, 389, 390, 391, 396, 399, 401, 408, 414, 416, 419, 420, 422, 425, 426, 427, 428, 429, 430, 431, 434, 439, 441, 442, 444, 447, 454, 457, 459, 466, 472, 474, 475, 476, 478, 483, 485, 487, 488, 490, 524, 538, 593, 595, 596, 597, 601, 691, 702, 703, 719, 763, 765, 803, 846, 857, 873, 875], "singleton": [1, 69, 72, 73, 77, 79, 81, 93, 96, 100, 148], "tripleton": 1, "do": [1, 45, 48, 90, 131, 136, 143, 145, 148, 190, 222, 227, 269, 297, 335, 342, 347, 386, 394, 399, 441, 452, 457, 485, 519, 524, 595, 598, 636, 714, 748, 761, 791, 792, 873, 875], "ani": [1, 16, 46, 47, 54, 56, 66, 67, 70, 101, 102, 136, 138, 140, 141, 145, 146, 160, 161, 162, 182, 187, 190, 193, 203, 217, 218, 222, 342, 394, 452, 490, 519, 524, 526, 595, 598, 602, 636, 658, 706, 711, 717, 719, 720, 745, 748, 749, 750, 760, 768, 797, 799, 807, 834, 835, 845, 857, 873, 875], "ton": 1, "doubleton": [1, 72, 73, 75, 77, 93], "paramet": [1, 2, 16, 17, 28, 30, 33, 42, 45, 47, 48, 49, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 148, 150, 160, 161, 162, 173, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 190, 193, 194, 200, 203, 206, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 227, 229, 236, 239, 240, 241, 245, 247, 248, 249, 252, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 274, 275, 277, 278, 279, 280, 281, 287, 289, 290, 291, 294, 297, 299, 306, 309, 310, 314, 316, 317, 318, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 347, 349, 356, 359, 360, 364, 366, 367, 368, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 396, 399, 401, 408, 411, 412, 413, 417, 419, 420, 421, 424, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 454, 457, 459, 466, 469, 470, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 499, 501, 502, 504, 505, 506, 508, 509, 510, 511, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 550, 552, 554, 555, 556, 557, 558, 562, 563, 566, 567, 569, 574, 576, 579, 580, 581, 582, 583, 584, 589, 590, 593, 594, 595, 596, 597, 598, 599, 601, 624, 636, 657, 668, 680, 691, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 728, 743, 745, 746, 749, 750, 751, 752, 753, 755, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 789, 791, 792, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 831, 832, 833, 834, 835, 845, 846, 857, 875], "either": [1, 28, 35, 54, 56, 60, 61, 62, 94, 132, 145, 146, 160, 161, 162, 252, 262, 292, 328, 379, 424, 434, 478, 520, 595, 597, 691, 703, 706, 711, 719, 721, 807], "string": [1, 2, 16, 44, 103, 107, 108, 111, 131, 134, 136, 137, 141, 143, 145, 146, 238, 248, 249, 265, 272, 274, 275, 280, 288, 308, 317, 318, 331, 338, 339, 340, 358, 367, 368, 382, 389, 391, 392, 410, 420, 421, 437, 444, 447, 448, 468, 472, 473, 481, 487, 488, 490, 494, 500, 506, 524, 540, 541, 545, 551, 555, 569, 575, 580, 593, 596, 597, 599, 702, 703, 742, 746, 800, 808, 813, 873], "faith_pd": [1, 94], "gener": [1, 45, 48, 60, 66, 67, 68, 86, 94, 108, 137, 138, 139, 141, 146, 147, 160, 162, 175, 177, 181, 186, 189, 248, 262, 263, 317, 328, 329, 367, 379, 380, 420, 434, 435, 452, 472, 478, 479, 490, 540, 564, 591, 593, 594, 595, 599, 691, 693, 703, 706, 717, 720, 721, 727, 868, 869, 871, 874], "version": [1, 72, 73, 78, 94, 103, 105, 106, 107, 131, 132, 134, 135, 138, 139, 143, 161, 246, 275, 315, 340, 365, 392, 418, 448, 537, 742, 746, 809, 813, 871], "ten": 1, "faith": [1, 78, 94, 540], "pd": [1, 28, 48, 52, 57, 78, 94, 103, 132, 133, 147, 222, 259, 292, 326, 342, 376, 394, 431, 452, 476, 501, 513, 516, 524, 540, 552, 560, 562, 576, 586, 587, 589, 593, 594, 597, 602, 692, 693, 703, 706, 714, 719, 720, 766, 811], "about": [1, 55, 59, 90, 134, 136, 137, 141, 145, 146, 148, 203, 219, 221, 222, 271, 279, 292, 337, 341, 342, 388, 393, 394, 443, 451, 452, 486, 489, 511, 517, 519, 558, 563, 584, 590, 692, 704, 705, 714, 720, 721, 785, 806, 809, 810, 871], "100": [1, 132, 133, 136, 139, 218, 524, 721, 875], "unweighted_unifrac": [1, 106], "hundr": [1, 108], "unweight": [1, 94, 105, 106, 715], "unifrac": [1, 78, 94, 105, 106, 108, 111, 712], "latter": [1, 490], "mai": [1, 2, 16, 47, 56, 78, 85, 126, 133, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 161, 178, 179, 190, 193, 217, 222, 249, 292, 318, 342, 368, 394, 421, 452, 473, 490, 494, 504, 519, 524, 540, 545, 554, 569, 579, 595, 597, 601, 691, 706, 717, 719, 720, 721, 722, 766, 809, 832, 834, 869, 871], "case": [1, 47, 60, 61, 62, 70, 108, 136, 141, 143, 145, 147, 150, 222, 252, 265, 274, 331, 339, 382, 391, 394, 424, 437, 447, 481, 488, 502, 541, 595, 601, 706, 711, 713, 721, 748, 781, 807, 834, 835, 869, 873], "run": [1, 78, 103, 105, 106, 107, 137, 144, 145, 247, 316, 366, 419, 524, 593, 594, 595, 597, 598, 601, 613, 635, 646, 679, 690, 703, 871, 875], "like": [1, 60, 61, 62, 108, 136, 138, 139, 140, 142, 145, 148, 265, 331, 382, 437, 481, 490, 540, 601, 624, 636, 657, 658, 668, 680, 712, 714, 720, 721, 833, 869, 875], "small": [1, 140, 146, 521, 532, 714], "neglig": 1, "know": [1, 16, 78, 105, 106, 134, 136, 143, 146, 148, 524, 717, 809, 869], "might": [1, 80, 140, 142, 594, 719, 720, 721, 753, 869], "ve": [1, 136, 137, 721, 873], "develop": [1, 2, 108, 111, 135, 145, 160, 161, 162, 524, 808, 868, 869, 875], "To": [1, 35, 67, 78, 105, 106, 136, 137, 138, 141, 144, 145, 148, 190, 222, 342, 394, 524, 565, 587, 593, 595, 597, 601, 717, 748, 869, 875], "discov": [1, 756], "get_alpha_diversity_metr": [1, 103, 110], "get_beta_diversity_metr": [1, 107, 109, 111], "respect": [1, 28, 72, 136, 139, 142, 145, 147, 160, 161, 162, 180, 181, 183, 186, 188, 190, 249, 318, 368, 421, 452, 473, 501, 506, 508, 516, 524, 537, 552, 555, 562, 576, 580, 587, 589, 601, 693], "addit": [1, 66, 78, 104, 105, 106, 110, 135, 136, 137, 138, 139, 143, 144, 145, 222, 342, 394, 490, 521, 522, 523, 540, 565, 728, 749, 761, 762, 807, 834], "won": [1, 78, 103, 105, 106, 107, 137, 194, 707], "t": [1, 16, 28, 45, 47, 48, 49, 53, 54, 58, 66, 78, 80, 94, 103, 105, 106, 107, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 160, 162, 184, 191, 193, 194, 222, 227, 236, 241, 245, 249, 251, 252, 253, 254, 255, 258, 266, 267, 268, 269, 276, 290, 297, 306, 310, 314, 318, 320, 321, 322, 325, 332, 333, 334, 335, 342, 347, 356, 360, 364, 368, 370, 371, 372, 375, 383, 384, 385, 386, 394, 399, 408, 413, 417, 421, 423, 424, 425, 426, 427, 430, 438, 439, 440, 441, 446, 452, 457, 466, 470, 471, 473, 482, 483, 484, 485, 490, 508, 521, 522, 524, 529, 530, 533, 538, 541, 565, 592, 598, 706, 707, 712, 714, 716, 717, 719, 721, 722, 752, 753, 790, 791, 799, 807, 808, 809, 871, 874, 875], "those": [1, 104, 145, 601, 691, 706, 721, 758, 792, 797, 808, 834, 871], "scipi": [1, 79, 104, 107, 110, 512, 519, 524, 529, 538, 541, 559, 565, 577, 585, 587, 594, 595, 597, 601, 712, 717, 720, 721, 765], "spatial": [1, 104, 107, 110, 512, 519, 541, 559, 565, 577, 585, 587, 597], "distanc": [1, 16, 94, 104, 105, 106, 107, 108, 110, 111, 131, 140, 141, 266, 268, 332, 334, 383, 385, 438, 440, 482, 484, 501, 504, 510, 512, 516, 522, 533, 600, 601, 703, 706, 707, 709, 712, 714, 728, 742, 743, 751, 753, 768, 790, 797, 808, 871, 872, 873], "pdist": [1, 104, 107, 110, 601], "creat": [1, 16, 28, 45, 48, 49, 53, 55, 56, 57, 58, 135, 136, 139, 141, 143, 145, 163, 174, 185, 190, 191, 193, 203, 214, 215, 219, 222, 271, 272, 292, 337, 338, 342, 388, 389, 394, 443, 444, 452, 486, 487, 505, 506, 508, 510, 511, 513, 514, 524, 532, 540, 555, 557, 558, 560, 580, 583, 584, 586, 587, 599, 601, 636, 692, 703, 704, 749, 750, 771, 785, 808, 871, 873, 875], "6": [1, 48, 66, 67, 72, 73, 78, 91, 92, 94, 101, 105, 106, 111, 133, 135, 136, 137, 138, 145, 146, 147, 239, 240, 248, 249, 258, 270, 272, 273, 274, 292, 309, 317, 318, 325, 336, 338, 339, 359, 367, 368, 375, 387, 389, 391, 411, 412, 420, 421, 430, 442, 444, 445, 447, 469, 472, 473, 487, 488, 490, 502, 505, 507, 508, 514, 516, 524, 526, 530, 533, 534, 535, 562, 587, 589, 595, 597, 598, 601, 692, 717, 743, 748, 758, 759, 767, 768, 797, 799, 800, 807, 871], "7": [1, 63, 73, 94, 108, 136, 137, 138, 146, 147, 193, 203, 215, 220, 222, 229, 240, 290, 299, 309, 349, 359, 394, 401, 412, 459, 469, 516, 524, 533, 539, 562, 589, 594, 595, 597, 598, 601, 692, 717, 753, 767, 791, 799, 800, 808, 812, 871], "23": [1, 142, 145, 146, 289, 524, 871], "64": [1, 108, 137, 145, 280, 281, 803], "14": [1, 73, 83, 94, 135, 137, 142, 243, 247, 312, 316, 362, 366, 415, 419, 524, 602, 721, 759, 797], "35": [1, 135, 137, 138, 144, 521, 721], "42": [1, 54, 79, 136, 142, 143, 145, 222, 245, 314, 364, 394, 417, 471, 594, 597], "12": [1, 135, 142, 452, 524, 533, 717, 871], "40": [1, 81, 136, 145, 147, 537, 719, 721], "44": [1, 95, 597, 807], "9": [1, 132, 133, 134, 136, 139, 142, 145, 146, 190, 193, 203, 222, 243, 247, 292, 312, 316, 342, 362, 366, 394, 415, 419, 452, 524, 601, 602, 692, 706, 707, 709, 710, 712, 713, 714, 717, 755, 758, 767, 797, 800, 807, 808, 871], "45": [1, 142, 145, 721], "19": [1, 135, 142, 717], "abcdef": 1, "ll": [1, 78, 105, 106, 594, 595, 598, 692, 717, 720, 721, 873, 875], "adiv_sob": 1, "sob": [1, 91, 92, 93], "A": [1, 16, 28, 49, 50, 53, 54, 55, 58, 60, 62, 65, 69, 72, 77, 78, 79, 80, 82, 83, 89, 94, 97, 105, 106, 108, 131, 132, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 174, 178, 179, 185, 192, 193, 214, 218, 219, 222, 243, 249, 255, 271, 274, 281, 287, 292, 312, 318, 322, 337, 339, 342, 362, 368, 372, 388, 391, 394, 415, 421, 427, 443, 447, 452, 473, 486, 488, 490, 501, 502, 506, 508, 510, 511, 515, 516, 521, 524, 526, 532, 533, 534, 535, 536, 537, 539, 540, 541, 552, 555, 557, 558, 561, 562, 565, 576, 580, 583, 584, 588, 589, 594, 595, 596, 597, 599, 601, 614, 636, 658, 702, 703, 704, 706, 707, 712, 714, 719, 720, 721, 728, 729, 730, 743, 748, 751, 753, 754, 757, 758, 759, 760, 763, 764, 765, 767, 768, 770, 777, 785, 787, 789, 790, 795, 797, 804, 805, 807, 857, 869, 873, 875], "b": [1, 16, 49, 54, 56, 57, 58, 78, 79, 80, 90, 94, 111, 137, 140, 141, 145, 191, 222, 342, 394, 452, 494, 501, 502, 505, 510, 513, 516, 538, 540, 545, 552, 557, 560, 562, 569, 576, 583, 586, 587, 589, 594, 595, 691, 703, 719, 720, 729, 730, 742, 743, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 761, 762, 763, 764, 768, 769, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 799, 801, 802, 803, 804, 805, 807, 808, 833, 869, 871, 873], "c": [1, 2, 16, 28, 46, 53, 54, 56, 57, 66, 69, 78, 79, 80, 81, 82, 94, 95, 97, 99, 105, 106, 111, 135, 136, 137, 141, 143, 145, 146, 147, 162, 222, 232, 237, 243, 249, 251, 252, 302, 307, 312, 318, 342, 352, 357, 362, 368, 394, 404, 409, 415, 421, 423, 424, 452, 462, 467, 473, 490, 501, 505, 508, 510, 513, 516, 521, 523, 528, 533, 534, 535, 536, 538, 539, 540, 552, 557, 560, 562, 576, 583, 586, 587, 589, 594, 595, 703, 713, 719, 720, 729, 730, 742, 743, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 761, 762, 763, 764, 768, 769, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 799, 801, 802, 803, 804, 805, 807, 808, 871, 873], "f": [1, 16, 54, 70, 84, 94, 108, 132, 133, 137, 141, 144, 146, 147, 191, 342, 595, 596, 597, 707, 710, 717, 720, 729, 730, 743, 744, 746, 748, 749, 750, 754, 755, 757, 758, 759, 761, 762, 763, 764, 768, 774, 775, 776, 777, 778, 784, 788, 789, 790, 793, 794, 795, 797, 798, 802, 803, 804, 805, 807, 873], "int64": [1, 28, 46, 54, 239, 243, 273, 312, 362, 411, 415, 445, 452, 524, 871], "next": [1, 78, 84, 85, 105, 106, 135, 141, 148, 452, 524, 680, 706, 807, 873, 875], "same": [1, 28, 46, 47, 48, 50, 54, 56, 74, 78, 83, 94, 95, 99, 105, 106, 136, 137, 138, 139, 141, 144, 146, 148, 206, 220, 227, 229, 236, 239, 240, 243, 245, 246, 262, 266, 267, 268, 269, 273, 277, 280, 281, 290, 297, 299, 306, 309, 312, 314, 315, 328, 332, 333, 334, 335, 347, 349, 356, 359, 362, 364, 365, 379, 383, 384, 385, 386, 399, 401, 408, 411, 412, 415, 417, 418, 434, 438, 439, 440, 441, 445, 449, 452, 457, 459, 466, 469, 471, 478, 482, 483, 484, 485, 492, 494, 502, 503, 504, 506, 515, 519, 520, 524, 543, 545, 553, 554, 555, 561, 567, 569, 578, 579, 580, 582, 588, 593, 594, 595, 596, 597, 598, 601, 691, 706, 707, 711, 712, 714, 720, 721, 722, 762, 792, 807, 811, 871, 873], "sinc": [1, 28, 45, 48, 57, 80, 135, 136, 138, 143, 145, 147, 194, 249, 290, 318, 368, 421, 452, 473, 524, 595, 717, 721, 801, 814, 875], "order": [1, 16, 38, 43, 49, 53, 54, 57, 103, 107, 131, 132, 136, 140, 141, 142, 143, 146, 215, 222, 237, 246, 249, 274, 278, 280, 291, 307, 315, 318, 339, 342, 357, 365, 368, 391, 394, 409, 418, 421, 447, 450, 467, 473, 488, 492, 494, 501, 504, 516, 524, 538, 543, 545, 552, 554, 562, 567, 569, 576, 579, 582, 587, 589, 593, 594, 595, 596, 597, 598, 601, 706, 715, 719, 720, 778, 797, 798, 799, 807, 809, 811, 873, 875], "io": [1, 55, 59, 78, 105, 106, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 540, 558, 563, 584, 590, 703, 704, 705, 766, 785, 806, 807, 833, 868, 873], "stringio": [1, 78, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 190, 540, 807, 808, 869, 873], "otu1": [1, 78, 105, 106], "otu2": [1, 78, 105, 106], "otu3": [1, 78, 105, 106], "otu4": [1, 78, 105, 106], "75": [1, 50, 78, 83, 105, 106, 266, 332, 383, 438, 482, 524, 540, 594, 597, 803], "otu5": [1, 78, 105, 106], "otu6": [1, 78, 105, 106], "otu7": [1, 78, 105, 106], "otu_id": [1, 78, 94, 105, 106], "adiv_faith_pd": 1, "00": [1, 132, 133, 136, 139, 142, 240, 276, 309, 359, 412, 446, 469, 808, 871], "50": [1, 62, 65, 136, 139, 142, 240, 309, 359, 412, 469, 524, 602, 703, 720, 721, 871], "float64": [1, 54, 131, 240, 309, 359, 412, 469, 524, 526, 532, 534, 535, 536, 587, 597, 692], "now": [1, 83, 135, 136, 138, 143, 452, 521, 524, 594, 691, 692, 717, 720, 721, 873, 875], "brai": 1, "curti": 1, "notic": [1, 136, 141, 143, 721, 875], "bc_dm": 1, "braycurti": 1, "6x6": [1, 597], "78787879": 1, "86666667": 1, "30927835": 1, "85714286": 1, "81521739": 1, "78142077": 1, "86813187": 1, "1627907": 1, "87709497": 1, "09392265": 1, "71597633": 1, "87777778": 1, "89285714": 1, "68235294": 1, "weight": [1, 78, 94, 105, 106, 141, 602, 603, 625, 636, 647, 669, 711, 715, 807], "becaus": [1, 47, 53, 54, 78, 105, 106, 132, 136, 137, 138, 141, 143, 144, 145, 148, 227, 262, 290, 297, 328, 347, 379, 399, 434, 452, 457, 478, 524, 595, 707, 712, 714, 716, 719, 748, 753, 756, 800], "need": [1, 45, 48, 53, 78, 105, 106, 108, 131, 139, 141, 148, 160, 162, 190, 203, 218, 292, 524, 529, 530, 538, 593, 594, 596, 597, 598, 691, 692, 707, 714, 717, 720, 721, 750, 753, 811, 812, 834, 875], "again": [1, 136, 137, 537, 808], "wu_dm": 1, "weighted_unifrac": [1, 105], "77549923": 1, "82857143": 1, "42512039": 1, "8547619": 1, "10937312": 1, "26433692": 1, "98435423": 1, "24270353": 1, "46774194": 1, "95224719": 1, "16025641": 1, "86111111": 1, "98796148": 1, "30870431": 1, "82967033": 1, "determin": [1, 30, 33, 42, 51, 52, 78, 94, 103, 105, 106, 107, 140, 148, 178, 179, 190, 224, 227, 236, 253, 254, 255, 256, 257, 258, 259, 261, 281, 287, 294, 297, 306, 320, 321, 322, 323, 324, 325, 326, 344, 347, 356, 370, 371, 372, 373, 374, 375, 376, 377, 396, 399, 408, 425, 426, 427, 428, 429, 430, 431, 433, 454, 457, 466, 474, 475, 476, 499, 524, 550, 574, 597, 601, 691, 712, 717, 719, 720, 807, 875], "significantli": [1, 53, 524, 593, 596, 597], "correl": [1, 533, 539, 540, 594, 595, 598, 600, 601, 693, 707, 708, 714, 717, 721, 753, 873], "mantel": [1, 540, 598, 601], "them": [1, 80, 138, 143, 145, 194, 206, 215, 216, 452, 595, 636, 711, 712, 714, 835], "Then": [1, 521, 524, 602, 692], "p": [1, 16, 66, 78, 87, 88, 94, 342, 524, 537, 540, 593, 595, 596, 597, 598, 601, 692, 706, 707, 708, 714, 717, 720, 721], "signific": [1, 145, 524, 593, 595, 596, 597, 598, 601, 720, 721], "base": [1, 54, 61, 64, 69, 72, 73, 77, 78, 82, 83, 88, 89, 90, 94, 97, 99, 105, 106, 132, 136, 138, 142, 144, 145, 193, 214, 222, 262, 292, 328, 342, 379, 394, 434, 452, 478, 494, 541, 545, 569, 593, 595, 596, 597, 601, 636, 706, 707, 714, 717, 719, 720, 721, 751, 763, 764, 807, 833, 871, 872, 873, 875], "05": [1, 142, 524, 601, 717, 718, 720, 721, 811], "r": [1, 16, 78, 79, 83, 84, 85, 86, 87, 94, 105, 106, 137, 138, 147, 190, 222, 342, 394, 502, 521, 522, 523, 527, 528, 529, 530, 537, 593, 594, 595, 596, 597, 601, 703, 706, 707, 714, 750, 791], "p_valu": [1, 595, 601], "n": [1, 16, 70, 71, 77, 79, 80, 81, 86, 87, 88, 89, 90, 94, 96, 102, 131, 132, 133, 134, 136, 137, 138, 142, 143, 144, 146, 147, 148, 160, 161, 162, 190, 191, 222, 262, 274, 328, 339, 342, 366, 379, 391, 394, 434, 447, 478, 488, 532, 540, 595, 598, 601, 691, 706, 707, 708, 711, 713, 714, 715, 717, 721, 722, 729, 730, 742, 750, 754, 757, 763, 768, 770, 777, 792, 793, 800, 807, 808, 813, 871], "922404392093": 1, "true": [1, 14, 15, 16, 29, 30, 31, 32, 33, 45, 46, 48, 49, 50, 51, 52, 53, 57, 58, 60, 61, 62, 72, 73, 78, 79, 94, 101, 103, 105, 106, 107, 108, 111, 132, 135, 136, 137, 138, 139, 141, 144, 150, 160, 161, 162, 181, 186, 190, 191, 193, 203, 215, 220, 222, 223, 224, 226, 227, 229, 236, 239, 240, 242, 243, 244, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 290, 291, 292, 293, 294, 296, 297, 299, 306, 309, 311, 312, 313, 315, 318, 319, 320, 321, 322, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 346, 347, 349, 356, 359, 361, 362, 363, 365, 368, 369, 370, 371, 372, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 394, 395, 396, 398, 399, 401, 408, 411, 412, 414, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 433, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 456, 457, 459, 466, 469, 473, 475, 476, 479, 480, 481, 482, 483, 484, 485, 487, 488, 491, 492, 499, 501, 504, 520, 524, 529, 530, 533, 540, 541, 542, 543, 550, 552, 554, 565, 566, 567, 574, 576, 579, 580, 582, 593, 595, 597, 598, 601, 636, 647, 711, 712, 714, 715, 719, 720, 722, 746, 748, 750, 755, 763, 769, 771, 772, 773, 775, 778, 781, 782, 783, 786, 787, 788, 789, 798, 800, 801, 803, 807, 808, 834, 835, 845, 857, 871, 873, 875], "princip": [1, 597, 692, 703, 706, 712, 713], "coordin": [1, 138, 144, 193, 203, 206, 214, 215, 220, 538, 597, 602, 636, 669, 680, 692, 693, 703, 706, 712, 713, 714], "analysi": [1, 78, 90, 105, 106, 136, 143, 521, 522, 524, 537, 593, 596, 597, 602, 603, 624, 625, 657, 668, 669, 680, 692, 703, 706, 707, 712, 713, 714, 717, 720, 721], "pcoa": [1, 142, 597, 693, 703, 713], "our": [1, 80, 137, 145, 148, 161, 191, 262, 328, 379, 434, 478, 692, 717, 720, 721, 722, 871, 875], "ordin": [1, 125, 597, 812, 813, 872], "wu_pc": 1, "plot": [1, 693], "realli": 1, "interest": [1, 145, 452, 524, 540, 601, 706, 714, 720, 774, 776, 875], "context": [1, 16, 191, 192, 519, 703, 808], "let": [1, 136, 137, 139, 143, 144, 146, 193, 203, 272, 338, 389, 444, 452, 487, 524, 595, 691, 716, 717, 720, 721, 809, 871, 873, 875], "visual": [1, 703], "panda": [1, 28, 52, 57, 107, 132, 133, 147, 222, 259, 326, 342, 376, 394, 431, 476, 513, 524, 560, 586, 587, 593, 594, 596, 597, 598, 602, 636, 680, 692, 703, 719, 720, 766, 811, 871], "sample_md": 1, "datafram": [1, 28, 52, 107, 132, 133, 147, 222, 259, 292, 326, 342, 376, 394, 431, 452, 476, 501, 513, 516, 524, 552, 560, 562, 576, 586, 589, 593, 594, 596, 597, 598, 602, 636, 680, 692, 693, 703, 706, 707, 713, 714, 719, 720, 766, 811, 871], "gut": [1, 145, 703], "skin": [1, 703], "tongu": 1, "body_sit": [1, 703], "subject": [1, 132, 133, 145, 875], "color": [1, 84, 85, 510, 557, 583, 703], "taken": [1, 132, 133, 136, 143, 146, 147, 524, 601, 833], "fig": [1, 510, 557, 583, 703], "axis_label": [1, 703], "pc": [1, 602, 703], "titl": [1, 132, 133, 138, 146, 510, 557, 583, 703], "cmap": [1, 510, 557, 583, 703], "jet": 1, "don": [1, 16, 54, 136, 145, 251, 252, 423, 424, 522, 524, 598, 714, 717, 721, 752, 753, 790, 808], "see": [1, 53, 54, 55, 59, 66, 67, 78, 94, 103, 105, 106, 107, 108, 110, 111, 133, 135, 136, 137, 141, 143, 144, 145, 147, 148, 219, 221, 245, 271, 279, 280, 291, 314, 337, 341, 364, 388, 393, 417, 443, 451, 452, 471, 486, 489, 494, 511, 517, 545, 558, 563, 569, 584, 590, 593, 594, 595, 596, 597, 598, 601, 692, 703, 704, 705, 712, 714, 716, 717, 721, 785, 806, 869, 875], "cluster": [1, 595, 597, 765, 871], "group": [1, 101, 145, 275, 340, 392, 448, 501, 524, 537, 552, 576, 593, 596, 597, 602, 603, 613, 614, 635, 646, 658, 668, 669, 679, 690, 719, 720, 721, 834, 873], "instead": [1, 50, 97, 135, 136, 138, 145, 148, 150, 160, 161, 162, 216, 249, 262, 264, 266, 268, 274, 318, 328, 330, 332, 334, 339, 368, 379, 381, 383, 385, 391, 421, 434, 436, 438, 440, 447, 473, 478, 480, 482, 484, 488, 541, 593, 595, 597, 711, 720, 721, 753, 808, 809, 869], "bodi": [1, 703], "site": [1, 138, 142, 262, 328, 379, 434, 478, 692, 693, 703, 712], "appear": [1, 69, 132, 143, 145, 146, 504, 554, 579, 594, 706, 707, 712, 717], "closer": [1, 875], "anoth": [1, 33, 42, 45, 54, 78, 105, 106, 138, 140, 141, 194, 200, 203, 206, 212, 217, 220, 227, 236, 245, 267, 269, 281, 287, 297, 306, 314, 333, 335, 347, 356, 364, 384, 386, 399, 408, 417, 439, 441, 452, 457, 466, 471, 483, 485, 490, 492, 543, 567, 601], "space": [1, 136, 141, 143, 145, 146, 203, 206, 215, 521, 522, 523, 527, 528, 529, 530, 636, 693, 703, 706, 713], "matplotlib": [1, 510, 557, 583, 693, 703], "pyplot": 1, "plt": 1, "close": [1, 55, 59, 79, 136, 137, 141, 143, 146, 190, 191, 219, 221, 271, 279, 290, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 524, 558, 563, 584, 590, 624, 657, 668, 704, 705, 785, 806, 833], "necessari": [1, 54, 132, 143, 203, 452, 524, 541, 593, 594, 595, 624, 657, 668, 753, 832, 869], "normal": [1, 77, 106, 137, 138, 593, 597, 712, 713, 714, 717, 718, 720, 721, 750], "techniqu": [1, 79, 521, 706, 707, 872], "exploratori": 1, "quantifi": 1, "strength": 1, "mani": [1, 69, 93, 110, 141, 145, 490, 521, 524, 601, 706, 712, 720, 721, 875], "statist": [1, 69, 72, 77, 83, 90, 522, 524, 593, 595, 596, 597, 598, 601, 706, 707, 711, 717, 720, 721, 868], "accomplish": [1, 521, 869], "oper": [1, 45, 48, 54, 78, 105, 106, 132, 136, 141, 216, 222, 251, 252, 342, 394, 423, 424, 452, 521, 523, 534, 535, 536, 540, 541, 577, 595, 596, 712, 766, 790, 807, 835, 869, 871], "anosim": [1, 596, 597], "test": [1, 33, 42, 94, 148, 194, 200, 206, 212, 227, 236, 281, 287, 297, 306, 347, 356, 399, 408, 457, 466, 521, 524, 540, 593, 595, 596, 597, 598, 600, 601, 613, 635, 646, 679, 690, 717, 720, 721, 811, 812, 832, 868], "permut": [1, 194, 593, 595, 596, 597, 598, 601], "999": [1, 452, 593, 595, 596, 597, 598, 601], "33333333333333331": 1, "anti": [1, 593], "insignific": 1, "strong": [1, 222, 593, 595, 601], "separ": [1, 132, 133, 136, 137, 139, 140, 141, 142, 143, 145, 597, 707], "explor": [1, 104, 692], "add": [1, 61, 64, 145, 146, 148, 173, 193, 203, 215, 217, 227, 297, 347, 399, 452, 457, 526, 532, 534, 535, 536, 745, 758, 760], "rich": [1, 68, 72, 78, 86, 89, 94, 101], "straight": 1, "forward": [1, 278, 290, 291, 450], "seri": [1, 57, 103, 139, 524, 587, 593, 594, 596, 597, 602, 693, 717], "ob": [1, 72, 101], "investig": 1, "categori": [1, 145, 146, 602, 603, 613, 614, 624, 635, 636, 646, 647, 658, 668, 669, 679, 680, 690, 703, 717, 719, 720], "boxplot": 1, "show": [1, 203, 717, 873], "spearman": [1, 594, 595, 598], "numer": [1, 79, 83, 132, 140, 145, 147, 537, 594, 595, 636, 692, 703, 706, 707, 713, 714, 721, 812], "relev": [1, 16, 138, 720, 871], "give": [1, 141, 706, 707, 714, 753], "u": [1, 62, 65, 78, 84, 87, 105, 106, 135, 136, 138, 147, 227, 232, 236, 237, 276, 297, 302, 306, 307, 342, 347, 352, 356, 357, 394, 399, 404, 408, 409, 446, 457, 462, 466, 467, 524, 527, 528, 538, 595, 716, 721, 871, 875], "symmetr": [1, 490, 494, 540, 541, 545, 565, 569, 580, 595, 599, 601, 706, 751], "2x2": [1, 140], "corr": 1, "numeric_onli": 1, "000000": [1, 808], "939336": 1, "class": [2, 16, 28, 51, 52, 67, 69, 72, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 160, 162, 163, 175, 177, 178, 179, 180, 193, 203, 222, 240, 257, 259, 280, 292, 309, 324, 326, 342, 359, 374, 376, 394, 412, 429, 431, 452, 469, 475, 476, 490, 524, 541, 565, 603, 614, 625, 636, 647, 658, 669, 680, 693, 728, 750, 807, 814, 834, 846, 857, 868, 869], "wrap": [2, 143, 146, 858], "struct": [2, 138], "access": [2, 51, 52, 131, 135, 136, 138, 147, 257, 259, 281, 287, 324, 326, 374, 376, 429, 431, 475, 476, 540, 808, 814], "note": [2, 16, 28, 35, 40, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 105, 106, 108, 110, 135, 136, 137, 138, 139, 141, 143, 144, 145, 193, 203, 204, 205, 217, 222, 225, 226, 229, 240, 243, 246, 249, 251, 262, 273, 274, 276, 277, 278, 280, 281, 288, 289, 290, 291, 292, 295, 296, 299, 309, 312, 315, 318, 328, 339, 342, 345, 346, 349, 359, 362, 365, 368, 379, 391, 394, 397, 398, 401, 412, 415, 418, 421, 423, 434, 445, 446, 447, 449, 450, 452, 455, 456, 459, 469, 473, 478, 488, 490, 494, 501, 502, 512, 515, 516, 519, 520, 524, 529, 530, 532, 533, 538, 539, 541, 545, 552, 559, 561, 562, 565, 569, 576, 577, 582, 585, 588, 589, 593, 594, 595, 596, 597, 598, 601, 691, 703, 706, 707, 712, 714, 715, 720, 721, 722, 746, 748, 749, 750, 751, 753, 758, 764, 766, 792, 797, 799, 800, 801, 802, 807, 808, 811, 813, 832, 833, 871, 873, 875], "cigar": [2, 16], "empti": [2, 29, 51, 79, 133, 136, 139, 143, 178, 179, 249, 257, 318, 324, 368, 374, 421, 429, 473, 475, 504, 524, 554, 579, 719, 750, 800, 811, 869], "depend": [2, 73, 76, 77, 78, 94, 103, 105, 106, 107, 136, 137, 146, 160, 161, 162, 190, 252, 424, 494, 545, 569, 595, 597, 599, 658, 712, 729, 730, 753, 754, 757, 801, 807, 834, 845, 869, 873, 875], "target_begin": 2, "query_begin": 2, "read_sequ": 2, "alia": [2, 91, 92, 139, 512, 559, 585, 774, 776], "ssw": [2, 16, 66], "reference_sequ": 2, "attribut": [2, 28, 56, 131, 135, 136, 138, 139, 142, 144, 145, 146, 150, 193, 202, 203, 218, 222, 227, 274, 280, 292, 297, 339, 342, 347, 391, 394, 399, 447, 452, 457, 488, 490, 501, 516, 541, 552, 562, 565, 576, 589, 614, 647, 658, 693, 702, 713, 720, 728, 729, 730, 743, 747, 750, 754, 757, 771, 799, 807, 812, 814, 815, 818, 825, 846, 871], "format": [2, 55, 59, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 163, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 193, 219, 221, 271, 275, 279, 280, 288, 337, 340, 341, 388, 392, 393, 443, 448, 451, 486, 489, 490, 511, 512, 517, 541, 558, 559, 563, 565, 577, 582, 584, 585, 590, 624, 657, 668, 704, 705, 746, 766, 785, 806, 808, 868, 873], "optimal_alignment_scor": 2, "charact": [2, 16, 33, 46, 47, 50, 54, 67, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 146, 147, 148, 222, 227, 229, 232, 234, 236, 237, 238, 242, 243, 244, 247, 249, 250, 251, 252, 253, 254, 255, 258, 265, 270, 272, 274, 280, 290, 292, 297, 299, 302, 304, 306, 307, 308, 311, 312, 313, 316, 318, 319, 320, 321, 322, 325, 331, 336, 338, 339, 342, 347, 349, 352, 354, 356, 357, 358, 361, 362, 363, 366, 368, 369, 370, 371, 372, 375, 377, 382, 387, 389, 390, 391, 394, 399, 401, 404, 406, 408, 409, 410, 414, 415, 416, 419, 421, 422, 423, 424, 425, 426, 427, 430, 437, 442, 444, 447, 452, 457, 459, 462, 464, 466, 467, 468, 473, 481, 487, 488, 490, 505, 508, 519, 871], "begin": [2, 16, 135, 136, 137, 138, 142, 145, 146, 161, 193, 290, 721], "query_end": 2, "suboptimal_alignment_scor": 2, "suboptim": [2, 16], "target_end_optim": 2, "target_end_suboptim": 2, "built": [2, 16, 28, 150, 163, 193, 203, 222, 280, 292, 342, 394, 452, 490, 541, 565, 603, 614, 625, 636, 647, 658, 669, 680, 693, 728, 753, 792, 814, 834, 846, 857, 869], "ins": [2, 16, 28, 150, 163, 193, 203, 222, 280, 292, 342, 394, 452, 490, 541, 565, 603, 614, 625, 636, 647, 658, 669, 680, 693, 728, 814, 834, 846, 857], "self": [3, 4, 5, 7, 8, 9, 10, 11, 13, 18, 19, 21, 22, 23, 24, 25, 27, 34, 37, 39, 41, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 185, 186, 187, 188, 195, 197, 198, 199, 201, 203, 207, 209, 210, 211, 213, 217, 228, 229, 231, 233, 235, 273, 282, 284, 285, 286, 298, 299, 301, 303, 305, 348, 349, 351, 353, 355, 400, 401, 403, 405, 407, 445, 458, 459, 461, 463, 465, 492, 493, 496, 497, 498, 499, 501, 503, 515, 516, 543, 544, 547, 548, 549, 550, 552, 553, 561, 562, 567, 568, 571, 572, 573, 574, 576, 578, 588, 589, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 618, 619, 620, 621, 622, 623, 626, 627, 629, 630, 631, 632, 633, 634, 637, 638, 640, 641, 642, 643, 644, 645, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 662, 663, 664, 665, 666, 667, 670, 671, 673, 674, 675, 676, 677, 678, 681, 682, 684, 685, 686, 687, 688, 689, 694, 695, 697, 698, 699, 700, 701, 729, 730, 731, 732, 735, 736, 738, 740, 741, 742, 743, 744, 745, 747, 748, 751, 752, 753, 754, 757, 758, 759, 760, 777, 778, 779, 780, 786, 787, 788, 793, 794, 795, 798, 799, 800, 801, 802, 804, 805, 816, 817, 820, 821, 822, 823, 824, 827, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 873, 875], "kei": [5, 28, 45, 48, 49, 51, 56, 67, 135, 136, 138, 146, 214, 218, 222, 246, 257, 265, 272, 315, 324, 331, 338, 342, 365, 374, 382, 389, 394, 418, 429, 437, 444, 452, 475, 481, 487, 506, 555, 580, 779, 799, 807, 875], "helper": [6, 20, 36, 153, 166, 196, 208, 230, 283, 300, 350, 402, 460, 495, 546, 570, 606, 617, 628, 639, 650, 661, 672, 683, 696, 734, 811, 812, 819, 838, 850, 861, 873], "pickl": [6, 20, 36, 153, 166, 196, 208, 230, 283, 300, 350, 402, 460, 495, 546, 570, 606, 617, 628, 639, 650, 661, 672, 683, 696, 734, 819, 838, 850, 861], "hash": [8, 22, 155, 168, 608, 619, 630, 641, 652, 663, 674, 685, 698, 736, 821, 840, 852, 863], "str": [13, 17, 27, 33, 38, 43, 55, 59, 67, 103, 107, 108, 109, 110, 111, 132, 138, 139, 146, 150, 159, 172, 175, 176, 177, 181, 182, 183, 186, 187, 188, 190, 201, 213, 219, 221, 222, 224, 232, 237, 238, 241, 245, 246, 247, 248, 249, 260, 261, 263, 265, 266, 267, 268, 269, 271, 272, 274, 279, 280, 288, 294, 302, 307, 308, 310, 314, 315, 316, 317, 318, 327, 329, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 344, 352, 357, 358, 360, 364, 365, 366, 367, 368, 378, 380, 382, 383, 384, 385, 386, 388, 389, 391, 393, 394, 396, 404, 409, 410, 413, 417, 418, 419, 420, 421, 432, 433, 435, 437, 438, 439, 440, 441, 443, 444, 447, 451, 452, 454, 462, 467, 468, 470, 471, 472, 473, 477, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 500, 501, 502, 504, 507, 509, 510, 511, 516, 517, 533, 538, 541, 542, 545, 551, 552, 554, 556, 557, 558, 562, 563, 566, 569, 575, 576, 579, 581, 583, 584, 589, 590, 593, 594, 596, 597, 598, 599, 612, 614, 623, 634, 636, 645, 647, 656, 658, 667, 678, 689, 693, 702, 703, 704, 705, 712, 719, 720, 728, 742, 746, 750, 761, 762, 774, 776, 785, 789, 791, 795, 797, 806, 807, 808, 813, 827, 832, 844, 856, 867], "inidic": [14, 16], "els": [14, 15, 141, 148, 161, 181, 186, 223, 275, 293, 340, 343, 392, 395, 448, 452, 453, 708, 750], "bool": [14, 16, 29, 30, 33, 42, 45, 48, 50, 51, 52, 53, 57, 60, 61, 62, 72, 73, 78, 94, 103, 105, 106, 107, 108, 111, 160, 161, 162, 181, 186, 193, 194, 200, 206, 212, 214, 216, 220, 222, 223, 224, 227, 229, 236, 239, 240, 242, 244, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 274, 275, 281, 287, 293, 294, 297, 299, 306, 309, 311, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 347, 349, 356, 359, 361, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 389, 390, 391, 392, 394, 395, 396, 399, 401, 408, 411, 412, 414, 416, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 444, 447, 448, 452, 453, 454, 457, 459, 466, 469, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 487, 488, 491, 492, 499, 501, 504, 520, 524, 529, 530, 533, 539, 541, 542, 543, 550, 552, 554, 566, 567, 574, 576, 579, 582, 595, 598, 601, 636, 647, 711, 712, 714, 715, 719, 720, 722, 746, 751, 752, 755, 769, 771, 772, 773, 775, 778, 781, 782, 783, 786, 798, 800, 801, 808, 812, 834], "whether": [14, 29, 30, 33, 42, 51, 52, 72, 73, 94, 139, 148, 160, 162, 190, 224, 227, 236, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 281, 287, 294, 297, 306, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 344, 347, 356, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 396, 399, 408, 425, 426, 427, 428, 429, 430, 431, 434, 435, 436, 454, 457, 466, 474, 475, 476, 478, 479, 480, 490, 499, 520, 524, 533, 550, 574, 593, 595, 596, 597, 702, 714, 715], "is_zero_bas": 15, "set": [15, 16, 46, 49, 53, 54, 78, 94, 105, 106, 111, 136, 138, 140, 143, 150, 190, 203, 216, 222, 240, 249, 262, 265, 274, 292, 309, 318, 328, 331, 339, 342, 359, 368, 379, 382, 391, 394, 412, 421, 434, 437, 447, 452, 469, 473, 478, 481, 488, 502, 510, 516, 521, 532, 557, 562, 583, 589, 601, 691, 712, 714, 717, 719, 720, 721, 729, 730, 745, 747, 750, 754, 757, 758, 760, 780, 794, 795, 807, 814, 825, 826, 831, 871, 875], "alig": 15, "stripe": [16, 66], "band": 16, "must": [16, 28, 45, 48, 54, 55, 59, 78, 80, 94, 105, 106, 107, 108, 111, 132, 134, 136, 137, 140, 141, 142, 143, 145, 146, 161, 218, 219, 221, 222, 240, 245, 265, 271, 277, 279, 309, 314, 331, 337, 341, 342, 359, 364, 382, 388, 393, 394, 412, 417, 437, 443, 449, 451, 452, 469, 471, 481, 486, 489, 504, 511, 517, 524, 538, 541, 554, 558, 563, 579, 584, 590, 593, 594, 595, 596, 597, 599, 601, 624, 657, 668, 691, 703, 704, 705, 706, 711, 720, 721, 722, 750, 785, 792, 800, 806, 807, 808, 811, 813, 833, 834, 857, 875], "instanti": [16, 135, 148, 292, 875], "callabl": [16, 28, 45, 48, 56, 103, 107, 108, 111, 506, 555, 580], "reus": [16, 716], "larg": [16, 79, 83, 105, 106, 131, 136, 143, 532, 594, 714, 720, 746, 753], "collect": [16, 95, 99, 101, 190, 501, 537, 552, 576, 691], "upper": [16, 83, 84, 136, 143, 193, 203, 215, 217, 580, 587, 595], "lowercas": [16, 135, 136, 137, 138, 144, 222, 240, 292, 309, 342, 359, 394, 412, 452, 469], "q": [16, 83, 133, 342, 707, 708], "h": [16, 69, 70, 74, 82, 94, 95, 96, 97, 98, 99, 136, 143, 146, 191, 222, 342, 394, 749, 750, 755, 758, 789, 790, 791, 794, 795, 804, 805, 807, 873], "l": [16, 70, 71, 78, 83, 84, 94, 102, 135, 137, 147, 290, 342, 537, 595, 692, 706, 707, 714, 800], "k": [16, 69, 74, 94, 95, 97, 98, 99, 108, 222, 249, 263, 264, 318, 329, 330, 342, 368, 380, 381, 394, 421, 435, 436, 473, 479, 480, 490, 502, 520, 537, 594, 601, 758, 792, 799, 807], "m": [16, 63, 69, 78, 94, 105, 106, 132, 133, 135, 137, 143, 147, 222, 280, 281, 290, 342, 394, 502, 594, 597, 601, 703, 706, 707, 713, 714, 716, 719, 791, 808], "w": [16, 47, 69, 70, 77, 90, 94, 102, 132, 133, 134, 190, 222, 342, 394, 524, 537], "y": [16, 69, 80, 137, 144, 222, 342, 394, 531, 534, 535, 539, 595, 598, 601, 692, 703, 707, 708, 713, 714, 719, 753, 799], "v": [16, 105, 106, 222, 227, 236, 297, 306, 342, 347, 356, 394, 399, 408, 457, 466, 521, 533, 537, 539, 719, 720, 799], "z": [16, 54, 77, 145, 342, 598, 703, 753, 799], "x": [16, 80, 96, 137, 144, 274, 292, 339, 342, 391, 447, 488, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 539, 595, 598, 601, 692, 693, 703, 706, 707, 708, 714, 717, 720, 721, 753, 763, 784, 787, 799, 803, 808, 833, 875], "gap_open_penalti": [16, 60, 61, 62, 63, 64, 65], "int": [16, 40, 50, 57, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 111, 132, 138, 139, 144, 161, 190, 193, 203, 214, 218, 229, 234, 241, 247, 248, 252, 260, 262, 263, 264, 266, 268, 272, 289, 299, 304, 310, 316, 317, 327, 328, 329, 330, 332, 334, 338, 349, 354, 360, 366, 367, 378, 379, 380, 381, 383, 385, 389, 401, 406, 413, 419, 420, 424, 432, 434, 435, 436, 438, 440, 444, 449, 450, 459, 464, 470, 472, 477, 478, 479, 480, 482, 484, 487, 508, 509, 520, 522, 523, 533, 537, 539, 556, 581, 593, 595, 596, 597, 598, 599, 601, 636, 680, 691, 703, 707, 711, 712, 714, 715, 718, 720, 721, 722, 728, 749, 753, 755, 764, 770, 779, 780, 792, 807, 812, 813, 833, 846], "option": [16, 28, 45, 47, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 69, 72, 73, 78, 83, 84, 85, 90, 94, 97, 103, 105, 106, 107, 108, 111, 134, 136, 137, 142, 143, 145, 146, 147, 150, 160, 161, 162, 181, 182, 183, 186, 187, 188, 190, 193, 203, 214, 218, 219, 220, 221, 222, 227, 239, 240, 241, 245, 247, 248, 249, 252, 260, 262, 263, 264, 266, 268, 271, 274, 279, 280, 289, 290, 291, 297, 309, 310, 314, 316, 317, 318, 327, 328, 329, 330, 332, 334, 337, 339, 341, 342, 347, 359, 360, 364, 366, 367, 368, 378, 379, 380, 381, 383, 385, 388, 391, 393, 394, 399, 411, 412, 413, 417, 419, 420, 421, 424, 432, 434, 435, 436, 438, 440, 443, 447, 449, 450, 451, 452, 457, 469, 470, 471, 472, 473, 477, 478, 479, 480, 482, 484, 486, 488, 489, 501, 504, 506, 510, 511, 517, 520, 524, 529, 530, 532, 541, 552, 554, 555, 557, 558, 563, 576, 579, 580, 582, 583, 584, 590, 593, 594, 595, 596, 597, 598, 599, 601, 636, 691, 703, 704, 705, 707, 708, 711, 712, 714, 715, 718, 719, 720, 721, 722, 728, 749, 766, 771, 785, 792, 799, 800, 806, 807, 808, 811, 812, 833, 834, 835, 857, 871, 875], "cannot": [16, 28, 45, 48, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 136, 137, 140, 141, 145, 181, 182, 186, 187, 190, 240, 292, 309, 359, 412, 469, 524, 593, 594, 595, 596, 597, 691, 703, 719, 721, 722, 761, 764, 792, 869], "gap_extend_penalti": [16, 60, 61, 62, 63, 64, 65], "score_s": 16, "your": [16, 54, 78, 103, 105, 106, 107, 137, 145, 148, 203, 597, 717, 720, 869, 873, 875], "estim": [16, 69, 72, 73, 77, 79, 81, 83, 84, 85, 90, 96, 711, 719, 720, 721], "best": [16, 60, 61, 62, 63, 64, 65, 84, 85, 521, 594, 706, 810], "255": [16, 707], "mask_length": 16, "suggest": [16, 161, 181, 182, 186, 187, 720], "len": [16, 28, 40, 234, 304, 354, 406, 464, 502, 599, 721, 729, 730, 754, 757, 795, 807, 875], "special": [16, 140, 148], "concern": [16, 140], "detail": [16, 53, 54, 66, 94, 108, 110, 111, 135, 136, 137, 138, 139, 143, 144, 146, 147, 148, 291, 452, 494, 545, 569, 594, 598, 703, 706, 707, 714, 869], "descript": [16, 69, 78, 83, 88, 89, 99, 103, 105, 106, 107, 131, 132, 136, 137, 138, 139, 141, 143, 145, 147, 494, 545, 569, 751, 807, 871, 873], "after": [16, 45, 48, 60, 61, 62, 136, 137, 145, 146, 147, 148, 206, 217, 533, 594, 595, 598, 601, 706, 721, 782, 784, 801], "locat": [16, 55, 59, 135, 141, 146, 175, 176, 177, 193, 219, 221, 247, 248, 271, 279, 316, 317, 337, 341, 366, 367, 388, 393, 419, 420, 443, 451, 472, 486, 489, 511, 517, 558, 563, 584, 590, 704, 705, 785, 789, 806, 811, 874], "heurist": [16, 597, 712], "found": [16, 101, 133, 135, 136, 137, 138, 141, 143, 146, 181, 183, 186, 188, 274, 339, 391, 447, 488, 504, 537, 554, 579, 594, 595, 597, 721, 751, 761, 762, 763, 764, 774, 776, 792, 807], "check": [16, 137, 161, 181, 186, 194, 203, 206, 217, 491, 492, 529, 530, 540, 541, 542, 543, 565, 566, 567, 602, 706, 707, 720, 811, 812, 832, 875], "largest": [16, 102], "maxim": [16, 94, 594, 707], "sw": [16, 719], "avoid": [16, 145, 146, 148, 217, 692, 715, 804, 805], "pick": [16, 720], "belong": [16, 70, 74, 139, 524, 593, 596, 597], "share": [16, 51, 52, 54, 69, 240, 257, 259, 309, 324, 326, 359, 374, 376, 412, 429, 431, 452, 469, 475, 476, 873], "partial": [16, 94, 217], "librari": [16, 66, 105, 106, 136, 868, 869], "mask": [16, 274, 339, 391, 447, 488, 533, 539], "loci": 16, "nearbi": 16, "unmask": 16, "element": [16, 140, 190, 490, 494, 506, 526, 529, 530, 541, 545, 555, 565, 569, 580, 680, 703, 706, 710, 711, 715, 718, 720, 721, 722, 831], "15": [16, 62, 65, 83, 133, 142, 145, 602, 717, 720, 721, 797], "mask_auto": 16, "automat": [16, 45, 48, 54, 55, 59, 140, 144, 145, 174, 185, 193, 219, 221, 265, 271, 279, 331, 337, 341, 382, 388, 393, 437, 443, 451, 481, 486, 489, 511, 517, 540, 558, 563, 584, 590, 693, 704, 705, 753, 785, 806, 869], "max": [16, 69, 70, 90, 720, 721, 768], "score_onli": 16, "prevent": 16, "babp": 16, "overrid": [16, 61, 64, 94, 150, 160, 161, 162, 181, 186, 784, 875], "score_filt": 16, "distance_filt": 16, "override_skip_babp": 16, "highest": [16, 141], "preced": [16, 134, 141, 143], "less": [16, 69, 78, 85, 105, 106, 108, 143, 145, 263, 264, 329, 330, 380, 381, 435, 436, 479, 480, 520, 595, 598, 691, 706, 722, 779, 813], "save": [16, 203, 541, 624, 657, 668, 781], "computation": 16, "filter": [16, 47, 66, 144, 243, 312, 362, 415, 598, 800, 875], "overridden": [16, 28, 138, 808], "regardless": [16, 46, 53, 54, 146, 290, 508, 599], "argument": [16, 28, 55, 56, 59, 66, 140, 160, 161, 162, 174, 181, 182, 183, 185, 186, 187, 188, 219, 221, 265, 271, 277, 278, 279, 331, 337, 341, 382, 388, 393, 437, 443, 449, 450, 451, 481, 486, 489, 490, 506, 511, 517, 522, 524, 555, 558, 563, 580, 584, 590, 599, 704, 705, 785, 806, 834, 857], "caus": [16, 145, 190, 290], "calcul": [16, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 108, 111, 131, 251, 252, 423, 424, 524, 531, 538, 539, 593, 594, 595, 596, 597, 601, 625, 636, 680, 711, 715, 718, 720, 721, 751, 758, 797, 868, 871], "none": [16, 28, 45, 47, 48, 55, 56, 57, 61, 62, 64, 65, 66, 90, 94, 103, 107, 108, 132, 136, 140, 148, 150, 160, 162, 175, 176, 177, 181, 186, 190, 193, 203, 214, 216, 218, 219, 222, 241, 245, 247, 248, 249, 260, 271, 274, 275, 292, 310, 314, 316, 317, 318, 327, 337, 339, 340, 342, 360, 364, 366, 367, 368, 378, 388, 391, 392, 394, 413, 417, 419, 420, 421, 432, 443, 447, 448, 452, 470, 471, 472, 473, 477, 486, 488, 506, 510, 511, 524, 529, 530, 532, 533, 541, 555, 557, 558, 565, 580, 583, 584, 593, 594, 595, 596, 597, 598, 599, 603, 625, 636, 669, 691, 693, 703, 704, 708, 711, 712, 715, 716, 718, 719, 720, 721, 728, 748, 749, 753, 756, 758, 766, 775, 777, 780, 781, 782, 783, 785, 792, 796, 797, 799, 800, 801, 804, 805, 807, 808, 834, 835, 857, 871, 873, 875], "effect": [16, 66, 76, 105, 106, 145, 190, 274, 339, 391, 447, 488, 501, 552, 576, 717, 719, 720, 721], "unless": [16, 28, 53, 72, 144, 835], "substitution_matrix": [16, 60, 61, 62, 63, 64, 65], "suppli": [16, 132, 136, 144, 181, 186, 245, 314, 364, 417, 471, 518, 721, 758], "match_scor": [16, 61, 64, 67], "ad": [16, 60, 61, 62, 63, 64, 65, 136, 146, 214, 452, 524, 707, 710, 834, 873], "occur": [16, 133, 136, 137, 140, 141, 182, 187, 190, 260, 327, 378, 432, 452, 477, 721, 752, 761], "ignor": [16, 47, 69, 78, 105, 106, 133, 134, 135, 136, 137, 140, 141, 145, 148, 247, 248, 290, 291, 316, 317, 366, 367, 419, 420, 472, 504, 554, 579, 593, 594, 595, 596, 597, 712, 719, 720, 758, 777, 812, 834, 835, 871, 873, 875], "mismatch_scor": [16, 61, 64, 67], "subtract": [16, 680], "2d": [16, 60, 61, 62, 63, 64, 65, 103, 107, 108, 111, 490, 505, 514, 522, 523, 524, 531, 599, 708, 715], "dict": [16, 28, 49, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 135, 138, 161, 181, 182, 183, 186, 187, 188, 193, 214, 218, 219, 221, 222, 249, 264, 271, 277, 278, 279, 292, 318, 330, 337, 341, 342, 368, 381, 388, 393, 394, 421, 436, 443, 449, 450, 451, 452, 473, 480, 486, 489, 490, 505, 511, 514, 517, 558, 563, 584, 590, 595, 598, 658, 704, 705, 766, 770, 779, 785, 799, 806, 834, 871, 875], "substitut": [16, 60, 61, 62, 63, 64, 65, 67, 140, 274, 339, 342, 391, 447, 488, 490, 502, 505, 507, 508, 514, 521, 810], "entir": [16, 28, 74, 222, 292, 342, 394, 452], "combin": [16, 28, 45, 48, 138, 594, 693, 707], "enumer": 16, "requir": [16, 84, 85, 131, 133, 134, 136, 139, 143, 146, 147, 218, 277, 290, 291, 449, 538, 540, 565, 595, 601, 691, 711, 719, 750, 756, 790, 810, 834, 869, 871, 875], "suppress_sequ": [16, 66], "zero_index": [16, 66], "wrapper": [16, 66, 84, 85, 811], "otherwis": [16, 29, 45, 48, 57, 72, 73, 136, 138, 141, 144, 145, 190, 274, 339, 391, 447, 488, 491, 492, 494, 499, 504, 542, 543, 545, 550, 554, 566, 567, 569, 574, 579, 582, 598, 786, 871], "inform": [16, 47, 55, 59, 71, 86, 94, 132, 133, 134, 135, 136, 137, 138, 144, 145, 147, 193, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 614, 658, 692, 704, 705, 714, 720, 721, 785, 806, 834, 871, 875], "NOT": [16, 88, 190], "meaning": [16, 45, 48, 54, 712, 871], "zhao": [16, 66], "mengyao": [16, 66], "wan": [16, 66], "ping": [16, 66], "lee": [16, 66, 69], "erik": [16, 66], "garrison": [16, 66], "gabor": [16, 66], "marth": [16, 66], "simd": [16, 66], "applic": [16, 47, 60, 66, 753, 875], "plo": [16, 66, 84, 85, 533, 539], "ONE": [16, 66], "2013": [16, 66, 76, 94, 537, 703], "web": [16, 60, 63, 66, 134, 147, 593, 594, 595, 596, 597], "juli": [16, 66], "2014": [16, 66, 132, 143, 537], "http": [16, 47, 60, 61, 62, 63, 64, 65, 66, 69, 73, 83, 108, 131, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 145, 146, 147, 280, 288, 289, 512, 533, 537, 539, 541, 559, 565, 577, 585, 593, 594, 595, 596, 597, 703, 807, 808, 833], "www": [16, 60, 63, 66, 83, 108, 131, 132, 133, 134, 135, 136, 137, 138, 143, 147, 280, 288, 289, 594], "ploson": [16, 66], "org": [16, 66, 108, 131, 136, 137, 138, 143, 145, 146, 512, 533, 537, 539, 541, 559, 565, 577, 585, 593, 594, 595, 596, 597, 703, 808], "articl": [16, 66, 134], "info": [16, 66, 203, 222, 292, 342, 394, 452, 602, 658], "doi": [16, 66, 135, 137, 533, 537, 539], "10": [16, 47, 66, 69, 84, 85, 133, 135, 136, 137, 138, 139, 141, 142, 143, 193, 203, 218, 222, 247, 292, 316, 342, 366, 394, 419, 452, 524, 533, 537, 539, 597, 692, 717, 720, 721, 808, 875], "1371": [16, 66, 533, 539], "journal": [16, 66, 69, 72, 79, 94, 95, 97, 99, 138, 524, 533, 539, 593], "pone": [16, 66], "0082138": [16, 66], "alignmentstructur": 17, "positional_metadata": [28, 33, 46, 52, 53, 54, 136, 146, 222, 227, 239, 240, 243, 259, 265, 272, 273, 292, 297, 309, 312, 326, 331, 338, 342, 347, 359, 362, 376, 382, 389, 394, 399, 411, 412, 415, 431, 437, 444, 445, 452, 457, 469, 476, 481, 487, 871], "sourc": [28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 138, 139, 149, 150, 160, 161, 162, 163, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 200, 202, 203, 204, 205, 206, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 603, 613, 614, 624, 625, 635, 636, 646, 647, 657, 658, 668, 669, 679, 680, 690, 691, 693, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 737, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 818, 825, 831, 832, 833, 834, 835, 845, 846, 847, 857, 858, 868], "store": [28, 38, 43, 51, 52, 53, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 193, 203, 222, 257, 259, 292, 324, 326, 342, 374, 376, 394, 429, 431, 452, 475, 476, 512, 540, 541, 559, 565, 585, 598, 614, 647, 658, 693, 706, 707, 712, 714, 728, 870, 871], "tabular": [28, 132, 133, 145, 147], "iter": [28, 38, 43, 48, 53, 60, 61, 62, 63, 64, 65, 66, 67, 103, 107, 108, 111, 144, 193, 214, 215, 216, 218, 229, 232, 237, 240, 248, 262, 272, 274, 299, 302, 307, 309, 317, 328, 338, 339, 349, 352, 357, 359, 367, 379, 389, 391, 401, 404, 409, 412, 420, 434, 444, 447, 459, 462, 467, 469, 472, 478, 487, 488, 490, 501, 504, 506, 508, 516, 524, 552, 554, 555, 562, 576, 579, 580, 589, 594, 597, 598, 691, 703, 720, 721, 729, 730, 737, 754, 757, 758, 767, 775, 778, 781, 782, 783, 791, 792, 798, 801, 831, 833, 835, 857, 873, 875], "grammaredsequ": [28, 38, 43, 45, 48, 49, 60, 63, 134, 136, 143, 146, 222, 243, 246, 342, 362, 365, 394, 415, 418], "exampl": [28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 78, 105, 106, 107, 140, 145, 148, 160, 161, 162, 191, 193, 203, 215, 220, 222, 223, 224, 227, 229, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 289, 290, 291, 292, 293, 294, 297, 299, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 347, 349, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 394, 395, 396, 399, 401, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 457, 459, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 501, 502, 505, 508, 510, 513, 516, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 552, 557, 560, 562, 576, 583, 586, 587, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 691, 703, 712, 719, 720, 721, 722, 729, 730, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 813, 833, 868, 869], "its": [28, 45, 46, 48, 49, 51, 52, 53, 54, 60, 61, 62, 135, 136, 137, 138, 141, 142, 146, 148, 162, 184, 190, 193, 203, 249, 256, 257, 259, 264, 318, 323, 324, 326, 330, 368, 373, 374, 376, 381, 421, 428, 429, 431, 436, 452, 473, 474, 475, 476, 480, 494, 502, 525, 545, 569, 594, 702, 706, 708, 711, 716, 728, 750, 780, 781, 790, 795, 800, 801, 807, 832, 869, 873], "arbitrari": [28, 46, 49, 140, 145, 146, 222, 342, 394, 452, 691, 834, 871], "shallow": [28, 31, 203, 204, 225, 295, 345, 397, 452, 455], "copi": [28, 31, 32, 136, 143, 146, 203, 204, 205, 225, 226, 272, 295, 296, 338, 345, 346, 389, 397, 398, 444, 452, 455, 456, 487, 512, 515, 541, 559, 561, 585, 588, 715, 722, 729, 730, 757, 789, 790, 796, 804, 805, 828, 829, 830], "made": [28, 90, 452, 524, 541, 565, 691, 744, 761, 762, 784, 810], "consum": [28, 48, 162, 222, 280, 342, 394, 452], "abl": [28, 48, 108, 222, 342, 394, 452, 524, 720, 758], "directli": [28, 45, 48, 145, 222, 280, 342, 394, 452, 518, 601, 834, 875], "constructor": [28, 45, 48, 56, 134, 136, 137, 138, 143, 144, 146, 161, 174, 185, 222, 265, 280, 331, 342, 382, 394, 437, 452, 481, 490, 599], "label": [28, 30, 33, 35, 45, 48, 49, 54, 56, 57, 58, 134, 136, 138, 143, 145, 146, 510, 537, 540, 557, 583, 593, 594, 596, 597, 598, 693, 703, 748, 812], "content": [28, 46, 135, 136, 137, 138, 139, 141, 145, 148, 160, 161, 162, 222, 239, 240, 243, 246, 273, 276, 309, 312, 315, 359, 362, 365, 394, 411, 412, 415, 418, 445, 446, 469, 871], "hashabl": [28, 30, 691, 857], "rais": [28, 45, 47, 48, 50, 54, 56, 58, 69, 78, 79, 80, 94, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 143, 148, 149, 160, 161, 162, 181, 182, 183, 184, 186, 187, 188, 217, 224, 240, 241, 245, 247, 249, 260, 261, 263, 264, 266, 267, 268, 269, 274, 290, 292, 294, 309, 310, 314, 316, 318, 327, 329, 330, 332, 333, 334, 335, 339, 344, 359, 360, 364, 366, 368, 378, 380, 381, 383, 384, 385, 386, 391, 396, 412, 413, 417, 419, 421, 432, 433, 435, 436, 438, 439, 440, 441, 447, 454, 469, 470, 471, 473, 477, 479, 480, 482, 483, 484, 485, 488, 494, 501, 502, 504, 505, 506, 509, 516, 519, 520, 526, 532, 538, 545, 552, 554, 555, 556, 562, 569, 576, 579, 580, 581, 589, 593, 594, 595, 597, 598, 636, 680, 691, 703, 706, 707, 712, 720, 721, 722, 743, 750, 751, 753, 756, 758, 759, 761, 762, 764, 766, 768, 774, 776, 779, 789, 790, 791, 792, 797, 802, 811, 812, 813, 814], "valueerror": [28, 45, 47, 48, 50, 54, 56, 58, 69, 78, 80, 94, 103, 105, 106, 107, 111, 181, 186, 240, 241, 247, 249, 260, 263, 264, 266, 267, 268, 269, 274, 290, 292, 309, 310, 316, 318, 327, 329, 330, 332, 333, 334, 335, 339, 359, 360, 366, 368, 378, 380, 381, 383, 384, 385, 386, 391, 412, 413, 419, 421, 432, 435, 436, 438, 439, 440, 441, 447, 452, 469, 470, 473, 477, 479, 480, 482, 483, 484, 485, 488, 502, 505, 506, 519, 520, 526, 532, 538, 555, 580, 594, 595, 597, 598, 636, 680, 691, 703, 706, 707, 720, 721, 722, 751, 753, 758, 766, 774, 776, 779, 791, 792, 797, 802, 813], "both": [28, 46, 54, 56, 67, 72, 73, 74, 78, 94, 131, 132, 133, 136, 137, 143, 145, 147, 181, 186, 218, 290, 506, 527, 528, 529, 530, 540, 555, 580, 582, 587, 594, 595, 596, 597, 712, 752, 753, 792, 801, 869, 871], "typeerror": [28, 45, 48, 54, 103, 181, 182, 186, 187, 224, 240, 241, 245, 249, 260, 261, 266, 267, 268, 269, 294, 309, 310, 314, 318, 327, 332, 333, 334, 335, 344, 359, 360, 364, 368, 378, 383, 384, 385, 386, 396, 412, 413, 417, 421, 432, 433, 438, 439, 440, 441, 454, 469, 470, 471, 473, 477, 482, 483, 484, 485, 519, 520, 594, 595, 597, 720, 721, 722, 750], "isn": [28, 45, 48, 54, 80, 145, 146, 160, 162, 191, 193, 529, 530, 722], "doe": [28, 45, 46, 48, 54, 57, 66, 78, 94, 132, 134, 136, 137, 139, 141, 143, 146, 190, 240, 280, 281, 287, 290, 309, 359, 412, 469, 502, 512, 519, 540, 559, 582, 585, 593, 595, 597, 636, 712, 720, 721, 744, 753, 764, 777, 790, 797, 800, 807, 811, 869], "exactli": [28, 45, 48, 53, 63, 64, 65, 136, 137, 143, 148, 227, 236, 281, 297, 306, 347, 356, 399, 408, 457, 466, 538, 703, 746], "reassign_index": [28, 45, 48, 57, 58, 143], "neither": [28, 56, 191, 792, 801], "nor": [28, 45, 48, 56, 140, 143, 541, 792], "rangeindex": [28, 45, 48, 56, 143], "stop": [28, 45, 48, 56, 69, 143, 241, 260, 277, 278, 280, 290, 291, 310, 327, 342, 360, 377, 378, 413, 432, 449, 450, 470, 477, 748, 835, 871], "four": [28, 137, 146, 222, 342, 394, 524, 703], "acgt": [28, 45, 48, 49, 51, 52, 58, 223, 227, 236, 240, 251, 252, 257, 259, 261, 265, 293, 297, 306, 309, 324, 326, 331, 343, 347, 356, 359, 374, 376, 382, 395, 399, 408, 412, 423, 424, 429, 431, 433, 437, 452, 453, 457, 466, 469, 475, 476, 481, 490, 508], "ag": [28, 45, 48, 50, 540, 719, 720], "wasn": [28, 137], "non": [28, 72, 80, 132, 134, 135, 139, 145, 193, 222, 258, 270, 292, 325, 336, 342, 375, 387, 394, 430, 442, 490, 522, 523, 524, 532, 565, 593, 596, 597, 601, 706, 712, 717, 752, 753, 758], "seq3": [28, 48, 136, 143], "prob": [28, 33, 46, 53], "iloc": [28, 35], "slice": [28, 35, 229, 247, 248, 262, 272, 299, 316, 317, 328, 338, 349, 366, 367, 379, 389, 401, 419, 420, 434, 444, 459, 472, 478, 487, 494, 540, 545, 569, 733, 871], "axi": [28, 35, 50, 80, 96, 140, 222, 292, 342, 394, 452, 490, 636, 680, 693, 703, 711, 718, 721, 812], "along": [28, 140, 222, 292, 342, 394, 452, 703, 711, 712], "loc": [28, 35, 452, 524, 720], "shape": [28, 40, 49, 131, 142, 490, 492, 541, 543, 565, 567, 595, 708, 711, 722], "boolean": [29, 106, 136, 139, 144, 193, 222, 229, 242, 244, 247, 250, 262, 265, 267, 269, 270, 272, 299, 311, 313, 316, 319, 328, 331, 333, 335, 336, 338, 342, 349, 361, 363, 366, 369, 379, 382, 384, 386, 387, 389, 390, 394, 401, 414, 416, 419, 422, 434, 437, 439, 441, 442, 444, 452, 459, 478, 481, 483, 485, 487, 580], "state": [29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 58, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 132, 133, 134, 135, 138, 139, 143, 145, 146, 147, 160, 161, 162, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 194, 200, 202, 204, 205, 206, 212, 214, 215, 216, 217, 218, 220, 223, 224, 225, 226, 227, 229, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 281, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 392, 395, 396, 397, 398, 399, 401, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 459, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 545, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 566, 567, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 601, 613, 624, 635, 646, 657, 668, 679, 690, 691, 702, 703, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 729, 730, 733, 737, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 811, 812, 813, 831, 832, 833, 834, 835, 845, 847, 857, 858, 875], "experiment": [29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 56, 58, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 132, 133, 135, 138, 139, 146, 147, 194, 200, 202, 204, 205, 206, 212, 214, 215, 216, 217, 218, 220, 240, 245, 249, 256, 272, 274, 309, 314, 318, 323, 338, 339, 359, 364, 368, 373, 389, 391, 412, 417, 421, 428, 444, 447, 469, 471, 473, 474, 487, 488, 490, 491, 492, 494, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 545, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 566, 567, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 601, 613, 624, 635, 646, 657, 668, 679, 690, 691, 702, 703, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 729, 730, 733, 737, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 811, 812, 813, 831, 832, 833, 835, 845, 847, 858], "OR": 29, "acg": [29, 30, 31, 32, 33, 38, 40, 43, 50, 53, 54, 56, 57, 144, 146, 260, 263, 327, 329, 378, 380, 432, 435, 477, 479], "ac": [29, 30, 31, 32, 33, 38, 40, 43, 46, 48, 50, 54, 56, 57, 60, 63, 135, 137, 138, 146, 193, 250, 319, 369, 422, 871], "No": [29, 73, 132, 133, 135, 144, 147, 203, 238, 308, 358, 410, 468, 595], "search": [30, 60, 132, 133, 136, 218, 247, 260, 316, 327, 366, 378, 419, 432, 477, 491, 542, 566, 707, 756, 761, 762, 763, 764, 831, 871], "l1": 30, "l2": 30, "l3": 30, "__deepcopy__": [31, 204], "msa_copi": [31, 32], "memo": [32, 205, 226, 296, 346, 398, 456], "deep": [32, 70, 205, 225, 226, 295, 296, 345, 346, 397, 398, 452, 455, 456, 503, 515, 553, 561, 578, 588], "__copy__": [32, 205], "deepcopi": [32, 729, 730, 754, 804, 805], "against": [33, 42, 60, 63, 137, 194, 200, 206, 212, 227, 236, 281, 287, 297, 306, 347, 356, 399, 408, 457, 466, 524, 601, 751], "pleas": [35, 55, 59, 136, 144, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 704, 705, 785, 806], "restrict": [35, 78, 105, 106, 143, 871], "over": [38, 43, 53, 108, 136, 137, 144, 145, 146, 232, 237, 302, 307, 352, 357, 404, 409, 462, 467, 490, 599, 613, 635, 646, 679, 690, 717, 718, 737, 775, 778, 781, 782, 783, 795, 798, 801, 873], "yield": [38, 43, 53, 136, 218, 232, 237, 246, 247, 248, 262, 263, 278, 291, 302, 307, 315, 316, 317, 328, 329, 352, 357, 365, 366, 367, 379, 380, 404, 409, 418, 419, 420, 434, 435, 450, 462, 467, 472, 478, 479, 597, 763, 775, 778, 781, 782, 783, 792, 798, 800, 801, 835, 869, 875], "size": [40, 76, 490, 541, 565, 593, 594, 595, 597, 680, 691, 703, 711, 717, 719, 720, 721, 833], "1st": [40, 669, 813], "dimens": [40, 142, 143, 490, 500, 522, 526, 529, 530, 541, 551, 565, 575, 597, 693, 702, 703, 712, 713], "equival": [40, 76, 78, 94, 137, 145, 225, 226, 249, 251, 272, 273, 278, 291, 295, 296, 318, 338, 345, 346, 368, 389, 397, 398, 421, 423, 444, 445, 450, 455, 456, 473, 487, 501, 516, 519, 521, 524, 552, 562, 576, 589, 595, 871], "inequ": [42, 200, 212, 236, 287, 306, 356, 408, 466, 565, 712], "__eq__": [42, 212, 499, 550, 574], "revers": [43, 53, 57, 148, 237, 239, 261, 273, 278, 290, 291, 307, 357, 409, 411, 433, 445, 446, 450, 467, 593, 597, 792, 871, 875], "summari": [44, 500, 524, 551, 575], "reset_index": [45, 48], "without": [45, 48, 54, 56, 90, 106, 133, 141, 143, 145, 146, 452, 521, 691, 703, 721, 722, 759, 768, 800, 833, 834, 869], "recomput": [45, 48, 54], "treat": [45, 46, 47, 48, 136, 140, 145, 222, 265, 331, 342, 382, 394, 437, 452, 481, 519, 720], "reset": [45, 48, 56], "choic": [45, 48, 140, 712], "necessarili": [45, 48, 54, 142, 249, 318, 368, 421, 452, 473, 722], "own": [45, 48, 54, 131, 136, 142, 146, 148, 717], "via": [45, 48, 56, 69, 84, 85, 136, 143, 245, 280, 281, 287, 314, 364, 417, 471, 593, 595, 596], "acga": [45, 48, 227, 236, 297, 306, 347, 356, 399, 408, 457, 466], "major": [46, 521, 587, 807], "most": [46, 70, 79, 94, 131, 134, 136, 137, 140, 141, 143, 145, 147, 290, 452, 595, 691, 714, 717, 768, 770, 807, 873], "common": [46, 51, 52, 63, 78, 94, 132, 136, 137, 138, 145, 146, 147, 257, 259, 324, 326, 374, 376, 429, 431, 475, 476, 522, 523, 541, 636, 728, 753, 761, 774, 776, 799, 800, 808, 871, 873, 874], "ti": [46, 70, 807], "broken": [46, 807], "manner": [46, 136, 143, 229, 243, 299, 312, 349, 362, 401, 415, 459, 595, 712], "present": [46, 47, 78, 105, 106, 132, 136, 142, 145, 146, 204, 205, 222, 239, 242, 243, 244, 249, 250, 260, 270, 273, 290, 311, 312, 313, 318, 319, 327, 336, 342, 361, 362, 363, 368, 369, 378, 387, 390, 394, 411, 414, 415, 416, 421, 422, 432, 442, 445, 473, 477, 504, 524, 554, 579, 593, 594, 596, 597, 636, 702, 712, 721, 722, 752, 807, 808, 810, 873], "default_gap_char": [46, 47, 54, 222, 292, 342, 394], "distinct": [46, 91, 92, 101, 519, 540], "contribut": [46, 94, 601, 706, 711], "AT": [46, 136, 137, 143], "tt": [46, 262, 328, 379, 434, 478], "cg": [46, 272, 338, 389, 444, 452, 487], "degener": [46, 47, 135, 136, 137, 138, 139, 222, 239, 240, 242, 243, 246, 251, 252, 253, 254, 258, 270, 273, 275, 276, 277, 278, 280, 290, 291, 292, 309, 311, 312, 315, 320, 321, 325, 336, 340, 342, 359, 361, 362, 365, 370, 371, 375, 387, 392, 394, 411, 412, 414, 415, 418, 423, 424, 425, 426, 430, 442, 445, 446, 448, 449, 450, 469, 502, 871], "definit": [46, 74, 135, 136, 137, 138, 139, 147, 222, 239, 240, 243, 244, 246, 253, 254, 258, 270, 273, 275, 276, 277, 278, 280, 290, 291, 292, 309, 312, 313, 315, 320, 321, 325, 336, 340, 342, 359, 362, 363, 365, 370, 371, 375, 387, 392, 394, 411, 412, 415, 416, 418, 425, 426, 430, 442, 445, 446, 448, 449, 450, 469, 502, 808, 871, 874, 875], "gc": [46, 135, 136, 137, 138, 139, 147, 222, 239, 240, 243, 246, 252, 273, 276, 281, 291, 309, 312, 315, 359, 362, 365, 394, 411, 412, 415, 418, 424, 445, 446, 469, 871], "33": [46, 78, 105, 106, 137, 246, 315, 365, 418, 594, 597, 717, 720, 871], "last": [46, 135, 143, 262, 290, 328, 379, 434, 452, 478, 595, 692, 875], "metric": [47, 69, 74, 78, 79, 94, 103, 104, 105, 106, 107, 108, 109, 110, 111, 137, 245, 314, 364, 417, 471, 506, 520, 555, 565, 580, 728, 868, 871], "inverse_shannon_uncertainti": 47, "degenerate_mod": 47, "gap_mod": 47, "nan": [47, 50, 54, 85, 132, 145, 240, 249, 309, 318, 359, 368, 412, 421, 469, 473, 519, 520, 593, 594, 595, 596, 597, 598, 601, 703, 719, 720, 799, 811], "larger": [47, 720], "mode": [47, 148, 190, 290, 721, 834], "handl": [47, 54, 136, 137, 144, 146, 147, 148, 150, 160, 162, 190, 290, 291, 524, 595, 597, 598, 717, 801, 808, 833, 875], "assign": [47, 56, 67, 103, 107, 143, 145, 194, 272, 338, 389, 444, 452, 487, 508, 524, 593, 596, 597, 691, 721, 747, 748, 749], "np": [47, 50, 78, 85, 94, 105, 106, 132, 222, 224, 241, 242, 244, 245, 249, 250, 260, 261, 266, 267, 268, 269, 270, 274, 294, 310, 311, 313, 314, 318, 319, 327, 332, 333, 334, 335, 336, 339, 342, 344, 360, 361, 363, 364, 368, 369, 378, 383, 384, 385, 386, 387, 390, 391, 394, 396, 413, 414, 416, 417, 421, 422, 432, 433, 438, 439, 440, 441, 442, 447, 452, 454, 470, 471, 473, 477, 482, 483, 484, 485, 488, 490, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 593, 595, 596, 597, 598, 601, 602, 691, 692, 703, 716, 717, 719, 720, 721, 722, 770, 792, 807, 811], "remov": [47, 66, 67, 92, 111, 136, 140, 143, 216, 243, 258, 270, 312, 325, 336, 362, 375, 387, 415, 430, 442, 745, 760, 780, 784, 787, 791, 802, 871], "up": [47, 67, 134, 143, 145, 146, 190, 203, 215, 449, 450, 494, 526, 532, 534, 535, 536, 545, 569, 595, 691, 721, 745, 750, 753, 784, 790, 857, 873], "float": [47, 50, 60, 61, 62, 63, 64, 65, 66, 67, 78, 83, 84, 94, 103, 105, 106, 107, 108, 111, 131, 132, 138, 140, 141, 145, 245, 251, 252, 266, 268, 314, 332, 334, 364, 383, 385, 417, 423, 424, 438, 440, 471, 482, 484, 506, 508, 519, 520, 524, 525, 527, 528, 530, 532, 533, 534, 536, 539, 540, 541, 555, 580, 595, 597, 599, 601, 614, 658, 703, 718, 720, 721, 728, 743, 751, 752, 753, 758, 759, 768, 799, 807, 811], "unknown": [47, 84, 85, 130, 138, 193, 247, 316, 366, 419, 691], "mislead": [47, 111], "point": [47, 80, 83, 85, 131, 134, 145, 148, 161, 193, 265, 272, 274, 331, 338, 339, 382, 389, 391, 437, 444, 447, 481, 487, 488, 502, 597, 603, 625, 680, 703, 720, 721, 790, 811, 832], "out": [47, 144, 145, 148, 703, 752, 753, 875], "compos": [47, 137, 144], "90": [47, 139, 875], "tryptophan": [47, 342], "would": [47, 78, 80, 83, 105, 106, 134, 136, 139, 141, 143, 145, 146, 148, 240, 262, 309, 328, 359, 379, 412, 434, 469, 478, 501, 521, 537, 552, 576, 601, 719, 720, 750, 800, 801, 807, 869], "highli": 47, "alanin": [47, 342], "glycin": [47, 342], "recod": 47, "awar": [47, 94, 145, 452], "consid": [47, 69, 78, 83, 94, 105, 106, 136, 141, 227, 262, 297, 328, 347, 379, 399, 434, 457, 478, 519, 521, 597, 598, 691, 719, 720, 721, 811, 834], "simpli": [47, 54, 101, 148, 280, 512, 559, 585, 712, 717, 761, 875], "minu": [47, 138, 146, 669], "shannon": [47, 82, 95], "uncertainti": [47, 601], "invers": [47, 523, 528, 530, 535], "impli": [47, 190, 601], "higher": [47, 490, 524, 846], "entropi": [47, 82, 97], "make": [47, 54, 136, 141, 145, 148, 281, 494, 519, 545, 569, 593, 597, 721, 796, 799, 800, 808, 814, 834, 875], "symbol": [47, 136], "done": [47, 524, 597, 624, 657, 668], "prefer": [47, 103, 107, 137, 706, 707], "valdar": 47, "residu": [47, 714], "2002": [47, 78, 94, 102, 133, 136], "schneider": 47, "pitfal": 47, "theori": [47, 71, 86, 97, 533, 539], "websit": 47, "ca": [47, 142, 693, 707, 714], "2015": [47, 521, 524, 533, 539], "ncifcrf": 47, "gov": [47, 61, 62, 64, 65, 132, 133, 136, 138, 144, 147, 280, 288, 289], "glossari": 47, "html": [47, 83, 132, 134, 136, 138, 141, 143, 146, 193, 512, 541, 559, 565, 577, 585, 593, 594, 595, 596, 597, 703, 807, 808], "shannon_entropi": 47, "classmethod": [49, 55, 215, 219, 240, 271, 289, 309, 337, 359, 388, 412, 443, 469, 486, 502, 505, 506, 507, 508, 511, 555, 558, 580, 584, 704, 765, 766, 767, 785], "dictionari": [49, 51, 56, 58, 67, 146, 147, 150, 193, 204, 205, 214, 218, 257, 324, 374, 429, 452, 475, 505, 514, 595, 766], "construct": [49, 58, 138, 147, 193, 194, 222, 292, 342, 394, 490, 505, 508, 514, 533, 540, 692, 756, 766, 767, 808, 868, 869, 873], "to_dict": 49, "sort": [49, 54, 109, 110, 194, 203, 206, 246, 249, 274, 315, 318, 339, 365, 368, 391, 418, 421, 447, 473, 488, 636, 669, 691, 794, 799, 800, 807, 871, 875], "rel": [50, 94, 135, 138, 249, 251, 252, 264, 266, 268, 318, 330, 332, 334, 368, 381, 383, 385, 421, 423, 424, 436, 438, 440, 473, 480, 482, 484, 533, 539, 577, 793, 811, 846, 871], "across": [50, 94, 136, 137, 143, 203, 524, 595, 720, 807], "1d": [50, 103, 222, 224, 229, 241, 242, 244, 245, 247, 248, 250, 260, 261, 262, 266, 267, 268, 269, 270, 272, 274, 294, 299, 310, 311, 313, 314, 316, 317, 319, 327, 328, 332, 333, 334, 335, 336, 338, 339, 342, 344, 349, 360, 361, 363, 364, 366, 367, 369, 378, 379, 383, 384, 385, 386, 387, 389, 390, 391, 394, 396, 401, 413, 414, 416, 417, 419, 420, 422, 432, 433, 434, 438, 439, 440, 441, 442, 444, 447, 452, 454, 459, 470, 471, 472, 477, 478, 482, 483, 484, 485, 487, 488, 523, 524], "ndarrai": [50, 107, 222, 224, 241, 242, 244, 245, 250, 260, 261, 266, 267, 268, 269, 270, 274, 294, 310, 311, 313, 314, 319, 327, 332, 333, 334, 335, 336, 339, 342, 344, 360, 361, 363, 364, 369, 378, 383, 384, 385, 386, 387, 390, 391, 394, 396, 413, 414, 416, 417, 422, 432, 433, 438, 439, 440, 441, 442, 447, 452, 454, 470, 471, 477, 482, 483, 484, 485, 488, 494, 512, 522, 523, 525, 527, 528, 529, 530, 531, 532, 534, 535, 536, 539, 541, 545, 559, 569, 577, 582, 585, 599, 601, 715, 722, 765], "vector": [50, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 140, 242, 244, 247, 250, 262, 265, 267, 269, 270, 272, 274, 280, 311, 313, 316, 319, 328, 331, 333, 335, 336, 338, 339, 361, 363, 366, 369, 379, 382, 384, 386, 387, 389, 390, 391, 414, 416, 419, 422, 434, 437, 439, 441, 442, 444, 447, 478, 481, 483, 485, 487, 488, 494, 521, 522, 523, 524, 529, 530, 534, 535, 536, 539, 540, 541, 545, 565, 569, 593, 596, 597, 647, 707, 721, 722, 799, 868], "specifi": [50, 54, 94, 111, 132, 134, 136, 137, 138, 139, 140, 143, 146, 147, 148, 180, 190, 193, 203, 216, 218, 222, 229, 247, 249, 265, 277, 289, 290, 292, 299, 316, 318, 331, 342, 349, 366, 368, 382, 394, 401, 419, 421, 437, 449, 452, 459, 473, 481, 491, 494, 501, 504, 509, 510, 516, 522, 523, 524, 529, 530, 532, 538, 542, 545, 552, 554, 556, 557, 562, 566, 569, 576, 579, 581, 583, 589, 593, 594, 595, 596, 597, 601, 680, 703, 711, 712, 718, 750, 758, 789, 792, 794, 797, 800, 807, 834, 846, 847, 857, 868, 875], "Will": [50, 67, 180, 183, 188, 190, 503, 515, 553, 561, 578, 588, 693, 722], "stabl": [51, 52, 160, 161, 162, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 223, 224, 225, 226, 227, 229, 232, 234, 236, 237, 238, 239, 241, 242, 243, 244, 246, 248, 250, 251, 252, 253, 254, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 275, 276, 277, 278, 281, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 302, 304, 306, 307, 308, 310, 311, 312, 313, 315, 317, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 343, 344, 345, 346, 347, 349, 352, 354, 356, 357, 358, 360, 361, 362, 363, 365, 367, 369, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 392, 395, 396, 397, 398, 399, 401, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 418, 420, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 445, 446, 448, 449, 450, 453, 454, 455, 456, 457, 459, 462, 464, 466, 467, 468, 470, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 501, 516, 552, 562, 576, 589, 747], "least": [51, 52, 90, 141, 145, 247, 256, 257, 259, 316, 323, 324, 326, 366, 373, 374, 376, 419, 428, 429, 431, 474, 475, 476, 524, 595, 703, 720, 721, 810, 875], "demonstr": [51, 52, 148, 257, 259, 324, 326, 374, 376, 429, 431, 475, 476], "behavior": [51, 52, 54, 60, 61, 62, 136, 137, 138, 145, 190, 257, 259, 274, 290, 324, 326, 339, 374, 376, 391, 429, 431, 447, 452, 475, 476, 488, 593, 595, 597, 752, 875], "rang": [52, 74, 83, 95, 106, 137, 138, 145, 239, 243, 249, 259, 262, 273, 312, 318, 326, 328, 362, 368, 376, 379, 411, 415, 421, 431, 434, 445, 473, 476, 478, 593, 594, 703, 721, 770, 875], "qualiti": [52, 136, 144, 222, 227, 239, 243, 259, 273, 297, 312, 326, 342, 347, 362, 376, 394, 399, 411, 415, 431, 445, 452, 457, 476, 703, 871], "ignore_metadata": 53, "improv": [53, 141, 143, 222, 342, 394, 580], "__iter__": 53, "__reversed__": 53, "concat": [53, 54], "artifact": [53, 60, 61, 62], "real": [53, 136, 137, 144, 521, 522, 523, 527, 528, 529, 530, 534, 535, 536], "concaten": [53, 146, 215, 240, 309, 359, 412, 469], "outer": [53, 54, 240, 309, 359, 412, 469, 505], "join": [53, 132, 133, 137, 144, 146, 147, 240, 309, 359, 412, 469, 800, 807, 808], "aa": [53, 136, 138, 143, 280], "gt": 53, "strict": [54, 143, 240, 309, 359, 412, 469, 504, 554, 579, 595, 598, 601], "horizont": 54, "control": [54, 136, 593, 595, 596, 602, 714, 717, 719, 720, 721], "dure": [54, 136, 194, 240, 309, 359, 412, 469, 597, 832], "section": [54, 136, 137, 142, 145, 146, 280, 452, 594, 595, 706, 707], "inner": [54, 141, 240, 309, 359, 412, 469, 505], "left": [54, 69, 97, 141, 522, 523, 527, 531, 534, 535, 536, 537, 748, 770, 811, 812, 873], "right": [54, 69, 97, 141, 521, 522, 523, 527, 531, 534, 535, 536, 537, 770, 811, 812, 875], "unshar": 54, "pad": [54, 143, 240, 309, 359, 412, 469], "guarante": [54, 85, 145, 222, 246, 315, 342, 365, 394, 418, 541, 599, 758], "duplic": [54, 111, 137, 145, 146, 217, 274, 339, 391, 447, 488, 504, 554, 579, 723, 831], "doesn": [54, 136, 145, 184, 290, 521, 538, 592, 706, 712, 716, 790, 809, 874], "subclass": [54, 134, 136, 143, 146, 148, 240, 309, 359, 412, 452, 469, 490, 540, 541, 599, 807, 834], "togeth": [54, 135, 136, 138, 146, 524, 834], "likewis": [54, 94, 146], "per": [54, 132, 133, 144, 146, 222, 342, 394, 452, 598, 601, 691, 714, 720, 721, 746, 833], "retain": [54, 240, 272, 309, 338, 359, 389, 412, 444, 469, 487, 504, 554, 579, 691], "output": [54, 132, 133, 141, 143, 144, 146, 265, 331, 382, 437, 481, 523, 593, 597, 598, 636, 707, 800, 808, 875], "reproduc": [54, 78, 105, 106], "msa1": 54, "msa2": 54, "unnecessari": 54, "By": [54, 83, 94, 103, 107, 136, 138, 145, 522, 523, 524, 597, 711, 712, 715, 797, 808, 835], "col1": [54, 145], "43": [54, 90, 142, 807], "col2": [54, 145], "col3": [54, 145], "o": [54, 55, 59, 94, 135, 136, 137, 144, 146, 219, 221, 271, 279, 337, 341, 342, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 704, 705, 785, 806, 868, 874], "file": [55, 59, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 161, 174, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 510, 511, 517, 524, 540, 557, 558, 563, 583, 584, 590, 624, 657, 668, 703, 704, 705, 719, 748, 785, 806, 832, 833, 868, 873], "kwarg": [55, 59, 66, 103, 107, 108, 111, 112, 160, 162, 174, 181, 182, 183, 185, 186, 187, 188, 191, 192, 219, 221, 271, 277, 278, 279, 337, 341, 388, 393, 443, 449, 450, 451, 486, 489, 490, 511, 517, 558, 563, 584, 590, 680, 704, 705, 785, 806, 834, 869], "instanc": [55, 59, 148, 162, 175, 177, 178, 179, 181, 186, 203, 218, 219, 221, 240, 271, 279, 309, 337, 341, 359, 388, 393, 412, 443, 451, 469, 486, 489, 492, 502, 511, 517, 519, 520, 541, 543, 558, 563, 565, 567, 582, 584, 590, 595, 597, 598, 599, 613, 635, 646, 679, 690, 703, 704, 705, 721, 728, 744, 785, 806, 807, 814, 815, 818, 825, 873, 875], "registri": [55, 59, 136, 137, 144, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 704, 705, 785, 806, 869], "system": [55, 59, 86, 97, 145, 147, 148, 203, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 704, 705, 720, 785, 806], "clustal": [55, 59, 114, 869], "fasta": [55, 59, 116, 137, 139, 144, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 869], "fastq": [55, 59, 117, 144, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 869], "phylip": [55, 59, 126, 136, 141, 807, 808, 869, 873], "stockholm": [55, 59, 129], "filepath": [55, 59, 181, 182, 183, 186, 187, 188, 190, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 598, 704, 705, 785, 806], "url": [55, 59, 181, 182, 183, 186, 187, 188, 190, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 704, 705, 785, 806], "filehandl": [55, 59, 148, 160, 161, 162, 181, 182, 183, 186, 187, 188, 190, 191, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 704, 705, 785, 806], "etc": [55, 59, 80, 136, 137, 145, 181, 182, 183, 186, 187, 188, 193, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 490, 511, 517, 558, 563, 584, 590, 704, 705, 712, 714, 728, 785, 806, 871], "someth": [55, 59, 148, 161, 181, 182, 183, 186, 187, 188, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 599, 704, 705, 785, 806, 875], "understood": [55, 59, 141, 181, 182, 183, 186, 187, 188, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 704, 705, 785, 806], "util": [55, 59, 147, 160, 162, 219, 221, 271, 279, 280, 288, 289, 292, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 704, 705, 785, 806, 868, 869], "respons": [55, 59, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 624, 657, 668, 692, 704, 705, 707, 714, 785, 806], "caller": [55, 59, 219, 221, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489, 511, 517, 558, 563, 584, 590, 624, 657, 668, 704, 705, 785, 806], "reader": [55, 131, 132, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 161, 175, 180, 181, 182, 186, 187, 219, 271, 337, 388, 443, 486, 511, 558, 584, 704, 785], "attempt": [55, 136, 145, 190, 219, 271, 337, 388, 443, 486, 511, 558, 584, 704, 748, 761, 785], "guess": [55, 90, 112, 136, 181, 186, 219, 271, 337, 388, 443, 486, 511, 558, 584, 704, 785, 810], "keyword": [55, 59, 66, 135, 138, 140, 161, 181, 182, 183, 186, 187, 188, 218, 219, 221, 265, 271, 277, 278, 279, 331, 337, 341, 382, 388, 393, 437, 443, 449, 450, 451, 481, 486, 489, 511, 517, 558, 563, 584, 590, 704, 705, 785, 806], "write": [55, 134, 135, 137, 139, 140, 141, 143, 146, 148, 162, 179, 180, 190, 219, 271, 337, 388, 443, 486, 511, 540, 558, 584, 624, 657, 668, 704, 742, 785, 813], "reassign": [56, 143, 595], "remain": [56, 136], "ccg": 56, "altern": [56, 147, 148, 290, 506, 521, 533, 539, 555, 580, 595, 597, 598, 601, 712, 717, 766, 792], "ascend": [57, 220], "place": [57, 141, 146, 290, 523, 691, 712, 715, 745, 770, 802, 812], "multiindex": [57, 587], "noth": [57, 190, 275, 340, 392, 448, 834], "descend": [57, 94, 220, 728, 758, 770, 778, 787, 794, 795, 798, 801, 873], "sort_index": 57, "passthrough": 57, "intern": [57, 138, 141, 538, 746, 748, 750, 756, 758, 761, 770, 779, 784, 790, 800, 802, 803, 869, 873], "modifi": [57, 136, 138, 146, 180, 222, 342, 394, 452, 582, 680, 713, 792], "from_dict": [58, 593, 597, 602, 703, 719, 720], "regist": [59, 148, 149, 150, 160, 161, 162, 174, 180, 182, 185, 187, 221, 279, 341, 393, 451, 489, 517, 563, 590, 705, 806], "writer": [59, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 177, 180, 183, 188, 190, 221, 279, 341, 393, 451, 489, 517, 563, 590, 705, 806], "penalize_terminal_gap": [60, 61, 62], "unalign": [60, 61, 62, 63, 64, 65, 66, 871], "substract": [60, 61, 62, 63, 64, 65, 710], "previou": [60, 61, 62, 63, 64, 65, 227, 297, 347, 399, 457, 593, 595, 597], "typic": [60, 61, 62, 63, 64, 65, 67, 136, 137, 144, 145, 146, 193, 203, 712, 748], "similar": [60, 61, 62, 63, 64, 65, 104, 133, 135, 136, 137, 140, 143, 145, 148, 452, 490, 593, 594, 595, 596, 597, 707, 712, 714, 720, 721, 871, 873], "lookup": [60, 61, 62, 63, 64, 65, 175, 176, 177, 494, 545, 569, 592, 595, 598, 745, 756, 760, 770, 771, 780, 784, 799, 834], "continu": [60, 61, 62, 692], "penal": [60, 61, 62], "even": [60, 61, 62, 68, 82, 88, 95, 99, 136, 141, 290, 593, 597, 721, 801], "irrelev": [60, 61, 62], "want": [60, 61, 62, 135, 138, 203, 717, 719, 720, 721, 752, 753, 869], "nearli": [60, 61, 62], "tupl": [60, 61, 62, 63, 64, 65, 66, 73, 77, 84, 90, 93, 111, 139, 161, 193, 214, 218, 277, 278, 449, 450, 490, 494, 541, 545, 565, 569, 767, 768, 799, 800], "input": [60, 61, 62, 63, 64, 65, 66, 78, 94, 103, 105, 106, 107, 147, 160, 162, 190, 191, 203, 215, 245, 272, 290, 291, 314, 338, 364, 389, 417, 444, 471, 487, 518, 524, 538, 541, 594, 595, 691, 703, 706, 707, 709, 713, 722, 802, 807, 808, 868, 869, 871], "item": [60, 61, 62, 63, 64, 65, 66, 146, 249, 272, 318, 338, 368, 389, 421, 444, 452, 473, 487, 501, 516, 552, 562, 576, 589, 691, 722, 750, 792, 799, 800, 834, 835, 845, 875], "local_pairwise_align": [60, 61, 62, 64, 65], "local_pairwise_align_nucleotid": [60, 61, 62, 63, 65], "global_pairwise_align_protein": [60, 61, 63, 64, 65], "global_pairwise_align_nucelotid": [60, 62, 63, 64, 65], "algorithm": [60, 63, 138, 593, 594, 595, 597, 602, 603, 614, 625, 636, 647, 658, 669, 680, 706, 707, 714, 751, 808, 809, 868], "slightli": [60, 83, 597], "basic": [60, 80, 132, 133, 601, 693, 703], "origin": [60, 62, 63, 65, 70, 71, 74, 77, 78, 81, 82, 86, 87, 94, 95, 97, 98, 105, 106, 108, 134, 136, 141, 143, 144, 240, 309, 359, 412, 452, 469, 537, 593, 594, 595, 596, 597, 601, 706, 714, 722, 751, 807, 808, 873, 875], "valid": [60, 63, 78, 94, 103, 105, 106, 107, 108, 111, 136, 137, 141, 143, 222, 274, 292, 339, 342, 391, 394, 447, 488, 533, 539, 541, 564, 565, 580, 591, 868, 871, 875], "emboss": [60, 63], "needl": 60, "server": [60, 61, 62, 63, 64, 65, 147], "function": [60, 61, 62, 78, 79, 84, 85, 90, 93, 105, 106, 107, 108, 111, 136, 137, 144, 149, 150, 160, 161, 162, 175, 176, 177, 180, 184, 193, 203, 215, 222, 245, 280, 314, 342, 364, 394, 417, 471, 490, 506, 519, 522, 523, 524, 527, 528, 529, 530, 537, 555, 580, 594, 595, 596, 597, 598, 599, 602, 691, 707, 716, 719, 720, 721, 746, 750, 753, 758, 763, 787, 792, 800, 802, 803, 808, 809, 811, 812, 813, 814, 832, 834, 846, 847, 857, 858, 868], "amino": [60, 62, 65, 135, 136, 140, 222, 274, 280, 290, 339, 342, 391, 447, 488, 490, 502], "acid": [60, 62, 65, 135, 136, 137, 140, 143, 147, 222, 274, 280, 290, 292, 339, 342, 391, 394, 447, 452, 488, 490, 502], "sb": 60, "cd": [60, 135, 138, 290], "j": [60, 62, 63, 65, 78, 81, 82, 90, 94, 95, 105, 106, 131, 132, 133, 136, 137, 138, 146, 147, 342, 501, 502, 516, 521, 529, 530, 531, 532, 533, 537, 539, 552, 562, 576, 589, 595, 596, 597, 707, 758, 807], "mol": [60, 63, 132, 133, 135, 138], "biol": [60, 63, 78, 82, 94, 132, 133, 135, 138, 533, 539], "1970": [60, 70], "mar": [60, 63, 82], "48": [60, 87], "443": 60, "53": [60, 142, 751], "ebi": [60, 63, 135, 138, 193], "uk": [60, 63, 82, 135, 138, 193, 521], "tool": [60, 63, 132, 133, 136, 143, 145, 147, 521, 703, 707], "psa": [60, 63], "emboss_needl": 60, "global_pairwise_align": [61, 62, 63, 64, 65], "deriv": [61, 62, 64, 65, 135, 262, 328, 379, 434, 452, 478, 529, 530, 537, 720, 808], "ncbi": [61, 62, 64, 65, 132, 133, 136, 138, 147, 277, 278, 280, 281, 288, 289, 290, 291, 449, 450, 766, 871], "blast": [61, 62, 64, 65, 136], "nlm": [61, 62, 64, 65, 132, 133, 136, 138, 147, 280, 288, 289], "nih": [61, 62, 64, 65, 132, 133, 136, 138, 144, 147, 280, 288, 289], "cgi": [61, 62, 64, 65, 280, 288, 289], "blosum": [62, 65, 342, 490, 502], "block": [62, 65, 108, 502, 833], "henikoff": [62, 65, 502], "proc": [62, 65], "natl": [62, 65], "acad": [62, 65], "sci": [62, 65, 133, 537], "nov": [62, 65, 135, 703], "1992": [62, 65, 69, 78, 94, 502, 540], "89": [62, 65, 138, 502], "22": [62, 65, 142, 147, 502, 524, 717, 871], "10915": [62, 65, 502], "10919": [62, 65, 502], "water": 63, "identif": 63, "molecular": [63, 601, 748, 808], "subsequ": [63, 134, 136, 145, 224, 232, 237, 241, 260, 262, 294, 302, 307, 310, 327, 328, 344, 352, 357, 360, 378, 379, 396, 404, 409, 413, 432, 434, 452, 454, 462, 467, 470, 477, 478, 834, 871], "tf": 63, "1981": [63, 751, 807], "147": 63, "195": 63, "emboss_wat": 63, "sequence1": 66, "sequence2": 66, "deprec": [66, 67, 92, 111, 258, 270, 325, 336, 375, 387, 430, 442], "replac": [66, 67, 90, 136, 222, 276, 342, 394, 446, 490, 521, 532, 691, 715, 722, 799], "favor": 66, "issu": [66, 76, 135, 136, 137, 145, 161, 808, 869], "1814": 66, "complet": [66, 84, 85, 137, 138, 141, 717, 810, 869], "meet": [66, 145, 184, 218, 803], "acgtu": 67, "substitutionmatrix": [67, 274, 339, 391, 447, 488], "track": [67, 135], "progress": [67, 594], "161": [67, 132], "look": [67, 140, 142, 143, 148, 218, 272, 338, 389, 444, 449, 450, 487, 494, 524, 545, 569, 703, 719, 720, 721, 750, 857, 873, 875], "get": [67, 145, 190, 191, 202, 203, 280, 289, 490, 540, 541, 565, 595, 691, 707, 755, 794], "domin": [68, 70, 76, 87, 98, 99, 102], "interv": [68, 73, 77, 84, 135, 138, 139, 203, 204, 205, 206, 212, 214, 215, 216, 217, 218, 220, 222, 227, 239, 256, 276, 292, 297, 323, 342, 347, 373, 394, 399, 411, 428, 452, 457, 474, 718], "ci": [68, 84], "suffix": 68, "_ci": 68, "rare_threshold": 69, "coverag": [69, 77, 81, 85, 132, 133], "s_": [69, 71, 72, 90, 101], "frac": [69, 70, 71, 72, 76, 77, 79, 80, 81, 82, 86, 87, 88, 89, 90, 95, 96, 99, 102, 522, 523, 527, 531, 532, 534, 535, 536, 537, 595, 714], "rare": [69, 721], "c_": 69, "f_1": [69, 72, 77, 81, 96], "gamma": 69, "2_": 69, "pool": 69, "coeffici": [69, 594, 595, 601, 693, 714, 717, 753], "variat": [69, 595, 707], "sum": [69, 71, 74, 78, 87, 88, 90, 94, 98, 215, 249, 318, 368, 421, 473, 523, 527, 528, 531, 721, 722, 743, 799, 833], "_": [69, 134, 136, 137, 141, 146, 215, 227, 297, 347, 399, 457, 540, 595], "f_i": 69, "n_": [69, 70], "threshold": [69, 811], "fewer": [69, 143, 720, 721], "doubl": [69, 70, 71, 72, 74, 76, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 102, 181, 186, 706, 712], "everi": [69, 145, 147, 523, 534, 535, 536, 537, 538, 598, 749, 764, 770], "introduc": [69, 80, 134, 136, 521], "manual": [69, 73, 83, 88, 145, 807, 808], "zero": [69, 79, 111, 131, 193, 214, 249, 318, 368, 421, 473, 521, 524, 526, 532, 533, 539, 541, 593, 594, 595, 596, 597, 598, 601, 706, 712, 715, 720, 722, 808, 875], "known": [69, 141, 181, 186, 537, 538, 707, 712, 871], "environ": [69, 105, 106, 521, 707], "did": [69, 136, 144, 181, 186, 191, 875], "chao": [69, 72, 94], "american": 69, "87": [69, 142], "210": 69, "217": 69, "ma": [69, 274, 339, 391, 447, 488], "yang": 69, "1993": [69, 593, 594], "rule": [69, 136, 143, 145, 146, 807], "recaptur": 69, "debug": [69, 834, 845, 875], "unequ": [69, 281, 490], "failur": [69, 564, 591, 835, 875], "rate": [69, 490, 717], "biometrika": [69, 81], "80": [69, 136, 692, 720, 721, 748, 803, 875], "193": 69, "201": 69, "viceroi": [69, 73], "eeb": [69, 73], "uconn": [69, 73], "edu": [69, 73, 134, 136, 141, 143, 807, 808], "hwang": 69, "chen": [69, 94], "kuo": 69, "2000": [69, 721], "commun": [69, 74, 78, 94, 97, 102, 105, 106, 540, 593, 594, 596, 597, 703, 707, 714, 721], "statistica": [69, 80], "sinica": 69, "227": [69, 136], "246": [69, 102, 146], "berger": 70, "parker": 70, "fraction": [70, 520, 721, 752, 873], "total": [70, 71, 77, 78, 79, 81, 86, 87, 88, 89, 90, 102, 131, 132, 145, 203, 249, 318, 368, 421, 473, 490, 541, 565, 594, 758], "plankton": 70, "foraminifera": 70, "sea": 70, "sediment": 70, "scienc": [70, 71, 78, 134, 136, 502, 707], "168": [70, 720], "3937": 70, "1345": 70, "1347": 70, "brillouin": 71, "h_b": 71, "ln": [71, 79, 86, 95, 522, 524, 527, 531, 537], "n_i": [71, 87, 88], "text": [71, 87, 88, 102, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 160, 161, 162, 190, 540, 624, 657, 668], "th": [71, 87, 88, 102], "1956": 71, "academ": 71, "press": 71, "york": 71, "bias_correct": [72, 73], "bia": [72, 73], "correct": [72, 73, 80, 136, 524, 784, 790, 869], "equat": [72, 73, 79, 90, 595], "uncorrect": [72, 73], "bias": [72, 73], "chao1_ci": 72, "2f_2": 72, "f_2": [72, 77], "1984": [72, 222, 292, 342, 394, 452], "parametr": [72, 521, 524, 593, 596], "popul": [72, 79, 81, 101, 144, 146, 265, 331, 382, 437, 481, 521, 599, 717, 721], "scandinavian": [72, 524], "265": 72, "270": 72, "zscore": 73, "96": [73, 139], "chao1": 73, "scalar": [73, 97, 274, 339, 391, 447, 488, 490, 494, 536, 540, 545, 569, 703], "95": [73, 77, 78, 84, 137, 142, 748], "lower_bound": [73, 77, 84, 203], "upper_bound": [73, 77, 84, 203, 215], "emploi": 73, "varianc": [73, 533, 539, 594, 596, 597, 692, 708, 711, 715, 720], "presenc": [73, 94, 281, 290, 721], "absenc": [73, 721], "specif": [73, 78, 83, 103, 105, 106, 107, 108, 111, 148, 218, 452, 601, 613, 635, 636, 646, 679, 690, 720, 721, 792, 869, 874, 875], "simpson": [74, 99], "degre": [74, 94, 134, 533, 539, 711, 718, 720], "concentr": [74, 721], "composit": [74, 78, 94, 190, 707], "p_i": [74, 76, 97, 98], "proport": [74, 76, 80, 81, 90, 94, 97, 98, 142, 252, 424, 519, 521, 522, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 539, 593, 595, 596, 602, 636, 680, 693, 706, 712, 714, 751], "probabl": [74, 84, 85, 96, 602, 614, 691, 706, 717, 721, 728], "randomli": [74, 582, 593, 595, 596, 599, 691, 722, 753, 792], "select": [74, 94, 145, 597, 719, 720, 792], "sometim": [74, 136, 138, 145, 707, 869], "distinguish": [74, 94], "reciproc": [74, 721], "discrep": 74, "denot": [74, 94, 98, 101, 102, 136, 524, 593, 596, 597], "accord": [74, 78, 222, 342, 394, 711, 715], "mathemat": [74, 97, 105, 521, 748, 751, 807], "1949": [74, 98, 99], "natur": [74, 83, 98, 99], "163": [74, 98, 99], "4148": [74, 98, 99], "688": [74, 98, 99], "occurr": [75, 100, 241, 253, 254, 255, 258, 310, 320, 321, 322, 325, 360, 370, 371, 372, 375, 377, 413, 425, 426, 427, 430, 470], "ens_pi": 76, "ens_": 76, "pie": 76, "sum_": [76, 78, 80, 94, 97, 521, 523, 534, 535, 536, 595], "chase": 76, "knight": [76, 78, 105, 106, 703], "scale": [76, 594, 692, 706, 707, 708, 714], "driver": [76, 868], "biodivers": [76, 78, 94], "why": 76, "standardis": 76, "enough": [76, 136, 141, 721], "ecologi": [76, 78, 79, 86, 87, 102, 524, 593, 594, 595, 596, 692, 706, 707, 712, 713, 714], "letter": [76, 78, 136, 138, 342], "volum": 76, "supplement": 76, "pg": 76, "17": [76, 78, 105, 106, 135, 142, 222, 394, 692, 720], "26": [76, 133, 141, 524, 596, 601, 703], "esti": 77, "good": [77, 81, 712], "pm": 77, "sqrt": [77, 87, 88, 89, 537, 714], "constant": [77, 521, 524, 577, 595, 719], "distribut": [77, 135, 521, 599, 712, 717, 718, 720, 721], "2nf_2": 77, "hardcod": 77, "1983": 77, "limit": [77, 132, 141, 142, 143, 719, 720], "law": 77, "nonparametr": [77, 521, 524, 532], "random": [77, 79, 90, 131, 593, 597, 599, 691, 707, 717, 719, 720, 721, 753, 792], "ann": [77, 96], "905": 77, "912": 77, "sqcup": [78, 94], "minimum": [78, 94, 99, 147, 252, 262, 328, 379, 424, 434, 478, 524, 597, 691, 720, 721], "connect": [78, 80, 94, 141, 728, 777, 784], "taxa": [78, 94, 145, 147, 707, 721, 753], "lowest": [78, 94, 774, 776], "ancestor": [78, 94, 240, 309, 359, 412, 469, 743, 774, 776], "lca": [78, 94, 748, 776], "superset": [78, 94, 105, 106, 593, 597], "subset": [78, 94, 105, 106, 111, 131, 135, 594, 752, 758, 873], "elsewher": [78, 103, 105, 106, 107], "lead": [78, 103, 105, 106, 107, 136, 137, 140], "hard": [78, 103, 105, 106, 107], "bypass": [78, 103, 105, 106, 107], "certain": [78, 87, 103, 105, 106, 107, 222, 342, 394, 519, 803], "entail": [78, 103, 105, 106, 107], "missingnodeerror": [78, 94, 103, 105, 106, 107, 761, 762, 764, 779, 792], "duplicatenodeerror": [78, 94, 103, 105, 106, 107, 756], "fail": [78, 79, 94, 103, 105, 106, 107, 217, 597, 717, 834, 835, 875], "exact": [78, 94, 103, 105, 106, 107, 145, 193, 240, 309, 359, 412, 469, 597, 712, 869], "phydiv": 78, "span": [78, 94, 108, 136, 138, 141, 193, 218], "clarifi": 78, "taxon": [78, 94, 135, 138, 766, 873], "ancestr": 78, "life": 78, "One": [78, 143, 148, 577, 808], "choos": [78, 145, 707, 717], "scope": [78, 875], "unroot": [78, 94, 105, 106, 141, 765, 789, 804, 805, 808], "variant": [78, 94, 144, 147, 490], "sever": [78, 141, 143, 692, 717], "evolutionari": [78, 490, 502, 728, 808], "histori": [78, 721], "eh": 78, "fd": [78, 833], "pycog": [78, 105, 106, 807], "qiim": [78, 105, 106, 145], "impos": [78, 105, 106], "few": [78, 105, 106, 108, 869, 873, 875], "had": [78, 105, 106, 593, 597, 721], "trifurc": [78, 105, 106, 141], "newick": [78, 105, 106, 124, 742, 748, 785, 806, 808, 869, 873], "convent": [78, 105, 106, 132, 135, 138], "silent": [78, 105, 106], "conserv": [78, 83, 84, 94, 134, 240, 309, 359, 412, 469, 524, 540], "evalu": [78, 94, 132, 133, 229, 299, 349, 401, 459, 540, 594, 691, 717, 750, 787, 790, 873, 875], "baker": 78, "2006": [78, 597], "bioinformat": [78, 94, 137, 143, 145, 748], "challeng": 78, "117693430600200007": 78, "nee": 78, "1997": [78, 146], "extinct": 78, "loss": [78, 601], "278": 78, "5338": 78, "692": 78, "694": 78, "petchei": 78, "ol": 78, "gaston": 78, "kj": 78, "402": 78, "hamadi": [78, 105, 106], "lozupon": [78, 105, 106], "fast": [78, 105, 106, 602, 712], "facilit": [78, 105, 106, 108, 131, 565, 717, 756, 808], "throughput": [78, 105, 106, 136, 137, 703, 720], "analys": [78, 105, 106, 593], "microbi": [78, 84, 85, 94, 105, 106, 524, 593, 594, 596, 597, 703], "pyrosequenc": [78, 105, 106], "phylochip": [78, 105, 106], "ism": [78, 105, 106], "2010": [78, 105, 106, 137], "taxonom": [78, 105, 106], "u_count": [78, 105, 106], "otu8": [78, 105, 106], "62": [78, 105, 106, 134, 137, 597, 871], "round": [78, 83, 90, 105, 106, 595, 717, 720, 721, 758], "fisher": 79, "solv": [79, 717], "runtimeerror": 79, "analyt": 79, "solut": 79, "obtain": [79, 229, 299, 349, 401, 452, 459, 501, 502, 516, 524, 540, 552, 562, 576, 587, 589, 593, 595, 597, 828, 829, 830], "minimize_scalar": 79, "determinist": [79, 593, 597], "becom": [79, 136, 137, 141, 145, 203], "inf": [79, 145, 792], "corbet": 79, "william": 79, "1943": 79, "anim": 79, "pp": [79, 89, 96, 707], "58": [79, 142, 717], "rectangl": 80, "gini": [80, 98], "area": 80, "lorenz": 80, "curv": [80, 83, 90, 707, 717, 720, 721], "under": [80, 107, 136, 222, 342, 394, 452, 636, 720, 868], "simplifi": 80, "2b": 80, "entri": [80, 131, 135, 147, 691], "trapezoid": 80, "line": [80, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 190, 720, 746], "parallel": [80, 108], "opinion": 80, "though": [80, 136, 137, 143, 144, 145, 524, 577, 593, 597, 808, 875], "desir": [80, 84, 132, 140, 712, 791, 875], "circumst": [80, 342, 720], "linear": [80, 135, 138, 693, 707], "segment": 80, "accur": [80, 84, 85], "fall": [80, 83, 94, 106, 691], "gradient": [80, 706, 707, 712, 714], "formula": [80, 597], "dx": [80, 537], "h_i": 80, "h_0": 80, "h_n": 80, "1912": 80, "variabl": [80, 131, 272, 338, 389, 444, 452, 487, 524, 594, 597, 692, 693, 703, 707, 712, 713, 714, 717, 719, 720, 834, 857, 875], "mutabl": [80, 452, 814, 871], "cuppini": 80, "bologna": 80, "156": 80, "page": [80, 524, 808, 873], "reprint": 80, "memori": [80, 134, 136, 137, 138, 143, 144, 146, 540, 598, 691, 712, 833, 869], "di": [80, 871], "metodologica": 80, "ed": 80, "pizetti": 80, "salvemini": 80, "rome": 80, "libreria": 80, "eredi": 80, "virgilio": 80, "veschi": 80, "1955": 80, "onc": [81, 136, 148, 801], "1953": 81, "237": [81, 102], "264": 81, "heip": [82, 88], "wiener": [82, 97], "logarithm": [82, 97, 524], "pielou_": 82, "1974": [82, 88], "ass": 82, "54": [82, 106], "555": 82, "557": 82, "lower_quantil": 83, "upper_quantil": 83, "kempton": 83, "taylor": 83, "slope": 83, "cumul": [83, 102, 134], "interquantil": 83, "lower": [83, 84, 136, 143, 193, 203, 524, 580, 587, 595, 691, 721], "quartil": 83, "inward": 83, "bound": [83, 84, 138, 139, 148, 150, 193, 194, 202, 203, 206, 214, 215, 217, 218, 452, 524, 718, 721], "sdr": [83, 88], "iv": [83, 88, 94], "onlin": [83, 88, 137], "magurran": [83, 89], "1998": [83, 692, 706, 707, 709, 710, 712, 714], "half": [83, 521], "uq": 83, "lq": 83, "justif": 83, "unclear": 83, "just": [83, 84, 85, 90, 148, 791, 869, 873, 875], "overlap": [83, 218, 263, 264, 329, 330, 380, 381, 435, 436, 479, 480, 501, 520, 552, 576, 752], "quantil": 83, "consider": [83, 94, 720], "off": [83, 96, 222, 342, 394, 521, 720, 751, 807, 811, 875], "leav": [83, 135], "chang": [83, 136, 202, 203, 290, 452, 502, 593, 691, 750, 784, 875], "1976": 83, "model": [83, 84, 85, 90, 502, 521, 540, 721], "262": 83, "818": 83, "820": 83, "pisc": 83, "com": [83, 132, 133, 134, 594, 833], "sdrhelp": 83, "ci_typ": 84, "ulcl": 84, "uncov": [84, 85], "predict": [84, 85, 146, 720], "ratio": [84, 95, 99, 521, 522, 523, 524, 527, 528, 529, 530, 533, 539, 721], "ulcu": 84, "fix": [84, 140, 143], "lladser_p": 84, "around": [84, 85, 108, 136, 143, 146, 490, 525, 595, 718, 873], "full": [84, 85, 134, 524, 764, 790, 832], "theorem": [84, 85], "iii": 84, "lladser": [84, 85, 105, 106], "gouet": [84, 85], "reeder": [84, 85], "extrapol": [84, 85, 717], "urn": [84, 85], "poisson": [84, 85], "2011": [84, 85, 94, 105, 106], "lladser_ci": 85, "too": [85, 712, 743], "low": [85, 712, 720], "log": [86, 521, 522, 523, 524, 527, 528, 529, 530, 533, 539], "accumul": [86, 89, 743], "1958": 86, "36": [86, 96, 142, 145, 533, 539, 717], "71": [86, 105, 142, 146], "mcintosh": [87, 88], "mcintosh_": 87, "1967": [87, 595], "concept": [87, 537], "1115": 87, "1126": 87, "mcintosh_d": 88, "wrong": 88, "engel": 88, "560": 88, "d_": [89, 99], "mn": 89, "squar": [89, 90, 107, 141, 490, 541, 565, 709], "2004": 89, "blackwel": 89, "76": [89, 94, 142], "77": [89, 597], "num_repeat": 90, "params_guess": 90, "micha": 90, "menten": 90, "fit": [90, 691, 693, 714, 874], "rarefact": 90, "ns_": 90, "datapoint": 90, "subsampl": [90, 691, 717, 720, 721, 722, 753], "initi": [90, 136, 720, 775, 778, 781, 782, 783, 798, 801, 808, 845], "s_max": 90, "subsample_count": [90, 691], "controversi": 90, "ml": 90, "assumpt": [90, 141, 519, 524, 761, 762, 810], "roughli": 90, "magnitud": [90, 595, 597, 712, 809], "enzym": 90, "kinet": 90, "nonlinear": 90, "raaijmak": 90, "1987": [90, 808], "biometr": [90, 597], "793": 90, "803": 90, "histor": [92, 280, 748], "reli": [93, 145, 222, 342, 394], "explicitli": [94, 143, 145, 274, 339, 391, 447, 488, 692], "fulli": [94, 138, 869], "adopt": [94, 274, 339, 391, 447, 488], "author": [94, 138, 146, 452, 524], "upd": 94, "contrast": [94, 537], "rpd": 94, "advantag": [94, 565, 834], "framework": [94, 521], "rbwpd_": 94, "analog": 94, "pd_": 94, "multipli": 94, "bwpd_": 94, "delta": [94, 532, 711], "npd": 94, "min": [94, 99, 721], "lesser": 94, "side": [94, 595, 598, 601], "balanc": [94, 537], "adjust": 94, "factor": [94, 105, 106, 593, 596, 601, 707, 721], "theta": [94, 524], "back": [94, 136, 139, 183, 188, 744, 873], "public": [94, 137, 703], "although": [94, 601, 720], "involv": [94, 522], "report": [94, 145, 161, 601, 714], "perspect": 94, "rpd_": 94, "upd_": 94, "pardi": 94, "goldman": 94, "2007": [94, 105, 106], "resourc": [94, 145, 147, 190], "systemat": 94, "biologi": [94, 95, 99, 290, 601, 748, 761, 807, 808], "56": [94, 243, 312, 362, 415], "431": 94, "444": 94, "chiu": 94, "jost": 94, "2016": [94, 533, 539], "decomposit": [94, 108], "hill": 94, "141": [94, 751], "72": 94, "mccoi": 94, "matsen": 94, "robust": [94, 145, 533, 539, 597, 601], "depth": [94, 692, 717, 720, 721, 801, 873], "peerj": 94, "e157": 94, "vellend": 94, "cornwel": 94, "magnuson": 94, "ford": 94, "mooer": 94, "\u00f8": 94, "frontier": 94, "assess": [94, 102, 593, 595, 596, 597, 601], "194": 94, "207": 94, "barker": 94, "quantit": [94, 105, 106, 706, 721], "prioriti": [94, 846, 847, 875], "achiev": [94, 871], "linnean": 94, "societi": 94, "165": 94, "bitting": 94, "charlson": 94, "hoffmann": 94, "lewi": 94, "wu": [94, 106], "li": 94, "2012": [94, 138, 147, 595], "environment": [94, 594, 692, 707, 712, 713], "covari": [94, 708], "2106": 94, "2113": 94, "pielou": [95, 99], "equit": [95, 99], "e_h": 95, "That": [95, 99, 141, 265, 331, 382, 437, 481], "actual": [95, 99, 145, 148, 180, 595], "versu": [95, 99, 105, 106], "maximum": [95, 102, 136, 137, 524, 594, 636, 691, 707, 711, 715, 720, 721, 753], "heip_": 95, "1966": [95, 99], "theoret": [95, 99], "131": [95, 99, 751], "unobserv": 96, "outcom": [96, 720], "1968": 96, "vol": 96, "256": [96, 717], "257": 96, "bit": [97, 132, 133, 145], "log_2": 97, "propos": [97, 808], "1948": 97, "bell": 97, "technic": [97, 141], "379": 97, "423": 97, "impur": 98, "e_d": 99, "enspi": 99, "144": 99, "usual": [101, 135, 138, 145, 147, 490, 748], "discret": 101, "entiti": [101, 193], "smaller": [101, 262, 328, 379, 434, 478, 598], "observed_featur": 101, "d_w": 102, "max_i": 102, "b_i": [102, 537], "sequenti": [102, 136, 137, 143, 524, 537, 538, 703, 802], "rank": [102, 147, 524, 593, 594, 595, 716, 766], "smallest": [102, 143, 720, 721], "express": [102, 248, 275, 317, 340, 367, 392, 420, 448, 472, 533, 539, 720, 871], "bracket": [102, 141], "uneven": 102, "plant": [102, 135, 537], "dissimilar": [104, 107, 140, 490, 491, 492, 494, 499, 500, 501, 503, 504, 506, 509, 510, 512, 515, 516, 533, 540, 541, 542, 543, 545, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 562, 564, 565, 566, 567, 569, 574, 575, 576, 578, 579, 581, 583, 585, 588, 589, 592], "v_count": [105, 106], "qualit": [105, 106, 703], "deeper": [105, 106], "advis": [105, 106, 111], "appl": [105, 106], "microbiol": [105, 106], "8228": 105, "8235": 105, "2005": [105, 135], "kellei": [105, 106], "insight": [105, 106], "structur": [105, 106, 133, 138, 141, 147, 502, 541, 593, 594, 601, 790, 834, 868], "73": [105, 106], "1576": [105, 106], "1585": [105, 106], "stombaugh": [105, 106], "comparison": [105, 106, 524, 601, 719, 751, 808, 811, 873], "169": [105, 106], "172": [105, 106], "biocor": [105, 106, 703], "uu": 105, "37": [105, 146], "quantiti": 106, "mathemt": 106, "pairwise_func": 107, "pairwis": [107, 108, 111, 506, 524, 533, 555, 580, 598, 601, 759, 797, 873], "doc": [107, 134, 135, 136, 143, 145, 193, 512, 541, 559, 565, 577, 585, 807, 808], "link": [107, 202, 594, 601, 728], "hollow": [107, 131, 541, 580, 582, 599], "sklearn": 107, "pairwise_dist": 107, "distancematrix": [107, 108, 111, 131, 140, 513, 518, 533, 541, 560, 593, 594, 595, 596, 597, 598, 599, 601, 703, 712, 797, 808], "itypeerror": 107, "reduce_f": 108, "map_f": 108, "resolv": [108, 111, 122, 145, 601], "reduc": [108, 597, 691, 712], "partialdistancematrix": 108, "signatur": [108, 191], "_block_comput": 108, "ipyparallel": 108, "map_async": 108, "blocksiz": 108, "partial_beta_divers": 108, "process": [108, 136, 146, 217, 714, 810, 835, 875], "motiv": 108, "earth": 108, "project": [108, 137, 522, 537, 593, 594, 595, 596, 597, 713], "dataset": [108, 131, 521, 597, 692, 707, 712], "000": 108, "million": 108, "earthmicrobiom": 108, "id_pair": 111, "unstabl": 111, "caution": 111, "unresolv": 111, "warn": [112, 119, 137, 145, 712, 750, 804, 809, 810, 868], "blast7": 113, "pars": [113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 136, 137, 138, 140, 148, 869], "embl": [115, 138, 147, 193, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489], "sniffer": [119, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 176, 181, 182, 186, 187, 869], "gff3": [120, 138, 219, 221, 271, 279, 337, 341, 486, 489], "genbank": [121, 135, 139, 147, 271, 279, 337, 341, 388, 393, 443, 451, 486, 489], "lsmat": [123, 511, 517, 558, 563, 584, 590], "written": [126, 134, 136, 137, 141, 143, 807, 869, 873], "qseq": [127, 132, 133, 271, 337, 388, 443, 486], "qual": [128, 137], "ambigu": [130, 182, 187], "unidentifi": 130, "encod": [131, 136, 137, 144, 148, 150, 190, 537, 692], "rapid": [131, 136, 770], "ye": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "dissimilaritymatrix": [131, 140, 490, 492, 494, 499, 501, 503, 504, 506, 510, 511, 513, 515, 516, 517, 533, 565, 567, 569, 574, 576, 578, 579, 583, 586, 588, 589, 599], "hdf5": 131, "datatyp": [131, 691, 722], "unicod": [131, 145, 190], "diagon": [131, 580, 587], "dm": [131, 494, 501, 510, 513, 516, 540, 545, 552, 557, 560, 562, 569, 576, 583, 586, 587, 589, 593, 594, 597, 598, 703, 808], "current": [131, 132, 135, 136, 137, 138, 143, 145, 146, 147, 203, 217, 278, 291, 450, 502, 595, 680, 706, 712, 750, 763, 772, 773, 778, 868], "float32": [131, 597], "human": [131, 136, 137, 140, 141, 142, 813], "readabl": [131, 136, 137, 140, 141, 142, 143, 190, 813], "especi": [131, 136, 145, 601, 714], "appropri": [131, 140, 190, 240, 309, 359, 412, 469, 524, 869, 873], "hdfgroup": 131, "databas": [132, 133, 135, 138, 145, 147, 193, 766], "simpl": [132, 133, 136, 137, 141, 145, 146, 148, 174, 185, 521, 524, 594, 601, 869, 873], "header": [132, 133, 134, 137, 138, 140, 142, 145], "tab": [132, 133, 139, 140, 141, 142, 144, 145, 147], "moac": 132, "gi": [132, 133, 138], "15800534": 132, "ref": [132, 745], "np_286546": 132, "3e": [132, 133, 717], "114": 132, "330": 132, "170768970": 132, "zp_02903423": 132, "99": [132, 133, 135, 142, 593, 597, 601], "9e": 132, "329": 132, "produc": [132, 133, 143, 144, 160, 262, 328, 379, 434, 478, 706, 714], "outfmt": [132, 133], "legaci": [132, 133, 136], "With": [132, 521, 532], "qseqid": [132, 133], "sseqid": [132, 133], "bitscor": [132, 133], "qstart": [132, 133], "sstart": [132, 133], "qgi": [132, 133], "qacc": [132, 133], "acces": 132, "qaccver": [132, 133], "qlen": [132, 133], "sallseqid": [132, 133], "sgi": [132, 133], "sallgi": [132, 133], "sacc": [132, 133], "saccver": [132, 133], "sallacc": [132, 133], "slen": [132, 133], "align": [132, 133, 136, 137, 193, 203, 452, 490, 868, 869, 871], "qend": [132, 133], "send": [132, 133], "part": [132, 136, 138, 141, 144, 518, 522, 537, 691, 778, 834, 873], "sseq": [132, 133], "raw": [132, 624, 657], "pident": [132, 133], "percent": [132, 871], "nident": [132, 133], "gapopen": [132, 133], "ppo": [132, 133], "percentag": [132, 521], "frame": [132, 133, 278, 280, 290, 291, 450, 594, 766], "qframe": [132, 133], "sframe": [132, 133], "btop": [132, 133], "traceback": [132, 143, 290, 452, 595], "staxid": [132, 133], "taxonomi": [132, 141, 145, 147, 280, 288, 289, 766, 767, 800], "sscinam": [132, 133], "scientif": [132, 145, 565], "scomnam": [132, 133], "sblastnam": [132, 133], "sskingdom": [132, 133], "super": [132, 133], "kingdom": [132, 133, 147], "stitl": [132, 133], "sstrand": [132, 133], "strand": [132, 133, 138, 139, 146, 193, 276, 277, 278, 446], "salltitl": [132, 133], "qcov": [132, 133], "qcovhsp": [132, 133], "hsp": [132, 133], "miss": [132, 136, 145, 146, 240, 309, 359, 412, 469, 521, 532, 594, 703, 719, 720, 725, 726, 875], "allow": [132, 136, 137, 141, 143, 144, 145, 148, 160, 162, 190, 203, 222, 240, 249, 309, 318, 342, 359, 368, 394, 412, 421, 469, 473, 494, 501, 521, 545, 552, 569, 576, 593, 594, 596, 597, 598, 602, 712, 758, 800, 835, 875], "default_column": 132, "suppos": [132, 133, 135, 136, 137, 138, 141, 144, 146, 521, 717, 721], "tgi": 132, "t100": [132, 133], "t161": 132, "t0": [132, 133, 139, 142, 144, 540], "t1": [132, 133, 142, 144, 147, 540], "t3e": [132, 133], "t330": 132, "t99": 132, "t9e": 132, "t329": 132, "fh": [132, 133, 134, 136, 137, 138, 139, 143, 144, 146, 147, 148, 160, 161, 162], "df": [132, 133, 147, 513, 560, 586, 593, 594, 597, 703, 718], "000000e": [132, 133], "altschul": [132, 133], "gish": [132, 133], "miller": [132, 133], "myer": [132, 133], "lipman": [132, 133, 136], "1990": [132, 133, 135], "215": [132, 133], "403": [132, 133], "410": [132, 133], "blastedbio": 132, "blogspot": 132, "csv": [132, 140, 869], "book": [132, 133, 136], "nbk279675": 132, "blastn": 133, "18": [133, 142, 146, 593, 717, 871], "1786181": 133, "gb": [133, 138], "ae000111": 133, "ecoli": 133, "field": [133, 137, 144, 280], "hit": 133, "10596": 133, "ae000174": 133, "8e": 133, "5565": 133, "5671": 133, "6928": 133, "6821": 133, "ae000394": 133, "1e": [133, 141, 811], "5587": 133, "135": [133, 533, 539], "219": [133, 135, 594], "ae000425": 133, "6e": 133, "8552": 133, "8468": 133, "ae000171": 133, "2214": 133, "2130": 133, "minor": 133, "blastp": 133, "31": 133, "query1": 133, "subject2": 133, "sbjctframe": 133, "ver": 133, "record": [133, 135, 136, 137, 138, 139, 144], "subject1": 133, "other_vertebr": 133, "af178033": 133, "emorg": 133, "811": 133, "1566": 133, "af031394": 133, "63": [133, 142], "909": 133, "1542": [133, 748], "consist": [133, 136, 137, 139, 142, 143, 145, 146, 147, 274, 339, 391, 447, 452, 488, 490, 720, 778, 798], "blast6": 133, "sbjct": 133, "tax": 133, "tae000111": 133, "t10596": 133, "tae000174": 133, "t8e": 133, "t5565": 133, "t5671": 133, "t6928": 133, "t6821": 133, "tae000171": 133, "t5587": 133, "t2214": 133, "t2130": 133, "tae000425": 133, "t6e": 133, "t8552": 133, "t8468": 133, "temorg": 133, "t811": 133, "t1566": 133, "af178032": 133, "t94": 133, "57": [133, 142, 707], "t44": 133, "t1217": 133, "af178031": 133, "82": [133, 134, 146], "t42": 133, "t1233": 133, "94": [133, 142], "nbk279682": 133, "plain": [134, 136, 137, 138, 141, 143, 144], "divid": [134, 537, 709, 711, 715], "60": [134, 135, 139, 602, 720], "long": [134, 136, 143, 145, 247, 316, 366, 419, 522, 594, 680, 706], "below": [134, 136, 137, 141, 143, 145, 146, 147, 280, 292, 452, 594, 595, 703, 720, 728], "properti": [134, 143, 147, 281, 287, 292, 490, 506, 555, 565, 580, 717, 748, 784, 814, 826, 828, 829, 830], "abc": [134, 227, 292, 297, 347, 399, 457], "gcaugcaucugcauacguacguacgcaugcauca": 134, "def": [134, 148, 160, 161, 162, 245, 292, 314, 364, 417, 471, 721, 875], "xyz": 134, "gucgauacauacguacgucguacguacgu": 134, "cgac": 134, "cgcgaugcaugcau": 134, "cgau": 134, "caugcaucguacguacgcaugac": 134, "code": [134, 136, 137, 138, 147, 218, 222, 274, 276, 277, 278, 280, 281, 287, 288, 289, 290, 291, 339, 342, 391, 394, 446, 447, 449, 450, 488, 601, 722, 751, 807, 809, 871], "clustal_f": 134, "gcaugcaucugcauacguacguacgcaugca": 134, "gucgauacauacguacgucgguacgu": 134, "cgugcaugcau": 134, "cauucguacguacgcaugac": 134, "gcaugcaucugcauacguacguacgcaugcagucgauacauacguacgucgguacgu": 134, "accgttgta": [134, 143], "gtagct": [134, 143], "gtcgaa": [134, 143], "gtacct": [134, 143], "agagttgaaggtatct": [134, 143], "getvalu": [134, 136, 137, 138, 139, 143, 146, 540], "sciencedirect": 134, "pii": 134, "0378111988903307": 134, "mit": 134, "meme_v4": 134, "clustalw": 134, "annot": [135, 138, 139, 145, 203], "mark": [135, 138, 146, 875], "termin": [135, 277, 290, 449, 801], "comment": [135, 136, 138, 139, 140, 146, 147], "txt": [135, 145, 147], "extens": [135, 145], "seen": [135, 138, 721], "submit": [135, 136, 721], "ena": [135, 138], "assembl": 135, "flatfil": 135, "parent": [135, 139, 141, 147, 452, 537, 726, 728, 745, 748, 760, 763, 772, 780, 784, 793, 799, 802, 804, 805, 873], "metatdata": 135, "moment": [135, 595, 875], "1499": 135, "rn": [135, 146], "download": [135, 138, 147], "molecul": [135, 136, 138, 452, 490, 871], "thymin": [135, 138, 222, 276, 446], "uracil": [135, 138, 276, 394, 446], "embl_str": 135, "x56734": 135, "sv": 135, "mrna": 135, "std": [135, 711, 715, 720], "pln": [135, 147], "1859": 135, "bp": [135, 138], "xx": 135, "s46826": 135, "dt": 135, "sep": 135, "1991": 135, "29": [135, 137, 138], "85": [135, 142, 721, 803], "updat": [135, 136, 147, 203, 217, 452], "de": [135, 146], "trifolium": 135, "repen": 135, "cyanogen": 135, "glucosidas": 135, "kw": 135, "white": 135, "clover": 135, "oc": 135, "eukaryota": 135, "viridiplanta": 135, "streptophyta": 135, "embryophyta": 135, "tracheophyta": 135, "spermatophyta": 135, "magnoliophyta": 135, "eudicotyledon": 135, "gunnerida": 135, "pentapetala": 135, "rosid": 135, "fabid": 135, "fabal": 135, "fabacea": 135, "papilionoidea": 135, "trifoliea": 135, "rp": 135, "rx": 135, "1007": [135, 533, 539], "bf00039495": 135, "pubm": [135, 138, 452], "1907511": 135, "ra": [135, 146], "oxtobi": 135, "dunn": 135, "pancoro": 135, "hugh": 135, "rt": [135, 146], "linamaras": 135, "rl": [135, 146], "209": [135, 138, 595], "insdc": [135, 138, 193], "univers": [135, 136, 143, 145, 150], "newcastl": 135, "upon": 135, "tyne": 135, "medic": 135, "school": 135, "ne2": 135, "4hh": 135, "dr": 135, "md5": [135, 833], "1e51ca3a5450c43524b9185c236cc5cc": 135, "qualifi": [135, 138], "mol_typ": [135, 138], "clone_lib": 135, "lambda": [135, 691, 717, 720, 721, 750, 763, 784, 787, 792, 803, 807, 808, 875], "gt10": 135, "clone": 135, "tre361": 135, "tissue_typ": 135, "db_xref": [135, 138], "3899": 135, "evid": [135, 141], "1495": 135, "ec_numb": 135, "21": [135, 142, 524, 533, 539, 710, 721], "goa": 135, "p26204": 135, "interpro": 135, "ipr001360": 135, "ipr013781": 135, "ipr017853": 135, "ipr033132": 135, "uniprotkb": 135, "swiss": 135, "prot": 135, "protein_id": 135, "caa40058": 135, "translat": [135, 138, 141, 147, 190, 276, 278, 280, 291, 342, 446, 450, 871], "mdfivaifalfvissftitstnaveastlldignlsr": 135, "sfprgfifgagssayqfegavneggrgpsiwdtfthkypekirdgsnaditv": 135, "dqyhrykedvgimkdqnmdsyrfsiswprilpkgklsgginhegikyynnli": 135, "nellangiqpfvtlfhwdlpqvledeyggflnsgvindfrdytdlcfkefgd": 135, "rvrywstlnepwvfsnsgyalgtnapgrcsasnvakpgdsgtgpyivthnqi": 135, "lahaeavhvyktkyqayqkgkigitlvsnwlmplddnsipdikaaersldfq": 135, "fglfmeqlttgdysksmrrivknrlpkfskfesslvngsfdfiginyysssi": 135, "isnapshgnakpsystnpmtnisfekhgiplgpraasiwiyvypymfiqedf": 135, "eifcyilkinitilqfsitengmnefndatlpveeallntyridyyyrhlyi": 135, "irsairagsnvkgfyawsfldcnewfagftvrfglnfvd": 135, "609": 135, "314": 135, "355": [135, 602], "581": 135, "aaacaaacca": 135, "aatatggatt": 135, "ttattgtagc": 135, "catatttgct": 135, "ctgtttgtta": 135, "ttagctcatt": 135, "cacaattact": 135, "tccacaaatg": 135, "cagttgaagc": 135, "ttctactctt": 135, "cttgacatag": 135, "gtaacctgag": 135, "tcggagcagt": 135, "tttcctcgtg": 135, "gcttcatctt": 135, "tggtgctgga": 135, "tcttcagcat": 135, "accaatttga": 135, "aggtgcagta": 135, "aacgaaggcg": 135, "gtagaggacc": 135, "aagtatttgg": 135, "gataccttca": 135, "cccataaata": 135, "tccagaaaaa": 135, "ataagggatg": 135, "gaagcaatgc": 135, "agacatcacg": 135, "gttgaccaat": 135, "atcaccgcta": 135, "caaggaagat": 135, "gttgggatta": 135, "tgaaggatca": 135, "aaatatggat": 135, "tcgtatagat": 135, "tctcaatctc": 135, "ttggccaaga": 135, "atactcccaa": 135, "agggaaagtt": 135, "gagcggaggc": 135, "ataaatcacg": 135, "aaggaatcaa": 135, "atattacaac": 135, "aaccttatca": 135, "acgaactatt": 135, "ggctaacggt": 135, "atacaaccat": 135, "ttgtaactct": 135, "ttttcattgg": 135, "gatcttcccc": 135, "aagtcttaga": 135, "agatgagtat": 135, "ggtggtttct": 135, "taaactccgg": 135, "tgtaataaat": 135, "gattttcgag": 135, "actatacgga": 135, "tctttgcttc": 135, "aaggaatttg": 135, "gagatagagt": 135, "gaggtattgg": 135, "agtactctaa": 135, "atgagccatg": 135, "ggtgtttagc": 135, "aattctggat": 135, "atgcactagg": 135, "aacaaatgca": 135, "ccaggtcgat": 135, "gttcggcctc": 135, "caacgtggcc": 135, "aagcctggtg": 135, "attctggaac": 135, "aggaccttat": 135, "atagttacac": 135, "acaatcaaat": 135, "tcttgctcat": 135, "gcagaagctg": 135, "tacatgtgta": 135, "taagactaaa": 135, "taccaggcat": 135, "atcaaaaggg": 135, "aaagataggc": 135, "ataacgttgg": 135, "tatctaactg": 135, "gttaatgcca": 135, "cttgatgata": 135, "atagcatacc": 135, "agatataaag": 135, "gctgccgaga": 135, "gatcacttga": 135, "cttccaattt": 135, "ggattgttta": 135, "tggaacaatt": 135, "aacaacagga": 135, "gattattcta": 135, "agagcatgcg": 135, "gcgtatagtt": 135, "aaaaaccgat": 135, "tacctaagtt": 135, "ctcaaaattc": 135, "gaatcaagcc": 135, "tagtgaatgg": 135, "ttcatttgat": 135, "tttattggta": 135, "taaactatta": 135, "ctcttctagt": 135, "tatattagca": 135, "atgccccttc": 135, "acatggcaat": 135, "gccaaaccca": 135, "gttactcaac": 135, "aaatcctatg": 135, "accaatattt": 135, "catttgaaaa": 135, "acatgggata": 135, "cccttaggtc": 135, "caagggctgc": 135, "ttcaatttgg": 135, "atatatgttt": 135, "atccatatat": 135, "gtttatccaa": 135, "gaggacttcg": 135, "agatcttttg": 135, "ttacatatta": 135, "aaaataaata": 135, "taacaatcct": 135, "gcaattttca": 135, "atcactgaaa": 135, "atggtatgaa": 135, "tgaattcaac": 135, "gatgcaacac": 135, "ttccagtaga": 135, "agaagctctt": 135, "ttgaatactt": 135, "acagaattga": 135, "ttactattac": 135, "cgtcacttat": 135, "actacattcg": 135, "ttctgcaatc": 135, "agggctggct": 135, "caaatgtgaa": 135, "gggtttttac": 135, "gcatggtcat": 135, "ttttggactg": 135, "taatgaatgg": 135, "tttgcaggct": 135, "ttactgttcg": 135, "ttttggatta": 135, "aactttgtag": 135, "attagaaaga": 135, "tggattaaaa": 135, "aggtacccta": 135, "agctttctgc": 135, "ccaatggtac": 135, "aagaactttc": 135, "tcaaaagaaa": 135, "ctagctagta": 135, "ttattaaaag": 135, "tagattacag": 135, "tacatcgttt": 135, "gaagttgagt": 135, "tggtgcacct": 135, "aattaaataa": 135, "aagaggttac": 135, "tcttaacata": 135, "tttttaggcc": 135, "attcgttgtg": 135, "aagttgttag": 135, "gctgttattt": 135, "ctattatact": 135, "atgttgtagt": 135, "aataagtgca": 135, "ttgttgtacc": 135, "agaagctatg": 135, "atcataacta": 135, "taggttgatc": 135, "cttcatgtat": 135, "cagtttgatg": 135, "ttgagaatac": 135, "tttgaattaa": 135, "aagtcttttt": 135, "ttattttttt": 135, "aaaaaaaaaa": 135, "aaaaaaaaa": 135, "dna_seq": [135, 136, 138], "cross_refer": 135, "date": 135, "dbsourc": 135, "locu": [135, 138, 147], "1740": 135, "1800": 135, "rna_seq": [135, 138], "aauauggauu": 135, "uuauuguagc": 135, "cauauuugcu": 135, "cuguuuguua": 135, "uuagcucauu": 135, "cacaauuacu": 135, "uccacaaaug": 135, "caguugaagc": 135, "uucuacucuu": 135, "cuugacauag": 135, "guaaccugag": 135, "agaagcuaug": 135, "aucauaacua": 135, "uagguugauc": 135, "cuucauguau": 135, "caguuugaug": 135, "uugagaauac": 135, "uuugaauuaa": 135, "aagucuuuuu": 135, "uuauuuuuuu": 135, "trascrib": 135, "verifi": [135, 148, 181, 186], "transcrib": [135, 138, 277, 278, 446, 871], "soppos": 135, "deal": [135, 189, 521, 532, 712, 869], "embl_gen": 135, "ftp": [135, 147, 193], "pub": [135, 147, 193], "releas": [135, 147], "usrman": 135, "view": 135, "displai": [135, 249, 272, 280, 318, 338, 368, 389, 421, 444, 473, 487, 598, 693], "brows": 135, "easi": [136, 137, 145], "db": 136, "149855": 136, "cgatgtcgatcgatcgatcgatcag": 136, "34989": 136, "catcgatcgatcgatgcatgcatgcatg": 136, "accompani": [136, 541, 810], "particuarli": 136, "instrument": 136, "phred": [136, 137], "nonneg": 136, "deflin": 136, "split": [136, 137, 143, 146], "blank": [136, 137, 141, 142, 143, 145, 510, 557, 583], "whitespac": [136, 137, 140, 142, 146], "trail": [136, 137, 140], "semicolon": [136, 139], "resembl": 136, "request": [136, 501, 516, 552, 562, 576, 589, 758, 832, 869], "tracker": [136, 161], "pull": 136, "welcom": 136, "greater": [136, 203, 223, 293, 343, 395, 453, 593, 595, 596, 597, 598, 601, 720, 721, 722], "immedi": [136, 143, 770], "repect": 136, "strictli": [136, 524, 538, 749], "enforc": [136, 452], "itself": [136, 143, 147, 191, 193, 222, 280, 342, 394, 452, 490, 601, 693, 728, 808, 871], "standard": [136, 137, 139, 141, 145, 274, 277, 278, 280, 290, 291, 339, 391, 447, 449, 450, 488, 494, 521, 524, 545, 569, 594, 595, 708, 711, 714, 715, 869, 871], "remaind": 136, "iupac": [136, 137, 143, 144, 222, 252, 280, 290, 342, 394, 424, 452, 871], "lexicon": [136, 137, 143], "sciki": 136, "newlin": [136, 141, 143, 148, 150, 181, 182, 186, 187, 190], "additon": 136, "maintain": [136, 141, 148, 582, 706, 707, 717, 720], "futur": 136, "path": [136, 137, 144, 190, 744, 832], "seq_num": [136, 137, 138, 139, 144], "50th": [136, 524], "id_whitespace_replac": [136, 137], "disk": [136, 541], "potenti": [136, 262, 328, 379, 434, 478, 691, 787, 809, 875], "description_newline_replac": [136, 137], "max_width": 136, "width": [136, 140, 143], "longer": [136, 143, 521, 721], "caveat": [136, 521], "never": [136, 146], "exce": [136, 143], "12345": [136, 452], "better": [136, 706, 707, 869], "runtim": [136, 222, 342, 394, 834, 875], "affect": [136, 141, 280, 281, 287, 452, 593, 597], "five": [136, 147, 510, 524, 557, 583, 808], "turkei": [136, 143], "aagctngggcatttcagggtgagcccgggcaatacagggtat": 136, "salmo": [136, 143], "gair": 136, "aagccttggcagtgcagggtgagccgtgg": 136, "ccgggcacggtat": 136, "sapien": 136, "accggttggccgttcagggtacaggttggccgttcagggtaa": 136, "seq4": 136, "chimp": [136, 143], "aaacccttgccg": 136, "ttacgcttaaac": 136, "cgaggccgggac": 136, "actcat": 136, "seq5": 136, "gorilla": [136, 143], "aaacccttgccggtacgcttaaaccattgccggtacgcttaa": 136, "copyright": [136, 143], "1986": [136, 141, 143, 707], "2008": [136, 143], "washington": [136, 141, 143, 807, 808], "joseph": [136, 143, 873], "felsenstein": [136, 143, 873], "permiss": [136, 141, 143], "grant": [136, 143], "fee": [136, 143], "charg": [136, 143], "fl": 136, "presum": 136, "aagccttggcagtgcagggtgagccgtggccgggcacggtat": 136, "aaacccttgccgttacgcttaaaccgaggccgggacactcat": 136, "didn": [136, 875], "detect": [136, 138, 145, 182, 187, 524, 595, 721], "infeas": 136, "stream": [136, 139, 869], "loop": [136, 804, 805], "aagctngggc": [136, 143], "atttcagggt": [136, 143], "gagcccgggc": [136, 143], "aatacagggt": [136, 143], "aagccttggc": 136, "agtgcagggt": [136, 143], "gagccgtggc": [136, 143], "cgggcacggt": [136, 143], "accggttggc": 136, "cgttcagggt": [136, 143], "acaggttggc": [136, 143], "aaacccttgc": [136, 143], "cgttacgctt": [136, 143], "aaaccgaggc": [136, 143], "cgggacactc": [136, 143], "cggtacgctt": [136, 143], "aaaccattgc": [136, 143], "fifth": 136, "api": [136, 184, 518], "standalon": 136, "cgatgtc": 136, "catcgtc": 136, "39": [136, 142, 537], "79": [136, 139, 142], "fasta_fl": 136, "qual_fl": 136, "uint8": [136, 137, 144, 222, 224, 241, 245, 260, 261, 266, 267, 268, 269, 274, 294, 310, 314, 327, 332, 333, 334, 335, 339, 342, 344, 360, 364, 378, 383, 384, 385, 386, 391, 394, 396, 413, 417, 432, 433, 438, 439, 440, 441, 447, 452, 454, 470, 471, 477, 482, 483, 484, 485, 488], "new_fasta_fh": 136, "new_qual_fh": 136, "dj": 136, "pearson": [136, 595, 598, 601, 753], "wr": [136, 601], "1985": [136, 222, 292, 342, 394, 452], "sensit": [136, 145, 265, 331, 382, 437, 481], "4693": 136, "1435": 136, "41": [136, 142], "en": [136, 137, 146, 808], "wikipedia": [136, 137, 146, 808, 873], "wiki": [136, 137, 143, 146, 808], "fasta_format": 136, "blastcgihelp": 136, "shtml": 136, "broadinstitut": 136, "crd": 136, "php": 136, "madden": 136, "oct": [136, 138], "2003": [136, 521], "aug": 136, "mcentyr": 136, "ostel": 136, "editor": 136, "handbook": 136, "internet": [136, 147], "bethesda": 136, "md": 136, "nation": [136, 147, 502], "center": [136, 147, 525, 594, 706, 708, 712, 715], "biotechnologi": [136, 147], "chapter": [136, 713], "nbk21097": 136, "evolut": [136, 141, 143, 600, 601, 748, 807, 808], "genet": [136, 141, 143, 147, 277, 278, 280, 281, 287, 288, 289, 290, 291, 449, 450, 600, 807, 808, 871], "invent": 137, "jim": 137, "mullikin": 137, "wellcom": 137, "trust": 137, "sanger": 137, "institut": 137, "formal": [137, 147, 521], "conceptu": [137, 596], "aacaccaaacttctccaccacgtgagctacaaaag": 137, "cabcacc": 137, "lb": 137, "ccyt": 137, "wf": [137, 875], "tatgtatatataacatatacatatatacatacata": 137, "kz": 137, "py": [137, 148], "yy": 137, "bt": 137, "aT": 137, "bbb": 137, "printabl": [137, 144], "ascii": [137, 144, 145, 148, 274, 339, 391, 447, 488, 490, 746, 873], "decod": [137, 190], "excel": [137, 145], "supplementari": [137, 524], "solexa": 137, "unfortun": [137, 720], "notabl": 137, "illumina": [137, 144], "tabl": [137, 138, 145, 147, 277, 278, 280, 289, 290, 291, 449, 450, 524, 692, 706, 707, 713, 714, 834, 871], "highlight": 137, "foundat": 137, "obf": 137, "biopython": 137, "bioperl": [137, 143], "offset": [137, 138], "126": 137, "93": 137, "illumina1": [137, 144], "later": [137, 719], "59": 137, "Not": [137, 222, 274, 339, 391, 447, 488, 597], "truncat": [137, 500, 551, 575, 702, 808, 875], "outsid": [137, 193, 217, 249, 318, 368, 421, 473], "phred_offset": [137, 144], "convers": [137, 190, 577], "explicit": 137, "whenev": [137, 712], "aacaccaaacttctccacc": 137, "acgtgagctacaaaag": 137, "reload": 137, "tatgtatata": 137, "taacatatac": 137, "atatatacat": 137, "acata": 137, "new_fh": 137, "ffffx": 137, "ab": [137, 292], "bbf": 137, "ka": 137, "bbx": 137, "jyzox": 137, "zxx": 137, "fff": 137, "fasffbf": 137, "sffaaa": 137, "peter": 137, "cock": 137, "christoph": 137, "naohisa": 137, "goto": 137, "michael": 137, "heuer": 137, "rice": 137, "nucl": 137, "1767": 137, "1771": 137, "publish": [137, 146], "decemb": 137, "2009": [137, 138, 601], "1093": 137, "nar": 137, "gkp1137": 137, "oxfordjourn": 137, "fastq_format": 137, "flat": [138, 262, 328, 379, 434, 478], "gbk": 138, "renam": [138, 258, 270, 325, 336, 375, 387, 430, 442], "genpept": 138, "essenti": 138, "collabor": 138, "joint": 138, "effort": 138, "ddbj": 138, "organis": 138, "layout": 138, "webpag": 138, "interval_metadata": [138, 139, 193, 203, 215, 218, 222, 227, 229, 256, 292, 297, 299, 323, 342, 347, 349, 373, 394, 399, 401, 428, 452, 457, 459, 474], "sub": [138, 139, 193, 722], "keep": [138, 145, 216, 229, 299, 349, 401, 459, 691, 790, 791], "vocabulari": [138, 139], "infer": [138, 145, 181, 186, 832, 869], "whose": [138, 144, 145, 509, 556, 581, 594, 595, 715], "stranded": 138, "codon_start": 138, "phase": [138, 139], "codon": [138, 147, 277, 280, 290, 291, 342, 449, 490], "dbxref": [138, 139], "cross": 138, "descriptor": [138, 713, 828, 829, 830], "explain": [138, 139, 142, 537, 602, 636, 680, 692, 693, 706, 712, 714], "67": [138, 142, 239, 246, 273, 315, 365, 411, 418, 445, 593, 597, 707, 717, 871], "66": [138, 142, 246, 315, 365, 418, 597, 871], "neighbor": [138, 793, 808], "68": [138, 602, 720], "insid": [138, 141], "remot": 138, "j00123": 138, "discard": [138, 595], "200": 138, "kept": 138, "199": 138, "__locat": 138, "__": 138, "privat": [138, 746], "gb_str": 138, "3k1v_a": 138, "34": [138, 144, 748], "syn": 138, "chain": 138, "Of": 138, "mutant": 138, "preq1": 138, "260656459": 138, "synthet": 138, "artifici": [138, 692], "klein": 138, "edward": 138, "ferr": 138, "amar": 138, "cocryst": 138, "riboswitch": [138, 193], "nat": 138, "343": 138, "344": 138, "19234468": 138, "seqr": 138, "32630": 138, "misc_bind": 138, "bound_moieti": 138, "agaggttcta": 138, "gcacatccct": 138, "ctataaaaaa": 138, "ctaa": 138, "agagguucua": 138, "gcacaucccu": 138, "cuauaaaaaa": 138, "cuaa": 138, "sitemap": 138, "samplerecord": 138, "feature_t": 138, "webfeat": 138, "nuccor": 138, "delimit": [139, 140, 142, 144, 147, 540], "intervalmetadata": [139, 193, 202, 222, 292, 342, 394, 452], "seq_id": 139, "seqid": 139, "attr": [139, 771, 799], "tag": [139, 146, 246, 275, 315, 340, 365, 392, 418, 448, 537], "comma": [139, 140, 141], "predefin": [139, 245, 314, 364, 417, 471], "mean": [139, 141, 148, 190, 203, 218, 222, 251, 252, 423, 424, 501, 516, 521, 524, 527, 537, 552, 562, 576, 589, 658, 680, 706, 710, 711, 712, 715, 717, 718, 720, 721, 869, 873], "derives_from": 139, "ontology_term": 139, "is_circular": 139, "And": [139, 222, 342, 521, 871], "parser": [139, 141], "skip_subregion": 139, "contigu": [139, 193, 262, 328, 379, 434, 478], "region": [139, 193, 203, 262, 328, 379, 434, 478], "exon": [139, 193, 265, 331, 382, 394, 437, 452, 481], "gff_str": 139, "gff": 139, "seq_1": 139, "tgene": 139, "t10": [139, 142], "t90": 139, "tid": 139, "gen1": 139, "texon": 139, "t30": [139, 144], "tparent": 139, "t50": 139, "seq_2": 139, "t80": 139, "t96": 139, "gen2": 139, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 139, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 139, "im": [139, 203, 215], "4604421736": 139, "fuzzi": [139, 193, 194, 202, 203, 214, 215, 452], "foo": [139, 145, 203, 452, 833, 875], "gen": [139, 875], "4603377592": 139, "4603378712": 139, "atgcatgcat": 139, "gcatgcatgc": 139, "120": 139, "ontologi": 139, "tsv": [140, 145], "varieti": 140, "serial": [140, 540, 693, 869], "del": [140, 692], "anywher": [140, 141, 145, 524], "easili": [140, 871], "program": [140, 141, 145, 147], "spreadsheet": [140, 145], "edg": [141, 601, 706, 746, 799], "minim": 141, "june": 141, "english": [141, 595], "subtre": [141, 147, 763, 873], "node_info": 141, "children": [141, 538, 728, 733, 737, 745, 749, 760, 762, 769, 773, 780, 784, 786, 793], "null": [141, 524, 601, 717], "comment_char": 141, "all_char": 141, "safe_char": 141, "decim": [141, 145, 812], "vice": [141, 601], "versa": [141, 601], "escap": 141, "nest": [141, 540, 595, 795, 873], "semi": 141, "colon": 141, "recal": 141, "alon": [141, 594], "imagin": 141, "parenthesi": 141, "insert": [141, 214, 749], "abil": 141, "child": [141, 203, 240, 309, 359, 412, 469, 537, 728, 749, 780, 784, 802, 873], "bifurc": [141, 538, 765], "alreadi": [141, 146, 148, 149, 160, 161, 162, 452, 541, 595], "who": [141, 721], "sibl": [141, 240, 309, 359, 412, 469], "multifurc": [141, 873], "notat": [141, 145, 342], "recurs": [141, 746, 804, 805], "infinitum": 141, "clariti": 141, "estrang": 141, "omit": [141, 540, 766, 800, 802, 807, 869], "still": [141, 142, 190, 202, 524, 532, 595, 597], "happen": [141, 262, 328, 379, 434, 478, 807, 875], "expon": 141, "due": [141, 217, 532, 594, 597, 707, 720], "disallow": [141, 146, 595], "stricter": [141, 811], "obviou": 141, "yet": [141, 147, 148], "underscor": [141, 143], "liter": 141, "regular": [141, 248, 275, 317, 340, 367, 392, 420, 448, 472, 871], "quot": 141, "surround": 141, "a_1": 141, "_1": 141, "commonli": [141, 145, 490, 597, 714, 873], "unpair": 141, "worri": 141, "properli": [141, 190], "un": 141, "permit": [141, 161], "isomorph": [141, 527, 528, 529, 530], "convert_underscor": 141, "unescap": 141, "extern": 141, "ascii_art": [141, 749, 766, 767, 808, 873], "complex": [141, 875], "b_b": 141, "d_d": 141, "becam": 141, "preserv": [141, 706, 707, 712, 790], "newick_doc": 141, "newicktre": 141, "variou": [142, 540, 693, 717, 872, 874], "rda": [142, 693, 706, 707], "cca": [142, 692, 693, 706, 714], "ordinationresult": [142, 597, 706, 707, 712, 713, 714, 812], "six": [142, 278, 280, 291, 450], "eigval": [142, 693], "biplot": [142, 706, 714], "constraint": [142, 693, 707, 714], "07": 142, "08": [142, 145, 717, 720], "46": [142, 596, 721], "species0": 142, "species1": 142, "species2": 142, "01": [142, 717], "09": 142, "species3": 142, "03": [142, 597], "species4": 142, "species5": 142, "species6": 142, "species7": 142, "species8": 142, "70": 142, "69": 142, "site0": 142, "site1": [142, 692], "site2": [142, 692], "site3": [142, 692], "site4": [142, 692], "97": 142, "06": 142, "61": [142, 597, 721], "site5": [142, 692], "04": [142, 717], "site6": [142, 692], "site7": [142, 692], "52": 142, "site8": [142, 692], "47": [142, 717], "site9": [142, 692], "74": 142, "32": [142, 596], "78": [142, 803], "55": [142, 243, 312, 362, 415, 597, 602, 717, 808], "02": [142, 147, 524], "declar": [142, 145], "or_f": 142, "t4": 142, "t9": 142, "t2": [142, 144], "ord_r": 142, "joe": 143, "raxml": 143, "gairaagccttggc": 143, "sapiensaccggttggc": 143, "relax": 143, "interleav": [143, 146], "1x1": 143, "reach": 143, "11th": 143, "reserv": [143, 145], "nucleic": [143, 147, 222, 292, 342, 394, 452], "older": 143, "chunk": 143, "2a": 143, "agagttgaag": 143, "gtatct": 143, "surpass": 143, "recent": [143, 290, 452, 595], "_except": 143, "phylipformaterror": 143, "shorter": 143, "post": [143, 717, 721], "phylogeni": [143, 600, 601], "phylo": 143, "obsolet": 143, "phylip_multiple_alignment_format": 143, "machin": 144, "lane": 144, "tile": 144, "casava": 144, "ommit": 144, "clear": 144, "exclud": [144, 537, 580, 587, 793], "acgtac": 144, "rubbbbrbcefgh": 144, "cgggcattgca": 144, "cgggcasdgca": 144, "acgta": 144, "aataaac": 144, "getaaafhwqaaf": 144, "catttagga": 144, "tgca": 144, "tjflkafnkkghvm": 144, "t3": 144, "t34": 144, "tacg": 144, "trubbbbrbcefgh": 144, "tcgggcattgca": 144, "tcgggcasdgca": 144, "t35": 144, "tacgta": 144, "tgetaaafhwqaaf": 144, "tcatttagga": 144, "ttjflkafnkkghvm": 144, "illumina_1": 144, "lane_numb": 144, "machine_nam": 144, "read_numb": 144, "run_numb": 144, "tile_numb": 144, "tac": 144, "aata": 144, "aac": 144, "biowulf": 144, "app": 144, "casava_ug_15011196b": 144, "pdf": 144, "port": 145, "qiime2": 145, "sample_metadata": 145, "2024": 145, "tutori": [145, 148], "q2": 145, "categor": [145, 593, 596, 692, 703], "id1": 145, "id2": 145, "bar": [145, 833, 875], "id3": 145, "skbio": [145, 868], "samplemetadata": 145, "matter": [145, 194, 215, 494, 545, 569], "edit": [145, 595, 713], "export": 145, "straightforward": [145, 871], "doubt": 145, "microsoft": 145, "googl": 145, "sheet": 145, "adher": 145, "understand": [145, 524], "meta": [145, 719, 720], "keemei": 145, "ons": 145, "anytim": 145, "cumbersom": 145, "cell": [145, 720], "pound": 145, "sign": [145, 524, 812], "inlin": 145, "sole": 145, "mix": 145, "insensit": [145, 502], "sampleid": 145, "fetureid": 145, "mostli": [145, 146], "backward": 145, "compat": [145, 147, 280], "biom": 145, "qiita": 145, "otuid": 145, "sample_nam": 145, "notstart": 145, "At": [145, 148], "goal": [145, 869], "plugin": 145, "anyon": 145, "prepar": 145, "help": [145, 147], "announc": 145, "forum": 145, "problemat": [145, 799], "tend": 145, "command": [145, 147, 290], "alphanumer": 145, "period": 145, "dash": 145, "rememb": [145, 193], "collaps": [145, 749], "plan": 145, "problem": [145, 524, 712], "cual": 145, "assist": [145, 875], "paper": 145, "na": 145, "recogn": 145, "direct": [145, 147, 707, 728], "transpar": [145, 190], "q2cli": 145, "sk": 145, "wish": [145, 873], "123": [145, 691], "0123": 145, "000123": 145, "1e9": 145, "23e": 145, "2e": 145, "5e": 145, "digit": 145, "stai": 145, "exceed": 145, "unsupport": [145, 342], "undefin": [145, 719, 720, 753], "infin": 145, "upsk": 146, "se": 146, "infern": 146, "ss": 146, "pmid": [146, 595, 808], "9223489": 146, "rm": [146, 603, 669], "role": [146, 490, 720], "pseudoknot": 146, "turnip": 146, "yellow": 146, "mosaic": 146, "viru": 146, "synthesi": 146, "viral": 146, "polymeras": 146, "deiman": 146, "ba": 146, "kortlev": 146, "pleij": 146, "cw": 146, "virol": 146, "5990": 146, "5996": 146, "af035635": 146, "619": 146, "641": 146, "ugaguucucgaucucuaaaaucg": 146, "m24804": 146, "104": 146, "ugaguucucuaucucuaaaaucg": 146, "j04373": 146, "6212": 146, "6234": 146, "uaaguucucgaucuuuaaaaucg": 146, "m24803": 146, "uaaguucucgaucucuaaaaucg": 146, "ss_con": 146, "aaa": [146, 262, 328, 379, 434, 478], "ggt": [146, 272, 338, 389, 444, 487], "accgttcg": 146, "pfam": 146, "rfam": 146, "whole": [146, 710, 718], "come": [146, 601, 795], "cb": [146, 719], "domain": [146, 342, 766, 800], "nh": 146, "tn": 146, "unlik": [146, 691], "nhx": 146, "rc": [146, 239, 411, 510, 557, 583, 703], "kestrel": 146, "gorlick": 146, "medlin": 146, "o83071": 146, "259": 146, "312": 146, "083071": 146, "o31698": 146, "ccchhhhhhhhhhhhhhh": 146, "eeeeeeee": 146, "eeeeeeeehhh": 146, "ccccchhhhhhhhhhhhh": 146, "eeeeeeeeeeh": 146, "final": [146, 601, 875], "cc": [146, 272, 280, 338, 389, 444, 487], "intracellular": 146, "192": 146, "88": [146, 597, 720], "139": 146, "bacillu": 146, "subtili": 146, "mtcraqliavprassla": 146, "aiacaqkm": 146, "rvsrv": 146, "sa": 146, "999887756453524252": 146, "55152525": 146, "36463": 146, "mqhvsapvfvfectrlai": 146, "vqhklrah": 146, "srava": 146, "mieadkvahvqvgnnleh": 146, "allvltkt": 146, "gytai": 146, "evmltdiprlhindpimk": 146, "gfgmvinn": 146, "gfv": 146, "o31699": 146, "AS": 146, "________________": 146, "____________________": 146, "IN": 146, "____________1______________2_________": 146, "eeeee": 146, "stockholm_format": 146, "sonnhamm": 146, "sbc": 146, "su": 146, "dump": [147, 873, 875], "classif": [147, 703], "pipe": 147, "host": [147, 601], "portal": 147, "daili": 147, "archiv": [147, 833], "month": 147, "pattern": [147, 248, 275, 317, 340, 367, 392, 420, 448, 472, 871, 875], "taxid": 147, "citat": 147, "hierarch": [147, 537], "tax_id": [147, 766], "superkingdom": 147, "prefix": 147, "inherit": [147, 292, 452], "div": 147, "flag": [147, 873], "mitochondri": [147, 277, 289, 449], "mgc": 147, "hidden": 147, "suppress": [147, 593, 597, 598], "lineag": [147, 720, 767, 800], "free": [147, 834, 875], "2018": 147, "new_taxdump": 147, "classic": 147, "plu": [147, 222, 342, 394], "extra": [147, 148, 593, 594, 596, 597, 658], "aforement": 147, "plastid": 147, "pgc": 147, "hydrogenosom": 147, "hgc": 147, "name_txt": 147, "synonym": 147, "cde": 147, "bct": 147, "vrt": 147, "mam": 147, "pri": 147, "abbrevi": [147, 693], "scheme": [147, 190, 510, 557, 583], "nodes_new": 147, "nodes_slim": 147, "parent_tax_id": [147, 766], "leftmost": 147, "till": 147, "crop": 147, "tno": 147, "t131567": 147, "tsuperkingdom": 147, "t335928": 147, "tgenu": 147, "131567": 147, "335928": 147, "genu": 147, "federhen": 147, "research": [147, 595, 712], "d1": [147, 871], "d136": 147, "d143": 147, "schoch": 147, "ciufo": 147, "domrachev": 147, "hotton": 147, "kannan": 147, "khovanskaya": 147, "karsch": 147, "mizrachi": 147, "2020": 147, "comprehens": 147, "curat": 147, "kan": 147, "2022": 147, "entrez": 147, "unix": 147, "taxdump_readm": 147, "ncbiinsight": 147, "ioregistri": [148, 160, 162], "io_registri": 148, "focu": 148, "submodul": 148, "myformat": [148, 160, 161, 162], "create_format": [148, 160, 161, 162], "factori": [148, 160, 161, 162, 174, 185], "ideal": 148, "evaul": 148, "binari": [148, 150, 160, 161, 162, 190, 537, 538, 601, 706, 714, 801, 833], "readi": [148, 868], "decor": [148, 160, 161, 162, 203, 292, 750, 807, 814, 834, 846, 847, 857, 868], "onto": [148, 180, 713, 807], "_myformat_sniff": 148, "membership": 148, "futher": 148, "someskbioclass": [148, 869], "_myformat_to_some_skbio_class": 148, "kwarg1": 148, "filesentinel": [148, 160, 162], "auxilari": 148, "_some_skbio_class_to_myformat": 148, "obj": [148, 162, 183, 188, 825, 875], "whatev": 148, "receiv": [148, 150, 161, 249, 318, 368, 421, 473, 807], "further": [148, 720, 873], "fileformaterror": 148, "satisfi": [148, 218, 719, 857], "__init__": [148, 160, 162], "execut": [148, 614, 658, 835, 857, 875], "import_modul": 148, "boilerpl": 148, "busi": 148, "logic": [148, 834], "arg": [148, 174, 185, 277, 278, 342, 449, 450], "compress": [148, 190], "compresslevel": [148, 190], "auth": 148, "password": 148, "buffer": [148, 190, 691], "buffer_s": 148, "closefd": 148, "exclus": [148, 193, 203, 214, 241, 260, 310, 327, 360, 378, 413, 432, 470, 477, 524], "handler": [150, 181, 183, 186, 188, 190], "bufferedread": [150, 160, 161, 190], "bufferedwrit": [150, 162, 190], "textiobas": [150, 160, 161, 162, 190], "unabl": 150, "is_binary_format": 150, "monkey_patched_read": 150, "monkei": [150, 180], "patch": [150, 180], "monkey_patched_writ": 150, "sniffer_funct": 150, "cl": [160, 162, 175, 177, 178, 179, 292, 818], "monkey_patch": [160, 162], "transform": [160, 162, 262, 328, 379, 434, 478, 521, 522, 523, 527, 528, 529, 530, 533, 538, 706, 712, 714], "attach": [160, 162, 748], "overriden": [160, 161, 162], "duplicateregistrationerror": [160, 161, 162], "add_format": [160, 162], "myobject": [160, 162], "myformat_read": [160, 162], "readlin": [160, 190], "myformat2": [160, 161, 162], "thrown": [161, 768], "ask": 161, "myformat_sniff": 161, "default_write_format": 162, "format_object": 173, "regsistri": [174, 185], "format_nam": [175, 176, 177], "useabl": 180, "unrecognizedformaterror": [181, 182, 183, 186, 187, 188], "formatidentificationwarn": [181, 186], "agre": [181, 186], "member": [181, 186, 834, 857, 875], "argumentoverridewarn": [181, 186], "claim": [182, 187], "registr": 184, "auto": [190, 274, 339, 391, 447, 488], "bytesio": [190, 191, 833], "textiowrapp": 190, "bufferedrandom": 190, "tempfil": 190, "temporaryfil": 190, "namedtemporaryfil": 190, "writabl": 190, "unwrit": 190, "unread": 190, "byte": [190, 272, 338, 389, 444, 487], "gzip": 190, "bz2": 190, "decompress": 190, "legal": 190, "inclus": [190, 193, 203, 214, 241, 260, 310, 327, 360, 378, 413, 432, 470, 477, 594], "manag": [190, 191, 192], "closeabl": 190, "garbag": 190, "reflect": [190, 601, 784, 789], "flush": 190, "clean": [190, 745, 784], "bzh91ai": 191, "sy": 191, "x03": 191, "x89": 191, "x0c": 191, "xa6": 191, "x00": 191, "x01": 191, "xc1": 191, "x108": 191, "x9ah3m": 191, "x1c": 191, "xb7": 191, "x8b": 191, "xb9": 191, "x9c": 191, "xc4": 191, "x86": 191, "nb": 191, "nc": 191, "plural": 192, "transcript": 193, "operon": 193, "accommod": 193, "gene_nam": 193, "product": [193, 531, 595, 868], "easier": [193, 490], "ft_current": 193, "hypothet": 193, "sai": [193, 203, 721], "gena": 193, "nt": 193, "shown": [193, 524, 706], "diagram": 193, "tggattctgc": 193, "0123456789": 193, "drop": [193, 203, 229, 299, 349, 401, 459, 598, 692, 707, 787, 807], "setter": 202, "copy_from": 203, "storag": 203, "modif": [203, 601], "cover": [203, 502, 873], "coupl": 203, "unbound": [203, 217], "speed": [203, 712], "build": [203, 537], "defer": 203, "until": [203, 537, 791], "fetch": [203, 873], "_interval_tre": 203, "_rebuild_tre": 203, "stale": 203, "delet": [203, 771, 787, 815], "_is_stale_tre": 203, "sagb": [203, 215], "sagc": 203, "saga": [203, 215, 452], "intvl": 203, "num_interval_featur": 203, "interablemetadata": 215, "shift": 215, "im1": 215, "im2": 215, "negat": 216, "middl": 217, "live": 217, "reca": 218, "900": 218, "1000": [218, 691], "criteria": [218, 719, 803], "front": [220, 537], "uppercas": [222, 342, 394, 452], "turn": [222, 342, 394, 714, 811, 875], "behav": [222, 342, 394, 595], "compliant": [222, 342, 394], "canon": [222, 342, 394, 490, 692, 707, 714, 868], "nucleobas": [222, 394], "adenin": [222, 394], "cytosin": [222, 394], "guanin": [222, 394], "purin": [222, 247, 316, 366, 419, 871], "pyrimidin": [222, 247, 419], "weak": 222, "keto": 222, "inosin": 222, "break": [222, 342, 394], "nomenclatur": [222, 292, 342, 394, 452], "incomplet": [222, 292, 342, 394, 452], "3021": [222, 292, 342, 394, 452], "3030": [222, 292, 342, 394, 452], "cornish": [222, 292, 342, 394, 452], "bowden": [222, 292, 342, 394, 452], "accgaat": 222, "86": [222, 394], "complement_map": [222, 239, 394, 411], "complement": [222, 261, 273, 290, 394, 433, 445, 871], "definite_char": [222, 292, 342, 394], "degenerate_char": [222, 292, 342, 394], "degenerate_map": [222, 246, 292, 315, 342, 365, 394, 418, 871], "gap_char": [222, 243, 292, 312, 342, 362, 394, 415], "nondegenerate_char": [222, 292, 342, 394], "observed_char": [222, 249, 292, 318, 342, 368, 394, 421, 452, 473], "wildcard_char": [222, 274, 292, 339, 342, 391, 394, 447, 488], "wildcard": [222, 274, 292, 339, 342, 391, 394, 447, 488], "truth": [223, 293, 343, 395, 453], "truthi": [223, 293, 343, 395, 453], "put": [224, 294, 344, 396, 454], "ggucgugaagga": [224, 229, 294, 299, 344, 349, 396, 401, 452, 454, 459], "ggu": [224, 294, 344, 396, 454], "ccc": [224, 294, 344, 396, 454], "aagga": [229, 299, 349, 401, 459], "cgagc": [229, 299, 349, 401, 459], "ggucg": [229, 241, 299, 310, 349, 360, 401, 413, 459, 470], "guc": [229, 299, 349, 401, 459], "gguc": [232, 234, 237, 245, 266, 267, 268, 269, 302, 304, 307, 314, 332, 333, 334, 335, 352, 354, 357, 364, 383, 384, 385, 386, 404, 406, 409, 417, 438, 439, 440, 441, 462, 464, 467, 471, 482, 483, 484, 485], "ggucguaaagga": [238, 308, 358, 410, 468], "hello": [238, 308, 358, 410, 468], "nucleotidemixin": [239, 273, 411, 445], "reverse_compl": [239, 261, 411, 433, 871], "ttcatt": [239, 261, 273, 411, 433, 445], "aagtaa": [239, 411], "aatgaa": [239, 261, 273, 411, 433, 445], "intersect": [240, 309, 359, 412, 469, 729, 730, 754, 757], "ggaa": [240, 309, 359, 412, 469], "acgtggaa": [240, 309, 359, 412, 469], "coercion": [240, 309, 359, 412, 469], "gg": [241, 247, 310, 316, 360, 366, 413, 419, 470], "has_definit": [242, 244, 254, 258, 270, 311, 313, 321, 325, 336, 361, 363, 371, 375, 387, 414, 416, 426, 430, 442], "acwgn": [242, 244, 270, 311, 313, 336, 361, 363, 387, 414, 416, 442], "ggtc": [243, 312, 362, 415], "att": [243, 312, 362, 415], "ggtccattc": [243, 312, 362, 415], "has_degener": [244, 253, 258, 313, 320, 325, 363, 370, 375, 416, 425, 430], "ham": [245, 314, 364, 417, 471, 540, 871], "fraction_diff": [245, 314, 364, 417, 471], "fraction_sam": [245, 314, 364, 417, 471], "aguc": [245, 266, 268, 314, 332, 334, 364, 383, 385, 417, 438, 440, 471, 482, 484], "custom_metr": [245, 314, 364, 417, 471], "trg": [246, 275, 315, 340, 365, 392, 418, 448], "seq_gener": [246, 315, 365, 418], "tgg": [246, 275, 315, 340, 365, 392, 418, 448], "motif_typ": [247, 316, 366, 419], "min_length": [247, 262, 316, 328, 366, 379, 419, 434, 478, 871], "motif": [247, 316, 366, 419, 871], "acggggaggcggag": [247, 316, 366, 419], "motif_slic": [247, 316, 366, 419], "ggggagg": [247, 316, 366, 419], "ggag": [247, 316, 366, 419], "disrupt": [247, 316, 366, 419, 871], "regex": [248, 275, 317, 340, 367, 392, 420, 448, 472], "compil": [248, 275, 317, 340, 367, 392, 420, 448, 472, 722], "pre": [248, 275, 317, 340, 367, 392, 420, 448, 472, 490, 502, 507, 721], "aatataccggttataa": [248, 317, 367, 420, 472], "tata": [248, 317, 367, 420, 472], "tataa": [248, 317, 367, 420, 472], "char": [249, 275, 318, 340, 368, 392, 421, 448, 473], "kmer_frequ": [249, 318, 368, 421, 473], "iter_km": [249, 318, 368, 421, 473], "agaagacc": [249, 318, 368, 421, 473], "freq": [249, 264, 318, 330, 368, 381, 421, 436, 473, 480], "has_gap": [250, 319, 369, 422], "gc_frequenc": [251, 423], "degap": [251, 252, 423, 424, 871], "acgtacgt": [251, 423], "acttagtt": [251, 423], "asst": [251, 252, 423, 424], "rykmbdhvn": [251, 252, 423, 424], "stand": [252, 424, 595], "ie": [252, 424], "gc_content": [252, 424], "nwnnnnnn": [253, 258, 320, 325, 370, 375, 425, 430], "ancacwwgacgtt": [253, 254, 258, 320, 321, 325, 370, 371, 375, 425, 426, 430], "acac": [254, 263, 321, 329, 371, 380, 426, 435, 479], "gacgtt": [254, 255, 321, 322, 371, 372, 426, 427], "acacgacgtt": [255, 260, 263, 322, 327, 329, 372, 378, 380, 427, 432, 435, 477, 479], "cac": [255, 263, 322, 329, 372, 380, 427, 435, 479], "aatgtt": [261, 433], "invert": [262, 328, 379, 434, 478], "skip": [262, 328, 379, 434, 478, 593, 595, 596, 597, 601], "adjac": [262, 328, 379, 434, 478], "ungap": [262, 328, 379, 434, 478], "cccc": [262, 328, 379, 434, 478], "no_gap": [262, 328, 379, 434, 478], "ungapped_subsequ": [262, 328, 379, 434, 478], "find_motif": [262, 328, 379, 434, 478, 871], "find_with_regex": [262, 328, 379, 434, 478, 871], "acdfnasanftacgnpnrtesl": [262, 328, 379, 434, 478], "subseq": [262, 328, 379, 434, 452, 478], "glycosyl": [262, 328, 366, 379, 434, 478, 871], "nasanfta": [262, 328, 379, 434, 478], "nrte": [262, 328, 379, 434, 478], "kmer": [263, 264, 329, 330, 380, 381, 435, 436, 479, 480, 520], "gacg": [263, 329, 380, 435, 479], "aca": [263, 264, 329, 330, 380, 381, 435, 436, 479, 480], "cga": [263, 329, 380, 435, 479], "gac": [263, 329, 380, 435, 479], "cgt": [263, 329, 380, 435, 479], "gtt": [263, 329, 380, 435, 479], "acacatttatta": [264, 330, 381, 436, 480], "cat": [264, 330, 381, 436, 480, 719, 720], "tta": [264, 330, 381, 436, 480], "intron": [265, 331, 382, 394, 437, 481], "mismatch_frequ": [266, 332, 383, 438, 482, 871], "gauu": [267, 269, 333, 335, 384, 386, 439, 441, 483, 485], "match_frequ": [268, 334, 385, 440, 484, 871], "chosen": [272, 338, 389, 444, 487, 532, 594, 703, 714, 722], "ggtaccaacg": [272, 338, 389, 444, 487], "is_reverse_compl": [273, 445], "mask_gap": [274, 339, 391, 447, 488], "return_cod": [274, 339, 391, 447, 488], "gap_charact": [274, 339, 391, 447, 488], "subsitut": [274, 339, 391, 447, 488], "absent": [274, 339, 391, 447, 488, 712], "meepqsdpsv": [274, 339, 391, 447, 488], "idx": [274, 339, 391, 447, 488], "uniq": [274, 339, 391, 447, 488], "dempqsv": [274, 339, 391, 447, 488], "ctcaaaagtc": [274, 339, 391, 447, 488], "tcga": [274, 339, 391, 447, 488], "sm": [274, 339, 391, 447, 488], "by_nam": [274, 339, 391, 447, 488, 490, 507], "nuc": [274, 339, 391, 447, 488, 490, 502], "gag": [274, 339, 391, 447, 488], "ctc": [274, 339, 391, 447, 488], "acgtn": [274, 339, 391, 447, 488], "gagrctc": [274, 339, 391, 447, 488], "within_captur": [275, 340, 392, 448], "account": [275, 340, 392, 448, 636, 706, 714, 721, 873], "captur": [275, 340, 392, 448], "tcg": [275, 340, 392, 448], "translate_six_fram": [276, 277, 290, 446, 449], "taacgtta": [276, 446], "uaacguua": [276, 446], "reverse_transcrib": 277, "atgccactttaa": [277, 278], "mpl": [277, 278, 280, 290, 291, 449, 450], "yeast": [277, 449], "mpt": [277, 449], "independ": [278, 291, 450, 601, 613, 614, 635, 646, 679, 690, 801], "reading_fram": [278, 280, 290, 291, 450], "rf": [278, 291, 450], "geneticcod": [278, 449, 450, 871], "chf": [278, 291, 450], "atl": [278, 291, 450], "lkwh": [278, 291, 450], "sg": [278, 291, 450], "kva": [278, 291, 450], "amino_acid": [280, 281, 287], "from_ncbi": [280, 281, 290, 291, 449, 450], "uuuuuuuuuuuuuuuuccccccccccccccccaaaaaaaaaaaaaaaagggggggggggggggg": 280, "uuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggg": 280, "ucagucagucagucagucagucagucagucagucagucagucagucagucagucagucagucag": 280, "wprintgc": [280, 288, 289], "ffllssssyi": 280, "wllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 280, "base1": 280, "base2": 280, "base3": 280, "candid": [280, 721], "divis": [280, 537, 715], "sr1": 280, "gracilibacteria": 280, "ccgwllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 280, "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm": 280, "augccacuuuaa": [280, 291, 449, 450], "named_gc": 281, "table_id": 289, "thraustochytrium": 289, "tmgc": 289, "prior": [290, 595, 598, 766, 835, 845, 875], "methionin": [290, 342], "fmet": 290, "aguauucugccacuguaagaa": 290, "sgc": [290, 291], "silpl": 290, "cug": 290, "trim": 290, "fact": 290, "conform": 292, "abstract": 292, "grammar": [292, 452], "static": 292, "classproperti": 292, "customsequ": 292, "ababacac": 292, "xxxxxx": 292, "ala": 342, "cy": 342, "cystein": 342, "asp": 342, "aspart": 342, "glu": 342, "glutam": 342, "phe": 342, "phenylalanin": 342, "gly": 342, "hi": 342, "histidin": 342, "il": 342, "isoleucin": 342, "ly": 342, "lysin": 342, "leu": 342, "leucin": 342, "asn": 342, "asparagin": 342, "pro": 342, "prolin": 342, "gln": 342, "glutamin": 342, "arginin": 342, "ser": 342, "serin": 342, "thr": 342, "threonin": 342, "val": 342, "valin": 342, "trp": 342, "tyr": 342, "tyrosin": 342, "asx": 342, "glx": 342, "xle": 342, "xaa": 342, "ter": [342, 707], "sec": 342, "selenocystein": 342, "pyl": 342, "pyrrolysin": 342, "pam": [342, 490, 502], "paw": [342, 377, 390], "stop_char": 342, "has_stop": 390, "accgaau": 394, "genetic_cod": [449, 450], "immut": [452, 871], "metdata": 452, "ncrna": 452, "ggucgugaag": 452, "ga": [452, 871], "alic": 452, "desc": 452, "retriev": [452, 565], "attributeerror": [452, 814], "destin": 452, "Be": 452, "illustr": [452, 593, 597], "hasn": [452, 722], "bob": 452, "propag": 452, "carol": 452, "constitut": [490, 508], "chemic": [490, 721], "mutat": [490, 502, 728], "likelihood": 490, "homolog": 490, "chanc": [490, 601], "complic": [490, 869], "asymmetr": [490, 494, 545, 569], "former": 490, "mat": [490, 502, 505, 508, 522, 523, 525, 526, 527, 528, 529, 530, 532, 533, 797], "blosum62": [490, 502], "transpos": [490, 541, 565], "is_ascii": 490, "png": [490, 541, 565, 693], "figur": [490, 510, 541, 557, 565, 583, 703], "svg": [490, 541, 565, 693], "lookup_id": [491, 509, 542, 556, 566, 581], "extract": [494, 540, 541, 545, 569, 593, 597, 707, 748, 871], "missingiderror": [494, 501, 504, 509, 516, 545, 552, 554, 556, 562, 569, 576, 579, 581, 589], "quick": [494, 545, 569, 577, 703, 706], "from_": [501, 552, 576], "to_": [501, 552, 576], "allow_overlap": [501, 552, 576], "get_nam": 502, "dnaful": 502, "pam30": 502, "pam70": 502, "pam250": 502, "blosum45": 502, "blosum50": 502, "blosum80": 502, "blosum90": 502, "dayhoff": 502, "schwartz": 502, "orcutt": 502, "1978": 502, "atla": 502, "345": 502, "352": 502, "proceed": 502, "academi": 502, "inconsist": 505, "heatmap": [510, 557, 583], "colormap": [510, 557, 583, 703], "colorbar": [510, 557, 583, 703], "red": [510, 557, 583], "binary_dm": [511, 517, 558, 563, 584, 590], "redund": [512, 541, 559, 565, 585, 692, 714], "gather": [516, 562, 589, 873], "from_iter": 518, "agggta": 519, "cgttta": 519, "atcggcgat": 520, "gcagatgtg": 520, "9230769230": 520, "omic": 521, "inher": [521, 601], "absolut": [521, 595, 832], "x_": [521, 522, 537, 717, 721], "leq": 521, "compon": [521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 669, 693, 706, 712, 875], "aitchison": [521, 522, 523, 527, 528, 529, 530, 537], "geometri": [521, 523, 527, 528, 530], "euclidean": [521, 540, 594, 706, 712, 714], "perturb": [521, 535], "power": [521, 869], "style": [521, 804, 805], "simul": [521, 717, 720, 721], "strategi": [521, 532, 808], "centr": [521, 527, 528, 710], "clr": [521, 528, 538], "isometr": [521, 522, 523, 529, 530], "ilr": [521, 530, 538], "hypothesi": [521, 524, 595, 598, 601, 717], "regress": [521, 595, 714, 721], "nonzero": [521, 526, 532, 534, 535, 536], "pseudocount": [521, 524], "distort": 521, "pawlowski": [521, 533, 539], "glahn": [521, 533, 539], "egozcu": [521, 529, 530, 533, 537, 539], "tolosana": [521, 537], "delgado": [521, 537], "wilei": 521, "chichest": 521, "logratio": 521, "geologi": 521, "martin": [521, 532], "fernandez": [521, 532], "imput": [521, 532], "antibiot": [521, 719], "kill": 521, "harm": 521, "third": [521, 540, 770, 875], "denominator_idx": [522, 523], "simplex": [522, 529, 530, 537], "denominator_col": 522, "denomin": [522, 523, 537], "math": [522, 529], "amen": 522, "multivari": [522, 593, 594, 596, 597, 706, 707], "rightarrow": [522, 523, 527, 528, 529, 530], "mathbb": [522, 523, 524, 527, 528, 529, 530], "x_1": [522, 523, 527, 528, 534, 535, 536], "x_d": [522, 523, 527, 528, 534, 535, 536], "ldot": [522, 523, 527, 528, 529, 530, 534, 535, 536], "09861229": 522, "38629436": 522, "69314718": 522, "alr": 523, "exp": [523, 528, 533, 539], "y_1": [523, 534, 535], "y_2": 523, "y_": [523, 721], "closur": [523, 534, 535, 536], "x_i": [523, 527, 531, 534, 535, 536, 537], "tau": 524, "multiple_comparisons_correct": 524, "holm": 524, "bonferroni": 524, "significance_test": 524, "percentil": 524, "differenti": 524, "treatment": [524, 602, 720], "h_": 524, "0i": 524, "u_i": 524, "cutoff": [524, 807], "procedur": [524, 597, 869], "boniferroni": 524, "f_onewai": 524, "25th": 524, "median": [524, 597], "75th": 524, "reject": [524, 717], "multi": 524, "multiplicative_replac": 524, "ttest_ind": 524, "wilcoxon": 524, "kruskal": [524, 720, 721], "top": [524, 766], "mann": 524, "whitnei": 524, "mannwhitneyu": 524, "ttest_rel": 524, "anova": [524, 596, 613, 614, 635, 646, 679, 690], "walli": [524, 720, 721], "friedman": 524, "friedmanchisquar": 524, "unsolv": 524, "promis": 524, "001": [524, 717], "address": [524, 869], "1979": 524, "mandal": 524, "et": [524, 601], "al": [524, 601], "novel": 524, "health": [524, 719, 720], "diseas": [524, 595], "s3": [524, 593, 597], "s4": [524, 593, 597], "s5": [524, 593, 597], "s6": [524, 597], "b1": 524, "b2": 524, "b3": 524, "b4": 524, "b5": 524, "b6": 524, "b7": 524, "placebo": 524, "ancom_df": 524, "percentile_df": 524, "scenario": 524, "summar": 524, "conclud": 524, "tell": 524, "geometr": [525, 527, 537, 597], "averag": [525, 602, 603, 711, 715, 781, 807], "17445763": 525, "30216948": 525, "34891526": 525, "32495488": 525, "18761279": 525, "16247744": 525, "isometri": [527, 528, 529, 530], "limits_": [527, 528, 530, 531, 537], "foral": [527, 528], "g_m": 527, "prod": [527, 537], "79451346": 527, "30409883": 527, "5917809": 527, "10136628": 527, "21383822": 528, "26118259": 528, "28865141": 528, "23632778": 528, "basi": [529, 530, 537, 538], "langl": [529, 531], "e_1": [529, 530], "rangle_a": [529, 531], "e_": [529, 530], "orthonorm": [529, 530, 537, 538], "orthornorm": 529, "gram": [529, 530], "schmidt": [529, 530], "orthogon": [529, 530, 537], "spars": [529, 538, 706, 714], "7768362": 529, "68339802": 529, "11704769": 529, "bigoplu": 530, "odot": [530, 536], "e_i": 530, "34180297": 530, "29672718": 530, "22054469": 530, "14092516": 530, "aitchson": 531, "x_j": 531, "y_i": 531, "y_j": 531, "2107852473": 531, "1875": [532, 534], "375": 532, "0625": [532, 534], "4375": 532, "ddof": [533, 539, 711, 715], "freedom": [533, 539, 711, 718], "cost": [533, 539], "lovel": [533, 539], "jj": [533, 539], "marguerat": [533, 539], "b\u00e4hler": [533, 539], "proportion": [533, 539], "e1004075": [533, 539], "pcbi": [533, 539], "1004075": [533, 539], "erb": [533, 539], "notredam": [533, 539], "biosci": [533, 539], "s12064": [533, 539], "015": [533, 539], "0220": [533, 539], "dism": 533, "redundant_form": 533, "oplu": 534, "y_d": [534, 535], "ominu": 535, "14285714": 535, "42857143": 535, "28571429": 535, "23059566": 536, "25737316": 536, "26488486": 536, "24714631": 536, "sbp": 537, "partit": [537, 538], "gsi": 537, "buildilrbas": 537, "ith": 537, "r_i": 537, "s_i": 537, "\u00e9": 537, "rozan": 537, "hernand": 537, "lapoint": 537, "h\u00e9bert": 537, "gentil": 537, "naess": 537, "marchand": 537, "lafond": 537, "matto": 537, "barlow": 537, "natal": 537, "ionom": 537, "revisit": 537, "nutrient": 537, "3389": 537, "fpl": 537, "00039": 537, "van": 537, "den": 537, "boogaart": 537, "gerald": 537, "raimon": 537, "bren": 537, "matevz": 537, "cran": [537, 593, 594, 595, 596, 597], "54772256": 537, "36514837": 537, "70710678": [537, 538], "81649658": [537, 538], "40824829": [537, 538], "coo_matrix": 538, "ilr_inv": 538, "toarrai": 538, "subpackag": [540, 868], "deseri": [540, 693], "gender": [540, 719, 720], "gain": [540, 712], "symmetri": [540, 541, 565, 580, 582], "ta": [540, 871], "tb": 540, "tc": 540, "dm_fh": 540, "3x3": [540, 595, 598, 599], "out_fh": 540, "dm_from_np": 540, "monoton": [540, 541, 598, 599], "increas": [540, 541, 598, 599, 601, 691, 717, 720], "divers": [540, 722, 868], "asarrai": 541, "squareform": [541, 587], "col": 541, "routin": 565, "condens": [565, 577, 582, 587], "condensed_form": [565, 582, 587], "hold": [565, 613, 635, 646, 679, 690, 691, 712, 719, 756, 857], "indiscern": 565, "triangl": [565, 580, 587, 595, 712], "planetmath": 565, "metricspac": 565, "sure": [580, 721, 875], "to_data_fram": 587, "missing_id": 592, "distance_matrix": [593, 594, 596, 597, 709, 712], "statis": [593, 596], "unpermut": [593, 595, 596], "permanova": [593, 597], "vegan": [593, 594, 595, 596, 597, 706, 707, 714], "clark": [593, 594], "kr": 593, "australian": 593, "117": 593, "143": 593, "4x4": [593, 594, 797], "group1": 593, "group2": 593, "seed": [593, 597, 691, 717, 720, 721], "group3": 593, "data_fram": 594, "ph": 594, "rho": 594, "spearmanr": [594, 595], "env": 594, "primer": 594, "deviat": [594, 711, 714, 715, 718], "ainsworth": 594, "marin": 594, "92": 594, "205": 594, "htm": 594, "elev": 594, "400": 594, "530": 594, "450": 594, "810": 594, "var": 594, "771517": 594, "714286": 594, "triangular": 595, "portion": 595, "r_m": 595, "d_x": 595, "d_y": 595, "ij": 595, "extrem": 595, "reorder": [595, 598, 749, 753], "kendalltau": 595, "nonmatch": [595, 598], "corr_coeff": [595, 601], "pearsonr": [595, 601, 717], "pwmantel": 595, "legendr": [595, 692, 706, 707, 709, 710, 712, 713, 714], "3rd": [595, 669, 713, 813, 875], "elsevi": [595, 692, 706, 707, 714], "approach": [595, 720, 729, 730, 754, 757], "cancer": 595, "220": 595, "6018555": 595, "coeff": 595, "7559": 595, "moder": 595, "rerun": 595, "notifi": 595, "redefin": [595, 814], "henc": 595, "notion": 595, "pseudo": [596, 717], "adoni": 596, "anderson": [596, 597], "marti": [596, 597], "austral": 596, "2001": 596, "usag": 596, "eigh": [597, 712], "number_of_dimens": [597, 712], "homogen": [597, 706, 714], "disperison": 597, "analogu": 597, "leven": 597, "dispers": 597, "centroid": 597, "spaitial": 597, "eigendecomposit": [597, 712], "eigenvector": [597, 707, 712], "eigenvalu": [597, 693, 706, 712, 714], "fsvd": [597, 712], "lose": [597, 712], "accuraci": [597, 712], "lost": [597, 712], "keyerror": 597, "permdisp2": 597, "betadisp": 597, "245": 597, "253": 597, "g1": 597, "g2": 597, "calucul": 597, "thought": 597, "yeild": 597, "s7": 597, "conjunct": 597, "collat": 598, "amount": [598, 728, 875], "consumpt": [598, 712], "oppos": [598, 875], "dm1": 598, "dm2": 598, "755929": 598, "142857": 598, "num_object": 599, "random_fn": 599, "drawn": [599, 717, 720, 721], "uniform": 599, "rand": 599, "pertain": 600, "host_dist": 601, "par_dist": 601, "interact": 601, "hommola": 601, "parasit": 601, "cospeci": 601, "expand": [601, 800], "symbiont": 601, "somewhat": [601, 781], "weaker": 601, "incid": 601, "speciat": 601, "recapitul": 601, "co": 601, "cladogenesi": 601, "explanatori": [601, 692, 693, 707, 714], "poorli": [601, 712], "perm_stat": 601, "je": 601, "qiu": 601, "gilk": 601, "1457": 601, "1468": 601, "hdist": 601, "3f": 601, "832": 601, "fairli": 601, "inde": 601, "mainli": 602, "volatil": 602, "averagegradientanova": 602, "coord_data": 602, "354": 602, "2761": 602, "0341": 602, "0633": 602, "1004": 602, "2364": 602, "2186": 602, "0301": 602, "0225": 602, "356": 602, "2208": 602, "0874": 602, "3519": 602, "0031": 602, "607": 602, "1055": 602, "4140": 602, "116": 602, "634": 602, "3716": 602, "1154": 602, "0721": 602, "0898": 602, "coord": [602, 603, 625, 636, 669, 680], "orient": [602, 703, 719, 789, 869], "metadata_map": [602, 603, 625, 636, 669, 680], "65": 602, "prop_expl": [602, 603, 625, 636, 669, 680], "6216": 602, "7715": 602, "1215": 602, "6913": 602, "8304": 602, "trajectori": [602, 603, 613, 614, 624, 625, 635, 636, 646, 647, 657, 658, 668, 669, 679, 680, 690], "av": 602, "trajectory_categori": [602, 603, 625, 636, 669], "sort_categori": [602, 603, 625, 636, 669], "trajectory_result": 602, "get_trajectori": 602, "avg": 602, "0118478282382": 602, "52199973": 602, "29597001": 602, "20309816": 602, "007022633956606": 602, "ax": [603, 625, 636, 669, 692, 703, 706, 707], "norm": [603, 625, 669, 680], "gradientanova": [603, 625, 669, 680], "gradientanovaresult": [613, 635, 646, 679, 690], "groupresult": 614, "out_f": [624, 657, 668], "raw_f": [624, 657, 668], "categoryresult": 647, "2nd": [669, 813], "window_s": 680, "window": 680, "buf_siz": 691, "bin_f": 691, "bin": 691, "unsign": [691, 779], "resid": 691, "prng": 691, "wherea": 691, "decreas": 691, "overhead": 691, "demultiplex": 691, "samplea": 691, "aattgg": 691, "sampleb": 691, "atatatat": 691, "samplec": 691, "atggcc": 691, "atggct": 691, "atggcg": 691, "atggca": 691, "bin_": 691, "fish": 692, "transect": 692, "substrate_cor": 692, "substrate_sand": 692, "substrate_oth": 692, "site10": 692, "specie1": 692, "specie2": 692, "specie3": 692, "specie4": 692, "specie5": 692, "specie6": 692, "specie7": 692, "specie8": 692, "specie9": 692, "substrat": 692, "hot": 692, "perfect": [692, 707], "collinear": [692, 707], "ordination_result": 692, "proportion_explain": [692, 693], "cca1": 692, "466911": 692, "cca2": 692, "238327": 692, "cca3": 692, "100548": 692, "cca4": 692, "104937": 692, "cca5": 692, "044805": 692, "cca6": 692, "029747": 692, "cca7": 692, "012631": 692, "cca8": 692, "001562": 692, "cca9": 692, "000532": 692, "amsterdam": [692, 706, 707, 714], "short_method_nam": [693, 812], "long_method_nam": [693, 812], "biplot_scor": [693, 812], "sample_constraint": 693, "scatterplot": [693, 703], "ipython": 693, "notebook": 693, "constrain": [693, 707], "legend": 703, "evenli": 703, "set1": 703, "grei": 703, "axes3d": 703, "scatter": 703, "situat": [703, 719], "jupyt": 703, "lab": [703, 720], "emperor": 703, "colormaps_refer": 703, "vazquez": 703, "baeza": 703, "pirrung": 703, "gonzalez": 703, "gigasci": 703, "github": 703, "21712454": 703, "5007512": 703, "91769271": 703, "45995501": 703, "80332382": 703, "65463348": 703, "pcoa_result": 703, "chi": [706, 707], "pca": [706, 712, 714], "lot": 706, "steep": 706, "kind": 706, "explan": [706, 707], "ecologist": 706, "456": 706, "far": 706, "exhibit": 706, "multimod": 706, "notimplementederror": [706, 707], "suit": 707, "nich": 707, "unimod": [707, 712], "habitat": 707, "unconstrain": 707, "deem": 707, "ones": [707, 720], "shouldn": 707, "confus": 707, "ccora": 707, "sens": [707, 721, 800, 808], "cajo": 707, "braak": 707, "1167": 707, "1179": 707, "piet": 707, "verdonschot": 707, "aquat": 707, "1995": 707, "289": 707, "columnwis": 708, "elementwis": 709, "eq": [709, 710], "e_matrix": 710, "with_mean": [711, 715], "with_std": [711, 715], "flatten": 711, "likelyhood": [711, 715], "inplac": [712, 792], "euclidian": 712, "On": 712, "semimetr": 712, "decid": [712, 875], "heterogen": 713, "physic": [713, 721], "scale_i": 714, "conting": 714, "Its": 714, "geq": 714, "focus": 714, "approxim": [714, 717], "stimat": 715, "wherev": 715, "m_shape": 716, "tol": 716, "singular": [716, 784, 857], "linalg": 716, "matrix_rank": 716, "rational": 716, "toler": [716, 811], "precomput": 716, "svd": 716, "hoc": 717, "principl": 717, "mont": 717, "carlo": 717, "k_": 717, "mu": 717, "mu_": 717, "neq": 717, "approx": 717, "commit": 717, "ii": 717, "repeatedli": 717, "underpow": 717, "statsmodel": 717, "draw": [717, 719, 720, 721, 746, 789], "ind": [717, 721], "dep": 717, "randint": 717, "randn": [717, 720, 721], "617": 717, "533": 717, "788": 717, "602": 717, "229": 717, "779": 717, "838": 717, "032": 717, "157": 717, "051": 717, "601": 717, "664": 717, "783": 717, "646e": 717, "subsample_pow": 717, "draw_mod": [717, 721], "critic": [717, 718, 720, 721, 748], "pwr_100": 717, "counts_100": 717, "max_count": [717, 720, 721], "min_count": [717, 720, 721], "counts_interv": [717, 720, 721], "alpha_pwr": [717, 720, 721], "num_it": [717, 720, 721], "pwr_010": 717, "counts_010": 717, "pwr_001": 717, "counts_001": 717, "484": 717, "844": 717, "932": 717, "984": 717, "044": 717, "224": 717, "572": 717, "836": 717, "928": 717, "996": [717, 721], "016": 717, "108": 717, "332": 717, "848": 717, "956": 717, "vec": 718, "control_cat": [719, 720], "strict_match": [719, 720], "sex": [719, 720], "educ": [719, 868], "diet": 719, "exercis": 719, "statu": [719, 720], "healthi": [719, 720, 721], "hous": 719, "abx": 719, "bb": 719, "hstack": [719, 720], "500": [720, 721], "num_run": [720, 721], "sample_count": [720, 721], "cytokin": 720, "transloc": 720, "myeloid": 720, "cultur": 720, "macrophag": 720, "bone": 720, "marrow": 720, "phagocyt": 720, "periton": 720, "growth": 720, "media": 720, "acquir": 720, "compani": 720, "labor": 720, "intens": 720, "assai": 720, "preliminari": 720, "cell_lin": 720, "binomi": [720, 721], "incub": 720, "untreat": 720, "treatment_stat": 720, "groupbi": 720, "00193863362662502": 720, "seem": 720, "receptor": 720, "temperatur": 720, "co2": 720, "idea": 720, "encourag": 720, "pwr": 720, "cnt": 720, "528": 720, "088": 720, "127": 720, "adequ": 720, "sublist": 721, "bacteria": [721, 766, 767, 800], "gardnerella": 721, "vaginali": 721, "vagin": 721, "menopaus": 721, "woman": 721, "experienc": 721, "urinari": 721, "tract": 721, "infect": 721, "uti": 721, "women": 721, "enrol": 721, "eight": 721, "week": 721, "particip": 721, "fecal": 721, "clinic": 721, "symptom": 721, "endpoint": [721, 797], "premenopaus": 721, "postmenopaus": 721, "pcr": 721, "pre_rat": 721, "pos_rat": 721, "chisquar": 721, "003": 721, "try": [721, 722], "risk": 721, "reproduct": 721, "bmi": 721, "tobacco": 721, "subsample_paired_pow": 721, "linkag": [721, 765], "pwr_est": 721, "nanmean": 721, "056": 721, "074": 721, "226": 721, "806": 721, "952": 721, "stool": 721, "secondari": 721, "met_po": 721, "2500": 721, "met_neg": 721, "metabolite_test": 721, "005": 721, "go": [721, 873, 875], "twice": 721, "pwr_est2": 721, "counts2": 721, "272": 721, "426": 721, "646": 721, "824": 721, "efficiencywarn": 722, "acceler": 722, "isubsampl": 722, "frequent": [728, 750], "grand": 728, "ellaps": 728, "bootstrap": 728, "posterior": 728, "assur": [729, 730, 754, 757], "unrooted_deepcopi": [729, 730, 754, 757, 789, 790, 804], "unrooted_copi": [729, 730, 754, 757, 790, 805], "tree_copi": [729, 730, 754, 757], "tree_nod": [729, 730, 754, 757], "travers": [729, 730, 750, 754, 757, 761, 764, 775, 778, 781, 782, 783, 798, 804, 805, 873], "tree_copy_nod": [729, 730, 754, 757], "deleg": 733, "noparenterror": 743, "nolengtherror": [743, 759, 768], "lack": 743, "toward": 744, "cach": [745, 750, 756, 760, 761, 762, 764, 771, 780, 784], "child1": [745, 760], "child2": [745, 760], "show_intern": 746, "compact": 746, "topolog": 747, "incom": 748, "species_a": 748, "successfulli": 748, "strip": [748, 752, 753], "czech": 748, "luca": 748, "jaim": 748, "huerta": 748, "cepa": 748, "alexandro": 748, "stamataki": 748, "review": 748, "viewer": 748, "toolkit": 748, "2017": 748, "1535": 748, "speciesa": 748, "insert_length": 749, "intermedi": 749, "prune": [749, 791, 802, 803], "func": [750, 763, 787, 792, 803, 814, 847, 858], "cache_attrnam": 750, "cache_typ": 750, "frozenset": [750, 794, 795], "particularli": 750, "topologi": [750, 784, 873], "invalidate_cach": [750, 756], "is_tip": [750, 769, 772, 873], "tip_nam": 750, "include_self": [750, 775, 778, 781, 782, 783, 798, 801, 873], "robinson": 751, "fould": 751, "compare_subset": [751, 753, 794, 795, 873], "compare_tip_dist": [751, 752, 759, 768, 797, 873], "julia": 751, "goodrich": 751, "bioscienc": 751, "tree1": [751, 752, 753, 873], "tree2": [751, 752, 753, 873], "exclude_absent_taxa": 752, "compare_rfd": [752, 753], "dist_f": 753, "distance_from_r": 753, "shuffle_f": [753, 792], "shuffl": 753, "mtrand": [753, 792], "randomst": [753, 792], "m1": 753, "m2": 753, "distance_from_r_squar": 753, "dist": [753, 768], "9f": 753, "000133446": 753, "conflict": 756, "cache_attr": [756, 771], "tip_subset": 758, "replic": 758, "cogent": 758, "totaldescendingbranch": 758, "postord": [758, 761, 775, 778, 782, 783, 798, 801, 873], "tr": 758, "tdbl": 758, "sdbl": 758, "tip_tip_dist": [759, 768], "accumulate_to_ancestor": 759, "get_max_dist": 759, "tip_a": [759, 788], "tip_d": 759, "find_al": [761, 763, 764], "find_by_id": [761, 762, 763], "find_by_func": [761, 762, 764], "node_id": [764, 770, 799], "linkage_matrix": 765, "id_list": 765, "hierarchi": [765, 766, 873], "from_taxonomi": [766, 800], "taxdump": 766, "dmp": 766, "phylum": 766, "set_index": 766, "archaea": [766, 767, 800], "firmicut": [766, 767, 800], "bacteroidet": [766, 767, 800], "lineage_map": 767, "from_taxdump": 767, "clostridia": [767, 800], "bacilli": [767, 800], "sphingobacteria": [767, 800], "euryarchaeota": [767, 800], "thermoplasmata": [767, 800], "halobacteria": [767, 800], "cytophagia": [767, 800], "distant": 768, "is_root": [769, 773, 873], "_leaf_index": 770, "create_cach": 771, "has_children": [772, 773], "tipnam": [774, 776], "lowest_common_ancestor": 774, "convienc": [774, 776], "preorder": [775, 778, 781, 782, 798, 801, 873], "pre_and_postord": [775, 778, 781, 783, 798, 801], "non_tip": [775, 781, 782, 783, 798, 801, 807, 873], "node_c": 777, "nontip": 778, "levelord": [778, 781, 782, 783, 798, 801], "tip_count": 779, "remove_delet": [780, 784, 786, 791], "ineleg": 781, "stack": 781, "3x": 781, "worst": 781, "comb": 781, "visit": 782, "reconstruct": [784, 808, 868, 871], "shear": 784, "pop": [784, 786, 787, 791], "to_delet": 784, "clade": [787, 794, 807, 873], "knowledg": [789, 869], "treeerror": [789, 790], "root_at_midpoint": [789, 808], "midpoint": [790, 808], "farthest": 790, "apart": 790, "lengtherror": 790, "indirectli": 790, "mid": 790, "root_at": [790, 804, 805], "infinit": [792, 804, 805], "rev": 792, "shuffler": 792, "shuffled_tre": 792, "tip_": 793, "tip_list": 796, "representationwarn": 797, "nan_length_valu": 799, "attribute_nam": 799, "aris": [799, 807], "id_index": 799, "child_index": 799, "left_child_id": 799, "right_child_id": 799, "attr_1": 799, "attr_n": 799, "allow_empti": 800, "filter_f": 800, "self_befor": 801, "self_aft": 801, "inord": 801, "unpack_by_func": 802, "elong": 802, "graft": 802, "unpack": 803, "assign_support": 803, "walk": [804, 805, 873, 875], "_not_": 804, "new_tre": [804, 805], "support_attr": 807, "tree_node_class": 807, "_tree": 807, "consensu": 807, "arbitrarili": [807, 875], "usefulli": 807, "disjoint": 807, "adapt": 807, "matthew": 807, "wakefield": 807, "margush": 807, "mcmorri": 807, "fr": 807, "bulletin": 807, "239": 807, "consens": 807, "support_valu": 807, "consensus_tre": 807, "disallow_negative_branch_length": 808, "result_constructor": 808, "saitou": 808, "nei": 808, "3447015": 808, "neighbour_join": 808, "abcd": 808, "contstruct": 808, "render": 808, "newick_str": 808, "accident": 809, "ineffici": 809, "instal": 809, "success": [810, 835, 875], "alter": 810, "task": [810, 869], "deleteri": 810, "rtol": 811, "assertionerror": [811, 812], "almost": 811, "assert_frame_equ": 811, "ignore_method_nam": 812, "ignore_axis_label": 812, "ignore_direction": 812, "assert": 812, "direction": 812, "cardin": 813, "0th": 813, "fdel": 814, "fget": 814, "fset": 814, "owner": 818, "fn": 832, "subfold": 832, "filenam": 832, "folder": 832, "open_fil": 833, "block_siz": 833, "1048576": 833, "checksum": 833, "hashlib": 833, "answer": 833, "stackoverflow": 833, "1131255": 833, "379593": 833, "baz": 833, "hexdigest": 833, "ab07acbb1e496801937adfa772424bf7": 833, "short_circuit": 834, "offer": 834, "mechan": [834, 875], "prealloc": 834, "enabl": [834, 875], "interrog": 834, "handi": [834, 875], "contextu": 834, "iter_": 835, "success_callback": [835, 875], "fail_callback": [835, 875], "engin": 835, "callback": [835, 875], "short_cicruit": 835, "examin": [835, 875], "aspect": 835, "_setup_debug_trac": 845, "not_non": [857, 875], "pronounc": 868, "sigh": 868, "kit": 868, "bui": 868, "oh": 868, "bsd": 868, "licens": 868, "activ": 868, "introduct": 868, "workflow": 868, "miscellan": 868, "writeabl": 869, "snif": 869, "my_obj": 869, "someformat": 869, "oo": 869, "open_filehandl": 869, "unnam": 869, "twofold": 869, "nonbiolog": 871, "accgggta": 871, "my": 871, "gfp": 871, "ggg": 871, "d2": 871, "d3": 871, "tacccggt": 871, "r1": 871, "gacccgcuuu": 871, "r2": 871, "gccccccuuu": 871, "r3": 871, "accguuaguc": 871, "r4": 871, "acgggu": 871, "uc": 871, "r5": 871, "agg": 871, "ggacugaa": 871, "gga": 871, "gaa": 871, "themselv": 871, "agggga": 871, "ut": 871, "atgtgtatttga": 871, "auguguauuu": 871, "protein_from_dna": 871, "mci": 871, "protein_from_rna": 871, "parenthes": 873, "traver": 873, "tree3": 873, "6666666666666667": 873, "120492524415": 873, "short": 875, "circuit": 875, "processor": 875, "nuc_pattern": 875, "aattg": 875, "has_nuc_pattern": 875, "sequenceprocessor": 875, "initialize_st": 875, "setup": 875, "check_length": 875, "indicatd": 875, "specfi": 875, "aaaaaaattttttt": 875, "atagacc": 875, "aattgccggac": 875, "atatgaacaaa": 875, "fun": 875, "excit": 875, "success_f": 875, "fail_f": 875, "ccggac": 875, "thing": 875, "ahead": 875, "tttttttaaaaaaa": 875, "debug_trac": 875, "earlier": 875, "caggcc": 875, "anticip": 875, "rapidli": 875, "debug_pre_st": 875, "debug_post_st": 875, "awesom": 875, "piec": 875, "debug_runtim": 875, "diagnos": 875, "aggreg": 875, "cprofil": 875, "quit": 875, "ex": 875, "do_someth": 875, "do_something_els": 875, "foobar": 875, "do_something_awesom": 875}, "objects": {"skbio": [[0, 0, 0, "-", "alignment"], [1, 0, 0, "-", "diversity"], [869, 0, 0, "-", "io"], [870, 0, 0, "-", "metadata"], [871, 0, 0, "-", "sequence"], [872, 0, 0, "-", "stats"], [873, 0, 0, "-", "tree"], [874, 0, 0, "-", "util"], [875, 0, 0, "-", "workflow"]], "skbio.alignment": [[2, 1, 1, "", "AlignmentStructure"], [16, 1, 1, "", "StripedSmithWaterman"], [28, 1, 1, "", "TabularMSA"], [60, 3, 1, "", "global_pairwise_align"], [61, 3, 1, "", "global_pairwise_align_nucleotide"], [62, 3, 1, "", "global_pairwise_align_protein"], [63, 3, 1, "", "local_pairwise_align"], [64, 3, 1, "", "local_pairwise_align_nucleotide"], [65, 3, 1, "", "local_pairwise_align_protein"], [66, 3, 1, "", "local_pairwise_align_ssw"], [67, 3, 1, "", "make_identity_substitution_matrix"]], "skbio.alignment.AlignmentStructure": [[3, 2, 1, "", "__eq__"], [4, 2, 1, "", "__ge__"], [5, 2, 1, "", "__getitem__"], [6, 2, 1, "", "__getstate__"], [7, 2, 1, "", "__gt__"], [8, 2, 1, "", "__hash__"], [9, 2, 1, "", "__le__"], [10, 2, 1, "", "__lt__"], [11, 2, 1, "", "__ne__"], [12, 2, 1, "", "__setstate__"], [13, 2, 1, "", "__str__"], [14, 2, 1, "", "is_zero_based"], [15, 2, 1, "", "set_zero_based"]], "skbio.alignment.StripedSmithWaterman": [[17, 2, 1, "", "__call__"], [18, 2, 1, "", "__eq__"], [19, 2, 1, "", "__ge__"], [20, 2, 1, "", "__getstate__"], [21, 2, 1, "", "__gt__"], [22, 2, 1, "", "__hash__"], [23, 2, 1, "", "__le__"], [24, 2, 1, "", "__lt__"], [25, 2, 1, "", "__ne__"], [26, 2, 1, "", "__setstate__"], [27, 2, 1, "", "__str__"]], "skbio.alignment.TabularMSA": [[29, 2, 1, "", "__bool__"], [30, 2, 1, "", "__contains__"], [31, 2, 1, "", "__copy__"], [32, 2, 1, "", "__deepcopy__"], [33, 2, 1, "", "__eq__"], [34, 2, 1, "", "__ge__"], [35, 2, 1, "", "__getitem__"], [36, 2, 1, "", "__getstate__"], [37, 2, 1, "", "__gt__"], [38, 2, 1, "", "__iter__"], [39, 2, 1, "", "__le__"], [40, 2, 1, "", "__len__"], [41, 2, 1, "", "__lt__"], [42, 2, 1, "", "__ne__"], [43, 2, 1, "", "__reversed__"], [44, 2, 1, "", "__str__"], [45, 2, 1, "", "append"], [46, 2, 1, "", "consensus"], [47, 2, 1, "", "conservation"], [48, 2, 1, "", "extend"], [49, 2, 1, "", "from_dict"], [50, 2, 1, "", "gap_frequencies"], [51, 2, 1, "", "has_metadata"], [52, 2, 1, "", "has_positional_metadata"], [53, 2, 1, "", "iter_positions"], [54, 2, 1, "", "join"], [55, 2, 1, "", "read"], [56, 2, 1, "", "reassign_index"], [57, 2, 1, "", "sort"], [58, 2, 1, "", "to_dict"], [59, 2, 1, "", "write"]], "skbio.diversity": [[68, 0, 0, "-", "alpha"], [103, 3, 1, "", "alpha_diversity"], [104, 0, 0, "-", "beta"], [107, 3, 1, "", "beta_diversity"], [108, 3, 1, "", "block_beta_diversity"], [109, 3, 1, "", "get_alpha_diversity_metrics"], [110, 3, 1, "", "get_beta_diversity_metrics"], [111, 3, 1, "", "partial_beta_diversity"]], "skbio.diversity.alpha": [[69, 3, 1, "", "ace"], [70, 3, 1, "", "berger_parker_d"], [71, 3, 1, "", "brillouin_d"], [72, 3, 1, "", "chao1"], [73, 3, 1, "", "chao1_ci"], [74, 3, 1, "", "dominance"], [75, 3, 1, "", "doubles"], [76, 3, 1, "", "enspie"], [77, 3, 1, "", "esty_ci"], [78, 3, 1, "", "faith_pd"], [79, 3, 1, "", "fisher_alpha"], [80, 3, 1, "", "gini_index"], [81, 3, 1, "", "goods_coverage"], [82, 3, 1, "", "heip_e"], [83, 3, 1, "", "kempton_taylor_q"], [84, 3, 1, "", "lladser_ci"], [85, 3, 1, "", "lladser_pe"], [86, 3, 1, "", "margalef"], [87, 3, 1, "", "mcintosh_d"], [88, 3, 1, "", "mcintosh_e"], [89, 3, 1, "", "menhinick"], [90, 3, 1, "", "michaelis_menten_fit"], [91, 3, 1, "", "observed_features"], [92, 3, 1, "", "observed_otus"], [93, 3, 1, "", "osd"], [94, 3, 1, "", "phydiv"], [95, 3, 1, "", "pielou_e"], [96, 3, 1, "", "robbins"], [97, 3, 1, "", "shannon"], [98, 3, 1, "", "simpson"], [99, 3, 1, "", "simpson_e"], [100, 3, 1, "", "singles"], [101, 3, 1, "", "sobs"], [102, 3, 1, "", "strong"]], "skbio.diversity.beta": [[105, 3, 1, "", "unweighted_unifrac"], [106, 3, 1, "", "weighted_unifrac"]], "skbio.io": [[112, 4, 1, "", "ArgumentOverrideWarning"], [113, 4, 1, "", "BLAST7FormatError"], [114, 4, 1, "", "ClustalFormatError"], [115, 4, 1, "", "EMBLFormatError"], [116, 4, 1, "", "FASTAFormatError"], [117, 4, 1, "", "FASTQFormatError"], [118, 4, 1, "", "FileFormatError"], [119, 4, 1, "", "FormatIdentificationWarning"], [120, 4, 1, "", "GFF3FormatError"], [121, 4, 1, "", "GenBankFormatError"], [122, 4, 1, "", "IOSourceError"], [123, 4, 1, "", "LSMatFormatError"], [124, 4, 1, "", "NewickFormatError"], [125, 4, 1, "", "OrdinationFormatError"], [126, 4, 1, "", "PhylipFormatError"], [127, 4, 1, "", "QSeqFormatError"], [128, 4, 1, "", "QUALFormatError"], [129, 4, 1, "", "StockholmFormatError"], [130, 4, 1, "", "UnrecognizedFormatError"], [148, 0, 0, "-", "registry"], [189, 0, 0, "-", "util"]], "skbio.io.format": [[131, 0, 0, "-", "binary_dm"], [132, 0, 0, "-", "blast6"], [133, 0, 0, "-", "blast7"], [134, 0, 0, "-", "clustal"], [135, 0, 0, "-", "embl"], [136, 0, 0, "-", "fasta"], [137, 0, 0, "-", "fastq"], [138, 0, 0, "-", "genbank"], [139, 0, 0, "-", "gff3"], [140, 0, 0, "-", "lsmat"], [141, 0, 0, "-", "newick"], [142, 0, 0, "-", "ordination"], [143, 0, 0, "-", "phylip"], [144, 0, 0, "-", "qseq"], [145, 0, 0, "-", "sample_metadata"], [146, 0, 0, "-", "stockholm"], [147, 0, 0, "-", "taxdump"]], "skbio.io.registry": [[149, 4, 1, "", "DuplicateRegistrationError"], [150, 1, 1, "", "Format"], [163, 1, 1, "", "IORegistry"], [184, 4, 1, "", "InvalidRegistrationError"], [185, 3, 1, "", "create_format"], [186, 3, 1, "", "read"], [187, 3, 1, "", "sniff"], [188, 3, 1, "", "write"]], "skbio.io.registry.Format": [[151, 2, 1, "", "__eq__"], [152, 2, 1, "", "__ge__"], [153, 2, 1, "", "__getstate__"], [154, 2, 1, "", "__gt__"], [155, 2, 1, "", "__hash__"], [156, 2, 1, "", "__le__"], [157, 2, 1, "", "__lt__"], [158, 2, 1, "", "__ne__"], [159, 2, 1, "", "__str__"], [160, 2, 1, "", "reader"], [161, 2, 1, "", "sniffer"], [162, 2, 1, "", "writer"]], "skbio.io.registry.IORegistry": [[164, 2, 1, "", "__eq__"], [165, 2, 1, "", "__ge__"], [166, 2, 1, "", "__getstate__"], [167, 2, 1, "", "__gt__"], [168, 2, 1, "", "__hash__"], [169, 2, 1, "", "__le__"], [170, 2, 1, "", "__lt__"], [171, 2, 1, "", "__ne__"], [172, 2, 1, "", "__str__"], [173, 2, 1, "", "add_format"], [174, 2, 1, "", "create_format"], [175, 2, 1, "", "get_reader"], [176, 2, 1, "", "get_sniffer"], [177, 2, 1, "", "get_writer"], [178, 2, 1, "", "list_read_formats"], [179, 2, 1, "", "list_write_formats"], [180, 2, 1, "", "monkey_patch"], [181, 2, 1, "", "read"], [182, 2, 1, "", "sniff"], [183, 2, 1, "", "write"]], "skbio.io.util": [[190, 3, 1, "", "open"], [191, 3, 1, "", "open_file"], [192, 3, 1, "", "open_files"]], "skbio.metadata": [[193, 1, 1, "", "Interval"], [203, 1, 1, "", "IntervalMetadata"]], "skbio.metadata.Interval": [[194, 2, 1, "", "__eq__"], [195, 2, 1, "", "__ge__"], [196, 2, 1, "", "__getstate__"], [197, 2, 1, "", "__gt__"], [198, 2, 1, "", "__le__"], [199, 2, 1, "", "__lt__"], [200, 2, 1, "", "__ne__"], [201, 2, 1, "", "__str__"], [202, 2, 1, "", "drop"]], "skbio.metadata.IntervalMetadata": [[204, 2, 1, "", "__copy__"], [205, 2, 1, "", "__deepcopy__"], [206, 2, 1, "", "__eq__"], [207, 2, 1, "", "__ge__"], [208, 2, 1, "", "__getstate__"], [209, 2, 1, "", "__gt__"], [210, 2, 1, "", "__le__"], [211, 2, 1, "", "__lt__"], [212, 2, 1, "", "__ne__"], [213, 2, 1, "", "__str__"], [214, 2, 1, "", "add"], [215, 2, 1, "", "concat"], [216, 2, 1, "", "drop"], [217, 2, 1, "", "merge"], [218, 2, 1, "", "query"], [219, 2, 1, "", "read"], [220, 2, 1, "", "sort"], [221, 2, 1, "", "write"]], "skbio.sequence": [[222, 1, 1, "", "DNA"], [280, 1, 1, "", "GeneticCode"], [292, 1, 1, "", "GrammaredSequence"], [342, 1, 1, "", "Protein"], [394, 1, 1, "", "RNA"], [452, 1, 1, "", "Sequence"], [490, 1, 1, "", "SubstitutionMatrix"], [518, 0, 0, "-", "distance"]], "skbio.sequence.DNA": [[223, 2, 1, "", "__bool__"], [224, 2, 1, "", "__contains__"], [225, 2, 1, "", "__copy__"], [226, 2, 1, "", "__deepcopy__"], [227, 2, 1, "", "__eq__"], [228, 2, 1, "", "__ge__"], [229, 2, 1, "", "__getitem__"], [230, 2, 1, "", "__getstate__"], [231, 2, 1, "", "__gt__"], [232, 2, 1, "", "__iter__"], [233, 2, 1, "", "__le__"], [234, 2, 1, "", "__len__"], [235, 2, 1, "", "__lt__"], [236, 2, 1, "", "__ne__"], [237, 2, 1, "", "__reversed__"], [238, 2, 1, "", "__str__"], [239, 2, 1, "", "complement"], [240, 2, 1, "", "concat"], [241, 2, 1, "", "count"], [242, 2, 1, "", "definites"], [243, 2, 1, "", "degap"], [244, 2, 1, "", "degenerates"], [245, 2, 1, "", "distance"], [246, 2, 1, "", "expand_degenerates"], [247, 2, 1, "", "find_motifs"], [248, 2, 1, "", "find_with_regex"], [249, 2, 1, "", "frequencies"], [250, 2, 1, "", "gaps"], [251, 2, 1, "", "gc_content"], [252, 2, 1, "", "gc_frequency"], [253, 2, 1, "", "has_definites"], [254, 2, 1, "", "has_degenerates"], [255, 2, 1, "", "has_gaps"], [256, 2, 1, "", "has_interval_metadata"], [257, 2, 1, "", "has_metadata"], [258, 2, 1, "", "has_nondegenerates"], [259, 2, 1, "", "has_positional_metadata"], [260, 2, 1, "", "index"], [261, 2, 1, "", "is_reverse_complement"], [262, 2, 1, "", "iter_contiguous"], [263, 2, 1, "", "iter_kmers"], [264, 2, 1, "", "kmer_frequencies"], [265, 2, 1, "", "lowercase"], [266, 2, 1, "", "match_frequency"], [267, 2, 1, "", "matches"], [268, 2, 1, "", "mismatch_frequency"], [269, 2, 1, "", "mismatches"], [270, 2, 1, "", "nondegenerates"], [271, 2, 1, "", "read"], [272, 2, 1, "", "replace"], [273, 2, 1, "", "reverse_complement"], [274, 2, 1, "", "to_indices"], [275, 2, 1, "", "to_regex"], [276, 2, 1, "", "transcribe"], [277, 2, 1, "", "translate"], [278, 2, 1, "", "translate_six_frames"], [279, 2, 1, "", "write"]], "skbio.sequence.GeneticCode": [[281, 2, 1, "", "__eq__"], [282, 2, 1, "", "__ge__"], [283, 2, 1, "", "__getstate__"], [284, 2, 1, "", "__gt__"], [285, 2, 1, "", "__le__"], [286, 2, 1, "", "__lt__"], [287, 2, 1, "", "__ne__"], [288, 2, 1, "", "__str__"], [289, 2, 1, "", "from_ncbi"], [290, 2, 1, "", "translate"], [291, 2, 1, "", "translate_six_frames"]], "skbio.sequence.GrammaredSequence": [[293, 2, 1, "", "__bool__"], [294, 2, 1, "", "__contains__"], [295, 2, 1, "", "__copy__"], [296, 2, 1, "", "__deepcopy__"], [297, 2, 1, "", "__eq__"], [298, 2, 1, "", "__ge__"], [299, 2, 1, "", "__getitem__"], [300, 2, 1, "", "__getstate__"], [301, 2, 1, "", "__gt__"], [302, 2, 1, "", "__iter__"], [303, 2, 1, "", "__le__"], [304, 2, 1, "", "__len__"], [305, 2, 1, "", "__lt__"], [306, 2, 1, "", "__ne__"], [307, 2, 1, "", "__reversed__"], [308, 2, 1, "", "__str__"], [309, 2, 1, "", "concat"], [310, 2, 1, "", "count"], [311, 2, 1, "", "definites"], [312, 2, 1, "", "degap"], [313, 2, 1, "", "degenerates"], [314, 2, 1, "", "distance"], [315, 2, 1, "", "expand_degenerates"], [316, 2, 1, "", "find_motifs"], [317, 2, 1, "", "find_with_regex"], [318, 2, 1, "", "frequencies"], [319, 2, 1, "", "gaps"], [320, 2, 1, "", "has_definites"], [321, 2, 1, "", "has_degenerates"], [322, 2, 1, "", "has_gaps"], [323, 2, 1, "", "has_interval_metadata"], [324, 2, 1, "", "has_metadata"], [325, 2, 1, "", "has_nondegenerates"], [326, 2, 1, "", "has_positional_metadata"], [327, 2, 1, "", "index"], [328, 2, 1, "", "iter_contiguous"], [329, 2, 1, "", "iter_kmers"], [330, 2, 1, "", "kmer_frequencies"], [331, 2, 1, "", "lowercase"], [332, 2, 1, "", "match_frequency"], [333, 2, 1, "", "matches"], [334, 2, 1, "", "mismatch_frequency"], [335, 2, 1, "", "mismatches"], [336, 2, 1, "", "nondegenerates"], [337, 2, 1, "", "read"], [338, 2, 1, "", "replace"], [339, 2, 1, "", "to_indices"], [340, 2, 1, "", "to_regex"], [341, 2, 1, "", "write"]], "skbio.sequence.Protein": [[343, 2, 1, "", "__bool__"], [344, 2, 1, "", "__contains__"], [345, 2, 1, "", "__copy__"], [346, 2, 1, "", "__deepcopy__"], [347, 2, 1, "", "__eq__"], [348, 2, 1, "", "__ge__"], [349, 2, 1, "", "__getitem__"], [350, 2, 1, "", "__getstate__"], [351, 2, 1, "", "__gt__"], [352, 2, 1, "", "__iter__"], [353, 2, 1, "", "__le__"], [354, 2, 1, "", "__len__"], [355, 2, 1, "", "__lt__"], [356, 2, 1, "", "__ne__"], [357, 2, 1, "", "__reversed__"], [358, 2, 1, "", "__str__"], [359, 2, 1, "", "concat"], [360, 2, 1, "", "count"], [361, 2, 1, "", "definites"], [362, 2, 1, "", "degap"], [363, 2, 1, "", "degenerates"], [364, 2, 1, "", "distance"], [365, 2, 1, "", "expand_degenerates"], [366, 2, 1, "", "find_motifs"], [367, 2, 1, "", "find_with_regex"], [368, 2, 1, "", "frequencies"], [369, 2, 1, "", "gaps"], [370, 2, 1, "", "has_definites"], [371, 2, 1, "", "has_degenerates"], [372, 2, 1, "", "has_gaps"], [373, 2, 1, "", "has_interval_metadata"], [374, 2, 1, "", "has_metadata"], [375, 2, 1, "", "has_nondegenerates"], [376, 2, 1, "", "has_positional_metadata"], [377, 2, 1, "", "has_stops"], [378, 2, 1, "", "index"], [379, 2, 1, "", "iter_contiguous"], [380, 2, 1, "", "iter_kmers"], [381, 2, 1, "", "kmer_frequencies"], [382, 2, 1, "", "lowercase"], [383, 2, 1, "", "match_frequency"], [384, 2, 1, "", "matches"], [385, 2, 1, "", "mismatch_frequency"], [386, 2, 1, "", "mismatches"], [387, 2, 1, "", "nondegenerates"], [388, 2, 1, "", "read"], [389, 2, 1, "", "replace"], [390, 2, 1, "", "stops"], [391, 2, 1, "", "to_indices"], [392, 2, 1, "", "to_regex"], [393, 2, 1, "", "write"]], "skbio.sequence.RNA": [[395, 2, 1, "", "__bool__"], [396, 2, 1, "", "__contains__"], [397, 2, 1, "", "__copy__"], [398, 2, 1, "", "__deepcopy__"], [399, 2, 1, "", "__eq__"], [400, 2, 1, "", "__ge__"], [401, 2, 1, "", "__getitem__"], [402, 2, 1, "", "__getstate__"], [403, 2, 1, "", "__gt__"], [404, 2, 1, "", "__iter__"], [405, 2, 1, "", "__le__"], [406, 2, 1, "", "__len__"], [407, 2, 1, "", "__lt__"], [408, 2, 1, "", "__ne__"], [409, 2, 1, "", "__reversed__"], [410, 2, 1, "", "__str__"], [411, 2, 1, "", "complement"], [412, 2, 1, "", "concat"], [413, 2, 1, "", "count"], [414, 2, 1, "", "definites"], [415, 2, 1, "", "degap"], [416, 2, 1, "", "degenerates"], [417, 2, 1, "", "distance"], [418, 2, 1, "", "expand_degenerates"], [419, 2, 1, "", "find_motifs"], [420, 2, 1, "", "find_with_regex"], [421, 2, 1, "", "frequencies"], [422, 2, 1, "", "gaps"], [423, 2, 1, "", "gc_content"], [424, 2, 1, "", "gc_frequency"], [425, 2, 1, "", "has_definites"], [426, 2, 1, "", "has_degenerates"], [427, 2, 1, "", "has_gaps"], [428, 2, 1, "", "has_interval_metadata"], [429, 2, 1, "", "has_metadata"], [430, 2, 1, "", "has_nondegenerates"], [431, 2, 1, "", "has_positional_metadata"], [432, 2, 1, "", "index"], [433, 2, 1, "", "is_reverse_complement"], [434, 2, 1, "", "iter_contiguous"], [435, 2, 1, "", "iter_kmers"], [436, 2, 1, "", "kmer_frequencies"], [437, 2, 1, "", "lowercase"], [438, 2, 1, "", "match_frequency"], [439, 2, 1, "", "matches"], [440, 2, 1, "", "mismatch_frequency"], [441, 2, 1, "", "mismatches"], [442, 2, 1, "", "nondegenerates"], [443, 2, 1, "", "read"], [444, 2, 1, "", "replace"], [445, 2, 1, "", "reverse_complement"], [446, 2, 1, "", "reverse_transcribe"], [447, 2, 1, "", "to_indices"], [448, 2, 1, "", "to_regex"], [449, 2, 1, "", "translate"], [450, 2, 1, "", "translate_six_frames"], [451, 2, 1, "", "write"]], "skbio.sequence.Sequence": [[453, 2, 1, "", "__bool__"], [454, 2, 1, "", "__contains__"], [455, 2, 1, "", "__copy__"], [456, 2, 1, "", "__deepcopy__"], [457, 2, 1, "", "__eq__"], [458, 2, 1, "", "__ge__"], [459, 2, 1, "", "__getitem__"], [460, 2, 1, "", "__getstate__"], [461, 2, 1, "", "__gt__"], [462, 2, 1, "", "__iter__"], [463, 2, 1, "", "__le__"], [464, 2, 1, "", "__len__"], [465, 2, 1, "", "__lt__"], [466, 2, 1, "", "__ne__"], [467, 2, 1, "", "__reversed__"], [468, 2, 1, "", "__str__"], [469, 2, 1, "", "concat"], [470, 2, 1, "", "count"], [471, 2, 1, "", "distance"], [472, 2, 1, "", "find_with_regex"], [473, 2, 1, "", "frequencies"], [474, 2, 1, "", "has_interval_metadata"], [475, 2, 1, "", "has_metadata"], [476, 2, 1, "", "has_positional_metadata"], [477, 2, 1, "", "index"], [478, 2, 1, "", "iter_contiguous"], [479, 2, 1, "", "iter_kmers"], [480, 2, 1, "", "kmer_frequencies"], [481, 2, 1, "", "lowercase"], [482, 2, 1, "", "match_frequency"], [483, 2, 1, "", "matches"], [484, 2, 1, "", "mismatch_frequency"], [485, 2, 1, "", "mismatches"], [486, 2, 1, "", "read"], [487, 2, 1, "", "replace"], [488, 2, 1, "", "to_indices"], [489, 2, 1, "", "write"]], "skbio.sequence.SubstitutionMatrix": [[491, 2, 1, "", "__contains__"], [492, 2, 1, "", "__eq__"], [493, 2, 1, "", "__ge__"], [494, 2, 1, "", "__getitem__"], [495, 2, 1, "", "__getstate__"], [496, 2, 1, "", "__gt__"], [497, 2, 1, "", "__le__"], [498, 2, 1, "", "__lt__"], [499, 2, 1, "", "__ne__"], [500, 2, 1, "", "__str__"], [501, 2, 1, "", "between"], [502, 2, 1, "", "by_name"], [503, 2, 1, "", "copy"], [504, 2, 1, "", "filter"], [505, 2, 1, "", "from_dict"], [506, 2, 1, "", "from_iterable"], [507, 2, 1, "", "get_names"], [508, 2, 1, "", "identity"], [509, 2, 1, "", "index"], [510, 2, 1, "", "plot"], [511, 2, 1, "", "read"], [512, 2, 1, "", "redundant_form"], [513, 2, 1, "", "to_data_frame"], [514, 2, 1, "", "to_dict"], [515, 2, 1, "", "transpose"], [516, 2, 1, "", "within"], [517, 2, 1, "", "write"]], "skbio.sequence.distance": [[519, 3, 1, "", "hamming"], [520, 3, 1, "", "kmer_distance"]], "skbio.stats": [[521, 0, 0, "-", "composition"], [540, 0, 0, "-", "distance"], [600, 0, 0, "-", "evolve"], [602, 0, 0, "-", "gradient"], [691, 3, 1, "", "isubsample"], [692, 0, 0, "-", "ordination"], [717, 0, 0, "-", "power"], [722, 3, 1, "", "subsample_counts"]], "skbio.stats.composition": [[522, 3, 1, "", "alr"], [523, 3, 1, "", "alr_inv"], [524, 3, 1, "", "ancom"], [525, 3, 1, "", "centralize"], [526, 3, 1, "", "closure"], [527, 3, 1, "", "clr"], [528, 3, 1, "", "clr_inv"], [529, 3, 1, "", "ilr"], [530, 3, 1, "", "ilr_inv"], [531, 3, 1, "", "inner"], [532, 3, 1, "", "multiplicative_replacement"], [533, 3, 1, "", "pairwise_vlr"], [534, 3, 1, "", "perturb"], [535, 3, 1, "", "perturb_inv"], [536, 3, 1, "", "power"], [537, 3, 1, "", "sbp_basis"], [538, 3, 1, "", "tree_basis"], [539, 3, 1, "", "vlr"]], "skbio.stats.distance": [[541, 1, 1, "", "DissimilarityMatrix"], [564, 4, 1, "", "DissimilarityMatrixError"], [565, 1, 1, "", "DistanceMatrix"], [591, 4, 1, "", "DistanceMatrixError"], [592, 4, 1, "", "MissingIDError"], [593, 3, 1, "", "anosim"], [594, 3, 1, "", "bioenv"], [595, 3, 1, "", "mantel"], [596, 3, 1, "", "permanova"], [597, 3, 1, "", "permdisp"], [598, 3, 1, "", "pwmantel"], [599, 3, 1, "", "randdm"]], "skbio.stats.distance.DissimilarityMatrix": [[542, 2, 1, "", "__contains__"], [543, 2, 1, "", "__eq__"], [544, 2, 1, "", "__ge__"], [545, 2, 1, "", "__getitem__"], [546, 2, 1, "", "__getstate__"], [547, 2, 1, "", "__gt__"], [548, 2, 1, "", "__le__"], [549, 2, 1, "", "__lt__"], [550, 2, 1, "", "__ne__"], [551, 2, 1, "", "__str__"], [552, 2, 1, "", "between"], [553, 2, 1, "", "copy"], [554, 2, 1, "", "filter"], [555, 2, 1, "", "from_iterable"], [556, 2, 1, "", "index"], [557, 2, 1, "", "plot"], [558, 2, 1, "", "read"], [559, 2, 1, "", "redundant_form"], [560, 2, 1, "", "to_data_frame"], [561, 2, 1, "", "transpose"], [562, 2, 1, "", "within"], [563, 2, 1, "", "write"]], "skbio.stats.distance.DistanceMatrix": [[566, 2, 1, "", "__contains__"], [567, 2, 1, "", "__eq__"], [568, 2, 1, "", "__ge__"], [569, 2, 1, "", "__getitem__"], [570, 2, 1, "", "__getstate__"], [571, 2, 1, "", "__gt__"], [572, 2, 1, "", "__le__"], [573, 2, 1, "", "__lt__"], [574, 2, 1, "", "__ne__"], [575, 2, 1, "", "__str__"], [576, 2, 1, "", "between"], [577, 2, 1, "", "condensed_form"], [578, 2, 1, "", "copy"], [579, 2, 1, "", "filter"], [580, 2, 1, "", "from_iterable"], [581, 2, 1, "", "index"], [582, 2, 1, "", "permute"], [583, 2, 1, "", "plot"], [584, 2, 1, "", "read"], [585, 2, 1, "", "redundant_form"], [586, 2, 1, "", "to_data_frame"], [587, 2, 1, "", "to_series"], [588, 2, 1, "", "transpose"], [589, 2, 1, "", "within"], [590, 2, 1, "", "write"]], "skbio.stats.evolve": [[601, 3, 1, "", "hommola_cospeciation"]], "skbio.stats.gradient": [[603, 1, 1, "", "AverageGradientANOVA"], [614, 1, 1, "", "CategoryResults"], [625, 1, 1, "", "FirstDifferenceGradientANOVA"], [636, 1, 1, "", "GradientANOVA"], [647, 1, 1, "", "GradientANOVAResults"], [658, 1, 1, "", "GroupResults"], [669, 1, 1, "", "TrajectoryGradientANOVA"], [680, 1, 1, "", "WindowDifferenceGradientANOVA"]], "skbio.stats.gradient.AverageGradientANOVA": [[604, 2, 1, "", "__eq__"], [605, 2, 1, "", "__ge__"], [606, 2, 1, "", "__getstate__"], [607, 2, 1, "", "__gt__"], [608, 2, 1, "", "__hash__"], [609, 2, 1, "", "__le__"], [610, 2, 1, "", "__lt__"], [611, 2, 1, "", "__ne__"], [612, 2, 1, "", "__str__"], [613, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.CategoryResults": [[615, 2, 1, "", "__eq__"], [616, 2, 1, "", "__ge__"], [617, 2, 1, "", "__getstate__"], [618, 2, 1, "", "__gt__"], [619, 2, 1, "", "__hash__"], [620, 2, 1, "", "__le__"], [621, 2, 1, "", "__lt__"], [622, 2, 1, "", "__ne__"], [623, 2, 1, "", "__str__"], [624, 2, 1, "", "to_files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[626, 2, 1, "", "__eq__"], [627, 2, 1, "", "__ge__"], [628, 2, 1, "", "__getstate__"], [629, 2, 1, "", "__gt__"], [630, 2, 1, "", "__hash__"], [631, 2, 1, "", "__le__"], [632, 2, 1, "", "__lt__"], [633, 2, 1, "", "__ne__"], [634, 2, 1, "", "__str__"], [635, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVA": [[637, 2, 1, "", "__eq__"], [638, 2, 1, "", "__ge__"], [639, 2, 1, "", "__getstate__"], [640, 2, 1, "", "__gt__"], [641, 2, 1, "", "__hash__"], [642, 2, 1, "", "__le__"], [643, 2, 1, "", "__lt__"], [644, 2, 1, "", "__ne__"], [645, 2, 1, "", "__str__"], [646, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[648, 2, 1, "", "__eq__"], [649, 2, 1, "", "__ge__"], [650, 2, 1, "", "__getstate__"], [651, 2, 1, "", "__gt__"], [652, 2, 1, "", "__hash__"], [653, 2, 1, "", "__le__"], [654, 2, 1, "", "__lt__"], [655, 2, 1, "", "__ne__"], [656, 2, 1, "", "__str__"], [657, 2, 1, "", "to_files"]], "skbio.stats.gradient.GroupResults": [[659, 2, 1, "", "__eq__"], [660, 2, 1, "", "__ge__"], [661, 2, 1, "", "__getstate__"], [662, 2, 1, "", "__gt__"], [663, 2, 1, "", "__hash__"], [664, 2, 1, "", "__le__"], [665, 2, 1, "", "__lt__"], [666, 2, 1, "", "__ne__"], [667, 2, 1, "", "__str__"], [668, 2, 1, "", "to_files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[670, 2, 1, "", "__eq__"], [671, 2, 1, "", "__ge__"], [672, 2, 1, "", "__getstate__"], [673, 2, 1, "", "__gt__"], [674, 2, 1, "", "__hash__"], [675, 2, 1, "", "__le__"], [676, 2, 1, "", "__lt__"], [677, 2, 1, "", "__ne__"], [678, 2, 1, "", "__str__"], [679, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[681, 2, 1, "", "__eq__"], [682, 2, 1, "", "__ge__"], [683, 2, 1, "", "__getstate__"], [684, 2, 1, "", "__gt__"], [685, 2, 1, "", "__hash__"], [686, 2, 1, "", "__le__"], [687, 2, 1, "", "__lt__"], [688, 2, 1, "", "__ne__"], [689, 2, 1, "", "__str__"], [690, 2, 1, "", "get_trajectories"]], "skbio.stats.ordination": [[693, 1, 1, "", "OrdinationResults"], [706, 3, 1, "", "ca"], [707, 3, 1, "", "cca"], [708, 3, 1, "", "corr"], [709, 3, 1, "", "e_matrix"], [710, 3, 1, "", "f_matrix"], [711, 3, 1, "", "mean_and_std"], [712, 3, 1, "", "pcoa"], [713, 3, 1, "", "pcoa_biplot"], [714, 3, 1, "", "rda"], [715, 3, 1, "", "scale"], [716, 3, 1, "", "svd_rank"]], "skbio.stats.ordination.OrdinationResults": [[694, 2, 1, "", "__eq__"], [695, 2, 1, "", "__ge__"], [696, 2, 1, "", "__getstate__"], [697, 2, 1, "", "__gt__"], [698, 2, 1, "", "__hash__"], [699, 2, 1, "", "__le__"], [700, 2, 1, "", "__lt__"], [701, 2, 1, "", "__ne__"], [702, 2, 1, "", "__str__"], [703, 2, 1, "", "plot"], [704, 2, 1, "", "read"], [705, 2, 1, "", "write"]], "skbio.stats.power": [[718, 3, 1, "", "confidence_bound"], [719, 3, 1, "", "paired_subsamples"], [720, 3, 1, "", "subsample_paired_power"], [721, 3, 1, "", "subsample_power"]], "skbio.tree": [[723, 4, 1, "", "DuplicateNodeError"], [724, 4, 1, "", "MissingNodeError"], [725, 4, 1, "", "NoLengthError"], [726, 4, 1, "", "NoParentError"], [727, 4, 1, "", "TreeError"], [728, 1, 1, "", "TreeNode"], [807, 3, 1, "", "majority_rule"], [808, 3, 1, "", "nj"]], "skbio.tree.TreeNode": [[729, 2, 1, "", "__copy__"], [730, 2, 1, "", "__deepcopy__"], [731, 2, 1, "", "__eq__"], [732, 2, 1, "", "__ge__"], [733, 2, 1, "", "__getitem__"], [734, 2, 1, "", "__getstate__"], [735, 2, 1, "", "__gt__"], [736, 2, 1, "", "__hash__"], [737, 2, 1, "", "__iter__"], [738, 2, 1, "", "__le__"], [739, 2, 1, "", "__len__"], [740, 2, 1, "", "__lt__"], [741, 2, 1, "", "__ne__"], [742, 2, 1, "", "__str__"], [743, 2, 1, "", "accumulate_to_ancestor"], [744, 2, 1, "", "ancestors"], [745, 2, 1, "", "append"], [746, 2, 1, "", "ascii_art"], [747, 2, 1, "", "assign_ids"], [748, 2, 1, "", "assign_supports"], [749, 2, 1, "", "bifurcate"], [750, 2, 1, "", "cache_attr"], [751, 2, 1, "", "compare_rfd"], [752, 2, 1, "", "compare_subsets"], [753, 2, 1, "", "compare_tip_distances"], [754, 2, 1, "", "copy"], [755, 2, 1, "", "count"], [756, 2, 1, "", "create_caches"], [757, 2, 1, "", "deepcopy"], [758, 2, 1, "", "descending_branch_length"], [759, 2, 1, "", "distance"], [760, 2, 1, "", "extend"], [761, 2, 1, "", "find"], [762, 2, 1, "", "find_all"], [763, 2, 1, "", "find_by_func"], [764, 2, 1, "", "find_by_id"], [765, 2, 1, "", "from_linkage_matrix"], [766, 2, 1, "", "from_taxdump"], [767, 2, 1, "", "from_taxonomy"], [768, 2, 1, "", "get_max_distance"], [769, 2, 1, "", "has_children"], [770, 2, 1, "", "index_tree"], [771, 2, 1, "", "invalidate_caches"], [772, 2, 1, "", "is_root"], [773, 2, 1, "", "is_tip"], [774, 2, 1, "", "lca"], [775, 2, 1, "", "levelorder"], [776, 2, 1, "", "lowest_common_ancestor"], [777, 2, 1, "", "neighbors"], [778, 2, 1, "", "non_tips"], [779, 2, 1, "", "observed_node_counts"], [780, 2, 1, "", "pop"], [781, 2, 1, "", "postorder"], [782, 2, 1, "", "pre_and_postorder"], [783, 2, 1, "", "preorder"], [784, 2, 1, "", "prune"], [785, 2, 1, "", "read"], [786, 2, 1, "", "remove"], [787, 2, 1, "", "remove_deleted"], [788, 2, 1, "", "root"], [789, 2, 1, "", "root_at"], [790, 2, 1, "", "root_at_midpoint"], [791, 2, 1, "", "shear"], [792, 2, 1, "", "shuffle"], [793, 2, 1, "", "siblings"], [794, 2, 1, "", "subset"], [795, 2, 1, "", "subsets"], [796, 2, 1, "", "subtree"], [797, 2, 1, "", "tip_tip_distances"], [798, 2, 1, "", "tips"], [799, 2, 1, "", "to_array"], [800, 2, 1, "", "to_taxonomy"], [801, 2, 1, "", "traverse"], [802, 2, 1, "", "unpack"], [803, 2, 1, "", "unpack_by_func"], [804, 2, 1, "", "unrooted_copy"], [805, 2, 1, "", "unrooted_deepcopy"], [806, 2, 1, "", "write"]], "skbio.util": [[809, 4, 1, "", "EfficiencyWarning"], [810, 4, 1, "", "RepresentationWarning"], [811, 3, 1, "", "assert_data_frame_almost_equal"], [812, 3, 1, "", "assert_ordination_results_equal"], [813, 3, 1, "", "cardinal_to_ordinal"], [814, 1, 1, "", "classproperty"], [831, 3, 1, "", "find_duplicates"], [832, 3, 1, "", "get_data_path"], [833, 3, 1, "", "safe_md5"]], "skbio.util.classproperty": [[815, 2, 1, "", "__delete__"], [816, 2, 1, "", "__eq__"], [817, 2, 1, "", "__ge__"], [818, 2, 1, "", "__get__"], [819, 2, 1, "", "__getstate__"], [820, 2, 1, "", "__gt__"], [821, 2, 1, "", "__hash__"], [822, 2, 1, "", "__le__"], [823, 2, 1, "", "__lt__"], [824, 2, 1, "", "__ne__"], [825, 2, 1, "", "__set__"], [826, 2, 1, "", "__set_name__"], [827, 2, 1, "", "__str__"], [828, 2, 1, "", "deleter"], [829, 2, 1, "", "getter"], [830, 2, 1, "", "setter"]], "skbio.workflow": [[834, 1, 1, "", "Workflow"], [846, 1, 1, "", "method"], [857, 1, 1, "", "requires"]], "skbio.workflow.Workflow": [[835, 2, 1, "", "__call__"], [836, 2, 1, "", "__eq__"], [837, 2, 1, "", "__ge__"], [838, 2, 1, "", "__getstate__"], [839, 2, 1, "", "__gt__"], [840, 2, 1, "", "__hash__"], [841, 2, 1, "", "__le__"], [842, 2, 1, "", "__lt__"], [843, 2, 1, "", "__ne__"], [844, 2, 1, "", "__str__"], [845, 2, 1, "", "initialize_state"]], "skbio.workflow.method": [[847, 2, 1, "", "__call__"], [848, 2, 1, "", "__eq__"], [849, 2, 1, "", "__ge__"], [850, 2, 1, "", "__getstate__"], [851, 2, 1, "", "__gt__"], [852, 2, 1, "", "__hash__"], [853, 2, 1, "", "__le__"], [854, 2, 1, "", "__lt__"], [855, 2, 1, "", "__ne__"], [856, 2, 1, "", "__str__"]], "skbio.workflow.requires": [[858, 2, 1, "", "__call__"], [859, 2, 1, "", "__eq__"], [860, 2, 1, "", "__ge__"], [861, 2, 1, "", "__getstate__"], [862, 2, 1, "", "__gt__"], [863, 2, 1, "", "__hash__"], [864, 2, 1, "", "__le__"], [865, 2, 1, "", "__lt__"], [866, 2, 1, "", "__ne__"], [867, 2, 1, "", "__str__"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"]}, "titleterms": {"align": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 134, 143, 146], "skbio": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875], "data": [0, 136, 540], "structur": [0, 540], "optim": 0, "i": [0, 148, 189, 869], "e": 0, "product": [0, 135], "readi": 0, "algorithm": 0, "slow": 0, "educ": 0, "purpos": 0, "onli": [0, 144], "gener": [0, 135, 136, 144], "function": [0, 1, 68, 104, 148, 189, 518, 521, 540, 600, 692, 717, 869, 872, 873, 874], "exampl": [0, 1, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 521, 540, 602, 692, 717, 871, 873, 875], "divers": [1, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], "calcul": 1, "driver": 1, "input": 1, "valid": [1, 145], "count": [1, 241, 310, 360, 413, 470, 755], "vector": 1, "specifi": 1, "metric": [1, 518], "subpackag": [1, 869, 871, 872], "alignmentstructur": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "__eq__": [3, 18, 33, 151, 164, 194, 206, 227, 281, 297, 347, 399, 457, 492, 543, 567, 604, 615, 626, 637, 648, 659, 670, 681, 694, 731, 816, 836, 848, 859], "__ge__": [4, 19, 34, 152, 165, 195, 207, 228, 282, 298, 348, 400, 458, 493, 544, 568, 605, 616, 627, 638, 649, 660, 671, 682, 695, 732, 817, 837, 849, 860], "__getitem__": [5, 35, 229, 299, 349, 401, 459, 494, 545, 569, 733], "__getstate__": [6, 20, 36, 153, 166, 196, 208, 230, 283, 300, 350, 402, 460, 495, 546, 570, 606, 617, 628, 639, 650, 661, 672, 683, 696, 734, 819, 838, 850, 861], "__gt__": [7, 21, 37, 154, 167, 197, 209, 231, 284, 301, 351, 403, 461, 496, 547, 571, 607, 618, 629, 640, 651, 662, 673, 684, 697, 735, 820, 839, 851, 862], "__hash__": [8, 22, 155, 168, 608, 619, 630, 641, 652, 663, 674, 685, 698, 736, 821, 840, 852, 863], "__le__": [9, 23, 39, 156, 169, 198, 210, 233, 285, 303, 353, 405, 463, 497, 548, 572, 609, 620, 631, 642, 653, 664, 675, 686, 699, 738, 822, 841, 853, 864], "__lt__": [10, 24, 41, 157, 170, 199, 211, 235, 286, 305, 355, 407, 465, 498, 549, 573, 610, 621, 632, 643, 654, 665, 676, 687, 700, 740, 823, 842, 854, 865], "__ne__": [11, 25, 42, 158, 171, 200, 212, 236, 287, 306, 356, 408, 466, 499, 550, 574, 611, 622, 633, 644, 655, 666, 677, 688, 701, 741, 824, 843, 855, 866], "__setstate__": [12, 26], "__str__": [13, 27, 44, 159, 172, 201, 213, 238, 288, 308, 358, 410, 468, 500, 551, 575, 612, 623, 634, 645, 656, 667, 678, 689, 702, 742, 827, 844, 856, 867], "is_zero_bas": 14, "set_zero_bas": 15, "stripedsmithwaterman": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "__call__": [17, 835, 847, 858], "tabularmsa": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 136], "__bool__": [29, 223, 293, 343, 395, 453], "__contains__": [30, 224, 294, 344, 396, 454, 491, 542, 566], "__copy__": [31, 204, 225, 295, 345, 397, 455, 729], "__deepcopy__": [32, 205, 226, 296, 346, 398, 456, 730], "__iter__": [38, 232, 302, 352, 404, 462, 737], "__len__": [40, 234, 304, 354, 406, 464, 739], "__reversed__": [43, 237, 307, 357, 409, 467], "append": [45, 745], "consensu": 46, "conserv": 47, "extend": [48, 760], "from_dict": [49, 505], "gap_frequ": 50, "has_metadata": [51, 257, 324, 374, 429, 475], "has_positional_metadata": [52, 259, 326, 376, 431, 476], "iter_posit": 53, "join": 54, "read": [55, 135, 136, 138, 181, 186, 219, 271, 337, 388, 443, 486, 511, 558, 584, 704, 785, 869], "reassign_index": 56, "sort": [57, 220], "to_dict": [58, 514], "write": [59, 136, 138, 183, 188, 221, 279, 341, 393, 451, 489, 517, 563, 590, 705, 806, 869], "global_pairwise_align": 60, "global_pairwise_align_nucleotid": 61, "global_pairwise_align_protein": 62, "local_pairwise_align": 63, "local_pairwise_align_nucleotid": 64, "local_pairwise_align_protein": 65, "local_pairwise_align_ssw": 66, "make_identity_substitution_matrix": 67, "alpha": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "measur": [68, 104], "ac": 69, "berger_parker_d": 70, "brillouin_d": 71, "chao1": 72, "chao1_ci": 73, "domin": 74, "doubl": 75, "enspi": 76, "esty_ci": 77, "faith_pd": 78, "fisher_alpha": 79, "gini_index": 80, "goods_coverag": 81, "heip_": 82, "kempton_taylor_q": 83, "lladser_ci": 84, "lladser_p": 85, "margalef": 86, "mcintosh_d": 87, "mcintosh_": 88, "menhinick": 89, "michaelis_menten_fit": 90, "observed_featur": 91, "observed_otu": 92, "osd": 93, "phydiv": 94, "pielou_": 95, "robbin": 96, "shannon": 97, "simpson": 98, "simpson_": 99, "singl": 100, "sob": 101, "strong": 102, "alpha_divers": 103, "beta": [104, 105, 106], "unweighted_unifrac": 105, "weighted_unifrac": 106, "beta_divers": 107, "block_beta_divers": 108, "get_alpha_diversity_metr": 109, "get_beta_diversity_metr": 110, "partial_beta_divers": 111, "io": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 869], "argumentoverridewarn": 112, "blast7formaterror": 113, "clustalformaterror": 114, "emblformaterror": 115, "fastaformaterror": 116, "fastqformaterror": 117, "fileformaterror": 118, "formatidentificationwarn": 119, "gff3formaterror": 120, "genbankformaterror": 121, "iosourceerror": 122, "lsmatformaterror": 123, "newickformaterror": 124, "ordinationformaterror": 125, "phylipformaterror": 126, "qseqformaterror": 127, "qualformaterror": 128, "stockholmformaterror": 129, "unrecognizedformaterror": 130, "simpl": 131, "binari": 131, "dissimilar": 131, "matrix": [131, 140, 540], "format": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 869], "binary_dm": 131, "support": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 869], "specif": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "refer": [131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 147, 521, 540, 692, 868], "blast": [132, 133], "6": [132, 868], "blast6": 132, "column": [132, 133, 145], "type": [132, 133, 145], "paramet": [132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147], "7": 133, "blast7": 133, "clustal": 134, "section": [134, 135, 138, 143], "embl": 135, "featur": [135, 138], "level": 135, "befor": [135, 138], "fh": 135, "header": [135, 136, 143, 146], "ft": 135, "sq": 135, "file": [135, 136, 138, 869], "us": [135, 869], "fasta": 136, "qual": 136, "sequenc": [136, 143, 146, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 871], "reader": [136, 138, 139, 160], "writer": [136, 139, 162], "fastq": 137, "qualiti": 137, "score": 137, "variant": 137, "genbank": 138, "locat": 138, "string": 138, "origin": 138, "gff3": 139, "label": [140, 141], "squar": 140, "lsmat": 140, "newick": 141, "formal": 141, "grammar": 141, "explan": 141, "basic": 141, "symbol": 141, "applic": 141, "rule": 141, "ad": 141, "node": [141, 147], "inform": 141, "advanc": 141, "length": 141, "inlin": 141, "comment": [141, 145], "whitespac": [141, 145], "caveat": 141, "ordin": [142, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716], "result": 142, "phylip": 143, "multipl": [143, 146], "qseq": 144, "metadata": [145, 146, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 870], "requir": [145, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867], "lead": 145, "trail": 145, "charact": 145, "empti": 145, "row": 145, "identifi": 145, "recommend": 145, "number": 145, "stockholm": 146, "gf": 146, "g": 146, "gr": 146, "gc": 146, "footer": 146, "taxdump": 147, "dmp": 147, "name": 147, "divis": 147, "gencod": 147, "o": [148, 189, 869], "registri": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], "class": [148, 540, 602, 692, 870, 871, 873, 875], "except": [148, 540, 869, 873], "creat": 148, "new": 148, "scikit": [148, 868, 869], "bio": [148, 868, 869], "reserv": 148, "keyword": 148, "argument": 148, "duplicateregistrationerror": 149, "sniffer": 161, "ioregistri": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183], "add_format": 173, "create_format": [174, 185], "get_read": 175, "get_sniff": 176, "get_writ": 177, "list_read_format": 178, "list_write_format": 179, "monkey_patch": 180, "sniff": [182, 187], "invalidregistrationerror": 184, "util": [189, 190, 191, 192, 692, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 873, 874], "open": 190, "open_fil": [191, 192], "interv": [193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "drop": [202, 216], "intervalmetadata": [203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "add": 214, "concat": [215, 240, 309, 359, 412, 469], "merg": 217, "queri": 218, "dna": [222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279], "complement": [239, 411], "definit": [242, 311, 361, 414], "degap": [243, 312, 362, 415], "degener": [244, 313, 363, 416], "distanc": [245, 314, 364, 417, 471, 518, 519, 520, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 759], "expand_degener": [246, 315, 365, 418], "find_motif": [247, 316, 366, 419], "find_with_regex": [248, 317, 367, 420, 472], "frequenc": [249, 318, 368, 421, 473], "gap": [250, 319, 369, 422], "gc_content": [251, 423], "gc_frequenc": [252, 424], "has_definit": [253, 320, 370, 425], "has_degener": [254, 321, 371, 426], "has_gap": [255, 322, 372, 427], "has_interval_metadata": [256, 323, 373, 428, 474], "has_nondegener": [258, 325, 375, 430], "index": [260, 327, 378, 432, 477, 509, 556, 581], "is_reverse_compl": [261, 433], "iter_contigu": [262, 328, 379, 434, 478], "iter_km": [263, 329, 380, 435, 479], "kmer_frequ": [264, 330, 381, 436, 480], "lowercas": [265, 331, 382, 437, 481], "match_frequ": [266, 332, 383, 438, 482], "match": [267, 333, 384, 439, 483], "mismatch_frequ": [268, 334, 385, 440, 484], "mismatch": [269, 335, 386, 441, 485], "nondegener": [270, 336, 387, 442], "replac": [272, 338, 389, 444, 487], "reverse_compl": [273, 445], "to_indic": [274, 339, 391, 447, 488], "to_regex": [275, 340, 392, 448], "transcrib": 276, "translat": [277, 290, 449], "translate_six_fram": [278, 291, 450], "geneticcod": [280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], "from_ncbi": 289, "grammaredsequ": [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "protein": [342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393], "has_stop": 377, "stop": 390, "rna": [394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451], "reverse_transcrib": 446, "substitutionmatrix": [490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517], "between": [501, 552, 576], "by_nam": 502, "copi": [503, 553, 578, 754], "filter": [504, 554, 579], "from_iter": [506, 555, 580], "get_nam": 507, "ident": 508, "plot": [510, 557, 583, 703], "redundant_form": [512, 559, 585], "to_data_fram": [513, 560, 586], "transpos": [515, 561, 588], "within": [516, 562, 589], "ham": 519, "kmer_dist": 520, "composit": [521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539], "statist": [521, 540, 600, 872], "stat": [521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 872], "alr": 522, "alr_inv": 523, "ancom": 524, "central": 525, "closur": 526, "clr": 527, "clr_inv": 528, "ilr": 529, "ilr_inv": 530, "inner": 531, "multiplicative_replac": 532, "pairwise_vlr": 533, "perturb": 534, "perturb_inv": 535, "power": [536, 717, 718, 719, 720, 721], "sbp_basi": 537, "tree_basi": 538, "vlr": 539, "matric": 540, "base": 540, "dissimilaritymatrix": [540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563], "distancematrix": [540, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590], "categor": 540, "variabl": 540, "continu": 540, "comparison": 540, "dissimilaritymatrixerror": 564, "condensed_form": 577, "permut": 582, "to_seri": 587, "distancematrixerror": 591, "missingiderror": 592, "anosim": 593, "bioenv": 594, "mantel": 595, "permanova": 596, "permdisp": 597, "pwmantel": 598, "randdm": 599, "evolutionari": 600, "evolv": [600, 601], "cophylogenet": 600, "method": [600, 692, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856], "hommola_cospeci": 601, "gradient": [602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "analys": 602, "averagegradientanova": [603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613], "get_trajectori": [613, 635, 646, 679, 690], "categoryresult": [614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624], "to_fil": [624, 657, 668], "firstdifferencegradientanova": [625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635], "gradientanova": [636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646], "gradientanovaresult": [647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657], "groupresult": [658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668], "trajectorygradientanova": [669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679], "windowdifferencegradientanova": [680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "isubsampl": 691, "ordinationresult": [693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705], "ca": 706, "cca": 707, "corr": 708, "e_matrix": 709, "f_matrix": 710, "mean_and_std": 711, "pcoa": 712, "pcoa_biplot": 713, "rda": 714, "scale": 715, "svd_rank": 716, "empir": 717, "estim": 717, "confidence_bound": 718, "paired_subsampl": 719, "subsample_paired_pow": 720, "subsample_pow": 721, "subsample_count": 722, "tree": [723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 873], "duplicatenodeerror": 723, "missingnodeerror": 724, "nolengtherror": 725, "noparenterror": 726, "treeerror": 727, "treenod": [728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806], "accumulate_to_ancestor": 743, "ancestor": 744, "ascii_art": 746, "assign_id": 747, "assign_support": 748, "bifurc": 749, "cache_attr": 750, "compare_rfd": 751, "compare_subset": 752, "compare_tip_dist": 753, "create_cach": 756, "deepcopi": 757, "descending_branch_length": 758, "find": 761, "find_al": 762, "find_by_func": 763, "find_by_id": 764, "from_linkage_matrix": 765, "from_taxdump": 766, "from_taxonomi": 767, "get_max_dist": 768, "has_children": 769, "index_tre": 770, "invalidate_cach": 771, "is_root": 772, "is_tip": 773, "lca": 774, "levelord": 775, "lowest_common_ancestor": 776, "neighbor": 777, "non_tip": 778, "observed_node_count": 779, "pop": 780, "postord": 781, "pre_and_postord": 782, "preorder": 783, "prune": 784, "remov": 786, "remove_delet": 787, "root": 788, "root_at": 789, "root_at_midpoint": 790, "shear": 791, "shuffl": 792, "sibl": 793, "subset": [794, 795], "subtre": 796, "tip_tip_dist": 797, "tip": 798, "to_arrai": 799, "to_taxonomi": 800, "travers": 801, "unpack": 802, "unpack_by_func": 803, "unrooted_copi": 804, "unrooted_deepcopi": 805, "majority_rul": 807, "nj": 808, "efficiencywarn": 809, "representationwarn": 810, "assert_data_frame_almost_equ": 811, "assert_ordination_results_equ": 812, "cardinal_to_ordin": 813, "classproperti": [814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830], "__delete__": 815, "__get__": 818, "__set__": 825, "__set_name__": 826, "delet": 828, "getter": 829, "setter": 830, "find_dupl": 831, "get_data_path": 832, "safe_md5": 833, "workflow": [834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 875], "initialize_st": 845, "0": 868, "dev": 868, "api": 868, "user": 869, "warn": [869, 874], "introduct": 869, "what": 869, "kind": 869, "can": 869, "from": 869, "represent": 873, "phylogenet": 873, "reconstruct": 873, "test": 874, "miscellan": 874, "construct": 875, "decor": 875}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Alignments (skbio.alignment)": [[0, "alignments-skbio-alignment"]], "Data Structures": [[0, "data-structures"]], "Optimized (i.e., production-ready) Alignment Algorithms": [[0, "optimized-i-e-production-ready-alignment-algorithms"]], "Slow (i.e., educational-purposes only) Alignment Algorithms": [[0, "slow-i-e-educational-purposes-only-alignment-algorithms"]], "General functionality": [[0, "general-functionality"]], "Data Structure Examples": [[0, "data-structure-examples"]], "Alignment Algorithm Examples": [[0, "alignment-algorithm-examples"]], "Optimized Alignment Algorithm Examples": [[0, "optimized-alignment-algorithm-examples"]], "Slow Alignment Algorithm Examples": [[0, "slow-alignment-algorithm-examples"]], "Diversity calculations (skbio.diversity)": [[1, "diversity-calculations-skbio-diversity"]], "Driver functions": [[1, "driver-functions"]], "Input validation": [[1, "input-validation"]], "Count vectors": [[1, "count-vectors"]], "Specifying a diversity metric": [[1, "specifying-a-diversity-metric"]], "Subpackages": [[1, "subpackages"], [869, "subpackages"], [871, "subpackages"], [872, "subpackages"]], "Functions": [[1, "functions"], [68, "functions"], [104, "functions"], [148, "functions"], [189, "functions"], [518, "functions"], [521, "functions"], [540, "functions"], [600, "functions"], [717, "functions"], [872, "functions"]], "Examples": [[1, "examples"], [132, "examples"], [133, "examples"], [134, "examples"], [135, "examples"], [136, "examples"], [137, "examples"], [138, "examples"], [139, "examples"], [141, "examples"], [142, "examples"], [143, "examples"], [144, "examples"], [146, "examples"], [147, "examples"], [521, "examples"], [540, "examples"], [602, "examples"], [692, "examples"], [717, "examples"], [871, "examples"], [873, "examples"], [875, "examples"]], "skbio.alignment.AlignmentStructure": [[2, "skbio-alignment-alignmentstructure"]], "skbio.alignment.AlignmentStructure.__eq__": [[3, "skbio-alignment-alignmentstructure-eq"]], "skbio.alignment.AlignmentStructure.__ge__": [[4, "skbio-alignment-alignmentstructure-ge"]], "skbio.alignment.AlignmentStructure.__getitem__": [[5, "skbio-alignment-alignmentstructure-getitem"]], "skbio.alignment.AlignmentStructure.__getstate__": [[6, "skbio-alignment-alignmentstructure-getstate"]], "skbio.alignment.AlignmentStructure.__gt__": [[7, "skbio-alignment-alignmentstructure-gt"]], "skbio.alignment.AlignmentStructure.__hash__": [[8, "skbio-alignment-alignmentstructure-hash"]], "skbio.alignment.AlignmentStructure.__le__": [[9, "skbio-alignment-alignmentstructure-le"]], "skbio.alignment.AlignmentStructure.__lt__": [[10, "skbio-alignment-alignmentstructure-lt"]], "skbio.alignment.AlignmentStructure.__ne__": [[11, "skbio-alignment-alignmentstructure-ne"]], "skbio.alignment.AlignmentStructure.__setstate__": [[12, "skbio-alignment-alignmentstructure-setstate"]], "skbio.alignment.AlignmentStructure.__str__": [[13, "skbio-alignment-alignmentstructure-str"]], "skbio.alignment.AlignmentStructure.is_zero_based": [[14, "skbio-alignment-alignmentstructure-is-zero-based"]], "skbio.alignment.AlignmentStructure.set_zero_based": [[15, "skbio-alignment-alignmentstructure-set-zero-based"]], "skbio.alignment.StripedSmithWaterman": [[16, "skbio-alignment-stripedsmithwaterman"]], "skbio.alignment.StripedSmithWaterman.__call__": [[17, "skbio-alignment-stripedsmithwaterman-call"]], "skbio.alignment.StripedSmithWaterman.__eq__": [[18, "skbio-alignment-stripedsmithwaterman-eq"]], "skbio.alignment.StripedSmithWaterman.__ge__": [[19, "skbio-alignment-stripedsmithwaterman-ge"]], "skbio.alignment.StripedSmithWaterman.__getstate__": [[20, "skbio-alignment-stripedsmithwaterman-getstate"]], "skbio.alignment.StripedSmithWaterman.__gt__": [[21, "skbio-alignment-stripedsmithwaterman-gt"]], "skbio.alignment.StripedSmithWaterman.__hash__": [[22, "skbio-alignment-stripedsmithwaterman-hash"]], "skbio.alignment.StripedSmithWaterman.__le__": [[23, "skbio-alignment-stripedsmithwaterman-le"]], "skbio.alignment.StripedSmithWaterman.__lt__": [[24, "skbio-alignment-stripedsmithwaterman-lt"]], "skbio.alignment.StripedSmithWaterman.__ne__": [[25, "skbio-alignment-stripedsmithwaterman-ne"]], "skbio.alignment.StripedSmithWaterman.__setstate__": [[26, "skbio-alignment-stripedsmithwaterman-setstate"]], "skbio.alignment.StripedSmithWaterman.__str__": [[27, "skbio-alignment-stripedsmithwaterman-str"]], "skbio.alignment.TabularMSA": [[28, "skbio-alignment-tabularmsa"]], "skbio.alignment.TabularMSA.__bool__": [[29, "skbio-alignment-tabularmsa-bool"]], "skbio.alignment.TabularMSA.__contains__": [[30, "skbio-alignment-tabularmsa-contains"]], "skbio.alignment.TabularMSA.__copy__": [[31, "skbio-alignment-tabularmsa-copy"]], "skbio.alignment.TabularMSA.__deepcopy__": [[32, "skbio-alignment-tabularmsa-deepcopy"]], "skbio.alignment.TabularMSA.__eq__": [[33, "skbio-alignment-tabularmsa-eq"]], "skbio.alignment.TabularMSA.__ge__": [[34, "skbio-alignment-tabularmsa-ge"]], "skbio.alignment.TabularMSA.__getitem__": [[35, "skbio-alignment-tabularmsa-getitem"]], "skbio.alignment.TabularMSA.__getstate__": [[36, "skbio-alignment-tabularmsa-getstate"]], "skbio.alignment.TabularMSA.__gt__": [[37, "skbio-alignment-tabularmsa-gt"]], "skbio.alignment.TabularMSA.__iter__": [[38, "skbio-alignment-tabularmsa-iter"]], "skbio.alignment.TabularMSA.__le__": [[39, "skbio-alignment-tabularmsa-le"]], "skbio.alignment.TabularMSA.__len__": [[40, "skbio-alignment-tabularmsa-len"]], "skbio.alignment.TabularMSA.__lt__": [[41, "skbio-alignment-tabularmsa-lt"]], "skbio.alignment.TabularMSA.__ne__": [[42, "skbio-alignment-tabularmsa-ne"]], "skbio.alignment.TabularMSA.__reversed__": [[43, "skbio-alignment-tabularmsa-reversed"]], "skbio.alignment.TabularMSA.__str__": [[44, "skbio-alignment-tabularmsa-str"]], "skbio.alignment.TabularMSA.append": [[45, "skbio-alignment-tabularmsa-append"]], "skbio.alignment.TabularMSA.consensus": [[46, "skbio-alignment-tabularmsa-consensus"]], "skbio.alignment.TabularMSA.conservation": [[47, "skbio-alignment-tabularmsa-conservation"]], "skbio.alignment.TabularMSA.extend": [[48, "skbio-alignment-tabularmsa-extend"]], "skbio.alignment.TabularMSA.from_dict": [[49, "skbio-alignment-tabularmsa-from-dict"]], "skbio.alignment.TabularMSA.gap_frequencies": [[50, "skbio-alignment-tabularmsa-gap-frequencies"]], "skbio.alignment.TabularMSA.has_metadata": [[51, "skbio-alignment-tabularmsa-has-metadata"]], "skbio.alignment.TabularMSA.has_positional_metadata": [[52, "skbio-alignment-tabularmsa-has-positional-metadata"]], "skbio.alignment.TabularMSA.iter_positions": [[53, "skbio-alignment-tabularmsa-iter-positions"]], "skbio.alignment.TabularMSA.join": [[54, "skbio-alignment-tabularmsa-join"]], "skbio.alignment.TabularMSA.read": [[55, "skbio-alignment-tabularmsa-read"]], "skbio.alignment.TabularMSA.reassign_index": [[56, "skbio-alignment-tabularmsa-reassign-index"]], "skbio.alignment.TabularMSA.sort": [[57, "skbio-alignment-tabularmsa-sort"]], "skbio.alignment.TabularMSA.to_dict": [[58, "skbio-alignment-tabularmsa-to-dict"]], "skbio.alignment.TabularMSA.write": [[59, "skbio-alignment-tabularmsa-write"]], "skbio.alignment.global_pairwise_align": [[60, "skbio-alignment-global-pairwise-align"]], "skbio.alignment.global_pairwise_align_nucleotide": [[61, "skbio-alignment-global-pairwise-align-nucleotide"]], "skbio.alignment.global_pairwise_align_protein": [[62, "skbio-alignment-global-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align": [[63, "skbio-alignment-local-pairwise-align"]], "skbio.alignment.local_pairwise_align_nucleotide": [[64, "skbio-alignment-local-pairwise-align-nucleotide"]], "skbio.alignment.local_pairwise_align_protein": [[65, "skbio-alignment-local-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align_ssw": [[66, "skbio-alignment-local-pairwise-align-ssw"]], "skbio.alignment.make_identity_substitution_matrix": [[67, "skbio-alignment-make-identity-substitution-matrix"]], "Alpha diversity measures (skbio.diversity.alpha)": [[68, "alpha-diversity-measures-skbio-diversity-alpha"]], "skbio.diversity.alpha.ace": [[69, "skbio-diversity-alpha-ace"]], "skbio.diversity.alpha.berger_parker_d": [[70, "skbio-diversity-alpha-berger-parker-d"]], "skbio.diversity.alpha.brillouin_d": [[71, "skbio-diversity-alpha-brillouin-d"]], "skbio.diversity.alpha.chao1": [[72, "skbio-diversity-alpha-chao1"]], "skbio.diversity.alpha.chao1_ci": [[73, "skbio-diversity-alpha-chao1-ci"]], "skbio.diversity.alpha.dominance": [[74, "skbio-diversity-alpha-dominance"]], "skbio.diversity.alpha.doubles": [[75, "skbio-diversity-alpha-doubles"]], "skbio.diversity.alpha.enspie": [[76, "skbio-diversity-alpha-enspie"]], "skbio.diversity.alpha.esty_ci": [[77, "skbio-diversity-alpha-esty-ci"]], "skbio.diversity.alpha.faith_pd": [[78, "skbio-diversity-alpha-faith-pd"]], "skbio.diversity.alpha.fisher_alpha": [[79, "skbio-diversity-alpha-fisher-alpha"]], "skbio.diversity.alpha.gini_index": [[80, "skbio-diversity-alpha-gini-index"]], "skbio.diversity.alpha.goods_coverage": [[81, "skbio-diversity-alpha-goods-coverage"]], "skbio.diversity.alpha.heip_e": [[82, "skbio-diversity-alpha-heip-e"]], "skbio.diversity.alpha.kempton_taylor_q": [[83, "skbio-diversity-alpha-kempton-taylor-q"]], "skbio.diversity.alpha.lladser_ci": [[84, "skbio-diversity-alpha-lladser-ci"]], "skbio.diversity.alpha.lladser_pe": [[85, "skbio-diversity-alpha-lladser-pe"]], "skbio.diversity.alpha.margalef": [[86, "skbio-diversity-alpha-margalef"]], "skbio.diversity.alpha.mcintosh_d": [[87, "skbio-diversity-alpha-mcintosh-d"]], "skbio.diversity.alpha.mcintosh_e": [[88, "skbio-diversity-alpha-mcintosh-e"]], "skbio.diversity.alpha.menhinick": [[89, "skbio-diversity-alpha-menhinick"]], "skbio.diversity.alpha.michaelis_menten_fit": [[90, "skbio-diversity-alpha-michaelis-menten-fit"]], "skbio.diversity.alpha.observed_features": [[91, "skbio-diversity-alpha-observed-features"]], "skbio.diversity.alpha.observed_otus": [[92, "skbio-diversity-alpha-observed-otus"]], "skbio.diversity.alpha.osd": [[93, "skbio-diversity-alpha-osd"]], "skbio.diversity.alpha.phydiv": [[94, "skbio-diversity-alpha-phydiv"]], "skbio.diversity.alpha.pielou_e": [[95, "skbio-diversity-alpha-pielou-e"]], "skbio.diversity.alpha.robbins": [[96, "skbio-diversity-alpha-robbins"]], "skbio.diversity.alpha.shannon": [[97, "skbio-diversity-alpha-shannon"]], "skbio.diversity.alpha.simpson": [[98, "skbio-diversity-alpha-simpson"]], "skbio.diversity.alpha.simpson_e": [[99, "skbio-diversity-alpha-simpson-e"]], "skbio.diversity.alpha.singles": [[100, "skbio-diversity-alpha-singles"]], "skbio.diversity.alpha.sobs": [[101, "skbio-diversity-alpha-sobs"]], "skbio.diversity.alpha.strong": [[102, "skbio-diversity-alpha-strong"]], "skbio.diversity.alpha_diversity": [[103, "skbio-diversity-alpha-diversity"]], "Beta diversity measures (skbio.diversity.beta)": [[104, "beta-diversity-measures-skbio-diversity-beta"]], "skbio.diversity.beta.unweighted_unifrac": [[105, "skbio-diversity-beta-unweighted-unifrac"]], "skbio.diversity.beta.weighted_unifrac": [[106, "skbio-diversity-beta-weighted-unifrac"]], "skbio.diversity.beta_diversity": [[107, "skbio-diversity-beta-diversity"]], "skbio.diversity.block_beta_diversity": [[108, "skbio-diversity-block-beta-diversity"]], "skbio.diversity.get_alpha_diversity_metrics": [[109, "skbio-diversity-get-alpha-diversity-metrics"]], "skbio.diversity.get_beta_diversity_metrics": [[110, "skbio-diversity-get-beta-diversity-metrics"]], "skbio.diversity.partial_beta_diversity": [[111, "skbio-diversity-partial-beta-diversity"]], "skbio.io.ArgumentOverrideWarning": [[112, "skbio-io-argumentoverridewarning"]], "skbio.io.BLAST7FormatError": [[113, "skbio-io-blast7formaterror"]], "skbio.io.ClustalFormatError": [[114, "skbio-io-clustalformaterror"]], "skbio.io.EMBLFormatError": [[115, "skbio-io-emblformaterror"]], "skbio.io.FASTAFormatError": [[116, "skbio-io-fastaformaterror"]], "skbio.io.FASTQFormatError": [[117, "skbio-io-fastqformaterror"]], "skbio.io.FileFormatError": [[118, "skbio-io-fileformaterror"]], "skbio.io.FormatIdentificationWarning": [[119, "skbio-io-formatidentificationwarning"]], "skbio.io.GFF3FormatError": [[120, "skbio-io-gff3formaterror"]], "skbio.io.GenBankFormatError": [[121, "skbio-io-genbankformaterror"]], "skbio.io.IOSourceError": [[122, "skbio-io-iosourceerror"]], "skbio.io.LSMatFormatError": [[123, "skbio-io-lsmatformaterror"]], "skbio.io.NewickFormatError": [[124, "skbio-io-newickformaterror"]], "skbio.io.OrdinationFormatError": [[125, "skbio-io-ordinationformaterror"]], "skbio.io.PhylipFormatError": [[126, "skbio-io-phylipformaterror"]], "skbio.io.QSeqFormatError": [[127, "skbio-io-qseqformaterror"]], "skbio.io.QUALFormatError": [[128, "skbio-io-qualformaterror"]], "skbio.io.StockholmFormatError": [[129, "skbio-io-stockholmformaterror"]], "skbio.io.UnrecognizedFormatError": [[130, "skbio-io-unrecognizedformaterror"]], "Simple binary dissimilarity matrix format (skbio.io.format.binary_dm)": [[131, "simple-binary-dissimilarity-matrix-format-skbio-io-format-binary-dm"]], "Format Support": [[131, "format-support"], [132, "format-support"], [133, "format-support"], [134, "format-support"], [135, "format-support"], [136, "format-support"], [137, "format-support"], [138, "format-support"], [139, "format-support"], [140, "format-support"], [141, "format-support"], [142, "format-support"], [143, "format-support"], [144, "format-support"], [145, "format-support"], [146, "format-support"], [147, "format-support"]], "Format Specification": [[131, "format-specification"], [132, "format-specification"], [133, "format-specification"], [134, "format-specification"], [135, "format-specification"], [136, "format-specification"], [137, "format-specification"], [138, "format-specification"], [139, "format-specification"], [140, "format-specification"], [141, "format-specification"], [142, "format-specification"], [143, "format-specification"], [144, "format-specification"], [145, "format-specification"], [146, "format-specification"], [147, "format-specification"]], "References": [[131, "references"], [132, "references"], [133, "references"], [134, "references"], [135, "references"], [136, "references"], [137, "references"], [138, "references"], [139, "references"], [141, "references"], [143, "references"], [144, "references"], [146, "references"], [147, "references"], [521, "references"], [540, "references"], [692, "references"]], "BLAST+6 format (skbio.io.format.blast6)": [[132, "blast-6-format-skbio-io-format-blast6"]], "BLAST Column Types": [[132, "blast-column-types"], [133, "blast-column-types"]], "Format Parameters": [[132, "format-parameters"], [134, "format-parameters"], [136, "format-parameters"], [137, "format-parameters"], [138, "format-parameters"], [139, "format-parameters"], [140, "format-parameters"], [141, "format-parameters"], [143, "format-parameters"], [144, "format-parameters"], [146, "format-parameters"], [147, "format-parameters"]], "BLAST+7 format (skbio.io.format.blast7)": [[133, "blast-7-format-skbio-io-format-blast7"]], "Clustal format (skbio.io.format.clustal)": [[134, "clustal-format-skbio-io-format-clustal"]], "Alignment Section": [[134, "alignment-section"], [143, "alignment-section"]], "EMBL format (skbio.io.format.embl)": [[135, "embl-format-skbio-io-format-embl"]], "Feature Level Products": [[135, "feature-level-products"]], "Sections before FH (Feature Header)": [[135, "sections-before-fh-feature-header"]], "FT section": [[135, "ft-section"]], "SQ section": [[135, "sq-section"]], "Reading EMBL Files": [[135, "reading-embl-files"]], "Reading EMBL Files using generators": [[135, "reading-embl-files-using-generators"]], "FASTA/QUAL format (skbio.io.format.fasta)": [[136, "fasta-qual-format-skbio-io-format-fasta"]], "FASTA Format": [[136, "fasta-format"]], "Sequence Header": [[136, "sequence-header"]], "Sequence Data": [[136, "sequence-data"]], "QUAL Format": [[136, "qual-format"]], "QUAL File Parameter (Readers and Writers)": [[136, "qual-file-parameter-readers-and-writers"]], "Reader-specific Parameters": [[136, "reader-specific-parameters"], [138, "reader-specific-parameters"], [139, "reader-specific-parameters"]], "Generator and TabularMSA Reader Parameters": [[136, "generator-and-tabularmsa-reader-parameters"]], "Sequence Reader Parameters": [[136, "sequence-reader-parameters"]], "Writer-specific Parameters": [[136, "writer-specific-parameters"], [139, "writer-specific-parameters"]], "Reading and Writing FASTA Files": [[136, "reading-and-writing-fasta-files"]], "Reading and Writing FASTA/QUAL Files": [[136, "reading-and-writing-fasta-qual-files"]], "FASTQ format (skbio.io.format.fastq)": [[137, "fastq-format-skbio-io-format-fastq"]], "Quality Score Variants": [[137, "quality-score-variants"]], "GenBank format (skbio.io.format.genbank)": [[138, "genbank-format-skbio-io-format-genbank"]], "Sections before FEATURES": [[138, "sections-before-features"]], "FEATURES section": [[138, "features-section"]], "Location string": [[138, "location-string"]], "ORIGIN section": [[138, "origin-section"]], "Reading and Writing GenBank Files": [[138, "reading-and-writing-genbank-files"]], "GFF3 format (skbio.io.format.gff3)": [[139, "gff3-format-skbio-io-format-gff3"]], "Labeled square matrix format (skbio.io.format.lsmat)": [[140, "labeled-square-matrix-format-skbio-io-format-lsmat"]], "Newick format (skbio.io.format.newick)": [[141, "newick-format-skbio-io-format-newick"]], "Formal Grammar": [[141, "formal-grammar"]], "Explanation": [[141, "explanation"]], "Basic Symbols": [[141, "basic-symbols"]], "Application of Rules": [[141, "application-of-rules"]], "Adding Node Information": [[141, "adding-node-information"]], "Advanced Label and Length Rules": [[141, "advanced-label-and-length-rules"]], "Inline Comments": [[141, "inline-comments"]], "Whitespace": [[141, "whitespace"]], "Caveats": [[141, "caveats"]], "Ordination results format (skbio.io.format.ordination)": [[142, "ordination-results-format-skbio-io-format-ordination"]], "PHYLIP multiple sequence alignment format (skbio.io.format.phylip)": [[143, "phylip-multiple-sequence-alignment-format-skbio-io-format-phylip"]], "Header Section": [[143, "header-section"]], "QSeq format (skbio.io.format.qseq)": [[144, "qseq-format-skbio-io-format-qseq"]], "Generators Only": [[144, "generators-only"]], "Metadata Formatting Requirements": [[145, "metadata-formatting-requirements"]], "Metadata Validation": [[145, "metadata-validation"]], "Leading and trailing whitespace characters": [[145, "leading-and-trailing-whitespace-characters"]], "Comments and Empty Rows": [[145, "comments-and-empty-rows"]], "Identifier Column": [[145, "identifier-column"]], "Recommendations for Identifiers": [[145, "recommendations-for-identifiers"]], "Metadata Columns": [[145, "metadata-columns"]], "Column Types": [[145, "column-types"]], "Number Formatting": [[145, "number-formatting"]], "Stockholm format (skbio.io.format.stockholm)": [[146, "stockholm-format-skbio-io-format-stockholm"]], "Header": [[146, "header"]], "Multiple Sequence Alignment": [[146, "multiple-sequence-alignment"]], "Metadata": [[146, "metadata"]], "GF metadata": [[146, "gf-metadata"]], "GS metadata": [[146, "gs-metadata"]], "GR metadata": [[146, "gr-metadata"]], "GC metadata": [[146, "gc-metadata"]], "Footer": [[146, "footer"]], "Taxdump format (skbio.io.format.taxdump)": [[147, "taxdump-format-skbio-io-format-taxdump"]], "nodes.dmp": [[147, "nodes-dmp"]], "names.dmp": [[147, "names-dmp"]], "division.dmp": [[147, "division-dmp"]], "gencode.dmp": [[147, "gencode-dmp"]], "I/O Registry (skbio.io.registry)": [[148, "i-o-registry-skbio-io-registry"]], "Classes": [[148, "classes"], [540, "classes"], [602, "classes"], [692, "classes"], [870, "classes"], [871, "classes"], [873, "classes"], [875, "classes"]], "Exceptions": [[148, "exceptions"], [540, "exceptions"], [873, "exceptions"]], "Creating a new format for scikit-bio": [[148, "creating-a-new-format-for-scikit-bio"]], "Reserved Keyword Arguments": [[148, "reserved-keyword-arguments"]], "skbio.io.registry.DuplicateRegistrationError": [[149, "skbio-io-registry-duplicateregistrationerror"]], "skbio.io.registry.Format": [[150, "skbio-io-registry-format"]], "skbio.io.registry.Format.__eq__": [[151, "skbio-io-registry-format-eq"]], "skbio.io.registry.Format.__ge__": [[152, "skbio-io-registry-format-ge"]], "skbio.io.registry.Format.__getstate__": [[153, "skbio-io-registry-format-getstate"]], "skbio.io.registry.Format.__gt__": [[154, "skbio-io-registry-format-gt"]], "skbio.io.registry.Format.__hash__": [[155, "skbio-io-registry-format-hash"]], "skbio.io.registry.Format.__le__": [[156, "skbio-io-registry-format-le"]], "skbio.io.registry.Format.__lt__": [[157, "skbio-io-registry-format-lt"]], "skbio.io.registry.Format.__ne__": [[158, "skbio-io-registry-format-ne"]], "skbio.io.registry.Format.__str__": [[159, "skbio-io-registry-format-str"]], "skbio.io.registry.Format.reader": [[160, "skbio-io-registry-format-reader"]], "skbio.io.registry.Format.sniffer": [[161, "skbio-io-registry-format-sniffer"]], "skbio.io.registry.Format.writer": [[162, "skbio-io-registry-format-writer"]], "skbio.io.registry.IORegistry": [[163, "skbio-io-registry-ioregistry"]], "skbio.io.registry.IORegistry.__eq__": [[164, "skbio-io-registry-ioregistry-eq"]], "skbio.io.registry.IORegistry.__ge__": [[165, "skbio-io-registry-ioregistry-ge"]], "skbio.io.registry.IORegistry.__getstate__": [[166, "skbio-io-registry-ioregistry-getstate"]], "skbio.io.registry.IORegistry.__gt__": [[167, "skbio-io-registry-ioregistry-gt"]], "skbio.io.registry.IORegistry.__hash__": [[168, "skbio-io-registry-ioregistry-hash"]], "skbio.io.registry.IORegistry.__le__": [[169, "skbio-io-registry-ioregistry-le"]], "skbio.io.registry.IORegistry.__lt__": [[170, "skbio-io-registry-ioregistry-lt"]], "skbio.io.registry.IORegistry.__ne__": [[171, "skbio-io-registry-ioregistry-ne"]], "skbio.io.registry.IORegistry.__str__": [[172, "skbio-io-registry-ioregistry-str"]], "skbio.io.registry.IORegistry.add_format": [[173, "skbio-io-registry-ioregistry-add-format"]], "skbio.io.registry.IORegistry.create_format": [[174, "skbio-io-registry-ioregistry-create-format"]], "skbio.io.registry.IORegistry.get_reader": [[175, "skbio-io-registry-ioregistry-get-reader"]], "skbio.io.registry.IORegistry.get_sniffer": [[176, "skbio-io-registry-ioregistry-get-sniffer"]], "skbio.io.registry.IORegistry.get_writer": [[177, "skbio-io-registry-ioregistry-get-writer"]], "skbio.io.registry.IORegistry.list_read_formats": [[178, "skbio-io-registry-ioregistry-list-read-formats"]], "skbio.io.registry.IORegistry.list_write_formats": [[179, "skbio-io-registry-ioregistry-list-write-formats"]], "skbio.io.registry.IORegistry.monkey_patch": [[180, "skbio-io-registry-ioregistry-monkey-patch"]], "skbio.io.registry.IORegistry.read": [[181, "skbio-io-registry-ioregistry-read"]], "skbio.io.registry.IORegistry.sniff": [[182, "skbio-io-registry-ioregistry-sniff"]], "skbio.io.registry.IORegistry.write": [[183, "skbio-io-registry-ioregistry-write"]], "skbio.io.registry.InvalidRegistrationError": [[184, "skbio-io-registry-invalidregistrationerror"]], "skbio.io.registry.create_format": [[185, "skbio-io-registry-create-format"]], "skbio.io.registry.read": [[186, "skbio-io-registry-read"]], "skbio.io.registry.sniff": [[187, "skbio-io-registry-sniff"]], "skbio.io.registry.write": [[188, "skbio-io-registry-write"]], "I/O utils (skbio.io.util)": [[189, "i-o-utils-skbio-io-util"]], "skbio.io.util.open": [[190, "skbio-io-util-open"]], "skbio.io.util.open_file": [[191, "skbio-io-util-open-file"]], "skbio.io.util.open_files": [[192, "skbio-io-util-open-files"]], "skbio.metadata.Interval": [[193, "skbio-metadata-interval"]], "skbio.metadata.Interval.__eq__": [[194, "skbio-metadata-interval-eq"]], "skbio.metadata.Interval.__ge__": [[195, "skbio-metadata-interval-ge"]], "skbio.metadata.Interval.__getstate__": [[196, "skbio-metadata-interval-getstate"]], "skbio.metadata.Interval.__gt__": [[197, "skbio-metadata-interval-gt"]], "skbio.metadata.Interval.__le__": [[198, "skbio-metadata-interval-le"]], "skbio.metadata.Interval.__lt__": [[199, "skbio-metadata-interval-lt"]], "skbio.metadata.Interval.__ne__": [[200, "skbio-metadata-interval-ne"]], "skbio.metadata.Interval.__str__": [[201, "skbio-metadata-interval-str"]], "skbio.metadata.Interval.drop": [[202, "skbio-metadata-interval-drop"]], "skbio.metadata.IntervalMetadata": [[203, "skbio-metadata-intervalmetadata"]], "skbio.metadata.IntervalMetadata.__copy__": [[204, "skbio-metadata-intervalmetadata-copy"]], "skbio.metadata.IntervalMetadata.__deepcopy__": [[205, "skbio-metadata-intervalmetadata-deepcopy"]], "skbio.metadata.IntervalMetadata.__eq__": [[206, "skbio-metadata-intervalmetadata-eq"]], "skbio.metadata.IntervalMetadata.__ge__": [[207, "skbio-metadata-intervalmetadata-ge"]], "skbio.metadata.IntervalMetadata.__getstate__": [[208, "skbio-metadata-intervalmetadata-getstate"]], "skbio.metadata.IntervalMetadata.__gt__": [[209, "skbio-metadata-intervalmetadata-gt"]], "skbio.metadata.IntervalMetadata.__le__": [[210, "skbio-metadata-intervalmetadata-le"]], "skbio.metadata.IntervalMetadata.__lt__": [[211, "skbio-metadata-intervalmetadata-lt"]], "skbio.metadata.IntervalMetadata.__ne__": [[212, "skbio-metadata-intervalmetadata-ne"]], "skbio.metadata.IntervalMetadata.__str__": [[213, "skbio-metadata-intervalmetadata-str"]], "skbio.metadata.IntervalMetadata.add": [[214, "skbio-metadata-intervalmetadata-add"]], "skbio.metadata.IntervalMetadata.concat": [[215, "skbio-metadata-intervalmetadata-concat"]], "skbio.metadata.IntervalMetadata.drop": [[216, "skbio-metadata-intervalmetadata-drop"]], "skbio.metadata.IntervalMetadata.merge": [[217, "skbio-metadata-intervalmetadata-merge"]], "skbio.metadata.IntervalMetadata.query": [[218, "skbio-metadata-intervalmetadata-query"]], "skbio.metadata.IntervalMetadata.read": [[219, "skbio-metadata-intervalmetadata-read"]], "skbio.metadata.IntervalMetadata.sort": [[220, "skbio-metadata-intervalmetadata-sort"]], "skbio.metadata.IntervalMetadata.write": [[221, "skbio-metadata-intervalmetadata-write"]], "skbio.sequence.DNA": [[222, "skbio-sequence-dna"]], "skbio.sequence.DNA.__bool__": [[223, "skbio-sequence-dna-bool"]], "skbio.sequence.DNA.__contains__": [[224, "skbio-sequence-dna-contains"]], "skbio.sequence.DNA.__copy__": [[225, "skbio-sequence-dna-copy"]], "skbio.sequence.DNA.__deepcopy__": [[226, "skbio-sequence-dna-deepcopy"]], "skbio.sequence.DNA.__eq__": [[227, "skbio-sequence-dna-eq"]], "skbio.sequence.DNA.__ge__": [[228, "skbio-sequence-dna-ge"]], "skbio.sequence.DNA.__getitem__": [[229, "skbio-sequence-dna-getitem"]], "skbio.sequence.DNA.__getstate__": [[230, "skbio-sequence-dna-getstate"]], "skbio.sequence.DNA.__gt__": [[231, "skbio-sequence-dna-gt"]], "skbio.sequence.DNA.__iter__": [[232, "skbio-sequence-dna-iter"]], "skbio.sequence.DNA.__le__": [[233, "skbio-sequence-dna-le"]], "skbio.sequence.DNA.__len__": [[234, "skbio-sequence-dna-len"]], "skbio.sequence.DNA.__lt__": [[235, "skbio-sequence-dna-lt"]], "skbio.sequence.DNA.__ne__": [[236, "skbio-sequence-dna-ne"]], "skbio.sequence.DNA.__reversed__": [[237, "skbio-sequence-dna-reversed"]], "skbio.sequence.DNA.__str__": [[238, "skbio-sequence-dna-str"]], "skbio.sequence.DNA.complement": [[239, "skbio-sequence-dna-complement"]], "skbio.sequence.DNA.concat": [[240, "skbio-sequence-dna-concat"]], "skbio.sequence.DNA.count": [[241, "skbio-sequence-dna-count"]], "skbio.sequence.DNA.definites": [[242, "skbio-sequence-dna-definites"]], "skbio.sequence.DNA.degap": [[243, "skbio-sequence-dna-degap"]], "skbio.sequence.DNA.degenerates": [[244, "skbio-sequence-dna-degenerates"]], "skbio.sequence.DNA.distance": [[245, "skbio-sequence-dna-distance"]], "skbio.sequence.DNA.expand_degenerates": [[246, "skbio-sequence-dna-expand-degenerates"]], "skbio.sequence.DNA.find_motifs": [[247, "skbio-sequence-dna-find-motifs"]], "skbio.sequence.DNA.find_with_regex": [[248, "skbio-sequence-dna-find-with-regex"]], "skbio.sequence.DNA.frequencies": [[249, "skbio-sequence-dna-frequencies"]], "skbio.sequence.DNA.gaps": [[250, "skbio-sequence-dna-gaps"]], "skbio.sequence.DNA.gc_content": [[251, "skbio-sequence-dna-gc-content"]], "skbio.sequence.DNA.gc_frequency": [[252, "skbio-sequence-dna-gc-frequency"]], "skbio.sequence.DNA.has_definites": [[253, "skbio-sequence-dna-has-definites"]], "skbio.sequence.DNA.has_degenerates": [[254, "skbio-sequence-dna-has-degenerates"]], "skbio.sequence.DNA.has_gaps": [[255, "skbio-sequence-dna-has-gaps"]], "skbio.sequence.DNA.has_interval_metadata": [[256, "skbio-sequence-dna-has-interval-metadata"]], "skbio.sequence.DNA.has_metadata": [[257, "skbio-sequence-dna-has-metadata"]], "skbio.sequence.DNA.has_nondegenerates": [[258, "skbio-sequence-dna-has-nondegenerates"]], "skbio.sequence.DNA.has_positional_metadata": [[259, "skbio-sequence-dna-has-positional-metadata"]], "skbio.sequence.DNA.index": [[260, "skbio-sequence-dna-index"]], "skbio.sequence.DNA.is_reverse_complement": [[261, "skbio-sequence-dna-is-reverse-complement"]], "skbio.sequence.DNA.iter_contiguous": [[262, "skbio-sequence-dna-iter-contiguous"]], "skbio.sequence.DNA.iter_kmers": [[263, "skbio-sequence-dna-iter-kmers"]], "skbio.sequence.DNA.kmer_frequencies": [[264, "skbio-sequence-dna-kmer-frequencies"]], "skbio.sequence.DNA.lowercase": [[265, "skbio-sequence-dna-lowercase"]], "skbio.sequence.DNA.match_frequency": [[266, "skbio-sequence-dna-match-frequency"]], "skbio.sequence.DNA.matches": [[267, "skbio-sequence-dna-matches"]], "skbio.sequence.DNA.mismatch_frequency": [[268, "skbio-sequence-dna-mismatch-frequency"]], "skbio.sequence.DNA.mismatches": [[269, "skbio-sequence-dna-mismatches"]], "skbio.sequence.DNA.nondegenerates": [[270, "skbio-sequence-dna-nondegenerates"]], "skbio.sequence.DNA.read": [[271, "skbio-sequence-dna-read"]], "skbio.sequence.DNA.replace": [[272, "skbio-sequence-dna-replace"]], "skbio.sequence.DNA.reverse_complement": [[273, "skbio-sequence-dna-reverse-complement"]], "skbio.sequence.DNA.to_indices": [[274, "skbio-sequence-dna-to-indices"]], "skbio.sequence.DNA.to_regex": [[275, "skbio-sequence-dna-to-regex"]], "skbio.sequence.DNA.transcribe": [[276, "skbio-sequence-dna-transcribe"]], "skbio.sequence.DNA.translate": [[277, "skbio-sequence-dna-translate"]], "skbio.sequence.DNA.translate_six_frames": [[278, "skbio-sequence-dna-translate-six-frames"]], "skbio.sequence.DNA.write": [[279, "skbio-sequence-dna-write"]], "skbio.sequence.GeneticCode": [[280, "skbio-sequence-geneticcode"]], "skbio.sequence.GeneticCode.__eq__": [[281, "skbio-sequence-geneticcode-eq"]], "skbio.sequence.GeneticCode.__ge__": [[282, "skbio-sequence-geneticcode-ge"]], "skbio.sequence.GeneticCode.__getstate__": [[283, "skbio-sequence-geneticcode-getstate"]], "skbio.sequence.GeneticCode.__gt__": [[284, "skbio-sequence-geneticcode-gt"]], "skbio.sequence.GeneticCode.__le__": [[285, "skbio-sequence-geneticcode-le"]], "skbio.sequence.GeneticCode.__lt__": [[286, "skbio-sequence-geneticcode-lt"]], "skbio.sequence.GeneticCode.__ne__": [[287, "skbio-sequence-geneticcode-ne"]], "skbio.sequence.GeneticCode.__str__": [[288, "skbio-sequence-geneticcode-str"]], "skbio.sequence.GeneticCode.from_ncbi": [[289, "skbio-sequence-geneticcode-from-ncbi"]], "skbio.sequence.GeneticCode.translate": [[290, "skbio-sequence-geneticcode-translate"]], "skbio.sequence.GeneticCode.translate_six_frames": [[291, "skbio-sequence-geneticcode-translate-six-frames"]], "skbio.sequence.GrammaredSequence": [[292, "skbio-sequence-grammaredsequence"]], "skbio.sequence.GrammaredSequence.__bool__": [[293, "skbio-sequence-grammaredsequence-bool"]], "skbio.sequence.GrammaredSequence.__contains__": [[294, "skbio-sequence-grammaredsequence-contains"]], "skbio.sequence.GrammaredSequence.__copy__": [[295, "skbio-sequence-grammaredsequence-copy"]], "skbio.sequence.GrammaredSequence.__deepcopy__": [[296, "skbio-sequence-grammaredsequence-deepcopy"]], "skbio.sequence.GrammaredSequence.__eq__": [[297, "skbio-sequence-grammaredsequence-eq"]], "skbio.sequence.GrammaredSequence.__ge__": [[298, "skbio-sequence-grammaredsequence-ge"]], "skbio.sequence.GrammaredSequence.__getitem__": [[299, "skbio-sequence-grammaredsequence-getitem"]], "skbio.sequence.GrammaredSequence.__getstate__": [[300, "skbio-sequence-grammaredsequence-getstate"]], "skbio.sequence.GrammaredSequence.__gt__": [[301, "skbio-sequence-grammaredsequence-gt"]], "skbio.sequence.GrammaredSequence.__iter__": [[302, "skbio-sequence-grammaredsequence-iter"]], "skbio.sequence.GrammaredSequence.__le__": [[303, "skbio-sequence-grammaredsequence-le"]], "skbio.sequence.GrammaredSequence.__len__": [[304, "skbio-sequence-grammaredsequence-len"]], "skbio.sequence.GrammaredSequence.__lt__": [[305, "skbio-sequence-grammaredsequence-lt"]], "skbio.sequence.GrammaredSequence.__ne__": [[306, "skbio-sequence-grammaredsequence-ne"]], "skbio.sequence.GrammaredSequence.__reversed__": [[307, "skbio-sequence-grammaredsequence-reversed"]], "skbio.sequence.GrammaredSequence.__str__": [[308, "skbio-sequence-grammaredsequence-str"]], "skbio.sequence.GrammaredSequence.concat": [[309, "skbio-sequence-grammaredsequence-concat"]], "skbio.sequence.GrammaredSequence.count": [[310, "skbio-sequence-grammaredsequence-count"]], "skbio.sequence.GrammaredSequence.definites": [[311, "skbio-sequence-grammaredsequence-definites"]], "skbio.sequence.GrammaredSequence.degap": [[312, "skbio-sequence-grammaredsequence-degap"]], "skbio.sequence.GrammaredSequence.degenerates": [[313, "skbio-sequence-grammaredsequence-degenerates"]], "skbio.sequence.GrammaredSequence.distance": [[314, "skbio-sequence-grammaredsequence-distance"]], "skbio.sequence.GrammaredSequence.expand_degenerates": [[315, "skbio-sequence-grammaredsequence-expand-degenerates"]], "skbio.sequence.GrammaredSequence.find_motifs": [[316, "skbio-sequence-grammaredsequence-find-motifs"]], "skbio.sequence.GrammaredSequence.find_with_regex": [[317, "skbio-sequence-grammaredsequence-find-with-regex"]], "skbio.sequence.GrammaredSequence.frequencies": [[318, "skbio-sequence-grammaredsequence-frequencies"]], "skbio.sequence.GrammaredSequence.gaps": [[319, "skbio-sequence-grammaredsequence-gaps"]], "skbio.sequence.GrammaredSequence.has_definites": [[320, "skbio-sequence-grammaredsequence-has-definites"]], "skbio.sequence.GrammaredSequence.has_degenerates": [[321, "skbio-sequence-grammaredsequence-has-degenerates"]], "skbio.sequence.GrammaredSequence.has_gaps": [[322, "skbio-sequence-grammaredsequence-has-gaps"]], "skbio.sequence.GrammaredSequence.has_interval_metadata": [[323, "skbio-sequence-grammaredsequence-has-interval-metadata"]], "skbio.sequence.GrammaredSequence.has_metadata": [[324, "skbio-sequence-grammaredsequence-has-metadata"]], "skbio.sequence.GrammaredSequence.has_nondegenerates": [[325, "skbio-sequence-grammaredsequence-has-nondegenerates"]], "skbio.sequence.GrammaredSequence.has_positional_metadata": [[326, "skbio-sequence-grammaredsequence-has-positional-metadata"]], "skbio.sequence.GrammaredSequence.index": [[327, "skbio-sequence-grammaredsequence-index"]], "skbio.sequence.GrammaredSequence.iter_contiguous": [[328, "skbio-sequence-grammaredsequence-iter-contiguous"]], "skbio.sequence.GrammaredSequence.iter_kmers": [[329, "skbio-sequence-grammaredsequence-iter-kmers"]], "skbio.sequence.GrammaredSequence.kmer_frequencies": [[330, "skbio-sequence-grammaredsequence-kmer-frequencies"]], "skbio.sequence.GrammaredSequence.lowercase": [[331, "skbio-sequence-grammaredsequence-lowercase"]], "skbio.sequence.GrammaredSequence.match_frequency": [[332, "skbio-sequence-grammaredsequence-match-frequency"]], "skbio.sequence.GrammaredSequence.matches": [[333, "skbio-sequence-grammaredsequence-matches"]], "skbio.sequence.GrammaredSequence.mismatch_frequency": [[334, "skbio-sequence-grammaredsequence-mismatch-frequency"]], "skbio.sequence.GrammaredSequence.mismatches": [[335, "skbio-sequence-grammaredsequence-mismatches"]], "skbio.sequence.GrammaredSequence.nondegenerates": [[336, "skbio-sequence-grammaredsequence-nondegenerates"]], "skbio.sequence.GrammaredSequence.read": [[337, "skbio-sequence-grammaredsequence-read"]], "skbio.sequence.GrammaredSequence.replace": [[338, "skbio-sequence-grammaredsequence-replace"]], "skbio.sequence.GrammaredSequence.to_indices": [[339, "skbio-sequence-grammaredsequence-to-indices"]], "skbio.sequence.GrammaredSequence.to_regex": [[340, "skbio-sequence-grammaredsequence-to-regex"]], "skbio.sequence.GrammaredSequence.write": [[341, "skbio-sequence-grammaredsequence-write"]], "skbio.sequence.Protein": [[342, "skbio-sequence-protein"]], "skbio.sequence.Protein.__bool__": [[343, "skbio-sequence-protein-bool"]], "skbio.sequence.Protein.__contains__": [[344, "skbio-sequence-protein-contains"]], "skbio.sequence.Protein.__copy__": [[345, "skbio-sequence-protein-copy"]], "skbio.sequence.Protein.__deepcopy__": [[346, "skbio-sequence-protein-deepcopy"]], "skbio.sequence.Protein.__eq__": [[347, "skbio-sequence-protein-eq"]], "skbio.sequence.Protein.__ge__": [[348, "skbio-sequence-protein-ge"]], "skbio.sequence.Protein.__getitem__": [[349, "skbio-sequence-protein-getitem"]], "skbio.sequence.Protein.__getstate__": [[350, "skbio-sequence-protein-getstate"]], "skbio.sequence.Protein.__gt__": [[351, "skbio-sequence-protein-gt"]], "skbio.sequence.Protein.__iter__": [[352, "skbio-sequence-protein-iter"]], "skbio.sequence.Protein.__le__": [[353, "skbio-sequence-protein-le"]], "skbio.sequence.Protein.__len__": [[354, "skbio-sequence-protein-len"]], "skbio.sequence.Protein.__lt__": [[355, "skbio-sequence-protein-lt"]], "skbio.sequence.Protein.__ne__": [[356, "skbio-sequence-protein-ne"]], "skbio.sequence.Protein.__reversed__": [[357, "skbio-sequence-protein-reversed"]], "skbio.sequence.Protein.__str__": [[358, "skbio-sequence-protein-str"]], "skbio.sequence.Protein.concat": [[359, "skbio-sequence-protein-concat"]], "skbio.sequence.Protein.count": [[360, "skbio-sequence-protein-count"]], "skbio.sequence.Protein.definites": [[361, "skbio-sequence-protein-definites"]], "skbio.sequence.Protein.degap": [[362, "skbio-sequence-protein-degap"]], "skbio.sequence.Protein.degenerates": [[363, "skbio-sequence-protein-degenerates"]], "skbio.sequence.Protein.distance": [[364, "skbio-sequence-protein-distance"]], "skbio.sequence.Protein.expand_degenerates": [[365, "skbio-sequence-protein-expand-degenerates"]], "skbio.sequence.Protein.find_motifs": [[366, "skbio-sequence-protein-find-motifs"]], "skbio.sequence.Protein.find_with_regex": [[367, "skbio-sequence-protein-find-with-regex"]], "skbio.sequence.Protein.frequencies": [[368, "skbio-sequence-protein-frequencies"]], "skbio.sequence.Protein.gaps": [[369, "skbio-sequence-protein-gaps"]], "skbio.sequence.Protein.has_definites": [[370, "skbio-sequence-protein-has-definites"]], "skbio.sequence.Protein.has_degenerates": [[371, "skbio-sequence-protein-has-degenerates"]], "skbio.sequence.Protein.has_gaps": [[372, "skbio-sequence-protein-has-gaps"]], "skbio.sequence.Protein.has_interval_metadata": [[373, "skbio-sequence-protein-has-interval-metadata"]], "skbio.sequence.Protein.has_metadata": [[374, "skbio-sequence-protein-has-metadata"]], "skbio.sequence.Protein.has_nondegenerates": [[375, "skbio-sequence-protein-has-nondegenerates"]], "skbio.sequence.Protein.has_positional_metadata": [[376, "skbio-sequence-protein-has-positional-metadata"]], "skbio.sequence.Protein.has_stops": [[377, "skbio-sequence-protein-has-stops"]], "skbio.sequence.Protein.index": [[378, "skbio-sequence-protein-index"]], "skbio.sequence.Protein.iter_contiguous": [[379, "skbio-sequence-protein-iter-contiguous"]], "skbio.sequence.Protein.iter_kmers": [[380, "skbio-sequence-protein-iter-kmers"]], "skbio.sequence.Protein.kmer_frequencies": [[381, "skbio-sequence-protein-kmer-frequencies"]], "skbio.sequence.Protein.lowercase": [[382, "skbio-sequence-protein-lowercase"]], "skbio.sequence.Protein.match_frequency": [[383, "skbio-sequence-protein-match-frequency"]], "skbio.sequence.Protein.matches": [[384, "skbio-sequence-protein-matches"]], "skbio.sequence.Protein.mismatch_frequency": [[385, "skbio-sequence-protein-mismatch-frequency"]], "skbio.sequence.Protein.mismatches": [[386, "skbio-sequence-protein-mismatches"]], "skbio.sequence.Protein.nondegenerates": [[387, "skbio-sequence-protein-nondegenerates"]], "skbio.sequence.Protein.read": [[388, "skbio-sequence-protein-read"]], "skbio.sequence.Protein.replace": [[389, "skbio-sequence-protein-replace"]], "skbio.sequence.Protein.stops": [[390, "skbio-sequence-protein-stops"]], "skbio.sequence.Protein.to_indices": [[391, "skbio-sequence-protein-to-indices"]], "skbio.sequence.Protein.to_regex": [[392, "skbio-sequence-protein-to-regex"]], "skbio.sequence.Protein.write": [[393, "skbio-sequence-protein-write"]], "skbio.sequence.RNA": [[394, "skbio-sequence-rna"]], "skbio.sequence.RNA.__bool__": [[395, "skbio-sequence-rna-bool"]], "skbio.sequence.RNA.__contains__": [[396, "skbio-sequence-rna-contains"]], "skbio.sequence.RNA.__copy__": [[397, "skbio-sequence-rna-copy"]], "skbio.sequence.RNA.__deepcopy__": [[398, "skbio-sequence-rna-deepcopy"]], "skbio.sequence.RNA.__eq__": [[399, "skbio-sequence-rna-eq"]], "skbio.sequence.RNA.__ge__": [[400, "skbio-sequence-rna-ge"]], "skbio.sequence.RNA.__getitem__": [[401, "skbio-sequence-rna-getitem"]], "skbio.sequence.RNA.__getstate__": [[402, "skbio-sequence-rna-getstate"]], "skbio.sequence.RNA.__gt__": [[403, "skbio-sequence-rna-gt"]], "skbio.sequence.RNA.__iter__": [[404, "skbio-sequence-rna-iter"]], "skbio.sequence.RNA.__le__": [[405, "skbio-sequence-rna-le"]], "skbio.sequence.RNA.__len__": [[406, "skbio-sequence-rna-len"]], "skbio.sequence.RNA.__lt__": [[407, "skbio-sequence-rna-lt"]], "skbio.sequence.RNA.__ne__": [[408, "skbio-sequence-rna-ne"]], "skbio.sequence.RNA.__reversed__": [[409, "skbio-sequence-rna-reversed"]], "skbio.sequence.RNA.__str__": [[410, "skbio-sequence-rna-str"]], "skbio.sequence.RNA.complement": [[411, "skbio-sequence-rna-complement"]], "skbio.sequence.RNA.concat": [[412, "skbio-sequence-rna-concat"]], "skbio.sequence.RNA.count": [[413, "skbio-sequence-rna-count"]], "skbio.sequence.RNA.definites": [[414, "skbio-sequence-rna-definites"]], "skbio.sequence.RNA.degap": [[415, "skbio-sequence-rna-degap"]], "skbio.sequence.RNA.degenerates": [[416, "skbio-sequence-rna-degenerates"]], "skbio.sequence.RNA.distance": [[417, "skbio-sequence-rna-distance"]], "skbio.sequence.RNA.expand_degenerates": [[418, "skbio-sequence-rna-expand-degenerates"]], "skbio.sequence.RNA.find_motifs": [[419, "skbio-sequence-rna-find-motifs"]], "skbio.sequence.RNA.find_with_regex": [[420, "skbio-sequence-rna-find-with-regex"]], "skbio.sequence.RNA.frequencies": [[421, "skbio-sequence-rna-frequencies"]], "skbio.sequence.RNA.gaps": [[422, "skbio-sequence-rna-gaps"]], "skbio.sequence.RNA.gc_content": [[423, "skbio-sequence-rna-gc-content"]], "skbio.sequence.RNA.gc_frequency": [[424, "skbio-sequence-rna-gc-frequency"]], "skbio.sequence.RNA.has_definites": [[425, "skbio-sequence-rna-has-definites"]], "skbio.sequence.RNA.has_degenerates": [[426, "skbio-sequence-rna-has-degenerates"]], "skbio.sequence.RNA.has_gaps": [[427, "skbio-sequence-rna-has-gaps"]], "skbio.sequence.RNA.has_interval_metadata": [[428, "skbio-sequence-rna-has-interval-metadata"]], "skbio.sequence.RNA.has_metadata": [[429, "skbio-sequence-rna-has-metadata"]], "skbio.sequence.RNA.has_nondegenerates": [[430, "skbio-sequence-rna-has-nondegenerates"]], "skbio.sequence.RNA.has_positional_metadata": [[431, "skbio-sequence-rna-has-positional-metadata"]], "skbio.sequence.RNA.index": [[432, "skbio-sequence-rna-index"]], "skbio.sequence.RNA.is_reverse_complement": [[433, "skbio-sequence-rna-is-reverse-complement"]], "skbio.sequence.RNA.iter_contiguous": [[434, "skbio-sequence-rna-iter-contiguous"]], "skbio.sequence.RNA.iter_kmers": [[435, "skbio-sequence-rna-iter-kmers"]], "skbio.sequence.RNA.kmer_frequencies": [[436, "skbio-sequence-rna-kmer-frequencies"]], "skbio.sequence.RNA.lowercase": [[437, "skbio-sequence-rna-lowercase"]], "skbio.sequence.RNA.match_frequency": [[438, "skbio-sequence-rna-match-frequency"]], "skbio.sequence.RNA.matches": [[439, "skbio-sequence-rna-matches"]], "skbio.sequence.RNA.mismatch_frequency": [[440, "skbio-sequence-rna-mismatch-frequency"]], "skbio.sequence.RNA.mismatches": [[441, "skbio-sequence-rna-mismatches"]], "skbio.sequence.RNA.nondegenerates": [[442, "skbio-sequence-rna-nondegenerates"]], "skbio.sequence.RNA.read": [[443, "skbio-sequence-rna-read"]], "skbio.sequence.RNA.replace": [[444, "skbio-sequence-rna-replace"]], "skbio.sequence.RNA.reverse_complement": [[445, "skbio-sequence-rna-reverse-complement"]], "skbio.sequence.RNA.reverse_transcribe": [[446, "skbio-sequence-rna-reverse-transcribe"]], "skbio.sequence.RNA.to_indices": [[447, "skbio-sequence-rna-to-indices"]], "skbio.sequence.RNA.to_regex": [[448, "skbio-sequence-rna-to-regex"]], "skbio.sequence.RNA.translate": [[449, "skbio-sequence-rna-translate"]], "skbio.sequence.RNA.translate_six_frames": [[450, "skbio-sequence-rna-translate-six-frames"]], "skbio.sequence.RNA.write": [[451, "skbio-sequence-rna-write"]], "skbio.sequence.Sequence": [[452, "skbio-sequence-sequence"]], "skbio.sequence.Sequence.__bool__": [[453, "skbio-sequence-sequence-bool"]], "skbio.sequence.Sequence.__contains__": [[454, "skbio-sequence-sequence-contains"]], "skbio.sequence.Sequence.__copy__": [[455, "skbio-sequence-sequence-copy"]], "skbio.sequence.Sequence.__deepcopy__": [[456, "skbio-sequence-sequence-deepcopy"]], "skbio.sequence.Sequence.__eq__": [[457, "skbio-sequence-sequence-eq"]], "skbio.sequence.Sequence.__ge__": [[458, "skbio-sequence-sequence-ge"]], "skbio.sequence.Sequence.__getitem__": [[459, "skbio-sequence-sequence-getitem"]], "skbio.sequence.Sequence.__getstate__": [[460, "skbio-sequence-sequence-getstate"]], "skbio.sequence.Sequence.__gt__": [[461, "skbio-sequence-sequence-gt"]], "skbio.sequence.Sequence.__iter__": [[462, "skbio-sequence-sequence-iter"]], "skbio.sequence.Sequence.__le__": [[463, "skbio-sequence-sequence-le"]], "skbio.sequence.Sequence.__len__": [[464, "skbio-sequence-sequence-len"]], "skbio.sequence.Sequence.__lt__": [[465, "skbio-sequence-sequence-lt"]], "skbio.sequence.Sequence.__ne__": [[466, "skbio-sequence-sequence-ne"]], "skbio.sequence.Sequence.__reversed__": [[467, "skbio-sequence-sequence-reversed"]], "skbio.sequence.Sequence.__str__": [[468, "skbio-sequence-sequence-str"]], "skbio.sequence.Sequence.concat": [[469, "skbio-sequence-sequence-concat"]], "skbio.sequence.Sequence.count": [[470, "skbio-sequence-sequence-count"]], "skbio.sequence.Sequence.distance": [[471, "skbio-sequence-sequence-distance"]], "skbio.sequence.Sequence.find_with_regex": [[472, "skbio-sequence-sequence-find-with-regex"]], "skbio.sequence.Sequence.frequencies": [[473, "skbio-sequence-sequence-frequencies"]], "skbio.sequence.Sequence.has_interval_metadata": [[474, "skbio-sequence-sequence-has-interval-metadata"]], "skbio.sequence.Sequence.has_metadata": [[475, "skbio-sequence-sequence-has-metadata"]], "skbio.sequence.Sequence.has_positional_metadata": [[476, "skbio-sequence-sequence-has-positional-metadata"]], "skbio.sequence.Sequence.index": [[477, "skbio-sequence-sequence-index"]], "skbio.sequence.Sequence.iter_contiguous": [[478, "skbio-sequence-sequence-iter-contiguous"]], "skbio.sequence.Sequence.iter_kmers": [[479, "skbio-sequence-sequence-iter-kmers"]], "skbio.sequence.Sequence.kmer_frequencies": [[480, "skbio-sequence-sequence-kmer-frequencies"]], "skbio.sequence.Sequence.lowercase": [[481, "skbio-sequence-sequence-lowercase"]], "skbio.sequence.Sequence.match_frequency": [[482, "skbio-sequence-sequence-match-frequency"]], "skbio.sequence.Sequence.matches": [[483, "skbio-sequence-sequence-matches"]], "skbio.sequence.Sequence.mismatch_frequency": [[484, "skbio-sequence-sequence-mismatch-frequency"]], "skbio.sequence.Sequence.mismatches": [[485, "skbio-sequence-sequence-mismatches"]], "skbio.sequence.Sequence.read": [[486, "skbio-sequence-sequence-read"]], "skbio.sequence.Sequence.replace": [[487, "skbio-sequence-sequence-replace"]], "skbio.sequence.Sequence.to_indices": [[488, "skbio-sequence-sequence-to-indices"]], "skbio.sequence.Sequence.write": [[489, "skbio-sequence-sequence-write"]], "skbio.sequence.SubstitutionMatrix": [[490, "skbio-sequence-substitutionmatrix"]], "skbio.sequence.SubstitutionMatrix.__contains__": [[491, "skbio-sequence-substitutionmatrix-contains"]], "skbio.sequence.SubstitutionMatrix.__eq__": [[492, "skbio-sequence-substitutionmatrix-eq"]], "skbio.sequence.SubstitutionMatrix.__ge__": [[493, "skbio-sequence-substitutionmatrix-ge"]], "skbio.sequence.SubstitutionMatrix.__getitem__": [[494, "skbio-sequence-substitutionmatrix-getitem"]], "skbio.sequence.SubstitutionMatrix.__getstate__": [[495, "skbio-sequence-substitutionmatrix-getstate"]], "skbio.sequence.SubstitutionMatrix.__gt__": [[496, "skbio-sequence-substitutionmatrix-gt"]], "skbio.sequence.SubstitutionMatrix.__le__": [[497, "skbio-sequence-substitutionmatrix-le"]], "skbio.sequence.SubstitutionMatrix.__lt__": [[498, "skbio-sequence-substitutionmatrix-lt"]], "skbio.sequence.SubstitutionMatrix.__ne__": [[499, "skbio-sequence-substitutionmatrix-ne"]], "skbio.sequence.SubstitutionMatrix.__str__": [[500, "skbio-sequence-substitutionmatrix-str"]], "skbio.sequence.SubstitutionMatrix.between": [[501, "skbio-sequence-substitutionmatrix-between"]], "skbio.sequence.SubstitutionMatrix.by_name": [[502, "skbio-sequence-substitutionmatrix-by-name"]], "skbio.sequence.SubstitutionMatrix.copy": [[503, "skbio-sequence-substitutionmatrix-copy"]], "skbio.sequence.SubstitutionMatrix.filter": [[504, "skbio-sequence-substitutionmatrix-filter"]], "skbio.sequence.SubstitutionMatrix.from_dict": [[505, "skbio-sequence-substitutionmatrix-from-dict"]], "skbio.sequence.SubstitutionMatrix.from_iterable": [[506, "skbio-sequence-substitutionmatrix-from-iterable"]], "skbio.sequence.SubstitutionMatrix.get_names": [[507, "skbio-sequence-substitutionmatrix-get-names"]], "skbio.sequence.SubstitutionMatrix.identity": [[508, "skbio-sequence-substitutionmatrix-identity"]], "skbio.sequence.SubstitutionMatrix.index": [[509, "skbio-sequence-substitutionmatrix-index"]], "skbio.sequence.SubstitutionMatrix.plot": [[510, "skbio-sequence-substitutionmatrix-plot"]], "skbio.sequence.SubstitutionMatrix.read": [[511, "skbio-sequence-substitutionmatrix-read"]], "skbio.sequence.SubstitutionMatrix.redundant_form": [[512, "skbio-sequence-substitutionmatrix-redundant-form"]], "skbio.sequence.SubstitutionMatrix.to_data_frame": [[513, "skbio-sequence-substitutionmatrix-to-data-frame"]], "skbio.sequence.SubstitutionMatrix.to_dict": [[514, "skbio-sequence-substitutionmatrix-to-dict"]], "skbio.sequence.SubstitutionMatrix.transpose": [[515, "skbio-sequence-substitutionmatrix-transpose"]], "skbio.sequence.SubstitutionMatrix.within": [[516, "skbio-sequence-substitutionmatrix-within"]], "skbio.sequence.SubstitutionMatrix.write": [[517, "skbio-sequence-substitutionmatrix-write"]], "Sequence distance metrics (skbio.sequence.distance)": [[518, "sequence-distance-metrics-skbio-sequence-distance"]], "skbio.sequence.distance.hamming": [[519, "skbio-sequence-distance-hamming"]], "skbio.sequence.distance.kmer_distance": [[520, "skbio-sequence-distance-kmer-distance"]], "Composition Statistics (skbio.stats.composition)": [[521, "composition-statistics-skbio-stats-composition"]], "skbio.stats.composition.alr": [[522, "skbio-stats-composition-alr"]], "skbio.stats.composition.alr_inv": [[523, "skbio-stats-composition-alr-inv"]], "skbio.stats.composition.ancom": [[524, "skbio-stats-composition-ancom"]], "skbio.stats.composition.centralize": [[525, "skbio-stats-composition-centralize"]], "skbio.stats.composition.closure": [[526, "skbio-stats-composition-closure"]], "skbio.stats.composition.clr": [[527, "skbio-stats-composition-clr"]], "skbio.stats.composition.clr_inv": [[528, "skbio-stats-composition-clr-inv"]], "skbio.stats.composition.ilr": [[529, "skbio-stats-composition-ilr"]], "skbio.stats.composition.ilr_inv": [[530, "skbio-stats-composition-ilr-inv"]], "skbio.stats.composition.inner": [[531, "skbio-stats-composition-inner"]], "skbio.stats.composition.multiplicative_replacement": [[532, "skbio-stats-composition-multiplicative-replacement"]], "skbio.stats.composition.pairwise_vlr": [[533, "skbio-stats-composition-pairwise-vlr"]], "skbio.stats.composition.perturb": [[534, "skbio-stats-composition-perturb"]], "skbio.stats.composition.perturb_inv": [[535, "skbio-stats-composition-perturb-inv"]], "skbio.stats.composition.power": [[536, "skbio-stats-composition-power"]], "skbio.stats.composition.sbp_basis": [[537, "skbio-stats-composition-sbp-basis"]], "skbio.stats.composition.tree_basis": [[538, "skbio-stats-composition-tree-basis"]], "skbio.stats.composition.vlr": [[539, "skbio-stats-composition-vlr"]], "Distance matrices and distance-based statistics (skbio.stats.distance)": [[540, "distance-matrices-and-distance-based-statistics-skbio-stats-distance"]], "Data Structures: DissimilarityMatrix and DistanceMatrix": [[540, "data-structures-dissimilaritymatrix-and-distancematrix"]], "Distance-based statistics": [[540, "distance-based-statistics"]], "Categorical Variable Stats": [[540, "categorical-variable-stats"]], "Continuous Variable Stats": [[540, "continuous-variable-stats"]], "Distance Matrix Comparisons": [[540, "distance-matrix-comparisons"]], "skbio.stats.distance.DissimilarityMatrix": [[541, "skbio-stats-distance-dissimilaritymatrix"]], "skbio.stats.distance.DissimilarityMatrix.__contains__": [[542, "skbio-stats-distance-dissimilaritymatrix-contains"]], "skbio.stats.distance.DissimilarityMatrix.__eq__": [[543, "skbio-stats-distance-dissimilaritymatrix-eq"]], "skbio.stats.distance.DissimilarityMatrix.__ge__": [[544, "skbio-stats-distance-dissimilaritymatrix-ge"]], "skbio.stats.distance.DissimilarityMatrix.__getitem__": [[545, "skbio-stats-distance-dissimilaritymatrix-getitem"]], "skbio.stats.distance.DissimilarityMatrix.__getstate__": [[546, "skbio-stats-distance-dissimilaritymatrix-getstate"]], "skbio.stats.distance.DissimilarityMatrix.__gt__": [[547, "skbio-stats-distance-dissimilaritymatrix-gt"]], "skbio.stats.distance.DissimilarityMatrix.__le__": [[548, "skbio-stats-distance-dissimilaritymatrix-le"]], "skbio.stats.distance.DissimilarityMatrix.__lt__": [[549, "skbio-stats-distance-dissimilaritymatrix-lt"]], "skbio.stats.distance.DissimilarityMatrix.__ne__": [[550, "skbio-stats-distance-dissimilaritymatrix-ne"]], "skbio.stats.distance.DissimilarityMatrix.__str__": [[551, "skbio-stats-distance-dissimilaritymatrix-str"]], "skbio.stats.distance.DissimilarityMatrix.between": [[552, "skbio-stats-distance-dissimilaritymatrix-between"]], "skbio.stats.distance.DissimilarityMatrix.copy": [[553, "skbio-stats-distance-dissimilaritymatrix-copy"]], "skbio.stats.distance.DissimilarityMatrix.filter": [[554, "skbio-stats-distance-dissimilaritymatrix-filter"]], "skbio.stats.distance.DissimilarityMatrix.from_iterable": [[555, "skbio-stats-distance-dissimilaritymatrix-from-iterable"]], "skbio.stats.distance.DissimilarityMatrix.index": [[556, "skbio-stats-distance-dissimilaritymatrix-index"]], "skbio.stats.distance.DissimilarityMatrix.plot": [[557, "skbio-stats-distance-dissimilaritymatrix-plot"]], "skbio.stats.distance.DissimilarityMatrix.read": [[558, "skbio-stats-distance-dissimilaritymatrix-read"]], "skbio.stats.distance.DissimilarityMatrix.redundant_form": [[559, "skbio-stats-distance-dissimilaritymatrix-redundant-form"]], "skbio.stats.distance.DissimilarityMatrix.to_data_frame": [[560, "skbio-stats-distance-dissimilaritymatrix-to-data-frame"]], "skbio.stats.distance.DissimilarityMatrix.transpose": [[561, "skbio-stats-distance-dissimilaritymatrix-transpose"]], "skbio.stats.distance.DissimilarityMatrix.within": [[562, "skbio-stats-distance-dissimilaritymatrix-within"]], "skbio.stats.distance.DissimilarityMatrix.write": [[563, "skbio-stats-distance-dissimilaritymatrix-write"]], "skbio.stats.distance.DissimilarityMatrixError": [[564, "skbio-stats-distance-dissimilaritymatrixerror"]], "skbio.stats.distance.DistanceMatrix": [[565, "skbio-stats-distance-distancematrix"]], "skbio.stats.distance.DistanceMatrix.__contains__": [[566, "skbio-stats-distance-distancematrix-contains"]], "skbio.stats.distance.DistanceMatrix.__eq__": [[567, "skbio-stats-distance-distancematrix-eq"]], "skbio.stats.distance.DistanceMatrix.__ge__": [[568, "skbio-stats-distance-distancematrix-ge"]], "skbio.stats.distance.DistanceMatrix.__getitem__": [[569, "skbio-stats-distance-distancematrix-getitem"]], "skbio.stats.distance.DistanceMatrix.__getstate__": [[570, "skbio-stats-distance-distancematrix-getstate"]], "skbio.stats.distance.DistanceMatrix.__gt__": [[571, "skbio-stats-distance-distancematrix-gt"]], "skbio.stats.distance.DistanceMatrix.__le__": [[572, "skbio-stats-distance-distancematrix-le"]], "skbio.stats.distance.DistanceMatrix.__lt__": [[573, "skbio-stats-distance-distancematrix-lt"]], "skbio.stats.distance.DistanceMatrix.__ne__": [[574, "skbio-stats-distance-distancematrix-ne"]], "skbio.stats.distance.DistanceMatrix.__str__": [[575, "skbio-stats-distance-distancematrix-str"]], "skbio.stats.distance.DistanceMatrix.between": [[576, "skbio-stats-distance-distancematrix-between"]], "skbio.stats.distance.DistanceMatrix.condensed_form": [[577, "skbio-stats-distance-distancematrix-condensed-form"]], "skbio.stats.distance.DistanceMatrix.copy": [[578, "skbio-stats-distance-distancematrix-copy"]], "skbio.stats.distance.DistanceMatrix.filter": [[579, "skbio-stats-distance-distancematrix-filter"]], "skbio.stats.distance.DistanceMatrix.from_iterable": [[580, "skbio-stats-distance-distancematrix-from-iterable"]], "skbio.stats.distance.DistanceMatrix.index": [[581, "skbio-stats-distance-distancematrix-index"]], "skbio.stats.distance.DistanceMatrix.permute": [[582, "skbio-stats-distance-distancematrix-permute"]], "skbio.stats.distance.DistanceMatrix.plot": [[583, "skbio-stats-distance-distancematrix-plot"]], "skbio.stats.distance.DistanceMatrix.read": [[584, "skbio-stats-distance-distancematrix-read"]], "skbio.stats.distance.DistanceMatrix.redundant_form": [[585, "skbio-stats-distance-distancematrix-redundant-form"]], "skbio.stats.distance.DistanceMatrix.to_data_frame": [[586, "skbio-stats-distance-distancematrix-to-data-frame"]], "skbio.stats.distance.DistanceMatrix.to_series": [[587, "skbio-stats-distance-distancematrix-to-series"]], "skbio.stats.distance.DistanceMatrix.transpose": [[588, "skbio-stats-distance-distancematrix-transpose"]], "skbio.stats.distance.DistanceMatrix.within": [[589, "skbio-stats-distance-distancematrix-within"]], "skbio.stats.distance.DistanceMatrix.write": [[590, "skbio-stats-distance-distancematrix-write"]], "skbio.stats.distance.DistanceMatrixError": [[591, "skbio-stats-distance-distancematrixerror"]], "skbio.stats.distance.MissingIDError": [[592, "skbio-stats-distance-missingiderror"]], "skbio.stats.distance.anosim": [[593, "skbio-stats-distance-anosim"]], "skbio.stats.distance.bioenv": [[594, "skbio-stats-distance-bioenv"]], "skbio.stats.distance.mantel": [[595, "skbio-stats-distance-mantel"]], "skbio.stats.distance.permanova": [[596, "skbio-stats-distance-permanova"]], "skbio.stats.distance.permdisp": [[597, "skbio-stats-distance-permdisp"]], "skbio.stats.distance.pwmantel": [[598, "skbio-stats-distance-pwmantel"]], "skbio.stats.distance.randdm": [[599, "skbio-stats-distance-randdm"]], "Evolutionary statistics (skbio.stats.evolve)": [[600, "evolutionary-statistics-skbio-stats-evolve"]], "Cophylogenetic methods": [[600, "cophylogenetic-methods"]], "skbio.stats.evolve.hommola_cospeciation": [[601, "skbio-stats-evolve-hommola-cospeciation"]], "Gradient analyses (skbio.stats.gradient)": [[602, "gradient-analyses-skbio-stats-gradient"]], "skbio.stats.gradient.AverageGradientANOVA": [[603, "skbio-stats-gradient-averagegradientanova"]], "skbio.stats.gradient.AverageGradientANOVA.__eq__": [[604, "skbio-stats-gradient-averagegradientanova-eq"]], "skbio.stats.gradient.AverageGradientANOVA.__ge__": [[605, "skbio-stats-gradient-averagegradientanova-ge"]], "skbio.stats.gradient.AverageGradientANOVA.__getstate__": [[606, "skbio-stats-gradient-averagegradientanova-getstate"]], "skbio.stats.gradient.AverageGradientANOVA.__gt__": [[607, "skbio-stats-gradient-averagegradientanova-gt"]], "skbio.stats.gradient.AverageGradientANOVA.__hash__": [[608, "skbio-stats-gradient-averagegradientanova-hash"]], "skbio.stats.gradient.AverageGradientANOVA.__le__": [[609, "skbio-stats-gradient-averagegradientanova-le"]], "skbio.stats.gradient.AverageGradientANOVA.__lt__": [[610, "skbio-stats-gradient-averagegradientanova-lt"]], "skbio.stats.gradient.AverageGradientANOVA.__ne__": [[611, "skbio-stats-gradient-averagegradientanova-ne"]], "skbio.stats.gradient.AverageGradientANOVA.__str__": [[612, "skbio-stats-gradient-averagegradientanova-str"]], "skbio.stats.gradient.AverageGradientANOVA.get_trajectories": [[613, "skbio-stats-gradient-averagegradientanova-get-trajectories"]], "skbio.stats.gradient.CategoryResults": [[614, "skbio-stats-gradient-categoryresults"]], "skbio.stats.gradient.CategoryResults.__eq__": [[615, "skbio-stats-gradient-categoryresults-eq"]], "skbio.stats.gradient.CategoryResults.__ge__": [[616, "skbio-stats-gradient-categoryresults-ge"]], "skbio.stats.gradient.CategoryResults.__getstate__": [[617, "skbio-stats-gradient-categoryresults-getstate"]], "skbio.stats.gradient.CategoryResults.__gt__": [[618, "skbio-stats-gradient-categoryresults-gt"]], "skbio.stats.gradient.CategoryResults.__hash__": [[619, "skbio-stats-gradient-categoryresults-hash"]], "skbio.stats.gradient.CategoryResults.__le__": [[620, "skbio-stats-gradient-categoryresults-le"]], "skbio.stats.gradient.CategoryResults.__lt__": [[621, "skbio-stats-gradient-categoryresults-lt"]], "skbio.stats.gradient.CategoryResults.__ne__": [[622, "skbio-stats-gradient-categoryresults-ne"]], "skbio.stats.gradient.CategoryResults.__str__": [[623, "skbio-stats-gradient-categoryresults-str"]], "skbio.stats.gradient.CategoryResults.to_files": [[624, "skbio-stats-gradient-categoryresults-to-files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[625, "skbio-stats-gradient-firstdifferencegradientanova"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__": [[626, "skbio-stats-gradient-firstdifferencegradientanova-eq"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__": [[627, "skbio-stats-gradient-firstdifferencegradientanova-ge"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__": [[628, "skbio-stats-gradient-firstdifferencegradientanova-getstate"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__": [[629, "skbio-stats-gradient-firstdifferencegradientanova-gt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__": [[630, "skbio-stats-gradient-firstdifferencegradientanova-hash"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__": [[631, "skbio-stats-gradient-firstdifferencegradientanova-le"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__": [[632, "skbio-stats-gradient-firstdifferencegradientanova-lt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__": [[633, "skbio-stats-gradient-firstdifferencegradientanova-ne"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__": [[634, "skbio-stats-gradient-firstdifferencegradientanova-str"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories": [[635, "skbio-stats-gradient-firstdifferencegradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVA": [[636, "skbio-stats-gradient-gradientanova"]], "skbio.stats.gradient.GradientANOVA.__eq__": [[637, "skbio-stats-gradient-gradientanova-eq"]], "skbio.stats.gradient.GradientANOVA.__ge__": [[638, "skbio-stats-gradient-gradientanova-ge"]], "skbio.stats.gradient.GradientANOVA.__getstate__": [[639, "skbio-stats-gradient-gradientanova-getstate"]], "skbio.stats.gradient.GradientANOVA.__gt__": [[640, "skbio-stats-gradient-gradientanova-gt"]], "skbio.stats.gradient.GradientANOVA.__hash__": [[641, "skbio-stats-gradient-gradientanova-hash"]], "skbio.stats.gradient.GradientANOVA.__le__": [[642, "skbio-stats-gradient-gradientanova-le"]], "skbio.stats.gradient.GradientANOVA.__lt__": [[643, "skbio-stats-gradient-gradientanova-lt"]], "skbio.stats.gradient.GradientANOVA.__ne__": [[644, "skbio-stats-gradient-gradientanova-ne"]], "skbio.stats.gradient.GradientANOVA.__str__": [[645, "skbio-stats-gradient-gradientanova-str"]], "skbio.stats.gradient.GradientANOVA.get_trajectories": [[646, "skbio-stats-gradient-gradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[647, "skbio-stats-gradient-gradientanovaresults"]], "skbio.stats.gradient.GradientANOVAResults.__eq__": [[648, "skbio-stats-gradient-gradientanovaresults-eq"]], "skbio.stats.gradient.GradientANOVAResults.__ge__": [[649, "skbio-stats-gradient-gradientanovaresults-ge"]], "skbio.stats.gradient.GradientANOVAResults.__getstate__": [[650, "skbio-stats-gradient-gradientanovaresults-getstate"]], "skbio.stats.gradient.GradientANOVAResults.__gt__": [[651, "skbio-stats-gradient-gradientanovaresults-gt"]], "skbio.stats.gradient.GradientANOVAResults.__hash__": [[652, "skbio-stats-gradient-gradientanovaresults-hash"]], "skbio.stats.gradient.GradientANOVAResults.__le__": [[653, "skbio-stats-gradient-gradientanovaresults-le"]], "skbio.stats.gradient.GradientANOVAResults.__lt__": [[654, "skbio-stats-gradient-gradientanovaresults-lt"]], "skbio.stats.gradient.GradientANOVAResults.__ne__": [[655, "skbio-stats-gradient-gradientanovaresults-ne"]], "skbio.stats.gradient.GradientANOVAResults.__str__": [[656, "skbio-stats-gradient-gradientanovaresults-str"]], "skbio.stats.gradient.GradientANOVAResults.to_files": [[657, "skbio-stats-gradient-gradientanovaresults-to-files"]], "skbio.stats.gradient.GroupResults": [[658, "skbio-stats-gradient-groupresults"]], "skbio.stats.gradient.GroupResults.__eq__": [[659, "skbio-stats-gradient-groupresults-eq"]], "skbio.stats.gradient.GroupResults.__ge__": [[660, "skbio-stats-gradient-groupresults-ge"]], "skbio.stats.gradient.GroupResults.__getstate__": [[661, "skbio-stats-gradient-groupresults-getstate"]], "skbio.stats.gradient.GroupResults.__gt__": [[662, "skbio-stats-gradient-groupresults-gt"]], "skbio.stats.gradient.GroupResults.__hash__": [[663, "skbio-stats-gradient-groupresults-hash"]], "skbio.stats.gradient.GroupResults.__le__": [[664, "skbio-stats-gradient-groupresults-le"]], "skbio.stats.gradient.GroupResults.__lt__": [[665, "skbio-stats-gradient-groupresults-lt"]], "skbio.stats.gradient.GroupResults.__ne__": [[666, "skbio-stats-gradient-groupresults-ne"]], "skbio.stats.gradient.GroupResults.__str__": [[667, "skbio-stats-gradient-groupresults-str"]], "skbio.stats.gradient.GroupResults.to_files": [[668, "skbio-stats-gradient-groupresults-to-files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[669, "skbio-stats-gradient-trajectorygradientanova"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__": [[670, "skbio-stats-gradient-trajectorygradientanova-eq"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__": [[671, "skbio-stats-gradient-trajectorygradientanova-ge"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__": [[672, "skbio-stats-gradient-trajectorygradientanova-getstate"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__": [[673, "skbio-stats-gradient-trajectorygradientanova-gt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__": [[674, "skbio-stats-gradient-trajectorygradientanova-hash"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__le__": [[675, "skbio-stats-gradient-trajectorygradientanova-le"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__": [[676, "skbio-stats-gradient-trajectorygradientanova-lt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__": [[677, "skbio-stats-gradient-trajectorygradientanova-ne"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__str__": [[678, "skbio-stats-gradient-trajectorygradientanova-str"]], "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories": [[679, "skbio-stats-gradient-trajectorygradientanova-get-trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[680, "skbio-stats-gradient-windowdifferencegradientanova"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__": [[681, "skbio-stats-gradient-windowdifferencegradientanova-eq"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__": [[682, "skbio-stats-gradient-windowdifferencegradientanova-ge"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__": [[683, "skbio-stats-gradient-windowdifferencegradientanova-getstate"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__": [[684, "skbio-stats-gradient-windowdifferencegradientanova-gt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__": [[685, "skbio-stats-gradient-windowdifferencegradientanova-hash"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__": [[686, "skbio-stats-gradient-windowdifferencegradientanova-le"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__": [[687, "skbio-stats-gradient-windowdifferencegradientanova-lt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__": [[688, "skbio-stats-gradient-windowdifferencegradientanova-ne"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__": [[689, "skbio-stats-gradient-windowdifferencegradientanova-str"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories": [[690, "skbio-stats-gradient-windowdifferencegradientanova-get-trajectories"]], "skbio.stats.isubsample": [[691, "skbio-stats-isubsample"]], "Ordination methods (skbio.stats.ordination)": [[692, "ordination-methods-skbio-stats-ordination"]], "Ordination Functions": [[692, "ordination-functions"]], "Utility Functions": [[692, "utility-functions"], [873, "utility-functions"]], "skbio.stats.ordination.OrdinationResults": [[693, "skbio-stats-ordination-ordinationresults"]], "skbio.stats.ordination.OrdinationResults.__eq__": [[694, "skbio-stats-ordination-ordinationresults-eq"]], "skbio.stats.ordination.OrdinationResults.__ge__": [[695, "skbio-stats-ordination-ordinationresults-ge"]], "skbio.stats.ordination.OrdinationResults.__getstate__": [[696, "skbio-stats-ordination-ordinationresults-getstate"]], "skbio.stats.ordination.OrdinationResults.__gt__": [[697, "skbio-stats-ordination-ordinationresults-gt"]], "skbio.stats.ordination.OrdinationResults.__hash__": [[698, "skbio-stats-ordination-ordinationresults-hash"]], "skbio.stats.ordination.OrdinationResults.__le__": [[699, "skbio-stats-ordination-ordinationresults-le"]], "skbio.stats.ordination.OrdinationResults.__lt__": [[700, "skbio-stats-ordination-ordinationresults-lt"]], "skbio.stats.ordination.OrdinationResults.__ne__": [[701, "skbio-stats-ordination-ordinationresults-ne"]], "skbio.stats.ordination.OrdinationResults.__str__": [[702, "skbio-stats-ordination-ordinationresults-str"]], "skbio.stats.ordination.OrdinationResults.plot": [[703, "skbio-stats-ordination-ordinationresults-plot"]], "skbio.stats.ordination.OrdinationResults.read": [[704, "skbio-stats-ordination-ordinationresults-read"]], "skbio.stats.ordination.OrdinationResults.write": [[705, "skbio-stats-ordination-ordinationresults-write"]], "skbio.stats.ordination.ca": [[706, "skbio-stats-ordination-ca"]], "skbio.stats.ordination.cca": [[707, "skbio-stats-ordination-cca"]], "skbio.stats.ordination.corr": [[708, "skbio-stats-ordination-corr"]], "skbio.stats.ordination.e_matrix": [[709, "skbio-stats-ordination-e-matrix"]], "skbio.stats.ordination.f_matrix": [[710, "skbio-stats-ordination-f-matrix"]], "skbio.stats.ordination.mean_and_std": [[711, "skbio-stats-ordination-mean-and-std"]], "skbio.stats.ordination.pcoa": [[712, "skbio-stats-ordination-pcoa"]], "skbio.stats.ordination.pcoa_biplot": [[713, "skbio-stats-ordination-pcoa-biplot"]], "skbio.stats.ordination.rda": [[714, "skbio-stats-ordination-rda"]], "skbio.stats.ordination.scale": [[715, "skbio-stats-ordination-scale"]], "skbio.stats.ordination.svd_rank": [[716, "skbio-stats-ordination-svd-rank"]], "Empirical Power Estimation (skbio.stats.power)": [[717, "empirical-power-estimation-skbio-stats-power"]], "skbio.stats.power.confidence_bound": [[718, "skbio-stats-power-confidence-bound"]], "skbio.stats.power.paired_subsamples": [[719, "skbio-stats-power-paired-subsamples"]], "skbio.stats.power.subsample_paired_power": [[720, "skbio-stats-power-subsample-paired-power"]], "skbio.stats.power.subsample_power": [[721, "skbio-stats-power-subsample-power"]], "skbio.stats.subsample_counts": [[722, "skbio-stats-subsample-counts"]], "skbio.tree.DuplicateNodeError": [[723, "skbio-tree-duplicatenodeerror"]], "skbio.tree.MissingNodeError": [[724, "skbio-tree-missingnodeerror"]], "skbio.tree.NoLengthError": [[725, "skbio-tree-nolengtherror"]], "skbio.tree.NoParentError": [[726, "skbio-tree-noparenterror"]], "skbio.tree.TreeError": [[727, "skbio-tree-treeerror"]], "skbio.tree.TreeNode": [[728, "skbio-tree-treenode"]], "skbio.tree.TreeNode.__copy__": [[729, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.__deepcopy__": [[730, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.__eq__": [[731, "skbio-tree-treenode-eq"]], "skbio.tree.TreeNode.__ge__": [[732, "skbio-tree-treenode-ge"]], "skbio.tree.TreeNode.__getitem__": [[733, "skbio-tree-treenode-getitem"]], "skbio.tree.TreeNode.__getstate__": [[734, "skbio-tree-treenode-getstate"]], "skbio.tree.TreeNode.__gt__": [[735, "skbio-tree-treenode-gt"]], "skbio.tree.TreeNode.__hash__": [[736, "skbio-tree-treenode-hash"]], "skbio.tree.TreeNode.__iter__": [[737, "skbio-tree-treenode-iter"]], "skbio.tree.TreeNode.__le__": [[738, "skbio-tree-treenode-le"]], "skbio.tree.TreeNode.__len__": [[739, "skbio-tree-treenode-len"]], "skbio.tree.TreeNode.__lt__": [[740, "skbio-tree-treenode-lt"]], "skbio.tree.TreeNode.__ne__": [[741, "skbio-tree-treenode-ne"]], "skbio.tree.TreeNode.__str__": [[742, "skbio-tree-treenode-str"]], "skbio.tree.TreeNode.accumulate_to_ancestor": [[743, "skbio-tree-treenode-accumulate-to-ancestor"]], "skbio.tree.TreeNode.ancestors": [[744, "skbio-tree-treenode-ancestors"]], "skbio.tree.TreeNode.append": [[745, "skbio-tree-treenode-append"]], "skbio.tree.TreeNode.ascii_art": [[746, "skbio-tree-treenode-ascii-art"]], "skbio.tree.TreeNode.assign_ids": [[747, "skbio-tree-treenode-assign-ids"]], "skbio.tree.TreeNode.assign_supports": [[748, "skbio-tree-treenode-assign-supports"]], "skbio.tree.TreeNode.bifurcate": [[749, "skbio-tree-treenode-bifurcate"]], "skbio.tree.TreeNode.cache_attr": [[750, "skbio-tree-treenode-cache-attr"]], "skbio.tree.TreeNode.compare_rfd": [[751, "skbio-tree-treenode-compare-rfd"]], "skbio.tree.TreeNode.compare_subsets": [[752, "skbio-tree-treenode-compare-subsets"]], "skbio.tree.TreeNode.compare_tip_distances": [[753, "skbio-tree-treenode-compare-tip-distances"]], "skbio.tree.TreeNode.copy": [[754, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.count": [[755, "skbio-tree-treenode-count"]], "skbio.tree.TreeNode.create_caches": [[756, "skbio-tree-treenode-create-caches"]], "skbio.tree.TreeNode.deepcopy": [[757, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.descending_branch_length": [[758, "skbio-tree-treenode-descending-branch-length"]], "skbio.tree.TreeNode.distance": [[759, "skbio-tree-treenode-distance"]], "skbio.tree.TreeNode.extend": [[760, "skbio-tree-treenode-extend"]], "skbio.tree.TreeNode.find": [[761, "skbio-tree-treenode-find"]], "skbio.tree.TreeNode.find_all": [[762, "skbio-tree-treenode-find-all"]], "skbio.tree.TreeNode.find_by_func": [[763, "skbio-tree-treenode-find-by-func"]], "skbio.tree.TreeNode.find_by_id": [[764, "skbio-tree-treenode-find-by-id"]], "skbio.tree.TreeNode.from_linkage_matrix": [[765, "skbio-tree-treenode-from-linkage-matrix"]], "skbio.tree.TreeNode.from_taxdump": [[766, "skbio-tree-treenode-from-taxdump"]], "skbio.tree.TreeNode.from_taxonomy": [[767, "skbio-tree-treenode-from-taxonomy"]], "skbio.tree.TreeNode.get_max_distance": [[768, "skbio-tree-treenode-get-max-distance"]], "skbio.tree.TreeNode.has_children": [[769, "skbio-tree-treenode-has-children"]], "skbio.tree.TreeNode.index_tree": [[770, "skbio-tree-treenode-index-tree"]], "skbio.tree.TreeNode.invalidate_caches": [[771, "skbio-tree-treenode-invalidate-caches"]], "skbio.tree.TreeNode.is_root": [[772, "skbio-tree-treenode-is-root"]], "skbio.tree.TreeNode.is_tip": [[773, "skbio-tree-treenode-is-tip"]], "skbio.tree.TreeNode.lca": [[774, "skbio-tree-treenode-lca"]], "skbio.tree.TreeNode.levelorder": [[775, "skbio-tree-treenode-levelorder"]], "skbio.tree.TreeNode.lowest_common_ancestor": [[776, "skbio-tree-treenode-lowest-common-ancestor"]], "skbio.tree.TreeNode.neighbors": [[777, "skbio-tree-treenode-neighbors"]], "skbio.tree.TreeNode.non_tips": [[778, "skbio-tree-treenode-non-tips"]], "skbio.tree.TreeNode.observed_node_counts": [[779, "skbio-tree-treenode-observed-node-counts"]], "skbio.tree.TreeNode.pop": [[780, "skbio-tree-treenode-pop"]], "skbio.tree.TreeNode.postorder": [[781, "skbio-tree-treenode-postorder"]], "skbio.tree.TreeNode.pre_and_postorder": [[782, "skbio-tree-treenode-pre-and-postorder"]], "skbio.tree.TreeNode.preorder": [[783, "skbio-tree-treenode-preorder"]], "skbio.tree.TreeNode.prune": [[784, "skbio-tree-treenode-prune"]], "skbio.tree.TreeNode.read": [[785, "skbio-tree-treenode-read"]], "skbio.tree.TreeNode.remove": [[786, "skbio-tree-treenode-remove"]], "skbio.tree.TreeNode.remove_deleted": [[787, "skbio-tree-treenode-remove-deleted"]], "skbio.tree.TreeNode.root": [[788, "skbio-tree-treenode-root"]], "skbio.tree.TreeNode.root_at": [[789, "skbio-tree-treenode-root-at"]], "skbio.tree.TreeNode.root_at_midpoint": [[790, "skbio-tree-treenode-root-at-midpoint"]], "skbio.tree.TreeNode.shear": [[791, "skbio-tree-treenode-shear"]], "skbio.tree.TreeNode.shuffle": [[792, "skbio-tree-treenode-shuffle"]], "skbio.tree.TreeNode.siblings": [[793, "skbio-tree-treenode-siblings"]], "skbio.tree.TreeNode.subset": [[794, "skbio-tree-treenode-subset"]], "skbio.tree.TreeNode.subsets": [[795, "skbio-tree-treenode-subsets"]], "skbio.tree.TreeNode.subtree": [[796, "skbio-tree-treenode-subtree"]], "skbio.tree.TreeNode.tip_tip_distances": [[797, "skbio-tree-treenode-tip-tip-distances"]], "skbio.tree.TreeNode.tips": [[798, "skbio-tree-treenode-tips"]], "skbio.tree.TreeNode.to_array": [[799, "skbio-tree-treenode-to-array"]], "skbio.tree.TreeNode.to_taxonomy": [[800, "skbio-tree-treenode-to-taxonomy"]], "skbio.tree.TreeNode.traverse": [[801, "skbio-tree-treenode-traverse"]], "skbio.tree.TreeNode.unpack": [[802, "skbio-tree-treenode-unpack"]], "skbio.tree.TreeNode.unpack_by_func": [[803, "skbio-tree-treenode-unpack-by-func"]], "skbio.tree.TreeNode.unrooted_copy": [[804, "skbio-tree-treenode-unrooted-copy"]], "skbio.tree.TreeNode.unrooted_deepcopy": [[805, "skbio-tree-treenode-unrooted-deepcopy"]], "skbio.tree.TreeNode.write": [[806, "skbio-tree-treenode-write"]], "skbio.tree.majority_rule": [[807, "skbio-tree-majority-rule"]], "skbio.tree.nj": [[808, "skbio-tree-nj"]], "skbio.util.EfficiencyWarning": [[809, "skbio-util-efficiencywarning"]], "skbio.util.RepresentationWarning": [[810, "skbio-util-representationwarning"]], "skbio.util.assert_data_frame_almost_equal": [[811, "skbio-util-assert-data-frame-almost-equal"]], "skbio.util.assert_ordination_results_equal": [[812, "skbio-util-assert-ordination-results-equal"]], "skbio.util.cardinal_to_ordinal": [[813, "skbio-util-cardinal-to-ordinal"]], "skbio.util.classproperty": [[814, "skbio-util-classproperty"]], "skbio.util.classproperty.__delete__": [[815, "skbio-util-classproperty-delete"]], "skbio.util.classproperty.__eq__": [[816, "skbio-util-classproperty-eq"]], "skbio.util.classproperty.__ge__": [[817, "skbio-util-classproperty-ge"]], "skbio.util.classproperty.__get__": [[818, "skbio-util-classproperty-get"]], "skbio.util.classproperty.__getstate__": [[819, "skbio-util-classproperty-getstate"]], "skbio.util.classproperty.__gt__": [[820, "skbio-util-classproperty-gt"]], "skbio.util.classproperty.__hash__": [[821, "skbio-util-classproperty-hash"]], "skbio.util.classproperty.__le__": [[822, "skbio-util-classproperty-le"]], "skbio.util.classproperty.__lt__": [[823, "skbio-util-classproperty-lt"]], "skbio.util.classproperty.__ne__": [[824, "skbio-util-classproperty-ne"]], "skbio.util.classproperty.__set__": [[825, "skbio-util-classproperty-set"]], "skbio.util.classproperty.__set_name__": [[826, "skbio-util-classproperty-set-name"]], "skbio.util.classproperty.__str__": [[827, "skbio-util-classproperty-str"]], "skbio.util.classproperty.deleter": [[828, "skbio-util-classproperty-deleter"]], "skbio.util.classproperty.getter": [[829, "skbio-util-classproperty-getter"]], "skbio.util.classproperty.setter": [[830, "skbio-util-classproperty-setter"]], "skbio.util.find_duplicates": [[831, "skbio-util-find-duplicates"]], "skbio.util.get_data_path": [[832, "skbio-util-get-data-path"]], "skbio.util.safe_md5": [[833, "skbio-util-safe-md5"]], "skbio.workflow.Workflow": [[834, "skbio-workflow-workflow"]], "skbio.workflow.Workflow.__call__": [[835, "skbio-workflow-workflow-call"]], "skbio.workflow.Workflow.__eq__": [[836, "skbio-workflow-workflow-eq"]], "skbio.workflow.Workflow.__ge__": [[837, "skbio-workflow-workflow-ge"]], "skbio.workflow.Workflow.__getstate__": [[838, "skbio-workflow-workflow-getstate"]], "skbio.workflow.Workflow.__gt__": [[839, "skbio-workflow-workflow-gt"]], "skbio.workflow.Workflow.__hash__": [[840, "skbio-workflow-workflow-hash"]], "skbio.workflow.Workflow.__le__": [[841, "skbio-workflow-workflow-le"]], "skbio.workflow.Workflow.__lt__": [[842, "skbio-workflow-workflow-lt"]], "skbio.workflow.Workflow.__ne__": [[843, "skbio-workflow-workflow-ne"]], "skbio.workflow.Workflow.__str__": [[844, "skbio-workflow-workflow-str"]], "skbio.workflow.Workflow.initialize_state": [[845, "skbio-workflow-workflow-initialize-state"]], "skbio.workflow.method": [[846, "skbio-workflow-method"]], "skbio.workflow.method.__call__": [[847, "skbio-workflow-method-call"]], "skbio.workflow.method.__eq__": [[848, "skbio-workflow-method-eq"]], "skbio.workflow.method.__ge__": [[849, "skbio-workflow-method-ge"]], "skbio.workflow.method.__getstate__": [[850, "skbio-workflow-method-getstate"]], "skbio.workflow.method.__gt__": [[851, "skbio-workflow-method-gt"]], "skbio.workflow.method.__hash__": [[852, "skbio-workflow-method-hash"]], "skbio.workflow.method.__le__": [[853, "skbio-workflow-method-le"]], "skbio.workflow.method.__lt__": [[854, "skbio-workflow-method-lt"]], "skbio.workflow.method.__ne__": [[855, "skbio-workflow-method-ne"]], "skbio.workflow.method.__str__": [[856, "skbio-workflow-method-str"]], "skbio.workflow.requires": [[857, "skbio-workflow-requires"]], "skbio.workflow.requires.__call__": [[858, "skbio-workflow-requires-call"]], "skbio.workflow.requires.__eq__": [[859, "skbio-workflow-requires-eq"]], "skbio.workflow.requires.__ge__": [[860, "skbio-workflow-requires-ge"]], "skbio.workflow.requires.__getstate__": [[861, "skbio-workflow-requires-getstate"]], "skbio.workflow.requires.__gt__": [[862, "skbio-workflow-requires-gt"]], "skbio.workflow.requires.__hash__": [[863, "skbio-workflow-requires-hash"]], "skbio.workflow.requires.__le__": [[864, "skbio-workflow-requires-le"]], "skbio.workflow.requires.__lt__": [[865, "skbio-workflow-requires-lt"]], "skbio.workflow.requires.__ne__": [[866, "skbio-workflow-requires-ne"]], "skbio.workflow.requires.__str__": [[867, "skbio-workflow-requires-str"]], "scikit-bio 0.6.0-dev": [[868, "scikit-bio-version"]], "API Reference": [[868, "api-reference"]], "File I/O (skbio.io)": [[869, "file-i-o-skbio-io"]], "Supported file formats": [[869, "supported-file-formats"]], "User functions": [[869, "user-functions"]], "User exceptions and warnings": [[869, "user-exceptions-and-warnings"]], "Introduction to I/O": [[869, "introduction-to-i-o"]], "What kinds of files scikit-bio can use": [[869, "what-kinds-of-files-scikit-bio-can-use"]], "Reading files into scikit-bio": [[869, "reading-files-into-scikit-bio"]], "Writing files from scikit-bio": [[869, "writing-files-from-scikit-bio"]], "Metadata (skbio.metadata)": [[870, "metadata-skbio-metadata"]], "Sequences (skbio.sequence)": [[871, "sequences-skbio-sequence"]], "Statistics (skbio.stats)": [[872, "statistics-skbio-stats"]], "Tree representations (skbio.tree)": [[873, "tree-representations-skbio-tree"]], "Phylogenetic Reconstruction": [[873, "phylogenetic-reconstruction"]], "Utility functionality (skbio.util)": [[874, "utility-functionality-skbio-util"]], "Testing functionality": [[874, "testing-functionality"]], "Miscellaneous functionality": [[874, "miscellaneous-functionality"]], "Warnings": [[874, "warnings"]], "Constructing workflows (skbio.workflow)": [[875, "constructing-workflows-skbio-workflow"]], "Decorators": [[875, "decorators"]]}, "indexentries": {"module": [[0, "module-skbio.alignment"], [1, "module-skbio.diversity"], [68, "module-skbio.diversity.alpha"], [104, "module-skbio.diversity.beta"], [131, "module-skbio.io.format.binary_dm"], [132, "module-skbio.io.format.blast6"], [133, "module-skbio.io.format.blast7"], [134, "module-skbio.io.format.clustal"], [135, "module-skbio.io.format.embl"], [136, "module-skbio.io.format.fasta"], [137, "module-skbio.io.format.fastq"], [138, "module-skbio.io.format.genbank"], [139, "module-skbio.io.format.gff3"], [140, "module-skbio.io.format.lsmat"], [141, "module-skbio.io.format.newick"], [142, "module-skbio.io.format.ordination"], [143, "module-skbio.io.format.phylip"], [144, "module-skbio.io.format.qseq"], [145, "module-skbio.io.format.sample_metadata"], [146, "module-skbio.io.format.stockholm"], [147, "module-skbio.io.format.taxdump"], [148, "module-skbio.io.registry"], [189, "module-skbio.io.util"], [518, "module-skbio.sequence.distance"], [521, "module-skbio.stats.composition"], [540, "module-skbio.stats.distance"], [600, "module-skbio.stats.evolve"], [602, "module-skbio.stats.gradient"], [692, "module-skbio.stats.ordination"], [717, "module-skbio.stats.power"], [869, "module-skbio.io"], [870, "module-skbio.metadata"], [871, "module-skbio.sequence"], [872, "module-skbio.stats"], [873, "module-skbio.tree"], [874, "module-skbio.util"], [875, "module-skbio.workflow"]], "skbio.alignment": [[0, "module-skbio.alignment"]], "skbio.diversity": [[1, "module-skbio.diversity"]], "alignmentstructure (class in skbio.alignment)": [[2, "skbio.alignment.AlignmentStructure"]], "__eq__() (skbio.alignment.alignmentstructure method)": [[3, "skbio.alignment.AlignmentStructure.__eq__"]], "__ge__() (skbio.alignment.alignmentstructure method)": [[4, "skbio.alignment.AlignmentStructure.__ge__"]], "__getitem__() (skbio.alignment.alignmentstructure method)": [[5, "skbio.alignment.AlignmentStructure.__getitem__"]], "__getstate__() (skbio.alignment.alignmentstructure method)": [[6, "skbio.alignment.AlignmentStructure.__getstate__"]], "__gt__() (skbio.alignment.alignmentstructure method)": [[7, "skbio.alignment.AlignmentStructure.__gt__"]], "__hash__() (skbio.alignment.alignmentstructure method)": [[8, "skbio.alignment.AlignmentStructure.__hash__"]], "__le__() (skbio.alignment.alignmentstructure method)": [[9, "skbio.alignment.AlignmentStructure.__le__"]], "__lt__() (skbio.alignment.alignmentstructure method)": [[10, "skbio.alignment.AlignmentStructure.__lt__"]], "__ne__() (skbio.alignment.alignmentstructure method)": [[11, "skbio.alignment.AlignmentStructure.__ne__"]], "__setstate__() (skbio.alignment.alignmentstructure method)": [[12, "skbio.alignment.AlignmentStructure.__setstate__"]], "__str__() (skbio.alignment.alignmentstructure method)": [[13, "skbio.alignment.AlignmentStructure.__str__"]], "is_zero_based() (skbio.alignment.alignmentstructure method)": [[14, "skbio.alignment.AlignmentStructure.is_zero_based"]], "set_zero_based() (skbio.alignment.alignmentstructure method)": [[15, "skbio.alignment.AlignmentStructure.set_zero_based"]], "stripedsmithwaterman (class in skbio.alignment)": [[16, "skbio.alignment.StripedSmithWaterman"]], "__call__() (skbio.alignment.stripedsmithwaterman method)": [[17, "skbio.alignment.StripedSmithWaterman.__call__"]], "__eq__() (skbio.alignment.stripedsmithwaterman method)": [[18, "skbio.alignment.StripedSmithWaterman.__eq__"]], "__ge__() (skbio.alignment.stripedsmithwaterman method)": [[19, "skbio.alignment.StripedSmithWaterman.__ge__"]], "__getstate__() (skbio.alignment.stripedsmithwaterman method)": [[20, "skbio.alignment.StripedSmithWaterman.__getstate__"]], "__gt__() (skbio.alignment.stripedsmithwaterman method)": [[21, "skbio.alignment.StripedSmithWaterman.__gt__"]], "__hash__() (skbio.alignment.stripedsmithwaterman method)": [[22, "skbio.alignment.StripedSmithWaterman.__hash__"]], "__le__() (skbio.alignment.stripedsmithwaterman method)": [[23, "skbio.alignment.StripedSmithWaterman.__le__"]], "__lt__() (skbio.alignment.stripedsmithwaterman method)": [[24, "skbio.alignment.StripedSmithWaterman.__lt__"]], "__ne__() (skbio.alignment.stripedsmithwaterman method)": [[25, "skbio.alignment.StripedSmithWaterman.__ne__"]], "__setstate__() (skbio.alignment.stripedsmithwaterman method)": [[26, "skbio.alignment.StripedSmithWaterman.__setstate__"]], "__str__() (skbio.alignment.stripedsmithwaterman method)": [[27, "skbio.alignment.StripedSmithWaterman.__str__"]], "tabularmsa (class in skbio.alignment)": [[28, "skbio.alignment.TabularMSA"]], "__bool__() (skbio.alignment.tabularmsa method)": [[29, "skbio.alignment.TabularMSA.__bool__"]], "__contains__() (skbio.alignment.tabularmsa method)": [[30, "skbio.alignment.TabularMSA.__contains__"]], "__copy__() (skbio.alignment.tabularmsa method)": [[31, "skbio.alignment.TabularMSA.__copy__"]], "__deepcopy__() (skbio.alignment.tabularmsa method)": [[32, "skbio.alignment.TabularMSA.__deepcopy__"]], "__eq__() (skbio.alignment.tabularmsa method)": [[33, "skbio.alignment.TabularMSA.__eq__"]], "__ge__() (skbio.alignment.tabularmsa method)": [[34, "skbio.alignment.TabularMSA.__ge__"]], "__getitem__() (skbio.alignment.tabularmsa method)": [[35, "skbio.alignment.TabularMSA.__getitem__"]], "__getstate__() (skbio.alignment.tabularmsa method)": [[36, "skbio.alignment.TabularMSA.__getstate__"]], "__gt__() (skbio.alignment.tabularmsa method)": [[37, "skbio.alignment.TabularMSA.__gt__"]], "__iter__() (skbio.alignment.tabularmsa method)": [[38, "skbio.alignment.TabularMSA.__iter__"]], "__le__() (skbio.alignment.tabularmsa method)": [[39, "skbio.alignment.TabularMSA.__le__"]], "__len__() (skbio.alignment.tabularmsa method)": [[40, "skbio.alignment.TabularMSA.__len__"]], "__lt__() (skbio.alignment.tabularmsa method)": [[41, "skbio.alignment.TabularMSA.__lt__"]], "__ne__() (skbio.alignment.tabularmsa method)": [[42, "skbio.alignment.TabularMSA.__ne__"]], "__reversed__() (skbio.alignment.tabularmsa method)": [[43, "skbio.alignment.TabularMSA.__reversed__"]], "__str__() (skbio.alignment.tabularmsa method)": [[44, "skbio.alignment.TabularMSA.__str__"]], "append() (skbio.alignment.tabularmsa method)": [[45, "skbio.alignment.TabularMSA.append"]], "consensus() (skbio.alignment.tabularmsa method)": [[46, "skbio.alignment.TabularMSA.consensus"]], "conservation() (skbio.alignment.tabularmsa method)": [[47, "skbio.alignment.TabularMSA.conservation"]], "extend() (skbio.alignment.tabularmsa method)": [[48, "skbio.alignment.TabularMSA.extend"]], "from_dict() (skbio.alignment.tabularmsa class method)": [[49, "skbio.alignment.TabularMSA.from_dict"]], "gap_frequencies() (skbio.alignment.tabularmsa method)": [[50, "skbio.alignment.TabularMSA.gap_frequencies"]], "has_metadata() (skbio.alignment.tabularmsa method)": [[51, "skbio.alignment.TabularMSA.has_metadata"]], "has_positional_metadata() (skbio.alignment.tabularmsa method)": [[52, "skbio.alignment.TabularMSA.has_positional_metadata"]], "iter_positions() (skbio.alignment.tabularmsa method)": [[53, "skbio.alignment.TabularMSA.iter_positions"]], "join() (skbio.alignment.tabularmsa method)": [[54, "skbio.alignment.TabularMSA.join"]], "read() (skbio.alignment.tabularmsa class method)": [[55, "skbio.alignment.TabularMSA.read"]], "reassign_index() (skbio.alignment.tabularmsa method)": [[56, "skbio.alignment.TabularMSA.reassign_index"]], "sort() (skbio.alignment.tabularmsa method)": [[57, "skbio.alignment.TabularMSA.sort"]], "to_dict() (skbio.alignment.tabularmsa method)": [[58, "skbio.alignment.TabularMSA.to_dict"]], "write() (skbio.alignment.tabularmsa method)": [[59, "skbio.alignment.TabularMSA.write"]], "global_pairwise_align() (in module skbio.alignment)": [[60, "skbio.alignment.global_pairwise_align"]], "global_pairwise_align_nucleotide() (in module skbio.alignment)": [[61, "skbio.alignment.global_pairwise_align_nucleotide"]], "global_pairwise_align_protein() (in module skbio.alignment)": [[62, "skbio.alignment.global_pairwise_align_protein"]], "local_pairwise_align() (in module skbio.alignment)": [[63, "skbio.alignment.local_pairwise_align"]], "local_pairwise_align_nucleotide() (in module skbio.alignment)": [[64, "skbio.alignment.local_pairwise_align_nucleotide"]], "local_pairwise_align_protein() (in module skbio.alignment)": [[65, "skbio.alignment.local_pairwise_align_protein"]], "local_pairwise_align_ssw() (in module skbio.alignment)": [[66, "skbio.alignment.local_pairwise_align_ssw"]], "make_identity_substitution_matrix() (in module skbio.alignment)": [[67, "skbio.alignment.make_identity_substitution_matrix"]], "skbio.diversity.alpha": [[68, "module-skbio.diversity.alpha"]], "ace() (in module skbio.diversity.alpha)": [[69, "skbio.diversity.alpha.ace"]], "berger_parker_d() (in module skbio.diversity.alpha)": [[70, "skbio.diversity.alpha.berger_parker_d"]], "brillouin_d() (in module skbio.diversity.alpha)": [[71, "skbio.diversity.alpha.brillouin_d"]], "chao1() (in module skbio.diversity.alpha)": [[72, "skbio.diversity.alpha.chao1"]], "chao1_ci() (in module skbio.diversity.alpha)": [[73, "skbio.diversity.alpha.chao1_ci"]], "dominance() (in module skbio.diversity.alpha)": [[74, "skbio.diversity.alpha.dominance"]], "doubles() (in module skbio.diversity.alpha)": [[75, "skbio.diversity.alpha.doubles"]], "enspie() (in module skbio.diversity.alpha)": [[76, "skbio.diversity.alpha.enspie"]], "esty_ci() (in module skbio.diversity.alpha)": [[77, "skbio.diversity.alpha.esty_ci"]], "faith_pd() (in module skbio.diversity.alpha)": [[78, "skbio.diversity.alpha.faith_pd"]], "fisher_alpha() (in module skbio.diversity.alpha)": [[79, "skbio.diversity.alpha.fisher_alpha"]], "gini_index() (in module skbio.diversity.alpha)": [[80, "skbio.diversity.alpha.gini_index"]], "goods_coverage() (in module skbio.diversity.alpha)": [[81, "skbio.diversity.alpha.goods_coverage"]], "heip_e() (in module skbio.diversity.alpha)": [[82, "skbio.diversity.alpha.heip_e"]], "kempton_taylor_q() (in module skbio.diversity.alpha)": [[83, "skbio.diversity.alpha.kempton_taylor_q"]], "lladser_ci() (in module skbio.diversity.alpha)": [[84, "skbio.diversity.alpha.lladser_ci"]], "lladser_pe() (in module skbio.diversity.alpha)": [[85, "skbio.diversity.alpha.lladser_pe"]], "margalef() (in module skbio.diversity.alpha)": [[86, "skbio.diversity.alpha.margalef"]], "mcintosh_d() (in module skbio.diversity.alpha)": [[87, "skbio.diversity.alpha.mcintosh_d"]], "mcintosh_e() (in module skbio.diversity.alpha)": [[88, "skbio.diversity.alpha.mcintosh_e"]], "menhinick() (in module skbio.diversity.alpha)": [[89, "skbio.diversity.alpha.menhinick"]], "michaelis_menten_fit() (in module skbio.diversity.alpha)": [[90, "skbio.diversity.alpha.michaelis_menten_fit"]], "observed_features() (in module skbio.diversity.alpha)": [[91, "skbio.diversity.alpha.observed_features"]], "observed_otus() (in module skbio.diversity.alpha)": [[92, "skbio.diversity.alpha.observed_otus"]], "osd() (in module skbio.diversity.alpha)": [[93, "skbio.diversity.alpha.osd"]], "phydiv() (in module skbio.diversity.alpha)": [[94, "skbio.diversity.alpha.phydiv"]], "pielou_e() (in module skbio.diversity.alpha)": [[95, "skbio.diversity.alpha.pielou_e"]], "robbins() (in module skbio.diversity.alpha)": [[96, "skbio.diversity.alpha.robbins"]], "shannon() (in module skbio.diversity.alpha)": [[97, "skbio.diversity.alpha.shannon"]], "simpson() (in module skbio.diversity.alpha)": [[98, "skbio.diversity.alpha.simpson"]], "simpson_e() (in module skbio.diversity.alpha)": [[99, "skbio.diversity.alpha.simpson_e"]], "singles() (in module skbio.diversity.alpha)": [[100, "skbio.diversity.alpha.singles"]], "sobs() (in module skbio.diversity.alpha)": [[101, "skbio.diversity.alpha.sobs"]], "strong() (in module skbio.diversity.alpha)": [[102, "skbio.diversity.alpha.strong"]], "alpha_diversity() (in module skbio.diversity)": [[103, "skbio.diversity.alpha_diversity"]], "skbio.diversity.beta": [[104, "module-skbio.diversity.beta"]], "unweighted_unifrac() (in module skbio.diversity.beta)": [[105, "skbio.diversity.beta.unweighted_unifrac"]], "weighted_unifrac() (in module skbio.diversity.beta)": [[106, "skbio.diversity.beta.weighted_unifrac"]], "beta_diversity() (in module skbio.diversity)": [[107, "skbio.diversity.beta_diversity"]], "block_beta_diversity() (in module skbio.diversity)": [[108, "skbio.diversity.block_beta_diversity"]], "get_alpha_diversity_metrics() (in module skbio.diversity)": [[109, "skbio.diversity.get_alpha_diversity_metrics"]], "get_beta_diversity_metrics() (in module skbio.diversity)": [[110, "skbio.diversity.get_beta_diversity_metrics"]], "partial_beta_diversity() (in module skbio.diversity)": [[111, "skbio.diversity.partial_beta_diversity"]], "argumentoverridewarning": [[112, "skbio.io.ArgumentOverrideWarning"]], "blast7formaterror": [[113, "skbio.io.BLAST7FormatError"]], "clustalformaterror": [[114, "skbio.io.ClustalFormatError"]], "emblformaterror": [[115, "skbio.io.EMBLFormatError"]], "fastaformaterror": [[116, "skbio.io.FASTAFormatError"]], "fastqformaterror": [[117, "skbio.io.FASTQFormatError"]], "fileformaterror": [[118, "skbio.io.FileFormatError"]], "formatidentificationwarning": [[119, "skbio.io.FormatIdentificationWarning"]], "gff3formaterror": [[120, "skbio.io.GFF3FormatError"]], "genbankformaterror": [[121, "skbio.io.GenBankFormatError"]], "iosourceerror": [[122, "skbio.io.IOSourceError"]], "lsmatformaterror": [[123, "skbio.io.LSMatFormatError"]], "newickformaterror": [[124, "skbio.io.NewickFormatError"]], "ordinationformaterror": [[125, "skbio.io.OrdinationFormatError"]], "phylipformaterror": [[126, "skbio.io.PhylipFormatError"]], "qseqformaterror": [[127, "skbio.io.QSeqFormatError"]], "qualformaterror": [[128, "skbio.io.QUALFormatError"]], "stockholmformaterror": [[129, "skbio.io.StockholmFormatError"]], "unrecognizedformaterror": [[130, "skbio.io.UnrecognizedFormatError"]], "skbio.io.format.binary_dm": [[131, "module-skbio.io.format.binary_dm"]], "skbio.io.format.blast6": [[132, "module-skbio.io.format.blast6"]], "skbio.io.format.blast7": [[133, "module-skbio.io.format.blast7"]], "skbio.io.format.clustal": [[134, "module-skbio.io.format.clustal"]], "skbio.io.format.embl": [[135, "module-skbio.io.format.embl"]], "skbio.io.format.fasta": [[136, "module-skbio.io.format.fasta"]], "skbio.io.format.fastq": [[137, "module-skbio.io.format.fastq"]], "skbio.io.format.genbank": [[138, "module-skbio.io.format.genbank"]], "skbio.io.format.gff3": [[139, "module-skbio.io.format.gff3"]], "skbio.io.format.lsmat": [[140, "module-skbio.io.format.lsmat"]], "skbio.io.format.newick": [[141, "module-skbio.io.format.newick"]], "skbio.io.format.ordination": [[142, "module-skbio.io.format.ordination"]], "skbio.io.format.phylip": [[143, "module-skbio.io.format.phylip"]], "skbio.io.format.qseq": [[144, "module-skbio.io.format.qseq"]], "skbio.io.format.sample_metadata": [[145, "module-skbio.io.format.sample_metadata"]], "skbio.io.format.stockholm": [[146, "module-skbio.io.format.stockholm"]], "skbio.io.format.taxdump": [[147, "module-skbio.io.format.taxdump"]], "skbio.io.registry": [[148, "module-skbio.io.registry"]], "duplicateregistrationerror": [[149, "skbio.io.registry.DuplicateRegistrationError"]], "format (class in skbio.io.registry)": [[150, "skbio.io.registry.Format"]], "__eq__() (skbio.io.registry.format method)": [[151, "skbio.io.registry.Format.__eq__"]], "__ge__() (skbio.io.registry.format method)": [[152, "skbio.io.registry.Format.__ge__"]], "__getstate__() (skbio.io.registry.format method)": [[153, "skbio.io.registry.Format.__getstate__"]], "__gt__() (skbio.io.registry.format method)": [[154, "skbio.io.registry.Format.__gt__"]], "__hash__() (skbio.io.registry.format method)": [[155, "skbio.io.registry.Format.__hash__"]], "__le__() (skbio.io.registry.format method)": [[156, "skbio.io.registry.Format.__le__"]], "__lt__() (skbio.io.registry.format method)": [[157, "skbio.io.registry.Format.__lt__"]], "__ne__() (skbio.io.registry.format method)": [[158, "skbio.io.registry.Format.__ne__"]], "__str__() (skbio.io.registry.format method)": [[159, "skbio.io.registry.Format.__str__"]], "reader() (skbio.io.registry.format method)": [[160, "skbio.io.registry.Format.reader"]], "sniffer() (skbio.io.registry.format method)": [[161, "skbio.io.registry.Format.sniffer"]], "writer() (skbio.io.registry.format method)": [[162, "skbio.io.registry.Format.writer"]], "ioregistry (class in skbio.io.registry)": [[163, "skbio.io.registry.IORegistry"]], "__eq__() (skbio.io.registry.ioregistry method)": [[164, "skbio.io.registry.IORegistry.__eq__"]], "__ge__() (skbio.io.registry.ioregistry method)": [[165, "skbio.io.registry.IORegistry.__ge__"]], "__getstate__() (skbio.io.registry.ioregistry method)": [[166, "skbio.io.registry.IORegistry.__getstate__"]], "__gt__() (skbio.io.registry.ioregistry method)": [[167, "skbio.io.registry.IORegistry.__gt__"]], "__hash__() (skbio.io.registry.ioregistry method)": [[168, "skbio.io.registry.IORegistry.__hash__"]], "__le__() (skbio.io.registry.ioregistry method)": [[169, "skbio.io.registry.IORegistry.__le__"]], "__lt__() (skbio.io.registry.ioregistry method)": [[170, "skbio.io.registry.IORegistry.__lt__"]], "__ne__() (skbio.io.registry.ioregistry method)": [[171, "skbio.io.registry.IORegistry.__ne__"]], "__str__() (skbio.io.registry.ioregistry method)": [[172, "skbio.io.registry.IORegistry.__str__"]], "add_format() (skbio.io.registry.ioregistry method)": [[173, "skbio.io.registry.IORegistry.add_format"]], "create_format() (skbio.io.registry.ioregistry method)": [[174, "skbio.io.registry.IORegistry.create_format"]], "get_reader() (skbio.io.registry.ioregistry method)": [[175, "skbio.io.registry.IORegistry.get_reader"]], "get_sniffer() (skbio.io.registry.ioregistry method)": [[176, "skbio.io.registry.IORegistry.get_sniffer"]], "get_writer() (skbio.io.registry.ioregistry method)": [[177, "skbio.io.registry.IORegistry.get_writer"]], "list_read_formats() (skbio.io.registry.ioregistry method)": [[178, "skbio.io.registry.IORegistry.list_read_formats"]], "list_write_formats() (skbio.io.registry.ioregistry method)": [[179, "skbio.io.registry.IORegistry.list_write_formats"]], "monkey_patch() (skbio.io.registry.ioregistry method)": [[180, "skbio.io.registry.IORegistry.monkey_patch"]], "read() (skbio.io.registry.ioregistry method)": [[181, "skbio.io.registry.IORegistry.read"]], "sniff() (skbio.io.registry.ioregistry method)": [[182, "skbio.io.registry.IORegistry.sniff"]], "write() (skbio.io.registry.ioregistry method)": [[183, "skbio.io.registry.IORegistry.write"]], "invalidregistrationerror": [[184, "skbio.io.registry.InvalidRegistrationError"]], "create_format() (in module skbio.io.registry)": [[185, "skbio.io.registry.create_format"]], "read() (in module skbio.io.registry)": [[186, "skbio.io.registry.read"]], "sniff() (in module skbio.io.registry)": [[187, "skbio.io.registry.sniff"]], "write() (in module skbio.io.registry)": [[188, "skbio.io.registry.write"]], "skbio.io.util": [[189, "module-skbio.io.util"]], "open() (in module skbio.io.util)": [[190, "skbio.io.util.open"]], "open_file() (in module skbio.io.util)": [[191, "skbio.io.util.open_file"]], "open_files() (in module skbio.io.util)": [[192, "skbio.io.util.open_files"]], "interval (class in skbio.metadata)": [[193, "skbio.metadata.Interval"]], "__eq__() (skbio.metadata.interval method)": [[194, "skbio.metadata.Interval.__eq__"]], "__ge__() (skbio.metadata.interval method)": [[195, "skbio.metadata.Interval.__ge__"]], "__getstate__() (skbio.metadata.interval method)": [[196, "skbio.metadata.Interval.__getstate__"]], "__gt__() (skbio.metadata.interval method)": [[197, "skbio.metadata.Interval.__gt__"]], "__le__() (skbio.metadata.interval method)": [[198, "skbio.metadata.Interval.__le__"]], "__lt__() (skbio.metadata.interval method)": [[199, "skbio.metadata.Interval.__lt__"]], "__ne__() (skbio.metadata.interval method)": [[200, "skbio.metadata.Interval.__ne__"]], "__str__() (skbio.metadata.interval method)": [[201, "skbio.metadata.Interval.__str__"]], "drop() (skbio.metadata.interval method)": [[202, "skbio.metadata.Interval.drop"]], "intervalmetadata (class in skbio.metadata)": [[203, "skbio.metadata.IntervalMetadata"]], "__copy__() (skbio.metadata.intervalmetadata method)": [[204, "skbio.metadata.IntervalMetadata.__copy__"]], "__deepcopy__() (skbio.metadata.intervalmetadata method)": [[205, "skbio.metadata.IntervalMetadata.__deepcopy__"]], "__eq__() (skbio.metadata.intervalmetadata method)": [[206, "skbio.metadata.IntervalMetadata.__eq__"]], "__ge__() (skbio.metadata.intervalmetadata method)": [[207, "skbio.metadata.IntervalMetadata.__ge__"]], "__getstate__() (skbio.metadata.intervalmetadata method)": [[208, "skbio.metadata.IntervalMetadata.__getstate__"]], "__gt__() (skbio.metadata.intervalmetadata method)": [[209, "skbio.metadata.IntervalMetadata.__gt__"]], "__le__() (skbio.metadata.intervalmetadata method)": [[210, "skbio.metadata.IntervalMetadata.__le__"]], "__lt__() (skbio.metadata.intervalmetadata method)": [[211, "skbio.metadata.IntervalMetadata.__lt__"]], "__ne__() (skbio.metadata.intervalmetadata method)": [[212, "skbio.metadata.IntervalMetadata.__ne__"]], "__str__() (skbio.metadata.intervalmetadata method)": [[213, "skbio.metadata.IntervalMetadata.__str__"]], "add() (skbio.metadata.intervalmetadata method)": [[214, "skbio.metadata.IntervalMetadata.add"]], "concat() (skbio.metadata.intervalmetadata class method)": [[215, "skbio.metadata.IntervalMetadata.concat"]], "drop() (skbio.metadata.intervalmetadata method)": [[216, "skbio.metadata.IntervalMetadata.drop"]], "merge() (skbio.metadata.intervalmetadata method)": [[217, "skbio.metadata.IntervalMetadata.merge"]], "query() (skbio.metadata.intervalmetadata method)": [[218, "skbio.metadata.IntervalMetadata.query"]], "read() (skbio.metadata.intervalmetadata class method)": [[219, "skbio.metadata.IntervalMetadata.read"]], "sort() (skbio.metadata.intervalmetadata method)": [[220, "skbio.metadata.IntervalMetadata.sort"]], "write() (skbio.metadata.intervalmetadata method)": [[221, "skbio.metadata.IntervalMetadata.write"]], "dna (class in skbio.sequence)": [[222, "skbio.sequence.DNA"]], "__bool__() (skbio.sequence.dna method)": [[223, "skbio.sequence.DNA.__bool__"]], "__contains__() (skbio.sequence.dna method)": [[224, "skbio.sequence.DNA.__contains__"]], "__copy__() (skbio.sequence.dna method)": [[225, "skbio.sequence.DNA.__copy__"]], "__deepcopy__() (skbio.sequence.dna method)": [[226, "skbio.sequence.DNA.__deepcopy__"]], "__eq__() (skbio.sequence.dna method)": [[227, "skbio.sequence.DNA.__eq__"]], "__ge__() (skbio.sequence.dna method)": [[228, "skbio.sequence.DNA.__ge__"]], "__getitem__() (skbio.sequence.dna method)": [[229, "skbio.sequence.DNA.__getitem__"]], "__getstate__() (skbio.sequence.dna method)": [[230, "skbio.sequence.DNA.__getstate__"]], "__gt__() (skbio.sequence.dna method)": [[231, "skbio.sequence.DNA.__gt__"]], "__iter__() (skbio.sequence.dna method)": [[232, "skbio.sequence.DNA.__iter__"]], "__le__() (skbio.sequence.dna method)": [[233, "skbio.sequence.DNA.__le__"]], "__len__() (skbio.sequence.dna method)": [[234, "skbio.sequence.DNA.__len__"]], "__lt__() (skbio.sequence.dna method)": [[235, "skbio.sequence.DNA.__lt__"]], "__ne__() (skbio.sequence.dna method)": [[236, "skbio.sequence.DNA.__ne__"]], "__reversed__() (skbio.sequence.dna method)": [[237, "skbio.sequence.DNA.__reversed__"]], "__str__() (skbio.sequence.dna method)": [[238, "skbio.sequence.DNA.__str__"]], "complement() (skbio.sequence.dna method)": [[239, "skbio.sequence.DNA.complement"]], "concat() (skbio.sequence.dna class method)": [[240, "skbio.sequence.DNA.concat"]], "count() (skbio.sequence.dna method)": [[241, "skbio.sequence.DNA.count"]], "definites() (skbio.sequence.dna method)": [[242, "skbio.sequence.DNA.definites"]], "degap() (skbio.sequence.dna method)": [[243, "skbio.sequence.DNA.degap"]], "degenerates() (skbio.sequence.dna method)": [[244, "skbio.sequence.DNA.degenerates"]], "distance() (skbio.sequence.dna method)": [[245, "skbio.sequence.DNA.distance"]], "expand_degenerates() (skbio.sequence.dna method)": [[246, "skbio.sequence.DNA.expand_degenerates"]], "find_motifs() (skbio.sequence.dna method)": [[247, "skbio.sequence.DNA.find_motifs"]], "find_with_regex() (skbio.sequence.dna method)": [[248, "skbio.sequence.DNA.find_with_regex"]], "frequencies() (skbio.sequence.dna method)": [[249, "skbio.sequence.DNA.frequencies"]], "gaps() (skbio.sequence.dna method)": [[250, "skbio.sequence.DNA.gaps"]], "gc_content() (skbio.sequence.dna method)": [[251, "skbio.sequence.DNA.gc_content"]], "gc_frequency() (skbio.sequence.dna method)": [[252, "skbio.sequence.DNA.gc_frequency"]], "has_definites() (skbio.sequence.dna method)": [[253, "skbio.sequence.DNA.has_definites"]], "has_degenerates() (skbio.sequence.dna method)": [[254, "skbio.sequence.DNA.has_degenerates"]], "has_gaps() (skbio.sequence.dna method)": [[255, "skbio.sequence.DNA.has_gaps"]], "has_interval_metadata() (skbio.sequence.dna method)": [[256, "skbio.sequence.DNA.has_interval_metadata"]], "has_metadata() (skbio.sequence.dna method)": [[257, "skbio.sequence.DNA.has_metadata"]], "has_nondegenerates() (skbio.sequence.dna method)": [[258, "skbio.sequence.DNA.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.dna method)": [[259, "skbio.sequence.DNA.has_positional_metadata"]], "index() (skbio.sequence.dna method)": [[260, "skbio.sequence.DNA.index"]], "is_reverse_complement() (skbio.sequence.dna method)": [[261, "skbio.sequence.DNA.is_reverse_complement"]], "iter_contiguous() (skbio.sequence.dna method)": [[262, "skbio.sequence.DNA.iter_contiguous"]], "iter_kmers() (skbio.sequence.dna method)": [[263, "skbio.sequence.DNA.iter_kmers"]], "kmer_frequencies() (skbio.sequence.dna method)": [[264, "skbio.sequence.DNA.kmer_frequencies"]], "lowercase() (skbio.sequence.dna method)": [[265, "skbio.sequence.DNA.lowercase"]], "match_frequency() (skbio.sequence.dna method)": [[266, "skbio.sequence.DNA.match_frequency"]], "matches() (skbio.sequence.dna method)": [[267, "skbio.sequence.DNA.matches"]], "mismatch_frequency() (skbio.sequence.dna method)": [[268, "skbio.sequence.DNA.mismatch_frequency"]], "mismatches() (skbio.sequence.dna method)": [[269, "skbio.sequence.DNA.mismatches"]], "nondegenerates() (skbio.sequence.dna method)": [[270, "skbio.sequence.DNA.nondegenerates"]], "read() (skbio.sequence.dna class method)": [[271, "skbio.sequence.DNA.read"]], "replace() (skbio.sequence.dna method)": [[272, "skbio.sequence.DNA.replace"]], "reverse_complement() (skbio.sequence.dna method)": [[273, "skbio.sequence.DNA.reverse_complement"]], "to_indices() (skbio.sequence.dna method)": [[274, "skbio.sequence.DNA.to_indices"]], "to_regex() (skbio.sequence.dna method)": [[275, "skbio.sequence.DNA.to_regex"]], "transcribe() (skbio.sequence.dna method)": [[276, "skbio.sequence.DNA.transcribe"]], "translate() (skbio.sequence.dna method)": [[277, "skbio.sequence.DNA.translate"]], "translate_six_frames() (skbio.sequence.dna method)": [[278, "skbio.sequence.DNA.translate_six_frames"]], "write() (skbio.sequence.dna method)": [[279, "skbio.sequence.DNA.write"]], "geneticcode (class in skbio.sequence)": [[280, "skbio.sequence.GeneticCode"]], "__eq__() (skbio.sequence.geneticcode method)": [[281, "skbio.sequence.GeneticCode.__eq__"]], "__ge__() (skbio.sequence.geneticcode method)": [[282, "skbio.sequence.GeneticCode.__ge__"]], "__getstate__() (skbio.sequence.geneticcode method)": [[283, "skbio.sequence.GeneticCode.__getstate__"]], "__gt__() (skbio.sequence.geneticcode method)": [[284, "skbio.sequence.GeneticCode.__gt__"]], "__le__() (skbio.sequence.geneticcode method)": [[285, "skbio.sequence.GeneticCode.__le__"]], "__lt__() (skbio.sequence.geneticcode method)": [[286, "skbio.sequence.GeneticCode.__lt__"]], "__ne__() (skbio.sequence.geneticcode method)": [[287, "skbio.sequence.GeneticCode.__ne__"]], "__str__() (skbio.sequence.geneticcode method)": [[288, "skbio.sequence.GeneticCode.__str__"]], "from_ncbi() (skbio.sequence.geneticcode class method)": [[289, "skbio.sequence.GeneticCode.from_ncbi"]], "translate() (skbio.sequence.geneticcode method)": [[290, "skbio.sequence.GeneticCode.translate"]], "translate_six_frames() (skbio.sequence.geneticcode method)": [[291, "skbio.sequence.GeneticCode.translate_six_frames"]], "grammaredsequence (class in skbio.sequence)": [[292, "skbio.sequence.GrammaredSequence"]], "__bool__() (skbio.sequence.grammaredsequence method)": [[293, "skbio.sequence.GrammaredSequence.__bool__"]], "__contains__() (skbio.sequence.grammaredsequence method)": [[294, "skbio.sequence.GrammaredSequence.__contains__"]], "__copy__() (skbio.sequence.grammaredsequence method)": [[295, "skbio.sequence.GrammaredSequence.__copy__"]], "__deepcopy__() (skbio.sequence.grammaredsequence method)": [[296, "skbio.sequence.GrammaredSequence.__deepcopy__"]], "__eq__() (skbio.sequence.grammaredsequence method)": [[297, "skbio.sequence.GrammaredSequence.__eq__"]], "__ge__() (skbio.sequence.grammaredsequence method)": [[298, "skbio.sequence.GrammaredSequence.__ge__"]], "__getitem__() (skbio.sequence.grammaredsequence method)": [[299, "skbio.sequence.GrammaredSequence.__getitem__"]], "__getstate__() (skbio.sequence.grammaredsequence method)": [[300, "skbio.sequence.GrammaredSequence.__getstate__"]], "__gt__() (skbio.sequence.grammaredsequence method)": [[301, "skbio.sequence.GrammaredSequence.__gt__"]], "__iter__() (skbio.sequence.grammaredsequence method)": [[302, "skbio.sequence.GrammaredSequence.__iter__"]], "__le__() (skbio.sequence.grammaredsequence method)": [[303, "skbio.sequence.GrammaredSequence.__le__"]], "__len__() (skbio.sequence.grammaredsequence method)": [[304, "skbio.sequence.GrammaredSequence.__len__"]], "__lt__() (skbio.sequence.grammaredsequence method)": [[305, "skbio.sequence.GrammaredSequence.__lt__"]], "__ne__() (skbio.sequence.grammaredsequence method)": [[306, "skbio.sequence.GrammaredSequence.__ne__"]], "__reversed__() (skbio.sequence.grammaredsequence method)": [[307, "skbio.sequence.GrammaredSequence.__reversed__"]], "__str__() (skbio.sequence.grammaredsequence method)": [[308, "skbio.sequence.GrammaredSequence.__str__"]], "concat() (skbio.sequence.grammaredsequence class method)": [[309, "skbio.sequence.GrammaredSequence.concat"]], "count() (skbio.sequence.grammaredsequence method)": [[310, "skbio.sequence.GrammaredSequence.count"]], "definites() (skbio.sequence.grammaredsequence method)": [[311, "skbio.sequence.GrammaredSequence.definites"]], "degap() (skbio.sequence.grammaredsequence method)": [[312, "skbio.sequence.GrammaredSequence.degap"]], "degenerates() (skbio.sequence.grammaredsequence method)": [[313, "skbio.sequence.GrammaredSequence.degenerates"]], "distance() (skbio.sequence.grammaredsequence method)": [[314, "skbio.sequence.GrammaredSequence.distance"]], "expand_degenerates() (skbio.sequence.grammaredsequence method)": [[315, "skbio.sequence.GrammaredSequence.expand_degenerates"]], "find_motifs() (skbio.sequence.grammaredsequence method)": [[316, "skbio.sequence.GrammaredSequence.find_motifs"]], "find_with_regex() (skbio.sequence.grammaredsequence method)": [[317, "skbio.sequence.GrammaredSequence.find_with_regex"]], "frequencies() (skbio.sequence.grammaredsequence method)": [[318, "skbio.sequence.GrammaredSequence.frequencies"]], "gaps() (skbio.sequence.grammaredsequence method)": [[319, "skbio.sequence.GrammaredSequence.gaps"]], "has_definites() (skbio.sequence.grammaredsequence method)": [[320, "skbio.sequence.GrammaredSequence.has_definites"]], "has_degenerates() (skbio.sequence.grammaredsequence method)": [[321, "skbio.sequence.GrammaredSequence.has_degenerates"]], "has_gaps() (skbio.sequence.grammaredsequence method)": [[322, "skbio.sequence.GrammaredSequence.has_gaps"]], "has_interval_metadata() (skbio.sequence.grammaredsequence method)": [[323, "skbio.sequence.GrammaredSequence.has_interval_metadata"]], "has_metadata() (skbio.sequence.grammaredsequence method)": [[324, "skbio.sequence.GrammaredSequence.has_metadata"]], "has_nondegenerates() (skbio.sequence.grammaredsequence method)": [[325, "skbio.sequence.GrammaredSequence.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.grammaredsequence method)": [[326, "skbio.sequence.GrammaredSequence.has_positional_metadata"]], "index() (skbio.sequence.grammaredsequence method)": [[327, "skbio.sequence.GrammaredSequence.index"]], "iter_contiguous() (skbio.sequence.grammaredsequence method)": [[328, "skbio.sequence.GrammaredSequence.iter_contiguous"]], "iter_kmers() (skbio.sequence.grammaredsequence method)": [[329, "skbio.sequence.GrammaredSequence.iter_kmers"]], "kmer_frequencies() (skbio.sequence.grammaredsequence method)": [[330, "skbio.sequence.GrammaredSequence.kmer_frequencies"]], "lowercase() (skbio.sequence.grammaredsequence method)": [[331, "skbio.sequence.GrammaredSequence.lowercase"]], "match_frequency() (skbio.sequence.grammaredsequence method)": [[332, "skbio.sequence.GrammaredSequence.match_frequency"]], "matches() (skbio.sequence.grammaredsequence method)": [[333, "skbio.sequence.GrammaredSequence.matches"]], "mismatch_frequency() (skbio.sequence.grammaredsequence method)": [[334, "skbio.sequence.GrammaredSequence.mismatch_frequency"]], "mismatches() (skbio.sequence.grammaredsequence method)": [[335, "skbio.sequence.GrammaredSequence.mismatches"]], "nondegenerates() (skbio.sequence.grammaredsequence method)": [[336, "skbio.sequence.GrammaredSequence.nondegenerates"]], "read() (skbio.sequence.grammaredsequence class method)": [[337, "skbio.sequence.GrammaredSequence.read"]], "replace() (skbio.sequence.grammaredsequence method)": [[338, "skbio.sequence.GrammaredSequence.replace"]], "to_indices() (skbio.sequence.grammaredsequence method)": [[339, "skbio.sequence.GrammaredSequence.to_indices"]], "to_regex() (skbio.sequence.grammaredsequence method)": [[340, "skbio.sequence.GrammaredSequence.to_regex"]], "write() (skbio.sequence.grammaredsequence method)": [[341, "skbio.sequence.GrammaredSequence.write"]], "protein (class in skbio.sequence)": [[342, "skbio.sequence.Protein"]], "__bool__() (skbio.sequence.protein method)": [[343, "skbio.sequence.Protein.__bool__"]], "__contains__() (skbio.sequence.protein method)": [[344, "skbio.sequence.Protein.__contains__"]], "__copy__() (skbio.sequence.protein method)": [[345, "skbio.sequence.Protein.__copy__"]], "__deepcopy__() (skbio.sequence.protein method)": [[346, "skbio.sequence.Protein.__deepcopy__"]], "__eq__() (skbio.sequence.protein method)": [[347, "skbio.sequence.Protein.__eq__"]], "__ge__() (skbio.sequence.protein method)": [[348, "skbio.sequence.Protein.__ge__"]], "__getitem__() (skbio.sequence.protein method)": [[349, "skbio.sequence.Protein.__getitem__"]], "__getstate__() (skbio.sequence.protein method)": [[350, "skbio.sequence.Protein.__getstate__"]], "__gt__() (skbio.sequence.protein method)": [[351, "skbio.sequence.Protein.__gt__"]], "__iter__() (skbio.sequence.protein method)": [[352, "skbio.sequence.Protein.__iter__"]], "__le__() (skbio.sequence.protein method)": [[353, "skbio.sequence.Protein.__le__"]], "__len__() (skbio.sequence.protein method)": [[354, "skbio.sequence.Protein.__len__"]], "__lt__() (skbio.sequence.protein method)": [[355, "skbio.sequence.Protein.__lt__"]], "__ne__() (skbio.sequence.protein method)": [[356, "skbio.sequence.Protein.__ne__"]], "__reversed__() (skbio.sequence.protein method)": [[357, "skbio.sequence.Protein.__reversed__"]], "__str__() (skbio.sequence.protein method)": [[358, "skbio.sequence.Protein.__str__"]], "concat() (skbio.sequence.protein class method)": [[359, "skbio.sequence.Protein.concat"]], "count() (skbio.sequence.protein method)": [[360, "skbio.sequence.Protein.count"]], "definites() (skbio.sequence.protein method)": [[361, "skbio.sequence.Protein.definites"]], "degap() (skbio.sequence.protein method)": [[362, "skbio.sequence.Protein.degap"]], "degenerates() (skbio.sequence.protein method)": [[363, "skbio.sequence.Protein.degenerates"]], "distance() (skbio.sequence.protein method)": [[364, "skbio.sequence.Protein.distance"]], "expand_degenerates() (skbio.sequence.protein method)": [[365, "skbio.sequence.Protein.expand_degenerates"]], "find_motifs() (skbio.sequence.protein method)": [[366, "skbio.sequence.Protein.find_motifs"]], "find_with_regex() (skbio.sequence.protein method)": [[367, "skbio.sequence.Protein.find_with_regex"]], "frequencies() (skbio.sequence.protein method)": [[368, "skbio.sequence.Protein.frequencies"]], "gaps() (skbio.sequence.protein method)": [[369, "skbio.sequence.Protein.gaps"]], "has_definites() (skbio.sequence.protein method)": [[370, "skbio.sequence.Protein.has_definites"]], "has_degenerates() (skbio.sequence.protein method)": [[371, "skbio.sequence.Protein.has_degenerates"]], "has_gaps() (skbio.sequence.protein method)": [[372, "skbio.sequence.Protein.has_gaps"]], "has_interval_metadata() (skbio.sequence.protein method)": [[373, "skbio.sequence.Protein.has_interval_metadata"]], "has_metadata() (skbio.sequence.protein method)": [[374, "skbio.sequence.Protein.has_metadata"]], "has_nondegenerates() (skbio.sequence.protein method)": [[375, "skbio.sequence.Protein.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.protein method)": [[376, "skbio.sequence.Protein.has_positional_metadata"]], "has_stops() (skbio.sequence.protein method)": [[377, "skbio.sequence.Protein.has_stops"]], "index() (skbio.sequence.protein method)": [[378, "skbio.sequence.Protein.index"]], "iter_contiguous() (skbio.sequence.protein method)": [[379, "skbio.sequence.Protein.iter_contiguous"]], "iter_kmers() (skbio.sequence.protein method)": [[380, "skbio.sequence.Protein.iter_kmers"]], "kmer_frequencies() (skbio.sequence.protein method)": [[381, "skbio.sequence.Protein.kmer_frequencies"]], "lowercase() (skbio.sequence.protein method)": [[382, "skbio.sequence.Protein.lowercase"]], "match_frequency() (skbio.sequence.protein method)": [[383, "skbio.sequence.Protein.match_frequency"]], "matches() (skbio.sequence.protein method)": [[384, "skbio.sequence.Protein.matches"]], "mismatch_frequency() (skbio.sequence.protein method)": [[385, "skbio.sequence.Protein.mismatch_frequency"]], "mismatches() (skbio.sequence.protein method)": [[386, "skbio.sequence.Protein.mismatches"]], "nondegenerates() (skbio.sequence.protein method)": [[387, "skbio.sequence.Protein.nondegenerates"]], "read() (skbio.sequence.protein class method)": [[388, "skbio.sequence.Protein.read"]], "replace() (skbio.sequence.protein method)": [[389, "skbio.sequence.Protein.replace"]], "stops() (skbio.sequence.protein method)": [[390, "skbio.sequence.Protein.stops"]], "to_indices() (skbio.sequence.protein method)": [[391, "skbio.sequence.Protein.to_indices"]], "to_regex() (skbio.sequence.protein method)": [[392, "skbio.sequence.Protein.to_regex"]], "write() (skbio.sequence.protein method)": [[393, "skbio.sequence.Protein.write"]], "rna (class in skbio.sequence)": [[394, "skbio.sequence.RNA"]], "__bool__() (skbio.sequence.rna method)": [[395, "skbio.sequence.RNA.__bool__"]], "__contains__() (skbio.sequence.rna method)": [[396, "skbio.sequence.RNA.__contains__"]], "__copy__() (skbio.sequence.rna method)": [[397, "skbio.sequence.RNA.__copy__"]], "__deepcopy__() (skbio.sequence.rna method)": [[398, "skbio.sequence.RNA.__deepcopy__"]], "__eq__() (skbio.sequence.rna method)": [[399, "skbio.sequence.RNA.__eq__"]], "__ge__() (skbio.sequence.rna method)": [[400, "skbio.sequence.RNA.__ge__"]], "__getitem__() (skbio.sequence.rna method)": [[401, "skbio.sequence.RNA.__getitem__"]], "__getstate__() (skbio.sequence.rna method)": [[402, "skbio.sequence.RNA.__getstate__"]], "__gt__() (skbio.sequence.rna method)": [[403, "skbio.sequence.RNA.__gt__"]], "__iter__() (skbio.sequence.rna method)": [[404, "skbio.sequence.RNA.__iter__"]], "__le__() (skbio.sequence.rna method)": [[405, "skbio.sequence.RNA.__le__"]], "__len__() (skbio.sequence.rna method)": [[406, "skbio.sequence.RNA.__len__"]], "__lt__() (skbio.sequence.rna method)": [[407, "skbio.sequence.RNA.__lt__"]], "__ne__() (skbio.sequence.rna method)": [[408, "skbio.sequence.RNA.__ne__"]], "__reversed__() (skbio.sequence.rna method)": [[409, "skbio.sequence.RNA.__reversed__"]], "__str__() (skbio.sequence.rna method)": [[410, "skbio.sequence.RNA.__str__"]], "complement() (skbio.sequence.rna method)": [[411, "skbio.sequence.RNA.complement"]], "concat() (skbio.sequence.rna class method)": [[412, "skbio.sequence.RNA.concat"]], "count() (skbio.sequence.rna method)": [[413, "skbio.sequence.RNA.count"]], "definites() (skbio.sequence.rna method)": [[414, "skbio.sequence.RNA.definites"]], "degap() (skbio.sequence.rna method)": [[415, "skbio.sequence.RNA.degap"]], "degenerates() (skbio.sequence.rna method)": [[416, "skbio.sequence.RNA.degenerates"]], "distance() (skbio.sequence.rna method)": [[417, "skbio.sequence.RNA.distance"]], "expand_degenerates() (skbio.sequence.rna method)": [[418, "skbio.sequence.RNA.expand_degenerates"]], "find_motifs() (skbio.sequence.rna method)": [[419, "skbio.sequence.RNA.find_motifs"]], "find_with_regex() (skbio.sequence.rna method)": [[420, "skbio.sequence.RNA.find_with_regex"]], "frequencies() (skbio.sequence.rna method)": [[421, "skbio.sequence.RNA.frequencies"]], "gaps() (skbio.sequence.rna method)": [[422, "skbio.sequence.RNA.gaps"]], "gc_content() (skbio.sequence.rna method)": [[423, "skbio.sequence.RNA.gc_content"]], "gc_frequency() (skbio.sequence.rna method)": [[424, "skbio.sequence.RNA.gc_frequency"]], "has_definites() (skbio.sequence.rna method)": [[425, "skbio.sequence.RNA.has_definites"]], "has_degenerates() (skbio.sequence.rna method)": [[426, "skbio.sequence.RNA.has_degenerates"]], "has_gaps() (skbio.sequence.rna method)": [[427, "skbio.sequence.RNA.has_gaps"]], "has_interval_metadata() (skbio.sequence.rna method)": [[428, "skbio.sequence.RNA.has_interval_metadata"]], "has_metadata() (skbio.sequence.rna method)": [[429, "skbio.sequence.RNA.has_metadata"]], "has_nondegenerates() (skbio.sequence.rna method)": [[430, "skbio.sequence.RNA.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.rna method)": [[431, "skbio.sequence.RNA.has_positional_metadata"]], "index() (skbio.sequence.rna method)": [[432, "skbio.sequence.RNA.index"]], "is_reverse_complement() (skbio.sequence.rna method)": [[433, "skbio.sequence.RNA.is_reverse_complement"]], "iter_contiguous() (skbio.sequence.rna method)": [[434, "skbio.sequence.RNA.iter_contiguous"]], "iter_kmers() (skbio.sequence.rna method)": [[435, "skbio.sequence.RNA.iter_kmers"]], "kmer_frequencies() (skbio.sequence.rna method)": [[436, "skbio.sequence.RNA.kmer_frequencies"]], "lowercase() (skbio.sequence.rna method)": [[437, "skbio.sequence.RNA.lowercase"]], "match_frequency() (skbio.sequence.rna method)": [[438, "skbio.sequence.RNA.match_frequency"]], "matches() (skbio.sequence.rna method)": [[439, "skbio.sequence.RNA.matches"]], "mismatch_frequency() (skbio.sequence.rna method)": [[440, "skbio.sequence.RNA.mismatch_frequency"]], "mismatches() (skbio.sequence.rna method)": [[441, "skbio.sequence.RNA.mismatches"]], "nondegenerates() (skbio.sequence.rna method)": [[442, "skbio.sequence.RNA.nondegenerates"]], "read() (skbio.sequence.rna class method)": [[443, "skbio.sequence.RNA.read"]], "replace() (skbio.sequence.rna method)": [[444, "skbio.sequence.RNA.replace"]], "reverse_complement() (skbio.sequence.rna method)": [[445, "skbio.sequence.RNA.reverse_complement"]], "reverse_transcribe() (skbio.sequence.rna method)": [[446, "skbio.sequence.RNA.reverse_transcribe"]], "to_indices() (skbio.sequence.rna method)": [[447, "skbio.sequence.RNA.to_indices"]], "to_regex() (skbio.sequence.rna method)": [[448, "skbio.sequence.RNA.to_regex"]], "translate() (skbio.sequence.rna method)": [[449, "skbio.sequence.RNA.translate"]], "translate_six_frames() (skbio.sequence.rna method)": [[450, "skbio.sequence.RNA.translate_six_frames"]], "write() (skbio.sequence.rna method)": [[451, "skbio.sequence.RNA.write"]], "sequence (class in skbio.sequence)": [[452, "skbio.sequence.Sequence"]], "__bool__() (skbio.sequence.sequence method)": [[453, "skbio.sequence.Sequence.__bool__"]], "__contains__() (skbio.sequence.sequence method)": [[454, "skbio.sequence.Sequence.__contains__"]], "__copy__() (skbio.sequence.sequence method)": [[455, "skbio.sequence.Sequence.__copy__"]], "__deepcopy__() (skbio.sequence.sequence method)": [[456, "skbio.sequence.Sequence.__deepcopy__"]], "__eq__() (skbio.sequence.sequence method)": [[457, "skbio.sequence.Sequence.__eq__"]], "__ge__() (skbio.sequence.sequence method)": [[458, "skbio.sequence.Sequence.__ge__"]], "__getitem__() (skbio.sequence.sequence method)": [[459, "skbio.sequence.Sequence.__getitem__"]], "__getstate__() (skbio.sequence.sequence method)": [[460, "skbio.sequence.Sequence.__getstate__"]], "__gt__() (skbio.sequence.sequence method)": [[461, "skbio.sequence.Sequence.__gt__"]], "__iter__() (skbio.sequence.sequence method)": [[462, "skbio.sequence.Sequence.__iter__"]], "__le__() (skbio.sequence.sequence method)": [[463, "skbio.sequence.Sequence.__le__"]], "__len__() (skbio.sequence.sequence method)": [[464, "skbio.sequence.Sequence.__len__"]], "__lt__() (skbio.sequence.sequence method)": [[465, "skbio.sequence.Sequence.__lt__"]], "__ne__() (skbio.sequence.sequence method)": [[466, "skbio.sequence.Sequence.__ne__"]], "__reversed__() (skbio.sequence.sequence method)": [[467, "skbio.sequence.Sequence.__reversed__"]], "__str__() (skbio.sequence.sequence method)": [[468, "skbio.sequence.Sequence.__str__"]], "concat() (skbio.sequence.sequence class method)": [[469, "skbio.sequence.Sequence.concat"]], "count() (skbio.sequence.sequence method)": [[470, "skbio.sequence.Sequence.count"]], "distance() (skbio.sequence.sequence method)": [[471, "skbio.sequence.Sequence.distance"]], "find_with_regex() (skbio.sequence.sequence method)": [[472, "skbio.sequence.Sequence.find_with_regex"]], "frequencies() (skbio.sequence.sequence method)": [[473, "skbio.sequence.Sequence.frequencies"]], "has_interval_metadata() (skbio.sequence.sequence method)": [[474, "skbio.sequence.Sequence.has_interval_metadata"]], "has_metadata() (skbio.sequence.sequence method)": [[475, "skbio.sequence.Sequence.has_metadata"]], "has_positional_metadata() (skbio.sequence.sequence method)": [[476, "skbio.sequence.Sequence.has_positional_metadata"]], "index() (skbio.sequence.sequence method)": [[477, "skbio.sequence.Sequence.index"]], "iter_contiguous() (skbio.sequence.sequence method)": [[478, "skbio.sequence.Sequence.iter_contiguous"]], "iter_kmers() (skbio.sequence.sequence method)": [[479, "skbio.sequence.Sequence.iter_kmers"]], "kmer_frequencies() (skbio.sequence.sequence method)": [[480, "skbio.sequence.Sequence.kmer_frequencies"]], "lowercase() (skbio.sequence.sequence method)": [[481, "skbio.sequence.Sequence.lowercase"]], "match_frequency() (skbio.sequence.sequence method)": [[482, "skbio.sequence.Sequence.match_frequency"]], "matches() (skbio.sequence.sequence method)": [[483, "skbio.sequence.Sequence.matches"]], "mismatch_frequency() (skbio.sequence.sequence method)": [[484, "skbio.sequence.Sequence.mismatch_frequency"]], "mismatches() (skbio.sequence.sequence method)": [[485, "skbio.sequence.Sequence.mismatches"]], "read() (skbio.sequence.sequence class method)": [[486, "skbio.sequence.Sequence.read"]], "replace() (skbio.sequence.sequence method)": [[487, "skbio.sequence.Sequence.replace"]], "to_indices() (skbio.sequence.sequence method)": [[488, "skbio.sequence.Sequence.to_indices"]], "write() (skbio.sequence.sequence method)": [[489, "skbio.sequence.Sequence.write"]], "substitutionmatrix (class in skbio.sequence)": [[490, "skbio.sequence.SubstitutionMatrix"]], "__contains__() (skbio.sequence.substitutionmatrix method)": [[491, "skbio.sequence.SubstitutionMatrix.__contains__"]], "__eq__() (skbio.sequence.substitutionmatrix method)": [[492, "skbio.sequence.SubstitutionMatrix.__eq__"]], "__ge__() (skbio.sequence.substitutionmatrix method)": [[493, "skbio.sequence.SubstitutionMatrix.__ge__"]], "__getitem__() (skbio.sequence.substitutionmatrix method)": [[494, "skbio.sequence.SubstitutionMatrix.__getitem__"]], "__getstate__() (skbio.sequence.substitutionmatrix method)": [[495, "skbio.sequence.SubstitutionMatrix.__getstate__"]], "__gt__() (skbio.sequence.substitutionmatrix method)": [[496, "skbio.sequence.SubstitutionMatrix.__gt__"]], "__le__() (skbio.sequence.substitutionmatrix method)": [[497, "skbio.sequence.SubstitutionMatrix.__le__"]], "__lt__() (skbio.sequence.substitutionmatrix method)": [[498, "skbio.sequence.SubstitutionMatrix.__lt__"]], "__ne__() (skbio.sequence.substitutionmatrix method)": [[499, "skbio.sequence.SubstitutionMatrix.__ne__"]], "__str__() (skbio.sequence.substitutionmatrix method)": [[500, "skbio.sequence.SubstitutionMatrix.__str__"]], "between() (skbio.sequence.substitutionmatrix method)": [[501, "skbio.sequence.SubstitutionMatrix.between"]], "by_name() (skbio.sequence.substitutionmatrix class method)": [[502, "skbio.sequence.SubstitutionMatrix.by_name"]], "copy() (skbio.sequence.substitutionmatrix method)": [[503, "skbio.sequence.SubstitutionMatrix.copy"]], "filter() (skbio.sequence.substitutionmatrix method)": [[504, "skbio.sequence.SubstitutionMatrix.filter"]], "from_dict() (skbio.sequence.substitutionmatrix class method)": [[505, "skbio.sequence.SubstitutionMatrix.from_dict"]], "from_iterable() (skbio.sequence.substitutionmatrix class method)": [[506, "skbio.sequence.SubstitutionMatrix.from_iterable"]], "get_names() (skbio.sequence.substitutionmatrix class method)": [[507, "skbio.sequence.SubstitutionMatrix.get_names"]], "identity() (skbio.sequence.substitutionmatrix class method)": [[508, "skbio.sequence.SubstitutionMatrix.identity"]], "index() (skbio.sequence.substitutionmatrix method)": [[509, "skbio.sequence.SubstitutionMatrix.index"]], "plot() (skbio.sequence.substitutionmatrix method)": [[510, "skbio.sequence.SubstitutionMatrix.plot"]], "read() (skbio.sequence.substitutionmatrix class method)": [[511, "skbio.sequence.SubstitutionMatrix.read"]], "redundant_form() (skbio.sequence.substitutionmatrix method)": [[512, "skbio.sequence.SubstitutionMatrix.redundant_form"]], "to_data_frame() (skbio.sequence.substitutionmatrix method)": [[513, "skbio.sequence.SubstitutionMatrix.to_data_frame"]], "to_dict() (skbio.sequence.substitutionmatrix method)": [[514, "skbio.sequence.SubstitutionMatrix.to_dict"]], "transpose() (skbio.sequence.substitutionmatrix method)": [[515, "skbio.sequence.SubstitutionMatrix.transpose"]], "within() (skbio.sequence.substitutionmatrix method)": [[516, "skbio.sequence.SubstitutionMatrix.within"]], "write() (skbio.sequence.substitutionmatrix method)": [[517, "skbio.sequence.SubstitutionMatrix.write"]], "skbio.sequence.distance": [[518, "module-skbio.sequence.distance"]], "hamming() (in module skbio.sequence.distance)": [[519, "skbio.sequence.distance.hamming"]], "kmer_distance() (in module skbio.sequence.distance)": [[520, "skbio.sequence.distance.kmer_distance"]], "skbio.stats.composition": [[521, "module-skbio.stats.composition"]], "alr() (in module skbio.stats.composition)": [[522, "skbio.stats.composition.alr"]], "alr_inv() (in module skbio.stats.composition)": [[523, "skbio.stats.composition.alr_inv"]], "ancom() (in module skbio.stats.composition)": [[524, "skbio.stats.composition.ancom"]], "centralize() (in module skbio.stats.composition)": [[525, "skbio.stats.composition.centralize"]], "closure() (in module skbio.stats.composition)": [[526, "skbio.stats.composition.closure"]], "clr() (in module skbio.stats.composition)": [[527, "skbio.stats.composition.clr"]], "clr_inv() (in module skbio.stats.composition)": [[528, "skbio.stats.composition.clr_inv"]], "ilr() (in module skbio.stats.composition)": [[529, "skbio.stats.composition.ilr"]], "ilr_inv() (in module skbio.stats.composition)": [[530, "skbio.stats.composition.ilr_inv"]], "inner() (in module skbio.stats.composition)": [[531, "skbio.stats.composition.inner"]], "multiplicative_replacement() (in module skbio.stats.composition)": [[532, "skbio.stats.composition.multiplicative_replacement"]], "pairwise_vlr() (in module skbio.stats.composition)": [[533, "skbio.stats.composition.pairwise_vlr"]], "perturb() (in module skbio.stats.composition)": [[534, "skbio.stats.composition.perturb"]], "perturb_inv() (in module skbio.stats.composition)": [[535, "skbio.stats.composition.perturb_inv"]], "power() (in module skbio.stats.composition)": [[536, "skbio.stats.composition.power"]], "sbp_basis() (in module skbio.stats.composition)": [[537, "skbio.stats.composition.sbp_basis"]], "tree_basis() (in module skbio.stats.composition)": [[538, "skbio.stats.composition.tree_basis"]], "vlr() (in module skbio.stats.composition)": [[539, "skbio.stats.composition.vlr"]], "skbio.stats.distance": [[540, "module-skbio.stats.distance"]], "dissimilaritymatrix (class in skbio.stats.distance)": [[541, "skbio.stats.distance.DissimilarityMatrix"]], "__contains__() (skbio.stats.distance.dissimilaritymatrix method)": [[542, "skbio.stats.distance.DissimilarityMatrix.__contains__"]], "__eq__() (skbio.stats.distance.dissimilaritymatrix method)": [[543, "skbio.stats.distance.DissimilarityMatrix.__eq__"]], "__ge__() (skbio.stats.distance.dissimilaritymatrix method)": [[544, "skbio.stats.distance.DissimilarityMatrix.__ge__"]], "__getitem__() (skbio.stats.distance.dissimilaritymatrix method)": [[545, "skbio.stats.distance.DissimilarityMatrix.__getitem__"]], "__getstate__() (skbio.stats.distance.dissimilaritymatrix method)": [[546, "skbio.stats.distance.DissimilarityMatrix.__getstate__"]], "__gt__() (skbio.stats.distance.dissimilaritymatrix method)": [[547, "skbio.stats.distance.DissimilarityMatrix.__gt__"]], "__le__() (skbio.stats.distance.dissimilaritymatrix method)": [[548, "skbio.stats.distance.DissimilarityMatrix.__le__"]], "__lt__() (skbio.stats.distance.dissimilaritymatrix method)": [[549, "skbio.stats.distance.DissimilarityMatrix.__lt__"]], "__ne__() (skbio.stats.distance.dissimilaritymatrix method)": [[550, "skbio.stats.distance.DissimilarityMatrix.__ne__"]], "__str__() (skbio.stats.distance.dissimilaritymatrix method)": [[551, "skbio.stats.distance.DissimilarityMatrix.__str__"]], "between() (skbio.stats.distance.dissimilaritymatrix method)": [[552, "skbio.stats.distance.DissimilarityMatrix.between"]], "copy() (skbio.stats.distance.dissimilaritymatrix method)": [[553, "skbio.stats.distance.DissimilarityMatrix.copy"]], "filter() (skbio.stats.distance.dissimilaritymatrix method)": [[554, "skbio.stats.distance.DissimilarityMatrix.filter"]], "from_iterable() (skbio.stats.distance.dissimilaritymatrix class method)": [[555, "skbio.stats.distance.DissimilarityMatrix.from_iterable"]], "index() (skbio.stats.distance.dissimilaritymatrix method)": [[556, "skbio.stats.distance.DissimilarityMatrix.index"]], "plot() (skbio.stats.distance.dissimilaritymatrix method)": [[557, "skbio.stats.distance.DissimilarityMatrix.plot"]], "read() (skbio.stats.distance.dissimilaritymatrix class method)": [[558, "skbio.stats.distance.DissimilarityMatrix.read"]], "redundant_form() (skbio.stats.distance.dissimilaritymatrix method)": [[559, "skbio.stats.distance.DissimilarityMatrix.redundant_form"]], "to_data_frame() (skbio.stats.distance.dissimilaritymatrix method)": [[560, "skbio.stats.distance.DissimilarityMatrix.to_data_frame"]], "transpose() (skbio.stats.distance.dissimilaritymatrix method)": [[561, "skbio.stats.distance.DissimilarityMatrix.transpose"]], "within() (skbio.stats.distance.dissimilaritymatrix method)": [[562, "skbio.stats.distance.DissimilarityMatrix.within"]], "write() (skbio.stats.distance.dissimilaritymatrix method)": [[563, "skbio.stats.distance.DissimilarityMatrix.write"]], "dissimilaritymatrixerror": [[564, "skbio.stats.distance.DissimilarityMatrixError"]], "distancematrix (class in skbio.stats.distance)": [[565, "skbio.stats.distance.DistanceMatrix"]], "__contains__() (skbio.stats.distance.distancematrix method)": [[566, "skbio.stats.distance.DistanceMatrix.__contains__"]], "__eq__() (skbio.stats.distance.distancematrix method)": [[567, "skbio.stats.distance.DistanceMatrix.__eq__"]], "__ge__() (skbio.stats.distance.distancematrix method)": [[568, "skbio.stats.distance.DistanceMatrix.__ge__"]], "__getitem__() (skbio.stats.distance.distancematrix method)": [[569, "skbio.stats.distance.DistanceMatrix.__getitem__"]], "__getstate__() (skbio.stats.distance.distancematrix method)": [[570, "skbio.stats.distance.DistanceMatrix.__getstate__"]], "__gt__() (skbio.stats.distance.distancematrix method)": [[571, "skbio.stats.distance.DistanceMatrix.__gt__"]], "__le__() (skbio.stats.distance.distancematrix method)": [[572, "skbio.stats.distance.DistanceMatrix.__le__"]], "__lt__() (skbio.stats.distance.distancematrix method)": [[573, "skbio.stats.distance.DistanceMatrix.__lt__"]], "__ne__() (skbio.stats.distance.distancematrix method)": [[574, "skbio.stats.distance.DistanceMatrix.__ne__"]], "__str__() (skbio.stats.distance.distancematrix method)": [[575, "skbio.stats.distance.DistanceMatrix.__str__"]], "between() (skbio.stats.distance.distancematrix method)": [[576, "skbio.stats.distance.DistanceMatrix.between"]], "condensed_form() (skbio.stats.distance.distancematrix method)": [[577, "skbio.stats.distance.DistanceMatrix.condensed_form"]], "copy() (skbio.stats.distance.distancematrix method)": [[578, "skbio.stats.distance.DistanceMatrix.copy"]], "filter() (skbio.stats.distance.distancematrix method)": [[579, "skbio.stats.distance.DistanceMatrix.filter"]], "from_iterable() (skbio.stats.distance.distancematrix class method)": [[580, "skbio.stats.distance.DistanceMatrix.from_iterable"]], "index() (skbio.stats.distance.distancematrix method)": [[581, "skbio.stats.distance.DistanceMatrix.index"]], "permute() (skbio.stats.distance.distancematrix method)": [[582, "skbio.stats.distance.DistanceMatrix.permute"]], "plot() (skbio.stats.distance.distancematrix method)": [[583, "skbio.stats.distance.DistanceMatrix.plot"]], "read() (skbio.stats.distance.distancematrix class method)": [[584, "skbio.stats.distance.DistanceMatrix.read"]], "redundant_form() (skbio.stats.distance.distancematrix method)": [[585, "skbio.stats.distance.DistanceMatrix.redundant_form"]], "to_data_frame() (skbio.stats.distance.distancematrix method)": [[586, "skbio.stats.distance.DistanceMatrix.to_data_frame"]], "to_series() (skbio.stats.distance.distancematrix method)": [[587, "skbio.stats.distance.DistanceMatrix.to_series"]], "transpose() (skbio.stats.distance.distancematrix method)": [[588, "skbio.stats.distance.DistanceMatrix.transpose"]], "within() (skbio.stats.distance.distancematrix method)": [[589, "skbio.stats.distance.DistanceMatrix.within"]], "write() (skbio.stats.distance.distancematrix method)": [[590, "skbio.stats.distance.DistanceMatrix.write"]], "distancematrixerror": [[591, "skbio.stats.distance.DistanceMatrixError"]], "missingiderror": [[592, "skbio.stats.distance.MissingIDError"]], "anosim() (in module skbio.stats.distance)": [[593, "skbio.stats.distance.anosim"]], "bioenv() (in module skbio.stats.distance)": [[594, "skbio.stats.distance.bioenv"]], "mantel() (in module skbio.stats.distance)": [[595, "skbio.stats.distance.mantel"]], "permanova() (in module skbio.stats.distance)": [[596, "skbio.stats.distance.permanova"]], "permdisp() (in module skbio.stats.distance)": [[597, "skbio.stats.distance.permdisp"]], "pwmantel() (in module skbio.stats.distance)": [[598, "skbio.stats.distance.pwmantel"]], "randdm() (in module skbio.stats.distance)": [[599, "skbio.stats.distance.randdm"]], "skbio.stats.evolve": [[600, "module-skbio.stats.evolve"]], "hommola_cospeciation() (in module skbio.stats.evolve)": [[601, "skbio.stats.evolve.hommola_cospeciation"]], "skbio.stats.gradient": [[602, "module-skbio.stats.gradient"]], "averagegradientanova (class in skbio.stats.gradient)": [[603, "skbio.stats.gradient.AverageGradientANOVA"]], "__eq__() (skbio.stats.gradient.averagegradientanova method)": [[604, "skbio.stats.gradient.AverageGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.averagegradientanova method)": [[605, "skbio.stats.gradient.AverageGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.averagegradientanova method)": [[606, "skbio.stats.gradient.AverageGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.averagegradientanova method)": [[607, "skbio.stats.gradient.AverageGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.averagegradientanova method)": [[608, "skbio.stats.gradient.AverageGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.averagegradientanova method)": [[609, "skbio.stats.gradient.AverageGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.averagegradientanova method)": [[610, "skbio.stats.gradient.AverageGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.averagegradientanova method)": [[611, "skbio.stats.gradient.AverageGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.averagegradientanova method)": [[612, "skbio.stats.gradient.AverageGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.averagegradientanova method)": [[613, "skbio.stats.gradient.AverageGradientANOVA.get_trajectories"]], "categoryresults (class in skbio.stats.gradient)": [[614, "skbio.stats.gradient.CategoryResults"]], "__eq__() (skbio.stats.gradient.categoryresults method)": [[615, "skbio.stats.gradient.CategoryResults.__eq__"]], "__ge__() (skbio.stats.gradient.categoryresults method)": [[616, "skbio.stats.gradient.CategoryResults.__ge__"]], "__getstate__() (skbio.stats.gradient.categoryresults method)": [[617, "skbio.stats.gradient.CategoryResults.__getstate__"]], "__gt__() (skbio.stats.gradient.categoryresults method)": [[618, "skbio.stats.gradient.CategoryResults.__gt__"]], "__hash__() (skbio.stats.gradient.categoryresults method)": [[619, "skbio.stats.gradient.CategoryResults.__hash__"]], "__le__() (skbio.stats.gradient.categoryresults method)": [[620, "skbio.stats.gradient.CategoryResults.__le__"]], "__lt__() (skbio.stats.gradient.categoryresults method)": [[621, "skbio.stats.gradient.CategoryResults.__lt__"]], "__ne__() (skbio.stats.gradient.categoryresults method)": [[622, "skbio.stats.gradient.CategoryResults.__ne__"]], "__str__() (skbio.stats.gradient.categoryresults method)": [[623, "skbio.stats.gradient.CategoryResults.__str__"]], "to_files() (skbio.stats.gradient.categoryresults method)": [[624, "skbio.stats.gradient.CategoryResults.to_files"]], "firstdifferencegradientanova (class in skbio.stats.gradient)": [[625, "skbio.stats.gradient.FirstDifferenceGradientANOVA"]], "__eq__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[626, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[627, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[628, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[629, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[630, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[631, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[632, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[633, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[634, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.firstdifferencegradientanova method)": [[635, "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories"]], "gradientanova (class in skbio.stats.gradient)": [[636, "skbio.stats.gradient.GradientANOVA"]], "__eq__() (skbio.stats.gradient.gradientanova method)": [[637, "skbio.stats.gradient.GradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.gradientanova method)": [[638, "skbio.stats.gradient.GradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.gradientanova method)": [[639, "skbio.stats.gradient.GradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.gradientanova method)": [[640, "skbio.stats.gradient.GradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.gradientanova method)": [[641, "skbio.stats.gradient.GradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.gradientanova method)": [[642, "skbio.stats.gradient.GradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.gradientanova method)": [[643, "skbio.stats.gradient.GradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.gradientanova method)": [[644, "skbio.stats.gradient.GradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.gradientanova method)": [[645, "skbio.stats.gradient.GradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.gradientanova method)": [[646, "skbio.stats.gradient.GradientANOVA.get_trajectories"]], "gradientanovaresults (class in skbio.stats.gradient)": [[647, "skbio.stats.gradient.GradientANOVAResults"]], "__eq__() (skbio.stats.gradient.gradientanovaresults method)": [[648, "skbio.stats.gradient.GradientANOVAResults.__eq__"]], "__ge__() (skbio.stats.gradient.gradientanovaresults method)": [[649, "skbio.stats.gradient.GradientANOVAResults.__ge__"]], "__getstate__() (skbio.stats.gradient.gradientanovaresults method)": [[650, "skbio.stats.gradient.GradientANOVAResults.__getstate__"]], "__gt__() (skbio.stats.gradient.gradientanovaresults method)": [[651, "skbio.stats.gradient.GradientANOVAResults.__gt__"]], "__hash__() (skbio.stats.gradient.gradientanovaresults method)": [[652, "skbio.stats.gradient.GradientANOVAResults.__hash__"]], "__le__() (skbio.stats.gradient.gradientanovaresults method)": [[653, "skbio.stats.gradient.GradientANOVAResults.__le__"]], "__lt__() (skbio.stats.gradient.gradientanovaresults method)": [[654, "skbio.stats.gradient.GradientANOVAResults.__lt__"]], "__ne__() (skbio.stats.gradient.gradientanovaresults method)": [[655, "skbio.stats.gradient.GradientANOVAResults.__ne__"]], "__str__() (skbio.stats.gradient.gradientanovaresults method)": [[656, "skbio.stats.gradient.GradientANOVAResults.__str__"]], "to_files() (skbio.stats.gradient.gradientanovaresults method)": [[657, "skbio.stats.gradient.GradientANOVAResults.to_files"]], "groupresults (class in skbio.stats.gradient)": [[658, "skbio.stats.gradient.GroupResults"]], "__eq__() (skbio.stats.gradient.groupresults method)": [[659, "skbio.stats.gradient.GroupResults.__eq__"]], "__ge__() (skbio.stats.gradient.groupresults method)": [[660, "skbio.stats.gradient.GroupResults.__ge__"]], "__getstate__() (skbio.stats.gradient.groupresults method)": [[661, "skbio.stats.gradient.GroupResults.__getstate__"]], "__gt__() (skbio.stats.gradient.groupresults method)": [[662, "skbio.stats.gradient.GroupResults.__gt__"]], "__hash__() (skbio.stats.gradient.groupresults method)": [[663, "skbio.stats.gradient.GroupResults.__hash__"]], "__le__() (skbio.stats.gradient.groupresults method)": [[664, "skbio.stats.gradient.GroupResults.__le__"]], "__lt__() (skbio.stats.gradient.groupresults method)": [[665, "skbio.stats.gradient.GroupResults.__lt__"]], "__ne__() (skbio.stats.gradient.groupresults method)": [[666, "skbio.stats.gradient.GroupResults.__ne__"]], "__str__() (skbio.stats.gradient.groupresults method)": [[667, "skbio.stats.gradient.GroupResults.__str__"]], "to_files() (skbio.stats.gradient.groupresults method)": [[668, "skbio.stats.gradient.GroupResults.to_files"]], "trajectorygradientanova (class in skbio.stats.gradient)": [[669, "skbio.stats.gradient.TrajectoryGradientANOVA"]], "__eq__() (skbio.stats.gradient.trajectorygradientanova method)": [[670, "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.trajectorygradientanova method)": [[671, "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.trajectorygradientanova method)": [[672, "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.trajectorygradientanova method)": [[673, "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.trajectorygradientanova method)": [[674, "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.trajectorygradientanova method)": [[675, "skbio.stats.gradient.TrajectoryGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.trajectorygradientanova method)": [[676, "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.trajectorygradientanova method)": [[677, "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.trajectorygradientanova method)": [[678, "skbio.stats.gradient.TrajectoryGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.trajectorygradientanova method)": [[679, "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories"]], "windowdifferencegradientanova (class in skbio.stats.gradient)": [[680, "skbio.stats.gradient.WindowDifferenceGradientANOVA"]], "__eq__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[681, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[682, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[683, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[684, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[685, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[686, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[687, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[688, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[689, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.windowdifferencegradientanova method)": [[690, "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories"]], "isubsample() (in module skbio.stats)": [[691, "skbio.stats.isubsample"]], "skbio.stats.ordination": [[692, "module-skbio.stats.ordination"]], "ordinationresults (class in skbio.stats.ordination)": [[693, "skbio.stats.ordination.OrdinationResults"]], "__eq__() (skbio.stats.ordination.ordinationresults method)": [[694, "skbio.stats.ordination.OrdinationResults.__eq__"]], "__ge__() (skbio.stats.ordination.ordinationresults method)": [[695, "skbio.stats.ordination.OrdinationResults.__ge__"]], "__getstate__() (skbio.stats.ordination.ordinationresults method)": [[696, "skbio.stats.ordination.OrdinationResults.__getstate__"]], "__gt__() (skbio.stats.ordination.ordinationresults method)": [[697, "skbio.stats.ordination.OrdinationResults.__gt__"]], "__hash__() (skbio.stats.ordination.ordinationresults method)": [[698, "skbio.stats.ordination.OrdinationResults.__hash__"]], "__le__() (skbio.stats.ordination.ordinationresults method)": [[699, "skbio.stats.ordination.OrdinationResults.__le__"]], "__lt__() (skbio.stats.ordination.ordinationresults method)": [[700, "skbio.stats.ordination.OrdinationResults.__lt__"]], "__ne__() (skbio.stats.ordination.ordinationresults method)": [[701, "skbio.stats.ordination.OrdinationResults.__ne__"]], "__str__() (skbio.stats.ordination.ordinationresults method)": [[702, "skbio.stats.ordination.OrdinationResults.__str__"]], "plot() (skbio.stats.ordination.ordinationresults method)": [[703, "skbio.stats.ordination.OrdinationResults.plot"]], "read() (skbio.stats.ordination.ordinationresults class method)": [[704, "skbio.stats.ordination.OrdinationResults.read"]], "write() (skbio.stats.ordination.ordinationresults method)": [[705, "skbio.stats.ordination.OrdinationResults.write"]], "ca() (in module skbio.stats.ordination)": [[706, "skbio.stats.ordination.ca"]], "cca() (in module skbio.stats.ordination)": [[707, "skbio.stats.ordination.cca"]], "corr() (in module skbio.stats.ordination)": [[708, "skbio.stats.ordination.corr"]], "e_matrix() (in module skbio.stats.ordination)": [[709, "skbio.stats.ordination.e_matrix"]], "f_matrix() (in module skbio.stats.ordination)": [[710, "skbio.stats.ordination.f_matrix"]], "mean_and_std() (in module skbio.stats.ordination)": [[711, "skbio.stats.ordination.mean_and_std"]], "pcoa() (in module skbio.stats.ordination)": [[712, "skbio.stats.ordination.pcoa"]], "pcoa_biplot() (in module skbio.stats.ordination)": [[713, "skbio.stats.ordination.pcoa_biplot"]], "rda() (in module skbio.stats.ordination)": [[714, "skbio.stats.ordination.rda"]], "scale() (in module skbio.stats.ordination)": [[715, "skbio.stats.ordination.scale"]], "svd_rank() (in module skbio.stats.ordination)": [[716, "skbio.stats.ordination.svd_rank"]], "skbio.stats.power": [[717, "module-skbio.stats.power"]], "confidence_bound() (in module skbio.stats.power)": [[718, "skbio.stats.power.confidence_bound"]], "paired_subsamples() (in module skbio.stats.power)": [[719, "skbio.stats.power.paired_subsamples"]], "subsample_paired_power() (in module skbio.stats.power)": [[720, "skbio.stats.power.subsample_paired_power"]], "subsample_power() (in module skbio.stats.power)": [[721, "skbio.stats.power.subsample_power"]], "subsample_counts() (in module skbio.stats)": [[722, "skbio.stats.subsample_counts"]], "duplicatenodeerror": [[723, "skbio.tree.DuplicateNodeError"]], "missingnodeerror": [[724, "skbio.tree.MissingNodeError"]], "nolengtherror": [[725, "skbio.tree.NoLengthError"]], "noparenterror": [[726, "skbio.tree.NoParentError"]], "treeerror": [[727, "skbio.tree.TreeError"]], "treenode (class in skbio.tree)": [[728, "skbio.tree.TreeNode"]], "__copy__() (skbio.tree.treenode method)": [[729, "skbio.tree.TreeNode.__copy__"]], "__deepcopy__() (skbio.tree.treenode method)": [[730, "skbio.tree.TreeNode.__deepcopy__"]], "__eq__() (skbio.tree.treenode method)": [[731, "skbio.tree.TreeNode.__eq__"]], "__ge__() (skbio.tree.treenode method)": [[732, "skbio.tree.TreeNode.__ge__"]], "__getitem__() (skbio.tree.treenode method)": [[733, "skbio.tree.TreeNode.__getitem__"]], "__getstate__() (skbio.tree.treenode method)": [[734, "skbio.tree.TreeNode.__getstate__"]], "__gt__() (skbio.tree.treenode method)": [[735, "skbio.tree.TreeNode.__gt__"]], "__hash__() (skbio.tree.treenode method)": [[736, "skbio.tree.TreeNode.__hash__"]], "__iter__() (skbio.tree.treenode method)": [[737, "skbio.tree.TreeNode.__iter__"]], "__le__() (skbio.tree.treenode method)": [[738, "skbio.tree.TreeNode.__le__"]], "__len__() (skbio.tree.treenode method)": [[739, "skbio.tree.TreeNode.__len__"]], "__lt__() (skbio.tree.treenode method)": [[740, "skbio.tree.TreeNode.__lt__"]], "__ne__() (skbio.tree.treenode method)": [[741, "skbio.tree.TreeNode.__ne__"]], "__str__() (skbio.tree.treenode method)": [[742, "skbio.tree.TreeNode.__str__"]], "accumulate_to_ancestor() (skbio.tree.treenode method)": [[743, "skbio.tree.TreeNode.accumulate_to_ancestor"]], "ancestors() (skbio.tree.treenode method)": [[744, "skbio.tree.TreeNode.ancestors"]], "append() (skbio.tree.treenode method)": [[745, "skbio.tree.TreeNode.append"]], "ascii_art() (skbio.tree.treenode method)": [[746, "skbio.tree.TreeNode.ascii_art"]], "assign_ids() (skbio.tree.treenode method)": [[747, "skbio.tree.TreeNode.assign_ids"]], "assign_supports() (skbio.tree.treenode method)": [[748, "skbio.tree.TreeNode.assign_supports"]], "bifurcate() (skbio.tree.treenode method)": [[749, "skbio.tree.TreeNode.bifurcate"]], "cache_attr() (skbio.tree.treenode method)": [[750, "skbio.tree.TreeNode.cache_attr"]], "compare_rfd() (skbio.tree.treenode method)": [[751, "skbio.tree.TreeNode.compare_rfd"]], "compare_subsets() (skbio.tree.treenode method)": [[752, "skbio.tree.TreeNode.compare_subsets"]], "compare_tip_distances() (skbio.tree.treenode method)": [[753, "skbio.tree.TreeNode.compare_tip_distances"]], "copy() (skbio.tree.treenode method)": [[754, "skbio.tree.TreeNode.copy"]], "count() (skbio.tree.treenode method)": [[755, "skbio.tree.TreeNode.count"]], "create_caches() (skbio.tree.treenode method)": [[756, "skbio.tree.TreeNode.create_caches"]], "deepcopy() (skbio.tree.treenode method)": [[757, "skbio.tree.TreeNode.deepcopy"]], "descending_branch_length() (skbio.tree.treenode method)": [[758, "skbio.tree.TreeNode.descending_branch_length"]], "distance() (skbio.tree.treenode method)": [[759, "skbio.tree.TreeNode.distance"]], "extend() (skbio.tree.treenode method)": [[760, "skbio.tree.TreeNode.extend"]], "find() (skbio.tree.treenode method)": [[761, "skbio.tree.TreeNode.find"]], "find_all() (skbio.tree.treenode method)": [[762, "skbio.tree.TreeNode.find_all"]], "find_by_func() (skbio.tree.treenode method)": [[763, "skbio.tree.TreeNode.find_by_func"]], "find_by_id() (skbio.tree.treenode method)": [[764, "skbio.tree.TreeNode.find_by_id"]], "from_linkage_matrix() (skbio.tree.treenode class method)": [[765, "skbio.tree.TreeNode.from_linkage_matrix"]], "from_taxdump() (skbio.tree.treenode class method)": [[766, "skbio.tree.TreeNode.from_taxdump"]], "from_taxonomy() (skbio.tree.treenode class method)": [[767, "skbio.tree.TreeNode.from_taxonomy"]], "get_max_distance() (skbio.tree.treenode method)": [[768, "skbio.tree.TreeNode.get_max_distance"]], "has_children() (skbio.tree.treenode method)": [[769, "skbio.tree.TreeNode.has_children"]], "index_tree() (skbio.tree.treenode method)": [[770, "skbio.tree.TreeNode.index_tree"]], "invalidate_caches() (skbio.tree.treenode method)": [[771, "skbio.tree.TreeNode.invalidate_caches"]], "is_root() (skbio.tree.treenode method)": [[772, "skbio.tree.TreeNode.is_root"]], "is_tip() (skbio.tree.treenode method)": [[773, "skbio.tree.TreeNode.is_tip"]], "lca() (skbio.tree.treenode method)": [[774, "skbio.tree.TreeNode.lca"]], "levelorder() (skbio.tree.treenode method)": [[775, "skbio.tree.TreeNode.levelorder"]], "lowest_common_ancestor() (skbio.tree.treenode method)": [[776, "skbio.tree.TreeNode.lowest_common_ancestor"]], "neighbors() (skbio.tree.treenode method)": [[777, "skbio.tree.TreeNode.neighbors"]], "non_tips() (skbio.tree.treenode method)": [[778, "skbio.tree.TreeNode.non_tips"]], "observed_node_counts() (skbio.tree.treenode method)": [[779, "skbio.tree.TreeNode.observed_node_counts"]], "pop() (skbio.tree.treenode method)": [[780, "skbio.tree.TreeNode.pop"]], "postorder() (skbio.tree.treenode method)": [[781, "skbio.tree.TreeNode.postorder"]], "pre_and_postorder() (skbio.tree.treenode method)": [[782, "skbio.tree.TreeNode.pre_and_postorder"]], "preorder() (skbio.tree.treenode method)": [[783, "skbio.tree.TreeNode.preorder"]], "prune() (skbio.tree.treenode method)": [[784, "skbio.tree.TreeNode.prune"]], "read() (skbio.tree.treenode class method)": [[785, "skbio.tree.TreeNode.read"]], "remove() (skbio.tree.treenode method)": [[786, "skbio.tree.TreeNode.remove"]], "remove_deleted() (skbio.tree.treenode method)": [[787, "skbio.tree.TreeNode.remove_deleted"]], "root() (skbio.tree.treenode method)": [[788, "skbio.tree.TreeNode.root"]], "root_at() (skbio.tree.treenode method)": [[789, "skbio.tree.TreeNode.root_at"]], "root_at_midpoint() (skbio.tree.treenode method)": [[790, "skbio.tree.TreeNode.root_at_midpoint"]], "shear() (skbio.tree.treenode method)": [[791, "skbio.tree.TreeNode.shear"]], "shuffle() (skbio.tree.treenode method)": [[792, "skbio.tree.TreeNode.shuffle"]], "siblings() (skbio.tree.treenode method)": [[793, "skbio.tree.TreeNode.siblings"]], "subset() (skbio.tree.treenode method)": [[794, "skbio.tree.TreeNode.subset"]], "subsets() (skbio.tree.treenode method)": [[795, "skbio.tree.TreeNode.subsets"]], "subtree() (skbio.tree.treenode method)": [[796, "skbio.tree.TreeNode.subtree"]], "tip_tip_distances() (skbio.tree.treenode method)": [[797, "skbio.tree.TreeNode.tip_tip_distances"]], "tips() (skbio.tree.treenode method)": [[798, "skbio.tree.TreeNode.tips"]], "to_array() (skbio.tree.treenode method)": [[799, "skbio.tree.TreeNode.to_array"]], "to_taxonomy() (skbio.tree.treenode method)": [[800, "skbio.tree.TreeNode.to_taxonomy"]], "traverse() (skbio.tree.treenode method)": [[801, "skbio.tree.TreeNode.traverse"]], "unpack() (skbio.tree.treenode method)": [[802, "skbio.tree.TreeNode.unpack"]], "unpack_by_func() (skbio.tree.treenode method)": [[803, "skbio.tree.TreeNode.unpack_by_func"]], "unrooted_copy() (skbio.tree.treenode method)": [[804, "skbio.tree.TreeNode.unrooted_copy"]], "unrooted_deepcopy() (skbio.tree.treenode method)": [[805, "skbio.tree.TreeNode.unrooted_deepcopy"]], "write() (skbio.tree.treenode method)": [[806, "skbio.tree.TreeNode.write"]], "majority_rule() (in module skbio.tree)": [[807, "skbio.tree.majority_rule"]], "nj() (in module skbio.tree)": [[808, "skbio.tree.nj"]], "efficiencywarning": [[809, "skbio.util.EfficiencyWarning"]], "representationwarning": [[810, "skbio.util.RepresentationWarning"]], "assert_data_frame_almost_equal() (in module skbio.util)": [[811, "skbio.util.assert_data_frame_almost_equal"]], "assert_ordination_results_equal() (in module skbio.util)": [[812, "skbio.util.assert_ordination_results_equal"]], "cardinal_to_ordinal() (in module skbio.util)": [[813, "skbio.util.cardinal_to_ordinal"]], "classproperty (class in skbio.util)": [[814, "skbio.util.classproperty"]], "__delete__() (skbio.util.classproperty method)": [[815, "skbio.util.classproperty.__delete__"]], "__eq__() (skbio.util.classproperty method)": [[816, "skbio.util.classproperty.__eq__"]], "__ge__() (skbio.util.classproperty method)": [[817, "skbio.util.classproperty.__ge__"]], "__get__() (skbio.util.classproperty method)": [[818, "skbio.util.classproperty.__get__"]], "__getstate__() (skbio.util.classproperty method)": [[819, "skbio.util.classproperty.__getstate__"]], "__gt__() (skbio.util.classproperty method)": [[820, "skbio.util.classproperty.__gt__"]], "__hash__() (skbio.util.classproperty method)": [[821, "skbio.util.classproperty.__hash__"]], "__le__() (skbio.util.classproperty method)": [[822, "skbio.util.classproperty.__le__"]], "__lt__() (skbio.util.classproperty method)": [[823, "skbio.util.classproperty.__lt__"]], "__ne__() (skbio.util.classproperty method)": [[824, "skbio.util.classproperty.__ne__"]], "__set__() (skbio.util.classproperty method)": [[825, "skbio.util.classproperty.__set__"]], "__set_name__() (skbio.util.classproperty method)": [[826, "skbio.util.classproperty.__set_name__"]], "__str__() (skbio.util.classproperty method)": [[827, "skbio.util.classproperty.__str__"]], "deleter() (skbio.util.classproperty method)": [[828, "skbio.util.classproperty.deleter"]], "getter() (skbio.util.classproperty method)": [[829, "skbio.util.classproperty.getter"]], "setter() (skbio.util.classproperty method)": [[830, "skbio.util.classproperty.setter"]], "find_duplicates() (in module skbio.util)": [[831, "skbio.util.find_duplicates"]], "get_data_path() (in module skbio.util)": [[832, "skbio.util.get_data_path"]], "safe_md5() (in module skbio.util)": [[833, "skbio.util.safe_md5"]], "workflow (class in skbio.workflow)": [[834, "skbio.workflow.Workflow"]], "__call__() (skbio.workflow.workflow method)": [[835, "skbio.workflow.Workflow.__call__"]], "__eq__() (skbio.workflow.workflow method)": [[836, "skbio.workflow.Workflow.__eq__"]], "__ge__() (skbio.workflow.workflow method)": [[837, "skbio.workflow.Workflow.__ge__"]], "__getstate__() (skbio.workflow.workflow method)": [[838, "skbio.workflow.Workflow.__getstate__"]], "__gt__() (skbio.workflow.workflow method)": [[839, "skbio.workflow.Workflow.__gt__"]], "__hash__() (skbio.workflow.workflow method)": [[840, "skbio.workflow.Workflow.__hash__"]], "__le__() (skbio.workflow.workflow method)": [[841, "skbio.workflow.Workflow.__le__"]], "__lt__() (skbio.workflow.workflow method)": [[842, "skbio.workflow.Workflow.__lt__"]], "__ne__() (skbio.workflow.workflow method)": [[843, "skbio.workflow.Workflow.__ne__"]], "__str__() (skbio.workflow.workflow method)": [[844, "skbio.workflow.Workflow.__str__"]], "initialize_state() (skbio.workflow.workflow method)": [[845, "skbio.workflow.Workflow.initialize_state"]], "method (class in skbio.workflow)": [[846, "skbio.workflow.method"]], "__call__() (skbio.workflow.method method)": [[847, "skbio.workflow.method.__call__"]], "__eq__() (skbio.workflow.method method)": [[848, "skbio.workflow.method.__eq__"]], "__ge__() (skbio.workflow.method method)": [[849, "skbio.workflow.method.__ge__"]], "__getstate__() (skbio.workflow.method method)": [[850, "skbio.workflow.method.__getstate__"]], "__gt__() (skbio.workflow.method method)": [[851, "skbio.workflow.method.__gt__"]], "__hash__() (skbio.workflow.method method)": [[852, "skbio.workflow.method.__hash__"]], "__le__() (skbio.workflow.method method)": [[853, "skbio.workflow.method.__le__"]], "__lt__() (skbio.workflow.method method)": [[854, "skbio.workflow.method.__lt__"]], "__ne__() (skbio.workflow.method method)": [[855, "skbio.workflow.method.__ne__"]], "__str__() (skbio.workflow.method method)": [[856, "skbio.workflow.method.__str__"]], "requires (class in skbio.workflow)": [[857, "skbio.workflow.requires"]], "__call__() (skbio.workflow.requires method)": [[858, "skbio.workflow.requires.__call__"]], "__eq__() (skbio.workflow.requires method)": [[859, "skbio.workflow.requires.__eq__"]], "__ge__() (skbio.workflow.requires method)": [[860, "skbio.workflow.requires.__ge__"]], "__getstate__() (skbio.workflow.requires method)": [[861, "skbio.workflow.requires.__getstate__"]], "__gt__() (skbio.workflow.requires method)": [[862, "skbio.workflow.requires.__gt__"]], "__hash__() (skbio.workflow.requires method)": [[863, "skbio.workflow.requires.__hash__"]], "__le__() (skbio.workflow.requires method)": [[864, "skbio.workflow.requires.__le__"]], "__lt__() (skbio.workflow.requires method)": [[865, "skbio.workflow.requires.__lt__"]], "__ne__() (skbio.workflow.requires method)": [[866, "skbio.workflow.requires.__ne__"]], "__str__() (skbio.workflow.requires method)": [[867, "skbio.workflow.requires.__str__"]], "skbio.io": [[869, "module-skbio.io"]], "skbio.metadata": [[870, "module-skbio.metadata"]], "skbio.sequence": [[871, "module-skbio.sequence"]], "skbio.stats": [[872, "module-skbio.stats"]], "skbio.tree": [[873, "module-skbio.tree"]], "skbio.util": [[874, "module-skbio.util"]], "skbio.workflow": [[875, "module-skbio.workflow"]]}})