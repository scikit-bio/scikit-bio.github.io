Search.setIndex({"alltitles": {"Adding Node Information": [[227, "adding-node-information"]], "Advanced Label and Length Rules": [[227, "advanced-label-and-length-rules"]], "Alignment Section": [[219, "alignment-section"], [229, "alignment-section"]], "Alignment algorithms": [[0, "alignment-algorithms"]], "Alignment data structure": [[0, "alignment-data-structure"]], "Alignment structure": [[0, "alignment-structure"]], "Alpha diversity": [[1, "alpha-diversity"]], "Alpha diversity measures (skbio.diversity.alpha)": [[106, "alpha-diversity-measures-skbio-diversity-alpha"]], "Application of Rules": [[227, "application-of-rules"]], "BIOM table": [[1096, "biom-table"]], "BIOM-Format (skbio.io.format.biom)": [[216, "biom-format-skbio-io-format-biom"]], "BLAST Column Types": [[217, "blast-column-types"], [218, "blast-column-types"]], "BLAST+6 format (skbio.io.format.blast6)": [[217, "blast-6-format-skbio-io-format-blast6"]], "BLAST+7 format (skbio.io.format.blast7)": [[218, "blast-7-format-skbio-io-format-blast7"]], "Basic Symbols": [[227, "basic-symbols"]], "Beta diversity": [[1, "beta-diversity"]], "Beta diversity measures (skbio.diversity.beta)": [[144, "beta-diversity-measures-skbio-diversity-beta"]], "Biological Embeddings (skbio.embedding)": [[2, "biological-embeddings-skbio-embedding"]], "Biological Sequences (skbio.sequence)": [[1094, "biological-sequences-skbio-sequence"]], "Canonical analysis": [[852, "canonical-analysis"]], "Categorical Variable Stats": [[703, "categorical-variable-stats"]], "Caveats": [[227, "caveats"]], "Classes": [[234, "classes"], [703, "classes"], [762, "classes"], [1099, "classes"]], "Clustal format (skbio.io.format.clustal)": [[219, "clustal-format-skbio-io-format-clustal"]], "Column Types": [[231, "column-types"]], "Comments and Empty Rows": [[231, "comments-and-empty-rows"]], "Community Diversity (skbio.diversity)": [[1, "community-diversity-skbio-diversity"]], "Composition Statistics (skbio.stats.composition)": [[682, "composition-statistics-skbio-stats-composition"]], "Composition statistics": [[1095, "composition-statistics"]], "Continuous Variable Stats": [[703, "continuous-variable-stats"]], "Cophylogenetic methods": [[760, "cophylogenetic-methods"]], "Correspondence analysis": [[852, "correspondence-analysis"]], "Count vectors": [[1, "count-vectors"]], "Coverage metrics": [[106, "coverage-metrics"]], "Creating a new format for scikit-bio": [[234, "creating-a-new-format-for-scikit-bio"]], "Data Table (skbio.table)": [[1096, "data-table-skbio-table"]], "Data structures": [[703, "data-structures"]], "Data subsampling": [[1095, "data-subsampling"]], "Decorators": [[1099, "decorators"]], "Deprecated functionality": [[0, "deprecated-functionality"]], "Develop custom formats": [[1092, "develop-custom-formats"]], "Developer warnings": [[1098, "developer-warnings"]], "Distance Matrix Comparisons": [[703, "distance-matrix-comparisons"]], "Distance calculation": [[1094, "distance-calculation"]], "Distance matrix statistics": [[1095, "distance-matrix-statistics"]], "Distance matrix-based statistics (skbio.stats.distance)": [[703, "distance-matrix-based-statistics-skbio-stats-distance"]], "Distance-based statistics": [[703, "distance-based-statistics"]], "Diversity metrics": [[106, "diversity-metrics"]], "Dominance metrics": [[106, "dominance-metrics"]], "EMBL format (skbio.io.format.embl)": [[221, "embl-format-skbio-io-format-embl"]], "Embedding format (skbio.io.format.embed).": [[220, "embedding-format-skbio-io-format-embed"]], "Embedding types": [[2, "embedding-types"]], "Embedding vector types": [[2, "embedding-vector-types"]], "Embedding vector utilities": [[2, "embedding-vector-utilities"]], "Empirical Power Estimation (skbio.stats.power)": [[877, "empirical-power-estimation-skbio-stats-power"]], "Evenness metrics": [[106, "evenness-metrics"]], "Evolutionary statistics (skbio.stats.evolve)": [[760, "evolutionary-statistics-skbio-stats-evolve"]], "Example data": [[1096, "example-data"]], "Examples": [[216, "examples"], [217, "examples"], [218, "examples"], [219, "examples"], [220, "examples"], [221, "examples"], [222, "examples"], [223, "examples"], [224, "examples"], [225, "examples"], [227, "examples"], [228, "examples"], [229, "examples"], [230, "examples"], [232, "examples"], [233, "examples"], [703, "examples"], [762, "examples"], [852, "examples"], [877, "examples"]], "Exceptions": [[234, "exceptions"], [703, "exceptions"], [1097, "exceptions"]], "Exceptions and warnings": [[1092, "exceptions-and-warnings"]], "Explanation": [[227, "explanation"]], "FASTA Format": [[222, "fasta-format"]], "FASTA/QUAL format (skbio.io.format.fasta)": [[222, "fasta-qual-format-skbio-io-format-fasta"]], "FASTQ format (skbio.io.format.fastq)": [[223, "fastq-format-skbio-io-format-fastq"]], "FEATURES section": [[224, "features-section"]], "FT section": [[221, "ft-section"]], "Feature Level Products": [[221, "feature-level-products"]], "Footer": [[232, "footer"]], "Formal Grammar": [[227, "formal-grammar"]], "Format Parameters": [[217, "format-parameters"], [219, "format-parameters"], [222, "format-parameters"], [223, "format-parameters"], [224, "format-parameters"], [225, "format-parameters"], [226, "format-parameters"], [227, "format-parameters"], [229, "format-parameters"], [230, "format-parameters"], [232, "format-parameters"], [233, "format-parameters"]], "Format Specification": [[215, "format-specification"], [216, "format-specification"], [217, "format-specification"], [218, "format-specification"], [219, "format-specification"], [220, "format-specification"], [221, "format-specification"], [222, "format-specification"], [223, "format-specification"], [224, "format-specification"], [225, "format-specification"], [226, "format-specification"], [227, "format-specification"], [228, "format-specification"], [229, "format-specification"], [230, "format-specification"], [231, "format-specification"], [232, "format-specification"], [233, "format-specification"]], "Format Support": [[215, "format-support"], [216, "format-support"], [217, "format-support"], [218, "format-support"], [219, "format-support"], [220, "format-support"], [221, "format-support"], [222, "format-support"], [223, "format-support"], [224, "format-support"], [225, "format-support"], [226, "format-support"], [227, "format-support"], [228, "format-support"], [229, "format-support"], [230, "format-support"], [231, "format-support"], [232, "format-support"], [233, "format-support"]], "Functions": [[144, "functions"], [234, "functions"], [273, "functions"], [679, "functions"], [682, "functions"], [703, "functions"], [760, "functions"], [877, "functions"]], "GC metadata": [[232, "gc-metadata"]], "GF metadata": [[232, "gf-metadata"]], "GFF3 format (skbio.io.format.gff3)": [[225, "gff3-format-skbio-io-format-gff3"]], "GR metadata": [[232, "gr-metadata"]], "GS metadata": [[232, "gs-metadata"]], "GenBank format (skbio.io.format.genbank)": [[224, "genbank-format-skbio-io-format-genbank"]], "Generator and TabularMSA Reader Parameters": [[222, "generator-and-tabularmsa-reader-parameters"]], "Generators Only": [[230, "generators-only"]], "Gradient analyses (skbio.stats.gradient)": [[762, "gradient-analyses-skbio-stats-gradient"]], "Header": [[232, "header"]], "Header Section": [[229, "header-section"]], "I/O Registry (skbio.io.registry)": [[234, "i-o-registry-skbio-io-registry"]], "I/O utilities (skbio.io.util)": [[273, "i-o-utilities-skbio-io-util"]], "Identifier Column": [[231, "identifier-column"]], "Inline Comments": [[227, "inline-comments"]], "Input and Output (skbio.io)": [[1092, "input-and-output-skbio-io"]], "Input validation": [[1, "input-validation"]], "Interval metadata": [[1093, "interval-metadata"]], "Introduction": [[1, "introduction"]], "Labeled square matrix format (skbio.io.format.lsmat)": [[226, "labeled-square-matrix-format-skbio-io-format-lsmat"]], "Leading and trailing whitespace characters": [[231, "leading-and-trailing-whitespace-characters"]], "Location string": [[224, "location-string"]], "Metadata": [[232, "metadata"]], "Metadata (skbio.metadata)": [[1093, "metadata-skbio-metadata"]], "Metadata Columns": [[231, "metadata-columns"]], "Metadata Formatting Requirements": [[231, "metadata-formatting-requirements"]], "Metadata Validation": [[231, "metadata-validation"]], "Metadata columns": [[1093, "metadata-columns"]], "Miscellaneous functionality": [[1098, "miscellaneous-functionality"]], "Multidimensional scaling": [[852, "multidimensional-scaling"]], "Multiple Sequence Alignment": [[232, "multiple-sequence-alignment"]], "Multivariate Statistics (skbio.stats)": [[1095, "multivariate-statistics-skbio-stats"]], "Newick format (skbio.io.format.newick)": [[227, "newick-format-skbio-io-format-newick"]], "Number Formatting": [[231, "number-formatting"]], "ORIGIN section": [[224, "origin-section"]], "Ordination methods": [[1095, "ordination-methods"]], "Ordination methods (skbio.stats.ordination)": [[852, "ordination-methods-skbio-stats-ordination"]], "Ordination results": [[852, "ordination-results"]], "Ordination results format (skbio.io.format.ordination)": [[228, "ordination-results-format-skbio-io-format-ordination"]], "Other statistical methods": [[1095, "other-statistical-methods"]], "PHYLIP multiple sequence alignment format (skbio.io.format.phylip)": [[229, "phylip-multiple-sequence-alignment-format-skbio-io-format-phylip"]], "Phylogenetic reconstruction": [[1097, "phylogenetic-reconstruction"]], "QSeq format (skbio.io.format.qseq)": [[230, "qseq-format-skbio-io-format-qseq"]], "QUAL File Parameter (Readers and Writers)": [[222, "qual-file-parameter-readers-and-writers"]], "QUAL Format": [[222, "qual-format"]], "Quality Score Variants": [[223, "quality-score-variants"]], "Read/write files": [[1092, "read-write-files"]], "Reader-specific Parameters": [[222, "reader-specific-parameters"], [224, "reader-specific-parameters"], [225, "reader-specific-parameters"]], "Reading EMBL Files": [[221, "reading-embl-files"]], "Reading EMBL Files using generators": [[221, "reading-embl-files-using-generators"]], "Reading and Writing FASTA Files": [[222, "reading-and-writing-fasta-files"]], "Reading and Writing FASTA/QUAL Files": [[222, "reading-and-writing-fasta-qual-files"]], "Reading and Writing GenBank Files": [[224, "reading-and-writing-genbank-files"]], "Reading files into scikit-bio": [[1092, "reading-files-into-scikit-bio"]], "Recommendations for Identifiers": [[231, "recommendations-for-identifiers"]], "References": [[106, "references"], [215, "references"], [216, "references"], [217, "references"], [218, "references"], [219, "references"], [221, "references"], [222, "references"], [223, "references"], [224, "references"], [225, "references"], [227, "references"], [229, "references"], [230, "references"], [232, "references"], [233, "references"], [682, "references"], [703, "references"], [852, "references"]], "Reserved Keyword Arguments": [[234, "reserved-keyword-arguments"]], "Richness metrics": [[106, "richness-metrics"]], "SQ section": [[221, "sq-section"]], "Sample metadata": [[1093, "sample-metadata"]], "Sections before FEATURES": [[224, "sections-before-features"]], "Sections before FH (Feature Header)": [[221, "sections-before-fh-feature-header"]], "Sequence Alignments (skbio.alignment)": [[0, "sequence-alignments-skbio-alignment"]], "Sequence Data": [[222, "sequence-data"]], "Sequence Header": [[222, "sequence-header"]], "Sequence Reader Parameters": [[222, "sequence-reader-parameters"]], "Sequence distance metrics (skbio.sequence.distance)": [[679, "sequence-distance-metrics-skbio-sequence-distance"]], "Sequence types": [[1094, "sequence-types"]], "Sequence utilities": [[1094, "sequence-utilities"]], "Simple binary dissimilarity matrix format (skbio.io.format.binary_dm)": [[215, "simple-binary-dissimilarity-matrix-format-skbio-io-format-binary-dm"]], "Specifying a diversity metric": [[1, "specifying-a-diversity-metric"]], "Stockholm format (skbio.io.format.stockholm)": [[232, "stockholm-format-skbio-io-format-stockholm"]], "Supported file formats": [[1092, "supported-file-formats"]], "Taxdump format (skbio.io.format.taxdump)": [[233, "taxdump-format-skbio-io-format-taxdump"]], "Testing functionality": [[1098, "testing-functionality"]], "Tree structure and operations": [[1097, "tree-structure-and-operations"]], "Tree utilities": [[1097, "tree-utilities"]], "Trees and Phylogenetics (skbio.tree)": [[1097, "trees-and-phylogenetics-skbio-tree"]], "Tutorial": [[0, "tutorial"], [1, "tutorial"], [1092, "tutorial"], [1094, "tutorial"], [1097, "tutorial"], [1099, "tutorial"]], "Using the optimized alignment algorithm": [[0, "using-the-optimized-alignment-algorithm"]], "Using the slow alignment algorithm": [[0, "using-the-slow-alignment-algorithm"]], "Utilities for Developers (skbio.util)": [[1098, "utilities-for-developers-skbio-util"]], "Utility functions": [[852, "utility-functions"]], "What kinds of files scikit-bio can use": [[1092, "what-kinds-of-files-scikit-bio-can-use"]], "Whitespace": [[227, "whitespace"]], "Workflow construction (skbio.workflow)": [[1099, "workflow-construction-skbio-workflow"]], "Writer-specific Parameters": [[222, "writer-specific-parameters"], [225, "writer-specific-parameters"]], "Writing files from scikit-bio": [[1092, "writing-files-from-scikit-bio"]], "division.dmp": [[233, "division-dmp"]], "gencode.dmp": [[233, "gencode-dmp"]], "names.dmp": [[233, "names-dmp"]], "nodes.dmp": [[233, "nodes-dmp"]], "scikit-bio 0.6.1-dev documentation": [[1091, "scikit-bio-version-documentation"]], "skbio.alignment.AlignPath": [[3, "skbio-alignment-alignpath"]], "skbio.alignment.AlignPath.__eq__": [[4, "skbio-alignment-alignpath-eq"]], "skbio.alignment.AlignPath.__ge__": [[5, "skbio-alignment-alignpath-ge"]], "skbio.alignment.AlignPath.__getstate__": [[6, "skbio-alignment-alignpath-getstate"]], "skbio.alignment.AlignPath.__gt__": [[7, "skbio-alignment-alignpath-gt"]], "skbio.alignment.AlignPath.__hash__": [[8, "skbio-alignment-alignpath-hash"]], "skbio.alignment.AlignPath.__le__": [[9, "skbio-alignment-alignpath-le"]], "skbio.alignment.AlignPath.__lt__": [[10, "skbio-alignment-alignpath-lt"]], "skbio.alignment.AlignPath.__ne__": [[11, "skbio-alignment-alignpath-ne"]], "skbio.alignment.AlignPath.__str__": [[12, "skbio-alignment-alignpath-str"]], "skbio.alignment.AlignPath.from_bits": [[13, "skbio-alignment-alignpath-from-bits"]], "skbio.alignment.AlignPath.from_coordinates": [[14, "skbio-alignment-alignpath-from-coordinates"]], "skbio.alignment.AlignPath.from_indices": [[15, "skbio-alignment-alignpath-from-indices"]], "skbio.alignment.AlignPath.from_tabular": [[16, "skbio-alignment-alignpath-from-tabular"]], "skbio.alignment.AlignPath.to_bits": [[17, "skbio-alignment-alignpath-to-bits"]], "skbio.alignment.AlignPath.to_coordinates": [[18, "skbio-alignment-alignpath-to-coordinates"]], "skbio.alignment.AlignPath.to_indices": [[19, "skbio-alignment-alignpath-to-indices"]], "skbio.alignment.AlignmentStructure": [[20, "skbio-alignment-alignmentstructure"]], "skbio.alignment.AlignmentStructure.__eq__": [[21, "skbio-alignment-alignmentstructure-eq"]], "skbio.alignment.AlignmentStructure.__ge__": [[22, "skbio-alignment-alignmentstructure-ge"]], "skbio.alignment.AlignmentStructure.__getitem__": [[23, "skbio-alignment-alignmentstructure-getitem"]], "skbio.alignment.AlignmentStructure.__getstate__": [[24, "skbio-alignment-alignmentstructure-getstate"]], "skbio.alignment.AlignmentStructure.__gt__": [[25, "skbio-alignment-alignmentstructure-gt"]], "skbio.alignment.AlignmentStructure.__hash__": [[26, "skbio-alignment-alignmentstructure-hash"]], "skbio.alignment.AlignmentStructure.__le__": [[27, "skbio-alignment-alignmentstructure-le"]], "skbio.alignment.AlignmentStructure.__lt__": [[28, "skbio-alignment-alignmentstructure-lt"]], "skbio.alignment.AlignmentStructure.__ne__": [[29, "skbio-alignment-alignmentstructure-ne"]], "skbio.alignment.AlignmentStructure.__setstate__": [[30, "skbio-alignment-alignmentstructure-setstate"]], "skbio.alignment.AlignmentStructure.__str__": [[31, "skbio-alignment-alignmentstructure-str"]], "skbio.alignment.AlignmentStructure.is_zero_based": [[32, "skbio-alignment-alignmentstructure-is-zero-based"]], "skbio.alignment.AlignmentStructure.set_zero_based": [[33, "skbio-alignment-alignmentstructure-set-zero-based"]], "skbio.alignment.PairAlignPath": [[34, "skbio-alignment-pairalignpath"]], "skbio.alignment.PairAlignPath.__eq__": [[35, "skbio-alignment-pairalignpath-eq"]], "skbio.alignment.PairAlignPath.__ge__": [[36, "skbio-alignment-pairalignpath-ge"]], "skbio.alignment.PairAlignPath.__getstate__": [[37, "skbio-alignment-pairalignpath-getstate"]], "skbio.alignment.PairAlignPath.__gt__": [[38, "skbio-alignment-pairalignpath-gt"]], "skbio.alignment.PairAlignPath.__hash__": [[39, "skbio-alignment-pairalignpath-hash"]], "skbio.alignment.PairAlignPath.__le__": [[40, "skbio-alignment-pairalignpath-le"]], "skbio.alignment.PairAlignPath.__lt__": [[41, "skbio-alignment-pairalignpath-lt"]], "skbio.alignment.PairAlignPath.__ne__": [[42, "skbio-alignment-pairalignpath-ne"]], "skbio.alignment.PairAlignPath.__str__": [[43, "skbio-alignment-pairalignpath-str"]], "skbio.alignment.PairAlignPath.from_bits": [[44, "skbio-alignment-pairalignpath-from-bits"]], "skbio.alignment.PairAlignPath.from_cigar": [[45, "skbio-alignment-pairalignpath-from-cigar"]], "skbio.alignment.PairAlignPath.from_coordinates": [[46, "skbio-alignment-pairalignpath-from-coordinates"]], "skbio.alignment.PairAlignPath.from_indices": [[47, "skbio-alignment-pairalignpath-from-indices"]], "skbio.alignment.PairAlignPath.from_tabular": [[48, "skbio-alignment-pairalignpath-from-tabular"]], "skbio.alignment.PairAlignPath.to_bits": [[49, "skbio-alignment-pairalignpath-to-bits"]], "skbio.alignment.PairAlignPath.to_cigar": [[50, "skbio-alignment-pairalignpath-to-cigar"]], "skbio.alignment.PairAlignPath.to_coordinates": [[51, "skbio-alignment-pairalignpath-to-coordinates"]], "skbio.alignment.PairAlignPath.to_indices": [[52, "skbio-alignment-pairalignpath-to-indices"]], "skbio.alignment.StripedSmithWaterman": [[53, "skbio-alignment-stripedsmithwaterman"]], "skbio.alignment.StripedSmithWaterman.__call__": [[54, "skbio-alignment-stripedsmithwaterman-call"]], "skbio.alignment.StripedSmithWaterman.__eq__": [[55, "skbio-alignment-stripedsmithwaterman-eq"]], "skbio.alignment.StripedSmithWaterman.__ge__": [[56, "skbio-alignment-stripedsmithwaterman-ge"]], "skbio.alignment.StripedSmithWaterman.__getstate__": [[57, "skbio-alignment-stripedsmithwaterman-getstate"]], "skbio.alignment.StripedSmithWaterman.__gt__": [[58, "skbio-alignment-stripedsmithwaterman-gt"]], "skbio.alignment.StripedSmithWaterman.__hash__": [[59, "skbio-alignment-stripedsmithwaterman-hash"]], "skbio.alignment.StripedSmithWaterman.__le__": [[60, "skbio-alignment-stripedsmithwaterman-le"]], "skbio.alignment.StripedSmithWaterman.__lt__": [[61, "skbio-alignment-stripedsmithwaterman-lt"]], "skbio.alignment.StripedSmithWaterman.__ne__": [[62, "skbio-alignment-stripedsmithwaterman-ne"]], "skbio.alignment.StripedSmithWaterman.__setstate__": [[63, "skbio-alignment-stripedsmithwaterman-setstate"]], "skbio.alignment.StripedSmithWaterman.__str__": [[64, "skbio-alignment-stripedsmithwaterman-str"]], "skbio.alignment.TabularMSA": [[65, "skbio-alignment-tabularmsa"]], "skbio.alignment.TabularMSA.__bool__": [[66, "skbio-alignment-tabularmsa-bool"]], "skbio.alignment.TabularMSA.__contains__": [[67, "skbio-alignment-tabularmsa-contains"]], "skbio.alignment.TabularMSA.__copy__": [[68, "skbio-alignment-tabularmsa-copy"]], "skbio.alignment.TabularMSA.__deepcopy__": [[69, "skbio-alignment-tabularmsa-deepcopy"]], "skbio.alignment.TabularMSA.__eq__": [[70, "skbio-alignment-tabularmsa-eq"]], "skbio.alignment.TabularMSA.__ge__": [[71, "skbio-alignment-tabularmsa-ge"]], "skbio.alignment.TabularMSA.__getitem__": [[72, "skbio-alignment-tabularmsa-getitem"]], "skbio.alignment.TabularMSA.__getstate__": [[73, "skbio-alignment-tabularmsa-getstate"]], "skbio.alignment.TabularMSA.__gt__": [[74, "skbio-alignment-tabularmsa-gt"]], "skbio.alignment.TabularMSA.__iter__": [[75, "skbio-alignment-tabularmsa-iter"]], "skbio.alignment.TabularMSA.__le__": [[76, "skbio-alignment-tabularmsa-le"]], "skbio.alignment.TabularMSA.__len__": [[77, "skbio-alignment-tabularmsa-len"]], "skbio.alignment.TabularMSA.__lt__": [[78, "skbio-alignment-tabularmsa-lt"]], "skbio.alignment.TabularMSA.__ne__": [[79, "skbio-alignment-tabularmsa-ne"]], "skbio.alignment.TabularMSA.__reversed__": [[80, "skbio-alignment-tabularmsa-reversed"]], "skbio.alignment.TabularMSA.__str__": [[81, "skbio-alignment-tabularmsa-str"]], "skbio.alignment.TabularMSA.append": [[82, "skbio-alignment-tabularmsa-append"]], "skbio.alignment.TabularMSA.consensus": [[83, "skbio-alignment-tabularmsa-consensus"]], "skbio.alignment.TabularMSA.conservation": [[84, "skbio-alignment-tabularmsa-conservation"]], "skbio.alignment.TabularMSA.extend": [[85, "skbio-alignment-tabularmsa-extend"]], "skbio.alignment.TabularMSA.from_dict": [[86, "skbio-alignment-tabularmsa-from-dict"]], "skbio.alignment.TabularMSA.from_path_seqs": [[87, "skbio-alignment-tabularmsa-from-path-seqs"]], "skbio.alignment.TabularMSA.gap_frequencies": [[88, "skbio-alignment-tabularmsa-gap-frequencies"]], "skbio.alignment.TabularMSA.has_metadata": [[89, "skbio-alignment-tabularmsa-has-metadata"]], "skbio.alignment.TabularMSA.has_positional_metadata": [[90, "skbio-alignment-tabularmsa-has-positional-metadata"]], "skbio.alignment.TabularMSA.iter_positions": [[91, "skbio-alignment-tabularmsa-iter-positions"]], "skbio.alignment.TabularMSA.join": [[92, "skbio-alignment-tabularmsa-join"]], "skbio.alignment.TabularMSA.read": [[93, "skbio-alignment-tabularmsa-read"]], "skbio.alignment.TabularMSA.reassign_index": [[94, "skbio-alignment-tabularmsa-reassign-index"]], "skbio.alignment.TabularMSA.sort": [[95, "skbio-alignment-tabularmsa-sort"]], "skbio.alignment.TabularMSA.to_dict": [[96, "skbio-alignment-tabularmsa-to-dict"]], "skbio.alignment.TabularMSA.write": [[97, "skbio-alignment-tabularmsa-write"]], "skbio.alignment.global_pairwise_align": [[98, "skbio-alignment-global-pairwise-align"]], "skbio.alignment.global_pairwise_align_nucleotide": [[99, "skbio-alignment-global-pairwise-align-nucleotide"]], "skbio.alignment.global_pairwise_align_protein": [[100, "skbio-alignment-global-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align": [[101, "skbio-alignment-local-pairwise-align"]], "skbio.alignment.local_pairwise_align_nucleotide": [[102, "skbio-alignment-local-pairwise-align-nucleotide"]], "skbio.alignment.local_pairwise_align_protein": [[103, "skbio-alignment-local-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align_ssw": [[104, "skbio-alignment-local-pairwise-align-ssw"]], "skbio.alignment.make_identity_substitution_matrix": [[105, "skbio-alignment-make-identity-substitution-matrix"]], "skbio.diversity.alpha.ace": [[107, "skbio-diversity-alpha-ace"]], "skbio.diversity.alpha.berger_parker_d": [[108, "skbio-diversity-alpha-berger-parker-d"]], "skbio.diversity.alpha.brillouin_d": [[109, "skbio-diversity-alpha-brillouin-d"]], "skbio.diversity.alpha.chao1": [[110, "skbio-diversity-alpha-chao1"]], "skbio.diversity.alpha.chao1_ci": [[111, "skbio-diversity-alpha-chao1-ci"]], "skbio.diversity.alpha.dominance": [[112, "skbio-diversity-alpha-dominance"]], "skbio.diversity.alpha.doubles": [[113, "skbio-diversity-alpha-doubles"]], "skbio.diversity.alpha.enspie": [[114, "skbio-diversity-alpha-enspie"]], "skbio.diversity.alpha.esty_ci": [[115, "skbio-diversity-alpha-esty-ci"]], "skbio.diversity.alpha.faith_pd": [[116, "skbio-diversity-alpha-faith-pd"]], "skbio.diversity.alpha.fisher_alpha": [[117, "skbio-diversity-alpha-fisher-alpha"]], "skbio.diversity.alpha.gini_index": [[118, "skbio-diversity-alpha-gini-index"]], "skbio.diversity.alpha.goods_coverage": [[119, "skbio-diversity-alpha-goods-coverage"]], "skbio.diversity.alpha.heip_e": [[120, "skbio-diversity-alpha-heip-e"]], "skbio.diversity.alpha.inv_simpson": [[121, "skbio-diversity-alpha-inv-simpson"]], "skbio.diversity.alpha.kempton_taylor_q": [[122, "skbio-diversity-alpha-kempton-taylor-q"]], "skbio.diversity.alpha.lladser_ci": [[123, "skbio-diversity-alpha-lladser-ci"]], "skbio.diversity.alpha.lladser_pe": [[124, "skbio-diversity-alpha-lladser-pe"]], "skbio.diversity.alpha.margalef": [[125, "skbio-diversity-alpha-margalef"]], "skbio.diversity.alpha.mcintosh_d": [[126, "skbio-diversity-alpha-mcintosh-d"]], "skbio.diversity.alpha.mcintosh_e": [[127, "skbio-diversity-alpha-mcintosh-e"]], "skbio.diversity.alpha.menhinick": [[128, "skbio-diversity-alpha-menhinick"]], "skbio.diversity.alpha.michaelis_menten_fit": [[129, "skbio-diversity-alpha-michaelis-menten-fit"]], "skbio.diversity.alpha.observed_features": [[130, "skbio-diversity-alpha-observed-features"]], "skbio.diversity.alpha.observed_otus": [[131, "skbio-diversity-alpha-observed-otus"]], "skbio.diversity.alpha.osd": [[132, "skbio-diversity-alpha-osd"]], "skbio.diversity.alpha.phydiv": [[133, "skbio-diversity-alpha-phydiv"]], "skbio.diversity.alpha.pielou_e": [[134, "skbio-diversity-alpha-pielou-e"]], "skbio.diversity.alpha.robbins": [[135, "skbio-diversity-alpha-robbins"]], "skbio.diversity.alpha.shannon": [[136, "skbio-diversity-alpha-shannon"]], "skbio.diversity.alpha.simpson": [[137, "skbio-diversity-alpha-simpson"]], "skbio.diversity.alpha.simpson_d": [[138, "skbio-diversity-alpha-simpson-d"]], "skbio.diversity.alpha.simpson_e": [[139, "skbio-diversity-alpha-simpson-e"]], "skbio.diversity.alpha.singles": [[140, "skbio-diversity-alpha-singles"]], "skbio.diversity.alpha.sobs": [[141, "skbio-diversity-alpha-sobs"]], "skbio.diversity.alpha.strong": [[142, "skbio-diversity-alpha-strong"]], "skbio.diversity.alpha_diversity": [[143, "skbio-diversity-alpha-diversity"]], "skbio.diversity.beta.unweighted_unifrac": [[145, "skbio-diversity-beta-unweighted-unifrac"]], "skbio.diversity.beta.weighted_unifrac": [[146, "skbio-diversity-beta-weighted-unifrac"]], "skbio.diversity.beta_diversity": [[147, "skbio-diversity-beta-diversity"]], "skbio.diversity.block_beta_diversity": [[148, "skbio-diversity-block-beta-diversity"]], "skbio.diversity.get_alpha_diversity_metrics": [[149, "skbio-diversity-get-alpha-diversity-metrics"]], "skbio.diversity.get_beta_diversity_metrics": [[150, "skbio-diversity-get-beta-diversity-metrics"]], "skbio.diversity.partial_beta_diversity": [[151, "skbio-diversity-partial-beta-diversity"]], "skbio.embedding.Embedding": [[152, "skbio-embedding-embedding"]], "skbio.embedding.Embedding.__eq__": [[153, "skbio-embedding-embedding-eq"]], "skbio.embedding.Embedding.__ge__": [[154, "skbio-embedding-embedding-ge"]], "skbio.embedding.Embedding.__getstate__": [[155, "skbio-embedding-embedding-getstate"]], "skbio.embedding.Embedding.__gt__": [[156, "skbio-embedding-embedding-gt"]], "skbio.embedding.Embedding.__hash__": [[157, "skbio-embedding-embedding-hash"]], "skbio.embedding.Embedding.__le__": [[158, "skbio-embedding-embedding-le"]], "skbio.embedding.Embedding.__lt__": [[159, "skbio-embedding-embedding-lt"]], "skbio.embedding.Embedding.__ne__": [[160, "skbio-embedding-embedding-ne"]], "skbio.embedding.Embedding.__str__": [[161, "skbio-embedding-embedding-str"]], "skbio.embedding.Embedding.bytes": [[162, "skbio-embedding-embedding-bytes"]], "skbio.embedding.ProteinEmbedding": [[163, "skbio-embedding-proteinembedding"]], "skbio.embedding.ProteinEmbedding.__eq__": [[164, "skbio-embedding-proteinembedding-eq"]], "skbio.embedding.ProteinEmbedding.__ge__": [[165, "skbio-embedding-proteinembedding-ge"]], "skbio.embedding.ProteinEmbedding.__getstate__": [[166, "skbio-embedding-proteinembedding-getstate"]], "skbio.embedding.ProteinEmbedding.__gt__": [[167, "skbio-embedding-proteinembedding-gt"]], "skbio.embedding.ProteinEmbedding.__hash__": [[168, "skbio-embedding-proteinembedding-hash"]], "skbio.embedding.ProteinEmbedding.__le__": [[169, "skbio-embedding-proteinembedding-le"]], "skbio.embedding.ProteinEmbedding.__lt__": [[170, "skbio-embedding-proteinembedding-lt"]], "skbio.embedding.ProteinEmbedding.__ne__": [[171, "skbio-embedding-proteinembedding-ne"]], "skbio.embedding.ProteinEmbedding.__str__": [[172, "skbio-embedding-proteinembedding-str"]], "skbio.embedding.ProteinEmbedding.bytes": [[173, "skbio-embedding-proteinembedding-bytes"]], "skbio.embedding.ProteinEmbedding.read": [[174, "skbio-embedding-proteinembedding-read"]], "skbio.embedding.ProteinEmbedding.write": [[175, "skbio-embedding-proteinembedding-write"]], "skbio.embedding.ProteinVector": [[176, "skbio-embedding-proteinvector"]], "skbio.embedding.ProteinVector.__eq__": [[177, "skbio-embedding-proteinvector-eq"]], "skbio.embedding.ProteinVector.__ge__": [[178, "skbio-embedding-proteinvector-ge"]], "skbio.embedding.ProteinVector.__getstate__": [[179, "skbio-embedding-proteinvector-getstate"]], "skbio.embedding.ProteinVector.__gt__": [[180, "skbio-embedding-proteinvector-gt"]], "skbio.embedding.ProteinVector.__hash__": [[181, "skbio-embedding-proteinvector-hash"]], "skbio.embedding.ProteinVector.__le__": [[182, "skbio-embedding-proteinvector-le"]], "skbio.embedding.ProteinVector.__lt__": [[183, "skbio-embedding-proteinvector-lt"]], "skbio.embedding.ProteinVector.__ne__": [[184, "skbio-embedding-proteinvector-ne"]], "skbio.embedding.ProteinVector.__str__": [[185, "skbio-embedding-proteinvector-str"]], "skbio.embedding.ProteinVector.bytes": [[186, "skbio-embedding-proteinvector-bytes"]], "skbio.embedding.ProteinVector.read": [[187, "skbio-embedding-proteinvector-read"]], "skbio.embedding.ProteinVector.write": [[188, "skbio-embedding-proteinvector-write"]], "skbio.embedding.SequenceEmbedding": [[189, "skbio-embedding-sequenceembedding"]], "skbio.embedding.SequenceEmbedding.__eq__": [[190, "skbio-embedding-sequenceembedding-eq"]], "skbio.embedding.SequenceEmbedding.__ge__": [[191, "skbio-embedding-sequenceembedding-ge"]], "skbio.embedding.SequenceEmbedding.__getstate__": [[192, "skbio-embedding-sequenceembedding-getstate"]], "skbio.embedding.SequenceEmbedding.__gt__": [[193, "skbio-embedding-sequenceembedding-gt"]], "skbio.embedding.SequenceEmbedding.__hash__": [[194, "skbio-embedding-sequenceembedding-hash"]], "skbio.embedding.SequenceEmbedding.__le__": [[195, "skbio-embedding-sequenceembedding-le"]], "skbio.embedding.SequenceEmbedding.__lt__": [[196, "skbio-embedding-sequenceembedding-lt"]], "skbio.embedding.SequenceEmbedding.__ne__": [[197, "skbio-embedding-sequenceembedding-ne"]], "skbio.embedding.SequenceEmbedding.__str__": [[198, "skbio-embedding-sequenceembedding-str"]], "skbio.embedding.SequenceEmbedding.bytes": [[199, "skbio-embedding-sequenceembedding-bytes"]], "skbio.embedding.SequenceVector": [[200, "skbio-embedding-sequencevector"]], "skbio.embedding.SequenceVector.__eq__": [[201, "skbio-embedding-sequencevector-eq"]], "skbio.embedding.SequenceVector.__ge__": [[202, "skbio-embedding-sequencevector-ge"]], "skbio.embedding.SequenceVector.__getstate__": [[203, "skbio-embedding-sequencevector-getstate"]], "skbio.embedding.SequenceVector.__gt__": [[204, "skbio-embedding-sequencevector-gt"]], "skbio.embedding.SequenceVector.__hash__": [[205, "skbio-embedding-sequencevector-hash"]], "skbio.embedding.SequenceVector.__le__": [[206, "skbio-embedding-sequencevector-le"]], "skbio.embedding.SequenceVector.__lt__": [[207, "skbio-embedding-sequencevector-lt"]], "skbio.embedding.SequenceVector.__ne__": [[208, "skbio-embedding-sequencevector-ne"]], "skbio.embedding.SequenceVector.__str__": [[209, "skbio-embedding-sequencevector-str"]], "skbio.embedding.SequenceVector.bytes": [[210, "skbio-embedding-sequencevector-bytes"]], "skbio.embedding.embed_vec_to_dataframe": [[211, "skbio-embedding-embed-vec-to-dataframe"]], "skbio.embedding.embed_vec_to_distances": [[212, "skbio-embedding-embed-vec-to-distances"]], "skbio.embedding.embed_vec_to_numpy": [[213, "skbio-embedding-embed-vec-to-numpy"]], "skbio.embedding.embed_vec_to_ordination": [[214, "skbio-embedding-embed-vec-to-ordination"]], "skbio.io.registry.Format": [[235, "skbio-io-registry-format"]], "skbio.io.registry.Format.__eq__": [[236, "skbio-io-registry-format-eq"]], "skbio.io.registry.Format.__ge__": [[237, "skbio-io-registry-format-ge"]], "skbio.io.registry.Format.__getstate__": [[238, "skbio-io-registry-format-getstate"]], "skbio.io.registry.Format.__gt__": [[239, "skbio-io-registry-format-gt"]], "skbio.io.registry.Format.__hash__": [[240, "skbio-io-registry-format-hash"]], "skbio.io.registry.Format.__le__": [[241, "skbio-io-registry-format-le"]], "skbio.io.registry.Format.__lt__": [[242, "skbio-io-registry-format-lt"]], "skbio.io.registry.Format.__ne__": [[243, "skbio-io-registry-format-ne"]], "skbio.io.registry.Format.__str__": [[244, "skbio-io-registry-format-str"]], "skbio.io.registry.Format.reader": [[245, "skbio-io-registry-format-reader"]], "skbio.io.registry.Format.sniffer": [[246, "skbio-io-registry-format-sniffer"]], "skbio.io.registry.Format.writer": [[247, "skbio-io-registry-format-writer"]], "skbio.io.registry.IORegistry": [[248, "skbio-io-registry-ioregistry"]], "skbio.io.registry.IORegistry.__eq__": [[249, "skbio-io-registry-ioregistry-eq"]], "skbio.io.registry.IORegistry.__ge__": [[250, "skbio-io-registry-ioregistry-ge"]], "skbio.io.registry.IORegistry.__getstate__": [[251, "skbio-io-registry-ioregistry-getstate"]], "skbio.io.registry.IORegistry.__gt__": [[252, "skbio-io-registry-ioregistry-gt"]], "skbio.io.registry.IORegistry.__hash__": [[253, "skbio-io-registry-ioregistry-hash"]], "skbio.io.registry.IORegistry.__le__": [[254, "skbio-io-registry-ioregistry-le"]], "skbio.io.registry.IORegistry.__lt__": [[255, "skbio-io-registry-ioregistry-lt"]], "skbio.io.registry.IORegistry.__ne__": [[256, "skbio-io-registry-ioregistry-ne"]], "skbio.io.registry.IORegistry.__str__": [[257, "skbio-io-registry-ioregistry-str"]], "skbio.io.registry.IORegistry.add_format": [[258, "skbio-io-registry-ioregistry-add-format"]], "skbio.io.registry.IORegistry.create_format": [[259, "skbio-io-registry-ioregistry-create-format"]], "skbio.io.registry.IORegistry.get_reader": [[260, "skbio-io-registry-ioregistry-get-reader"]], "skbio.io.registry.IORegistry.get_sniffer": [[261, "skbio-io-registry-ioregistry-get-sniffer"]], "skbio.io.registry.IORegistry.get_writer": [[262, "skbio-io-registry-ioregistry-get-writer"]], "skbio.io.registry.IORegistry.list_read_formats": [[263, "skbio-io-registry-ioregistry-list-read-formats"]], "skbio.io.registry.IORegistry.list_write_formats": [[264, "skbio-io-registry-ioregistry-list-write-formats"]], "skbio.io.registry.IORegistry.monkey_patch": [[265, "skbio-io-registry-ioregistry-monkey-patch"]], "skbio.io.registry.IORegistry.read": [[266, "skbio-io-registry-ioregistry-read"]], "skbio.io.registry.IORegistry.sniff": [[267, "skbio-io-registry-ioregistry-sniff"]], "skbio.io.registry.IORegistry.write": [[268, "skbio-io-registry-ioregistry-write"]], "skbio.io.registry.create_format": [[269, "skbio-io-registry-create-format"]], "skbio.io.registry.read": [[270, "skbio-io-registry-read"]], "skbio.io.registry.sniff": [[271, "skbio-io-registry-sniff"]], "skbio.io.registry.write": [[272, "skbio-io-registry-write"]], "skbio.io.util.open": [[274, "skbio-io-util-open"]], "skbio.io.util.open_file": [[275, "skbio-io-util-open-file"]], "skbio.io.util.open_files": [[276, "skbio-io-util-open-files"]], "skbio.metadata.CategoricalMetadataColumn": [[277, "skbio-metadata-categoricalmetadatacolumn"]], "skbio.metadata.CategoricalMetadataColumn.__eq__": [[278, "skbio-metadata-categoricalmetadatacolumn-eq"]], "skbio.metadata.CategoricalMetadataColumn.__ge__": [[279, "skbio-metadata-categoricalmetadatacolumn-ge"]], "skbio.metadata.CategoricalMetadataColumn.__getstate__": [[280, "skbio-metadata-categoricalmetadatacolumn-getstate"]], "skbio.metadata.CategoricalMetadataColumn.__gt__": [[281, "skbio-metadata-categoricalmetadatacolumn-gt"]], "skbio.metadata.CategoricalMetadataColumn.__le__": [[282, "skbio-metadata-categoricalmetadatacolumn-le"]], "skbio.metadata.CategoricalMetadataColumn.__lt__": [[283, "skbio-metadata-categoricalmetadatacolumn-lt"]], "skbio.metadata.CategoricalMetadataColumn.__ne__": [[284, "skbio-metadata-categoricalmetadatacolumn-ne"]], "skbio.metadata.CategoricalMetadataColumn.__str__": [[285, "skbio-metadata-categoricalmetadatacolumn-str"]], "skbio.metadata.CategoricalMetadataColumn.drop_missing_values": [[286, "skbio-metadata-categoricalmetadatacolumn-drop-missing-values"]], "skbio.metadata.CategoricalMetadataColumn.filter_ids": [[287, "skbio-metadata-categoricalmetadatacolumn-filter-ids"]], "skbio.metadata.CategoricalMetadataColumn.get_ids": [[288, "skbio-metadata-categoricalmetadatacolumn-get-ids"]], "skbio.metadata.CategoricalMetadataColumn.get_missing": [[289, "skbio-metadata-categoricalmetadatacolumn-get-missing"]], "skbio.metadata.CategoricalMetadataColumn.get_value": [[290, "skbio-metadata-categoricalmetadatacolumn-get-value"]], "skbio.metadata.CategoricalMetadataColumn.has_missing_values": [[291, "skbio-metadata-categoricalmetadatacolumn-has-missing-values"]], "skbio.metadata.CategoricalMetadataColumn.save": [[292, "skbio-metadata-categoricalmetadatacolumn-save"]], "skbio.metadata.CategoricalMetadataColumn.to_dataframe": [[293, "skbio-metadata-categoricalmetadatacolumn-to-dataframe"]], "skbio.metadata.CategoricalMetadataColumn.to_series": [[294, "skbio-metadata-categoricalmetadatacolumn-to-series"]], "skbio.metadata.Interval": [[295, "skbio-metadata-interval"]], "skbio.metadata.Interval.__eq__": [[296, "skbio-metadata-interval-eq"]], "skbio.metadata.Interval.__ge__": [[297, "skbio-metadata-interval-ge"]], "skbio.metadata.Interval.__getstate__": [[298, "skbio-metadata-interval-getstate"]], "skbio.metadata.Interval.__gt__": [[299, "skbio-metadata-interval-gt"]], "skbio.metadata.Interval.__le__": [[300, "skbio-metadata-interval-le"]], "skbio.metadata.Interval.__lt__": [[301, "skbio-metadata-interval-lt"]], "skbio.metadata.Interval.__ne__": [[302, "skbio-metadata-interval-ne"]], "skbio.metadata.Interval.__str__": [[303, "skbio-metadata-interval-str"]], "skbio.metadata.Interval.drop": [[304, "skbio-metadata-interval-drop"]], "skbio.metadata.IntervalMetadata": [[305, "skbio-metadata-intervalmetadata"]], "skbio.metadata.IntervalMetadata.__copy__": [[306, "skbio-metadata-intervalmetadata-copy"]], "skbio.metadata.IntervalMetadata.__deepcopy__": [[307, "skbio-metadata-intervalmetadata-deepcopy"]], "skbio.metadata.IntervalMetadata.__eq__": [[308, "skbio-metadata-intervalmetadata-eq"]], "skbio.metadata.IntervalMetadata.__ge__": [[309, "skbio-metadata-intervalmetadata-ge"]], "skbio.metadata.IntervalMetadata.__getstate__": [[310, "skbio-metadata-intervalmetadata-getstate"]], "skbio.metadata.IntervalMetadata.__gt__": [[311, "skbio-metadata-intervalmetadata-gt"]], "skbio.metadata.IntervalMetadata.__le__": [[312, "skbio-metadata-intervalmetadata-le"]], "skbio.metadata.IntervalMetadata.__lt__": [[313, "skbio-metadata-intervalmetadata-lt"]], "skbio.metadata.IntervalMetadata.__ne__": [[314, "skbio-metadata-intervalmetadata-ne"]], "skbio.metadata.IntervalMetadata.__str__": [[315, "skbio-metadata-intervalmetadata-str"]], "skbio.metadata.IntervalMetadata.add": [[316, "skbio-metadata-intervalmetadata-add"]], "skbio.metadata.IntervalMetadata.concat": [[317, "skbio-metadata-intervalmetadata-concat"]], "skbio.metadata.IntervalMetadata.drop": [[318, "skbio-metadata-intervalmetadata-drop"]], "skbio.metadata.IntervalMetadata.merge": [[319, "skbio-metadata-intervalmetadata-merge"]], "skbio.metadata.IntervalMetadata.query": [[320, "skbio-metadata-intervalmetadata-query"]], "skbio.metadata.IntervalMetadata.read": [[321, "skbio-metadata-intervalmetadata-read"]], "skbio.metadata.IntervalMetadata.sort": [[322, "skbio-metadata-intervalmetadata-sort"]], "skbio.metadata.IntervalMetadata.write": [[323, "skbio-metadata-intervalmetadata-write"]], "skbio.metadata.MetadataColumn": [[324, "skbio-metadata-metadatacolumn"]], "skbio.metadata.MetadataColumn.__eq__": [[325, "skbio-metadata-metadatacolumn-eq"]], "skbio.metadata.MetadataColumn.__ge__": [[326, "skbio-metadata-metadatacolumn-ge"]], "skbio.metadata.MetadataColumn.__getstate__": [[327, "skbio-metadata-metadatacolumn-getstate"]], "skbio.metadata.MetadataColumn.__gt__": [[328, "skbio-metadata-metadatacolumn-gt"]], "skbio.metadata.MetadataColumn.__le__": [[329, "skbio-metadata-metadatacolumn-le"]], "skbio.metadata.MetadataColumn.__lt__": [[330, "skbio-metadata-metadatacolumn-lt"]], "skbio.metadata.MetadataColumn.__ne__": [[331, "skbio-metadata-metadatacolumn-ne"]], "skbio.metadata.MetadataColumn.__str__": [[332, "skbio-metadata-metadatacolumn-str"]], "skbio.metadata.MetadataColumn.drop_missing_values": [[333, "skbio-metadata-metadatacolumn-drop-missing-values"]], "skbio.metadata.MetadataColumn.filter_ids": [[334, "skbio-metadata-metadatacolumn-filter-ids"]], "skbio.metadata.MetadataColumn.get_ids": [[335, "skbio-metadata-metadatacolumn-get-ids"]], "skbio.metadata.MetadataColumn.get_missing": [[336, "skbio-metadata-metadatacolumn-get-missing"]], "skbio.metadata.MetadataColumn.get_value": [[337, "skbio-metadata-metadatacolumn-get-value"]], "skbio.metadata.MetadataColumn.has_missing_values": [[338, "skbio-metadata-metadatacolumn-has-missing-values"]], "skbio.metadata.MetadataColumn.save": [[339, "skbio-metadata-metadatacolumn-save"]], "skbio.metadata.MetadataColumn.to_dataframe": [[340, "skbio-metadata-metadatacolumn-to-dataframe"]], "skbio.metadata.MetadataColumn.to_series": [[341, "skbio-metadata-metadatacolumn-to-series"]], "skbio.metadata.NumericMetadataColumn": [[342, "skbio-metadata-numericmetadatacolumn"]], "skbio.metadata.NumericMetadataColumn.__eq__": [[343, "skbio-metadata-numericmetadatacolumn-eq"]], "skbio.metadata.NumericMetadataColumn.__ge__": [[344, "skbio-metadata-numericmetadatacolumn-ge"]], "skbio.metadata.NumericMetadataColumn.__getstate__": [[345, "skbio-metadata-numericmetadatacolumn-getstate"]], "skbio.metadata.NumericMetadataColumn.__gt__": [[346, "skbio-metadata-numericmetadatacolumn-gt"]], "skbio.metadata.NumericMetadataColumn.__le__": [[347, "skbio-metadata-numericmetadatacolumn-le"]], "skbio.metadata.NumericMetadataColumn.__lt__": [[348, "skbio-metadata-numericmetadatacolumn-lt"]], "skbio.metadata.NumericMetadataColumn.__ne__": [[349, "skbio-metadata-numericmetadatacolumn-ne"]], "skbio.metadata.NumericMetadataColumn.__str__": [[350, "skbio-metadata-numericmetadatacolumn-str"]], "skbio.metadata.NumericMetadataColumn.drop_missing_values": [[351, "skbio-metadata-numericmetadatacolumn-drop-missing-values"]], "skbio.metadata.NumericMetadataColumn.filter_ids": [[352, "skbio-metadata-numericmetadatacolumn-filter-ids"]], "skbio.metadata.NumericMetadataColumn.get_ids": [[353, "skbio-metadata-numericmetadatacolumn-get-ids"]], "skbio.metadata.NumericMetadataColumn.get_missing": [[354, "skbio-metadata-numericmetadatacolumn-get-missing"]], "skbio.metadata.NumericMetadataColumn.get_value": [[355, "skbio-metadata-numericmetadatacolumn-get-value"]], "skbio.metadata.NumericMetadataColumn.has_missing_values": [[356, "skbio-metadata-numericmetadatacolumn-has-missing-values"]], "skbio.metadata.NumericMetadataColumn.save": [[357, "skbio-metadata-numericmetadatacolumn-save"]], "skbio.metadata.NumericMetadataColumn.to_dataframe": [[358, "skbio-metadata-numericmetadatacolumn-to-dataframe"]], "skbio.metadata.NumericMetadataColumn.to_series": [[359, "skbio-metadata-numericmetadatacolumn-to-series"]], "skbio.metadata.SampleMetadata": [[360, "skbio-metadata-samplemetadata"]], "skbio.metadata.SampleMetadata.__eq__": [[361, "skbio-metadata-samplemetadata-eq"]], "skbio.metadata.SampleMetadata.__ge__": [[362, "skbio-metadata-samplemetadata-ge"]], "skbio.metadata.SampleMetadata.__getstate__": [[363, "skbio-metadata-samplemetadata-getstate"]], "skbio.metadata.SampleMetadata.__gt__": [[364, "skbio-metadata-samplemetadata-gt"]], "skbio.metadata.SampleMetadata.__le__": [[365, "skbio-metadata-samplemetadata-le"]], "skbio.metadata.SampleMetadata.__lt__": [[366, "skbio-metadata-samplemetadata-lt"]], "skbio.metadata.SampleMetadata.__ne__": [[367, "skbio-metadata-samplemetadata-ne"]], "skbio.metadata.SampleMetadata.__str__": [[368, "skbio-metadata-samplemetadata-str"]], "skbio.metadata.SampleMetadata.filter_columns": [[369, "skbio-metadata-samplemetadata-filter-columns"]], "skbio.metadata.SampleMetadata.filter_ids": [[370, "skbio-metadata-samplemetadata-filter-ids"]], "skbio.metadata.SampleMetadata.get_column": [[371, "skbio-metadata-samplemetadata-get-column"]], "skbio.metadata.SampleMetadata.get_ids": [[372, "skbio-metadata-samplemetadata-get-ids"]], "skbio.metadata.SampleMetadata.load": [[373, "skbio-metadata-samplemetadata-load"]], "skbio.metadata.SampleMetadata.merge": [[374, "skbio-metadata-samplemetadata-merge"]], "skbio.metadata.SampleMetadata.read": [[375, "skbio-metadata-samplemetadata-read"]], "skbio.metadata.SampleMetadata.save": [[376, "skbio-metadata-samplemetadata-save"]], "skbio.metadata.SampleMetadata.to_dataframe": [[377, "skbio-metadata-samplemetadata-to-dataframe"]], "skbio.metadata.SampleMetadata.write": [[378, "skbio-metadata-samplemetadata-write"]], "skbio.sequence.DNA": [[379, "skbio-sequence-dna"]], "skbio.sequence.DNA.__bool__": [[380, "skbio-sequence-dna-bool"]], "skbio.sequence.DNA.__contains__": [[381, "skbio-sequence-dna-contains"]], "skbio.sequence.DNA.__copy__": [[382, "skbio-sequence-dna-copy"]], "skbio.sequence.DNA.__deepcopy__": [[383, "skbio-sequence-dna-deepcopy"]], "skbio.sequence.DNA.__eq__": [[384, "skbio-sequence-dna-eq"]], "skbio.sequence.DNA.__ge__": [[385, "skbio-sequence-dna-ge"]], "skbio.sequence.DNA.__getitem__": [[386, "skbio-sequence-dna-getitem"]], "skbio.sequence.DNA.__getstate__": [[387, "skbio-sequence-dna-getstate"]], "skbio.sequence.DNA.__gt__": [[388, "skbio-sequence-dna-gt"]], "skbio.sequence.DNA.__iter__": [[389, "skbio-sequence-dna-iter"]], "skbio.sequence.DNA.__le__": [[390, "skbio-sequence-dna-le"]], "skbio.sequence.DNA.__len__": [[391, "skbio-sequence-dna-len"]], "skbio.sequence.DNA.__lt__": [[392, "skbio-sequence-dna-lt"]], "skbio.sequence.DNA.__ne__": [[393, "skbio-sequence-dna-ne"]], "skbio.sequence.DNA.__reversed__": [[394, "skbio-sequence-dna-reversed"]], "skbio.sequence.DNA.__str__": [[395, "skbio-sequence-dna-str"]], "skbio.sequence.DNA.complement": [[396, "skbio-sequence-dna-complement"]], "skbio.sequence.DNA.concat": [[397, "skbio-sequence-dna-concat"]], "skbio.sequence.DNA.count": [[398, "skbio-sequence-dna-count"]], "skbio.sequence.DNA.definites": [[399, "skbio-sequence-dna-definites"]], "skbio.sequence.DNA.degap": [[400, "skbio-sequence-dna-degap"]], "skbio.sequence.DNA.degenerates": [[401, "skbio-sequence-dna-degenerates"]], "skbio.sequence.DNA.distance": [[402, "skbio-sequence-dna-distance"]], "skbio.sequence.DNA.expand_degenerates": [[403, "skbio-sequence-dna-expand-degenerates"]], "skbio.sequence.DNA.find_motifs": [[404, "skbio-sequence-dna-find-motifs"]], "skbio.sequence.DNA.find_with_regex": [[405, "skbio-sequence-dna-find-with-regex"]], "skbio.sequence.DNA.frequencies": [[406, "skbio-sequence-dna-frequencies"]], "skbio.sequence.DNA.gaps": [[407, "skbio-sequence-dna-gaps"]], "skbio.sequence.DNA.gc_content": [[408, "skbio-sequence-dna-gc-content"]], "skbio.sequence.DNA.gc_frequency": [[409, "skbio-sequence-dna-gc-frequency"]], "skbio.sequence.DNA.has_definites": [[410, "skbio-sequence-dna-has-definites"]], "skbio.sequence.DNA.has_degenerates": [[411, "skbio-sequence-dna-has-degenerates"]], "skbio.sequence.DNA.has_gaps": [[412, "skbio-sequence-dna-has-gaps"]], "skbio.sequence.DNA.has_interval_metadata": [[413, "skbio-sequence-dna-has-interval-metadata"]], "skbio.sequence.DNA.has_metadata": [[414, "skbio-sequence-dna-has-metadata"]], "skbio.sequence.DNA.has_nondegenerates": [[415, "skbio-sequence-dna-has-nondegenerates"]], "skbio.sequence.DNA.has_positional_metadata": [[416, "skbio-sequence-dna-has-positional-metadata"]], "skbio.sequence.DNA.index": [[417, "skbio-sequence-dna-index"]], "skbio.sequence.DNA.is_reverse_complement": [[418, "skbio-sequence-dna-is-reverse-complement"]], "skbio.sequence.DNA.iter_contiguous": [[419, "skbio-sequence-dna-iter-contiguous"]], "skbio.sequence.DNA.iter_kmers": [[420, "skbio-sequence-dna-iter-kmers"]], "skbio.sequence.DNA.kmer_frequencies": [[421, "skbio-sequence-dna-kmer-frequencies"]], "skbio.sequence.DNA.lowercase": [[422, "skbio-sequence-dna-lowercase"]], "skbio.sequence.DNA.match_frequency": [[423, "skbio-sequence-dna-match-frequency"]], "skbio.sequence.DNA.matches": [[424, "skbio-sequence-dna-matches"]], "skbio.sequence.DNA.mismatch_frequency": [[425, "skbio-sequence-dna-mismatch-frequency"]], "skbio.sequence.DNA.mismatches": [[426, "skbio-sequence-dna-mismatches"]], "skbio.sequence.DNA.nondegenerates": [[427, "skbio-sequence-dna-nondegenerates"]], "skbio.sequence.DNA.read": [[428, "skbio-sequence-dna-read"]], "skbio.sequence.DNA.replace": [[429, "skbio-sequence-dna-replace"]], "skbio.sequence.DNA.reverse_complement": [[430, "skbio-sequence-dna-reverse-complement"]], "skbio.sequence.DNA.to_definites": [[431, "skbio-sequence-dna-to-definites"]], "skbio.sequence.DNA.to_indices": [[432, "skbio-sequence-dna-to-indices"]], "skbio.sequence.DNA.to_regex": [[433, "skbio-sequence-dna-to-regex"]], "skbio.sequence.DNA.transcribe": [[434, "skbio-sequence-dna-transcribe"]], "skbio.sequence.DNA.translate": [[435, "skbio-sequence-dna-translate"]], "skbio.sequence.DNA.translate_six_frames": [[436, "skbio-sequence-dna-translate-six-frames"]], "skbio.sequence.DNA.write": [[437, "skbio-sequence-dna-write"]], "skbio.sequence.GeneticCode": [[438, "skbio-sequence-geneticcode"]], "skbio.sequence.GeneticCode.__eq__": [[439, "skbio-sequence-geneticcode-eq"]], "skbio.sequence.GeneticCode.__ge__": [[440, "skbio-sequence-geneticcode-ge"]], "skbio.sequence.GeneticCode.__getstate__": [[441, "skbio-sequence-geneticcode-getstate"]], "skbio.sequence.GeneticCode.__gt__": [[442, "skbio-sequence-geneticcode-gt"]], "skbio.sequence.GeneticCode.__le__": [[443, "skbio-sequence-geneticcode-le"]], "skbio.sequence.GeneticCode.__lt__": [[444, "skbio-sequence-geneticcode-lt"]], "skbio.sequence.GeneticCode.__ne__": [[445, "skbio-sequence-geneticcode-ne"]], "skbio.sequence.GeneticCode.__str__": [[446, "skbio-sequence-geneticcode-str"]], "skbio.sequence.GeneticCode.from_ncbi": [[447, "skbio-sequence-geneticcode-from-ncbi"]], "skbio.sequence.GeneticCode.translate": [[448, "skbio-sequence-geneticcode-translate"]], "skbio.sequence.GeneticCode.translate_six_frames": [[449, "skbio-sequence-geneticcode-translate-six-frames"]], "skbio.sequence.GrammaredSequence": [[450, "skbio-sequence-grammaredsequence"]], "skbio.sequence.GrammaredSequence.__bool__": [[451, "skbio-sequence-grammaredsequence-bool"]], "skbio.sequence.GrammaredSequence.__contains__": [[452, "skbio-sequence-grammaredsequence-contains"]], "skbio.sequence.GrammaredSequence.__copy__": [[453, "skbio-sequence-grammaredsequence-copy"]], "skbio.sequence.GrammaredSequence.__deepcopy__": [[454, "skbio-sequence-grammaredsequence-deepcopy"]], "skbio.sequence.GrammaredSequence.__eq__": [[455, "skbio-sequence-grammaredsequence-eq"]], "skbio.sequence.GrammaredSequence.__ge__": [[456, "skbio-sequence-grammaredsequence-ge"]], "skbio.sequence.GrammaredSequence.__getitem__": [[457, "skbio-sequence-grammaredsequence-getitem"]], "skbio.sequence.GrammaredSequence.__getstate__": [[458, "skbio-sequence-grammaredsequence-getstate"]], "skbio.sequence.GrammaredSequence.__gt__": [[459, "skbio-sequence-grammaredsequence-gt"]], "skbio.sequence.GrammaredSequence.__iter__": [[460, "skbio-sequence-grammaredsequence-iter"]], "skbio.sequence.GrammaredSequence.__le__": [[461, "skbio-sequence-grammaredsequence-le"]], "skbio.sequence.GrammaredSequence.__len__": [[462, "skbio-sequence-grammaredsequence-len"]], "skbio.sequence.GrammaredSequence.__lt__": [[463, "skbio-sequence-grammaredsequence-lt"]], "skbio.sequence.GrammaredSequence.__ne__": [[464, "skbio-sequence-grammaredsequence-ne"]], "skbio.sequence.GrammaredSequence.__reversed__": [[465, "skbio-sequence-grammaredsequence-reversed"]], "skbio.sequence.GrammaredSequence.__str__": [[466, "skbio-sequence-grammaredsequence-str"]], "skbio.sequence.GrammaredSequence.concat": [[467, "skbio-sequence-grammaredsequence-concat"]], "skbio.sequence.GrammaredSequence.count": [[468, "skbio-sequence-grammaredsequence-count"]], "skbio.sequence.GrammaredSequence.definites": [[469, "skbio-sequence-grammaredsequence-definites"]], "skbio.sequence.GrammaredSequence.degap": [[470, "skbio-sequence-grammaredsequence-degap"]], "skbio.sequence.GrammaredSequence.degenerates": [[471, "skbio-sequence-grammaredsequence-degenerates"]], "skbio.sequence.GrammaredSequence.distance": [[472, "skbio-sequence-grammaredsequence-distance"]], "skbio.sequence.GrammaredSequence.expand_degenerates": [[473, "skbio-sequence-grammaredsequence-expand-degenerates"]], "skbio.sequence.GrammaredSequence.find_motifs": [[474, "skbio-sequence-grammaredsequence-find-motifs"]], "skbio.sequence.GrammaredSequence.find_with_regex": [[475, "skbio-sequence-grammaredsequence-find-with-regex"]], "skbio.sequence.GrammaredSequence.frequencies": [[476, "skbio-sequence-grammaredsequence-frequencies"]], "skbio.sequence.GrammaredSequence.gaps": [[477, "skbio-sequence-grammaredsequence-gaps"]], "skbio.sequence.GrammaredSequence.has_definites": [[478, "skbio-sequence-grammaredsequence-has-definites"]], "skbio.sequence.GrammaredSequence.has_degenerates": [[479, "skbio-sequence-grammaredsequence-has-degenerates"]], "skbio.sequence.GrammaredSequence.has_gaps": [[480, "skbio-sequence-grammaredsequence-has-gaps"]], "skbio.sequence.GrammaredSequence.has_interval_metadata": [[481, "skbio-sequence-grammaredsequence-has-interval-metadata"]], "skbio.sequence.GrammaredSequence.has_metadata": [[482, "skbio-sequence-grammaredsequence-has-metadata"]], "skbio.sequence.GrammaredSequence.has_nondegenerates": [[483, "skbio-sequence-grammaredsequence-has-nondegenerates"]], "skbio.sequence.GrammaredSequence.has_positional_metadata": [[484, "skbio-sequence-grammaredsequence-has-positional-metadata"]], "skbio.sequence.GrammaredSequence.index": [[485, "skbio-sequence-grammaredsequence-index"]], "skbio.sequence.GrammaredSequence.iter_contiguous": [[486, "skbio-sequence-grammaredsequence-iter-contiguous"]], "skbio.sequence.GrammaredSequence.iter_kmers": [[487, "skbio-sequence-grammaredsequence-iter-kmers"]], "skbio.sequence.GrammaredSequence.kmer_frequencies": [[488, "skbio-sequence-grammaredsequence-kmer-frequencies"]], "skbio.sequence.GrammaredSequence.lowercase": [[489, "skbio-sequence-grammaredsequence-lowercase"]], "skbio.sequence.GrammaredSequence.match_frequency": [[490, "skbio-sequence-grammaredsequence-match-frequency"]], "skbio.sequence.GrammaredSequence.matches": [[491, "skbio-sequence-grammaredsequence-matches"]], "skbio.sequence.GrammaredSequence.mismatch_frequency": [[492, "skbio-sequence-grammaredsequence-mismatch-frequency"]], "skbio.sequence.GrammaredSequence.mismatches": [[493, "skbio-sequence-grammaredsequence-mismatches"]], "skbio.sequence.GrammaredSequence.nondegenerates": [[494, "skbio-sequence-grammaredsequence-nondegenerates"]], "skbio.sequence.GrammaredSequence.read": [[495, "skbio-sequence-grammaredsequence-read"]], "skbio.sequence.GrammaredSequence.replace": [[496, "skbio-sequence-grammaredsequence-replace"]], "skbio.sequence.GrammaredSequence.to_definites": [[497, "skbio-sequence-grammaredsequence-to-definites"]], "skbio.sequence.GrammaredSequence.to_indices": [[498, "skbio-sequence-grammaredsequence-to-indices"]], "skbio.sequence.GrammaredSequence.to_regex": [[499, "skbio-sequence-grammaredsequence-to-regex"]], "skbio.sequence.GrammaredSequence.write": [[500, "skbio-sequence-grammaredsequence-write"]], "skbio.sequence.Protein": [[501, "skbio-sequence-protein"]], "skbio.sequence.Protein.__bool__": [[502, "skbio-sequence-protein-bool"]], "skbio.sequence.Protein.__contains__": [[503, "skbio-sequence-protein-contains"]], "skbio.sequence.Protein.__copy__": [[504, "skbio-sequence-protein-copy"]], "skbio.sequence.Protein.__deepcopy__": [[505, "skbio-sequence-protein-deepcopy"]], "skbio.sequence.Protein.__eq__": [[506, "skbio-sequence-protein-eq"]], "skbio.sequence.Protein.__ge__": [[507, "skbio-sequence-protein-ge"]], "skbio.sequence.Protein.__getitem__": [[508, "skbio-sequence-protein-getitem"]], "skbio.sequence.Protein.__getstate__": [[509, "skbio-sequence-protein-getstate"]], "skbio.sequence.Protein.__gt__": [[510, "skbio-sequence-protein-gt"]], "skbio.sequence.Protein.__iter__": [[511, "skbio-sequence-protein-iter"]], "skbio.sequence.Protein.__le__": [[512, "skbio-sequence-protein-le"]], "skbio.sequence.Protein.__len__": [[513, "skbio-sequence-protein-len"]], "skbio.sequence.Protein.__lt__": [[514, "skbio-sequence-protein-lt"]], "skbio.sequence.Protein.__ne__": [[515, "skbio-sequence-protein-ne"]], "skbio.sequence.Protein.__reversed__": [[516, "skbio-sequence-protein-reversed"]], "skbio.sequence.Protein.__str__": [[517, "skbio-sequence-protein-str"]], "skbio.sequence.Protein.concat": [[518, "skbio-sequence-protein-concat"]], "skbio.sequence.Protein.count": [[519, "skbio-sequence-protein-count"]], "skbio.sequence.Protein.definites": [[520, "skbio-sequence-protein-definites"]], "skbio.sequence.Protein.degap": [[521, "skbio-sequence-protein-degap"]], "skbio.sequence.Protein.degenerates": [[522, "skbio-sequence-protein-degenerates"]], "skbio.sequence.Protein.distance": [[523, "skbio-sequence-protein-distance"]], "skbio.sequence.Protein.expand_degenerates": [[524, "skbio-sequence-protein-expand-degenerates"]], "skbio.sequence.Protein.find_motifs": [[525, "skbio-sequence-protein-find-motifs"]], "skbio.sequence.Protein.find_with_regex": [[526, "skbio-sequence-protein-find-with-regex"]], "skbio.sequence.Protein.frequencies": [[527, "skbio-sequence-protein-frequencies"]], "skbio.sequence.Protein.gaps": [[528, "skbio-sequence-protein-gaps"]], "skbio.sequence.Protein.has_definites": [[529, "skbio-sequence-protein-has-definites"]], "skbio.sequence.Protein.has_degenerates": [[530, "skbio-sequence-protein-has-degenerates"]], "skbio.sequence.Protein.has_gaps": [[531, "skbio-sequence-protein-has-gaps"]], "skbio.sequence.Protein.has_interval_metadata": [[532, "skbio-sequence-protein-has-interval-metadata"]], "skbio.sequence.Protein.has_metadata": [[533, "skbio-sequence-protein-has-metadata"]], "skbio.sequence.Protein.has_nondegenerates": [[534, "skbio-sequence-protein-has-nondegenerates"]], "skbio.sequence.Protein.has_positional_metadata": [[535, "skbio-sequence-protein-has-positional-metadata"]], "skbio.sequence.Protein.has_stops": [[536, "skbio-sequence-protein-has-stops"]], "skbio.sequence.Protein.index": [[537, "skbio-sequence-protein-index"]], "skbio.sequence.Protein.iter_contiguous": [[538, "skbio-sequence-protein-iter-contiguous"]], "skbio.sequence.Protein.iter_kmers": [[539, "skbio-sequence-protein-iter-kmers"]], "skbio.sequence.Protein.kmer_frequencies": [[540, "skbio-sequence-protein-kmer-frequencies"]], "skbio.sequence.Protein.lowercase": [[541, "skbio-sequence-protein-lowercase"]], "skbio.sequence.Protein.match_frequency": [[542, "skbio-sequence-protein-match-frequency"]], "skbio.sequence.Protein.matches": [[543, "skbio-sequence-protein-matches"]], "skbio.sequence.Protein.mismatch_frequency": [[544, "skbio-sequence-protein-mismatch-frequency"]], "skbio.sequence.Protein.mismatches": [[545, "skbio-sequence-protein-mismatches"]], "skbio.sequence.Protein.nondegenerates": [[546, "skbio-sequence-protein-nondegenerates"]], "skbio.sequence.Protein.read": [[547, "skbio-sequence-protein-read"]], "skbio.sequence.Protein.replace": [[548, "skbio-sequence-protein-replace"]], "skbio.sequence.Protein.stops": [[549, "skbio-sequence-protein-stops"]], "skbio.sequence.Protein.to_definites": [[550, "skbio-sequence-protein-to-definites"]], "skbio.sequence.Protein.to_indices": [[551, "skbio-sequence-protein-to-indices"]], "skbio.sequence.Protein.to_regex": [[552, "skbio-sequence-protein-to-regex"]], "skbio.sequence.Protein.write": [[553, "skbio-sequence-protein-write"]], "skbio.sequence.RNA": [[554, "skbio-sequence-rna"]], "skbio.sequence.RNA.__bool__": [[555, "skbio-sequence-rna-bool"]], "skbio.sequence.RNA.__contains__": [[556, "skbio-sequence-rna-contains"]], "skbio.sequence.RNA.__copy__": [[557, "skbio-sequence-rna-copy"]], "skbio.sequence.RNA.__deepcopy__": [[558, "skbio-sequence-rna-deepcopy"]], "skbio.sequence.RNA.__eq__": [[559, "skbio-sequence-rna-eq"]], "skbio.sequence.RNA.__ge__": [[560, "skbio-sequence-rna-ge"]], "skbio.sequence.RNA.__getitem__": [[561, "skbio-sequence-rna-getitem"]], "skbio.sequence.RNA.__getstate__": [[562, "skbio-sequence-rna-getstate"]], "skbio.sequence.RNA.__gt__": [[563, "skbio-sequence-rna-gt"]], "skbio.sequence.RNA.__iter__": [[564, "skbio-sequence-rna-iter"]], "skbio.sequence.RNA.__le__": [[565, "skbio-sequence-rna-le"]], "skbio.sequence.RNA.__len__": [[566, "skbio-sequence-rna-len"]], "skbio.sequence.RNA.__lt__": [[567, "skbio-sequence-rna-lt"]], "skbio.sequence.RNA.__ne__": [[568, "skbio-sequence-rna-ne"]], "skbio.sequence.RNA.__reversed__": [[569, "skbio-sequence-rna-reversed"]], "skbio.sequence.RNA.__str__": [[570, "skbio-sequence-rna-str"]], "skbio.sequence.RNA.complement": [[571, "skbio-sequence-rna-complement"]], "skbio.sequence.RNA.concat": [[572, "skbio-sequence-rna-concat"]], "skbio.sequence.RNA.count": [[573, "skbio-sequence-rna-count"]], "skbio.sequence.RNA.definites": [[574, "skbio-sequence-rna-definites"]], "skbio.sequence.RNA.degap": [[575, "skbio-sequence-rna-degap"]], "skbio.sequence.RNA.degenerates": [[576, "skbio-sequence-rna-degenerates"]], "skbio.sequence.RNA.distance": [[577, "skbio-sequence-rna-distance"]], "skbio.sequence.RNA.expand_degenerates": [[578, "skbio-sequence-rna-expand-degenerates"]], "skbio.sequence.RNA.find_motifs": [[579, "skbio-sequence-rna-find-motifs"]], "skbio.sequence.RNA.find_with_regex": [[580, "skbio-sequence-rna-find-with-regex"]], "skbio.sequence.RNA.frequencies": [[581, "skbio-sequence-rna-frequencies"]], "skbio.sequence.RNA.gaps": [[582, "skbio-sequence-rna-gaps"]], "skbio.sequence.RNA.gc_content": [[583, "skbio-sequence-rna-gc-content"]], "skbio.sequence.RNA.gc_frequency": [[584, "skbio-sequence-rna-gc-frequency"]], "skbio.sequence.RNA.has_definites": [[585, "skbio-sequence-rna-has-definites"]], "skbio.sequence.RNA.has_degenerates": [[586, "skbio-sequence-rna-has-degenerates"]], "skbio.sequence.RNA.has_gaps": [[587, "skbio-sequence-rna-has-gaps"]], "skbio.sequence.RNA.has_interval_metadata": [[588, "skbio-sequence-rna-has-interval-metadata"]], "skbio.sequence.RNA.has_metadata": [[589, "skbio-sequence-rna-has-metadata"]], "skbio.sequence.RNA.has_nondegenerates": [[590, "skbio-sequence-rna-has-nondegenerates"]], "skbio.sequence.RNA.has_positional_metadata": [[591, "skbio-sequence-rna-has-positional-metadata"]], "skbio.sequence.RNA.index": [[592, "skbio-sequence-rna-index"]], "skbio.sequence.RNA.is_reverse_complement": [[593, "skbio-sequence-rna-is-reverse-complement"]], "skbio.sequence.RNA.iter_contiguous": [[594, "skbio-sequence-rna-iter-contiguous"]], "skbio.sequence.RNA.iter_kmers": [[595, "skbio-sequence-rna-iter-kmers"]], "skbio.sequence.RNA.kmer_frequencies": [[596, "skbio-sequence-rna-kmer-frequencies"]], "skbio.sequence.RNA.lowercase": [[597, "skbio-sequence-rna-lowercase"]], "skbio.sequence.RNA.match_frequency": [[598, "skbio-sequence-rna-match-frequency"]], "skbio.sequence.RNA.matches": [[599, "skbio-sequence-rna-matches"]], "skbio.sequence.RNA.mismatch_frequency": [[600, "skbio-sequence-rna-mismatch-frequency"]], "skbio.sequence.RNA.mismatches": [[601, "skbio-sequence-rna-mismatches"]], "skbio.sequence.RNA.nondegenerates": [[602, "skbio-sequence-rna-nondegenerates"]], "skbio.sequence.RNA.read": [[603, "skbio-sequence-rna-read"]], "skbio.sequence.RNA.replace": [[604, "skbio-sequence-rna-replace"]], "skbio.sequence.RNA.reverse_complement": [[605, "skbio-sequence-rna-reverse-complement"]], "skbio.sequence.RNA.reverse_transcribe": [[606, "skbio-sequence-rna-reverse-transcribe"]], "skbio.sequence.RNA.to_definites": [[607, "skbio-sequence-rna-to-definites"]], "skbio.sequence.RNA.to_indices": [[608, "skbio-sequence-rna-to-indices"]], "skbio.sequence.RNA.to_regex": [[609, "skbio-sequence-rna-to-regex"]], "skbio.sequence.RNA.translate": [[610, "skbio-sequence-rna-translate"]], "skbio.sequence.RNA.translate_six_frames": [[611, "skbio-sequence-rna-translate-six-frames"]], "skbio.sequence.RNA.write": [[612, "skbio-sequence-rna-write"]], "skbio.sequence.Sequence": [[613, "skbio-sequence-sequence"]], "skbio.sequence.Sequence.__bool__": [[614, "skbio-sequence-sequence-bool"]], "skbio.sequence.Sequence.__contains__": [[615, "skbio-sequence-sequence-contains"]], "skbio.sequence.Sequence.__copy__": [[616, "skbio-sequence-sequence-copy"]], "skbio.sequence.Sequence.__deepcopy__": [[617, "skbio-sequence-sequence-deepcopy"]], "skbio.sequence.Sequence.__eq__": [[618, "skbio-sequence-sequence-eq"]], "skbio.sequence.Sequence.__ge__": [[619, "skbio-sequence-sequence-ge"]], "skbio.sequence.Sequence.__getitem__": [[620, "skbio-sequence-sequence-getitem"]], "skbio.sequence.Sequence.__getstate__": [[621, "skbio-sequence-sequence-getstate"]], "skbio.sequence.Sequence.__gt__": [[622, "skbio-sequence-sequence-gt"]], "skbio.sequence.Sequence.__iter__": [[623, "skbio-sequence-sequence-iter"]], "skbio.sequence.Sequence.__le__": [[624, "skbio-sequence-sequence-le"]], "skbio.sequence.Sequence.__len__": [[625, "skbio-sequence-sequence-len"]], "skbio.sequence.Sequence.__lt__": [[626, "skbio-sequence-sequence-lt"]], "skbio.sequence.Sequence.__ne__": [[627, "skbio-sequence-sequence-ne"]], "skbio.sequence.Sequence.__reversed__": [[628, "skbio-sequence-sequence-reversed"]], "skbio.sequence.Sequence.__str__": [[629, "skbio-sequence-sequence-str"]], "skbio.sequence.Sequence.concat": [[630, "skbio-sequence-sequence-concat"]], "skbio.sequence.Sequence.count": [[631, "skbio-sequence-sequence-count"]], "skbio.sequence.Sequence.distance": [[632, "skbio-sequence-sequence-distance"]], "skbio.sequence.Sequence.find_with_regex": [[633, "skbio-sequence-sequence-find-with-regex"]], "skbio.sequence.Sequence.frequencies": [[634, "skbio-sequence-sequence-frequencies"]], "skbio.sequence.Sequence.has_interval_metadata": [[635, "skbio-sequence-sequence-has-interval-metadata"]], "skbio.sequence.Sequence.has_metadata": [[636, "skbio-sequence-sequence-has-metadata"]], "skbio.sequence.Sequence.has_positional_metadata": [[637, "skbio-sequence-sequence-has-positional-metadata"]], "skbio.sequence.Sequence.index": [[638, "skbio-sequence-sequence-index"]], "skbio.sequence.Sequence.iter_contiguous": [[639, "skbio-sequence-sequence-iter-contiguous"]], "skbio.sequence.Sequence.iter_kmers": [[640, "skbio-sequence-sequence-iter-kmers"]], "skbio.sequence.Sequence.kmer_frequencies": [[641, "skbio-sequence-sequence-kmer-frequencies"]], "skbio.sequence.Sequence.lowercase": [[642, "skbio-sequence-sequence-lowercase"]], "skbio.sequence.Sequence.match_frequency": [[643, "skbio-sequence-sequence-match-frequency"]], "skbio.sequence.Sequence.matches": [[644, "skbio-sequence-sequence-matches"]], "skbio.sequence.Sequence.mismatch_frequency": [[645, "skbio-sequence-sequence-mismatch-frequency"]], "skbio.sequence.Sequence.mismatches": [[646, "skbio-sequence-sequence-mismatches"]], "skbio.sequence.Sequence.read": [[647, "skbio-sequence-sequence-read"]], "skbio.sequence.Sequence.replace": [[648, "skbio-sequence-sequence-replace"]], "skbio.sequence.Sequence.to_indices": [[649, "skbio-sequence-sequence-to-indices"]], "skbio.sequence.Sequence.write": [[650, "skbio-sequence-sequence-write"]], "skbio.sequence.SubstitutionMatrix": [[651, "skbio-sequence-substitutionmatrix"]], "skbio.sequence.SubstitutionMatrix.__contains__": [[652, "skbio-sequence-substitutionmatrix-contains"]], "skbio.sequence.SubstitutionMatrix.__eq__": [[653, "skbio-sequence-substitutionmatrix-eq"]], "skbio.sequence.SubstitutionMatrix.__ge__": [[654, "skbio-sequence-substitutionmatrix-ge"]], "skbio.sequence.SubstitutionMatrix.__getitem__": [[655, "skbio-sequence-substitutionmatrix-getitem"]], "skbio.sequence.SubstitutionMatrix.__getstate__": [[656, "skbio-sequence-substitutionmatrix-getstate"]], "skbio.sequence.SubstitutionMatrix.__gt__": [[657, "skbio-sequence-substitutionmatrix-gt"]], "skbio.sequence.SubstitutionMatrix.__le__": [[658, "skbio-sequence-substitutionmatrix-le"]], "skbio.sequence.SubstitutionMatrix.__lt__": [[659, "skbio-sequence-substitutionmatrix-lt"]], "skbio.sequence.SubstitutionMatrix.__ne__": [[660, "skbio-sequence-substitutionmatrix-ne"]], "skbio.sequence.SubstitutionMatrix.__str__": [[661, "skbio-sequence-substitutionmatrix-str"]], "skbio.sequence.SubstitutionMatrix.between": [[662, "skbio-sequence-substitutionmatrix-between"]], "skbio.sequence.SubstitutionMatrix.by_name": [[663, "skbio-sequence-substitutionmatrix-by-name"]], "skbio.sequence.SubstitutionMatrix.copy": [[664, "skbio-sequence-substitutionmatrix-copy"]], "skbio.sequence.SubstitutionMatrix.filter": [[665, "skbio-sequence-substitutionmatrix-filter"]], "skbio.sequence.SubstitutionMatrix.from_dict": [[666, "skbio-sequence-substitutionmatrix-from-dict"]], "skbio.sequence.SubstitutionMatrix.from_iterable": [[667, "skbio-sequence-substitutionmatrix-from-iterable"]], "skbio.sequence.SubstitutionMatrix.get_names": [[668, "skbio-sequence-substitutionmatrix-get-names"]], "skbio.sequence.SubstitutionMatrix.identity": [[669, "skbio-sequence-substitutionmatrix-identity"]], "skbio.sequence.SubstitutionMatrix.index": [[670, "skbio-sequence-substitutionmatrix-index"]], "skbio.sequence.SubstitutionMatrix.plot": [[671, "skbio-sequence-substitutionmatrix-plot"]], "skbio.sequence.SubstitutionMatrix.read": [[672, "skbio-sequence-substitutionmatrix-read"]], "skbio.sequence.SubstitutionMatrix.redundant_form": [[673, "skbio-sequence-substitutionmatrix-redundant-form"]], "skbio.sequence.SubstitutionMatrix.to_data_frame": [[674, "skbio-sequence-substitutionmatrix-to-data-frame"]], "skbio.sequence.SubstitutionMatrix.to_dict": [[675, "skbio-sequence-substitutionmatrix-to-dict"]], "skbio.sequence.SubstitutionMatrix.transpose": [[676, "skbio-sequence-substitutionmatrix-transpose"]], "skbio.sequence.SubstitutionMatrix.within": [[677, "skbio-sequence-substitutionmatrix-within"]], "skbio.sequence.SubstitutionMatrix.write": [[678, "skbio-sequence-substitutionmatrix-write"]], "skbio.sequence.distance.hamming": [[680, "skbio-sequence-distance-hamming"]], "skbio.sequence.distance.kmer_distance": [[681, "skbio-sequence-distance-kmer-distance"]], "skbio.stats.composition.alr": [[683, "skbio-stats-composition-alr"]], "skbio.stats.composition.alr_inv": [[684, "skbio-stats-composition-alr-inv"]], "skbio.stats.composition.ancom": [[685, "skbio-stats-composition-ancom"]], "skbio.stats.composition.centralize": [[686, "skbio-stats-composition-centralize"]], "skbio.stats.composition.closure": [[687, "skbio-stats-composition-closure"]], "skbio.stats.composition.clr": [[688, "skbio-stats-composition-clr"]], "skbio.stats.composition.clr_inv": [[689, "skbio-stats-composition-clr-inv"]], "skbio.stats.composition.dirmult_ttest": [[690, "skbio-stats-composition-dirmult-ttest"]], "skbio.stats.composition.ilr": [[691, "skbio-stats-composition-ilr"]], "skbio.stats.composition.ilr_inv": [[692, "skbio-stats-composition-ilr-inv"]], "skbio.stats.composition.inner": [[693, "skbio-stats-composition-inner"]], "skbio.stats.composition.multi_replace": [[694, "skbio-stats-composition-multi-replace"]], "skbio.stats.composition.multiplicative_replacement": [[695, "skbio-stats-composition-multiplicative-replacement"]], "skbio.stats.composition.pairwise_vlr": [[696, "skbio-stats-composition-pairwise-vlr"]], "skbio.stats.composition.perturb": [[697, "skbio-stats-composition-perturb"]], "skbio.stats.composition.perturb_inv": [[698, "skbio-stats-composition-perturb-inv"]], "skbio.stats.composition.power": [[699, "skbio-stats-composition-power"]], "skbio.stats.composition.sbp_basis": [[700, "skbio-stats-composition-sbp-basis"]], "skbio.stats.composition.tree_basis": [[701, "skbio-stats-composition-tree-basis"]], "skbio.stats.composition.vlr": [[702, "skbio-stats-composition-vlr"]], "skbio.stats.distance.DissimilarityMatrix": [[704, "skbio-stats-distance-dissimilaritymatrix"]], "skbio.stats.distance.DissimilarityMatrix.__contains__": [[705, "skbio-stats-distance-dissimilaritymatrix-contains"]], "skbio.stats.distance.DissimilarityMatrix.__eq__": [[706, "skbio-stats-distance-dissimilaritymatrix-eq"]], "skbio.stats.distance.DissimilarityMatrix.__ge__": [[707, "skbio-stats-distance-dissimilaritymatrix-ge"]], "skbio.stats.distance.DissimilarityMatrix.__getitem__": [[708, "skbio-stats-distance-dissimilaritymatrix-getitem"]], "skbio.stats.distance.DissimilarityMatrix.__getstate__": [[709, "skbio-stats-distance-dissimilaritymatrix-getstate"]], "skbio.stats.distance.DissimilarityMatrix.__gt__": [[710, "skbio-stats-distance-dissimilaritymatrix-gt"]], "skbio.stats.distance.DissimilarityMatrix.__le__": [[711, "skbio-stats-distance-dissimilaritymatrix-le"]], "skbio.stats.distance.DissimilarityMatrix.__lt__": [[712, "skbio-stats-distance-dissimilaritymatrix-lt"]], "skbio.stats.distance.DissimilarityMatrix.__ne__": [[713, "skbio-stats-distance-dissimilaritymatrix-ne"]], "skbio.stats.distance.DissimilarityMatrix.__str__": [[714, "skbio-stats-distance-dissimilaritymatrix-str"]], "skbio.stats.distance.DissimilarityMatrix.between": [[715, "skbio-stats-distance-dissimilaritymatrix-between"]], "skbio.stats.distance.DissimilarityMatrix.copy": [[716, "skbio-stats-distance-dissimilaritymatrix-copy"]], "skbio.stats.distance.DissimilarityMatrix.filter": [[717, "skbio-stats-distance-dissimilaritymatrix-filter"]], "skbio.stats.distance.DissimilarityMatrix.from_iterable": [[718, "skbio-stats-distance-dissimilaritymatrix-from-iterable"]], "skbio.stats.distance.DissimilarityMatrix.index": [[719, "skbio-stats-distance-dissimilaritymatrix-index"]], "skbio.stats.distance.DissimilarityMatrix.plot": [[720, "skbio-stats-distance-dissimilaritymatrix-plot"]], "skbio.stats.distance.DissimilarityMatrix.read": [[721, "skbio-stats-distance-dissimilaritymatrix-read"]], "skbio.stats.distance.DissimilarityMatrix.redundant_form": [[722, "skbio-stats-distance-dissimilaritymatrix-redundant-form"]], "skbio.stats.distance.DissimilarityMatrix.to_data_frame": [[723, "skbio-stats-distance-dissimilaritymatrix-to-data-frame"]], "skbio.stats.distance.DissimilarityMatrix.transpose": [[724, "skbio-stats-distance-dissimilaritymatrix-transpose"]], "skbio.stats.distance.DissimilarityMatrix.within": [[725, "skbio-stats-distance-dissimilaritymatrix-within"]], "skbio.stats.distance.DissimilarityMatrix.write": [[726, "skbio-stats-distance-dissimilaritymatrix-write"]], "skbio.stats.distance.DistanceMatrix": [[727, "skbio-stats-distance-distancematrix"]], "skbio.stats.distance.DistanceMatrix.__contains__": [[728, "skbio-stats-distance-distancematrix-contains"]], "skbio.stats.distance.DistanceMatrix.__eq__": [[729, "skbio-stats-distance-distancematrix-eq"]], "skbio.stats.distance.DistanceMatrix.__ge__": [[730, "skbio-stats-distance-distancematrix-ge"]], "skbio.stats.distance.DistanceMatrix.__getitem__": [[731, "skbio-stats-distance-distancematrix-getitem"]], "skbio.stats.distance.DistanceMatrix.__getstate__": [[732, "skbio-stats-distance-distancematrix-getstate"]], "skbio.stats.distance.DistanceMatrix.__gt__": [[733, "skbio-stats-distance-distancematrix-gt"]], "skbio.stats.distance.DistanceMatrix.__le__": [[734, "skbio-stats-distance-distancematrix-le"]], "skbio.stats.distance.DistanceMatrix.__lt__": [[735, "skbio-stats-distance-distancematrix-lt"]], "skbio.stats.distance.DistanceMatrix.__ne__": [[736, "skbio-stats-distance-distancematrix-ne"]], "skbio.stats.distance.DistanceMatrix.__str__": [[737, "skbio-stats-distance-distancematrix-str"]], "skbio.stats.distance.DistanceMatrix.between": [[738, "skbio-stats-distance-distancematrix-between"]], "skbio.stats.distance.DistanceMatrix.condensed_form": [[739, "skbio-stats-distance-distancematrix-condensed-form"]], "skbio.stats.distance.DistanceMatrix.copy": [[740, "skbio-stats-distance-distancematrix-copy"]], "skbio.stats.distance.DistanceMatrix.filter": [[741, "skbio-stats-distance-distancematrix-filter"]], "skbio.stats.distance.DistanceMatrix.from_iterable": [[742, "skbio-stats-distance-distancematrix-from-iterable"]], "skbio.stats.distance.DistanceMatrix.index": [[743, "skbio-stats-distance-distancematrix-index"]], "skbio.stats.distance.DistanceMatrix.permute": [[744, "skbio-stats-distance-distancematrix-permute"]], "skbio.stats.distance.DistanceMatrix.plot": [[745, "skbio-stats-distance-distancematrix-plot"]], "skbio.stats.distance.DistanceMatrix.read": [[746, "skbio-stats-distance-distancematrix-read"]], "skbio.stats.distance.DistanceMatrix.redundant_form": [[747, "skbio-stats-distance-distancematrix-redundant-form"]], "skbio.stats.distance.DistanceMatrix.to_data_frame": [[748, "skbio-stats-distance-distancematrix-to-data-frame"]], "skbio.stats.distance.DistanceMatrix.to_series": [[749, "skbio-stats-distance-distancematrix-to-series"]], "skbio.stats.distance.DistanceMatrix.transpose": [[750, "skbio-stats-distance-distancematrix-transpose"]], "skbio.stats.distance.DistanceMatrix.within": [[751, "skbio-stats-distance-distancematrix-within"]], "skbio.stats.distance.DistanceMatrix.write": [[752, "skbio-stats-distance-distancematrix-write"]], "skbio.stats.distance.anosim": [[753, "skbio-stats-distance-anosim"]], "skbio.stats.distance.bioenv": [[754, "skbio-stats-distance-bioenv"]], "skbio.stats.distance.mantel": [[755, "skbio-stats-distance-mantel"]], "skbio.stats.distance.permanova": [[756, "skbio-stats-distance-permanova"]], "skbio.stats.distance.permdisp": [[757, "skbio-stats-distance-permdisp"]], "skbio.stats.distance.pwmantel": [[758, "skbio-stats-distance-pwmantel"]], "skbio.stats.distance.randdm": [[759, "skbio-stats-distance-randdm"]], "skbio.stats.evolve.hommola_cospeciation": [[761, "skbio-stats-evolve-hommola-cospeciation"]], "skbio.stats.gradient.AverageGradientANOVA": [[763, "skbio-stats-gradient-averagegradientanova"]], "skbio.stats.gradient.AverageGradientANOVA.__eq__": [[764, "skbio-stats-gradient-averagegradientanova-eq"]], "skbio.stats.gradient.AverageGradientANOVA.__ge__": [[765, "skbio-stats-gradient-averagegradientanova-ge"]], "skbio.stats.gradient.AverageGradientANOVA.__getstate__": [[766, "skbio-stats-gradient-averagegradientanova-getstate"]], "skbio.stats.gradient.AverageGradientANOVA.__gt__": [[767, "skbio-stats-gradient-averagegradientanova-gt"]], "skbio.stats.gradient.AverageGradientANOVA.__hash__": [[768, "skbio-stats-gradient-averagegradientanova-hash"]], "skbio.stats.gradient.AverageGradientANOVA.__le__": [[769, "skbio-stats-gradient-averagegradientanova-le"]], "skbio.stats.gradient.AverageGradientANOVA.__lt__": [[770, "skbio-stats-gradient-averagegradientanova-lt"]], "skbio.stats.gradient.AverageGradientANOVA.__ne__": [[771, "skbio-stats-gradient-averagegradientanova-ne"]], "skbio.stats.gradient.AverageGradientANOVA.__str__": [[772, "skbio-stats-gradient-averagegradientanova-str"]], "skbio.stats.gradient.AverageGradientANOVA.get_trajectories": [[773, "skbio-stats-gradient-averagegradientanova-get-trajectories"]], "skbio.stats.gradient.CategoryResults": [[774, "skbio-stats-gradient-categoryresults"]], "skbio.stats.gradient.CategoryResults.__eq__": [[775, "skbio-stats-gradient-categoryresults-eq"]], "skbio.stats.gradient.CategoryResults.__ge__": [[776, "skbio-stats-gradient-categoryresults-ge"]], "skbio.stats.gradient.CategoryResults.__getstate__": [[777, "skbio-stats-gradient-categoryresults-getstate"]], "skbio.stats.gradient.CategoryResults.__gt__": [[778, "skbio-stats-gradient-categoryresults-gt"]], "skbio.stats.gradient.CategoryResults.__hash__": [[779, "skbio-stats-gradient-categoryresults-hash"]], "skbio.stats.gradient.CategoryResults.__le__": [[780, "skbio-stats-gradient-categoryresults-le"]], "skbio.stats.gradient.CategoryResults.__lt__": [[781, "skbio-stats-gradient-categoryresults-lt"]], "skbio.stats.gradient.CategoryResults.__ne__": [[782, "skbio-stats-gradient-categoryresults-ne"]], "skbio.stats.gradient.CategoryResults.__str__": [[783, "skbio-stats-gradient-categoryresults-str"]], "skbio.stats.gradient.CategoryResults.to_files": [[784, "skbio-stats-gradient-categoryresults-to-files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[785, "skbio-stats-gradient-firstdifferencegradientanova"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__": [[786, "skbio-stats-gradient-firstdifferencegradientanova-eq"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__": [[787, "skbio-stats-gradient-firstdifferencegradientanova-ge"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__": [[788, "skbio-stats-gradient-firstdifferencegradientanova-getstate"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__": [[789, "skbio-stats-gradient-firstdifferencegradientanova-gt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__": [[790, "skbio-stats-gradient-firstdifferencegradientanova-hash"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__": [[791, "skbio-stats-gradient-firstdifferencegradientanova-le"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__": [[792, "skbio-stats-gradient-firstdifferencegradientanova-lt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__": [[793, "skbio-stats-gradient-firstdifferencegradientanova-ne"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__": [[794, "skbio-stats-gradient-firstdifferencegradientanova-str"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories": [[795, "skbio-stats-gradient-firstdifferencegradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVA": [[796, "skbio-stats-gradient-gradientanova"]], "skbio.stats.gradient.GradientANOVA.__eq__": [[797, "skbio-stats-gradient-gradientanova-eq"]], "skbio.stats.gradient.GradientANOVA.__ge__": [[798, "skbio-stats-gradient-gradientanova-ge"]], "skbio.stats.gradient.GradientANOVA.__getstate__": [[799, "skbio-stats-gradient-gradientanova-getstate"]], "skbio.stats.gradient.GradientANOVA.__gt__": [[800, "skbio-stats-gradient-gradientanova-gt"]], "skbio.stats.gradient.GradientANOVA.__hash__": [[801, "skbio-stats-gradient-gradientanova-hash"]], "skbio.stats.gradient.GradientANOVA.__le__": [[802, "skbio-stats-gradient-gradientanova-le"]], "skbio.stats.gradient.GradientANOVA.__lt__": [[803, "skbio-stats-gradient-gradientanova-lt"]], "skbio.stats.gradient.GradientANOVA.__ne__": [[804, "skbio-stats-gradient-gradientanova-ne"]], "skbio.stats.gradient.GradientANOVA.__str__": [[805, "skbio-stats-gradient-gradientanova-str"]], "skbio.stats.gradient.GradientANOVA.get_trajectories": [[806, "skbio-stats-gradient-gradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[807, "skbio-stats-gradient-gradientanovaresults"]], "skbio.stats.gradient.GradientANOVAResults.__eq__": [[808, "skbio-stats-gradient-gradientanovaresults-eq"]], "skbio.stats.gradient.GradientANOVAResults.__ge__": [[809, "skbio-stats-gradient-gradientanovaresults-ge"]], "skbio.stats.gradient.GradientANOVAResults.__getstate__": [[810, "skbio-stats-gradient-gradientanovaresults-getstate"]], "skbio.stats.gradient.GradientANOVAResults.__gt__": [[811, "skbio-stats-gradient-gradientanovaresults-gt"]], "skbio.stats.gradient.GradientANOVAResults.__hash__": [[812, "skbio-stats-gradient-gradientanovaresults-hash"]], "skbio.stats.gradient.GradientANOVAResults.__le__": [[813, "skbio-stats-gradient-gradientanovaresults-le"]], "skbio.stats.gradient.GradientANOVAResults.__lt__": [[814, "skbio-stats-gradient-gradientanovaresults-lt"]], "skbio.stats.gradient.GradientANOVAResults.__ne__": [[815, "skbio-stats-gradient-gradientanovaresults-ne"]], "skbio.stats.gradient.GradientANOVAResults.__str__": [[816, "skbio-stats-gradient-gradientanovaresults-str"]], "skbio.stats.gradient.GradientANOVAResults.to_files": [[817, "skbio-stats-gradient-gradientanovaresults-to-files"]], "skbio.stats.gradient.GroupResults": [[818, "skbio-stats-gradient-groupresults"]], "skbio.stats.gradient.GroupResults.__eq__": [[819, "skbio-stats-gradient-groupresults-eq"]], "skbio.stats.gradient.GroupResults.__ge__": [[820, "skbio-stats-gradient-groupresults-ge"]], "skbio.stats.gradient.GroupResults.__getstate__": [[821, "skbio-stats-gradient-groupresults-getstate"]], "skbio.stats.gradient.GroupResults.__gt__": [[822, "skbio-stats-gradient-groupresults-gt"]], "skbio.stats.gradient.GroupResults.__hash__": [[823, "skbio-stats-gradient-groupresults-hash"]], "skbio.stats.gradient.GroupResults.__le__": [[824, "skbio-stats-gradient-groupresults-le"]], "skbio.stats.gradient.GroupResults.__lt__": [[825, "skbio-stats-gradient-groupresults-lt"]], "skbio.stats.gradient.GroupResults.__ne__": [[826, "skbio-stats-gradient-groupresults-ne"]], "skbio.stats.gradient.GroupResults.__str__": [[827, "skbio-stats-gradient-groupresults-str"]], "skbio.stats.gradient.GroupResults.to_files": [[828, "skbio-stats-gradient-groupresults-to-files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[829, "skbio-stats-gradient-trajectorygradientanova"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__": [[830, "skbio-stats-gradient-trajectorygradientanova-eq"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__": [[831, "skbio-stats-gradient-trajectorygradientanova-ge"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__": [[832, "skbio-stats-gradient-trajectorygradientanova-getstate"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__": [[833, "skbio-stats-gradient-trajectorygradientanova-gt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__": [[834, "skbio-stats-gradient-trajectorygradientanova-hash"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__le__": [[835, "skbio-stats-gradient-trajectorygradientanova-le"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__": [[836, "skbio-stats-gradient-trajectorygradientanova-lt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__": [[837, "skbio-stats-gradient-trajectorygradientanova-ne"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__str__": [[838, "skbio-stats-gradient-trajectorygradientanova-str"]], "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories": [[839, "skbio-stats-gradient-trajectorygradientanova-get-trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[840, "skbio-stats-gradient-windowdifferencegradientanova"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__": [[841, "skbio-stats-gradient-windowdifferencegradientanova-eq"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__": [[842, "skbio-stats-gradient-windowdifferencegradientanova-ge"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__": [[843, "skbio-stats-gradient-windowdifferencegradientanova-getstate"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__": [[844, "skbio-stats-gradient-windowdifferencegradientanova-gt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__": [[845, "skbio-stats-gradient-windowdifferencegradientanova-hash"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__": [[846, "skbio-stats-gradient-windowdifferencegradientanova-le"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__": [[847, "skbio-stats-gradient-windowdifferencegradientanova-lt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__": [[848, "skbio-stats-gradient-windowdifferencegradientanova-ne"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__": [[849, "skbio-stats-gradient-windowdifferencegradientanova-str"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories": [[850, "skbio-stats-gradient-windowdifferencegradientanova-get-trajectories"]], "skbio.stats.isubsample": [[851, "skbio-stats-isubsample"]], "skbio.stats.ordination.OrdinationResults": [[853, "skbio-stats-ordination-ordinationresults"]], "skbio.stats.ordination.OrdinationResults.__eq__": [[854, "skbio-stats-ordination-ordinationresults-eq"]], "skbio.stats.ordination.OrdinationResults.__ge__": [[855, "skbio-stats-ordination-ordinationresults-ge"]], "skbio.stats.ordination.OrdinationResults.__getstate__": [[856, "skbio-stats-ordination-ordinationresults-getstate"]], "skbio.stats.ordination.OrdinationResults.__gt__": [[857, "skbio-stats-ordination-ordinationresults-gt"]], "skbio.stats.ordination.OrdinationResults.__hash__": [[858, "skbio-stats-ordination-ordinationresults-hash"]], "skbio.stats.ordination.OrdinationResults.__le__": [[859, "skbio-stats-ordination-ordinationresults-le"]], "skbio.stats.ordination.OrdinationResults.__lt__": [[860, "skbio-stats-ordination-ordinationresults-lt"]], "skbio.stats.ordination.OrdinationResults.__ne__": [[861, "skbio-stats-ordination-ordinationresults-ne"]], "skbio.stats.ordination.OrdinationResults.__str__": [[862, "skbio-stats-ordination-ordinationresults-str"]], "skbio.stats.ordination.OrdinationResults.plot": [[863, "skbio-stats-ordination-ordinationresults-plot"]], "skbio.stats.ordination.OrdinationResults.read": [[864, "skbio-stats-ordination-ordinationresults-read"]], "skbio.stats.ordination.OrdinationResults.write": [[865, "skbio-stats-ordination-ordinationresults-write"]], "skbio.stats.ordination.ca": [[866, "skbio-stats-ordination-ca"]], "skbio.stats.ordination.cca": [[867, "skbio-stats-ordination-cca"]], "skbio.stats.ordination.corr": [[868, "skbio-stats-ordination-corr"]], "skbio.stats.ordination.e_matrix": [[869, "skbio-stats-ordination-e-matrix"]], "skbio.stats.ordination.f_matrix": [[870, "skbio-stats-ordination-f-matrix"]], "skbio.stats.ordination.mean_and_std": [[871, "skbio-stats-ordination-mean-and-std"]], "skbio.stats.ordination.pcoa": [[872, "skbio-stats-ordination-pcoa"]], "skbio.stats.ordination.pcoa_biplot": [[873, "skbio-stats-ordination-pcoa-biplot"]], "skbio.stats.ordination.rda": [[874, "skbio-stats-ordination-rda"]], "skbio.stats.ordination.scale": [[875, "skbio-stats-ordination-scale"]], "skbio.stats.ordination.svd_rank": [[876, "skbio-stats-ordination-svd-rank"]], "skbio.stats.power.confidence_bound": [[878, "skbio-stats-power-confidence-bound"]], "skbio.stats.power.paired_subsamples": [[879, "skbio-stats-power-paired-subsamples"]], "skbio.stats.power.subsample_paired_power": [[880, "skbio-stats-power-subsample-paired-power"]], "skbio.stats.power.subsample_power": [[881, "skbio-stats-power-subsample-power"]], "skbio.stats.subsample_counts": [[882, "skbio-stats-subsample-counts"]], "skbio.table.Table": [[883, "skbio-table-table"]], "skbio.table.Table.__eq__": [[884, "skbio-table-table-eq"]], "skbio.table.Table.__ge__": [[885, "skbio-table-table-ge"]], "skbio.table.Table.__getitem__": [[886, "skbio-table-table-getitem"]], "skbio.table.Table.__getstate__": [[887, "skbio-table-table-getstate"]], "skbio.table.Table.__gt__": [[888, "skbio-table-table-gt"]], "skbio.table.Table.__iter__": [[889, "skbio-table-table-iter"]], "skbio.table.Table.__le__": [[890, "skbio-table-table-le"]], "skbio.table.Table.__lt__": [[891, "skbio-table-table-lt"]], "skbio.table.Table.__ne__": [[892, "skbio-table-table-ne"]], "skbio.table.Table.__str__": [[893, "skbio-table-table-str"]], "skbio.table.Table.add_group_metadata": [[894, "skbio-table-table-add-group-metadata"]], "skbio.table.Table.add_metadata": [[895, "skbio-table-table-add-metadata"]], "skbio.table.Table.align_to": [[896, "skbio-table-table-align-to"]], "skbio.table.Table.align_to_dataframe": [[897, "skbio-table-table-align-to-dataframe"]], "skbio.table.Table.align_tree": [[898, "skbio-table-table-align-tree"]], "skbio.table.Table.collapse": [[899, "skbio-table-table-collapse"]], "skbio.table.Table.concat": [[900, "skbio-table-table-concat"]], "skbio.table.Table.copy": [[901, "skbio-table-table-copy"]], "skbio.table.Table.data": [[902, "skbio-table-table-data"]], "skbio.table.Table.del_metadata": [[903, "skbio-table-table-del-metadata"]], "skbio.table.Table.delimited_self": [[904, "skbio-table-table-delimited-self"]], "skbio.table.Table.descriptive_equality": [[905, "skbio-table-table-descriptive-equality"]], "skbio.table.Table.exists": [[906, "skbio-table-table-exists"]], "skbio.table.Table.filter": [[907, "skbio-table-table-filter"]], "skbio.table.Table.from_adjacency": [[908, "skbio-table-table-from-adjacency"]], "skbio.table.Table.from_hdf5": [[909, "skbio-table-table-from-hdf5"]], "skbio.table.Table.from_json": [[910, "skbio-table-table-from-json"]], "skbio.table.Table.from_tsv": [[911, "skbio-table-table-from-tsv"]], "skbio.table.Table.get_table_density": [[912, "skbio-table-table-get-table-density"]], "skbio.table.Table.get_value_by_ids": [[913, "skbio-table-table-get-value-by-ids"]], "skbio.table.Table.group_metadata": [[914, "skbio-table-table-group-metadata"]], "skbio.table.Table.head": [[915, "skbio-table-table-head"]], "skbio.table.Table.ids": [[916, "skbio-table-table-ids"]], "skbio.table.Table.index": [[917, "skbio-table-table-index"]], "skbio.table.Table.is_empty": [[918, "skbio-table-table-is-empty"]], "skbio.table.Table.iter": [[919, "skbio-table-table-iter"]], "skbio.table.Table.iter_data": [[920, "skbio-table-table-iter-data"]], "skbio.table.Table.iter_pairwise": [[921, "skbio-table-table-iter-pairwise"]], "skbio.table.Table.length": [[922, "skbio-table-table-length"]], "skbio.table.Table.max": [[923, "skbio-table-table-max"]], "skbio.table.Table.merge": [[924, "skbio-table-table-merge"]], "skbio.table.Table.metadata": [[925, "skbio-table-table-metadata"]], "skbio.table.Table.metadata_to_dataframe": [[926, "skbio-table-table-metadata-to-dataframe"]], "skbio.table.Table.min": [[927, "skbio-table-table-min"]], "skbio.table.Table.nonzero": [[928, "skbio-table-table-nonzero"]], "skbio.table.Table.nonzero_counts": [[929, "skbio-table-table-nonzero-counts"]], "skbio.table.Table.norm": [[930, "skbio-table-table-norm"]], "skbio.table.Table.pa": [[931, "skbio-table-table-pa"]], "skbio.table.Table.partition": [[932, "skbio-table-table-partition"]], "skbio.table.Table.rankdata": [[933, "skbio-table-table-rankdata"]], "skbio.table.Table.read": [[934, "skbio-table-table-read"]], "skbio.table.Table.reduce": [[935, "skbio-table-table-reduce"]], "skbio.table.Table.remove_empty": [[936, "skbio-table-table-remove-empty"]], "skbio.table.Table.sort": [[937, "skbio-table-table-sort"]], "skbio.table.Table.sort_order": [[938, "skbio-table-table-sort-order"]], "skbio.table.Table.subsample": [[939, "skbio-table-table-subsample"]], "skbio.table.Table.sum": [[940, "skbio-table-table-sum"]], "skbio.table.Table.to_anndata": [[941, "skbio-table-table-to-anndata"]], "skbio.table.Table.to_dataframe": [[942, "skbio-table-table-to-dataframe"]], "skbio.table.Table.to_hdf5": [[943, "skbio-table-table-to-hdf5"]], "skbio.table.Table.to_json": [[944, "skbio-table-table-to-json"]], "skbio.table.Table.to_tsv": [[945, "skbio-table-table-to-tsv"]], "skbio.table.Table.transform": [[946, "skbio-table-table-transform"]], "skbio.table.Table.transpose": [[947, "skbio-table-table-transpose"]], "skbio.table.Table.update_ids": [[948, "skbio-table-table-update-ids"]], "skbio.table.Table.write": [[949, "skbio-table-table-write"]], "skbio.table.example_table": [[950, "skbio-table-example-table"]], "skbio.tree.TreeNode": [[951, "skbio-tree-treenode"]], "skbio.tree.TreeNode.__copy__": [[952, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.__deepcopy__": [[953, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.__eq__": [[954, "skbio-tree-treenode-eq"]], "skbio.tree.TreeNode.__ge__": [[955, "skbio-tree-treenode-ge"]], "skbio.tree.TreeNode.__getitem__": [[956, "skbio-tree-treenode-getitem"]], "skbio.tree.TreeNode.__getstate__": [[957, "skbio-tree-treenode-getstate"]], "skbio.tree.TreeNode.__gt__": [[958, "skbio-tree-treenode-gt"]], "skbio.tree.TreeNode.__hash__": [[959, "skbio-tree-treenode-hash"]], "skbio.tree.TreeNode.__iter__": [[960, "skbio-tree-treenode-iter"]], "skbio.tree.TreeNode.__le__": [[961, "skbio-tree-treenode-le"]], "skbio.tree.TreeNode.__len__": [[962, "skbio-tree-treenode-len"]], "skbio.tree.TreeNode.__lt__": [[963, "skbio-tree-treenode-lt"]], "skbio.tree.TreeNode.__ne__": [[964, "skbio-tree-treenode-ne"]], "skbio.tree.TreeNode.__str__": [[965, "skbio-tree-treenode-str"]], "skbio.tree.TreeNode.accumulate_to_ancestor": [[966, "skbio-tree-treenode-accumulate-to-ancestor"]], "skbio.tree.TreeNode.ancestors": [[967, "skbio-tree-treenode-ancestors"]], "skbio.tree.TreeNode.append": [[968, "skbio-tree-treenode-append"]], "skbio.tree.TreeNode.ascii_art": [[969, "skbio-tree-treenode-ascii-art"]], "skbio.tree.TreeNode.assign_ids": [[970, "skbio-tree-treenode-assign-ids"]], "skbio.tree.TreeNode.assign_supports": [[971, "skbio-tree-treenode-assign-supports"]], "skbio.tree.TreeNode.bifurcate": [[972, "skbio-tree-treenode-bifurcate"]], "skbio.tree.TreeNode.cache_attr": [[973, "skbio-tree-treenode-cache-attr"]], "skbio.tree.TreeNode.compare_rfd": [[974, "skbio-tree-treenode-compare-rfd"]], "skbio.tree.TreeNode.compare_subsets": [[975, "skbio-tree-treenode-compare-subsets"]], "skbio.tree.TreeNode.compare_tip_distances": [[976, "skbio-tree-treenode-compare-tip-distances"]], "skbio.tree.TreeNode.copy": [[977, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.count": [[978, "skbio-tree-treenode-count"]], "skbio.tree.TreeNode.create_caches": [[979, "skbio-tree-treenode-create-caches"]], "skbio.tree.TreeNode.deepcopy": [[980, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.descending_branch_length": [[981, "skbio-tree-treenode-descending-branch-length"]], "skbio.tree.TreeNode.distance": [[982, "skbio-tree-treenode-distance"]], "skbio.tree.TreeNode.extend": [[983, "skbio-tree-treenode-extend"]], "skbio.tree.TreeNode.find": [[984, "skbio-tree-treenode-find"]], "skbio.tree.TreeNode.find_all": [[985, "skbio-tree-treenode-find-all"]], "skbio.tree.TreeNode.find_by_func": [[986, "skbio-tree-treenode-find-by-func"]], "skbio.tree.TreeNode.find_by_id": [[987, "skbio-tree-treenode-find-by-id"]], "skbio.tree.TreeNode.from_linkage_matrix": [[988, "skbio-tree-treenode-from-linkage-matrix"]], "skbio.tree.TreeNode.from_taxdump": [[989, "skbio-tree-treenode-from-taxdump"]], "skbio.tree.TreeNode.from_taxonomy": [[990, "skbio-tree-treenode-from-taxonomy"]], "skbio.tree.TreeNode.get_max_distance": [[991, "skbio-tree-treenode-get-max-distance"]], "skbio.tree.TreeNode.has_children": [[992, "skbio-tree-treenode-has-children"]], "skbio.tree.TreeNode.index_tree": [[993, "skbio-tree-treenode-index-tree"]], "skbio.tree.TreeNode.invalidate_caches": [[994, "skbio-tree-treenode-invalidate-caches"]], "skbio.tree.TreeNode.is_root": [[995, "skbio-tree-treenode-is-root"]], "skbio.tree.TreeNode.is_tip": [[996, "skbio-tree-treenode-is-tip"]], "skbio.tree.TreeNode.lca": [[997, "skbio-tree-treenode-lca"]], "skbio.tree.TreeNode.levelorder": [[998, "skbio-tree-treenode-levelorder"]], "skbio.tree.TreeNode.lowest_common_ancestor": [[999, "skbio-tree-treenode-lowest-common-ancestor"]], "skbio.tree.TreeNode.neighbors": [[1000, "skbio-tree-treenode-neighbors"]], "skbio.tree.TreeNode.non_tips": [[1001, "skbio-tree-treenode-non-tips"]], "skbio.tree.TreeNode.observed_node_counts": [[1002, "skbio-tree-treenode-observed-node-counts"]], "skbio.tree.TreeNode.pop": [[1003, "skbio-tree-treenode-pop"]], "skbio.tree.TreeNode.postorder": [[1004, "skbio-tree-treenode-postorder"]], "skbio.tree.TreeNode.pre_and_postorder": [[1005, "skbio-tree-treenode-pre-and-postorder"]], "skbio.tree.TreeNode.preorder": [[1006, "skbio-tree-treenode-preorder"]], "skbio.tree.TreeNode.prune": [[1007, "skbio-tree-treenode-prune"]], "skbio.tree.TreeNode.read": [[1008, "skbio-tree-treenode-read"]], "skbio.tree.TreeNode.remove": [[1009, "skbio-tree-treenode-remove"]], "skbio.tree.TreeNode.remove_deleted": [[1010, "skbio-tree-treenode-remove-deleted"]], "skbio.tree.TreeNode.root": [[1011, "skbio-tree-treenode-root"]], "skbio.tree.TreeNode.root_at": [[1012, "skbio-tree-treenode-root-at"]], "skbio.tree.TreeNode.root_at_midpoint": [[1013, "skbio-tree-treenode-root-at-midpoint"]], "skbio.tree.TreeNode.shear": [[1014, "skbio-tree-treenode-shear"]], "skbio.tree.TreeNode.shuffle": [[1015, "skbio-tree-treenode-shuffle"]], "skbio.tree.TreeNode.siblings": [[1016, "skbio-tree-treenode-siblings"]], "skbio.tree.TreeNode.subset": [[1017, "skbio-tree-treenode-subset"]], "skbio.tree.TreeNode.subsets": [[1018, "skbio-tree-treenode-subsets"]], "skbio.tree.TreeNode.subtree": [[1019, "skbio-tree-treenode-subtree"]], "skbio.tree.TreeNode.tip_tip_distances": [[1020, "skbio-tree-treenode-tip-tip-distances"]], "skbio.tree.TreeNode.tips": [[1021, "skbio-tree-treenode-tips"]], "skbio.tree.TreeNode.to_array": [[1022, "skbio-tree-treenode-to-array"]], "skbio.tree.TreeNode.to_taxonomy": [[1023, "skbio-tree-treenode-to-taxonomy"]], "skbio.tree.TreeNode.traverse": [[1024, "skbio-tree-treenode-traverse"]], "skbio.tree.TreeNode.unpack": [[1025, "skbio-tree-treenode-unpack"]], "skbio.tree.TreeNode.unpack_by_func": [[1026, "skbio-tree-treenode-unpack-by-func"]], "skbio.tree.TreeNode.unrooted_copy": [[1027, "skbio-tree-treenode-unrooted-copy"]], "skbio.tree.TreeNode.unrooted_deepcopy": [[1028, "skbio-tree-treenode-unrooted-deepcopy"]], "skbio.tree.TreeNode.write": [[1029, "skbio-tree-treenode-write"]], "skbio.tree.majority_rule": [[1030, "skbio-tree-majority-rule"]], "skbio.tree.nj": [[1031, "skbio-tree-nj"]], "skbio.util.EfficiencyWarning": [[1032, "skbio-util-efficiencywarning"]], "skbio.util.RepresentationWarning": [[1033, "skbio-util-representationwarning"]], "skbio.util.assert_data_frame_almost_equal": [[1034, "skbio-util-assert-data-frame-almost-equal"]], "skbio.util.assert_ordination_results_equal": [[1035, "skbio-util-assert-ordination-results-equal"]], "skbio.util.cardinal_to_ordinal": [[1036, "skbio-util-cardinal-to-ordinal"]], "skbio.util.classproperty": [[1037, "skbio-util-classproperty"]], "skbio.util.classproperty.__delete__": [[1038, "skbio-util-classproperty-delete"]], "skbio.util.classproperty.__eq__": [[1039, "skbio-util-classproperty-eq"]], "skbio.util.classproperty.__ge__": [[1040, "skbio-util-classproperty-ge"]], "skbio.util.classproperty.__get__": [[1041, "skbio-util-classproperty-get"]], "skbio.util.classproperty.__getstate__": [[1042, "skbio-util-classproperty-getstate"]], "skbio.util.classproperty.__gt__": [[1043, "skbio-util-classproperty-gt"]], "skbio.util.classproperty.__hash__": [[1044, "skbio-util-classproperty-hash"]], "skbio.util.classproperty.__le__": [[1045, "skbio-util-classproperty-le"]], "skbio.util.classproperty.__lt__": [[1046, "skbio-util-classproperty-lt"]], "skbio.util.classproperty.__ne__": [[1047, "skbio-util-classproperty-ne"]], "skbio.util.classproperty.__set__": [[1048, "skbio-util-classproperty-set"]], "skbio.util.classproperty.__set_name__": [[1049, "skbio-util-classproperty-set-name"]], "skbio.util.classproperty.__str__": [[1050, "skbio-util-classproperty-str"]], "skbio.util.classproperty.deleter": [[1051, "skbio-util-classproperty-deleter"]], "skbio.util.classproperty.getter": [[1052, "skbio-util-classproperty-getter"]], "skbio.util.classproperty.setter": [[1053, "skbio-util-classproperty-setter"]], "skbio.util.find_duplicates": [[1054, "skbio-util-find-duplicates"]], "skbio.util.get_data_path": [[1055, "skbio-util-get-data-path"]], "skbio.util.safe_md5": [[1056, "skbio-util-safe-md5"]], "skbio.workflow.Workflow": [[1057, "skbio-workflow-workflow"]], "skbio.workflow.Workflow.__call__": [[1058, "skbio-workflow-workflow-call"]], "skbio.workflow.Workflow.__eq__": [[1059, "skbio-workflow-workflow-eq"]], "skbio.workflow.Workflow.__ge__": [[1060, "skbio-workflow-workflow-ge"]], "skbio.workflow.Workflow.__getstate__": [[1061, "skbio-workflow-workflow-getstate"]], "skbio.workflow.Workflow.__gt__": [[1062, "skbio-workflow-workflow-gt"]], "skbio.workflow.Workflow.__hash__": [[1063, "skbio-workflow-workflow-hash"]], "skbio.workflow.Workflow.__le__": [[1064, "skbio-workflow-workflow-le"]], "skbio.workflow.Workflow.__lt__": [[1065, "skbio-workflow-workflow-lt"]], "skbio.workflow.Workflow.__ne__": [[1066, "skbio-workflow-workflow-ne"]], "skbio.workflow.Workflow.__str__": [[1067, "skbio-workflow-workflow-str"]], "skbio.workflow.Workflow.initialize_state": [[1068, "skbio-workflow-workflow-initialize-state"]], "skbio.workflow.method": [[1069, "skbio-workflow-method"]], "skbio.workflow.method.__call__": [[1070, "skbio-workflow-method-call"]], "skbio.workflow.method.__eq__": [[1071, "skbio-workflow-method-eq"]], "skbio.workflow.method.__ge__": [[1072, "skbio-workflow-method-ge"]], "skbio.workflow.method.__getstate__": [[1073, "skbio-workflow-method-getstate"]], "skbio.workflow.method.__gt__": [[1074, "skbio-workflow-method-gt"]], "skbio.workflow.method.__hash__": [[1075, "skbio-workflow-method-hash"]], "skbio.workflow.method.__le__": [[1076, "skbio-workflow-method-le"]], "skbio.workflow.method.__lt__": [[1077, "skbio-workflow-method-lt"]], "skbio.workflow.method.__ne__": [[1078, "skbio-workflow-method-ne"]], "skbio.workflow.method.__str__": [[1079, "skbio-workflow-method-str"]], "skbio.workflow.requires": [[1080, "skbio-workflow-requires"]], "skbio.workflow.requires.__call__": [[1081, "skbio-workflow-requires-call"]], "skbio.workflow.requires.__eq__": [[1082, "skbio-workflow-requires-eq"]], "skbio.workflow.requires.__ge__": [[1083, "skbio-workflow-requires-ge"]], "skbio.workflow.requires.__getstate__": [[1084, "skbio-workflow-requires-getstate"]], "skbio.workflow.requires.__gt__": [[1085, "skbio-workflow-requires-gt"]], "skbio.workflow.requires.__hash__": [[1086, "skbio-workflow-requires-hash"]], "skbio.workflow.requires.__le__": [[1087, "skbio-workflow-requires-le"]], "skbio.workflow.requires.__lt__": [[1088, "skbio-workflow-requires-lt"]], "skbio.workflow.requires.__ne__": [[1089, "skbio-workflow-requires-ne"]], "skbio.workflow.requires.__str__": [[1090, "skbio-workflow-requires-str"]]}, "docnames": ["alignment", "diversity", "embedding", "generated/skbio.alignment.AlignPath", "generated/skbio.alignment.AlignPath.__eq__", "generated/skbio.alignment.AlignPath.__ge__", "generated/skbio.alignment.AlignPath.__getstate__", "generated/skbio.alignment.AlignPath.__gt__", "generated/skbio.alignment.AlignPath.__hash__", "generated/skbio.alignment.AlignPath.__le__", "generated/skbio.alignment.AlignPath.__lt__", "generated/skbio.alignment.AlignPath.__ne__", "generated/skbio.alignment.AlignPath.__str__", "generated/skbio.alignment.AlignPath.from_bits", "generated/skbio.alignment.AlignPath.from_coordinates", "generated/skbio.alignment.AlignPath.from_indices", "generated/skbio.alignment.AlignPath.from_tabular", "generated/skbio.alignment.AlignPath.to_bits", "generated/skbio.alignment.AlignPath.to_coordinates", "generated/skbio.alignment.AlignPath.to_indices", "generated/skbio.alignment.AlignmentStructure", "generated/skbio.alignment.AlignmentStructure.__eq__", "generated/skbio.alignment.AlignmentStructure.__ge__", "generated/skbio.alignment.AlignmentStructure.__getitem__", "generated/skbio.alignment.AlignmentStructure.__getstate__", "generated/skbio.alignment.AlignmentStructure.__gt__", "generated/skbio.alignment.AlignmentStructure.__hash__", "generated/skbio.alignment.AlignmentStructure.__le__", "generated/skbio.alignment.AlignmentStructure.__lt__", "generated/skbio.alignment.AlignmentStructure.__ne__", "generated/skbio.alignment.AlignmentStructure.__setstate__", "generated/skbio.alignment.AlignmentStructure.__str__", "generated/skbio.alignment.AlignmentStructure.is_zero_based", "generated/skbio.alignment.AlignmentStructure.set_zero_based", "generated/skbio.alignment.PairAlignPath", "generated/skbio.alignment.PairAlignPath.__eq__", "generated/skbio.alignment.PairAlignPath.__ge__", "generated/skbio.alignment.PairAlignPath.__getstate__", "generated/skbio.alignment.PairAlignPath.__gt__", "generated/skbio.alignment.PairAlignPath.__hash__", "generated/skbio.alignment.PairAlignPath.__le__", "generated/skbio.alignment.PairAlignPath.__lt__", "generated/skbio.alignment.PairAlignPath.__ne__", "generated/skbio.alignment.PairAlignPath.__str__", "generated/skbio.alignment.PairAlignPath.from_bits", "generated/skbio.alignment.PairAlignPath.from_cigar", "generated/skbio.alignment.PairAlignPath.from_coordinates", "generated/skbio.alignment.PairAlignPath.from_indices", "generated/skbio.alignment.PairAlignPath.from_tabular", "generated/skbio.alignment.PairAlignPath.to_bits", "generated/skbio.alignment.PairAlignPath.to_cigar", "generated/skbio.alignment.PairAlignPath.to_coordinates", "generated/skbio.alignment.PairAlignPath.to_indices", "generated/skbio.alignment.StripedSmithWaterman", "generated/skbio.alignment.StripedSmithWaterman.__call__", "generated/skbio.alignment.StripedSmithWaterman.__eq__", "generated/skbio.alignment.StripedSmithWaterman.__ge__", "generated/skbio.alignment.StripedSmithWaterman.__getstate__", "generated/skbio.alignment.StripedSmithWaterman.__gt__", "generated/skbio.alignment.StripedSmithWaterman.__hash__", "generated/skbio.alignment.StripedSmithWaterman.__le__", "generated/skbio.alignment.StripedSmithWaterman.__lt__", "generated/skbio.alignment.StripedSmithWaterman.__ne__", "generated/skbio.alignment.StripedSmithWaterman.__setstate__", "generated/skbio.alignment.StripedSmithWaterman.__str__", "generated/skbio.alignment.TabularMSA", "generated/skbio.alignment.TabularMSA.__bool__", "generated/skbio.alignment.TabularMSA.__contains__", "generated/skbio.alignment.TabularMSA.__copy__", "generated/skbio.alignment.TabularMSA.__deepcopy__", "generated/skbio.alignment.TabularMSA.__eq__", "generated/skbio.alignment.TabularMSA.__ge__", "generated/skbio.alignment.TabularMSA.__getitem__", "generated/skbio.alignment.TabularMSA.__getstate__", "generated/skbio.alignment.TabularMSA.__gt__", "generated/skbio.alignment.TabularMSA.__iter__", "generated/skbio.alignment.TabularMSA.__le__", "generated/skbio.alignment.TabularMSA.__len__", "generated/skbio.alignment.TabularMSA.__lt__", "generated/skbio.alignment.TabularMSA.__ne__", "generated/skbio.alignment.TabularMSA.__reversed__", "generated/skbio.alignment.TabularMSA.__str__", "generated/skbio.alignment.TabularMSA.append", "generated/skbio.alignment.TabularMSA.consensus", "generated/skbio.alignment.TabularMSA.conservation", "generated/skbio.alignment.TabularMSA.extend", "generated/skbio.alignment.TabularMSA.from_dict", "generated/skbio.alignment.TabularMSA.from_path_seqs", "generated/skbio.alignment.TabularMSA.gap_frequencies", "generated/skbio.alignment.TabularMSA.has_metadata", "generated/skbio.alignment.TabularMSA.has_positional_metadata", "generated/skbio.alignment.TabularMSA.iter_positions", "generated/skbio.alignment.TabularMSA.join", "generated/skbio.alignment.TabularMSA.read", "generated/skbio.alignment.TabularMSA.reassign_index", "generated/skbio.alignment.TabularMSA.sort", "generated/skbio.alignment.TabularMSA.to_dict", "generated/skbio.alignment.TabularMSA.write", "generated/skbio.alignment.global_pairwise_align", "generated/skbio.alignment.global_pairwise_align_nucleotide", "generated/skbio.alignment.global_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align", "generated/skbio.alignment.local_pairwise_align_nucleotide", "generated/skbio.alignment.local_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align_ssw", "generated/skbio.alignment.make_identity_substitution_matrix", "generated/skbio.diversity.alpha", "generated/skbio.diversity.alpha.ace", "generated/skbio.diversity.alpha.berger_parker_d", "generated/skbio.diversity.alpha.brillouin_d", "generated/skbio.diversity.alpha.chao1", "generated/skbio.diversity.alpha.chao1_ci", "generated/skbio.diversity.alpha.dominance", "generated/skbio.diversity.alpha.doubles", "generated/skbio.diversity.alpha.enspie", "generated/skbio.diversity.alpha.esty_ci", "generated/skbio.diversity.alpha.faith_pd", "generated/skbio.diversity.alpha.fisher_alpha", "generated/skbio.diversity.alpha.gini_index", "generated/skbio.diversity.alpha.goods_coverage", "generated/skbio.diversity.alpha.heip_e", "generated/skbio.diversity.alpha.inv_simpson", "generated/skbio.diversity.alpha.kempton_taylor_q", "generated/skbio.diversity.alpha.lladser_ci", "generated/skbio.diversity.alpha.lladser_pe", "generated/skbio.diversity.alpha.margalef", "generated/skbio.diversity.alpha.mcintosh_d", "generated/skbio.diversity.alpha.mcintosh_e", "generated/skbio.diversity.alpha.menhinick", "generated/skbio.diversity.alpha.michaelis_menten_fit", "generated/skbio.diversity.alpha.observed_features", "generated/skbio.diversity.alpha.observed_otus", "generated/skbio.diversity.alpha.osd", "generated/skbio.diversity.alpha.phydiv", "generated/skbio.diversity.alpha.pielou_e", "generated/skbio.diversity.alpha.robbins", "generated/skbio.diversity.alpha.shannon", "generated/skbio.diversity.alpha.simpson", "generated/skbio.diversity.alpha.simpson_d", "generated/skbio.diversity.alpha.simpson_e", "generated/skbio.diversity.alpha.singles", "generated/skbio.diversity.alpha.sobs", "generated/skbio.diversity.alpha.strong", "generated/skbio.diversity.alpha_diversity", "generated/skbio.diversity.beta", "generated/skbio.diversity.beta.unweighted_unifrac", "generated/skbio.diversity.beta.weighted_unifrac", "generated/skbio.diversity.beta_diversity", "generated/skbio.diversity.block_beta_diversity", "generated/skbio.diversity.get_alpha_diversity_metrics", "generated/skbio.diversity.get_beta_diversity_metrics", "generated/skbio.diversity.partial_beta_diversity", "generated/skbio.embedding.Embedding", "generated/skbio.embedding.Embedding.__eq__", "generated/skbio.embedding.Embedding.__ge__", "generated/skbio.embedding.Embedding.__getstate__", "generated/skbio.embedding.Embedding.__gt__", "generated/skbio.embedding.Embedding.__hash__", "generated/skbio.embedding.Embedding.__le__", "generated/skbio.embedding.Embedding.__lt__", "generated/skbio.embedding.Embedding.__ne__", "generated/skbio.embedding.Embedding.__str__", "generated/skbio.embedding.Embedding.bytes", "generated/skbio.embedding.ProteinEmbedding", "generated/skbio.embedding.ProteinEmbedding.__eq__", "generated/skbio.embedding.ProteinEmbedding.__ge__", "generated/skbio.embedding.ProteinEmbedding.__getstate__", "generated/skbio.embedding.ProteinEmbedding.__gt__", "generated/skbio.embedding.ProteinEmbedding.__hash__", "generated/skbio.embedding.ProteinEmbedding.__le__", "generated/skbio.embedding.ProteinEmbedding.__lt__", "generated/skbio.embedding.ProteinEmbedding.__ne__", "generated/skbio.embedding.ProteinEmbedding.__str__", "generated/skbio.embedding.ProteinEmbedding.bytes", "generated/skbio.embedding.ProteinEmbedding.read", "generated/skbio.embedding.ProteinEmbedding.write", "generated/skbio.embedding.ProteinVector", "generated/skbio.embedding.ProteinVector.__eq__", "generated/skbio.embedding.ProteinVector.__ge__", "generated/skbio.embedding.ProteinVector.__getstate__", "generated/skbio.embedding.ProteinVector.__gt__", "generated/skbio.embedding.ProteinVector.__hash__", "generated/skbio.embedding.ProteinVector.__le__", "generated/skbio.embedding.ProteinVector.__lt__", "generated/skbio.embedding.ProteinVector.__ne__", "generated/skbio.embedding.ProteinVector.__str__", "generated/skbio.embedding.ProteinVector.bytes", "generated/skbio.embedding.ProteinVector.read", "generated/skbio.embedding.ProteinVector.write", "generated/skbio.embedding.SequenceEmbedding", "generated/skbio.embedding.SequenceEmbedding.__eq__", "generated/skbio.embedding.SequenceEmbedding.__ge__", "generated/skbio.embedding.SequenceEmbedding.__getstate__", "generated/skbio.embedding.SequenceEmbedding.__gt__", "generated/skbio.embedding.SequenceEmbedding.__hash__", "generated/skbio.embedding.SequenceEmbedding.__le__", "generated/skbio.embedding.SequenceEmbedding.__lt__", "generated/skbio.embedding.SequenceEmbedding.__ne__", "generated/skbio.embedding.SequenceEmbedding.__str__", "generated/skbio.embedding.SequenceEmbedding.bytes", "generated/skbio.embedding.SequenceVector", "generated/skbio.embedding.SequenceVector.__eq__", "generated/skbio.embedding.SequenceVector.__ge__", "generated/skbio.embedding.SequenceVector.__getstate__", "generated/skbio.embedding.SequenceVector.__gt__", "generated/skbio.embedding.SequenceVector.__hash__", "generated/skbio.embedding.SequenceVector.__le__", "generated/skbio.embedding.SequenceVector.__lt__", "generated/skbio.embedding.SequenceVector.__ne__", "generated/skbio.embedding.SequenceVector.__str__", "generated/skbio.embedding.SequenceVector.bytes", "generated/skbio.embedding.embed_vec_to_dataframe", "generated/skbio.embedding.embed_vec_to_distances", "generated/skbio.embedding.embed_vec_to_numpy", "generated/skbio.embedding.embed_vec_to_ordination", "generated/skbio.io.format.binary_dm", "generated/skbio.io.format.biom", "generated/skbio.io.format.blast6", "generated/skbio.io.format.blast7", "generated/skbio.io.format.clustal", "generated/skbio.io.format.embed", "generated/skbio.io.format.embl", "generated/skbio.io.format.fasta", "generated/skbio.io.format.fastq", "generated/skbio.io.format.genbank", "generated/skbio.io.format.gff3", "generated/skbio.io.format.lsmat", "generated/skbio.io.format.newick", "generated/skbio.io.format.ordination", "generated/skbio.io.format.phylip", "generated/skbio.io.format.qseq", "generated/skbio.io.format.sample_metadata", "generated/skbio.io.format.stockholm", "generated/skbio.io.format.taxdump", "generated/skbio.io.registry", "generated/skbio.io.registry.Format", "generated/skbio.io.registry.Format.__eq__", "generated/skbio.io.registry.Format.__ge__", "generated/skbio.io.registry.Format.__getstate__", "generated/skbio.io.registry.Format.__gt__", "generated/skbio.io.registry.Format.__hash__", "generated/skbio.io.registry.Format.__le__", "generated/skbio.io.registry.Format.__lt__", "generated/skbio.io.registry.Format.__ne__", "generated/skbio.io.registry.Format.__str__", "generated/skbio.io.registry.Format.reader", "generated/skbio.io.registry.Format.sniffer", "generated/skbio.io.registry.Format.writer", "generated/skbio.io.registry.IORegistry", "generated/skbio.io.registry.IORegistry.__eq__", "generated/skbio.io.registry.IORegistry.__ge__", "generated/skbio.io.registry.IORegistry.__getstate__", "generated/skbio.io.registry.IORegistry.__gt__", "generated/skbio.io.registry.IORegistry.__hash__", "generated/skbio.io.registry.IORegistry.__le__", "generated/skbio.io.registry.IORegistry.__lt__", "generated/skbio.io.registry.IORegistry.__ne__", "generated/skbio.io.registry.IORegistry.__str__", "generated/skbio.io.registry.IORegistry.add_format", "generated/skbio.io.registry.IORegistry.create_format", "generated/skbio.io.registry.IORegistry.get_reader", "generated/skbio.io.registry.IORegistry.get_sniffer", "generated/skbio.io.registry.IORegistry.get_writer", "generated/skbio.io.registry.IORegistry.list_read_formats", "generated/skbio.io.registry.IORegistry.list_write_formats", "generated/skbio.io.registry.IORegistry.monkey_patch", "generated/skbio.io.registry.IORegistry.read", "generated/skbio.io.registry.IORegistry.sniff", "generated/skbio.io.registry.IORegistry.write", "generated/skbio.io.registry.create_format", "generated/skbio.io.registry.read", "generated/skbio.io.registry.sniff", "generated/skbio.io.registry.write", "generated/skbio.io.util", "generated/skbio.io.util.open", "generated/skbio.io.util.open_file", "generated/skbio.io.util.open_files", "generated/skbio.metadata.CategoricalMetadataColumn", "generated/skbio.metadata.CategoricalMetadataColumn.__eq__", "generated/skbio.metadata.CategoricalMetadataColumn.__ge__", "generated/skbio.metadata.CategoricalMetadataColumn.__getstate__", "generated/skbio.metadata.CategoricalMetadataColumn.__gt__", "generated/skbio.metadata.CategoricalMetadataColumn.__le__", "generated/skbio.metadata.CategoricalMetadataColumn.__lt__", "generated/skbio.metadata.CategoricalMetadataColumn.__ne__", "generated/skbio.metadata.CategoricalMetadataColumn.__str__", "generated/skbio.metadata.CategoricalMetadataColumn.drop_missing_values", "generated/skbio.metadata.CategoricalMetadataColumn.filter_ids", "generated/skbio.metadata.CategoricalMetadataColumn.get_ids", "generated/skbio.metadata.CategoricalMetadataColumn.get_missing", "generated/skbio.metadata.CategoricalMetadataColumn.get_value", "generated/skbio.metadata.CategoricalMetadataColumn.has_missing_values", "generated/skbio.metadata.CategoricalMetadataColumn.save", "generated/skbio.metadata.CategoricalMetadataColumn.to_dataframe", "generated/skbio.metadata.CategoricalMetadataColumn.to_series", "generated/skbio.metadata.Interval", "generated/skbio.metadata.Interval.__eq__", "generated/skbio.metadata.Interval.__ge__", "generated/skbio.metadata.Interval.__getstate__", "generated/skbio.metadata.Interval.__gt__", "generated/skbio.metadata.Interval.__le__", "generated/skbio.metadata.Interval.__lt__", "generated/skbio.metadata.Interval.__ne__", "generated/skbio.metadata.Interval.__str__", "generated/skbio.metadata.Interval.drop", "generated/skbio.metadata.IntervalMetadata", "generated/skbio.metadata.IntervalMetadata.__copy__", "generated/skbio.metadata.IntervalMetadata.__deepcopy__", "generated/skbio.metadata.IntervalMetadata.__eq__", "generated/skbio.metadata.IntervalMetadata.__ge__", "generated/skbio.metadata.IntervalMetadata.__getstate__", "generated/skbio.metadata.IntervalMetadata.__gt__", "generated/skbio.metadata.IntervalMetadata.__le__", "generated/skbio.metadata.IntervalMetadata.__lt__", "generated/skbio.metadata.IntervalMetadata.__ne__", "generated/skbio.metadata.IntervalMetadata.__str__", "generated/skbio.metadata.IntervalMetadata.add", "generated/skbio.metadata.IntervalMetadata.concat", "generated/skbio.metadata.IntervalMetadata.drop", "generated/skbio.metadata.IntervalMetadata.merge", "generated/skbio.metadata.IntervalMetadata.query", "generated/skbio.metadata.IntervalMetadata.read", "generated/skbio.metadata.IntervalMetadata.sort", "generated/skbio.metadata.IntervalMetadata.write", "generated/skbio.metadata.MetadataColumn", "generated/skbio.metadata.MetadataColumn.__eq__", "generated/skbio.metadata.MetadataColumn.__ge__", "generated/skbio.metadata.MetadataColumn.__getstate__", "generated/skbio.metadata.MetadataColumn.__gt__", "generated/skbio.metadata.MetadataColumn.__le__", "generated/skbio.metadata.MetadataColumn.__lt__", "generated/skbio.metadata.MetadataColumn.__ne__", "generated/skbio.metadata.MetadataColumn.__str__", "generated/skbio.metadata.MetadataColumn.drop_missing_values", "generated/skbio.metadata.MetadataColumn.filter_ids", "generated/skbio.metadata.MetadataColumn.get_ids", "generated/skbio.metadata.MetadataColumn.get_missing", "generated/skbio.metadata.MetadataColumn.get_value", "generated/skbio.metadata.MetadataColumn.has_missing_values", "generated/skbio.metadata.MetadataColumn.save", "generated/skbio.metadata.MetadataColumn.to_dataframe", "generated/skbio.metadata.MetadataColumn.to_series", "generated/skbio.metadata.NumericMetadataColumn", "generated/skbio.metadata.NumericMetadataColumn.__eq__", "generated/skbio.metadata.NumericMetadataColumn.__ge__", "generated/skbio.metadata.NumericMetadataColumn.__getstate__", "generated/skbio.metadata.NumericMetadataColumn.__gt__", "generated/skbio.metadata.NumericMetadataColumn.__le__", "generated/skbio.metadata.NumericMetadataColumn.__lt__", "generated/skbio.metadata.NumericMetadataColumn.__ne__", "generated/skbio.metadata.NumericMetadataColumn.__str__", "generated/skbio.metadata.NumericMetadataColumn.drop_missing_values", "generated/skbio.metadata.NumericMetadataColumn.filter_ids", "generated/skbio.metadata.NumericMetadataColumn.get_ids", "generated/skbio.metadata.NumericMetadataColumn.get_missing", "generated/skbio.metadata.NumericMetadataColumn.get_value", "generated/skbio.metadata.NumericMetadataColumn.has_missing_values", "generated/skbio.metadata.NumericMetadataColumn.save", "generated/skbio.metadata.NumericMetadataColumn.to_dataframe", "generated/skbio.metadata.NumericMetadataColumn.to_series", "generated/skbio.metadata.SampleMetadata", "generated/skbio.metadata.SampleMetadata.__eq__", "generated/skbio.metadata.SampleMetadata.__ge__", "generated/skbio.metadata.SampleMetadata.__getstate__", "generated/skbio.metadata.SampleMetadata.__gt__", "generated/skbio.metadata.SampleMetadata.__le__", "generated/skbio.metadata.SampleMetadata.__lt__", "generated/skbio.metadata.SampleMetadata.__ne__", "generated/skbio.metadata.SampleMetadata.__str__", "generated/skbio.metadata.SampleMetadata.filter_columns", "generated/skbio.metadata.SampleMetadata.filter_ids", "generated/skbio.metadata.SampleMetadata.get_column", "generated/skbio.metadata.SampleMetadata.get_ids", "generated/skbio.metadata.SampleMetadata.load", "generated/skbio.metadata.SampleMetadata.merge", "generated/skbio.metadata.SampleMetadata.read", "generated/skbio.metadata.SampleMetadata.save", "generated/skbio.metadata.SampleMetadata.to_dataframe", "generated/skbio.metadata.SampleMetadata.write", "generated/skbio.sequence.DNA", "generated/skbio.sequence.DNA.__bool__", "generated/skbio.sequence.DNA.__contains__", "generated/skbio.sequence.DNA.__copy__", "generated/skbio.sequence.DNA.__deepcopy__", "generated/skbio.sequence.DNA.__eq__", "generated/skbio.sequence.DNA.__ge__", "generated/skbio.sequence.DNA.__getitem__", "generated/skbio.sequence.DNA.__getstate__", "generated/skbio.sequence.DNA.__gt__", "generated/skbio.sequence.DNA.__iter__", "generated/skbio.sequence.DNA.__le__", "generated/skbio.sequence.DNA.__len__", "generated/skbio.sequence.DNA.__lt__", "generated/skbio.sequence.DNA.__ne__", "generated/skbio.sequence.DNA.__reversed__", "generated/skbio.sequence.DNA.__str__", "generated/skbio.sequence.DNA.complement", "generated/skbio.sequence.DNA.concat", "generated/skbio.sequence.DNA.count", "generated/skbio.sequence.DNA.definites", "generated/skbio.sequence.DNA.degap", "generated/skbio.sequence.DNA.degenerates", "generated/skbio.sequence.DNA.distance", "generated/skbio.sequence.DNA.expand_degenerates", "generated/skbio.sequence.DNA.find_motifs", "generated/skbio.sequence.DNA.find_with_regex", "generated/skbio.sequence.DNA.frequencies", "generated/skbio.sequence.DNA.gaps", "generated/skbio.sequence.DNA.gc_content", "generated/skbio.sequence.DNA.gc_frequency", "generated/skbio.sequence.DNA.has_definites", "generated/skbio.sequence.DNA.has_degenerates", "generated/skbio.sequence.DNA.has_gaps", "generated/skbio.sequence.DNA.has_interval_metadata", "generated/skbio.sequence.DNA.has_metadata", "generated/skbio.sequence.DNA.has_nondegenerates", "generated/skbio.sequence.DNA.has_positional_metadata", "generated/skbio.sequence.DNA.index", "generated/skbio.sequence.DNA.is_reverse_complement", "generated/skbio.sequence.DNA.iter_contiguous", "generated/skbio.sequence.DNA.iter_kmers", "generated/skbio.sequence.DNA.kmer_frequencies", "generated/skbio.sequence.DNA.lowercase", "generated/skbio.sequence.DNA.match_frequency", "generated/skbio.sequence.DNA.matches", "generated/skbio.sequence.DNA.mismatch_frequency", "generated/skbio.sequence.DNA.mismatches", "generated/skbio.sequence.DNA.nondegenerates", "generated/skbio.sequence.DNA.read", "generated/skbio.sequence.DNA.replace", "generated/skbio.sequence.DNA.reverse_complement", "generated/skbio.sequence.DNA.to_definites", "generated/skbio.sequence.DNA.to_indices", "generated/skbio.sequence.DNA.to_regex", "generated/skbio.sequence.DNA.transcribe", "generated/skbio.sequence.DNA.translate", "generated/skbio.sequence.DNA.translate_six_frames", "generated/skbio.sequence.DNA.write", "generated/skbio.sequence.GeneticCode", "generated/skbio.sequence.GeneticCode.__eq__", "generated/skbio.sequence.GeneticCode.__ge__", "generated/skbio.sequence.GeneticCode.__getstate__", "generated/skbio.sequence.GeneticCode.__gt__", "generated/skbio.sequence.GeneticCode.__le__", "generated/skbio.sequence.GeneticCode.__lt__", "generated/skbio.sequence.GeneticCode.__ne__", "generated/skbio.sequence.GeneticCode.__str__", "generated/skbio.sequence.GeneticCode.from_ncbi", "generated/skbio.sequence.GeneticCode.translate", "generated/skbio.sequence.GeneticCode.translate_six_frames", "generated/skbio.sequence.GrammaredSequence", "generated/skbio.sequence.GrammaredSequence.__bool__", "generated/skbio.sequence.GrammaredSequence.__contains__", "generated/skbio.sequence.GrammaredSequence.__copy__", "generated/skbio.sequence.GrammaredSequence.__deepcopy__", "generated/skbio.sequence.GrammaredSequence.__eq__", "generated/skbio.sequence.GrammaredSequence.__ge__", "generated/skbio.sequence.GrammaredSequence.__getitem__", "generated/skbio.sequence.GrammaredSequence.__getstate__", "generated/skbio.sequence.GrammaredSequence.__gt__", "generated/skbio.sequence.GrammaredSequence.__iter__", "generated/skbio.sequence.GrammaredSequence.__le__", "generated/skbio.sequence.GrammaredSequence.__len__", "generated/skbio.sequence.GrammaredSequence.__lt__", "generated/skbio.sequence.GrammaredSequence.__ne__", "generated/skbio.sequence.GrammaredSequence.__reversed__", "generated/skbio.sequence.GrammaredSequence.__str__", "generated/skbio.sequence.GrammaredSequence.concat", "generated/skbio.sequence.GrammaredSequence.count", "generated/skbio.sequence.GrammaredSequence.definites", "generated/skbio.sequence.GrammaredSequence.degap", "generated/skbio.sequence.GrammaredSequence.degenerates", "generated/skbio.sequence.GrammaredSequence.distance", "generated/skbio.sequence.GrammaredSequence.expand_degenerates", "generated/skbio.sequence.GrammaredSequence.find_motifs", "generated/skbio.sequence.GrammaredSequence.find_with_regex", "generated/skbio.sequence.GrammaredSequence.frequencies", "generated/skbio.sequence.GrammaredSequence.gaps", "generated/skbio.sequence.GrammaredSequence.has_definites", "generated/skbio.sequence.GrammaredSequence.has_degenerates", "generated/skbio.sequence.GrammaredSequence.has_gaps", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata", "generated/skbio.sequence.GrammaredSequence.has_metadata", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata", "generated/skbio.sequence.GrammaredSequence.index", "generated/skbio.sequence.GrammaredSequence.iter_contiguous", "generated/skbio.sequence.GrammaredSequence.iter_kmers", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies", "generated/skbio.sequence.GrammaredSequence.lowercase", "generated/skbio.sequence.GrammaredSequence.match_frequency", "generated/skbio.sequence.GrammaredSequence.matches", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency", "generated/skbio.sequence.GrammaredSequence.mismatches", "generated/skbio.sequence.GrammaredSequence.nondegenerates", "generated/skbio.sequence.GrammaredSequence.read", "generated/skbio.sequence.GrammaredSequence.replace", "generated/skbio.sequence.GrammaredSequence.to_definites", "generated/skbio.sequence.GrammaredSequence.to_indices", "generated/skbio.sequence.GrammaredSequence.to_regex", "generated/skbio.sequence.GrammaredSequence.write", "generated/skbio.sequence.Protein", "generated/skbio.sequence.Protein.__bool__", "generated/skbio.sequence.Protein.__contains__", "generated/skbio.sequence.Protein.__copy__", "generated/skbio.sequence.Protein.__deepcopy__", "generated/skbio.sequence.Protein.__eq__", "generated/skbio.sequence.Protein.__ge__", "generated/skbio.sequence.Protein.__getitem__", "generated/skbio.sequence.Protein.__getstate__", "generated/skbio.sequence.Protein.__gt__", "generated/skbio.sequence.Protein.__iter__", "generated/skbio.sequence.Protein.__le__", "generated/skbio.sequence.Protein.__len__", "generated/skbio.sequence.Protein.__lt__", "generated/skbio.sequence.Protein.__ne__", "generated/skbio.sequence.Protein.__reversed__", "generated/skbio.sequence.Protein.__str__", "generated/skbio.sequence.Protein.concat", "generated/skbio.sequence.Protein.count", "generated/skbio.sequence.Protein.definites", "generated/skbio.sequence.Protein.degap", "generated/skbio.sequence.Protein.degenerates", "generated/skbio.sequence.Protein.distance", "generated/skbio.sequence.Protein.expand_degenerates", "generated/skbio.sequence.Protein.find_motifs", "generated/skbio.sequence.Protein.find_with_regex", "generated/skbio.sequence.Protein.frequencies", "generated/skbio.sequence.Protein.gaps", "generated/skbio.sequence.Protein.has_definites", "generated/skbio.sequence.Protein.has_degenerates", "generated/skbio.sequence.Protein.has_gaps", "generated/skbio.sequence.Protein.has_interval_metadata", "generated/skbio.sequence.Protein.has_metadata", "generated/skbio.sequence.Protein.has_nondegenerates", "generated/skbio.sequence.Protein.has_positional_metadata", "generated/skbio.sequence.Protein.has_stops", "generated/skbio.sequence.Protein.index", "generated/skbio.sequence.Protein.iter_contiguous", "generated/skbio.sequence.Protein.iter_kmers", "generated/skbio.sequence.Protein.kmer_frequencies", "generated/skbio.sequence.Protein.lowercase", "generated/skbio.sequence.Protein.match_frequency", "generated/skbio.sequence.Protein.matches", "generated/skbio.sequence.Protein.mismatch_frequency", "generated/skbio.sequence.Protein.mismatches", "generated/skbio.sequence.Protein.nondegenerates", "generated/skbio.sequence.Protein.read", "generated/skbio.sequence.Protein.replace", "generated/skbio.sequence.Protein.stops", "generated/skbio.sequence.Protein.to_definites", "generated/skbio.sequence.Protein.to_indices", "generated/skbio.sequence.Protein.to_regex", "generated/skbio.sequence.Protein.write", "generated/skbio.sequence.RNA", "generated/skbio.sequence.RNA.__bool__", "generated/skbio.sequence.RNA.__contains__", "generated/skbio.sequence.RNA.__copy__", "generated/skbio.sequence.RNA.__deepcopy__", "generated/skbio.sequence.RNA.__eq__", "generated/skbio.sequence.RNA.__ge__", "generated/skbio.sequence.RNA.__getitem__", "generated/skbio.sequence.RNA.__getstate__", "generated/skbio.sequence.RNA.__gt__", "generated/skbio.sequence.RNA.__iter__", "generated/skbio.sequence.RNA.__le__", "generated/skbio.sequence.RNA.__len__", "generated/skbio.sequence.RNA.__lt__", "generated/skbio.sequence.RNA.__ne__", "generated/skbio.sequence.RNA.__reversed__", "generated/skbio.sequence.RNA.__str__", "generated/skbio.sequence.RNA.complement", "generated/skbio.sequence.RNA.concat", "generated/skbio.sequence.RNA.count", "generated/skbio.sequence.RNA.definites", "generated/skbio.sequence.RNA.degap", "generated/skbio.sequence.RNA.degenerates", "generated/skbio.sequence.RNA.distance", "generated/skbio.sequence.RNA.expand_degenerates", "generated/skbio.sequence.RNA.find_motifs", "generated/skbio.sequence.RNA.find_with_regex", "generated/skbio.sequence.RNA.frequencies", "generated/skbio.sequence.RNA.gaps", "generated/skbio.sequence.RNA.gc_content", "generated/skbio.sequence.RNA.gc_frequency", "generated/skbio.sequence.RNA.has_definites", "generated/skbio.sequence.RNA.has_degenerates", "generated/skbio.sequence.RNA.has_gaps", "generated/skbio.sequence.RNA.has_interval_metadata", "generated/skbio.sequence.RNA.has_metadata", "generated/skbio.sequence.RNA.has_nondegenerates", "generated/skbio.sequence.RNA.has_positional_metadata", "generated/skbio.sequence.RNA.index", "generated/skbio.sequence.RNA.is_reverse_complement", "generated/skbio.sequence.RNA.iter_contiguous", "generated/skbio.sequence.RNA.iter_kmers", "generated/skbio.sequence.RNA.kmer_frequencies", "generated/skbio.sequence.RNA.lowercase", "generated/skbio.sequence.RNA.match_frequency", "generated/skbio.sequence.RNA.matches", "generated/skbio.sequence.RNA.mismatch_frequency", "generated/skbio.sequence.RNA.mismatches", "generated/skbio.sequence.RNA.nondegenerates", "generated/skbio.sequence.RNA.read", "generated/skbio.sequence.RNA.replace", "generated/skbio.sequence.RNA.reverse_complement", "generated/skbio.sequence.RNA.reverse_transcribe", "generated/skbio.sequence.RNA.to_definites", "generated/skbio.sequence.RNA.to_indices", "generated/skbio.sequence.RNA.to_regex", "generated/skbio.sequence.RNA.translate", "generated/skbio.sequence.RNA.translate_six_frames", "generated/skbio.sequence.RNA.write", "generated/skbio.sequence.Sequence", "generated/skbio.sequence.Sequence.__bool__", "generated/skbio.sequence.Sequence.__contains__", "generated/skbio.sequence.Sequence.__copy__", "generated/skbio.sequence.Sequence.__deepcopy__", "generated/skbio.sequence.Sequence.__eq__", "generated/skbio.sequence.Sequence.__ge__", "generated/skbio.sequence.Sequence.__getitem__", "generated/skbio.sequence.Sequence.__getstate__", "generated/skbio.sequence.Sequence.__gt__", "generated/skbio.sequence.Sequence.__iter__", "generated/skbio.sequence.Sequence.__le__", "generated/skbio.sequence.Sequence.__len__", "generated/skbio.sequence.Sequence.__lt__", "generated/skbio.sequence.Sequence.__ne__", "generated/skbio.sequence.Sequence.__reversed__", "generated/skbio.sequence.Sequence.__str__", "generated/skbio.sequence.Sequence.concat", "generated/skbio.sequence.Sequence.count", "generated/skbio.sequence.Sequence.distance", "generated/skbio.sequence.Sequence.find_with_regex", "generated/skbio.sequence.Sequence.frequencies", "generated/skbio.sequence.Sequence.has_interval_metadata", "generated/skbio.sequence.Sequence.has_metadata", "generated/skbio.sequence.Sequence.has_positional_metadata", "generated/skbio.sequence.Sequence.index", "generated/skbio.sequence.Sequence.iter_contiguous", "generated/skbio.sequence.Sequence.iter_kmers", "generated/skbio.sequence.Sequence.kmer_frequencies", "generated/skbio.sequence.Sequence.lowercase", "generated/skbio.sequence.Sequence.match_frequency", "generated/skbio.sequence.Sequence.matches", "generated/skbio.sequence.Sequence.mismatch_frequency", "generated/skbio.sequence.Sequence.mismatches", "generated/skbio.sequence.Sequence.read", "generated/skbio.sequence.Sequence.replace", "generated/skbio.sequence.Sequence.to_indices", "generated/skbio.sequence.Sequence.write", "generated/skbio.sequence.SubstitutionMatrix", "generated/skbio.sequence.SubstitutionMatrix.__contains__", "generated/skbio.sequence.SubstitutionMatrix.__eq__", "generated/skbio.sequence.SubstitutionMatrix.__ge__", "generated/skbio.sequence.SubstitutionMatrix.__getitem__", "generated/skbio.sequence.SubstitutionMatrix.__getstate__", "generated/skbio.sequence.SubstitutionMatrix.__gt__", "generated/skbio.sequence.SubstitutionMatrix.__le__", "generated/skbio.sequence.SubstitutionMatrix.__lt__", "generated/skbio.sequence.SubstitutionMatrix.__ne__", "generated/skbio.sequence.SubstitutionMatrix.__str__", "generated/skbio.sequence.SubstitutionMatrix.between", "generated/skbio.sequence.SubstitutionMatrix.by_name", "generated/skbio.sequence.SubstitutionMatrix.copy", "generated/skbio.sequence.SubstitutionMatrix.filter", "generated/skbio.sequence.SubstitutionMatrix.from_dict", "generated/skbio.sequence.SubstitutionMatrix.from_iterable", "generated/skbio.sequence.SubstitutionMatrix.get_names", "generated/skbio.sequence.SubstitutionMatrix.identity", "generated/skbio.sequence.SubstitutionMatrix.index", "generated/skbio.sequence.SubstitutionMatrix.plot", "generated/skbio.sequence.SubstitutionMatrix.read", "generated/skbio.sequence.SubstitutionMatrix.redundant_form", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame", "generated/skbio.sequence.SubstitutionMatrix.to_dict", "generated/skbio.sequence.SubstitutionMatrix.transpose", "generated/skbio.sequence.SubstitutionMatrix.within", "generated/skbio.sequence.SubstitutionMatrix.write", "generated/skbio.sequence.distance", "generated/skbio.sequence.distance.hamming", "generated/skbio.sequence.distance.kmer_distance", "generated/skbio.stats.composition", "generated/skbio.stats.composition.alr", "generated/skbio.stats.composition.alr_inv", "generated/skbio.stats.composition.ancom", "generated/skbio.stats.composition.centralize", "generated/skbio.stats.composition.closure", "generated/skbio.stats.composition.clr", "generated/skbio.stats.composition.clr_inv", "generated/skbio.stats.composition.dirmult_ttest", "generated/skbio.stats.composition.ilr", "generated/skbio.stats.composition.ilr_inv", "generated/skbio.stats.composition.inner", "generated/skbio.stats.composition.multi_replace", "generated/skbio.stats.composition.multiplicative_replacement", "generated/skbio.stats.composition.pairwise_vlr", "generated/skbio.stats.composition.perturb", "generated/skbio.stats.composition.perturb_inv", "generated/skbio.stats.composition.power", "generated/skbio.stats.composition.sbp_basis", "generated/skbio.stats.composition.tree_basis", "generated/skbio.stats.composition.vlr", "generated/skbio.stats.distance", "generated/skbio.stats.distance.DissimilarityMatrix", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__", "generated/skbio.stats.distance.DissimilarityMatrix.__le__", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__", "generated/skbio.stats.distance.DissimilarityMatrix.__str__", "generated/skbio.stats.distance.DissimilarityMatrix.between", "generated/skbio.stats.distance.DissimilarityMatrix.copy", "generated/skbio.stats.distance.DissimilarityMatrix.filter", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable", "generated/skbio.stats.distance.DissimilarityMatrix.index", "generated/skbio.stats.distance.DissimilarityMatrix.plot", "generated/skbio.stats.distance.DissimilarityMatrix.read", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame", "generated/skbio.stats.distance.DissimilarityMatrix.transpose", "generated/skbio.stats.distance.DissimilarityMatrix.within", "generated/skbio.stats.distance.DissimilarityMatrix.write", "generated/skbio.stats.distance.DistanceMatrix", "generated/skbio.stats.distance.DistanceMatrix.__contains__", "generated/skbio.stats.distance.DistanceMatrix.__eq__", "generated/skbio.stats.distance.DistanceMatrix.__ge__", "generated/skbio.stats.distance.DistanceMatrix.__getitem__", "generated/skbio.stats.distance.DistanceMatrix.__getstate__", "generated/skbio.stats.distance.DistanceMatrix.__gt__", "generated/skbio.stats.distance.DistanceMatrix.__le__", "generated/skbio.stats.distance.DistanceMatrix.__lt__", "generated/skbio.stats.distance.DistanceMatrix.__ne__", "generated/skbio.stats.distance.DistanceMatrix.__str__", "generated/skbio.stats.distance.DistanceMatrix.between", "generated/skbio.stats.distance.DistanceMatrix.condensed_form", "generated/skbio.stats.distance.DistanceMatrix.copy", "generated/skbio.stats.distance.DistanceMatrix.filter", "generated/skbio.stats.distance.DistanceMatrix.from_iterable", "generated/skbio.stats.distance.DistanceMatrix.index", "generated/skbio.stats.distance.DistanceMatrix.permute", "generated/skbio.stats.distance.DistanceMatrix.plot", "generated/skbio.stats.distance.DistanceMatrix.read", "generated/skbio.stats.distance.DistanceMatrix.redundant_form", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame", "generated/skbio.stats.distance.DistanceMatrix.to_series", "generated/skbio.stats.distance.DistanceMatrix.transpose", "generated/skbio.stats.distance.DistanceMatrix.within", "generated/skbio.stats.distance.DistanceMatrix.write", "generated/skbio.stats.distance.anosim", "generated/skbio.stats.distance.bioenv", "generated/skbio.stats.distance.mantel", "generated/skbio.stats.distance.permanova", "generated/skbio.stats.distance.permdisp", "generated/skbio.stats.distance.pwmantel", "generated/skbio.stats.distance.randdm", "generated/skbio.stats.evolve", "generated/skbio.stats.evolve.hommola_cospeciation", "generated/skbio.stats.gradient", "generated/skbio.stats.gradient.AverageGradientANOVA", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.CategoryResults", "generated/skbio.stats.gradient.CategoryResults.__eq__", "generated/skbio.stats.gradient.CategoryResults.__ge__", "generated/skbio.stats.gradient.CategoryResults.__getstate__", "generated/skbio.stats.gradient.CategoryResults.__gt__", "generated/skbio.stats.gradient.CategoryResults.__hash__", "generated/skbio.stats.gradient.CategoryResults.__le__", "generated/skbio.stats.gradient.CategoryResults.__lt__", "generated/skbio.stats.gradient.CategoryResults.__ne__", "generated/skbio.stats.gradient.CategoryResults.__str__", "generated/skbio.stats.gradient.CategoryResults.to_files", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVA", "generated/skbio.stats.gradient.GradientANOVA.__eq__", "generated/skbio.stats.gradient.GradientANOVA.__ge__", "generated/skbio.stats.gradient.GradientANOVA.__getstate__", "generated/skbio.stats.gradient.GradientANOVA.__gt__", "generated/skbio.stats.gradient.GradientANOVA.__hash__", "generated/skbio.stats.gradient.GradientANOVA.__le__", "generated/skbio.stats.gradient.GradientANOVA.__lt__", "generated/skbio.stats.gradient.GradientANOVA.__ne__", "generated/skbio.stats.gradient.GradientANOVA.__str__", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVAResults", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__", "generated/skbio.stats.gradient.GradientANOVAResults.__le__", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__", "generated/skbio.stats.gradient.GradientANOVAResults.__str__", "generated/skbio.stats.gradient.GradientANOVAResults.to_files", "generated/skbio.stats.gradient.GroupResults", "generated/skbio.stats.gradient.GroupResults.__eq__", "generated/skbio.stats.gradient.GroupResults.__ge__", "generated/skbio.stats.gradient.GroupResults.__getstate__", "generated/skbio.stats.gradient.GroupResults.__gt__", "generated/skbio.stats.gradient.GroupResults.__hash__", "generated/skbio.stats.gradient.GroupResults.__le__", "generated/skbio.stats.gradient.GroupResults.__lt__", "generated/skbio.stats.gradient.GroupResults.__ne__", "generated/skbio.stats.gradient.GroupResults.__str__", "generated/skbio.stats.gradient.GroupResults.to_files", "generated/skbio.stats.gradient.TrajectoryGradientANOVA", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.isubsample", "generated/skbio.stats.ordination", "generated/skbio.stats.ordination.OrdinationResults", "generated/skbio.stats.ordination.OrdinationResults.__eq__", "generated/skbio.stats.ordination.OrdinationResults.__ge__", "generated/skbio.stats.ordination.OrdinationResults.__getstate__", "generated/skbio.stats.ordination.OrdinationResults.__gt__", "generated/skbio.stats.ordination.OrdinationResults.__hash__", "generated/skbio.stats.ordination.OrdinationResults.__le__", "generated/skbio.stats.ordination.OrdinationResults.__lt__", "generated/skbio.stats.ordination.OrdinationResults.__ne__", "generated/skbio.stats.ordination.OrdinationResults.__str__", "generated/skbio.stats.ordination.OrdinationResults.plot", "generated/skbio.stats.ordination.OrdinationResults.read", "generated/skbio.stats.ordination.OrdinationResults.write", "generated/skbio.stats.ordination.ca", "generated/skbio.stats.ordination.cca", "generated/skbio.stats.ordination.corr", "generated/skbio.stats.ordination.e_matrix", "generated/skbio.stats.ordination.f_matrix", "generated/skbio.stats.ordination.mean_and_std", "generated/skbio.stats.ordination.pcoa", "generated/skbio.stats.ordination.pcoa_biplot", "generated/skbio.stats.ordination.rda", "generated/skbio.stats.ordination.scale", "generated/skbio.stats.ordination.svd_rank", "generated/skbio.stats.power", "generated/skbio.stats.power.confidence_bound", "generated/skbio.stats.power.paired_subsamples", "generated/skbio.stats.power.subsample_paired_power", "generated/skbio.stats.power.subsample_power", "generated/skbio.stats.subsample_counts", "generated/skbio.table.Table", "generated/skbio.table.Table.__eq__", "generated/skbio.table.Table.__ge__", "generated/skbio.table.Table.__getitem__", "generated/skbio.table.Table.__getstate__", "generated/skbio.table.Table.__gt__", "generated/skbio.table.Table.__iter__", "generated/skbio.table.Table.__le__", "generated/skbio.table.Table.__lt__", "generated/skbio.table.Table.__ne__", "generated/skbio.table.Table.__str__", "generated/skbio.table.Table.add_group_metadata", "generated/skbio.table.Table.add_metadata", "generated/skbio.table.Table.align_to", "generated/skbio.table.Table.align_to_dataframe", "generated/skbio.table.Table.align_tree", "generated/skbio.table.Table.collapse", "generated/skbio.table.Table.concat", "generated/skbio.table.Table.copy", "generated/skbio.table.Table.data", "generated/skbio.table.Table.del_metadata", "generated/skbio.table.Table.delimited_self", "generated/skbio.table.Table.descriptive_equality", "generated/skbio.table.Table.exists", "generated/skbio.table.Table.filter", "generated/skbio.table.Table.from_adjacency", "generated/skbio.table.Table.from_hdf5", "generated/skbio.table.Table.from_json", "generated/skbio.table.Table.from_tsv", "generated/skbio.table.Table.get_table_density", "generated/skbio.table.Table.get_value_by_ids", "generated/skbio.table.Table.group_metadata", "generated/skbio.table.Table.head", "generated/skbio.table.Table.ids", "generated/skbio.table.Table.index", "generated/skbio.table.Table.is_empty", "generated/skbio.table.Table.iter", "generated/skbio.table.Table.iter_data", "generated/skbio.table.Table.iter_pairwise", "generated/skbio.table.Table.length", "generated/skbio.table.Table.max", "generated/skbio.table.Table.merge", "generated/skbio.table.Table.metadata", "generated/skbio.table.Table.metadata_to_dataframe", "generated/skbio.table.Table.min", "generated/skbio.table.Table.nonzero", "generated/skbio.table.Table.nonzero_counts", "generated/skbio.table.Table.norm", "generated/skbio.table.Table.pa", "generated/skbio.table.Table.partition", "generated/skbio.table.Table.rankdata", "generated/skbio.table.Table.read", "generated/skbio.table.Table.reduce", "generated/skbio.table.Table.remove_empty", "generated/skbio.table.Table.sort", "generated/skbio.table.Table.sort_order", "generated/skbio.table.Table.subsample", "generated/skbio.table.Table.sum", "generated/skbio.table.Table.to_anndata", "generated/skbio.table.Table.to_dataframe", "generated/skbio.table.Table.to_hdf5", "generated/skbio.table.Table.to_json", "generated/skbio.table.Table.to_tsv", "generated/skbio.table.Table.transform", "generated/skbio.table.Table.transpose", "generated/skbio.table.Table.update_ids", "generated/skbio.table.Table.write", "generated/skbio.table.example_table", "generated/skbio.tree.TreeNode", "generated/skbio.tree.TreeNode.__copy__", "generated/skbio.tree.TreeNode.__deepcopy__", "generated/skbio.tree.TreeNode.__eq__", "generated/skbio.tree.TreeNode.__ge__", "generated/skbio.tree.TreeNode.__getitem__", "generated/skbio.tree.TreeNode.__getstate__", "generated/skbio.tree.TreeNode.__gt__", "generated/skbio.tree.TreeNode.__hash__", "generated/skbio.tree.TreeNode.__iter__", "generated/skbio.tree.TreeNode.__le__", "generated/skbio.tree.TreeNode.__len__", "generated/skbio.tree.TreeNode.__lt__", "generated/skbio.tree.TreeNode.__ne__", "generated/skbio.tree.TreeNode.__str__", "generated/skbio.tree.TreeNode.accumulate_to_ancestor", "generated/skbio.tree.TreeNode.ancestors", "generated/skbio.tree.TreeNode.append", "generated/skbio.tree.TreeNode.ascii_art", "generated/skbio.tree.TreeNode.assign_ids", "generated/skbio.tree.TreeNode.assign_supports", "generated/skbio.tree.TreeNode.bifurcate", "generated/skbio.tree.TreeNode.cache_attr", "generated/skbio.tree.TreeNode.compare_rfd", "generated/skbio.tree.TreeNode.compare_subsets", "generated/skbio.tree.TreeNode.compare_tip_distances", "generated/skbio.tree.TreeNode.copy", "generated/skbio.tree.TreeNode.count", "generated/skbio.tree.TreeNode.create_caches", "generated/skbio.tree.TreeNode.deepcopy", "generated/skbio.tree.TreeNode.descending_branch_length", "generated/skbio.tree.TreeNode.distance", "generated/skbio.tree.TreeNode.extend", "generated/skbio.tree.TreeNode.find", "generated/skbio.tree.TreeNode.find_all", "generated/skbio.tree.TreeNode.find_by_func", "generated/skbio.tree.TreeNode.find_by_id", "generated/skbio.tree.TreeNode.from_linkage_matrix", "generated/skbio.tree.TreeNode.from_taxdump", "generated/skbio.tree.TreeNode.from_taxonomy", "generated/skbio.tree.TreeNode.get_max_distance", "generated/skbio.tree.TreeNode.has_children", "generated/skbio.tree.TreeNode.index_tree", "generated/skbio.tree.TreeNode.invalidate_caches", "generated/skbio.tree.TreeNode.is_root", "generated/skbio.tree.TreeNode.is_tip", "generated/skbio.tree.TreeNode.lca", "generated/skbio.tree.TreeNode.levelorder", "generated/skbio.tree.TreeNode.lowest_common_ancestor", "generated/skbio.tree.TreeNode.neighbors", "generated/skbio.tree.TreeNode.non_tips", "generated/skbio.tree.TreeNode.observed_node_counts", "generated/skbio.tree.TreeNode.pop", "generated/skbio.tree.TreeNode.postorder", "generated/skbio.tree.TreeNode.pre_and_postorder", "generated/skbio.tree.TreeNode.preorder", "generated/skbio.tree.TreeNode.prune", "generated/skbio.tree.TreeNode.read", "generated/skbio.tree.TreeNode.remove", "generated/skbio.tree.TreeNode.remove_deleted", "generated/skbio.tree.TreeNode.root", "generated/skbio.tree.TreeNode.root_at", "generated/skbio.tree.TreeNode.root_at_midpoint", "generated/skbio.tree.TreeNode.shear", "generated/skbio.tree.TreeNode.shuffle", "generated/skbio.tree.TreeNode.siblings", "generated/skbio.tree.TreeNode.subset", "generated/skbio.tree.TreeNode.subsets", "generated/skbio.tree.TreeNode.subtree", "generated/skbio.tree.TreeNode.tip_tip_distances", "generated/skbio.tree.TreeNode.tips", "generated/skbio.tree.TreeNode.to_array", "generated/skbio.tree.TreeNode.to_taxonomy", "generated/skbio.tree.TreeNode.traverse", "generated/skbio.tree.TreeNode.unpack", "generated/skbio.tree.TreeNode.unpack_by_func", "generated/skbio.tree.TreeNode.unrooted_copy", "generated/skbio.tree.TreeNode.unrooted_deepcopy", "generated/skbio.tree.TreeNode.write", "generated/skbio.tree.majority_rule", "generated/skbio.tree.nj", "generated/skbio.util.EfficiencyWarning", "generated/skbio.util.RepresentationWarning", "generated/skbio.util.assert_data_frame_almost_equal", "generated/skbio.util.assert_ordination_results_equal", "generated/skbio.util.cardinal_to_ordinal", "generated/skbio.util.classproperty", "generated/skbio.util.classproperty.__delete__", "generated/skbio.util.classproperty.__eq__", "generated/skbio.util.classproperty.__ge__", "generated/skbio.util.classproperty.__get__", "generated/skbio.util.classproperty.__getstate__", "generated/skbio.util.classproperty.__gt__", "generated/skbio.util.classproperty.__hash__", "generated/skbio.util.classproperty.__le__", "generated/skbio.util.classproperty.__lt__", "generated/skbio.util.classproperty.__ne__", "generated/skbio.util.classproperty.__set__", "generated/skbio.util.classproperty.__set_name__", "generated/skbio.util.classproperty.__str__", "generated/skbio.util.classproperty.deleter", "generated/skbio.util.classproperty.getter", "generated/skbio.util.classproperty.setter", "generated/skbio.util.find_duplicates", "generated/skbio.util.get_data_path", "generated/skbio.util.safe_md5", "generated/skbio.workflow.Workflow", "generated/skbio.workflow.Workflow.__call__", "generated/skbio.workflow.Workflow.__eq__", "generated/skbio.workflow.Workflow.__ge__", "generated/skbio.workflow.Workflow.__getstate__", "generated/skbio.workflow.Workflow.__gt__", "generated/skbio.workflow.Workflow.__hash__", "generated/skbio.workflow.Workflow.__le__", "generated/skbio.workflow.Workflow.__lt__", "generated/skbio.workflow.Workflow.__ne__", "generated/skbio.workflow.Workflow.__str__", "generated/skbio.workflow.Workflow.initialize_state", "generated/skbio.workflow.method", "generated/skbio.workflow.method.__call__", "generated/skbio.workflow.method.__eq__", "generated/skbio.workflow.method.__ge__", "generated/skbio.workflow.method.__getstate__", "generated/skbio.workflow.method.__gt__", "generated/skbio.workflow.method.__hash__", "generated/skbio.workflow.method.__le__", "generated/skbio.workflow.method.__lt__", "generated/skbio.workflow.method.__ne__", "generated/skbio.workflow.method.__str__", "generated/skbio.workflow.requires", "generated/skbio.workflow.requires.__call__", "generated/skbio.workflow.requires.__eq__", "generated/skbio.workflow.requires.__ge__", "generated/skbio.workflow.requires.__getstate__", "generated/skbio.workflow.requires.__gt__", "generated/skbio.workflow.requires.__hash__", "generated/skbio.workflow.requires.__le__", "generated/skbio.workflow.requires.__lt__", "generated/skbio.workflow.requires.__ne__", "generated/skbio.workflow.requires.__str__", "index", "io", "metadata", "sequence", "stats", "table", "tree", "util", "workflow"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["alignment.rst", "diversity.rst", "embedding.rst", "generated/skbio.alignment.AlignPath.rst", "generated/skbio.alignment.AlignPath.__eq__.rst", "generated/skbio.alignment.AlignPath.__ge__.rst", "generated/skbio.alignment.AlignPath.__getstate__.rst", "generated/skbio.alignment.AlignPath.__gt__.rst", "generated/skbio.alignment.AlignPath.__hash__.rst", "generated/skbio.alignment.AlignPath.__le__.rst", "generated/skbio.alignment.AlignPath.__lt__.rst", "generated/skbio.alignment.AlignPath.__ne__.rst", "generated/skbio.alignment.AlignPath.__str__.rst", "generated/skbio.alignment.AlignPath.from_bits.rst", "generated/skbio.alignment.AlignPath.from_coordinates.rst", "generated/skbio.alignment.AlignPath.from_indices.rst", "generated/skbio.alignment.AlignPath.from_tabular.rst", "generated/skbio.alignment.AlignPath.to_bits.rst", "generated/skbio.alignment.AlignPath.to_coordinates.rst", "generated/skbio.alignment.AlignPath.to_indices.rst", "generated/skbio.alignment.AlignmentStructure.rst", "generated/skbio.alignment.AlignmentStructure.__eq__.rst", "generated/skbio.alignment.AlignmentStructure.__ge__.rst", "generated/skbio.alignment.AlignmentStructure.__getitem__.rst", "generated/skbio.alignment.AlignmentStructure.__getstate__.rst", "generated/skbio.alignment.AlignmentStructure.__gt__.rst", "generated/skbio.alignment.AlignmentStructure.__hash__.rst", "generated/skbio.alignment.AlignmentStructure.__le__.rst", "generated/skbio.alignment.AlignmentStructure.__lt__.rst", "generated/skbio.alignment.AlignmentStructure.__ne__.rst", "generated/skbio.alignment.AlignmentStructure.__setstate__.rst", "generated/skbio.alignment.AlignmentStructure.__str__.rst", "generated/skbio.alignment.AlignmentStructure.is_zero_based.rst", "generated/skbio.alignment.AlignmentStructure.set_zero_based.rst", "generated/skbio.alignment.PairAlignPath.rst", "generated/skbio.alignment.PairAlignPath.__eq__.rst", "generated/skbio.alignment.PairAlignPath.__ge__.rst", "generated/skbio.alignment.PairAlignPath.__getstate__.rst", "generated/skbio.alignment.PairAlignPath.__gt__.rst", "generated/skbio.alignment.PairAlignPath.__hash__.rst", "generated/skbio.alignment.PairAlignPath.__le__.rst", "generated/skbio.alignment.PairAlignPath.__lt__.rst", "generated/skbio.alignment.PairAlignPath.__ne__.rst", "generated/skbio.alignment.PairAlignPath.__str__.rst", "generated/skbio.alignment.PairAlignPath.from_bits.rst", "generated/skbio.alignment.PairAlignPath.from_cigar.rst", "generated/skbio.alignment.PairAlignPath.from_coordinates.rst", "generated/skbio.alignment.PairAlignPath.from_indices.rst", "generated/skbio.alignment.PairAlignPath.from_tabular.rst", "generated/skbio.alignment.PairAlignPath.to_bits.rst", "generated/skbio.alignment.PairAlignPath.to_cigar.rst", "generated/skbio.alignment.PairAlignPath.to_coordinates.rst", "generated/skbio.alignment.PairAlignPath.to_indices.rst", "generated/skbio.alignment.StripedSmithWaterman.rst", "generated/skbio.alignment.StripedSmithWaterman.__call__.rst", "generated/skbio.alignment.StripedSmithWaterman.__eq__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ge__.rst", "generated/skbio.alignment.StripedSmithWaterman.__getstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__gt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__hash__.rst", "generated/skbio.alignment.StripedSmithWaterman.__le__.rst", "generated/skbio.alignment.StripedSmithWaterman.__lt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ne__.rst", "generated/skbio.alignment.StripedSmithWaterman.__setstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__str__.rst", "generated/skbio.alignment.TabularMSA.rst", "generated/skbio.alignment.TabularMSA.__bool__.rst", "generated/skbio.alignment.TabularMSA.__contains__.rst", "generated/skbio.alignment.TabularMSA.__copy__.rst", "generated/skbio.alignment.TabularMSA.__deepcopy__.rst", "generated/skbio.alignment.TabularMSA.__eq__.rst", "generated/skbio.alignment.TabularMSA.__ge__.rst", "generated/skbio.alignment.TabularMSA.__getitem__.rst", "generated/skbio.alignment.TabularMSA.__getstate__.rst", "generated/skbio.alignment.TabularMSA.__gt__.rst", "generated/skbio.alignment.TabularMSA.__iter__.rst", "generated/skbio.alignment.TabularMSA.__le__.rst", "generated/skbio.alignment.TabularMSA.__len__.rst", "generated/skbio.alignment.TabularMSA.__lt__.rst", "generated/skbio.alignment.TabularMSA.__ne__.rst", "generated/skbio.alignment.TabularMSA.__reversed__.rst", "generated/skbio.alignment.TabularMSA.__str__.rst", "generated/skbio.alignment.TabularMSA.append.rst", "generated/skbio.alignment.TabularMSA.consensus.rst", "generated/skbio.alignment.TabularMSA.conservation.rst", "generated/skbio.alignment.TabularMSA.extend.rst", "generated/skbio.alignment.TabularMSA.from_dict.rst", "generated/skbio.alignment.TabularMSA.from_path_seqs.rst", "generated/skbio.alignment.TabularMSA.gap_frequencies.rst", "generated/skbio.alignment.TabularMSA.has_metadata.rst", "generated/skbio.alignment.TabularMSA.has_positional_metadata.rst", "generated/skbio.alignment.TabularMSA.iter_positions.rst", "generated/skbio.alignment.TabularMSA.join.rst", "generated/skbio.alignment.TabularMSA.read.rst", "generated/skbio.alignment.TabularMSA.reassign_index.rst", "generated/skbio.alignment.TabularMSA.sort.rst", "generated/skbio.alignment.TabularMSA.to_dict.rst", "generated/skbio.alignment.TabularMSA.write.rst", "generated/skbio.alignment.global_pairwise_align.rst", "generated/skbio.alignment.global_pairwise_align_nucleotide.rst", "generated/skbio.alignment.global_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align.rst", "generated/skbio.alignment.local_pairwise_align_nucleotide.rst", "generated/skbio.alignment.local_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align_ssw.rst", "generated/skbio.alignment.make_identity_substitution_matrix.rst", "generated/skbio.diversity.alpha.rst", "generated/skbio.diversity.alpha.ace.rst", "generated/skbio.diversity.alpha.berger_parker_d.rst", "generated/skbio.diversity.alpha.brillouin_d.rst", "generated/skbio.diversity.alpha.chao1.rst", "generated/skbio.diversity.alpha.chao1_ci.rst", "generated/skbio.diversity.alpha.dominance.rst", "generated/skbio.diversity.alpha.doubles.rst", "generated/skbio.diversity.alpha.enspie.rst", "generated/skbio.diversity.alpha.esty_ci.rst", "generated/skbio.diversity.alpha.faith_pd.rst", "generated/skbio.diversity.alpha.fisher_alpha.rst", "generated/skbio.diversity.alpha.gini_index.rst", "generated/skbio.diversity.alpha.goods_coverage.rst", "generated/skbio.diversity.alpha.heip_e.rst", "generated/skbio.diversity.alpha.inv_simpson.rst", "generated/skbio.diversity.alpha.kempton_taylor_q.rst", "generated/skbio.diversity.alpha.lladser_ci.rst", "generated/skbio.diversity.alpha.lladser_pe.rst", "generated/skbio.diversity.alpha.margalef.rst", "generated/skbio.diversity.alpha.mcintosh_d.rst", "generated/skbio.diversity.alpha.mcintosh_e.rst", "generated/skbio.diversity.alpha.menhinick.rst", "generated/skbio.diversity.alpha.michaelis_menten_fit.rst", "generated/skbio.diversity.alpha.observed_features.rst", "generated/skbio.diversity.alpha.observed_otus.rst", "generated/skbio.diversity.alpha.osd.rst", "generated/skbio.diversity.alpha.phydiv.rst", "generated/skbio.diversity.alpha.pielou_e.rst", "generated/skbio.diversity.alpha.robbins.rst", "generated/skbio.diversity.alpha.shannon.rst", "generated/skbio.diversity.alpha.simpson.rst", "generated/skbio.diversity.alpha.simpson_d.rst", "generated/skbio.diversity.alpha.simpson_e.rst", "generated/skbio.diversity.alpha.singles.rst", "generated/skbio.diversity.alpha.sobs.rst", "generated/skbio.diversity.alpha.strong.rst", "generated/skbio.diversity.alpha_diversity.rst", "generated/skbio.diversity.beta.rst", "generated/skbio.diversity.beta.unweighted_unifrac.rst", "generated/skbio.diversity.beta.weighted_unifrac.rst", "generated/skbio.diversity.beta_diversity.rst", "generated/skbio.diversity.block_beta_diversity.rst", "generated/skbio.diversity.get_alpha_diversity_metrics.rst", "generated/skbio.diversity.get_beta_diversity_metrics.rst", "generated/skbio.diversity.partial_beta_diversity.rst", "generated/skbio.embedding.Embedding.rst", "generated/skbio.embedding.Embedding.__eq__.rst", "generated/skbio.embedding.Embedding.__ge__.rst", "generated/skbio.embedding.Embedding.__getstate__.rst", "generated/skbio.embedding.Embedding.__gt__.rst", "generated/skbio.embedding.Embedding.__hash__.rst", "generated/skbio.embedding.Embedding.__le__.rst", "generated/skbio.embedding.Embedding.__lt__.rst", "generated/skbio.embedding.Embedding.__ne__.rst", "generated/skbio.embedding.Embedding.__str__.rst", "generated/skbio.embedding.Embedding.bytes.rst", "generated/skbio.embedding.ProteinEmbedding.rst", "generated/skbio.embedding.ProteinEmbedding.__eq__.rst", "generated/skbio.embedding.ProteinEmbedding.__ge__.rst", "generated/skbio.embedding.ProteinEmbedding.__getstate__.rst", "generated/skbio.embedding.ProteinEmbedding.__gt__.rst", "generated/skbio.embedding.ProteinEmbedding.__hash__.rst", "generated/skbio.embedding.ProteinEmbedding.__le__.rst", "generated/skbio.embedding.ProteinEmbedding.__lt__.rst", "generated/skbio.embedding.ProteinEmbedding.__ne__.rst", "generated/skbio.embedding.ProteinEmbedding.__str__.rst", "generated/skbio.embedding.ProteinEmbedding.bytes.rst", "generated/skbio.embedding.ProteinEmbedding.read.rst", "generated/skbio.embedding.ProteinEmbedding.write.rst", "generated/skbio.embedding.ProteinVector.rst", "generated/skbio.embedding.ProteinVector.__eq__.rst", "generated/skbio.embedding.ProteinVector.__ge__.rst", "generated/skbio.embedding.ProteinVector.__getstate__.rst", "generated/skbio.embedding.ProteinVector.__gt__.rst", "generated/skbio.embedding.ProteinVector.__hash__.rst", "generated/skbio.embedding.ProteinVector.__le__.rst", "generated/skbio.embedding.ProteinVector.__lt__.rst", "generated/skbio.embedding.ProteinVector.__ne__.rst", "generated/skbio.embedding.ProteinVector.__str__.rst", "generated/skbio.embedding.ProteinVector.bytes.rst", "generated/skbio.embedding.ProteinVector.read.rst", "generated/skbio.embedding.ProteinVector.write.rst", "generated/skbio.embedding.SequenceEmbedding.rst", "generated/skbio.embedding.SequenceEmbedding.__eq__.rst", "generated/skbio.embedding.SequenceEmbedding.__ge__.rst", "generated/skbio.embedding.SequenceEmbedding.__getstate__.rst", "generated/skbio.embedding.SequenceEmbedding.__gt__.rst", "generated/skbio.embedding.SequenceEmbedding.__hash__.rst", "generated/skbio.embedding.SequenceEmbedding.__le__.rst", "generated/skbio.embedding.SequenceEmbedding.__lt__.rst", "generated/skbio.embedding.SequenceEmbedding.__ne__.rst", "generated/skbio.embedding.SequenceEmbedding.__str__.rst", "generated/skbio.embedding.SequenceEmbedding.bytes.rst", "generated/skbio.embedding.SequenceVector.rst", "generated/skbio.embedding.SequenceVector.__eq__.rst", "generated/skbio.embedding.SequenceVector.__ge__.rst", "generated/skbio.embedding.SequenceVector.__getstate__.rst", "generated/skbio.embedding.SequenceVector.__gt__.rst", "generated/skbio.embedding.SequenceVector.__hash__.rst", "generated/skbio.embedding.SequenceVector.__le__.rst", "generated/skbio.embedding.SequenceVector.__lt__.rst", "generated/skbio.embedding.SequenceVector.__ne__.rst", "generated/skbio.embedding.SequenceVector.__str__.rst", "generated/skbio.embedding.SequenceVector.bytes.rst", "generated/skbio.embedding.embed_vec_to_dataframe.rst", "generated/skbio.embedding.embed_vec_to_distances.rst", "generated/skbio.embedding.embed_vec_to_numpy.rst", "generated/skbio.embedding.embed_vec_to_ordination.rst", "generated/skbio.io.format.binary_dm.rst", "generated/skbio.io.format.biom.rst", "generated/skbio.io.format.blast6.rst", "generated/skbio.io.format.blast7.rst", "generated/skbio.io.format.clustal.rst", "generated/skbio.io.format.embed.rst", "generated/skbio.io.format.embl.rst", "generated/skbio.io.format.fasta.rst", "generated/skbio.io.format.fastq.rst", "generated/skbio.io.format.genbank.rst", "generated/skbio.io.format.gff3.rst", "generated/skbio.io.format.lsmat.rst", "generated/skbio.io.format.newick.rst", "generated/skbio.io.format.ordination.rst", "generated/skbio.io.format.phylip.rst", "generated/skbio.io.format.qseq.rst", "generated/skbio.io.format.sample_metadata.rst", "generated/skbio.io.format.stockholm.rst", "generated/skbio.io.format.taxdump.rst", "generated/skbio.io.registry.rst", "generated/skbio.io.registry.Format.rst", "generated/skbio.io.registry.Format.__eq__.rst", "generated/skbio.io.registry.Format.__ge__.rst", "generated/skbio.io.registry.Format.__getstate__.rst", "generated/skbio.io.registry.Format.__gt__.rst", "generated/skbio.io.registry.Format.__hash__.rst", "generated/skbio.io.registry.Format.__le__.rst", "generated/skbio.io.registry.Format.__lt__.rst", "generated/skbio.io.registry.Format.__ne__.rst", "generated/skbio.io.registry.Format.__str__.rst", "generated/skbio.io.registry.Format.reader.rst", "generated/skbio.io.registry.Format.sniffer.rst", "generated/skbio.io.registry.Format.writer.rst", "generated/skbio.io.registry.IORegistry.rst", "generated/skbio.io.registry.IORegistry.__eq__.rst", "generated/skbio.io.registry.IORegistry.__ge__.rst", "generated/skbio.io.registry.IORegistry.__getstate__.rst", "generated/skbio.io.registry.IORegistry.__gt__.rst", "generated/skbio.io.registry.IORegistry.__hash__.rst", "generated/skbio.io.registry.IORegistry.__le__.rst", "generated/skbio.io.registry.IORegistry.__lt__.rst", "generated/skbio.io.registry.IORegistry.__ne__.rst", "generated/skbio.io.registry.IORegistry.__str__.rst", "generated/skbio.io.registry.IORegistry.add_format.rst", "generated/skbio.io.registry.IORegistry.create_format.rst", "generated/skbio.io.registry.IORegistry.get_reader.rst", "generated/skbio.io.registry.IORegistry.get_sniffer.rst", "generated/skbio.io.registry.IORegistry.get_writer.rst", "generated/skbio.io.registry.IORegistry.list_read_formats.rst", "generated/skbio.io.registry.IORegistry.list_write_formats.rst", "generated/skbio.io.registry.IORegistry.monkey_patch.rst", "generated/skbio.io.registry.IORegistry.read.rst", "generated/skbio.io.registry.IORegistry.sniff.rst", "generated/skbio.io.registry.IORegistry.write.rst", "generated/skbio.io.registry.create_format.rst", "generated/skbio.io.registry.read.rst", "generated/skbio.io.registry.sniff.rst", "generated/skbio.io.registry.write.rst", "generated/skbio.io.util.rst", "generated/skbio.io.util.open.rst", "generated/skbio.io.util.open_file.rst", "generated/skbio.io.util.open_files.rst", "generated/skbio.metadata.CategoricalMetadataColumn.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__eq__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__ge__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__getstate__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__gt__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__le__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__lt__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__ne__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__str__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.drop_missing_values.rst", "generated/skbio.metadata.CategoricalMetadataColumn.filter_ids.rst", "generated/skbio.metadata.CategoricalMetadataColumn.get_ids.rst", "generated/skbio.metadata.CategoricalMetadataColumn.get_missing.rst", "generated/skbio.metadata.CategoricalMetadataColumn.get_value.rst", "generated/skbio.metadata.CategoricalMetadataColumn.has_missing_values.rst", "generated/skbio.metadata.CategoricalMetadataColumn.save.rst", "generated/skbio.metadata.CategoricalMetadataColumn.to_dataframe.rst", "generated/skbio.metadata.CategoricalMetadataColumn.to_series.rst", "generated/skbio.metadata.Interval.rst", "generated/skbio.metadata.Interval.__eq__.rst", "generated/skbio.metadata.Interval.__ge__.rst", "generated/skbio.metadata.Interval.__getstate__.rst", "generated/skbio.metadata.Interval.__gt__.rst", "generated/skbio.metadata.Interval.__le__.rst", "generated/skbio.metadata.Interval.__lt__.rst", "generated/skbio.metadata.Interval.__ne__.rst", "generated/skbio.metadata.Interval.__str__.rst", "generated/skbio.metadata.Interval.drop.rst", "generated/skbio.metadata.IntervalMetadata.rst", "generated/skbio.metadata.IntervalMetadata.__copy__.rst", "generated/skbio.metadata.IntervalMetadata.__deepcopy__.rst", "generated/skbio.metadata.IntervalMetadata.__eq__.rst", "generated/skbio.metadata.IntervalMetadata.__ge__.rst", "generated/skbio.metadata.IntervalMetadata.__getstate__.rst", "generated/skbio.metadata.IntervalMetadata.__gt__.rst", "generated/skbio.metadata.IntervalMetadata.__le__.rst", "generated/skbio.metadata.IntervalMetadata.__lt__.rst", "generated/skbio.metadata.IntervalMetadata.__ne__.rst", "generated/skbio.metadata.IntervalMetadata.__str__.rst", "generated/skbio.metadata.IntervalMetadata.add.rst", "generated/skbio.metadata.IntervalMetadata.concat.rst", "generated/skbio.metadata.IntervalMetadata.drop.rst", "generated/skbio.metadata.IntervalMetadata.merge.rst", "generated/skbio.metadata.IntervalMetadata.query.rst", "generated/skbio.metadata.IntervalMetadata.read.rst", "generated/skbio.metadata.IntervalMetadata.sort.rst", "generated/skbio.metadata.IntervalMetadata.write.rst", "generated/skbio.metadata.MetadataColumn.rst", "generated/skbio.metadata.MetadataColumn.__eq__.rst", "generated/skbio.metadata.MetadataColumn.__ge__.rst", "generated/skbio.metadata.MetadataColumn.__getstate__.rst", "generated/skbio.metadata.MetadataColumn.__gt__.rst", "generated/skbio.metadata.MetadataColumn.__le__.rst", "generated/skbio.metadata.MetadataColumn.__lt__.rst", "generated/skbio.metadata.MetadataColumn.__ne__.rst", "generated/skbio.metadata.MetadataColumn.__str__.rst", "generated/skbio.metadata.MetadataColumn.drop_missing_values.rst", "generated/skbio.metadata.MetadataColumn.filter_ids.rst", "generated/skbio.metadata.MetadataColumn.get_ids.rst", "generated/skbio.metadata.MetadataColumn.get_missing.rst", "generated/skbio.metadata.MetadataColumn.get_value.rst", "generated/skbio.metadata.MetadataColumn.has_missing_values.rst", "generated/skbio.metadata.MetadataColumn.save.rst", "generated/skbio.metadata.MetadataColumn.to_dataframe.rst", "generated/skbio.metadata.MetadataColumn.to_series.rst", "generated/skbio.metadata.NumericMetadataColumn.rst", "generated/skbio.metadata.NumericMetadataColumn.__eq__.rst", "generated/skbio.metadata.NumericMetadataColumn.__ge__.rst", "generated/skbio.metadata.NumericMetadataColumn.__getstate__.rst", "generated/skbio.metadata.NumericMetadataColumn.__gt__.rst", "generated/skbio.metadata.NumericMetadataColumn.__le__.rst", "generated/skbio.metadata.NumericMetadataColumn.__lt__.rst", "generated/skbio.metadata.NumericMetadataColumn.__ne__.rst", "generated/skbio.metadata.NumericMetadataColumn.__str__.rst", "generated/skbio.metadata.NumericMetadataColumn.drop_missing_values.rst", "generated/skbio.metadata.NumericMetadataColumn.filter_ids.rst", "generated/skbio.metadata.NumericMetadataColumn.get_ids.rst", "generated/skbio.metadata.NumericMetadataColumn.get_missing.rst", "generated/skbio.metadata.NumericMetadataColumn.get_value.rst", "generated/skbio.metadata.NumericMetadataColumn.has_missing_values.rst", "generated/skbio.metadata.NumericMetadataColumn.save.rst", "generated/skbio.metadata.NumericMetadataColumn.to_dataframe.rst", "generated/skbio.metadata.NumericMetadataColumn.to_series.rst", "generated/skbio.metadata.SampleMetadata.rst", "generated/skbio.metadata.SampleMetadata.__eq__.rst", "generated/skbio.metadata.SampleMetadata.__ge__.rst", "generated/skbio.metadata.SampleMetadata.__getstate__.rst", "generated/skbio.metadata.SampleMetadata.__gt__.rst", "generated/skbio.metadata.SampleMetadata.__le__.rst", "generated/skbio.metadata.SampleMetadata.__lt__.rst", "generated/skbio.metadata.SampleMetadata.__ne__.rst", "generated/skbio.metadata.SampleMetadata.__str__.rst", "generated/skbio.metadata.SampleMetadata.filter_columns.rst", "generated/skbio.metadata.SampleMetadata.filter_ids.rst", "generated/skbio.metadata.SampleMetadata.get_column.rst", "generated/skbio.metadata.SampleMetadata.get_ids.rst", "generated/skbio.metadata.SampleMetadata.load.rst", "generated/skbio.metadata.SampleMetadata.merge.rst", "generated/skbio.metadata.SampleMetadata.read.rst", "generated/skbio.metadata.SampleMetadata.save.rst", "generated/skbio.metadata.SampleMetadata.to_dataframe.rst", "generated/skbio.metadata.SampleMetadata.write.rst", "generated/skbio.sequence.DNA.rst", "generated/skbio.sequence.DNA.__bool__.rst", "generated/skbio.sequence.DNA.__contains__.rst", "generated/skbio.sequence.DNA.__copy__.rst", "generated/skbio.sequence.DNA.__deepcopy__.rst", "generated/skbio.sequence.DNA.__eq__.rst", "generated/skbio.sequence.DNA.__ge__.rst", "generated/skbio.sequence.DNA.__getitem__.rst", "generated/skbio.sequence.DNA.__getstate__.rst", "generated/skbio.sequence.DNA.__gt__.rst", "generated/skbio.sequence.DNA.__iter__.rst", "generated/skbio.sequence.DNA.__le__.rst", "generated/skbio.sequence.DNA.__len__.rst", "generated/skbio.sequence.DNA.__lt__.rst", "generated/skbio.sequence.DNA.__ne__.rst", "generated/skbio.sequence.DNA.__reversed__.rst", "generated/skbio.sequence.DNA.__str__.rst", "generated/skbio.sequence.DNA.complement.rst", "generated/skbio.sequence.DNA.concat.rst", "generated/skbio.sequence.DNA.count.rst", "generated/skbio.sequence.DNA.definites.rst", "generated/skbio.sequence.DNA.degap.rst", "generated/skbio.sequence.DNA.degenerates.rst", "generated/skbio.sequence.DNA.distance.rst", "generated/skbio.sequence.DNA.expand_degenerates.rst", "generated/skbio.sequence.DNA.find_motifs.rst", "generated/skbio.sequence.DNA.find_with_regex.rst", "generated/skbio.sequence.DNA.frequencies.rst", "generated/skbio.sequence.DNA.gaps.rst", "generated/skbio.sequence.DNA.gc_content.rst", "generated/skbio.sequence.DNA.gc_frequency.rst", "generated/skbio.sequence.DNA.has_definites.rst", "generated/skbio.sequence.DNA.has_degenerates.rst", "generated/skbio.sequence.DNA.has_gaps.rst", "generated/skbio.sequence.DNA.has_interval_metadata.rst", "generated/skbio.sequence.DNA.has_metadata.rst", "generated/skbio.sequence.DNA.has_nondegenerates.rst", "generated/skbio.sequence.DNA.has_positional_metadata.rst", "generated/skbio.sequence.DNA.index.rst", "generated/skbio.sequence.DNA.is_reverse_complement.rst", "generated/skbio.sequence.DNA.iter_contiguous.rst", "generated/skbio.sequence.DNA.iter_kmers.rst", "generated/skbio.sequence.DNA.kmer_frequencies.rst", "generated/skbio.sequence.DNA.lowercase.rst", "generated/skbio.sequence.DNA.match_frequency.rst", "generated/skbio.sequence.DNA.matches.rst", "generated/skbio.sequence.DNA.mismatch_frequency.rst", "generated/skbio.sequence.DNA.mismatches.rst", "generated/skbio.sequence.DNA.nondegenerates.rst", "generated/skbio.sequence.DNA.read.rst", "generated/skbio.sequence.DNA.replace.rst", "generated/skbio.sequence.DNA.reverse_complement.rst", "generated/skbio.sequence.DNA.to_definites.rst", "generated/skbio.sequence.DNA.to_indices.rst", "generated/skbio.sequence.DNA.to_regex.rst", "generated/skbio.sequence.DNA.transcribe.rst", "generated/skbio.sequence.DNA.translate.rst", "generated/skbio.sequence.DNA.translate_six_frames.rst", "generated/skbio.sequence.DNA.write.rst", "generated/skbio.sequence.GeneticCode.rst", "generated/skbio.sequence.GeneticCode.__eq__.rst", "generated/skbio.sequence.GeneticCode.__ge__.rst", "generated/skbio.sequence.GeneticCode.__getstate__.rst", "generated/skbio.sequence.GeneticCode.__gt__.rst", "generated/skbio.sequence.GeneticCode.__le__.rst", "generated/skbio.sequence.GeneticCode.__lt__.rst", "generated/skbio.sequence.GeneticCode.__ne__.rst", "generated/skbio.sequence.GeneticCode.__str__.rst", "generated/skbio.sequence.GeneticCode.from_ncbi.rst", "generated/skbio.sequence.GeneticCode.translate.rst", "generated/skbio.sequence.GeneticCode.translate_six_frames.rst", "generated/skbio.sequence.GrammaredSequence.rst", "generated/skbio.sequence.GrammaredSequence.__bool__.rst", "generated/skbio.sequence.GrammaredSequence.__contains__.rst", "generated/skbio.sequence.GrammaredSequence.__copy__.rst", "generated/skbio.sequence.GrammaredSequence.__deepcopy__.rst", "generated/skbio.sequence.GrammaredSequence.__eq__.rst", "generated/skbio.sequence.GrammaredSequence.__ge__.rst", "generated/skbio.sequence.GrammaredSequence.__getitem__.rst", "generated/skbio.sequence.GrammaredSequence.__getstate__.rst", "generated/skbio.sequence.GrammaredSequence.__gt__.rst", "generated/skbio.sequence.GrammaredSequence.__iter__.rst", "generated/skbio.sequence.GrammaredSequence.__le__.rst", "generated/skbio.sequence.GrammaredSequence.__len__.rst", "generated/skbio.sequence.GrammaredSequence.__lt__.rst", "generated/skbio.sequence.GrammaredSequence.__ne__.rst", "generated/skbio.sequence.GrammaredSequence.__reversed__.rst", "generated/skbio.sequence.GrammaredSequence.__str__.rst", "generated/skbio.sequence.GrammaredSequence.concat.rst", "generated/skbio.sequence.GrammaredSequence.count.rst", "generated/skbio.sequence.GrammaredSequence.definites.rst", "generated/skbio.sequence.GrammaredSequence.degap.rst", "generated/skbio.sequence.GrammaredSequence.degenerates.rst", "generated/skbio.sequence.GrammaredSequence.distance.rst", "generated/skbio.sequence.GrammaredSequence.expand_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.find_motifs.rst", "generated/skbio.sequence.GrammaredSequence.find_with_regex.rst", "generated/skbio.sequence.GrammaredSequence.frequencies.rst", "generated/skbio.sequence.GrammaredSequence.gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_definites.rst", "generated/skbio.sequence.GrammaredSequence.has_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata.rst", "generated/skbio.sequence.GrammaredSequence.index.rst", "generated/skbio.sequence.GrammaredSequence.iter_contiguous.rst", "generated/skbio.sequence.GrammaredSequence.iter_kmers.rst", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies.rst", "generated/skbio.sequence.GrammaredSequence.lowercase.rst", "generated/skbio.sequence.GrammaredSequence.match_frequency.rst", "generated/skbio.sequence.GrammaredSequence.matches.rst", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency.rst", "generated/skbio.sequence.GrammaredSequence.mismatches.rst", "generated/skbio.sequence.GrammaredSequence.nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.read.rst", "generated/skbio.sequence.GrammaredSequence.replace.rst", "generated/skbio.sequence.GrammaredSequence.to_definites.rst", "generated/skbio.sequence.GrammaredSequence.to_indices.rst", "generated/skbio.sequence.GrammaredSequence.to_regex.rst", "generated/skbio.sequence.GrammaredSequence.write.rst", "generated/skbio.sequence.Protein.rst", "generated/skbio.sequence.Protein.__bool__.rst", "generated/skbio.sequence.Protein.__contains__.rst", "generated/skbio.sequence.Protein.__copy__.rst", "generated/skbio.sequence.Protein.__deepcopy__.rst", "generated/skbio.sequence.Protein.__eq__.rst", "generated/skbio.sequence.Protein.__ge__.rst", "generated/skbio.sequence.Protein.__getitem__.rst", "generated/skbio.sequence.Protein.__getstate__.rst", "generated/skbio.sequence.Protein.__gt__.rst", "generated/skbio.sequence.Protein.__iter__.rst", "generated/skbio.sequence.Protein.__le__.rst", "generated/skbio.sequence.Protein.__len__.rst", "generated/skbio.sequence.Protein.__lt__.rst", "generated/skbio.sequence.Protein.__ne__.rst", "generated/skbio.sequence.Protein.__reversed__.rst", "generated/skbio.sequence.Protein.__str__.rst", "generated/skbio.sequence.Protein.concat.rst", "generated/skbio.sequence.Protein.count.rst", "generated/skbio.sequence.Protein.definites.rst", "generated/skbio.sequence.Protein.degap.rst", "generated/skbio.sequence.Protein.degenerates.rst", "generated/skbio.sequence.Protein.distance.rst", "generated/skbio.sequence.Protein.expand_degenerates.rst", "generated/skbio.sequence.Protein.find_motifs.rst", "generated/skbio.sequence.Protein.find_with_regex.rst", "generated/skbio.sequence.Protein.frequencies.rst", "generated/skbio.sequence.Protein.gaps.rst", "generated/skbio.sequence.Protein.has_definites.rst", "generated/skbio.sequence.Protein.has_degenerates.rst", "generated/skbio.sequence.Protein.has_gaps.rst", "generated/skbio.sequence.Protein.has_interval_metadata.rst", "generated/skbio.sequence.Protein.has_metadata.rst", "generated/skbio.sequence.Protein.has_nondegenerates.rst", "generated/skbio.sequence.Protein.has_positional_metadata.rst", "generated/skbio.sequence.Protein.has_stops.rst", "generated/skbio.sequence.Protein.index.rst", "generated/skbio.sequence.Protein.iter_contiguous.rst", "generated/skbio.sequence.Protein.iter_kmers.rst", "generated/skbio.sequence.Protein.kmer_frequencies.rst", "generated/skbio.sequence.Protein.lowercase.rst", "generated/skbio.sequence.Protein.match_frequency.rst", "generated/skbio.sequence.Protein.matches.rst", "generated/skbio.sequence.Protein.mismatch_frequency.rst", "generated/skbio.sequence.Protein.mismatches.rst", "generated/skbio.sequence.Protein.nondegenerates.rst", "generated/skbio.sequence.Protein.read.rst", "generated/skbio.sequence.Protein.replace.rst", "generated/skbio.sequence.Protein.stops.rst", "generated/skbio.sequence.Protein.to_definites.rst", "generated/skbio.sequence.Protein.to_indices.rst", "generated/skbio.sequence.Protein.to_regex.rst", "generated/skbio.sequence.Protein.write.rst", "generated/skbio.sequence.RNA.rst", "generated/skbio.sequence.RNA.__bool__.rst", "generated/skbio.sequence.RNA.__contains__.rst", "generated/skbio.sequence.RNA.__copy__.rst", "generated/skbio.sequence.RNA.__deepcopy__.rst", "generated/skbio.sequence.RNA.__eq__.rst", "generated/skbio.sequence.RNA.__ge__.rst", "generated/skbio.sequence.RNA.__getitem__.rst", "generated/skbio.sequence.RNA.__getstate__.rst", "generated/skbio.sequence.RNA.__gt__.rst", "generated/skbio.sequence.RNA.__iter__.rst", "generated/skbio.sequence.RNA.__le__.rst", "generated/skbio.sequence.RNA.__len__.rst", "generated/skbio.sequence.RNA.__lt__.rst", "generated/skbio.sequence.RNA.__ne__.rst", "generated/skbio.sequence.RNA.__reversed__.rst", "generated/skbio.sequence.RNA.__str__.rst", "generated/skbio.sequence.RNA.complement.rst", "generated/skbio.sequence.RNA.concat.rst", "generated/skbio.sequence.RNA.count.rst", "generated/skbio.sequence.RNA.definites.rst", "generated/skbio.sequence.RNA.degap.rst", "generated/skbio.sequence.RNA.degenerates.rst", "generated/skbio.sequence.RNA.distance.rst", "generated/skbio.sequence.RNA.expand_degenerates.rst", "generated/skbio.sequence.RNA.find_motifs.rst", "generated/skbio.sequence.RNA.find_with_regex.rst", "generated/skbio.sequence.RNA.frequencies.rst", "generated/skbio.sequence.RNA.gaps.rst", "generated/skbio.sequence.RNA.gc_content.rst", "generated/skbio.sequence.RNA.gc_frequency.rst", "generated/skbio.sequence.RNA.has_definites.rst", "generated/skbio.sequence.RNA.has_degenerates.rst", "generated/skbio.sequence.RNA.has_gaps.rst", "generated/skbio.sequence.RNA.has_interval_metadata.rst", "generated/skbio.sequence.RNA.has_metadata.rst", "generated/skbio.sequence.RNA.has_nondegenerates.rst", "generated/skbio.sequence.RNA.has_positional_metadata.rst", "generated/skbio.sequence.RNA.index.rst", "generated/skbio.sequence.RNA.is_reverse_complement.rst", "generated/skbio.sequence.RNA.iter_contiguous.rst", "generated/skbio.sequence.RNA.iter_kmers.rst", "generated/skbio.sequence.RNA.kmer_frequencies.rst", "generated/skbio.sequence.RNA.lowercase.rst", "generated/skbio.sequence.RNA.match_frequency.rst", "generated/skbio.sequence.RNA.matches.rst", "generated/skbio.sequence.RNA.mismatch_frequency.rst", "generated/skbio.sequence.RNA.mismatches.rst", "generated/skbio.sequence.RNA.nondegenerates.rst", "generated/skbio.sequence.RNA.read.rst", "generated/skbio.sequence.RNA.replace.rst", "generated/skbio.sequence.RNA.reverse_complement.rst", "generated/skbio.sequence.RNA.reverse_transcribe.rst", "generated/skbio.sequence.RNA.to_definites.rst", "generated/skbio.sequence.RNA.to_indices.rst", "generated/skbio.sequence.RNA.to_regex.rst", "generated/skbio.sequence.RNA.translate.rst", "generated/skbio.sequence.RNA.translate_six_frames.rst", "generated/skbio.sequence.RNA.write.rst", "generated/skbio.sequence.Sequence.rst", "generated/skbio.sequence.Sequence.__bool__.rst", "generated/skbio.sequence.Sequence.__contains__.rst", "generated/skbio.sequence.Sequence.__copy__.rst", "generated/skbio.sequence.Sequence.__deepcopy__.rst", "generated/skbio.sequence.Sequence.__eq__.rst", "generated/skbio.sequence.Sequence.__ge__.rst", "generated/skbio.sequence.Sequence.__getitem__.rst", "generated/skbio.sequence.Sequence.__getstate__.rst", "generated/skbio.sequence.Sequence.__gt__.rst", "generated/skbio.sequence.Sequence.__iter__.rst", "generated/skbio.sequence.Sequence.__le__.rst", "generated/skbio.sequence.Sequence.__len__.rst", "generated/skbio.sequence.Sequence.__lt__.rst", "generated/skbio.sequence.Sequence.__ne__.rst", "generated/skbio.sequence.Sequence.__reversed__.rst", "generated/skbio.sequence.Sequence.__str__.rst", "generated/skbio.sequence.Sequence.concat.rst", "generated/skbio.sequence.Sequence.count.rst", "generated/skbio.sequence.Sequence.distance.rst", "generated/skbio.sequence.Sequence.find_with_regex.rst", "generated/skbio.sequence.Sequence.frequencies.rst", "generated/skbio.sequence.Sequence.has_interval_metadata.rst", "generated/skbio.sequence.Sequence.has_metadata.rst", "generated/skbio.sequence.Sequence.has_positional_metadata.rst", "generated/skbio.sequence.Sequence.index.rst", "generated/skbio.sequence.Sequence.iter_contiguous.rst", "generated/skbio.sequence.Sequence.iter_kmers.rst", "generated/skbio.sequence.Sequence.kmer_frequencies.rst", "generated/skbio.sequence.Sequence.lowercase.rst", "generated/skbio.sequence.Sequence.match_frequency.rst", "generated/skbio.sequence.Sequence.matches.rst", "generated/skbio.sequence.Sequence.mismatch_frequency.rst", "generated/skbio.sequence.Sequence.mismatches.rst", "generated/skbio.sequence.Sequence.read.rst", "generated/skbio.sequence.Sequence.replace.rst", "generated/skbio.sequence.Sequence.to_indices.rst", "generated/skbio.sequence.Sequence.write.rst", "generated/skbio.sequence.SubstitutionMatrix.rst", "generated/skbio.sequence.SubstitutionMatrix.__contains__.rst", "generated/skbio.sequence.SubstitutionMatrix.__eq__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ge__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getitem__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getstate__.rst", "generated/skbio.sequence.SubstitutionMatrix.__gt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__le__.rst", "generated/skbio.sequence.SubstitutionMatrix.__lt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ne__.rst", "generated/skbio.sequence.SubstitutionMatrix.__str__.rst", "generated/skbio.sequence.SubstitutionMatrix.between.rst", "generated/skbio.sequence.SubstitutionMatrix.by_name.rst", "generated/skbio.sequence.SubstitutionMatrix.copy.rst", "generated/skbio.sequence.SubstitutionMatrix.filter.rst", "generated/skbio.sequence.SubstitutionMatrix.from_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.from_iterable.rst", "generated/skbio.sequence.SubstitutionMatrix.get_names.rst", "generated/skbio.sequence.SubstitutionMatrix.identity.rst", "generated/skbio.sequence.SubstitutionMatrix.index.rst", "generated/skbio.sequence.SubstitutionMatrix.plot.rst", "generated/skbio.sequence.SubstitutionMatrix.read.rst", "generated/skbio.sequence.SubstitutionMatrix.redundant_form.rst", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame.rst", "generated/skbio.sequence.SubstitutionMatrix.to_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.transpose.rst", "generated/skbio.sequence.SubstitutionMatrix.within.rst", "generated/skbio.sequence.SubstitutionMatrix.write.rst", "generated/skbio.sequence.distance.rst", "generated/skbio.sequence.distance.hamming.rst", "generated/skbio.sequence.distance.kmer_distance.rst", "generated/skbio.stats.composition.rst", "generated/skbio.stats.composition.alr.rst", "generated/skbio.stats.composition.alr_inv.rst", "generated/skbio.stats.composition.ancom.rst", "generated/skbio.stats.composition.centralize.rst", "generated/skbio.stats.composition.closure.rst", "generated/skbio.stats.composition.clr.rst", "generated/skbio.stats.composition.clr_inv.rst", "generated/skbio.stats.composition.dirmult_ttest.rst", "generated/skbio.stats.composition.ilr.rst", "generated/skbio.stats.composition.ilr_inv.rst", "generated/skbio.stats.composition.inner.rst", "generated/skbio.stats.composition.multi_replace.rst", "generated/skbio.stats.composition.multiplicative_replacement.rst", "generated/skbio.stats.composition.pairwise_vlr.rst", "generated/skbio.stats.composition.perturb.rst", "generated/skbio.stats.composition.perturb_inv.rst", "generated/skbio.stats.composition.power.rst", "generated/skbio.stats.composition.sbp_basis.rst", "generated/skbio.stats.composition.tree_basis.rst", "generated/skbio.stats.composition.vlr.rst", "generated/skbio.stats.distance.rst", "generated/skbio.stats.distance.DissimilarityMatrix.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__le__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__str__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.between.rst", "generated/skbio.stats.distance.DissimilarityMatrix.copy.rst", "generated/skbio.stats.distance.DissimilarityMatrix.filter.rst", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable.rst", "generated/skbio.stats.distance.DissimilarityMatrix.index.rst", "generated/skbio.stats.distance.DissimilarityMatrix.plot.rst", "generated/skbio.stats.distance.DissimilarityMatrix.read.rst", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form.rst", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DissimilarityMatrix.transpose.rst", "generated/skbio.stats.distance.DissimilarityMatrix.within.rst", "generated/skbio.stats.distance.DissimilarityMatrix.write.rst", "generated/skbio.stats.distance.DistanceMatrix.rst", "generated/skbio.stats.distance.DistanceMatrix.__contains__.rst", "generated/skbio.stats.distance.DistanceMatrix.__eq__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ge__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getitem__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getstate__.rst", "generated/skbio.stats.distance.DistanceMatrix.__gt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__le__.rst", "generated/skbio.stats.distance.DistanceMatrix.__lt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ne__.rst", "generated/skbio.stats.distance.DistanceMatrix.__str__.rst", "generated/skbio.stats.distance.DistanceMatrix.between.rst", "generated/skbio.stats.distance.DistanceMatrix.condensed_form.rst", "generated/skbio.stats.distance.DistanceMatrix.copy.rst", "generated/skbio.stats.distance.DistanceMatrix.filter.rst", "generated/skbio.stats.distance.DistanceMatrix.from_iterable.rst", "generated/skbio.stats.distance.DistanceMatrix.index.rst", "generated/skbio.stats.distance.DistanceMatrix.permute.rst", "generated/skbio.stats.distance.DistanceMatrix.plot.rst", "generated/skbio.stats.distance.DistanceMatrix.read.rst", "generated/skbio.stats.distance.DistanceMatrix.redundant_form.rst", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DistanceMatrix.to_series.rst", "generated/skbio.stats.distance.DistanceMatrix.transpose.rst", "generated/skbio.stats.distance.DistanceMatrix.within.rst", "generated/skbio.stats.distance.DistanceMatrix.write.rst", "generated/skbio.stats.distance.anosim.rst", "generated/skbio.stats.distance.bioenv.rst", "generated/skbio.stats.distance.mantel.rst", "generated/skbio.stats.distance.permanova.rst", "generated/skbio.stats.distance.permdisp.rst", "generated/skbio.stats.distance.pwmantel.rst", "generated/skbio.stats.distance.randdm.rst", "generated/skbio.stats.evolve.rst", "generated/skbio.stats.evolve.hommola_cospeciation.rst", "generated/skbio.stats.gradient.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.CategoryResults.rst", "generated/skbio.stats.gradient.CategoryResults.__eq__.rst", "generated/skbio.stats.gradient.CategoryResults.__ge__.rst", "generated/skbio.stats.gradient.CategoryResults.__getstate__.rst", "generated/skbio.stats.gradient.CategoryResults.__gt__.rst", "generated/skbio.stats.gradient.CategoryResults.__hash__.rst", "generated/skbio.stats.gradient.CategoryResults.__le__.rst", "generated/skbio.stats.gradient.CategoryResults.__lt__.rst", "generated/skbio.stats.gradient.CategoryResults.__ne__.rst", "generated/skbio.stats.gradient.CategoryResults.__str__.rst", "generated/skbio.stats.gradient.CategoryResults.to_files.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVA.rst", "generated/skbio.stats.gradient.GradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVA.__le__.rst", "generated/skbio.stats.gradient.GradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVA.__str__.rst", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVAResults.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__le__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__str__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.to_files.rst", "generated/skbio.stats.gradient.GroupResults.rst", "generated/skbio.stats.gradient.GroupResults.__eq__.rst", "generated/skbio.stats.gradient.GroupResults.__ge__.rst", "generated/skbio.stats.gradient.GroupResults.__getstate__.rst", "generated/skbio.stats.gradient.GroupResults.__gt__.rst", "generated/skbio.stats.gradient.GroupResults.__hash__.rst", "generated/skbio.stats.gradient.GroupResults.__le__.rst", "generated/skbio.stats.gradient.GroupResults.__lt__.rst", "generated/skbio.stats.gradient.GroupResults.__ne__.rst", "generated/skbio.stats.gradient.GroupResults.__str__.rst", "generated/skbio.stats.gradient.GroupResults.to_files.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.isubsample.rst", "generated/skbio.stats.ordination.rst", "generated/skbio.stats.ordination.OrdinationResults.rst", "generated/skbio.stats.ordination.OrdinationResults.__eq__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ge__.rst", "generated/skbio.stats.ordination.OrdinationResults.__getstate__.rst", "generated/skbio.stats.ordination.OrdinationResults.__gt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__hash__.rst", "generated/skbio.stats.ordination.OrdinationResults.__le__.rst", "generated/skbio.stats.ordination.OrdinationResults.__lt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ne__.rst", "generated/skbio.stats.ordination.OrdinationResults.__str__.rst", "generated/skbio.stats.ordination.OrdinationResults.plot.rst", "generated/skbio.stats.ordination.OrdinationResults.read.rst", "generated/skbio.stats.ordination.OrdinationResults.write.rst", "generated/skbio.stats.ordination.ca.rst", "generated/skbio.stats.ordination.cca.rst", "generated/skbio.stats.ordination.corr.rst", "generated/skbio.stats.ordination.e_matrix.rst", "generated/skbio.stats.ordination.f_matrix.rst", "generated/skbio.stats.ordination.mean_and_std.rst", "generated/skbio.stats.ordination.pcoa.rst", "generated/skbio.stats.ordination.pcoa_biplot.rst", "generated/skbio.stats.ordination.rda.rst", "generated/skbio.stats.ordination.scale.rst", "generated/skbio.stats.ordination.svd_rank.rst", "generated/skbio.stats.power.rst", "generated/skbio.stats.power.confidence_bound.rst", "generated/skbio.stats.power.paired_subsamples.rst", "generated/skbio.stats.power.subsample_paired_power.rst", "generated/skbio.stats.power.subsample_power.rst", "generated/skbio.stats.subsample_counts.rst", "generated/skbio.table.Table.rst", "generated/skbio.table.Table.__eq__.rst", "generated/skbio.table.Table.__ge__.rst", "generated/skbio.table.Table.__getitem__.rst", "generated/skbio.table.Table.__getstate__.rst", "generated/skbio.table.Table.__gt__.rst", "generated/skbio.table.Table.__iter__.rst", "generated/skbio.table.Table.__le__.rst", "generated/skbio.table.Table.__lt__.rst", "generated/skbio.table.Table.__ne__.rst", "generated/skbio.table.Table.__str__.rst", "generated/skbio.table.Table.add_group_metadata.rst", "generated/skbio.table.Table.add_metadata.rst", "generated/skbio.table.Table.align_to.rst", "generated/skbio.table.Table.align_to_dataframe.rst", "generated/skbio.table.Table.align_tree.rst", "generated/skbio.table.Table.collapse.rst", "generated/skbio.table.Table.concat.rst", "generated/skbio.table.Table.copy.rst", "generated/skbio.table.Table.data.rst", "generated/skbio.table.Table.del_metadata.rst", "generated/skbio.table.Table.delimited_self.rst", "generated/skbio.table.Table.descriptive_equality.rst", "generated/skbio.table.Table.exists.rst", "generated/skbio.table.Table.filter.rst", "generated/skbio.table.Table.from_adjacency.rst", "generated/skbio.table.Table.from_hdf5.rst", "generated/skbio.table.Table.from_json.rst", "generated/skbio.table.Table.from_tsv.rst", "generated/skbio.table.Table.get_table_density.rst", "generated/skbio.table.Table.get_value_by_ids.rst", "generated/skbio.table.Table.group_metadata.rst", "generated/skbio.table.Table.head.rst", "generated/skbio.table.Table.ids.rst", "generated/skbio.table.Table.index.rst", "generated/skbio.table.Table.is_empty.rst", "generated/skbio.table.Table.iter.rst", "generated/skbio.table.Table.iter_data.rst", "generated/skbio.table.Table.iter_pairwise.rst", "generated/skbio.table.Table.length.rst", "generated/skbio.table.Table.max.rst", "generated/skbio.table.Table.merge.rst", "generated/skbio.table.Table.metadata.rst", "generated/skbio.table.Table.metadata_to_dataframe.rst", "generated/skbio.table.Table.min.rst", "generated/skbio.table.Table.nonzero.rst", "generated/skbio.table.Table.nonzero_counts.rst", "generated/skbio.table.Table.norm.rst", "generated/skbio.table.Table.pa.rst", "generated/skbio.table.Table.partition.rst", "generated/skbio.table.Table.rankdata.rst", "generated/skbio.table.Table.read.rst", "generated/skbio.table.Table.reduce.rst", "generated/skbio.table.Table.remove_empty.rst", "generated/skbio.table.Table.sort.rst", "generated/skbio.table.Table.sort_order.rst", "generated/skbio.table.Table.subsample.rst", "generated/skbio.table.Table.sum.rst", "generated/skbio.table.Table.to_anndata.rst", "generated/skbio.table.Table.to_dataframe.rst", "generated/skbio.table.Table.to_hdf5.rst", "generated/skbio.table.Table.to_json.rst", "generated/skbio.table.Table.to_tsv.rst", "generated/skbio.table.Table.transform.rst", "generated/skbio.table.Table.transpose.rst", "generated/skbio.table.Table.update_ids.rst", "generated/skbio.table.Table.write.rst", "generated/skbio.table.example_table.rst", "generated/skbio.tree.TreeNode.rst", "generated/skbio.tree.TreeNode.__copy__.rst", "generated/skbio.tree.TreeNode.__deepcopy__.rst", "generated/skbio.tree.TreeNode.__eq__.rst", "generated/skbio.tree.TreeNode.__ge__.rst", "generated/skbio.tree.TreeNode.__getitem__.rst", "generated/skbio.tree.TreeNode.__getstate__.rst", "generated/skbio.tree.TreeNode.__gt__.rst", "generated/skbio.tree.TreeNode.__hash__.rst", "generated/skbio.tree.TreeNode.__iter__.rst", "generated/skbio.tree.TreeNode.__le__.rst", "generated/skbio.tree.TreeNode.__len__.rst", "generated/skbio.tree.TreeNode.__lt__.rst", "generated/skbio.tree.TreeNode.__ne__.rst", "generated/skbio.tree.TreeNode.__str__.rst", "generated/skbio.tree.TreeNode.accumulate_to_ancestor.rst", "generated/skbio.tree.TreeNode.ancestors.rst", "generated/skbio.tree.TreeNode.append.rst", "generated/skbio.tree.TreeNode.ascii_art.rst", "generated/skbio.tree.TreeNode.assign_ids.rst", "generated/skbio.tree.TreeNode.assign_supports.rst", "generated/skbio.tree.TreeNode.bifurcate.rst", "generated/skbio.tree.TreeNode.cache_attr.rst", "generated/skbio.tree.TreeNode.compare_rfd.rst", "generated/skbio.tree.TreeNode.compare_subsets.rst", "generated/skbio.tree.TreeNode.compare_tip_distances.rst", "generated/skbio.tree.TreeNode.copy.rst", "generated/skbio.tree.TreeNode.count.rst", "generated/skbio.tree.TreeNode.create_caches.rst", "generated/skbio.tree.TreeNode.deepcopy.rst", "generated/skbio.tree.TreeNode.descending_branch_length.rst", "generated/skbio.tree.TreeNode.distance.rst", "generated/skbio.tree.TreeNode.extend.rst", "generated/skbio.tree.TreeNode.find.rst", "generated/skbio.tree.TreeNode.find_all.rst", "generated/skbio.tree.TreeNode.find_by_func.rst", "generated/skbio.tree.TreeNode.find_by_id.rst", "generated/skbio.tree.TreeNode.from_linkage_matrix.rst", "generated/skbio.tree.TreeNode.from_taxdump.rst", "generated/skbio.tree.TreeNode.from_taxonomy.rst", "generated/skbio.tree.TreeNode.get_max_distance.rst", "generated/skbio.tree.TreeNode.has_children.rst", "generated/skbio.tree.TreeNode.index_tree.rst", "generated/skbio.tree.TreeNode.invalidate_caches.rst", "generated/skbio.tree.TreeNode.is_root.rst", "generated/skbio.tree.TreeNode.is_tip.rst", "generated/skbio.tree.TreeNode.lca.rst", "generated/skbio.tree.TreeNode.levelorder.rst", "generated/skbio.tree.TreeNode.lowest_common_ancestor.rst", "generated/skbio.tree.TreeNode.neighbors.rst", "generated/skbio.tree.TreeNode.non_tips.rst", "generated/skbio.tree.TreeNode.observed_node_counts.rst", "generated/skbio.tree.TreeNode.pop.rst", "generated/skbio.tree.TreeNode.postorder.rst", "generated/skbio.tree.TreeNode.pre_and_postorder.rst", "generated/skbio.tree.TreeNode.preorder.rst", "generated/skbio.tree.TreeNode.prune.rst", "generated/skbio.tree.TreeNode.read.rst", "generated/skbio.tree.TreeNode.remove.rst", "generated/skbio.tree.TreeNode.remove_deleted.rst", "generated/skbio.tree.TreeNode.root.rst", "generated/skbio.tree.TreeNode.root_at.rst", "generated/skbio.tree.TreeNode.root_at_midpoint.rst", "generated/skbio.tree.TreeNode.shear.rst", "generated/skbio.tree.TreeNode.shuffle.rst", "generated/skbio.tree.TreeNode.siblings.rst", "generated/skbio.tree.TreeNode.subset.rst", "generated/skbio.tree.TreeNode.subsets.rst", "generated/skbio.tree.TreeNode.subtree.rst", "generated/skbio.tree.TreeNode.tip_tip_distances.rst", "generated/skbio.tree.TreeNode.tips.rst", "generated/skbio.tree.TreeNode.to_array.rst", "generated/skbio.tree.TreeNode.to_taxonomy.rst", "generated/skbio.tree.TreeNode.traverse.rst", "generated/skbio.tree.TreeNode.unpack.rst", "generated/skbio.tree.TreeNode.unpack_by_func.rst", "generated/skbio.tree.TreeNode.unrooted_copy.rst", "generated/skbio.tree.TreeNode.unrooted_deepcopy.rst", "generated/skbio.tree.TreeNode.write.rst", "generated/skbio.tree.majority_rule.rst", "generated/skbio.tree.nj.rst", "generated/skbio.util.EfficiencyWarning.rst", "generated/skbio.util.RepresentationWarning.rst", "generated/skbio.util.assert_data_frame_almost_equal.rst", "generated/skbio.util.assert_ordination_results_equal.rst", "generated/skbio.util.cardinal_to_ordinal.rst", "generated/skbio.util.classproperty.rst", "generated/skbio.util.classproperty.__delete__.rst", "generated/skbio.util.classproperty.__eq__.rst", "generated/skbio.util.classproperty.__ge__.rst", "generated/skbio.util.classproperty.__get__.rst", "generated/skbio.util.classproperty.__getstate__.rst", "generated/skbio.util.classproperty.__gt__.rst", "generated/skbio.util.classproperty.__hash__.rst", "generated/skbio.util.classproperty.__le__.rst", "generated/skbio.util.classproperty.__lt__.rst", "generated/skbio.util.classproperty.__ne__.rst", "generated/skbio.util.classproperty.__set__.rst", "generated/skbio.util.classproperty.__set_name__.rst", "generated/skbio.util.classproperty.__str__.rst", "generated/skbio.util.classproperty.deleter.rst", "generated/skbio.util.classproperty.getter.rst", "generated/skbio.util.classproperty.setter.rst", "generated/skbio.util.find_duplicates.rst", "generated/skbio.util.get_data_path.rst", "generated/skbio.util.safe_md5.rst", "generated/skbio.workflow.Workflow.rst", "generated/skbio.workflow.Workflow.__call__.rst", "generated/skbio.workflow.Workflow.__eq__.rst", "generated/skbio.workflow.Workflow.__ge__.rst", "generated/skbio.workflow.Workflow.__getstate__.rst", "generated/skbio.workflow.Workflow.__gt__.rst", "generated/skbio.workflow.Workflow.__hash__.rst", "generated/skbio.workflow.Workflow.__le__.rst", "generated/skbio.workflow.Workflow.__lt__.rst", "generated/skbio.workflow.Workflow.__ne__.rst", "generated/skbio.workflow.Workflow.__str__.rst", "generated/skbio.workflow.Workflow.initialize_state.rst", "generated/skbio.workflow.method.rst", "generated/skbio.workflow.method.__call__.rst", "generated/skbio.workflow.method.__eq__.rst", "generated/skbio.workflow.method.__ge__.rst", "generated/skbio.workflow.method.__getstate__.rst", "generated/skbio.workflow.method.__gt__.rst", "generated/skbio.workflow.method.__hash__.rst", "generated/skbio.workflow.method.__le__.rst", "generated/skbio.workflow.method.__lt__.rst", "generated/skbio.workflow.method.__ne__.rst", "generated/skbio.workflow.method.__str__.rst", "generated/skbio.workflow.requires.rst", "generated/skbio.workflow.requires.__call__.rst", "generated/skbio.workflow.requires.__eq__.rst", "generated/skbio.workflow.requires.__ge__.rst", "generated/skbio.workflow.requires.__getstate__.rst", "generated/skbio.workflow.requires.__gt__.rst", "generated/skbio.workflow.requires.__hash__.rst", "generated/skbio.workflow.requires.__le__.rst", "generated/skbio.workflow.requires.__lt__.rst", "generated/skbio.workflow.requires.__ne__.rst", "generated/skbio.workflow.requires.__str__.rst", "index.rst", "io.rst", "metadata.rst", "sequence.rst", "stats.rst", "table.rst", "tree.rst", "util.rst", "workflow.rst"], "indexentries": {"__bool__() (skbio.alignment.tabularmsa method)": [[66, "skbio.alignment.TabularMSA.__bool__", false]], "__bool__() (skbio.sequence.dna method)": [[380, "skbio.sequence.DNA.__bool__", false]], "__bool__() (skbio.sequence.grammaredsequence method)": [[451, "skbio.sequence.GrammaredSequence.__bool__", false]], "__bool__() (skbio.sequence.protein method)": [[502, "skbio.sequence.Protein.__bool__", false]], "__bool__() (skbio.sequence.rna method)": [[555, "skbio.sequence.RNA.__bool__", false]], "__bool__() (skbio.sequence.sequence method)": [[614, "skbio.sequence.Sequence.__bool__", false]], "__call__() (skbio.alignment.stripedsmithwaterman method)": [[54, "skbio.alignment.StripedSmithWaterman.__call__", false]], "__call__() (skbio.workflow.method method)": [[1070, "skbio.workflow.method.__call__", false]], "__call__() (skbio.workflow.requires method)": [[1081, "skbio.workflow.requires.__call__", false]], "__call__() (skbio.workflow.workflow method)": [[1058, "skbio.workflow.Workflow.__call__", false]], "__contains__() (skbio.alignment.tabularmsa method)": [[67, "skbio.alignment.TabularMSA.__contains__", false]], "__contains__() (skbio.sequence.dna method)": [[381, "skbio.sequence.DNA.__contains__", false]], "__contains__() (skbio.sequence.grammaredsequence method)": [[452, "skbio.sequence.GrammaredSequence.__contains__", false]], "__contains__() (skbio.sequence.protein method)": [[503, "skbio.sequence.Protein.__contains__", false]], "__contains__() (skbio.sequence.rna method)": [[556, "skbio.sequence.RNA.__contains__", false]], "__contains__() (skbio.sequence.sequence method)": [[615, "skbio.sequence.Sequence.__contains__", false]], "__contains__() (skbio.sequence.substitutionmatrix method)": [[652, "skbio.sequence.SubstitutionMatrix.__contains__", false]], "__contains__() (skbio.stats.distance.dissimilaritymatrix method)": [[705, "skbio.stats.distance.DissimilarityMatrix.__contains__", false]], "__contains__() (skbio.stats.distance.distancematrix method)": [[728, "skbio.stats.distance.DistanceMatrix.__contains__", false]], "__copy__() (skbio.alignment.tabularmsa method)": [[68, "skbio.alignment.TabularMSA.__copy__", false]], "__copy__() (skbio.metadata.intervalmetadata method)": [[306, "skbio.metadata.IntervalMetadata.__copy__", false]], "__copy__() (skbio.sequence.dna method)": [[382, "skbio.sequence.DNA.__copy__", false]], "__copy__() (skbio.sequence.grammaredsequence method)": [[453, "skbio.sequence.GrammaredSequence.__copy__", false]], "__copy__() (skbio.sequence.protein method)": [[504, "skbio.sequence.Protein.__copy__", false]], "__copy__() (skbio.sequence.rna method)": [[557, "skbio.sequence.RNA.__copy__", false]], "__copy__() (skbio.sequence.sequence method)": [[616, "skbio.sequence.Sequence.__copy__", false]], "__copy__() (skbio.tree.treenode method)": [[952, "skbio.tree.TreeNode.__copy__", false]], "__deepcopy__() (skbio.alignment.tabularmsa method)": [[69, "skbio.alignment.TabularMSA.__deepcopy__", false]], "__deepcopy__() (skbio.metadata.intervalmetadata method)": [[307, "skbio.metadata.IntervalMetadata.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.dna method)": [[383, "skbio.sequence.DNA.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.grammaredsequence method)": [[454, "skbio.sequence.GrammaredSequence.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.protein method)": [[505, "skbio.sequence.Protein.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.rna method)": [[558, "skbio.sequence.RNA.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.sequence method)": [[617, "skbio.sequence.Sequence.__deepcopy__", false]], "__deepcopy__() (skbio.tree.treenode method)": [[953, "skbio.tree.TreeNode.__deepcopy__", false]], "__delete__() (skbio.util.classproperty method)": [[1038, "skbio.util.classproperty.__delete__", false]], "__eq__() (skbio.alignment.alignmentstructure method)": [[21, "skbio.alignment.AlignmentStructure.__eq__", false]], "__eq__() (skbio.alignment.alignpath method)": [[4, "skbio.alignment.AlignPath.__eq__", false]], "__eq__() (skbio.alignment.pairalignpath method)": [[35, "skbio.alignment.PairAlignPath.__eq__", false]], "__eq__() (skbio.alignment.stripedsmithwaterman method)": [[55, "skbio.alignment.StripedSmithWaterman.__eq__", false]], "__eq__() (skbio.alignment.tabularmsa method)": [[70, "skbio.alignment.TabularMSA.__eq__", false]], "__eq__() (skbio.embedding.embedding method)": [[153, "skbio.embedding.Embedding.__eq__", false]], "__eq__() (skbio.embedding.proteinembedding method)": [[164, "skbio.embedding.ProteinEmbedding.__eq__", false]], "__eq__() (skbio.embedding.proteinvector method)": [[177, "skbio.embedding.ProteinVector.__eq__", false]], "__eq__() (skbio.embedding.sequenceembedding method)": [[190, "skbio.embedding.SequenceEmbedding.__eq__", false]], "__eq__() (skbio.embedding.sequencevector method)": [[201, "skbio.embedding.SequenceVector.__eq__", false]], "__eq__() (skbio.io.registry.format method)": [[236, "skbio.io.registry.Format.__eq__", false]], "__eq__() (skbio.io.registry.ioregistry method)": [[249, "skbio.io.registry.IORegistry.__eq__", false]], "__eq__() (skbio.metadata.categoricalmetadatacolumn method)": [[278, "skbio.metadata.CategoricalMetadataColumn.__eq__", false]], "__eq__() (skbio.metadata.interval method)": [[296, "skbio.metadata.Interval.__eq__", false]], "__eq__() (skbio.metadata.intervalmetadata method)": [[308, "skbio.metadata.IntervalMetadata.__eq__", false]], "__eq__() (skbio.metadata.metadatacolumn method)": [[325, "skbio.metadata.MetadataColumn.__eq__", false]], "__eq__() (skbio.metadata.numericmetadatacolumn method)": [[343, "skbio.metadata.NumericMetadataColumn.__eq__", false]], "__eq__() (skbio.metadata.samplemetadata method)": [[361, "skbio.metadata.SampleMetadata.__eq__", false]], "__eq__() (skbio.sequence.dna method)": [[384, "skbio.sequence.DNA.__eq__", false]], "__eq__() (skbio.sequence.geneticcode method)": [[439, "skbio.sequence.GeneticCode.__eq__", false]], "__eq__() (skbio.sequence.grammaredsequence method)": [[455, "skbio.sequence.GrammaredSequence.__eq__", false]], "__eq__() (skbio.sequence.protein method)": [[506, "skbio.sequence.Protein.__eq__", false]], "__eq__() (skbio.sequence.rna method)": [[559, "skbio.sequence.RNA.__eq__", false]], "__eq__() (skbio.sequence.sequence method)": [[618, "skbio.sequence.Sequence.__eq__", false]], "__eq__() (skbio.sequence.substitutionmatrix method)": [[653, "skbio.sequence.SubstitutionMatrix.__eq__", false]], "__eq__() (skbio.stats.distance.dissimilaritymatrix method)": [[706, "skbio.stats.distance.DissimilarityMatrix.__eq__", false]], "__eq__() (skbio.stats.distance.distancematrix method)": [[729, "skbio.stats.distance.DistanceMatrix.__eq__", false]], "__eq__() (skbio.stats.gradient.averagegradientanova method)": [[764, "skbio.stats.gradient.AverageGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.categoryresults method)": [[775, "skbio.stats.gradient.CategoryResults.__eq__", false]], "__eq__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[786, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.gradientanova method)": [[797, "skbio.stats.gradient.GradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.gradientanovaresults method)": [[808, "skbio.stats.gradient.GradientANOVAResults.__eq__", false]], "__eq__() (skbio.stats.gradient.groupresults method)": [[819, "skbio.stats.gradient.GroupResults.__eq__", false]], "__eq__() (skbio.stats.gradient.trajectorygradientanova method)": [[830, "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[841, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.ordination.ordinationresults method)": [[854, "skbio.stats.ordination.OrdinationResults.__eq__", false]], "__eq__() (skbio.table.table method)": [[884, "skbio.table.Table.__eq__", false]], "__eq__() (skbio.tree.treenode method)": [[954, "skbio.tree.TreeNode.__eq__", false]], "__eq__() (skbio.util.classproperty method)": [[1039, "skbio.util.classproperty.__eq__", false]], "__eq__() (skbio.workflow.method method)": [[1071, "skbio.workflow.method.__eq__", false]], "__eq__() (skbio.workflow.requires method)": [[1082, "skbio.workflow.requires.__eq__", false]], "__eq__() (skbio.workflow.workflow method)": [[1059, "skbio.workflow.Workflow.__eq__", false]], "__ge__() (skbio.alignment.alignmentstructure method)": [[22, "skbio.alignment.AlignmentStructure.__ge__", false]], "__ge__() (skbio.alignment.alignpath method)": [[5, "skbio.alignment.AlignPath.__ge__", false]], "__ge__() (skbio.alignment.pairalignpath method)": [[36, "skbio.alignment.PairAlignPath.__ge__", false]], "__ge__() (skbio.alignment.stripedsmithwaterman method)": [[56, "skbio.alignment.StripedSmithWaterman.__ge__", false]], "__ge__() (skbio.alignment.tabularmsa method)": [[71, "skbio.alignment.TabularMSA.__ge__", false]], "__ge__() (skbio.embedding.embedding method)": [[154, "skbio.embedding.Embedding.__ge__", false]], "__ge__() (skbio.embedding.proteinembedding method)": [[165, "skbio.embedding.ProteinEmbedding.__ge__", false]], "__ge__() (skbio.embedding.proteinvector method)": [[178, "skbio.embedding.ProteinVector.__ge__", false]], "__ge__() (skbio.embedding.sequenceembedding method)": [[191, "skbio.embedding.SequenceEmbedding.__ge__", false]], "__ge__() (skbio.embedding.sequencevector method)": [[202, "skbio.embedding.SequenceVector.__ge__", false]], "__ge__() (skbio.io.registry.format method)": [[237, "skbio.io.registry.Format.__ge__", false]], "__ge__() (skbio.io.registry.ioregistry method)": [[250, "skbio.io.registry.IORegistry.__ge__", false]], "__ge__() (skbio.metadata.categoricalmetadatacolumn method)": [[279, "skbio.metadata.CategoricalMetadataColumn.__ge__", false]], "__ge__() (skbio.metadata.interval method)": [[297, "skbio.metadata.Interval.__ge__", false]], "__ge__() (skbio.metadata.intervalmetadata method)": [[309, "skbio.metadata.IntervalMetadata.__ge__", false]], "__ge__() (skbio.metadata.metadatacolumn method)": [[326, "skbio.metadata.MetadataColumn.__ge__", false]], "__ge__() (skbio.metadata.numericmetadatacolumn method)": [[344, "skbio.metadata.NumericMetadataColumn.__ge__", false]], "__ge__() (skbio.metadata.samplemetadata method)": [[362, "skbio.metadata.SampleMetadata.__ge__", false]], "__ge__() (skbio.sequence.dna method)": [[385, "skbio.sequence.DNA.__ge__", false]], "__ge__() (skbio.sequence.geneticcode method)": [[440, "skbio.sequence.GeneticCode.__ge__", false]], "__ge__() (skbio.sequence.grammaredsequence method)": [[456, "skbio.sequence.GrammaredSequence.__ge__", false]], "__ge__() (skbio.sequence.protein method)": [[507, "skbio.sequence.Protein.__ge__", false]], "__ge__() (skbio.sequence.rna method)": [[560, "skbio.sequence.RNA.__ge__", false]], "__ge__() (skbio.sequence.sequence method)": [[619, "skbio.sequence.Sequence.__ge__", false]], "__ge__() (skbio.sequence.substitutionmatrix method)": [[654, "skbio.sequence.SubstitutionMatrix.__ge__", false]], "__ge__() (skbio.stats.distance.dissimilaritymatrix method)": [[707, "skbio.stats.distance.DissimilarityMatrix.__ge__", false]], "__ge__() (skbio.stats.distance.distancematrix method)": [[730, "skbio.stats.distance.DistanceMatrix.__ge__", false]], "__ge__() (skbio.stats.gradient.averagegradientanova method)": [[765, "skbio.stats.gradient.AverageGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.categoryresults method)": [[776, "skbio.stats.gradient.CategoryResults.__ge__", false]], "__ge__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[787, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.gradientanova method)": [[798, "skbio.stats.gradient.GradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.gradientanovaresults method)": [[809, "skbio.stats.gradient.GradientANOVAResults.__ge__", false]], "__ge__() (skbio.stats.gradient.groupresults method)": [[820, "skbio.stats.gradient.GroupResults.__ge__", false]], "__ge__() (skbio.stats.gradient.trajectorygradientanova method)": [[831, "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[842, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.ordination.ordinationresults method)": [[855, "skbio.stats.ordination.OrdinationResults.__ge__", false]], "__ge__() (skbio.table.table method)": [[885, "skbio.table.Table.__ge__", false]], "__ge__() (skbio.tree.treenode method)": [[955, "skbio.tree.TreeNode.__ge__", false]], "__ge__() (skbio.util.classproperty method)": [[1040, "skbio.util.classproperty.__ge__", false]], "__ge__() (skbio.workflow.method method)": [[1072, "skbio.workflow.method.__ge__", false]], "__ge__() (skbio.workflow.requires method)": [[1083, "skbio.workflow.requires.__ge__", false]], "__ge__() (skbio.workflow.workflow method)": [[1060, "skbio.workflow.Workflow.__ge__", false]], "__get__() (skbio.util.classproperty method)": [[1041, "skbio.util.classproperty.__get__", false]], "__getitem__() (skbio.alignment.alignmentstructure method)": [[23, "skbio.alignment.AlignmentStructure.__getitem__", false]], "__getitem__() (skbio.alignment.tabularmsa method)": [[72, "skbio.alignment.TabularMSA.__getitem__", false]], "__getitem__() (skbio.sequence.dna method)": [[386, "skbio.sequence.DNA.__getitem__", false]], "__getitem__() (skbio.sequence.grammaredsequence method)": [[457, "skbio.sequence.GrammaredSequence.__getitem__", false]], "__getitem__() (skbio.sequence.protein method)": [[508, "skbio.sequence.Protein.__getitem__", false]], "__getitem__() (skbio.sequence.rna method)": [[561, "skbio.sequence.RNA.__getitem__", false]], "__getitem__() (skbio.sequence.sequence method)": [[620, "skbio.sequence.Sequence.__getitem__", false]], "__getitem__() (skbio.sequence.substitutionmatrix method)": [[655, "skbio.sequence.SubstitutionMatrix.__getitem__", false]], "__getitem__() (skbio.stats.distance.dissimilaritymatrix method)": [[708, "skbio.stats.distance.DissimilarityMatrix.__getitem__", false]], "__getitem__() (skbio.stats.distance.distancematrix method)": [[731, "skbio.stats.distance.DistanceMatrix.__getitem__", false]], "__getitem__() (skbio.table.table method)": [[886, "skbio.table.Table.__getitem__", false]], "__getitem__() (skbio.tree.treenode method)": [[956, "skbio.tree.TreeNode.__getitem__", false]], "__getstate__() (skbio.alignment.alignmentstructure method)": [[24, "skbio.alignment.AlignmentStructure.__getstate__", false]], "__getstate__() (skbio.alignment.alignpath method)": [[6, "skbio.alignment.AlignPath.__getstate__", false]], "__getstate__() (skbio.alignment.pairalignpath method)": [[37, "skbio.alignment.PairAlignPath.__getstate__", false]], "__getstate__() (skbio.alignment.stripedsmithwaterman method)": [[57, "skbio.alignment.StripedSmithWaterman.__getstate__", false]], "__getstate__() (skbio.alignment.tabularmsa method)": [[73, "skbio.alignment.TabularMSA.__getstate__", false]], "__getstate__() (skbio.embedding.embedding method)": [[155, "skbio.embedding.Embedding.__getstate__", false]], "__getstate__() (skbio.embedding.proteinembedding method)": [[166, "skbio.embedding.ProteinEmbedding.__getstate__", false]], "__getstate__() (skbio.embedding.proteinvector method)": [[179, "skbio.embedding.ProteinVector.__getstate__", false]], "__getstate__() (skbio.embedding.sequenceembedding method)": [[192, "skbio.embedding.SequenceEmbedding.__getstate__", false]], "__getstate__() (skbio.embedding.sequencevector method)": [[203, "skbio.embedding.SequenceVector.__getstate__", false]], "__getstate__() (skbio.io.registry.format method)": [[238, "skbio.io.registry.Format.__getstate__", false]], "__getstate__() (skbio.io.registry.ioregistry method)": [[251, "skbio.io.registry.IORegistry.__getstate__", false]], "__getstate__() (skbio.metadata.categoricalmetadatacolumn method)": [[280, "skbio.metadata.CategoricalMetadataColumn.__getstate__", false]], "__getstate__() (skbio.metadata.interval method)": [[298, "skbio.metadata.Interval.__getstate__", false]], "__getstate__() (skbio.metadata.intervalmetadata method)": [[310, "skbio.metadata.IntervalMetadata.__getstate__", false]], "__getstate__() (skbio.metadata.metadatacolumn method)": [[327, "skbio.metadata.MetadataColumn.__getstate__", false]], "__getstate__() (skbio.metadata.numericmetadatacolumn method)": [[345, "skbio.metadata.NumericMetadataColumn.__getstate__", false]], "__getstate__() (skbio.metadata.samplemetadata method)": [[363, "skbio.metadata.SampleMetadata.__getstate__", false]], "__getstate__() (skbio.sequence.dna method)": [[387, "skbio.sequence.DNA.__getstate__", false]], "__getstate__() (skbio.sequence.geneticcode method)": [[441, "skbio.sequence.GeneticCode.__getstate__", false]], "__getstate__() (skbio.sequence.grammaredsequence method)": [[458, "skbio.sequence.GrammaredSequence.__getstate__", false]], "__getstate__() (skbio.sequence.protein method)": [[509, "skbio.sequence.Protein.__getstate__", false]], "__getstate__() (skbio.sequence.rna method)": [[562, "skbio.sequence.RNA.__getstate__", false]], "__getstate__() (skbio.sequence.sequence method)": [[621, "skbio.sequence.Sequence.__getstate__", false]], "__getstate__() (skbio.sequence.substitutionmatrix method)": [[656, "skbio.sequence.SubstitutionMatrix.__getstate__", false]], "__getstate__() (skbio.stats.distance.dissimilaritymatrix method)": [[709, "skbio.stats.distance.DissimilarityMatrix.__getstate__", false]], "__getstate__() (skbio.stats.distance.distancematrix method)": [[732, "skbio.stats.distance.DistanceMatrix.__getstate__", false]], "__getstate__() (skbio.stats.gradient.averagegradientanova method)": [[766, "skbio.stats.gradient.AverageGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.categoryresults method)": [[777, "skbio.stats.gradient.CategoryResults.__getstate__", false]], "__getstate__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[788, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.gradientanova method)": [[799, "skbio.stats.gradient.GradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.gradientanovaresults method)": [[810, "skbio.stats.gradient.GradientANOVAResults.__getstate__", false]], "__getstate__() (skbio.stats.gradient.groupresults method)": [[821, "skbio.stats.gradient.GroupResults.__getstate__", false]], "__getstate__() (skbio.stats.gradient.trajectorygradientanova method)": [[832, "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[843, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.ordination.ordinationresults method)": [[856, "skbio.stats.ordination.OrdinationResults.__getstate__", false]], "__getstate__() (skbio.table.table method)": [[887, "skbio.table.Table.__getstate__", false]], "__getstate__() (skbio.tree.treenode method)": [[957, "skbio.tree.TreeNode.__getstate__", false]], "__getstate__() (skbio.util.classproperty method)": [[1042, "skbio.util.classproperty.__getstate__", false]], "__getstate__() (skbio.workflow.method method)": [[1073, "skbio.workflow.method.__getstate__", false]], "__getstate__() (skbio.workflow.requires method)": [[1084, "skbio.workflow.requires.__getstate__", false]], "__getstate__() (skbio.workflow.workflow method)": [[1061, "skbio.workflow.Workflow.__getstate__", false]], "__gt__() (skbio.alignment.alignmentstructure method)": [[25, "skbio.alignment.AlignmentStructure.__gt__", false]], "__gt__() (skbio.alignment.alignpath method)": [[7, "skbio.alignment.AlignPath.__gt__", false]], "__gt__() (skbio.alignment.pairalignpath method)": [[38, "skbio.alignment.PairAlignPath.__gt__", false]], "__gt__() (skbio.alignment.stripedsmithwaterman method)": [[58, "skbio.alignment.StripedSmithWaterman.__gt__", false]], "__gt__() (skbio.alignment.tabularmsa method)": [[74, "skbio.alignment.TabularMSA.__gt__", false]], "__gt__() (skbio.embedding.embedding method)": [[156, "skbio.embedding.Embedding.__gt__", false]], "__gt__() (skbio.embedding.proteinembedding method)": [[167, "skbio.embedding.ProteinEmbedding.__gt__", false]], "__gt__() (skbio.embedding.proteinvector method)": [[180, "skbio.embedding.ProteinVector.__gt__", false]], "__gt__() (skbio.embedding.sequenceembedding method)": [[193, "skbio.embedding.SequenceEmbedding.__gt__", false]], "__gt__() (skbio.embedding.sequencevector method)": [[204, "skbio.embedding.SequenceVector.__gt__", false]], "__gt__() (skbio.io.registry.format method)": [[239, "skbio.io.registry.Format.__gt__", false]], "__gt__() (skbio.io.registry.ioregistry method)": [[252, "skbio.io.registry.IORegistry.__gt__", false]], "__gt__() (skbio.metadata.categoricalmetadatacolumn method)": [[281, "skbio.metadata.CategoricalMetadataColumn.__gt__", false]], "__gt__() (skbio.metadata.interval method)": [[299, "skbio.metadata.Interval.__gt__", false]], "__gt__() (skbio.metadata.intervalmetadata method)": [[311, "skbio.metadata.IntervalMetadata.__gt__", false]], "__gt__() (skbio.metadata.metadatacolumn method)": [[328, "skbio.metadata.MetadataColumn.__gt__", false]], "__gt__() (skbio.metadata.numericmetadatacolumn method)": [[346, "skbio.metadata.NumericMetadataColumn.__gt__", false]], "__gt__() (skbio.metadata.samplemetadata method)": [[364, "skbio.metadata.SampleMetadata.__gt__", false]], "__gt__() (skbio.sequence.dna method)": [[388, "skbio.sequence.DNA.__gt__", false]], "__gt__() (skbio.sequence.geneticcode method)": [[442, "skbio.sequence.GeneticCode.__gt__", false]], "__gt__() (skbio.sequence.grammaredsequence method)": [[459, "skbio.sequence.GrammaredSequence.__gt__", false]], "__gt__() (skbio.sequence.protein method)": [[510, "skbio.sequence.Protein.__gt__", false]], "__gt__() (skbio.sequence.rna method)": [[563, "skbio.sequence.RNA.__gt__", false]], "__gt__() (skbio.sequence.sequence method)": [[622, "skbio.sequence.Sequence.__gt__", false]], "__gt__() (skbio.sequence.substitutionmatrix method)": [[657, "skbio.sequence.SubstitutionMatrix.__gt__", false]], "__gt__() (skbio.stats.distance.dissimilaritymatrix method)": [[710, "skbio.stats.distance.DissimilarityMatrix.__gt__", false]], "__gt__() (skbio.stats.distance.distancematrix method)": [[733, "skbio.stats.distance.DistanceMatrix.__gt__", false]], "__gt__() (skbio.stats.gradient.averagegradientanova method)": [[767, "skbio.stats.gradient.AverageGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.categoryresults method)": [[778, "skbio.stats.gradient.CategoryResults.__gt__", false]], "__gt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[789, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.gradientanova method)": [[800, "skbio.stats.gradient.GradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.gradientanovaresults method)": [[811, "skbio.stats.gradient.GradientANOVAResults.__gt__", false]], "__gt__() (skbio.stats.gradient.groupresults method)": [[822, "skbio.stats.gradient.GroupResults.__gt__", false]], "__gt__() (skbio.stats.gradient.trajectorygradientanova method)": [[833, "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[844, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.ordination.ordinationresults method)": [[857, "skbio.stats.ordination.OrdinationResults.__gt__", false]], "__gt__() (skbio.table.table method)": [[888, "skbio.table.Table.__gt__", false]], "__gt__() (skbio.tree.treenode method)": [[958, "skbio.tree.TreeNode.__gt__", false]], "__gt__() (skbio.util.classproperty method)": [[1043, "skbio.util.classproperty.__gt__", false]], "__gt__() (skbio.workflow.method method)": [[1074, "skbio.workflow.method.__gt__", false]], "__gt__() (skbio.workflow.requires method)": [[1085, "skbio.workflow.requires.__gt__", false]], "__gt__() (skbio.workflow.workflow method)": [[1062, "skbio.workflow.Workflow.__gt__", false]], "__hash__() (skbio.alignment.alignmentstructure method)": [[26, "skbio.alignment.AlignmentStructure.__hash__", false]], "__hash__() (skbio.alignment.alignpath method)": [[8, "skbio.alignment.AlignPath.__hash__", false]], "__hash__() (skbio.alignment.pairalignpath method)": [[39, "skbio.alignment.PairAlignPath.__hash__", false]], "__hash__() (skbio.alignment.stripedsmithwaterman method)": [[59, "skbio.alignment.StripedSmithWaterman.__hash__", false]], "__hash__() (skbio.embedding.embedding method)": [[157, "skbio.embedding.Embedding.__hash__", false]], "__hash__() (skbio.embedding.proteinembedding method)": [[168, "skbio.embedding.ProteinEmbedding.__hash__", false]], "__hash__() (skbio.embedding.proteinvector method)": [[181, "skbio.embedding.ProteinVector.__hash__", false]], "__hash__() (skbio.embedding.sequenceembedding method)": [[194, "skbio.embedding.SequenceEmbedding.__hash__", false]], "__hash__() (skbio.embedding.sequencevector method)": [[205, "skbio.embedding.SequenceVector.__hash__", false]], "__hash__() (skbio.io.registry.format method)": [[240, "skbio.io.registry.Format.__hash__", false]], "__hash__() (skbio.io.registry.ioregistry method)": [[253, "skbio.io.registry.IORegistry.__hash__", false]], "__hash__() (skbio.stats.gradient.averagegradientanova method)": [[768, "skbio.stats.gradient.AverageGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.categoryresults method)": [[779, "skbio.stats.gradient.CategoryResults.__hash__", false]], "__hash__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[790, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.gradientanova method)": [[801, "skbio.stats.gradient.GradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.gradientanovaresults method)": [[812, "skbio.stats.gradient.GradientANOVAResults.__hash__", false]], "__hash__() (skbio.stats.gradient.groupresults method)": [[823, "skbio.stats.gradient.GroupResults.__hash__", false]], "__hash__() (skbio.stats.gradient.trajectorygradientanova method)": [[834, "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[845, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.ordination.ordinationresults method)": [[858, "skbio.stats.ordination.OrdinationResults.__hash__", false]], "__hash__() (skbio.tree.treenode method)": [[959, "skbio.tree.TreeNode.__hash__", false]], "__hash__() (skbio.util.classproperty method)": [[1044, "skbio.util.classproperty.__hash__", false]], "__hash__() (skbio.workflow.method method)": [[1075, "skbio.workflow.method.__hash__", false]], "__hash__() (skbio.workflow.requires method)": [[1086, "skbio.workflow.requires.__hash__", false]], "__hash__() (skbio.workflow.workflow method)": [[1063, "skbio.workflow.Workflow.__hash__", false]], "__iter__() (skbio.alignment.tabularmsa method)": [[75, "skbio.alignment.TabularMSA.__iter__", false]], "__iter__() (skbio.sequence.dna method)": [[389, "skbio.sequence.DNA.__iter__", false]], "__iter__() (skbio.sequence.grammaredsequence method)": [[460, "skbio.sequence.GrammaredSequence.__iter__", false]], "__iter__() (skbio.sequence.protein method)": [[511, "skbio.sequence.Protein.__iter__", false]], "__iter__() (skbio.sequence.rna method)": [[564, "skbio.sequence.RNA.__iter__", false]], "__iter__() (skbio.sequence.sequence method)": [[623, "skbio.sequence.Sequence.__iter__", false]], "__iter__() (skbio.table.table method)": [[889, "skbio.table.Table.__iter__", false]], "__iter__() (skbio.tree.treenode method)": [[960, "skbio.tree.TreeNode.__iter__", false]], "__le__() (skbio.alignment.alignmentstructure method)": [[27, "skbio.alignment.AlignmentStructure.__le__", false]], "__le__() (skbio.alignment.alignpath method)": [[9, "skbio.alignment.AlignPath.__le__", false]], "__le__() (skbio.alignment.pairalignpath method)": [[40, "skbio.alignment.PairAlignPath.__le__", false]], "__le__() (skbio.alignment.stripedsmithwaterman method)": [[60, "skbio.alignment.StripedSmithWaterman.__le__", false]], "__le__() (skbio.alignment.tabularmsa method)": [[76, "skbio.alignment.TabularMSA.__le__", false]], "__le__() (skbio.embedding.embedding method)": [[158, "skbio.embedding.Embedding.__le__", false]], "__le__() (skbio.embedding.proteinembedding method)": [[169, "skbio.embedding.ProteinEmbedding.__le__", false]], "__le__() (skbio.embedding.proteinvector method)": [[182, "skbio.embedding.ProteinVector.__le__", false]], "__le__() (skbio.embedding.sequenceembedding method)": [[195, "skbio.embedding.SequenceEmbedding.__le__", false]], "__le__() (skbio.embedding.sequencevector method)": [[206, "skbio.embedding.SequenceVector.__le__", false]], "__le__() (skbio.io.registry.format method)": [[241, "skbio.io.registry.Format.__le__", false]], "__le__() (skbio.io.registry.ioregistry method)": [[254, "skbio.io.registry.IORegistry.__le__", false]], "__le__() (skbio.metadata.categoricalmetadatacolumn method)": [[282, "skbio.metadata.CategoricalMetadataColumn.__le__", false]], "__le__() (skbio.metadata.interval method)": [[300, "skbio.metadata.Interval.__le__", false]], "__le__() (skbio.metadata.intervalmetadata method)": [[312, "skbio.metadata.IntervalMetadata.__le__", false]], "__le__() (skbio.metadata.metadatacolumn method)": [[329, "skbio.metadata.MetadataColumn.__le__", false]], "__le__() (skbio.metadata.numericmetadatacolumn method)": [[347, "skbio.metadata.NumericMetadataColumn.__le__", false]], "__le__() (skbio.metadata.samplemetadata method)": [[365, "skbio.metadata.SampleMetadata.__le__", false]], "__le__() (skbio.sequence.dna method)": [[390, "skbio.sequence.DNA.__le__", false]], "__le__() (skbio.sequence.geneticcode method)": [[443, "skbio.sequence.GeneticCode.__le__", false]], "__le__() (skbio.sequence.grammaredsequence method)": [[461, "skbio.sequence.GrammaredSequence.__le__", false]], "__le__() (skbio.sequence.protein method)": [[512, "skbio.sequence.Protein.__le__", false]], "__le__() (skbio.sequence.rna method)": [[565, "skbio.sequence.RNA.__le__", false]], "__le__() (skbio.sequence.sequence method)": [[624, "skbio.sequence.Sequence.__le__", false]], "__le__() (skbio.sequence.substitutionmatrix method)": [[658, "skbio.sequence.SubstitutionMatrix.__le__", false]], "__le__() (skbio.stats.distance.dissimilaritymatrix method)": [[711, "skbio.stats.distance.DissimilarityMatrix.__le__", false]], "__le__() (skbio.stats.distance.distancematrix method)": [[734, "skbio.stats.distance.DistanceMatrix.__le__", false]], "__le__() (skbio.stats.gradient.averagegradientanova method)": [[769, "skbio.stats.gradient.AverageGradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.categoryresults method)": [[780, "skbio.stats.gradient.CategoryResults.__le__", false]], "__le__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[791, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.gradientanova method)": [[802, "skbio.stats.gradient.GradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.gradientanovaresults method)": [[813, "skbio.stats.gradient.GradientANOVAResults.__le__", false]], "__le__() (skbio.stats.gradient.groupresults method)": [[824, "skbio.stats.gradient.GroupResults.__le__", false]], "__le__() (skbio.stats.gradient.trajectorygradientanova method)": [[835, "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[846, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", false]], "__le__() (skbio.stats.ordination.ordinationresults method)": [[859, "skbio.stats.ordination.OrdinationResults.__le__", false]], "__le__() (skbio.table.table method)": [[890, "skbio.table.Table.__le__", false]], "__le__() (skbio.tree.treenode method)": [[961, "skbio.tree.TreeNode.__le__", false]], "__le__() (skbio.util.classproperty method)": [[1045, "skbio.util.classproperty.__le__", false]], "__le__() (skbio.workflow.method method)": [[1076, "skbio.workflow.method.__le__", false]], "__le__() (skbio.workflow.requires method)": [[1087, "skbio.workflow.requires.__le__", false]], "__le__() (skbio.workflow.workflow method)": [[1064, "skbio.workflow.Workflow.__le__", false]], "__len__() (skbio.alignment.tabularmsa method)": [[77, "skbio.alignment.TabularMSA.__len__", false]], "__len__() (skbio.sequence.dna method)": [[391, "skbio.sequence.DNA.__len__", false]], "__len__() (skbio.sequence.grammaredsequence method)": [[462, "skbio.sequence.GrammaredSequence.__len__", false]], "__len__() (skbio.sequence.protein method)": [[513, "skbio.sequence.Protein.__len__", false]], "__len__() (skbio.sequence.rna method)": [[566, "skbio.sequence.RNA.__len__", false]], "__len__() (skbio.sequence.sequence method)": [[625, "skbio.sequence.Sequence.__len__", false]], "__len__() (skbio.tree.treenode method)": [[962, "skbio.tree.TreeNode.__len__", false]], "__lt__() (skbio.alignment.alignmentstructure method)": [[28, "skbio.alignment.AlignmentStructure.__lt__", false]], "__lt__() (skbio.alignment.alignpath method)": [[10, "skbio.alignment.AlignPath.__lt__", false]], "__lt__() (skbio.alignment.pairalignpath method)": [[41, "skbio.alignment.PairAlignPath.__lt__", false]], "__lt__() (skbio.alignment.stripedsmithwaterman method)": [[61, "skbio.alignment.StripedSmithWaterman.__lt__", false]], "__lt__() (skbio.alignment.tabularmsa method)": [[78, "skbio.alignment.TabularMSA.__lt__", false]], "__lt__() (skbio.embedding.embedding method)": [[159, "skbio.embedding.Embedding.__lt__", false]], "__lt__() (skbio.embedding.proteinembedding method)": [[170, "skbio.embedding.ProteinEmbedding.__lt__", false]], "__lt__() (skbio.embedding.proteinvector method)": [[183, "skbio.embedding.ProteinVector.__lt__", false]], "__lt__() (skbio.embedding.sequenceembedding method)": [[196, "skbio.embedding.SequenceEmbedding.__lt__", false]], "__lt__() (skbio.embedding.sequencevector method)": [[207, "skbio.embedding.SequenceVector.__lt__", false]], "__lt__() (skbio.io.registry.format method)": [[242, "skbio.io.registry.Format.__lt__", false]], "__lt__() (skbio.io.registry.ioregistry method)": [[255, "skbio.io.registry.IORegistry.__lt__", false]], "__lt__() (skbio.metadata.categoricalmetadatacolumn method)": [[283, "skbio.metadata.CategoricalMetadataColumn.__lt__", false]], "__lt__() (skbio.metadata.interval method)": [[301, "skbio.metadata.Interval.__lt__", false]], "__lt__() (skbio.metadata.intervalmetadata method)": [[313, "skbio.metadata.IntervalMetadata.__lt__", false]], "__lt__() (skbio.metadata.metadatacolumn method)": [[330, "skbio.metadata.MetadataColumn.__lt__", false]], "__lt__() (skbio.metadata.numericmetadatacolumn method)": [[348, "skbio.metadata.NumericMetadataColumn.__lt__", false]], "__lt__() (skbio.metadata.samplemetadata method)": [[366, "skbio.metadata.SampleMetadata.__lt__", false]], "__lt__() (skbio.sequence.dna method)": [[392, "skbio.sequence.DNA.__lt__", false]], "__lt__() (skbio.sequence.geneticcode method)": [[444, "skbio.sequence.GeneticCode.__lt__", false]], "__lt__() (skbio.sequence.grammaredsequence method)": [[463, "skbio.sequence.GrammaredSequence.__lt__", false]], "__lt__() (skbio.sequence.protein method)": [[514, "skbio.sequence.Protein.__lt__", false]], "__lt__() (skbio.sequence.rna method)": [[567, "skbio.sequence.RNA.__lt__", false]], "__lt__() (skbio.sequence.sequence method)": [[626, "skbio.sequence.Sequence.__lt__", false]], "__lt__() (skbio.sequence.substitutionmatrix method)": [[659, "skbio.sequence.SubstitutionMatrix.__lt__", false]], "__lt__() (skbio.stats.distance.dissimilaritymatrix method)": [[712, "skbio.stats.distance.DissimilarityMatrix.__lt__", false]], "__lt__() (skbio.stats.distance.distancematrix method)": [[735, "skbio.stats.distance.DistanceMatrix.__lt__", false]], "__lt__() (skbio.stats.gradient.averagegradientanova method)": [[770, "skbio.stats.gradient.AverageGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.categoryresults method)": [[781, "skbio.stats.gradient.CategoryResults.__lt__", false]], "__lt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[792, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.gradientanova method)": [[803, "skbio.stats.gradient.GradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.gradientanovaresults method)": [[814, "skbio.stats.gradient.GradientANOVAResults.__lt__", false]], "__lt__() (skbio.stats.gradient.groupresults method)": [[825, "skbio.stats.gradient.GroupResults.__lt__", false]], "__lt__() (skbio.stats.gradient.trajectorygradientanova method)": [[836, "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[847, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.ordination.ordinationresults method)": [[860, "skbio.stats.ordination.OrdinationResults.__lt__", false]], "__lt__() (skbio.table.table method)": [[891, "skbio.table.Table.__lt__", false]], "__lt__() (skbio.tree.treenode method)": [[963, "skbio.tree.TreeNode.__lt__", false]], "__lt__() (skbio.util.classproperty method)": [[1046, "skbio.util.classproperty.__lt__", false]], "__lt__() (skbio.workflow.method method)": [[1077, "skbio.workflow.method.__lt__", false]], "__lt__() (skbio.workflow.requires method)": [[1088, "skbio.workflow.requires.__lt__", false]], "__lt__() (skbio.workflow.workflow method)": [[1065, "skbio.workflow.Workflow.__lt__", false]], "__ne__() (skbio.alignment.alignmentstructure method)": [[29, "skbio.alignment.AlignmentStructure.__ne__", false]], "__ne__() (skbio.alignment.alignpath method)": [[11, "skbio.alignment.AlignPath.__ne__", false]], "__ne__() (skbio.alignment.pairalignpath method)": [[42, "skbio.alignment.PairAlignPath.__ne__", false]], "__ne__() (skbio.alignment.stripedsmithwaterman method)": [[62, "skbio.alignment.StripedSmithWaterman.__ne__", false]], "__ne__() (skbio.alignment.tabularmsa method)": [[79, "skbio.alignment.TabularMSA.__ne__", false]], "__ne__() (skbio.embedding.embedding method)": [[160, "skbio.embedding.Embedding.__ne__", false]], "__ne__() (skbio.embedding.proteinembedding method)": [[171, "skbio.embedding.ProteinEmbedding.__ne__", false]], "__ne__() (skbio.embedding.proteinvector method)": [[184, "skbio.embedding.ProteinVector.__ne__", false]], "__ne__() (skbio.embedding.sequenceembedding method)": [[197, "skbio.embedding.SequenceEmbedding.__ne__", false]], "__ne__() (skbio.embedding.sequencevector method)": [[208, "skbio.embedding.SequenceVector.__ne__", false]], "__ne__() (skbio.io.registry.format method)": [[243, "skbio.io.registry.Format.__ne__", false]], "__ne__() (skbio.io.registry.ioregistry method)": [[256, "skbio.io.registry.IORegistry.__ne__", false]], "__ne__() (skbio.metadata.categoricalmetadatacolumn method)": [[284, "skbio.metadata.CategoricalMetadataColumn.__ne__", false]], "__ne__() (skbio.metadata.interval method)": [[302, "skbio.metadata.Interval.__ne__", false]], "__ne__() (skbio.metadata.intervalmetadata method)": [[314, "skbio.metadata.IntervalMetadata.__ne__", false]], "__ne__() (skbio.metadata.metadatacolumn method)": [[331, "skbio.metadata.MetadataColumn.__ne__", false]], "__ne__() (skbio.metadata.numericmetadatacolumn method)": [[349, "skbio.metadata.NumericMetadataColumn.__ne__", false]], "__ne__() (skbio.metadata.samplemetadata method)": [[367, "skbio.metadata.SampleMetadata.__ne__", false]], "__ne__() (skbio.sequence.dna method)": [[393, "skbio.sequence.DNA.__ne__", false]], "__ne__() (skbio.sequence.geneticcode method)": [[445, "skbio.sequence.GeneticCode.__ne__", false]], "__ne__() (skbio.sequence.grammaredsequence method)": [[464, "skbio.sequence.GrammaredSequence.__ne__", false]], "__ne__() (skbio.sequence.protein method)": [[515, "skbio.sequence.Protein.__ne__", false]], "__ne__() (skbio.sequence.rna method)": [[568, "skbio.sequence.RNA.__ne__", false]], "__ne__() (skbio.sequence.sequence method)": [[627, "skbio.sequence.Sequence.__ne__", false]], "__ne__() (skbio.sequence.substitutionmatrix method)": [[660, "skbio.sequence.SubstitutionMatrix.__ne__", false]], "__ne__() (skbio.stats.distance.dissimilaritymatrix method)": [[713, "skbio.stats.distance.DissimilarityMatrix.__ne__", false]], "__ne__() (skbio.stats.distance.distancematrix method)": [[736, "skbio.stats.distance.DistanceMatrix.__ne__", false]], "__ne__() (skbio.stats.gradient.averagegradientanova method)": [[771, "skbio.stats.gradient.AverageGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.categoryresults method)": [[782, "skbio.stats.gradient.CategoryResults.__ne__", false]], "__ne__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[793, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.gradientanova method)": [[804, "skbio.stats.gradient.GradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.gradientanovaresults method)": [[815, "skbio.stats.gradient.GradientANOVAResults.__ne__", false]], "__ne__() (skbio.stats.gradient.groupresults method)": [[826, "skbio.stats.gradient.GroupResults.__ne__", false]], "__ne__() (skbio.stats.gradient.trajectorygradientanova method)": [[837, "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[848, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.ordination.ordinationresults method)": [[861, "skbio.stats.ordination.OrdinationResults.__ne__", false]], "__ne__() (skbio.table.table method)": [[892, "skbio.table.Table.__ne__", false]], "__ne__() (skbio.tree.treenode method)": [[964, "skbio.tree.TreeNode.__ne__", false]], "__ne__() (skbio.util.classproperty method)": [[1047, "skbio.util.classproperty.__ne__", false]], "__ne__() (skbio.workflow.method method)": [[1078, "skbio.workflow.method.__ne__", false]], "__ne__() (skbio.workflow.requires method)": [[1089, "skbio.workflow.requires.__ne__", false]], "__ne__() (skbio.workflow.workflow method)": [[1066, "skbio.workflow.Workflow.__ne__", false]], "__reversed__() (skbio.alignment.tabularmsa method)": [[80, "skbio.alignment.TabularMSA.__reversed__", false]], "__reversed__() (skbio.sequence.dna method)": [[394, "skbio.sequence.DNA.__reversed__", false]], "__reversed__() (skbio.sequence.grammaredsequence method)": [[465, "skbio.sequence.GrammaredSequence.__reversed__", false]], "__reversed__() (skbio.sequence.protein method)": [[516, "skbio.sequence.Protein.__reversed__", false]], "__reversed__() (skbio.sequence.rna method)": [[569, "skbio.sequence.RNA.__reversed__", false]], "__reversed__() (skbio.sequence.sequence method)": [[628, "skbio.sequence.Sequence.__reversed__", false]], "__set__() (skbio.util.classproperty method)": [[1048, "skbio.util.classproperty.__set__", false]], "__set_name__() (skbio.util.classproperty method)": [[1049, "skbio.util.classproperty.__set_name__", false]], "__setstate__() (skbio.alignment.alignmentstructure method)": [[30, "skbio.alignment.AlignmentStructure.__setstate__", false]], "__setstate__() (skbio.alignment.stripedsmithwaterman method)": [[63, "skbio.alignment.StripedSmithWaterman.__setstate__", false]], "__str__() (skbio.alignment.alignmentstructure method)": [[31, "skbio.alignment.AlignmentStructure.__str__", false]], "__str__() (skbio.alignment.alignpath method)": [[12, "skbio.alignment.AlignPath.__str__", false]], "__str__() (skbio.alignment.pairalignpath method)": [[43, "skbio.alignment.PairAlignPath.__str__", false]], "__str__() (skbio.alignment.stripedsmithwaterman method)": [[64, "skbio.alignment.StripedSmithWaterman.__str__", false]], "__str__() (skbio.alignment.tabularmsa method)": [[81, "skbio.alignment.TabularMSA.__str__", false]], "__str__() (skbio.embedding.embedding method)": [[161, "skbio.embedding.Embedding.__str__", false]], "__str__() (skbio.embedding.proteinembedding method)": [[172, "skbio.embedding.ProteinEmbedding.__str__", false]], "__str__() (skbio.embedding.proteinvector method)": [[185, "skbio.embedding.ProteinVector.__str__", false]], "__str__() (skbio.embedding.sequenceembedding method)": [[198, "skbio.embedding.SequenceEmbedding.__str__", false]], "__str__() (skbio.embedding.sequencevector method)": [[209, "skbio.embedding.SequenceVector.__str__", false]], "__str__() (skbio.io.registry.format method)": [[244, "skbio.io.registry.Format.__str__", false]], "__str__() (skbio.io.registry.ioregistry method)": [[257, "skbio.io.registry.IORegistry.__str__", false]], "__str__() (skbio.metadata.categoricalmetadatacolumn method)": [[285, "skbio.metadata.CategoricalMetadataColumn.__str__", false]], "__str__() (skbio.metadata.interval method)": [[303, "skbio.metadata.Interval.__str__", false]], "__str__() (skbio.metadata.intervalmetadata method)": [[315, "skbio.metadata.IntervalMetadata.__str__", false]], "__str__() (skbio.metadata.metadatacolumn method)": [[332, "skbio.metadata.MetadataColumn.__str__", false]], "__str__() (skbio.metadata.numericmetadatacolumn method)": [[350, "skbio.metadata.NumericMetadataColumn.__str__", false]], "__str__() (skbio.metadata.samplemetadata method)": [[368, "skbio.metadata.SampleMetadata.__str__", false]], "__str__() (skbio.sequence.dna method)": [[395, "skbio.sequence.DNA.__str__", false]], "__str__() (skbio.sequence.geneticcode method)": [[446, "skbio.sequence.GeneticCode.__str__", false]], "__str__() (skbio.sequence.grammaredsequence method)": [[466, "skbio.sequence.GrammaredSequence.__str__", false]], "__str__() (skbio.sequence.protein method)": [[517, "skbio.sequence.Protein.__str__", false]], "__str__() (skbio.sequence.rna method)": [[570, "skbio.sequence.RNA.__str__", false]], "__str__() (skbio.sequence.sequence method)": [[629, "skbio.sequence.Sequence.__str__", false]], "__str__() (skbio.sequence.substitutionmatrix method)": [[661, "skbio.sequence.SubstitutionMatrix.__str__", false]], "__str__() (skbio.stats.distance.dissimilaritymatrix method)": [[714, "skbio.stats.distance.DissimilarityMatrix.__str__", false]], "__str__() (skbio.stats.distance.distancematrix method)": [[737, "skbio.stats.distance.DistanceMatrix.__str__", false]], "__str__() (skbio.stats.gradient.averagegradientanova method)": [[772, "skbio.stats.gradient.AverageGradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.categoryresults method)": [[783, "skbio.stats.gradient.CategoryResults.__str__", false]], "__str__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[794, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.gradientanova method)": [[805, "skbio.stats.gradient.GradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.gradientanovaresults method)": [[816, "skbio.stats.gradient.GradientANOVAResults.__str__", false]], "__str__() (skbio.stats.gradient.groupresults method)": [[827, "skbio.stats.gradient.GroupResults.__str__", false]], "__str__() (skbio.stats.gradient.trajectorygradientanova method)": [[838, "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[849, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", false]], "__str__() (skbio.stats.ordination.ordinationresults method)": [[862, "skbio.stats.ordination.OrdinationResults.__str__", false]], "__str__() (skbio.table.table method)": [[893, "skbio.table.Table.__str__", false]], "__str__() (skbio.tree.treenode method)": [[965, "skbio.tree.TreeNode.__str__", false]], "__str__() (skbio.util.classproperty method)": [[1050, "skbio.util.classproperty.__str__", false]], "__str__() (skbio.workflow.method method)": [[1079, "skbio.workflow.method.__str__", false]], "__str__() (skbio.workflow.requires method)": [[1090, "skbio.workflow.requires.__str__", false]], "__str__() (skbio.workflow.workflow method)": [[1067, "skbio.workflow.Workflow.__str__", false]], "accumulate_to_ancestor() (skbio.tree.treenode method)": [[966, "skbio.tree.TreeNode.accumulate_to_ancestor", false]], "ace() (in module skbio.diversity.alpha)": [[107, "skbio.diversity.alpha.ace", false]], "add() (skbio.metadata.intervalmetadata method)": [[316, "skbio.metadata.IntervalMetadata.add", false]], "add_format() (skbio.io.registry.ioregistry method)": [[258, "skbio.io.registry.IORegistry.add_format", false]], "add_group_metadata() (skbio.table.table method)": [[894, "skbio.table.Table.add_group_metadata", false]], "add_metadata() (skbio.table.table method)": [[895, "skbio.table.Table.add_metadata", false]], "align_to() (skbio.table.table method)": [[896, "skbio.table.Table.align_to", false]], "align_to_dataframe() (skbio.table.table method)": [[897, "skbio.table.Table.align_to_dataframe", false]], "align_tree() (skbio.table.table method)": [[898, "skbio.table.Table.align_tree", false]], "alignmentstructure (class in skbio.alignment)": [[20, "skbio.alignment.AlignmentStructure", false]], "alignpath (class in skbio.alignment)": [[3, "skbio.alignment.AlignPath", false]], "alpha_diversity() (in module skbio.diversity)": [[143, "skbio.diversity.alpha_diversity", false]], "alr() (in module skbio.stats.composition)": [[683, "skbio.stats.composition.alr", false]], "alr_inv() (in module skbio.stats.composition)": [[684, "skbio.stats.composition.alr_inv", false]], "ancestors() (skbio.tree.treenode method)": [[967, "skbio.tree.TreeNode.ancestors", false]], "ancom() (in module skbio.stats.composition)": [[685, "skbio.stats.composition.ancom", false]], "anosim() (in module skbio.stats.distance)": [[753, "skbio.stats.distance.anosim", false]], "append() (skbio.alignment.tabularmsa method)": [[82, "skbio.alignment.TabularMSA.append", false]], "append() (skbio.tree.treenode method)": [[968, "skbio.tree.TreeNode.append", false]], "ascii_art() (skbio.tree.treenode method)": [[969, "skbio.tree.TreeNode.ascii_art", false]], "assert_data_frame_almost_equal() (in module skbio.util)": [[1034, "skbio.util.assert_data_frame_almost_equal", false]], "assert_ordination_results_equal() (in module skbio.util)": [[1035, "skbio.util.assert_ordination_results_equal", false]], "assign_ids() (skbio.tree.treenode method)": [[970, "skbio.tree.TreeNode.assign_ids", false]], "assign_supports() (skbio.tree.treenode method)": [[971, "skbio.tree.TreeNode.assign_supports", false]], "averagegradientanova (class in skbio.stats.gradient)": [[763, "skbio.stats.gradient.AverageGradientANOVA", false]], "berger_parker_d() (in module skbio.diversity.alpha)": [[108, "skbio.diversity.alpha.berger_parker_d", false]], "beta_diversity() (in module skbio.diversity)": [[147, "skbio.diversity.beta_diversity", false]], "between() (skbio.sequence.substitutionmatrix method)": [[662, "skbio.sequence.SubstitutionMatrix.between", false]], "between() (skbio.stats.distance.dissimilaritymatrix method)": [[715, "skbio.stats.distance.DissimilarityMatrix.between", false]], "between() (skbio.stats.distance.distancematrix method)": [[738, "skbio.stats.distance.DistanceMatrix.between", false]], "bifurcate() (skbio.tree.treenode method)": [[972, "skbio.tree.TreeNode.bifurcate", false]], "bioenv() (in module skbio.stats.distance)": [[754, "skbio.stats.distance.bioenv", false]], "block_beta_diversity() (in module skbio.diversity)": [[148, "skbio.diversity.block_beta_diversity", false]], "brillouin_d() (in module skbio.diversity.alpha)": [[109, "skbio.diversity.alpha.brillouin_d", false]], "by_name() (skbio.sequence.substitutionmatrix class method)": [[663, "skbio.sequence.SubstitutionMatrix.by_name", false]], "bytes() (skbio.embedding.embedding method)": [[162, "skbio.embedding.Embedding.bytes", false]], "bytes() (skbio.embedding.proteinembedding method)": [[173, "skbio.embedding.ProteinEmbedding.bytes", false]], "bytes() (skbio.embedding.proteinvector method)": [[186, "skbio.embedding.ProteinVector.bytes", false]], "bytes() (skbio.embedding.sequenceembedding method)": [[199, "skbio.embedding.SequenceEmbedding.bytes", false]], "bytes() (skbio.embedding.sequencevector method)": [[210, "skbio.embedding.SequenceVector.bytes", false]], "ca() (in module skbio.stats.ordination)": [[866, "skbio.stats.ordination.ca", false]], "cache_attr() (skbio.tree.treenode method)": [[973, "skbio.tree.TreeNode.cache_attr", false]], "cardinal_to_ordinal() (in module skbio.util)": [[1036, "skbio.util.cardinal_to_ordinal", false]], "categoricalmetadatacolumn (class in skbio.metadata)": [[277, "skbio.metadata.CategoricalMetadataColumn", false]], "categoryresults (class in skbio.stats.gradient)": [[774, "skbio.stats.gradient.CategoryResults", false]], "cca() (in module skbio.stats.ordination)": [[867, "skbio.stats.ordination.cca", false]], "centralize() (in module skbio.stats.composition)": [[686, "skbio.stats.composition.centralize", false]], "chao1() (in module skbio.diversity.alpha)": [[110, "skbio.diversity.alpha.chao1", false]], "chao1_ci() (in module skbio.diversity.alpha)": [[111, "skbio.diversity.alpha.chao1_ci", false]], "classproperty (class in skbio.util)": [[1037, "skbio.util.classproperty", false]], "closure() (in module skbio.stats.composition)": [[687, "skbio.stats.composition.closure", false]], "clr() (in module skbio.stats.composition)": [[688, "skbio.stats.composition.clr", false]], "clr_inv() (in module skbio.stats.composition)": [[689, "skbio.stats.composition.clr_inv", false]], "collapse() (skbio.table.table method)": [[899, "skbio.table.Table.collapse", false]], "compare_rfd() (skbio.tree.treenode method)": [[974, "skbio.tree.TreeNode.compare_rfd", false]], "compare_subsets() (skbio.tree.treenode method)": [[975, "skbio.tree.TreeNode.compare_subsets", false]], "compare_tip_distances() (skbio.tree.treenode method)": [[976, "skbio.tree.TreeNode.compare_tip_distances", false]], "complement() (skbio.sequence.dna method)": [[396, "skbio.sequence.DNA.complement", false]], "complement() (skbio.sequence.rna method)": [[571, "skbio.sequence.RNA.complement", false]], "concat() (skbio.metadata.intervalmetadata class method)": [[317, "skbio.metadata.IntervalMetadata.concat", false]], "concat() (skbio.sequence.dna class method)": [[397, "skbio.sequence.DNA.concat", false]], "concat() (skbio.sequence.grammaredsequence class method)": [[467, "skbio.sequence.GrammaredSequence.concat", false]], "concat() (skbio.sequence.protein class method)": [[518, "skbio.sequence.Protein.concat", false]], "concat() (skbio.sequence.rna class method)": [[572, "skbio.sequence.RNA.concat", false]], "concat() (skbio.sequence.sequence class method)": [[630, "skbio.sequence.Sequence.concat", false]], "concat() (skbio.table.table method)": [[900, "skbio.table.Table.concat", false]], "condensed_form() (skbio.stats.distance.distancematrix method)": [[739, "skbio.stats.distance.DistanceMatrix.condensed_form", false]], "confidence_bound() (in module skbio.stats.power)": [[878, "skbio.stats.power.confidence_bound", false]], "consensus() (skbio.alignment.tabularmsa method)": [[83, "skbio.alignment.TabularMSA.consensus", false]], "conservation() (skbio.alignment.tabularmsa method)": [[84, "skbio.alignment.TabularMSA.conservation", false]], "copy() (skbio.sequence.substitutionmatrix method)": [[664, "skbio.sequence.SubstitutionMatrix.copy", false]], "copy() (skbio.stats.distance.dissimilaritymatrix method)": [[716, "skbio.stats.distance.DissimilarityMatrix.copy", false]], "copy() (skbio.stats.distance.distancematrix method)": [[740, "skbio.stats.distance.DistanceMatrix.copy", false]], "copy() (skbio.table.table method)": [[901, "skbio.table.Table.copy", false]], "copy() (skbio.tree.treenode method)": [[977, "skbio.tree.TreeNode.copy", false]], "corr() (in module skbio.stats.ordination)": [[868, "skbio.stats.ordination.corr", false]], "count() (skbio.sequence.dna method)": [[398, "skbio.sequence.DNA.count", false]], "count() (skbio.sequence.grammaredsequence method)": [[468, "skbio.sequence.GrammaredSequence.count", false]], "count() (skbio.sequence.protein method)": [[519, "skbio.sequence.Protein.count", false]], "count() (skbio.sequence.rna method)": [[573, "skbio.sequence.RNA.count", false]], "count() (skbio.sequence.sequence method)": [[631, "skbio.sequence.Sequence.count", false]], "count() (skbio.tree.treenode method)": [[978, "skbio.tree.TreeNode.count", false]], "create_caches() (skbio.tree.treenode method)": [[979, "skbio.tree.TreeNode.create_caches", false]], "create_format() (in module skbio.io.registry)": [[269, "skbio.io.registry.create_format", false]], "create_format() (skbio.io.registry.ioregistry method)": [[259, "skbio.io.registry.IORegistry.create_format", false]], "data() (skbio.table.table method)": [[902, "skbio.table.Table.data", false]], "deepcopy() (skbio.tree.treenode method)": [[980, "skbio.tree.TreeNode.deepcopy", false]], "definites() (skbio.sequence.dna method)": [[399, "skbio.sequence.DNA.definites", false]], "definites() (skbio.sequence.grammaredsequence method)": [[469, "skbio.sequence.GrammaredSequence.definites", false]], "definites() (skbio.sequence.protein method)": [[520, "skbio.sequence.Protein.definites", false]], "definites() (skbio.sequence.rna method)": [[574, "skbio.sequence.RNA.definites", false]], "degap() (skbio.sequence.dna method)": [[400, "skbio.sequence.DNA.degap", false]], "degap() (skbio.sequence.grammaredsequence method)": [[470, "skbio.sequence.GrammaredSequence.degap", false]], "degap() (skbio.sequence.protein method)": [[521, "skbio.sequence.Protein.degap", false]], "degap() (skbio.sequence.rna method)": [[575, "skbio.sequence.RNA.degap", false]], "degenerates() (skbio.sequence.dna method)": [[401, "skbio.sequence.DNA.degenerates", false]], "degenerates() (skbio.sequence.grammaredsequence method)": [[471, "skbio.sequence.GrammaredSequence.degenerates", false]], "degenerates() (skbio.sequence.protein method)": [[522, "skbio.sequence.Protein.degenerates", false]], "degenerates() (skbio.sequence.rna method)": [[576, "skbio.sequence.RNA.degenerates", false]], "del_metadata() (skbio.table.table method)": [[903, "skbio.table.Table.del_metadata", false]], "deleter() (skbio.util.classproperty method)": [[1051, "skbio.util.classproperty.deleter", false]], "delimited_self() (skbio.table.table method)": [[904, "skbio.table.Table.delimited_self", false]], "descending_branch_length() (skbio.tree.treenode method)": [[981, "skbio.tree.TreeNode.descending_branch_length", false]], "descriptive_equality() (skbio.table.table method)": [[905, "skbio.table.Table.descriptive_equality", false]], "dirmult_ttest() (in module skbio.stats.composition)": [[690, "skbio.stats.composition.dirmult_ttest", false]], "dissimilaritymatrix (class in skbio.stats.distance)": [[704, "skbio.stats.distance.DissimilarityMatrix", false]], "distance() (skbio.sequence.dna method)": [[402, "skbio.sequence.DNA.distance", false]], "distance() (skbio.sequence.grammaredsequence method)": [[472, "skbio.sequence.GrammaredSequence.distance", false]], "distance() (skbio.sequence.protein method)": [[523, "skbio.sequence.Protein.distance", false]], "distance() (skbio.sequence.rna method)": [[577, "skbio.sequence.RNA.distance", false]], "distance() (skbio.sequence.sequence method)": [[632, "skbio.sequence.Sequence.distance", false]], "distance() (skbio.tree.treenode method)": [[982, "skbio.tree.TreeNode.distance", false]], "distancematrix (class in skbio.stats.distance)": [[727, "skbio.stats.distance.DistanceMatrix", false]], "dna (class in skbio.sequence)": [[379, "skbio.sequence.DNA", false]], "dominance() (in module skbio.diversity.alpha)": [[112, "skbio.diversity.alpha.dominance", false]], "doubles() (in module skbio.diversity.alpha)": [[113, "skbio.diversity.alpha.doubles", false]], "drop() (skbio.metadata.interval method)": [[304, "skbio.metadata.Interval.drop", false]], "drop() (skbio.metadata.intervalmetadata method)": [[318, "skbio.metadata.IntervalMetadata.drop", false]], "drop_missing_values() (skbio.metadata.categoricalmetadatacolumn method)": [[286, "skbio.metadata.CategoricalMetadataColumn.drop_missing_values", false]], "drop_missing_values() (skbio.metadata.metadatacolumn method)": [[333, "skbio.metadata.MetadataColumn.drop_missing_values", false]], "drop_missing_values() (skbio.metadata.numericmetadatacolumn method)": [[351, "skbio.metadata.NumericMetadataColumn.drop_missing_values", false]], "e_matrix() (in module skbio.stats.ordination)": [[869, "skbio.stats.ordination.e_matrix", false]], "efficiencywarning": [[1032, "skbio.util.EfficiencyWarning", false]], "embed_vec_to_dataframe() (in module skbio.embedding)": [[211, "skbio.embedding.embed_vec_to_dataframe", false]], "embed_vec_to_distances() (in module skbio.embedding)": [[212, "skbio.embedding.embed_vec_to_distances", false]], "embed_vec_to_numpy() (in module skbio.embedding)": [[213, "skbio.embedding.embed_vec_to_numpy", false]], "embed_vec_to_ordination() (in module skbio.embedding)": [[214, "skbio.embedding.embed_vec_to_ordination", false]], "embedding (class in skbio.embedding)": [[152, "skbio.embedding.Embedding", false]], "enspie() (in module skbio.diversity.alpha)": [[114, "skbio.diversity.alpha.enspie", false]], "esty_ci() (in module skbio.diversity.alpha)": [[115, "skbio.diversity.alpha.esty_ci", false]], "example_table (in module skbio.table)": [[950, "skbio.table.example_table", false]], "exists() (skbio.table.table method)": [[906, "skbio.table.Table.exists", false]], "expand_degenerates() (skbio.sequence.dna method)": [[403, "skbio.sequence.DNA.expand_degenerates", false]], "expand_degenerates() (skbio.sequence.grammaredsequence method)": [[473, "skbio.sequence.GrammaredSequence.expand_degenerates", false]], "expand_degenerates() (skbio.sequence.protein method)": [[524, "skbio.sequence.Protein.expand_degenerates", false]], "expand_degenerates() (skbio.sequence.rna method)": [[578, "skbio.sequence.RNA.expand_degenerates", false]], "extend() (skbio.alignment.tabularmsa method)": [[85, "skbio.alignment.TabularMSA.extend", false]], "extend() (skbio.tree.treenode method)": [[983, "skbio.tree.TreeNode.extend", false]], "f_matrix() (in module skbio.stats.ordination)": [[870, "skbio.stats.ordination.f_matrix", false]], "faith_pd() (in module skbio.diversity.alpha)": [[116, "skbio.diversity.alpha.faith_pd", false]], "filter() (skbio.sequence.substitutionmatrix method)": [[665, "skbio.sequence.SubstitutionMatrix.filter", false]], "filter() (skbio.stats.distance.dissimilaritymatrix method)": [[717, "skbio.stats.distance.DissimilarityMatrix.filter", false]], "filter() (skbio.stats.distance.distancematrix method)": [[741, "skbio.stats.distance.DistanceMatrix.filter", false]], "filter() (skbio.table.table method)": [[907, "skbio.table.Table.filter", false]], "filter_columns() (skbio.metadata.samplemetadata method)": [[369, "skbio.metadata.SampleMetadata.filter_columns", false]], "filter_ids() (skbio.metadata.categoricalmetadatacolumn method)": [[287, "skbio.metadata.CategoricalMetadataColumn.filter_ids", false]], "filter_ids() (skbio.metadata.metadatacolumn method)": [[334, "skbio.metadata.MetadataColumn.filter_ids", false]], "filter_ids() (skbio.metadata.numericmetadatacolumn method)": [[352, "skbio.metadata.NumericMetadataColumn.filter_ids", false]], "filter_ids() (skbio.metadata.samplemetadata method)": [[370, "skbio.metadata.SampleMetadata.filter_ids", false]], "find() (skbio.tree.treenode method)": [[984, "skbio.tree.TreeNode.find", false]], "find_all() (skbio.tree.treenode method)": [[985, "skbio.tree.TreeNode.find_all", false]], "find_by_func() (skbio.tree.treenode method)": [[986, "skbio.tree.TreeNode.find_by_func", false]], "find_by_id() (skbio.tree.treenode method)": [[987, "skbio.tree.TreeNode.find_by_id", false]], "find_duplicates() (in module skbio.util)": [[1054, "skbio.util.find_duplicates", false]], "find_motifs() (skbio.sequence.dna method)": [[404, "skbio.sequence.DNA.find_motifs", false]], "find_motifs() (skbio.sequence.grammaredsequence method)": [[474, "skbio.sequence.GrammaredSequence.find_motifs", false]], "find_motifs() (skbio.sequence.protein method)": [[525, "skbio.sequence.Protein.find_motifs", false]], "find_motifs() (skbio.sequence.rna method)": [[579, "skbio.sequence.RNA.find_motifs", false]], "find_with_regex() (skbio.sequence.dna method)": [[405, "skbio.sequence.DNA.find_with_regex", false]], "find_with_regex() (skbio.sequence.grammaredsequence method)": [[475, "skbio.sequence.GrammaredSequence.find_with_regex", false]], "find_with_regex() (skbio.sequence.protein method)": [[526, "skbio.sequence.Protein.find_with_regex", false]], "find_with_regex() (skbio.sequence.rna method)": [[580, "skbio.sequence.RNA.find_with_regex", false]], "find_with_regex() (skbio.sequence.sequence method)": [[633, "skbio.sequence.Sequence.find_with_regex", false]], "firstdifferencegradientanova (class in skbio.stats.gradient)": [[785, "skbio.stats.gradient.FirstDifferenceGradientANOVA", false]], "fisher_alpha() (in module skbio.diversity.alpha)": [[117, "skbio.diversity.alpha.fisher_alpha", false]], "format (class in skbio.io.registry)": [[235, "skbio.io.registry.Format", false]], "frequencies() (skbio.sequence.dna method)": [[406, "skbio.sequence.DNA.frequencies", false]], "frequencies() (skbio.sequence.grammaredsequence method)": [[476, "skbio.sequence.GrammaredSequence.frequencies", false]], "frequencies() (skbio.sequence.protein method)": [[527, "skbio.sequence.Protein.frequencies", false]], "frequencies() (skbio.sequence.rna method)": [[581, "skbio.sequence.RNA.frequencies", false]], "frequencies() (skbio.sequence.sequence method)": [[634, "skbio.sequence.Sequence.frequencies", false]], "from_adjacency() (skbio.table.table static method)": [[908, "skbio.table.Table.from_adjacency", false]], "from_bits() (skbio.alignment.alignpath class method)": [[13, "skbio.alignment.AlignPath.from_bits", false]], "from_bits() (skbio.alignment.pairalignpath class method)": [[44, "skbio.alignment.PairAlignPath.from_bits", false]], "from_cigar() (skbio.alignment.pairalignpath class method)": [[45, "skbio.alignment.PairAlignPath.from_cigar", false]], "from_coordinates() (skbio.alignment.alignpath class method)": [[14, "skbio.alignment.AlignPath.from_coordinates", false]], "from_coordinates() (skbio.alignment.pairalignpath class method)": [[46, "skbio.alignment.PairAlignPath.from_coordinates", false]], "from_dict() (skbio.alignment.tabularmsa class method)": [[86, "skbio.alignment.TabularMSA.from_dict", false]], "from_dict() (skbio.sequence.substitutionmatrix class method)": [[666, "skbio.sequence.SubstitutionMatrix.from_dict", false]], "from_hdf5() (skbio.table.table class method)": [[909, "skbio.table.Table.from_hdf5", false]], "from_indices() (skbio.alignment.alignpath class method)": [[15, "skbio.alignment.AlignPath.from_indices", false]], "from_indices() (skbio.alignment.pairalignpath class method)": [[47, "skbio.alignment.PairAlignPath.from_indices", false]], "from_iterable() (skbio.sequence.substitutionmatrix class method)": [[667, "skbio.sequence.SubstitutionMatrix.from_iterable", false]], "from_iterable() (skbio.stats.distance.dissimilaritymatrix class method)": [[718, "skbio.stats.distance.DissimilarityMatrix.from_iterable", false]], "from_iterable() (skbio.stats.distance.distancematrix class method)": [[742, "skbio.stats.distance.DistanceMatrix.from_iterable", false]], "from_json() (skbio.table.table class method)": [[910, "skbio.table.Table.from_json", false]], "from_linkage_matrix() (skbio.tree.treenode class method)": [[988, "skbio.tree.TreeNode.from_linkage_matrix", false]], "from_ncbi() (skbio.sequence.geneticcode class method)": [[447, "skbio.sequence.GeneticCode.from_ncbi", false]], "from_path_seqs() (skbio.alignment.tabularmsa class method)": [[87, "skbio.alignment.TabularMSA.from_path_seqs", false]], "from_tabular() (skbio.alignment.alignpath class method)": [[16, "skbio.alignment.AlignPath.from_tabular", false]], "from_tabular() (skbio.alignment.pairalignpath class method)": [[48, "skbio.alignment.PairAlignPath.from_tabular", false]], "from_taxdump() (skbio.tree.treenode class method)": [[989, "skbio.tree.TreeNode.from_taxdump", false]], "from_taxonomy() (skbio.tree.treenode class method)": [[990, "skbio.tree.TreeNode.from_taxonomy", false]], "from_tsv() (skbio.table.table static method)": [[911, "skbio.table.Table.from_tsv", false]], "gap_frequencies() (skbio.alignment.tabularmsa method)": [[88, "skbio.alignment.TabularMSA.gap_frequencies", false]], "gaps() (skbio.sequence.dna method)": [[407, "skbio.sequence.DNA.gaps", false]], "gaps() (skbio.sequence.grammaredsequence method)": [[477, "skbio.sequence.GrammaredSequence.gaps", false]], "gaps() (skbio.sequence.protein method)": [[528, "skbio.sequence.Protein.gaps", false]], "gaps() (skbio.sequence.rna method)": [[582, "skbio.sequence.RNA.gaps", false]], "gc_content() (skbio.sequence.dna method)": [[408, "skbio.sequence.DNA.gc_content", false]], "gc_content() (skbio.sequence.rna method)": [[583, "skbio.sequence.RNA.gc_content", false]], "gc_frequency() (skbio.sequence.dna method)": [[409, "skbio.sequence.DNA.gc_frequency", false]], "gc_frequency() (skbio.sequence.rna method)": [[584, "skbio.sequence.RNA.gc_frequency", false]], "geneticcode (class in skbio.sequence)": [[438, "skbio.sequence.GeneticCode", false]], "get_alpha_diversity_metrics() (in module skbio.diversity)": [[149, "skbio.diversity.get_alpha_diversity_metrics", false]], "get_beta_diversity_metrics() (in module skbio.diversity)": [[150, "skbio.diversity.get_beta_diversity_metrics", false]], "get_column() (skbio.metadata.samplemetadata method)": [[371, "skbio.metadata.SampleMetadata.get_column", false]], "get_data_path() (in module skbio.util)": [[1055, "skbio.util.get_data_path", false]], "get_ids() (skbio.metadata.categoricalmetadatacolumn method)": [[288, "skbio.metadata.CategoricalMetadataColumn.get_ids", false]], "get_ids() (skbio.metadata.metadatacolumn method)": [[335, "skbio.metadata.MetadataColumn.get_ids", false]], "get_ids() (skbio.metadata.numericmetadatacolumn method)": [[353, "skbio.metadata.NumericMetadataColumn.get_ids", false]], "get_ids() (skbio.metadata.samplemetadata method)": [[372, "skbio.metadata.SampleMetadata.get_ids", false]], "get_max_distance() (skbio.tree.treenode method)": [[991, "skbio.tree.TreeNode.get_max_distance", false]], "get_missing() (skbio.metadata.categoricalmetadatacolumn method)": [[289, "skbio.metadata.CategoricalMetadataColumn.get_missing", false]], "get_missing() (skbio.metadata.metadatacolumn method)": [[336, "skbio.metadata.MetadataColumn.get_missing", false]], "get_missing() (skbio.metadata.numericmetadatacolumn method)": [[354, "skbio.metadata.NumericMetadataColumn.get_missing", false]], "get_names() (skbio.sequence.substitutionmatrix class method)": [[668, "skbio.sequence.SubstitutionMatrix.get_names", false]], "get_reader() (skbio.io.registry.ioregistry method)": [[260, "skbio.io.registry.IORegistry.get_reader", false]], "get_sniffer() (skbio.io.registry.ioregistry method)": [[261, "skbio.io.registry.IORegistry.get_sniffer", false]], "get_table_density() (skbio.table.table method)": [[912, "skbio.table.Table.get_table_density", false]], "get_trajectories() (skbio.stats.gradient.averagegradientanova method)": [[773, "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.firstdifferencegradientanova method)": [[795, "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.gradientanova method)": [[806, "skbio.stats.gradient.GradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.trajectorygradientanova method)": [[839, "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.windowdifferencegradientanova method)": [[850, "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", false]], "get_value() (skbio.metadata.categoricalmetadatacolumn method)": [[290, "skbio.metadata.CategoricalMetadataColumn.get_value", false]], "get_value() (skbio.metadata.metadatacolumn method)": [[337, "skbio.metadata.MetadataColumn.get_value", false]], "get_value() (skbio.metadata.numericmetadatacolumn method)": [[355, "skbio.metadata.NumericMetadataColumn.get_value", false]], "get_value_by_ids() (skbio.table.table method)": [[913, "skbio.table.Table.get_value_by_ids", false]], "get_writer() (skbio.io.registry.ioregistry method)": [[262, "skbio.io.registry.IORegistry.get_writer", false]], "getter() (skbio.util.classproperty method)": [[1052, "skbio.util.classproperty.getter", false]], "gini_index() (in module skbio.diversity.alpha)": [[118, "skbio.diversity.alpha.gini_index", false]], "global_pairwise_align() (in module skbio.alignment)": [[98, "skbio.alignment.global_pairwise_align", false]], "global_pairwise_align_nucleotide() (in module skbio.alignment)": [[99, "skbio.alignment.global_pairwise_align_nucleotide", false]], "global_pairwise_align_protein() (in module skbio.alignment)": [[100, "skbio.alignment.global_pairwise_align_protein", false]], "goods_coverage() (in module skbio.diversity.alpha)": [[119, "skbio.diversity.alpha.goods_coverage", false]], "gradientanova (class in skbio.stats.gradient)": [[796, "skbio.stats.gradient.GradientANOVA", false]], "gradientanovaresults (class in skbio.stats.gradient)": [[807, "skbio.stats.gradient.GradientANOVAResults", false]], "grammaredsequence (class in skbio.sequence)": [[450, "skbio.sequence.GrammaredSequence", false]], "group_metadata() (skbio.table.table method)": [[914, "skbio.table.Table.group_metadata", false]], "groupresults (class in skbio.stats.gradient)": [[818, "skbio.stats.gradient.GroupResults", false]], "hamming() (in module skbio.sequence.distance)": [[680, "skbio.sequence.distance.hamming", false]], "has_children() (skbio.tree.treenode method)": [[992, "skbio.tree.TreeNode.has_children", false]], "has_definites() (skbio.sequence.dna method)": [[410, "skbio.sequence.DNA.has_definites", false]], "has_definites() (skbio.sequence.grammaredsequence method)": [[478, "skbio.sequence.GrammaredSequence.has_definites", false]], "has_definites() (skbio.sequence.protein method)": [[529, "skbio.sequence.Protein.has_definites", false]], "has_definites() (skbio.sequence.rna method)": [[585, "skbio.sequence.RNA.has_definites", false]], "has_degenerates() (skbio.sequence.dna method)": [[411, "skbio.sequence.DNA.has_degenerates", false]], "has_degenerates() (skbio.sequence.grammaredsequence method)": [[479, "skbio.sequence.GrammaredSequence.has_degenerates", false]], "has_degenerates() (skbio.sequence.protein method)": [[530, "skbio.sequence.Protein.has_degenerates", false]], "has_degenerates() (skbio.sequence.rna method)": [[586, "skbio.sequence.RNA.has_degenerates", false]], "has_gaps() (skbio.sequence.dna method)": [[412, "skbio.sequence.DNA.has_gaps", false]], "has_gaps() (skbio.sequence.grammaredsequence method)": [[480, "skbio.sequence.GrammaredSequence.has_gaps", false]], "has_gaps() (skbio.sequence.protein method)": [[531, "skbio.sequence.Protein.has_gaps", false]], "has_gaps() (skbio.sequence.rna method)": [[587, "skbio.sequence.RNA.has_gaps", false]], "has_interval_metadata() (skbio.sequence.dna method)": [[413, "skbio.sequence.DNA.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.grammaredsequence method)": [[481, "skbio.sequence.GrammaredSequence.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.protein method)": [[532, "skbio.sequence.Protein.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.rna method)": [[588, "skbio.sequence.RNA.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.sequence method)": [[635, "skbio.sequence.Sequence.has_interval_metadata", false]], "has_metadata() (skbio.alignment.tabularmsa method)": [[89, "skbio.alignment.TabularMSA.has_metadata", false]], "has_metadata() (skbio.sequence.dna method)": [[414, "skbio.sequence.DNA.has_metadata", false]], "has_metadata() (skbio.sequence.grammaredsequence method)": [[482, "skbio.sequence.GrammaredSequence.has_metadata", false]], "has_metadata() (skbio.sequence.protein method)": [[533, "skbio.sequence.Protein.has_metadata", false]], "has_metadata() (skbio.sequence.rna method)": [[589, "skbio.sequence.RNA.has_metadata", false]], "has_metadata() (skbio.sequence.sequence method)": [[636, "skbio.sequence.Sequence.has_metadata", false]], "has_missing_values() (skbio.metadata.categoricalmetadatacolumn method)": [[291, "skbio.metadata.CategoricalMetadataColumn.has_missing_values", false]], "has_missing_values() (skbio.metadata.metadatacolumn method)": [[338, "skbio.metadata.MetadataColumn.has_missing_values", false]], "has_missing_values() (skbio.metadata.numericmetadatacolumn method)": [[356, "skbio.metadata.NumericMetadataColumn.has_missing_values", false]], "has_nondegenerates() (skbio.sequence.dna method)": [[415, "skbio.sequence.DNA.has_nondegenerates", false]], "has_nondegenerates() (skbio.sequence.grammaredsequence method)": [[483, "skbio.sequence.GrammaredSequence.has_nondegenerates", false]], "has_nondegenerates() (skbio.sequence.protein method)": [[534, "skbio.sequence.Protein.has_nondegenerates", false]], "has_nondegenerates() (skbio.sequence.rna method)": [[590, "skbio.sequence.RNA.has_nondegenerates", false]], "has_positional_metadata() (skbio.alignment.tabularmsa method)": [[90, "skbio.alignment.TabularMSA.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.dna method)": [[416, "skbio.sequence.DNA.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.grammaredsequence method)": [[484, "skbio.sequence.GrammaredSequence.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.protein method)": [[535, "skbio.sequence.Protein.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.rna method)": [[591, "skbio.sequence.RNA.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.sequence method)": [[637, "skbio.sequence.Sequence.has_positional_metadata", false]], "has_stops() (skbio.sequence.protein method)": [[536, "skbio.sequence.Protein.has_stops", false]], "head() (skbio.table.table method)": [[915, "skbio.table.Table.head", false]], "heip_e() (in module skbio.diversity.alpha)": [[120, "skbio.diversity.alpha.heip_e", false]], "hommola_cospeciation() (in module skbio.stats.evolve)": [[761, "skbio.stats.evolve.hommola_cospeciation", false]], "identity() (skbio.sequence.substitutionmatrix class method)": [[669, "skbio.sequence.SubstitutionMatrix.identity", false]], "ids() (skbio.table.table method)": [[916, "skbio.table.Table.ids", false]], "ilr() (in module skbio.stats.composition)": [[691, "skbio.stats.composition.ilr", false]], "ilr_inv() (in module skbio.stats.composition)": [[692, "skbio.stats.composition.ilr_inv", false]], "index() (skbio.sequence.dna method)": [[417, "skbio.sequence.DNA.index", false]], "index() (skbio.sequence.grammaredsequence method)": [[485, "skbio.sequence.GrammaredSequence.index", false]], "index() (skbio.sequence.protein method)": [[537, "skbio.sequence.Protein.index", false]], "index() (skbio.sequence.rna method)": [[592, "skbio.sequence.RNA.index", false]], "index() (skbio.sequence.sequence method)": [[638, "skbio.sequence.Sequence.index", false]], "index() (skbio.sequence.substitutionmatrix method)": [[670, "skbio.sequence.SubstitutionMatrix.index", false]], "index() (skbio.stats.distance.dissimilaritymatrix method)": [[719, "skbio.stats.distance.DissimilarityMatrix.index", false]], "index() (skbio.stats.distance.distancematrix method)": [[743, "skbio.stats.distance.DistanceMatrix.index", false]], "index() (skbio.table.table method)": [[917, "skbio.table.Table.index", false]], "index_tree() (skbio.tree.treenode method)": [[993, "skbio.tree.TreeNode.index_tree", false]], "initialize_state() (skbio.workflow.workflow method)": [[1068, "skbio.workflow.Workflow.initialize_state", false]], "inner() (in module skbio.stats.composition)": [[693, "skbio.stats.composition.inner", false]], "interval (class in skbio.metadata)": [[295, "skbio.metadata.Interval", false]], "intervalmetadata (class in skbio.metadata)": [[305, "skbio.metadata.IntervalMetadata", false]], "inv_simpson() (in module skbio.diversity.alpha)": [[121, "skbio.diversity.alpha.inv_simpson", false]], "invalidate_caches() (skbio.tree.treenode method)": [[994, "skbio.tree.TreeNode.invalidate_caches", false]], "ioregistry (class in skbio.io.registry)": [[248, "skbio.io.registry.IORegistry", false]], "is_empty() (skbio.table.table method)": [[918, "skbio.table.Table.is_empty", false]], "is_reverse_complement() (skbio.sequence.dna method)": [[418, "skbio.sequence.DNA.is_reverse_complement", false]], "is_reverse_complement() (skbio.sequence.rna method)": [[593, "skbio.sequence.RNA.is_reverse_complement", false]], "is_root() (skbio.tree.treenode method)": [[995, "skbio.tree.TreeNode.is_root", false]], "is_tip() (skbio.tree.treenode method)": [[996, "skbio.tree.TreeNode.is_tip", false]], "is_zero_based() (skbio.alignment.alignmentstructure method)": [[32, "skbio.alignment.AlignmentStructure.is_zero_based", false]], "isubsample() (in module skbio.stats)": [[851, "skbio.stats.isubsample", false]], "iter() (skbio.table.table method)": [[919, "skbio.table.Table.iter", false]], "iter_contiguous() (skbio.sequence.dna method)": [[419, "skbio.sequence.DNA.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.grammaredsequence method)": [[486, "skbio.sequence.GrammaredSequence.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.protein method)": [[538, "skbio.sequence.Protein.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.rna method)": [[594, "skbio.sequence.RNA.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.sequence method)": [[639, "skbio.sequence.Sequence.iter_contiguous", false]], "iter_data() (skbio.table.table method)": [[920, "skbio.table.Table.iter_data", false]], "iter_kmers() (skbio.sequence.dna method)": [[420, "skbio.sequence.DNA.iter_kmers", false]], "iter_kmers() (skbio.sequence.grammaredsequence method)": [[487, "skbio.sequence.GrammaredSequence.iter_kmers", false]], "iter_kmers() (skbio.sequence.protein method)": [[539, "skbio.sequence.Protein.iter_kmers", false]], "iter_kmers() (skbio.sequence.rna method)": [[595, "skbio.sequence.RNA.iter_kmers", false]], "iter_kmers() (skbio.sequence.sequence method)": [[640, "skbio.sequence.Sequence.iter_kmers", false]], "iter_pairwise() (skbio.table.table method)": [[921, "skbio.table.Table.iter_pairwise", false]], "iter_positions() (skbio.alignment.tabularmsa method)": [[91, "skbio.alignment.TabularMSA.iter_positions", false]], "join() (skbio.alignment.tabularmsa method)": [[92, "skbio.alignment.TabularMSA.join", false]], "kempton_taylor_q() (in module skbio.diversity.alpha)": [[122, "skbio.diversity.alpha.kempton_taylor_q", false]], "kmer_distance() (in module skbio.sequence.distance)": [[681, "skbio.sequence.distance.kmer_distance", false]], "kmer_frequencies() (skbio.sequence.dna method)": [[421, "skbio.sequence.DNA.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.grammaredsequence method)": [[488, "skbio.sequence.GrammaredSequence.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.protein method)": [[540, "skbio.sequence.Protein.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.rna method)": [[596, "skbio.sequence.RNA.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.sequence method)": [[641, "skbio.sequence.Sequence.kmer_frequencies", false]], "lca() (skbio.tree.treenode method)": [[997, "skbio.tree.TreeNode.lca", false]], "length() (skbio.table.table method)": [[922, "skbio.table.Table.length", false]], "levelorder() (skbio.tree.treenode method)": [[998, "skbio.tree.TreeNode.levelorder", false]], "list_read_formats() (skbio.io.registry.ioregistry method)": [[263, "skbio.io.registry.IORegistry.list_read_formats", false]], "list_write_formats() (skbio.io.registry.ioregistry method)": [[264, "skbio.io.registry.IORegistry.list_write_formats", false]], "lladser_ci() (in module skbio.diversity.alpha)": [[123, "skbio.diversity.alpha.lladser_ci", false]], "lladser_pe() (in module skbio.diversity.alpha)": [[124, "skbio.diversity.alpha.lladser_pe", false]], "load() (skbio.metadata.samplemetadata class method)": [[373, "skbio.metadata.SampleMetadata.load", false]], "local_pairwise_align() (in module skbio.alignment)": [[101, "skbio.alignment.local_pairwise_align", false]], "local_pairwise_align_nucleotide() (in module skbio.alignment)": [[102, "skbio.alignment.local_pairwise_align_nucleotide", false]], "local_pairwise_align_protein() (in module skbio.alignment)": [[103, "skbio.alignment.local_pairwise_align_protein", false]], "local_pairwise_align_ssw() (in module skbio.alignment)": [[104, "skbio.alignment.local_pairwise_align_ssw", false]], "lowercase() (skbio.sequence.dna method)": [[422, "skbio.sequence.DNA.lowercase", false]], "lowercase() (skbio.sequence.grammaredsequence method)": [[489, "skbio.sequence.GrammaredSequence.lowercase", false]], "lowercase() (skbio.sequence.protein method)": [[541, "skbio.sequence.Protein.lowercase", false]], "lowercase() (skbio.sequence.rna method)": [[597, "skbio.sequence.RNA.lowercase", false]], "lowercase() (skbio.sequence.sequence method)": [[642, "skbio.sequence.Sequence.lowercase", false]], "lowest_common_ancestor() (skbio.tree.treenode method)": [[999, "skbio.tree.TreeNode.lowest_common_ancestor", false]], "majority_rule() (in module skbio.tree)": [[1030, "skbio.tree.majority_rule", false]], "make_identity_substitution_matrix() (in module skbio.alignment)": [[105, "skbio.alignment.make_identity_substitution_matrix", false]], "mantel() (in module skbio.stats.distance)": [[755, "skbio.stats.distance.mantel", false]], "margalef() (in module skbio.diversity.alpha)": [[125, "skbio.diversity.alpha.margalef", false]], "match_frequency() (skbio.sequence.dna method)": [[423, "skbio.sequence.DNA.match_frequency", false]], "match_frequency() (skbio.sequence.grammaredsequence method)": [[490, "skbio.sequence.GrammaredSequence.match_frequency", false]], "match_frequency() (skbio.sequence.protein method)": [[542, "skbio.sequence.Protein.match_frequency", false]], "match_frequency() (skbio.sequence.rna method)": [[598, "skbio.sequence.RNA.match_frequency", false]], "match_frequency() (skbio.sequence.sequence method)": [[643, "skbio.sequence.Sequence.match_frequency", false]], "matches() (skbio.sequence.dna method)": [[424, "skbio.sequence.DNA.matches", false]], "matches() (skbio.sequence.grammaredsequence method)": [[491, "skbio.sequence.GrammaredSequence.matches", false]], "matches() (skbio.sequence.protein method)": [[543, "skbio.sequence.Protein.matches", false]], "matches() (skbio.sequence.rna method)": [[599, "skbio.sequence.RNA.matches", false]], "matches() (skbio.sequence.sequence method)": [[644, "skbio.sequence.Sequence.matches", false]], "max() (skbio.table.table method)": [[923, "skbio.table.Table.max", false]], "mcintosh_d() (in module skbio.diversity.alpha)": [[126, "skbio.diversity.alpha.mcintosh_d", false]], "mcintosh_e() (in module skbio.diversity.alpha)": [[127, "skbio.diversity.alpha.mcintosh_e", false]], "mean_and_std() (in module skbio.stats.ordination)": [[871, "skbio.stats.ordination.mean_and_std", false]], "menhinick() (in module skbio.diversity.alpha)": [[128, "skbio.diversity.alpha.menhinick", false]], "merge() (skbio.metadata.intervalmetadata method)": [[319, "skbio.metadata.IntervalMetadata.merge", false]], "merge() (skbio.metadata.samplemetadata method)": [[374, "skbio.metadata.SampleMetadata.merge", false]], "merge() (skbio.table.table method)": [[924, "skbio.table.Table.merge", false]], "metadata() (skbio.table.table method)": [[925, "skbio.table.Table.metadata", false]], "metadata_to_dataframe() (skbio.table.table method)": [[926, "skbio.table.Table.metadata_to_dataframe", false]], "metadatacolumn (class in skbio.metadata)": [[324, "skbio.metadata.MetadataColumn", false]], "method (class in skbio.workflow)": [[1069, "skbio.workflow.method", false]], "michaelis_menten_fit() (in module skbio.diversity.alpha)": [[129, "skbio.diversity.alpha.michaelis_menten_fit", false]], "min() (skbio.table.table method)": [[927, "skbio.table.Table.min", false]], "mismatch_frequency() (skbio.sequence.dna method)": [[425, "skbio.sequence.DNA.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.grammaredsequence method)": [[492, "skbio.sequence.GrammaredSequence.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.protein method)": [[544, "skbio.sequence.Protein.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.rna method)": [[600, "skbio.sequence.RNA.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.sequence method)": [[645, "skbio.sequence.Sequence.mismatch_frequency", false]], "mismatches() (skbio.sequence.dna method)": [[426, "skbio.sequence.DNA.mismatches", false]], "mismatches() (skbio.sequence.grammaredsequence method)": [[493, "skbio.sequence.GrammaredSequence.mismatches", false]], "mismatches() (skbio.sequence.protein method)": [[545, "skbio.sequence.Protein.mismatches", false]], "mismatches() (skbio.sequence.rna method)": [[601, "skbio.sequence.RNA.mismatches", false]], "mismatches() (skbio.sequence.sequence method)": [[646, "skbio.sequence.Sequence.mismatches", false]], "module": [[0, "module-skbio.alignment", false], [1, "module-skbio.diversity", false], [2, "module-skbio.embedding", false], [106, "module-skbio.diversity.alpha", false], [144, "module-skbio.diversity.beta", false], [215, "module-skbio.io.format.binary_dm", false], [216, "module-skbio.io.format.biom", false], [217, "module-skbio.io.format.blast6", false], [218, "module-skbio.io.format.blast7", false], [219, "module-skbio.io.format.clustal", false], [220, "module-skbio.io.format.embed", false], [221, "module-skbio.io.format.embl", false], [222, "module-skbio.io.format.fasta", false], [223, "module-skbio.io.format.fastq", false], [224, "module-skbio.io.format.genbank", false], [225, "module-skbio.io.format.gff3", false], [226, "module-skbio.io.format.lsmat", false], [227, "module-skbio.io.format.newick", false], [228, "module-skbio.io.format.ordination", false], [229, "module-skbio.io.format.phylip", false], [230, "module-skbio.io.format.qseq", false], [231, "module-skbio.io.format.sample_metadata", false], [232, "module-skbio.io.format.stockholm", false], [233, "module-skbio.io.format.taxdump", false], [234, "module-skbio.io.registry", false], [273, "module-skbio.io.util", false], [679, "module-skbio.sequence.distance", false], [682, "module-skbio.stats.composition", false], [703, "module-skbio.stats.distance", false], [760, "module-skbio.stats.evolve", false], [762, "module-skbio.stats.gradient", false], [852, "module-skbio.stats.ordination", false], [877, "module-skbio.stats.power", false], [1092, "module-skbio.io", false], [1093, "module-skbio.metadata", false], [1094, "module-skbio.sequence", false], [1095, "module-skbio.stats", false], [1096, "module-skbio.table", false], [1097, "module-skbio.tree", false], [1098, "module-skbio.util", false], [1099, "module-skbio.workflow", false]], "monkey_patch() (skbio.io.registry.ioregistry method)": [[265, "skbio.io.registry.IORegistry.monkey_patch", false]], "multi_replace() (in module skbio.stats.composition)": [[694, "skbio.stats.composition.multi_replace", false]], "multiplicative_replacement() (in module skbio.stats.composition)": [[695, "skbio.stats.composition.multiplicative_replacement", false]], "neighbors() (skbio.tree.treenode method)": [[1000, "skbio.tree.TreeNode.neighbors", false]], "nj() (in module skbio.tree)": [[1031, "skbio.tree.nj", false]], "non_tips() (skbio.tree.treenode method)": [[1001, "skbio.tree.TreeNode.non_tips", false]], "nondegenerates() (skbio.sequence.dna method)": [[427, "skbio.sequence.DNA.nondegenerates", false]], "nondegenerates() (skbio.sequence.grammaredsequence method)": [[494, "skbio.sequence.GrammaredSequence.nondegenerates", false]], "nondegenerates() (skbio.sequence.protein method)": [[546, "skbio.sequence.Protein.nondegenerates", false]], "nondegenerates() (skbio.sequence.rna method)": [[602, "skbio.sequence.RNA.nondegenerates", false]], "nonzero() (skbio.table.table method)": [[928, "skbio.table.Table.nonzero", false]], "nonzero_counts() (skbio.table.table method)": [[929, "skbio.table.Table.nonzero_counts", false]], "norm() (skbio.table.table method)": [[930, "skbio.table.Table.norm", false]], "numericmetadatacolumn (class in skbio.metadata)": [[342, "skbio.metadata.NumericMetadataColumn", false]], "observed_features() (in module skbio.diversity.alpha)": [[130, "skbio.diversity.alpha.observed_features", false]], "observed_node_counts() (skbio.tree.treenode method)": [[1002, "skbio.tree.TreeNode.observed_node_counts", false]], "observed_otus() (in module skbio.diversity.alpha)": [[131, "skbio.diversity.alpha.observed_otus", false]], "open() (in module skbio.io.util)": [[274, "skbio.io.util.open", false]], "open_file() (in module skbio.io.util)": [[275, "skbio.io.util.open_file", false]], "open_files() (in module skbio.io.util)": [[276, "skbio.io.util.open_files", false]], "ordinationresults (class in skbio.stats.ordination)": [[853, "skbio.stats.ordination.OrdinationResults", false]], "osd() (in module skbio.diversity.alpha)": [[132, "skbio.diversity.alpha.osd", false]], "pa() (skbio.table.table method)": [[931, "skbio.table.Table.pa", false]], "pairalignpath (class in skbio.alignment)": [[34, "skbio.alignment.PairAlignPath", false]], "paired_subsamples() (in module skbio.stats.power)": [[879, "skbio.stats.power.paired_subsamples", false]], "pairwise_vlr() (in module skbio.stats.composition)": [[696, "skbio.stats.composition.pairwise_vlr", false]], "partial_beta_diversity() (in module skbio.diversity)": [[151, "skbio.diversity.partial_beta_diversity", false]], "partition() (skbio.table.table method)": [[932, "skbio.table.Table.partition", false]], "pcoa() (in module skbio.stats.ordination)": [[872, "skbio.stats.ordination.pcoa", false]], "pcoa_biplot() (in module skbio.stats.ordination)": [[873, "skbio.stats.ordination.pcoa_biplot", false]], "permanova() (in module skbio.stats.distance)": [[756, "skbio.stats.distance.permanova", false]], "permdisp() (in module skbio.stats.distance)": [[757, "skbio.stats.distance.permdisp", false]], "permute() (skbio.stats.distance.distancematrix method)": [[744, "skbio.stats.distance.DistanceMatrix.permute", false]], "perturb() (in module skbio.stats.composition)": [[697, "skbio.stats.composition.perturb", false]], "perturb_inv() (in module skbio.stats.composition)": [[698, "skbio.stats.composition.perturb_inv", false]], "phydiv() (in module skbio.diversity.alpha)": [[133, "skbio.diversity.alpha.phydiv", false]], "pielou_e() (in module skbio.diversity.alpha)": [[134, "skbio.diversity.alpha.pielou_e", false]], "plot() (skbio.sequence.substitutionmatrix method)": [[671, "skbio.sequence.SubstitutionMatrix.plot", false]], "plot() (skbio.stats.distance.dissimilaritymatrix method)": [[720, "skbio.stats.distance.DissimilarityMatrix.plot", false]], "plot() (skbio.stats.distance.distancematrix method)": [[745, "skbio.stats.distance.DistanceMatrix.plot", false]], "plot() (skbio.stats.ordination.ordinationresults method)": [[863, "skbio.stats.ordination.OrdinationResults.plot", false]], "pop() (skbio.tree.treenode method)": [[1003, "skbio.tree.TreeNode.pop", false]], "postorder() (skbio.tree.treenode method)": [[1004, "skbio.tree.TreeNode.postorder", false]], "power() (in module skbio.stats.composition)": [[699, "skbio.stats.composition.power", false]], "pre_and_postorder() (skbio.tree.treenode method)": [[1005, "skbio.tree.TreeNode.pre_and_postorder", false]], "preorder() (skbio.tree.treenode method)": [[1006, "skbio.tree.TreeNode.preorder", false]], "protein (class in skbio.sequence)": [[501, "skbio.sequence.Protein", false]], "proteinembedding (class in skbio.embedding)": [[163, "skbio.embedding.ProteinEmbedding", false]], "proteinvector (class in skbio.embedding)": [[176, "skbio.embedding.ProteinVector", false]], "prune() (skbio.tree.treenode method)": [[1007, "skbio.tree.TreeNode.prune", false]], "pwmantel() (in module skbio.stats.distance)": [[758, "skbio.stats.distance.pwmantel", false]], "query() (skbio.metadata.intervalmetadata method)": [[320, "skbio.metadata.IntervalMetadata.query", false]], "randdm() (in module skbio.stats.distance)": [[759, "skbio.stats.distance.randdm", false]], "rankdata() (skbio.table.table method)": [[933, "skbio.table.Table.rankdata", false]], "rda() (in module skbio.stats.ordination)": [[874, "skbio.stats.ordination.rda", false]], "read() (in module skbio.io.registry)": [[270, "skbio.io.registry.read", false]], "read() (skbio.alignment.tabularmsa class method)": [[93, "skbio.alignment.TabularMSA.read", false]], "read() (skbio.embedding.proteinembedding class method)": [[174, "skbio.embedding.ProteinEmbedding.read", false]], "read() (skbio.embedding.proteinvector class method)": [[187, "skbio.embedding.ProteinVector.read", false]], "read() (skbio.io.registry.ioregistry method)": [[266, "skbio.io.registry.IORegistry.read", false]], "read() (skbio.metadata.intervalmetadata class method)": [[321, "skbio.metadata.IntervalMetadata.read", false]], "read() (skbio.metadata.samplemetadata class method)": [[375, "skbio.metadata.SampleMetadata.read", false]], "read() (skbio.sequence.dna class method)": [[428, "skbio.sequence.DNA.read", false]], "read() (skbio.sequence.grammaredsequence class method)": [[495, "skbio.sequence.GrammaredSequence.read", false]], "read() (skbio.sequence.protein class method)": [[547, "skbio.sequence.Protein.read", false]], "read() (skbio.sequence.rna class method)": [[603, "skbio.sequence.RNA.read", false]], "read() (skbio.sequence.sequence class method)": [[647, "skbio.sequence.Sequence.read", false]], "read() (skbio.sequence.substitutionmatrix class method)": [[672, "skbio.sequence.SubstitutionMatrix.read", false]], "read() (skbio.stats.distance.dissimilaritymatrix class method)": [[721, "skbio.stats.distance.DissimilarityMatrix.read", false]], "read() (skbio.stats.distance.distancematrix class method)": [[746, "skbio.stats.distance.DistanceMatrix.read", false]], "read() (skbio.stats.ordination.ordinationresults class method)": [[864, "skbio.stats.ordination.OrdinationResults.read", false]], "read() (skbio.table.table class method)": [[934, "skbio.table.Table.read", false]], "read() (skbio.tree.treenode class method)": [[1008, "skbio.tree.TreeNode.read", false]], "reader() (skbio.io.registry.format method)": [[245, "skbio.io.registry.Format.reader", false]], "reassign_index() (skbio.alignment.tabularmsa method)": [[94, "skbio.alignment.TabularMSA.reassign_index", false]], "reduce() (skbio.table.table method)": [[935, "skbio.table.Table.reduce", false]], "redundant_form() (skbio.sequence.substitutionmatrix method)": [[673, "skbio.sequence.SubstitutionMatrix.redundant_form", false]], "redundant_form() (skbio.stats.distance.dissimilaritymatrix method)": [[722, "skbio.stats.distance.DissimilarityMatrix.redundant_form", false]], "redundant_form() (skbio.stats.distance.distancematrix method)": [[747, "skbio.stats.distance.DistanceMatrix.redundant_form", false]], "remove() (skbio.tree.treenode method)": [[1009, "skbio.tree.TreeNode.remove", false]], "remove_deleted() (skbio.tree.treenode method)": [[1010, "skbio.tree.TreeNode.remove_deleted", false]], "remove_empty() (skbio.table.table method)": [[936, "skbio.table.Table.remove_empty", false]], "replace() (skbio.sequence.dna method)": [[429, "skbio.sequence.DNA.replace", false]], "replace() (skbio.sequence.grammaredsequence method)": [[496, "skbio.sequence.GrammaredSequence.replace", false]], "replace() (skbio.sequence.protein method)": [[548, "skbio.sequence.Protein.replace", false]], "replace() (skbio.sequence.rna method)": [[604, "skbio.sequence.RNA.replace", false]], "replace() (skbio.sequence.sequence method)": [[648, "skbio.sequence.Sequence.replace", false]], "representationwarning": [[1033, "skbio.util.RepresentationWarning", false]], "requires (class in skbio.workflow)": [[1080, "skbio.workflow.requires", false]], "reverse_complement() (skbio.sequence.dna method)": [[430, "skbio.sequence.DNA.reverse_complement", false]], "reverse_complement() (skbio.sequence.rna method)": [[605, "skbio.sequence.RNA.reverse_complement", false]], "reverse_transcribe() (skbio.sequence.rna method)": [[606, "skbio.sequence.RNA.reverse_transcribe", false]], "rna (class in skbio.sequence)": [[554, "skbio.sequence.RNA", false]], "robbins() (in module skbio.diversity.alpha)": [[135, "skbio.diversity.alpha.robbins", false]], "root() (skbio.tree.treenode method)": [[1011, "skbio.tree.TreeNode.root", false]], "root_at() (skbio.tree.treenode method)": [[1012, "skbio.tree.TreeNode.root_at", false]], "root_at_midpoint() (skbio.tree.treenode method)": [[1013, "skbio.tree.TreeNode.root_at_midpoint", false]], "safe_md5() (in module skbio.util)": [[1056, "skbio.util.safe_md5", false]], "samplemetadata (class in skbio.metadata)": [[360, "skbio.metadata.SampleMetadata", false]], "save() (skbio.metadata.categoricalmetadatacolumn method)": [[292, "skbio.metadata.CategoricalMetadataColumn.save", false]], "save() (skbio.metadata.metadatacolumn method)": [[339, "skbio.metadata.MetadataColumn.save", false]], "save() (skbio.metadata.numericmetadatacolumn method)": [[357, "skbio.metadata.NumericMetadataColumn.save", false]], "save() (skbio.metadata.samplemetadata method)": [[376, "skbio.metadata.SampleMetadata.save", false]], "sbp_basis() (in module skbio.stats.composition)": [[700, "skbio.stats.composition.sbp_basis", false]], "scale() (in module skbio.stats.ordination)": [[875, "skbio.stats.ordination.scale", false]], "sequence (class in skbio.sequence)": [[613, "skbio.sequence.Sequence", false]], "sequenceembedding (class in skbio.embedding)": [[189, "skbio.embedding.SequenceEmbedding", false]], "sequencevector (class in skbio.embedding)": [[200, "skbio.embedding.SequenceVector", false]], "set_zero_based() (skbio.alignment.alignmentstructure method)": [[33, "skbio.alignment.AlignmentStructure.set_zero_based", false]], "setter() (skbio.util.classproperty method)": [[1053, "skbio.util.classproperty.setter", false]], "shannon() (in module skbio.diversity.alpha)": [[136, "skbio.diversity.alpha.shannon", false]], "shear() (skbio.tree.treenode method)": [[1014, "skbio.tree.TreeNode.shear", false]], "shuffle() (skbio.tree.treenode method)": [[1015, "skbio.tree.TreeNode.shuffle", false]], "siblings() (skbio.tree.treenode method)": [[1016, "skbio.tree.TreeNode.siblings", false]], "simpson() (in module skbio.diversity.alpha)": [[137, "skbio.diversity.alpha.simpson", false]], "simpson_d() (in module skbio.diversity.alpha)": [[138, "skbio.diversity.alpha.simpson_d", false]], "simpson_e() (in module skbio.diversity.alpha)": [[139, "skbio.diversity.alpha.simpson_e", false]], "singles() (in module skbio.diversity.alpha)": [[140, "skbio.diversity.alpha.singles", false]], "skbio.alignment": [[0, "module-skbio.alignment", false]], "skbio.diversity": [[1, "module-skbio.diversity", false]], "skbio.diversity.alpha": [[106, "module-skbio.diversity.alpha", false]], "skbio.diversity.beta": [[144, "module-skbio.diversity.beta", false]], "skbio.embedding": [[2, "module-skbio.embedding", false]], "skbio.io": [[1092, "module-skbio.io", false]], "skbio.io.format.binary_dm": [[215, "module-skbio.io.format.binary_dm", false]], "skbio.io.format.biom": [[216, "module-skbio.io.format.biom", false]], "skbio.io.format.blast6": [[217, "module-skbio.io.format.blast6", false]], "skbio.io.format.blast7": [[218, "module-skbio.io.format.blast7", false]], "skbio.io.format.clustal": [[219, "module-skbio.io.format.clustal", false]], "skbio.io.format.embed": [[220, "module-skbio.io.format.embed", false]], "skbio.io.format.embl": [[221, "module-skbio.io.format.embl", false]], "skbio.io.format.fasta": [[222, "module-skbio.io.format.fasta", false]], "skbio.io.format.fastq": [[223, "module-skbio.io.format.fastq", false]], "skbio.io.format.genbank": [[224, "module-skbio.io.format.genbank", false]], "skbio.io.format.gff3": [[225, "module-skbio.io.format.gff3", false]], "skbio.io.format.lsmat": [[226, "module-skbio.io.format.lsmat", false]], "skbio.io.format.newick": [[227, "module-skbio.io.format.newick", false]], "skbio.io.format.ordination": [[228, "module-skbio.io.format.ordination", false]], "skbio.io.format.phylip": [[229, "module-skbio.io.format.phylip", false]], "skbio.io.format.qseq": [[230, "module-skbio.io.format.qseq", false]], "skbio.io.format.sample_metadata": [[231, "module-skbio.io.format.sample_metadata", false]], "skbio.io.format.stockholm": [[232, "module-skbio.io.format.stockholm", false]], "skbio.io.format.taxdump": [[233, "module-skbio.io.format.taxdump", false]], "skbio.io.registry": [[234, "module-skbio.io.registry", false]], "skbio.io.util": [[273, "module-skbio.io.util", false]], "skbio.metadata": [[1093, "module-skbio.metadata", false]], "skbio.sequence": [[1094, "module-skbio.sequence", false]], "skbio.sequence.distance": [[679, "module-skbio.sequence.distance", false]], "skbio.stats": [[1095, "module-skbio.stats", false]], "skbio.stats.composition": [[682, "module-skbio.stats.composition", false]], "skbio.stats.distance": [[703, "module-skbio.stats.distance", false]], "skbio.stats.evolve": [[760, "module-skbio.stats.evolve", false]], "skbio.stats.gradient": [[762, "module-skbio.stats.gradient", false]], "skbio.stats.ordination": [[852, "module-skbio.stats.ordination", false]], "skbio.stats.power": [[877, "module-skbio.stats.power", false]], "skbio.table": [[1096, "module-skbio.table", false]], "skbio.tree": [[1097, "module-skbio.tree", false]], "skbio.util": [[1098, "module-skbio.util", false]], "skbio.workflow": [[1099, "module-skbio.workflow", false]], "sniff() (in module skbio.io.registry)": [[271, "skbio.io.registry.sniff", false]], "sniff() (skbio.io.registry.ioregistry method)": [[267, "skbio.io.registry.IORegistry.sniff", false]], "sniffer() (skbio.io.registry.format method)": [[246, "skbio.io.registry.Format.sniffer", false]], "sobs() (in module skbio.diversity.alpha)": [[141, "skbio.diversity.alpha.sobs", false]], "sort() (skbio.alignment.tabularmsa method)": [[95, "skbio.alignment.TabularMSA.sort", false]], "sort() (skbio.metadata.intervalmetadata method)": [[322, "skbio.metadata.IntervalMetadata.sort", false]], "sort() (skbio.table.table method)": [[937, "skbio.table.Table.sort", false]], "sort_order() (skbio.table.table method)": [[938, "skbio.table.Table.sort_order", false]], "stops() (skbio.sequence.protein method)": [[549, "skbio.sequence.Protein.stops", false]], "stripedsmithwaterman (class in skbio.alignment)": [[53, "skbio.alignment.StripedSmithWaterman", false]], "strong() (in module skbio.diversity.alpha)": [[142, "skbio.diversity.alpha.strong", false]], "subsample() (skbio.table.table method)": [[939, "skbio.table.Table.subsample", false]], "subsample_counts() (in module skbio.stats)": [[882, "skbio.stats.subsample_counts", false]], "subsample_paired_power() (in module skbio.stats.power)": [[880, "skbio.stats.power.subsample_paired_power", false]], "subsample_power() (in module skbio.stats.power)": [[881, "skbio.stats.power.subsample_power", false]], "subset() (skbio.tree.treenode method)": [[1017, "skbio.tree.TreeNode.subset", false]], "subsets() (skbio.tree.treenode method)": [[1018, "skbio.tree.TreeNode.subsets", false]], "substitutionmatrix (class in skbio.sequence)": [[651, "skbio.sequence.SubstitutionMatrix", false]], "subtree() (skbio.tree.treenode method)": [[1019, "skbio.tree.TreeNode.subtree", false]], "sum() (skbio.table.table method)": [[940, "skbio.table.Table.sum", false]], "svd_rank() (in module skbio.stats.ordination)": [[876, "skbio.stats.ordination.svd_rank", false]], "table (class in skbio.table)": [[883, "skbio.table.Table", false]], "tabularmsa (class in skbio.alignment)": [[65, "skbio.alignment.TabularMSA", false]], "tip_tip_distances() (skbio.tree.treenode method)": [[1020, "skbio.tree.TreeNode.tip_tip_distances", false]], "tips() (skbio.tree.treenode method)": [[1021, "skbio.tree.TreeNode.tips", false]], "to_anndata() (skbio.table.table method)": [[941, "skbio.table.Table.to_anndata", false]], "to_array() (skbio.tree.treenode method)": [[1022, "skbio.tree.TreeNode.to_array", false]], "to_bits() (skbio.alignment.alignpath method)": [[17, "skbio.alignment.AlignPath.to_bits", false]], "to_bits() (skbio.alignment.pairalignpath method)": [[49, "skbio.alignment.PairAlignPath.to_bits", false]], "to_cigar() (skbio.alignment.pairalignpath method)": [[50, "skbio.alignment.PairAlignPath.to_cigar", false]], "to_coordinates() (skbio.alignment.alignpath method)": [[18, "skbio.alignment.AlignPath.to_coordinates", false]], "to_coordinates() (skbio.alignment.pairalignpath method)": [[51, "skbio.alignment.PairAlignPath.to_coordinates", false]], "to_data_frame() (skbio.sequence.substitutionmatrix method)": [[674, "skbio.sequence.SubstitutionMatrix.to_data_frame", false]], "to_data_frame() (skbio.stats.distance.dissimilaritymatrix method)": [[723, "skbio.stats.distance.DissimilarityMatrix.to_data_frame", false]], "to_data_frame() (skbio.stats.distance.distancematrix method)": [[748, "skbio.stats.distance.DistanceMatrix.to_data_frame", false]], "to_dataframe() (skbio.metadata.categoricalmetadatacolumn method)": [[293, "skbio.metadata.CategoricalMetadataColumn.to_dataframe", false]], "to_dataframe() (skbio.metadata.metadatacolumn method)": [[340, "skbio.metadata.MetadataColumn.to_dataframe", false]], "to_dataframe() (skbio.metadata.numericmetadatacolumn method)": [[358, "skbio.metadata.NumericMetadataColumn.to_dataframe", false]], "to_dataframe() (skbio.metadata.samplemetadata method)": [[377, "skbio.metadata.SampleMetadata.to_dataframe", false]], "to_dataframe() (skbio.table.table method)": [[942, "skbio.table.Table.to_dataframe", false]], "to_definites() (skbio.sequence.dna method)": [[431, "skbio.sequence.DNA.to_definites", false]], "to_definites() (skbio.sequence.grammaredsequence method)": [[497, "skbio.sequence.GrammaredSequence.to_definites", false]], "to_definites() (skbio.sequence.protein method)": [[550, "skbio.sequence.Protein.to_definites", false]], "to_definites() (skbio.sequence.rna method)": [[607, "skbio.sequence.RNA.to_definites", false]], "to_dict() (skbio.alignment.tabularmsa method)": [[96, "skbio.alignment.TabularMSA.to_dict", false]], "to_dict() (skbio.sequence.substitutionmatrix method)": [[675, "skbio.sequence.SubstitutionMatrix.to_dict", false]], "to_files() (skbio.stats.gradient.categoryresults method)": [[784, "skbio.stats.gradient.CategoryResults.to_files", false]], "to_files() (skbio.stats.gradient.gradientanovaresults method)": [[817, "skbio.stats.gradient.GradientANOVAResults.to_files", false]], "to_files() (skbio.stats.gradient.groupresults method)": [[828, "skbio.stats.gradient.GroupResults.to_files", false]], "to_hdf5() (skbio.table.table method)": [[943, "skbio.table.Table.to_hdf5", false]], "to_indices() (skbio.alignment.alignpath method)": [[19, "skbio.alignment.AlignPath.to_indices", false]], "to_indices() (skbio.alignment.pairalignpath method)": [[52, "skbio.alignment.PairAlignPath.to_indices", false]], "to_indices() (skbio.sequence.dna method)": [[432, "skbio.sequence.DNA.to_indices", false]], "to_indices() (skbio.sequence.grammaredsequence method)": [[498, "skbio.sequence.GrammaredSequence.to_indices", false]], "to_indices() (skbio.sequence.protein method)": [[551, "skbio.sequence.Protein.to_indices", false]], "to_indices() (skbio.sequence.rna method)": [[608, "skbio.sequence.RNA.to_indices", false]], "to_indices() (skbio.sequence.sequence method)": [[649, "skbio.sequence.Sequence.to_indices", false]], "to_json() (skbio.table.table method)": [[944, "skbio.table.Table.to_json", false]], "to_regex() (skbio.sequence.dna method)": [[433, "skbio.sequence.DNA.to_regex", false]], "to_regex() (skbio.sequence.grammaredsequence method)": [[499, "skbio.sequence.GrammaredSequence.to_regex", false]], "to_regex() (skbio.sequence.protein method)": [[552, "skbio.sequence.Protein.to_regex", false]], "to_regex() (skbio.sequence.rna method)": [[609, "skbio.sequence.RNA.to_regex", false]], "to_series() (skbio.metadata.categoricalmetadatacolumn method)": [[294, "skbio.metadata.CategoricalMetadataColumn.to_series", false]], "to_series() (skbio.metadata.metadatacolumn method)": [[341, "skbio.metadata.MetadataColumn.to_series", false]], "to_series() (skbio.metadata.numericmetadatacolumn method)": [[359, "skbio.metadata.NumericMetadataColumn.to_series", false]], "to_series() (skbio.stats.distance.distancematrix method)": [[749, "skbio.stats.distance.DistanceMatrix.to_series", false]], "to_taxonomy() (skbio.tree.treenode method)": [[1023, "skbio.tree.TreeNode.to_taxonomy", false]], "to_tsv() (skbio.table.table method)": [[945, "skbio.table.Table.to_tsv", false]], "trajectorygradientanova (class in skbio.stats.gradient)": [[829, "skbio.stats.gradient.TrajectoryGradientANOVA", false]], "transcribe() (skbio.sequence.dna method)": [[434, "skbio.sequence.DNA.transcribe", false]], "transform() (skbio.table.table method)": [[946, "skbio.table.Table.transform", false]], "translate() (skbio.sequence.dna method)": [[435, "skbio.sequence.DNA.translate", false]], "translate() (skbio.sequence.geneticcode method)": [[448, "skbio.sequence.GeneticCode.translate", false]], "translate() (skbio.sequence.rna method)": [[610, "skbio.sequence.RNA.translate", false]], "translate_six_frames() (skbio.sequence.dna method)": [[436, "skbio.sequence.DNA.translate_six_frames", false]], "translate_six_frames() (skbio.sequence.geneticcode method)": [[449, "skbio.sequence.GeneticCode.translate_six_frames", false]], "translate_six_frames() (skbio.sequence.rna method)": [[611, "skbio.sequence.RNA.translate_six_frames", false]], "transpose() (skbio.sequence.substitutionmatrix method)": [[676, "skbio.sequence.SubstitutionMatrix.transpose", false]], "transpose() (skbio.stats.distance.dissimilaritymatrix method)": [[724, "skbio.stats.distance.DissimilarityMatrix.transpose", false]], "transpose() (skbio.stats.distance.distancematrix method)": [[750, "skbio.stats.distance.DistanceMatrix.transpose", false]], "transpose() (skbio.table.table method)": [[947, "skbio.table.Table.transpose", false]], "traverse() (skbio.tree.treenode method)": [[1024, "skbio.tree.TreeNode.traverse", false]], "tree_basis() (in module skbio.stats.composition)": [[701, "skbio.stats.composition.tree_basis", false]], "treenode (class in skbio.tree)": [[951, "skbio.tree.TreeNode", false]], "unpack() (skbio.tree.treenode method)": [[1025, "skbio.tree.TreeNode.unpack", false]], "unpack_by_func() (skbio.tree.treenode method)": [[1026, "skbio.tree.TreeNode.unpack_by_func", false]], "unrooted_copy() (skbio.tree.treenode method)": [[1027, "skbio.tree.TreeNode.unrooted_copy", false]], "unrooted_deepcopy() (skbio.tree.treenode method)": [[1028, "skbio.tree.TreeNode.unrooted_deepcopy", false]], "unweighted_unifrac() (in module skbio.diversity.beta)": [[145, "skbio.diversity.beta.unweighted_unifrac", false]], "update_ids() (skbio.table.table method)": [[948, "skbio.table.Table.update_ids", false]], "vlr() (in module skbio.stats.composition)": [[702, "skbio.stats.composition.vlr", false]], "weighted_unifrac() (in module skbio.diversity.beta)": [[146, "skbio.diversity.beta.weighted_unifrac", false]], "windowdifferencegradientanova (class in skbio.stats.gradient)": [[840, "skbio.stats.gradient.WindowDifferenceGradientANOVA", false]], "within() (skbio.sequence.substitutionmatrix method)": [[677, "skbio.sequence.SubstitutionMatrix.within", false]], "within() (skbio.stats.distance.dissimilaritymatrix method)": [[725, "skbio.stats.distance.DissimilarityMatrix.within", false]], "within() (skbio.stats.distance.distancematrix method)": [[751, "skbio.stats.distance.DistanceMatrix.within", false]], "workflow (class in skbio.workflow)": [[1057, "skbio.workflow.Workflow", false]], "write() (in module skbio.io.registry)": [[272, "skbio.io.registry.write", false]], "write() (skbio.alignment.tabularmsa method)": [[97, "skbio.alignment.TabularMSA.write", false]], "write() (skbio.embedding.proteinembedding method)": [[175, "skbio.embedding.ProteinEmbedding.write", false]], "write() (skbio.embedding.proteinvector method)": [[188, "skbio.embedding.ProteinVector.write", false]], "write() (skbio.io.registry.ioregistry method)": [[268, "skbio.io.registry.IORegistry.write", false]], "write() (skbio.metadata.intervalmetadata method)": [[323, "skbio.metadata.IntervalMetadata.write", false]], "write() (skbio.metadata.samplemetadata method)": [[378, "skbio.metadata.SampleMetadata.write", false]], "write() (skbio.sequence.dna method)": [[437, "skbio.sequence.DNA.write", false]], "write() (skbio.sequence.grammaredsequence method)": [[500, "skbio.sequence.GrammaredSequence.write", false]], "write() (skbio.sequence.protein method)": [[553, "skbio.sequence.Protein.write", false]], "write() (skbio.sequence.rna method)": [[612, "skbio.sequence.RNA.write", false]], "write() (skbio.sequence.sequence method)": [[650, "skbio.sequence.Sequence.write", false]], "write() (skbio.sequence.substitutionmatrix method)": [[678, "skbio.sequence.SubstitutionMatrix.write", false]], "write() (skbio.stats.distance.dissimilaritymatrix method)": [[726, "skbio.stats.distance.DissimilarityMatrix.write", false]], "write() (skbio.stats.distance.distancematrix method)": [[752, "skbio.stats.distance.DistanceMatrix.write", false]], "write() (skbio.stats.ordination.ordinationresults method)": [[865, "skbio.stats.ordination.OrdinationResults.write", false]], "write() (skbio.table.table method)": [[949, "skbio.table.Table.write", false]], "write() (skbio.tree.treenode method)": [[1029, "skbio.tree.TreeNode.write", false]], "writer() (skbio.io.registry.format method)": [[247, "skbio.io.registry.Format.writer", false]]}, "objects": {"skbio": [[0, 0, 0, "-", "alignment"], [1, 0, 0, "-", "diversity"], [2, 0, 0, "-", "embedding"], [1092, 0, 0, "-", "io"], [1093, 0, 0, "-", "metadata"], [1094, 0, 0, "-", "sequence"], [1095, 0, 0, "-", "stats"], [1096, 0, 0, "-", "table"], [1097, 0, 0, "-", "tree"], [1098, 0, 0, "-", "util"], [1099, 0, 0, "-", "workflow"]], "skbio.alignment": [[3, 1, 1, "", "AlignPath"], [20, 1, 1, "", "AlignmentStructure"], [34, 1, 1, "", "PairAlignPath"], [53, 1, 1, "", "StripedSmithWaterman"], [65, 1, 1, "", "TabularMSA"], [98, 3, 1, "", "global_pairwise_align"], [99, 3, 1, "", "global_pairwise_align_nucleotide"], [100, 3, 1, "", "global_pairwise_align_protein"], [101, 3, 1, "", "local_pairwise_align"], [102, 3, 1, "", "local_pairwise_align_nucleotide"], [103, 3, 1, "", "local_pairwise_align_protein"], [104, 3, 1, "", "local_pairwise_align_ssw"], [105, 3, 1, "", "make_identity_substitution_matrix"]], "skbio.alignment.AlignPath": [[4, 2, 1, "", "__eq__"], [5, 2, 1, "", "__ge__"], [6, 2, 1, "", "__getstate__"], [7, 2, 1, "", "__gt__"], [8, 2, 1, "", "__hash__"], [9, 2, 1, "", "__le__"], [10, 2, 1, "", "__lt__"], [11, 2, 1, "", "__ne__"], [12, 2, 1, "", "__str__"], [13, 2, 1, "", "from_bits"], [14, 2, 1, "", "from_coordinates"], [15, 2, 1, "", "from_indices"], [16, 2, 1, "", "from_tabular"], [17, 2, 1, "", "to_bits"], [18, 2, 1, "", "to_coordinates"], [19, 2, 1, "", "to_indices"]], "skbio.alignment.AlignmentStructure": [[21, 2, 1, "", "__eq__"], [22, 2, 1, "", "__ge__"], [23, 2, 1, "", "__getitem__"], [24, 2, 1, "", "__getstate__"], [25, 2, 1, "", "__gt__"], [26, 2, 1, "", "__hash__"], [27, 2, 1, "", "__le__"], [28, 2, 1, "", "__lt__"], [29, 2, 1, "", "__ne__"], [30, 2, 1, "", "__setstate__"], [31, 2, 1, "", "__str__"], [32, 2, 1, "", "is_zero_based"], [33, 2, 1, "", "set_zero_based"]], "skbio.alignment.PairAlignPath": [[35, 2, 1, "", "__eq__"], [36, 2, 1, "", "__ge__"], [37, 2, 1, "", "__getstate__"], [38, 2, 1, "", "__gt__"], [39, 2, 1, "", "__hash__"], [40, 2, 1, "", "__le__"], [41, 2, 1, "", "__lt__"], [42, 2, 1, "", "__ne__"], [43, 2, 1, "", "__str__"], [44, 2, 1, "", "from_bits"], [45, 2, 1, "", "from_cigar"], [46, 2, 1, "", "from_coordinates"], [47, 2, 1, "", "from_indices"], [48, 2, 1, "", "from_tabular"], [49, 2, 1, "", "to_bits"], [50, 2, 1, "", "to_cigar"], [51, 2, 1, "", "to_coordinates"], [52, 2, 1, "", "to_indices"]], "skbio.alignment.StripedSmithWaterman": [[54, 2, 1, "", "__call__"], [55, 2, 1, "", "__eq__"], [56, 2, 1, "", "__ge__"], [57, 2, 1, "", "__getstate__"], [58, 2, 1, "", "__gt__"], [59, 2, 1, "", "__hash__"], [60, 2, 1, "", "__le__"], [61, 2, 1, "", "__lt__"], [62, 2, 1, "", "__ne__"], [63, 2, 1, "", "__setstate__"], [64, 2, 1, "", "__str__"]], "skbio.alignment.TabularMSA": [[66, 2, 1, "", "__bool__"], [67, 2, 1, "", "__contains__"], [68, 2, 1, "", "__copy__"], [69, 2, 1, "", "__deepcopy__"], [70, 2, 1, "", "__eq__"], [71, 2, 1, "", "__ge__"], [72, 2, 1, "", "__getitem__"], [73, 2, 1, "", "__getstate__"], [74, 2, 1, "", "__gt__"], [75, 2, 1, "", "__iter__"], [76, 2, 1, "", "__le__"], [77, 2, 1, "", "__len__"], [78, 2, 1, "", "__lt__"], [79, 2, 1, "", "__ne__"], [80, 2, 1, "", "__reversed__"], [81, 2, 1, "", "__str__"], [82, 2, 1, "", "append"], [83, 2, 1, "", "consensus"], [84, 2, 1, "", "conservation"], [85, 2, 1, "", "extend"], [86, 2, 1, "", "from_dict"], [87, 2, 1, "", "from_path_seqs"], [88, 2, 1, "", "gap_frequencies"], [89, 2, 1, "", "has_metadata"], [90, 2, 1, "", "has_positional_metadata"], [91, 2, 1, "", "iter_positions"], [92, 2, 1, "", "join"], [93, 2, 1, "", "read"], [94, 2, 1, "", "reassign_index"], [95, 2, 1, "", "sort"], [96, 2, 1, "", "to_dict"], [97, 2, 1, "", "write"]], "skbio.diversity": [[106, 0, 0, "-", "alpha"], [143, 3, 1, "", "alpha_diversity"], [144, 0, 0, "-", "beta"], [147, 3, 1, "", "beta_diversity"], [148, 3, 1, "", "block_beta_diversity"], [149, 3, 1, "", "get_alpha_diversity_metrics"], [150, 3, 1, "", "get_beta_diversity_metrics"], [151, 3, 1, "", "partial_beta_diversity"]], "skbio.diversity.alpha": [[107, 3, 1, "", "ace"], [108, 3, 1, "", "berger_parker_d"], [109, 3, 1, "", "brillouin_d"], [110, 3, 1, "", "chao1"], [111, 3, 1, "", "chao1_ci"], [112, 3, 1, "", "dominance"], [113, 3, 1, "", "doubles"], [114, 3, 1, "", "enspie"], [115, 3, 1, "", "esty_ci"], [116, 3, 1, "", "faith_pd"], [117, 3, 1, "", "fisher_alpha"], [118, 3, 1, "", "gini_index"], [119, 3, 1, "", "goods_coverage"], [120, 3, 1, "", "heip_e"], [121, 3, 1, "", "inv_simpson"], [122, 3, 1, "", "kempton_taylor_q"], [123, 3, 1, "", "lladser_ci"], [124, 3, 1, "", "lladser_pe"], [125, 3, 1, "", "margalef"], [126, 3, 1, "", "mcintosh_d"], [127, 3, 1, "", "mcintosh_e"], [128, 3, 1, "", "menhinick"], [129, 3, 1, "", "michaelis_menten_fit"], [130, 3, 1, "", "observed_features"], [131, 3, 1, "", "observed_otus"], [132, 3, 1, "", "osd"], [133, 3, 1, "", "phydiv"], [134, 3, 1, "", "pielou_e"], [135, 3, 1, "", "robbins"], [136, 3, 1, "", "shannon"], [137, 3, 1, "", "simpson"], [138, 3, 1, "", "simpson_d"], [139, 3, 1, "", "simpson_e"], [140, 3, 1, "", "singles"], [141, 3, 1, "", "sobs"], [142, 3, 1, "", "strong"]], "skbio.diversity.beta": [[145, 3, 1, "", "unweighted_unifrac"], [146, 3, 1, "", "weighted_unifrac"]], "skbio.embedding": [[152, 1, 1, "", "Embedding"], [163, 1, 1, "", "ProteinEmbedding"], [176, 1, 1, "", "ProteinVector"], [189, 1, 1, "", "SequenceEmbedding"], [200, 1, 1, "", "SequenceVector"], [211, 3, 1, "", "embed_vec_to_dataframe"], [212, 3, 1, "", "embed_vec_to_distances"], [213, 3, 1, "", "embed_vec_to_numpy"], [214, 3, 1, "", "embed_vec_to_ordination"]], "skbio.embedding.Embedding": [[153, 2, 1, "", "__eq__"], [154, 2, 1, "", "__ge__"], [155, 2, 1, "", "__getstate__"], [156, 2, 1, "", "__gt__"], [157, 2, 1, "", "__hash__"], [158, 2, 1, "", "__le__"], [159, 2, 1, "", "__lt__"], [160, 2, 1, "", "__ne__"], [161, 2, 1, "", "__str__"], [162, 2, 1, "", "bytes"]], "skbio.embedding.ProteinEmbedding": [[164, 2, 1, "", "__eq__"], [165, 2, 1, "", "__ge__"], [166, 2, 1, "", "__getstate__"], [167, 2, 1, "", "__gt__"], [168, 2, 1, "", "__hash__"], [169, 2, 1, "", "__le__"], [170, 2, 1, "", "__lt__"], [171, 2, 1, "", "__ne__"], [172, 2, 1, "", "__str__"], [173, 2, 1, "", "bytes"], [174, 2, 1, "", "read"], [175, 2, 1, "", "write"]], "skbio.embedding.ProteinVector": [[177, 2, 1, "", "__eq__"], [178, 2, 1, "", "__ge__"], [179, 2, 1, "", "__getstate__"], [180, 2, 1, "", "__gt__"], [181, 2, 1, "", "__hash__"], [182, 2, 1, "", "__le__"], [183, 2, 1, "", "__lt__"], [184, 2, 1, "", "__ne__"], [185, 2, 1, "", "__str__"], [186, 2, 1, "", "bytes"], [187, 2, 1, "", "read"], [188, 2, 1, "", "write"]], "skbio.embedding.SequenceEmbedding": [[190, 2, 1, "", "__eq__"], [191, 2, 1, "", "__ge__"], [192, 2, 1, "", "__getstate__"], [193, 2, 1, "", "__gt__"], [194, 2, 1, "", "__hash__"], [195, 2, 1, "", "__le__"], [196, 2, 1, "", "__lt__"], [197, 2, 1, "", "__ne__"], [198, 2, 1, "", "__str__"], [199, 2, 1, "", "bytes"]], "skbio.embedding.SequenceVector": [[201, 2, 1, "", "__eq__"], [202, 2, 1, "", "__ge__"], [203, 2, 1, "", "__getstate__"], [204, 2, 1, "", "__gt__"], [205, 2, 1, "", "__hash__"], [206, 2, 1, "", "__le__"], [207, 2, 1, "", "__lt__"], [208, 2, 1, "", "__ne__"], [209, 2, 1, "", "__str__"], [210, 2, 1, "", "bytes"]], "skbio.io": [[234, 0, 0, "-", "registry"], [273, 0, 0, "-", "util"]], "skbio.io.format": [[215, 0, 0, "-", "binary_dm"], [216, 0, 0, "-", "biom"], [217, 0, 0, "-", "blast6"], [218, 0, 0, "-", "blast7"], [219, 0, 0, "-", "clustal"], [220, 0, 0, "-", "embed"], [221, 0, 0, "-", "embl"], [222, 0, 0, "-", "fasta"], [223, 0, 0, "-", "fastq"], [224, 0, 0, "-", "genbank"], [225, 0, 0, "-", "gff3"], [226, 0, 0, "-", "lsmat"], [227, 0, 0, "-", "newick"], [228, 0, 0, "-", "ordination"], [229, 0, 0, "-", "phylip"], [230, 0, 0, "-", "qseq"], [231, 0, 0, "-", "sample_metadata"], [232, 0, 0, "-", "stockholm"], [233, 0, 0, "-", "taxdump"]], "skbio.io.registry": [[235, 1, 1, "", "Format"], [248, 1, 1, "", "IORegistry"], [269, 3, 1, "", "create_format"], [270, 3, 1, "", "read"], [271, 3, 1, "", "sniff"], [272, 3, 1, "", "write"]], "skbio.io.registry.Format": [[236, 2, 1, "", "__eq__"], [237, 2, 1, "", "__ge__"], [238, 2, 1, "", "__getstate__"], [239, 2, 1, "", "__gt__"], [240, 2, 1, "", "__hash__"], [241, 2, 1, "", "__le__"], [242, 2, 1, "", "__lt__"], [243, 2, 1, "", "__ne__"], [244, 2, 1, "", "__str__"], [245, 2, 1, "", "reader"], [246, 2, 1, "", "sniffer"], [247, 2, 1, "", "writer"]], "skbio.io.registry.IORegistry": [[249, 2, 1, "", "__eq__"], [250, 2, 1, "", "__ge__"], [251, 2, 1, "", "__getstate__"], [252, 2, 1, "", "__gt__"], [253, 2, 1, "", "__hash__"], [254, 2, 1, "", "__le__"], [255, 2, 1, "", "__lt__"], [256, 2, 1, "", "__ne__"], [257, 2, 1, "", "__str__"], [258, 2, 1, "", "add_format"], [259, 2, 1, "", "create_format"], [260, 2, 1, "", "get_reader"], [261, 2, 1, "", "get_sniffer"], [262, 2, 1, "", "get_writer"], [263, 2, 1, "", "list_read_formats"], [264, 2, 1, "", "list_write_formats"], [265, 2, 1, "", "monkey_patch"], [266, 2, 1, "", "read"], [267, 2, 1, "", "sniff"], [268, 2, 1, "", "write"]], "skbio.io.util": [[274, 3, 1, "", "open"], [275, 3, 1, "", "open_file"], [276, 3, 1, "", "open_files"]], "skbio.metadata": [[277, 1, 1, "", "CategoricalMetadataColumn"], [295, 1, 1, "", "Interval"], [305, 1, 1, "", "IntervalMetadata"], [324, 1, 1, "", "MetadataColumn"], [342, 1, 1, "", "NumericMetadataColumn"], [360, 1, 1, "", "SampleMetadata"]], "skbio.metadata.CategoricalMetadataColumn": [[278, 2, 1, "", "__eq__"], [279, 2, 1, "", "__ge__"], [280, 2, 1, "", "__getstate__"], [281, 2, 1, "", "__gt__"], [282, 2, 1, "", "__le__"], [283, 2, 1, "", "__lt__"], [284, 2, 1, "", "__ne__"], [285, 2, 1, "", "__str__"], [286, 2, 1, "", "drop_missing_values"], [287, 2, 1, "", "filter_ids"], [288, 2, 1, "", "get_ids"], [289, 2, 1, "", "get_missing"], [290, 2, 1, "", "get_value"], [291, 2, 1, "", "has_missing_values"], [292, 2, 1, "", "save"], [293, 2, 1, "", "to_dataframe"], [294, 2, 1, "", "to_series"]], "skbio.metadata.Interval": [[296, 2, 1, "", "__eq__"], [297, 2, 1, "", "__ge__"], [298, 2, 1, "", "__getstate__"], [299, 2, 1, "", "__gt__"], [300, 2, 1, "", "__le__"], [301, 2, 1, "", "__lt__"], [302, 2, 1, "", "__ne__"], [303, 2, 1, "", "__str__"], [304, 2, 1, "", "drop"]], "skbio.metadata.IntervalMetadata": [[306, 2, 1, "", "__copy__"], [307, 2, 1, "", "__deepcopy__"], [308, 2, 1, "", "__eq__"], [309, 2, 1, "", "__ge__"], [310, 2, 1, "", "__getstate__"], [311, 2, 1, "", "__gt__"], [312, 2, 1, "", "__le__"], [313, 2, 1, "", "__lt__"], [314, 2, 1, "", "__ne__"], [315, 2, 1, "", "__str__"], [316, 2, 1, "", "add"], [317, 2, 1, "", "concat"], [318, 2, 1, "", "drop"], [319, 2, 1, "", "merge"], [320, 2, 1, "", "query"], [321, 2, 1, "", "read"], [322, 2, 1, "", "sort"], [323, 2, 1, "", "write"]], "skbio.metadata.MetadataColumn": [[325, 2, 1, "", "__eq__"], [326, 2, 1, "", "__ge__"], [327, 2, 1, "", "__getstate__"], [328, 2, 1, "", "__gt__"], [329, 2, 1, "", "__le__"], [330, 2, 1, "", "__lt__"], [331, 2, 1, "", "__ne__"], [332, 2, 1, "", "__str__"], [333, 2, 1, "", "drop_missing_values"], [334, 2, 1, "", "filter_ids"], [335, 2, 1, "", "get_ids"], [336, 2, 1, "", "get_missing"], [337, 2, 1, "", "get_value"], [338, 2, 1, "", "has_missing_values"], [339, 2, 1, "", "save"], [340, 2, 1, "", "to_dataframe"], [341, 2, 1, "", "to_series"]], "skbio.metadata.NumericMetadataColumn": [[343, 2, 1, "", "__eq__"], [344, 2, 1, "", "__ge__"], [345, 2, 1, "", "__getstate__"], [346, 2, 1, "", "__gt__"], [347, 2, 1, "", "__le__"], [348, 2, 1, "", "__lt__"], [349, 2, 1, "", "__ne__"], [350, 2, 1, "", "__str__"], [351, 2, 1, "", "drop_missing_values"], [352, 2, 1, "", "filter_ids"], [353, 2, 1, "", "get_ids"], [354, 2, 1, "", "get_missing"], [355, 2, 1, "", "get_value"], [356, 2, 1, "", "has_missing_values"], [357, 2, 1, "", "save"], [358, 2, 1, "", "to_dataframe"], [359, 2, 1, "", "to_series"]], "skbio.metadata.SampleMetadata": [[361, 2, 1, "", "__eq__"], [362, 2, 1, "", "__ge__"], [363, 2, 1, "", "__getstate__"], [364, 2, 1, "", "__gt__"], [365, 2, 1, "", "__le__"], [366, 2, 1, "", "__lt__"], [367, 2, 1, "", "__ne__"], [368, 2, 1, "", "__str__"], [369, 2, 1, "", "filter_columns"], [370, 2, 1, "", "filter_ids"], [371, 2, 1, "", "get_column"], [372, 2, 1, "", "get_ids"], [373, 2, 1, "", "load"], [374, 2, 1, "", "merge"], [375, 2, 1, "", "read"], [376, 2, 1, "", "save"], [377, 2, 1, "", "to_dataframe"], [378, 2, 1, "", "write"]], "skbio.sequence": [[379, 1, 1, "", "DNA"], [438, 1, 1, "", "GeneticCode"], [450, 1, 1, "", "GrammaredSequence"], [501, 1, 1, "", "Protein"], [554, 1, 1, "", "RNA"], [613, 1, 1, "", "Sequence"], [651, 1, 1, "", "SubstitutionMatrix"], [679, 0, 0, "-", "distance"]], "skbio.sequence.DNA": [[380, 2, 1, "", "__bool__"], [381, 2, 1, "", "__contains__"], [382, 2, 1, "", "__copy__"], [383, 2, 1, "", "__deepcopy__"], [384, 2, 1, "", "__eq__"], [385, 2, 1, "", "__ge__"], [386, 2, 1, "", "__getitem__"], [387, 2, 1, "", "__getstate__"], [388, 2, 1, "", "__gt__"], [389, 2, 1, "", "__iter__"], [390, 2, 1, "", "__le__"], [391, 2, 1, "", "__len__"], [392, 2, 1, "", "__lt__"], [393, 2, 1, "", "__ne__"], [394, 2, 1, "", "__reversed__"], [395, 2, 1, "", "__str__"], [396, 2, 1, "", "complement"], [397, 2, 1, "", "concat"], [398, 2, 1, "", "count"], [399, 2, 1, "", "definites"], [400, 2, 1, "", "degap"], [401, 2, 1, "", "degenerates"], [402, 2, 1, "", "distance"], [403, 2, 1, "", "expand_degenerates"], [404, 2, 1, "", "find_motifs"], [405, 2, 1, "", "find_with_regex"], [406, 2, 1, "", "frequencies"], [407, 2, 1, "", "gaps"], [408, 2, 1, "", "gc_content"], [409, 2, 1, "", "gc_frequency"], [410, 2, 1, "", "has_definites"], [411, 2, 1, "", "has_degenerates"], [412, 2, 1, "", "has_gaps"], [413, 2, 1, "", "has_interval_metadata"], [414, 2, 1, "", "has_metadata"], [415, 2, 1, "", "has_nondegenerates"], [416, 2, 1, "", "has_positional_metadata"], [417, 2, 1, "", "index"], [418, 2, 1, "", "is_reverse_complement"], [419, 2, 1, "", "iter_contiguous"], [420, 2, 1, "", "iter_kmers"], [421, 2, 1, "", "kmer_frequencies"], [422, 2, 1, "", "lowercase"], [423, 2, 1, "", "match_frequency"], [424, 2, 1, "", "matches"], [425, 2, 1, "", "mismatch_frequency"], [426, 2, 1, "", "mismatches"], [427, 2, 1, "", "nondegenerates"], [428, 2, 1, "", "read"], [429, 2, 1, "", "replace"], [430, 2, 1, "", "reverse_complement"], [431, 2, 1, "", "to_definites"], [432, 2, 1, "", "to_indices"], [433, 2, 1, "", "to_regex"], [434, 2, 1, "", "transcribe"], [435, 2, 1, "", "translate"], [436, 2, 1, "", "translate_six_frames"], [437, 2, 1, "", "write"]], "skbio.sequence.GeneticCode": [[439, 2, 1, "", "__eq__"], [440, 2, 1, "", "__ge__"], [441, 2, 1, "", "__getstate__"], [442, 2, 1, "", "__gt__"], [443, 2, 1, "", "__le__"], [444, 2, 1, "", "__lt__"], [445, 2, 1, "", "__ne__"], [446, 2, 1, "", "__str__"], [447, 2, 1, "", "from_ncbi"], [448, 2, 1, "", "translate"], [449, 2, 1, "", "translate_six_frames"]], "skbio.sequence.GrammaredSequence": [[451, 2, 1, "", "__bool__"], [452, 2, 1, "", "__contains__"], [453, 2, 1, "", "__copy__"], [454, 2, 1, "", "__deepcopy__"], [455, 2, 1, "", "__eq__"], [456, 2, 1, "", "__ge__"], [457, 2, 1, "", "__getitem__"], [458, 2, 1, "", "__getstate__"], [459, 2, 1, "", "__gt__"], [460, 2, 1, "", "__iter__"], [461, 2, 1, "", "__le__"], [462, 2, 1, "", "__len__"], [463, 2, 1, "", "__lt__"], [464, 2, 1, "", "__ne__"], [465, 2, 1, "", "__reversed__"], [466, 2, 1, "", "__str__"], [467, 2, 1, "", "concat"], [468, 2, 1, "", "count"], [469, 2, 1, "", "definites"], [470, 2, 1, "", "degap"], [471, 2, 1, "", "degenerates"], [472, 2, 1, "", "distance"], [473, 2, 1, "", "expand_degenerates"], [474, 2, 1, "", "find_motifs"], [475, 2, 1, "", "find_with_regex"], [476, 2, 1, "", "frequencies"], [477, 2, 1, "", "gaps"], [478, 2, 1, "", "has_definites"], [479, 2, 1, "", "has_degenerates"], [480, 2, 1, "", "has_gaps"], [481, 2, 1, "", "has_interval_metadata"], [482, 2, 1, "", "has_metadata"], [483, 2, 1, "", "has_nondegenerates"], [484, 2, 1, "", "has_positional_metadata"], [485, 2, 1, "", "index"], [486, 2, 1, "", "iter_contiguous"], [487, 2, 1, "", "iter_kmers"], [488, 2, 1, "", "kmer_frequencies"], [489, 2, 1, "", "lowercase"], [490, 2, 1, "", "match_frequency"], [491, 2, 1, "", "matches"], [492, 2, 1, "", "mismatch_frequency"], [493, 2, 1, "", "mismatches"], [494, 2, 1, "", "nondegenerates"], [495, 2, 1, "", "read"], [496, 2, 1, "", "replace"], [497, 2, 1, "", "to_definites"], [498, 2, 1, "", "to_indices"], [499, 2, 1, "", "to_regex"], [500, 2, 1, "", "write"]], "skbio.sequence.Protein": [[502, 2, 1, "", "__bool__"], [503, 2, 1, "", "__contains__"], [504, 2, 1, "", "__copy__"], [505, 2, 1, "", "__deepcopy__"], [506, 2, 1, "", "__eq__"], [507, 2, 1, "", "__ge__"], [508, 2, 1, "", "__getitem__"], [509, 2, 1, "", "__getstate__"], [510, 2, 1, "", "__gt__"], [511, 2, 1, "", "__iter__"], [512, 2, 1, "", "__le__"], [513, 2, 1, "", "__len__"], [514, 2, 1, "", "__lt__"], [515, 2, 1, "", "__ne__"], [516, 2, 1, "", "__reversed__"], [517, 2, 1, "", "__str__"], [518, 2, 1, "", "concat"], [519, 2, 1, "", "count"], [520, 2, 1, "", "definites"], [521, 2, 1, "", "degap"], [522, 2, 1, "", "degenerates"], [523, 2, 1, "", "distance"], [524, 2, 1, "", "expand_degenerates"], [525, 2, 1, "", "find_motifs"], [526, 2, 1, "", "find_with_regex"], [527, 2, 1, "", "frequencies"], [528, 2, 1, "", "gaps"], [529, 2, 1, "", "has_definites"], [530, 2, 1, "", "has_degenerates"], [531, 2, 1, "", "has_gaps"], [532, 2, 1, "", "has_interval_metadata"], [533, 2, 1, "", "has_metadata"], [534, 2, 1, "", "has_nondegenerates"], [535, 2, 1, "", "has_positional_metadata"], [536, 2, 1, "", "has_stops"], [537, 2, 1, "", "index"], [538, 2, 1, "", "iter_contiguous"], [539, 2, 1, "", "iter_kmers"], [540, 2, 1, "", "kmer_frequencies"], [541, 2, 1, "", "lowercase"], [542, 2, 1, "", "match_frequency"], [543, 2, 1, "", "matches"], [544, 2, 1, "", "mismatch_frequency"], [545, 2, 1, "", "mismatches"], [546, 2, 1, "", "nondegenerates"], [547, 2, 1, "", "read"], [548, 2, 1, "", "replace"], [549, 2, 1, "", "stops"], [550, 2, 1, "", "to_definites"], [551, 2, 1, "", "to_indices"], [552, 2, 1, "", "to_regex"], [553, 2, 1, "", "write"]], "skbio.sequence.RNA": [[555, 2, 1, "", "__bool__"], [556, 2, 1, "", "__contains__"], [557, 2, 1, "", "__copy__"], [558, 2, 1, "", "__deepcopy__"], [559, 2, 1, "", "__eq__"], [560, 2, 1, "", "__ge__"], [561, 2, 1, "", "__getitem__"], [562, 2, 1, "", "__getstate__"], [563, 2, 1, "", "__gt__"], [564, 2, 1, "", "__iter__"], [565, 2, 1, "", "__le__"], [566, 2, 1, "", "__len__"], [567, 2, 1, "", "__lt__"], [568, 2, 1, "", "__ne__"], [569, 2, 1, "", "__reversed__"], [570, 2, 1, "", "__str__"], [571, 2, 1, "", "complement"], [572, 2, 1, "", "concat"], [573, 2, 1, "", "count"], [574, 2, 1, "", "definites"], [575, 2, 1, "", "degap"], [576, 2, 1, "", "degenerates"], [577, 2, 1, "", "distance"], [578, 2, 1, "", "expand_degenerates"], [579, 2, 1, "", "find_motifs"], [580, 2, 1, "", "find_with_regex"], [581, 2, 1, "", "frequencies"], [582, 2, 1, "", "gaps"], [583, 2, 1, "", "gc_content"], [584, 2, 1, "", "gc_frequency"], [585, 2, 1, "", "has_definites"], [586, 2, 1, "", "has_degenerates"], [587, 2, 1, "", "has_gaps"], [588, 2, 1, "", "has_interval_metadata"], [589, 2, 1, "", "has_metadata"], [590, 2, 1, "", "has_nondegenerates"], [591, 2, 1, "", "has_positional_metadata"], [592, 2, 1, "", "index"], [593, 2, 1, "", "is_reverse_complement"], [594, 2, 1, "", "iter_contiguous"], [595, 2, 1, "", "iter_kmers"], [596, 2, 1, "", "kmer_frequencies"], [597, 2, 1, "", "lowercase"], [598, 2, 1, "", "match_frequency"], [599, 2, 1, "", "matches"], [600, 2, 1, "", "mismatch_frequency"], [601, 2, 1, "", "mismatches"], [602, 2, 1, "", "nondegenerates"], [603, 2, 1, "", "read"], [604, 2, 1, "", "replace"], [605, 2, 1, "", "reverse_complement"], [606, 2, 1, "", "reverse_transcribe"], [607, 2, 1, "", "to_definites"], [608, 2, 1, "", "to_indices"], [609, 2, 1, "", "to_regex"], [610, 2, 1, "", "translate"], [611, 2, 1, "", "translate_six_frames"], [612, 2, 1, "", "write"]], "skbio.sequence.Sequence": [[614, 2, 1, "", "__bool__"], [615, 2, 1, "", "__contains__"], [616, 2, 1, "", "__copy__"], [617, 2, 1, "", "__deepcopy__"], [618, 2, 1, "", "__eq__"], [619, 2, 1, "", "__ge__"], [620, 2, 1, "", "__getitem__"], [621, 2, 1, "", "__getstate__"], [622, 2, 1, "", "__gt__"], [623, 2, 1, "", "__iter__"], [624, 2, 1, "", "__le__"], [625, 2, 1, "", "__len__"], [626, 2, 1, "", "__lt__"], [627, 2, 1, "", "__ne__"], [628, 2, 1, "", "__reversed__"], [629, 2, 1, "", "__str__"], [630, 2, 1, "", "concat"], [631, 2, 1, "", "count"], [632, 2, 1, "", "distance"], [633, 2, 1, "", "find_with_regex"], [634, 2, 1, "", "frequencies"], [635, 2, 1, "", "has_interval_metadata"], [636, 2, 1, "", "has_metadata"], [637, 2, 1, "", "has_positional_metadata"], [638, 2, 1, "", "index"], [639, 2, 1, "", "iter_contiguous"], [640, 2, 1, "", "iter_kmers"], [641, 2, 1, "", "kmer_frequencies"], [642, 2, 1, "", "lowercase"], [643, 2, 1, "", "match_frequency"], [644, 2, 1, "", "matches"], [645, 2, 1, "", "mismatch_frequency"], [646, 2, 1, "", "mismatches"], [647, 2, 1, "", "read"], [648, 2, 1, "", "replace"], [649, 2, 1, "", "to_indices"], [650, 2, 1, "", "write"]], "skbio.sequence.SubstitutionMatrix": [[652, 2, 1, "", "__contains__"], [653, 2, 1, "", "__eq__"], [654, 2, 1, "", "__ge__"], [655, 2, 1, "", "__getitem__"], [656, 2, 1, "", "__getstate__"], [657, 2, 1, "", "__gt__"], [658, 2, 1, "", "__le__"], [659, 2, 1, "", "__lt__"], [660, 2, 1, "", "__ne__"], [661, 2, 1, "", "__str__"], [662, 2, 1, "", "between"], [663, 2, 1, "", "by_name"], [664, 2, 1, "", "copy"], [665, 2, 1, "", "filter"], [666, 2, 1, "", "from_dict"], [667, 2, 1, "", "from_iterable"], [668, 2, 1, "", "get_names"], [669, 2, 1, "", "identity"], [670, 2, 1, "", "index"], [671, 2, 1, "", "plot"], [672, 2, 1, "", "read"], [673, 2, 1, "", "redundant_form"], [674, 2, 1, "", "to_data_frame"], [675, 2, 1, "", "to_dict"], [676, 2, 1, "", "transpose"], [677, 2, 1, "", "within"], [678, 2, 1, "", "write"]], "skbio.sequence.distance": [[680, 3, 1, "", "hamming"], [681, 3, 1, "", "kmer_distance"]], "skbio.stats": [[682, 0, 0, "-", "composition"], [703, 0, 0, "-", "distance"], [760, 0, 0, "-", "evolve"], [762, 0, 0, "-", "gradient"], [851, 3, 1, "", "isubsample"], [852, 0, 0, "-", "ordination"], [877, 0, 0, "-", "power"], [882, 3, 1, "", "subsample_counts"]], "skbio.stats.composition": [[683, 3, 1, "", "alr"], [684, 3, 1, "", "alr_inv"], [685, 3, 1, "", "ancom"], [686, 3, 1, "", "centralize"], [687, 3, 1, "", "closure"], [688, 3, 1, "", "clr"], [689, 3, 1, "", "clr_inv"], [690, 3, 1, "", "dirmult_ttest"], [691, 3, 1, "", "ilr"], [692, 3, 1, "", "ilr_inv"], [693, 3, 1, "", "inner"], [694, 3, 1, "", "multi_replace"], [695, 3, 1, "", "multiplicative_replacement"], [696, 3, 1, "", "pairwise_vlr"], [697, 3, 1, "", "perturb"], [698, 3, 1, "", "perturb_inv"], [699, 3, 1, "", "power"], [700, 3, 1, "", "sbp_basis"], [701, 3, 1, "", "tree_basis"], [702, 3, 1, "", "vlr"]], "skbio.stats.distance": [[704, 1, 1, "", "DissimilarityMatrix"], [727, 1, 1, "", "DistanceMatrix"], [753, 3, 1, "", "anosim"], [754, 3, 1, "", "bioenv"], [755, 3, 1, "", "mantel"], [756, 3, 1, "", "permanova"], [757, 3, 1, "", "permdisp"], [758, 3, 1, "", "pwmantel"], [759, 3, 1, "", "randdm"]], "skbio.stats.distance.DissimilarityMatrix": [[705, 2, 1, "", "__contains__"], [706, 2, 1, "", "__eq__"], [707, 2, 1, "", "__ge__"], [708, 2, 1, "", "__getitem__"], [709, 2, 1, "", "__getstate__"], [710, 2, 1, "", "__gt__"], [711, 2, 1, "", "__le__"], [712, 2, 1, "", "__lt__"], [713, 2, 1, "", "__ne__"], [714, 2, 1, "", "__str__"], [715, 2, 1, "", "between"], [716, 2, 1, "", "copy"], [717, 2, 1, "", "filter"], [718, 2, 1, "", "from_iterable"], [719, 2, 1, "", "index"], [720, 2, 1, "", "plot"], [721, 2, 1, "", "read"], [722, 2, 1, "", "redundant_form"], [723, 2, 1, "", "to_data_frame"], [724, 2, 1, "", "transpose"], [725, 2, 1, "", "within"], [726, 2, 1, "", "write"]], "skbio.stats.distance.DistanceMatrix": [[728, 2, 1, "", "__contains__"], [729, 2, 1, "", "__eq__"], [730, 2, 1, "", "__ge__"], [731, 2, 1, "", "__getitem__"], [732, 2, 1, "", "__getstate__"], [733, 2, 1, "", "__gt__"], [734, 2, 1, "", "__le__"], [735, 2, 1, "", "__lt__"], [736, 2, 1, "", "__ne__"], [737, 2, 1, "", "__str__"], [738, 2, 1, "", "between"], [739, 2, 1, "", "condensed_form"], [740, 2, 1, "", "copy"], [741, 2, 1, "", "filter"], [742, 2, 1, "", "from_iterable"], [743, 2, 1, "", "index"], [744, 2, 1, "", "permute"], [745, 2, 1, "", "plot"], [746, 2, 1, "", "read"], [747, 2, 1, "", "redundant_form"], [748, 2, 1, "", "to_data_frame"], [749, 2, 1, "", "to_series"], [750, 2, 1, "", "transpose"], [751, 2, 1, "", "within"], [752, 2, 1, "", "write"]], "skbio.stats.evolve": [[761, 3, 1, "", "hommola_cospeciation"]], "skbio.stats.gradient": [[763, 1, 1, "", "AverageGradientANOVA"], [774, 1, 1, "", "CategoryResults"], [785, 1, 1, "", "FirstDifferenceGradientANOVA"], [796, 1, 1, "", "GradientANOVA"], [807, 1, 1, "", "GradientANOVAResults"], [818, 1, 1, "", "GroupResults"], [829, 1, 1, "", "TrajectoryGradientANOVA"], [840, 1, 1, "", "WindowDifferenceGradientANOVA"]], "skbio.stats.gradient.AverageGradientANOVA": [[764, 2, 1, "", "__eq__"], [765, 2, 1, "", "__ge__"], [766, 2, 1, "", "__getstate__"], [767, 2, 1, "", "__gt__"], [768, 2, 1, "", "__hash__"], [769, 2, 1, "", "__le__"], [770, 2, 1, "", "__lt__"], [771, 2, 1, "", "__ne__"], [772, 2, 1, "", "__str__"], [773, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.CategoryResults": [[775, 2, 1, "", "__eq__"], [776, 2, 1, "", "__ge__"], [777, 2, 1, "", "__getstate__"], [778, 2, 1, "", "__gt__"], [779, 2, 1, "", "__hash__"], [780, 2, 1, "", "__le__"], [781, 2, 1, "", "__lt__"], [782, 2, 1, "", "__ne__"], [783, 2, 1, "", "__str__"], [784, 2, 1, "", "to_files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[786, 2, 1, "", "__eq__"], [787, 2, 1, "", "__ge__"], [788, 2, 1, "", "__getstate__"], [789, 2, 1, "", "__gt__"], [790, 2, 1, "", "__hash__"], [791, 2, 1, "", "__le__"], [792, 2, 1, "", "__lt__"], [793, 2, 1, "", "__ne__"], [794, 2, 1, "", "__str__"], [795, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVA": [[797, 2, 1, "", "__eq__"], [798, 2, 1, "", "__ge__"], [799, 2, 1, "", "__getstate__"], [800, 2, 1, "", "__gt__"], [801, 2, 1, "", "__hash__"], [802, 2, 1, "", "__le__"], [803, 2, 1, "", "__lt__"], [804, 2, 1, "", "__ne__"], [805, 2, 1, "", "__str__"], [806, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[808, 2, 1, "", "__eq__"], [809, 2, 1, "", "__ge__"], [810, 2, 1, "", "__getstate__"], [811, 2, 1, "", "__gt__"], [812, 2, 1, "", "__hash__"], [813, 2, 1, "", "__le__"], [814, 2, 1, "", "__lt__"], [815, 2, 1, "", "__ne__"], [816, 2, 1, "", "__str__"], [817, 2, 1, "", "to_files"]], "skbio.stats.gradient.GroupResults": [[819, 2, 1, "", "__eq__"], [820, 2, 1, "", "__ge__"], [821, 2, 1, "", "__getstate__"], [822, 2, 1, "", "__gt__"], [823, 2, 1, "", "__hash__"], [824, 2, 1, "", "__le__"], [825, 2, 1, "", "__lt__"], [826, 2, 1, "", "__ne__"], [827, 2, 1, "", "__str__"], [828, 2, 1, "", "to_files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[830, 2, 1, "", "__eq__"], [831, 2, 1, "", "__ge__"], [832, 2, 1, "", "__getstate__"], [833, 2, 1, "", "__gt__"], [834, 2, 1, "", "__hash__"], [835, 2, 1, "", "__le__"], [836, 2, 1, "", "__lt__"], [837, 2, 1, "", "__ne__"], [838, 2, 1, "", "__str__"], [839, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[841, 2, 1, "", "__eq__"], [842, 2, 1, "", "__ge__"], [843, 2, 1, "", "__getstate__"], [844, 2, 1, "", "__gt__"], [845, 2, 1, "", "__hash__"], [846, 2, 1, "", "__le__"], [847, 2, 1, "", "__lt__"], [848, 2, 1, "", "__ne__"], [849, 2, 1, "", "__str__"], [850, 2, 1, "", "get_trajectories"]], "skbio.stats.ordination": [[853, 1, 1, "", "OrdinationResults"], [866, 3, 1, "", "ca"], [867, 3, 1, "", "cca"], [868, 3, 1, "", "corr"], [869, 3, 1, "", "e_matrix"], [870, 3, 1, "", "f_matrix"], [871, 3, 1, "", "mean_and_std"], [872, 3, 1, "", "pcoa"], [873, 3, 1, "", "pcoa_biplot"], [874, 3, 1, "", "rda"], [875, 3, 1, "", "scale"], [876, 3, 1, "", "svd_rank"]], "skbio.stats.ordination.OrdinationResults": [[854, 2, 1, "", "__eq__"], [855, 2, 1, "", "__ge__"], [856, 2, 1, "", "__getstate__"], [857, 2, 1, "", "__gt__"], [858, 2, 1, "", "__hash__"], [859, 2, 1, "", "__le__"], [860, 2, 1, "", "__lt__"], [861, 2, 1, "", "__ne__"], [862, 2, 1, "", "__str__"], [863, 2, 1, "", "plot"], [864, 2, 1, "", "read"], [865, 2, 1, "", "write"]], "skbio.stats.power": [[878, 3, 1, "", "confidence_bound"], [879, 3, 1, "", "paired_subsamples"], [880, 3, 1, "", "subsample_paired_power"], [881, 3, 1, "", "subsample_power"]], "skbio.table": [[883, 1, 1, "", "Table"], [950, 4, 1, "", "example_table"]], "skbio.table.Table": [[884, 2, 1, "", "__eq__"], [885, 2, 1, "", "__ge__"], [886, 2, 1, "", "__getitem__"], [887, 2, 1, "", "__getstate__"], [888, 2, 1, "", "__gt__"], [889, 2, 1, "", "__iter__"], [890, 2, 1, "", "__le__"], [891, 2, 1, "", "__lt__"], [892, 2, 1, "", "__ne__"], [893, 2, 1, "", "__str__"], [894, 2, 1, "", "add_group_metadata"], [895, 2, 1, "", "add_metadata"], [896, 2, 1, "", "align_to"], [897, 2, 1, "", "align_to_dataframe"], [898, 2, 1, "", "align_tree"], [899, 2, 1, "", "collapse"], [900, 2, 1, "", "concat"], [901, 2, 1, "", "copy"], [902, 2, 1, "", "data"], [903, 2, 1, "", "del_metadata"], [904, 2, 1, "", "delimited_self"], [905, 2, 1, "", "descriptive_equality"], [906, 2, 1, "", "exists"], [907, 2, 1, "", "filter"], [908, 2, 1, "", "from_adjacency"], [909, 2, 1, "", "from_hdf5"], [910, 2, 1, "", "from_json"], [911, 2, 1, "", "from_tsv"], [912, 2, 1, "", "get_table_density"], [913, 2, 1, "", "get_value_by_ids"], [914, 2, 1, "", "group_metadata"], [915, 2, 1, "", "head"], [916, 2, 1, "", "ids"], [917, 2, 1, "", "index"], [918, 2, 1, "", "is_empty"], [919, 2, 1, "", "iter"], [920, 2, 1, "", "iter_data"], [921, 2, 1, "", "iter_pairwise"], [922, 2, 1, "", "length"], [923, 2, 1, "", "max"], [924, 2, 1, "", "merge"], [925, 2, 1, "", "metadata"], [926, 2, 1, "", "metadata_to_dataframe"], [927, 2, 1, "", "min"], [928, 2, 1, "", "nonzero"], [929, 2, 1, "", "nonzero_counts"], [930, 2, 1, "", "norm"], [931, 2, 1, "", "pa"], [932, 2, 1, "", "partition"], [933, 2, 1, "", "rankdata"], [934, 2, 1, "", "read"], [935, 2, 1, "", "reduce"], [936, 2, 1, "", "remove_empty"], [937, 2, 1, "", "sort"], [938, 2, 1, "", "sort_order"], [939, 2, 1, "", "subsample"], [940, 2, 1, "", "sum"], [941, 2, 1, "", "to_anndata"], [942, 2, 1, "", "to_dataframe"], [943, 2, 1, "", "to_hdf5"], [944, 2, 1, "", "to_json"], [945, 2, 1, "", "to_tsv"], [946, 2, 1, "", "transform"], [947, 2, 1, "", "transpose"], [948, 2, 1, "", "update_ids"], [949, 2, 1, "", "write"]], "skbio.tree": [[951, 1, 1, "", "TreeNode"], [1030, 3, 1, "", "majority_rule"], [1031, 3, 1, "", "nj"]], "skbio.tree.TreeNode": [[952, 2, 1, "", "__copy__"], [953, 2, 1, "", "__deepcopy__"], [954, 2, 1, "", "__eq__"], [955, 2, 1, "", "__ge__"], [956, 2, 1, "", "__getitem__"], [957, 2, 1, "", "__getstate__"], [958, 2, 1, "", "__gt__"], [959, 2, 1, "", "__hash__"], [960, 2, 1, "", "__iter__"], [961, 2, 1, "", "__le__"], [962, 2, 1, "", "__len__"], [963, 2, 1, "", "__lt__"], [964, 2, 1, "", "__ne__"], [965, 2, 1, "", "__str__"], [966, 2, 1, "", "accumulate_to_ancestor"], [967, 2, 1, "", "ancestors"], [968, 2, 1, "", "append"], [969, 2, 1, "", "ascii_art"], [970, 2, 1, "", "assign_ids"], [971, 2, 1, "", "assign_supports"], [972, 2, 1, "", "bifurcate"], [973, 2, 1, "", "cache_attr"], [974, 2, 1, "", "compare_rfd"], [975, 2, 1, "", "compare_subsets"], [976, 2, 1, "", "compare_tip_distances"], [977, 2, 1, "", "copy"], [978, 2, 1, "", "count"], [979, 2, 1, "", "create_caches"], [980, 2, 1, "", "deepcopy"], [981, 2, 1, "", "descending_branch_length"], [982, 2, 1, "", "distance"], [983, 2, 1, "", "extend"], [984, 2, 1, "", "find"], [985, 2, 1, "", "find_all"], [986, 2, 1, "", "find_by_func"], [987, 2, 1, "", "find_by_id"], [988, 2, 1, "", "from_linkage_matrix"], [989, 2, 1, "", "from_taxdump"], [990, 2, 1, "", "from_taxonomy"], [991, 2, 1, "", "get_max_distance"], [992, 2, 1, "", "has_children"], [993, 2, 1, "", "index_tree"], [994, 2, 1, "", "invalidate_caches"], [995, 2, 1, "", "is_root"], [996, 2, 1, "", "is_tip"], [997, 2, 1, "", "lca"], [998, 2, 1, "", "levelorder"], [999, 2, 1, "", "lowest_common_ancestor"], [1000, 2, 1, "", "neighbors"], [1001, 2, 1, "", "non_tips"], [1002, 2, 1, "", "observed_node_counts"], [1003, 2, 1, "", "pop"], [1004, 2, 1, "", "postorder"], [1005, 2, 1, "", "pre_and_postorder"], [1006, 2, 1, "", "preorder"], [1007, 2, 1, "", "prune"], [1008, 2, 1, "", "read"], [1009, 2, 1, "", "remove"], [1010, 2, 1, "", "remove_deleted"], [1011, 2, 1, "", "root"], [1012, 2, 1, "", "root_at"], [1013, 2, 1, "", "root_at_midpoint"], [1014, 2, 1, "", "shear"], [1015, 2, 1, "", "shuffle"], [1016, 2, 1, "", "siblings"], [1017, 2, 1, "", "subset"], [1018, 2, 1, "", "subsets"], [1019, 2, 1, "", "subtree"], [1020, 2, 1, "", "tip_tip_distances"], [1021, 2, 1, "", "tips"], [1022, 2, 1, "", "to_array"], [1023, 2, 1, "", "to_taxonomy"], [1024, 2, 1, "", "traverse"], [1025, 2, 1, "", "unpack"], [1026, 2, 1, "", "unpack_by_func"], [1027, 2, 1, "", "unrooted_copy"], [1028, 2, 1, "", "unrooted_deepcopy"], [1029, 2, 1, "", "write"]], "skbio.util": [[1032, 5, 1, "", "EfficiencyWarning"], [1033, 5, 1, "", "RepresentationWarning"], [1034, 3, 1, "", "assert_data_frame_almost_equal"], [1035, 3, 1, "", "assert_ordination_results_equal"], [1036, 3, 1, "", "cardinal_to_ordinal"], [1037, 1, 1, "", "classproperty"], [1054, 3, 1, "", "find_duplicates"], [1055, 3, 1, "", "get_data_path"], [1056, 3, 1, "", "safe_md5"]], "skbio.util.classproperty": [[1038, 2, 1, "", "__delete__"], [1039, 2, 1, "", "__eq__"], [1040, 2, 1, "", "__ge__"], [1041, 2, 1, "", "__get__"], [1042, 2, 1, "", "__getstate__"], [1043, 2, 1, "", "__gt__"], [1044, 2, 1, "", "__hash__"], [1045, 2, 1, "", "__le__"], [1046, 2, 1, "", "__lt__"], [1047, 2, 1, "", "__ne__"], [1048, 2, 1, "", "__set__"], [1049, 2, 1, "", "__set_name__"], [1050, 2, 1, "", "__str__"], [1051, 2, 1, "", "deleter"], [1052, 2, 1, "", "getter"], [1053, 2, 1, "", "setter"]], "skbio.workflow": [[1057, 1, 1, "", "Workflow"], [1069, 1, 1, "", "method"], [1080, 1, 1, "", "requires"]], "skbio.workflow.Workflow": [[1058, 2, 1, "", "__call__"], [1059, 2, 1, "", "__eq__"], [1060, 2, 1, "", "__ge__"], [1061, 2, 1, "", "__getstate__"], [1062, 2, 1, "", "__gt__"], [1063, 2, 1, "", "__hash__"], [1064, 2, 1, "", "__le__"], [1065, 2, 1, "", "__lt__"], [1066, 2, 1, "", "__ne__"], [1067, 2, 1, "", "__str__"], [1068, 2, 1, "", "initialize_state"]], "skbio.workflow.method": [[1070, 2, 1, "", "__call__"], [1071, 2, 1, "", "__eq__"], [1072, 2, 1, "", "__ge__"], [1073, 2, 1, "", "__getstate__"], [1074, 2, 1, "", "__gt__"], [1075, 2, 1, "", "__hash__"], [1076, 2, 1, "", "__le__"], [1077, 2, 1, "", "__lt__"], [1078, 2, 1, "", "__ne__"], [1079, 2, 1, "", "__str__"]], "skbio.workflow.requires": [[1081, 2, 1, "", "__call__"], [1082, 2, 1, "", "__eq__"], [1083, 2, 1, "", "__ge__"], [1084, 2, 1, "", "__getstate__"], [1085, 2, 1, "", "__gt__"], [1086, 2, 1, "", "__hash__"], [1087, 2, 1, "", "__le__"], [1088, 2, 1, "", "__lt__"], [1089, 2, 1, "", "__ne__"], [1090, 2, 1, "", "__str__"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "data", "Python data"], "5": ["py", "exception", "Python exception"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:data", "5": "py:exception"}, "terms": {"": [0, 1, 3, 44, 53, 65, 82, 83, 84, 85, 89, 90, 91, 92, 94, 98, 99, 100, 103, 107, 109, 112, 114, 115, 116, 117, 119, 120, 121, 122, 125, 127, 128, 129, 133, 134, 136, 137, 138, 139, 141, 142, 143, 145, 146, 148, 149, 150, 217, 218, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 293, 294, 295, 305, 317, 340, 341, 358, 359, 360, 372, 373, 377, 379, 381, 384, 386, 389, 391, 393, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 432, 434, 435, 436, 438, 439, 445, 448, 449, 450, 452, 455, 457, 460, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 501, 503, 506, 508, 511, 513, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 554, 556, 559, 561, 564, 566, 568, 569, 570, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 606, 608, 610, 611, 613, 615, 618, 620, 623, 625, 627, 628, 629, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 655, 662, 663, 665, 677, 680, 683, 684, 685, 688, 689, 691, 692, 696, 700, 702, 704, 708, 715, 717, 725, 731, 738, 741, 751, 753, 754, 755, 756, 757, 784, 817, 828, 851, 863, 866, 867, 868, 872, 874, 876, 877, 879, 880, 881, 899, 907, 915, 920, 935, 938, 973, 981, 993, 1009, 1030, 1080, 1092, 1094, 1097, 1099], "0": [0, 1, 3, 13, 14, 15, 17, 18, 19, 32, 33, 34, 44, 45, 46, 47, 50, 51, 52, 53, 65, 77, 82, 83, 85, 88, 91, 92, 94, 104, 105, 107, 112, 116, 117, 118, 120, 122, 123, 131, 133, 134, 136, 145, 146, 151, 163, 176, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 274, 317, 379, 380, 384, 386, 396, 397, 398, 400, 402, 403, 404, 406, 408, 409, 415, 421, 423, 425, 427, 430, 432, 433, 434, 435, 436, 438, 448, 449, 450, 451, 455, 457, 467, 468, 470, 472, 473, 474, 476, 483, 488, 490, 492, 494, 498, 499, 501, 502, 506, 508, 518, 519, 521, 523, 524, 525, 527, 534, 540, 542, 544, 546, 551, 552, 554, 555, 559, 561, 571, 572, 573, 575, 577, 578, 579, 581, 583, 584, 590, 596, 598, 600, 602, 605, 606, 608, 609, 610, 611, 613, 614, 618, 620, 630, 631, 632, 634, 641, 643, 645, 649, 651, 662, 663, 666, 671, 674, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 715, 720, 723, 725, 738, 745, 748, 749, 751, 753, 754, 755, 757, 758, 759, 761, 762, 796, 851, 852, 863, 867, 871, 872, 875, 877, 878, 880, 881, 882, 883, 886, 896, 897, 898, 899, 900, 902, 906, 907, 910, 913, 914, 915, 916, 917, 919, 920, 924, 925, 930, 931, 932, 933, 935, 937, 938, 939, 940, 942, 943, 945, 946, 948, 950, 952, 953, 966, 971, 974, 975, 976, 977, 980, 981, 982, 985, 991, 1003, 1009, 1013, 1014, 1015, 1020, 1022, 1025, 1026, 1030, 1031, 1036, 1069, 1092, 1094, 1097, 1099], "00": [1, 217, 218, 222, 225, 228, 397, 434, 467, 518, 572, 606, 630, 1031, 1094], "000": 148, "000000": [1, 1031], "000000e": [217, 218], "000123": 231, "000133446": 976, "000532": 852, "001": [685, 877], "001562": 852, "00193863362662502": 880, "003": 881, "0031": 762, "005": 881, "007022633956606": 762, "007446": 690, "0082138": [53, 104], "01": [228, 877], "0118478282382": 762, "0123": 231, "0123456789": 295, "012631": 852, "015": [696, 702], "016": 877, "02": [228, 233, 685], "020131": 690, "0220": [696, 702], "0225": 762, "029747": 852, "03": [228, 757], "0301": 762, "032": 877, "0341": 762, "036910": 690, "0378111988903307": 219, "03t14": 910, "04": [228, 877], "043888": 690, "044": 877, "044805": 852, "048219": 690, "05": [1, 228, 685, 690, 761, 877, 878, 880, 881, 1034], "051": 877, "056": 881, "06": [228, 910], "0625": 694, "0633": 762, "065613": 690, "068310": 690, "07": 228, "0721": 762, "074": 881, "08": [228, 231, 877, 880], "083071": 232, "0874": 762, "088": 880, "0898": 762, "09": 228, "09392265": 1, "09861229": 683, "0i": 685, "0th": [926, 1036], "1": [0, 1, 3, 13, 14, 15, 17, 18, 19, 20, 33, 34, 44, 46, 47, 50, 51, 52, 53, 65, 70, 82, 83, 84, 85, 88, 91, 92, 94, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 148, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 245, 246, 295, 305, 317, 320, 322, 379, 384, 386, 396, 397, 398, 404, 406, 419, 420, 421, 425, 430, 431, 432, 435, 436, 438, 439, 446, 447, 448, 449, 450, 455, 457, 467, 468, 474, 476, 486, 487, 488, 492, 497, 498, 501, 506, 508, 518, 519, 525, 527, 538, 539, 540, 544, 550, 551, 554, 559, 561, 571, 572, 573, 579, 581, 594, 595, 596, 600, 605, 607, 608, 610, 611, 613, 618, 620, 630, 631, 634, 639, 640, 641, 645, 649, 651, 662, 663, 666, 669, 671, 673, 674, 677, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 715, 720, 722, 723, 725, 727, 738, 739, 745, 747, 748, 749, 751, 753, 754, 755, 756, 757, 758, 759, 761, 796, 818, 840, 851, 852, 863, 866, 867, 871, 874, 875, 877, 879, 880, 881, 882, 883, 896, 897, 898, 899, 900, 903, 906, 907, 909, 910, 913, 914, 915, 916, 917, 919, 920, 924, 925, 927, 930, 931, 932, 933, 935, 937, 938, 939, 940, 942, 943, 945, 946, 948, 950, 966, 971, 974, 976, 981, 982, 985, 989, 990, 991, 1003, 1013, 1014, 1015, 1020, 1022, 1023, 1025, 1026, 1030, 1031, 1036, 1094, 1097, 1099], "10": [53, 84, 104, 107, 123, 124, 136, 163, 176, 218, 221, 222, 223, 224, 225, 227, 228, 229, 295, 305, 320, 379, 404, 450, 474, 501, 525, 554, 579, 613, 685, 690, 696, 702, 757, 852, 877, 880, 881, 886, 896, 899, 900, 904, 920, 924, 1031, 1099], "100": [1, 217, 218, 222, 225, 320, 685, 690, 881, 915, 939, 1099], "1000": [320, 851], "1004": 762, "1004075": [696, 702], "100548": 852, "1007": [221, 696, 702], "101": 690, "10136628": 688, "102": 690, "1024": 220, "103": 690, "104": [232, 690], "1048576": 1056, "104937": 852, "1055": 762, "10596": 218, "108": 877, "10915": [100, 103, 663], "10919": [100, 103, 663], "1093": [223, 1031], "10937312": 1, "11": [0, 45, 53, 100, 103, 104, 110, 115, 116, 217, 221, 228, 230, 379, 405, 475, 526, 554, 580, 633, 685, 690, 696, 702, 762, 852, 867, 874, 877, 896, 899, 900, 920, 1031], "110": 690, "1115": 126, "112": 933, "1126": 126, "113": 136, "1131255": 1056, "114": 217, "1154": 762, "116": 762, "1167": 867, "117": 753, "11704769": 691, "117693430600200007": 116, "1179": 867, "11th": 229, "12": [1, 221, 228, 613, 685, 690, 696, 877, 899, 900, 933, 1094], "120": [225, 690], "120492524415": 1097, "1215": 762, "123": [231, 851], "12345": [222, 613], "126": 223, "127": 880, "128": 690, "13": [0, 111, 134, 139, 218, 222, 228, 230, 379, 450, 501, 554, 613, 685, 690, 852, 899, 900, 943], "131": [134, 139, 974], "131567": 233, "1345": 108, "1347": 108, "135": [218, 696, 702], "1371": [53, 104, 696, 702], "139": 232, "14": [1, 111, 122, 133, 221, 223, 228, 400, 404, 470, 474, 521, 525, 575, 579, 685, 690, 762, 881, 900, 982, 1020], "14092516": 692, "141": [133, 974], "142857": 758, "14285714": 698, "142857142857": 930, "143": 753, "1435": 222, "144": 139, "1457": 761, "1468": 761, "147": 101, "1495": 221, "149855": 222, "1499": 221, "15": [53, 100, 103, 122, 218, 228, 231, 762, 877, 880, 881, 900, 1020], "1535": 971, "1542": [218, 971], "156": 118, "1566": 218, "157": 877, "1576": [145, 146], "15800534": 217, "1585": [145, 146], "16": [1, 114, 133, 219, 222, 223, 224, 228, 229, 396, 405, 430, 475, 526, 571, 580, 605, 633, 690, 863, 877, 881, 896, 900, 991, 1020], "16025641": 1, "161": 217, "16247744": 686, "1627907": 1, "163": [112, 121, 137, 139], "164998": 690, "165": 133, "168": [108, 880], "169": [145, 146], "17": [114, 116, 145, 146, 221, 228, 379, 554, 852, 880, 900], "170768970": 217, "172": [145, 146], "1740": 221, "17445763": 686, "1767": 223, "1771": 223, "1786181": 218, "18": [218, 228, 232, 753, 877, 1094], "1800": 221, "1814": 104, "182343": 690, "1859": 221, "1875": 694, "18761279": 686, "19": [1, 221, 228, 877, 899], "1907511": 221, "1912": 118, "1913": 105, "192": 232, "19234468": 224, "193": 107, "194": 133, "1943": 117, "1948": 136, "1949": [112, 121, 137, 139], "195": 101, "1953": [106, 119], "1955": 118, "1956": 109, "1958": 125, "1966": [134, 139], "1967": [126, 755], "1968": 135, "1970": [98, 108], "1971": [114, 137], "1974": [120, 127], "1976": 122, "1978": 663, "1981": [101, 974, 1030], "1983": 115, "1984": [110, 379, 450, 501, 554, 613], "1985": [222, 379, 450, 501, 554, 613], "1986": [222, 227, 229, 867], "1987": [129, 1031], "199": 224, "1990": [217, 218, 221], "1991": 221, "1992": [100, 103, 107, 116, 133, 663, 703], "1993": [107, 753, 754], "1995": 867, "1997": [116, 232, 1031], "1998": [122, 852, 866, 867, 869, 870, 872, 874], "1d": [88, 136, 143, 163, 176, 189, 200, 379, 381, 386, 398, 399, 401, 402, 404, 405, 407, 417, 418, 419, 423, 424, 425, 426, 427, 429, 432, 452, 457, 468, 469, 471, 472, 474, 475, 477, 485, 486, 490, 491, 492, 493, 494, 496, 498, 501, 503, 508, 519, 520, 522, 523, 525, 526, 528, 537, 538, 542, 543, 544, 545, 546, 548, 549, 551, 554, 556, 561, 573, 574, 576, 577, 579, 580, 582, 592, 593, 594, 598, 599, 600, 601, 602, 604, 608, 613, 615, 620, 631, 632, 633, 638, 639, 643, 644, 645, 646, 648, 649], "1e": [218, 227, 1034], "1e51ca3a5450c43524b9185c236cc5cc": 221, "1e9": 231, "1st": [77, 829, 1036], "1x1": 229, "2": [0, 1, 3, 13, 14, 15, 18, 19, 45, 46, 47, 50, 51, 52, 53, 65, 70, 77, 82, 83, 84, 86, 88, 91, 92, 94, 98, 99, 100, 101, 102, 103, 106, 107, 110, 112, 114, 116, 118, 121, 122, 123, 124, 126, 127, 129, 133, 136, 137, 139, 145, 146, 147, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 246, 305, 317, 320, 322, 360, 379, 396, 397, 398, 404, 405, 406, 409, 417, 419, 421, 430, 432, 436, 439, 448, 449, 467, 468, 474, 475, 476, 485, 486, 488, 498, 518, 519, 525, 526, 527, 537, 538, 540, 551, 571, 572, 573, 579, 580, 581, 584, 592, 594, 596, 605, 608, 611, 613, 630, 631, 633, 634, 638, 639, 641, 649, 651, 662, 663, 669, 671, 674, 677, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 715, 720, 723, 725, 727, 738, 745, 748, 749, 751, 753, 754, 755, 756, 757, 758, 759, 761, 762, 851, 852, 863, 866, 867, 869, 872, 874, 877, 879, 880, 881, 882, 883, 896, 897, 898, 899, 900, 903, 904, 907, 909, 910, 915, 922, 923, 924, 927, 930, 933, 939, 941, 942, 943, 946, 948, 950, 966, 971, 972, 974, 976, 981, 982, 987, 989, 990, 991, 1014, 1015, 1020, 1022, 1023, 1025, 1026, 1030, 1031, 1036, 1092, 1094, 1097, 1099], "20": [0, 3, 228, 501, 685, 690, 863, 869, 877, 880, 881, 915], "200": [224, 690], "2000": [107, 881, 1031], "2001": 756, "2002": [84, 116, 133, 142, 218, 222], "2003": [222, 682], "2004": 128, "2005": [145, 221], "2006": [116, 136, 757, 1031], "2007": [133, 145, 146], "2008": [222, 229], "2009": [223, 224, 761], "201": [107, 690], "2010": [116, 145, 146, 223], "2011": [123, 124, 133, 145, 146], "2012": [133, 224, 233, 755, 883, 950], "2013": [53, 104, 114, 133, 700, 863], "2014": [53, 104, 217, 229, 690, 700, 910], "2015": [84, 682, 685, 696, 702], "2016": [133, 696, 702], "2017": 971, "2018": 233, "202": 690, "2020": 233, "2022": 233, "2024": 231, "203": 690, "20309816": 762, "205": 754, "207": 133, "209": [221, 224, 755], "21": [221, 228, 685, 696, 702, 870, 881, 899, 915, 946], "210": 107, "2106": 133, "2107852473": 693, "2113": 133, "2130": 218, "21383822": 689, "215": [217, 218], "217": 107, "21712454": 863, "2186": 762, "219": [218, 221, 754], "22": [100, 103, 228, 233, 663, 685, 877, 915, 1094], "220": 755, "22054469": 692, "2208": 762, "2214": 218, "224": 877, "226": 881, "227": [107, 222], "229": 877, "23": [1, 228, 231, 232, 447, 685, 899, 915, 1031, 1094], "23059566": 699, "23632778": 689, "2364": 762, "237": [106, 119, 142], "238327": 852, "239": 1030, "23e": 231, "24": [0, 218, 228, 663, 880, 910, 915], "24270353": 1, "245": 757, "246": [107, 142, 232], "24714631": 699, "25": [0, 1, 88, 101, 116, 122, 133, 145, 146, 148, 221, 227, 228, 402, 406, 408, 421, 425, 434, 438, 472, 476, 488, 492, 523, 527, 540, 544, 577, 581, 583, 596, 600, 606, 632, 634, 641, 645, 685, 697, 753, 754, 757, 762, 877, 880, 881, 930, 1094], "2500": 881, "253": 757, "255": [53, 867], "256": [135, 877], "257": 135, "25737316": 699, "259": 232, "25th": 685, "26": [114, 218, 227, 685, 756, 761, 863], "260656459": 224, "26118259": 689, "262": 122, "264": [106, 119], "26433692": 1, "26488486": 699, "265": 110, "27": [0, 116, 136, 145, 146, 218, 501, 696, 755], "270": 110, "272": 881, "2761": 762, "278": 116, "28": [0, 133, 228, 877], "28571429": 698, "28865141": 689, "289": 867, "28ecologi": 106, "29": [106, 221, 223, 224], "293463": 690, "29597001": 762, "29672718": 692, "2_": 107, "2a": 229, "2b": 118, "2d": [53, 98, 99, 100, 101, 102, 103, 121, 143, 147, 148, 151, 176, 200, 651, 666, 675, 693, 759, 868, 875], "2e": 231, "2f_2": 110, "2m5p3d1i": [45, 50], "2nd": [829, 919, 1036], "2nf_2": 115, "2x2": [1, 226, 924, 930], "2x3": [906, 907, 913, 914, 916, 917, 919, 925, 931, 932, 935, 937, 938, 940, 945, 946, 948], "3": [1, 3, 13, 14, 15, 18, 19, 46, 47, 50, 51, 52, 53, 65, 70, 82, 83, 85, 88, 91, 92, 94, 95, 98, 102, 106, 107, 115, 116, 119, 125, 133, 136, 142, 145, 146, 163, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 295, 305, 317, 322, 384, 386, 396, 397, 398, 403, 404, 420, 421, 423, 429, 430, 432, 435, 436, 448, 449, 455, 457, 467, 468, 473, 474, 487, 488, 490, 496, 498, 501, 506, 508, 518, 519, 524, 525, 539, 540, 542, 548, 551, 559, 561, 571, 572, 573, 578, 579, 595, 596, 598, 604, 605, 608, 610, 611, 613, 618, 620, 630, 631, 640, 641, 643, 648, 649, 662, 671, 674, 677, 681, 682, 683, 684, 686, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 702, 704, 715, 720, 723, 725, 738, 745, 748, 749, 751, 753, 754, 755, 757, 758, 759, 761, 762, 763, 785, 796, 829, 852, 853, 863, 866, 867, 872, 877, 879, 880, 881, 882, 896, 897, 898, 899, 900, 902, 903, 906, 907, 910, 913, 914, 915, 916, 917, 919, 920, 922, 924, 925, 927, 930, 931, 932, 933, 935, 937, 938, 939, 940, 941, 942, 943, 945, 946, 948, 950, 966, 976, 981, 982, 989, 990, 991, 1014, 1018, 1020, 1022, 1023, 1025, 1026, 1031, 1036, 1091, 1094, 1097, 1099], "30": [0, 218, 224, 225, 228, 230, 880, 881, 920, 1004], "3021": [379, 450, 501, 554, 613], "30216948": 686, "3030": [379, 450, 501, 554, 613], "30409883": 688, "30870431": 1, "30927835": 1, "31": 218, "312": 232, "314": 221, "32": [228, 756], "32495488": 686, "32630": 224, "329": 217, "33": [83, 116, 145, 146, 223, 403, 473, 524, 578, 690, 754, 757, 877, 880, 1094], "330": 217, "332": 877, "33333333333333331": 1, "335928": 233, "34": [224, 230, 971], "34180297": 692, "343": 224, "344": 224, "3447015": 1031, "345": 663, "34891526": 686, "34989": 222, "35": [1, 221, 223, 224, 230, 682, 881], "3519": 762, "352": 663, "354": 762, "355": [221, 762], "356": 762, "36": [125, 228, 231, 696, 702, 877], "363": 136, "36463": 232, "36514837": 700, "37": [145, 232], "3716": 762, "375": [136, 694], "379": 136, "379593": 1056, "38": [0, 217, 223, 228, 877], "38629436": 683, "3899": 221, "39": [135, 222, 228, 700], "3937": 108, "3e": [217, 218, 877], "3f": 761, "3k1v_a": 224, "3rd": [755, 829, 873, 1036, 1099], "3x": 1004, "3x2": 924, "3x3": [703, 755, 758, 759], "4": [0, 1, 3, 14, 18, 46, 51, 65, 82, 85, 86, 90, 92, 105, 106, 107, 114, 116, 119, 133, 137, 145, 146, 221, 222, 224, 227, 228, 229, 231, 232, 233, 295, 305, 317, 322, 379, 386, 391, 396, 397, 406, 416, 420, 430, 432, 435, 436, 438, 449, 457, 462, 467, 476, 484, 487, 498, 508, 513, 518, 527, 535, 539, 551, 561, 566, 571, 572, 581, 591, 595, 605, 608, 610, 611, 613, 620, 625, 630, 634, 637, 640, 649, 651, 662, 663, 671, 677, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 698, 699, 700, 702, 715, 720, 725, 738, 745, 749, 751, 753, 755, 761, 852, 866, 867, 874, 877, 882, 896, 897, 898, 900, 903, 904, 910, 914, 915, 924, 933, 937, 938, 942, 943, 966, 976, 981, 982, 989, 990, 991, 1020, 1022, 1023, 1025, 1026, 1030, 1031, 1094, 1097], "40": [1, 106, 119, 222, 231, 233, 700, 879, 881, 910, 915], "400": 754, "402": 116, "403": [217, 218], "40824829": [700, 701], "41": [222, 228, 915], "410": [217, 218], "4140": 762, "4148": [112, 121, 137, 139], "42": [1, 92, 117, 222, 228, 229, 231, 379, 402, 472, 523, 554, 577, 632, 754, 757, 906, 907, 913, 914, 915, 916, 917, 919, 925, 931, 932, 933, 935, 940, 945, 946, 948], "423": 136, "42512039": 1, "426": 881, "42857143": 698, "43": [92, 129, 228, 915, 935, 940, 1030], "431": 133, "4375": 694, "44": [1, 134, 757, 915, 1030], "443": 98, "444": 133, "45": [1, 228, 231, 881], "450": 754, "456": 866, "45995501": 863, "46": [228, 756, 881, 919, 935, 940], "4603377592": 225, "4603378712": 225, "4604421736": 225, "462339": 690, "466911": 852, "467481": 690, "46774194": 1, "4693": 222, "47": [228, 877, 940], "48": [98, 126], "480232": 690, "484": 877, "49": [0, 225, 228], "4hh": 221, "4x4": [753, 754, 1020], "5": [0, 1, 3, 14, 15, 18, 19, 46, 47, 50, 51, 52, 53, 83, 92, 99, 102, 104, 106, 111, 116, 118, 133, 145, 146, 148, 151, 216, 218, 221, 222, 223, 224, 227, 229, 232, 233, 295, 384, 386, 396, 397, 398, 404, 406, 408, 409, 415, 421, 427, 430, 432, 448, 455, 457, 467, 468, 474, 476, 483, 488, 494, 498, 506, 508, 518, 519, 525, 527, 534, 540, 546, 551, 559, 561, 571, 572, 573, 579, 581, 583, 584, 590, 596, 602, 605, 608, 618, 620, 630, 631, 634, 641, 649, 662, 663, 677, 680, 685, 690, 694, 697, 703, 715, 725, 738, 749, 751, 753, 754, 757, 758, 761, 852, 867, 877, 880, 881, 882, 886, 896, 897, 898, 899, 900, 910, 915, 923, 924, 933, 942, 946, 950, 966, 971, 975, 976, 978, 981, 982, 989, 990, 991, 1013, 1014, 1015, 1020, 1022, 1023, 1030, 1031, 1034, 1097], "50": [1, 100, 103, 222, 225, 228, 397, 467, 518, 572, 630, 685, 690, 762, 863, 880, 881, 907, 1094], "500": [880, 881], "5007512": 863, "50th": [222, 685], "52": [114, 137, 228], "52199973": 762, "528": 880, "528243": 690, "53": [98, 228, 974], "530": 754, "533": 877, "533729": 690, "5338": 116, "54": [120, 146], "54772256": 700, "55": [228, 400, 470, 521, 575, 757, 762, 877, 1031], "55152525": 232, "555": 120, "556061": 690, "5565": 218, "557": 120, "5587": 218, "56": [133, 400, 470, 521, 575], "560": 127, "5671": 218, "57": [218, 228, 867, 920], "572": 877, "577": [114, 137], "58": [117, 228, 877], "581": 221, "586": [114, 137], "59": 223, "5917809": 688, "594590": 690, "5990": 232, "5996": 232, "5e": 231, "6": [1, 3, 13, 14, 15, 18, 19, 46, 47, 51, 52, 85, 106, 110, 111, 116, 131, 133, 135, 136, 145, 146, 218, 221, 222, 223, 224, 231, 232, 233, 396, 397, 405, 406, 429, 430, 432, 450, 467, 475, 476, 496, 498, 518, 526, 527, 548, 551, 571, 572, 580, 581, 604, 605, 608, 630, 633, 634, 648, 649, 677, 685, 687, 692, 695, 696, 698, 725, 749, 751, 755, 757, 758, 761, 852, 877, 896, 899, 900, 910, 915, 924, 930, 933, 966, 971, 981, 982, 990, 991, 1020, 1022, 1023, 1030, 1094], "60": [219, 220, 221, 225, 762, 880, 915], "601": 877, "601277": 690, "6018555": 755, "602": 877, "607": 762, "609": 221, "61": [228, 757, 881, 915], "617": 877, "619": 232, "62": [116, 145, 146, 219, 220, 223, 757, 915, 1094], "6212": 232, "6216": 762, "6234": 232, "627677": 690, "63": [218, 228, 915], "634": 762, "64": [1, 148, 223, 231, 438, 439, 915, 1026], "641": 232, "646": 881, "646e": 877, "65": 762, "65463348": 863, "66": [224, 228, 403, 473, 524, 578, 757, 1094], "664": 877, "6666666666666667": 1097, "67": [224, 228, 396, 403, 430, 473, 524, 571, 578, 605, 753, 757, 867, 877, 1094], "68": [224, 762, 880], "6821": 218, "68235294": 1, "68339802": 691, "688": [112, 121, 137, 139], "69": 228, "6913": 762, "692": 116, "6928": 218, "69314718": 683, "694": 116, "6e": 218, "6x6": [1, 757], "7": [1, 101, 111, 133, 148, 222, 223, 224, 232, 233, 295, 305, 317, 322, 379, 386, 397, 448, 457, 467, 508, 518, 554, 561, 572, 620, 630, 677, 690, 725, 751, 754, 755, 757, 758, 761, 852, 877, 883, 896, 899, 900, 933, 950, 976, 990, 1014, 1022, 1023, 1031, 1035, 1094], "70": 228, "702656": 690, "70710678": [700, 701], "707221": 690, "71": [125, 145, 228, 232], "714286": 754, "71597633": 1, "72": 133, "73": [145, 146], "74": 228, "75": [1, 88, 116, 122, 145, 146, 423, 490, 542, 598, 643, 685, 703, 754, 757, 930, 933, 1026], "750792": 690, "7559": 755, "755929": 758, "75th": 685, "76": [128, 133, 228], "77": [128, 757], "7715": 762, "771517": 754, "77549923": 1, "7768362": 691, "779": 877, "78": [228, 1026], "78142077": 1, "783": 877, "78787879": 1, "788": 877, "79": [222, 225, 228], "793": 129, "79451346": 688, "8": [0, 1, 13, 104, 217, 218, 223, 224, 229, 232, 233, 246, 322, 397, 406, 429, 434, 450, 467, 476, 496, 518, 527, 548, 572, 581, 604, 606, 630, 634, 648, 677, 696, 702, 725, 751, 754, 761, 852, 877, 881, 882, 896, 899, 900, 904, 933, 981, 990, 1023, 1031, 1094, 1097], "80": [107, 222, 852, 880, 881, 915, 971, 1026, 1099], "803": 129, "80332382": 863, "806": 881, "81": 915, "810": 754, "811": 218, "81521739": 1, "81649658": [700, 701], "818": 122, "82": [218, 219, 232, 915], "820": 122, "8228": 145, "8235": 145, "824": 881, "82857143": 1, "82967033": 1, "83": [216, 915, 950], "8304": 762, "832": 761, "836": 877, "838": 877, "84": 915, "844": 877, "8468": 218, "848": 877, "85": [221, 228, 881, 1026], "8547619": 1, "8552": 218, "857142857143": 930, "85714286": 1, "86": [379, 554], "86111111": 1, "86666667": 1, "86813187": 1, "87": [107, 228], "87709497": 1, "87777778": 1, "88": [232, 757, 880], "884420": 910, "884498": 690, "89": [100, 103, 224, 663], "89285714": 1, "8e": 218, "9": [1, 217, 218, 219, 222, 225, 228, 231, 232, 274, 295, 305, 379, 400, 404, 450, 470, 474, 501, 521, 525, 554, 575, 579, 613, 685, 690, 761, 762, 852, 866, 867, 869, 870, 872, 873, 874, 877, 896, 899, 900, 978, 981, 990, 1020, 1023, 1030, 1031, 1094], "90": [84, 225, 690, 1099], "900": 320, "905": 115, "909": 218, "912": 115, "91769271": 863, "92": 754, "9223489": 232, "922404392093": 1, "9230769230": 681, "928": 877, "93": 223, "932": 877, "939336": 1, "94": [218, 228], "95": [111, 115, 116, 123, 223, 228, 971], "952": 881, "95224719": 1, "956": 877, "96": [111, 225], "97": [228, 690], "978387": 690, "984": 877, "98435423": 1, "98796148": 1, "99": [217, 218, 221, 228, 753, 757, 761, 933], "991987": 690, "996": [877, 881], "999": [1, 613, 753, 755, 756, 757, 758, 761], "999887756453524252": 232, "9e": 217, "9f": 976, "A": [1, 50, 53, 65, 86, 88, 91, 92, 93, 96, 98, 100, 103, 107, 110, 115, 116, 117, 118, 120, 122, 128, 133, 136, 145, 146, 148, 174, 187, 212, 213, 214, 215, 217, 219, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 259, 263, 264, 269, 276, 277, 295, 316, 320, 321, 342, 360, 375, 379, 400, 406, 412, 428, 432, 439, 445, 450, 470, 476, 480, 495, 498, 501, 521, 527, 531, 547, 551, 554, 575, 581, 587, 603, 608, 613, 634, 647, 649, 651, 662, 663, 667, 669, 671, 672, 676, 677, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 715, 718, 720, 721, 724, 725, 727, 738, 742, 745, 746, 750, 751, 754, 755, 756, 757, 759, 761, 774, 796, 818, 862, 863, 864, 866, 867, 872, 874, 879, 880, 881, 882, 886, 897, 898, 899, 903, 908, 909, 910, 911, 919, 926, 932, 934, 935, 936, 937, 938, 939, 942, 943, 944, 946, 951, 952, 953, 966, 971, 974, 976, 977, 980, 981, 982, 983, 986, 987, 988, 991, 993, 1000, 1008, 1010, 1012, 1013, 1018, 1020, 1027, 1028, 1030, 1080, 1092, 1097, 1099], "AS": 232, "AT": [83, 222, 223, 229], "And": [225, 379, 501, 697, 1094], "As": [1, 221, 224, 227, 231, 613, 673, 722, 747, 755, 757, 867, 984, 1092, 1099], "At": [231, 234, 899], "Be": 613, "By": [92, 122, 133, 143, 147, 222, 224, 231, 685, 757, 871, 872, 875, 909, 921, 1020, 1031, 1058], "For": [1, 65, 84, 93, 97, 104, 133, 174, 175, 187, 188, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 305, 320, 321, 322, 323, 360, 375, 378, 379, 428, 437, 495, 500, 501, 547, 553, 554, 603, 612, 613, 647, 650, 663, 672, 678, 685, 690, 721, 726, 746, 752, 753, 754, 755, 756, 757, 759, 761, 763, 829, 863, 864, 865, 866, 867, 877, 879, 880, 881, 883, 899, 904, 905, 926, 934, 939, 949, 950, 971, 1008, 1029, 1030, 1032, 1033, 1092, 1094, 1097], "IF": 926, "IN": 232, "If": [1, 13, 15, 19, 45, 47, 50, 52, 53, 65, 82, 84, 85, 88, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 104, 107, 110, 111, 112, 114, 116, 117, 118, 121, 123, 129, 133, 136, 137, 138, 143, 145, 146, 147, 148, 151, 163, 174, 187, 211, 212, 213, 214, 217, 220, 222, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 245, 246, 247, 260, 262, 266, 267, 270, 271, 274, 287, 288, 289, 295, 304, 308, 321, 322, 334, 335, 336, 352, 353, 354, 360, 369, 370, 373, 374, 375, 379, 381, 386, 396, 397, 398, 400, 402, 404, 406, 409, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 430, 432, 433, 448, 450, 452, 457, 467, 468, 470, 472, 474, 476, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 498, 499, 501, 503, 508, 518, 519, 521, 523, 525, 527, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 551, 552, 554, 556, 561, 571, 572, 573, 575, 577, 579, 581, 584, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 605, 608, 609, 610, 611, 613, 615, 620, 630, 631, 632, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 655, 662, 663, 665, 666, 667, 670, 671, 672, 677, 680, 681, 685, 687, 690, 691, 692, 694, 695, 701, 704, 708, 715, 717, 718, 719, 720, 721, 725, 731, 738, 741, 742, 743, 744, 745, 746, 751, 753, 754, 755, 756, 757, 758, 759, 761, 796, 807, 840, 851, 862, 863, 864, 866, 867, 868, 871, 872, 875, 877, 878, 879, 880, 881, 882, 886, 894, 896, 899, 900, 902, 903, 904, 907, 908, 909, 910, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 932, 933, 934, 935, 936, 939, 940, 941, 942, 943, 944, 945, 946, 948, 971, 973, 974, 978, 981, 984, 985, 989, 994, 997, 999, 1002, 1008, 1013, 1014, 1015, 1020, 1022, 1023, 1024, 1030, 1031, 1034, 1035, 1036, 1037], "In": [1, 3, 53, 84, 116, 133, 145, 146, 148, 222, 223, 224, 225, 227, 229, 233, 360, 379, 409, 448, 501, 554, 584, 651, 682, 685, 690, 703, 754, 755, 761, 851, 866, 867, 872, 877, 881, 896, 951, 971, 984, 1030, 1092, 1094, 1097, 1099], "It": [1, 3, 53, 105, 106, 112, 116, 117, 119, 121, 122, 129, 133, 136, 137, 141, 216, 217, 219, 222, 223, 224, 225, 227, 229, 231, 233, 246, 295, 305, 308, 316, 317, 319, 320, 322, 379, 415, 427, 483, 494, 501, 534, 546, 554, 590, 602, 606, 685, 688, 690, 694, 703, 744, 755, 756, 761, 784, 785, 817, 828, 840, 866, 867, 871, 874, 877, 880, 881, 907, 946, 951, 952, 953, 977, 980, 1034, 1056, 1080, 1094], "Its": [16, 48, 874], "NOT": [53, 274], "No": [66, 111, 217, 218, 221, 230, 233, 305, 395, 466, 517, 570, 629, 755], "Not": [223, 379, 432, 498, 551, 608, 649, 757], "ONE": [53, 104], "OR": 66, "Of": 224, "On": 872, "One": [116, 229, 234, 374, 690, 739, 1031], "That": [134, 139, 227, 422, 489, 541, 597, 642], "The": [0, 1, 3, 13, 14, 15, 16, 44, 45, 46, 47, 48, 50, 53, 54, 82, 83, 84, 85, 86, 89, 90, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 117, 118, 119, 121, 122, 129, 133, 134, 135, 136, 137, 139, 142, 143, 145, 146, 147, 148, 149, 150, 151, 163, 174, 175, 176, 187, 188, 189, 200, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 245, 246, 247, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 287, 292, 293, 294, 295, 296, 305, 306, 307, 316, 317, 318, 319, 320, 321, 323, 324, 334, 339, 340, 341, 352, 357, 358, 359, 360, 369, 370, 372, 373, 374, 375, 376, 377, 378, 381, 384, 386, 391, 396, 397, 398, 400, 402, 406, 414, 416, 417, 419, 420, 421, 428, 430, 432, 436, 437, 438, 447, 448, 449, 452, 455, 457, 462, 467, 468, 470, 472, 476, 482, 484, 485, 486, 487, 488, 495, 498, 500, 503, 506, 508, 513, 518, 519, 521, 523, 527, 533, 535, 537, 538, 539, 540, 547, 551, 553, 554, 556, 559, 561, 566, 571, 572, 573, 575, 577, 581, 589, 591, 592, 594, 595, 596, 603, 605, 608, 611, 612, 613, 615, 618, 620, 625, 630, 631, 632, 634, 636, 637, 638, 639, 640, 641, 647, 649, 650, 651, 655, 662, 667, 672, 677, 678, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 694, 695, 697, 699, 700, 701, 704, 708, 715, 718, 721, 725, 726, 727, 731, 738, 739, 742, 744, 746, 749, 751, 752, 753, 754, 755, 756, 757, 759, 761, 762, 774, 796, 807, 818, 840, 851, 853, 864, 865, 866, 867, 871, 872, 873, 874, 877, 878, 879, 880, 881, 883, 886, 894, 895, 896, 897, 898, 899, 900, 903, 906, 908, 909, 911, 912, 913, 914, 915, 916, 919, 921, 922, 923, 924, 925, 926, 927, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 943, 945, 946, 947, 949, 950, 966, 967, 972, 973, 974, 975, 976, 978, 979, 981, 982, 984, 985, 987, 988, 989, 990, 991, 993, 997, 999, 1000, 1003, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1020, 1022, 1029, 1030, 1031, 1034, 1037, 1055, 1057, 1058, 1092, 1094, 1097, 1099], "Then": [1, 3, 685, 697, 762, 852], "There": [1, 92, 117, 129, 218, 224, 227, 230, 403, 473, 524, 578, 727, 872, 880, 881, 899, 924, 1092, 1097, 1099], "These": [0, 1, 83, 89, 90, 106, 116, 145, 146, 224, 227, 231, 232, 233, 324, 414, 416, 482, 484, 533, 535, 589, 591, 636, 637, 679, 758, 760, 853, 873, 879, 886, 924], "To": [1, 72, 116, 145, 146, 222, 223, 224, 227, 230, 231, 234, 274, 360, 379, 501, 554, 685, 690, 727, 749, 753, 755, 757, 761, 877, 971, 1092, 1099], "Will": [88, 265, 268, 272, 274, 292, 339, 357, 376, 664, 676, 716, 724, 740, 750, 853, 882], "With": [217, 682, 694], "_": [107, 219, 222, 223, 227, 232, 317, 384, 455, 506, 559, 618, 703, 755, 931], "_1": 227, "__": 224, "____________1______________2_________": 232, "________________": 232, "____________________": 232, "__copy__": [69, 307], "__deepcopy__": [68, 306], "__eq__": [79, 284, 314, 331, 349, 367, 660, 713, 736], "__init__": [234, 245, 247], "__iter__": 91, "__locat": 224, "__ne__": [278, 325, 343, 361], "__reversed__": 91, "_block_comput": 148, "_ci": 106, "_except": 229, "_interval_tre": 305, "_io": [216, 220], "_is_stale_tre": 305, "_leaf_index": 993, "_myformat_sniff": 234, "_myformat_to_some_skbio_class": 234, "_not_": [899, 1027], "_rebuild_tre": 305, "_setup_debug_trac": 1068, "_some_skbio_class_to_myformat": 234, "_tree": 1030, "aT": 223, "a_1": 227, "aa": [91, 222, 224, 229, 438], "aaa": [232, 419, 486, 538, 594, 639], "aaaaaaaaa": 221, "aaaaaaaaaa": 221, "aaaaaaattttttt": 1099, "aaaaaactctctaaactcactaaggctctctacccctcttcagagaagtcga": 0, "aaaaaccgat": 221, "aaaataaata": 221, "aaacaaacca": 221, "aaaccattgc": [222, 229], "aaacccttgc": [222, 229], "aaacccttgccg": 222, "aaacccttgccggtacgcttaaaccattgccggtacgcttaa": 222, "aaacccttgccgttacgcttaaaccgaggccgggacactcat": 222, "aaaccgaggc": [222, 229], "aaagataggc": 221, "aaatatggat": 221, "aaatcctatg": 221, "aac": 230, "aacaaatgca": 221, "aacaacagga": 221, "aacaccaaacttctccacc": 223, "aacaccaaacttctccaccacgtgagctacaaaag": 223, "aaccttatca": 221, "aacgaaggcg": 221, "aactttgtag": 221, "aagaactttc": 221, "aagaggttac": 221, "aagcctggtg": 221, "aagccttggc": 222, "aagccttggcagtgcagggtgagccgtgg": 222, "aagccttggcagtgcagggtgagccgtggccgggcacggtat": 222, "aagctngggc": [222, 229], "aagctngggcatttcagggtgagcccgggcaatacagggtat": 222, "aagga": [386, 457, 508, 561, 620], "aaggaatcaa": 221, "aaggaatttg": 221, "aagtaa": [396, 571], "aagtatttgg": 221, "aagtcttaga": 221, "aagtcttttt": 221, "aagttgttag": 221, "aagucuuuuu": 221, "aata": 230, "aataaac": 230, "aataagtgca": 221, "aatacagggt": [222, 229], "aatataccggttataa": [405, 475, 526, 580, 633], "aatatggatt": 221, "aatgaa": [396, 418, 430, 571, 593, 605], "aatgtt": [418, 593], "aatt": 899, "aattaaataa": 221, "aattctggat": 221, "aattg": 1099, "aattgccggac": 1099, "aattgg": 851, "aauauggauu": 221, "ab": [223, 450], "ab07acbb1e496801937adfa772424bf7": 1056, "ababacac": 450, "abbrevi": [233, 853], "abc": [219, 384, 450, 455, 506, 559, 618], "abcd": 1031, "abcdef": 1, "abil": 227, "abl": [65, 85, 148, 379, 501, 554, 613, 685, 880, 981], "about": [1, 93, 97, 129, 174, 175, 187, 188, 219, 222, 223, 227, 231, 232, 234, 277, 305, 321, 323, 324, 342, 360, 375, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 680, 721, 726, 746, 752, 852, 864, 865, 874, 880, 881, 899, 929, 934, 949, 1008, 1029, 1032, 1033, 1093, 1094], "abov": [0, 1, 3, 92, 112, 222, 224, 228, 229, 230, 231, 232, 234, 245, 247, 379, 501, 554, 613, 703, 753, 755, 757, 761, 1094], "absenc": [111, 881, 931], "absent": [432, 498, 551, 608, 649, 872], "absolut": [682, 690, 755, 939, 1055], "abstract": [324, 450], "abund": [1, 106, 107, 108, 116, 118, 122, 129, 133, 142, 143, 145, 146, 147, 148, 151, 216, 685, 690, 852, 866, 867, 873, 874, 881, 933, 939], "abx": 879, "ac": [66, 67, 68, 69, 70, 75, 77, 80, 83, 85, 88, 92, 94, 95, 98, 101, 221, 223, 224, 232, 295, 407, 477, 528, 582, 1094], "aca": [420, 421, 487, 488, 539, 540, 595, 596, 640, 641], "acaatcaaat": 221, "acac": [411, 420, 479, 487, 530, 539, 586, 595, 640], "acacatttatta": [421, 488, 540, 596, 641], "acacgacgtt": [412, 417, 420, 480, 485, 487, 531, 537, 539, 587, 592, 595, 638, 640], "acad": [100, 103], "academ": 109, "academi": 663, "acagaattga": 221, "acaggttggc": [222, 229], "acata": 223, "acatggcaat": 221, "acatgggata": 221, "acc": [0, 218, 1094], "accaatattt": 221, "accaatttga": 221, "acccc": 0, "acceler": 882, "accept": [1, 65, 94, 148, 429, 435, 436, 496, 548, 604, 610, 611, 648, 663, 679, 685, 755, 759, 761, 877, 880, 881, 986, 1015, 1023, 1026, 1080], "acces": 217, "access": [20, 89, 90, 215, 221, 222, 224, 233, 360, 414, 416, 439, 445, 482, 484, 533, 535, 589, 591, 636, 637, 703, 1031, 1037], "accgaat": 379, "accgaau": 554, "accgggta": 1094, "accggttggc": 222, "accggttggccgttcagggtacaggttggccgttcagggtaa": 222, "accgttcg": 232, "accgttgta": [219, 229], "accguuaguc": 1094, "accident": 1032, "accommod": 295, "accompani": [222, 704, 1033], "accomplish": [1, 682, 1092], "accord": [112, 116, 379, 501, 554, 871, 875, 937, 938], "account": [112, 163, 433, 499, 552, 609, 796, 866, 874, 881, 1097], "accumul": [125, 128, 966], "accumulate_to_ancestor": 982, "accur": [112, 118, 123, 124], "accuraci": [757, 872], "acdefghikl": [163, 176], "acdfnasanftacgnpnrtesl": [419, 486, 538, 594, 639], "acg": [66, 67, 68, 69, 70, 75, 77, 80, 88, 91, 92, 94, 95, 230, 232, 417, 420, 485, 487, 537, 539, 592, 595, 638, 640], "acga": [82, 85, 384, 393, 455, 464, 506, 515, 559, 568, 618, 627], "acgaactatt": 221, "acggggaggcggag": [404, 474, 525, 579], "acgggu": 1094, "acgt": [65, 82, 85, 86, 89, 90, 96, 380, 384, 393, 397, 408, 409, 414, 416, 418, 422, 451, 455, 464, 467, 482, 484, 489, 502, 506, 515, 518, 533, 535, 541, 555, 559, 568, 572, 583, 584, 589, 591, 593, 597, 613, 614, 618, 627, 630, 636, 637, 642, 651, 669], "acgta": 230, "acgtac": 230, "acgtacgt": [408, 583], "acgtgagctacaaaag": 223, "acgtgccta": 0, "acgtgcctaggtacgcaag": 0, "acgtggaa": [397, 467, 518, 572, 630], "acgtn": [432, 498, 551, 608, 649], "acgtu": 105, "achiev": [133, 1094], "acid": [98, 100, 103, 221, 222, 223, 226, 229, 233, 379, 432, 438, 448, 450, 498, 501, 551, 554, 608, 613, 649, 651, 663], "acquir": 880, "across": [16, 48, 88, 133, 222, 223, 229, 305, 374, 685, 690, 755, 880, 900, 1030], "act": [0, 92, 245, 246, 247], "actaaggctc": 0, "actaaggctcctaacccccttttctcaga": 0, "actaaggctctct": 0, "actaaggctctctacccctctcagaga": 0, "actacattcg": 221, "actatacgga": 221, "actcat": 222, "action": 324, "activ": 1091, "acttagtt": [408, 583], "actual": [134, 139, 231, 234, 265, 755], "acwgn": [399, 401, 427, 469, 471, 494, 520, 522, 546, 574, 576, 602], "ad": [53, 98, 99, 100, 101, 102, 103, 222, 232, 316, 613, 685, 690, 867, 870, 899, 924, 1057, 1097], "adapt": 1030, "adata": 941, "add": [1, 99, 102, 231, 232, 234, 258, 295, 305, 317, 319, 384, 455, 506, 559, 613, 618, 687, 694, 695, 697, 698, 699, 894, 895, 899, 919, 940, 968, 981, 983], "add_format": [245, 247], "addit": [1, 104, 105, 116, 144, 145, 146, 150, 221, 222, 223, 224, 225, 229, 230, 231, 292, 339, 357, 360, 376, 379, 501, 554, 651, 682, 683, 684, 685, 703, 727, 951, 972, 984, 985, 1030, 1057, 1092], "addition": [1, 216, 227, 274, 305, 938, 1094, 1097], "additon": 222, "address": [685, 1092], "adenin": [379, 554], "adequ": 880, "adher": 231, "adiv_faith_pd": 1, "adiv_sob": 1, "adjac": [419, 486, 538, 594, 639, 908], "adjust": 133, "adoni": 756, "adopt": [133, 432, 498, 551, 608, 649], "advanc": 1, "advantag": [133, 727, 1057], "advis": [145, 146, 151], "ae000111": 218, "ae000171": 218, "ae000174": 218, "ae000394": 218, "ae000425": 218, "af031394": 218, "af035635": 232, "af178031": 218, "af178032": 218, "af178033": 218, "affect": [222, 227, 438, 439, 445, 613, 753, 757], "aforement": 233, "after": [53, 82, 85, 98, 99, 100, 222, 223, 231, 232, 233, 234, 308, 319, 374, 690, 696, 697, 754, 755, 758, 761, 866, 881, 1005, 1007, 1024], "ag": [65, 82, 85, 88, 703, 879, 880], "agaagacc": [406, 476, 527, 581, 634], "agaagctatg": 221, "agaagctctt": 221, "agaagcuaug": 221, "agacatcacg": 221, "agagcatgcg": 221, "agaggttcta": 224, "agagguucua": 224, "agagttgaag": 229, "agagttgaaggtatct": [219, 229], "again": [1, 222, 223, 360, 700, 930, 1031], "against": [70, 79, 98, 101, 223, 296, 302, 308, 314, 384, 393, 439, 445, 455, 464, 506, 515, 559, 568, 618, 627, 685, 761, 897, 898, 974], "agatataaag": 221, "agatcttttg": 221, "agatgagtat": 221, "agctttctgc": 221, "agg": 1094, "aggaccttat": 221, "aggctc": 0, "aggctcccttctacccctctcagaga": 0, "agggaaagtt": 221, "agggctggct": 221, "agggga": 1094, "agggta": 680, "aggreg": 1099, "aggtacccta": 221, "aggtgcagta": 221, "agre": [266, 270], "agtactctaa": 221, "agtgcagggt": [222, 229], "aguauucugccacuguaagaa": 448, "aguc": [402, 423, 425, 472, 490, 492, 523, 542, 544, 577, 598, 600, 632, 643, 645], "ahead": 1099, "aiacaqkm": 232, "aim": 852, "ainsworth": 754, "aitchison": [682, 683, 684, 688, 689, 691, 692, 700], "aitchson": 693, "al": [685, 690, 761, 883, 950], "ala": 501, "alanin": [84, 501], "aldex2": 690, "alexandro": 971, "algorithm": [98, 101, 224, 753, 754, 755, 757, 762, 763, 774, 785, 796, 807, 818, 829, 840, 866, 867, 874, 974, 1031, 1032, 1091], "alia": [20, 114, 116, 130, 131, 133, 138, 145, 146, 225, 673, 685, 695, 722, 747, 997, 999], "alic": 613, "alig": 33, "align": [217, 218, 222, 223, 295, 305, 613, 651, 896, 897, 898, 1091, 1092, 1094], "aligned_query_sequ": 0, "aligned_target_sequ": 0, "alignmentstructur": 54, "alignpath": [43, 46, 47, 48, 51, 52], "all": [1, 53, 65, 66, 83, 84, 89, 90, 92, 98, 99, 100, 105, 107, 116, 117, 118, 129, 133, 134, 139, 142, 143, 145, 146, 147, 148, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 259, 269, 288, 295, 305, 308, 317, 319, 320, 335, 353, 372, 374, 379, 397, 400, 403, 406, 414, 416, 419, 429, 433, 448, 467, 470, 473, 476, 482, 484, 486, 496, 499, 501, 518, 521, 524, 527, 533, 535, 538, 548, 552, 554, 572, 575, 578, 581, 589, 591, 594, 604, 609, 613, 630, 634, 636, 637, 639, 648, 651, 662, 663, 667, 669, 677, 685, 687, 690, 694, 695, 697, 698, 699, 700, 703, 715, 718, 725, 738, 742, 749, 751, 753, 754, 755, 756, 757, 758, 785, 796, 840, 851, 852, 863, 871, 872, 880, 881, 882, 899, 900, 903, 907, 940, 948, 951, 967, 970, 971, 972, 981, 984, 985, 986, 997, 999, 1000, 1003, 1010, 1015, 1016, 1018, 1020, 1030, 1057, 1058, 1097], "all_char": 227, "allow": [217, 222, 223, 227, 229, 230, 231, 234, 245, 247, 274, 305, 379, 397, 406, 467, 476, 501, 518, 527, 554, 572, 581, 630, 634, 655, 662, 682, 708, 715, 731, 738, 753, 754, 756, 757, 758, 762, 872, 883, 899, 950, 981, 1023, 1058, 1099], "allow_empti": 1023, "allow_overlap": [662, 715, 738], "allvltkt": 232, "almost": 1034, "alon": [227, 754], "along": [226, 863, 871, 872, 916, 937, 948], "alpha": [143, 149, 685, 877, 878, 882, 1091], "alpha_divers": [1, 106, 116, 133, 147, 149], "alpha_pwr": [877, 880, 881], "alphabet": [0, 95, 105, 149, 150, 217, 222, 379, 432, 438, 450, 498, 501, 551, 554, 608, 613, 649, 651, 663, 666, 669, 680, 1094], "alphanumer": 231, "alr": 684, "alreadi": [227, 232, 234, 245, 246, 247, 613, 704, 755], "also": [0, 1, 83, 84, 112, 116, 137, 144, 145, 146, 147, 176, 200, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 305, 360, 409, 419, 429, 432, 448, 486, 496, 498, 538, 548, 551, 584, 594, 604, 608, 613, 639, 648, 649, 651, 685, 700, 701, 703, 753, 754, 755, 757, 761, 852, 867, 874, 877, 880, 881, 904, 909, 921, 1034, 1080, 1092, 1094, 1099], "alter": 1033, "altern": [94, 114, 137, 233, 234, 431, 448, 497, 550, 607, 667, 682, 696, 702, 718, 742, 755, 757, 758, 761, 872, 877, 989, 1015], "although": [133, 761, 880, 900], "altschul": [217, 218], "alwai": [1, 53, 221, 224, 227, 229, 231, 246, 274, 292, 295, 316, 339, 357, 360, 374, 376, 448, 924, 981, 1037, 1099], "amar": 224, "ambigu": [267, 271], "amen": 683, "american": 107, "amino": [98, 100, 103, 221, 222, 226, 379, 432, 438, 448, 498, 501, 551, 608, 649, 651, 663], "amino_acid": [438, 439, 445], "among": [1, 112, 133, 212, 224, 677, 725, 751, 763, 867, 874, 1095], "amount": [758, 951, 1099], "amplicon": [1, 896], "amsterdam": [852, 866, 867, 874], "an": [0, 1, 3, 13, 14, 15, 16, 17, 18, 19, 20, 46, 47, 48, 49, 51, 52, 53, 65, 67, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 97, 98, 99, 100, 104, 114, 116, 117, 119, 126, 129, 130, 131, 135, 138, 143, 145, 146, 147, 151, 175, 188, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 245, 246, 247, 260, 262, 263, 264, 266, 268, 270, 272, 274, 275, 289, 290, 295, 305, 316, 317, 319, 320, 322, 323, 336, 337, 354, 355, 360, 374, 378, 386, 397, 404, 413, 414, 416, 423, 425, 429, 432, 437, 438, 448, 450, 457, 467, 474, 481, 482, 484, 490, 492, 496, 498, 500, 508, 518, 525, 532, 533, 535, 542, 544, 548, 551, 553, 554, 561, 572, 579, 588, 589, 591, 598, 600, 604, 608, 612, 613, 620, 630, 635, 636, 637, 643, 645, 648, 649, 650, 651, 655, 662, 665, 667, 669, 673, 677, 678, 685, 688, 689, 691, 692, 695, 697, 700, 701, 703, 708, 715, 717, 718, 722, 725, 726, 731, 738, 739, 741, 742, 747, 751, 752, 753, 755, 756, 757, 761, 773, 795, 806, 818, 839, 850, 851, 852, 862, 865, 871, 872, 877, 879, 880, 881, 882, 883, 886, 894, 895, 896, 902, 903, 906, 907, 908, 909, 914, 916, 917, 919, 922, 923, 924, 925, 927, 929, 930, 940, 943, 946, 947, 948, 949, 950, 952, 953, 966, 968, 969, 971, 973, 977, 979, 980, 984, 987, 988, 997, 999, 1002, 1012, 1015, 1020, 1022, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1037, 1038, 1041, 1048, 1054, 1055, 1056, 1058, 1080, 1092, 1094, 1097, 1099], "analog": 133, "analogu": 757, "analys": [116, 145, 146, 753, 1095], "analysi": [1, 116, 129, 145, 146, 222, 229, 682, 683, 685, 690, 700, 753, 756, 757, 762, 763, 784, 785, 817, 828, 829, 840, 863, 866, 867, 872, 873, 874, 877, 880, 881], "analyt": 117, "analyz": [1, 682, 867, 880], "ancacwwgacgtt": [410, 411, 415, 478, 479, 483, 529, 530, 534, 585, 586, 590], "ancestor": [116, 133, 397, 467, 518, 572, 630, 966, 997, 999], "ancestr": 116, "ancom_df": 685, "anderson": [756, 757], "ani": [1, 19, 52, 53, 83, 84, 92, 94, 104, 105, 108, 141, 142, 222, 224, 226, 227, 231, 232, 245, 246, 247, 267, 271, 274, 287, 292, 295, 305, 319, 320, 334, 339, 352, 357, 360, 370, 373, 376, 379, 501, 554, 613, 651, 680, 685, 687, 755, 758, 762, 796, 818, 866, 871, 877, 879, 880, 904, 909, 933, 943, 945, 968, 971, 972, 973, 983, 991, 1020, 1022, 1030, 1057, 1058, 1068, 1080, 1097, 1099], "anim": 117, "ann": [115, 135], "anndata": 941, "annot": [221, 224, 225, 231, 305], "announc": 231, "anosim": [1, 756, 757], "anoth": [1, 70, 79, 82, 92, 116, 145, 146, 224, 226, 227, 278, 284, 296, 302, 305, 308, 314, 319, 322, 325, 331, 343, 349, 361, 367, 384, 393, 402, 424, 426, 439, 445, 455, 464, 472, 491, 493, 506, 515, 523, 543, 545, 559, 568, 577, 599, 601, 613, 618, 627, 632, 644, 646, 651, 653, 706, 729, 761, 896], "anova": [685, 756, 773, 774, 795, 806, 839, 850], "answer": 1056, "anti": [1, 753], "antibiot": [697, 879], "anticip": 1099, "anyon": 231, "anyth": [1, 222, 223, 230, 234, 613, 943, 1057, 1068, 1080, 1099], "anytim": 231, "anywher": [226, 227, 231, 685], "apart": 1013, "api": [222, 360, 679], "app": 230, "appear": [1, 107, 217, 229, 231, 232, 665, 717, 741, 754, 866, 867, 872, 877, 886], "append": [0, 85, 229, 234, 613, 983], "appl": [145, 146], "appli": [0, 1, 53, 65, 84, 89, 90, 143, 146, 147, 148, 151, 221, 222, 227, 231, 233, 305, 324, 379, 414, 416, 482, 484, 501, 533, 535, 554, 589, 591, 613, 636, 637, 651, 667, 682, 718, 742, 744, 755, 758, 762, 866, 880, 903, 924, 930, 933, 939, 946, 1031, 1058, 1099], "applic": [53, 84, 98, 104, 360, 852, 976, 1099], "approach": [690, 755, 880, 952, 953, 977, 980], "appropri": [1, 215, 226, 274, 397, 467, 518, 572, 630, 685, 1092, 1097], "approx": 877, "approxim": [874, 877], "aqfvdhwkel": 220, "aquat": 867, "ar": [0, 1, 3, 53, 65, 66, 70, 75, 79, 80, 83, 84, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 110, 111, 112, 116, 117, 122, 123, 124, 133, 143, 145, 146, 147, 148, 150, 151, 174, 175, 187, 188, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 245, 246, 247, 259, 266, 269, 270, 274, 278, 284, 287, 288, 295, 296, 302, 308, 314, 317, 319, 321, 322, 323, 324, 325, 331, 334, 335, 343, 349, 352, 353, 360, 361, 367, 369, 370, 372, 373, 374, 375, 378, 379, 384, 386, 393, 396, 397, 403, 406, 410, 411, 412, 415, 423, 424, 425, 426, 428, 429, 432, 434, 435, 436, 437, 438, 439, 445, 447, 448, 449, 450, 455, 457, 464, 467, 473, 476, 478, 479, 480, 483, 490, 491, 492, 493, 495, 496, 498, 500, 501, 506, 508, 515, 518, 524, 527, 529, 530, 531, 534, 536, 542, 543, 544, 545, 547, 548, 551, 553, 554, 559, 561, 568, 571, 572, 578, 581, 585, 586, 587, 590, 598, 599, 600, 601, 603, 604, 606, 608, 610, 611, 612, 613, 618, 620, 627, 630, 634, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 660, 663, 666, 667, 672, 673, 677, 678, 680, 681, 682, 683, 685, 687, 690, 691, 692, 694, 695, 697, 698, 699, 700, 703, 704, 706, 708, 713, 718, 721, 722, 725, 726, 727, 729, 731, 736, 742, 744, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 774, 796, 840, 851, 852, 853, 862, 863, 864, 865, 866, 867, 870, 871, 872, 874, 875, 877, 879, 880, 881, 883, 886, 899, 900, 903, 905, 909, 915, 924, 926, 934, 936, 937, 938, 939, 941, 942, 943, 948, 949, 950, 951, 971, 974, 979, 989, 1000, 1002, 1003, 1007, 1008, 1015, 1016, 1020, 1022, 1023, 1024, 1029, 1030, 1032, 1034, 1035, 1037, 1054, 1057, 1058, 1069, 1080, 1092, 1094, 1097, 1099], "arang": [915, 920], "arbitrari": [65, 83, 86, 226, 231, 232, 379, 501, 554, 613, 851, 909, 943, 1057, 1094], "arbitrarili": [1030, 1099], "archaea": [989, 990, 1023], "archiv": [233, 1056], "area": [1, 118], "arg": [234, 259, 269, 435, 436, 501, 610, 611, 886], "arginin": 501, "argument": [53, 65, 93, 94, 97, 104, 174, 175, 187, 188, 226, 245, 246, 247, 259, 266, 267, 268, 269, 270, 271, 272, 321, 323, 375, 378, 422, 428, 435, 436, 437, 489, 495, 500, 541, 547, 553, 597, 603, 610, 611, 612, 642, 647, 650, 651, 667, 672, 678, 683, 718, 721, 726, 742, 746, 752, 759, 864, 865, 886, 934, 949, 1008, 1029, 1057, 1080], "argumentoverridewarn": [266, 270], "aris": [1022, 1030], "around": [123, 124, 148, 222, 229, 232, 651, 686, 755, 878, 1097], "arrai": [1, 3, 13, 14, 15, 17, 18, 19, 44, 46, 47, 49, 51, 52, 53, 84, 88, 116, 133, 145, 146, 176, 200, 213, 222, 228, 379, 396, 399, 401, 407, 424, 426, 427, 430, 432, 469, 471, 477, 491, 493, 494, 498, 501, 520, 522, 528, 543, 545, 546, 549, 551, 554, 571, 574, 576, 582, 599, 601, 602, 605, 608, 613, 644, 646, 649, 651, 653, 661, 666, 669, 673, 683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 703, 706, 714, 722, 729, 737, 739, 747, 761, 762, 796, 818, 840, 852, 871, 875, 877, 878, 879, 880, 881, 882, 896, 897, 898, 899, 900, 902, 903, 916, 919, 923, 927, 929, 933, 935, 939, 940, 943, 946, 993, 1022, 1030, 1094], "arrang": 852, "array_lik": [1, 3, 13, 14, 15, 34, 44, 45, 46, 47, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 151, 152, 163, 176, 189, 200, 386, 404, 405, 419, 429, 457, 474, 475, 486, 496, 508, 525, 526, 538, 548, 561, 579, 580, 594, 604, 620, 633, 639, 648, 683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 753, 755, 756, 757, 758, 761, 868, 871, 875, 878, 881, 882], "articl": [53, 104, 219], "artifact": [91, 98, 99, 100], "artifici": [224, 852], "asarrai": [704, 906, 907, 913, 914, 916, 917, 919, 924, 925, 930, 931, 932, 935, 937, 938, 940, 945, 946, 948], "ascend": [95, 322], "ascii": [223, 230, 231, 234, 432, 498, 551, 608, 649, 969, 1097], "ascii_art": [227, 898, 972, 989, 990, 1031, 1097], "ask": 246, "asn": 501, "asp": 501, "asparagin": 501, "aspart": 501, "aspect": 1058, "ass": 120, "assai": 880, "assembl": 221, "assert": 1035, "assert_frame_equ": 1034, "assertionerror": [1034, 1035], "assess": [133, 142, 753, 755, 756, 757, 761], "assign": [84, 94, 105, 143, 147, 229, 231, 296, 429, 496, 548, 604, 613, 648, 669, 685, 690, 753, 756, 757, 851, 881, 970, 971, 972], "assign_support": 1026, "assist": [231, 1099], "associ": [1, 72, 107, 133, 223, 231, 232, 233, 260, 261, 262, 288, 290, 295, 316, 318, 320, 335, 337, 353, 355, 360, 379, 501, 554, 613, 754, 761, 851, 871, 875, 878, 879, 880, 899, 902, 909, 924, 941, 943, 981, 987, 1020, 1092], "asst": [408, 409, 583, 584], "assum": [1, 107, 116, 118, 125, 128, 145, 146, 219, 222, 223, 226, 228, 245, 247, 360, 386, 434, 435, 436, 457, 508, 561, 620, 655, 690, 703, 704, 708, 731, 742, 761, 762, 867, 871, 877, 878, 880, 881, 939], "assumpt": [129, 227, 680, 685, 690, 984, 985, 1033], "assur": [952, 953, 977, 980], "asv": 1, "asx": 501, "asymmetr": [651, 655, 708, 731], "asymptot": 129, "ataaatcacg": 221, "ataacgttgg": 221, "ataagggatg": 221, "atacaaccat": 221, "atactcccaa": 221, "atagacc": 1099, "atagcatacc": 221, "atagttacac": 221, "atatatacat": 223, "atatatat": 851, "atatatgttt": 221, "atatgaacaaa": 1099, "atattacaac": 221, "atcaaaaggg": 221, "atcaccgcta": 221, "atcactgaaa": 221, "atcataacta": 221, "atccatatat": 221, "atcggcgat": 681, "atgagccatg": 221, "atgc": 903, "atgcactagg": 221, "atgcatgcat": 225, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 225, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 225, "atgccactttaa": [435, 436], "atgccccttc": 221, "atggca": 851, "atggcc": 851, "atggcg": 851, "atggct": 851, "atggtatgaa": 221, "atgtgtatttga": 1094, "atgttgtagt": 221, "atl": [436, 449, 611], "atla": 663, "atom": [909, 943], "att": [400, 470, 521, 575], "attach": [245, 247, 971], "attagaaaga": 221, "attcgttgtg": 221, "attctggaac": 221, "attempt": [93, 174, 187, 222, 231, 274, 321, 375, 428, 495, 547, 603, 647, 672, 721, 746, 864, 934, 971, 984, 1008], "attr": [225, 909, 943, 994, 1022], "attr_1": 1022, "attr_n": 1022, "attribut": [3, 20, 34, 65, 94, 152, 163, 176, 189, 200, 215, 220, 221, 222, 224, 225, 228, 230, 231, 232, 235, 277, 295, 304, 305, 320, 324, 342, 360, 379, 384, 432, 438, 450, 455, 498, 501, 506, 551, 554, 559, 608, 613, 618, 649, 651, 662, 677, 704, 715, 725, 727, 738, 751, 774, 807, 818, 853, 862, 873, 880, 883, 909, 943, 950, 951, 952, 953, 966, 970, 973, 977, 980, 994, 1022, 1030, 1035, 1037, 1038, 1041, 1048, 1069, 1094], "attribute_nam": 1022, "attributeerror": [613, 1037], "atttcagggt": [222, 229], "aucauaacua": 221, "aug": 222, "augccacuuuaa": [438, 449, 610, 611], "auguguauuu": 1094, "austral": 756, "australian": 753, "auth": 234, "author": [133, 224, 232, 613, 685], "auto": [274, 432, 498, 551, 608, 649], "automat": [53, 82, 85, 92, 93, 97, 174, 175, 187, 188, 226, 230, 231, 259, 269, 295, 321, 323, 375, 378, 422, 428, 437, 489, 495, 500, 541, 547, 553, 597, 603, 612, 642, 647, 650, 672, 678, 703, 721, 726, 746, 752, 853, 864, 865, 934, 949, 976, 1008, 1029, 1092], "auxilari": 234, "av": 762, "avail": [1, 147, 217, 222, 223, 224, 228, 231, 233, 263, 264, 432, 438, 447, 498, 551, 608, 649, 663, 727, 753, 754, 755, 756, 757, 796, 877, 881, 909, 943, 1032, 1092, 1099], "averag": [686, 690, 762, 763, 871, 875, 933, 1004, 1030], "averagegradientanova": 762, "avg": 762, "avoid": [53, 220, 231, 232, 234, 319, 852, 875, 1027, 1028], "aw": [0, 133], "awar": [84, 133, 231, 613], "awesom": 1099, "awgh": 0, "ax": [763, 785, 796, 829, 852, 863, 866, 867, 886, 896, 903, 924], "axes3d": 863, "axi": [72, 88, 118, 152, 226, 651, 796, 840, 853, 863, 871, 878, 881, 886, 894, 895, 896, 897, 898, 899, 900, 902, 903, 906, 907, 909, 914, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 932, 933, 935, 936, 937, 938, 939, 940, 943, 946, 948, 1035], "axis_label": [1, 863], "b": [1, 53, 86, 92, 94, 95, 96, 116, 117, 118, 129, 133, 136, 151, 223, 226, 227, 231, 275, 379, 501, 554, 613, 655, 662, 663, 666, 671, 674, 677, 701, 703, 708, 715, 720, 723, 725, 731, 738, 745, 748, 749, 751, 754, 755, 851, 863, 879, 880, 897, 899, 900, 903, 907, 932, 943, 952, 953, 965, 966, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 984, 985, 986, 987, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1056, 1092, 1094, 1097], "b1": [685, 690], "b2": [685, 690], "b3": [685, 690], "b4": [685, 690], "b5": [685, 690], "b6": [685, 690], "b7": [685, 690], "b_b": 227, "b_i": [142, 700], "ba": 232, "babp": 53, "bacilli": [990, 1023], "bacillu": 232, "back": [133, 220, 222, 225, 268, 272, 293, 294, 340, 341, 358, 359, 377, 967, 1097], "backward": [116, 133, 145, 146, 231, 685], "bacteri": 685, "bacteria": [881, 926, 989, 990, 1023], "bacteroidet": [926, 989, 990, 1023], "baeza": 863, "baker": 116, "balanc": [133, 700], "band": 53, "bar": [231, 900, 925, 935, 945, 946, 1056, 1099], "barcod": [897, 899, 903], "barker": 133, "barlow": 700, "base": [1, 3, 13, 34, 45, 92, 99, 102, 106, 107, 110, 111, 115, 116, 122, 128, 129, 133, 134, 136, 139, 145, 146, 216, 217, 222, 224, 228, 230, 231, 295, 316, 324, 360, 371, 379, 419, 450, 486, 501, 538, 554, 594, 613, 639, 655, 704, 708, 731, 753, 755, 756, 757, 761, 796, 866, 867, 874, 877, 879, 880, 881, 883, 899, 907, 939, 950, 974, 986, 987, 1030, 1056, 1094, 1095, 1097, 1099], "base1": 438, "base2": 438, "base3": 438, "basi": [691, 692, 700, 701], "basic": [98, 118, 217, 218, 761, 853, 863, 909, 943], "baz": [900, 1056], "bb": 879, "bbb": 223, "bbf": 223, "bbx": 223, "bc_dm": 1, "bct": 233, "becam": 227, "becaus": [1, 84, 91, 92, 116, 145, 146, 217, 222, 223, 224, 227, 229, 230, 231, 234, 360, 384, 419, 448, 455, 486, 506, 538, 559, 594, 613, 618, 639, 685, 755, 867, 872, 874, 876, 879, 971, 976, 979, 1023], "becom": [1, 3, 117, 222, 223, 227, 231, 305, 899, 926], "been": [0, 98, 99, 100, 105, 106, 151, 222, 223, 224, 229, 265, 267, 271, 274, 360, 373, 415, 419, 427, 483, 486, 494, 534, 538, 546, 590, 594, 602, 613, 639, 685, 755, 761, 882, 909, 943, 948, 1007], "befor": [1, 84, 222, 226, 231, 232, 408, 409, 448, 583, 584, 697, 754, 755, 881, 899, 1005, 1024, 1097, 1099], "begin": [53, 221, 222, 223, 224, 228, 231, 232, 246, 295, 360, 448, 881], "behav": [379, 501, 554, 755], "behavior": [89, 90, 92, 98, 99, 100, 222, 223, 224, 231, 274, 414, 416, 432, 448, 482, 484, 498, 533, 535, 551, 589, 591, 608, 613, 636, 637, 649, 753, 755, 757, 975, 1099], "being": [1, 53, 82, 84, 85, 98, 99, 100, 116, 143, 147, 222, 223, 229, 233, 360, 374, 700, 757, 761, 851, 880, 899, 943, 952, 953, 973, 977, 980, 1013, 1092, 1094], "bell": 136, "belong": [53, 108, 112, 137, 225, 685, 690, 753, 756, 757, 899], "below": [219, 222, 223, 227, 229, 231, 232, 233, 360, 438, 450, 613, 754, 755, 863, 880, 909, 939, 943, 951], "benefit": 690, "benjamini": [685, 690], "berger": 108, "best": [53, 98, 99, 100, 101, 102, 103, 123, 124, 682, 754, 866, 1033], "beta": [147, 148, 150, 221, 1091], "beta_divers": [1, 143, 145, 146, 148, 150, 151], "betadisp": 757, "bethesda": 222, "better": [222, 866, 867, 1092], "between": [1, 3, 53, 99, 102, 117, 118, 123, 134, 142, 145, 146, 147, 151, 215, 222, 223, 224, 226, 229, 232, 233, 308, 322, 397, 402, 423, 424, 425, 426, 467, 472, 490, 491, 492, 493, 518, 523, 542, 543, 544, 545, 572, 577, 598, 599, 600, 601, 630, 632, 643, 644, 645, 646, 651, 655, 667, 679, 680, 681, 685, 690, 700, 703, 704, 708, 718, 727, 731, 742, 753, 754, 755, 756, 757, 758, 760, 761, 796, 866, 867, 868, 874, 877, 880, 881, 886, 924, 951, 966, 974, 975, 976, 982, 991, 1001, 1020, 1021, 1031, 1094, 1097], "bf00039495": 221, "bh": [685, 690], "bia": [110, 111, 690], "bias": [110, 111, 690], "bias_correct": [110, 111], "bifurc": [227, 701, 988], "bigoplu": 692, "bin": [851, 899, 932], "bin_": 851, "bin_f": [851, 899], "binari": [234, 235, 245, 246, 247, 274, 700, 701, 761, 866, 874, 929, 1024, 1056], "binary_dm": [672, 678, 721, 726, 746, 752], "binomi": [880, 881], "bio": [0, 1, 89, 90, 93, 97, 98, 101, 104, 105, 116, 145, 146, 147, 148, 149, 150, 151, 174, 175, 187, 188, 216, 217, 218, 219, 221, 222, 223, 227, 228, 229, 230, 232, 233, 321, 323, 375, 378, 414, 416, 428, 435, 436, 437, 438, 448, 449, 482, 484, 495, 500, 533, 535, 547, 553, 589, 591, 603, 610, 611, 612, 636, 637, 647, 650, 672, 678, 679, 721, 726, 746, 752, 754, 852, 864, 865, 934, 949, 1008, 1029, 1032, 1094, 1098], "biocor": [145, 146, 863], "biodivers": [1, 106, 114, 116, 133], "bioinformat": [116, 133, 223, 229, 231, 971], "biol": [98, 101, 116, 120, 133, 217, 218, 221, 224, 696, 702], "biolog": [1, 91, 98, 99, 100, 128, 133, 134, 139, 141, 152, 189, 200, 222, 223, 225, 227, 230, 295, 399, 400, 401, 403, 404, 407, 410, 411, 412, 415, 427, 469, 470, 471, 473, 474, 477, 478, 479, 480, 483, 494, 520, 521, 522, 524, 525, 528, 529, 530, 531, 534, 546, 574, 575, 576, 578, 579, 582, 585, 586, 587, 590, 602, 613, 651, 880, 883, 910, 950, 1031, 1091, 1095, 1096], "biologi": [133, 134, 139, 448, 761, 971, 984, 1030, 1031], "biom": [231, 883, 889, 896, 897, 898, 899, 900, 902, 903, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 948, 949, 950, 1091], "biom_format": [883, 950], "biom_open": [909, 943], "biometr": [129, 757], "biometrika": [106, 107, 119], "bioperl": [223, 229], "biopython": [3, 223], "biosci": [696, 702], "bioscienc": 974, "biotechnologi": [222, 233], "biotit": 3, "biowulf": 230, "biplot": [228, 866, 874], "biplot_scor": [853, 1035], "bit": [3, 13, 17, 34, 44, 49, 217, 218, 231], "bit_arr": 13, "bitscor": [217, 218], "bitting": 133, "biz": 900, "blackwel": 128, "blank": [222, 223, 227, 228, 229, 231, 277, 292, 324, 339, 342, 357, 360, 373, 376, 671, 720, 745], "blast": [99, 100, 102, 103, 222], "blast6": 218, "blastcgihelp": 222, "blastedbio": 217, "blastn": 218, "blastp": 218, "block": [100, 103, 148, 663, 1056], "block_siz": 1056, "blocksiz": 148, "blogspot": 217, "blosum": [100, 103, 501, 651, 663], "blosum45": 663, "blosum50": 663, "blosum62": [651, 663], "blosum80": 663, "blosum90": 663, "bmi": 881, "bob": 613, "bodi": [1, 863], "body_sit": [1, 863], "boilerpl": 234, "bologna": 118, "bone": 880, "bonferroni": [685, 690], "boniferroni": [685, 690], "boogaart": 700, "book": [217, 218, 222], "bool": [32, 53, 66, 67, 70, 79, 82, 85, 88, 89, 90, 91, 95, 98, 99, 100, 110, 111, 112, 114, 116, 121, 133, 136, 137, 138, 143, 145, 146, 147, 148, 151, 163, 211, 212, 213, 214, 245, 246, 247, 266, 270, 278, 284, 288, 291, 293, 294, 295, 296, 302, 308, 314, 316, 318, 322, 325, 331, 335, 338, 340, 341, 343, 349, 353, 356, 358, 359, 361, 367, 369, 377, 379, 380, 381, 384, 386, 393, 396, 397, 399, 401, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 429, 431, 432, 433, 439, 445, 451, 452, 455, 457, 464, 467, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 503, 506, 508, 515, 518, 520, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 555, 556, 559, 561, 568, 571, 572, 574, 576, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 607, 608, 609, 613, 614, 615, 618, 620, 627, 630, 633, 634, 635, 636, 637, 639, 640, 641, 643, 644, 645, 646, 648, 649, 652, 653, 660, 662, 665, 681, 685, 691, 692, 696, 702, 704, 705, 706, 713, 715, 717, 728, 729, 736, 738, 741, 744, 755, 758, 761, 796, 807, 871, 872, 874, 875, 879, 880, 882, 899, 902, 906, 907, 909, 910, 918, 919, 920, 921, 929, 930, 931, 932, 933, 936, 941, 942, 943, 946, 948, 969, 974, 975, 978, 992, 994, 995, 996, 998, 1001, 1004, 1005, 1006, 1009, 1021, 1023, 1024, 1031, 1035, 1057], "boolean": [66, 146, 222, 225, 230, 379, 386, 399, 401, 404, 407, 419, 422, 424, 426, 427, 429, 457, 469, 471, 474, 477, 486, 489, 491, 493, 494, 496, 501, 508, 520, 522, 525, 528, 538, 541, 543, 545, 546, 548, 549, 554, 561, 574, 576, 579, 582, 594, 597, 599, 601, 602, 604, 613, 620, 639, 642, 644, 646, 648, 742, 907, 939], "bootstrap": 951, "both": [65, 83, 92, 94, 105, 110, 111, 112, 116, 133, 215, 216, 217, 218, 220, 222, 223, 229, 231, 233, 266, 270, 320, 448, 667, 688, 689, 691, 692, 703, 718, 742, 744, 749, 754, 755, 756, 757, 872, 886, 896, 899, 903, 909, 924, 939, 943, 975, 976, 1015, 1024, 1092, 1094], "bound": [122, 123, 224, 225, 234, 295, 296, 304, 305, 308, 316, 317, 319, 320, 613, 685, 690, 878, 881, 976, 1015], "bound_moieti": 224, "bowden": [379, 450, 501, 554, 613], "boxplot": 1, "bp": [221, 224], "braak": 867, "bracket": [142, 227], "brai": 1, "branch": [1, 116, 133, 146, 701, 951, 971, 972, 981, 1022, 1025, 1031, 1097], "braycurti": 1, "break": [379, 501, 554], "bren": 700, "brillouin": 109, "broader": 852, "broadinstitut": 222, "broken": [83, 1030], "brows": 221, "bsd": 1091, "bt": [223, 920], "btop": [217, 218], "buf_siz": 851, "buffer": [234, 274, 851], "buffer_s": 234, "bufferedrandom": 274, "bufferedread": [235, 245, 246, 274], "bufferedwrit": [235, 247, 274], "bui": 1091, "build": [45, 305, 700, 944], "buildilrbas": 700, "built": [3, 20, 34, 53, 65, 152, 163, 176, 189, 200, 235, 248, 277, 295, 305, 324, 342, 360, 379, 438, 450, 501, 554, 613, 651, 704, 727, 763, 774, 785, 796, 807, 818, 829, 840, 853, 883, 951, 1037, 1057, 1069, 1080, 1092], "bulletin": 1030, "busi": 234, "bwpd_": 133, "by_id": 939, "by_nam": [432, 498, 551, 608, 649, 651, 668], "bypass": [116, 143, 145, 146, 147], "byte": [3, 274, 429, 496, 548, 604, 648], "byteio": [216, 220], "bytesio": [216, 220, 274, 275, 1056], "bz2": 274, "bzh91ai": 275, "b\u00e4hler": [696, 702], "c": [1, 17, 20, 53, 65, 83, 91, 92, 94, 95, 104, 107, 116, 117, 118, 119, 120, 133, 134, 136, 139, 145, 146, 151, 221, 222, 223, 227, 229, 231, 232, 233, 247, 379, 389, 394, 400, 406, 408, 409, 460, 465, 470, 476, 501, 511, 516, 521, 527, 554, 564, 569, 575, 581, 583, 584, 613, 623, 628, 634, 651, 662, 666, 669, 671, 674, 677, 682, 684, 689, 696, 697, 698, 699, 701, 702, 703, 715, 720, 723, 725, 738, 745, 748, 749, 751, 754, 755, 863, 873, 879, 880, 897, 899, 900, 952, 953, 965, 966, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 984, 985, 986, 987, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1094, 1097], "c_": 107, "ca": [3, 17, 84, 228, 853, 867, 874], "caa40058": 221, "caaatgtgaa": 221, "caacgtggcc": 221, "caaggaagat": 221, "caagggctgc": 221, "cabcacc": 223, "cac": [412, 420, 480, 487, 531, 539, 587, 595, 640], "cacaattact": 221, "cacaauuacu": 221, "cach": [968, 973, 979, 983, 984, 985, 987, 994, 1003, 1007], "cache_attr": [979, 994], "cache_attrnam": 973, "cache_typ": 973, "cag": 3, "caggcc": 1099, "cagttgaagc": 221, "cagtttgatg": 221, "caguugaagc": 221, "caguuugaug": 221, "cajo": 867, "calcul": [3, 53, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 148, 151, 212, 215, 408, 409, 583, 584, 685, 690, 693, 701, 702, 753, 754, 755, 756, 757, 761, 785, 796, 840, 871, 875, 878, 880, 881, 923, 927, 939, 974, 981, 1020, 1091], "call": [1, 92, 116, 117, 123, 124, 145, 146, 219, 222, 229, 232, 234, 274, 295, 397, 405, 408, 429, 448, 467, 475, 496, 518, 526, 548, 572, 580, 583, 604, 613, 630, 633, 648, 744, 754, 755, 851, 867, 877, 907, 967, 969, 970, 973, 984, 985, 987, 1000, 1001, 1007, 1016, 1021, 1028, 1055, 1057, 1058, 1068, 1092, 1099], "callabl": [53, 65, 82, 85, 94, 143, 147, 148, 151, 212, 667, 685, 718, 742], "callback": [1058, 1099], "caller": [93, 97, 174, 175, 187, 188, 321, 323, 375, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 784, 817, 828, 864, 865, 934, 947, 949, 1008, 1029], "calucul": 757, "can": [0, 1, 15, 47, 53, 65, 91, 94, 98, 99, 100, 104, 105, 106, 112, 116, 117, 133, 135, 137, 143, 145, 146, 147, 149, 150, 151, 163, 176, 200, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 274, 295, 304, 305, 320, 360, 397, 402, 404, 419, 429, 467, 472, 474, 486, 496, 518, 523, 525, 538, 548, 572, 577, 579, 594, 604, 613, 630, 632, 639, 648, 651, 655, 663, 679, 682, 685, 690, 700, 703, 704, 708, 727, 731, 753, 754, 755, 757, 758, 759, 762, 852, 863, 866, 871, 872, 873, 874, 877, 879, 880, 881, 886, 896, 900, 909, 921, 924, 933, 943, 946, 951, 972, 974, 982, 1012, 1015, 1022, 1030, 1031, 1032, 1036, 1037, 1057, 1080, 1094, 1097, 1099], "cancer": 755, "candid": [438, 881], "cannot": [15, 47, 53, 65, 82, 85, 222, 223, 226, 227, 231, 266, 267, 270, 271, 274, 360, 397, 450, 467, 518, 572, 630, 685, 753, 754, 755, 756, 757, 851, 863, 879, 881, 984, 987, 1015, 1092], "canon": [379, 431, 497, 501, 550, 554, 607, 651, 867, 874, 883, 950, 1091], "captur": [433, 499, 552, 609], "cardin": 1036, "care": [1, 84, 222, 224, 757], "carlo": 877, "carol": 613, "casava": 230, "casava_ug_15011196b": 230, "case": [1, 84, 98, 99, 100, 108, 148, 216, 220, 222, 227, 229, 231, 233, 235, 360, 374, 379, 409, 422, 432, 489, 498, 541, 551, 554, 584, 597, 608, 642, 649, 663, 685, 690, 704, 755, 761, 866, 871, 873, 881, 971, 1004, 1030, 1057, 1058, 1092, 1097], "cast": [1, 227, 360, 397, 467, 518, 572, 630, 703, 704, 759, 863, 925], "cat": [421, 488, 540, 596, 641, 879, 880], "catacctca": 3, "catatttgct": 221, "catcgatcgatcgatgcatgcatgcatg": 222, "catcgtc": 222, "categor": [231, 277, 360, 369, 373, 377, 753, 756, 852, 863], "categori": [1, 231, 232, 762, 763, 773, 774, 784, 795, 796, 806, 807, 818, 828, 829, 839, 840, 850, 852, 863, 877, 879, 880, 894, 899, 943, 1093], "categoricalmetadatacolumn": [324, 360, 371], "categoryresult": 807, "catttagga": 230, "catttgaaaa": 221, "cauauuugcu": 221, "caugcaucguacguacgcaugac": 219, "caus": [53, 231, 274, 448], "caution": 151, "cauucguacguacgcaugac": 219, "caveat": [222, 682], "cb": [232, 879], "cc": [232, 429, 438, 496, 548, 604, 648], "cca": [228, 852, 853, 866, 874], "cca1": 852, "cca2": 852, "cca3": 852, "cca4": 852, "cca5": 852, "cca6": 852, "cca7": 852, "cca8": 852, "cca9": 852, "ccaatggtac": 221, "ccaggtcgat": 221, "ccc": [381, 452, 503, 556, 615], "cccataaata": 221, "cccc": [419, 486, 538, 594, 639], "ccccchhhhhhhhhhhhh": 232, "ccchhhhhhhhhhhhhhh": 232, "cccttaggtc": 221, "ccg": 94, "ccggac": 1099, "ccgggcacggtat": 222, "ccgwllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 438, "ccora": 867, "ccyt": 223, "cd": [98, 221, 224, 448], "cde": 233, "ceil": 939, "cell": [231, 880], "cell_lin": 880, "center": [222, 233, 686, 754, 866, 868, 872, 875], "centr": [682, 688, 689, 870], "centroid": 757, "cepa": 971, "certain": [116, 126, 143, 145, 146, 147, 266, 268, 270, 272, 360, 379, 501, 554, 680, 1026], "cg": [83, 429, 496, 548, 604, 613, 648], "cga": [420, 487, 539, 595, 640], "cgac": 219, "cgagc": [386, 457, 508, 561, 620], "cgaggccgggac": 222, "cgatgtc": 222, "cgatgtcgatcgatcgatcgatcag": 222, "cgau": 219, "cgcgaugcaugcau": 219, "cgggacactc": [222, 229], "cgggcacggt": [222, 229], "cgggcasdgca": 230, "cgggcattgca": 230, "cggtacgctt": [222, 229], "cggtcgtaacgcgta": 3, "cggtcgtcac": 3, "cgi": [99, 100, 102, 103, 438, 446, 447], "cgt": [420, 487, 539, 595, 640], "cgtcacttat": 221, "cgtcgt": 17, "cgtcgtgc": 17, "cgttacgctt": [222, 229], "cgttcagggt": [222, 229], "cgttta": 680, "cgugcaugcau": 219, "chain": 224, "challeng": 116, "chanc": [651, 761, 939], "chang": [122, 136, 222, 304, 305, 448, 613, 663, 685, 690, 753, 851, 946, 973, 1007, 1099], "chao": [107, 110, 133], "chao1": 111, "chao1_ci": 110, "chapter": [222, 873], "char": [406, 433, 476, 499, 527, 552, 581, 609, 634], "charact": [3, 13, 15, 17, 19, 34, 44, 47, 52, 53, 70, 83, 84, 88, 92, 105, 163, 176, 189, 200, 217, 218, 219, 222, 223, 226, 227, 228, 229, 230, 232, 233, 234, 360, 379, 384, 386, 389, 391, 393, 394, 395, 399, 400, 401, 404, 406, 407, 408, 409, 410, 411, 412, 415, 422, 427, 429, 431, 432, 438, 448, 450, 455, 457, 460, 462, 464, 465, 466, 469, 470, 471, 474, 476, 477, 478, 479, 480, 483, 489, 494, 496, 497, 498, 501, 506, 508, 511, 513, 515, 516, 517, 520, 521, 522, 525, 527, 528, 529, 530, 531, 534, 536, 541, 546, 548, 549, 550, 551, 554, 559, 561, 564, 566, 568, 569, 570, 574, 575, 576, 579, 581, 582, 583, 584, 585, 586, 587, 590, 597, 602, 604, 607, 608, 613, 618, 620, 623, 625, 627, 628, 629, 634, 642, 648, 649, 651, 666, 669, 680, 909, 943, 1094], "character": 690, "charg": [222, 229], "charlson": 133, "chase": 114, "check": [53, 223, 246, 266, 270, 296, 305, 308, 319, 652, 653, 691, 692, 703, 704, 705, 706, 727, 728, 729, 762, 866, 867, 880, 906, 918, 1034, 1035, 1055, 1099], "check_length": 1099, "checksum": 1056, "chemic": [651, 881], "chen": [107, 133], "chf": [436, 449, 611], "chi": [866, 867], "chichest": 682, "child": [227, 305, 397, 467, 518, 572, 630, 700, 951, 972, 1003, 1007, 1025, 1097], "child1": [968, 983], "child2": [968, 983], "child_index": 1022, "children": [227, 701, 951, 956, 960, 968, 972, 983, 985, 992, 996, 1003, 1007, 1009, 1016], "chimp": [222, 229], "chisquar": 881, "chiu": 133, "choic": [82, 85, 226, 872], "choos": [116, 231, 867, 877], "chosen": [429, 496, 548, 604, 648, 694, 754, 863, 874, 882], "christoph": 223, "chunk": 229, "ci": [106, 123, 690], "ci_typ": 123, "cigar": [3, 20, 45, 50, 53], "circuit": 1099, "circumst": [118, 501, 880], "citat": 233, "ciufo": 233, "cl": [245, 247, 260, 262, 263, 264, 450, 1041], "clade": [1010, 1017, 1030, 1097], "cladogenesi": 761, "claim": [267, 271], "clarifi": 116, "clariti": 227, "clark": [753, 754], "class": [3, 20, 34, 53, 65, 89, 90, 105, 107, 110, 152, 163, 176, 189, 200, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 245, 247, 248, 260, 262, 263, 264, 265, 277, 295, 305, 324, 342, 360, 379, 397, 414, 416, 438, 450, 467, 482, 484, 501, 518, 533, 535, 554, 572, 589, 591, 613, 630, 636, 637, 651, 685, 704, 727, 763, 774, 785, 796, 807, 818, 829, 840, 853, 883, 904, 907, 930, 945, 950, 951, 973, 1030, 1037, 1057, 1069, 1080, 1091, 1092, 1094], "classic": 233, "classif": [233, 863], "classmethod": [13, 14, 15, 16, 44, 45, 46, 47, 48, 86, 87, 93, 174, 187, 317, 321, 373, 375, 397, 428, 447, 467, 495, 518, 547, 572, 603, 630, 647, 663, 666, 667, 668, 669, 672, 718, 721, 742, 746, 864, 909, 910, 934, 988, 989, 990, 1008], "classproperti": 450, "claus": 372, "clean": [274, 968, 1007], "clear": 230, "clinic": [881, 1093], "clip_head": 163, "clip_tail": 163, "clone": 221, "clone_lib": 221, "close": [93, 97, 106, 117, 174, 175, 187, 188, 222, 223, 227, 229, 232, 274, 275, 321, 323, 360, 375, 378, 428, 437, 448, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 685, 721, 726, 746, 752, 784, 817, 828, 864, 865, 934, 949, 1008, 1029, 1056], "closeabl": 274, "closefd": 234, "closer": [1, 1099], "clostridia": [990, 1023], "closur": [684, 697, 698, 699], "clover": 221, "clr": [682, 689, 690, 701], "clustal": [93, 97, 1092], "clustal_f": 219, "clustalw": 219, "cluster": [1, 755, 757, 988, 1094], "cmap": [1, 671, 720, 745, 863], "cnt": 880, "co": 761, "co2": 880, "cock": 223, "cocryst": 224, "code": [219, 222, 223, 224, 233, 320, 379, 432, 434, 435, 436, 438, 439, 445, 446, 447, 448, 449, 498, 501, 551, 554, 606, 608, 610, 611, 649, 761, 882, 939, 974, 1030, 1032, 1094], "codon": [224, 233, 435, 438, 448, 449, 610, 651], "codon_start": 224, "coeff": 755, "coeffici": [107, 754, 755, 761, 853, 874, 877, 976], "coercion": [397, 467, 518, 572, 630], "cogent": 981, "col": [704, 893, 904, 919, 945], "col1": [92, 231], "col2": [92, 231], "col3": [92, 231], "collabor": 224, "collaps": [231, 972], "collapse_f": 899, "collapsed_id": [899, 909, 943], "collat": 758, "collect": [53, 134, 139, 141, 274, 360, 662, 700, 715, 738, 851], "collinear": [852, 867], "colon": 227, "color": [1, 123, 124, 671, 720, 745, 863], "colorbar": [671, 720, 745, 863], "colormap": [671, 720, 745, 863], "colormaps_refer": 863, "column": [1, 19, 52, 53, 65, 90, 91, 92, 147, 211, 215, 216, 222, 224, 225, 228, 229, 232, 233, 277, 278, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 324, 325, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 367, 369, 371, 372, 373, 374, 376, 377, 397, 416, 422, 467, 484, 489, 518, 535, 541, 572, 591, 597, 613, 630, 637, 642, 651, 655, 670, 674, 683, 684, 685, 690, 691, 692, 703, 708, 719, 723, 731, 743, 744, 748, 753, 754, 755, 756, 757, 758, 759, 761, 796, 840, 852, 863, 866, 867, 868, 870, 874, 875, 879, 880, 886, 897, 899, 904, 909, 910, 915, 919, 920, 921, 926, 935, 936, 941, 942, 943, 945, 989, 993, 1034, 1035, 1091], "column_missing_schem": [360, 373], "column_typ": [369, 373], "columnwis": 868, "com": [122, 217, 218, 219, 754, 1056], "comb": 1004, "combin": [53, 65, 82, 85, 106, 224, 690, 754, 853, 867, 921], "come": [232, 761, 1018], "comma": [225, 226, 227], "command": [231, 233, 448], "comment": [221, 222, 224, 225, 226, 232, 233, 360], "comment_char": 227, "commit": 877, "common": [83, 89, 90, 101, 116, 133, 217, 222, 223, 224, 231, 232, 233, 414, 416, 482, 484, 533, 535, 589, 591, 636, 637, 683, 704, 796, 897, 898, 951, 976, 984, 997, 999, 1022, 1023, 1031, 1094, 1097, 1098], "commonli": [227, 231, 651, 757, 874, 1097], "commun": [106, 107, 112, 116, 129, 133, 136, 142, 145, 146, 690, 703, 753, 754, 756, 757, 852, 863, 867, 874, 881, 1091], "compact": 969, "compani": 880, "compar": [1, 127, 145, 151, 217, 218, 322, 418, 423, 424, 425, 426, 429, 490, 491, 492, 493, 496, 542, 543, 544, 545, 548, 593, 598, 599, 600, 601, 604, 643, 644, 645, 646, 648, 653, 660, 685, 703, 706, 713, 729, 736, 755, 761, 879, 880, 881, 974, 975, 976, 1004, 1034, 1035, 1094, 1097], "compare_rfd": [975, 976], "compare_subset": [974, 976, 1017, 1018, 1097], "compare_tip_dist": [974, 975, 982, 991, 1020, 1097], "comparison": [145, 146, 685, 690, 761, 879, 974, 1034, 1097], "compat": [116, 133, 145, 146, 231, 233, 438, 685], "compil": [405, 433, 475, 499, 526, 552, 580, 609, 633, 882], "complement": [418, 430, 448, 593, 605, 1094], "complement_map": [396, 571], "complet": [104, 106, 112, 123, 124, 223, 224, 227, 877, 1033, 1092], "complex": [227, 1099], "compliant": [379, 501, 554], "complic": [651, 1092], "compon": [682, 684, 694, 695, 696, 697, 698, 699, 829, 853, 866, 872, 1099], "compos": [84, 223, 230, 360], "composit": [112, 116, 133, 274, 867, 1091], "compound": 690, "comprehens": 233, "compress": [216, 234, 274, 909, 919, 920, 921, 943], "compresslevel": [234, 274], "comput": [0, 1, 83, 84, 88, 107, 110, 116, 124, 142, 143, 144, 145, 146, 147, 148, 151, 305, 402, 406, 472, 476, 523, 527, 577, 581, 632, 634, 667, 679, 680, 681, 685, 690, 696, 700, 701, 702, 703, 718, 742, 753, 754, 755, 756, 757, 758, 761, 762, 763, 773, 795, 796, 806, 807, 818, 829, 839, 840, 850, 852, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 982, 1018, 1020, 1030, 1056, 1094, 1097], "computation": 53, "concat": [91, 92], "concaten": [91, 232, 317, 397, 467, 518, 572, 630, 900], "concentr": [106, 112, 881], "concept": [3, 126, 700], "conceptu": [223, 756], "concern": [53, 226], "concis": 685, "conclud": 685, "concret": 324, "condens": [727, 739, 744, 749], "condensed_form": [727, 744, 749], "condit": [1, 123, 124, 880, 939], "confid": [1, 106, 111, 115, 123, 690, 877, 878, 951, 971], "confirm": [1, 753, 757, 881], "conflict": 979, "conform": 450, "confus": 867, "conjunct": 757, "connect": [116, 118, 133, 227, 951, 1000, 1007], "consens": 1030, "consensu": 1030, "consensus_tre": 1030, "conserv": [116, 122, 123, 133, 219, 397, 467, 518, 572, 630, 685, 703], "consid": [3, 84, 106, 107, 116, 122, 133, 145, 146, 222, 227, 360, 384, 419, 455, 486, 506, 538, 559, 594, 618, 639, 680, 682, 697, 757, 758, 851, 879, 880, 881, 1034, 1057], "consider": [122, 133, 324, 360, 880], "consist": [3, 15, 47, 136, 218, 222, 223, 225, 228, 229, 231, 232, 233, 369, 432, 498, 551, 608, 613, 649, 651, 880, 1001, 1021], "constant": [115, 682, 685, 739, 755, 879], "constitut": [1, 651, 669], "constrain": [853, 867], "constraint": [228, 853, 867, 874], "construct": [86, 96, 224, 233, 289, 293, 294, 295, 296, 324, 336, 340, 341, 354, 358, 359, 360, 377, 651, 666, 669, 675, 696, 703, 852, 896, 897, 898, 899, 900, 915, 924, 930, 932, 933, 937, 938, 945, 946, 979, 989, 990, 1031, 1091, 1092, 1097], "constructor": [65, 82, 85, 94, 219, 222, 223, 224, 229, 230, 232, 246, 259, 269, 379, 422, 438, 489, 501, 541, 554, 597, 613, 642, 651, 759], "consum": [65, 85, 247, 379, 438, 501, 554, 613], "consumpt": [758, 872, 899], "contain": [1, 3, 53, 65, 83, 85, 92, 98, 99, 100, 101, 102, 103, 104, 107, 143, 144, 147, 148, 151, 211, 215, 217, 219, 220, 221, 222, 223, 225, 226, 228, 229, 231, 232, 233, 234, 265, 277, 287, 289, 293, 294, 334, 336, 340, 341, 342, 352, 354, 358, 359, 360, 369, 370, 374, 377, 379, 381, 386, 399, 401, 406, 407, 410, 411, 412, 415, 419, 420, 421, 427, 429, 432, 438, 452, 457, 469, 471, 476, 477, 478, 479, 480, 483, 486, 487, 488, 494, 496, 498, 501, 503, 508, 520, 522, 527, 528, 529, 530, 531, 534, 536, 538, 539, 540, 546, 548, 549, 551, 554, 556, 561, 574, 576, 581, 582, 585, 586, 587, 590, 594, 595, 596, 602, 604, 608, 615, 620, 634, 639, 640, 641, 648, 649, 665, 667, 671, 679, 680, 685, 700, 701, 703, 717, 718, 720, 741, 742, 745, 749, 753, 754, 755, 756, 757, 758, 760, 762, 852, 863, 867, 899, 909, 910, 939, 943, 969, 973, 981, 1011, 1030, 1031, 1055, 1058, 1080, 1094, 1097], "content": [65, 83, 221, 222, 223, 224, 225, 227, 231, 234, 245, 246, 247, 374, 379, 396, 397, 400, 403, 430, 434, 467, 470, 473, 518, 521, 524, 554, 571, 572, 575, 578, 605, 606, 630, 1094], "context": [1, 53, 136, 275, 276, 680, 863, 1031], "contextu": 1057, "contigu": [225, 295, 419, 486, 538, 594, 639], "conting": [690, 874, 883, 947], "continu": [98, 99, 100, 852], "contrast": [133, 700], "contribut": [83, 133, 761, 866, 871], "control": [92, 222, 753, 755, 756, 762, 874, 877, 879, 880, 881, 897, 907, 924], "control_cat": [879, 880], "controversi": 129, "conveni": [0, 53, 93, 97, 132, 174, 175, 187, 188, 268, 272, 321, 323, 375, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 864, 865, 934, 949, 1008, 1029, 1098], "convent": [116, 145, 146, 217, 221, 224], "convers": [3, 223, 274, 739, 924], "convert": [1, 3, 16, 48, 211, 212, 213, 214, 217, 219, 221, 222, 224, 227, 229, 232, 274, 293, 294, 324, 340, 341, 358, 359, 377, 379, 402, 431, 432, 472, 497, 498, 501, 523, 550, 551, 554, 577, 607, 608, 613, 632, 649, 704, 744, 754, 926, 931, 933, 941, 942, 971, 1036], "convert_underscor": 227, "convienc": [997, 999], "coo_matrix": 701, "coord": [14, 46, 762, 763, 785, 796, 829, 840], "coord_data": 762, "coordin": [1, 3, 14, 18, 46, 51, 163, 189, 224, 230, 295, 305, 308, 316, 317, 322, 690, 701, 757, 762, 796, 829, 840, 853, 863, 866, 872, 873, 874], "copi": [65, 68, 69, 222, 229, 232, 305, 306, 307, 382, 383, 429, 453, 454, 496, 504, 505, 548, 557, 558, 604, 613, 616, 617, 648, 673, 676, 704, 722, 724, 747, 750, 875, 882, 947, 952, 953, 980, 1012, 1013, 1019, 1027, 1028, 1051, 1052, 1053], "copy_from": 305, "copyright": [222, 229], "corbet": 117, "cornish": [379, 450, 501, 554, 613], "cornwel": 133, "corr": 1, "corr_coeff": [755, 761], "correct": [110, 111, 112, 114, 118, 121, 137, 138, 222, 685, 690, 1007, 1013, 1092], "correl": [1, 696, 702, 703, 754, 755, 758, 760, 761, 853, 867, 868, 874, 877, 881, 976, 1097], "correspond": [1, 15, 47, 91, 106, 116, 133, 145, 146, 163, 189, 213, 220, 222, 223, 225, 230, 232, 267, 271, 290, 337, 355, 360, 409, 422, 438, 448, 489, 541, 584, 597, 610, 611, 642, 655, 685, 700, 708, 731, 853, 866, 867, 870, 881, 899, 904, 909, 911, 913, 914, 925, 926, 943, 945, 946, 951, 984, 989, 993, 1002, 1023, 1030], "cospeci": 761, "cost": [696, 702], "costli": 0, "could": [1, 65, 124, 220, 222, 223, 230, 234, 266, 268, 270, 272, 685, 690, 704, 753, 755, 756, 757, 758, 761, 863, 879, 938, 997, 999, 1032, 1033, 1092], "count": [0, 3, 65, 82, 85, 88, 92, 95, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 151, 216, 219, 222, 223, 229, 232, 406, 408, 409, 421, 423, 425, 476, 488, 490, 492, 527, 540, 542, 544, 581, 583, 584, 596, 598, 600, 634, 641, 643, 645, 681, 682, 685, 690, 761, 867, 873, 880, 881, 882, 899, 913, 929, 933, 939, 975, 976, 1002, 1030, 1092], "counts2": 881, "counts_001": 877, "counts_010": 877, "counts_100": 877, "counts_interv": [877, 880, 881], "coupl": 305, "covari": [133, 868], "cover": [305, 663, 1097], "coverag": [107, 115, 119, 124, 217, 218], "cprofil": 1099, "cran": [700, 753, 754, 755, 756, 757], "crd": 222, "creat": [1, 3, 13, 14, 15, 16, 34, 44, 45, 46, 47, 48, 53, 65, 82, 85, 86, 87, 91, 93, 94, 95, 96, 174, 187, 221, 222, 225, 227, 229, 231, 248, 259, 269, 274, 275, 293, 294, 295, 305, 316, 317, 321, 340, 341, 358, 359, 375, 377, 379, 428, 429, 450, 495, 496, 501, 547, 548, 554, 603, 604, 613, 647, 648, 666, 667, 669, 671, 672, 674, 675, 685, 694, 695, 703, 718, 720, 721, 723, 742, 745, 746, 748, 749, 759, 761, 796, 852, 863, 864, 883, 899, 906, 907, 913, 914, 916, 917, 919, 924, 925, 930, 931, 932, 934, 935, 937, 938, 940, 945, 946, 948, 950, 972, 973, 994, 1008, 1031, 1094, 1097, 1099], "create_cach": 994, "create_d": [883, 950], "create_format": [234, 245, 246, 247], "creation": [909, 943, 944], "creation_d": [943, 944], "credibl": 690, "criteria": [288, 320, 335, 353, 372, 879, 1026], "critic": [877, 878, 880, 881, 971], "critiqu": [114, 137], "crop": 233, "cross": 224, "cross_refer": 221, "csc": [886, 943], "csc_matrix": 943, "csr": [886, 943], "csr_matrix": 943, "csv": [217, 226, 1092], "ctaa": 224, "ctaacccccttttctcaga": 0, "ctagctagta": 221, "ctataaaaaa": 224, "ctattatact": 221, "ctc": [432, 498, 551, 608, 649], "ctcaaaagtc": [432, 498, 551, 608, 649], "ctcaaaattc": 221, "ctcttctagt": 221, "ctgtttgtta": 221, "cttcatgtat": 221, "cttccaattt": 221, "cttgacatag": 221, "cttgatgata": 221, "cuaa": 224, "cual": 231, "cuauaaaaaa": 224, "cug": 448, "cuguuuguua": 221, "cultur": 880, "cumbersom": 231, "cumul": [122, 142, 219, 220], "cuppini": 118, "curat": 233, "current": [135, 215, 217, 220, 221, 222, 223, 224, 229, 231, 232, 233, 305, 319, 360, 369, 436, 449, 611, 663, 685, 755, 840, 866, 872, 909, 943, 973, 986, 995, 996, 1001, 1091], "curti": 1, "curv": [118, 122, 129, 867, 877, 880, 881], "custom": [0, 1, 136, 233, 379, 402, 438, 439, 450, 472, 501, 523, 554, 577, 632, 863, 909, 937, 943, 1091, 1094], "custom_metr": [402, 472, 523, 577, 632], "customsequ": 450, "cutoff": [685, 1030], "cuucauguau": 221, "cuugacauag": 221, "cw": 232, "cy": 501, "cyanogen": 221, "cystein": 501, "cytokin": 880, "cytophagia": [990, 1023], "cytosin": [379, 554], "czech": 971, "d": [1, 53, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 217, 218, 224, 227, 228, 379, 501, 554, 662, 666, 671, 677, 682, 683, 684, 685, 688, 689, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 703, 715, 720, 725, 738, 745, 749, 751, 753, 754, 755, 756, 757, 761, 796, 818, 840, 853, 863, 871, 880, 881, 882, 883, 900, 915, 916, 936, 950, 952, 953, 966, 967, 969, 971, 972, 973, 974, 975, 977, 978, 980, 981, 982, 984, 985, 986, 987, 991, 997, 998, 999, 1000, 1001, 1007, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1030, 1031, 1092, 1094, 1097, 1099], "d1": [233, 1094], "d136": 233, "d143": 233, "d2": 1094, "d3": 1094, "d_": [128, 139], "d_a": 924, "d_b": 924, "d_d": 227, "d_w": 142, "d_x": 755, "d_y": 755, "daili": 233, "danger": 1, "dash": 231, "data": [1, 3, 92, 116, 118, 129, 133, 143, 145, 146, 147, 148, 151, 211, 214, 216, 217, 220, 221, 223, 225, 226, 228, 230, 231, 232, 233, 274, 277, 324, 342, 360, 369, 379, 450, 501, 554, 613, 653, 655, 673, 682, 683, 684, 685, 686, 689, 690, 692, 694, 696, 700, 702, 704, 706, 708, 722, 727, 729, 731, 747, 754, 761, 762, 784, 817, 828, 851, 852, 863, 866, 867, 871, 877, 879, 880, 881, 883, 884, 886, 893, 894, 896, 899, 904, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 925, 928, 930, 931, 932, 933, 935, 937, 938, 940, 941, 942, 943, 945, 946, 947, 948, 989, 1020, 1024, 1031, 1055, 1058, 1091, 1092, 1093, 1094, 1099], "data_fh": 908, "data_fram": 754, "data_pump": 910, "data_typ": [909, 943], "databas": [217, 218, 221, 224, 231, 233, 295, 989], "datafram": [1, 65, 90, 147, 211, 217, 218, 233, 293, 324, 340, 358, 360, 377, 379, 416, 484, 501, 535, 554, 591, 613, 637, 662, 674, 677, 685, 690, 715, 723, 725, 738, 748, 751, 753, 754, 756, 757, 758, 762, 796, 840, 852, 853, 863, 866, 867, 873, 874, 879, 880, 897, 926, 942, 989, 990, 1034, 1094], "datapoint": 129, "dataset": [148, 215, 220, 682, 690, 757, 852, 867, 872, 909, 943], "datatyp": [215, 851], "date": [221, 909, 910, 943, 944], "datetim": [943, 944], "dayhoff": 663, "db": 222, "db_xref": [221, 224], "dbsourc": 221, "dbxref": [224, 225], "ddbj": 224, "ddl": [909, 943], "ddof": [696, 702, 871, 875], "de": [221, 232], "deal": [220, 221, 273, 682, 694, 872, 1092], "debug": [107, 1057, 1068, 1099], "debug_post_st": 1099, "debug_pre_st": 1099, "debug_runtim": 1099, "debug_trac": 1099, "decemb": 223, "decid": [872, 1099], "decim": [227, 231, 1035], "declar": [228, 231], "decod": [223, 274], "decomposit": [133, 148, 214], "decompress": 274, "decor": [234, 245, 246, 247, 305, 450, 973, 1030, 1037, 1057, 1069, 1070, 1080, 1091], "decreas": 851, "deem": 867, "deep": [69, 108, 307, 382, 383, 453, 454, 504, 505, 557, 558, 613, 616, 617, 664, 676, 716, 724, 740, 750], "deepcopi": [69, 952, 953, 977, 1027, 1028], "deeper": [145, 146], "def": [219, 234, 245, 246, 247, 402, 450, 472, 523, 577, 632, 881, 1099], "default": [0, 1, 15, 19, 47, 52, 53, 65, 82, 83, 85, 92, 94, 97, 98, 99, 100, 102, 103, 107, 111, 122, 129, 133, 134, 136, 143, 147, 175, 188, 217, 222, 224, 225, 226, 227, 229, 230, 231, 234, 235, 245, 247, 260, 262, 288, 320, 323, 324, 335, 353, 360, 372, 378, 402, 419, 431, 432, 435, 436, 437, 438, 448, 449, 472, 486, 497, 498, 500, 523, 538, 550, 551, 553, 577, 594, 607, 608, 610, 611, 612, 632, 639, 649, 650, 662, 667, 671, 678, 683, 684, 685, 690, 691, 692, 694, 695, 704, 715, 718, 720, 726, 738, 742, 745, 752, 754, 755, 757, 758, 759, 796, 851, 863, 865, 871, 872, 874, 875, 882, 893, 899, 904, 907, 909, 914, 916, 919, 920, 921, 923, 924, 927, 929, 930, 931, 932, 933, 937, 939, 943, 944, 945, 946, 948, 949, 976, 1001, 1020, 1029, 1030, 1031, 1034, 1035, 1055, 1058, 1080, 1092, 1094, 1097, 1099], "default_column": 217, "default_gap_char": [83, 84, 92, 450], "default_missing_schem": [360, 373], "default_write_format": 247, "defaultdict": 925, "defer": 305, "defin": [1, 14, 18, 46, 51, 65, 92, 94, 100, 103, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 139, 142, 151, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 295, 305, 319, 360, 384, 402, 420, 421, 431, 432, 438, 439, 446, 447, 455, 472, 487, 488, 497, 498, 506, 523, 539, 540, 550, 551, 559, 577, 595, 596, 607, 608, 618, 632, 640, 641, 649, 651, 663, 668, 671, 681, 683, 684, 688, 689, 691, 692, 693, 697, 698, 699, 704, 720, 745, 755, 758, 863, 877, 907, 909, 924, 932, 943, 948, 1027, 1028, 1031, 1034, 1068, 1092, 1094, 1097, 1099], "definit": [1, 83, 112, 163, 176, 220, 221, 222, 223, 224, 225, 233, 379, 396, 397, 400, 401, 403, 410, 411, 415, 427, 430, 433, 434, 435, 436, 438, 448, 449, 450, 467, 470, 471, 473, 478, 479, 483, 494, 499, 501, 518, 521, 522, 524, 529, 530, 534, 546, 552, 554, 571, 572, 575, 576, 578, 585, 586, 590, 602, 605, 606, 609, 610, 611, 630, 663, 909, 943, 1031, 1094, 1098, 1099], "definite_char": 450, "deflin": 222, "degap": [408, 409, 583, 584, 1094], "degener": [83, 84, 163, 176, 220, 221, 222, 223, 224, 225, 379, 396, 397, 399, 400, 403, 408, 409, 410, 411, 415, 427, 430, 431, 433, 434, 435, 436, 438, 448, 449, 450, 467, 469, 470, 473, 478, 479, 483, 494, 497, 499, 501, 518, 520, 521, 524, 529, 530, 534, 546, 550, 552, 554, 571, 572, 574, 575, 578, 583, 584, 585, 586, 590, 602, 605, 606, 607, 609, 610, 611, 630, 663, 1094], "degenerate_map": [403, 450, 473, 524, 578, 1094], "degenerate_mod": 84, "degre": [106, 112, 133, 219, 690, 696, 702, 871, 878, 880], "deiman": 232, "del": [15, 19, 47, 52, 226, 431, 497, 550, 607, 852], "deleg": 956, "delet": [19, 52, 305, 994, 1010, 1038], "deleteri": 1033, "delgado": [682, 700], "delim": 904, "delimit": [225, 226, 228, 230, 233, 292, 339, 357, 376, 703, 904, 908, 911, 945], "delta": [133, 694, 695, 871], "demograph": 1093, "demonstr": [89, 90, 234, 414, 416, 482, 484, 533, 535, 589, 591, 636, 637], "dempqsv": [432, 498, 551, 608, 649], "demultiplex": 851, "den": 700, "denomin": [683, 700], "denominator_col": 683, "denominator_idx": [683, 684], "denot": [112, 133, 137, 141, 142, 222, 685, 690, 753, 756, 757], "dens": [216, 899, 902, 907, 910, 919, 920, 921, 930, 941, 942, 950], "densiti": 946, "dep": 877, "depend": [20, 111, 114, 115, 116, 133, 143, 145, 146, 147, 222, 223, 232, 245, 246, 247, 274, 409, 584, 655, 708, 731, 755, 757, 759, 818, 872, 909, 952, 953, 976, 977, 980, 1024, 1030, 1057, 1068, 1092, 1097, 1099], "deprec": [104, 105, 116, 131, 133, 145, 146, 151, 415, 427, 483, 494, 534, 546, 590, 602, 685, 695], "depth": [133, 852, 877, 880, 881, 1024, 1097], "deriv": [99, 100, 102, 103, 114, 221, 419, 486, 538, 594, 613, 639, 691, 692, 700, 880, 1031], "derives_from": 225, "desc": 613, "descend": [95, 133, 322, 951, 981, 993, 1001, 1010, 1017, 1018, 1021, 1024, 1097], "describ": [0, 1, 84, 98, 101, 106, 108, 109, 112, 115, 116, 119, 120, 121, 123, 124, 125, 126, 127, 133, 134, 137, 145, 146, 151, 216, 221, 222, 223, 224, 225, 228, 229, 231, 232, 292, 339, 357, 360, 373, 376, 419, 422, 486, 489, 538, 541, 594, 597, 613, 639, 642, 673, 696, 702, 703, 722, 739, 747, 755, 761, 873, 899, 905, 909, 943, 944, 993, 1031, 1093, 1094, 1097], "descript": [53, 107, 116, 122, 128, 139, 143, 145, 146, 147, 215, 217, 222, 223, 224, 225, 227, 229, 231, 233, 277, 324, 342, 655, 708, 731, 943, 974, 1030, 1094, 1097], "description_newline_replac": [222, 223], "descriptor": [224, 873, 1051, 1052, 1053], "deseri": [703, 853], "design": [1, 148, 215, 216, 221, 231, 360, 703, 879], "desir": [118, 123, 217, 226, 872, 926, 938, 1014, 1099], "destin": 613, "detach": 3, "detail": [53, 91, 92, 104, 105, 133, 148, 150, 151, 221, 222, 223, 224, 225, 229, 230, 232, 233, 234, 277, 324, 342, 360, 449, 613, 655, 708, 731, 754, 758, 863, 866, 867, 874, 1031, 1092], "detect": [222, 224, 231, 267, 271, 685, 755, 881, 896], "determin": [1, 67, 70, 79, 89, 90, 116, 133, 143, 145, 146, 147, 226, 234, 263, 264, 274, 278, 284, 287, 291, 325, 331, 334, 338, 343, 349, 352, 356, 360, 361, 367, 369, 370, 381, 384, 393, 410, 411, 412, 413, 414, 415, 416, 418, 439, 445, 452, 455, 464, 478, 479, 480, 481, 482, 483, 484, 503, 506, 515, 529, 530, 531, 532, 533, 534, 535, 536, 556, 559, 568, 585, 586, 587, 588, 589, 590, 591, 593, 615, 618, 627, 635, 636, 637, 660, 685, 713, 736, 757, 761, 851, 872, 877, 879, 880, 884, 899, 1030, 1099], "determinist": [117, 753, 757], "develop": [1, 20, 148, 151, 221, 231, 245, 246, 247, 685, 1031, 1091, 1099], "deviat": [754, 871, 874, 875, 878], "df": [217, 218, 233, 674, 690, 723, 748, 753, 754, 757, 863, 878, 942], "di": [118, 1094], "diag": 921, "diagnos": 1099, "diagon": [215, 742, 749, 921], "diagram": 295, "dict": [53, 65, 86, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 174, 175, 187, 188, 221, 224, 246, 266, 267, 268, 270, 271, 272, 295, 316, 320, 321, 323, 360, 373, 375, 378, 379, 406, 421, 428, 435, 436, 437, 476, 488, 495, 500, 501, 527, 540, 547, 553, 554, 581, 596, 603, 610, 611, 612, 613, 634, 641, 647, 650, 651, 666, 672, 675, 678, 721, 726, 746, 752, 755, 758, 818, 864, 865, 894, 895, 909, 910, 911, 914, 924, 925, 932, 934, 943, 948, 949, 989, 990, 993, 1002, 1008, 1022, 1029, 1057, 1094, 1099], "dict_of_metadata": 895, "dictionari": [86, 89, 94, 96, 105, 232, 233, 295, 306, 307, 316, 320, 414, 482, 533, 589, 613, 636, 666, 675, 755, 907, 989], "did": [107, 222, 230, 266, 270, 275, 1099], "didn": [222, 1099], "diet": 879, "differ": [0, 1, 70, 83, 84, 86, 98, 99, 100, 111, 116, 122, 134, 137, 139, 145, 146, 218, 220, 222, 223, 229, 232, 233, 234, 324, 381, 384, 393, 397, 398, 402, 417, 418, 423, 424, 425, 426, 429, 435, 438, 445, 452, 455, 464, 467, 468, 472, 485, 490, 491, 492, 493, 496, 503, 506, 515, 518, 519, 523, 537, 542, 543, 544, 545, 548, 556, 559, 568, 572, 573, 577, 592, 593, 598, 599, 600, 601, 604, 610, 615, 618, 627, 630, 631, 632, 638, 643, 644, 645, 646, 648, 655, 680, 685, 690, 703, 708, 731, 753, 756, 757, 761, 785, 840, 852, 866, 867, 872, 880, 881, 946, 974, 975, 1034, 1035, 1051, 1052, 1053, 1094, 1097], "differenti": [685, 690], "difficult": 1, "digit": 231, "dim": 220, "dimens": [77, 163, 176, 220, 228, 229, 661, 683, 687, 691, 692, 714, 737, 757, 853, 862, 863, 872, 873], "dimension": [1, 213, 220, 673, 684, 697, 698, 699, 704, 722, 739, 747, 852, 866, 873, 874, 880, 881, 935, 1095], "direct": [231, 233, 292, 339, 357, 376, 867, 951], "direct_io": [904, 944, 945], "direction": 1035, "directli": [65, 82, 85, 231, 379, 438, 501, 554, 613, 679, 685, 761, 944, 945, 1057, 1099], "dirichilet": 690, "dirichlet": 690, "disabl": [1, 116, 143, 145, 146, 147, 1099], "disallow": [227, 232, 755], "disallow_negative_branch_length": 1031, "discard": [224, 755, 907], "discov": [1, 135, 979], "discoveri": 1, "discrep": 112, "discret": 141, "discuss": [133, 136, 145, 146, 231, 1099], "diseas": [685, 755, 897], "disjoint": [900, 1030], "disjointiderror": [896, 900], "disk": [222, 360, 704], "dism": 696, "disperison": 757, "dispers": 757, "displai": [221, 406, 429, 438, 476, 496, 527, 548, 581, 604, 634, 648, 758, 853], "disrupt": [404, 474, 525, 579, 1094], "dissimilar": [144, 147, 226, 652, 653, 655, 660, 661, 662, 664, 665, 667, 670, 671, 673, 676, 677, 696, 703, 704, 705, 706, 708, 713, 714, 715, 716, 717, 718, 719, 720, 722, 724, 725, 728, 729, 731, 736, 737, 738, 740, 741, 743, 745, 747, 750, 751], "dissimilaritymatrix": [215, 226, 651, 653, 655, 660, 662, 664, 665, 667, 671, 672, 674, 676, 677, 678, 696, 703, 727, 729, 731, 736, 738, 740, 741, 745, 748, 750, 751, 759], "dist": [976, 991], "dist_f": 976, "distanc": [1, 53, 133, 144, 145, 146, 147, 148, 150, 151, 212, 215, 226, 227, 423, 425, 490, 492, 542, 544, 598, 600, 643, 645, 651, 662, 665, 671, 673, 677, 683, 696, 760, 761, 863, 866, 867, 869, 872, 874, 951, 965, 966, 974, 976, 991, 1013, 1020, 1031, 1091, 1097], "distance_filt": 53, "distance_from_r": 976, "distance_from_r_squar": 976, "distance_matrix": [753, 754, 756, 757, 869, 872], "distancematrix": [147, 148, 151, 212, 215, 226, 674, 679, 696, 703, 704, 723, 753, 754, 755, 756, 757, 758, 759, 761, 863, 872, 1020, 1031], "distant": 991, "distinct": [83, 130, 131, 141, 680, 703], "distinguish": [50, 112, 133], "distort": 682, "distribut": [106, 115, 122, 221, 690, 697, 759, 872, 877, 878, 880, 881, 939], "div": 233, "diverg": 1, "divers": [703, 882, 1091], "divid": [219, 700, 869, 871, 875, 899], "divis": [438, 700, 875], "dj": 222, "dm": [215, 655, 662, 671, 674, 677, 703, 708, 715, 720, 723, 725, 731, 738, 745, 748, 749, 751, 753, 754, 757, 758, 863, 1031], "dm1": 758, "dm2": 758, "dm_fh": 703, "dm_from_np": 703, "dmp": 989, "dna": [0, 3, 17, 65, 66, 67, 68, 69, 70, 75, 77, 80, 82, 83, 85, 86, 88, 90, 91, 92, 94, 95, 96, 99, 102, 104, 219, 221, 222, 223, 224, 225, 229, 230, 232, 438, 450, 467, 469, 470, 471, 473, 474, 477, 478, 479, 480, 483, 484, 486, 494, 498, 499, 518, 520, 521, 522, 524, 525, 528, 529, 530, 531, 534, 535, 538, 546, 551, 552, 554, 571, 572, 574, 575, 576, 578, 579, 582, 583, 584, 585, 586, 587, 590, 591, 593, 594, 602, 605, 606, 608, 609, 613, 630, 637, 639, 649, 704, 1092, 1094], "dna_seq": [221, 222, 224], "dnaful": 663, "do": [1, 82, 85, 129, 213, 215, 220, 222, 229, 231, 234, 274, 379, 384, 426, 455, 493, 501, 506, 545, 554, 559, 601, 613, 618, 646, 680, 685, 755, 758, 796, 874, 886, 907, 930, 939, 971, 984, 1014, 1015, 1097, 1099], "do_someth": 1099, "do_something_awesom": 1099, "do_something_els": 1099, "doc": [147, 219, 221, 222, 229, 231, 292, 295, 339, 357, 360, 373, 376, 673, 704, 722, 727, 739, 747, 943, 1030], "docstr": [277, 324, 342], "doctest": 909, "document": [1, 72, 150, 216, 222, 224, 229, 230, 265, 685, 863, 883, 909, 943, 950, 951, 1092, 1096], "doe": [65, 82, 83, 85, 92, 95, 104, 116, 133, 217, 219, 220, 222, 223, 225, 227, 229, 232, 274, 287, 334, 352, 370, 397, 438, 439, 445, 448, 467, 518, 572, 630, 663, 673, 680, 703, 722, 744, 747, 753, 755, 757, 796, 872, 880, 881, 903, 925, 926, 943, 967, 976, 987, 1000, 1013, 1020, 1023, 1030, 1034, 1092], "doesn": [92, 222, 231, 373, 448, 697, 701, 866, 872, 876, 1013, 1032, 1098], "doi": [53, 104, 221, 223, 696, 702, 1031], "domain": [232, 501, 989, 1023], "domin": [108, 114, 121, 126, 137, 138, 139, 142], "dominance_": 106, "domrachev": 233, "don": [1, 53, 92, 222, 231, 408, 409, 583, 584, 683, 685, 758, 874, 877, 881, 975, 976, 1013, 1031], "done": [84, 685, 757, 784, 817, 828, 886], "doubl": [107, 110, 124, 132, 266, 270, 866, 872], "doubleton": [1, 110, 111, 113, 115, 132], "doubt": 231, "download": [221, 224, 233], "dqyhrykedvgimkdqnmdsyrfsiswprilpkgklsgginhegikyynnli": 221, "dr": 221, "draw": [690, 877, 879, 880, 881, 969, 1012], "draw_mod": [877, 881], "drawn": [690, 759, 877, 880, 881], "driver": [1, 114], "drop": [305, 369, 386, 457, 508, 561, 620, 758, 852, 867, 907, 1010, 1030], "drop_all_miss": 369, "drop_all_uniqu": 369, "drop_missing_valu": [288, 291, 335, 338, 353, 356], "drop_zero_vari": 369, "dt": 221, "dt_rich": 899, "dtype": [0, 1, 17, 65, 70, 82, 83, 84, 85, 88, 91, 92, 94, 95, 219, 220, 222, 223, 229, 230, 232, 360, 377, 396, 397, 399, 400, 401, 407, 424, 426, 427, 430, 432, 467, 469, 470, 471, 477, 491, 493, 494, 498, 518, 520, 521, 522, 528, 543, 545, 546, 549, 551, 571, 572, 574, 575, 576, 582, 599, 601, 602, 605, 608, 613, 630, 644, 646, 649, 685, 704, 749, 753, 757, 852, 883, 923, 927, 941, 950, 1022, 1094], "due": [106, 131, 227, 319, 694, 695, 754, 757, 867, 880], "dump": [233, 1097, 1099], "dunn": 221, "duplic": [92, 151, 223, 231, 232, 319, 432, 498, 551, 608, 649, 665, 717, 741, 1054], "duplicatenodeerror": [116, 133, 143, 145, 146, 147, 979], "duplicateregistrationerror": [245, 246, 247], "dure": [92, 222, 296, 397, 467, 518, 572, 630, 757, 924, 944, 945, 1055], "dx": 118, "e": [0, 1, 53, 66, 77, 84, 88, 89, 95, 112, 117, 118, 119, 120, 121, 122, 127, 128, 133, 134, 135, 136, 137, 139, 141, 145, 146, 147, 148, 151, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 295, 318, 324, 360, 373, 374, 397, 405, 406, 414, 448, 467, 475, 476, 482, 501, 518, 526, 527, 533, 536, 549, 572, 580, 581, 589, 606, 613, 630, 633, 634, 636, 651, 655, 662, 671, 677, 680, 685, 690, 700, 701, 703, 704, 708, 715, 720, 725, 727, 731, 738, 745, 749, 751, 753, 754, 755, 756, 757, 863, 869, 870, 879, 880, 882, 900, 904, 909, 926, 939, 943, 951, 952, 953, 966, 967, 969, 971, 972, 973, 977, 978, 980, 981, 982, 984, 985, 986, 987, 991, 995, 997, 998, 999, 1000, 1001, 1007, 1011, 1012, 1013, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1030, 1031, 1035, 1054, 1057, 1092, 1094, 1097, 1099], "e1004075": [696, 702], "e157": 133, "e_": [691, 692], "e_1": [691, 692], "e_d": 139, "e_h": 134, "e_i": 692, "e_matrix": 870, "each": [0, 1, 3, 13, 14, 15, 18, 34, 45, 46, 47, 51, 53, 65, 75, 80, 83, 84, 88, 91, 94, 98, 99, 100, 101, 102, 103, 104, 116, 129, 143, 145, 146, 147, 148, 151, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 295, 306, 307, 316, 360, 374, 379, 389, 394, 397, 403, 406, 419, 421, 436, 449, 460, 465, 467, 473, 476, 486, 488, 501, 511, 516, 518, 524, 527, 538, 540, 564, 569, 572, 578, 581, 594, 596, 611, 613, 623, 628, 630, 634, 639, 641, 651, 655, 665, 667, 680, 685, 687, 690, 694, 695, 697, 698, 699, 700, 703, 708, 717, 718, 731, 741, 742, 753, 754, 755, 756, 757, 758, 761, 762, 763, 773, 774, 785, 795, 796, 806, 807, 829, 839, 840, 850, 851, 852, 853, 863, 867, 868, 870, 871, 872, 874, 877, 880, 881, 899, 907, 909, 920, 926, 928, 940, 943, 946, 1024, 1030, 1092, 1094, 1099], "earlier": 1099, "earth": 148, "earthmicrobiom": 148, "easi": [222, 223, 231], "easier": [295, 651], "easili": [226, 1094], "ebi": [98, 101, 221, 224, 295], "ec_numb": 221, "ecoli": [218, 896], "ecolog": [1, 114, 852, 867, 872], "ecologi": [1, 114, 116, 117, 125, 126, 137, 142, 685, 753, 754, 755, 756, 852, 866, 867, 872, 873, 874], "ecologist": 866, "ed": [118, 220], "edg": [227, 761, 866, 969, 1022], "edit": [231, 755, 873], "editor": 222, "edu": [107, 111, 219, 222, 227, 229, 1030], "educ": [0, 879], "edward": 224, "eeb": [107, 111], "eeeee": 232, "eeeeeeee": 232, "eeeeeeeeeeh": 232, "eeeeeeeehhh": 232, "effect": [53, 104, 106, 112, 114, 121, 136, 145, 146, 231, 274, 432, 498, 551, 608, 649, 662, 715, 738, 877, 879, 880, 881], "effici": [0, 3, 226, 744], "efficiencywarn": 882, "effort": 224, "egozcu": [682, 691, 692, 696, 700, 702], "eh": 116, "eifcyilkinitilqfsitengmnefndatlpveeallntyridyyyrhlyi": 221, "eigendecomposit": [757, 872], "eigenvalu": [757, 853, 866, 872, 874], "eigenvector": [757, 867, 872], "eigh": [757, 872], "eight": 881, "eigval": [228, 853], "either": [1, 65, 72, 92, 94, 98, 99, 100, 133, 217, 231, 232, 245, 246, 247, 360, 409, 419, 450, 486, 538, 584, 594, 639, 681, 755, 757, 851, 863, 866, 871, 879, 881, 897, 898, 924, 932, 940, 1030], "elem": [909, 943], "element": [15, 47, 53, 226, 274, 655, 667, 687, 691, 692, 708, 718, 731, 742, 840, 863, 866, 870, 871, 875, 878, 880, 881, 882, 883, 886, 909, 912, 928, 943, 1054], "elementwis": 869, "elev": 754, "ellaps": 951, "elong": 1025, "els": [32, 33, 227, 234, 246, 266, 270, 380, 433, 451, 499, 502, 552, 555, 609, 613, 614, 868, 907, 931, 946, 973], "elsevi": [755, 852, 866, 867, 874], "elsewher": [116, 143, 145, 146, 147], "emb": [174, 175, 187, 188], "embed": [852, 1091], "embedding_ptr": 220, "embeddingvector": [200, 211, 212, 213, 214], "embl": [224, 233, 295, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650], "embl_gen": 221, "embl_str": 221, "emboss": [98, 101], "emboss_needl": 98, "emboss_wat": 101, "embptr": 220, "embryophyta": 221, "emdptr": 220, "emorg": 218, "emperor": 863, "emploi": 111, "empti": [20, 66, 89, 117, 218, 222, 225, 229, 263, 264, 406, 414, 476, 482, 527, 533, 581, 589, 634, 636, 665, 685, 717, 741, 879, 886, 918, 932, 935, 936, 973, 1023, 1034, 1092], "en": [106, 114, 121, 222, 223, 232, 1031], "ena": [221, 224], "enabl": [3, 943, 1057, 1099], "encod": [3, 19, 52, 162, 173, 186, 199, 210, 215, 222, 223, 230, 234, 235, 274, 360, 700, 852], "encode_miss": [293, 294, 340, 341, 358, 359, 377], "encount": [1, 114, 137, 231, 982, 984, 991], "encourag": 880, "end": [0, 53, 98, 99, 100, 101, 102, 103, 104, 163, 217, 218, 221, 222, 223, 224, 225, 232, 233, 295, 305, 316, 322, 398, 417, 448, 468, 485, 519, 537, 573, 592, 631, 638, 1013], "endpoint": [881, 1020], "enforc": [222, 360, 613], "engel": 127, "engin": 1058, "english": [227, 755], "enough": [114, 222, 227, 881], "enrol": 881, "ens_": 114, "ens_pi": 114, "ensur": [1, 53, 84, 116, 145, 146, 234, 379, 501, 554, 653, 687, 690, 694, 706, 727, 729, 939, 972, 1034], "entail": [116, 143, 145, 146, 147], "entir": [1, 15, 16, 47, 48, 53, 65, 379, 501, 554, 613, 886, 943, 947], "entiti": [141, 295, 943], "entrez": 233, "entri": [118, 215, 216, 221, 233, 851, 904, 907, 929, 930, 945, 946, 950], "entropi": [84, 136], "enumer": 53, "env": [754, 903], "environ": [107, 145, 146, 697, 867, 941], "environment": [133, 754, 852, 867, 872, 873], "enzym": 129, "eq": [869, 870], "equal": [1, 3, 15, 47, 70, 79, 84, 105, 106, 107, 141, 145, 146, 147, 222, 278, 284, 296, 302, 308, 314, 325, 331, 343, 349, 361, 367, 384, 393, 439, 445, 455, 464, 506, 515, 559, 568, 613, 618, 627, 651, 653, 660, 680, 697, 706, 713, 729, 736, 753, 755, 756, 757, 759, 761, 851, 866, 871, 872, 875, 880, 881, 882, 884, 905, 974, 1030, 1034, 1035], "equat": [110, 111, 117, 129, 755], "equit": [106, 134, 139], "equival": [77, 114, 116, 121, 133, 136, 223, 231, 382, 383, 406, 408, 429, 430, 436, 449, 453, 454, 476, 496, 504, 505, 527, 548, 557, 558, 581, 583, 604, 605, 611, 616, 617, 634, 648, 662, 677, 680, 685, 715, 725, 738, 751, 755, 852, 1094], "erb": [696, 702], "eredi": 118, "erik": [53, 104], "error": [1, 84, 116, 129, 133, 143, 145, 146, 147, 222, 223, 229, 231, 234, 274, 319, 360, 374, 432, 498, 551, 608, 649, 753, 755, 757, 877, 881, 948, 1036, 1092], "escap": 227, "especi": [215, 222, 231, 761, 874], "essenti": 224, "esti": 115, "estim": [53, 106, 107, 110, 111, 115, 117, 119, 122, 123, 124, 129, 135, 690, 871, 879, 880, 881], "estrang": 227, "esty_ci": 119, "et": [685, 690, 761, 883, 950], "etc": [93, 97, 118, 174, 175, 187, 188, 222, 223, 231, 266, 267, 268, 270, 271, 272, 292, 295, 321, 323, 339, 357, 375, 376, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 651, 672, 678, 721, 726, 746, 752, 864, 865, 872, 874, 926, 934, 949, 951, 1008, 1029, 1093, 1094], "euclidean": [212, 682, 703, 754, 866, 872, 874], "euclidian": 872, "eudicotyledon": 221, "eukaryota": 221, "euryarchaeota": [990, 1023], "evalu": [116, 133, 217, 218, 386, 457, 508, 561, 620, 703, 754, 851, 877, 973, 1010, 1013, 1097, 1099], "evaul": 234, "even": [98, 99, 100, 120, 127, 134, 139, 222, 227, 448, 753, 757, 881, 1024], "evenli": [697, 863], "everi": [107, 231, 233, 369, 684, 697, 698, 699, 700, 701, 758, 972, 987, 993], "evid": [221, 227], "evmltdiprlhindpimk": 232, "evolut": [222, 227, 229, 760, 761, 971, 1030, 1031], "evolutionari": [116, 651, 663, 951, 1031], "ex": 1099, "exact": [116, 133, 143, 145, 146, 147, 231, 295, 397, 467, 518, 572, 630, 757, 872, 1092], "exactli": [65, 82, 85, 91, 101, 102, 103, 222, 223, 229, 234, 293, 340, 358, 360, 384, 393, 439, 455, 464, 506, 515, 559, 568, 618, 627, 701, 863, 969], "examin": [1058, 1099], "exampl": [0, 1, 3, 13, 14, 15, 17, 18, 19, 45, 46, 47, 50, 51, 52, 65, 66, 67, 68, 69, 70, 75, 77, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 116, 145, 146, 147, 163, 176, 226, 231, 234, 245, 246, 247, 275, 295, 305, 317, 322, 360, 379, 380, 381, 384, 386, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 438, 439, 447, 448, 449, 450, 451, 452, 455, 457, 460, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 501, 502, 503, 506, 508, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 554, 555, 556, 559, 561, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 618, 620, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 651, 662, 663, 666, 669, 671, 674, 677, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 704, 715, 720, 723, 725, 738, 745, 748, 749, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 851, 863, 872, 879, 880, 881, 882, 896, 897, 898, 899, 900, 902, 903, 904, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 931, 932, 933, 935, 937, 938, 939, 940, 941, 942, 943, 945, 946, 948, 952, 953, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1056, 1092, 1093, 1094, 1095, 1097, 1099], "example_protein_embed": 220, "example_t": [216, 902, 921, 922, 923, 926, 927, 941, 942], "exce": [222, 229], "exceed": 231, "excel": [223, 231], "except": [1, 222, 227, 228, 229, 231, 246, 448, 665, 717, 741, 756, 867, 979, 1030, 1032, 1033, 1068, 1098], "excit": 1099, "exclud": [230, 700, 742, 749, 1016], "exclude_absent_taxa": 975, "exclus": [234, 295, 305, 316, 398, 417, 468, 485, 519, 537, 573, 592, 631, 638, 685], "execut": [234, 774, 818, 1058, 1080, 1099], "exercis": 879, "exhibit": 866, "exist": [0, 94, 107, 112, 216, 227, 234, 245, 246, 247, 263, 264, 448, 651, 663, 667, 703, 718, 742, 755, 758, 863, 903, 909, 915, 951, 968, 976, 981, 983, 1014, 1055, 1080, 1094], "exon": [225, 295, 422, 489, 541, 554, 597, 613, 642], "exp": [136, 684, 689, 696, 702], "expand": [761, 926, 1023], "expect": [1, 148, 217, 234, 262, 379, 501, 554, 690, 691, 692, 703, 761, 866, 867, 874, 899, 908, 909, 924, 943, 1022, 1099], "expens": 886, "experi": [0, 135, 221, 224, 231, 685, 690, 880], "experienc": 881, "experiment": [221, 757, 1093], "explain": [224, 225, 228, 762, 796, 840, 852, 853, 866, 872, 874], "explan": [866, 867], "explanatori": [761, 852, 853, 867, 874], "explicit": 223, "explicitli": [133, 229, 231, 432, 498, 551, 608, 649, 852], "explor": [1, 144, 852], "exploratori": 1, "expon": [227, 699], "exponenti": 136, "export": 231, "expos": 909, "express": [142, 405, 433, 475, 499, 526, 552, 580, 609, 633, 690, 696, 702, 880, 1094], "ext": [292, 339, 357, 376], "extend": [0, 53, 82, 92, 98, 99, 100, 101, 102, 103, 116, 880, 968, 981, 1030, 1092], "extens": [221, 231, 292, 339, 357, 376], "extern": 227, "extinct": 116, "extra": [233, 234, 753, 754, 756, 757, 818], "extract": [655, 690, 703, 704, 708, 731, 753, 757, 867, 971, 1094], "extrapol": [123, 124, 877], "extrem": 755, "f": [1, 53, 92, 108, 123, 133, 148, 216, 217, 218, 220, 223, 227, 230, 232, 233, 275, 501, 755, 756, 757, 867, 870, 877, 880, 898, 899, 909, 932, 935, 943, 945, 946, 952, 953, 966, 967, 969, 971, 972, 973, 977, 978, 980, 981, 982, 984, 985, 986, 987, 991, 997, 998, 999, 1000, 1001, 1007, 1011, 1012, 1013, 1016, 1017, 1018, 1020, 1021, 1025, 1026, 1027, 1028, 1030, 1097], "f_1": [107, 110, 115, 119, 135], "f_2": [110, 115], "f_i": 107, "f_onewai": 685, "fabacea": 221, "fabal": 221, "fabid": 221, "facilit": [116, 145, 146, 148, 215, 727, 852, 877, 979, 1031], "fact": 448, "factor": [133, 145, 146, 753, 756, 761, 867, 881], "factori": [234, 245, 246, 247, 259, 269], "fail": [116, 117, 133, 143, 145, 146, 147, 319, 757, 877, 1057, 1058, 1099], "fail_callback": [1058, 1099], "fail_f": 1099, "failur": [107, 1058, 1099], "fairli": 761, "faith": [1, 116, 133, 703], "faith_pd": [1, 133], "fall": [118, 122, 133, 146, 851], "fals": [1, 32, 33, 53, 66, 67, 68, 69, 70, 82, 83, 85, 88, 89, 90, 91, 95, 98, 99, 100, 110, 111, 112, 114, 116, 121, 133, 136, 137, 138, 143, 145, 146, 147, 163, 176, 217, 220, 221, 222, 223, 224, 225, 227, 230, 245, 246, 247, 274, 275, 288, 291, 293, 294, 295, 305, 317, 318, 335, 338, 340, 341, 353, 356, 358, 359, 369, 377, 379, 380, 381, 382, 384, 386, 393, 396, 397, 399, 400, 401, 403, 406, 407, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 448, 449, 450, 451, 452, 453, 455, 457, 464, 467, 469, 470, 471, 473, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 503, 504, 506, 508, 515, 518, 520, 521, 522, 524, 527, 528, 529, 530, 531, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 555, 556, 557, 559, 561, 568, 571, 572, 574, 575, 576, 578, 581, 582, 584, 585, 586, 587, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 618, 620, 627, 630, 634, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 652, 653, 660, 662, 685, 690, 696, 702, 705, 706, 713, 715, 728, 729, 736, 738, 742, 744, 755, 758, 761, 762, 763, 785, 796, 829, 872, 874, 877, 879, 880, 882, 899, 906, 907, 910, 918, 919, 920, 921, 929, 930, 932, 936, 939, 941, 942, 943, 946, 948, 969, 974, 975, 978, 986, 992, 995, 996, 1001, 1009, 1021, 1023, 1024, 1026, 1035, 1057, 1080, 1094, 1097, 1099], "famili": 1, "far": 866, "farthest": 1013, "fasffbf": 223, "fast": [116, 145, 146, 762, 872, 924], "fasta": [93, 97, 223, 225, 230, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 1092], "fasta_fl": 222, "fasta_format": 222, "faster": [1, 116, 145, 146, 148, 406, 436, 449, 476, 527, 581, 611, 634, 757, 872, 1004], "fastq": [93, 97, 230, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 1092], "fastq_format": 223, "favor": [104, 695], "fc": 690, "fd": [116, 1056], "fdr_bh": [685, 690], "featur": [1, 118, 130, 214, 216, 222, 225, 231, 232, 295, 305, 308, 317, 319, 320, 322, 360, 379, 501, 554, 613, 682, 685, 690, 700, 853, 862, 866, 867, 873, 874, 939, 1035, 1093, 1094, 1095], "feature_t": 224, "fecal": 881, "federhen": 233, "fee": [222, 229], "felsenstein": [222, 229, 1097], "fernand": 690, "fernandez": [682, 694], "ferr": 224, "fetch": [305, 939, 1097], "fetureid": 231, "few": [106, 116, 145, 146, 148, 909, 943, 1092, 1097, 1099], "fewer": [107, 229, 880, 881], "fff": 223, "ffffx": 223, "ffllssssyi": 438, "fglfmeqlttgdysksmrrivknrlpkfskfesslvngsfdfiginyysssi": 221, "fh": [217, 218, 219, 222, 223, 224, 225, 229, 230, 232, 233, 234, 245, 246, 247], "field": [1, 218, 223, 230, 438, 852, 909, 943], "fifth": 222, "fig": [1, 671, 720, 745, 863], "figur": [671, 720, 745, 863], "file": [93, 97, 174, 175, 187, 188, 215, 216, 217, 218, 219, 220, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 246, 259, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 292, 321, 323, 339, 357, 360, 373, 375, 376, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 671, 672, 678, 685, 703, 720, 721, 726, 745, 746, 752, 784, 817, 828, 863, 864, 865, 879, 883, 896, 897, 898, 899, 900, 904, 908, 909, 911, 915, 924, 930, 932, 933, 934, 937, 938, 943, 944, 945, 946, 949, 950, 971, 1008, 1029, 1055, 1056, 1091, 1097], "fileformaterror": 234, "filehandl": [93, 97, 174, 175, 187, 188, 234, 245, 246, 247, 266, 267, 268, 270, 271, 272, 274, 275, 321, 323, 375, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 864, 865, 934, 949, 1008, 1029], "filenam": 1055, "filepath": [93, 97, 174, 175, 187, 188, 266, 267, 268, 270, 271, 272, 274, 292, 321, 323, 339, 357, 373, 375, 376, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 758, 864, 865, 934, 949, 1008, 1029], "filesentinel": [234, 245, 247], "filter": [53, 84, 104, 230, 286, 287, 333, 334, 351, 352, 360, 369, 370, 400, 470, 521, 575, 758, 897, 898, 939, 1023, 1099], "filter_column": 370, "filter_f": 1023, "filter_fn": 907, "filter_id": [288, 335, 353, 369, 372], "final": [232, 761, 899, 944, 945, 1099], "find": [0, 117, 399, 401, 404, 407, 417, 419, 424, 426, 427, 469, 471, 474, 477, 485, 486, 491, 493, 494, 520, 522, 525, 528, 537, 538, 543, 545, 546, 549, 574, 576, 579, 582, 592, 594, 599, 601, 602, 638, 639, 644, 646, 754, 757, 761, 867, 881, 920, 966, 967, 979, 981, 982, 985, 986, 987, 992, 994, 995, 996, 997, 999, 1000, 1007, 1011, 1016, 1025, 1027, 1028, 1054], "find_al": [984, 986, 987], "find_by_func": [984, 985, 987], "find_by_id": [984, 985, 986], "find_motif": [419, 486, 538, 594, 639, 1094], "find_with_regex": [419, 486, 538, 594, 639, 1094], "fine": 946, "finit": [112, 114, 121, 137, 138], "firmicut": [926, 989, 990, 1023], "first": [1, 3, 50, 53, 98, 99, 100, 101, 102, 103, 104, 107, 116, 145, 146, 152, 163, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 247, 317, 322, 417, 419, 435, 436, 448, 485, 486, 537, 538, 592, 594, 610, 613, 638, 639, 655, 683, 684, 685, 690, 697, 708, 731, 753, 755, 785, 840, 852, 868, 877, 880, 904, 915, 945, 971, 975, 984, 985, 993, 1023, 1024, 1068, 1092, 1097, 1099], "fish": 852, "fisher": 117, "fit": [129, 690, 851, 853, 874, 1098], "five": [222, 233, 671, 685, 720, 745, 1031], "fix": [123, 226, 229], "fl": 222, "flag": [233, 1097], "flat": [224, 419, 486, 538, 594, 639], "flatfil": 221, "flatten": 871, "float": [84, 88, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 139, 142, 143, 145, 146, 147, 148, 151, 215, 217, 224, 226, 227, 231, 360, 377, 402, 408, 409, 423, 425, 472, 490, 492, 523, 542, 544, 577, 583, 584, 598, 600, 632, 643, 645, 667, 669, 680, 681, 685, 690, 694, 695, 699, 702, 703, 704, 718, 742, 755, 757, 759, 761, 774, 818, 863, 878, 880, 881, 882, 886, 909, 910, 912, 913, 924, 940, 943, 951, 966, 974, 975, 976, 981, 982, 991, 1022, 1030, 1034], "float32": [215, 220, 757, 941], "float64": [1, 92, 215, 220, 397, 467, 518, 572, 630, 685, 749, 757, 852, 909, 943], "flush": 274, "fmet": 448, "fn": 1055, "focu": 234, "focus": [360, 874], "fold": [690, 1092], "folder": 1055, "follow": [1, 89, 90, 92, 104, 111, 116, 117, 133, 145, 146, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 295, 360, 379, 386, 414, 416, 457, 482, 484, 501, 508, 533, 535, 554, 561, 589, 591, 613, 620, 636, 637, 655, 663, 683, 684, 685, 688, 689, 691, 692, 693, 697, 699, 700, 703, 708, 731, 753, 754, 755, 757, 758, 762, 863, 866, 881, 970, 1007, 1058, 1092, 1097, 1099], "foo": [225, 231, 305, 613, 886, 899, 900, 909, 910, 925, 935, 943, 945, 946, 1056, 1099], "foobar": [900, 1099], "foral": [688, 689], "foraminifera": 108, "ford": 133, "form": [1, 65, 98, 276, 655, 704, 708, 727, 731, 749, 894, 895, 904, 908, 945, 1022], "formal": [223, 233, 682], "format": [3, 45, 93, 97, 174, 175, 187, 188, 248, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 277, 292, 295, 321, 323, 339, 342, 357, 360, 373, 375, 376, 378, 428, 433, 437, 438, 446, 495, 499, 500, 547, 552, 553, 603, 609, 612, 647, 650, 672, 673, 678, 704, 721, 722, 726, 727, 739, 744, 746, 747, 752, 784, 817, 828, 864, 865, 883, 904, 908, 909, 910, 911, 934, 941, 943, 944, 945, 949, 950, 969, 989, 1008, 1029, 1031, 1091, 1096, 1097], "format_f": 943, "format_nam": [260, 261, 262], "format_object": 258, "format_url": 910, "format_vers": [216, 883, 909, 943, 950], "formatidentificationwarn": [266, 270], "former": 651, "formula": [118, 757], "forum": 231, "forward": [1, 436, 448, 449, 611], "fould": 974, "found": [53, 141, 216, 218, 221, 222, 223, 224, 227, 229, 232, 266, 268, 270, 272, 432, 498, 551, 608, 649, 665, 717, 741, 754, 755, 757, 881, 909, 943, 974, 984, 985, 986, 987, 997, 999, 1015, 1030], "foundat": 223, "four": [65, 223, 232, 379, 501, 554, 685, 863], "fourth": 3, "fr": 1030, "frac": [107, 108, 109, 110, 112, 114, 115, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 134, 135, 139, 142, 683, 684, 688, 693, 694, 695, 697, 698, 699, 700, 755, 874], "fraction": [108, 681, 881, 912, 975, 1097], "fraction_diff": [402, 472, 523, 577, 632], "fraction_sam": [402, 472, 523, 577, 632], "frame": [211, 217, 218, 436, 448, 449, 611, 690, 754, 989], "framework": [133, 682], "free": [233, 1057, 1099], "freedom": [690, 696, 702, 871, 878], "freq": [406, 421, 476, 488, 527, 540, 581, 596, 634, 641], "frequenc": [1, 84, 88, 106, 107, 119, 408, 409, 421, 423, 425, 488, 490, 492, 540, 542, 544, 583, 584, 596, 598, 600, 641, 643, 645, 877, 879, 881, 951, 971], "frequent": [886, 951, 973], "friedman": 685, "friedmanchisquar": 685, "from": [0, 1, 2, 3, 13, 14, 15, 16, 17, 18, 19, 34, 44, 45, 46, 47, 48, 50, 51, 52, 53, 65, 66, 67, 68, 69, 70, 75, 77, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 112, 114, 116, 122, 133, 136, 141, 142, 145, 146, 163, 174, 176, 187, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 245, 246, 247, 266, 270, 286, 293, 294, 295, 304, 305, 317, 318, 321, 324, 333, 340, 341, 351, 358, 359, 360, 373, 374, 375, 377, 379, 380, 381, 384, 386, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 438, 448, 449, 450, 451, 452, 455, 457, 460, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 506, 508, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 556, 559, 561, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 618, 620, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 655, 662, 663, 666, 667, 669, 671, 672, 674, 675, 677, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 715, 718, 720, 721, 723, 725, 731, 738, 742, 745, 746, 748, 749, 751, 753, 754, 755, 757, 758, 759, 761, 762, 763, 851, 852, 863, 864, 866, 867, 869, 870, 872, 877, 879, 880, 881, 882, 896, 897, 898, 899, 900, 902, 903, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 948, 952, 953, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1036, 1056, 1058, 1094, 1097, 1099], "from_": [662, 715, 738], "from_dict": [96, 753, 757, 762, 863, 879, 880], "from_hdf5": 943, "from_iter": 679, "from_ncbi": [438, 439, 448, 449, 610, 611], "from_path_seq": [16, 48], "from_tabular": [3, 17], "from_taxdump": 990, "from_taxonomi": [989, 1023], "front": [322, 700], "frontier": 133, "frozenset": [973, 1017, 1018], "fsvd": [757, 872], "ft_current": 295, "ftp": [221, 233, 295], "full": [123, 124, 219, 220, 685, 886, 899, 921, 987, 1013, 1055], "full_genome_avail": [907, 932], "fulli": [3, 133, 224, 1092], "fun": 1099, "func": [911, 935, 973, 986, 1010, 1015, 1026, 1037, 1070, 1081], "function": [1, 98, 99, 100, 106, 116, 117, 123, 124, 129, 132, 145, 146, 147, 148, 151, 222, 223, 230, 245, 246, 247, 260, 261, 262, 265, 295, 305, 317, 379, 402, 438, 472, 501, 523, 554, 577, 632, 651, 667, 680, 683, 684, 685, 688, 689, 691, 692, 695, 700, 718, 742, 754, 755, 756, 757, 758, 759, 762, 851, 867, 876, 879, 880, 881, 883, 899, 904, 907, 909, 911, 924, 932, 935, 937, 943, 944, 945, 946, 950, 969, 973, 976, 981, 986, 1010, 1015, 1023, 1025, 1026, 1031, 1032, 1034, 1035, 1036, 1037, 1055, 1057, 1069, 1070, 1080, 1081, 1091, 1092, 1093, 1094, 1097], "further": [234, 360, 880, 1097], "futher": 234, "futur": [116, 133, 145, 146, 222], "fuzzi": [225, 295, 296, 304, 305, 316, 317, 613], "g": [0, 1, 53, 70, 84, 85, 92, 100, 103, 118, 122, 129, 133, 148, 151, 217, 219, 221, 222, 223, 224, 226, 227, 228, 229, 231, 233, 234, 295, 324, 360, 373, 379, 386, 389, 394, 397, 398, 405, 406, 407, 408, 409, 419, 457, 460, 465, 467, 468, 475, 476, 477, 486, 501, 508, 511, 516, 518, 519, 526, 527, 528, 538, 554, 561, 564, 569, 572, 573, 580, 581, 582, 583, 584, 594, 613, 620, 623, 628, 630, 631, 633, 634, 639, 651, 655, 663, 669, 680, 685, 700, 703, 704, 708, 727, 731, 749, 753, 754, 756, 757, 863, 880, 881, 909, 926, 939, 943, 951, 972, 973, 978, 981, 985, 1012, 1013, 1014, 1016, 1017, 1023, 1026, 1027, 1028, 1030, 1057, 1092, 1094, 1097, 1099], "g1": 757, "g2": 757, "g_m": 688, "ga": [613, 1094], "gaa": 1094, "gaagcaatgc": 221, "gaagttgagt": 221, "gaatcaagcc": 221, "gabor": [53, 104], "gac": [420, 487, 539, 595, 640], "gacccgcuuu": 1094, "gacg": [420, 487, 539, 595, 640], "gacgtt": [411, 412, 479, 480, 530, 531, 586, 587], "gag": [432, 498, 551, 608, 649], "gagatagagt": 221, "gagcccgggc": [222, 229], "gagccgtggc": [222, 229], "gagcggaggc": 221, "gaggacttcg": 221, "gaggtattgg": 221, "gagrctc": [432, 498, 551, 608, 649], "gain": [360, 703, 872], "gair": 222, "gairaagccttggc": 229, "gamma": 107, "gap": [0, 3, 13, 15, 17, 19, 34, 44, 47, 52, 53, 83, 84, 88, 92, 98, 99, 100, 101, 102, 103, 163, 176, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229, 379, 396, 397, 400, 403, 404, 408, 409, 412, 419, 430, 431, 432, 434, 435, 436, 438, 448, 449, 450, 467, 470, 473, 474, 480, 486, 497, 498, 501, 518, 521, 524, 525, 531, 538, 550, 551, 554, 571, 572, 575, 578, 579, 583, 584, 587, 594, 605, 606, 607, 608, 610, 611, 613, 630, 639, 649, 680, 1023, 1094, 1099], "gap_char": [400, 450, 470, 521, 575], "gap_charact": [432, 498, 551, 608, 649], "gap_extend_penalti": [53, 98, 99, 100, 101, 102, 103], "gap_mod": 84, "gap_open_penalti": [53, 98, 99, 100, 101, 102, 103], "gapopen": [217, 218], "garbag": 274, "gardnerella": 881, "garrison": [53, 104], "gascuel": 1031, "gaston": 116, "gataccttca": 221, "gatcacttga": 221, "gatcttcccc": 221, "gatgcaacac": 221, "gather": [677, 725, 751, 1097], "gattattcta": 221, "gattttcgag": 221, "gauu": [424, 426, 491, 493, 543, 545, 599, 601, 644, 646], "gb": [218, 224], "gb_str": 224, "gbk": 224, "gc": [83, 221, 222, 223, 224, 225, 233, 379, 396, 397, 400, 403, 409, 430, 434, 439, 449, 467, 470, 473, 518, 521, 524, 554, 571, 572, 575, 578, 584, 605, 606, 630, 1094], "gc_content": [409, 584], "gc_frequenc": [408, 583], "gcaattttca": 221, "gcacatccct": 224, "gcacaucccu": 224, "gcagaagctg": 221, "gcagatgtg": 681, "gcatgcatgc": 225, "gcatggtcat": 221, "gcaugcaucugcauacguacguacgcaugca": 219, "gcaugcaucugcauacguacguacgcaugcagucgauacauacguacgucgguacgu": 219, "gcaugcaucugcauacguacguacgcaugcauca": 219, "gccaaaccca": 221, "gcccagtagcttcccaatatgagagcatcaattgtagatcgggcc": 0, "gccccccuuu": 1094, "gcgtatagtt": 221, "gcgtgcctaaggtatgcaag": 0, "gctaactaggctcccttctacccctctcagaga": 0, "gctgccgaga": 221, "gctgttattt": 221, "gcttcatctt": 221, "gen": [225, 1099], "gen1": 225, "gen2": 225, "gena": 295, "genbank": [221, 225, 233, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650], "gender": [703, 879, 880], "gene": [1, 225, 295, 305, 317, 320, 379, 613, 690, 696, 702, 883, 950, 1093], "gene_nam": 295, "genea": 896, "geneb": 896, "gener": [1, 14, 18, 19, 46, 50, 51, 52, 82, 85, 98, 104, 105, 106, 125, 133, 148, 220, 223, 224, 225, 227, 232, 233, 245, 247, 260, 262, 266, 270, 273, 405, 419, 420, 475, 486, 487, 526, 538, 539, 580, 594, 595, 613, 633, 639, 640, 651, 690, 703, 753, 754, 755, 759, 851, 853, 863, 866, 877, 880, 881, 882, 909, 919, 920, 928, 932, 943, 1092, 1094, 1098], "generated_bi": [883, 910, 943, 944, 950], "generatortyp": [919, 921, 932], "genet": [222, 227, 229, 233, 435, 436, 438, 439, 445, 446, 447, 448, 449, 610, 611, 760, 1030, 1094], "genetic_cod": [610, 611], "geneticcod": [436, 610, 611, 1094], "genom": [1, 305], "genpept": 224, "gentil": 700, "genu": [1, 233], "geologi": 682, "geometr": [686, 688, 690, 700, 757], "geometri": [682, 684, 688, 689, 692], "geq": 874, "gerald": 700, "get": [105, 216, 220, 231, 274, 275, 304, 305, 438, 447, 703, 755, 851, 867, 907, 914, 915, 916, 917, 923, 925, 927, 929, 930, 948, 978, 1017], "get_alpha_diversity_metr": [1, 143, 150], "get_beta_diversity_metr": [1, 147, 149, 151], "get_column": 372, "get_id": [286, 287, 291, 333, 334, 338, 351, 352, 356, 370, 371], "get_max_dist": 982, "get_nam": 663, "get_trajectori": 762, "get_value_by_id": 902, "getaaafhwqaaf": 230, "getvalu": [219, 222, 223, 224, 225, 229, 232, 703], "gff": 225, "gff3": [224, 321, 323, 428, 437, 495, 500, 647, 650], "gff_str": 225, "gfgmvinn": 232, "gfp": 1094, "gfv": 232, "gg": [398, 404, 468, 474, 519, 525, 573, 579, 631], "gg_otu_1": [909, 910], "gg_otu_2": 910, "gg_otu_3": 910, "gg_otu_4": 910, "gg_otu_5": 910, "gga": 1094, "ggaa": [397, 467, 518, 572, 630], "ggacugaa": 1094, "ggag": [404, 474, 525, 579], "ggattgttta": 221, "ggca": 0, "ggctaacggt": 221, "ggg": 1094, "ggggagg": [404, 474, 525, 579], "gggtttttac": 221, "ggt": [232, 429, 496, 548, 604, 648], "ggta": 0, "ggtaccaacg": [429, 496, 548, 604, 648], "ggtacgcaag": 0, "ggtc": [400, 470, 521, 575], "ggtccattc": [400, 470, 521, 575], "ggtggtttct": 221, "ggtgtttagc": 221, "ggtt": 903, "ggu": [381, 452, 503, 556, 615], "gguc": [389, 391, 394, 402, 423, 424, 425, 426, 460, 462, 465, 472, 490, 491, 492, 493, 511, 513, 516, 523, 542, 543, 544, 545, 564, 566, 569, 577, 598, 599, 600, 601, 623, 625, 628, 632, 643, 644, 645, 646], "ggucg": [386, 398, 457, 468, 508, 519, 561, 573, 620, 631], "ggucguaaagga": [395, 466, 517, 570, 629], "ggucgugaag": 613, "ggucgugaagga": [381, 386, 452, 457, 503, 508, 556, 561, 613, 615, 620], "gi": [217, 218, 224], "gigasci": [863, 883, 950], "gilk": 761, "gini": [118, 137], "gish": [217, 218], "github": 863, "give": [1, 227, 866, 867, 874, 883, 950, 976], "given": [1, 13, 14, 15, 45, 46, 47, 93, 97, 107, 118, 122, 129, 135, 139, 143, 147, 148, 151, 174, 175, 187, 188, 212, 222, 223, 227, 228, 231, 245, 247, 263, 264, 266, 267, 270, 271, 318, 321, 323, 375, 378, 428, 432, 437, 495, 498, 500, 547, 551, 553, 603, 608, 612, 647, 649, 650, 667, 672, 678, 700, 718, 721, 726, 742, 746, 752, 754, 755, 758, 864, 865, 867, 871, 876, 878, 880, 914, 916, 924, 932, 934, 948, 949, 951, 986, 1008, 1029, 1056, 1057, 1069, 1099], "gkp1137": 223, "glahn": [682, 696, 702], "gln": 501, "global": [0, 98, 99, 100], "global_pairwise_align": [99, 100, 101, 102, 103], "global_pairwise_align_nucelotid": [98, 100, 101, 102, 103], "global_pairwise_align_nucleotid": 0, "global_pairwise_align_protein": [98, 99, 101, 102, 103], "glossari": 84, "glu": 501, "glucosidas": 221, "glutam": 501, "glutamin": 501, "glx": 501, "gly": 501, "glycin": [84, 501], "glycosyl": [419, 486, 525, 538, 594, 639, 1094], "go": [881, 939, 1097, 1099], "goa": 221, "goal": [231, 1092], "goldman": 133, "gonzalez": 863, "good": [106, 115, 119, 872], "goodrich": 974, "goods_coverag": [115, 135], "googl": 231, "gorilla": [222, 229], "gorlick": 232, "goto": 223, "gouet": [123, 124], "gov": [84, 99, 100, 102, 103, 217, 218, 222, 224, 230, 233, 438, 446, 447], "gracilibacteria": 438, "gradient": [118, 852, 866, 867, 872, 874], "gradientanova": [763, 785, 829, 840], "gradientanovaresult": [773, 795, 806, 839, 850], "graft": 1025, "gram": [691, 692], "grammar": [450, 613], "grammaredsequ": [65, 75, 80, 82, 85, 86, 98, 101, 219, 222, 229, 232, 379, 400, 403, 431, 501, 521, 524, 550, 554, 575, 578, 607, 1094], "grand": 951, "grant": [222, 229], "great": 106, "greater": [222, 305, 380, 451, 502, 555, 614, 690, 753, 755, 756, 757, 758, 761, 880, 881, 882, 915], "grei": 863, "group": [1, 141, 231, 433, 499, 552, 609, 662, 685, 690, 700, 715, 738, 753, 756, 757, 762, 763, 773, 774, 795, 806, 818, 828, 829, 839, 850, 852, 879, 880, 881, 894, 909, 914, 932, 943, 1057, 1093, 1097], "group1": 753, "group2": 753, "group3": 753, "group_md": 894, "group_observation_md": 914, "groupbi": 880, "groupresult": 774, "growth": [690, 880], "gsi": 700, "gt": [17, 91, 119], "gt10": 221, "gtaacctgag": 221, "gtaag": 3, "gtacct": [219, 229], "gtagaggacc": 221, "gtagct": [219, 229], "gtatct": 229, "gtcgaa": [219, 229], "gtt": [420, 487, 539, 595, 640], "gttaatgcca": 221, "gttactcaac": 221, "gttcggcctc": 221, "gttgaccaat": 221, "gttgggatta": 221, "gtttatccaa": 221, "guaaccugag": 221, "guanin": [379, 554], "guarante": [92, 124, 231, 379, 403, 473, 501, 524, 554, 578, 704, 759, 981], "guc": [386, 457, 508, 561, 620], "gucgauacauacguacgucgguacgu": 219, "gucgauacauacguacgucguacguacgu": 219, "guess": [93, 129, 174, 187, 222, 266, 270, 321, 375, 428, 495, 547, 603, 647, 672, 721, 746, 864, 934, 1008, 1033], "gunnerida": 221, "gut": [1, 231, 863], "gytai": 232, "gzip": [274, 943], "h": [53, 107, 108, 112, 114, 120, 121, 133, 134, 135, 136, 137, 139, 222, 229, 232, 275, 379, 501, 554, 972, 973, 978, 981, 1012, 1013, 1014, 1017, 1018, 1027, 1028, 1030, 1097], "h5grp": [909, 943], "h5py": [909, 943], "h_": 685, "h_0": 118, "h_b": 109, "h_i": 118, "h_n": 118, "ha": [1, 3, 53, 65, 83, 89, 90, 98, 99, 100, 105, 151, 163, 176, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 267, 271, 274, 291, 338, 356, 360, 373, 379, 396, 397, 400, 403, 413, 414, 415, 416, 427, 430, 434, 435, 436, 438, 448, 449, 450, 467, 470, 473, 481, 482, 483, 484, 494, 501, 518, 521, 524, 532, 533, 534, 535, 546, 554, 571, 572, 575, 578, 588, 589, 590, 591, 602, 605, 606, 610, 611, 613, 630, 635, 636, 637, 685, 687, 703, 851, 866, 868, 879, 880, 881, 899, 907, 924, 972, 992, 995, 996, 1010, 1014, 1030, 1057, 1094, 1097], "habitat": 867, "had": [116, 145, 146, 753, 757, 881], "half": [122, 697], "halobacteria": [990, 1023], "ham": [402, 472, 523, 577, 632, 703, 1094], "hamadi": [116, 145, 146], "hand": [1, 872], "handbook": 222, "handi": [1057, 1099], "handl": [84, 92, 222, 223, 230, 232, 233, 234, 235, 245, 247, 274, 360, 373, 448, 449, 685, 755, 757, 758, 877, 886, 899, 924, 933, 1024, 1031, 1056, 1099], "handler": [235, 266, 268, 270, 272, 274], "happen": [227, 419, 486, 538, 594, 639, 1030, 1099], "hard": [116, 143, 145, 146, 147], "hardcod": 115, "harm": 697, "has_children": [995, 996], "has_definit": [399, 401, 411, 415, 427, 469, 471, 479, 483, 494, 520, 522, 530, 534, 546, 574, 576, 586, 590, 602], "has_degener": [401, 410, 415, 471, 478, 483, 522, 529, 534, 576, 585, 590], "has_gap": [407, 477, 528, 582], "has_missing_valu": [286, 288, 333, 335, 351, 353], "has_nuc_pattern": 1099, "has_stop": 549, "hash": [8, 26, 39, 59, 157, 168, 181, 194, 205, 240, 253, 768, 779, 790, 801, 812, 823, 834, 845, 858, 959, 1044, 1063, 1075, 1086], "hashabl": [65, 67, 851, 1080], "hashlib": 1056, "hasn": [613, 882, 946], "have": [0, 1, 19, 52, 53, 83, 86, 88, 91, 92, 104, 106, 116, 122, 134, 139, 145, 146, 211, 212, 213, 214, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 265, 274, 295, 305, 306, 307, 360, 369, 374, 384, 397, 403, 419, 448, 455, 467, 473, 486, 506, 518, 524, 538, 559, 572, 578, 594, 618, 630, 639, 653, 669, 685, 701, 703, 706, 729, 755, 761, 762, 784, 796, 817, 828, 851, 863, 866, 867, 868, 871, 872, 874, 875, 877, 879, 880, 881, 882, 907, 909, 924, 925, 926, 939, 943, 948, 951, 970, 971, 972, 981, 983, 984, 1007, 1013, 1020, 1022, 1023, 1032, 1034, 1097, 1099], "hdf5": [215, 216, 220, 883, 909, 943, 950], "hdfgroup": 215, "hdist": 761, "he": 0, "header": [217, 218, 219, 223, 224, 226, 228, 231, 278, 284, 325, 331, 343, 349, 360, 361, 367, 372, 904, 908], "header_kei": [904, 945], "header_valu": [904, 945], "heagawghe": 0, "health": [685, 879, 880], "healthi": [879, 880, 881], "heatmap": [671, 720, 745], "heip": [120, 127], "heip_": 134, "held": 939, "hello": [395, 466, 517, 570, 629], "help": [231, 233], "helper": [6, 24, 37, 57, 73, 155, 166, 179, 192, 203, 238, 251, 280, 298, 310, 327, 345, 363, 387, 441, 458, 509, 562, 621, 656, 709, 732, 766, 777, 788, 799, 810, 821, 832, 843, 856, 887, 957, 1034, 1035, 1042, 1061, 1073, 1084, 1097], "henc": 755, "henikoff": [100, 103, 663], "here": [0, 1, 84, 107, 111, 116, 122, 129, 139, 143, 144, 145, 146, 147, 148, 149, 150, 216, 220, 221, 224, 229, 234, 245, 247, 275, 419, 486, 538, 594, 639, 685, 690, 761, 872, 874, 909, 943, 1024, 1031, 1097], "hernand": 700, "heterogen": 873, "heuer": 223, "heurist": [53, 757, 872], "hexdigest": 1056, "hgc": 233, "hi": 501, "hidden": 233, "hierarch": [233, 700], "hierarchi": [899, 988, 989, 1097], "high": [116, 145, 146, 222, 223, 690, 852, 863, 866, 872, 990, 1095], "higher": [84, 106, 651, 685, 690, 1069], "highest": [53, 227], "highli": [3, 84], "highlight": 223, "hill": [121, 133, 136], "histidin": 501, "histor": [1, 131, 438, 971], "histori": [116, 881], "hit": 218, "hoc": 877, "hochberg": [685, 690], "hoffmann": 133, "hold": [727, 773, 795, 806, 839, 850, 851, 872, 879, 940, 979, 1080], "hollow": [147, 215, 704, 742, 744, 759], "holm": [685, 690], "hommola": 761, "homogen": [757, 866, 874], "homolog": 651, "horizont": 92, "host": [233, 761], "host_dist": 761, "hot": 852, "hotton": 233, "hous": 879, "how": [80, 91, 92, 129, 222, 224, 231, 274, 324, 360, 397, 419, 431, 448, 449, 467, 486, 497, 518, 538, 550, 572, 594, 607, 630, 639, 696, 702, 755, 872, 877, 879, 880, 881, 883, 905, 924, 950, 1092, 1099], "howev": [1, 116, 117, 133, 143, 145, 146, 147, 222, 226, 227, 231, 233, 379, 501, 554, 613, 682, 690, 757, 761, 852, 872, 886, 946, 982, 1037], "hsp": [217, 218], "hstack": [879, 880], "htm": 754, "html": [84, 122, 216, 217, 219, 222, 224, 227, 229, 232, 295, 673, 704, 722, 727, 739, 747, 753, 754, 755, 756, 757, 863, 883, 909, 943, 950, 1030], "http": [53, 84, 98, 99, 100, 101, 102, 103, 104, 106, 107, 111, 122, 148, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 229, 230, 231, 232, 233, 292, 339, 357, 360, 373, 376, 438, 446, 447, 673, 696, 700, 702, 704, 722, 727, 739, 747, 753, 754, 755, 756, 757, 863, 883, 909, 910, 943, 950, 1030, 1031, 1056], "huerta": 971, "hugh": 221, "human": [215, 222, 223, 226, 227, 228, 1036], "hundr": [1, 148], "hurlbert": [114, 137], "hwang": 107, "hydrogenosom": 233, "hypothesi": [682, 685, 690, 755, 758, 761, 877], "hypothet": 295, "h\u00e9bert": 700, "i": [0, 1, 3, 15, 19, 20, 47, 50, 52, 53, 65, 66, 67, 68, 69, 70, 72, 77, 79, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 151, 152, 174, 175, 187, 188, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 245, 246, 247, 259, 260, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 284, 292, 295, 296, 302, 304, 305, 308, 314, 316, 317, 318, 319, 321, 323, 324, 325, 331, 339, 343, 349, 357, 360, 361, 367, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 386, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 445, 448, 449, 450, 451, 452, 453, 454, 455, 457, 464, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 515, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 620, 627, 630, 631, 632, 634, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 660, 662, 665, 670, 671, 672, 673, 676, 677, 678, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 713, 715, 717, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 731, 736, 738, 739, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 761, 784, 796, 817, 828, 829, 840, 851, 852, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 886, 893, 896, 899, 900, 903, 904, 906, 907, 908, 909, 915, 918, 919, 920, 921, 924, 925, 926, 932, 933, 934, 935, 936, 939, 940, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 956, 966, 969, 971, 973, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 989, 991, 993, 995, 996, 997, 999, 1001, 1002, 1004, 1007, 1008, 1012, 1015, 1017, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1041, 1054, 1055, 1056, 1057, 1058, 1068, 1069, 1080, 1091, 1092, 1094, 1097, 1098, 1099], "id": [0, 1, 65, 70, 89, 94, 95, 116, 133, 143, 145, 146, 147, 148, 151, 152, 211, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 278, 284, 287, 288, 290, 293, 294, 325, 331, 334, 335, 337, 340, 341, 343, 349, 352, 353, 355, 358, 359, 360, 361, 367, 369, 370, 372, 374, 377, 384, 393, 395, 414, 435, 436, 438, 447, 448, 449, 455, 464, 466, 482, 506, 515, 517, 533, 559, 568, 570, 589, 610, 611, 613, 618, 627, 629, 636, 652, 653, 655, 661, 662, 665, 667, 670, 674, 677, 696, 703, 704, 705, 706, 708, 714, 715, 717, 718, 719, 723, 725, 727, 728, 729, 731, 737, 738, 741, 742, 743, 744, 748, 749, 751, 753, 754, 755, 756, 757, 758, 759, 796, 840, 853, 862, 863, 879, 880, 881, 884, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 906, 907, 908, 909, 910, 913, 915, 917, 919, 924, 925, 926, 930, 932, 933, 937, 938, 939, 942, 943, 945, 946, 947, 948, 952, 953, 970, 977, 980, 987, 989, 990, 993, 1020, 1022, 1031, 1094], "id1": 231, "id2": 231, "id3": 231, "id_": [899, 907, 932, 946], "id_head": [293, 294, 340, 341, 358, 359, 372, 374, 377], "id_i": 921, "id_index": 1022, "id_j": 921, "id_list": 988, "id_map": 948, "id_pair": 151, "id_whitespace_replac": [222, 223], "idea": 880, "ideal": 234, "ident": [1, 217, 218, 227, 231, 655, 708, 727, 731, 761, 976, 1009, 1097], "identif": 101, "identifi": [95, 143, 147, 148, 151, 215, 219, 222, 223, 224, 225, 226, 229, 232, 233, 320, 360, 404, 525, 579, 703, 758, 877, 881, 917, 925, 948, 1092], "idptr": 220, "ids_to_keep": [287, 334, 352, 370, 907], "idx": [432, 498, 551, 608, 649], "ie": [409, 584], "igkeeiqqrl": 220, "ignor": [53, 84, 107, 116, 145, 146, 218, 219, 221, 222, 223, 226, 227, 231, 234, 369, 404, 405, 448, 449, 474, 475, 525, 526, 579, 580, 633, 665, 717, 741, 753, 754, 755, 756, 757, 872, 879, 880, 932, 943, 981, 1000, 1035, 1057, 1058, 1094, 1097, 1099], "ignore_axis_label": 1035, "ignore_direction": 1035, "ignore_metadata": 91, "ignore_method_nam": 1035, "ignore_non": 932, "ii": 877, "iii": 123, "ij": 755, "il": 501, "illumina": [223, 230], "illumina1": [223, 230], "illumina_1": 230, "illustr": [613, 753, 757], "iloc": 72, "ilr": [682, 692, 701], "ilr_inv": 701, "im": [225, 305, 317], "im1": 317, "im2": 317, "imagin": 227, "immedi": [222, 229, 993], "immut": [613, 1094], "implement": [0, 1, 98, 101, 106, 107, 111, 116, 122, 139, 144, 145, 146, 149, 150, 223, 227, 231, 234, 245, 246, 247, 248, 274, 360, 700, 852, 866, 867, 872, 873, 944, 945, 974, 1030, 1032], "impli": [84, 274, 761], "implicit": 924, "implicitli": [216, 220], "import": [0, 1, 3, 13, 14, 15, 17, 18, 19, 45, 46, 47, 50, 51, 52, 65, 66, 67, 68, 69, 70, 75, 77, 80, 82, 83, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 112, 116, 133, 145, 146, 163, 176, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 245, 246, 247, 295, 305, 317, 379, 380, 381, 384, 386, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 438, 448, 449, 450, 451, 452, 455, 457, 460, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 501, 502, 503, 506, 508, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 554, 555, 556, 559, 561, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 618, 620, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 651, 662, 663, 666, 669, 671, 674, 677, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 715, 720, 723, 725, 738, 745, 748, 749, 751, 753, 754, 755, 757, 758, 761, 762, 851, 852, 863, 877, 879, 880, 881, 882, 896, 897, 898, 899, 900, 902, 903, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 931, 932, 933, 935, 937, 938, 939, 940, 941, 942, 943, 945, 946, 952, 953, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1036, 1056, 1092, 1094, 1097, 1099], "import_modul": 234, "impos": [116, 145, 146], "improv": [91, 227, 229, 379, 501, 554, 742], "impur": 137, "imput": [682, 694], "incid": 761, "includ": [1, 84, 91, 93, 97, 105, 106, 116, 133, 145, 146, 150, 151, 174, 175, 187, 188, 219, 220, 221, 222, 223, 226, 227, 228, 229, 231, 232, 277, 292, 321, 323, 324, 339, 342, 357, 360, 361, 367, 372, 374, 375, 376, 378, 386, 395, 400, 408, 409, 419, 428, 432, 434, 435, 436, 437, 448, 449, 457, 466, 470, 486, 495, 498, 500, 508, 517, 521, 538, 547, 551, 553, 554, 561, 570, 575, 583, 584, 594, 603, 606, 608, 610, 611, 612, 620, 629, 639, 647, 649, 650, 651, 661, 663, 672, 678, 685, 703, 714, 721, 726, 737, 742, 746, 749, 752, 753, 754, 756, 757, 758, 762, 862, 863, 864, 865, 867, 872, 873, 877, 881, 899, 904, 934, 941, 942, 947, 949, 966, 967, 969, 998, 1000, 1001, 1004, 1005, 1006, 1008, 1021, 1023, 1024, 1029, 1092, 1093, 1094, 1095, 1097, 1098], "include_collapsed_metadata": 899, "include_self": [973, 998, 1001, 1004, 1005, 1006, 1021, 1024, 1097], "inclus": [274, 295, 316, 398, 417, 468, 485, 519, 537, 573, 592, 631, 638, 754], "incom": 971, "incomplet": [106, 379, 450, 501, 554, 613], "inconsist": 666, "incorpor": [1, 133, 681], "incorrect": 1, "incorrectli": 908, "increas": [690, 703, 704, 758, 759, 761, 851, 877, 880, 899, 946], "incub": 880, "ind": [877, 881], "inde": 761, "independ": [136, 436, 449, 611, 761, 773, 774, 795, 806, 839, 850, 924, 1024], "index": [0, 1, 14, 15, 18, 46, 47, 51, 65, 67, 70, 72, 79, 82, 85, 86, 90, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 108, 109, 112, 114, 118, 120, 121, 122, 125, 126, 128, 134, 136, 137, 138, 139, 142, 143, 152, 211, 219, 220, 222, 229, 230, 232, 289, 293, 294, 336, 340, 341, 354, 358, 359, 360, 377, 386, 416, 457, 484, 508, 535, 561, 591, 620, 637, 652, 655, 674, 683, 684, 685, 690, 703, 705, 708, 723, 728, 731, 748, 749, 753, 754, 755, 756, 757, 762, 796, 840, 853, 863, 879, 886, 897, 899, 909, 925, 926, 929, 942, 943, 993, 1003, 1004, 1022, 1030, 1034], "indexerror": [886, 915], "indic": [1, 3, 15, 19, 33, 47, 52, 66, 67, 70, 79, 89, 90, 107, 110, 111, 127, 133, 151, 215, 222, 223, 231, 234, 278, 284, 295, 296, 302, 305, 308, 314, 325, 331, 343, 349, 360, 361, 367, 381, 384, 386, 393, 399, 401, 404, 405, 407, 410, 411, 412, 413, 414, 415, 416, 419, 424, 426, 427, 429, 432, 438, 439, 445, 452, 455, 457, 464, 469, 471, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 491, 493, 494, 496, 498, 503, 506, 508, 515, 520, 522, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 543, 545, 546, 548, 549, 551, 556, 559, 561, 568, 574, 576, 579, 580, 582, 585, 586, 587, 588, 589, 590, 591, 594, 599, 601, 602, 604, 608, 615, 618, 620, 627, 633, 635, 636, 637, 639, 644, 646, 648, 649, 651, 685, 690, 701, 753, 755, 756, 757, 761, 851, 862, 863, 879, 909, 943, 986, 988, 1026, 1069, 1080, 1097, 1099], "indicatd": 1099, "indirectli": 1013, "indiscern": 727, "individu": [1, 3, 106, 107, 108, 109, 112, 115, 116, 117, 119, 122, 125, 126, 127, 128, 129, 134, 135, 137, 139, 142, 145, 146, 215, 220, 222, 360, 651, 685, 879, 886, 1099], "indptr": [909, 943], "ineffici": [886, 1032], "inekmtlva": 220, "ineleg": 1004, "inequ": [79, 284, 302, 314, 331, 349, 367, 393, 445, 464, 515, 568, 627, 727, 872], "inf": [19, 52, 117, 231, 1015], "infeas": 222, "infect": 881, "infer": [224, 231, 266, 270, 292, 339, 357, 373, 376, 1055, 1092], "infern": 232, "infin": 231, "infinit": [112, 1015, 1027, 1028], "infinitum": 227, "info": [53, 104, 305, 762, 818], "inform": [53, 84, 93, 97, 109, 125, 133, 136, 174, 175, 187, 188, 217, 218, 219, 221, 222, 223, 224, 230, 231, 233, 295, 321, 323, 375, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 774, 818, 852, 864, 865, 874, 880, 881, 883, 899, 934, 949, 950, 1008, 1029, 1057, 1093, 1094, 1099], "inher": [682, 761], "inherit": [233, 450, 613, 900], "inidic": [32, 53], "initi": [129, 222, 880, 998, 1001, 1004, 1005, 1006, 1021, 1024, 1031, 1068], "initialize_st": 1099, "inlin": 231, "inner": [92, 227, 374, 397, 467, 518, 572, 630, 666], "inord": 1024, "inosin": 379, "inplac": [872, 907, 930, 931, 933, 936, 946, 948, 1015], "input": [98, 99, 100, 101, 102, 103, 104, 116, 133, 143, 145, 146, 147, 233, 245, 247, 274, 275, 305, 317, 402, 429, 448, 449, 472, 496, 523, 548, 577, 604, 632, 648, 679, 685, 690, 701, 704, 754, 755, 851, 863, 866, 867, 869, 873, 882, 908, 1025, 1030, 1031, 1091, 1094], "input_is_dens": 910, "ins": [3, 20, 34, 53, 65, 152, 163, 176, 189, 200, 235, 248, 277, 295, 305, 324, 342, 360, 379, 438, 450, 501, 554, 613, 651, 704, 727, 763, 774, 785, 796, 807, 818, 829, 840, 853, 883, 951, 1037, 1057, 1069, 1080], "insdc": [221, 224, 295, 324, 360, 373], "insensit": [231, 663, 685, 690], "insert": [227, 316, 972], "insert_length": 972, "insid": [224, 227], "insight": [145, 146], "insignific": 1, "instal": 1032, "instanc": [93, 97, 174, 175, 187, 188, 220, 234, 247, 260, 262, 263, 264, 266, 270, 305, 320, 321, 323, 375, 378, 397, 428, 437, 467, 495, 500, 518, 547, 553, 572, 603, 612, 630, 647, 650, 653, 663, 672, 678, 680, 681, 690, 704, 706, 721, 726, 727, 729, 744, 746, 752, 755, 757, 758, 759, 773, 795, 806, 839, 850, 863, 864, 865, 881, 882, 896, 900, 926, 934, 949, 951, 967, 1008, 1029, 1030, 1037, 1038, 1041, 1048, 1097, 1099], "instanti": [53, 221, 234, 450, 1099], "instead": [1, 88, 221, 222, 224, 231, 234, 235, 245, 246, 247, 289, 318, 324, 336, 354, 406, 419, 421, 423, 425, 432, 476, 486, 488, 490, 492, 498, 527, 538, 540, 542, 544, 551, 581, 594, 596, 598, 600, 608, 634, 639, 641, 643, 645, 649, 704, 753, 755, 757, 871, 880, 881, 941, 942, 976, 1031, 1032, 1092], "institut": 223, "instruct": 1096, "instrument": 222, "int": [3, 13, 14, 15, 18, 19, 34, 45, 46, 47, 51, 52, 53, 77, 88, 95, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 151, 217, 224, 225, 230, 246, 274, 295, 305, 316, 320, 360, 386, 391, 398, 404, 405, 409, 417, 419, 420, 421, 423, 425, 429, 447, 457, 462, 468, 474, 475, 485, 486, 487, 488, 490, 492, 496, 508, 513, 519, 525, 526, 537, 538, 539, 540, 542, 544, 548, 561, 566, 573, 579, 580, 584, 592, 594, 595, 596, 598, 600, 604, 610, 611, 620, 625, 631, 633, 638, 639, 640, 641, 643, 645, 648, 669, 670, 681, 683, 684, 690, 696, 702, 719, 743, 753, 755, 756, 757, 758, 759, 761, 796, 840, 851, 863, 867, 871, 872, 874, 875, 878, 880, 881, 882, 899, 909, 915, 917, 939, 943, 951, 972, 976, 978, 987, 993, 1002, 1003, 1015, 1030, 1035, 1036, 1056, 1069], "int32": [909, 943], "int64": [65, 83, 92, 396, 400, 430, 470, 521, 571, 575, 605, 613, 909, 943, 1094], "integ": [1, 53, 143, 147, 215, 217, 220, 222, 223, 226, 227, 228, 229, 230, 360, 386, 457, 508, 561, 620, 685, 690, 703, 704, 753, 756, 757, 758, 759, 840, 882], "intend": [1, 123, 124, 231, 379, 450, 501, 851, 863, 1034, 1035], "intens": 880, "interablemetadata": 317, "interact": [761, 1096], "interest": [1, 231, 613, 685, 703, 761, 866, 874, 880, 997, 999, 1099], "interfac": [89, 90, 144, 231, 414, 416, 482, 484, 533, 535, 589, 591, 636, 637, 651, 753, 754, 755, 756, 1030, 1092], "interleav": [229, 232], "intermedi": 972, "intern": [95, 216, 224, 227, 701, 969, 971, 973, 979, 981, 984, 993, 1002, 1007, 1013, 1023, 1025, 1026, 1092, 1097], "internet": [222, 233], "interpret": [1, 84, 112, 116, 135, 137, 143, 145, 146, 147, 215, 227, 231, 324, 360, 682, 866, 867, 874, 910], "interpro": 221, "interquantil": 122, "interrog": 1057, "intersect": [397, 467, 518, 572, 630, 924, 952, 953, 977, 980], "interspecif": [114, 137], "interv": [106, 111, 115, 123, 221, 224, 225, 305, 306, 307, 308, 314, 316, 317, 318, 319, 320, 322, 379, 384, 396, 413, 434, 455, 481, 501, 506, 532, 554, 559, 571, 588, 613, 618, 635, 690, 878, 1091], "interval_metadata": [224, 225, 295, 305, 317, 320, 379, 384, 386, 413, 450, 455, 457, 481, 501, 506, 508, 532, 554, 559, 561, 588, 613, 618, 620, 635], "intervalmetadata": [225, 295, 304, 379, 501, 554, 613], "intracellular": 232, "introduc": [107, 118, 219, 222, 682], "introduct": 1091, "intron": [422, 489, 541, 554, 597, 642], "intvl": 305, "inv_simpson": 114, "invalid": [1, 88, 92, 116, 133, 143, 145, 146, 147, 222, 373, 379, 501, 554, 754, 755, 863, 883, 950, 968, 973, 983, 994, 1003, 1007], "invalidate_cach": [973, 979], "invent": 223, "invers": [84, 112, 114, 121, 684, 689, 692, 698], "inverse_shannon_uncertainti": 84, "invert": [419, 486, 538, 594, 639, 907], "investig": 1, "involv": [106, 133, 683], "inward": 122, "io": [1, 93, 97, 116, 145, 146, 174, 175, 187, 188, 321, 323, 375, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 703, 721, 726, 746, 752, 863, 864, 865, 908, 911, 934, 949, 989, 1008, 1029, 1030, 1056, 1091, 1097], "io_registri": 234, "ionom": 700, "ioregistri": [234, 245, 247], "ipr001360": 221, "ipr013781": 221, "ipr017853": 221, "ipr033132": 221, "ipyparallel": 148, "ipython": 853, "irrelev": [98, 99, 100], "irsairagsnvkgfyawsfldcnewfagftvrfglnfvd": 221, "is_circular": 225, "is_reverse_compl": [430, 605], "is_root": [992, 996, 1097], "is_tip": [973, 992, 995, 1097], "is_zero_bas": 33, "ism": [116, 145, 146], "isn": [65, 82, 85, 92, 118, 231, 232, 245, 247, 275, 295, 691, 692, 882, 926], "isnapshgnakpsystnpmtnisfekhgiplgpraasiwiyvypymfiqedf": 221, "iso": [909, 943], "isoleucin": 501, "isometr": [682, 683, 684, 691, 692], "isometri": [688, 689, 691, 692], "isomorph": [227, 688, 689, 691, 692], "issu": [221, 222, 223, 231, 246, 1031, 1092], "isubsampl": 882, "item": [98, 99, 100, 101, 102, 103, 104, 232, 406, 429, 476, 496, 527, 548, 581, 604, 613, 634, 648, 662, 677, 715, 725, 738, 751, 851, 882, 903, 939, 973, 1015, 1022, 1023, 1057, 1058, 1068, 1099], "iter": [65, 75, 80, 85, 91, 98, 99, 100, 101, 102, 103, 104, 105, 143, 147, 148, 151, 211, 212, 213, 214, 220, 230, 287, 295, 316, 317, 318, 320, 334, 352, 370, 386, 389, 394, 397, 405, 419, 429, 432, 457, 460, 465, 467, 475, 486, 496, 498, 508, 511, 516, 518, 526, 538, 548, 551, 561, 564, 569, 572, 580, 594, 604, 608, 620, 623, 628, 630, 633, 639, 648, 649, 651, 662, 665, 667, 669, 677, 685, 715, 717, 718, 725, 738, 741, 742, 751, 754, 757, 758, 851, 863, 880, 881, 889, 899, 900, 907, 908, 909, 920, 921, 924, 932, 938, 946, 952, 953, 960, 977, 980, 981, 990, 998, 1001, 1004, 1005, 1006, 1014, 1015, 1021, 1024, 1054, 1056, 1058, 1080, 1097, 1099], "iter_": [921, 1058], "iter_km": [406, 476, 527, 581, 634], "its": [1, 15, 47, 65, 82, 83, 85, 86, 89, 90, 91, 92, 98, 99, 100, 131, 221, 222, 223, 224, 227, 228, 232, 234, 247, 274, 295, 305, 360, 374, 406, 413, 414, 416, 421, 476, 481, 482, 484, 488, 527, 532, 533, 535, 540, 581, 588, 589, 591, 596, 613, 634, 635, 636, 637, 641, 655, 663, 686, 708, 731, 754, 862, 866, 868, 871, 876, 907, 951, 973, 1003, 1004, 1013, 1018, 1023, 1024, 1030, 1031, 1055, 1092, 1097], "itself": [163, 176, 189, 200, 222, 229, 233, 275, 295, 379, 438, 501, 554, 613, 651, 761, 853, 907, 931, 946, 951, 1094], "itypeerror": 147, "iupac": [222, 223, 229, 230, 379, 409, 438, 448, 501, 554, 584, 613, 1094], "iv": [122, 133], "j": [98, 100, 101, 103, 106, 114, 116, 119, 120, 129, 133, 134, 145, 146, 215, 217, 218, 222, 223, 224, 232, 233, 501, 662, 663, 677, 682, 691, 692, 693, 694, 696, 700, 702, 715, 725, 738, 751, 755, 756, 757, 867, 921, 981, 1030], "j00123": 224, "j04373": 232, "jag": 926, "jaim": 971, "je": 761, "jet": 1, "jim": 223, "jj": [696, 702], "joe": 229, "join": [91, 217, 218, 223, 230, 232, 233, 374, 397, 467, 518, 572, 630, 900, 1023, 1030, 1031], "joint": 224, "joseph": [222, 229, 1097], "jost": [133, 136], "journal": [53, 104, 107, 110, 117, 133, 134, 136, 139, 224, 696, 702, 753], "json": [883, 910, 944, 950], "json_obj": 910, "json_tabl": 910, "juli": [53, 104], "julia": 974, "june": 227, "jupyt": 863, "just": [122, 123, 124, 129, 234, 893, 904, 921, 924, 945, 1014, 1092, 1097, 1099], "justif": 122, "jyzox": 223, "k": [53, 106, 107, 112, 119, 121, 133, 134, 136, 137, 138, 139, 148, 379, 406, 420, 421, 476, 487, 488, 501, 527, 539, 540, 554, 581, 595, 596, 634, 640, 641, 651, 663, 681, 700, 754, 761, 981, 1015, 1022, 1030], "k_": 877, "k__a": 899, "ka": 223, "kan": 233, "kannan": 233, "karsch": 233, "keemei": 231, "keep": [220, 224, 231, 318, 386, 457, 508, 561, 620, 851, 897, 898, 907, 919, 924, 1013, 1014], "kegg_pathwai": [909, 926, 943], "kei": [23, 65, 82, 85, 86, 89, 94, 105, 221, 222, 224, 232, 316, 320, 379, 403, 414, 422, 429, 473, 482, 489, 496, 501, 524, 533, 541, 548, 554, 578, 589, 597, 604, 613, 636, 642, 648, 667, 718, 742, 899, 903, 926, 948, 1002, 1022, 1030, 1099], "kellei": [145, 146], "kempton": 122, "kendalltau": 755, "kept": 224, "kestrel": 232, "keto": 379, "keyerror": [757, 926], "keyword": [93, 97, 104, 174, 175, 187, 188, 221, 224, 226, 246, 266, 267, 268, 270, 271, 272, 320, 321, 323, 375, 378, 422, 428, 435, 436, 437, 489, 495, 500, 541, 547, 553, 597, 603, 610, 611, 612, 642, 647, 650, 672, 678, 721, 726, 746, 752, 864, 865, 934, 949, 1008, 1029], "khovanskaya": 233, "kill": 697, "kind": 866, "kinet": 129, "kingdom": [217, 218, 233], "kit": 1091, "kj": 116, "klein": 224, "kmer": [420, 421, 487, 488, 539, 540, 595, 596, 640, 641, 681], "kmer_frequ": [406, 476, 527, 581, 634], "knight": [114, 116, 145, 146, 863], "know": [1, 53, 116, 145, 146, 219, 222, 229, 232, 234, 685, 877, 1032, 1092], "knowledg": [1012, 1092], "known": [107, 137, 227, 266, 270, 700, 701, 867, 872, 1094], "kortlev": 232, "kqlaaargqr": 220, "kr": 753, "kruskal": [685, 880, 881], "kuo": 107, "kva": [436, 449, 611], "kw": 221, "kwarg": [93, 97, 104, 143, 147, 148, 151, 152, 163, 174, 175, 176, 187, 188, 189, 200, 245, 247, 259, 266, 267, 268, 269, 270, 271, 272, 275, 276, 321, 323, 375, 378, 428, 435, 436, 437, 495, 500, 547, 553, 603, 610, 611, 612, 647, 650, 651, 672, 678, 721, 726, 746, 752, 840, 864, 865, 883, 911, 934, 949, 1008, 1029, 1057, 1092], "kwarg1": 234, "kz": 223, "l": [53, 108, 109, 116, 122, 123, 133, 136, 142, 221, 223, 233, 448, 501, 700, 755, 852, 866, 867, 874, 1023], "l1": 67, "l2": 67, "l3": 67, "lab": [863, 880], "label": [65, 67, 70, 72, 82, 85, 86, 92, 94, 95, 96, 219, 222, 224, 229, 231, 232, 671, 700, 703, 720, 745, 753, 754, 756, 757, 758, 853, 863, 932, 971, 1035], "labor": 880, "lack": 966, "lafond": 700, "lahaeavhvyktkyqayqkgkigitlvsnwlmplddnsipdikaaersldfq": 221, "lambda": [221, 851, 877, 880, 881, 899, 907, 911, 932, 935, 937, 946, 973, 986, 1007, 1010, 1015, 1026, 1030, 1031, 1099], "lane": 230, "lane_numb": 230, "langl": [691, 693], "languag": [2, 163, 220], "lapoint": 700, "larg": [53, 117, 122, 145, 146, 215, 222, 229, 694, 695, 754, 874, 880, 909, 969, 976], "larger": [84, 880], "largest": [53, 142, 920, 933], "last": [83, 163, 221, 229, 419, 448, 486, 538, 594, 613, 639, 755, 852, 1099], "latent": [163, 189, 213, 214], "later": [223, 879], "latter": [1, 106, 651], "law": 115, "layout": 224, "lb": 223, "lca": [116, 133, 971, 999], "ldot": [683, 684, 688, 689, 691, 692, 697, 698, 699], "lead": [116, 143, 145, 146, 147, 222, 223, 226], "learn": [883, 950], "least": [89, 90, 129, 227, 231, 360, 404, 413, 414, 416, 474, 481, 482, 484, 525, 532, 533, 535, 579, 588, 589, 591, 635, 636, 637, 685, 755, 863, 880, 881, 1033, 1099], "leav": [122, 221, 431, 497, 550, 607, 907, 930], "lee": [53, 104, 107], "leesleyqqf": 220, "left": [92, 107, 136, 227, 292, 339, 357, 374, 376, 683, 684, 688, 693, 697, 698, 699, 700, 971, 993, 1034, 1035, 1097], "left_child_id": 1022, "leftmost": 233, "legaci": [217, 218, 222], "legal": 274, "legend": 863, "legendr": [755, 852, 866, 867, 869, 870, 872, 873, 874], "len": [53, 65, 77, 391, 462, 513, 566, 625, 663, 759, 881, 952, 953, 977, 980, 1018, 1030, 1099], "length": [0, 1, 3, 13, 14, 15, 18, 19, 34, 46, 47, 50, 51, 52, 53, 65, 82, 83, 85, 91, 98, 99, 100, 116, 133, 145, 146, 163, 176, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 230, 232, 305, 317, 379, 380, 386, 391, 396, 397, 398, 400, 403, 406, 408, 409, 419, 420, 421, 423, 424, 425, 426, 430, 431, 432, 434, 435, 436, 438, 448, 449, 450, 451, 457, 462, 467, 468, 470, 473, 476, 486, 487, 488, 490, 491, 492, 493, 497, 498, 501, 502, 508, 513, 518, 519, 521, 524, 527, 538, 539, 540, 542, 543, 544, 545, 550, 551, 554, 555, 561, 566, 571, 572, 573, 575, 578, 581, 583, 584, 594, 595, 596, 598, 599, 600, 601, 605, 606, 607, 608, 610, 611, 613, 614, 620, 625, 630, 631, 634, 639, 640, 641, 643, 644, 645, 646, 649, 667, 680, 681, 685, 690, 718, 742, 753, 756, 757, 761, 871, 872, 880, 881, 909, 943, 951, 966, 972, 981, 982, 991, 1013, 1020, 1022, 1025, 1026, 1031, 1094, 1097, 1099], "lengtherror": 1013, "leq": 682, "less": [53, 107, 116, 124, 145, 146, 148, 229, 231, 420, 421, 487, 488, 539, 540, 595, 596, 640, 641, 681, 755, 758, 851, 866, 882, 899, 939, 1002, 1036], "lesser": 133, "let": [1, 222, 223, 225, 229, 230, 232, 295, 305, 429, 496, 548, 604, 613, 648, 685, 755, 851, 876, 877, 880, 881, 920, 1032, 1094, 1097, 1099], "letter": [114, 116, 222, 224, 501], "leu": 501, "leucin": 501, "level": [95, 123, 227, 274, 360, 685, 879, 880, 989, 1037, 1094], "levelord": [1001, 1004, 1005, 1006, 1021, 1024], "leven": 757, "lewi": 133, "lexicon": [222, 223, 229], "lfc_result": 690, "li": 133, "librari": [53, 104, 145, 146, 222, 1091, 1092], "libreria": 118, "licens": 1091, "life": 116, "like": [1, 98, 99, 100, 148, 222, 224, 225, 226, 228, 231, 234, 422, 489, 541, 597, 642, 651, 703, 761, 784, 796, 817, 818, 828, 840, 872, 874, 880, 881, 904, 908, 911, 915, 944, 945, 1056, 1092, 1099], "likelihood": 651, "likelyhood": [871, 875], "likewis": [92, 133, 232], "limit": [1, 115, 217, 227, 228, 229, 879, 880, 1031], "limits_": [688, 689, 692, 693, 700], "linalg": 876, "linamaras": 221, "line": [118, 219, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 274, 880, 908, 911, 969], "lineag": [233, 880, 990, 1023], "lineage_map": 990, "linear": [118, 221, 224, 853, 867], "link": [147, 304, 360, 754, 761, 951], "linkag": [881, 988], "linkage_matrix": 988, "linnean": 133, "linux": 915, "lipman": [217, 218, 222], "list": [1, 50, 104, 116, 133, 145, 146, 149, 150, 211, 217, 221, 223, 224, 225, 228, 231, 232, 233, 234, 245, 247, 263, 264, 274, 305, 429, 496, 548, 604, 613, 648, 661, 665, 668, 701, 703, 714, 717, 737, 741, 755, 757, 758, 774, 796, 807, 829, 862, 877, 879, 880, 881, 899, 903, 907, 908, 909, 911, 920, 926, 932, 937, 938, 943, 951, 967, 973, 981, 983, 985, 988, 997, 999, 1000, 1015, 1016, 1020, 1022, 1023, 1030, 1031, 1092, 1099], "liter": 227, "literatur": [1, 112, 136, 881], "live": [1, 319], "lkwh": [436, 449, 611], "ll": [1, 116, 145, 146, 754, 755, 758, 852, 877, 880, 881, 1097, 1099], "lladser": [123, 124, 145, 146], "lladser_ci": 124, "lladser_p": 123, "ln": [109, 117, 122, 125, 683, 685, 688, 693, 700], "load": [0, 220, 222, 223, 228, 230, 231, 292, 339, 357, 360, 376, 663, 685, 703, 704, 753, 754, 757, 758, 909, 1055, 1056, 1092], "loc": [72, 613, 685, 880], "local": [0, 101, 102, 103, 217, 218, 224], "local_pairwise_align": [98, 99, 100, 102, 103], "local_pairwise_align_nucleotid": [98, 99, 100, 101, 103], "local_pairwise_align_protein": [0, 98, 99, 100, 101, 102], "local_pairwise_align_ssw": [0, 98, 99, 100, 101, 102, 103], "locat": [53, 93, 97, 174, 175, 187, 188, 221, 227, 232, 260, 261, 262, 295, 321, 323, 375, 378, 404, 405, 428, 437, 474, 475, 495, 500, 525, 526, 547, 553, 579, 580, 603, 612, 633, 647, 650, 672, 678, 721, 726, 746, 752, 864, 865, 928, 934, 949, 1008, 1012, 1029, 1034, 1098], "loci": 53, "locu": [221, 224, 233], "log": [125, 134, 682, 683, 684, 685, 688, 689, 690, 691, 692, 696, 702], "log2": 690, "log_b": 136, "logarithm": [134, 136, 685], "logic": [3, 234, 1057], "logratio": 682, "long": [219, 222, 229, 231, 404, 474, 525, 579, 683, 754, 840, 866], "long_method_nam": [853, 1035], "longer": [222, 229, 682, 881], "look": [105, 226, 228, 229, 234, 320, 429, 496, 548, 604, 610, 611, 648, 655, 685, 708, 731, 863, 879, 880, 881, 904, 973, 1080, 1097, 1099], "lookup": [98, 99, 100, 101, 102, 103, 260, 261, 262, 655, 708, 731, 755, 758, 968, 979, 983, 993, 994, 1003, 1007, 1022, 1057], "lookup_id": [652, 670, 705, 719, 728, 743], "loop": [222, 1027, 1028], "loos": [1, 761], "lorenz": 118, "lose": [757, 872], "loss": [116, 761], "lost": [757, 872], "lot": 866, "love": [883, 950], "lovel": [696, 702], "low": [124, 852, 872, 880, 939, 990], "lower": [106, 122, 123, 222, 229, 295, 360, 685, 690, 742, 749, 755, 851, 852, 881], "lower_bound": [111, 115, 123], "lower_quantil": 122, "lowercas": [53, 221, 222, 223, 224, 230, 379, 397, 450, 467, 501, 518, 554, 572, 613, 630], "lowest": [116, 133, 997, 999], "lowest_common_ancestor": 997, "lozupon": [116, 145, 146], "lq": 122, "lsmat": [672, 678, 721, 726, 746, 752], "luca": 971, "ly": 501, "lysin": 501, "m": [50, 53, 101, 107, 114, 116, 133, 145, 146, 217, 218, 221, 223, 229, 233, 379, 438, 439, 448, 501, 554, 663, 754, 757, 761, 863, 866, 867, 873, 874, 876, 879, 909, 915, 943, 1014, 1031], "m1": 976, "m2": 976, "m24803": 232, "m24804": 232, "m_shape": 876, "ma": [15, 19, 47, 52, 107, 432, 498, 551, 608, 649], "machin": 230, "machine_nam": 230, "macrophag": 880, "madden": 222, "made": [65, 129, 613, 685, 704, 727, 851, 899, 967, 984, 985, 1007, 1033], "magnitud": [129, 690, 755, 757, 872, 1032], "magnoliophyta": 221, "magnuson": 133, "magurran": [122, 128], "mai": [1, 20, 53, 84, 94, 112, 116, 124, 136, 218, 221, 222, 223, 224, 226, 227, 229, 231, 232, 233, 234, 246, 263, 264, 274, 295, 319, 360, 372, 373, 379, 406, 450, 476, 501, 527, 554, 581, 613, 634, 651, 655, 665, 680, 685, 703, 708, 717, 731, 741, 755, 757, 761, 851, 866, 877, 879, 880, 881, 882, 899, 989, 1032, 1055, 1057, 1092, 1094], "main": 324, "mainli": [762, 852], "maintain": [222, 227, 234, 744, 866, 867, 877, 880], "major": [83, 106, 136, 682, 749, 909, 943, 1030], "make": [84, 92, 222, 227, 231, 234, 292, 339, 357, 360, 376, 439, 655, 680, 708, 731, 753, 757, 881, 1019, 1022, 1023, 1031, 1037, 1057, 1099], "mam": 233, "manag": [274, 275, 276], "mandal": 685, "mani": [1, 107, 132, 150, 227, 231, 651, 682, 685, 761, 866, 872, 880, 881, 899, 1099], "manipul": [0, 89, 90, 231, 360, 414, 416, 482, 484, 533, 535, 589, 591, 613, 636, 637, 682, 703, 909], "mann": 685, "manner": [83, 222, 229, 386, 400, 457, 470, 508, 521, 561, 575, 620, 755, 872], "mannwhitneyu": 685, "mantel": [1, 703, 758, 761], "manual": [107, 111, 122, 231, 1030], "map": [1, 86, 94, 148, 248, 360, 373, 755, 758, 761, 762, 796, 840, 863, 879, 881, 899, 932, 948, 990, 993, 1094], "map_async": 148, "map_f": 148, "mar": [98, 101, 120], "marchand": 700, "margalef": 128, "marguerat": [696, 702], "margush": 1030, "marin": 754, "mark": [221, 224, 232, 1099], "marrow": 880, "marth": [53, 104], "marti": [756, 757], "martin": [682, 694], "mask": [15, 19, 47, 52, 53, 432, 498, 551, 608, 649, 696, 702], "mask_auto": 53, "mask_gap": [432, 498, 551, 608, 649], "mask_length": 53, "maskedarrai": [15, 19, 47, 52], "mat": [651, 663, 666, 669, 683, 684, 686, 687, 688, 689, 691, 692, 694, 695, 696, 1020], "match": [0, 50, 53, 82, 85, 92, 99, 102, 105, 217, 222, 223, 231, 274, 275, 288, 293, 294, 335, 340, 341, 353, 358, 359, 360, 372, 374, 377, 384, 404, 405, 423, 425, 426, 433, 448, 455, 474, 475, 490, 492, 493, 499, 506, 525, 526, 542, 544, 545, 552, 559, 579, 580, 598, 600, 601, 609, 618, 633, 643, 645, 646, 669, 704, 753, 755, 757, 758, 877, 879, 880, 881, 975, 976, 985, 987, 1094, 1099], "match_frequ": [425, 492, 544, 600, 645, 1094], "match_scor": [53, 99, 102, 105], "matevz": 700, "math": 135, "mathbb": [683, 684, 685, 688, 689, 691, 692], "mathemat": [112, 136, 145, 682, 852, 971, 974, 1030], "mathemt": 146, "matplotlib": [671, 720, 745, 853, 863], "matric": [1, 100, 103, 215, 226, 501, 651, 653, 660, 663, 668, 703, 704, 706, 713, 729, 736, 754, 755, 758, 760, 761, 868, 872, 976], "matrix": [1, 53, 105, 143, 147, 148, 151, 152, 212, 432, 498, 551, 608, 649, 651, 652, 653, 655, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 675, 676, 677, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 708, 713, 714, 715, 716, 717, 718, 719, 720, 724, 725, 727, 728, 729, 731, 736, 737, 738, 740, 741, 742, 743, 744, 745, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 761, 852, 863, 866, 868, 869, 870, 872, 873, 874, 876, 878, 883, 884, 886, 899, 909, 910, 913, 928, 935, 939, 941, 942, 943, 950, 988, 1020, 1031, 1091, 1096], "matrix_data": [883, 950], "matrix_element_typ": 910, "matrix_rank": 876, "matsen": 133, "matter": [231, 296, 317, 655, 708, 731], "matthew": 1030, "matto": 700, "max": [53, 107, 108, 129, 880, 881, 920, 991], "max_count": [877, 880, 881], "max_i": 142, "max_sample_count": 920, "max_width": 222, "maxim": [53, 133, 754, 867], "maxima": 923, "maximum": [134, 142, 222, 223, 685, 690, 754, 796, 851, 867, 871, 875, 880, 881, 923, 976], "mccoi": 133, "mcdonald": [883, 950], "mcentyr": 222, "mci": 1094, "mcintosh": [126, 127], "mcintosh_": 126, "mcintosh_d": 127, "mcmorri": 1030, "md": [222, 895, 903, 907, 932, 946], "md5": [221, 1056], "md_i": 921, "md_j": 921, "mdfivaifalfvissftitstnaveastlldignlsr": 221, "mean": [225, 227, 234, 274, 305, 320, 379, 408, 409, 583, 584, 662, 677, 682, 685, 688, 690, 700, 715, 725, 738, 751, 818, 840, 866, 870, 871, 872, 875, 877, 878, 880, 881, 909, 943, 1092, 1097], "meaning": [53, 82, 85, 92, 872, 1094], "measur": [1, 112, 114, 120, 121, 122, 123, 124, 127, 128, 132, 133, 134, 136, 137, 139, 145, 146, 651, 685, 696, 702, 703, 866, 879, 880, 951, 971, 1093], "mechan": [1057, 1099], "media": 880, "median": [685, 757], "medic": 221, "medlin": 232, "meepqsdpsv": [432, 498, 551, 608, 649], "meet": [104, 231, 320, 372, 373, 1026], "member": [266, 270, 1057, 1080, 1099], "membership": 234, "meme_v4": 219, "memo": [69, 307, 383, 454, 505, 558, 617], "memori": [3, 118, 219, 220, 222, 223, 224, 229, 230, 232, 360, 703, 758, 851, 872, 883, 950, 1056, 1092], "mengyao": [53, 104], "menhinick": 125, "menopaus": 881, "menten": 129, "mention": 227, "merg": 360, "merged_t": 924, "messag": [1, 116, 143, 145, 146, 147, 774, 818, 1036, 1092], "met": [1, 501, 1080], "met_neg": 881, "met_po": 881, "meta": [231, 879, 880], "metabolit": [1, 881, 883, 950, 1093], "metabolite_test": 881, "metadata": [0, 1, 65, 70, 79, 82, 83, 85, 89, 90, 91, 92, 94, 95, 216, 219, 221, 222, 223, 224, 225, 229, 230, 379, 384, 386, 393, 395, 396, 397, 400, 403, 413, 414, 416, 422, 429, 430, 434, 435, 436, 438, 448, 449, 450, 455, 457, 464, 466, 467, 470, 473, 481, 482, 484, 489, 496, 501, 506, 508, 515, 517, 518, 521, 524, 532, 533, 535, 541, 548, 554, 559, 561, 568, 570, 571, 572, 575, 578, 588, 589, 591, 597, 604, 605, 606, 610, 611, 613, 618, 620, 627, 629, 630, 635, 636, 637, 642, 648, 667, 718, 742, 754, 762, 774, 796, 807, 818, 840, 863, 874, 877, 879, 880, 881, 884, 894, 895, 897, 898, 899, 903, 904, 907, 909, 910, 911, 914, 919, 924, 926, 932, 941, 942, 943, 945, 946, 947, 1091, 1094, 1095], "metadata_f": 899, "metadata_field": [909, 943], "metadata_formatt": [904, 945], "metadata_i": 921, "metadata_j": 921, "metadata_map": [762, 763, 785, 796, 829, 840], "metadatacolumn": [277, 278, 284, 286, 287, 342, 343, 349, 351, 352, 360, 371], "metadatafileerror": 373, "metag": 896, "metagenom": 896, "metatdata": 221, "metdata": [613, 924], "methionin": [448, 501], "method": [0, 1, 3, 19, 20, 34, 52, 53, 65, 72, 84, 92, 93, 97, 98, 118, 143, 145, 147, 148, 151, 152, 163, 174, 175, 176, 187, 188, 189, 200, 216, 220, 228, 231, 235, 245, 247, 248, 265, 277, 295, 305, 316, 321, 323, 324, 342, 360, 375, 378, 379, 382, 383, 397, 406, 428, 430, 436, 437, 438, 447, 449, 450, 453, 454, 467, 476, 495, 500, 501, 504, 505, 518, 527, 547, 553, 554, 557, 558, 572, 581, 603, 605, 611, 612, 613, 616, 617, 630, 634, 647, 650, 651, 672, 678, 682, 685, 690, 694, 700, 703, 704, 721, 726, 727, 744, 746, 752, 753, 754, 755, 756, 757, 758, 763, 774, 784, 785, 796, 807, 817, 818, 828, 829, 840, 851, 853, 863, 864, 865, 866, 867, 872, 883, 933, 934, 943, 949, 951, 952, 953, 969, 971, 972, 973, 976, 977, 979, 980, 981, 982, 984, 986, 987, 1007, 1008, 1013, 1015, 1027, 1028, 1029, 1030, 1031, 1037, 1049, 1056, 1057, 1058, 1068, 1080, 1091, 1094, 1097, 1099], "metodologica": 118, "metric": [84, 107, 112, 116, 117, 133, 143, 144, 145, 146, 147, 148, 149, 150, 151, 212, 223, 402, 472, 523, 577, 632, 667, 681, 718, 727, 742, 951, 1094], "metricspac": 727, "mgc": 233, "mi": 50, "micha": 129, "michael": 223, "microbi": [116, 123, 124, 133, 145, 146, 685, 753, 754, 756, 757, 863], "microbiol": [145, 146], "microbiom": [1, 133, 148, 685, 690, 872], "microsoft": 231, "mid": 1013, "middl": [122, 319], "midpoint": [1013, 1031], "mieadkvahvqvgnnleh": 232, "might": [1, 118, 226, 228, 754, 879, 880, 881, 976, 1092], "miller": [217, 218], "million": 148, "min": [133, 139, 881], "min_count": [877, 880, 881], "min_group_s": 899, "min_length": [404, 419, 474, 486, 525, 538, 579, 594, 639, 1094], "minim": 227, "minima": 927, "minimize_scalar": 117, "minimum": [116, 133, 139, 233, 409, 419, 486, 538, 584, 594, 639, 685, 757, 851, 880, 881, 899, 927], "mininum": 690, "minor": [218, 909, 943], "minter": [0, 65, 70, 82, 85, 94, 95, 219, 229], "minu": [84, 224, 232, 829], "mirror": 690, "misc_bind": 224, "miscellan": 1091, "mislead": [84, 151], "mismatch": [0, 50, 53, 99, 102, 105, 217, 218, 423, 424, 425, 490, 491, 492, 542, 543, 544, 598, 599, 600, 643, 644, 645, 669, 755, 975], "mismatch_frequ": [423, 490, 542, 598, 643, 1094], "mismatch_scor": [53, 99, 102, 105], "miss": [217, 222, 231, 232, 286, 288, 289, 291, 293, 294, 324, 333, 335, 336, 338, 340, 341, 351, 353, 354, 356, 358, 359, 360, 369, 373, 377, 397, 467, 518, 572, 630, 682, 694, 754, 863, 879, 880, 1099], "missing_schem": [277, 324, 342], "missingiderror": [655, 662, 665, 670, 677, 708, 715, 717, 719, 725, 731, 738, 741, 743, 751], "missingnodeerror": [116, 133, 143, 145, 146, 147, 984, 985, 987, 1002, 1015], "mit": 219, "mitochondri": [233, 435, 447, 610], "mix": 231, "mizrachi": 233, "ml": 129, "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm": 438, "mn": 128, "moac": 217, "mode": [84, 234, 274, 448, 881, 899, 1057], "model": [2, 122, 123, 124, 129, 163, 220, 663, 682, 690, 703, 881], "moder": 755, "modif": [305, 761], "modifi": [95, 222, 224, 232, 265, 379, 501, 554, 613, 744, 840, 873, 907, 946, 1015], "modul": [0, 1, 2, 220, 232, 234, 273, 679, 682, 703, 762, 852, 877, 1055, 1056, 1092, 1093, 1094, 1095, 1096, 1097, 1099], "mol": [98, 101, 217, 218, 221, 224], "mol_typ": [221, 224], "molbev": 1031, "molecul": [221, 222, 224, 613, 651, 1094], "molecular": [101, 761, 971, 1031, 1094], "moment": [221, 755, 1099], "monkei": 265, "monkey_patch": [245, 247], "monoton": [703, 704, 758, 759], "mont": 877, "month": 233, "mooer": 133, "more": [0, 1, 83, 84, 85, 93, 97, 98, 104, 107, 112, 118, 143, 150, 174, 175, 187, 188, 218, 221, 222, 223, 227, 228, 229, 230, 231, 232, 267, 271, 291, 321, 323, 338, 356, 360, 374, 375, 378, 410, 411, 412, 415, 428, 437, 478, 479, 480, 483, 495, 500, 501, 529, 530, 531, 534, 536, 547, 553, 585, 586, 587, 590, 603, 612, 647, 650, 655, 672, 678, 682, 685, 687, 690, 703, 708, 721, 726, 731, 744, 746, 752, 753, 754, 755, 756, 757, 758, 761, 773, 795, 806, 839, 850, 851, 863, 864, 865, 866, 867, 874, 880, 881, 883, 899, 915, 934, 949, 950, 972, 989, 1008, 1029, 1030, 1092, 1097, 1098], "mosaic": 232, "most": [83, 106, 108, 117, 133, 215, 219, 222, 223, 226, 227, 229, 231, 233, 448, 613, 755, 851, 874, 877, 991, 993, 1030, 1097], "mostli": [231, 232], "motif": [404, 474, 525, 579, 1094], "motif_slic": [404, 474, 525, 579], "motif_typ": [404, 474, 525, 579], "motiv": 148, "mpl": [435, 436, 438, 448, 449, 610, 611], "mpt": [435, 610], "mqhvsapvfvfectrlai": 232, "mrna": 221, "msa": [0, 3, 16, 17, 48, 65, 66, 67, 68, 69, 70, 72, 75, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 91, 92, 94, 95, 96, 219, 222, 223, 229, 232], "msa1": 92, "msa2": 92, "msa_copi": [68, 69], "msl072": 1031, "mt19937": [976, 1015], "mtcraqliavprassla": 232, "mu": 877, "mu_": 877, "much": [0, 1, 116, 145, 146, 227, 1092], "mullikin": 223, "multi": 685, "multi_replac": [685, 695], "multifurc": [227, 1097], "multiindex": [95, 749], "multimod": 866, "multinomi": [690, 939], "multipl": [0, 65, 91, 116, 145, 146, 219, 221, 222, 223, 224, 225, 227, 233, 295, 317, 613, 651, 682, 685, 690, 694, 761, 852, 874, 880, 899, 1023, 1030, 1092, 1097], "multiple_comparisons_correct": 685, "multipli": 133, "multivari": [683, 753, 754, 756, 757, 866, 867, 1091], "must": [15, 47, 53, 65, 82, 85, 92, 93, 97, 116, 118, 133, 145, 146, 147, 148, 151, 174, 175, 187, 188, 212, 217, 219, 222, 223, 226, 227, 228, 229, 231, 232, 246, 320, 321, 323, 360, 372, 374, 375, 378, 379, 397, 402, 422, 428, 435, 437, 467, 472, 489, 495, 500, 501, 518, 523, 541, 547, 553, 554, 572, 577, 597, 603, 610, 612, 613, 630, 632, 642, 647, 650, 665, 672, 678, 685, 690, 701, 704, 717, 721, 726, 741, 746, 752, 753, 754, 755, 756, 757, 759, 761, 784, 817, 828, 851, 863, 864, 865, 866, 871, 880, 881, 882, 899, 907, 908, 915, 924, 932, 934, 944, 945, 946, 949, 973, 1008, 1015, 1023, 1029, 1030, 1031, 1034, 1036, 1056, 1057, 1080, 1099], "mutabl": [118, 613, 1037, 1094], "mutant": 224, "mutat": [651, 663, 951], "my": 1094, "my_obj": 1092, "myeloid": 880, "myer": [217, 218], "myformat": [234, 245, 246, 247], "myformat2": [245, 246, 247], "myformat_read": [245, 247], "myformat_sniff": 246, "myobject": [245, 247], "n": [1, 53, 108, 109, 112, 115, 117, 118, 119, 122, 125, 126, 127, 128, 129, 133, 135, 142, 215, 217, 218, 219, 222, 223, 224, 228, 229, 230, 232, 233, 234, 245, 246, 247, 274, 275, 379, 419, 432, 486, 498, 501, 525, 538, 551, 554, 594, 608, 639, 649, 694, 695, 703, 755, 758, 761, 851, 866, 867, 868, 871, 873, 874, 875, 877, 881, 882, 909, 915, 939, 943, 952, 953, 965, 973, 977, 980, 986, 991, 993, 1000, 1015, 1016, 1023, 1030, 1031, 1036, 1094], "n1": 911, "n4": 911, "n_": [107, 108, 122], "n_compon": [683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702], "n_composit": [683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699], "n_featur": [213, 700], "n_i": [109, 112, 126, 127], "n_ob": 941, "n_object": 213, "n_pack": 3, "n_partit": 700, "n_posit": [13, 15, 17, 19, 44, 47, 52], "n_segment": [3, 14, 18, 34, 46, 51], "n_seq": [13, 14, 15, 17, 18, 19, 44, 46, 47, 51, 52], "n_sequenc": [3, 13], "n_var": 941, "na": [231, 908], "naess": 700, "name": [1, 93, 97, 116, 133, 145, 146, 174, 175, 187, 188, 217, 218, 223, 224, 225, 227, 228, 230, 231, 232, 234, 235, 260, 261, 262, 267, 271, 278, 284, 293, 294, 295, 321, 323, 325, 331, 340, 341, 343, 349, 358, 359, 360, 361, 367, 371, 373, 374, 375, 377, 378, 422, 428, 437, 438, 439, 445, 447, 489, 495, 500, 541, 547, 553, 597, 603, 612, 642, 647, 650, 651, 663, 668, 672, 678, 685, 690, 696, 701, 721, 726, 746, 752, 753, 754, 756, 757, 762, 774, 818, 853, 863, 864, 865, 899, 904, 934, 942, 945, 949, 951, 965, 967, 968, 969, 971, 973, 974, 975, 976, 979, 983, 984, 985, 986, 987, 989, 991, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1029, 1030, 1049, 1055, 1092, 1097], "name_txt": 233, "named_gc": 439, "namedtemporaryfil": 274, "nan": [19, 52, 84, 88, 92, 124, 217, 231, 288, 289, 291, 293, 294, 324, 335, 336, 338, 340, 341, 353, 354, 356, 358, 359, 360, 369, 377, 397, 406, 467, 476, 518, 527, 572, 581, 630, 634, 680, 681, 753, 754, 755, 756, 757, 758, 761, 863, 879, 880, 1022, 1034], "nan_length_valu": 1022, "nanmean": 881, "naohisa": 223, "nar": 223, "nasanfta": [419, 486, 538, 594, 639], "nat": 224, "natal": 700, "nation": [222, 233, 663], "nativ": [1, 673, 722, 747, 872], "natl": [100, 103], "natsort": 937, "natur": [112, 121, 122, 137, 139, 360, 937], "nb": 275, "nbk21097": 222, "nbk279675": 217, "nbk279682": 218, "nc": 275, "ncbi": [99, 100, 102, 103, 217, 218, 222, 224, 233, 435, 436, 438, 439, 446, 447, 448, 449, 610, 611, 989, 1094], "ncbiinsight": 233, "ncifcrf": 84, "ncrna": 613, "nd": 908, "ndarrai": [17, 18, 19, 51, 52, 88, 147, 163, 176, 189, 200, 213, 379, 381, 398, 399, 401, 402, 407, 417, 418, 423, 424, 425, 426, 427, 432, 452, 468, 469, 471, 472, 477, 485, 490, 491, 492, 493, 494, 498, 501, 503, 519, 520, 522, 523, 528, 537, 542, 543, 544, 545, 546, 549, 551, 554, 556, 573, 574, 576, 577, 582, 592, 593, 598, 599, 600, 601, 602, 608, 613, 615, 631, 632, 638, 643, 644, 645, 646, 649, 655, 673, 683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 695, 697, 698, 699, 700, 704, 708, 722, 731, 739, 744, 747, 759, 761, 875, 882, 902, 941, 988], "ne2": 221, "nearbi": 53, "nearli": [98, 99, 100], "necessari": [92, 217, 229, 305, 613, 704, 753, 754, 755, 784, 817, 828, 976, 1055, 1092], "necessarili": [82, 85, 92, 228, 406, 476, 527, 581, 613, 634, 882], "nee": 116, "need": [1, 82, 85, 91, 116, 145, 146, 148, 215, 220, 225, 227, 234, 245, 247, 274, 305, 320, 450, 685, 690, 691, 692, 701, 753, 754, 756, 757, 758, 851, 852, 867, 874, 877, 880, 881, 909, 973, 976, 1034, 1035, 1057, 1099], "needl": 98, "needleman": [0, 98, 99, 100], "neg": [1, 53, 99, 102, 105, 118, 231, 448, 687, 694, 695, 727, 866, 867, 872, 877, 881, 1031], "negat": 318, "neglig": 1, "nei": 1031, "neighbor": [224, 1016, 1031], "neighbour_join": 1031, "neither": [65, 94, 275, 935, 1015, 1024], "nellangiqpfvtlfhwdlpqvledeyggflnsgvindfrdytdlcfkefgd": 221, "neq": 877, "nest": [227, 703, 755, 926, 941, 1018, 1097], "never": [222, 232], "new": [0, 82, 85, 93, 94, 95, 109, 120, 123, 124, 135, 145, 174, 187, 233, 245, 246, 247, 259, 269, 305, 321, 374, 375, 386, 397, 400, 428, 429, 457, 467, 470, 495, 496, 508, 518, 521, 547, 548, 561, 572, 575, 603, 604, 613, 620, 630, 647, 648, 672, 721, 744, 746, 755, 756, 758, 864, 867, 875, 907, 930, 931, 933, 934, 936, 938, 946, 947, 948, 952, 953, 977, 980, 1007, 1008, 1012, 1013, 1027, 1028, 1031, 1094, 1097, 1099], "new_fasta_fh": 222, "new_fh": 223, "new_qual_fh": 222, "new_tabl": [907, 930, 937], "new_taxdump": 233, "new_tre": [1027, 1028], "newcastl": 221, "newick": [116, 145, 146, 909, 914, 943, 965, 971, 1008, 1029, 1031, 1092, 1097], "newick_doc": 227, "newick_str": 1031, "newicktre": 227, "newlin": [222, 227, 229, 234, 235, 266, 267, 270, 271, 274], "next": [1, 116, 123, 124, 145, 146, 221, 227, 234, 613, 685, 840, 866, 1030, 1097, 1099], "nh": 232, "nhx": 232, "nich": 867, "nident": [217, 218], "nih": [99, 100, 102, 103, 217, 218, 222, 224, 230, 233, 438, 446, 447], "nlm": [99, 100, 102, 103, 217, 218, 222, 224, 233, 438, 446, 447], "nnz": [883, 909, 943, 950], "no_gap": [419, 486, 538, 594, 639], "node": [1, 116, 145, 146, 701, 951, 952, 953, 956, 960, 966, 967, 968, 970, 971, 972, 973, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1016, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1092, 1097], "node_c": 1000, "node_id": [987, 993, 1022], "node_info": 227, "nodes_new": 233, "nodes_slim": 233, "nolengtherror": [966, 982, 991], "nomenclatur": [379, 450, 501, 554, 613], "non": [65, 110, 118, 217, 219, 221, 225, 231, 295, 379, 415, 427, 431, 483, 494, 497, 501, 534, 546, 550, 590, 602, 607, 651, 682, 683, 684, 685, 687, 690, 694, 695, 697, 698, 699, 727, 753, 756, 757, 761, 866, 872, 877, 883, 909, 924, 943, 946, 975, 976, 981, 1094], "non_tip": [998, 1004, 1005, 1006, 1021, 1024, 1030, 1097], "noncanon": [431, 497, 550, 607], "nonconcept": [114, 137], "none": [13, 45, 50, 53, 65, 82, 84, 85, 93, 94, 95, 99, 100, 102, 103, 104, 116, 129, 133, 134, 136, 143, 145, 146, 147, 148, 174, 187, 217, 222, 226, 234, 235, 245, 247, 260, 261, 262, 266, 270, 274, 292, 295, 305, 316, 318, 320, 321, 339, 357, 360, 369, 372, 373, 375, 376, 379, 398, 402, 404, 405, 406, 417, 428, 432, 433, 450, 468, 472, 474, 475, 476, 485, 495, 498, 499, 501, 519, 523, 525, 526, 527, 537, 547, 551, 552, 554, 573, 577, 579, 580, 581, 592, 603, 608, 609, 613, 631, 632, 633, 634, 638, 647, 649, 667, 671, 672, 685, 690, 691, 692, 694, 695, 696, 704, 718, 720, 721, 727, 742, 745, 746, 753, 754, 755, 756, 757, 758, 759, 763, 785, 796, 829, 851, 853, 863, 864, 868, 871, 872, 875, 876, 878, 879, 880, 881, 882, 883, 899, 903, 904, 909, 910, 911, 914, 919, 924, 925, 932, 934, 935, 939, 943, 944, 945, 946, 950, 951, 971, 972, 976, 979, 981, 989, 998, 1000, 1003, 1004, 1005, 1006, 1008, 1015, 1019, 1020, 1022, 1023, 1024, 1027, 1028, 1030, 1031, 1057, 1058, 1080, 1094, 1097, 1099], "nonlinear": 129, "nonmatch": [755, 758], "nonneg": 222, "nonparametr": [115, 682, 694], "nontip": 1001, "nonzero": [216, 907, 912, 923, 927, 929, 930, 946, 950], "noparenterror": 966, "noqa": 909, "nor": [65, 82, 85, 94, 226, 229, 704, 935, 1015], "norm": [763, 785, 829, 840, 899], "normal": [115, 146, 223, 224, 324, 360, 753, 757, 872, 873, 874, 877, 878, 880, 881, 899, 930, 973], "not_non": [1080, 1099], "notabl": 223, "notat": [227, 231, 501], "note": [3, 15, 16, 20, 47, 48, 50, 53, 65, 72, 77, 82, 83, 84, 85, 86, 88, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 145, 146, 148, 150, 216, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 295, 305, 306, 307, 319, 372, 374, 379, 382, 383, 386, 397, 400, 403, 406, 408, 419, 430, 432, 434, 435, 436, 438, 439, 446, 447, 448, 449, 450, 453, 454, 457, 467, 470, 473, 476, 486, 498, 501, 504, 505, 508, 518, 521, 524, 527, 538, 551, 554, 557, 558, 561, 572, 575, 578, 581, 583, 594, 605, 606, 608, 610, 611, 613, 616, 617, 620, 630, 634, 639, 649, 651, 655, 662, 663, 673, 676, 677, 680, 681, 685, 690, 691, 692, 694, 696, 700, 701, 702, 704, 708, 715, 722, 724, 725, 727, 731, 738, 739, 744, 747, 750, 751, 753, 754, 755, 756, 757, 758, 761, 851, 863, 866, 867, 872, 874, 875, 880, 881, 882, 883, 886, 899, 900, 908, 909, 915, 924, 926, 939, 941, 942, 943, 950, 969, 971, 972, 973, 974, 976, 981, 987, 989, 1015, 1020, 1022, 1023, 1024, 1025, 1030, 1031, 1034, 1036, 1055, 1056, 1094, 1097, 1099], "notebook": 853, "noth": [95, 274, 374, 433, 499, 552, 609, 1057], "notic": [1, 222, 227, 229, 881, 1099], "notifi": 755, "notimplementederror": [866, 867], "notion": 755, "notredam": [696, 702], "notstart": 231, "nov": [100, 103, 221, 863], "novel": 685, "novemb": 1031, "now": [1, 122, 221, 222, 224, 229, 613, 682, 685, 754, 851, 852, 877, 880, 881, 946, 1097, 1099], "np": [13, 14, 15, 19, 46, 47, 52, 84, 88, 116, 124, 133, 145, 146, 163, 176, 217, 288, 291, 335, 338, 353, 356, 360, 369, 379, 381, 398, 399, 401, 402, 406, 407, 417, 418, 423, 424, 425, 426, 427, 432, 452, 468, 469, 471, 472, 476, 477, 485, 490, 491, 492, 493, 494, 498, 501, 503, 519, 520, 522, 523, 527, 528, 537, 542, 543, 544, 545, 546, 549, 551, 554, 556, 573, 574, 576, 577, 581, 582, 592, 593, 598, 599, 600, 601, 602, 608, 613, 615, 631, 632, 634, 638, 643, 644, 645, 646, 649, 651, 680, 681, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 702, 703, 753, 755, 756, 757, 758, 761, 762, 851, 852, 863, 876, 877, 879, 880, 881, 882, 896, 897, 898, 899, 900, 902, 903, 906, 907, 913, 914, 915, 916, 917, 919, 920, 923, 924, 925, 927, 930, 931, 932, 933, 935, 937, 938, 939, 940, 941, 945, 946, 948, 993, 1015, 1030, 1034], "np_286546": 217, "npd": 133, "nrte": [419, 486, 538, 594, 639], "ns_": 129, "nt": 295, "nuc": [432, 498, 551, 608, 649, 651, 663], "nuc_pattern": 1099, "nuccor": 224, "nucl": 223, "nucleic": [229, 233, 379, 450, 501, 554, 613], "nucleobas": [379, 554], "nucleotid": [0, 53, 99, 102, 218, 221, 222, 223, 224, 379, 396, 418, 430, 432, 498, 551, 554, 571, 593, 605, 608, 649, 651, 663, 1099], "nucleotidemixin": [396, 430, 571, 605], "null": [227, 685, 690, 761, 877, 946], "num_it": [877, 880, 881], "num_object": 759, "num_repeat": 129, "num_run": [880, 881], "number": [1, 65, 77, 82, 85, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 145, 146, 147, 215, 217, 219, 221, 222, 224, 227, 229, 230, 232, 233, 274, 295, 316, 360, 391, 398, 406, 423, 425, 462, 468, 476, 490, 492, 513, 519, 527, 542, 544, 566, 573, 581, 598, 600, 625, 631, 634, 643, 645, 651, 666, 684, 685, 690, 694, 695, 697, 698, 699, 700, 704, 753, 754, 755, 756, 757, 758, 759, 761, 796, 840, 851, 867, 871, 872, 874, 875, 877, 878, 880, 881, 882, 883, 899, 909, 913, 915, 929, 939, 943, 971, 978, 1015, 1034, 1035], "number_of_dimens": [757, 872], "numer": [1, 19, 52, 117, 122, 217, 226, 231, 233, 342, 360, 369, 373, 377, 700, 754, 755, 796, 852, 863, 866, 867, 873, 874, 881, 1035], "numeric_onli": 1, "numericmetadatacolumn": [324, 360, 371], "numpi": [1, 13, 14, 15, 46, 47, 147, 163, 176, 213, 655, 673, 683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 696, 697, 698, 699, 700, 702, 703, 704, 708, 722, 731, 739, 747, 753, 757, 759, 761, 762, 796, 818, 840, 851, 852, 877, 879, 880, 881, 882, 896, 897, 898, 899, 900, 903, 906, 907, 913, 914, 915, 916, 917, 919, 920, 924, 925, 929, 930, 931, 932, 933, 935, 937, 938, 939, 940, 943, 945, 946, 1094], "nutrient": 700, "nwnnnnnn": [410, 415, 478, 483, 529, 534, 585, 590], "o": [92, 93, 97, 133, 174, 175, 187, 188, 221, 222, 223, 230, 232, 321, 323, 375, 378, 428, 437, 495, 500, 501, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 864, 865, 915, 934, 949, 1008, 1029, 1031, 1092, 1098], "o1": [897, 898, 900, 903, 906, 907, 913, 914, 915, 916, 917, 919, 920, 924, 925, 926, 930, 931, 932, 933, 935, 937, 938, 939, 940, 942, 945, 946, 948], "o2": [897, 898, 900, 903, 906, 907, 913, 914, 915, 916, 917, 919, 920, 924, 925, 926, 930, 931, 932, 933, 935, 937, 938, 939, 940, 942, 945, 946, 948], "o3": [897, 898, 900, 906, 915, 920, 924, 933], "o31698": 232, "o31699": 232, "o4": [897, 898, 900, 915, 933], "o5": [900, 915], "o83071": 232, "ob": [1, 110, 141, 941], "obesrvation_metadata_f": 924, "obf": 223, "obj": [234, 247, 268, 272, 1048, 1099], "object": [0, 1, 2, 3, 16, 48, 53, 65, 68, 69, 70, 79, 82, 85, 86, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 148, 151, 152, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 266, 268, 270, 272, 277, 278, 284, 287, 290, 295, 296, 302, 304, 305, 306, 307, 308, 314, 316, 317, 318, 319, 320, 324, 325, 331, 334, 337, 342, 343, 349, 352, 355, 360, 361, 367, 370, 373, 374, 377, 379, 381, 384, 386, 397, 398, 402, 405, 406, 413, 414, 416, 417, 418, 423, 424, 425, 426, 433, 452, 455, 457, 467, 468, 472, 475, 476, 481, 482, 484, 485, 490, 491, 492, 493, 499, 501, 503, 506, 508, 518, 519, 523, 526, 527, 532, 533, 535, 537, 542, 543, 544, 545, 552, 554, 556, 559, 561, 572, 573, 577, 580, 581, 588, 589, 591, 592, 593, 598, 599, 600, 601, 609, 613, 615, 618, 620, 630, 631, 632, 633, 634, 635, 636, 637, 638, 643, 644, 645, 646, 655, 665, 667, 671, 679, 680, 685, 703, 704, 708, 717, 718, 720, 727, 731, 741, 742, 745, 753, 754, 756, 757, 758, 759, 784, 817, 828, 866, 867, 872, 873, 874, 883, 886, 898, 908, 909, 910, 911, 936, 941, 943, 944, 945, 948, 951, 968, 983, 1020, 1022, 1031, 1034, 1035, 1056, 1057, 1080, 1092, 1094, 1097, 1099], "obs_id": [913, 915, 920], "obs_map": 911, "obs_phi": 899, "observ": [1, 106, 116, 119, 129, 132, 141, 145, 146, 151, 216, 406, 432, 476, 498, 527, 551, 581, 608, 634, 649, 685, 761, 852, 877, 880, 881, 883, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 950, 1002, 1030, 1096, 1099], "observation_column_nam": [904, 945], "observation_group_metadata": [883, 914], "observation_id": [883, 920, 928, 933], "observation_index": 883, "observation_metadata": 883, "observation_metadata_f": 924, "observed_char": [406, 476, 527, 581, 634], "observed_featur": 141, "obsolet": 229, "obtain": [117, 360, 386, 457, 508, 561, 613, 620, 662, 663, 677, 685, 703, 715, 725, 738, 749, 751, 753, 755, 757, 1051, 1052, 1053], "obviou": 227, "oc": 221, "occur": [53, 218, 222, 223, 226, 227, 267, 271, 274, 417, 485, 537, 592, 613, 638, 881, 975, 984], "occurr": [113, 140, 398, 410, 411, 412, 415, 468, 478, 479, 480, 483, 519, 529, 530, 531, 534, 536, 573, 585, 586, 587, 590, 631], "oct": [222, 224], "odot": [692, 699], "off": [122, 379, 501, 554, 697, 880, 974, 1030, 1034, 1099], "offer": 1057, "offici": 216, "offset": [223, 224], "often": [1, 116, 143, 147, 221, 222, 224, 703, 761, 867, 872, 877, 1055], "oh": 1091, "oiko": 136, "ol": 116, "old": 948, "older": 229, "om": [883, 950], "omic": 682, "ominu": 698, "omit": [13, 45, 227, 360, 373, 703, 939, 989, 1023, 1025, 1030, 1092], "ommit": 230, "onc": [119, 222, 234, 1024], "one": [0, 1, 82, 83, 84, 85, 89, 90, 92, 98, 99, 100, 106, 116, 117, 118, 120, 122, 133, 134, 143, 145, 146, 176, 200, 221, 222, 223, 224, 225, 227, 228, 229, 231, 232, 233, 234, 246, 267, 271, 291, 293, 317, 320, 322, 338, 340, 356, 358, 360, 389, 394, 397, 410, 411, 412, 413, 414, 415, 416, 448, 460, 465, 467, 478, 479, 480, 481, 482, 483, 484, 501, 511, 516, 518, 529, 530, 531, 532, 533, 534, 535, 536, 564, 569, 572, 585, 586, 587, 588, 589, 590, 591, 623, 628, 630, 635, 636, 637, 651, 655, 667, 685, 704, 708, 718, 731, 742, 749, 754, 755, 757, 758, 761, 762, 763, 852, 868, 871, 872, 879, 880, 881, 896, 899, 924, 935, 966, 968, 969, 975, 989, 1002, 1007, 1015, 1092, 1097, 1099], "one_to_mani": 899, "one_to_many_md_kei": 899, "one_to_many_mod": 899, "ones": [13, 17, 44, 867, 880, 924], "onli": [0, 1, 53, 92, 119, 120, 123, 133, 134, 151, 176, 200, 219, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 274, 288, 289, 305, 320, 335, 336, 353, 354, 360, 369, 374, 379, 397, 404, 438, 467, 474, 501, 518, 525, 554, 572, 579, 613, 630, 651, 665, 682, 685, 697, 717, 727, 741, 742, 744, 749, 753, 757, 758, 851, 852, 867, 872, 874, 879, 880, 881, 897, 898, 899, 907, 909, 921, 946, 972, 975, 976, 978, 981, 984, 1007, 1015, 1020, 1024, 1037, 1080, 1097, 1099], "onlin": [122, 223], "ons": 231, "onto": [234, 265, 873, 1030], "ontologi": 225, "ontology_term": 225, "oo": 1092, "open": [0, 93, 97, 98, 99, 100, 101, 102, 103, 148, 174, 175, 187, 188, 217, 218, 223, 234, 245, 247, 266, 267, 268, 270, 271, 272, 275, 276, 321, 323, 375, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 864, 865, 909, 934, 945, 949, 1008, 1029, 1056, 1091, 1092], "open_fil": 1056, "open_filehandl": 1092, "oper": [1, 3, 82, 85, 92, 145, 217, 222, 227, 318, 379, 408, 409, 501, 554, 583, 584, 613, 682, 684, 697, 698, 699, 703, 704, 739, 755, 756, 872, 894, 895, 897, 898, 899, 903, 909, 922, 926, 935, 936, 937, 938, 939, 940, 943, 946, 989, 1013, 1030, 1058, 1091, 1092, 1094], "operon": 295, "opinion": 118, "oplu": 697, "oppos": [758, 1099], "optim": [1, 53, 117, 143, 145, 146, 147, 757, 982, 1032], "option": [13, 15, 19, 34, 45, 47, 52, 53, 65, 82, 84, 85, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 110, 111, 112, 114, 116, 121, 122, 123, 124, 129, 133, 134, 136, 137, 138, 143, 145, 146, 147, 148, 151, 163, 174, 175, 187, 188, 211, 212, 213, 214, 219, 220, 222, 223, 228, 229, 231, 232, 233, 235, 245, 246, 247, 266, 267, 268, 270, 271, 272, 274, 288, 292, 293, 294, 295, 305, 316, 320, 321, 322, 323, 335, 339, 340, 341, 353, 357, 358, 359, 360, 369, 372, 373, 375, 376, 377, 378, 379, 384, 396, 397, 398, 402, 404, 405, 406, 409, 417, 419, 420, 421, 423, 425, 428, 431, 432, 437, 438, 447, 448, 449, 455, 467, 468, 472, 474, 475, 476, 485, 486, 487, 488, 490, 492, 495, 497, 498, 500, 501, 506, 518, 519, 523, 525, 526, 527, 537, 538, 539, 540, 542, 544, 547, 550, 551, 553, 554, 559, 571, 572, 573, 577, 579, 580, 581, 584, 592, 594, 595, 596, 598, 600, 603, 607, 608, 610, 611, 612, 613, 618, 630, 631, 632, 633, 634, 638, 639, 640, 641, 643, 645, 647, 649, 650, 662, 665, 667, 671, 672, 678, 681, 685, 690, 691, 692, 694, 695, 704, 715, 717, 718, 720, 721, 726, 738, 741, 742, 744, 745, 746, 752, 753, 754, 755, 756, 757, 758, 759, 761, 796, 851, 863, 864, 865, 867, 868, 871, 872, 874, 875, 878, 879, 880, 881, 882, 894, 895, 896, 899, 900, 902, 903, 906, 907, 909, 914, 915, 916, 919, 920, 921, 922, 923, 924, 927, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 948, 949, 951, 972, 989, 994, 1008, 1015, 1022, 1023, 1029, 1030, 1031, 1034, 1035, 1056, 1057, 1058, 1080, 1094, 1099], "or_f": 228, "oral": 1, "orcutt": 663, "ord_r": 228, "order": [1, 53, 75, 80, 86, 91, 92, 95, 121, 136, 143, 147, 215, 217, 222, 226, 227, 228, 229, 232, 287, 292, 317, 334, 339, 352, 357, 360, 361, 367, 370, 374, 376, 379, 394, 403, 406, 432, 436, 438, 449, 465, 473, 476, 498, 501, 516, 524, 527, 551, 554, 569, 578, 581, 608, 611, 628, 634, 649, 653, 655, 662, 665, 677, 685, 690, 701, 706, 708, 715, 717, 725, 729, 731, 738, 741, 744, 749, 751, 753, 754, 755, 756, 757, 758, 761, 866, 875, 879, 880, 909, 929, 937, 938, 943, 1001, 1020, 1021, 1022, 1030, 1032, 1034, 1097, 1099], "ordin": [1, 214, 757, 1035, 1036, 1091], "ordination_result": 852, "ordinationresult": [214, 228, 757, 866, 867, 872, 873, 874, 1035], "org": [53, 104, 106, 148, 215, 216, 222, 223, 224, 229, 231, 232, 292, 339, 357, 360, 373, 376, 673, 696, 700, 702, 704, 722, 727, 739, 747, 753, 754, 755, 756, 757, 863, 883, 909, 910, 943, 950, 1031], "organ": [1, 221, 224, 233], "organis": 224, "orient": [762, 863, 879, 909, 943, 1012, 1092], "origin": [1, 3, 15, 18, 19, 47, 51, 52, 98, 100, 101, 103, 108, 109, 112, 115, 116, 119, 120, 121, 125, 126, 127, 133, 134, 136, 137, 145, 146, 148, 219, 220, 222, 227, 229, 230, 289, 293, 294, 336, 340, 341, 354, 358, 359, 377, 397, 467, 518, 572, 613, 630, 753, 754, 755, 756, 757, 761, 866, 874, 882, 899, 907, 930, 946, 974, 1030, 1031, 1097, 1099], "orthogon": [691, 692, 700], "ortholog": [883, 950], "orthonorm": [691, 692, 700, 701], "orthornorm": 691, "ostel": 222, "other": [0, 1, 15, 47, 53, 70, 79, 89, 90, 92, 116, 132, 136, 148, 221, 222, 223, 224, 226, 227, 229, 231, 232, 233, 274, 278, 284, 296, 302, 308, 314, 319, 325, 331, 343, 349, 360, 361, 367, 374, 379, 384, 393, 402, 408, 409, 414, 416, 418, 423, 424, 425, 426, 429, 439, 445, 455, 464, 472, 482, 484, 490, 491, 492, 493, 496, 501, 506, 515, 523, 533, 535, 542, 543, 544, 545, 548, 554, 559, 568, 577, 583, 584, 589, 591, 593, 598, 599, 600, 601, 604, 613, 618, 627, 632, 636, 637, 643, 644, 645, 646, 648, 651, 653, 660, 679, 685, 690, 703, 706, 713, 727, 729, 736, 757, 852, 863, 866, 867, 872, 879, 881, 884, 892, 896, 900, 905, 920, 924, 951, 974, 975, 976, 982, 984, 985, 1034, 1057, 1068, 1091, 1092, 1093, 1094, 1097, 1099], "other_vertebr": 218, "otherwis": [50, 53, 66, 82, 85, 95, 110, 111, 222, 224, 227, 230, 231, 274, 291, 324, 338, 356, 432, 498, 551, 608, 649, 652, 653, 655, 660, 665, 705, 706, 708, 713, 717, 728, 729, 731, 736, 741, 744, 758, 886, 902, 906, 918, 924, 930, 933, 1009, 1094], "otu": [1, 131, 231, 883, 896, 897, 898, 899, 900, 904, 908, 909, 910, 915, 920, 924, 930, 932, 933, 937, 938, 943, 945, 946, 950], "otu1": 904, "otu2": 904, "otu_id": [116, 133, 145, 146], "otuid": 231, "our": [1, 118, 223, 231, 234, 246, 275, 419, 486, 538, 594, 639, 852, 877, 880, 881, 882, 1094, 1099], "out": [84, 220, 230, 231, 234, 286, 333, 351, 863, 907, 939, 975, 976, 1099], "out_f": [784, 817, 828], "out_fh": 703, "outcom": [135, 880], "outer": [91, 92, 397, 467, 518, 572, 630, 666], "outfmt": [217, 218], "output": [2, 92, 217, 218, 220, 227, 229, 230, 232, 422, 489, 541, 597, 642, 690, 753, 757, 758, 796, 867, 893, 899, 904, 944, 945, 1023, 1031, 1091, 1099], "outsid": [223, 295, 319, 406, 476, 527, 581, 634], "over": [75, 80, 91, 148, 222, 223, 230, 231, 232, 389, 394, 460, 465, 511, 516, 564, 569, 623, 628, 651, 690, 759, 773, 795, 806, 839, 850, 877, 878, 886, 896, 899, 900, 919, 920, 921, 923, 926, 927, 932, 935, 939, 946, 960, 998, 1001, 1004, 1005, 1006, 1018, 1021, 1024, 1097], "overal": [883, 950], "overhead": [851, 909], "overlap": [122, 320, 374, 420, 421, 487, 488, 539, 540, 595, 596, 640, 641, 662, 681, 690, 715, 738, 924, 975], "overrid": [53, 99, 102, 133, 235, 245, 246, 247, 266, 270, 373, 1007, 1099], "overridden": [53, 65, 224, 1031], "override_skip_babp": 53, "overriden": [245, 246, 247], "overview": 1031, "own": [82, 85, 92, 215, 222, 228, 232, 234, 877], "owner": 1041, "oxfordjourn": 223, "oxtobi": 221, "p": [1, 53, 104, 116, 126, 127, 133, 501, 685, 690, 700, 703, 753, 755, 756, 757, 758, 761, 852, 866, 867, 868, 874, 877, 880, 881, 939], "p26204": 221, "p__b": 899, "p__c": 899, "p_adjust": [685, 690], "p_i": [112, 114, 121, 136, 137], "p_valu": [1, 755, 761], "pack": 3, "packag": [53, 104, 106, 144, 219, 222, 227, 229, 690, 700, 703, 753, 754, 755, 756, 757, 760, 866, 867, 874, 877, 1097, 1098], "pad": [92, 229, 397, 467, 518, 572, 630], "page": [118, 685, 1031, 1097], "pair": [0, 1, 50, 89, 98, 99, 100, 102, 105, 145, 146, 147, 151, 221, 223, 224, 225, 227, 232, 316, 320, 414, 482, 533, 589, 636, 651, 655, 662, 677, 681, 685, 708, 715, 725, 731, 738, 742, 749, 751, 758, 877, 991, 1020, 1094], "pairwis": [34, 44, 45, 50, 147, 148, 151, 212, 667, 685, 696, 718, 742, 758, 761, 899, 921, 982, 1020, 1097], "pairwise_dist": 147, "pairwise_func": 147, "pam": [501, 651, 663], "pam250": 663, "pam30": 663, "pam70": 663, "pancoro": 221, "panda": [1, 65, 90, 95, 147, 211, 217, 218, 233, 293, 294, 324, 340, 341, 358, 359, 360, 377, 379, 416, 484, 501, 535, 554, 591, 637, 674, 685, 690, 723, 748, 749, 753, 754, 756, 757, 758, 762, 796, 840, 852, 863, 879, 880, 897, 926, 942, 989, 1034, 1094], "paper": 231, "papilionoidea": 221, "par_dist": 761, "parallel": [118, 148], "paramet": [1, 3, 13, 14, 15, 16, 19, 20, 34, 44, 45, 46, 47, 48, 50, 52, 53, 54, 65, 67, 70, 79, 82, 84, 85, 86, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 151, 152, 163, 174, 175, 176, 187, 188, 189, 200, 211, 212, 213, 214, 234, 235, 245, 246, 247, 258, 260, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 274, 278, 284, 287, 288, 290, 292, 293, 294, 295, 296, 302, 305, 308, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 331, 334, 335, 337, 339, 340, 341, 343, 349, 352, 353, 355, 357, 358, 359, 360, 361, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 393, 396, 397, 398, 402, 404, 405, 406, 409, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 445, 447, 448, 449, 452, 455, 457, 464, 467, 468, 472, 474, 475, 476, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 506, 508, 515, 518, 519, 523, 525, 526, 527, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 554, 556, 559, 561, 568, 571, 572, 573, 577, 579, 580, 581, 584, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 607, 608, 609, 610, 611, 612, 613, 615, 618, 620, 627, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 660, 662, 663, 665, 666, 667, 669, 670, 671, 672, 677, 678, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 708, 713, 715, 717, 718, 719, 720, 721, 725, 726, 728, 729, 731, 736, 738, 741, 742, 743, 744, 745, 746, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 784, 796, 817, 828, 840, 851, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 886, 894, 895, 896, 897, 898, 899, 900, 902, 903, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 948, 949, 951, 966, 968, 969, 972, 973, 974, 975, 976, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1014, 1015, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1054, 1055, 1056, 1057, 1058, 1068, 1069, 1080, 1099], "parametr": [110, 682, 685, 753, 756], "params_guess": 129, "parasit": 761, "pardi": 133, "parent": [221, 225, 227, 233, 613, 700, 951, 968, 971, 983, 986, 995, 1003, 1007, 1016, 1022, 1025, 1027, 1028, 1097], "parent_tax_id": [233, 989], "parenthes": 1097, "parenthesi": 227, "parker": 108, "pars": [222, 223, 224, 226, 234, 908, 909, 910, 911, 1092], "parse_biom_t": 909, "parse_f": 909, "parser": [225, 227, 1092], "part": [217, 222, 224, 227, 230, 679, 683, 700, 851, 932, 1001, 1057, 1097], "partial": [53, 133, 319, 886], "partial_beta_divers": 148, "partialdistancematrix": 148, "particip": 881, "particuarli": 222, "particular": [1, 951, 1033, 1099], "particularli": 973, "partit": [700, 701, 899], "pass": [1, 65, 72, 85, 93, 94, 97, 104, 143, 147, 148, 149, 150, 174, 175, 187, 188, 217, 219, 222, 224, 229, 230, 232, 245, 246, 247, 259, 265, 266, 267, 268, 269, 270, 271, 272, 274, 321, 323, 375, 378, 379, 402, 404, 406, 428, 429, 437, 448, 472, 474, 476, 495, 496, 500, 501, 523, 525, 527, 547, 548, 553, 554, 577, 579, 581, 603, 604, 612, 613, 632, 634, 647, 648, 650, 655, 672, 678, 708, 721, 726, 731, 742, 744, 746, 752, 755, 758, 796, 864, 865, 880, 920, 933, 934, 949, 997, 999, 1008, 1029, 1031, 1080, 1097, 1099], "passthrough": 95, "password": 234, "patch": 265, "path": [3, 13, 14, 15, 16, 17, 18, 19, 34, 44, 45, 46, 47, 48, 50, 51, 52, 87, 216, 220, 222, 223, 230, 274, 292, 339, 357, 373, 376, 899, 967, 1055], "pathwai": [883, 899, 950], "pattern": [233, 405, 433, 475, 499, 526, 552, 580, 609, 633, 852, 1094, 1099], "paw": [501, 536, 549], "pawhea": 0, "pawlowski": [682, 696, 702], "pc": [1, 762, 863], "pca": [866, 872, 874], "pcbi": [696, 702], "pcoa": [1, 228, 757, 853, 863, 873], "pcoa_result": 863, "pcr": 881, "pd": [1, 65, 85, 90, 95, 116, 133, 143, 211, 217, 218, 233, 324, 416, 484, 535, 591, 613, 637, 662, 674, 677, 685, 690, 703, 715, 723, 725, 738, 748, 749, 751, 753, 754, 757, 762, 852, 853, 863, 866, 874, 879, 880, 897, 926, 942, 989, 990, 1034], "pd_": 133, "pdf": 230, "pdist": [1, 144, 147, 150, 212, 761], "pearson": [222, 755, 758, 761, 976], "pearsonr": [755, 761, 877], "peerj": 133, "penal": [98, 99, 100], "penalize_terminal_gap": [98, 99, 100], "penalti": [0, 53, 98, 99, 100, 101, 102, 103], "pentapetala": 221, "per": [3, 34, 92, 217, 218, 230, 232, 379, 501, 554, 613, 690, 758, 761, 851, 874, 880, 881, 940, 969, 1056], "percent": [217, 1094], "percentag": [217, 682], "percentil": 685, "percentile_df": 685, "perfect": [852, 867], "perform": [0, 1, 3, 53, 91, 92, 104, 116, 129, 143, 145, 146, 147, 148, 214, 222, 223, 231, 296, 374, 379, 436, 449, 501, 554, 611, 613, 653, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 696, 697, 698, 699, 701, 702, 704, 706, 727, 729, 739, 742, 757, 758, 761, 762, 763, 785, 829, 840, 852, 872, 874, 875, 881, 882, 886, 899, 930, 933, 939, 952, 953, 977, 980, 987, 998, 1004, 1005, 1006, 1015, 1027, 1028, 1034, 1092], "period": [231, 292, 339, 357, 376], "periton": 880, "perm_stat": 761, "permanova": [753, 757], "permdisp2": 757, "permiss": [222, 227, 229], "permit": [3, 227, 246], "permut": [1, 296, 753, 755, 756, 757, 758, 761], "perplex": 136, "perspect": 133, "pertain": 760, "perturb": [682, 698], "petchei": 116, "peter": 223, "pfam": 232, "pgc": 233, "ph": 754, "phagocyt": 880, "phase": [224, 225], "phe": 501, "phenylalanin": 501, "php": 222, "phred": [222, 223], "phred_offset": [223, 230], "phydiv": 116, "phylip": [93, 97, 222, 227, 1030, 1092, 1097], "phylip_multiple_alignment_format": 229, "phylipformaterror": 229, "phylo": 229, "phylochip": [116, 145, 146], "phylogenet": [1, 116, 133, 145, 146, 227, 229, 703, 761, 951, 974, 984, 1031, 1091, 1094], "phylogeni": [229, 760, 761], "phylum": 989, "physic": [873, 881], "pick": [53, 880], "pickl": [6, 24, 37, 57, 73, 155, 166, 179, 192, 203, 238, 251, 280, 298, 310, 327, 345, 363, 387, 441, 458, 509, 562, 621, 656, 709, 732, 766, 777, 788, 799, 810, 821, 832, 843, 856, 887, 957, 1042, 1061, 1073, 1084], "pident": [217, 218], "pie": [114, 137], "piec": 1099, "pielou": [134, 139], "pielou_": 120, "piet": 867, "pii": 219, "ping": [53, 104], "pipe": 233, "pirrung": 863, "pisc": 122, "pitfal": 84, "pizetti": 118, "place": [95, 227, 232, 374, 448, 851, 872, 875, 907, 930, 933, 943, 946, 968, 993, 1025, 1035], "placebo": [685, 690], "plain": [219, 222, 223, 224, 227, 229, 230], "plan": 231, "planetmath": 727, "plankton": 108, "plant": [142, 221, 700], "plastid": 233, "pleas": [72, 93, 97, 174, 175, 187, 188, 222, 230, 321, 323, 375, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 864, 865, 934, 949, 1008, 1029, 1096], "pleij": 232, "plm": [2, 220], "pln": [221, 233], "plo": [53, 104, 123, 124, 696, 702], "ploson": [53, 104], "plot": [1, 853], "plu": [233, 379, 501, 554], "plugin": 231, "plural": [1, 276], "pm": 115, "pmid": [232, 755, 1031], "png": 853, "point": [84, 118, 122, 124, 215, 219, 231, 234, 246, 295, 360, 422, 429, 432, 489, 496, 498, 541, 548, 551, 597, 604, 608, 642, 648, 649, 663, 757, 763, 785, 840, 852, 863, 880, 881, 1013, 1034, 1055], "poisson": [123, 124], "polymeras": 232, "pone": [53, 104], "pool": 107, "poorli": [761, 872], "pop": [1007, 1009, 1010, 1014], "popul": [106, 110, 117, 119, 141, 230, 232, 422, 489, 541, 597, 642, 697, 759, 877, 881], "port": 231, "portal": 233, "portion": 755, "pos_rat": 881, "posit": [0, 3, 13, 14, 15, 16, 18, 34, 45, 46, 47, 48, 51, 53, 65, 66, 70, 79, 82, 83, 84, 85, 86, 88, 90, 91, 92, 95, 98, 99, 100, 101, 102, 103, 104, 105, 217, 218, 219, 222, 223, 224, 227, 229, 230, 231, 232, 379, 384, 386, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 407, 416, 417, 419, 422, 423, 424, 425, 426, 427, 429, 430, 434, 435, 436, 448, 449, 455, 457, 460, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 477, 484, 485, 486, 489, 490, 491, 492, 493, 494, 496, 501, 506, 508, 511, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 528, 535, 537, 538, 541, 542, 543, 544, 545, 546, 548, 549, 554, 559, 561, 564, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 582, 591, 592, 594, 597, 598, 599, 600, 601, 602, 604, 605, 606, 610, 611, 613, 618, 620, 623, 627, 628, 629, 630, 631, 633, 637, 638, 639, 642, 643, 644, 645, 646, 648, 683, 684, 685, 694, 755, 761, 840, 853, 877, 878, 880, 881, 886, 913, 926, 1003, 1094], "positional_metadata": [65, 70, 83, 90, 91, 92, 222, 232, 379, 384, 396, 397, 400, 416, 422, 429, 430, 450, 455, 467, 470, 484, 489, 496, 501, 506, 518, 521, 535, 541, 548, 554, 559, 571, 572, 575, 591, 597, 604, 605, 613, 618, 630, 637, 642, 648, 1094], "possibl": [1, 53, 72, 134, 139, 222, 223, 231, 232, 319, 403, 436, 449, 473, 524, 578, 611, 754, 758, 880, 976, 1024, 1030], "post": [229, 877, 881], "posterior": [690, 951], "postmenopaus": 881, "postord": [981, 984, 998, 1001, 1005, 1006, 1021, 1024, 1097], "potenti": [222, 419, 486, 538, 594, 639, 851, 1010, 1032, 1099], "pound": [231, 360], "power": [682, 690, 883, 950, 1092], "pp": [117, 128, 867], "ppo": [217, 218], "practic": [1, 92, 133, 222, 223, 230, 851, 979, 984], "pre": [405, 433, 475, 499, 526, 552, 580, 609, 633, 651, 663, 668, 881], "pre_and_postord": [998, 1001, 1004, 1006, 1021, 1024], "pre_rat": 881, "prealloc": 1057, "preced": [53, 219, 227, 229], "precomput": 876, "predefin": [225, 402, 472, 523, 577, 632], "predict": [123, 124, 232, 880], "prefer": [84, 143, 147, 223, 292, 339, 357, 376, 866, 867], "prefer_self": 924, "prefix": 233, "preliminari": 880, "premenopaus": 881, "preorder": [998, 1001, 1004, 1005, 1021, 1024, 1097], "prepar": 231, "preq1": 224, "presenc": [111, 133, 439, 448, 881, 931], "present": [83, 84, 116, 145, 146, 217, 220, 222, 228, 231, 232, 306, 307, 360, 379, 396, 399, 400, 401, 406, 407, 417, 427, 430, 448, 469, 470, 471, 476, 477, 485, 494, 501, 520, 521, 522, 527, 528, 537, 546, 549, 554, 571, 574, 575, 576, 581, 582, 592, 602, 605, 634, 638, 665, 685, 717, 741, 753, 754, 756, 757, 796, 862, 872, 881, 882, 899, 908, 909, 948, 975, 1030, 1031, 1033, 1097], "preserv": [227, 360, 852, 866, 867, 872, 1013], "press": 109, "presum": 222, "prevent": 53, "previou": [1, 98, 99, 100, 101, 102, 103, 384, 455, 506, 559, 618, 753, 755, 757], "previous": [0, 422, 429, 489, 496, 541, 548, 597, 604, 642, 648, 1099], "pri": 233, "primari": [234, 1094], "primer": 754, "princip": [1, 757, 863, 866, 872, 873], "principl": 877, "print": [0, 1, 91, 116, 145, 146, 219, 222, 223, 224, 225, 227, 229, 230, 232, 403, 419, 432, 436, 449, 473, 486, 498, 524, 538, 551, 578, 594, 608, 611, 613, 639, 649, 703, 755, 761, 762, 851, 877, 881, 896, 897, 898, 899, 900, 903, 907, 913, 915, 916, 920, 921, 922, 923, 924, 927, 930, 931, 932, 933, 937, 938, 939, 945, 946, 948, 952, 953, 968, 969, 972, 973, 976, 977, 978, 980, 981, 983, 984, 985, 987, 989, 990, 992, 995, 996, 997, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1010, 1012, 1013, 1014, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1094, 1097, 1099], "printabl": [223, 230], "prior": [448, 755, 758, 939, 989, 1058, 1068, 1099], "prioriti": [133, 1069, 1070, 1099], "privat": [224, 969], "prng": 851, "pro": 501, "prob": [65, 70, 83, 91], "probabl": [112, 114, 123, 124, 135, 137, 690, 762, 774, 851, 866, 877, 881, 951], "problem": [231, 685, 872], "problemat": [231, 1022], "proc": [100, 103], "procedur": [757, 1092], "proceed": 663, "process": [148, 222, 232, 319, 690, 874, 944, 945, 1033, 1058, 1099], "process_func": 911, "processor": 1099, "prod": [688, 700], "prod_": 136, "produc": [106, 217, 218, 229, 230, 245, 419, 486, 538, 594, 639, 866, 874], "product": [0, 295, 693, 755], "program": [226, 227, 231, 233], "progress": 754, "project": [148, 223, 683, 700, 753, 754, 755, 756, 757, 873], "prolin": 501, "promis": 685, "pronounc": [883, 950, 1091], "prop_expl": [762, 763, 785, 796, 829, 840], "propag": 613, "properli": [227, 274], "properti": [219, 229, 233, 374, 439, 445, 450, 651, 667, 718, 727, 742, 877, 971, 1007, 1037, 1049, 1051, 1052, 1053, 1093], "proport": [106, 112, 114, 118, 119, 121, 129, 133, 136, 137, 228, 409, 584, 680, 682, 683, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 753, 755, 756, 762, 796, 840, 853, 866, 872, 874, 974], "proportion": [696, 702], "proportion_explain": [852, 853], "propos": [106, 136, 1031], "prot": 221, "protein": [0, 2, 53, 65, 84, 98, 100, 103, 104, 163, 176, 217, 219, 220, 221, 222, 223, 224, 229, 230, 232, 419, 432, 435, 436, 438, 448, 449, 450, 486, 498, 594, 608, 610, 611, 613, 639, 649, 663, 880, 1094], "protein_from_dna": 1094, "protein_from_rna": 1094, "protein_id": 221, "proteinembed": 220, "proteinvector": 220, "provid": [0, 1, 2, 44, 50, 53, 65, 82, 84, 85, 93, 94, 99, 102, 104, 106, 116, 122, 133, 143, 144, 145, 146, 147, 174, 187, 217, 220, 222, 223, 227, 229, 231, 232, 233, 234, 245, 247, 266, 267, 270, 271, 273, 275, 290, 292, 321, 337, 339, 355, 357, 360, 373, 374, 375, 376, 384, 406, 419, 422, 428, 432, 455, 476, 486, 489, 495, 498, 506, 527, 538, 541, 547, 551, 554, 559, 581, 594, 597, 603, 608, 613, 618, 634, 639, 642, 647, 649, 651, 667, 672, 677, 682, 690, 703, 704, 718, 721, 725, 742, 746, 751, 753, 754, 755, 756, 757, 759, 762, 796, 851, 852, 853, 863, 864, 868, 877, 879, 880, 882, 883, 894, 902, 904, 907, 909, 914, 916, 917, 922, 923, 925, 927, 932, 933, 934, 939, 943, 944, 946, 948, 950, 973, 981, 989, 1002, 1008, 1012, 1015, 1022, 1030, 1031, 1058, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099], "proxim": 852, "prune": [972, 1014, 1025, 1026], "psa": [98, 101], "pseudo": [756, 877], "pseudocount": [682, 685, 690], "pseudoknot": 232, "pub": [221, 233, 295], "public": [133, 223, 863], "publish": [223, 232], "pubm": [221, 224, 613], "pull": 222, "pure": [0, 1032], "purin": [379, 404, 474, 525, 579, 1094], "purpos": [0, 1, 104, 107, 231, 233, 438, 877, 1099], "put": [381, 452, 503, 556, 615], "pvalu": 690, "pwmantel": 755, "pwr": 880, "pwr_001": 877, "pwr_010": 877, "pwr_100": 877, "pwr_est": 881, "pwr_est2": 881, "py": [223, 234], "pycog": [116, 145, 146, 1030], "pyl": 501, "pyrimidin": [379, 404, 579], "pyrosequenc": [116, 145, 146], "pyrrolysin": 501, "python": [0, 1, 20, 613, 703, 727, 755, 1032, 1037, 1091, 1092, 1094], "q": [53, 122, 218, 501, 867, 868], "q2": 231, "q2cli": 231, "qacc": [217, 218], "qaccver": [217, 218], "qcov": [217, 218], "qcovhsp": [217, 218], "qend": [217, 218], "qframe": [217, 218], "qgi": [217, 218], "qiim": [116, 145, 146, 231, 360], "qiime2": [231, 292, 339, 357, 360, 373, 376], "qiita": 231, "qiu": 761, "qlen": [217, 218], "qseq": [217, 218, 428, 495, 547, 603, 647], "qseqid": [217, 218], "qstart": [217, 218], "qual": 223, "qual_fl": 222, "qualifi": [221, 224], "qualit": [145, 146, 863], "qualiti": [90, 222, 230, 379, 384, 396, 400, 416, 430, 455, 470, 484, 501, 506, 521, 535, 554, 559, 571, 575, 591, 605, 613, 618, 637, 863, 1094], "quantifi": 1, "quantil": [122, 690], "quantit": [133, 145, 146, 866, 881], "quantiti": 146, "quartil": 122, "queri": [0, 50, 53, 104, 217, 218, 305, 372, 613], "query1": 218, "query_begin": 20, "query_sequ": [0, 20, 53, 54], "quick": [655, 708, 731, 739, 863, 866], "quit": 1099, "quot": 227, "qvalu": 690, "r": [1, 53, 116, 117, 122, 123, 124, 125, 126, 133, 145, 146, 223, 224, 233, 274, 379, 501, 554, 663, 682, 683, 684, 688, 689, 690, 691, 692, 700, 753, 754, 755, 756, 757, 761, 863, 866, 867, 874, 898, 973, 1014], "r1": 1094, "r2": 1094, "r3": 1094, "r4": 1094, "r5": 1094, "r_i": 700, "r_m": 755, "ra": [221, 232], "raaijmak": 129, "raimon": 700, "rais": [65, 82, 84, 85, 88, 92, 94, 96, 107, 116, 117, 118, 133, 143, 145, 146, 147, 151, 213, 222, 223, 229, 234, 245, 246, 247, 266, 267, 268, 270, 271, 272, 287, 319, 334, 352, 370, 373, 374, 381, 397, 398, 402, 404, 406, 417, 418, 420, 421, 423, 424, 425, 426, 432, 448, 450, 452, 467, 468, 472, 474, 476, 485, 487, 488, 490, 491, 492, 493, 498, 503, 518, 519, 523, 525, 527, 537, 539, 540, 542, 543, 544, 545, 551, 556, 572, 573, 577, 579, 581, 592, 593, 595, 596, 598, 599, 600, 601, 608, 615, 630, 631, 632, 634, 638, 640, 641, 643, 644, 645, 646, 649, 655, 662, 663, 665, 666, 667, 670, 677, 680, 681, 687, 694, 695, 701, 708, 715, 717, 718, 719, 725, 731, 738, 741, 742, 743, 751, 753, 754, 755, 757, 758, 796, 840, 851, 863, 866, 867, 872, 880, 881, 882, 883, 886, 894, 896, 900, 902, 903, 907, 908, 909, 914, 915, 916, 917, 920, 921, 922, 923, 925, 926, 927, 933, 935, 936, 939, 946, 948, 950, 966, 973, 974, 976, 979, 981, 982, 984, 985, 987, 989, 991, 997, 999, 1002, 1012, 1013, 1014, 1015, 1020, 1025, 1034, 1035, 1036, 1037], "rand": [163, 176, 759], "randint": 877, "randn": [877, 880, 881], "random": [115, 117, 129, 163, 176, 215, 690, 753, 757, 759, 851, 867, 877, 879, 880, 881, 882, 939], "random_fn": 759, "randomli": [112, 137, 744, 753, 755, 756, 759, 851, 882, 939, 976, 1015], "randomst": [976, 1015], "rang": [90, 112, 122, 134, 146, 223, 224, 231, 396, 400, 406, 416, 419, 430, 470, 476, 484, 486, 521, 527, 535, 538, 571, 575, 581, 591, 594, 605, 634, 637, 639, 753, 754, 863, 881, 915, 920, 939, 993, 1099], "rangeindex": [65, 82, 85, 94, 229], "rangle_a": [691, 693], "rank": [1, 122, 142, 233, 685, 753, 754, 755, 876, 933, 989, 990], "rapid": [215, 222, 993], "rapidli": 1099, "rare": [107, 881], "rare_threshold": 107, "rarefact": [129, 939], "rate": [107, 651, 877], "rather": [1, 122, 227, 651, 682, 761, 1031], "ratio": [123, 134, 139, 682, 683, 684, 685, 688, 689, 691, 692, 696, 702, 881], "rational": 876, "raw": [217, 784, 817], "raw_f": [784, 817, 828], "raxml": 229, "rbwpd_": 133, "rc": [232, 396, 571, 671, 720, 745, 863], "rda": [228, 853, 866, 867], "re": [0, 1, 82, 85, 92, 116, 143, 145, 146, 147, 216, 219, 222, 223, 229, 232, 379, 405, 433, 450, 475, 499, 501, 526, 552, 554, 580, 609, 613, 633, 758, 866, 874, 876, 877, 881, 896, 939, 1022, 1097, 1099], "reach": 229, "read": [1, 53, 97, 116, 145, 146, 175, 188, 216, 217, 218, 219, 220, 223, 225, 226, 227, 228, 229, 230, 232, 233, 245, 246, 263, 265, 267, 271, 274, 275, 323, 373, 378, 379, 436, 437, 448, 449, 500, 501, 553, 554, 611, 612, 613, 650, 678, 701, 703, 726, 752, 758, 865, 898, 949, 952, 953, 965, 966, 967, 969, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 984, 985, 986, 987, 989, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1037, 1091, 1097], "read_numb": 230, "read_sequ": 20, "readabl": [215, 222, 223, 226, 227, 228, 229, 274, 1036], "reader": [93, 174, 187, 215, 216, 217, 218, 219, 220, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 246, 260, 265, 266, 267, 270, 271, 321, 375, 428, 495, 547, 603, 647, 672, 721, 746, 864, 934, 1008], "readi": [0, 234], "reading_fram": [436, 448, 449, 611], "readlin": [245, 274], "real": [91, 222, 223, 230, 682, 683, 684, 688, 689, 691, 692, 697, 698, 699], "realli": 1, "reason": [1, 117, 129, 221, 227, 880, 909, 971], "reassign": [94, 229, 755], "reassign_index": [65, 82, 85, 95, 96, 229], "reca": 320, "recal": 227, "recapitul": 761, "recaptur": 107, "receiv": [234, 235, 246, 406, 476, 527, 581, 634, 1030], "recent": [229, 448, 613, 755], "receptor": 880, "reciproc": [121, 881], "recod": 84, "recogn": [231, 926, 936], "recommend": [1, 122, 133, 229, 232, 379, 450, 501, 554, 613, 685, 703, 863, 866, 874, 880], "recomput": [82, 85, 92], "reconstruct": [1007, 1031, 1091, 1094], "record": [218, 221, 222, 223, 224, 225, 230], "rectangl": 118, "recurs": [227, 969, 1027, 1028], "red": [671, 720, 745], "redefin": [755, 1037], "reduc": [148, 292, 339, 357, 376, 757, 851, 872, 899], "reduce_f": 148, "reduct": 852, "redund": [673, 704, 722, 727, 747, 874], "redundant_form": 696, "reeder": [123, 124], "ref": [217, 968], "refer": [1, 50, 53, 72, 84, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 139, 142, 145, 146, 148, 295, 379, 438, 446, 447, 450, 501, 554, 613, 651, 663, 673, 683, 684, 685, 690, 694, 696, 700, 702, 704, 722, 727, 739, 747, 753, 754, 755, 756, 757, 761, 863, 866, 867, 874, 883, 909, 943, 950, 974, 1003, 1030, 1031, 1096], "reference_sequ": 20, "reflect": [274, 761, 1007, 1012], "regard": 690, "regardless": [53, 83, 91, 92, 232, 360, 374, 448, 669, 759], "regex": [405, 433, 475, 499, 526, 552, 580, 609, 633], "region": [225, 295, 305, 419, 486, 538, 594, 639], "regist": [97, 175, 188, 234, 235, 245, 246, 247, 259, 265, 267, 269, 271, 323, 378, 437, 500, 553, 612, 650, 678, 726, 752, 865, 949, 1029], "registri": [93, 97, 174, 175, 187, 188, 216, 220, 222, 223, 230, 321, 323, 375, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 864, 865, 934, 949, 1008, 1029, 1092], "regress": [682, 755, 874, 881], "regsistri": [259, 269], "regular": [216, 220, 227, 405, 433, 475, 499, 526, 552, 580, 609, 633, 1094], "reject": [685, 690, 877], "rel": [88, 106, 133, 216, 221, 224, 287, 334, 352, 370, 374, 406, 408, 409, 421, 423, 425, 476, 488, 490, 492, 527, 540, 542, 544, 581, 583, 584, 596, 598, 600, 634, 641, 643, 645, 696, 702, 739, 1016, 1034, 1069, 1094], "relat": [1, 116, 117, 126, 133, 145, 146, 148, 221, 222, 226, 232, 703, 749, 866, 867, 874, 909, 943], "relationship": [1, 133, 227, 866, 867, 874, 877, 881, 899, 1031, 1095], "relax": 229, "releas": [116, 133, 145, 146, 221, 233], "relev": [1, 53, 224, 690, 880, 899, 909, 943, 1031, 1094], "reli": [132, 231, 292, 339, 357, 376, 379, 501, 554], "reliabl": 690, "reload": 223, "remain": [94, 222], "remaind": [222, 899], "rememb": [231, 295], "remot": 224, "remov": [84, 104, 116, 133, 145, 146, 163, 222, 226, 229, 286, 318, 333, 351, 400, 431, 470, 497, 521, 550, 575, 607, 903, 932, 936, 968, 983, 1003, 1007, 1010, 1014, 1025, 1094], "remove_delet": [1003, 1007, 1009, 1014], "remove_empti": 932, "renam": [224, 415, 427, 483, 494, 534, 546, 590, 602, 685], "render": 1031, "reorder": [755, 758, 972, 976], "repeat": [1, 223, 877, 1054], "repeatedli": 877, "repect": 222, "repen": 221, "replac": [1, 19, 52, 105, 112, 129, 222, 379, 431, 434, 497, 501, 550, 554, 606, 607, 651, 682, 685, 694, 695, 851, 875, 882, 939, 946, 1022], "replic": 981, "report": [133, 231, 246, 690, 761, 874], "repres": [1, 3, 13, 15, 17, 34, 44, 47, 50, 83, 106, 112, 114, 116, 119, 121, 129, 136, 137, 145, 146, 148, 163, 176, 189, 200, 212, 215, 216, 217, 218, 221, 222, 226, 227, 229, 231, 232, 233, 295, 316, 324, 360, 379, 432, 498, 501, 551, 554, 608, 613, 649, 651, 655, 662, 667, 677, 691, 692, 700, 701, 708, 715, 718, 725, 731, 738, 742, 751, 761, 852, 863, 877, 886, 899, 910, 935, 940, 944, 951, 1018, 1023, 1030, 1031, 1094, 1097], "represent": [0, 1, 12, 43, 162, 172, 173, 176, 186, 198, 199, 200, 210, 215, 216, 222, 227, 231, 305, 422, 446, 489, 541, 597, 642, 661, 701, 714, 737, 760, 853, 862, 883, 886, 899, 909, 945, 950, 951, 965, 1022, 1023, 1092, 1097], "representationwarn": 1020, "reprint": 118, "reproduc": [92, 116, 145, 146], "reproduct": 881, "request": [222, 371, 662, 677, 715, 725, 738, 751, 896, 903, 915, 926, 981, 1055, 1092], "requir": [53, 116, 123, 124, 133, 145, 146, 215, 218, 219, 222, 225, 229, 232, 233, 320, 360, 373, 435, 448, 449, 610, 701, 703, 727, 755, 761, 851, 871, 879, 886, 899, 908, 973, 979, 1013, 1033, 1057, 1092, 1094, 1099], "rerun": 755, "res_metadata": 897, "res_tabl": [897, 898], "res_tre": 898, "resampl": 939, "research": [1, 233, 755, 872], "resembl": 222, "reserv": [229, 231], "reset": [82, 85, 94], "reset_index": [82, 85], "reshap": [915, 920], "resid": 851, "residu": [84, 163, 220, 874], "resolv": [148, 151, 231, 761], "resourc": [133, 231, 233, 274], "respect": [1, 65, 110, 222, 225, 228, 231, 233, 245, 246, 247, 265, 266, 268, 270, 272, 274, 360, 406, 476, 527, 581, 613, 634, 662, 667, 669, 677, 685, 700, 715, 718, 725, 738, 742, 749, 751, 761, 852, 853, 897, 898, 919, 920, 921, 940], "respons": [93, 97, 174, 175, 187, 188, 321, 323, 375, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 784, 817, 828, 852, 864, 865, 867, 874, 934, 949, 1008, 1029], "restrict": [72, 116, 145, 146, 229, 324, 360, 1094], "result": [1, 20, 53, 54, 84, 86, 92, 98, 99, 100, 116, 117, 122, 135, 143, 145, 146, 147, 151, 214, 217, 218, 222, 231, 234, 274, 317, 372, 374, 379, 396, 397, 400, 430, 432, 467, 470, 498, 501, 518, 521, 551, 554, 571, 572, 575, 605, 608, 630, 649, 685, 690, 693, 694, 697, 742, 753, 755, 756, 757, 758, 759, 762, 773, 774, 784, 785, 795, 806, 807, 817, 818, 828, 829, 839, 850, 851, 853, 862, 863, 866, 867, 872, 874, 877, 882, 899, 900, 921, 924, 932, 939, 943, 945, 984, 1000, 1014, 1022, 1023, 1030, 1031, 1035, 1092, 1094, 1099], "result_constructor": 1031, "retain": [92, 287, 334, 352, 369, 370, 397, 429, 467, 496, 518, 548, 572, 604, 630, 648, 665, 717, 741, 851, 899, 939, 948], "retriev": [288, 290, 335, 337, 353, 355, 360, 371, 372, 613, 727, 909, 913, 915], "return": [0, 1, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 74, 76, 77, 78, 79, 81, 83, 84, 86, 88, 89, 90, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 171, 174, 177, 178, 180, 181, 182, 183, 184, 185, 187, 190, 191, 193, 194, 195, 196, 197, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 217, 225, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 299, 300, 301, 302, 303, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 321, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 510, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 616, 617, 618, 619, 620, 622, 624, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 761, 764, 765, 767, 768, 769, 770, 771, 772, 773, 775, 776, 778, 779, 780, 781, 782, 783, 786, 787, 789, 790, 791, 792, 793, 794, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 808, 809, 811, 812, 813, 814, 815, 816, 819, 820, 822, 823, 824, 825, 826, 827, 830, 831, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 885, 886, 888, 890, 891, 892, 897, 898, 899, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 952, 953, 954, 955, 958, 959, 961, 963, 964, 965, 966, 967, 969, 973, 974, 975, 976, 977, 978, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1050, 1054, 1055, 1056, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1094, 1099], "return_cod": [432, 498, 551, 608, 649], "reus": [53, 876], "rev": 1015, "reveal": [852, 1031], "revers": [80, 91, 95, 234, 394, 396, 418, 430, 436, 448, 449, 465, 516, 569, 571, 593, 605, 606, 611, 628, 753, 757, 937, 1015, 1094, 1099], "reverse_compl": [396, 418, 571, 593, 1094], "reverse_transcrib": 435, "review": 971, "revisit": 700, "rf": [436, 449, 611], "rfam": 232, "rho": 754, "riboswitch": [224, 295], "rice": 223, "rich": [1, 110, 116, 125, 128, 129, 133, 141], "rich_sparse_otu_table_hdf5": 909, "right": [92, 107, 136, 227, 374, 682, 683, 684, 688, 693, 697, 698, 699, 700, 993, 1034, 1035, 1099], "right_child_id": 1022, "rightarrow": [683, 684, 688, 689, 691, 692], "risk": 881, "rl": [221, 232], "rm": [232, 763, 829], "rn": [221, 232], "rna": [0, 65, 70, 99, 102, 104, 219, 221, 222, 223, 224, 229, 230, 232, 379, 397, 434, 435, 436, 438, 448, 449, 450, 467, 518, 613, 630, 690, 1094], "rna_seq": [221, 224], "robbin": 119, "robinson": 974, "robust": [133, 231, 696, 702, 757, 761], "role": [232, 651, 880], "rome": 118, "root": [1, 3, 116, 128, 133, 145, 146, 227, 233, 701, 952, 953, 966, 967, 968, 969, 971, 972, 973, 977, 980, 981, 982, 983, 986, 987, 989, 991, 995, 997, 999, 1000, 1007, 1012, 1013, 1016, 1018, 1020, 1022, 1023, 1025, 1027, 1028, 1030, 1031, 1097], "root_at": [1013, 1027, 1028], "root_at_midpoint": [1012, 1031], "rosid": 221, "roughli": 129, "round": [116, 122, 129, 145, 146, 755, 877, 880, 881, 981], "roundtrip": [216, 220], "roundtripp": [292, 339, 357, 360, 376], "routin": 727, "row": [1, 65, 143, 147, 148, 151, 163, 176, 189, 200, 211, 215, 216, 220, 229, 295, 360, 651, 655, 670, 684, 685, 687, 690, 691, 692, 694, 695, 697, 698, 699, 700, 703, 704, 708, 719, 731, 743, 744, 749, 753, 754, 755, 756, 757, 758, 759, 761, 853, 866, 867, 870, 874, 880, 881, 886, 893, 904, 909, 910, 915, 919, 920, 921, 935, 936, 943, 945, 1034], "rozan": 700, "rp": 221, "rpd": 133, "rpd_": 133, "rrna": [1, 690], "rt": [221, 232], "rtol": 1034, "rubbbbrbcefgh": 230, "rule": [107, 222, 229, 231, 232, 1030], "run": [1, 3, 116, 143, 145, 146, 147, 223, 230, 231, 404, 474, 525, 579, 685, 753, 754, 755, 757, 758, 761, 773, 795, 806, 839, 850, 863, 1094, 1099], "run_numb": 230, "runtim": [222, 379, 501, 554, 1057, 1099], "runtimeerror": 117, "rvrywstlnepwvfsnsgyalgtnapgrcsasnvakpgdsgtgpyivthnqi": 221, "rvsrv": 232, "rx": 221, "rykmbdhvn": [408, 409, 583, 584], "s1": [0, 1, 379, 381, 397, 398, 402, 417, 418, 423, 424, 425, 426, 452, 467, 468, 472, 485, 490, 491, 492, 493, 501, 503, 518, 519, 523, 537, 542, 543, 544, 545, 554, 556, 572, 573, 577, 592, 593, 598, 599, 600, 601, 613, 615, 630, 631, 632, 638, 643, 644, 645, 646, 685, 690, 753, 757, 896, 897, 898, 900, 902, 903, 906, 907, 913, 914, 915, 916, 917, 919, 921, 924, 925, 930, 931, 932, 933, 935, 937, 938, 939, 940, 942, 945, 946, 948], "s12064": [696, 702], "s2": [0, 1, 397, 402, 467, 472, 518, 523, 572, 577, 630, 632, 685, 690, 753, 757, 896, 897, 898, 900, 903, 906, 907, 913, 914, 915, 916, 917, 919, 921, 924, 925, 930, 931, 932, 933, 935, 937, 938, 939, 940, 942, 945, 946, 948], "s3": [685, 690, 753, 757, 896, 897, 898, 900, 906, 907, 914, 915, 916, 917, 921, 924, 925, 931, 932, 933, 935, 937, 938, 939, 940, 942, 945, 946, 948], "s4": [685, 690, 753, 757, 897, 898, 900, 906, 915], "s46826": 221, "s5": [685, 690, 753, 757, 900, 915], "s6": [685, 690, 757, 900], "s7": [757, 900], "s8": 900, "s9": 900, "s_": [1, 107, 110, 122, 129, 141], "s_i": 700, "sa": 232, "sacc": [217, 218], "saccver": [217, 218], "safe": [1, 116, 143, 145, 146, 147, 231, 872, 969], "safe_char": 227, "saga": [305, 317, 613], "sagb": [305, 317], "sagc": 305, "sai": [295, 305, 881], "saitou": 1031, "sallacc": [217, 218], "sallgi": [217, 218], "sallseqid": [217, 218], "salltitl": [217, 218], "salmo": [222, 229], "salvemini": 118, "sam_id": 920, "same": [1, 65, 83, 84, 85, 88, 92, 94, 106, 112, 116, 122, 133, 134, 139, 145, 146, 211, 212, 213, 214, 220, 222, 223, 224, 225, 227, 230, 232, 234, 287, 308, 322, 324, 334, 352, 369, 370, 374, 384, 386, 393, 396, 397, 400, 402, 403, 419, 423, 424, 425, 426, 430, 431, 435, 438, 439, 448, 455, 457, 464, 467, 470, 472, 473, 486, 490, 491, 492, 493, 497, 506, 508, 515, 518, 521, 523, 524, 538, 542, 543, 544, 545, 550, 559, 561, 568, 571, 572, 575, 577, 578, 594, 598, 599, 600, 601, 605, 607, 610, 613, 618, 620, 627, 630, 632, 639, 643, 644, 645, 646, 653, 655, 663, 664, 665, 667, 676, 680, 681, 685, 690, 706, 708, 716, 717, 718, 724, 729, 731, 740, 741, 742, 744, 750, 753, 754, 755, 756, 757, 758, 761, 851, 866, 867, 871, 872, 874, 880, 881, 882, 886, 899, 907, 930, 946, 985, 1015, 1030, 1034, 1094, 1097], "samp_id": [913, 915], "sampl": [1, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 214, 215, 216, 231, 360, 682, 685, 690, 704, 753, 754, 756, 757, 763, 796, 829, 840, 851, 853, 862, 863, 866, 867, 872, 873, 874, 877, 879, 880, 881, 894, 895, 896, 897, 898, 899, 900, 902, 903, 906, 907, 908, 909, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 976, 1035, 1091, 1095], "sample1": [904, 910], "sample2": [904, 910], "sample3": 910, "sample4": 910, "sample5": 910, "sample6": 910, "sample_constraint": 853, "sample_count": [880, 881], "sample_gen": 920, "sample_group_metadata": 883, "sample_id": [883, 920, 928, 933], "sample_index": 883, "sample_map": 911, "sample_md": 1, "sample_metadata": [231, 375, 378, 883, 903], "sample_metadata_f": 924, "sample_nam": 231, "sample_typ": [907, 932], "samplea": 851, "sampleb": 851, "samplec": 851, "sampleid": [231, 908], "samplemetadata": 231, "samplerecord": 224, "sanger": 223, "sapien": 222, "sapiensaccggttggc": 229, "satisfi": [234, 320, 879, 1080], "save": [53, 305, 360, 373, 704, 784, 817, 828, 1004], "sb": 98, "sbc": 232, "sbjct": 218, "sbjctframe": 218, "sblastnam": [217, 218], "sbp": 700, "scalar": [111, 432, 498, 551, 608, 649, 651, 655, 693, 699, 703, 708, 731, 863, 923, 927], "scale": [114, 754, 866, 867, 868, 874], "scale_i": 874, "scandinavian": 110, "scatter": 863, "scatterplot": [853, 863], "scenario": [220, 685], "scheme": [233, 274, 289, 293, 294, 336, 340, 341, 354, 358, 359, 360, 373, 377, 671, 720, 745], "schmidt": [691, 692], "schneider": 84, "schoch": 233, "school": 221, "schwartz": 663, "sci": [100, 103, 218, 700], "scienc": [108, 109, 116, 219, 222, 663, 867], "sciencedirect": 219, "scientif": [217, 231, 727, 852], "sciki": 222, "scikit": [0, 1, 89, 90, 93, 97, 98, 101, 104, 105, 116, 145, 146, 147, 148, 149, 150, 151, 174, 175, 187, 188, 216, 217, 218, 219, 221, 222, 223, 227, 228, 229, 230, 232, 233, 321, 323, 375, 378, 414, 416, 428, 435, 436, 437, 438, 448, 449, 482, 484, 495, 500, 533, 535, 547, 553, 589, 591, 603, 610, 611, 612, 636, 637, 647, 650, 672, 678, 679, 721, 726, 746, 752, 852, 864, 865, 934, 949, 1008, 1029, 1032, 1094, 1098], "scipi": [1, 117, 144, 147, 150, 212, 673, 680, 685, 690, 701, 704, 722, 727, 739, 747, 749, 754, 755, 757, 761, 872, 877, 880, 881, 902, 933, 943, 988], "scomnam": [217, 218], "scope": [116, 1099], "score": [0, 53, 84, 98, 99, 100, 101, 102, 103, 104, 105, 111, 217, 218, 222, 224, 225, 230, 613, 651, 666, 669, 853, 874, 1094], "score_filt": 53, "score_onli": 53, "score_s": 53, "sdbl": 981, "sdr": 122, "sdrhelp": 122, "se": 232, "sea": 108, "search": [67, 98, 217, 218, 222, 288, 320, 335, 353, 372, 404, 417, 474, 485, 525, 537, 579, 592, 638, 652, 705, 728, 867, 902, 914, 917, 925, 948, 979, 984, 985, 986, 987, 1054, 1094], "sec": 501, "second": [1, 50, 53, 98, 99, 100, 101, 102, 103, 104, 220, 223, 229, 234, 247, 295, 317, 439, 655, 685, 708, 731, 881, 993, 1023, 1092, 1099], "secondari": [881, 910], "section": [92, 222, 223, 228, 231, 232, 360, 438, 613, 754, 755, 866, 867], "sediment": 108, "see": [1, 91, 92, 93, 97, 104, 116, 133, 143, 145, 146, 147, 148, 150, 151, 174, 175, 187, 188, 218, 221, 222, 223, 227, 229, 230, 231, 233, 234, 277, 321, 323, 324, 342, 360, 375, 378, 402, 428, 437, 438, 449, 472, 495, 500, 523, 547, 553, 577, 603, 612, 613, 632, 647, 650, 655, 672, 678, 691, 692, 708, 721, 726, 731, 746, 752, 753, 754, 755, 756, 757, 758, 761, 852, 863, 864, 865, 872, 874, 876, 877, 881, 883, 889, 924, 934, 949, 950, 1008, 1029, 1092, 1093, 1099], "seed": [690, 753, 757, 851, 877, 880, 881, 882, 939], "seem": 880, "seen": [221, 224, 881], "segment": [3, 14, 18, 34, 46, 51, 118], "select": [112, 133, 137, 231, 690, 757, 879, 880, 939, 1015], "selenocystein": 501, "self": [4, 5, 7, 8, 9, 10, 11, 21, 22, 23, 25, 26, 27, 28, 29, 31, 35, 36, 38, 39, 40, 41, 42, 55, 56, 58, 59, 60, 61, 62, 64, 71, 74, 76, 78, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 171, 177, 178, 180, 181, 182, 183, 184, 185, 190, 191, 193, 194, 195, 196, 197, 201, 202, 204, 205, 206, 207, 208, 209, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 249, 250, 252, 253, 254, 255, 256, 257, 269, 270, 271, 272, 279, 281, 282, 283, 285, 297, 299, 300, 301, 303, 305, 309, 311, 312, 313, 315, 319, 326, 328, 329, 330, 332, 344, 346, 347, 348, 350, 362, 364, 365, 366, 368, 385, 386, 388, 390, 392, 430, 440, 442, 443, 444, 456, 457, 459, 461, 463, 507, 508, 510, 512, 514, 560, 561, 563, 565, 567, 605, 619, 620, 622, 624, 626, 653, 654, 657, 658, 659, 660, 662, 664, 676, 677, 706, 707, 710, 711, 712, 713, 715, 716, 724, 725, 729, 730, 733, 734, 735, 736, 738, 740, 750, 751, 764, 765, 767, 768, 769, 770, 771, 772, 775, 776, 778, 779, 780, 781, 782, 783, 786, 787, 789, 790, 791, 792, 793, 794, 797, 798, 800, 801, 802, 803, 804, 805, 808, 809, 811, 812, 813, 814, 815, 816, 819, 820, 822, 823, 824, 825, 826, 827, 830, 831, 833, 834, 835, 836, 837, 838, 841, 842, 844, 845, 846, 847, 848, 849, 854, 855, 857, 858, 859, 860, 861, 885, 888, 890, 891, 892, 893, 896, 900, 904, 915, 921, 923, 924, 927, 936, 939, 945, 948, 952, 953, 954, 955, 958, 959, 961, 963, 964, 965, 966, 967, 968, 970, 971, 974, 975, 976, 977, 980, 981, 982, 983, 1000, 1001, 1002, 1003, 1009, 1010, 1011, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1050, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1082, 1083, 1085, 1086, 1087, 1088, 1089, 1090, 1097, 1099], "self_aft": 1024, "self_befor": 1024, "semi": 227, "semicolon": [222, 225], "semimetr": 872, "send": [217, 218], "sens": [867, 881, 1023, 1031], "sensit": [222, 231, 422, 489, 541, 597, 642], "sep": 221, "separ": [1, 217, 218, 220, 222, 223, 225, 226, 227, 228, 229, 231, 757, 867, 908, 911], "seq": [0, 3, 17, 50, 65, 75, 80, 86, 87, 89, 90, 94, 95, 96, 98, 99, 100, 101, 102, 103, 217, 218, 219, 222, 223, 225, 229, 230, 382, 383, 396, 403, 406, 414, 416, 429, 430, 432, 433, 436, 449, 450, 453, 454, 473, 476, 482, 484, 496, 498, 499, 504, 505, 524, 527, 533, 535, 548, 551, 552, 557, 558, 571, 578, 581, 589, 591, 604, 605, 608, 609, 611, 613, 616, 617, 634, 636, 637, 648, 649, 690, 851, 1099], "seq1": [0, 65, 82, 85, 94, 98, 99, 100, 101, 102, 103, 219, 222, 223, 229, 232, 680, 681], "seq2": [0, 65, 82, 85, 94, 98, 99, 100, 101, 102, 103, 222, 223, 232, 680, 681], "seq3": [65, 85, 222, 229], "seq4": 222, "seq5": 222, "seq_1": 225, "seq_2": 225, "seq_gener": [403, 473, 524, 578], "seq_id": 225, "seq_num": [222, 223, 224, 225, 230], "seqid": 225, "seqr": 224, "sequenc": [1, 3, 13, 14, 15, 18, 19, 34, 45, 46, 47, 50, 51, 52, 53, 65, 66, 68, 69, 70, 75, 77, 79, 80, 82, 83, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 163, 172, 176, 189, 198, 200, 217, 218, 219, 220, 221, 223, 224, 225, 230, 233, 295, 305, 317, 690, 704, 759, 851, 881, 1091, 1092, 1099], "sequence1": 104, "sequence2": 104, "sequenceprocessor": 1099, "sequencevector": [176, 211], "sequenti": [142, 220, 222, 223, 229, 700, 701, 863, 1025], "ser": 501, "seri": [1, 95, 143, 225, 277, 289, 294, 324, 336, 341, 342, 354, 359, 685, 690, 749, 753, 754, 756, 757, 762, 853, 877], "serial": [226, 360, 703, 853, 1092], "serin": 501, "serv": [0, 233, 852, 863], "server": [98, 99, 100, 101, 102, 103, 233], "set": [13, 33, 45, 53, 83, 86, 91, 92, 116, 133, 145, 146, 151, 222, 224, 226, 229, 235, 274, 288, 305, 318, 335, 353, 372, 374, 379, 397, 406, 419, 422, 432, 450, 467, 476, 486, 489, 498, 501, 518, 527, 538, 541, 551, 554, 572, 581, 594, 597, 608, 613, 630, 634, 639, 642, 649, 663, 671, 677, 682, 694, 720, 725, 745, 751, 761, 851, 872, 874, 877, 879, 880, 881, 899, 900, 907, 939, 941, 952, 953, 968, 970, 973, 977, 980, 981, 983, 1003, 1017, 1018, 1030, 1037, 1048, 1049, 1054, 1094, 1099], "set1": 863, "set_index": 989, "setter": 304, "setup": 1099, "seven": 685, "sever": [116, 227, 229, 877], "sex": [879, 880], "sffaaa": 223, "sfprgfifgagssayqfegavneggrgpsiwdtfthkypekirdgsnaditv": 221, "sframe": [217, 218], "sg": [436, 449, 611], "sgc": [448, 449], "sgi": [217, 218], "shallow": [65, 68, 305, 306, 382, 453, 504, 557, 613, 616], "shannon": [84, 120, 134], "shannon_entropi": 84, "shape": [3, 13, 14, 15, 17, 18, 19, 34, 44, 45, 46, 47, 51, 52, 77, 86, 213, 215, 228, 653, 683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 706, 729, 755, 868, 871, 882, 883, 909, 910, 943, 950], "share": [53, 89, 90, 92, 107, 374, 397, 414, 416, 467, 482, 484, 518, 533, 535, 572, 589, 591, 613, 630, 636, 637, 852, 1097], "shear": 1007, "sheet": 231, "shift": 317, "short": 1099, "short_cicruit": 1058, "short_circuit": 1057, "short_method_nam": [853, 1035], "shorter": 229, "should": [1, 53, 84, 105, 106, 112, 116, 117, 129, 133, 141, 143, 144, 145, 146, 147, 217, 224, 228, 231, 233, 234, 245, 246, 247, 287, 305, 334, 352, 360, 370, 379, 402, 419, 420, 421, 431, 438, 472, 486, 487, 488, 497, 501, 523, 538, 539, 540, 550, 554, 577, 594, 595, 596, 607, 632, 639, 640, 641, 681, 683, 684, 685, 696, 702, 739, 755, 757, 761, 851, 866, 867, 872, 873, 874, 877, 880, 881, 894, 895, 904, 939, 945, 948, 989, 1010], "shouldn": 867, "show": [1, 305, 877, 1097], "show_intern": 969, "shown": [295, 685, 866], "shrink": 690, "shtml": 222, "shuffl": 976, "shuffle_f": [976, 1015], "shuffled_tre": 1015, "shuffler": 1015, "sibl": [227, 397, 467, 518, 572, 630], "side": [133, 755, 758, 761], "sigh": 1091, "sign": [231, 685, 1035], "signatur": [148, 275, 899, 909, 943], "signific": [1, 231, 685, 690, 753, 755, 756, 757, 758, 761, 880, 881], "significance_test": 685, "significantli": [1, 91, 685, 753, 756, 757], "silent": [116, 145, 146, 915], "silpl": 448, "simd": [53, 104], "similar": [98, 99, 100, 101, 102, 103, 144, 218, 221, 222, 223, 226, 229, 231, 234, 613, 651, 753, 754, 755, 756, 757, 852, 867, 872, 874, 880, 881, 1094, 1097], "similarli": [0, 1, 222, 1094], "simpl": [217, 218, 222, 223, 227, 231, 232, 234, 259, 269, 697, 754, 761, 1092, 1097], "simpler": 0, "simplex": [683, 691, 692, 700], "simpli": [84, 92, 141, 234, 438, 673, 722, 747, 872, 877, 984, 1099], "simplifi": 118, "simpson": [112, 114, 121, 138, 139], "simpson_": 138, "simul": [682, 877, 880, 881], "sinc": [1, 65, 82, 85, 95, 118, 221, 222, 224, 229, 231, 233, 296, 406, 448, 476, 527, 581, 613, 634, 685, 755, 877, 881, 1024, 1037, 1099], "singl": [1, 65, 82, 85, 94, 116, 123, 124, 132, 145, 146, 148, 220, 221, 222, 223, 224, 227, 229, 230, 231, 232, 277, 292, 295, 305, 317, 324, 339, 342, 357, 360, 376, 386, 389, 394, 406, 419, 433, 457, 460, 465, 476, 486, 499, 508, 511, 516, 527, 538, 552, 561, 564, 569, 581, 594, 609, 620, 623, 628, 634, 639, 685, 700, 761, 878, 899, 900, 909, 924, 972, 1080, 1092, 1097, 1099], "singleton": [1, 107, 110, 111, 115, 117, 119, 132, 135, 140, 234], "singular": [1, 214, 876, 1007, 1080], "sinica": 107, "site": [1, 224, 228, 419, 486, 538, 594, 639, 852, 853, 863, 872], "site0": 228, "site1": [228, 852], "site10": 852, "site2": [228, 852], "site3": [228, 852], "site4": [228, 852], "site5": [228, 852], "site6": [228, 852], "site7": [228, 852], "site8": [228, 852], "site9": [228, 852], "sitemap": 224, "situat": [1, 863, 879], "six": [228, 436, 449, 611, 685], "size": [77, 114, 690, 753, 754, 755, 757, 840, 851, 863, 871, 877, 879, 880, 881, 899, 909, 943, 1056], "sk": [231, 292, 339, 357, 376], "skbio": [231, 1091], "skin": [1, 863], "skip": [419, 486, 538, 594, 639, 753, 755, 756, 757, 761, 909], "skip_subregion": 225, "sklearn": 147, "slen": [217, 218], "slice": [72, 386, 404, 405, 419, 429, 457, 474, 475, 486, 496, 508, 525, 526, 538, 548, 561, 579, 580, 594, 604, 620, 633, 639, 648, 655, 703, 708, 731, 886, 956, 1094], "slightli": [98, 122, 757], "slope": 122, "slow": [1, 116, 143, 145, 146, 147], "slower": [0, 1032], "sm": [432, 498, 551, 608, 649], "small": [1, 112, 226, 232, 682, 694, 695, 874], "smaller": [141, 419, 486, 538, 594, 639, 758], "smallest": [142, 229, 880, 881, 933], "smith": [0, 53, 101, 102, 103, 104, 761], "snif": 1092, "sniffer": [215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 261, 266, 267, 270, 271, 1092], "so": [1, 3, 20, 84, 98, 99, 100, 101, 102, 103, 105, 116, 143, 145, 146, 147, 222, 227, 231, 234, 274, 275, 305, 308, 408, 409, 583, 584, 755, 829, 852, 866, 867, 868, 872, 874, 877, 879, 880, 881, 941, 1030, 1092, 1097, 1099], "sob": [1, 106, 130, 131, 132], "societi": 133, "softwar": [1, 222, 223, 231, 944, 1091], "sole": [231, 369], "solexa": 223, "solut": 117, "solv": [117, 877], "some": [1, 53, 106, 116, 118, 129, 133, 163, 222, 224, 227, 230, 231, 245, 246, 247, 295, 319, 379, 501, 554, 684, 697, 698, 699, 867, 877, 880, 1057, 1097, 1099], "someformat": 1092, "someskbioclass": [234, 1092], "someth": [93, 97, 174, 175, 187, 188, 234, 246, 266, 267, 268, 270, 271, 272, 321, 323, 375, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 759, 864, 865, 904, 934, 949, 1008, 1029, 1099], "sometim": [112, 222, 224, 231, 867, 1092], "somewhat": [761, 1004], "sonnhamm": 232, "soppos": 221, "sort": [86, 92, 149, 150, 296, 305, 308, 403, 406, 432, 473, 476, 498, 524, 527, 551, 578, 581, 608, 634, 649, 796, 829, 851, 899, 938, 939, 1017, 1022, 1023, 1030, 1094, 1099], "sort_categori": [762, 763, 785, 796, 829], "sort_f": 937, "sort_index": 95, "sorted_t": 938, "sourc": [3, 12, 13, 14, 15, 16, 17, 18, 19, 34, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 72, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 161, 162, 163, 172, 173, 174, 175, 176, 185, 186, 187, 188, 189, 198, 199, 200, 209, 210, 211, 212, 213, 214, 221, 222, 224, 225, 235, 245, 246, 247, 248, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 302, 304, 305, 306, 307, 308, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 708, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 763, 773, 774, 784, 785, 795, 796, 806, 807, 817, 818, 828, 829, 839, 840, 850, 851, 853, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 956, 960, 962, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1048, 1054, 1055, 1056, 1057, 1058, 1068, 1069, 1070, 1080, 1081, 1091], "space": [1, 213, 222, 227, 229, 231, 232, 305, 308, 317, 682, 683, 684, 688, 689, 691, 692, 796, 852, 853, 863, 866, 873, 899], "spaitial": 757, "span": [16, 48, 116, 133, 148, 222, 224, 227, 295, 320, 899], "spars": [216, 691, 692, 701, 866, 874, 883, 886, 902, 909, 919, 920, 921, 941, 943], "sparse_vector": 899, "sparsedatafram": 942, "spatial": [1, 144, 147, 150, 212, 673, 680, 704, 722, 727, 739, 747, 749, 757], "spearman": [1, 754, 755, 758], "spearmanr": [754, 755], "spec": 360, "specfi": 1099, "speci": [1, 106, 107, 114, 116, 119, 121, 122, 127, 133, 136, 137, 141, 142, 228, 233, 690, 697, 852, 867, 872, 874, 951], "special": [53, 226, 234, 909, 943], "speciat": 761, "specie1": 852, "specie2": 852, "specie3": 852, "specie4": 852, "specie5": 852, "specie6": 852, "specie7": 852, "specie8": 852, "specie9": 852, "species0": 228, "species1": 228, "species2": 228, "species3": 228, "species4": 228, "species5": 228, "species6": 228, "species7": 228, "species8": 228, "species_a": 971, "species_divers": 106, "species_even": 106, "species_rich": 106, "speciesa": 971, "specif": [111, 116, 122, 143, 145, 146, 147, 148, 151, 234, 320, 324, 613, 761, 773, 795, 796, 806, 839, 850, 880, 881, 886, 899, 909, 943, 1015, 1092, 1098, 1099], "specifi": [88, 92, 133, 151, 163, 217, 219, 220, 222, 223, 224, 225, 226, 229, 232, 233, 234, 265, 274, 295, 305, 318, 320, 372, 373, 379, 386, 404, 406, 422, 435, 447, 448, 450, 457, 474, 476, 489, 501, 508, 525, 527, 541, 554, 561, 579, 581, 597, 610, 613, 620, 634, 642, 652, 655, 662, 665, 670, 671, 677, 683, 684, 685, 690, 691, 692, 694, 695, 701, 705, 708, 715, 717, 719, 720, 725, 728, 731, 738, 741, 743, 745, 751, 753, 754, 755, 756, 757, 761, 840, 863, 871, 872, 878, 886, 896, 899, 909, 913, 915, 936, 943, 973, 981, 1012, 1015, 1017, 1020, 1023, 1030, 1057, 1069, 1070, 1080, 1099], "speed": [305, 872], "spermatophyta": 221, "sphingobacteria": [990, 1023], "split": [222, 223, 229, 232], "spmatrix": [886, 902], "spreadsheet": [226, 231], "sqcup": [116, 133], "sqlite": 372, "sqrt": [115, 126, 127, 128, 700, 874], "squar": [128, 129, 147, 227, 651, 704, 727, 869], "squareform": [704, 749], "sr1": 438, "srava": 232, "ss": [232, 939], "ss_con": 232, "sscinam": [217, 218], "sseq": [217, 218], "sseqid": [217, 218], "sskingdom": [217, 218], "sstart": [217, 218], "sstrand": [217, 218], "ssw": [20, 53, 104], "stabl": [662, 677, 715, 725, 738, 751, 970], "stack": 1004, "stackoverflow": 1056, "stai": 231, "stale": 305, "stamataki": 971, "stand": [409, 584, 755], "standalon": 222, "standard": [222, 223, 225, 227, 231, 432, 435, 436, 438, 448, 449, 498, 551, 608, 610, 611, 649, 655, 682, 685, 708, 731, 754, 755, 868, 871, 874, 875, 1092, 1094], "standardis": 114, "staphylococcu": 896, "start": [0, 3, 13, 14, 15, 16, 18, 19, 32, 33, 34, 45, 46, 47, 48, 50, 51, 52, 53, 65, 82, 85, 94, 98, 99, 100, 101, 102, 103, 104, 163, 217, 218, 221, 224, 225, 226, 227, 229, 232, 233, 295, 316, 322, 398, 417, 438, 439, 445, 448, 449, 468, 485, 519, 537, 573, 592, 631, 638, 704, 758, 759, 877, 880, 881, 919, 1099], "start_end_posit": 0, "stat": [0, 1, 3, 65, 82, 83, 85, 91, 92, 95, 129, 163, 176, 212, 214, 215, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 232, 379, 386, 396, 397, 400, 403, 430, 434, 435, 436, 438, 448, 449, 450, 457, 467, 470, 473, 501, 508, 518, 521, 524, 554, 561, 571, 572, 575, 578, 605, 606, 610, 611, 613, 620, 630, 651, 662, 671, 677, 679, 933, 1091, 1094], "state": [3, 13, 14, 15, 17, 18, 19, 34, 46, 47, 49, 50, 51, 52, 133, 219, 229, 231, 274, 1057, 1058, 1068, 1080, 1099], "static": [450, 908, 911], "statis": [753, 756], "statist": [1, 107, 110, 115, 122, 129, 135, 683, 685, 690, 753, 755, 756, 757, 758, 761, 852, 866, 867, 871, 877, 880, 881, 1091], "statistica": [107, 118], "statsmodel": 877, "statu": [3, 34, 879, 880], "staxid": [217, 218], "std": [221, 871, 875, 880], "steel": 1031, "steep": 866, "step": [1, 65, 82, 85, 94, 116, 143, 145, 146, 147, 229, 234, 870, 877], "still": [227, 228, 274, 304, 685, 690, 694, 755, 757], "stimat": 875, "stitl": [217, 218], "stockholm": [93, 97], "stockholm_format": 232, "stombaugh": [145, 146], "stool": 881, "stop": [65, 82, 85, 94, 107, 163, 176, 220, 229, 398, 417, 435, 436, 438, 448, 449, 468, 485, 501, 519, 536, 537, 573, 592, 610, 611, 631, 638, 883, 950, 971, 1058, 1094], "storag": [305, 941], "store": [2, 65, 75, 80, 89, 90, 91, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 295, 305, 360, 377, 379, 414, 416, 450, 482, 484, 501, 533, 535, 554, 589, 591, 613, 636, 637, 673, 703, 704, 722, 727, 747, 758, 774, 807, 818, 853, 866, 867, 872, 874, 899, 909, 943, 951, 1093, 1094], "str": [31, 45, 50, 54, 64, 70, 75, 80, 93, 97, 105, 143, 147, 148, 149, 150, 151, 161, 163, 174, 175, 176, 185, 187, 188, 189, 200, 209, 212, 217, 224, 225, 232, 235, 244, 257, 260, 261, 262, 266, 267, 268, 270, 271, 272, 274, 285, 287, 290, 292, 303, 315, 321, 323, 332, 334, 337, 339, 350, 352, 355, 357, 360, 368, 369, 370, 371, 372, 373, 375, 376, 378, 379, 381, 389, 394, 395, 398, 402, 403, 404, 405, 406, 417, 418, 420, 422, 423, 424, 425, 426, 428, 429, 431, 432, 437, 438, 446, 452, 460, 465, 466, 468, 472, 473, 474, 475, 476, 485, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 503, 511, 516, 517, 519, 523, 524, 525, 526, 527, 537, 539, 541, 542, 543, 544, 545, 547, 548, 550, 551, 553, 554, 556, 564, 569, 570, 573, 577, 578, 579, 580, 581, 592, 593, 595, 597, 598, 599, 600, 601, 603, 604, 607, 608, 612, 613, 615, 623, 628, 629, 631, 632, 633, 634, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 655, 661, 662, 663, 665, 668, 670, 671, 672, 677, 678, 685, 690, 696, 701, 704, 705, 708, 714, 715, 717, 719, 720, 721, 725, 726, 728, 731, 737, 738, 741, 743, 745, 746, 751, 752, 753, 754, 756, 757, 758, 759, 772, 774, 783, 794, 796, 805, 807, 816, 818, 827, 838, 849, 853, 862, 863, 864, 865, 872, 879, 880, 893, 896, 899, 902, 903, 904, 906, 908, 909, 913, 917, 925, 933, 934, 941, 943, 944, 945, 949, 951, 965, 969, 973, 984, 985, 997, 999, 1008, 1012, 1014, 1018, 1020, 1029, 1030, 1031, 1036, 1050, 1055, 1067, 1079, 1090], "straight": 1, "straightforward": [231, 1094], "strand": [217, 218, 224, 225, 232, 295, 434, 435, 436, 606], "stranded": 224, "strategi": [682, 694, 1031], "stream": [222, 225, 1092], "strength": 1, "streptophyta": 221, "strict": [92, 229, 397, 467, 518, 572, 630, 665, 717, 741, 755, 758, 761, 899, 948], "strict_match": [879, 880], "stricter": [227, 1034], "strictli": [222, 685, 690, 701, 972], "string": [1, 12, 43, 45, 50, 53, 81, 143, 147, 148, 151, 162, 172, 173, 186, 198, 199, 210, 215, 219, 220, 222, 223, 227, 229, 231, 232, 293, 294, 340, 341, 358, 359, 360, 377, 395, 405, 406, 422, 429, 432, 433, 438, 446, 466, 475, 476, 489, 496, 498, 499, 517, 526, 527, 541, 548, 551, 552, 570, 580, 581, 597, 604, 608, 609, 629, 633, 634, 642, 648, 649, 651, 655, 661, 667, 685, 690, 703, 704, 708, 714, 718, 731, 737, 742, 753, 756, 757, 759, 862, 863, 904, 907, 933, 944, 945, 948, 965, 969, 1023, 1031, 1036, 1097], "stringifi": 893, "stringio": [1, 116, 145, 146, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 232, 233, 274, 703, 908, 911, 1030, 1031, 1092, 1097], "strip": [971, 975, 976], "stripe": [53, 104], "stripedsmithwaterman": [0, 104], "strong": [1, 379, 753, 755, 761], "struct": [20, 224], "structur": [3, 145, 146, 218, 220, 224, 227, 233, 663, 704, 753, 754, 761, 852, 883, 899, 909, 943, 950, 1013, 1057, 1091], "studi": [1, 116, 231, 360, 682, 685, 852, 866, 874, 881], "style": [682, 1027, 1028], "su": 232, "sub": [224, 225, 295, 882], "subclass": [92, 211, 212, 213, 214, 219, 222, 229, 232, 234, 324, 397, 467, 518, 572, 613, 630, 651, 703, 704, 759, 1030, 1057], "subfold": 1055, "subject": [1, 217, 218, 231, 1093, 1099], "subject1": 218, "subject2": 218, "sublist": 881, "submit": [221, 222, 881], "submodul": 234, "suboptim": 53, "subsampl": [129, 851, 877, 880, 881, 882, 976, 1091], "subsample_count": [129, 851], "subsample_paired_pow": 881, "subsample_pow": 877, "subseq": [419, 486, 538, 594, 613, 639], "subsequ": [101, 219, 222, 231, 381, 389, 394, 398, 417, 419, 452, 460, 465, 468, 485, 486, 503, 511, 516, 519, 537, 538, 556, 564, 569, 573, 592, 594, 613, 615, 623, 628, 631, 638, 639, 1057, 1094], "subset": [116, 133, 145, 146, 151, 215, 221, 754, 909, 915, 939, 975, 981, 1097], "subset_with_metadata": 909, "subsitut": [432, 498, 551, 608, 649], "substitut": [53, 98, 99, 100, 101, 102, 103, 105, 226, 432, 498, 501, 551, 608, 649, 651, 663, 666, 668, 669, 675, 682, 1033, 1094], "substitution_matrix": [53, 98, 99, 100, 101, 102, 103], "substitutionmatrix": [105, 432, 498, 551, 608, 649, 1094], "substract": [98, 99, 100, 101, 102, 103, 870], "substrat": 852, "substrate_cor": 852, "substrate_oth": 852, "substrate_sand": 852, "subtili": 232, "subtract": [53, 840], "subtre": [227, 233, 986, 1097], "success": [1033, 1058, 1099], "success_callback": [1058, 1099], "success_f": 1099, "successfulli": 971, "suffix": 106, "suggest": [53, 246, 266, 267, 270, 271, 880], "suit": 867, "sum": [107, 116, 126, 127, 129, 133, 220, 317, 406, 476, 527, 581, 634, 684, 688, 689, 693, 881, 882, 919, 920, 924, 929, 939, 966, 1022, 1056], "sum_": [109, 112, 114, 116, 118, 121, 133, 136, 137, 682, 684, 697, 698, 699, 755], "summar": 685, "summari": [81, 661, 685, 714, 737, 929], "super": [217, 218], "superkingdom": 233, "superset": [116, 133, 145, 146, 753, 757], "supplementari": [223, 685], "suppli": [53, 217, 222, 230, 266, 270, 369, 402, 472, 523, 577, 632, 679, 881, 899, 981], "support": [1, 2, 84, 93, 97, 118, 174, 175, 187, 188, 274, 277, 321, 323, 342, 360, 369, 375, 378, 379, 428, 437, 495, 500, 501, 547, 553, 554, 603, 612, 647, 650, 651, 663, 672, 678, 721, 726, 746, 752, 755, 853, 864, 865, 872, 877, 886, 899, 926, 934, 949, 951, 971, 1008, 1026, 1029, 1030, 1037, 1057, 1080, 1091, 1095, 1096, 1097, 1098, 1099], "support_attr": 1030, "support_valu": 1030, "suppos": [217, 218, 221, 222, 223, 224, 227, 230, 232, 697, 877, 881], "suppress": [233, 753, 757, 758], "suppress_sequ": [53, 104], "sure": [742, 881, 1099], "surpass": 229, "surround": [227, 690], "survei": 1, "sv": 221, "svd": [214, 876], "svg": 853, "sw": [53, 879], "swab": 1, "swiss": 221, "switch": 886, "sy": 275, "symbiont": 761, "symbol": [84, 222], "symmetr": [1, 651, 655, 703, 704, 708, 727, 731, 742, 755, 759, 761, 866, 974], "symmetri": [703, 704, 727, 742, 744], "symptom": 881, "syn": 224, "synonym": [1, 233], "synthesi": 232, "synthet": 224, "system": [93, 97, 125, 136, 174, 175, 187, 188, 231, 233, 234, 305, 321, 323, 375, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 864, 865, 880, 915, 934, 949, 1008, 1029], "systemat": 133, "t": [1, 17, 53, 65, 82, 84, 85, 86, 91, 92, 96, 104, 114, 116, 118, 133, 143, 145, 146, 147, 221, 222, 223, 224, 225, 226, 228, 230, 231, 232, 233, 245, 247, 275, 295, 296, 373, 379, 384, 393, 398, 402, 406, 408, 409, 410, 411, 412, 415, 423, 424, 425, 426, 434, 448, 455, 464, 468, 472, 476, 478, 479, 480, 483, 490, 491, 492, 493, 501, 506, 515, 519, 523, 527, 529, 530, 531, 534, 542, 543, 544, 545, 554, 559, 568, 573, 577, 581, 583, 584, 585, 586, 587, 590, 598, 599, 600, 601, 606, 613, 618, 627, 631, 632, 634, 643, 644, 645, 646, 651, 669, 683, 685, 690, 691, 692, 696, 697, 701, 758, 866, 867, 872, 874, 876, 877, 879, 881, 882, 896, 904, 909, 910, 926, 933, 943, 946, 975, 976, 1013, 1014, 1022, 1030, 1031, 1032, 1094, 1098, 1099], "t0": [217, 218, 225, 228, 230, 703], "t1": [217, 218, 228, 230, 233, 703, 908], "t10": [225, 228], "t100": [217, 218], "t10596": 218, "t1217": 218, "t1233": 218, "t131567": 233, "t1566": 218, "t161": 217, "t2": [228, 230, 908, 911], "t2130": 218, "t2214": 218, "t3": [230, 908, 911], "t30": [225, 230], "t329": 217, "t330": 217, "t335928": 233, "t34": 230, "t35": 230, "t3e": [217, 218], "t4": 228, "t42": 218, "t44": 218, "t5": 911, "t50": 225, "t5565": 218, "t5587": 218, "t5671": 218, "t6": 911, "t6821": 218, "t6928": 218, "t6e": 218, "t80": 225, "t811": 218, "t8468": 218, "t8552": 218, "t8e": 218, "t9": 228, "t90": 225, "t94": 218, "t96": 225, "t99": 217, "t9e": 217, "t_a": 924, "t_b": 924, "ta": [703, 1094], "taaactatta": 221, "taaactccgg": 221, "taacaatcct": 221, "taacatatac": 223, "taacgtta": [434, 606], "taagactaaa": 221, "taatgaatgg": 221, "tab": [217, 218, 225, 226, 227, 228, 230, 231, 233, 903, 908, 911, 945], "tabl": [1, 143, 147, 216, 223, 224, 231, 233, 372, 435, 436, 438, 447, 448, 449, 610, 611, 685, 690, 852, 866, 867, 873, 874, 1057, 1091, 1093, 1094], "table2": 946, "table3": 946, "table_id": [447, 883, 950], "tableexcept": [883, 935, 948, 950], "tabular": [3, 16, 48, 65, 87, 217, 218, 231, 233, 360], "tabularmsa": [0, 3, 16, 17, 34, 48, 98, 99, 100, 101, 102, 103, 104, 219, 223, 229, 232, 305, 1092], "tac": 230, "tacatcgttt": 221, "tacatgtgta": 221, "taccaggcat": 221, "tacccggt": 1094, "tacctaagtt": 221, "tacg": 230, "tacgta": 230, "tae000111": 218, "tae000171": 218, "tae000174": 218, "tae000425": 218, "tag": [225, 232, 403, 433, 473, 499, 524, 552, 578, 609, 700], "tagagattaattgccactgccaaaattctg": 0, "tagattacag": 221, "taggttgatc": 221, "tagtgaatgg": 221, "take": [1, 147, 229, 234, 245, 246, 247, 324, 402, 429, 472, 496, 523, 548, 577, 604, 632, 648, 667, 685, 718, 727, 742, 754, 755, 829, 866, 874, 877, 878, 894, 895, 904, 924, 937, 945, 946, 1031, 1057, 1097, 1099], "taken": [1, 217, 218, 222, 229, 232, 233, 685, 761, 1056], "target": [0, 1, 53, 104, 115, 225, 662, 677, 715, 725, 738, 751], "target_begin": 20, "target_sequ": [0, 20, 53, 54], "task": [1033, 1092], "tata": [405, 475, 526, 580, 633], "tataa": [405, 475, 526, 580, 633], "tatattagca": 221, "tatctaactg": 221, "tatgtatata": 223, "tatgtatatataacatatacatatatacatacata": 223, "tau": 685, "tax": 218, "tax_id": [233, 989], "taxa": [1, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 127, 128, 129, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 151, 231, 233, 685, 867, 881, 976, 1031], "taxdump": 989, "taxdump_readm": 233, "taxid": 233, "taxon": [1, 107, 108, 109, 112, 114, 116, 120, 121, 126, 127, 133, 134, 135, 136, 137, 142, 145, 146, 221, 224, 883, 950, 989, 990, 1097], "taxonom": [1, 145, 990], "taxonomi": [217, 227, 231, 233, 438, 446, 447, 899, 900, 909, 926, 943, 989, 990, 1023], "taxonomy_0": [926, 941], "taxonomy_1": [926, 941], "taylor": 122, "tb": [703, 908, 911], "tc": [703, 908, 911], "tcaaaagaaa": 221, "tcatttagga": 230, "tcc": 0, "tccacaaatg": 221, "tccagaaaaa": 221, "tcg": [433, 499, 552, 609], "tcga": [432, 498, 551, 608, 649], "tcggagcagt": 221, "tcgggcasdgca": 230, "tcgggcattgca": 230, "tcgtatagat": 221, "tctacccctctcagaga": 0, "tctataagattccgcatgcgttacttataagatgtctcaacgg": 0, "tctcaatctc": 221, "tctcaga": 0, "tcttaacata": 221, "tcttcagcat": 221, "tcttgctcat": 221, "tctttgcttc": 221, "tdbl": 981, "technic": [136, 227], "techniqu": [1, 117, 682, 866, 867, 1095], "teh": [883, 950], "tell": 685, "temorg": 218, "temperatur": 880, "tempfil": 274, "temporari": 899, "temporaryfil": 274, "ten": 1, "tend": 231, "ter": [501, 867], "term": [1, 84, 106, 112, 131, 133, 216, 224, 289, 324, 336, 354, 360, 761, 852, 1031], "termin": [221, 435, 448, 610, 1024], "test": [1, 70, 79, 133, 234, 278, 284, 296, 302, 308, 314, 325, 331, 343, 349, 361, 367, 384, 393, 439, 445, 455, 464, 506, 515, 559, 568, 618, 627, 682, 685, 690, 703, 753, 755, 756, 757, 758, 760, 761, 773, 795, 806, 839, 850, 877, 880, 881, 905, 1034, 1035, 1055, 1091], "test_tabl": [908, 911], "texon": 225, "text": [109, 112, 126, 127, 142, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 245, 246, 247, 274, 360, 703, 784, 817, 828], "textiobas": [235, 245, 246, 247, 274], "textiowrapp": 274, "tf": 101, "tgaaggatca": 221, "tgaattcaac": 221, "tgca": 230, "tgene": 225, "tgenu": 233, "tgetaaafhwqaaf": 230, "tgg": [403, 433, 473, 499, 524, 552, 578, 609], "tggaacaatt": 221, "tggattaaaa": 221, "tggattctgc": 295, "tggtgcacct": 221, "tggtgctgga": 221, "tgi": 217, "tgtaataaat": 221, "tgtacacta": 3, "th": [109, 112, 126, 127, 135, 142, 700], "than": [0, 1, 53, 83, 84, 106, 107, 116, 122, 124, 141, 145, 146, 222, 227, 229, 232, 267, 271, 305, 360, 379, 380, 381, 384, 398, 402, 406, 417, 418, 419, 420, 421, 423, 424, 425, 426, 436, 449, 451, 452, 455, 468, 472, 476, 485, 486, 487, 488, 490, 491, 492, 493, 501, 502, 503, 506, 519, 523, 527, 537, 538, 539, 540, 542, 543, 544, 545, 554, 555, 556, 559, 573, 577, 581, 592, 593, 594, 595, 596, 598, 599, 600, 601, 611, 614, 615, 618, 631, 632, 634, 638, 639, 640, 641, 643, 644, 645, 646, 651, 681, 682, 685, 687, 690, 703, 744, 753, 755, 756, 757, 761, 851, 866, 867, 880, 881, 882, 915, 920, 939, 972, 989, 1002, 1031, 1036, 1092, 1097], "thei": [0, 1, 75, 80, 84, 91, 107, 143, 147, 217, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 322, 379, 384, 393, 396, 419, 439, 455, 464, 486, 506, 515, 538, 554, 559, 568, 571, 594, 618, 627, 639, 653, 665, 682, 706, 717, 729, 741, 753, 754, 755, 756, 757, 758, 762, 862, 863, 866, 872, 877, 900, 909, 943, 976, 983, 1032, 1034, 1099], "them": [1, 50, 118, 224, 229, 231, 296, 308, 317, 318, 431, 497, 550, 607, 613, 755, 796, 871, 872, 874, 1058], "themselv": [1093, 1094], "theorem": [123, 124], "theoret": [134, 139], "theori": [84, 109, 125, 136, 696, 702], "therebi": 852, "therefor": [1, 82, 85, 92, 112, 114, 116, 122, 133, 137, 145, 146, 151, 231, 360, 651, 685], "thermoplasmata": [990, 1023], "theta": [133, 685], "thi": [0, 1, 2, 3, 12, 19, 43, 52, 53, 67, 68, 69, 70, 72, 77, 79, 81, 82, 83, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 116, 117, 118, 122, 123, 124, 129, 132, 133, 143, 144, 145, 146, 147, 148, 150, 151, 163, 174, 175, 187, 188, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 245, 246, 247, 259, 267, 269, 271, 273, 274, 275, 278, 284, 287, 293, 294, 295, 296, 302, 304, 305, 306, 307, 308, 314, 316, 317, 318, 319, 320, 321, 323, 325, 331, 334, 340, 341, 343, 349, 352, 358, 359, 360, 361, 367, 369, 370, 373, 374, 375, 377, 378, 381, 382, 383, 384, 386, 389, 391, 393, 394, 397, 398, 402, 406, 408, 409, 417, 418, 419, 420, 421, 423, 424, 425, 426, 428, 429, 430, 432, 433, 436, 437, 438, 447, 448, 449, 450, 452, 453, 454, 455, 457, 460, 462, 464, 465, 467, 468, 472, 476, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 498, 499, 500, 503, 504, 505, 506, 508, 511, 513, 515, 516, 518, 519, 523, 527, 537, 538, 539, 540, 542, 543, 544, 545, 547, 548, 551, 552, 553, 556, 557, 558, 559, 561, 564, 566, 568, 569, 572, 573, 577, 581, 583, 584, 592, 593, 594, 595, 596, 598, 599, 600, 601, 603, 604, 605, 608, 609, 611, 612, 613, 615, 616, 617, 618, 620, 623, 625, 627, 628, 630, 631, 632, 634, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 672, 673, 674, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 703, 706, 708, 721, 722, 723, 726, 727, 729, 731, 744, 746, 747, 748, 749, 752, 753, 754, 755, 757, 759, 760, 761, 762, 851, 852, 863, 864, 865, 867, 872, 873, 874, 877, 879, 880, 881, 896, 899, 900, 907, 909, 915, 924, 930, 933, 934, 939, 943, 944, 948, 949, 951, 967, 969, 971, 973, 975, 976, 979, 981, 982, 984, 986, 987, 989, 993, 1000, 1004, 1007, 1008, 1010, 1012, 1013, 1015, 1016, 1017, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1055, 1056, 1057, 1058, 1068, 1080, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099], "thing": 1099, "third": [697, 703, 993, 1099], "those": [1, 144, 231, 360, 374, 761, 851, 866, 881, 919, 981, 1015, 1020, 1031, 1057, 1094], "though": [118, 222, 223, 229, 230, 231, 685, 739, 753, 757, 921, 1031, 1099], "thought": 757, "thr": 501, "thraustochytrium": 447, "three": [1, 3, 65, 132, 229, 233, 697, 703, 727, 758, 852, 863, 880, 881, 899, 900, 946, 976, 1099], "threonin": 501, "threshold": [107, 1034], "through": [1, 72, 98, 99, 100, 220, 231, 259, 265, 269, 655, 708, 731, 872, 984, 1099], "throughout": [1, 226, 438, 447, 880, 1098], "throughput": [116, 145, 146, 222, 223, 690, 863, 880], "thrown": [246, 991], "thu": [1, 222, 223, 227, 231, 287, 334, 352, 370, 406, 476, 527, 581, 613, 634, 655, 708, 727, 731, 753, 755, 757, 761, 872], "thymin": [221, 224, 379, 434, 606], "ti": [83, 108, 933, 1030], "tid": 225, "tile": 230, "tile_numb": 230, "till": 233, "time": [1, 53, 82, 85, 116, 129, 139, 145, 146, 148, 222, 223, 231, 651, 691, 692, 700, 739, 753, 754, 755, 756, 758, 762, 785, 840, 874, 877, 880, 881, 886, 899, 930, 939, 951, 1015, 1099], "timestamp": 943, "tip": [1, 116, 133, 145, 146, 951, 969, 971, 973, 974, 975, 976, 978, 979, 981, 982, 984, 991, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1023, 1024, 1025, 1030, 1092, 1097], "tip_": 1016, "tip_a": [982, 1011], "tip_count": 1002, "tip_d": 982, "tip_list": 1019, "tip_nam": 973, "tip_subset": 981, "tip_tip_dist": [982, 991], "tipnam": [997, 999], "tissue_typ": 221, "titl": [1, 217, 218, 224, 232, 671, 720, 745, 863], "tjflkafnkkghvm": 230, "tmgc": 447, "tn": 232, "tno": 233, "to_": [662, 715, 738], "to_data_fram": 749, "to_datafram": [294, 341, 359, 360], "to_delet": 1007, "to_dict": 86, "to_hdf5": 909, "to_seri": [293, 340, 358], "toarrai": 701, "tobacco": 881, "togeth": [92, 221, 222, 224, 232, 685, 899, 924, 1057], "token": 163, "tol": 876, "toler": [876, 1034], "tolosana": [682, 700], "ton": 1, "tongu": 1, "too": [124, 872, 896, 966], "tool": [98, 101, 217, 218, 222, 229, 231, 233, 863, 867], "toolkit": 971, "top": [685, 989], "topolog": 970, "topologi": [973, 1007, 1097], "total": [108, 109, 112, 115, 116, 117, 119, 125, 126, 127, 128, 129, 135, 142, 215, 217, 231, 406, 476, 527, 581, 634, 754, 899, 981], "totaldescendingbranch": 981, "toward": 967, "tparent": 225, "tr": 981, "traceback": [217, 229, 448, 613, 755], "tracheophyta": 221, "track": [220, 221], "tracker": [222, 246], "tract": 881, "trail": [222, 223, 226], "trajectori": [762, 763, 773, 774, 784, 785, 795, 796, 806, 807, 817, 818, 828, 829, 839, 840, 850], "trajectory_categori": [762, 763, 785, 796, 829], "trajectory_result": 762, "tranform": 946, "tranpos": 941, "transcrib": [221, 224, 435, 436, 606, 1094], "transcript": 295, "transect": 852, "transform": [245, 247, 419, 486, 538, 594, 639, 682, 683, 684, 688, 689, 691, 692, 696, 701, 866, 872, 874, 886, 911, 933], "translat": [221, 224, 227, 233, 274, 434, 436, 438, 449, 606, 611, 1094], "translate_six_fram": [434, 435, 448, 606, 610], "transloc": 880, "transpar": [231, 274], "transpos": 941, "trapezoid": 118, "trascrib": 221, "traver": 1097, "travers": [952, 953, 973, 977, 980, 984, 987, 998, 1001, 1004, 1005, 1006, 1021, 1027, 1028, 1097], "tre361": 221, "treat": [82, 83, 84, 85, 222, 226, 231, 360, 379, 422, 431, 489, 497, 501, 541, 550, 554, 597, 607, 613, 642, 680, 880], "treatment": [324, 685, 690, 762, 880, 897], "treatment_stat": 880, "tree": [1, 116, 133, 145, 146, 227, 232, 233, 305, 701, 898, 914, 1091, 1092], "tree1": [974, 975, 976, 1097], "tree2": [974, 975, 976, 1097], "tree3": 1097, "tree_copi": [952, 953, 977, 980], "tree_copy_nod": [952, 953, 977, 980], "tree_nod": [952, 953, 977, 980], "tree_node_class": 1030, "treeerror": [1012, 1013], "treenod": [1, 116, 133, 145, 146, 227, 701, 898, 1030, 1031, 1092, 1097], "trg": [403, 433, 473, 499, 524, 552, 578, 609], "tri": 921, "triangl": [727, 742, 749, 755, 872, 921], "triangular": 755, "trifoliea": 221, "trifolium": 221, "trifurc": [116, 145, 146, 227], "trim": 448, "tripleton": 1, "trp": 501, "trubbbbrbcefgh": 230, "true": [1, 32, 33, 53, 66, 67, 68, 69, 70, 82, 83, 85, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 106, 110, 111, 112, 114, 116, 117, 121, 129, 133, 136, 137, 138, 141, 143, 145, 146, 147, 148, 151, 163, 176, 211, 212, 213, 214, 217, 220, 221, 222, 223, 224, 225, 227, 230, 245, 246, 247, 266, 270, 274, 275, 288, 291, 295, 305, 317, 322, 335, 338, 353, 356, 369, 379, 380, 381, 383, 384, 386, 393, 396, 397, 399, 400, 401, 403, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 448, 449, 450, 451, 452, 454, 455, 457, 464, 467, 469, 470, 471, 473, 476, 477, 478, 479, 480, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 503, 505, 506, 508, 515, 518, 520, 521, 522, 524, 527, 528, 529, 530, 531, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 555, 556, 558, 559, 561, 568, 571, 572, 574, 575, 576, 578, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 617, 618, 620, 627, 630, 634, 636, 637, 640, 641, 642, 643, 644, 645, 646, 648, 649, 652, 653, 660, 662, 665, 681, 685, 690, 691, 692, 696, 703, 704, 705, 706, 713, 715, 717, 727, 728, 729, 736, 738, 741, 742, 744, 753, 755, 757, 758, 761, 796, 807, 871, 872, 874, 875, 879, 880, 882, 883, 899, 902, 906, 907, 909, 910, 918, 919, 920, 921, 925, 929, 930, 931, 932, 933, 936, 937, 939, 941, 942, 943, 946, 948, 969, 971, 973, 978, 986, 992, 994, 995, 996, 998, 1001, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1021, 1023, 1024, 1026, 1030, 1031, 1057, 1058, 1068, 1080, 1094, 1097, 1099], "truncat": [223, 661, 714, 737, 862, 1031, 1099], "trust": 223, "truth": [380, 451, 502, 555, 614], "truthi": [380, 451, 502, 555, 614], "try": [881, 882], "tryptophan": [84, 501], "tsuperkingdom": 233, "tsv": [226, 231, 292, 339, 357, 360, 373, 376, 911, 945], "tsv_fh": 911, "tt": [83, 419, 486, 538, 594, 639], "tta": [421, 488, 540, 596, 641], "ttacatatta": 221, "ttacgcttaaac": 222, "ttactattac": 221, "ttactgttcg": 221, "ttagctcatt": 221, "ttattaaaag": 221, "ttattgtagc": 221, "ttattttttt": 221, "ttcaatttgg": 221, "ttcatt": [396, 418, 430, 571, 593, 605], "ttcatttgat": 221, "ttccagtaga": 221, "ttctactctt": 221, "ttctgcaatc": 221, "ttest_ind": [685, 690], "ttest_rel": 685, "ttgaatactt": 221, "ttgagaatac": 221, "ttgg": 899, "ttggccaaga": 221, "ttgtaactct": 221, "ttgttgtacc": 221, "ttjflkafnkkghvm": 230, "tttattggta": 221, "tttcctcgtg": 221, "tttgaattaa": 221, "tttgcaggct": 221, "ttttcattgg": 221, "ttttggactg": 221, "ttttggatta": 221, "tttttaggcc": 221, "tttttttaaaaaaa": 1099, "tupl": [98, 99, 100, 101, 102, 103, 104, 111, 115, 123, 129, 132, 151, 225, 246, 295, 316, 320, 374, 435, 436, 610, 611, 655, 708, 731, 886, 894, 899, 909, 910, 926, 939, 943, 990, 991, 1022, 1023], "ture": 119, "turkei": [222, 229], "turn": [3, 379, 501, 554, 874, 1034, 1099], "turnip": 232, "tutori": [231, 234, 292, 339, 357, 360, 373, 376, 1091], "twice": 881, "two": [0, 1, 3, 98, 99, 100, 101, 102, 103, 104, 107, 112, 133, 137, 145, 146, 217, 218, 222, 223, 224, 225, 227, 229, 230, 233, 295, 296, 302, 308, 314, 317, 322, 379, 384, 397, 402, 419, 423, 425, 455, 467, 472, 486, 490, 492, 501, 506, 518, 523, 538, 542, 544, 554, 559, 572, 577, 594, 598, 600, 618, 630, 632, 639, 643, 645, 651, 653, 655, 660, 662, 667, 673, 680, 681, 682, 685, 687, 690, 697, 700, 701, 703, 704, 706, 708, 713, 715, 718, 722, 729, 731, 736, 738, 742, 747, 753, 754, 755, 756, 757, 758, 759, 761, 867, 872, 877, 880, 881, 896, 899, 909, 924, 943, 975, 976, 982, 991, 1013, 1015, 1030, 1035, 1092, 1094, 1097], "txt": [221, 231, 233, 292, 339, 357, 376], "tyne": 221, "type": [1, 53, 65, 70, 82, 83, 85, 123, 134, 139, 147, 151, 211, 212, 213, 214, 215, 219, 220, 222, 223, 224, 225, 226, 229, 232, 233, 245, 247, 260, 262, 263, 264, 266, 270, 274, 277, 278, 284, 292, 324, 325, 331, 339, 342, 343, 349, 357, 360, 361, 367, 369, 373, 376, 381, 384, 393, 396, 397, 398, 400, 402, 403, 404, 417, 418, 423, 424, 425, 426, 429, 430, 439, 445, 452, 455, 464, 467, 468, 470, 472, 473, 474, 485, 490, 491, 492, 493, 496, 503, 506, 515, 518, 519, 521, 523, 524, 525, 537, 542, 543, 544, 545, 548, 556, 559, 568, 571, 572, 573, 575, 577, 578, 579, 592, 593, 598, 599, 600, 601, 604, 605, 613, 615, 618, 627, 630, 631, 632, 638, 643, 644, 645, 646, 648, 655, 664, 676, 680, 681, 703, 708, 716, 724, 731, 740, 750, 754, 757, 759, 852, 866, 867, 874, 877, 879, 883, 894, 900, 909, 910, 924, 943, 950, 952, 953, 973, 977, 980, 1022, 1030, 1034, 1041, 1091, 1092], "typeerror": [65, 82, 85, 92, 143, 266, 267, 270, 271, 381, 397, 398, 402, 406, 417, 418, 423, 424, 425, 426, 452, 467, 468, 472, 476, 485, 490, 491, 492, 493, 503, 518, 519, 523, 527, 537, 542, 543, 544, 545, 556, 572, 573, 577, 581, 592, 593, 598, 599, 600, 601, 615, 630, 631, 632, 634, 638, 643, 644, 645, 646, 680, 681, 754, 755, 757, 880, 881, 926, 973], "typic": [98, 99, 100, 101, 102, 103, 105, 176, 200, 222, 223, 230, 231, 232, 295, 305, 872, 971, 1093], "tyr": 501, "tyrosin": 501, "u": [1, 100, 103, 116, 123, 126, 145, 146, 221, 222, 224, 233, 384, 389, 393, 394, 434, 455, 460, 464, 465, 501, 506, 511, 515, 516, 554, 559, 564, 568, 569, 606, 618, 623, 627, 628, 685, 688, 689, 701, 755, 876, 881, 898, 1094, 1099], "u1": [1, 116, 145, 146], "u2": [1, 116, 145, 146], "u3": [1, 116, 145, 146], "u4": [1, 116, 145, 146], "u5": [1, 116, 145, 146], "u6": [1, 116, 145, 146], "u7": [1, 116, 145, 146], "u8": [116, 145, 146], "u_count": [116, 145, 146], "u_i": 685, "uaacguua": [434, 606], "uaaguucucgaucucuaaaaucg": 232, "uaaguucucgaucuuuaaaaucg": 232, "uagguugauc": 221, "uc": 1094, "ucagucagucagucagucagucagucagucagucagucagucagucagucagucagucagucag": 438, "uccacaaaug": 221, "uconn": [107, 111], "ugaguucucgaucucuaaaaucg": 232, "ugaguucucuaucucuaaaaucg": 232, "uint8": [3, 17, 34, 222, 223, 230, 379, 381, 398, 402, 417, 418, 423, 424, 425, 426, 432, 452, 468, 472, 485, 490, 491, 492, 493, 498, 501, 503, 519, 523, 537, 542, 543, 544, 545, 551, 554, 556, 573, 577, 592, 593, 598, 599, 600, 601, 608, 613, 615, 631, 632, 638, 643, 644, 645, 646, 649], "uk": [98, 101, 120, 221, 224, 295, 682], "ulcl": 123, "ulcu": 123, "un": 227, "unabl": 235, "unalign": [98, 99, 100, 101, 102, 103, 104, 1094], "unbound": [305, 319], "uncertainti": [84, 690, 761], "unclear": 122, "unconstrain": 867, "uncorrect": [110, 111], "uncov": [123, 124, 1095], "undefin": [231, 879, 880, 976], "under": [118, 147, 222, 379, 501, 554, 613, 685, 796, 880, 899, 1091], "underli": [0, 3, 172, 198, 274, 384, 448, 455, 506, 559, 613, 618, 680, 852, 877, 883, 1094], "underlii": 3, "underpow": 877, "underscor": [227, 229], "understand": [231, 685], "understood": [93, 97, 174, 175, 187, 188, 227, 266, 267, 268, 270, 271, 272, 321, 323, 375, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 864, 865, 934, 949, 1008, 1029], "unequ": [107, 439, 651], "unescap": 227, "uneven": [106, 142], "unfortun": [223, 880], "ungap": [419, 486, 538, 594, 639], "ungapped_subsequ": [419, 486, 538, 594, 639], "unicod": [215, 231, 274], "unifi": 690, "uniform": [1, 759], "uniformli": [16, 48, 50], "unifrac": [1, 116, 133, 145, 146, 148, 151, 872], "unimod": [867, 872], "union": [900, 924], "uniprotkb": 221, "uniq": [432, 498, 551, 608, 649], "uniqu": [1, 92, 96, 217, 222, 226, 227, 231, 232, 233, 369, 374, 432, 498, 551, 608, 649, 681, 703, 757, 863, 899, 926, 970, 979, 984], "unit": [1, 3, 145, 224, 234, 651, 872, 874, 875, 990, 1034, 1035, 1098], "univers": [221, 222, 229, 231, 235], "unix": 233, "unknown": [84, 123, 124, 224, 295, 404, 474, 525, 579, 851, 933], "unknownaxiserror": [894, 896, 902, 903, 907, 914, 916, 917, 920, 921, 922, 923, 925, 926, 927, 935, 936, 946, 948], "unknowniderror": [917, 925], "unless": [53, 65, 91, 110, 230, 1058], "unlik": [232, 851], "unmask": 53, "unnam": 1092, "unnecessari": 92, "unobserv": [106, 135], "unpack": [17, 49, 1026], "unpack_by_func": 1025, "unpair": 227, "unpermut": [753, 755, 756], "unread": 274, "unrecogn": [894, 896, 902, 907, 914, 916, 917, 922, 923, 925, 927, 946, 948], "unrecognizedformaterror": [266, 267, 268, 270, 271, 272], "unresolv": 151, "unroot": [116, 133, 145, 146, 227, 988, 1012, 1027, 1028, 1031], "unrooted_copi": [952, 953, 977, 980, 1013, 1028], "unrooted_deepcopi": [952, 953, 977, 980, 1012, 1013, 1027], "unshar": 92, "unsign": [851, 1002], "unsolv": 685, "unstabl": 151, "unsupport": [231, 501], "until": [305, 700, 1014], "untouch": [907, 930], "untreat": 880, "unweight": [1, 133, 145, 146, 875], "unweighted_unifrac": [1, 146], "unwrit": 274, "unzip": 932, "up": [84, 105, 219, 229, 231, 232, 274, 305, 317, 610, 611, 655, 687, 694, 695, 697, 698, 699, 708, 731, 755, 851, 881, 899, 968, 973, 976, 1007, 1013, 1080, 1097], "upd": 133, "upd_": 133, "updat": [221, 222, 233, 305, 319, 613, 948], "updated_t": 948, "upon": 221, "upper": [53, 122, 123, 222, 229, 295, 305, 317, 319, 742, 749, 755, 921], "upper_bound": [111, 115, 123, 305, 317], "upper_quantil": 122, "uppercas": [379, 501, 554, 613], "upsk": 232, "uq": 122, "uracil": [221, 224, 434, 554, 606], "urinari": 881, "url": [93, 97, 174, 175, 187, 188, 266, 267, 268, 270, 271, 272, 274, 321, 323, 375, 378, 428, 437, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 864, 865, 909, 934, 943, 949, 1008, 1029], "urn": [123, 124], "us": [1, 15, 20, 45, 47, 53, 65, 72, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 98, 99, 100, 110, 111, 112, 116, 117, 122, 129, 132, 133, 134, 136, 143, 145, 146, 147, 148, 151, 163, 212, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 245, 246, 247, 263, 264, 267, 271, 274, 293, 294, 305, 317, 340, 341, 358, 359, 360, 372, 373, 377, 379, 397, 402, 414, 416, 419, 422, 429, 432, 435, 436, 438, 446, 447, 448, 449, 450, 467, 472, 482, 484, 486, 489, 496, 498, 501, 518, 523, 533, 535, 538, 541, 548, 551, 554, 572, 577, 589, 591, 594, 597, 604, 608, 610, 611, 613, 630, 632, 636, 637, 639, 642, 648, 649, 651, 655, 667, 679, 680, 682, 683, 684, 685, 690, 691, 692, 694, 695, 701, 703, 704, 708, 718, 727, 731, 742, 749, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 785, 796, 807, 829, 840, 852, 863, 866, 872, 876, 877, 878, 879, 880, 881, 899, 904, 905, 907, 930, 933, 935, 937, 938, 941, 943, 944, 951, 952, 953, 969, 971, 972, 973, 976, 977, 980, 982, 988, 989, 1007, 1012, 1013, 1020, 1022, 1027, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1057, 1080, 1094, 1097, 1098, 1099], "usag": [131, 756], "useabl": 265, "usefulli": 1030, "user": [1, 84, 144, 217, 231, 233, 234, 235, 245, 246, 247, 266, 268, 270, 272, 431, 497, 550, 607, 685, 690, 867, 872, 882, 1032, 1094], "usrman": 221, "usual": [1, 106, 141, 221, 224, 231, 233, 651, 971], "ut": 1094, "uti": 881, "util": [1, 93, 97, 174, 175, 187, 188, 233, 245, 247, 321, 323, 375, 378, 428, 437, 438, 446, 447, 450, 495, 500, 547, 553, 603, 612, 647, 650, 672, 678, 721, 726, 746, 752, 864, 865, 909, 924, 932, 934, 937, 943, 949, 1008, 1029, 1091, 1092], "uu": 145, "uuagcucauu": 221, "uuauuguagc": 221, "uuauuuuuuu": 221, "uucuacucuu": 221, "uugagaauac": 221, "uuugaauuaa": 221, "uuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggg": 438, "uuuuuuuuuuuuuuuuccccccccccccccccaaaaaaaaaaaaaaaagggggggggggggggg": 438, "v": [53, 145, 146, 324, 360, 379, 384, 393, 455, 464, 501, 506, 515, 554, 559, 568, 618, 627, 682, 696, 700, 702, 879, 880, 1022], "v2": 216, "v_count": [145, 146], "vagin": 881, "vaginali": 881, "val": [501, 907], "val_i": 921, "val_j": 921, "valdar": 84, "valid": [98, 101, 116, 133, 143, 145, 146, 147, 148, 151, 211, 212, 213, 214, 220, 222, 223, 227, 229, 360, 373, 379, 432, 450, 498, 501, 551, 554, 608, 649, 696, 702, 704, 727, 742, 883, 909, 933, 943, 1094, 1099], "valin": 501, "valu": [1, 3, 4, 5, 7, 9, 10, 11, 14, 15, 18, 19, 21, 22, 25, 27, 28, 29, 35, 36, 38, 40, 41, 42, 46, 47, 51, 52, 55, 56, 58, 60, 61, 62, 71, 74, 76, 78, 84, 89, 98, 99, 100, 101, 102, 103, 105, 107, 118, 120, 129, 134, 136, 142, 143, 146, 153, 154, 156, 158, 159, 160, 164, 165, 167, 169, 170, 171, 177, 178, 180, 182, 183, 184, 190, 191, 193, 195, 196, 197, 201, 202, 204, 206, 207, 208, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 231, 232, 236, 237, 239, 241, 242, 243, 249, 250, 252, 254, 255, 256, 274, 278, 279, 281, 282, 283, 284, 286, 288, 289, 290, 291, 293, 294, 297, 299, 300, 301, 304, 309, 311, 312, 313, 316, 320, 324, 325, 326, 328, 329, 330, 331, 333, 335, 336, 337, 338, 340, 341, 343, 344, 346, 347, 348, 349, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 369, 373, 374, 377, 379, 380, 385, 388, 390, 392, 396, 397, 414, 422, 429, 430, 440, 442, 443, 444, 451, 456, 459, 461, 463, 467, 482, 489, 496, 501, 502, 507, 510, 512, 514, 518, 533, 541, 548, 554, 555, 560, 563, 565, 567, 571, 572, 589, 597, 604, 605, 613, 614, 619, 622, 624, 626, 630, 636, 642, 648, 654, 657, 658, 659, 662, 677, 682, 685, 687, 690, 694, 695, 696, 697, 698, 699, 702, 707, 710, 711, 712, 715, 725, 730, 733, 734, 735, 738, 751, 753, 754, 755, 756, 757, 758, 759, 761, 764, 765, 767, 769, 770, 771, 775, 776, 778, 780, 781, 782, 784, 786, 787, 789, 791, 792, 793, 796, 797, 798, 800, 802, 803, 804, 808, 809, 811, 813, 814, 815, 817, 819, 820, 822, 824, 825, 826, 828, 830, 831, 833, 835, 836, 837, 841, 842, 844, 846, 847, 848, 851, 854, 855, 857, 859, 860, 861, 863, 866, 867, 871, 872, 874, 876, 877, 878, 879, 880, 881, 885, 888, 890, 891, 892, 893, 894, 899, 907, 908, 909, 913, 919, 920, 923, 927, 929, 930, 933, 937, 939, 940, 946, 948, 951, 954, 955, 958, 961, 963, 964, 971, 973, 976, 1015, 1022, 1033, 1034, 1035, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1057, 1059, 1060, 1062, 1064, 1065, 1066, 1069, 1071, 1072, 1074, 1076, 1077, 1078, 1080, 1082, 1083, 1085, 1087, 1088, 1089, 1099], "valueerror": [65, 82, 84, 85, 88, 92, 94, 96, 107, 116, 118, 133, 143, 145, 146, 147, 151, 213, 266, 270, 287, 334, 352, 370, 374, 397, 398, 404, 406, 417, 420, 421, 423, 424, 425, 426, 432, 448, 450, 467, 468, 474, 476, 485, 487, 488, 490, 491, 492, 493, 498, 518, 519, 525, 527, 537, 539, 540, 542, 543, 544, 545, 551, 572, 573, 579, 581, 592, 595, 596, 598, 599, 600, 601, 608, 613, 630, 631, 634, 638, 640, 641, 643, 644, 645, 646, 649, 663, 666, 667, 680, 681, 687, 694, 695, 701, 718, 742, 754, 755, 757, 758, 796, 840, 851, 863, 866, 867, 880, 881, 882, 908, 909, 933, 939, 974, 976, 981, 989, 997, 999, 1002, 1014, 1015, 1020, 1025, 1036], "van": 700, "vanveeeeaw": 220, "var": [754, 941], "vari": [1, 757, 877, 879, 880], "variabl": [118, 214, 215, 429, 496, 548, 604, 613, 648, 685, 754, 757, 852, 853, 863, 867, 872, 873, 874, 877, 879, 880, 1057, 1080, 1099], "varianc": [111, 369, 696, 702, 754, 756, 757, 852, 868, 871, 875, 880], "variant": [1, 116, 133, 230, 233, 651], "variat": [107, 755, 867], "varieti": 226, "variou": [1, 3, 106, 228, 360, 703, 853, 877, 1095, 1098], "vazquez": 863, "ve": [1, 222, 223, 881, 1097], "vec": 878, "vector": [3, 88, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 163, 176, 189, 200, 211, 212, 213, 214, 220, 226, 399, 401, 404, 407, 419, 422, 424, 426, 427, 429, 432, 438, 469, 471, 474, 477, 486, 489, 491, 493, 494, 496, 498, 520, 522, 525, 528, 538, 541, 543, 545, 546, 548, 549, 551, 574, 576, 579, 582, 594, 597, 599, 601, 602, 604, 608, 639, 642, 644, 646, 648, 649, 655, 683, 684, 685, 690, 691, 692, 697, 698, 699, 702, 703, 704, 708, 727, 731, 753, 756, 757, 807, 867, 881, 882, 886, 899, 932, 936, 939, 946, 1022, 1091], "vegan": [753, 754, 755, 756, 757, 866, 867, 874], "vellend": 133, "ver": 218, "verdonschot": 867, "veri": [1, 98, 99, 100, 122, 222, 227, 234, 697, 909, 976], "verifi": [221, 234, 266, 270], "versa": [227, 761, 930], "versatil": 852, "version": [1, 110, 111, 116, 133, 136, 143, 145, 146, 147, 215, 217, 219, 220, 221, 224, 225, 229, 246, 403, 431, 433, 473, 497, 499, 524, 550, 552, 578, 607, 609, 685, 700, 883, 904, 907, 909, 930, 939, 943, 945, 950, 965, 969, 1032, 1036, 1094], "versu": [134, 139, 145, 146], "veschi": 118, "via": [82, 85, 94, 107, 123, 124, 222, 229, 402, 438, 439, 445, 472, 523, 577, 632, 753, 755, 756, 899, 939], "vice": [227, 761, 930], "viceroi": [107, 111], "view": [221, 932], "viewer": 971, "violat": 690, "viral": 232, "virgilio": 118, "viridiplanta": 221, "virol": 232, "viru": 232, "visit": 1005, "visual": [1, 852, 863], "vlen": [909, 943], "vocabulari": [224, 225, 293, 294, 340, 341, 358, 359, 360, 377], "volatil": 762, "volum": 1031, "vqhklrah": 232, "vrt": 233, "w": [53, 84, 107, 108, 115, 129, 133, 142, 217, 218, 219, 274, 379, 501, 554, 685, 700, 943, 945], "wa": [1, 98, 101, 107, 108, 109, 112, 115, 116, 118, 119, 120, 121, 125, 126, 127, 133, 134, 136, 137, 143, 145, 146, 147, 148, 219, 222, 223, 227, 229, 274, 289, 292, 293, 294, 336, 339, 340, 341, 354, 357, 358, 359, 376, 377, 419, 448, 486, 538, 594, 613, 639, 685, 696, 700, 702, 755, 807, 871, 879, 881, 967, 1009, 1030, 1031, 1092, 1097, 1099], "wai": [0, 1, 222, 223, 227, 229, 232, 234, 295, 373, 431, 497, 550, 607, 651, 685, 755, 872, 877, 899, 909, 943, 1092, 1097], "wakefield": 1030, "walk": [1027, 1028, 1097, 1099], "walli": [685, 880, 881], "wan": [53, 104], "want": [98, 99, 100, 221, 224, 305, 877, 879, 880, 881, 975, 976, 1092], "warn": [223, 231, 872, 973, 1027, 1032, 1033, 1091], "washington": [222, 227, 229, 1030], "wasn": [65, 223], "water": 101, "waterman": [0, 53, 101, 102, 103, 104], "we": [0, 1, 53, 82, 84, 85, 116, 122, 129, 133, 145, 146, 148, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 275, 295, 305, 406, 419, 429, 448, 476, 486, 496, 527, 538, 548, 581, 594, 604, 613, 634, 639, 648, 685, 690, 696, 702, 703, 753, 754, 755, 757, 758, 761, 762, 852, 863, 866, 874, 876, 877, 879, 880, 881, 896, 909, 939, 976, 1030, 1092, 1097, 1099], "weak": 379, "weaker": 761, "web": [53, 98, 101, 104, 219, 233, 753, 754, 755, 756, 757], "webfeat": 224, "webpag": 224, "websit": 84, "week": 881, "weight": [1, 116, 133, 145, 146, 227, 762, 763, 785, 796, 807, 829, 871, 875, 1030], "weighted_unifrac": [1, 145], "welcom": 222, "well": [0, 223, 231, 234, 360, 613, 690, 703, 704, 754, 756, 757, 761, 853, 867, 909, 1030, 1092, 1097, 1098], "wellcom": 223, "were": [1, 100, 103, 116, 122, 143, 145, 146, 147, 227, 229, 230, 384, 419, 455, 486, 506, 538, 559, 594, 618, 639, 753, 755, 757, 863, 880, 881, 997, 999, 1033, 1099], "wf": [223, 1099], "what": [1, 116, 133, 143, 145, 146, 147, 227, 231, 234, 235, 263, 264, 268, 272, 320, 419, 486, 538, 594, 639, 761, 851, 880, 896, 899, 909, 932, 943, 1097, 1099], "whatev": 234, "when": [1, 53, 82, 84, 85, 92, 95, 98, 99, 100, 107, 112, 117, 120, 121, 133, 134, 137, 139, 148, 151, 215, 217, 219, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 245, 246, 247, 266, 267, 268, 270, 271, 272, 274, 305, 317, 360, 369, 373, 397, 404, 405, 408, 409, 422, 467, 474, 475, 489, 518, 525, 526, 541, 572, 579, 580, 583, 584, 597, 613, 630, 633, 642, 680, 685, 703, 753, 755, 756, 757, 759, 761, 784, 817, 828, 866, 874, 877, 878, 879, 880, 881, 882, 883, 899, 909, 939, 950, 976, 1010, 1027, 1028, 1031, 1035, 1036, 1057, 1092, 1097, 1099], "whenev": [223, 872], "where": [1, 3, 14, 18, 46, 51, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 139, 142, 147, 148, 151, 152, 213, 215, 220, 222, 226, 227, 228, 231, 232, 234, 372, 399, 401, 405, 407, 417, 419, 424, 426, 427, 429, 469, 471, 475, 477, 485, 486, 491, 493, 494, 496, 520, 522, 526, 528, 537, 538, 543, 545, 546, 548, 549, 574, 576, 580, 582, 592, 594, 599, 601, 602, 604, 633, 638, 639, 644, 646, 648, 651, 655, 683, 684, 685, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 699, 700, 708, 731, 755, 761, 851, 863, 871, 873, 874, 875, 877, 881, 882, 907, 909, 926, 938, 943, 948, 951, 975, 976, 986, 1023, 1026, 1055, 1097, 1099], "where_values_miss": [288, 335, 353], "wherea": [216, 851], "wherev": 875, "whether": [32, 66, 67, 70, 79, 89, 90, 110, 111, 133, 225, 234, 245, 247, 274, 278, 284, 293, 294, 325, 331, 340, 341, 343, 349, 358, 359, 361, 367, 377, 381, 384, 393, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 439, 445, 452, 455, 464, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 503, 506, 515, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 556, 559, 568, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 615, 618, 627, 635, 636, 637, 639, 640, 641, 660, 681, 685, 696, 702, 713, 736, 753, 755, 756, 757, 862, 874, 875, 906, 907, 909, 918, 943, 946], "which": [1, 3, 13, 15, 17, 44, 47, 65, 98, 99, 100, 107, 112, 116, 133, 137, 141, 145, 146, 148, 217, 219, 220, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 245, 246, 247, 248, 260, 262, 263, 264, 265, 266, 270, 360, 379, 397, 398, 409, 417, 419, 422, 432, 448, 467, 468, 485, 486, 489, 498, 501, 518, 519, 537, 538, 541, 551, 554, 572, 573, 584, 592, 594, 597, 608, 613, 630, 631, 638, 639, 642, 649, 662, 682, 683, 684, 685, 690, 704, 715, 738, 753, 756, 757, 761, 867, 871, 872, 877, 878, 879, 880, 881, 897, 898, 899, 900, 904, 907, 923, 926, 927, 929, 935, 936, 940, 943, 945, 976, 979, 1010, 1011, 1022, 1023, 1028, 1030, 1031, 1041, 1058, 1080, 1092, 1094, 1097, 1099], "while": [0, 1, 215, 221, 222, 223, 224, 229, 295, 438, 613, 685, 757, 796, 840, 852, 863, 879, 883, 886, 950, 951, 979, 1057, 1093, 1094, 1099], "white": 221, "whitespac": [222, 223, 226, 228, 232], "whitnei": 685, "who": [227, 881], "whole": [232, 870, 878, 903, 923, 927, 929, 936, 940], "whose": [224, 230, 231, 670, 719, 743, 754, 755, 875, 902, 917, 925, 937], "why": 114, "wide": [1, 92, 133, 397, 467, 518, 572, 630], "width": [222, 226, 229], "wiener": 136, "wiki": [106, 222, 223, 229, 232, 1031], "wikipedia": [106, 222, 223, 232, 1031, 1097], "wilcoxon": 685, "wild": [431, 497, 550, 607], "wildcard": [431, 432, 497, 498, 550, 551, 607, 608, 649], "wildcard_char": [432, 498, 551, 608, 649], "wilei": 682, "william": 117, "window": 840, "window_s": 840, "wish": [231, 1097], "with_mean": [871, 875], "with_replac": 939, "with_std": [871, 875], "within": [1, 84, 106, 133, 142, 148, 215, 218, 222, 223, 227, 229, 231, 232, 360, 379, 501, 554, 613, 662, 690, 715, 738, 757, 758, 818, 852, 853, 863, 879, 880, 899, 928, 951, 993, 1034, 1037, 1080, 1097, 1099], "within_captur": [433, 499, 552, 609], "without": [82, 85, 92, 94, 112, 129, 146, 218, 227, 229, 231, 232, 292, 339, 357, 376, 613, 682, 851, 863, 881, 882, 904, 921, 939, 945, 982, 991, 1023, 1056, 1057, 1092], "wllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 438, "woman": 881, "women": 881, "won": [1, 116, 143, 145, 146, 147, 223, 296, 867], "word": [0, 221, 222, 224, 227, 232, 320, 421, 488, 540, 596, 641], "work": [1, 53, 148, 222, 229, 231, 234, 360, 379, 501, 554, 703, 755, 867, 881, 915, 924, 1091, 1093, 1094, 1096, 1097], "workflow": 1091, "worri": [227, 883, 950], "worst": 1004, "would": [3, 84, 116, 118, 122, 145, 146, 219, 222, 225, 227, 229, 231, 232, 234, 360, 397, 419, 467, 486, 518, 538, 572, 594, 630, 639, 662, 697, 700, 715, 738, 761, 879, 880, 973, 1023, 1024, 1030, 1092], "wprintgc": [438, 446, 447], "wr": [222, 761], "wrap": [20, 229, 232, 1081], "wrapper": [53, 104, 123, 124, 1034], "writabl": 274, "write": [93, 174, 187, 216, 219, 220, 221, 223, 225, 226, 227, 229, 232, 234, 247, 264, 265, 274, 321, 375, 428, 495, 547, 603, 647, 672, 703, 721, 746, 784, 817, 828, 864, 934, 943, 944, 945, 965, 1008, 1036, 1091], "writeabl": 1092, "writer": [97, 175, 188, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 262, 265, 268, 272, 274, 323, 378, 437, 500, 553, 612, 650, 678, 726, 752, 865, 949, 1029], "written": [219, 222, 223, 227, 229, 360, 904, 944, 945, 1030, 1092, 1097], "wu": [133, 146], "wu_dm": 1, "wu_pc": 1, "wunsch": [0, 98, 99, 100], "www": [53, 98, 101, 104, 122, 148, 215, 217, 218, 219, 221, 222, 223, 224, 229, 233, 438, 446, 447, 754], "x": [50, 53, 118, 216, 223, 230, 432, 450, 498, 501, 551, 608, 649, 682, 683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 697, 698, 699, 700, 702, 755, 758, 761, 852, 853, 863, 866, 867, 868, 874, 877, 880, 881, 899, 907, 911, 920, 925, 930, 935, 937, 941, 943, 945, 946, 950, 976, 986, 1007, 1010, 1022, 1026, 1031, 1056, 1099], "x00": 275, "x01": 275, "x03": 275, "x0c": 275, "x108": 275, "x1c": 275, "x56734": 221, "x86": 275, "x89": 275, "x8b": 275, "x9ah3m": 275, "x9c": 275, "x_": [682, 683, 700, 877, 881], "x_1": [683, 684, 688, 689, 697, 698, 699], "x_d": [683, 684, 688, 689, 697, 698, 699], "x_i": [684, 688, 693, 697, 698, 699, 700], "x_j": 693, "xa6": 275, "xaa": 501, "xb7": 275, "xb9": 275, "xc1": 275, "xc4": 275, "xle": 501, "xx": 221, "xxxxxx": 450, "xyz": 219, "y": [53, 107, 118, 223, 230, 379, 501, 554, 693, 697, 698, 702, 755, 758, 761, 852, 863, 867, 868, 873, 874, 879, 925, 935, 943, 945, 946, 976, 1022], "y_": [684, 881], "y_1": [684, 697, 698], "y_2": 684, "y_d": [697, 698], "y_i": 693, "y_j": 693, "yang": 107, "ye": [215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233], "yeast": [435, 610], "yeild": 757, "yellow": 232, "yet": [227, 233, 234], "yield": [75, 80, 91, 222, 320, 389, 394, 403, 404, 405, 419, 420, 436, 449, 460, 465, 473, 474, 475, 486, 487, 511, 516, 524, 525, 526, 538, 539, 564, 569, 578, 579, 580, 594, 595, 611, 623, 628, 633, 639, 640, 757, 919, 920, 921, 928, 932, 986, 998, 1001, 1004, 1005, 1006, 1015, 1021, 1023, 1024, 1058, 1092, 1099], "york": 109, "you": [1, 53, 98, 99, 100, 116, 143, 145, 146, 147, 148, 217, 219, 222, 223, 225, 229, 231, 232, 234, 304, 305, 317, 319, 320, 379, 501, 554, 613, 651, 742, 753, 757, 874, 877, 879, 880, 881, 938, 973, 975, 976, 1092, 1094, 1097, 1099], "your": [53, 92, 116, 143, 145, 146, 147, 223, 231, 234, 305, 757, 877, 880, 1092, 1097, 1099], "yy": 223, "z": [53, 92, 115, 231, 501, 758, 863, 919, 976, 1022], "z3": [913, 919], "zero": [3, 13, 16, 17, 44, 45, 48, 107, 117, 151, 215, 295, 316, 360, 374, 406, 476, 527, 581, 634, 682, 685, 687, 690, 694, 695, 696, 697, 698, 699, 702, 704, 753, 754, 755, 756, 757, 758, 761, 866, 872, 875, 880, 882, 883, 909, 936, 939, 943, 946, 1031, 1099], "zero_index": [53, 104], "zhao": [53, 104], "zip": 903, "zp_02903423": 217, "zscore": 111, "zxx": 223, "\u00e9": 700, "\u00f8": 133}, "titles": ["Sequence Alignments (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.alignment</span></code>)", "Community Diversity (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity</span></code>)", "Biological Embeddings (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.embedding</span></code>)", "skbio.alignment.AlignPath", "skbio.alignment.AlignPath.__eq__", "skbio.alignment.AlignPath.__ge__", "skbio.alignment.AlignPath.__getstate__", "skbio.alignment.AlignPath.__gt__", "skbio.alignment.AlignPath.__hash__", "skbio.alignment.AlignPath.__le__", "skbio.alignment.AlignPath.__lt__", "skbio.alignment.AlignPath.__ne__", "skbio.alignment.AlignPath.__str__", "skbio.alignment.AlignPath.from_bits", "skbio.alignment.AlignPath.from_coordinates", "skbio.alignment.AlignPath.from_indices", "skbio.alignment.AlignPath.from_tabular", "skbio.alignment.AlignPath.to_bits", "skbio.alignment.AlignPath.to_coordinates", "skbio.alignment.AlignPath.to_indices", "skbio.alignment.AlignmentStructure", "skbio.alignment.AlignmentStructure.__eq__", "skbio.alignment.AlignmentStructure.__ge__", "skbio.alignment.AlignmentStructure.__getitem__", "skbio.alignment.AlignmentStructure.__getstate__", "skbio.alignment.AlignmentStructure.__gt__", "skbio.alignment.AlignmentStructure.__hash__", "skbio.alignment.AlignmentStructure.__le__", "skbio.alignment.AlignmentStructure.__lt__", "skbio.alignment.AlignmentStructure.__ne__", "skbio.alignment.AlignmentStructure.__setstate__", "skbio.alignment.AlignmentStructure.__str__", "skbio.alignment.AlignmentStructure.is_zero_based", "skbio.alignment.AlignmentStructure.set_zero_based", "skbio.alignment.PairAlignPath", "skbio.alignment.PairAlignPath.__eq__", "skbio.alignment.PairAlignPath.__ge__", "skbio.alignment.PairAlignPath.__getstate__", "skbio.alignment.PairAlignPath.__gt__", "skbio.alignment.PairAlignPath.__hash__", "skbio.alignment.PairAlignPath.__le__", "skbio.alignment.PairAlignPath.__lt__", "skbio.alignment.PairAlignPath.__ne__", "skbio.alignment.PairAlignPath.__str__", "skbio.alignment.PairAlignPath.from_bits", "skbio.alignment.PairAlignPath.from_cigar", "skbio.alignment.PairAlignPath.from_coordinates", "skbio.alignment.PairAlignPath.from_indices", "skbio.alignment.PairAlignPath.from_tabular", "skbio.alignment.PairAlignPath.to_bits", "skbio.alignment.PairAlignPath.to_cigar", "skbio.alignment.PairAlignPath.to_coordinates", "skbio.alignment.PairAlignPath.to_indices", "skbio.alignment.StripedSmithWaterman", "skbio.alignment.StripedSmithWaterman.__call__", "skbio.alignment.StripedSmithWaterman.__eq__", "skbio.alignment.StripedSmithWaterman.__ge__", "skbio.alignment.StripedSmithWaterman.__getstate__", "skbio.alignment.StripedSmithWaterman.__gt__", "skbio.alignment.StripedSmithWaterman.__hash__", "skbio.alignment.StripedSmithWaterman.__le__", "skbio.alignment.StripedSmithWaterman.__lt__", "skbio.alignment.StripedSmithWaterman.__ne__", "skbio.alignment.StripedSmithWaterman.__setstate__", "skbio.alignment.StripedSmithWaterman.__str__", "skbio.alignment.TabularMSA", "skbio.alignment.TabularMSA.__bool__", "skbio.alignment.TabularMSA.__contains__", "skbio.alignment.TabularMSA.__copy__", "skbio.alignment.TabularMSA.__deepcopy__", "skbio.alignment.TabularMSA.__eq__", "skbio.alignment.TabularMSA.__ge__", "skbio.alignment.TabularMSA.__getitem__", "skbio.alignment.TabularMSA.__getstate__", "skbio.alignment.TabularMSA.__gt__", "skbio.alignment.TabularMSA.__iter__", "skbio.alignment.TabularMSA.__le__", "skbio.alignment.TabularMSA.__len__", "skbio.alignment.TabularMSA.__lt__", "skbio.alignment.TabularMSA.__ne__", "skbio.alignment.TabularMSA.__reversed__", "skbio.alignment.TabularMSA.__str__", "skbio.alignment.TabularMSA.append", "skbio.alignment.TabularMSA.consensus", "skbio.alignment.TabularMSA.conservation", "skbio.alignment.TabularMSA.extend", "skbio.alignment.TabularMSA.from_dict", "skbio.alignment.TabularMSA.from_path_seqs", "skbio.alignment.TabularMSA.gap_frequencies", "skbio.alignment.TabularMSA.has_metadata", "skbio.alignment.TabularMSA.has_positional_metadata", "skbio.alignment.TabularMSA.iter_positions", "skbio.alignment.TabularMSA.join", "skbio.alignment.TabularMSA.read", "skbio.alignment.TabularMSA.reassign_index", "skbio.alignment.TabularMSA.sort", "skbio.alignment.TabularMSA.to_dict", "skbio.alignment.TabularMSA.write", "skbio.alignment.global_pairwise_align", "skbio.alignment.global_pairwise_align_nucleotide", "skbio.alignment.global_pairwise_align_protein", "skbio.alignment.local_pairwise_align", "skbio.alignment.local_pairwise_align_nucleotide", "skbio.alignment.local_pairwise_align_protein", "skbio.alignment.local_pairwise_align_ssw", "skbio.alignment.make_identity_substitution_matrix", "Alpha diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.alpha</span></code>)", "skbio.diversity.alpha.ace", "skbio.diversity.alpha.berger_parker_d", "skbio.diversity.alpha.brillouin_d", "skbio.diversity.alpha.chao1", "skbio.diversity.alpha.chao1_ci", "skbio.diversity.alpha.dominance", "skbio.diversity.alpha.doubles", "skbio.diversity.alpha.enspie", "skbio.diversity.alpha.esty_ci", "skbio.diversity.alpha.faith_pd", "skbio.diversity.alpha.fisher_alpha", "skbio.diversity.alpha.gini_index", "skbio.diversity.alpha.goods_coverage", "skbio.diversity.alpha.heip_e", "skbio.diversity.alpha.inv_simpson", "skbio.diversity.alpha.kempton_taylor_q", "skbio.diversity.alpha.lladser_ci", "skbio.diversity.alpha.lladser_pe", "skbio.diversity.alpha.margalef", "skbio.diversity.alpha.mcintosh_d", "skbio.diversity.alpha.mcintosh_e", "skbio.diversity.alpha.menhinick", "skbio.diversity.alpha.michaelis_menten_fit", "skbio.diversity.alpha.observed_features", "skbio.diversity.alpha.observed_otus", "skbio.diversity.alpha.osd", "skbio.diversity.alpha.phydiv", "skbio.diversity.alpha.pielou_e", "skbio.diversity.alpha.robbins", "skbio.diversity.alpha.shannon", "skbio.diversity.alpha.simpson", "skbio.diversity.alpha.simpson_d", "skbio.diversity.alpha.simpson_e", "skbio.diversity.alpha.singles", "skbio.diversity.alpha.sobs", "skbio.diversity.alpha.strong", "skbio.diversity.alpha_diversity", "Beta diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.beta</span></code>)", "skbio.diversity.beta.unweighted_unifrac", "skbio.diversity.beta.weighted_unifrac", "skbio.diversity.beta_diversity", "skbio.diversity.block_beta_diversity", "skbio.diversity.get_alpha_diversity_metrics", "skbio.diversity.get_beta_diversity_metrics", "skbio.diversity.partial_beta_diversity", "skbio.embedding.Embedding", "skbio.embedding.Embedding.__eq__", "skbio.embedding.Embedding.__ge__", "skbio.embedding.Embedding.__getstate__", "skbio.embedding.Embedding.__gt__", "skbio.embedding.Embedding.__hash__", "skbio.embedding.Embedding.__le__", "skbio.embedding.Embedding.__lt__", "skbio.embedding.Embedding.__ne__", "skbio.embedding.Embedding.__str__", "skbio.embedding.Embedding.bytes", "skbio.embedding.ProteinEmbedding", "skbio.embedding.ProteinEmbedding.__eq__", "skbio.embedding.ProteinEmbedding.__ge__", "skbio.embedding.ProteinEmbedding.__getstate__", "skbio.embedding.ProteinEmbedding.__gt__", "skbio.embedding.ProteinEmbedding.__hash__", "skbio.embedding.ProteinEmbedding.__le__", "skbio.embedding.ProteinEmbedding.__lt__", "skbio.embedding.ProteinEmbedding.__ne__", "skbio.embedding.ProteinEmbedding.__str__", "skbio.embedding.ProteinEmbedding.bytes", "skbio.embedding.ProteinEmbedding.read", "skbio.embedding.ProteinEmbedding.write", "skbio.embedding.ProteinVector", "skbio.embedding.ProteinVector.__eq__", "skbio.embedding.ProteinVector.__ge__", "skbio.embedding.ProteinVector.__getstate__", "skbio.embedding.ProteinVector.__gt__", "skbio.embedding.ProteinVector.__hash__", "skbio.embedding.ProteinVector.__le__", "skbio.embedding.ProteinVector.__lt__", "skbio.embedding.ProteinVector.__ne__", "skbio.embedding.ProteinVector.__str__", "skbio.embedding.ProteinVector.bytes", "skbio.embedding.ProteinVector.read", "skbio.embedding.ProteinVector.write", "skbio.embedding.SequenceEmbedding", "skbio.embedding.SequenceEmbedding.__eq__", "skbio.embedding.SequenceEmbedding.__ge__", "skbio.embedding.SequenceEmbedding.__getstate__", "skbio.embedding.SequenceEmbedding.__gt__", "skbio.embedding.SequenceEmbedding.__hash__", "skbio.embedding.SequenceEmbedding.__le__", "skbio.embedding.SequenceEmbedding.__lt__", "skbio.embedding.SequenceEmbedding.__ne__", "skbio.embedding.SequenceEmbedding.__str__", "skbio.embedding.SequenceEmbedding.bytes", "skbio.embedding.SequenceVector", "skbio.embedding.SequenceVector.__eq__", "skbio.embedding.SequenceVector.__ge__", "skbio.embedding.SequenceVector.__getstate__", "skbio.embedding.SequenceVector.__gt__", "skbio.embedding.SequenceVector.__hash__", "skbio.embedding.SequenceVector.__le__", "skbio.embedding.SequenceVector.__lt__", "skbio.embedding.SequenceVector.__ne__", "skbio.embedding.SequenceVector.__str__", "skbio.embedding.SequenceVector.bytes", "skbio.embedding.embed_vec_to_dataframe", "skbio.embedding.embed_vec_to_distances", "skbio.embedding.embed_vec_to_numpy", "skbio.embedding.embed_vec_to_ordination", "Simple binary dissimilarity matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.binary_dm</span></code>)", "BIOM-Format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.biom</span></code>)", "BLAST+6 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast6</span></code>)", "BLAST+7 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast7</span></code>)", "Clustal format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.clustal</span></code>)", "Embedding format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embed</span></code>).", "EMBL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embl</span></code>)", "FASTA/QUAL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fasta</span></code>)", "FASTQ format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fastq</span></code>)", "GenBank format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.genbank</span></code>)", "GFF3 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.gff3</span></code>)", "Labeled square matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.lsmat</span></code>)", "Newick format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.newick</span></code>)", "Ordination results format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.ordination</span></code>)", "PHYLIP multiple sequence alignment format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.phylip</span></code>)", "QSeq format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.qseq</span></code>)", "Format Support", "Stockholm format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.stockholm</span></code>)", "Taxdump format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.taxdump</span></code>)", "I/O Registry (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.registry</span></code>)", "skbio.io.registry.Format", "skbio.io.registry.Format.__eq__", "skbio.io.registry.Format.__ge__", "skbio.io.registry.Format.__getstate__", "skbio.io.registry.Format.__gt__", "skbio.io.registry.Format.__hash__", "skbio.io.registry.Format.__le__", "skbio.io.registry.Format.__lt__", "skbio.io.registry.Format.__ne__", "skbio.io.registry.Format.__str__", "skbio.io.registry.Format.reader", "skbio.io.registry.Format.sniffer", "skbio.io.registry.Format.writer", "skbio.io.registry.IORegistry", "skbio.io.registry.IORegistry.__eq__", "skbio.io.registry.IORegistry.__ge__", "skbio.io.registry.IORegistry.__getstate__", "skbio.io.registry.IORegistry.__gt__", "skbio.io.registry.IORegistry.__hash__", "skbio.io.registry.IORegistry.__le__", "skbio.io.registry.IORegistry.__lt__", "skbio.io.registry.IORegistry.__ne__", "skbio.io.registry.IORegistry.__str__", "skbio.io.registry.IORegistry.add_format", "skbio.io.registry.IORegistry.create_format", "skbio.io.registry.IORegistry.get_reader", "skbio.io.registry.IORegistry.get_sniffer", "skbio.io.registry.IORegistry.get_writer", "skbio.io.registry.IORegistry.list_read_formats", "skbio.io.registry.IORegistry.list_write_formats", "skbio.io.registry.IORegistry.monkey_patch", "skbio.io.registry.IORegistry.read", "skbio.io.registry.IORegistry.sniff", "skbio.io.registry.IORegistry.write", "skbio.io.registry.create_format", "skbio.io.registry.read", "skbio.io.registry.sniff", "skbio.io.registry.write", "I/O utilities (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.util</span></code>)", "skbio.io.util.open", "skbio.io.util.open_file", "skbio.io.util.open_files", "skbio.metadata.CategoricalMetadataColumn", "skbio.metadata.CategoricalMetadataColumn.__eq__", "skbio.metadata.CategoricalMetadataColumn.__ge__", "skbio.metadata.CategoricalMetadataColumn.__getstate__", "skbio.metadata.CategoricalMetadataColumn.__gt__", "skbio.metadata.CategoricalMetadataColumn.__le__", "skbio.metadata.CategoricalMetadataColumn.__lt__", "skbio.metadata.CategoricalMetadataColumn.__ne__", "skbio.metadata.CategoricalMetadataColumn.__str__", "skbio.metadata.CategoricalMetadataColumn.drop_missing_values", "skbio.metadata.CategoricalMetadataColumn.filter_ids", "skbio.metadata.CategoricalMetadataColumn.get_ids", "skbio.metadata.CategoricalMetadataColumn.get_missing", "skbio.metadata.CategoricalMetadataColumn.get_value", "skbio.metadata.CategoricalMetadataColumn.has_missing_values", "skbio.metadata.CategoricalMetadataColumn.save", "skbio.metadata.CategoricalMetadataColumn.to_dataframe", "skbio.metadata.CategoricalMetadataColumn.to_series", "skbio.metadata.Interval", "skbio.metadata.Interval.__eq__", "skbio.metadata.Interval.__ge__", "skbio.metadata.Interval.__getstate__", "skbio.metadata.Interval.__gt__", "skbio.metadata.Interval.__le__", "skbio.metadata.Interval.__lt__", "skbio.metadata.Interval.__ne__", "skbio.metadata.Interval.__str__", "skbio.metadata.Interval.drop", "skbio.metadata.IntervalMetadata", "skbio.metadata.IntervalMetadata.__copy__", "skbio.metadata.IntervalMetadata.__deepcopy__", "skbio.metadata.IntervalMetadata.__eq__", "skbio.metadata.IntervalMetadata.__ge__", "skbio.metadata.IntervalMetadata.__getstate__", "skbio.metadata.IntervalMetadata.__gt__", "skbio.metadata.IntervalMetadata.__le__", "skbio.metadata.IntervalMetadata.__lt__", "skbio.metadata.IntervalMetadata.__ne__", "skbio.metadata.IntervalMetadata.__str__", "skbio.metadata.IntervalMetadata.add", "skbio.metadata.IntervalMetadata.concat", "skbio.metadata.IntervalMetadata.drop", "skbio.metadata.IntervalMetadata.merge", "skbio.metadata.IntervalMetadata.query", "skbio.metadata.IntervalMetadata.read", "skbio.metadata.IntervalMetadata.sort", "skbio.metadata.IntervalMetadata.write", "skbio.metadata.MetadataColumn", "skbio.metadata.MetadataColumn.__eq__", "skbio.metadata.MetadataColumn.__ge__", "skbio.metadata.MetadataColumn.__getstate__", "skbio.metadata.MetadataColumn.__gt__", "skbio.metadata.MetadataColumn.__le__", "skbio.metadata.MetadataColumn.__lt__", "skbio.metadata.MetadataColumn.__ne__", "skbio.metadata.MetadataColumn.__str__", "skbio.metadata.MetadataColumn.drop_missing_values", "skbio.metadata.MetadataColumn.filter_ids", "skbio.metadata.MetadataColumn.get_ids", "skbio.metadata.MetadataColumn.get_missing", "skbio.metadata.MetadataColumn.get_value", "skbio.metadata.MetadataColumn.has_missing_values", "skbio.metadata.MetadataColumn.save", "skbio.metadata.MetadataColumn.to_dataframe", "skbio.metadata.MetadataColumn.to_series", "skbio.metadata.NumericMetadataColumn", "skbio.metadata.NumericMetadataColumn.__eq__", "skbio.metadata.NumericMetadataColumn.__ge__", "skbio.metadata.NumericMetadataColumn.__getstate__", "skbio.metadata.NumericMetadataColumn.__gt__", "skbio.metadata.NumericMetadataColumn.__le__", "skbio.metadata.NumericMetadataColumn.__lt__", "skbio.metadata.NumericMetadataColumn.__ne__", "skbio.metadata.NumericMetadataColumn.__str__", "skbio.metadata.NumericMetadataColumn.drop_missing_values", "skbio.metadata.NumericMetadataColumn.filter_ids", "skbio.metadata.NumericMetadataColumn.get_ids", "skbio.metadata.NumericMetadataColumn.get_missing", "skbio.metadata.NumericMetadataColumn.get_value", "skbio.metadata.NumericMetadataColumn.has_missing_values", "skbio.metadata.NumericMetadataColumn.save", "skbio.metadata.NumericMetadataColumn.to_dataframe", "skbio.metadata.NumericMetadataColumn.to_series", "skbio.metadata.SampleMetadata", "skbio.metadata.SampleMetadata.__eq__", "skbio.metadata.SampleMetadata.__ge__", "skbio.metadata.SampleMetadata.__getstate__", "skbio.metadata.SampleMetadata.__gt__", "skbio.metadata.SampleMetadata.__le__", "skbio.metadata.SampleMetadata.__lt__", "skbio.metadata.SampleMetadata.__ne__", "skbio.metadata.SampleMetadata.__str__", "skbio.metadata.SampleMetadata.filter_columns", "skbio.metadata.SampleMetadata.filter_ids", "skbio.metadata.SampleMetadata.get_column", "skbio.metadata.SampleMetadata.get_ids", "skbio.metadata.SampleMetadata.load", "skbio.metadata.SampleMetadata.merge", "skbio.metadata.SampleMetadata.read", "skbio.metadata.SampleMetadata.save", "skbio.metadata.SampleMetadata.to_dataframe", "skbio.metadata.SampleMetadata.write", "skbio.sequence.DNA", "skbio.sequence.DNA.__bool__", "skbio.sequence.DNA.__contains__", "skbio.sequence.DNA.__copy__", "skbio.sequence.DNA.__deepcopy__", "skbio.sequence.DNA.__eq__", "skbio.sequence.DNA.__ge__", "skbio.sequence.DNA.__getitem__", "skbio.sequence.DNA.__getstate__", "skbio.sequence.DNA.__gt__", "skbio.sequence.DNA.__iter__", "skbio.sequence.DNA.__le__", "skbio.sequence.DNA.__len__", "skbio.sequence.DNA.__lt__", "skbio.sequence.DNA.__ne__", "skbio.sequence.DNA.__reversed__", "skbio.sequence.DNA.__str__", "skbio.sequence.DNA.complement", "skbio.sequence.DNA.concat", "skbio.sequence.DNA.count", "skbio.sequence.DNA.definites", "skbio.sequence.DNA.degap", "skbio.sequence.DNA.degenerates", "skbio.sequence.DNA.distance", "skbio.sequence.DNA.expand_degenerates", "skbio.sequence.DNA.find_motifs", "skbio.sequence.DNA.find_with_regex", "skbio.sequence.DNA.frequencies", "skbio.sequence.DNA.gaps", "skbio.sequence.DNA.gc_content", "skbio.sequence.DNA.gc_frequency", "skbio.sequence.DNA.has_definites", "skbio.sequence.DNA.has_degenerates", "skbio.sequence.DNA.has_gaps", "skbio.sequence.DNA.has_interval_metadata", "skbio.sequence.DNA.has_metadata", "skbio.sequence.DNA.has_nondegenerates", "skbio.sequence.DNA.has_positional_metadata", "skbio.sequence.DNA.index", "skbio.sequence.DNA.is_reverse_complement", "skbio.sequence.DNA.iter_contiguous", "skbio.sequence.DNA.iter_kmers", "skbio.sequence.DNA.kmer_frequencies", "skbio.sequence.DNA.lowercase", "skbio.sequence.DNA.match_frequency", "skbio.sequence.DNA.matches", "skbio.sequence.DNA.mismatch_frequency", "skbio.sequence.DNA.mismatches", "skbio.sequence.DNA.nondegenerates", "skbio.sequence.DNA.read", "skbio.sequence.DNA.replace", "skbio.sequence.DNA.reverse_complement", "skbio.sequence.DNA.to_definites", "skbio.sequence.DNA.to_indices", "skbio.sequence.DNA.to_regex", "skbio.sequence.DNA.transcribe", "skbio.sequence.DNA.translate", "skbio.sequence.DNA.translate_six_frames", "skbio.sequence.DNA.write", "skbio.sequence.GeneticCode", "skbio.sequence.GeneticCode.__eq__", "skbio.sequence.GeneticCode.__ge__", "skbio.sequence.GeneticCode.__getstate__", "skbio.sequence.GeneticCode.__gt__", "skbio.sequence.GeneticCode.__le__", "skbio.sequence.GeneticCode.__lt__", "skbio.sequence.GeneticCode.__ne__", "skbio.sequence.GeneticCode.__str__", "skbio.sequence.GeneticCode.from_ncbi", "skbio.sequence.GeneticCode.translate", "skbio.sequence.GeneticCode.translate_six_frames", "skbio.sequence.GrammaredSequence", "skbio.sequence.GrammaredSequence.__bool__", "skbio.sequence.GrammaredSequence.__contains__", "skbio.sequence.GrammaredSequence.__copy__", "skbio.sequence.GrammaredSequence.__deepcopy__", "skbio.sequence.GrammaredSequence.__eq__", "skbio.sequence.GrammaredSequence.__ge__", "skbio.sequence.GrammaredSequence.__getitem__", "skbio.sequence.GrammaredSequence.__getstate__", "skbio.sequence.GrammaredSequence.__gt__", "skbio.sequence.GrammaredSequence.__iter__", "skbio.sequence.GrammaredSequence.__le__", "skbio.sequence.GrammaredSequence.__len__", "skbio.sequence.GrammaredSequence.__lt__", "skbio.sequence.GrammaredSequence.__ne__", "skbio.sequence.GrammaredSequence.__reversed__", "skbio.sequence.GrammaredSequence.__str__", "skbio.sequence.GrammaredSequence.concat", "skbio.sequence.GrammaredSequence.count", "skbio.sequence.GrammaredSequence.definites", "skbio.sequence.GrammaredSequence.degap", "skbio.sequence.GrammaredSequence.degenerates", "skbio.sequence.GrammaredSequence.distance", "skbio.sequence.GrammaredSequence.expand_degenerates", "skbio.sequence.GrammaredSequence.find_motifs", "skbio.sequence.GrammaredSequence.find_with_regex", "skbio.sequence.GrammaredSequence.frequencies", "skbio.sequence.GrammaredSequence.gaps", "skbio.sequence.GrammaredSequence.has_definites", "skbio.sequence.GrammaredSequence.has_degenerates", "skbio.sequence.GrammaredSequence.has_gaps", "skbio.sequence.GrammaredSequence.has_interval_metadata", "skbio.sequence.GrammaredSequence.has_metadata", "skbio.sequence.GrammaredSequence.has_nondegenerates", "skbio.sequence.GrammaredSequence.has_positional_metadata", "skbio.sequence.GrammaredSequence.index", "skbio.sequence.GrammaredSequence.iter_contiguous", "skbio.sequence.GrammaredSequence.iter_kmers", "skbio.sequence.GrammaredSequence.kmer_frequencies", "skbio.sequence.GrammaredSequence.lowercase", "skbio.sequence.GrammaredSequence.match_frequency", "skbio.sequence.GrammaredSequence.matches", "skbio.sequence.GrammaredSequence.mismatch_frequency", "skbio.sequence.GrammaredSequence.mismatches", "skbio.sequence.GrammaredSequence.nondegenerates", "skbio.sequence.GrammaredSequence.read", "skbio.sequence.GrammaredSequence.replace", "skbio.sequence.GrammaredSequence.to_definites", "skbio.sequence.GrammaredSequence.to_indices", "skbio.sequence.GrammaredSequence.to_regex", "skbio.sequence.GrammaredSequence.write", "skbio.sequence.Protein", "skbio.sequence.Protein.__bool__", "skbio.sequence.Protein.__contains__", "skbio.sequence.Protein.__copy__", "skbio.sequence.Protein.__deepcopy__", "skbio.sequence.Protein.__eq__", "skbio.sequence.Protein.__ge__", "skbio.sequence.Protein.__getitem__", "skbio.sequence.Protein.__getstate__", "skbio.sequence.Protein.__gt__", "skbio.sequence.Protein.__iter__", "skbio.sequence.Protein.__le__", "skbio.sequence.Protein.__len__", "skbio.sequence.Protein.__lt__", "skbio.sequence.Protein.__ne__", "skbio.sequence.Protein.__reversed__", "skbio.sequence.Protein.__str__", "skbio.sequence.Protein.concat", "skbio.sequence.Protein.count", "skbio.sequence.Protein.definites", "skbio.sequence.Protein.degap", "skbio.sequence.Protein.degenerates", "skbio.sequence.Protein.distance", "skbio.sequence.Protein.expand_degenerates", "skbio.sequence.Protein.find_motifs", "skbio.sequence.Protein.find_with_regex", "skbio.sequence.Protein.frequencies", "skbio.sequence.Protein.gaps", "skbio.sequence.Protein.has_definites", "skbio.sequence.Protein.has_degenerates", "skbio.sequence.Protein.has_gaps", "skbio.sequence.Protein.has_interval_metadata", "skbio.sequence.Protein.has_metadata", "skbio.sequence.Protein.has_nondegenerates", "skbio.sequence.Protein.has_positional_metadata", "skbio.sequence.Protein.has_stops", "skbio.sequence.Protein.index", "skbio.sequence.Protein.iter_contiguous", "skbio.sequence.Protein.iter_kmers", "skbio.sequence.Protein.kmer_frequencies", "skbio.sequence.Protein.lowercase", "skbio.sequence.Protein.match_frequency", "skbio.sequence.Protein.matches", "skbio.sequence.Protein.mismatch_frequency", "skbio.sequence.Protein.mismatches", "skbio.sequence.Protein.nondegenerates", "skbio.sequence.Protein.read", "skbio.sequence.Protein.replace", "skbio.sequence.Protein.stops", "skbio.sequence.Protein.to_definites", "skbio.sequence.Protein.to_indices", "skbio.sequence.Protein.to_regex", "skbio.sequence.Protein.write", "skbio.sequence.RNA", "skbio.sequence.RNA.__bool__", "skbio.sequence.RNA.__contains__", "skbio.sequence.RNA.__copy__", "skbio.sequence.RNA.__deepcopy__", "skbio.sequence.RNA.__eq__", "skbio.sequence.RNA.__ge__", "skbio.sequence.RNA.__getitem__", "skbio.sequence.RNA.__getstate__", "skbio.sequence.RNA.__gt__", "skbio.sequence.RNA.__iter__", "skbio.sequence.RNA.__le__", "skbio.sequence.RNA.__len__", "skbio.sequence.RNA.__lt__", "skbio.sequence.RNA.__ne__", "skbio.sequence.RNA.__reversed__", "skbio.sequence.RNA.__str__", "skbio.sequence.RNA.complement", "skbio.sequence.RNA.concat", "skbio.sequence.RNA.count", "skbio.sequence.RNA.definites", "skbio.sequence.RNA.degap", "skbio.sequence.RNA.degenerates", "skbio.sequence.RNA.distance", "skbio.sequence.RNA.expand_degenerates", "skbio.sequence.RNA.find_motifs", "skbio.sequence.RNA.find_with_regex", "skbio.sequence.RNA.frequencies", "skbio.sequence.RNA.gaps", "skbio.sequence.RNA.gc_content", "skbio.sequence.RNA.gc_frequency", "skbio.sequence.RNA.has_definites", "skbio.sequence.RNA.has_degenerates", "skbio.sequence.RNA.has_gaps", "skbio.sequence.RNA.has_interval_metadata", "skbio.sequence.RNA.has_metadata", "skbio.sequence.RNA.has_nondegenerates", "skbio.sequence.RNA.has_positional_metadata", "skbio.sequence.RNA.index", "skbio.sequence.RNA.is_reverse_complement", "skbio.sequence.RNA.iter_contiguous", "skbio.sequence.RNA.iter_kmers", "skbio.sequence.RNA.kmer_frequencies", "skbio.sequence.RNA.lowercase", "skbio.sequence.RNA.match_frequency", "skbio.sequence.RNA.matches", "skbio.sequence.RNA.mismatch_frequency", "skbio.sequence.RNA.mismatches", "skbio.sequence.RNA.nondegenerates", "skbio.sequence.RNA.read", "skbio.sequence.RNA.replace", "skbio.sequence.RNA.reverse_complement", "skbio.sequence.RNA.reverse_transcribe", "skbio.sequence.RNA.to_definites", "skbio.sequence.RNA.to_indices", "skbio.sequence.RNA.to_regex", "skbio.sequence.RNA.translate", "skbio.sequence.RNA.translate_six_frames", "skbio.sequence.RNA.write", "skbio.sequence.Sequence", "skbio.sequence.Sequence.__bool__", "skbio.sequence.Sequence.__contains__", "skbio.sequence.Sequence.__copy__", "skbio.sequence.Sequence.__deepcopy__", "skbio.sequence.Sequence.__eq__", "skbio.sequence.Sequence.__ge__", "skbio.sequence.Sequence.__getitem__", "skbio.sequence.Sequence.__getstate__", "skbio.sequence.Sequence.__gt__", "skbio.sequence.Sequence.__iter__", "skbio.sequence.Sequence.__le__", "skbio.sequence.Sequence.__len__", "skbio.sequence.Sequence.__lt__", "skbio.sequence.Sequence.__ne__", "skbio.sequence.Sequence.__reversed__", "skbio.sequence.Sequence.__str__", "skbio.sequence.Sequence.concat", "skbio.sequence.Sequence.count", "skbio.sequence.Sequence.distance", "skbio.sequence.Sequence.find_with_regex", "skbio.sequence.Sequence.frequencies", "skbio.sequence.Sequence.has_interval_metadata", "skbio.sequence.Sequence.has_metadata", "skbio.sequence.Sequence.has_positional_metadata", "skbio.sequence.Sequence.index", "skbio.sequence.Sequence.iter_contiguous", "skbio.sequence.Sequence.iter_kmers", "skbio.sequence.Sequence.kmer_frequencies", "skbio.sequence.Sequence.lowercase", "skbio.sequence.Sequence.match_frequency", "skbio.sequence.Sequence.matches", "skbio.sequence.Sequence.mismatch_frequency", "skbio.sequence.Sequence.mismatches", "skbio.sequence.Sequence.read", "skbio.sequence.Sequence.replace", "skbio.sequence.Sequence.to_indices", "skbio.sequence.Sequence.write", "skbio.sequence.SubstitutionMatrix", "skbio.sequence.SubstitutionMatrix.__contains__", "skbio.sequence.SubstitutionMatrix.__eq__", "skbio.sequence.SubstitutionMatrix.__ge__", "skbio.sequence.SubstitutionMatrix.__getitem__", "skbio.sequence.SubstitutionMatrix.__getstate__", "skbio.sequence.SubstitutionMatrix.__gt__", "skbio.sequence.SubstitutionMatrix.__le__", "skbio.sequence.SubstitutionMatrix.__lt__", "skbio.sequence.SubstitutionMatrix.__ne__", "skbio.sequence.SubstitutionMatrix.__str__", "skbio.sequence.SubstitutionMatrix.between", "skbio.sequence.SubstitutionMatrix.by_name", "skbio.sequence.SubstitutionMatrix.copy", "skbio.sequence.SubstitutionMatrix.filter", "skbio.sequence.SubstitutionMatrix.from_dict", "skbio.sequence.SubstitutionMatrix.from_iterable", "skbio.sequence.SubstitutionMatrix.get_names", "skbio.sequence.SubstitutionMatrix.identity", "skbio.sequence.SubstitutionMatrix.index", "skbio.sequence.SubstitutionMatrix.plot", "skbio.sequence.SubstitutionMatrix.read", "skbio.sequence.SubstitutionMatrix.redundant_form", "skbio.sequence.SubstitutionMatrix.to_data_frame", "skbio.sequence.SubstitutionMatrix.to_dict", "skbio.sequence.SubstitutionMatrix.transpose", "skbio.sequence.SubstitutionMatrix.within", "skbio.sequence.SubstitutionMatrix.write", "Sequence distance metrics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence.distance</span></code>)", "skbio.sequence.distance.hamming", "skbio.sequence.distance.kmer_distance", "Composition Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.composition</span></code>)", "skbio.stats.composition.alr", "skbio.stats.composition.alr_inv", "skbio.stats.composition.ancom", "skbio.stats.composition.centralize", "skbio.stats.composition.closure", "skbio.stats.composition.clr", "skbio.stats.composition.clr_inv", "skbio.stats.composition.dirmult_ttest", "skbio.stats.composition.ilr", "skbio.stats.composition.ilr_inv", "skbio.stats.composition.inner", "skbio.stats.composition.multi_replace", "skbio.stats.composition.multiplicative_replacement", "skbio.stats.composition.pairwise_vlr", "skbio.stats.composition.perturb", "skbio.stats.composition.perturb_inv", "skbio.stats.composition.power", "skbio.stats.composition.sbp_basis", "skbio.stats.composition.tree_basis", "skbio.stats.composition.vlr", "Distance matrix-based statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.distance</span></code>)", "skbio.stats.distance.DissimilarityMatrix", "skbio.stats.distance.DissimilarityMatrix.__contains__", "skbio.stats.distance.DissimilarityMatrix.__eq__", "skbio.stats.distance.DissimilarityMatrix.__ge__", "skbio.stats.distance.DissimilarityMatrix.__getitem__", "skbio.stats.distance.DissimilarityMatrix.__getstate__", "skbio.stats.distance.DissimilarityMatrix.__gt__", "skbio.stats.distance.DissimilarityMatrix.__le__", "skbio.stats.distance.DissimilarityMatrix.__lt__", "skbio.stats.distance.DissimilarityMatrix.__ne__", "skbio.stats.distance.DissimilarityMatrix.__str__", "skbio.stats.distance.DissimilarityMatrix.between", "skbio.stats.distance.DissimilarityMatrix.copy", "skbio.stats.distance.DissimilarityMatrix.filter", "skbio.stats.distance.DissimilarityMatrix.from_iterable", "skbio.stats.distance.DissimilarityMatrix.index", "skbio.stats.distance.DissimilarityMatrix.plot", "skbio.stats.distance.DissimilarityMatrix.read", "skbio.stats.distance.DissimilarityMatrix.redundant_form", "skbio.stats.distance.DissimilarityMatrix.to_data_frame", "skbio.stats.distance.DissimilarityMatrix.transpose", "skbio.stats.distance.DissimilarityMatrix.within", "skbio.stats.distance.DissimilarityMatrix.write", "skbio.stats.distance.DistanceMatrix", "skbio.stats.distance.DistanceMatrix.__contains__", "skbio.stats.distance.DistanceMatrix.__eq__", "skbio.stats.distance.DistanceMatrix.__ge__", "skbio.stats.distance.DistanceMatrix.__getitem__", "skbio.stats.distance.DistanceMatrix.__getstate__", "skbio.stats.distance.DistanceMatrix.__gt__", "skbio.stats.distance.DistanceMatrix.__le__", "skbio.stats.distance.DistanceMatrix.__lt__", "skbio.stats.distance.DistanceMatrix.__ne__", "skbio.stats.distance.DistanceMatrix.__str__", "skbio.stats.distance.DistanceMatrix.between", "skbio.stats.distance.DistanceMatrix.condensed_form", "skbio.stats.distance.DistanceMatrix.copy", "skbio.stats.distance.DistanceMatrix.filter", "skbio.stats.distance.DistanceMatrix.from_iterable", "skbio.stats.distance.DistanceMatrix.index", "skbio.stats.distance.DistanceMatrix.permute", "skbio.stats.distance.DistanceMatrix.plot", "skbio.stats.distance.DistanceMatrix.read", "skbio.stats.distance.DistanceMatrix.redundant_form", "skbio.stats.distance.DistanceMatrix.to_data_frame", "skbio.stats.distance.DistanceMatrix.to_series", "skbio.stats.distance.DistanceMatrix.transpose", "skbio.stats.distance.DistanceMatrix.within", "skbio.stats.distance.DistanceMatrix.write", "skbio.stats.distance.anosim", "skbio.stats.distance.bioenv", "skbio.stats.distance.mantel", "skbio.stats.distance.permanova", "skbio.stats.distance.permdisp", "skbio.stats.distance.pwmantel", "skbio.stats.distance.randdm", "Evolutionary statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.evolve</span></code>)", "skbio.stats.evolve.hommola_cospeciation", "Gradient analyses (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.gradient</span></code>)", "skbio.stats.gradient.AverageGradientANOVA", "skbio.stats.gradient.AverageGradientANOVA.__eq__", "skbio.stats.gradient.AverageGradientANOVA.__ge__", "skbio.stats.gradient.AverageGradientANOVA.__getstate__", "skbio.stats.gradient.AverageGradientANOVA.__gt__", "skbio.stats.gradient.AverageGradientANOVA.__hash__", "skbio.stats.gradient.AverageGradientANOVA.__le__", "skbio.stats.gradient.AverageGradientANOVA.__lt__", "skbio.stats.gradient.AverageGradientANOVA.__ne__", "skbio.stats.gradient.AverageGradientANOVA.__str__", "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "skbio.stats.gradient.CategoryResults", "skbio.stats.gradient.CategoryResults.__eq__", "skbio.stats.gradient.CategoryResults.__ge__", "skbio.stats.gradient.CategoryResults.__getstate__", "skbio.stats.gradient.CategoryResults.__gt__", "skbio.stats.gradient.CategoryResults.__hash__", "skbio.stats.gradient.CategoryResults.__le__", "skbio.stats.gradient.CategoryResults.__lt__", "skbio.stats.gradient.CategoryResults.__ne__", "skbio.stats.gradient.CategoryResults.__str__", "skbio.stats.gradient.CategoryResults.to_files", "skbio.stats.gradient.FirstDifferenceGradientANOVA", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVA", "skbio.stats.gradient.GradientANOVA.__eq__", "skbio.stats.gradient.GradientANOVA.__ge__", "skbio.stats.gradient.GradientANOVA.__getstate__", "skbio.stats.gradient.GradientANOVA.__gt__", "skbio.stats.gradient.GradientANOVA.__hash__", "skbio.stats.gradient.GradientANOVA.__le__", "skbio.stats.gradient.GradientANOVA.__lt__", "skbio.stats.gradient.GradientANOVA.__ne__", "skbio.stats.gradient.GradientANOVA.__str__", "skbio.stats.gradient.GradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVAResults", "skbio.stats.gradient.GradientANOVAResults.__eq__", "skbio.stats.gradient.GradientANOVAResults.__ge__", "skbio.stats.gradient.GradientANOVAResults.__getstate__", "skbio.stats.gradient.GradientANOVAResults.__gt__", "skbio.stats.gradient.GradientANOVAResults.__hash__", "skbio.stats.gradient.GradientANOVAResults.__le__", "skbio.stats.gradient.GradientANOVAResults.__lt__", "skbio.stats.gradient.GradientANOVAResults.__ne__", "skbio.stats.gradient.GradientANOVAResults.__str__", "skbio.stats.gradient.GradientANOVAResults.to_files", "skbio.stats.gradient.GroupResults", "skbio.stats.gradient.GroupResults.__eq__", "skbio.stats.gradient.GroupResults.__ge__", "skbio.stats.gradient.GroupResults.__getstate__", "skbio.stats.gradient.GroupResults.__gt__", "skbio.stats.gradient.GroupResults.__hash__", "skbio.stats.gradient.GroupResults.__le__", "skbio.stats.gradient.GroupResults.__lt__", "skbio.stats.gradient.GroupResults.__ne__", "skbio.stats.gradient.GroupResults.__str__", "skbio.stats.gradient.GroupResults.to_files", "skbio.stats.gradient.TrajectoryGradientANOVA", "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "skbio.stats.gradient.WindowDifferenceGradientANOVA", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "skbio.stats.isubsample", "Ordination methods (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.ordination</span></code>)", "skbio.stats.ordination.OrdinationResults", "skbio.stats.ordination.OrdinationResults.__eq__", "skbio.stats.ordination.OrdinationResults.__ge__", "skbio.stats.ordination.OrdinationResults.__getstate__", "skbio.stats.ordination.OrdinationResults.__gt__", "skbio.stats.ordination.OrdinationResults.__hash__", "skbio.stats.ordination.OrdinationResults.__le__", "skbio.stats.ordination.OrdinationResults.__lt__", "skbio.stats.ordination.OrdinationResults.__ne__", "skbio.stats.ordination.OrdinationResults.__str__", "skbio.stats.ordination.OrdinationResults.plot", "skbio.stats.ordination.OrdinationResults.read", "skbio.stats.ordination.OrdinationResults.write", "skbio.stats.ordination.ca", "skbio.stats.ordination.cca", "skbio.stats.ordination.corr", "skbio.stats.ordination.e_matrix", "skbio.stats.ordination.f_matrix", "skbio.stats.ordination.mean_and_std", "skbio.stats.ordination.pcoa", "skbio.stats.ordination.pcoa_biplot", "skbio.stats.ordination.rda", "skbio.stats.ordination.scale", "skbio.stats.ordination.svd_rank", "Empirical Power Estimation (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.power</span></code>)", "skbio.stats.power.confidence_bound", "skbio.stats.power.paired_subsamples", "skbio.stats.power.subsample_paired_power", "skbio.stats.power.subsample_power", "skbio.stats.subsample_counts", "skbio.table.Table", "skbio.table.Table.__eq__", "skbio.table.Table.__ge__", "skbio.table.Table.__getitem__", "skbio.table.Table.__getstate__", "skbio.table.Table.__gt__", "skbio.table.Table.__iter__", "skbio.table.Table.__le__", "skbio.table.Table.__lt__", "skbio.table.Table.__ne__", "skbio.table.Table.__str__", "skbio.table.Table.add_group_metadata", "skbio.table.Table.add_metadata", "skbio.table.Table.align_to", "skbio.table.Table.align_to_dataframe", "skbio.table.Table.align_tree", "skbio.table.Table.collapse", "skbio.table.Table.concat", "skbio.table.Table.copy", "skbio.table.Table.data", "skbio.table.Table.del_metadata", "skbio.table.Table.delimited_self", "skbio.table.Table.descriptive_equality", "skbio.table.Table.exists", "skbio.table.Table.filter", "skbio.table.Table.from_adjacency", "skbio.table.Table.from_hdf5", "skbio.table.Table.from_json", "skbio.table.Table.from_tsv", "skbio.table.Table.get_table_density", "skbio.table.Table.get_value_by_ids", "skbio.table.Table.group_metadata", "skbio.table.Table.head", "skbio.table.Table.ids", "skbio.table.Table.index", "skbio.table.Table.is_empty", "skbio.table.Table.iter", "skbio.table.Table.iter_data", "skbio.table.Table.iter_pairwise", "skbio.table.Table.length", "skbio.table.Table.max", "skbio.table.Table.merge", "skbio.table.Table.metadata", "skbio.table.Table.metadata_to_dataframe", "skbio.table.Table.min", "skbio.table.Table.nonzero", "skbio.table.Table.nonzero_counts", "skbio.table.Table.norm", "skbio.table.Table.pa", "skbio.table.Table.partition", "skbio.table.Table.rankdata", "skbio.table.Table.read", "skbio.table.Table.reduce", "skbio.table.Table.remove_empty", "skbio.table.Table.sort", "skbio.table.Table.sort_order", "skbio.table.Table.subsample", "skbio.table.Table.sum", "skbio.table.Table.to_anndata", "skbio.table.Table.to_dataframe", "skbio.table.Table.to_hdf5", "skbio.table.Table.to_json", "skbio.table.Table.to_tsv", "skbio.table.Table.transform", "skbio.table.Table.transpose", "skbio.table.Table.update_ids", "skbio.table.Table.write", "skbio.table.example_table", "skbio.tree.TreeNode", "skbio.tree.TreeNode.__copy__", "skbio.tree.TreeNode.__deepcopy__", "skbio.tree.TreeNode.__eq__", "skbio.tree.TreeNode.__ge__", "skbio.tree.TreeNode.__getitem__", "skbio.tree.TreeNode.__getstate__", "skbio.tree.TreeNode.__gt__", "skbio.tree.TreeNode.__hash__", "skbio.tree.TreeNode.__iter__", "skbio.tree.TreeNode.__le__", "skbio.tree.TreeNode.__len__", "skbio.tree.TreeNode.__lt__", "skbio.tree.TreeNode.__ne__", "skbio.tree.TreeNode.__str__", "skbio.tree.TreeNode.accumulate_to_ancestor", "skbio.tree.TreeNode.ancestors", "skbio.tree.TreeNode.append", "skbio.tree.TreeNode.ascii_art", "skbio.tree.TreeNode.assign_ids", "skbio.tree.TreeNode.assign_supports", "skbio.tree.TreeNode.bifurcate", "skbio.tree.TreeNode.cache_attr", "skbio.tree.TreeNode.compare_rfd", "skbio.tree.TreeNode.compare_subsets", "skbio.tree.TreeNode.compare_tip_distances", "skbio.tree.TreeNode.copy", "skbio.tree.TreeNode.count", "skbio.tree.TreeNode.create_caches", "skbio.tree.TreeNode.deepcopy", "skbio.tree.TreeNode.descending_branch_length", "skbio.tree.TreeNode.distance", "skbio.tree.TreeNode.extend", "skbio.tree.TreeNode.find", "skbio.tree.TreeNode.find_all", "skbio.tree.TreeNode.find_by_func", "skbio.tree.TreeNode.find_by_id", "skbio.tree.TreeNode.from_linkage_matrix", "skbio.tree.TreeNode.from_taxdump", "skbio.tree.TreeNode.from_taxonomy", "skbio.tree.TreeNode.get_max_distance", "skbio.tree.TreeNode.has_children", "skbio.tree.TreeNode.index_tree", "skbio.tree.TreeNode.invalidate_caches", "skbio.tree.TreeNode.is_root", "skbio.tree.TreeNode.is_tip", "skbio.tree.TreeNode.lca", "skbio.tree.TreeNode.levelorder", "skbio.tree.TreeNode.lowest_common_ancestor", "skbio.tree.TreeNode.neighbors", "skbio.tree.TreeNode.non_tips", "skbio.tree.TreeNode.observed_node_counts", "skbio.tree.TreeNode.pop", "skbio.tree.TreeNode.postorder", "skbio.tree.TreeNode.pre_and_postorder", "skbio.tree.TreeNode.preorder", "skbio.tree.TreeNode.prune", "skbio.tree.TreeNode.read", "skbio.tree.TreeNode.remove", "skbio.tree.TreeNode.remove_deleted", "skbio.tree.TreeNode.root", "skbio.tree.TreeNode.root_at", "skbio.tree.TreeNode.root_at_midpoint", "skbio.tree.TreeNode.shear", "skbio.tree.TreeNode.shuffle", "skbio.tree.TreeNode.siblings", "skbio.tree.TreeNode.subset", "skbio.tree.TreeNode.subsets", "skbio.tree.TreeNode.subtree", "skbio.tree.TreeNode.tip_tip_distances", "skbio.tree.TreeNode.tips", "skbio.tree.TreeNode.to_array", "skbio.tree.TreeNode.to_taxonomy", "skbio.tree.TreeNode.traverse", "skbio.tree.TreeNode.unpack", "skbio.tree.TreeNode.unpack_by_func", "skbio.tree.TreeNode.unrooted_copy", "skbio.tree.TreeNode.unrooted_deepcopy", "skbio.tree.TreeNode.write", "skbio.tree.majority_rule", "skbio.tree.nj", "skbio.util.EfficiencyWarning", "skbio.util.RepresentationWarning", "skbio.util.assert_data_frame_almost_equal", "skbio.util.assert_ordination_results_equal", "skbio.util.cardinal_to_ordinal", "skbio.util.classproperty", "skbio.util.classproperty.__delete__", "skbio.util.classproperty.__eq__", "skbio.util.classproperty.__ge__", "skbio.util.classproperty.__get__", "skbio.util.classproperty.__getstate__", "skbio.util.classproperty.__gt__", "skbio.util.classproperty.__hash__", "skbio.util.classproperty.__le__", "skbio.util.classproperty.__lt__", "skbio.util.classproperty.__ne__", "skbio.util.classproperty.__set__", "skbio.util.classproperty.__set_name__", "skbio.util.classproperty.__str__", "skbio.util.classproperty.deleter", "skbio.util.classproperty.getter", "skbio.util.classproperty.setter", "skbio.util.find_duplicates", "skbio.util.get_data_path", "skbio.util.safe_md5", "skbio.workflow.Workflow", "skbio.workflow.Workflow.__call__", "skbio.workflow.Workflow.__eq__", "skbio.workflow.Workflow.__ge__", "skbio.workflow.Workflow.__getstate__", "skbio.workflow.Workflow.__gt__", "skbio.workflow.Workflow.__hash__", "skbio.workflow.Workflow.__le__", "skbio.workflow.Workflow.__lt__", "skbio.workflow.Workflow.__ne__", "skbio.workflow.Workflow.__str__", "skbio.workflow.Workflow.initialize_state", "skbio.workflow.method", "skbio.workflow.method.__call__", "skbio.workflow.method.__eq__", "skbio.workflow.method.__ge__", "skbio.workflow.method.__getstate__", "skbio.workflow.method.__gt__", "skbio.workflow.method.__hash__", "skbio.workflow.method.__le__", "skbio.workflow.method.__lt__", "skbio.workflow.method.__ne__", "skbio.workflow.method.__str__", "skbio.workflow.requires", "skbio.workflow.requires.__call__", "skbio.workflow.requires.__eq__", "skbio.workflow.requires.__ge__", "skbio.workflow.requires.__getstate__", "skbio.workflow.requires.__gt__", "skbio.workflow.requires.__hash__", "skbio.workflow.requires.__le__", "skbio.workflow.requires.__lt__", "skbio.workflow.requires.__ne__", "skbio.workflow.requires.__str__", "Home", "Input and Output (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io</span></code>)", "Metadata (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.metadata</span></code>)", "Biological Sequences (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence</span></code>)", "Multivariate Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats</span></code>)", "Data Table (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.table</span></code>)", "Trees and Phylogenetics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.tree</span></code>)", "Utilities for Developers (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.util</span></code>)", "Workflow construction (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.workflow</span></code>)"], "titleterms": {"0": 1091, "1": 1091, "6": [217, 1091], "7": 218, "__bool__": [66, 380, 451, 502, 555, 614], "__call__": [54, 1058, 1070, 1081], "__contains__": [67, 381, 452, 503, 556, 615, 652, 705, 728], "__copy__": [68, 306, 382, 453, 504, 557, 616, 952], "__deepcopy__": [69, 307, 383, 454, 505, 558, 617, 953], "__delete__": 1038, "__eq__": [4, 21, 35, 55, 70, 153, 164, 177, 190, 201, 236, 249, 278, 296, 308, 325, 343, 361, 384, 439, 455, 506, 559, 618, 653, 706, 729, 764, 775, 786, 797, 808, 819, 830, 841, 854, 884, 954, 1039, 1059, 1071, 1082], "__ge__": [5, 22, 36, 56, 71, 154, 165, 178, 191, 202, 237, 250, 279, 297, 309, 326, 344, 362, 385, 440, 456, 507, 560, 619, 654, 707, 730, 765, 776, 787, 798, 809, 820, 831, 842, 855, 885, 955, 1040, 1060, 1072, 1083], "__get__": 1041, "__getitem__": [23, 72, 386, 457, 508, 561, 620, 655, 708, 731, 886, 956], "__getstate__": [6, 24, 37, 57, 73, 155, 166, 179, 192, 203, 238, 251, 280, 298, 310, 327, 345, 363, 387, 441, 458, 509, 562, 621, 656, 709, 732, 766, 777, 788, 799, 810, 821, 832, 843, 856, 887, 957, 1042, 1061, 1073, 1084], "__gt__": [7, 25, 38, 58, 74, 156, 167, 180, 193, 204, 239, 252, 281, 299, 311, 328, 346, 364, 388, 442, 459, 510, 563, 622, 657, 710, 733, 767, 778, 789, 800, 811, 822, 833, 844, 857, 888, 958, 1043, 1062, 1074, 1085], "__hash__": [8, 26, 39, 59, 157, 168, 181, 194, 205, 240, 253, 768, 779, 790, 801, 812, 823, 834, 845, 858, 959, 1044, 1063, 1075, 1086], "__iter__": [75, 389, 460, 511, 564, 623, 889, 960], "__le__": [9, 27, 40, 60, 76, 158, 169, 182, 195, 206, 241, 254, 282, 300, 312, 329, 347, 365, 390, 443, 461, 512, 565, 624, 658, 711, 734, 769, 780, 791, 802, 813, 824, 835, 846, 859, 890, 961, 1045, 1064, 1076, 1087], "__len__": [77, 391, 462, 513, 566, 625, 962], "__lt__": [10, 28, 41, 61, 78, 159, 170, 183, 196, 207, 242, 255, 283, 301, 313, 330, 348, 366, 392, 444, 463, 514, 567, 626, 659, 712, 735, 770, 781, 792, 803, 814, 825, 836, 847, 860, 891, 963, 1046, 1065, 1077, 1088], "__ne__": [11, 29, 42, 62, 79, 160, 171, 184, 197, 208, 243, 256, 284, 302, 314, 331, 349, 367, 393, 445, 464, 515, 568, 627, 660, 713, 736, 771, 782, 793, 804, 815, 826, 837, 848, 861, 892, 964, 1047, 1066, 1078, 1089], "__reversed__": [80, 394, 465, 516, 569, 628], "__set__": 1048, "__set_name__": 1049, "__setstate__": [30, 63], "__str__": [12, 31, 43, 64, 81, 161, 172, 185, 198, 209, 244, 257, 285, 303, 315, 332, 350, 368, 395, 446, 466, 517, 570, 629, 661, 714, 737, 772, 783, 794, 805, 816, 827, 838, 849, 862, 893, 965, 1050, 1067, 1079, 1090], "ac": 107, "accumulate_to_ancestor": 966, "ad": 227, "add": 316, "add_format": 258, "add_group_metadata": 894, "add_metadata": 895, "advanc": 227, "algorithm": 0, "align": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 219, 229, 232], "align_to": 896, "align_to_datafram": 897, "align_tre": 898, "alignmentstructur": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "alignpath": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "alpha": [1, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142], "alpha_divers": 143, "alr": 683, "alr_inv": 684, "analys": 762, "analysi": 852, "ancestor": 967, "ancom": 685, "anosim": 753, "append": [82, 968], "applic": 227, "argument": 234, "ascii_art": 969, "assert_data_frame_almost_equ": 1034, "assert_ordination_results_equ": 1035, "assign_id": 970, "assign_support": 971, "averagegradientanova": [763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773], "base": 703, "basic": 227, "befor": [221, 224], "berger_parker_d": 108, "beta": [1, 144, 145, 146], "beta_divers": 147, "between": [662, 715, 738], "bifurc": 972, "binari": 215, "binary_dm": 215, "bio": [234, 1091, 1092], "bioenv": 754, "biolog": [2, 1094], "biom": [216, 1096], "blast": [217, 218], "blast6": 217, "blast7": 218, "block_beta_divers": 148, "brillouin_d": 109, "by_nam": 663, "byte": [162, 173, 186, 199, 210], "ca": 866, "cache_attr": 973, "calcul": 1094, "can": 1092, "canon": 852, "cardinal_to_ordin": 1036, "categor": 703, "categoricalmetadatacolumn": [277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], "categoryresult": [774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784], "caveat": 227, "cca": 867, "central": 686, "chao1": 110, "chao1_ci": 111, "charact": 231, "class": [234, 703, 762, 1099], "classproperti": [1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "closur": 687, "clr": 688, "clr_inv": 689, "clustal": 219, "collaps": 899, "column": [217, 218, 231, 1093], "comment": [227, 231], "commun": 1, "compare_rfd": 974, "compare_subset": 975, "compare_tip_dist": 976, "comparison": 703, "complement": [396, 571], "composit": [682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 1095], "concat": [317, 397, 467, 518, 572, 630, 900], "condensed_form": 739, "confidence_bound": 878, "consensu": 83, "conserv": 84, "construct": 1099, "continu": 703, "cophylogenet": 760, "copi": [664, 716, 740, 901, 977], "corr": 868, "correspond": 852, "count": [1, 398, 468, 519, 573, 631, 978], "coverag": 106, "creat": 234, "create_cach": 979, "create_format": [259, 269], "custom": 1092, "data": [0, 222, 703, 902, 1095, 1096], "decor": 1099, "deepcopi": 980, "definit": [399, 469, 520, 574], "degap": [400, 470, 521, 575], "degener": [401, 471, 522, 576], "del_metadata": 903, "delet": 1051, "delimited_self": 904, "deprec": 0, "descending_branch_length": 981, "descriptive_equ": 905, "dev": 1091, "develop": [1092, 1098], "dirmult_ttest": 690, "dissimilar": 215, "dissimilaritymatrix": [704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726], "distanc": [402, 472, 523, 577, 632, 679, 680, 681, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 982, 1094, 1095], "distancematrix": [727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "divers": [1, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "divis": 233, "dmp": 233, "dna": [379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437], "document": 1091, "domin": [106, 112], "doubl": 113, "drop": [304, 318], "drop_missing_valu": [286, 333, 351], "e_matrix": 869, "efficiencywarn": 1032, "emb": 220, "embed": [2, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 220], "embed_vec_to_datafram": 211, "embed_vec_to_dist": 212, "embed_vec_to_numpi": 213, "embed_vec_to_ordin": 214, "embl": 221, "empir": 877, "empti": 231, "enspi": 114, "estim": 877, "esty_ci": 115, "even": 106, "evolutionari": 760, "evolv": [760, 761], "exampl": [216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 232, 233, 703, 762, 852, 877, 1096], "example_t": 950, "except": [234, 703, 1092, 1097], "exist": 906, "expand_degener": [403, 473, 524, 578], "explan": 227, "extend": [85, 983], "f_matrix": 870, "faith_pd": 116, "fasta": 222, "fastq": 223, "featur": [221, 224], "fh": 221, "file": [221, 222, 224, 1092], "filter": [665, 717, 741, 907], "filter_column": 369, "filter_id": [287, 334, 352, 370], "find": 984, "find_al": 985, "find_by_func": 986, "find_by_id": 987, "find_dupl": 1054, "find_motif": [404, 474, 525, 579], "find_with_regex": [405, 475, 526, 580, 633], "firstdifferencegradientanova": [785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795], "fisher_alpha": 117, "footer": 232, "formal": 227, "format": [215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 1092], "frequenc": [406, 476, 527, 581, 634], "from": 1092, "from_adjac": 908, "from_bit": [13, 44], "from_cigar": 45, "from_coordin": [14, 46], "from_dict": [86, 666], "from_hdf5": 909, "from_indic": [15, 47], "from_iter": [667, 718, 742], "from_json": 910, "from_linkage_matrix": 988, "from_ncbi": 447, "from_path_seq": 87, "from_tabular": [16, 48], "from_taxdump": 989, "from_taxonomi": 990, "from_tsv": 911, "ft": 221, "function": [0, 144, 234, 273, 679, 682, 703, 760, 852, 877, 1098], "g": 232, "gap": [407, 477, 528, 582], "gap_frequ": 88, "gc": 232, "gc_content": [408, 583], "gc_frequenc": [409, 584], "genbank": 224, "gencod": 233, "gener": [221, 222, 230], "geneticcod": [438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449], "get_alpha_diversity_metr": 149, "get_beta_diversity_metr": 150, "get_column": 371, "get_data_path": 1055, "get_id": [288, 335, 353, 372], "get_max_dist": 991, "get_miss": [289, 336, 354], "get_nam": 668, "get_read": 260, "get_sniff": 261, "get_table_dens": 912, "get_trajectori": [773, 795, 806, 839, 850], "get_valu": [290, 337, 355], "get_value_by_id": 913, "get_writ": 262, "getter": 1052, "gf": 232, "gff3": 225, "gini_index": 118, "global_pairwise_align": 98, "global_pairwise_align_nucleotid": 99, "global_pairwise_align_protein": 100, "goods_coverag": 119, "gr": 232, "gradient": [762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850], "gradientanova": [796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806], "gradientanovaresult": [807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817], "grammar": 227, "grammaredsequ": [450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500], "group_metadata": 914, "groupresult": [818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828], "ham": 680, "has_children": 992, "has_definit": [410, 478, 529, 585], "has_degener": [411, 479, 530, 586], "has_gap": [412, 480, 531, 587], "has_interval_metadata": [413, 481, 532, 588, 635], "has_metadata": [89, 414, 482, 533, 589, 636], "has_missing_valu": [291, 338, 356], "has_nondegener": [415, 483, 534, 590], "has_positional_metadata": [90, 416, 484, 535, 591, 637], "has_stop": 536, "head": 915, "header": [221, 222, 229, 232], "heip_": 120, "hommola_cospeci": 761, "i": [234, 273], "id": 916, "ident": 669, "identifi": 231, "ilr": 691, "ilr_inv": 692, "index": [417, 485, 537, 592, 638, 670, 719, 743, 917], "index_tre": 993, "inform": 227, "initialize_st": 1068, "inlin": 227, "inner": 693, "input": [1, 1092], "interv": [295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 1093], "intervalmetadata": [305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323], "introduct": 1, "inv_simpson": 121, "invalidate_cach": 994, "io": [215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 1092], "ioregistri": [248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "is_empti": 918, "is_reverse_compl": [418, 593], "is_root": 995, "is_tip": 996, "is_zero_bas": 32, "isubsampl": 851, "iter": 919, "iter_contigu": [419, 486, 538, 594, 639], "iter_data": 920, "iter_km": [420, 487, 539, 595, 640], "iter_pairwis": 921, "iter_posit": 91, "join": 92, "kempton_taylor_q": 122, "keyword": 234, "kind": 1092, "kmer_dist": 681, "kmer_frequ": [421, 488, 540, 596, 641], "label": [226, 227], "lca": 997, "lead": 231, "length": [227, 922], "level": 221, "levelord": 998, "list_read_format": 263, "list_write_format": 264, "lladser_ci": 123, "lladser_p": 124, "load": 373, "local_pairwise_align": 101, "local_pairwise_align_nucleotid": 102, "local_pairwise_align_protein": 103, "local_pairwise_align_ssw": 104, "locat": 224, "lowercas": [422, 489, 541, 597, 642], "lowest_common_ancestor": 999, "lsmat": 226, "majority_rul": 1030, "make_identity_substitution_matrix": 105, "mantel": 755, "margalef": 125, "match": [424, 491, 543, 599, 644], "match_frequ": [423, 490, 542, 598, 643], "matrix": [215, 226, 703, 1095], "max": 923, "mcintosh_": 127, "mcintosh_d": 126, "mean_and_std": 871, "measur": [106, 144], "menhinick": 128, "merg": [319, 374, 924], "metadata": [231, 232, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 925, 1093], "metadata_to_datafram": 926, "metadatacolumn": [324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "method": [760, 852, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1095], "metric": [1, 106, 679], "michaelis_menten_fit": 129, "min": 927, "miscellan": 1098, "mismatch": [426, 493, 545, 601, 646], "mismatch_frequ": [425, 492, 544, 600, 645], "monkey_patch": 265, "multi_replac": 694, "multidimension": 852, "multipl": [229, 232], "multiplicative_replac": 695, "multivari": 1095, "name": 233, "neighbor": 1000, "new": 234, "newick": 227, "nj": 1031, "node": [227, 233], "non_tip": 1001, "nondegener": [427, 494, 546, 602], "nonzero": 928, "nonzero_count": 929, "norm": 930, "number": 231, "numericmetadatacolumn": [342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359], "o": [234, 273], "observed_featur": 130, "observed_node_count": 1002, "observed_otu": 131, "onli": 230, "open": 274, "open_fil": [275, 276], "oper": 1097, "optim": 0, "ordin": [228, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 1095], "ordinationresult": [853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865], "origin": 224, "osd": 132, "other": 1095, "output": 1092, "pa": 931, "pairalignpath": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "paired_subsampl": 879, "pairwise_vlr": 696, "paramet": [217, 219, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233], "partial_beta_divers": 151, "partit": 932, "pcoa": 872, "pcoa_biplot": 873, "permanova": 756, "permdisp": 757, "permut": 744, "perturb": 697, "perturb_inv": 698, "phydiv": 133, "phylip": 229, "phylogenet": 1097, "pielou_": 134, "plot": [671, 720, 745, 863], "pop": 1003, "postord": 1004, "power": [699, 877, 878, 879, 880, 881], "pre_and_postord": 1005, "preorder": 1006, "product": 221, "protein": [501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553], "proteinembed": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175], "proteinvector": [176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], "prune": 1007, "pwmantel": 758, "qseq": 230, "qual": 222, "qualiti": 223, "queri": 320, "randdm": 759, "rankdata": 933, "rda": 874, "read": [93, 174, 187, 221, 222, 224, 266, 270, 321, 375, 428, 495, 547, 603, 647, 672, 721, 746, 864, 934, 1008, 1092], "reader": [222, 224, 225, 245], "reassign_index": 94, "recommend": 231, "reconstruct": 1097, "reduc": 935, "redundant_form": [673, 722, 747], "refer": [106, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 229, 230, 232, 233, 682, 703, 852], "registri": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "remov": 1009, "remove_delet": 1010, "remove_empti": 936, "replac": [429, 496, 548, 604, 648], "representationwarn": 1033, "requir": [231, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090], "reserv": 234, "result": [228, 852], "reverse_compl": [430, 605], "reverse_transcrib": 606, "rich": 106, "rna": [554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], "robbin": 135, "root": 1011, "root_at": 1012, "root_at_midpoint": 1013, "row": 231, "rule": 227, "safe_md5": 1056, "sampl": 1093, "samplemetadata": [360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378], "save": [292, 339, 357, 376], "sbp_basi": 700, "scale": [852, 875], "scikit": [234, 1091, 1092], "score": 223, "section": [219, 221, 224, 229], "sequenc": [0, 222, 229, 232, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 1094], "sequenceembed": [189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], "sequencevector": [200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210], "set_zero_bas": 33, "setter": 1053, "shannon": 136, "shear": 1014, "shuffl": 1015, "sibl": 1016, "simpl": 215, "simpson": 137, "simpson_": 139, "simpson_d": 138, "singl": 140, "skbio": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099], "slow": 0, "sniff": [267, 271], "sniffer": 246, "sob": 141, "sort": [95, 322, 937], "sort_ord": 938, "specif": [215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233], "specifi": 1, "sq": 221, "squar": 226, "stat": [682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 1095], "statist": [682, 703, 760, 1095], "stockholm": 232, "stop": 549, "string": 224, "stripedsmithwaterman": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], "strong": 142, "structur": [0, 703, 1097], "subsampl": [939, 1095], "subsample_count": 882, "subsample_paired_pow": 880, "subsample_pow": 881, "subset": [1017, 1018], "substitutionmatrix": [651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678], "subtre": 1019, "sum": 940, "support": [215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 1092], "svd_rank": 876, "symbol": 227, "tabl": [883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 1096], "tabularmsa": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 222], "taxdump": 233, "test": 1098, "tip": 1021, "tip_tip_dist": 1020, "to_anndata": 941, "to_arrai": 1022, "to_bit": [17, 49], "to_cigar": 50, "to_coordin": [18, 51], "to_data_fram": [674, 723, 748], "to_datafram": [293, 340, 358, 377, 942], "to_definit": [431, 497, 550, 607], "to_dict": [96, 675], "to_fil": [784, 817, 828], "to_hdf5": 943, "to_indic": [19, 52, 432, 498, 551, 608, 649], "to_json": 944, "to_regex": [433, 499, 552, 609], "to_seri": [294, 341, 359, 749], "to_taxonomi": 1023, "to_tsv": 945, "trail": 231, "trajectorygradientanova": [829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839], "transcrib": 434, "transform": 946, "translat": [435, 448, 610], "translate_six_fram": [436, 449, 611], "transpos": [676, 724, 750, 947], "travers": 1024, "tree": [951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1097], "tree_basi": 701, "treenod": [951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "tutori": [0, 1, 1092, 1094, 1097, 1099], "type": [2, 217, 218, 231, 1094], "unpack": 1025, "unpack_by_func": 1026, "unrooted_copi": 1027, "unrooted_deepcopi": 1028, "unweighted_unifrac": 145, "update_id": 948, "us": [0, 221, 1092], "util": [2, 273, 274, 275, 276, 852, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1094, 1097, 1098], "valid": [1, 231], "variabl": 703, "variant": 223, "vector": [1, 2], "vlr": 702, "warn": [1092, 1098], "weighted_unifrac": 146, "what": 1092, "whitespac": [227, 231], "windowdifferencegradientanova": [840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850], "within": [677, 725, 751], "workflow": [1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1099], "write": [97, 175, 188, 222, 224, 268, 272, 323, 378, 437, 500, 553, 612, 650, 678, 726, 752, 865, 949, 1029, 1092], "writer": [222, 225, 247]}})