Search.setIndex({"docnames": ["alignment", "diversity", "generated/skbio.alignment.AlignmentStructure", "generated/skbio.alignment.AlignmentStructure.__eq__", "generated/skbio.alignment.AlignmentStructure.__ge__", "generated/skbio.alignment.AlignmentStructure.__getitem__", "generated/skbio.alignment.AlignmentStructure.__getstate__", "generated/skbio.alignment.AlignmentStructure.__gt__", "generated/skbio.alignment.AlignmentStructure.__hash__", "generated/skbio.alignment.AlignmentStructure.__le__", "generated/skbio.alignment.AlignmentStructure.__lt__", "generated/skbio.alignment.AlignmentStructure.__ne__", "generated/skbio.alignment.AlignmentStructure.__setstate__", "generated/skbio.alignment.AlignmentStructure.__str__", "generated/skbio.alignment.AlignmentStructure.is_zero_based", "generated/skbio.alignment.AlignmentStructure.set_zero_based", "generated/skbio.alignment.StripedSmithWaterman", "generated/skbio.alignment.StripedSmithWaterman.__call__", "generated/skbio.alignment.StripedSmithWaterman.__eq__", "generated/skbio.alignment.StripedSmithWaterman.__ge__", "generated/skbio.alignment.StripedSmithWaterman.__getstate__", "generated/skbio.alignment.StripedSmithWaterman.__gt__", "generated/skbio.alignment.StripedSmithWaterman.__hash__", "generated/skbio.alignment.StripedSmithWaterman.__le__", "generated/skbio.alignment.StripedSmithWaterman.__lt__", "generated/skbio.alignment.StripedSmithWaterman.__ne__", "generated/skbio.alignment.StripedSmithWaterman.__setstate__", "generated/skbio.alignment.StripedSmithWaterman.__str__", "generated/skbio.alignment.TabularMSA", "generated/skbio.alignment.TabularMSA.__bool__", "generated/skbio.alignment.TabularMSA.__contains__", "generated/skbio.alignment.TabularMSA.__copy__", "generated/skbio.alignment.TabularMSA.__deepcopy__", "generated/skbio.alignment.TabularMSA.__eq__", "generated/skbio.alignment.TabularMSA.__ge__", "generated/skbio.alignment.TabularMSA.__getitem__", "generated/skbio.alignment.TabularMSA.__getstate__", "generated/skbio.alignment.TabularMSA.__gt__", "generated/skbio.alignment.TabularMSA.__iter__", "generated/skbio.alignment.TabularMSA.__le__", "generated/skbio.alignment.TabularMSA.__len__", "generated/skbio.alignment.TabularMSA.__lt__", "generated/skbio.alignment.TabularMSA.__ne__", "generated/skbio.alignment.TabularMSA.__reversed__", "generated/skbio.alignment.TabularMSA.__str__", "generated/skbio.alignment.TabularMSA.append", "generated/skbio.alignment.TabularMSA.consensus", "generated/skbio.alignment.TabularMSA.conservation", "generated/skbio.alignment.TabularMSA.extend", "generated/skbio.alignment.TabularMSA.from_dict", "generated/skbio.alignment.TabularMSA.gap_frequencies", "generated/skbio.alignment.TabularMSA.has_metadata", "generated/skbio.alignment.TabularMSA.has_positional_metadata", "generated/skbio.alignment.TabularMSA.iter_positions", "generated/skbio.alignment.TabularMSA.join", "generated/skbio.alignment.TabularMSA.read", "generated/skbio.alignment.TabularMSA.reassign_index", "generated/skbio.alignment.TabularMSA.sort", "generated/skbio.alignment.TabularMSA.to_dict", "generated/skbio.alignment.TabularMSA.write", "generated/skbio.alignment.global_pairwise_align", "generated/skbio.alignment.global_pairwise_align_nucleotide", "generated/skbio.alignment.global_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align", "generated/skbio.alignment.local_pairwise_align_nucleotide", "generated/skbio.alignment.local_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align_ssw", "generated/skbio.alignment.make_identity_substitution_matrix", "generated/skbio.diversity.alpha", "generated/skbio.diversity.alpha.ace", "generated/skbio.diversity.alpha.berger_parker_d", "generated/skbio.diversity.alpha.brillouin_d", "generated/skbio.diversity.alpha.chao1", "generated/skbio.diversity.alpha.chao1_ci", "generated/skbio.diversity.alpha.dominance", "generated/skbio.diversity.alpha.doubles", "generated/skbio.diversity.alpha.enspie", "generated/skbio.diversity.alpha.esty_ci", "generated/skbio.diversity.alpha.faith_pd", "generated/skbio.diversity.alpha.fisher_alpha", "generated/skbio.diversity.alpha.gini_index", "generated/skbio.diversity.alpha.goods_coverage", "generated/skbio.diversity.alpha.heip_e", "generated/skbio.diversity.alpha.kempton_taylor_q", "generated/skbio.diversity.alpha.lladser_ci", "generated/skbio.diversity.alpha.lladser_pe", "generated/skbio.diversity.alpha.margalef", "generated/skbio.diversity.alpha.mcintosh_d", "generated/skbio.diversity.alpha.mcintosh_e", "generated/skbio.diversity.alpha.menhinick", "generated/skbio.diversity.alpha.michaelis_menten_fit", "generated/skbio.diversity.alpha.observed_features", "generated/skbio.diversity.alpha.observed_otus", "generated/skbio.diversity.alpha.osd", "generated/skbio.diversity.alpha.phydiv", "generated/skbio.diversity.alpha.pielou_e", "generated/skbio.diversity.alpha.robbins", "generated/skbio.diversity.alpha.shannon", "generated/skbio.diversity.alpha.simpson", "generated/skbio.diversity.alpha.simpson_e", "generated/skbio.diversity.alpha.singles", "generated/skbio.diversity.alpha.sobs", "generated/skbio.diversity.alpha.strong", "generated/skbio.diversity.alpha_diversity", "generated/skbio.diversity.beta", "generated/skbio.diversity.beta.unweighted_unifrac", "generated/skbio.diversity.beta.weighted_unifrac", "generated/skbio.diversity.beta_diversity", "generated/skbio.diversity.block_beta_diversity", "generated/skbio.diversity.get_alpha_diversity_metrics", "generated/skbio.diversity.get_beta_diversity_metrics", "generated/skbio.diversity.partial_beta_diversity", "generated/skbio.io.ArgumentOverrideWarning", "generated/skbio.io.BLAST7FormatError", "generated/skbio.io.ClustalFormatError", "generated/skbio.io.EMBLFormatError", "generated/skbio.io.FASTAFormatError", "generated/skbio.io.FASTQFormatError", "generated/skbio.io.FileFormatError", "generated/skbio.io.FormatIdentificationWarning", "generated/skbio.io.GFF3FormatError", "generated/skbio.io.GenBankFormatError", "generated/skbio.io.IOSourceError", "generated/skbio.io.LSMatFormatError", "generated/skbio.io.NewickFormatError", "generated/skbio.io.OrdinationFormatError", "generated/skbio.io.PhylipFormatError", "generated/skbio.io.QSeqFormatError", "generated/skbio.io.QUALFormatError", "generated/skbio.io.StockholmFormatError", "generated/skbio.io.UnrecognizedFormatError", "generated/skbio.io.format.binary_dm", "generated/skbio.io.format.blast6", "generated/skbio.io.format.blast7", "generated/skbio.io.format.clustal", "generated/skbio.io.format.embl", "generated/skbio.io.format.fasta", "generated/skbio.io.format.fastq", "generated/skbio.io.format.genbank", "generated/skbio.io.format.gff3", "generated/skbio.io.format.lsmat", "generated/skbio.io.format.newick", "generated/skbio.io.format.ordination", "generated/skbio.io.format.phylip", "generated/skbio.io.format.qseq", "generated/skbio.io.format.stockholm", "generated/skbio.io.format.taxdump", "generated/skbio.io.registry", "generated/skbio.io.registry.DuplicateRegistrationError", "generated/skbio.io.registry.Format", "generated/skbio.io.registry.Format.__eq__", "generated/skbio.io.registry.Format.__ge__", "generated/skbio.io.registry.Format.__getstate__", "generated/skbio.io.registry.Format.__gt__", "generated/skbio.io.registry.Format.__hash__", "generated/skbio.io.registry.Format.__le__", "generated/skbio.io.registry.Format.__lt__", "generated/skbio.io.registry.Format.__ne__", "generated/skbio.io.registry.Format.__str__", "generated/skbio.io.registry.Format.reader", "generated/skbio.io.registry.Format.sniffer", "generated/skbio.io.registry.Format.writer", "generated/skbio.io.registry.IORegistry", "generated/skbio.io.registry.IORegistry.__eq__", "generated/skbio.io.registry.IORegistry.__ge__", "generated/skbio.io.registry.IORegistry.__getstate__", "generated/skbio.io.registry.IORegistry.__gt__", "generated/skbio.io.registry.IORegistry.__hash__", "generated/skbio.io.registry.IORegistry.__le__", "generated/skbio.io.registry.IORegistry.__lt__", "generated/skbio.io.registry.IORegistry.__ne__", "generated/skbio.io.registry.IORegistry.__str__", "generated/skbio.io.registry.IORegistry.add_format", "generated/skbio.io.registry.IORegistry.create_format", "generated/skbio.io.registry.IORegistry.get_reader", "generated/skbio.io.registry.IORegistry.get_sniffer", "generated/skbio.io.registry.IORegistry.get_writer", "generated/skbio.io.registry.IORegistry.list_read_formats", "generated/skbio.io.registry.IORegistry.list_write_formats", "generated/skbio.io.registry.IORegistry.monkey_patch", "generated/skbio.io.registry.IORegistry.read", "generated/skbio.io.registry.IORegistry.sniff", "generated/skbio.io.registry.IORegistry.write", "generated/skbio.io.registry.InvalidRegistrationError", "generated/skbio.io.registry.create_format", "generated/skbio.io.registry.read", "generated/skbio.io.registry.sniff", "generated/skbio.io.registry.write", "generated/skbio.io.util", "generated/skbio.io.util.open", "generated/skbio.io.util.open_file", "generated/skbio.io.util.open_files", "generated/skbio.metadata.Interval", "generated/skbio.metadata.Interval.__eq__", "generated/skbio.metadata.Interval.__ge__", "generated/skbio.metadata.Interval.__getstate__", "generated/skbio.metadata.Interval.__gt__", "generated/skbio.metadata.Interval.__le__", "generated/skbio.metadata.Interval.__lt__", "generated/skbio.metadata.Interval.__ne__", "generated/skbio.metadata.Interval.__str__", "generated/skbio.metadata.Interval.drop", "generated/skbio.metadata.IntervalMetadata", "generated/skbio.metadata.IntervalMetadata.__copy__", "generated/skbio.metadata.IntervalMetadata.__deepcopy__", "generated/skbio.metadata.IntervalMetadata.__eq__", "generated/skbio.metadata.IntervalMetadata.__ge__", "generated/skbio.metadata.IntervalMetadata.__getstate__", "generated/skbio.metadata.IntervalMetadata.__gt__", "generated/skbio.metadata.IntervalMetadata.__le__", "generated/skbio.metadata.IntervalMetadata.__lt__", "generated/skbio.metadata.IntervalMetadata.__ne__", "generated/skbio.metadata.IntervalMetadata.__str__", "generated/skbio.metadata.IntervalMetadata.add", "generated/skbio.metadata.IntervalMetadata.concat", "generated/skbio.metadata.IntervalMetadata.drop", "generated/skbio.metadata.IntervalMetadata.merge", "generated/skbio.metadata.IntervalMetadata.query", "generated/skbio.metadata.IntervalMetadata.read", "generated/skbio.metadata.IntervalMetadata.sort", "generated/skbio.metadata.IntervalMetadata.write", "generated/skbio.sequence.DNA", "generated/skbio.sequence.DNA.__bool__", "generated/skbio.sequence.DNA.__contains__", "generated/skbio.sequence.DNA.__copy__", "generated/skbio.sequence.DNA.__deepcopy__", "generated/skbio.sequence.DNA.__eq__", "generated/skbio.sequence.DNA.__ge__", "generated/skbio.sequence.DNA.__getitem__", "generated/skbio.sequence.DNA.__getstate__", "generated/skbio.sequence.DNA.__gt__", "generated/skbio.sequence.DNA.__iter__", "generated/skbio.sequence.DNA.__le__", "generated/skbio.sequence.DNA.__len__", "generated/skbio.sequence.DNA.__lt__", "generated/skbio.sequence.DNA.__ne__", "generated/skbio.sequence.DNA.__reversed__", "generated/skbio.sequence.DNA.__str__", "generated/skbio.sequence.DNA.complement", "generated/skbio.sequence.DNA.concat", "generated/skbio.sequence.DNA.count", "generated/skbio.sequence.DNA.definites", "generated/skbio.sequence.DNA.degap", "generated/skbio.sequence.DNA.degenerates", "generated/skbio.sequence.DNA.distance", "generated/skbio.sequence.DNA.expand_degenerates", "generated/skbio.sequence.DNA.find_motifs", "generated/skbio.sequence.DNA.find_with_regex", "generated/skbio.sequence.DNA.frequencies", "generated/skbio.sequence.DNA.gaps", "generated/skbio.sequence.DNA.gc_content", "generated/skbio.sequence.DNA.gc_frequency", "generated/skbio.sequence.DNA.has_definites", "generated/skbio.sequence.DNA.has_degenerates", "generated/skbio.sequence.DNA.has_gaps", "generated/skbio.sequence.DNA.has_interval_metadata", "generated/skbio.sequence.DNA.has_metadata", "generated/skbio.sequence.DNA.has_nondegenerates", "generated/skbio.sequence.DNA.has_positional_metadata", "generated/skbio.sequence.DNA.index", "generated/skbio.sequence.DNA.is_reverse_complement", "generated/skbio.sequence.DNA.iter_contiguous", "generated/skbio.sequence.DNA.iter_kmers", "generated/skbio.sequence.DNA.kmer_frequencies", "generated/skbio.sequence.DNA.lowercase", "generated/skbio.sequence.DNA.match_frequency", "generated/skbio.sequence.DNA.matches", "generated/skbio.sequence.DNA.mismatch_frequency", "generated/skbio.sequence.DNA.mismatches", "generated/skbio.sequence.DNA.nondegenerates", "generated/skbio.sequence.DNA.read", "generated/skbio.sequence.DNA.replace", "generated/skbio.sequence.DNA.reverse_complement", "generated/skbio.sequence.DNA.to_definites", "generated/skbio.sequence.DNA.to_indices", "generated/skbio.sequence.DNA.to_regex", "generated/skbio.sequence.DNA.transcribe", "generated/skbio.sequence.DNA.translate", "generated/skbio.sequence.DNA.translate_six_frames", "generated/skbio.sequence.DNA.write", "generated/skbio.sequence.GeneticCode", "generated/skbio.sequence.GeneticCode.__eq__", "generated/skbio.sequence.GeneticCode.__ge__", "generated/skbio.sequence.GeneticCode.__getstate__", "generated/skbio.sequence.GeneticCode.__gt__", "generated/skbio.sequence.GeneticCode.__le__", "generated/skbio.sequence.GeneticCode.__lt__", "generated/skbio.sequence.GeneticCode.__ne__", "generated/skbio.sequence.GeneticCode.__str__", "generated/skbio.sequence.GeneticCode.from_ncbi", "generated/skbio.sequence.GeneticCode.translate", "generated/skbio.sequence.GeneticCode.translate_six_frames", "generated/skbio.sequence.GrammaredSequence", "generated/skbio.sequence.GrammaredSequence.__bool__", "generated/skbio.sequence.GrammaredSequence.__contains__", "generated/skbio.sequence.GrammaredSequence.__copy__", "generated/skbio.sequence.GrammaredSequence.__deepcopy__", "generated/skbio.sequence.GrammaredSequence.__eq__", "generated/skbio.sequence.GrammaredSequence.__ge__", "generated/skbio.sequence.GrammaredSequence.__getitem__", "generated/skbio.sequence.GrammaredSequence.__getstate__", "generated/skbio.sequence.GrammaredSequence.__gt__", "generated/skbio.sequence.GrammaredSequence.__iter__", "generated/skbio.sequence.GrammaredSequence.__le__", "generated/skbio.sequence.GrammaredSequence.__len__", "generated/skbio.sequence.GrammaredSequence.__lt__", "generated/skbio.sequence.GrammaredSequence.__ne__", "generated/skbio.sequence.GrammaredSequence.__reversed__", "generated/skbio.sequence.GrammaredSequence.__str__", "generated/skbio.sequence.GrammaredSequence.concat", "generated/skbio.sequence.GrammaredSequence.count", "generated/skbio.sequence.GrammaredSequence.definites", "generated/skbio.sequence.GrammaredSequence.degap", "generated/skbio.sequence.GrammaredSequence.degenerates", "generated/skbio.sequence.GrammaredSequence.distance", "generated/skbio.sequence.GrammaredSequence.expand_degenerates", "generated/skbio.sequence.GrammaredSequence.find_motifs", "generated/skbio.sequence.GrammaredSequence.find_with_regex", "generated/skbio.sequence.GrammaredSequence.frequencies", "generated/skbio.sequence.GrammaredSequence.gaps", "generated/skbio.sequence.GrammaredSequence.has_definites", "generated/skbio.sequence.GrammaredSequence.has_degenerates", "generated/skbio.sequence.GrammaredSequence.has_gaps", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata", "generated/skbio.sequence.GrammaredSequence.has_metadata", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata", "generated/skbio.sequence.GrammaredSequence.index", "generated/skbio.sequence.GrammaredSequence.iter_contiguous", "generated/skbio.sequence.GrammaredSequence.iter_kmers", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies", "generated/skbio.sequence.GrammaredSequence.lowercase", "generated/skbio.sequence.GrammaredSequence.match_frequency", "generated/skbio.sequence.GrammaredSequence.matches", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency", "generated/skbio.sequence.GrammaredSequence.mismatches", "generated/skbio.sequence.GrammaredSequence.nondegenerates", "generated/skbio.sequence.GrammaredSequence.read", "generated/skbio.sequence.GrammaredSequence.replace", "generated/skbio.sequence.GrammaredSequence.to_definites", "generated/skbio.sequence.GrammaredSequence.to_indices", "generated/skbio.sequence.GrammaredSequence.to_regex", "generated/skbio.sequence.GrammaredSequence.write", "generated/skbio.sequence.Protein", "generated/skbio.sequence.Protein.__bool__", "generated/skbio.sequence.Protein.__contains__", "generated/skbio.sequence.Protein.__copy__", "generated/skbio.sequence.Protein.__deepcopy__", "generated/skbio.sequence.Protein.__eq__", "generated/skbio.sequence.Protein.__ge__", "generated/skbio.sequence.Protein.__getitem__", "generated/skbio.sequence.Protein.__getstate__", "generated/skbio.sequence.Protein.__gt__", "generated/skbio.sequence.Protein.__iter__", "generated/skbio.sequence.Protein.__le__", "generated/skbio.sequence.Protein.__len__", "generated/skbio.sequence.Protein.__lt__", "generated/skbio.sequence.Protein.__ne__", "generated/skbio.sequence.Protein.__reversed__", "generated/skbio.sequence.Protein.__str__", "generated/skbio.sequence.Protein.concat", "generated/skbio.sequence.Protein.count", "generated/skbio.sequence.Protein.definites", "generated/skbio.sequence.Protein.degap", "generated/skbio.sequence.Protein.degenerates", "generated/skbio.sequence.Protein.distance", "generated/skbio.sequence.Protein.expand_degenerates", "generated/skbio.sequence.Protein.find_motifs", "generated/skbio.sequence.Protein.find_with_regex", "generated/skbio.sequence.Protein.frequencies", "generated/skbio.sequence.Protein.gaps", "generated/skbio.sequence.Protein.has_definites", "generated/skbio.sequence.Protein.has_degenerates", "generated/skbio.sequence.Protein.has_gaps", "generated/skbio.sequence.Protein.has_interval_metadata", "generated/skbio.sequence.Protein.has_metadata", "generated/skbio.sequence.Protein.has_nondegenerates", "generated/skbio.sequence.Protein.has_positional_metadata", "generated/skbio.sequence.Protein.has_stops", "generated/skbio.sequence.Protein.index", "generated/skbio.sequence.Protein.iter_contiguous", "generated/skbio.sequence.Protein.iter_kmers", "generated/skbio.sequence.Protein.kmer_frequencies", "generated/skbio.sequence.Protein.lowercase", "generated/skbio.sequence.Protein.match_frequency", "generated/skbio.sequence.Protein.matches", "generated/skbio.sequence.Protein.mismatch_frequency", "generated/skbio.sequence.Protein.mismatches", "generated/skbio.sequence.Protein.nondegenerates", "generated/skbio.sequence.Protein.read", "generated/skbio.sequence.Protein.replace", "generated/skbio.sequence.Protein.stops", "generated/skbio.sequence.Protein.to_definites", "generated/skbio.sequence.Protein.to_indices", "generated/skbio.sequence.Protein.to_regex", "generated/skbio.sequence.Protein.write", "generated/skbio.sequence.RNA", "generated/skbio.sequence.RNA.__bool__", "generated/skbio.sequence.RNA.__contains__", "generated/skbio.sequence.RNA.__copy__", "generated/skbio.sequence.RNA.__deepcopy__", "generated/skbio.sequence.RNA.__eq__", "generated/skbio.sequence.RNA.__ge__", "generated/skbio.sequence.RNA.__getitem__", "generated/skbio.sequence.RNA.__getstate__", "generated/skbio.sequence.RNA.__gt__", "generated/skbio.sequence.RNA.__iter__", "generated/skbio.sequence.RNA.__le__", "generated/skbio.sequence.RNA.__len__", "generated/skbio.sequence.RNA.__lt__", "generated/skbio.sequence.RNA.__ne__", "generated/skbio.sequence.RNA.__reversed__", "generated/skbio.sequence.RNA.__str__", "generated/skbio.sequence.RNA.complement", "generated/skbio.sequence.RNA.concat", "generated/skbio.sequence.RNA.count", "generated/skbio.sequence.RNA.definites", "generated/skbio.sequence.RNA.degap", "generated/skbio.sequence.RNA.degenerates", "generated/skbio.sequence.RNA.distance", "generated/skbio.sequence.RNA.expand_degenerates", "generated/skbio.sequence.RNA.find_motifs", "generated/skbio.sequence.RNA.find_with_regex", "generated/skbio.sequence.RNA.frequencies", "generated/skbio.sequence.RNA.gaps", "generated/skbio.sequence.RNA.gc_content", "generated/skbio.sequence.RNA.gc_frequency", "generated/skbio.sequence.RNA.has_definites", "generated/skbio.sequence.RNA.has_degenerates", "generated/skbio.sequence.RNA.has_gaps", "generated/skbio.sequence.RNA.has_interval_metadata", "generated/skbio.sequence.RNA.has_metadata", "generated/skbio.sequence.RNA.has_nondegenerates", "generated/skbio.sequence.RNA.has_positional_metadata", "generated/skbio.sequence.RNA.index", "generated/skbio.sequence.RNA.is_reverse_complement", "generated/skbio.sequence.RNA.iter_contiguous", "generated/skbio.sequence.RNA.iter_kmers", "generated/skbio.sequence.RNA.kmer_frequencies", "generated/skbio.sequence.RNA.lowercase", "generated/skbio.sequence.RNA.match_frequency", "generated/skbio.sequence.RNA.matches", "generated/skbio.sequence.RNA.mismatch_frequency", "generated/skbio.sequence.RNA.mismatches", "generated/skbio.sequence.RNA.nondegenerates", "generated/skbio.sequence.RNA.read", "generated/skbio.sequence.RNA.replace", "generated/skbio.sequence.RNA.reverse_complement", "generated/skbio.sequence.RNA.reverse_transcribe", "generated/skbio.sequence.RNA.to_definites", "generated/skbio.sequence.RNA.to_indices", "generated/skbio.sequence.RNA.to_regex", "generated/skbio.sequence.RNA.translate", "generated/skbio.sequence.RNA.translate_six_frames", "generated/skbio.sequence.RNA.write", "generated/skbio.sequence.Sequence", "generated/skbio.sequence.Sequence.__bool__", "generated/skbio.sequence.Sequence.__contains__", "generated/skbio.sequence.Sequence.__copy__", "generated/skbio.sequence.Sequence.__deepcopy__", "generated/skbio.sequence.Sequence.__eq__", "generated/skbio.sequence.Sequence.__ge__", "generated/skbio.sequence.Sequence.__getitem__", "generated/skbio.sequence.Sequence.__getstate__", "generated/skbio.sequence.Sequence.__gt__", "generated/skbio.sequence.Sequence.__iter__", "generated/skbio.sequence.Sequence.__le__", "generated/skbio.sequence.Sequence.__len__", "generated/skbio.sequence.Sequence.__lt__", "generated/skbio.sequence.Sequence.__ne__", "generated/skbio.sequence.Sequence.__reversed__", "generated/skbio.sequence.Sequence.__str__", "generated/skbio.sequence.Sequence.concat", "generated/skbio.sequence.Sequence.count", "generated/skbio.sequence.Sequence.distance", "generated/skbio.sequence.Sequence.find_with_regex", "generated/skbio.sequence.Sequence.frequencies", "generated/skbio.sequence.Sequence.has_interval_metadata", "generated/skbio.sequence.Sequence.has_metadata", "generated/skbio.sequence.Sequence.has_positional_metadata", "generated/skbio.sequence.Sequence.index", "generated/skbio.sequence.Sequence.iter_contiguous", "generated/skbio.sequence.Sequence.iter_kmers", "generated/skbio.sequence.Sequence.kmer_frequencies", "generated/skbio.sequence.Sequence.lowercase", "generated/skbio.sequence.Sequence.match_frequency", "generated/skbio.sequence.Sequence.matches", "generated/skbio.sequence.Sequence.mismatch_frequency", "generated/skbio.sequence.Sequence.mismatches", "generated/skbio.sequence.Sequence.read", "generated/skbio.sequence.Sequence.replace", "generated/skbio.sequence.Sequence.to_indices", "generated/skbio.sequence.Sequence.write", "generated/skbio.sequence.SubstitutionMatrix", "generated/skbio.sequence.SubstitutionMatrix.__contains__", "generated/skbio.sequence.SubstitutionMatrix.__eq__", "generated/skbio.sequence.SubstitutionMatrix.__ge__", "generated/skbio.sequence.SubstitutionMatrix.__getitem__", "generated/skbio.sequence.SubstitutionMatrix.__getstate__", "generated/skbio.sequence.SubstitutionMatrix.__gt__", "generated/skbio.sequence.SubstitutionMatrix.__le__", "generated/skbio.sequence.SubstitutionMatrix.__lt__", "generated/skbio.sequence.SubstitutionMatrix.__ne__", "generated/skbio.sequence.SubstitutionMatrix.__str__", "generated/skbio.sequence.SubstitutionMatrix.between", "generated/skbio.sequence.SubstitutionMatrix.by_name", "generated/skbio.sequence.SubstitutionMatrix.copy", "generated/skbio.sequence.SubstitutionMatrix.filter", "generated/skbio.sequence.SubstitutionMatrix.from_dict", "generated/skbio.sequence.SubstitutionMatrix.from_iterable", "generated/skbio.sequence.SubstitutionMatrix.get_names", "generated/skbio.sequence.SubstitutionMatrix.identity", "generated/skbio.sequence.SubstitutionMatrix.index", "generated/skbio.sequence.SubstitutionMatrix.plot", "generated/skbio.sequence.SubstitutionMatrix.read", "generated/skbio.sequence.SubstitutionMatrix.redundant_form", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame", "generated/skbio.sequence.SubstitutionMatrix.to_dict", "generated/skbio.sequence.SubstitutionMatrix.transpose", "generated/skbio.sequence.SubstitutionMatrix.within", "generated/skbio.sequence.SubstitutionMatrix.write", "generated/skbio.sequence.distance", "generated/skbio.sequence.distance.hamming", "generated/skbio.sequence.distance.kmer_distance", "generated/skbio.stats.composition", "generated/skbio.stats.composition.alr", "generated/skbio.stats.composition.alr_inv", "generated/skbio.stats.composition.ancom", "generated/skbio.stats.composition.centralize", "generated/skbio.stats.composition.closure", "generated/skbio.stats.composition.clr", "generated/skbio.stats.composition.clr_inv", "generated/skbio.stats.composition.dirmult_ttest", "generated/skbio.stats.composition.ilr", "generated/skbio.stats.composition.ilr_inv", "generated/skbio.stats.composition.inner", "generated/skbio.stats.composition.multiplicative_replacement", "generated/skbio.stats.composition.pairwise_vlr", "generated/skbio.stats.composition.perturb", "generated/skbio.stats.composition.perturb_inv", "generated/skbio.stats.composition.power", "generated/skbio.stats.composition.sbp_basis", "generated/skbio.stats.composition.tree_basis", "generated/skbio.stats.composition.vlr", "generated/skbio.stats.distance", "generated/skbio.stats.distance.DissimilarityMatrix", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__", "generated/skbio.stats.distance.DissimilarityMatrix.__le__", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__", "generated/skbio.stats.distance.DissimilarityMatrix.__str__", "generated/skbio.stats.distance.DissimilarityMatrix.between", "generated/skbio.stats.distance.DissimilarityMatrix.copy", "generated/skbio.stats.distance.DissimilarityMatrix.filter", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable", "generated/skbio.stats.distance.DissimilarityMatrix.index", "generated/skbio.stats.distance.DissimilarityMatrix.plot", "generated/skbio.stats.distance.DissimilarityMatrix.read", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame", "generated/skbio.stats.distance.DissimilarityMatrix.transpose", "generated/skbio.stats.distance.DissimilarityMatrix.within", "generated/skbio.stats.distance.DissimilarityMatrix.write", "generated/skbio.stats.distance.DissimilarityMatrixError", "generated/skbio.stats.distance.DistanceMatrix", "generated/skbio.stats.distance.DistanceMatrix.__contains__", "generated/skbio.stats.distance.DistanceMatrix.__eq__", "generated/skbio.stats.distance.DistanceMatrix.__ge__", "generated/skbio.stats.distance.DistanceMatrix.__getitem__", "generated/skbio.stats.distance.DistanceMatrix.__getstate__", "generated/skbio.stats.distance.DistanceMatrix.__gt__", "generated/skbio.stats.distance.DistanceMatrix.__le__", "generated/skbio.stats.distance.DistanceMatrix.__lt__", "generated/skbio.stats.distance.DistanceMatrix.__ne__", "generated/skbio.stats.distance.DistanceMatrix.__str__", "generated/skbio.stats.distance.DistanceMatrix.between", "generated/skbio.stats.distance.DistanceMatrix.condensed_form", "generated/skbio.stats.distance.DistanceMatrix.copy", "generated/skbio.stats.distance.DistanceMatrix.filter", "generated/skbio.stats.distance.DistanceMatrix.from_iterable", "generated/skbio.stats.distance.DistanceMatrix.index", "generated/skbio.stats.distance.DistanceMatrix.permute", "generated/skbio.stats.distance.DistanceMatrix.plot", "generated/skbio.stats.distance.DistanceMatrix.read", "generated/skbio.stats.distance.DistanceMatrix.redundant_form", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame", "generated/skbio.stats.distance.DistanceMatrix.to_series", "generated/skbio.stats.distance.DistanceMatrix.transpose", "generated/skbio.stats.distance.DistanceMatrix.within", "generated/skbio.stats.distance.DistanceMatrix.write", "generated/skbio.stats.distance.DistanceMatrixError", "generated/skbio.stats.distance.MissingIDError", "generated/skbio.stats.distance.anosim", "generated/skbio.stats.distance.bioenv", "generated/skbio.stats.distance.mantel", "generated/skbio.stats.distance.permanova", "generated/skbio.stats.distance.permdisp", "generated/skbio.stats.distance.pwmantel", "generated/skbio.stats.distance.randdm", "generated/skbio.stats.evolve", "generated/skbio.stats.evolve.hommola_cospeciation", "generated/skbio.stats.gradient", "generated/skbio.stats.gradient.AverageGradientANOVA", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.CategoryResults", "generated/skbio.stats.gradient.CategoryResults.__eq__", "generated/skbio.stats.gradient.CategoryResults.__ge__", "generated/skbio.stats.gradient.CategoryResults.__getstate__", "generated/skbio.stats.gradient.CategoryResults.__gt__", "generated/skbio.stats.gradient.CategoryResults.__hash__", "generated/skbio.stats.gradient.CategoryResults.__le__", "generated/skbio.stats.gradient.CategoryResults.__lt__", "generated/skbio.stats.gradient.CategoryResults.__ne__", "generated/skbio.stats.gradient.CategoryResults.__str__", "generated/skbio.stats.gradient.CategoryResults.to_files", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVA", "generated/skbio.stats.gradient.GradientANOVA.__eq__", "generated/skbio.stats.gradient.GradientANOVA.__ge__", "generated/skbio.stats.gradient.GradientANOVA.__getstate__", "generated/skbio.stats.gradient.GradientANOVA.__gt__", "generated/skbio.stats.gradient.GradientANOVA.__hash__", "generated/skbio.stats.gradient.GradientANOVA.__le__", "generated/skbio.stats.gradient.GradientANOVA.__lt__", "generated/skbio.stats.gradient.GradientANOVA.__ne__", "generated/skbio.stats.gradient.GradientANOVA.__str__", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVAResults", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__", "generated/skbio.stats.gradient.GradientANOVAResults.__le__", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__", "generated/skbio.stats.gradient.GradientANOVAResults.__str__", "generated/skbio.stats.gradient.GradientANOVAResults.to_files", "generated/skbio.stats.gradient.GroupResults", "generated/skbio.stats.gradient.GroupResults.__eq__", "generated/skbio.stats.gradient.GroupResults.__ge__", "generated/skbio.stats.gradient.GroupResults.__getstate__", "generated/skbio.stats.gradient.GroupResults.__gt__", "generated/skbio.stats.gradient.GroupResults.__hash__", "generated/skbio.stats.gradient.GroupResults.__le__", "generated/skbio.stats.gradient.GroupResults.__lt__", "generated/skbio.stats.gradient.GroupResults.__ne__", "generated/skbio.stats.gradient.GroupResults.__str__", "generated/skbio.stats.gradient.GroupResults.to_files", "generated/skbio.stats.gradient.TrajectoryGradientANOVA", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.isubsample", "generated/skbio.stats.ordination", "generated/skbio.stats.ordination.OrdinationResults", "generated/skbio.stats.ordination.OrdinationResults.__eq__", "generated/skbio.stats.ordination.OrdinationResults.__ge__", "generated/skbio.stats.ordination.OrdinationResults.__getstate__", "generated/skbio.stats.ordination.OrdinationResults.__gt__", "generated/skbio.stats.ordination.OrdinationResults.__hash__", "generated/skbio.stats.ordination.OrdinationResults.__le__", "generated/skbio.stats.ordination.OrdinationResults.__lt__", "generated/skbio.stats.ordination.OrdinationResults.__ne__", "generated/skbio.stats.ordination.OrdinationResults.__str__", "generated/skbio.stats.ordination.OrdinationResults.plot", "generated/skbio.stats.ordination.OrdinationResults.read", "generated/skbio.stats.ordination.OrdinationResults.write", "generated/skbio.stats.ordination.ca", "generated/skbio.stats.ordination.cca", "generated/skbio.stats.ordination.corr", "generated/skbio.stats.ordination.e_matrix", "generated/skbio.stats.ordination.f_matrix", "generated/skbio.stats.ordination.mean_and_std", "generated/skbio.stats.ordination.pcoa", "generated/skbio.stats.ordination.pcoa_biplot", "generated/skbio.stats.ordination.rda", "generated/skbio.stats.ordination.scale", "generated/skbio.stats.ordination.svd_rank", "generated/skbio.stats.power", "generated/skbio.stats.power.confidence_bound", "generated/skbio.stats.power.paired_subsamples", "generated/skbio.stats.power.subsample_paired_power", "generated/skbio.stats.power.subsample_power", "generated/skbio.stats.subsample_counts", "generated/skbio.tree.DuplicateNodeError", "generated/skbio.tree.MissingNodeError", "generated/skbio.tree.NoLengthError", "generated/skbio.tree.NoParentError", "generated/skbio.tree.TreeError", "generated/skbio.tree.TreeNode", "generated/skbio.tree.TreeNode.__copy__", "generated/skbio.tree.TreeNode.__deepcopy__", "generated/skbio.tree.TreeNode.__eq__", "generated/skbio.tree.TreeNode.__ge__", "generated/skbio.tree.TreeNode.__getitem__", "generated/skbio.tree.TreeNode.__getstate__", "generated/skbio.tree.TreeNode.__gt__", "generated/skbio.tree.TreeNode.__hash__", "generated/skbio.tree.TreeNode.__iter__", "generated/skbio.tree.TreeNode.__le__", "generated/skbio.tree.TreeNode.__len__", "generated/skbio.tree.TreeNode.__lt__", "generated/skbio.tree.TreeNode.__ne__", "generated/skbio.tree.TreeNode.__str__", "generated/skbio.tree.TreeNode.accumulate_to_ancestor", "generated/skbio.tree.TreeNode.ancestors", "generated/skbio.tree.TreeNode.append", "generated/skbio.tree.TreeNode.ascii_art", "generated/skbio.tree.TreeNode.assign_ids", "generated/skbio.tree.TreeNode.assign_supports", "generated/skbio.tree.TreeNode.bifurcate", "generated/skbio.tree.TreeNode.cache_attr", "generated/skbio.tree.TreeNode.compare_rfd", "generated/skbio.tree.TreeNode.compare_subsets", "generated/skbio.tree.TreeNode.compare_tip_distances", "generated/skbio.tree.TreeNode.copy", "generated/skbio.tree.TreeNode.count", "generated/skbio.tree.TreeNode.create_caches", "generated/skbio.tree.TreeNode.deepcopy", "generated/skbio.tree.TreeNode.descending_branch_length", "generated/skbio.tree.TreeNode.distance", "generated/skbio.tree.TreeNode.extend", "generated/skbio.tree.TreeNode.find", "generated/skbio.tree.TreeNode.find_all", "generated/skbio.tree.TreeNode.find_by_func", "generated/skbio.tree.TreeNode.find_by_id", "generated/skbio.tree.TreeNode.from_linkage_matrix", "generated/skbio.tree.TreeNode.from_taxdump", "generated/skbio.tree.TreeNode.from_taxonomy", "generated/skbio.tree.TreeNode.get_max_distance", "generated/skbio.tree.TreeNode.has_children", "generated/skbio.tree.TreeNode.index_tree", "generated/skbio.tree.TreeNode.invalidate_caches", "generated/skbio.tree.TreeNode.is_root", "generated/skbio.tree.TreeNode.is_tip", "generated/skbio.tree.TreeNode.lca", "generated/skbio.tree.TreeNode.levelorder", "generated/skbio.tree.TreeNode.lowest_common_ancestor", "generated/skbio.tree.TreeNode.neighbors", "generated/skbio.tree.TreeNode.non_tips", "generated/skbio.tree.TreeNode.observed_node_counts", "generated/skbio.tree.TreeNode.pop", "generated/skbio.tree.TreeNode.postorder", "generated/skbio.tree.TreeNode.pre_and_postorder", "generated/skbio.tree.TreeNode.preorder", "generated/skbio.tree.TreeNode.prune", "generated/skbio.tree.TreeNode.read", "generated/skbio.tree.TreeNode.remove", "generated/skbio.tree.TreeNode.remove_deleted", "generated/skbio.tree.TreeNode.root", "generated/skbio.tree.TreeNode.root_at", "generated/skbio.tree.TreeNode.root_at_midpoint", "generated/skbio.tree.TreeNode.shear", "generated/skbio.tree.TreeNode.shuffle", "generated/skbio.tree.TreeNode.siblings", "generated/skbio.tree.TreeNode.subset", "generated/skbio.tree.TreeNode.subsets", "generated/skbio.tree.TreeNode.subtree", "generated/skbio.tree.TreeNode.tip_tip_distances", "generated/skbio.tree.TreeNode.tips", "generated/skbio.tree.TreeNode.to_array", "generated/skbio.tree.TreeNode.to_taxonomy", "generated/skbio.tree.TreeNode.traverse", "generated/skbio.tree.TreeNode.unpack", "generated/skbio.tree.TreeNode.unpack_by_func", "generated/skbio.tree.TreeNode.unrooted_copy", "generated/skbio.tree.TreeNode.unrooted_deepcopy", "generated/skbio.tree.TreeNode.write", "generated/skbio.tree.majority_rule", "generated/skbio.tree.nj", "generated/skbio.util.EfficiencyWarning", "generated/skbio.util.RepresentationWarning", "generated/skbio.util.assert_data_frame_almost_equal", "generated/skbio.util.assert_ordination_results_equal", "generated/skbio.util.cardinal_to_ordinal", "generated/skbio.util.classproperty", "generated/skbio.util.classproperty.__delete__", "generated/skbio.util.classproperty.__eq__", "generated/skbio.util.classproperty.__ge__", "generated/skbio.util.classproperty.__get__", "generated/skbio.util.classproperty.__getstate__", "generated/skbio.util.classproperty.__gt__", "generated/skbio.util.classproperty.__hash__", "generated/skbio.util.classproperty.__le__", "generated/skbio.util.classproperty.__lt__", "generated/skbio.util.classproperty.__ne__", "generated/skbio.util.classproperty.__set__", "generated/skbio.util.classproperty.__set_name__", "generated/skbio.util.classproperty.__str__", "generated/skbio.util.classproperty.deleter", "generated/skbio.util.classproperty.getter", "generated/skbio.util.classproperty.setter", "generated/skbio.util.find_duplicates", "generated/skbio.util.get_data_path", "generated/skbio.util.safe_md5", "generated/skbio.workflow.Workflow", "generated/skbio.workflow.Workflow.__call__", "generated/skbio.workflow.Workflow.__eq__", "generated/skbio.workflow.Workflow.__ge__", "generated/skbio.workflow.Workflow.__getstate__", "generated/skbio.workflow.Workflow.__gt__", "generated/skbio.workflow.Workflow.__hash__", "generated/skbio.workflow.Workflow.__le__", "generated/skbio.workflow.Workflow.__lt__", "generated/skbio.workflow.Workflow.__ne__", "generated/skbio.workflow.Workflow.__str__", "generated/skbio.workflow.Workflow.initialize_state", "generated/skbio.workflow.method", "generated/skbio.workflow.method.__call__", "generated/skbio.workflow.method.__eq__", "generated/skbio.workflow.method.__ge__", "generated/skbio.workflow.method.__getstate__", "generated/skbio.workflow.method.__gt__", "generated/skbio.workflow.method.__hash__", "generated/skbio.workflow.method.__le__", "generated/skbio.workflow.method.__lt__", "generated/skbio.workflow.method.__ne__", "generated/skbio.workflow.method.__str__", "generated/skbio.workflow.requires", "generated/skbio.workflow.requires.__call__", "generated/skbio.workflow.requires.__eq__", "generated/skbio.workflow.requires.__ge__", "generated/skbio.workflow.requires.__getstate__", "generated/skbio.workflow.requires.__gt__", "generated/skbio.workflow.requires.__hash__", "generated/skbio.workflow.requires.__le__", "generated/skbio.workflow.requires.__lt__", "generated/skbio.workflow.requires.__ne__", "generated/skbio.workflow.requires.__str__", "index", "io", "metadata", "sequence", "stats", "tree", "util", "workflow"], "filenames": ["alignment.rst", "diversity.rst", "generated/skbio.alignment.AlignmentStructure.rst", "generated/skbio.alignment.AlignmentStructure.__eq__.rst", "generated/skbio.alignment.AlignmentStructure.__ge__.rst", "generated/skbio.alignment.AlignmentStructure.__getitem__.rst", "generated/skbio.alignment.AlignmentStructure.__getstate__.rst", "generated/skbio.alignment.AlignmentStructure.__gt__.rst", "generated/skbio.alignment.AlignmentStructure.__hash__.rst", "generated/skbio.alignment.AlignmentStructure.__le__.rst", "generated/skbio.alignment.AlignmentStructure.__lt__.rst", "generated/skbio.alignment.AlignmentStructure.__ne__.rst", "generated/skbio.alignment.AlignmentStructure.__setstate__.rst", "generated/skbio.alignment.AlignmentStructure.__str__.rst", "generated/skbio.alignment.AlignmentStructure.is_zero_based.rst", "generated/skbio.alignment.AlignmentStructure.set_zero_based.rst", "generated/skbio.alignment.StripedSmithWaterman.rst", "generated/skbio.alignment.StripedSmithWaterman.__call__.rst", "generated/skbio.alignment.StripedSmithWaterman.__eq__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ge__.rst", "generated/skbio.alignment.StripedSmithWaterman.__getstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__gt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__hash__.rst", "generated/skbio.alignment.StripedSmithWaterman.__le__.rst", "generated/skbio.alignment.StripedSmithWaterman.__lt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ne__.rst", "generated/skbio.alignment.StripedSmithWaterman.__setstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__str__.rst", "generated/skbio.alignment.TabularMSA.rst", "generated/skbio.alignment.TabularMSA.__bool__.rst", "generated/skbio.alignment.TabularMSA.__contains__.rst", "generated/skbio.alignment.TabularMSA.__copy__.rst", "generated/skbio.alignment.TabularMSA.__deepcopy__.rst", "generated/skbio.alignment.TabularMSA.__eq__.rst", "generated/skbio.alignment.TabularMSA.__ge__.rst", "generated/skbio.alignment.TabularMSA.__getitem__.rst", "generated/skbio.alignment.TabularMSA.__getstate__.rst", "generated/skbio.alignment.TabularMSA.__gt__.rst", "generated/skbio.alignment.TabularMSA.__iter__.rst", "generated/skbio.alignment.TabularMSA.__le__.rst", "generated/skbio.alignment.TabularMSA.__len__.rst", "generated/skbio.alignment.TabularMSA.__lt__.rst", "generated/skbio.alignment.TabularMSA.__ne__.rst", "generated/skbio.alignment.TabularMSA.__reversed__.rst", "generated/skbio.alignment.TabularMSA.__str__.rst", "generated/skbio.alignment.TabularMSA.append.rst", "generated/skbio.alignment.TabularMSA.consensus.rst", "generated/skbio.alignment.TabularMSA.conservation.rst", "generated/skbio.alignment.TabularMSA.extend.rst", "generated/skbio.alignment.TabularMSA.from_dict.rst", "generated/skbio.alignment.TabularMSA.gap_frequencies.rst", "generated/skbio.alignment.TabularMSA.has_metadata.rst", "generated/skbio.alignment.TabularMSA.has_positional_metadata.rst", "generated/skbio.alignment.TabularMSA.iter_positions.rst", "generated/skbio.alignment.TabularMSA.join.rst", "generated/skbio.alignment.TabularMSA.read.rst", "generated/skbio.alignment.TabularMSA.reassign_index.rst", "generated/skbio.alignment.TabularMSA.sort.rst", "generated/skbio.alignment.TabularMSA.to_dict.rst", "generated/skbio.alignment.TabularMSA.write.rst", "generated/skbio.alignment.global_pairwise_align.rst", "generated/skbio.alignment.global_pairwise_align_nucleotide.rst", "generated/skbio.alignment.global_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align.rst", "generated/skbio.alignment.local_pairwise_align_nucleotide.rst", "generated/skbio.alignment.local_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align_ssw.rst", "generated/skbio.alignment.make_identity_substitution_matrix.rst", "generated/skbio.diversity.alpha.rst", "generated/skbio.diversity.alpha.ace.rst", "generated/skbio.diversity.alpha.berger_parker_d.rst", "generated/skbio.diversity.alpha.brillouin_d.rst", "generated/skbio.diversity.alpha.chao1.rst", "generated/skbio.diversity.alpha.chao1_ci.rst", "generated/skbio.diversity.alpha.dominance.rst", "generated/skbio.diversity.alpha.doubles.rst", "generated/skbio.diversity.alpha.enspie.rst", "generated/skbio.diversity.alpha.esty_ci.rst", "generated/skbio.diversity.alpha.faith_pd.rst", "generated/skbio.diversity.alpha.fisher_alpha.rst", "generated/skbio.diversity.alpha.gini_index.rst", "generated/skbio.diversity.alpha.goods_coverage.rst", "generated/skbio.diversity.alpha.heip_e.rst", "generated/skbio.diversity.alpha.kempton_taylor_q.rst", "generated/skbio.diversity.alpha.lladser_ci.rst", "generated/skbio.diversity.alpha.lladser_pe.rst", "generated/skbio.diversity.alpha.margalef.rst", "generated/skbio.diversity.alpha.mcintosh_d.rst", "generated/skbio.diversity.alpha.mcintosh_e.rst", "generated/skbio.diversity.alpha.menhinick.rst", "generated/skbio.diversity.alpha.michaelis_menten_fit.rst", "generated/skbio.diversity.alpha.observed_features.rst", "generated/skbio.diversity.alpha.observed_otus.rst", "generated/skbio.diversity.alpha.osd.rst", "generated/skbio.diversity.alpha.phydiv.rst", "generated/skbio.diversity.alpha.pielou_e.rst", "generated/skbio.diversity.alpha.robbins.rst", "generated/skbio.diversity.alpha.shannon.rst", "generated/skbio.diversity.alpha.simpson.rst", "generated/skbio.diversity.alpha.simpson_e.rst", "generated/skbio.diversity.alpha.singles.rst", "generated/skbio.diversity.alpha.sobs.rst", "generated/skbio.diversity.alpha.strong.rst", "generated/skbio.diversity.alpha_diversity.rst", "generated/skbio.diversity.beta.rst", "generated/skbio.diversity.beta.unweighted_unifrac.rst", "generated/skbio.diversity.beta.weighted_unifrac.rst", "generated/skbio.diversity.beta_diversity.rst", "generated/skbio.diversity.block_beta_diversity.rst", "generated/skbio.diversity.get_alpha_diversity_metrics.rst", "generated/skbio.diversity.get_beta_diversity_metrics.rst", "generated/skbio.diversity.partial_beta_diversity.rst", "generated/skbio.io.ArgumentOverrideWarning.rst", "generated/skbio.io.BLAST7FormatError.rst", "generated/skbio.io.ClustalFormatError.rst", "generated/skbio.io.EMBLFormatError.rst", "generated/skbio.io.FASTAFormatError.rst", "generated/skbio.io.FASTQFormatError.rst", "generated/skbio.io.FileFormatError.rst", "generated/skbio.io.FormatIdentificationWarning.rst", "generated/skbio.io.GFF3FormatError.rst", "generated/skbio.io.GenBankFormatError.rst", "generated/skbio.io.IOSourceError.rst", "generated/skbio.io.LSMatFormatError.rst", "generated/skbio.io.NewickFormatError.rst", "generated/skbio.io.OrdinationFormatError.rst", "generated/skbio.io.PhylipFormatError.rst", "generated/skbio.io.QSeqFormatError.rst", "generated/skbio.io.QUALFormatError.rst", "generated/skbio.io.StockholmFormatError.rst", "generated/skbio.io.UnrecognizedFormatError.rst", "generated/skbio.io.format.binary_dm.rst", "generated/skbio.io.format.blast6.rst", "generated/skbio.io.format.blast7.rst", "generated/skbio.io.format.clustal.rst", "generated/skbio.io.format.embl.rst", "generated/skbio.io.format.fasta.rst", "generated/skbio.io.format.fastq.rst", "generated/skbio.io.format.genbank.rst", "generated/skbio.io.format.gff3.rst", "generated/skbio.io.format.lsmat.rst", "generated/skbio.io.format.newick.rst", "generated/skbio.io.format.ordination.rst", "generated/skbio.io.format.phylip.rst", "generated/skbio.io.format.qseq.rst", "generated/skbio.io.format.stockholm.rst", "generated/skbio.io.format.taxdump.rst", "generated/skbio.io.registry.rst", "generated/skbio.io.registry.DuplicateRegistrationError.rst", "generated/skbio.io.registry.Format.rst", "generated/skbio.io.registry.Format.__eq__.rst", "generated/skbio.io.registry.Format.__ge__.rst", "generated/skbio.io.registry.Format.__getstate__.rst", "generated/skbio.io.registry.Format.__gt__.rst", "generated/skbio.io.registry.Format.__hash__.rst", "generated/skbio.io.registry.Format.__le__.rst", "generated/skbio.io.registry.Format.__lt__.rst", "generated/skbio.io.registry.Format.__ne__.rst", "generated/skbio.io.registry.Format.__str__.rst", "generated/skbio.io.registry.Format.reader.rst", "generated/skbio.io.registry.Format.sniffer.rst", "generated/skbio.io.registry.Format.writer.rst", "generated/skbio.io.registry.IORegistry.rst", "generated/skbio.io.registry.IORegistry.__eq__.rst", "generated/skbio.io.registry.IORegistry.__ge__.rst", "generated/skbio.io.registry.IORegistry.__getstate__.rst", "generated/skbio.io.registry.IORegistry.__gt__.rst", "generated/skbio.io.registry.IORegistry.__hash__.rst", "generated/skbio.io.registry.IORegistry.__le__.rst", "generated/skbio.io.registry.IORegistry.__lt__.rst", "generated/skbio.io.registry.IORegistry.__ne__.rst", "generated/skbio.io.registry.IORegistry.__str__.rst", "generated/skbio.io.registry.IORegistry.add_format.rst", "generated/skbio.io.registry.IORegistry.create_format.rst", "generated/skbio.io.registry.IORegistry.get_reader.rst", "generated/skbio.io.registry.IORegistry.get_sniffer.rst", "generated/skbio.io.registry.IORegistry.get_writer.rst", "generated/skbio.io.registry.IORegistry.list_read_formats.rst", "generated/skbio.io.registry.IORegistry.list_write_formats.rst", "generated/skbio.io.registry.IORegistry.monkey_patch.rst", "generated/skbio.io.registry.IORegistry.read.rst", "generated/skbio.io.registry.IORegistry.sniff.rst", "generated/skbio.io.registry.IORegistry.write.rst", "generated/skbio.io.registry.InvalidRegistrationError.rst", "generated/skbio.io.registry.create_format.rst", "generated/skbio.io.registry.read.rst", "generated/skbio.io.registry.sniff.rst", "generated/skbio.io.registry.write.rst", "generated/skbio.io.util.rst", "generated/skbio.io.util.open.rst", "generated/skbio.io.util.open_file.rst", "generated/skbio.io.util.open_files.rst", "generated/skbio.metadata.Interval.rst", "generated/skbio.metadata.Interval.__eq__.rst", "generated/skbio.metadata.Interval.__ge__.rst", "generated/skbio.metadata.Interval.__getstate__.rst", "generated/skbio.metadata.Interval.__gt__.rst", "generated/skbio.metadata.Interval.__le__.rst", "generated/skbio.metadata.Interval.__lt__.rst", "generated/skbio.metadata.Interval.__ne__.rst", "generated/skbio.metadata.Interval.__str__.rst", "generated/skbio.metadata.Interval.drop.rst", "generated/skbio.metadata.IntervalMetadata.rst", "generated/skbio.metadata.IntervalMetadata.__copy__.rst", "generated/skbio.metadata.IntervalMetadata.__deepcopy__.rst", "generated/skbio.metadata.IntervalMetadata.__eq__.rst", "generated/skbio.metadata.IntervalMetadata.__ge__.rst", "generated/skbio.metadata.IntervalMetadata.__getstate__.rst", "generated/skbio.metadata.IntervalMetadata.__gt__.rst", "generated/skbio.metadata.IntervalMetadata.__le__.rst", "generated/skbio.metadata.IntervalMetadata.__lt__.rst", "generated/skbio.metadata.IntervalMetadata.__ne__.rst", "generated/skbio.metadata.IntervalMetadata.__str__.rst", "generated/skbio.metadata.IntervalMetadata.add.rst", "generated/skbio.metadata.IntervalMetadata.concat.rst", "generated/skbio.metadata.IntervalMetadata.drop.rst", "generated/skbio.metadata.IntervalMetadata.merge.rst", "generated/skbio.metadata.IntervalMetadata.query.rst", "generated/skbio.metadata.IntervalMetadata.read.rst", "generated/skbio.metadata.IntervalMetadata.sort.rst", "generated/skbio.metadata.IntervalMetadata.write.rst", "generated/skbio.sequence.DNA.rst", "generated/skbio.sequence.DNA.__bool__.rst", "generated/skbio.sequence.DNA.__contains__.rst", "generated/skbio.sequence.DNA.__copy__.rst", "generated/skbio.sequence.DNA.__deepcopy__.rst", "generated/skbio.sequence.DNA.__eq__.rst", "generated/skbio.sequence.DNA.__ge__.rst", "generated/skbio.sequence.DNA.__getitem__.rst", "generated/skbio.sequence.DNA.__getstate__.rst", "generated/skbio.sequence.DNA.__gt__.rst", "generated/skbio.sequence.DNA.__iter__.rst", "generated/skbio.sequence.DNA.__le__.rst", "generated/skbio.sequence.DNA.__len__.rst", "generated/skbio.sequence.DNA.__lt__.rst", "generated/skbio.sequence.DNA.__ne__.rst", "generated/skbio.sequence.DNA.__reversed__.rst", "generated/skbio.sequence.DNA.__str__.rst", "generated/skbio.sequence.DNA.complement.rst", "generated/skbio.sequence.DNA.concat.rst", "generated/skbio.sequence.DNA.count.rst", "generated/skbio.sequence.DNA.definites.rst", "generated/skbio.sequence.DNA.degap.rst", "generated/skbio.sequence.DNA.degenerates.rst", "generated/skbio.sequence.DNA.distance.rst", "generated/skbio.sequence.DNA.expand_degenerates.rst", "generated/skbio.sequence.DNA.find_motifs.rst", "generated/skbio.sequence.DNA.find_with_regex.rst", "generated/skbio.sequence.DNA.frequencies.rst", "generated/skbio.sequence.DNA.gaps.rst", "generated/skbio.sequence.DNA.gc_content.rst", "generated/skbio.sequence.DNA.gc_frequency.rst", "generated/skbio.sequence.DNA.has_definites.rst", "generated/skbio.sequence.DNA.has_degenerates.rst", "generated/skbio.sequence.DNA.has_gaps.rst", "generated/skbio.sequence.DNA.has_interval_metadata.rst", "generated/skbio.sequence.DNA.has_metadata.rst", "generated/skbio.sequence.DNA.has_nondegenerates.rst", "generated/skbio.sequence.DNA.has_positional_metadata.rst", "generated/skbio.sequence.DNA.index.rst", "generated/skbio.sequence.DNA.is_reverse_complement.rst", "generated/skbio.sequence.DNA.iter_contiguous.rst", "generated/skbio.sequence.DNA.iter_kmers.rst", "generated/skbio.sequence.DNA.kmer_frequencies.rst", "generated/skbio.sequence.DNA.lowercase.rst", "generated/skbio.sequence.DNA.match_frequency.rst", "generated/skbio.sequence.DNA.matches.rst", "generated/skbio.sequence.DNA.mismatch_frequency.rst", "generated/skbio.sequence.DNA.mismatches.rst", "generated/skbio.sequence.DNA.nondegenerates.rst", "generated/skbio.sequence.DNA.read.rst", "generated/skbio.sequence.DNA.replace.rst", "generated/skbio.sequence.DNA.reverse_complement.rst", "generated/skbio.sequence.DNA.to_definites.rst", "generated/skbio.sequence.DNA.to_indices.rst", "generated/skbio.sequence.DNA.to_regex.rst", "generated/skbio.sequence.DNA.transcribe.rst", "generated/skbio.sequence.DNA.translate.rst", "generated/skbio.sequence.DNA.translate_six_frames.rst", "generated/skbio.sequence.DNA.write.rst", "generated/skbio.sequence.GeneticCode.rst", "generated/skbio.sequence.GeneticCode.__eq__.rst", "generated/skbio.sequence.GeneticCode.__ge__.rst", "generated/skbio.sequence.GeneticCode.__getstate__.rst", "generated/skbio.sequence.GeneticCode.__gt__.rst", "generated/skbio.sequence.GeneticCode.__le__.rst", "generated/skbio.sequence.GeneticCode.__lt__.rst", "generated/skbio.sequence.GeneticCode.__ne__.rst", "generated/skbio.sequence.GeneticCode.__str__.rst", "generated/skbio.sequence.GeneticCode.from_ncbi.rst", "generated/skbio.sequence.GeneticCode.translate.rst", "generated/skbio.sequence.GeneticCode.translate_six_frames.rst", "generated/skbio.sequence.GrammaredSequence.rst", "generated/skbio.sequence.GrammaredSequence.__bool__.rst", "generated/skbio.sequence.GrammaredSequence.__contains__.rst", "generated/skbio.sequence.GrammaredSequence.__copy__.rst", "generated/skbio.sequence.GrammaredSequence.__deepcopy__.rst", "generated/skbio.sequence.GrammaredSequence.__eq__.rst", "generated/skbio.sequence.GrammaredSequence.__ge__.rst", "generated/skbio.sequence.GrammaredSequence.__getitem__.rst", "generated/skbio.sequence.GrammaredSequence.__getstate__.rst", "generated/skbio.sequence.GrammaredSequence.__gt__.rst", "generated/skbio.sequence.GrammaredSequence.__iter__.rst", "generated/skbio.sequence.GrammaredSequence.__le__.rst", "generated/skbio.sequence.GrammaredSequence.__len__.rst", "generated/skbio.sequence.GrammaredSequence.__lt__.rst", "generated/skbio.sequence.GrammaredSequence.__ne__.rst", "generated/skbio.sequence.GrammaredSequence.__reversed__.rst", "generated/skbio.sequence.GrammaredSequence.__str__.rst", "generated/skbio.sequence.GrammaredSequence.concat.rst", "generated/skbio.sequence.GrammaredSequence.count.rst", "generated/skbio.sequence.GrammaredSequence.definites.rst", "generated/skbio.sequence.GrammaredSequence.degap.rst", "generated/skbio.sequence.GrammaredSequence.degenerates.rst", "generated/skbio.sequence.GrammaredSequence.distance.rst", "generated/skbio.sequence.GrammaredSequence.expand_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.find_motifs.rst", "generated/skbio.sequence.GrammaredSequence.find_with_regex.rst", "generated/skbio.sequence.GrammaredSequence.frequencies.rst", "generated/skbio.sequence.GrammaredSequence.gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_definites.rst", "generated/skbio.sequence.GrammaredSequence.has_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata.rst", "generated/skbio.sequence.GrammaredSequence.index.rst", "generated/skbio.sequence.GrammaredSequence.iter_contiguous.rst", "generated/skbio.sequence.GrammaredSequence.iter_kmers.rst", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies.rst", "generated/skbio.sequence.GrammaredSequence.lowercase.rst", "generated/skbio.sequence.GrammaredSequence.match_frequency.rst", "generated/skbio.sequence.GrammaredSequence.matches.rst", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency.rst", "generated/skbio.sequence.GrammaredSequence.mismatches.rst", "generated/skbio.sequence.GrammaredSequence.nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.read.rst", "generated/skbio.sequence.GrammaredSequence.replace.rst", "generated/skbio.sequence.GrammaredSequence.to_definites.rst", "generated/skbio.sequence.GrammaredSequence.to_indices.rst", "generated/skbio.sequence.GrammaredSequence.to_regex.rst", "generated/skbio.sequence.GrammaredSequence.write.rst", "generated/skbio.sequence.Protein.rst", "generated/skbio.sequence.Protein.__bool__.rst", "generated/skbio.sequence.Protein.__contains__.rst", "generated/skbio.sequence.Protein.__copy__.rst", "generated/skbio.sequence.Protein.__deepcopy__.rst", "generated/skbio.sequence.Protein.__eq__.rst", "generated/skbio.sequence.Protein.__ge__.rst", "generated/skbio.sequence.Protein.__getitem__.rst", "generated/skbio.sequence.Protein.__getstate__.rst", "generated/skbio.sequence.Protein.__gt__.rst", "generated/skbio.sequence.Protein.__iter__.rst", "generated/skbio.sequence.Protein.__le__.rst", "generated/skbio.sequence.Protein.__len__.rst", "generated/skbio.sequence.Protein.__lt__.rst", "generated/skbio.sequence.Protein.__ne__.rst", "generated/skbio.sequence.Protein.__reversed__.rst", "generated/skbio.sequence.Protein.__str__.rst", "generated/skbio.sequence.Protein.concat.rst", "generated/skbio.sequence.Protein.count.rst", "generated/skbio.sequence.Protein.definites.rst", "generated/skbio.sequence.Protein.degap.rst", "generated/skbio.sequence.Protein.degenerates.rst", "generated/skbio.sequence.Protein.distance.rst", "generated/skbio.sequence.Protein.expand_degenerates.rst", "generated/skbio.sequence.Protein.find_motifs.rst", "generated/skbio.sequence.Protein.find_with_regex.rst", "generated/skbio.sequence.Protein.frequencies.rst", "generated/skbio.sequence.Protein.gaps.rst", "generated/skbio.sequence.Protein.has_definites.rst", "generated/skbio.sequence.Protein.has_degenerates.rst", "generated/skbio.sequence.Protein.has_gaps.rst", "generated/skbio.sequence.Protein.has_interval_metadata.rst", "generated/skbio.sequence.Protein.has_metadata.rst", "generated/skbio.sequence.Protein.has_nondegenerates.rst", "generated/skbio.sequence.Protein.has_positional_metadata.rst", "generated/skbio.sequence.Protein.has_stops.rst", "generated/skbio.sequence.Protein.index.rst", "generated/skbio.sequence.Protein.iter_contiguous.rst", "generated/skbio.sequence.Protein.iter_kmers.rst", "generated/skbio.sequence.Protein.kmer_frequencies.rst", "generated/skbio.sequence.Protein.lowercase.rst", "generated/skbio.sequence.Protein.match_frequency.rst", "generated/skbio.sequence.Protein.matches.rst", "generated/skbio.sequence.Protein.mismatch_frequency.rst", "generated/skbio.sequence.Protein.mismatches.rst", "generated/skbio.sequence.Protein.nondegenerates.rst", "generated/skbio.sequence.Protein.read.rst", "generated/skbio.sequence.Protein.replace.rst", "generated/skbio.sequence.Protein.stops.rst", "generated/skbio.sequence.Protein.to_definites.rst", "generated/skbio.sequence.Protein.to_indices.rst", "generated/skbio.sequence.Protein.to_regex.rst", "generated/skbio.sequence.Protein.write.rst", "generated/skbio.sequence.RNA.rst", "generated/skbio.sequence.RNA.__bool__.rst", "generated/skbio.sequence.RNA.__contains__.rst", "generated/skbio.sequence.RNA.__copy__.rst", "generated/skbio.sequence.RNA.__deepcopy__.rst", "generated/skbio.sequence.RNA.__eq__.rst", "generated/skbio.sequence.RNA.__ge__.rst", "generated/skbio.sequence.RNA.__getitem__.rst", "generated/skbio.sequence.RNA.__getstate__.rst", "generated/skbio.sequence.RNA.__gt__.rst", "generated/skbio.sequence.RNA.__iter__.rst", "generated/skbio.sequence.RNA.__le__.rst", "generated/skbio.sequence.RNA.__len__.rst", "generated/skbio.sequence.RNA.__lt__.rst", "generated/skbio.sequence.RNA.__ne__.rst", "generated/skbio.sequence.RNA.__reversed__.rst", "generated/skbio.sequence.RNA.__str__.rst", "generated/skbio.sequence.RNA.complement.rst", "generated/skbio.sequence.RNA.concat.rst", "generated/skbio.sequence.RNA.count.rst", "generated/skbio.sequence.RNA.definites.rst", "generated/skbio.sequence.RNA.degap.rst", "generated/skbio.sequence.RNA.degenerates.rst", "generated/skbio.sequence.RNA.distance.rst", "generated/skbio.sequence.RNA.expand_degenerates.rst", "generated/skbio.sequence.RNA.find_motifs.rst", "generated/skbio.sequence.RNA.find_with_regex.rst", "generated/skbio.sequence.RNA.frequencies.rst", "generated/skbio.sequence.RNA.gaps.rst", "generated/skbio.sequence.RNA.gc_content.rst", "generated/skbio.sequence.RNA.gc_frequency.rst", "generated/skbio.sequence.RNA.has_definites.rst", "generated/skbio.sequence.RNA.has_degenerates.rst", "generated/skbio.sequence.RNA.has_gaps.rst", "generated/skbio.sequence.RNA.has_interval_metadata.rst", "generated/skbio.sequence.RNA.has_metadata.rst", "generated/skbio.sequence.RNA.has_nondegenerates.rst", "generated/skbio.sequence.RNA.has_positional_metadata.rst", "generated/skbio.sequence.RNA.index.rst", "generated/skbio.sequence.RNA.is_reverse_complement.rst", "generated/skbio.sequence.RNA.iter_contiguous.rst", "generated/skbio.sequence.RNA.iter_kmers.rst", "generated/skbio.sequence.RNA.kmer_frequencies.rst", "generated/skbio.sequence.RNA.lowercase.rst", "generated/skbio.sequence.RNA.match_frequency.rst", "generated/skbio.sequence.RNA.matches.rst", "generated/skbio.sequence.RNA.mismatch_frequency.rst", "generated/skbio.sequence.RNA.mismatches.rst", "generated/skbio.sequence.RNA.nondegenerates.rst", "generated/skbio.sequence.RNA.read.rst", "generated/skbio.sequence.RNA.replace.rst", "generated/skbio.sequence.RNA.reverse_complement.rst", "generated/skbio.sequence.RNA.reverse_transcribe.rst", "generated/skbio.sequence.RNA.to_definites.rst", "generated/skbio.sequence.RNA.to_indices.rst", "generated/skbio.sequence.RNA.to_regex.rst", "generated/skbio.sequence.RNA.translate.rst", "generated/skbio.sequence.RNA.translate_six_frames.rst", "generated/skbio.sequence.RNA.write.rst", "generated/skbio.sequence.Sequence.rst", "generated/skbio.sequence.Sequence.__bool__.rst", "generated/skbio.sequence.Sequence.__contains__.rst", "generated/skbio.sequence.Sequence.__copy__.rst", "generated/skbio.sequence.Sequence.__deepcopy__.rst", "generated/skbio.sequence.Sequence.__eq__.rst", "generated/skbio.sequence.Sequence.__ge__.rst", "generated/skbio.sequence.Sequence.__getitem__.rst", "generated/skbio.sequence.Sequence.__getstate__.rst", "generated/skbio.sequence.Sequence.__gt__.rst", "generated/skbio.sequence.Sequence.__iter__.rst", "generated/skbio.sequence.Sequence.__le__.rst", "generated/skbio.sequence.Sequence.__len__.rst", "generated/skbio.sequence.Sequence.__lt__.rst", "generated/skbio.sequence.Sequence.__ne__.rst", "generated/skbio.sequence.Sequence.__reversed__.rst", "generated/skbio.sequence.Sequence.__str__.rst", "generated/skbio.sequence.Sequence.concat.rst", "generated/skbio.sequence.Sequence.count.rst", "generated/skbio.sequence.Sequence.distance.rst", "generated/skbio.sequence.Sequence.find_with_regex.rst", "generated/skbio.sequence.Sequence.frequencies.rst", "generated/skbio.sequence.Sequence.has_interval_metadata.rst", "generated/skbio.sequence.Sequence.has_metadata.rst", "generated/skbio.sequence.Sequence.has_positional_metadata.rst", "generated/skbio.sequence.Sequence.index.rst", "generated/skbio.sequence.Sequence.iter_contiguous.rst", "generated/skbio.sequence.Sequence.iter_kmers.rst", "generated/skbio.sequence.Sequence.kmer_frequencies.rst", "generated/skbio.sequence.Sequence.lowercase.rst", "generated/skbio.sequence.Sequence.match_frequency.rst", "generated/skbio.sequence.Sequence.matches.rst", "generated/skbio.sequence.Sequence.mismatch_frequency.rst", "generated/skbio.sequence.Sequence.mismatches.rst", "generated/skbio.sequence.Sequence.read.rst", "generated/skbio.sequence.Sequence.replace.rst", "generated/skbio.sequence.Sequence.to_indices.rst", "generated/skbio.sequence.Sequence.write.rst", "generated/skbio.sequence.SubstitutionMatrix.rst", "generated/skbio.sequence.SubstitutionMatrix.__contains__.rst", "generated/skbio.sequence.SubstitutionMatrix.__eq__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ge__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getitem__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getstate__.rst", "generated/skbio.sequence.SubstitutionMatrix.__gt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__le__.rst", "generated/skbio.sequence.SubstitutionMatrix.__lt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ne__.rst", "generated/skbio.sequence.SubstitutionMatrix.__str__.rst", "generated/skbio.sequence.SubstitutionMatrix.between.rst", "generated/skbio.sequence.SubstitutionMatrix.by_name.rst", "generated/skbio.sequence.SubstitutionMatrix.copy.rst", "generated/skbio.sequence.SubstitutionMatrix.filter.rst", "generated/skbio.sequence.SubstitutionMatrix.from_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.from_iterable.rst", "generated/skbio.sequence.SubstitutionMatrix.get_names.rst", "generated/skbio.sequence.SubstitutionMatrix.identity.rst", "generated/skbio.sequence.SubstitutionMatrix.index.rst", "generated/skbio.sequence.SubstitutionMatrix.plot.rst", "generated/skbio.sequence.SubstitutionMatrix.read.rst", "generated/skbio.sequence.SubstitutionMatrix.redundant_form.rst", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame.rst", "generated/skbio.sequence.SubstitutionMatrix.to_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.transpose.rst", "generated/skbio.sequence.SubstitutionMatrix.within.rst", "generated/skbio.sequence.SubstitutionMatrix.write.rst", "generated/skbio.sequence.distance.rst", "generated/skbio.sequence.distance.hamming.rst", "generated/skbio.sequence.distance.kmer_distance.rst", "generated/skbio.stats.composition.rst", "generated/skbio.stats.composition.alr.rst", "generated/skbio.stats.composition.alr_inv.rst", "generated/skbio.stats.composition.ancom.rst", "generated/skbio.stats.composition.centralize.rst", "generated/skbio.stats.composition.closure.rst", "generated/skbio.stats.composition.clr.rst", "generated/skbio.stats.composition.clr_inv.rst", "generated/skbio.stats.composition.dirmult_ttest.rst", "generated/skbio.stats.composition.ilr.rst", "generated/skbio.stats.composition.ilr_inv.rst", "generated/skbio.stats.composition.inner.rst", "generated/skbio.stats.composition.multiplicative_replacement.rst", "generated/skbio.stats.composition.pairwise_vlr.rst", "generated/skbio.stats.composition.perturb.rst", "generated/skbio.stats.composition.perturb_inv.rst", "generated/skbio.stats.composition.power.rst", "generated/skbio.stats.composition.sbp_basis.rst", "generated/skbio.stats.composition.tree_basis.rst", "generated/skbio.stats.composition.vlr.rst", "generated/skbio.stats.distance.rst", "generated/skbio.stats.distance.DissimilarityMatrix.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__le__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__str__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.between.rst", "generated/skbio.stats.distance.DissimilarityMatrix.copy.rst", "generated/skbio.stats.distance.DissimilarityMatrix.filter.rst", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable.rst", "generated/skbio.stats.distance.DissimilarityMatrix.index.rst", "generated/skbio.stats.distance.DissimilarityMatrix.plot.rst", "generated/skbio.stats.distance.DissimilarityMatrix.read.rst", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form.rst", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DissimilarityMatrix.transpose.rst", "generated/skbio.stats.distance.DissimilarityMatrix.within.rst", "generated/skbio.stats.distance.DissimilarityMatrix.write.rst", "generated/skbio.stats.distance.DissimilarityMatrixError.rst", "generated/skbio.stats.distance.DistanceMatrix.rst", "generated/skbio.stats.distance.DistanceMatrix.__contains__.rst", "generated/skbio.stats.distance.DistanceMatrix.__eq__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ge__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getitem__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getstate__.rst", "generated/skbio.stats.distance.DistanceMatrix.__gt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__le__.rst", "generated/skbio.stats.distance.DistanceMatrix.__lt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ne__.rst", "generated/skbio.stats.distance.DistanceMatrix.__str__.rst", "generated/skbio.stats.distance.DistanceMatrix.between.rst", "generated/skbio.stats.distance.DistanceMatrix.condensed_form.rst", "generated/skbio.stats.distance.DistanceMatrix.copy.rst", "generated/skbio.stats.distance.DistanceMatrix.filter.rst", "generated/skbio.stats.distance.DistanceMatrix.from_iterable.rst", "generated/skbio.stats.distance.DistanceMatrix.index.rst", "generated/skbio.stats.distance.DistanceMatrix.permute.rst", "generated/skbio.stats.distance.DistanceMatrix.plot.rst", "generated/skbio.stats.distance.DistanceMatrix.read.rst", "generated/skbio.stats.distance.DistanceMatrix.redundant_form.rst", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DistanceMatrix.to_series.rst", "generated/skbio.stats.distance.DistanceMatrix.transpose.rst", "generated/skbio.stats.distance.DistanceMatrix.within.rst", "generated/skbio.stats.distance.DistanceMatrix.write.rst", "generated/skbio.stats.distance.DistanceMatrixError.rst", "generated/skbio.stats.distance.MissingIDError.rst", "generated/skbio.stats.distance.anosim.rst", "generated/skbio.stats.distance.bioenv.rst", "generated/skbio.stats.distance.mantel.rst", "generated/skbio.stats.distance.permanova.rst", "generated/skbio.stats.distance.permdisp.rst", "generated/skbio.stats.distance.pwmantel.rst", "generated/skbio.stats.distance.randdm.rst", "generated/skbio.stats.evolve.rst", "generated/skbio.stats.evolve.hommola_cospeciation.rst", "generated/skbio.stats.gradient.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.CategoryResults.rst", "generated/skbio.stats.gradient.CategoryResults.__eq__.rst", "generated/skbio.stats.gradient.CategoryResults.__ge__.rst", "generated/skbio.stats.gradient.CategoryResults.__getstate__.rst", "generated/skbio.stats.gradient.CategoryResults.__gt__.rst", "generated/skbio.stats.gradient.CategoryResults.__hash__.rst", "generated/skbio.stats.gradient.CategoryResults.__le__.rst", "generated/skbio.stats.gradient.CategoryResults.__lt__.rst", "generated/skbio.stats.gradient.CategoryResults.__ne__.rst", "generated/skbio.stats.gradient.CategoryResults.__str__.rst", "generated/skbio.stats.gradient.CategoryResults.to_files.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVA.rst", "generated/skbio.stats.gradient.GradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVA.__le__.rst", "generated/skbio.stats.gradient.GradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVA.__str__.rst", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVAResults.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__le__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__str__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.to_files.rst", "generated/skbio.stats.gradient.GroupResults.rst", "generated/skbio.stats.gradient.GroupResults.__eq__.rst", "generated/skbio.stats.gradient.GroupResults.__ge__.rst", "generated/skbio.stats.gradient.GroupResults.__getstate__.rst", "generated/skbio.stats.gradient.GroupResults.__gt__.rst", "generated/skbio.stats.gradient.GroupResults.__hash__.rst", "generated/skbio.stats.gradient.GroupResults.__le__.rst", "generated/skbio.stats.gradient.GroupResults.__lt__.rst", "generated/skbio.stats.gradient.GroupResults.__ne__.rst", "generated/skbio.stats.gradient.GroupResults.__str__.rst", "generated/skbio.stats.gradient.GroupResults.to_files.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.isubsample.rst", "generated/skbio.stats.ordination.rst", "generated/skbio.stats.ordination.OrdinationResults.rst", "generated/skbio.stats.ordination.OrdinationResults.__eq__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ge__.rst", "generated/skbio.stats.ordination.OrdinationResults.__getstate__.rst", "generated/skbio.stats.ordination.OrdinationResults.__gt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__hash__.rst", "generated/skbio.stats.ordination.OrdinationResults.__le__.rst", "generated/skbio.stats.ordination.OrdinationResults.__lt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ne__.rst", "generated/skbio.stats.ordination.OrdinationResults.__str__.rst", "generated/skbio.stats.ordination.OrdinationResults.plot.rst", "generated/skbio.stats.ordination.OrdinationResults.read.rst", "generated/skbio.stats.ordination.OrdinationResults.write.rst", "generated/skbio.stats.ordination.ca.rst", "generated/skbio.stats.ordination.cca.rst", "generated/skbio.stats.ordination.corr.rst", "generated/skbio.stats.ordination.e_matrix.rst", "generated/skbio.stats.ordination.f_matrix.rst", "generated/skbio.stats.ordination.mean_and_std.rst", "generated/skbio.stats.ordination.pcoa.rst", "generated/skbio.stats.ordination.pcoa_biplot.rst", "generated/skbio.stats.ordination.rda.rst", "generated/skbio.stats.ordination.scale.rst", "generated/skbio.stats.ordination.svd_rank.rst", "generated/skbio.stats.power.rst", "generated/skbio.stats.power.confidence_bound.rst", "generated/skbio.stats.power.paired_subsamples.rst", "generated/skbio.stats.power.subsample_paired_power.rst", "generated/skbio.stats.power.subsample_power.rst", "generated/skbio.stats.subsample_counts.rst", "generated/skbio.tree.DuplicateNodeError.rst", "generated/skbio.tree.MissingNodeError.rst", "generated/skbio.tree.NoLengthError.rst", "generated/skbio.tree.NoParentError.rst", "generated/skbio.tree.TreeError.rst", "generated/skbio.tree.TreeNode.rst", "generated/skbio.tree.TreeNode.__copy__.rst", "generated/skbio.tree.TreeNode.__deepcopy__.rst", "generated/skbio.tree.TreeNode.__eq__.rst", "generated/skbio.tree.TreeNode.__ge__.rst", "generated/skbio.tree.TreeNode.__getitem__.rst", "generated/skbio.tree.TreeNode.__getstate__.rst", "generated/skbio.tree.TreeNode.__gt__.rst", "generated/skbio.tree.TreeNode.__hash__.rst", "generated/skbio.tree.TreeNode.__iter__.rst", "generated/skbio.tree.TreeNode.__le__.rst", "generated/skbio.tree.TreeNode.__len__.rst", "generated/skbio.tree.TreeNode.__lt__.rst", "generated/skbio.tree.TreeNode.__ne__.rst", "generated/skbio.tree.TreeNode.__str__.rst", "generated/skbio.tree.TreeNode.accumulate_to_ancestor.rst", "generated/skbio.tree.TreeNode.ancestors.rst", "generated/skbio.tree.TreeNode.append.rst", "generated/skbio.tree.TreeNode.ascii_art.rst", "generated/skbio.tree.TreeNode.assign_ids.rst", "generated/skbio.tree.TreeNode.assign_supports.rst", "generated/skbio.tree.TreeNode.bifurcate.rst", "generated/skbio.tree.TreeNode.cache_attr.rst", "generated/skbio.tree.TreeNode.compare_rfd.rst", "generated/skbio.tree.TreeNode.compare_subsets.rst", "generated/skbio.tree.TreeNode.compare_tip_distances.rst", "generated/skbio.tree.TreeNode.copy.rst", "generated/skbio.tree.TreeNode.count.rst", "generated/skbio.tree.TreeNode.create_caches.rst", "generated/skbio.tree.TreeNode.deepcopy.rst", "generated/skbio.tree.TreeNode.descending_branch_length.rst", "generated/skbio.tree.TreeNode.distance.rst", "generated/skbio.tree.TreeNode.extend.rst", "generated/skbio.tree.TreeNode.find.rst", "generated/skbio.tree.TreeNode.find_all.rst", "generated/skbio.tree.TreeNode.find_by_func.rst", "generated/skbio.tree.TreeNode.find_by_id.rst", "generated/skbio.tree.TreeNode.from_linkage_matrix.rst", "generated/skbio.tree.TreeNode.from_taxdump.rst", "generated/skbio.tree.TreeNode.from_taxonomy.rst", "generated/skbio.tree.TreeNode.get_max_distance.rst", "generated/skbio.tree.TreeNode.has_children.rst", "generated/skbio.tree.TreeNode.index_tree.rst", "generated/skbio.tree.TreeNode.invalidate_caches.rst", "generated/skbio.tree.TreeNode.is_root.rst", "generated/skbio.tree.TreeNode.is_tip.rst", "generated/skbio.tree.TreeNode.lca.rst", "generated/skbio.tree.TreeNode.levelorder.rst", "generated/skbio.tree.TreeNode.lowest_common_ancestor.rst", "generated/skbio.tree.TreeNode.neighbors.rst", "generated/skbio.tree.TreeNode.non_tips.rst", "generated/skbio.tree.TreeNode.observed_node_counts.rst", "generated/skbio.tree.TreeNode.pop.rst", "generated/skbio.tree.TreeNode.postorder.rst", "generated/skbio.tree.TreeNode.pre_and_postorder.rst", "generated/skbio.tree.TreeNode.preorder.rst", "generated/skbio.tree.TreeNode.prune.rst", "generated/skbio.tree.TreeNode.read.rst", "generated/skbio.tree.TreeNode.remove.rst", "generated/skbio.tree.TreeNode.remove_deleted.rst", "generated/skbio.tree.TreeNode.root.rst", "generated/skbio.tree.TreeNode.root_at.rst", "generated/skbio.tree.TreeNode.root_at_midpoint.rst", "generated/skbio.tree.TreeNode.shear.rst", "generated/skbio.tree.TreeNode.shuffle.rst", "generated/skbio.tree.TreeNode.siblings.rst", "generated/skbio.tree.TreeNode.subset.rst", "generated/skbio.tree.TreeNode.subsets.rst", "generated/skbio.tree.TreeNode.subtree.rst", "generated/skbio.tree.TreeNode.tip_tip_distances.rst", "generated/skbio.tree.TreeNode.tips.rst", "generated/skbio.tree.TreeNode.to_array.rst", "generated/skbio.tree.TreeNode.to_taxonomy.rst", "generated/skbio.tree.TreeNode.traverse.rst", "generated/skbio.tree.TreeNode.unpack.rst", "generated/skbio.tree.TreeNode.unpack_by_func.rst", "generated/skbio.tree.TreeNode.unrooted_copy.rst", "generated/skbio.tree.TreeNode.unrooted_deepcopy.rst", "generated/skbio.tree.TreeNode.write.rst", "generated/skbio.tree.majority_rule.rst", "generated/skbio.tree.nj.rst", "generated/skbio.util.EfficiencyWarning.rst", "generated/skbio.util.RepresentationWarning.rst", "generated/skbio.util.assert_data_frame_almost_equal.rst", "generated/skbio.util.assert_ordination_results_equal.rst", "generated/skbio.util.cardinal_to_ordinal.rst", "generated/skbio.util.classproperty.rst", "generated/skbio.util.classproperty.__delete__.rst", "generated/skbio.util.classproperty.__eq__.rst", "generated/skbio.util.classproperty.__ge__.rst", "generated/skbio.util.classproperty.__get__.rst", "generated/skbio.util.classproperty.__getstate__.rst", "generated/skbio.util.classproperty.__gt__.rst", "generated/skbio.util.classproperty.__hash__.rst", "generated/skbio.util.classproperty.__le__.rst", "generated/skbio.util.classproperty.__lt__.rst", "generated/skbio.util.classproperty.__ne__.rst", "generated/skbio.util.classproperty.__set__.rst", "generated/skbio.util.classproperty.__set_name__.rst", "generated/skbio.util.classproperty.__str__.rst", "generated/skbio.util.classproperty.deleter.rst", "generated/skbio.util.classproperty.getter.rst", "generated/skbio.util.classproperty.setter.rst", "generated/skbio.util.find_duplicates.rst", "generated/skbio.util.get_data_path.rst", "generated/skbio.util.safe_md5.rst", "generated/skbio.workflow.Workflow.rst", "generated/skbio.workflow.Workflow.__call__.rst", "generated/skbio.workflow.Workflow.__eq__.rst", "generated/skbio.workflow.Workflow.__ge__.rst", "generated/skbio.workflow.Workflow.__getstate__.rst", "generated/skbio.workflow.Workflow.__gt__.rst", "generated/skbio.workflow.Workflow.__hash__.rst", "generated/skbio.workflow.Workflow.__le__.rst", "generated/skbio.workflow.Workflow.__lt__.rst", "generated/skbio.workflow.Workflow.__ne__.rst", "generated/skbio.workflow.Workflow.__str__.rst", "generated/skbio.workflow.Workflow.initialize_state.rst", "generated/skbio.workflow.method.rst", "generated/skbio.workflow.method.__call__.rst", "generated/skbio.workflow.method.__eq__.rst", "generated/skbio.workflow.method.__ge__.rst", "generated/skbio.workflow.method.__getstate__.rst", "generated/skbio.workflow.method.__gt__.rst", "generated/skbio.workflow.method.__hash__.rst", "generated/skbio.workflow.method.__le__.rst", "generated/skbio.workflow.method.__lt__.rst", "generated/skbio.workflow.method.__ne__.rst", "generated/skbio.workflow.method.__str__.rst", "generated/skbio.workflow.requires.rst", "generated/skbio.workflow.requires.__call__.rst", "generated/skbio.workflow.requires.__eq__.rst", "generated/skbio.workflow.requires.__ge__.rst", "generated/skbio.workflow.requires.__getstate__.rst", "generated/skbio.workflow.requires.__gt__.rst", "generated/skbio.workflow.requires.__hash__.rst", "generated/skbio.workflow.requires.__le__.rst", "generated/skbio.workflow.requires.__lt__.rst", "generated/skbio.workflow.requires.__ne__.rst", "generated/skbio.workflow.requires.__str__.rst", "index.rst", "io.rst", "metadata.rst", "sequence.rst", "stats.rst", "tree.rst", "util.rst", "workflow.rst"], "titles": ["Alignments (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.alignment</span></code>)", "Diversity calculations (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity</span></code>)", "skbio.alignment.AlignmentStructure", "skbio.alignment.AlignmentStructure.__eq__", "skbio.alignment.AlignmentStructure.__ge__", "skbio.alignment.AlignmentStructure.__getitem__", "skbio.alignment.AlignmentStructure.__getstate__", "skbio.alignment.AlignmentStructure.__gt__", "skbio.alignment.AlignmentStructure.__hash__", "skbio.alignment.AlignmentStructure.__le__", "skbio.alignment.AlignmentStructure.__lt__", "skbio.alignment.AlignmentStructure.__ne__", "skbio.alignment.AlignmentStructure.__setstate__", "skbio.alignment.AlignmentStructure.__str__", "skbio.alignment.AlignmentStructure.is_zero_based", "skbio.alignment.AlignmentStructure.set_zero_based", "skbio.alignment.StripedSmithWaterman", "skbio.alignment.StripedSmithWaterman.__call__", "skbio.alignment.StripedSmithWaterman.__eq__", "skbio.alignment.StripedSmithWaterman.__ge__", "skbio.alignment.StripedSmithWaterman.__getstate__", "skbio.alignment.StripedSmithWaterman.__gt__", "skbio.alignment.StripedSmithWaterman.__hash__", "skbio.alignment.StripedSmithWaterman.__le__", "skbio.alignment.StripedSmithWaterman.__lt__", "skbio.alignment.StripedSmithWaterman.__ne__", "skbio.alignment.StripedSmithWaterman.__setstate__", "skbio.alignment.StripedSmithWaterman.__str__", "skbio.alignment.TabularMSA", "skbio.alignment.TabularMSA.__bool__", "skbio.alignment.TabularMSA.__contains__", "skbio.alignment.TabularMSA.__copy__", "skbio.alignment.TabularMSA.__deepcopy__", "skbio.alignment.TabularMSA.__eq__", "skbio.alignment.TabularMSA.__ge__", "skbio.alignment.TabularMSA.__getitem__", "skbio.alignment.TabularMSA.__getstate__", "skbio.alignment.TabularMSA.__gt__", "skbio.alignment.TabularMSA.__iter__", "skbio.alignment.TabularMSA.__le__", "skbio.alignment.TabularMSA.__len__", "skbio.alignment.TabularMSA.__lt__", "skbio.alignment.TabularMSA.__ne__", "skbio.alignment.TabularMSA.__reversed__", "skbio.alignment.TabularMSA.__str__", "skbio.alignment.TabularMSA.append", "skbio.alignment.TabularMSA.consensus", "skbio.alignment.TabularMSA.conservation", "skbio.alignment.TabularMSA.extend", "skbio.alignment.TabularMSA.from_dict", "skbio.alignment.TabularMSA.gap_frequencies", "skbio.alignment.TabularMSA.has_metadata", "skbio.alignment.TabularMSA.has_positional_metadata", "skbio.alignment.TabularMSA.iter_positions", "skbio.alignment.TabularMSA.join", "skbio.alignment.TabularMSA.read", "skbio.alignment.TabularMSA.reassign_index", "skbio.alignment.TabularMSA.sort", "skbio.alignment.TabularMSA.to_dict", "skbio.alignment.TabularMSA.write", "skbio.alignment.global_pairwise_align", "skbio.alignment.global_pairwise_align_nucleotide", "skbio.alignment.global_pairwise_align_protein", "skbio.alignment.local_pairwise_align", "skbio.alignment.local_pairwise_align_nucleotide", "skbio.alignment.local_pairwise_align_protein", "skbio.alignment.local_pairwise_align_ssw", "skbio.alignment.make_identity_substitution_matrix", "Alpha diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.alpha</span></code>)", "skbio.diversity.alpha.ace", "skbio.diversity.alpha.berger_parker_d", "skbio.diversity.alpha.brillouin_d", "skbio.diversity.alpha.chao1", "skbio.diversity.alpha.chao1_ci", "skbio.diversity.alpha.dominance", "skbio.diversity.alpha.doubles", "skbio.diversity.alpha.enspie", "skbio.diversity.alpha.esty_ci", "skbio.diversity.alpha.faith_pd", "skbio.diversity.alpha.fisher_alpha", "skbio.diversity.alpha.gini_index", "skbio.diversity.alpha.goods_coverage", "skbio.diversity.alpha.heip_e", "skbio.diversity.alpha.kempton_taylor_q", "skbio.diversity.alpha.lladser_ci", "skbio.diversity.alpha.lladser_pe", "skbio.diversity.alpha.margalef", "skbio.diversity.alpha.mcintosh_d", "skbio.diversity.alpha.mcintosh_e", "skbio.diversity.alpha.menhinick", "skbio.diversity.alpha.michaelis_menten_fit", "skbio.diversity.alpha.observed_features", "skbio.diversity.alpha.observed_otus", "skbio.diversity.alpha.osd", "skbio.diversity.alpha.phydiv", "skbio.diversity.alpha.pielou_e", "skbio.diversity.alpha.robbins", "skbio.diversity.alpha.shannon", "skbio.diversity.alpha.simpson", "skbio.diversity.alpha.simpson_e", "skbio.diversity.alpha.singles", "skbio.diversity.alpha.sobs", "skbio.diversity.alpha.strong", "skbio.diversity.alpha_diversity", "Beta diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.beta</span></code>)", "skbio.diversity.beta.unweighted_unifrac", "skbio.diversity.beta.weighted_unifrac", "skbio.diversity.beta_diversity", "skbio.diversity.block_beta_diversity", "skbio.diversity.get_alpha_diversity_metrics", "skbio.diversity.get_beta_diversity_metrics", "skbio.diversity.partial_beta_diversity", "skbio.io.ArgumentOverrideWarning", "skbio.io.BLAST7FormatError", "skbio.io.ClustalFormatError", "skbio.io.EMBLFormatError", "skbio.io.FASTAFormatError", "skbio.io.FASTQFormatError", "skbio.io.FileFormatError", "skbio.io.FormatIdentificationWarning", "skbio.io.GFF3FormatError", "skbio.io.GenBankFormatError", "skbio.io.IOSourceError", "skbio.io.LSMatFormatError", "skbio.io.NewickFormatError", "skbio.io.OrdinationFormatError", "skbio.io.PhylipFormatError", "skbio.io.QSeqFormatError", "skbio.io.QUALFormatError", "skbio.io.StockholmFormatError", "skbio.io.UnrecognizedFormatError", "Simple binary dissimilarity matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.binary_dm</span></code>)", "BLAST+6 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast6</span></code>)", "BLAST+7 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast7</span></code>)", "Clustal format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.clustal</span></code>)", "EMBL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embl</span></code>)", "FASTA/QUAL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fasta</span></code>)", "FASTQ format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fastq</span></code>)", "GenBank format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.genbank</span></code>)", "GFF3 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.gff3</span></code>)", "Labeled square matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.lsmat</span></code>)", "Newick format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.newick</span></code>)", "Ordination results format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.ordination</span></code>)", "PHYLIP multiple sequence alignment format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.phylip</span></code>)", "QSeq format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.qseq</span></code>)", "Stockholm format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.stockholm</span></code>)", "Taxdump format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.taxdump</span></code>)", "I/O Registry (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.registry</span></code>)", "skbio.io.registry.DuplicateRegistrationError", "skbio.io.registry.Format", "skbio.io.registry.Format.__eq__", "skbio.io.registry.Format.__ge__", "skbio.io.registry.Format.__getstate__", "skbio.io.registry.Format.__gt__", "skbio.io.registry.Format.__hash__", "skbio.io.registry.Format.__le__", "skbio.io.registry.Format.__lt__", "skbio.io.registry.Format.__ne__", "skbio.io.registry.Format.__str__", "skbio.io.registry.Format.reader", "skbio.io.registry.Format.sniffer", "skbio.io.registry.Format.writer", "skbio.io.registry.IORegistry", "skbio.io.registry.IORegistry.__eq__", "skbio.io.registry.IORegistry.__ge__", "skbio.io.registry.IORegistry.__getstate__", "skbio.io.registry.IORegistry.__gt__", "skbio.io.registry.IORegistry.__hash__", "skbio.io.registry.IORegistry.__le__", "skbio.io.registry.IORegistry.__lt__", "skbio.io.registry.IORegistry.__ne__", "skbio.io.registry.IORegistry.__str__", "skbio.io.registry.IORegistry.add_format", "skbio.io.registry.IORegistry.create_format", "skbio.io.registry.IORegistry.get_reader", "skbio.io.registry.IORegistry.get_sniffer", "skbio.io.registry.IORegistry.get_writer", "skbio.io.registry.IORegistry.list_read_formats", "skbio.io.registry.IORegistry.list_write_formats", "skbio.io.registry.IORegistry.monkey_patch", "skbio.io.registry.IORegistry.read", "skbio.io.registry.IORegistry.sniff", "skbio.io.registry.IORegistry.write", "skbio.io.registry.InvalidRegistrationError", "skbio.io.registry.create_format", "skbio.io.registry.read", "skbio.io.registry.sniff", "skbio.io.registry.write", "I/O utils (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.util</span></code>)", "skbio.io.util.open", "skbio.io.util.open_file", "skbio.io.util.open_files", "skbio.metadata.Interval", "skbio.metadata.Interval.__eq__", "skbio.metadata.Interval.__ge__", "skbio.metadata.Interval.__getstate__", "skbio.metadata.Interval.__gt__", "skbio.metadata.Interval.__le__", "skbio.metadata.Interval.__lt__", "skbio.metadata.Interval.__ne__", "skbio.metadata.Interval.__str__", "skbio.metadata.Interval.drop", "skbio.metadata.IntervalMetadata", "skbio.metadata.IntervalMetadata.__copy__", "skbio.metadata.IntervalMetadata.__deepcopy__", "skbio.metadata.IntervalMetadata.__eq__", "skbio.metadata.IntervalMetadata.__ge__", "skbio.metadata.IntervalMetadata.__getstate__", "skbio.metadata.IntervalMetadata.__gt__", "skbio.metadata.IntervalMetadata.__le__", "skbio.metadata.IntervalMetadata.__lt__", "skbio.metadata.IntervalMetadata.__ne__", "skbio.metadata.IntervalMetadata.__str__", "skbio.metadata.IntervalMetadata.add", "skbio.metadata.IntervalMetadata.concat", "skbio.metadata.IntervalMetadata.drop", "skbio.metadata.IntervalMetadata.merge", "skbio.metadata.IntervalMetadata.query", "skbio.metadata.IntervalMetadata.read", "skbio.metadata.IntervalMetadata.sort", "skbio.metadata.IntervalMetadata.write", "skbio.sequence.DNA", "skbio.sequence.DNA.__bool__", "skbio.sequence.DNA.__contains__", "skbio.sequence.DNA.__copy__", "skbio.sequence.DNA.__deepcopy__", "skbio.sequence.DNA.__eq__", "skbio.sequence.DNA.__ge__", "skbio.sequence.DNA.__getitem__", "skbio.sequence.DNA.__getstate__", "skbio.sequence.DNA.__gt__", "skbio.sequence.DNA.__iter__", "skbio.sequence.DNA.__le__", "skbio.sequence.DNA.__len__", "skbio.sequence.DNA.__lt__", "skbio.sequence.DNA.__ne__", "skbio.sequence.DNA.__reversed__", "skbio.sequence.DNA.__str__", "skbio.sequence.DNA.complement", "skbio.sequence.DNA.concat", "skbio.sequence.DNA.count", "skbio.sequence.DNA.definites", "skbio.sequence.DNA.degap", "skbio.sequence.DNA.degenerates", "skbio.sequence.DNA.distance", "skbio.sequence.DNA.expand_degenerates", "skbio.sequence.DNA.find_motifs", "skbio.sequence.DNA.find_with_regex", "skbio.sequence.DNA.frequencies", "skbio.sequence.DNA.gaps", "skbio.sequence.DNA.gc_content", "skbio.sequence.DNA.gc_frequency", "skbio.sequence.DNA.has_definites", "skbio.sequence.DNA.has_degenerates", "skbio.sequence.DNA.has_gaps", "skbio.sequence.DNA.has_interval_metadata", "skbio.sequence.DNA.has_metadata", "skbio.sequence.DNA.has_nondegenerates", "skbio.sequence.DNA.has_positional_metadata", "skbio.sequence.DNA.index", "skbio.sequence.DNA.is_reverse_complement", "skbio.sequence.DNA.iter_contiguous", "skbio.sequence.DNA.iter_kmers", "skbio.sequence.DNA.kmer_frequencies", "skbio.sequence.DNA.lowercase", "skbio.sequence.DNA.match_frequency", "skbio.sequence.DNA.matches", "skbio.sequence.DNA.mismatch_frequency", "skbio.sequence.DNA.mismatches", "skbio.sequence.DNA.nondegenerates", "skbio.sequence.DNA.read", "skbio.sequence.DNA.replace", "skbio.sequence.DNA.reverse_complement", "skbio.sequence.DNA.to_definites", "skbio.sequence.DNA.to_indices", "skbio.sequence.DNA.to_regex", "skbio.sequence.DNA.transcribe", "skbio.sequence.DNA.translate", "skbio.sequence.DNA.translate_six_frames", "skbio.sequence.DNA.write", "skbio.sequence.GeneticCode", "skbio.sequence.GeneticCode.__eq__", "skbio.sequence.GeneticCode.__ge__", "skbio.sequence.GeneticCode.__getstate__", "skbio.sequence.GeneticCode.__gt__", "skbio.sequence.GeneticCode.__le__", "skbio.sequence.GeneticCode.__lt__", "skbio.sequence.GeneticCode.__ne__", "skbio.sequence.GeneticCode.__str__", "skbio.sequence.GeneticCode.from_ncbi", "skbio.sequence.GeneticCode.translate", "skbio.sequence.GeneticCode.translate_six_frames", "skbio.sequence.GrammaredSequence", "skbio.sequence.GrammaredSequence.__bool__", "skbio.sequence.GrammaredSequence.__contains__", "skbio.sequence.GrammaredSequence.__copy__", "skbio.sequence.GrammaredSequence.__deepcopy__", "skbio.sequence.GrammaredSequence.__eq__", "skbio.sequence.GrammaredSequence.__ge__", "skbio.sequence.GrammaredSequence.__getitem__", "skbio.sequence.GrammaredSequence.__getstate__", "skbio.sequence.GrammaredSequence.__gt__", "skbio.sequence.GrammaredSequence.__iter__", "skbio.sequence.GrammaredSequence.__le__", "skbio.sequence.GrammaredSequence.__len__", "skbio.sequence.GrammaredSequence.__lt__", "skbio.sequence.GrammaredSequence.__ne__", "skbio.sequence.GrammaredSequence.__reversed__", "skbio.sequence.GrammaredSequence.__str__", "skbio.sequence.GrammaredSequence.concat", "skbio.sequence.GrammaredSequence.count", "skbio.sequence.GrammaredSequence.definites", "skbio.sequence.GrammaredSequence.degap", "skbio.sequence.GrammaredSequence.degenerates", "skbio.sequence.GrammaredSequence.distance", "skbio.sequence.GrammaredSequence.expand_degenerates", "skbio.sequence.GrammaredSequence.find_motifs", "skbio.sequence.GrammaredSequence.find_with_regex", "skbio.sequence.GrammaredSequence.frequencies", "skbio.sequence.GrammaredSequence.gaps", "skbio.sequence.GrammaredSequence.has_definites", "skbio.sequence.GrammaredSequence.has_degenerates", "skbio.sequence.GrammaredSequence.has_gaps", "skbio.sequence.GrammaredSequence.has_interval_metadata", "skbio.sequence.GrammaredSequence.has_metadata", "skbio.sequence.GrammaredSequence.has_nondegenerates", "skbio.sequence.GrammaredSequence.has_positional_metadata", "skbio.sequence.GrammaredSequence.index", "skbio.sequence.GrammaredSequence.iter_contiguous", "skbio.sequence.GrammaredSequence.iter_kmers", "skbio.sequence.GrammaredSequence.kmer_frequencies", "skbio.sequence.GrammaredSequence.lowercase", "skbio.sequence.GrammaredSequence.match_frequency", "skbio.sequence.GrammaredSequence.matches", "skbio.sequence.GrammaredSequence.mismatch_frequency", "skbio.sequence.GrammaredSequence.mismatches", "skbio.sequence.GrammaredSequence.nondegenerates", "skbio.sequence.GrammaredSequence.read", "skbio.sequence.GrammaredSequence.replace", "skbio.sequence.GrammaredSequence.to_definites", "skbio.sequence.GrammaredSequence.to_indices", "skbio.sequence.GrammaredSequence.to_regex", "skbio.sequence.GrammaredSequence.write", "skbio.sequence.Protein", "skbio.sequence.Protein.__bool__", "skbio.sequence.Protein.__contains__", "skbio.sequence.Protein.__copy__", "skbio.sequence.Protein.__deepcopy__", "skbio.sequence.Protein.__eq__", "skbio.sequence.Protein.__ge__", "skbio.sequence.Protein.__getitem__", "skbio.sequence.Protein.__getstate__", "skbio.sequence.Protein.__gt__", "skbio.sequence.Protein.__iter__", "skbio.sequence.Protein.__le__", "skbio.sequence.Protein.__len__", "skbio.sequence.Protein.__lt__", "skbio.sequence.Protein.__ne__", "skbio.sequence.Protein.__reversed__", "skbio.sequence.Protein.__str__", "skbio.sequence.Protein.concat", "skbio.sequence.Protein.count", "skbio.sequence.Protein.definites", "skbio.sequence.Protein.degap", "skbio.sequence.Protein.degenerates", "skbio.sequence.Protein.distance", "skbio.sequence.Protein.expand_degenerates", "skbio.sequence.Protein.find_motifs", "skbio.sequence.Protein.find_with_regex", "skbio.sequence.Protein.frequencies", "skbio.sequence.Protein.gaps", "skbio.sequence.Protein.has_definites", "skbio.sequence.Protein.has_degenerates", "skbio.sequence.Protein.has_gaps", "skbio.sequence.Protein.has_interval_metadata", "skbio.sequence.Protein.has_metadata", "skbio.sequence.Protein.has_nondegenerates", "skbio.sequence.Protein.has_positional_metadata", "skbio.sequence.Protein.has_stops", "skbio.sequence.Protein.index", "skbio.sequence.Protein.iter_contiguous", "skbio.sequence.Protein.iter_kmers", "skbio.sequence.Protein.kmer_frequencies", "skbio.sequence.Protein.lowercase", "skbio.sequence.Protein.match_frequency", "skbio.sequence.Protein.matches", "skbio.sequence.Protein.mismatch_frequency", "skbio.sequence.Protein.mismatches", "skbio.sequence.Protein.nondegenerates", "skbio.sequence.Protein.read", "skbio.sequence.Protein.replace", "skbio.sequence.Protein.stops", "skbio.sequence.Protein.to_definites", "skbio.sequence.Protein.to_indices", "skbio.sequence.Protein.to_regex", "skbio.sequence.Protein.write", "skbio.sequence.RNA", "skbio.sequence.RNA.__bool__", "skbio.sequence.RNA.__contains__", "skbio.sequence.RNA.__copy__", "skbio.sequence.RNA.__deepcopy__", "skbio.sequence.RNA.__eq__", "skbio.sequence.RNA.__ge__", "skbio.sequence.RNA.__getitem__", "skbio.sequence.RNA.__getstate__", "skbio.sequence.RNA.__gt__", "skbio.sequence.RNA.__iter__", "skbio.sequence.RNA.__le__", "skbio.sequence.RNA.__len__", "skbio.sequence.RNA.__lt__", "skbio.sequence.RNA.__ne__", "skbio.sequence.RNA.__reversed__", "skbio.sequence.RNA.__str__", "skbio.sequence.RNA.complement", "skbio.sequence.RNA.concat", "skbio.sequence.RNA.count", "skbio.sequence.RNA.definites", "skbio.sequence.RNA.degap", "skbio.sequence.RNA.degenerates", "skbio.sequence.RNA.distance", "skbio.sequence.RNA.expand_degenerates", "skbio.sequence.RNA.find_motifs", "skbio.sequence.RNA.find_with_regex", "skbio.sequence.RNA.frequencies", "skbio.sequence.RNA.gaps", "skbio.sequence.RNA.gc_content", "skbio.sequence.RNA.gc_frequency", "skbio.sequence.RNA.has_definites", "skbio.sequence.RNA.has_degenerates", "skbio.sequence.RNA.has_gaps", "skbio.sequence.RNA.has_interval_metadata", "skbio.sequence.RNA.has_metadata", "skbio.sequence.RNA.has_nondegenerates", "skbio.sequence.RNA.has_positional_metadata", "skbio.sequence.RNA.index", "skbio.sequence.RNA.is_reverse_complement", "skbio.sequence.RNA.iter_contiguous", "skbio.sequence.RNA.iter_kmers", "skbio.sequence.RNA.kmer_frequencies", "skbio.sequence.RNA.lowercase", "skbio.sequence.RNA.match_frequency", "skbio.sequence.RNA.matches", "skbio.sequence.RNA.mismatch_frequency", "skbio.sequence.RNA.mismatches", "skbio.sequence.RNA.nondegenerates", "skbio.sequence.RNA.read", "skbio.sequence.RNA.replace", "skbio.sequence.RNA.reverse_complement", "skbio.sequence.RNA.reverse_transcribe", "skbio.sequence.RNA.to_definites", "skbio.sequence.RNA.to_indices", "skbio.sequence.RNA.to_regex", "skbio.sequence.RNA.translate", "skbio.sequence.RNA.translate_six_frames", "skbio.sequence.RNA.write", "skbio.sequence.Sequence", "skbio.sequence.Sequence.__bool__", "skbio.sequence.Sequence.__contains__", "skbio.sequence.Sequence.__copy__", "skbio.sequence.Sequence.__deepcopy__", "skbio.sequence.Sequence.__eq__", "skbio.sequence.Sequence.__ge__", "skbio.sequence.Sequence.__getitem__", "skbio.sequence.Sequence.__getstate__", "skbio.sequence.Sequence.__gt__", "skbio.sequence.Sequence.__iter__", "skbio.sequence.Sequence.__le__", "skbio.sequence.Sequence.__len__", "skbio.sequence.Sequence.__lt__", "skbio.sequence.Sequence.__ne__", "skbio.sequence.Sequence.__reversed__", "skbio.sequence.Sequence.__str__", "skbio.sequence.Sequence.concat", "skbio.sequence.Sequence.count", "skbio.sequence.Sequence.distance", "skbio.sequence.Sequence.find_with_regex", "skbio.sequence.Sequence.frequencies", "skbio.sequence.Sequence.has_interval_metadata", "skbio.sequence.Sequence.has_metadata", "skbio.sequence.Sequence.has_positional_metadata", "skbio.sequence.Sequence.index", "skbio.sequence.Sequence.iter_contiguous", "skbio.sequence.Sequence.iter_kmers", "skbio.sequence.Sequence.kmer_frequencies", "skbio.sequence.Sequence.lowercase", "skbio.sequence.Sequence.match_frequency", "skbio.sequence.Sequence.matches", "skbio.sequence.Sequence.mismatch_frequency", "skbio.sequence.Sequence.mismatches", "skbio.sequence.Sequence.read", "skbio.sequence.Sequence.replace", "skbio.sequence.Sequence.to_indices", "skbio.sequence.Sequence.write", "skbio.sequence.SubstitutionMatrix", "skbio.sequence.SubstitutionMatrix.__contains__", "skbio.sequence.SubstitutionMatrix.__eq__", "skbio.sequence.SubstitutionMatrix.__ge__", "skbio.sequence.SubstitutionMatrix.__getitem__", "skbio.sequence.SubstitutionMatrix.__getstate__", "skbio.sequence.SubstitutionMatrix.__gt__", "skbio.sequence.SubstitutionMatrix.__le__", "skbio.sequence.SubstitutionMatrix.__lt__", "skbio.sequence.SubstitutionMatrix.__ne__", "skbio.sequence.SubstitutionMatrix.__str__", "skbio.sequence.SubstitutionMatrix.between", "skbio.sequence.SubstitutionMatrix.by_name", "skbio.sequence.SubstitutionMatrix.copy", "skbio.sequence.SubstitutionMatrix.filter", "skbio.sequence.SubstitutionMatrix.from_dict", "skbio.sequence.SubstitutionMatrix.from_iterable", "skbio.sequence.SubstitutionMatrix.get_names", "skbio.sequence.SubstitutionMatrix.identity", "skbio.sequence.SubstitutionMatrix.index", "skbio.sequence.SubstitutionMatrix.plot", "skbio.sequence.SubstitutionMatrix.read", "skbio.sequence.SubstitutionMatrix.redundant_form", "skbio.sequence.SubstitutionMatrix.to_data_frame", "skbio.sequence.SubstitutionMatrix.to_dict", "skbio.sequence.SubstitutionMatrix.transpose", "skbio.sequence.SubstitutionMatrix.within", "skbio.sequence.SubstitutionMatrix.write", "Sequence distance metrics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence.distance</span></code>)", "skbio.sequence.distance.hamming", "skbio.sequence.distance.kmer_distance", "Composition Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.composition</span></code>)", "skbio.stats.composition.alr", "skbio.stats.composition.alr_inv", "skbio.stats.composition.ancom", "skbio.stats.composition.centralize", "skbio.stats.composition.closure", "skbio.stats.composition.clr", "skbio.stats.composition.clr_inv", "skbio.stats.composition.dirmult_ttest", "skbio.stats.composition.ilr", "skbio.stats.composition.ilr_inv", "skbio.stats.composition.inner", "skbio.stats.composition.multiplicative_replacement", "skbio.stats.composition.pairwise_vlr", "skbio.stats.composition.perturb", "skbio.stats.composition.perturb_inv", "skbio.stats.composition.power", "skbio.stats.composition.sbp_basis", "skbio.stats.composition.tree_basis", "skbio.stats.composition.vlr", "Distance matrices and distance-based statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.distance</span></code>)", "skbio.stats.distance.DissimilarityMatrix", "skbio.stats.distance.DissimilarityMatrix.__contains__", "skbio.stats.distance.DissimilarityMatrix.__eq__", "skbio.stats.distance.DissimilarityMatrix.__ge__", "skbio.stats.distance.DissimilarityMatrix.__getitem__", "skbio.stats.distance.DissimilarityMatrix.__getstate__", "skbio.stats.distance.DissimilarityMatrix.__gt__", "skbio.stats.distance.DissimilarityMatrix.__le__", "skbio.stats.distance.DissimilarityMatrix.__lt__", "skbio.stats.distance.DissimilarityMatrix.__ne__", "skbio.stats.distance.DissimilarityMatrix.__str__", "skbio.stats.distance.DissimilarityMatrix.between", "skbio.stats.distance.DissimilarityMatrix.copy", "skbio.stats.distance.DissimilarityMatrix.filter", "skbio.stats.distance.DissimilarityMatrix.from_iterable", "skbio.stats.distance.DissimilarityMatrix.index", "skbio.stats.distance.DissimilarityMatrix.plot", "skbio.stats.distance.DissimilarityMatrix.read", "skbio.stats.distance.DissimilarityMatrix.redundant_form", "skbio.stats.distance.DissimilarityMatrix.to_data_frame", "skbio.stats.distance.DissimilarityMatrix.transpose", "skbio.stats.distance.DissimilarityMatrix.within", "skbio.stats.distance.DissimilarityMatrix.write", "skbio.stats.distance.DissimilarityMatrixError", "skbio.stats.distance.DistanceMatrix", "skbio.stats.distance.DistanceMatrix.__contains__", "skbio.stats.distance.DistanceMatrix.__eq__", "skbio.stats.distance.DistanceMatrix.__ge__", "skbio.stats.distance.DistanceMatrix.__getitem__", "skbio.stats.distance.DistanceMatrix.__getstate__", "skbio.stats.distance.DistanceMatrix.__gt__", "skbio.stats.distance.DistanceMatrix.__le__", "skbio.stats.distance.DistanceMatrix.__lt__", "skbio.stats.distance.DistanceMatrix.__ne__", "skbio.stats.distance.DistanceMatrix.__str__", "skbio.stats.distance.DistanceMatrix.between", "skbio.stats.distance.DistanceMatrix.condensed_form", "skbio.stats.distance.DistanceMatrix.copy", "skbio.stats.distance.DistanceMatrix.filter", "skbio.stats.distance.DistanceMatrix.from_iterable", "skbio.stats.distance.DistanceMatrix.index", "skbio.stats.distance.DistanceMatrix.permute", "skbio.stats.distance.DistanceMatrix.plot", "skbio.stats.distance.DistanceMatrix.read", "skbio.stats.distance.DistanceMatrix.redundant_form", "skbio.stats.distance.DistanceMatrix.to_data_frame", "skbio.stats.distance.DistanceMatrix.to_series", "skbio.stats.distance.DistanceMatrix.transpose", "skbio.stats.distance.DistanceMatrix.within", "skbio.stats.distance.DistanceMatrix.write", "skbio.stats.distance.DistanceMatrixError", "skbio.stats.distance.MissingIDError", "skbio.stats.distance.anosim", "skbio.stats.distance.bioenv", "skbio.stats.distance.mantel", "skbio.stats.distance.permanova", "skbio.stats.distance.permdisp", "skbio.stats.distance.pwmantel", "skbio.stats.distance.randdm", "Evolutionary statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.evolve</span></code>)", "skbio.stats.evolve.hommola_cospeciation", "Gradient analyses (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.gradient</span></code>)", "skbio.stats.gradient.AverageGradientANOVA", "skbio.stats.gradient.AverageGradientANOVA.__eq__", "skbio.stats.gradient.AverageGradientANOVA.__ge__", "skbio.stats.gradient.AverageGradientANOVA.__getstate__", "skbio.stats.gradient.AverageGradientANOVA.__gt__", "skbio.stats.gradient.AverageGradientANOVA.__hash__", "skbio.stats.gradient.AverageGradientANOVA.__le__", "skbio.stats.gradient.AverageGradientANOVA.__lt__", "skbio.stats.gradient.AverageGradientANOVA.__ne__", "skbio.stats.gradient.AverageGradientANOVA.__str__", "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "skbio.stats.gradient.CategoryResults", "skbio.stats.gradient.CategoryResults.__eq__", "skbio.stats.gradient.CategoryResults.__ge__", "skbio.stats.gradient.CategoryResults.__getstate__", "skbio.stats.gradient.CategoryResults.__gt__", "skbio.stats.gradient.CategoryResults.__hash__", "skbio.stats.gradient.CategoryResults.__le__", "skbio.stats.gradient.CategoryResults.__lt__", "skbio.stats.gradient.CategoryResults.__ne__", "skbio.stats.gradient.CategoryResults.__str__", "skbio.stats.gradient.CategoryResults.to_files", "skbio.stats.gradient.FirstDifferenceGradientANOVA", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVA", "skbio.stats.gradient.GradientANOVA.__eq__", "skbio.stats.gradient.GradientANOVA.__ge__", "skbio.stats.gradient.GradientANOVA.__getstate__", "skbio.stats.gradient.GradientANOVA.__gt__", "skbio.stats.gradient.GradientANOVA.__hash__", "skbio.stats.gradient.GradientANOVA.__le__", "skbio.stats.gradient.GradientANOVA.__lt__", "skbio.stats.gradient.GradientANOVA.__ne__", "skbio.stats.gradient.GradientANOVA.__str__", "skbio.stats.gradient.GradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVAResults", "skbio.stats.gradient.GradientANOVAResults.__eq__", "skbio.stats.gradient.GradientANOVAResults.__ge__", "skbio.stats.gradient.GradientANOVAResults.__getstate__", "skbio.stats.gradient.GradientANOVAResults.__gt__", "skbio.stats.gradient.GradientANOVAResults.__hash__", "skbio.stats.gradient.GradientANOVAResults.__le__", "skbio.stats.gradient.GradientANOVAResults.__lt__", "skbio.stats.gradient.GradientANOVAResults.__ne__", "skbio.stats.gradient.GradientANOVAResults.__str__", "skbio.stats.gradient.GradientANOVAResults.to_files", "skbio.stats.gradient.GroupResults", "skbio.stats.gradient.GroupResults.__eq__", "skbio.stats.gradient.GroupResults.__ge__", "skbio.stats.gradient.GroupResults.__getstate__", "skbio.stats.gradient.GroupResults.__gt__", "skbio.stats.gradient.GroupResults.__hash__", "skbio.stats.gradient.GroupResults.__le__", "skbio.stats.gradient.GroupResults.__lt__", "skbio.stats.gradient.GroupResults.__ne__", "skbio.stats.gradient.GroupResults.__str__", "skbio.stats.gradient.GroupResults.to_files", "skbio.stats.gradient.TrajectoryGradientANOVA", "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "skbio.stats.gradient.WindowDifferenceGradientANOVA", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "skbio.stats.isubsample", "Ordination methods (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.ordination</span></code>)", "skbio.stats.ordination.OrdinationResults", "skbio.stats.ordination.OrdinationResults.__eq__", "skbio.stats.ordination.OrdinationResults.__ge__", "skbio.stats.ordination.OrdinationResults.__getstate__", "skbio.stats.ordination.OrdinationResults.__gt__", "skbio.stats.ordination.OrdinationResults.__hash__", "skbio.stats.ordination.OrdinationResults.__le__", "skbio.stats.ordination.OrdinationResults.__lt__", "skbio.stats.ordination.OrdinationResults.__ne__", "skbio.stats.ordination.OrdinationResults.__str__", "skbio.stats.ordination.OrdinationResults.plot", "skbio.stats.ordination.OrdinationResults.read", "skbio.stats.ordination.OrdinationResults.write", "skbio.stats.ordination.ca", "skbio.stats.ordination.cca", "skbio.stats.ordination.corr", "skbio.stats.ordination.e_matrix", "skbio.stats.ordination.f_matrix", "skbio.stats.ordination.mean_and_std", "skbio.stats.ordination.pcoa", "skbio.stats.ordination.pcoa_biplot", "skbio.stats.ordination.rda", "skbio.stats.ordination.scale", "skbio.stats.ordination.svd_rank", "Empirical Power Estimation (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.power</span></code>)", "skbio.stats.power.confidence_bound", "skbio.stats.power.paired_subsamples", "skbio.stats.power.subsample_paired_power", "skbio.stats.power.subsample_power", "skbio.stats.subsample_counts", "skbio.tree.DuplicateNodeError", "skbio.tree.MissingNodeError", "skbio.tree.NoLengthError", "skbio.tree.NoParentError", "skbio.tree.TreeError", "skbio.tree.TreeNode", "skbio.tree.TreeNode.__copy__", "skbio.tree.TreeNode.__deepcopy__", "skbio.tree.TreeNode.__eq__", "skbio.tree.TreeNode.__ge__", "skbio.tree.TreeNode.__getitem__", "skbio.tree.TreeNode.__getstate__", "skbio.tree.TreeNode.__gt__", "skbio.tree.TreeNode.__hash__", "skbio.tree.TreeNode.__iter__", "skbio.tree.TreeNode.__le__", "skbio.tree.TreeNode.__len__", "skbio.tree.TreeNode.__lt__", "skbio.tree.TreeNode.__ne__", "skbio.tree.TreeNode.__str__", "skbio.tree.TreeNode.accumulate_to_ancestor", "skbio.tree.TreeNode.ancestors", "skbio.tree.TreeNode.append", "skbio.tree.TreeNode.ascii_art", "skbio.tree.TreeNode.assign_ids", "skbio.tree.TreeNode.assign_supports", "skbio.tree.TreeNode.bifurcate", "skbio.tree.TreeNode.cache_attr", "skbio.tree.TreeNode.compare_rfd", "skbio.tree.TreeNode.compare_subsets", "skbio.tree.TreeNode.compare_tip_distances", "skbio.tree.TreeNode.copy", "skbio.tree.TreeNode.count", "skbio.tree.TreeNode.create_caches", "skbio.tree.TreeNode.deepcopy", "skbio.tree.TreeNode.descending_branch_length", "skbio.tree.TreeNode.distance", "skbio.tree.TreeNode.extend", "skbio.tree.TreeNode.find", "skbio.tree.TreeNode.find_all", "skbio.tree.TreeNode.find_by_func", "skbio.tree.TreeNode.find_by_id", "skbio.tree.TreeNode.from_linkage_matrix", "skbio.tree.TreeNode.from_taxdump", "skbio.tree.TreeNode.from_taxonomy", "skbio.tree.TreeNode.get_max_distance", "skbio.tree.TreeNode.has_children", "skbio.tree.TreeNode.index_tree", "skbio.tree.TreeNode.invalidate_caches", "skbio.tree.TreeNode.is_root", "skbio.tree.TreeNode.is_tip", "skbio.tree.TreeNode.lca", "skbio.tree.TreeNode.levelorder", "skbio.tree.TreeNode.lowest_common_ancestor", "skbio.tree.TreeNode.neighbors", "skbio.tree.TreeNode.non_tips", "skbio.tree.TreeNode.observed_node_counts", "skbio.tree.TreeNode.pop", "skbio.tree.TreeNode.postorder", "skbio.tree.TreeNode.pre_and_postorder", "skbio.tree.TreeNode.preorder", "skbio.tree.TreeNode.prune", "skbio.tree.TreeNode.read", "skbio.tree.TreeNode.remove", "skbio.tree.TreeNode.remove_deleted", "skbio.tree.TreeNode.root", "skbio.tree.TreeNode.root_at", "skbio.tree.TreeNode.root_at_midpoint", "skbio.tree.TreeNode.shear", "skbio.tree.TreeNode.shuffle", "skbio.tree.TreeNode.siblings", "skbio.tree.TreeNode.subset", "skbio.tree.TreeNode.subsets", "skbio.tree.TreeNode.subtree", "skbio.tree.TreeNode.tip_tip_distances", "skbio.tree.TreeNode.tips", "skbio.tree.TreeNode.to_array", "skbio.tree.TreeNode.to_taxonomy", "skbio.tree.TreeNode.traverse", "skbio.tree.TreeNode.unpack", "skbio.tree.TreeNode.unpack_by_func", "skbio.tree.TreeNode.unrooted_copy", "skbio.tree.TreeNode.unrooted_deepcopy", "skbio.tree.TreeNode.write", "skbio.tree.majority_rule", "skbio.tree.nj", "skbio.util.EfficiencyWarning", "skbio.util.RepresentationWarning", "skbio.util.assert_data_frame_almost_equal", "skbio.util.assert_ordination_results_equal", "skbio.util.cardinal_to_ordinal", "skbio.util.classproperty", "skbio.util.classproperty.__delete__", "skbio.util.classproperty.__eq__", "skbio.util.classproperty.__ge__", "skbio.util.classproperty.__get__", "skbio.util.classproperty.__getstate__", "skbio.util.classproperty.__gt__", "skbio.util.classproperty.__hash__", "skbio.util.classproperty.__le__", "skbio.util.classproperty.__lt__", "skbio.util.classproperty.__ne__", "skbio.util.classproperty.__set__", "skbio.util.classproperty.__set_name__", "skbio.util.classproperty.__str__", "skbio.util.classproperty.deleter", "skbio.util.classproperty.getter", "skbio.util.classproperty.setter", "skbio.util.find_duplicates", "skbio.util.get_data_path", "skbio.util.safe_md5", "skbio.workflow.Workflow", "skbio.workflow.Workflow.__call__", "skbio.workflow.Workflow.__eq__", "skbio.workflow.Workflow.__ge__", "skbio.workflow.Workflow.__getstate__", "skbio.workflow.Workflow.__gt__", "skbio.workflow.Workflow.__hash__", "skbio.workflow.Workflow.__le__", "skbio.workflow.Workflow.__lt__", "skbio.workflow.Workflow.__ne__", "skbio.workflow.Workflow.__str__", "skbio.workflow.Workflow.initialize_state", "skbio.workflow.method", "skbio.workflow.method.__call__", "skbio.workflow.method.__eq__", "skbio.workflow.method.__ge__", "skbio.workflow.method.__getstate__", "skbio.workflow.method.__gt__", "skbio.workflow.method.__hash__", "skbio.workflow.method.__le__", "skbio.workflow.method.__lt__", "skbio.workflow.method.__ne__", "skbio.workflow.method.__str__", "skbio.workflow.requires", "skbio.workflow.requires.__call__", "skbio.workflow.requires.__eq__", "skbio.workflow.requires.__ge__", "skbio.workflow.requires.__getstate__", "skbio.workflow.requires.__gt__", "skbio.workflow.requires.__hash__", "skbio.workflow.requires.__le__", "skbio.workflow.requires.__lt__", "skbio.workflow.requires.__ne__", "skbio.workflow.requires.__str__", "Home", "File I/O (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io</span></code>)", "Metadata (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.metadata</span></code>)", "Sequences (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence</span></code>)", "Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats</span></code>)", "Tree representations (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.tree</span></code>)", "Utility functionality (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.util</span></code>)", "Constructing workflows (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.workflow</span></code>)"], "terms": {"thi": [0, 1, 16, 30, 31, 32, 33, 35, 40, 42, 44, 45, 46, 47, 48, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 78, 79, 80, 83, 84, 85, 90, 93, 94, 103, 104, 105, 106, 107, 108, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 159, 160, 161, 173, 181, 184, 186, 188, 189, 190, 192, 193, 199, 201, 202, 203, 204, 205, 211, 213, 214, 215, 216, 217, 218, 220, 223, 224, 225, 226, 228, 231, 233, 235, 236, 239, 240, 244, 248, 250, 251, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 274, 275, 278, 279, 280, 289, 290, 291, 292, 294, 295, 296, 297, 299, 302, 304, 306, 307, 309, 310, 314, 318, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 340, 341, 342, 345, 346, 347, 348, 350, 353, 355, 357, 358, 360, 361, 365, 369, 379, 380, 381, 382, 384, 385, 386, 387, 389, 390, 393, 394, 395, 398, 399, 400, 401, 403, 406, 408, 410, 411, 414, 415, 419, 423, 425, 426, 434, 435, 436, 437, 438, 440, 441, 442, 443, 445, 446, 447, 450, 451, 453, 454, 455, 457, 458, 459, 460, 462, 465, 467, 469, 470, 472, 473, 474, 476, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 497, 514, 515, 516, 520, 521, 522, 523, 524, 525, 526, 527, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 542, 544, 547, 549, 562, 563, 564, 567, 569, 571, 573, 586, 588, 589, 590, 591, 594, 597, 598, 599, 601, 603, 604, 605, 606, 695, 696, 707, 708, 709, 711, 716, 717, 718, 721, 723, 724, 725, 732, 748, 750, 752, 754, 756, 757, 760, 762, 763, 765, 767, 768, 770, 774, 781, 785, 788, 789, 791, 793, 794, 796, 797, 798, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 836, 837, 838, 839, 849, 861, 873, 874, 875, 876, 877, 878, 879], "modul": [0, 1, 145, 147, 188, 521, 524, 527, 606, 696, 721, 836, 837, 874, 875, 877, 879], "provid": [0, 1, 16, 28, 45, 47, 48, 55, 56, 61, 64, 66, 68, 78, 83, 94, 103, 104, 105, 106, 107, 112, 132, 136, 137, 141, 143, 145, 146, 147, 159, 161, 180, 181, 185, 186, 188, 190, 218, 226, 248, 261, 264, 270, 274, 297, 318, 328, 331, 337, 340, 348, 369, 380, 383, 389, 393, 396, 401, 423, 436, 439, 445, 450, 455, 460, 476, 481, 484, 489, 491, 493, 509, 514, 519, 524, 532, 544, 545, 559, 562, 566, 584, 588, 593, 597, 598, 599, 600, 601, 603, 606, 640, 695, 697, 707, 708, 712, 721, 723, 724, 754, 762, 770, 783, 789, 793, 796, 803, 811, 812, 839, 873, 874, 875, 877, 878, 879], "comput": [0, 1, 46, 47, 50, 69, 72, 78, 85, 96, 102, 103, 104, 105, 106, 107, 108, 111, 202, 244, 248, 314, 318, 365, 369, 419, 423, 474, 476, 509, 521, 522, 523, 527, 532, 537, 541, 542, 543, 544, 559, 584, 597, 598, 599, 600, 601, 602, 605, 606, 607, 617, 639, 640, 650, 651, 662, 673, 683, 684, 694, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 763, 799, 801, 811, 837, 875, 877], "manipul": [0, 51, 52, 256, 258, 324, 326, 375, 377, 431, 433, 455, 478, 479, 524, 544], "sequenc": [0, 1, 2, 16, 28, 29, 31, 32, 33, 38, 40, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 132, 133, 134, 135, 137, 138, 139, 144, 146, 192, 202, 214, 532, 545, 603, 695, 725, 872, 873, 879], "dna": [0, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 48, 49, 50, 52, 53, 54, 56, 57, 58, 61, 64, 66, 134, 135, 136, 137, 138, 139, 143, 144, 145, 280, 292, 309, 311, 312, 313, 315, 316, 319, 320, 321, 322, 325, 326, 328, 336, 340, 341, 360, 362, 363, 364, 366, 367, 370, 371, 372, 373, 376, 377, 380, 388, 393, 394, 396, 413, 414, 416, 417, 418, 420, 421, 424, 425, 426, 427, 428, 429, 432, 433, 435, 436, 444, 447, 448, 450, 451, 455, 472, 479, 481, 491, 545, 873, 875], "rna": [0, 28, 33, 61, 64, 66, 134, 135, 136, 137, 138, 143, 144, 145, 221, 239, 276, 277, 278, 280, 290, 291, 292, 309, 360, 455, 472, 532, 875], "protein": [0, 16, 28, 47, 60, 62, 65, 66, 132, 134, 135, 136, 137, 138, 143, 144, 145, 261, 274, 277, 278, 280, 290, 291, 292, 328, 340, 436, 450, 452, 453, 455, 481, 491, 505, 724, 875], "can": [0, 1, 16, 28, 53, 56, 60, 61, 62, 66, 67, 74, 78, 79, 94, 103, 105, 106, 107, 109, 110, 111, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 149, 189, 192, 201, 202, 217, 239, 244, 246, 261, 271, 309, 314, 316, 328, 338, 360, 365, 367, 380, 390, 414, 419, 421, 436, 446, 455, 472, 474, 481, 490, 493, 497, 505, 521, 524, 527, 532, 541, 544, 545, 549, 569, 573, 597, 598, 599, 601, 602, 603, 606, 696, 707, 710, 715, 716, 717, 718, 721, 723, 724, 725, 732, 753, 755, 763, 793, 796, 803, 811, 812, 813, 817, 818, 838, 861, 875, 877, 879], "well": [0, 137, 147, 455, 532, 544, 545, 598, 600, 601, 605, 697, 711, 811, 873, 877, 878], "custom": [0, 1, 146, 221, 244, 280, 281, 292, 314, 343, 365, 396, 419, 474, 707], "alphabet": [0, 57, 67, 109, 110, 132, 136, 221, 274, 280, 292, 340, 343, 393, 396, 450, 455, 491, 493, 505, 508, 511, 522, 875], "load": [0, 136, 137, 142, 144, 505, 527, 544, 545, 597, 598, 601, 602, 836, 837, 873], "two": [0, 1, 60, 61, 62, 63, 64, 65, 66, 69, 74, 94, 105, 106, 132, 133, 136, 137, 138, 139, 141, 143, 144, 146, 192, 193, 199, 205, 211, 214, 219, 221, 226, 239, 244, 261, 265, 267, 297, 309, 314, 328, 332, 334, 343, 348, 360, 365, 380, 384, 386, 396, 401, 414, 419, 436, 440, 442, 460, 472, 474, 481, 485, 487, 493, 495, 497, 502, 504, 509, 515, 522, 523, 524, 527, 532, 541, 542, 544, 545, 547, 549, 554, 556, 559, 563, 569, 571, 573, 578, 580, 584, 589, 597, 598, 599, 600, 601, 602, 603, 605, 711, 716, 721, 724, 725, 756, 757, 763, 772, 794, 796, 811, 816, 873, 875, 877], "have": [0, 1, 16, 46, 49, 50, 53, 54, 66, 68, 78, 83, 95, 99, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 179, 189, 192, 202, 203, 204, 226, 239, 245, 261, 290, 297, 309, 315, 328, 348, 360, 366, 380, 401, 414, 420, 436, 460, 472, 481, 495, 511, 527, 542, 544, 547, 571, 599, 605, 606, 628, 640, 661, 672, 695, 707, 710, 711, 712, 715, 716, 718, 719, 721, 723, 724, 725, 726, 732, 751, 752, 753, 762, 764, 765, 788, 794, 801, 803, 804, 813, 815, 875, 877, 879], "been": [0, 60, 61, 62, 67, 111, 136, 137, 138, 143, 179, 181, 186, 189, 257, 261, 269, 325, 328, 336, 376, 380, 388, 432, 436, 444, 455, 481, 599, 605, 726, 788], "previous": [0, 264, 271, 331, 338, 383, 390, 439, 446, 484, 490, 879], "tabularmsa": [0, 60, 61, 62, 63, 64, 65, 66, 126, 134, 137, 143, 145, 202, 873], "object": [0, 1, 16, 28, 31, 32, 33, 42, 45, 48, 49, 51, 52, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 108, 111, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 180, 182, 185, 187, 192, 193, 199, 201, 202, 203, 204, 205, 211, 213, 214, 215, 216, 217, 221, 223, 226, 228, 239, 240, 244, 247, 248, 255, 256, 258, 259, 260, 265, 266, 267, 268, 275, 292, 294, 297, 299, 309, 310, 314, 317, 318, 323, 324, 326, 327, 332, 333, 334, 335, 341, 343, 345, 348, 350, 360, 361, 365, 368, 369, 374, 375, 377, 379, 384, 385, 386, 387, 394, 396, 398, 401, 403, 414, 415, 419, 422, 423, 430, 431, 433, 434, 435, 440, 441, 442, 443, 451, 455, 457, 460, 462, 472, 473, 474, 475, 476, 477, 478, 479, 480, 485, 486, 487, 488, 493, 497, 507, 509, 513, 521, 522, 527, 544, 545, 549, 558, 559, 561, 569, 573, 583, 584, 587, 597, 598, 600, 601, 602, 603, 628, 661, 672, 710, 711, 716, 717, 718, 732, 749, 757, 764, 796, 801, 803, 812, 815, 816, 837, 838, 861, 873, 875, 877, 879], "us": [0, 1, 2, 16, 28, 35, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 60, 61, 62, 72, 73, 74, 78, 79, 82, 83, 90, 93, 94, 97, 103, 105, 106, 107, 108, 111, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 159, 160, 161, 177, 178, 181, 186, 189, 202, 214, 221, 239, 244, 256, 258, 261, 264, 271, 274, 277, 278, 280, 288, 289, 290, 291, 292, 309, 314, 324, 326, 328, 331, 338, 340, 343, 360, 365, 375, 377, 380, 383, 390, 393, 396, 414, 419, 431, 433, 436, 439, 446, 450, 452, 453, 455, 472, 474, 478, 479, 481, 484, 490, 491, 493, 497, 509, 521, 522, 524, 525, 527, 532, 533, 534, 536, 542, 544, 545, 549, 559, 569, 573, 584, 591, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 629, 640, 651, 673, 684, 696, 707, 710, 716, 720, 721, 722, 723, 724, 725, 732, 733, 734, 750, 752, 753, 754, 757, 758, 761, 763, 769, 770, 788, 793, 794, 801, 803, 808, 809, 811, 813, 814, 815, 816, 817, 838, 861, 875, 877, 878, 879], "id": [0, 1, 28, 33, 51, 56, 57, 78, 94, 103, 105, 106, 107, 108, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 226, 235, 237, 256, 277, 278, 280, 289, 290, 291, 297, 306, 308, 324, 348, 357, 359, 375, 401, 410, 412, 431, 452, 453, 455, 460, 469, 471, 478, 493, 494, 495, 497, 503, 504, 507, 509, 512, 516, 519, 537, 544, 545, 546, 547, 549, 555, 556, 558, 559, 560, 564, 566, 569, 570, 571, 573, 579, 580, 583, 584, 585, 586, 590, 591, 593, 596, 597, 598, 599, 600, 601, 602, 603, 640, 684, 697, 706, 707, 723, 724, 725, 733, 734, 751, 758, 761, 768, 770, 771, 774, 801, 803, 812, 875], "msa": [0, 28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 48, 49, 50, 53, 54, 56, 57, 58, 134, 136, 137, 143, 145], "": [0, 1, 2, 16, 28, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 61, 62, 65, 69, 71, 74, 76, 77, 78, 79, 81, 82, 86, 88, 89, 90, 94, 95, 97, 98, 99, 101, 102, 103, 105, 106, 108, 109, 110, 130, 132, 133, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 192, 202, 214, 221, 223, 226, 228, 231, 233, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 274, 276, 277, 278, 280, 281, 287, 290, 291, 292, 294, 297, 299, 302, 304, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 340, 343, 345, 348, 350, 353, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 393, 396, 398, 401, 403, 406, 408, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 450, 452, 453, 455, 457, 460, 462, 465, 467, 469, 470, 471, 473, 474, 475, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 497, 504, 505, 507, 519, 522, 525, 526, 527, 530, 531, 532, 533, 534, 537, 541, 543, 545, 549, 556, 558, 566, 573, 580, 583, 593, 597, 598, 599, 600, 601, 628, 661, 672, 695, 707, 710, 711, 712, 716, 718, 720, 721, 723, 724, 725, 754, 762, 774, 790, 811, 861, 873, 875, 877, 879], "index": [0, 1, 2, 28, 30, 33, 35, 42, 45, 48, 49, 52, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 71, 74, 80, 82, 83, 86, 87, 89, 95, 97, 98, 99, 102, 103, 134, 136, 143, 144, 145, 228, 258, 299, 326, 350, 377, 403, 433, 462, 479, 494, 497, 516, 525, 526, 527, 532, 544, 546, 549, 564, 570, 573, 590, 591, 597, 598, 599, 600, 601, 606, 640, 684, 697, 707, 723, 771, 774, 784, 785, 803, 811, 815], "from": [0, 1, 16, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 74, 78, 83, 94, 101, 102, 105, 106, 112, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 159, 160, 161, 180, 185, 192, 201, 202, 214, 215, 218, 221, 222, 223, 226, 228, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 280, 290, 291, 292, 293, 294, 297, 299, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 348, 350, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 396, 397, 398, 401, 403, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 460, 462, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 497, 504, 505, 508, 509, 511, 513, 514, 516, 517, 519, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 549, 556, 559, 561, 562, 564, 566, 573, 580, 584, 587, 588, 590, 591, 593, 597, 598, 599, 601, 602, 603, 605, 606, 607, 695, 696, 707, 708, 710, 711, 713, 714, 716, 721, 723, 724, 725, 726, 733, 734, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 817, 837, 839, 875, 877, 879], "import": [0, 1, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 74, 78, 94, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 159, 160, 161, 192, 202, 214, 221, 222, 223, 226, 228, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 278, 280, 290, 291, 292, 293, 294, 297, 299, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 340, 341, 343, 344, 345, 348, 350, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 393, 394, 396, 397, 398, 401, 403, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 460, 462, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 493, 504, 505, 508, 511, 513, 516, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 556, 561, 564, 566, 580, 587, 590, 591, 593, 597, 598, 599, 601, 602, 605, 606, 695, 696, 707, 721, 723, 724, 725, 726, 733, 734, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 817, 837, 873, 875, 877, 879], "seq": [0, 28, 38, 43, 49, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 132, 133, 134, 136, 137, 139, 143, 144, 224, 225, 238, 245, 248, 256, 258, 271, 272, 274, 275, 278, 291, 292, 295, 296, 315, 318, 324, 326, 338, 340, 341, 346, 347, 366, 369, 375, 377, 390, 393, 394, 399, 400, 413, 420, 423, 431, 433, 446, 447, 450, 451, 453, 455, 458, 459, 476, 478, 479, 490, 491, 532, 695, 879], "acc": [0, 133, 875], "g": [0, 1, 16, 33, 47, 48, 54, 62, 65, 80, 83, 90, 94, 108, 111, 126, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 146, 147, 192, 221, 228, 231, 236, 239, 240, 247, 248, 249, 250, 251, 261, 299, 302, 307, 309, 310, 317, 318, 319, 328, 343, 350, 353, 358, 360, 361, 368, 369, 370, 380, 396, 403, 406, 411, 414, 415, 422, 423, 424, 425, 426, 436, 455, 462, 465, 470, 472, 473, 475, 476, 481, 493, 497, 505, 511, 522, 527, 541, 544, 545, 549, 569, 573, 591, 597, 598, 600, 601, 707, 724, 725, 732, 753, 754, 759, 762, 766, 793, 794, 795, 797, 798, 804, 807, 808, 809, 811, 838, 873, 875, 877, 879], "ggta": 0, "metadata": [0, 1, 28, 33, 42, 45, 46, 48, 51, 52, 53, 54, 56, 57, 134, 135, 136, 137, 138, 139, 143, 144, 221, 226, 228, 235, 237, 238, 239, 242, 245, 255, 256, 258, 264, 271, 272, 276, 277, 278, 280, 290, 291, 292, 297, 299, 306, 308, 309, 312, 315, 323, 324, 326, 331, 338, 343, 348, 350, 357, 359, 360, 363, 366, 374, 375, 377, 383, 390, 396, 401, 403, 410, 412, 413, 414, 417, 420, 430, 431, 433, 439, 446, 447, 448, 452, 453, 455, 460, 462, 469, 471, 472, 477, 478, 479, 484, 490, 509, 559, 584, 598, 606, 618, 640, 651, 662, 684, 707, 718, 721, 723, 724, 725, 872, 875], "seq1": [0, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 134, 136, 137, 143, 145, 522, 523], "tcc": 0, "ggca": 0, "seq2": [0, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 136, 137, 145, 522, 523], "minter": [0, 28, 33, 45, 48, 56, 57, 134, 143], "stat": [0, 1, 28, 45, 46, 48, 53, 54, 57, 90, 96, 131, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 221, 228, 238, 239, 242, 245, 272, 276, 277, 278, 280, 290, 291, 292, 299, 309, 312, 315, 343, 350, 360, 363, 366, 396, 403, 413, 414, 417, 420, 447, 448, 452, 453, 455, 462, 472, 504, 513, 519, 521, 872, 875], "count": [0, 28, 45, 48, 50, 54, 57, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 134, 136, 137, 143, 145, 248, 250, 251, 263, 265, 267, 318, 330, 332, 334, 369, 382, 384, 386, 423, 425, 426, 438, 440, 442, 476, 483, 485, 487, 523, 524, 527, 532, 605, 711, 717, 724, 725, 726, 756, 757, 783, 811, 872, 873], "2": [0, 1, 16, 28, 33, 40, 45, 46, 47, 49, 50, 53, 54, 56, 60, 61, 62, 63, 64, 65, 69, 72, 74, 76, 78, 80, 83, 84, 85, 87, 88, 90, 94, 97, 98, 99, 105, 106, 107, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 160, 202, 214, 217, 219, 221, 238, 239, 240, 246, 247, 248, 251, 259, 261, 263, 272, 274, 278, 281, 290, 291, 309, 310, 316, 317, 318, 327, 328, 330, 340, 360, 361, 367, 368, 369, 379, 380, 382, 393, 413, 414, 415, 421, 422, 423, 426, 434, 436, 438, 447, 450, 453, 455, 472, 473, 475, 476, 480, 481, 483, 491, 493, 504, 505, 511, 513, 516, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 561, 564, 566, 569, 580, 587, 590, 591, 593, 597, 598, 599, 600, 601, 602, 603, 605, 606, 695, 696, 707, 710, 711, 713, 716, 718, 721, 723, 724, 725, 726, 747, 752, 753, 755, 757, 762, 763, 768, 770, 771, 772, 795, 796, 801, 803, 804, 806, 807, 811, 812, 817, 873, 875, 877, 879], "posit": [0, 16, 28, 29, 33, 42, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 60, 61, 62, 63, 64, 65, 66, 67, 132, 133, 134, 136, 137, 138, 141, 143, 144, 145, 221, 226, 228, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 258, 259, 261, 264, 265, 266, 267, 268, 269, 271, 272, 276, 277, 278, 290, 291, 297, 299, 302, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 319, 326, 327, 328, 331, 332, 333, 334, 335, 336, 338, 343, 348, 350, 353, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 377, 379, 380, 383, 384, 385, 386, 387, 388, 390, 391, 396, 401, 403, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 424, 433, 434, 436, 439, 440, 441, 442, 443, 444, 446, 447, 448, 452, 453, 455, 460, 462, 465, 469, 470, 471, 472, 473, 475, 479, 480, 481, 484, 485, 486, 487, 488, 490, 525, 526, 527, 536, 599, 605, 684, 697, 721, 722, 724, 725, 784, 875], "13": [0, 73, 95, 99, 133, 136, 142, 144, 221, 292, 343, 396, 455, 527, 532, 696], "dtype": [0, 1, 28, 33, 45, 46, 47, 48, 50, 53, 54, 56, 57, 134, 136, 137, 143, 144, 145, 238, 239, 241, 242, 243, 249, 266, 268, 269, 272, 274, 309, 311, 312, 313, 319, 333, 335, 336, 340, 360, 362, 363, 364, 370, 385, 387, 388, 391, 393, 413, 414, 416, 417, 418, 424, 441, 443, 444, 447, 450, 455, 472, 486, 488, 491, 493, 527, 545, 569, 591, 597, 601, 696, 803, 875], "conveni": [0, 16, 55, 59, 93, 182, 187, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 708, 709, 789, 810, 878], "local_pairwise_align_ssw": [0, 60, 61, 62, 63, 64, 65], "score": [0, 2, 16, 47, 60, 61, 62, 63, 64, 65, 66, 67, 73, 132, 133, 136, 138, 139, 144, 455, 493, 508, 511, 697, 718], "start_end_posit": 0, "actaaggctctctacccctctcagaga": 0, "actaaggctcctaacccccttttctcaga": 0, "30": [0, 133, 138, 139, 142, 144, 724, 725, 785], "actaaggctctct": 0, "acccc": 0, "tctcaga": 0, "actaaggctc": 0, "ctaacccccttttctcaga": 0, "27": [0, 78, 97, 105, 106, 133, 343, 537, 599], "0": [0, 1, 14, 15, 16, 28, 40, 45, 46, 48, 50, 53, 54, 56, 66, 67, 69, 74, 78, 79, 80, 83, 84, 92, 94, 95, 105, 106, 111, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 189, 214, 221, 222, 226, 228, 238, 239, 240, 242, 244, 245, 246, 248, 250, 251, 257, 263, 265, 267, 269, 272, 274, 275, 276, 277, 278, 280, 290, 291, 292, 293, 297, 299, 309, 310, 312, 314, 315, 316, 318, 325, 330, 332, 334, 336, 340, 341, 343, 344, 348, 350, 360, 361, 363, 365, 366, 367, 369, 376, 382, 384, 386, 388, 393, 394, 396, 397, 401, 403, 413, 414, 415, 417, 419, 420, 421, 423, 425, 426, 432, 438, 440, 442, 444, 447, 448, 450, 451, 452, 453, 455, 456, 460, 462, 472, 473, 474, 476, 483, 485, 487, 491, 493, 504, 505, 508, 513, 516, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 561, 564, 566, 580, 587, 590, 591, 593, 597, 598, 599, 601, 602, 603, 605, 606, 640, 695, 696, 707, 711, 715, 716, 719, 721, 722, 724, 725, 726, 733, 734, 747, 752, 755, 756, 757, 758, 761, 762, 763, 766, 772, 784, 790, 794, 795, 796, 801, 803, 806, 807, 811, 812, 817, 850, 873, 875, 877, 879], "24": [0, 133, 142, 505, 724], "28": [0, 94, 142, 721], "stripedsmithwaterman": [0, 66], "queri": [0, 2, 16, 66, 132, 133, 202, 455], "aaaaaactctctaaactcactaaggctctctacccctcttcagagaagtcga": 0, "print": [0, 1, 53, 78, 105, 106, 134, 136, 137, 138, 139, 141, 143, 144, 145, 245, 261, 274, 278, 291, 315, 328, 340, 366, 380, 393, 420, 436, 450, 453, 455, 481, 491, 544, 599, 605, 606, 695, 721, 725, 733, 734, 749, 750, 753, 754, 757, 758, 759, 761, 762, 764, 765, 766, 768, 770, 771, 773, 776, 777, 778, 779, 780, 782, 784, 785, 786, 787, 788, 791, 793, 794, 795, 796, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 875, 877, 879], "49": [0, 139, 142], "length": [0, 1, 16, 28, 45, 46, 48, 53, 60, 61, 62, 78, 94, 105, 106, 131, 132, 133, 135, 136, 137, 138, 139, 140, 143, 144, 145, 202, 214, 221, 222, 228, 233, 238, 239, 240, 242, 245, 248, 250, 251, 261, 262, 263, 265, 266, 267, 268, 272, 273, 274, 276, 277, 278, 280, 290, 291, 292, 293, 299, 304, 309, 310, 312, 315, 318, 328, 329, 330, 332, 333, 334, 335, 339, 340, 343, 344, 350, 355, 360, 361, 363, 366, 369, 380, 381, 382, 384, 385, 386, 387, 392, 393, 396, 397, 403, 408, 413, 414, 415, 417, 420, 423, 425, 426, 436, 437, 438, 440, 441, 442, 443, 447, 448, 449, 450, 452, 453, 455, 456, 462, 467, 472, 473, 476, 481, 482, 483, 485, 486, 487, 488, 491, 509, 522, 523, 527, 532, 559, 584, 597, 600, 601, 605, 715, 716, 724, 725, 729, 732, 747, 753, 762, 763, 772, 794, 801, 803, 806, 807, 812, 875, 877, 879], "multipl": [0, 28, 53, 78, 105, 106, 134, 135, 136, 137, 138, 139, 141, 146, 192, 214, 455, 493, 524, 527, 532, 536, 605, 718, 724, 804, 811, 873, 877], "target": [0, 1, 2, 16, 66, 77, 139, 504, 519, 556, 566, 580, 593], "an": [0, 1, 2, 16, 28, 30, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 66, 78, 79, 81, 87, 91, 92, 103, 105, 106, 107, 111, 125, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 149, 159, 160, 161, 174, 176, 177, 178, 180, 185, 189, 190, 192, 202, 213, 214, 216, 217, 219, 220, 221, 228, 239, 246, 255, 256, 258, 265, 267, 271, 274, 279, 280, 290, 292, 299, 309, 316, 323, 324, 326, 332, 334, 338, 340, 342, 343, 350, 360, 367, 374, 375, 377, 384, 386, 390, 393, 395, 396, 403, 414, 421, 430, 431, 433, 440, 442, 446, 450, 454, 455, 462, 472, 477, 478, 479, 485, 487, 490, 491, 492, 493, 497, 504, 507, 509, 511, 515, 519, 520, 524, 527, 529, 530, 531, 533, 534, 536, 541, 542, 544, 549, 556, 558, 559, 563, 566, 567, 573, 580, 581, 583, 584, 589, 593, 594, 597, 599, 600, 601, 605, 617, 639, 650, 662, 683, 694, 695, 696, 706, 709, 715, 716, 721, 723, 724, 725, 726, 733, 734, 747, 749, 750, 752, 754, 758, 760, 761, 765, 768, 769, 771, 778, 780, 783, 793, 796, 801, 803, 806, 808, 809, 810, 811, 812, 813, 818, 819, 822, 829, 835, 836, 837, 839, 861, 873, 875, 877, 879], "effici": [0, 140, 586], "wai": [0, 1, 136, 137, 141, 143, 145, 147, 192, 273, 339, 392, 449, 493, 527, 599, 716, 721, 873, 877], "find": [0, 79, 241, 243, 246, 249, 259, 261, 266, 268, 269, 311, 313, 316, 319, 327, 328, 333, 335, 336, 362, 364, 367, 370, 379, 380, 385, 387, 388, 391, 416, 418, 421, 424, 434, 436, 441, 443, 444, 480, 481, 486, 488, 598, 601, 605, 711, 725, 747, 748, 760, 762, 763, 766, 767, 768, 773, 775, 776, 777, 778, 780, 781, 788, 792, 797, 806, 808, 809, 835], "represent": [0, 1, 131, 136, 141, 202, 264, 288, 331, 383, 439, 484, 503, 542, 555, 579, 604, 697, 706, 732, 746, 803, 804, 872, 873], "target_sequ": [0, 2, 16, 17], "gctaactaggctcccttctacccctctcagaga": 0, "gcccagtagcttcccaatatgagagcatcaattgtagatcgggcc": 0, "tctataagattccgcatgcgttacttataagatgtctcaacgg": 0, "tagagattaattgccactgccaaaattctg": 0, "query_sequ": [0, 2, 16, 17], "append": [0, 48, 143, 147, 455, 764], "act": [0, 54, 159, 160, 161], "aggctc": 0, "38": [0, 132, 137, 142, 721], "aligned_query_sequ": [0, 2], "tctacccctctcagaga": 0, "aligned_target_sequ": [0, 2], "aggctcccttctacccctctcagaga": 0, "scikit": [0, 1, 51, 52, 55, 59, 60, 63, 66, 67, 78, 105, 106, 107, 108, 109, 110, 111, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 218, 220, 256, 258, 270, 277, 278, 279, 280, 290, 291, 324, 326, 337, 342, 375, 377, 389, 395, 431, 433, 445, 452, 453, 454, 478, 479, 489, 492, 514, 520, 521, 562, 567, 588, 594, 708, 709, 789, 810, 813, 875, 878], "bio": [0, 1, 51, 52, 55, 59, 60, 63, 66, 67, 78, 105, 106, 107, 108, 109, 110, 111, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 218, 220, 256, 258, 270, 277, 278, 279, 280, 290, 291, 324, 326, 337, 342, 375, 377, 389, 395, 431, 433, 445, 452, 453, 454, 478, 479, 489, 492, 514, 520, 521, 562, 567, 588, 594, 598, 708, 709, 789, 810, 813, 875, 878], "also": [0, 1, 46, 47, 74, 78, 98, 104, 105, 106, 107, 126, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 149, 202, 251, 261, 271, 274, 290, 328, 338, 340, 380, 390, 393, 426, 436, 446, 450, 455, 481, 490, 491, 493, 527, 541, 542, 544, 597, 598, 599, 601, 605, 711, 718, 721, 724, 725, 815, 861, 873, 875, 879], "pure": [0, 813], "python": [0, 1, 2, 455, 544, 569, 599, 813, 818, 872, 873, 875], "implement": [0, 1, 60, 63, 68, 69, 73, 78, 83, 88, 99, 104, 105, 106, 109, 110, 137, 141, 147, 159, 160, 161, 162, 189, 710, 711, 716, 717, 755, 811, 813], "smith": [0, 16, 63, 64, 65, 66, 605], "waterman": [0, 16, 63, 64, 65, 66], "needleman": [0, 60, 61, 62], "wunsch": [0, 60, 61, 62], "These": [0, 1, 46, 51, 52, 68, 78, 105, 106, 138, 141, 145, 146, 256, 258, 324, 326, 375, 377, 431, 433, 478, 479, 521, 602, 604, 697, 717, 723], "ar": [0, 1, 16, 28, 29, 33, 38, 42, 43, 46, 47, 50, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 74, 78, 79, 84, 85, 94, 103, 105, 106, 107, 108, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 159, 160, 161, 173, 180, 184, 185, 189, 192, 193, 199, 205, 211, 214, 216, 218, 219, 220, 221, 226, 228, 235, 238, 239, 245, 248, 252, 253, 254, 257, 265, 266, 267, 268, 270, 271, 274, 276, 277, 278, 279, 280, 281, 287, 289, 290, 291, 292, 297, 299, 306, 309, 315, 318, 320, 321, 322, 325, 332, 333, 334, 335, 337, 338, 340, 342, 343, 348, 350, 357, 360, 366, 369, 371, 372, 373, 376, 378, 384, 385, 386, 387, 389, 390, 393, 395, 396, 401, 403, 410, 413, 414, 420, 423, 427, 428, 429, 432, 440, 441, 442, 443, 445, 446, 448, 450, 452, 453, 454, 455, 460, 462, 469, 472, 476, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 497, 502, 505, 508, 509, 514, 515, 519, 520, 522, 523, 524, 525, 527, 529, 532, 533, 534, 536, 538, 539, 540, 541, 544, 545, 547, 549, 554, 559, 562, 563, 566, 567, 569, 571, 573, 578, 584, 586, 588, 589, 591, 593, 594, 597, 598, 599, 600, 601, 602, 603, 605, 618, 640, 684, 695, 697, 706, 707, 708, 709, 710, 711, 714, 715, 716, 718, 719, 721, 723, 724, 725, 732, 752, 755, 760, 770, 781, 783, 784, 788, 789, 796, 797, 801, 803, 804, 805, 810, 811, 813, 815, 816, 818, 835, 838, 839, 850, 861, 873, 875, 877, 879], "much": [0, 1, 78, 105, 106, 141, 873], "slower": [0, 813], "than": [0, 1, 16, 46, 47, 69, 78, 83, 85, 101, 105, 106, 136, 141, 143, 145, 181, 186, 202, 221, 222, 223, 226, 240, 244, 248, 259, 260, 261, 262, 263, 265, 266, 267, 268, 278, 291, 293, 294, 297, 310, 314, 318, 327, 328, 329, 330, 332, 333, 334, 335, 343, 344, 345, 348, 361, 365, 369, 379, 380, 381, 382, 384, 385, 386, 387, 396, 397, 398, 401, 415, 419, 423, 434, 435, 436, 437, 438, 440, 441, 442, 443, 453, 456, 457, 460, 473, 474, 476, 480, 481, 482, 483, 485, 486, 487, 488, 493, 523, 524, 527, 529, 532, 544, 586, 597, 599, 600, 601, 605, 695, 710, 711, 724, 725, 726, 753, 770, 783, 812, 817, 873, 877], "method": [0, 1, 2, 16, 28, 35, 47, 54, 55, 59, 60, 80, 103, 105, 107, 108, 111, 142, 149, 159, 161, 162, 179, 192, 202, 213, 218, 220, 221, 224, 225, 239, 248, 270, 272, 278, 279, 280, 289, 291, 292, 295, 296, 309, 318, 337, 342, 343, 346, 347, 360, 369, 389, 395, 396, 399, 400, 414, 423, 445, 447, 453, 454, 455, 458, 459, 472, 476, 489, 492, 493, 514, 520, 527, 536, 541, 544, 545, 562, 567, 569, 586, 588, 594, 597, 598, 599, 600, 601, 602, 607, 618, 628, 629, 640, 651, 661, 662, 672, 673, 684, 695, 697, 707, 708, 709, 710, 711, 716, 732, 733, 734, 750, 752, 753, 754, 757, 758, 760, 761, 762, 763, 765, 767, 768, 788, 789, 794, 796, 808, 809, 810, 811, 812, 818, 830, 837, 838, 839, 849, 861, 875, 876, 877, 879], "describ": [0, 1, 47, 60, 63, 70, 71, 74, 77, 78, 81, 82, 84, 85, 86, 87, 94, 95, 98, 105, 106, 111, 135, 136, 137, 138, 139, 142, 143, 145, 261, 264, 328, 331, 380, 383, 436, 439, 455, 481, 484, 515, 537, 543, 544, 563, 581, 589, 599, 605, 717, 774, 812, 875, 877], "abov": [0, 1, 54, 136, 138, 142, 143, 144, 145, 147, 159, 161, 221, 343, 396, 455, 544, 597, 599, 601, 605, 875], "serv": [0, 146, 707], "thei": [0, 1, 38, 43, 47, 53, 69, 103, 107, 132, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 219, 221, 226, 235, 238, 261, 281, 297, 306, 328, 348, 357, 380, 396, 401, 410, 413, 436, 460, 469, 481, 495, 507, 524, 547, 558, 571, 583, 597, 598, 599, 600, 601, 602, 606, 706, 707, 710, 716, 721, 757, 764, 813, 815, 879], "re": [0, 1, 45, 48, 54, 78, 103, 105, 106, 107, 134, 136, 137, 143, 145, 221, 247, 275, 292, 317, 341, 343, 368, 394, 396, 422, 451, 455, 475, 602, 710, 718, 720, 721, 725, 803, 877, 879], "simpler": 0, "experi": [0, 135, 138, 527, 532, 724], "local": [0, 63, 64, 65, 132, 133, 138], "global": [0, 60, 61, 62], "nucleotid": [0, 16, 61, 64, 133, 135, 136, 137, 138, 221, 238, 260, 272, 274, 340, 393, 396, 413, 435, 447, 450, 491, 493, 505, 879], "The": [0, 1, 16, 17, 45, 46, 47, 48, 49, 51, 52, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 78, 79, 80, 81, 83, 88, 90, 94, 95, 96, 97, 99, 102, 103, 105, 106, 107, 108, 109, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 159, 160, 161, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 189, 190, 192, 193, 202, 203, 204, 213, 214, 215, 216, 217, 218, 220, 223, 226, 228, 233, 238, 239, 240, 242, 244, 248, 256, 258, 259, 261, 262, 263, 270, 272, 274, 278, 279, 280, 289, 290, 291, 294, 297, 299, 304, 309, 310, 312, 314, 318, 324, 326, 327, 328, 329, 330, 337, 340, 342, 345, 348, 350, 355, 360, 361, 363, 365, 369, 375, 377, 379, 380, 381, 382, 389, 393, 395, 396, 398, 401, 403, 408, 413, 414, 415, 417, 419, 423, 431, 433, 434, 436, 437, 438, 445, 447, 450, 453, 454, 455, 457, 460, 462, 467, 472, 473, 474, 476, 478, 479, 480, 481, 482, 483, 489, 491, 492, 493, 497, 504, 509, 514, 519, 520, 522, 523, 524, 525, 526, 527, 530, 531, 532, 533, 534, 541, 542, 545, 549, 556, 559, 562, 566, 567, 569, 573, 580, 581, 584, 586, 588, 591, 593, 594, 597, 598, 599, 600, 601, 603, 605, 606, 618, 640, 651, 662, 684, 695, 697, 708, 709, 710, 711, 715, 716, 717, 718, 721, 722, 723, 724, 725, 747, 748, 753, 754, 755, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 770, 771, 772, 774, 778, 780, 781, 784, 789, 790, 792, 793, 795, 796, 797, 798, 801, 803, 810, 811, 812, 815, 818, 836, 838, 839, 873, 875, 877, 879], "differ": [0, 1, 33, 46, 47, 49, 60, 61, 62, 73, 78, 83, 95, 99, 105, 106, 112, 133, 136, 137, 143, 145, 146, 147, 223, 226, 235, 239, 240, 244, 259, 260, 265, 266, 267, 268, 271, 277, 280, 287, 294, 297, 306, 309, 310, 314, 327, 332, 333, 334, 335, 338, 345, 348, 357, 360, 361, 365, 379, 384, 385, 386, 387, 390, 398, 401, 410, 414, 415, 419, 434, 435, 440, 441, 442, 443, 446, 452, 457, 460, 469, 472, 473, 474, 480, 485, 486, 487, 488, 490, 497, 522, 527, 532, 544, 549, 573, 597, 600, 601, 605, 629, 684, 696, 710, 711, 716, 724, 725, 755, 756, 815, 816, 832, 833, 834, 875, 877], "underli": [0, 189, 221, 226, 290, 292, 297, 343, 348, 396, 401, 455, 460, 522, 721, 875], "appli": [0, 1, 16, 28, 47, 51, 52, 103, 106, 107, 108, 111, 135, 136, 141, 146, 202, 221, 256, 258, 292, 324, 326, 343, 375, 377, 396, 431, 433, 455, 478, 479, 493, 509, 524, 559, 584, 586, 599, 602, 606, 710, 724, 812, 839, 879], "while": [0, 1, 131, 135, 136, 137, 138, 143, 192, 280, 455, 527, 601, 640, 684, 707, 723, 732, 760, 838, 875, 879], "default": [0, 1, 16, 28, 45, 46, 48, 54, 56, 59, 60, 61, 62, 64, 65, 69, 73, 83, 90, 94, 97, 103, 107, 132, 136, 138, 139, 140, 141, 143, 144, 147, 149, 159, 161, 174, 176, 217, 220, 244, 261, 273, 274, 277, 278, 279, 280, 290, 291, 314, 328, 339, 340, 342, 365, 380, 392, 393, 395, 419, 436, 449, 450, 452, 453, 454, 474, 481, 491, 492, 504, 509, 513, 520, 525, 526, 527, 533, 534, 536, 545, 556, 559, 561, 567, 580, 584, 587, 594, 598, 599, 601, 602, 603, 640, 695, 707, 709, 715, 716, 718, 719, 726, 757, 782, 801, 810, 811, 812, 815, 816, 836, 839, 861, 873, 875, 877, 879], "match": [0, 16, 45, 48, 54, 61, 64, 67, 132, 136, 137, 189, 190, 226, 246, 247, 265, 267, 268, 275, 290, 297, 316, 317, 332, 334, 335, 341, 348, 367, 368, 384, 386, 387, 394, 401, 421, 422, 440, 442, 443, 451, 460, 475, 485, 487, 488, 511, 545, 597, 599, 601, 602, 721, 723, 724, 725, 756, 757, 766, 768, 875, 879], "mismatch": [0, 16, 61, 64, 67, 132, 133, 265, 266, 267, 332, 333, 334, 384, 385, 386, 440, 441, 442, 485, 486, 487, 511, 599, 756], "gap": [0, 16, 46, 47, 50, 54, 60, 61, 62, 63, 64, 65, 132, 133, 134, 135, 136, 137, 138, 139, 143, 221, 238, 239, 242, 245, 246, 250, 251, 254, 261, 272, 273, 274, 276, 277, 278, 280, 290, 291, 292, 309, 312, 315, 316, 322, 328, 339, 340, 343, 360, 363, 366, 367, 373, 380, 392, 393, 396, 413, 414, 417, 420, 421, 425, 426, 429, 436, 447, 448, 449, 450, 452, 453, 455, 472, 481, 491, 522, 804, 875, 879], "here": [0, 1, 47, 69, 73, 78, 83, 88, 90, 96, 97, 99, 103, 104, 105, 106, 107, 108, 109, 110, 135, 138, 143, 147, 159, 161, 190, 261, 328, 380, 436, 481, 527, 532, 605, 716, 718, 805, 812, 877], "we": [0, 1, 16, 45, 47, 48, 78, 83, 90, 94, 105, 106, 108, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 190, 192, 202, 248, 261, 271, 290, 318, 328, 338, 369, 380, 390, 423, 436, 446, 455, 476, 481, 490, 527, 532, 537, 543, 544, 597, 598, 599, 601, 602, 605, 606, 696, 707, 710, 718, 720, 721, 723, 724, 725, 757, 811, 873, 877, 879], "pair": [0, 1, 51, 60, 61, 62, 64, 67, 105, 106, 107, 111, 135, 137, 138, 139, 141, 145, 213, 217, 256, 324, 375, 431, 478, 493, 497, 504, 519, 523, 527, 549, 556, 566, 573, 580, 584, 591, 593, 602, 721, 772, 801, 875], "open": [0, 55, 59, 60, 61, 62, 63, 64, 65, 108, 132, 133, 137, 147, 159, 161, 180, 181, 182, 185, 186, 187, 190, 191, 192, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 708, 709, 789, 810, 837, 872, 873], "penalti": [0, 16, 60, 61, 62, 63, 64, 65], "11": [0, 16, 62, 65, 66, 72, 77, 78, 132, 135, 142, 144, 221, 247, 317, 368, 396, 422, 475, 527, 532, 537, 543, 606, 696, 711, 718, 721, 812], "extend": [0, 16, 45, 54, 60, 61, 62, 63, 64, 65, 78, 724, 749, 762, 811, 873], "1": [0, 1, 2, 15, 16, 28, 33, 45, 46, 47, 48, 50, 53, 54, 56, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 108, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 159, 160, 192, 202, 214, 217, 219, 221, 226, 228, 238, 239, 240, 246, 248, 261, 262, 263, 267, 272, 273, 274, 277, 278, 280, 281, 288, 289, 290, 291, 292, 297, 299, 309, 310, 316, 318, 328, 329, 330, 334, 339, 340, 343, 348, 350, 360, 361, 367, 369, 380, 381, 382, 386, 392, 393, 396, 401, 403, 413, 414, 415, 421, 423, 436, 437, 438, 442, 447, 449, 450, 452, 453, 455, 460, 462, 472, 473, 476, 481, 482, 483, 487, 491, 493, 504, 505, 508, 511, 513, 515, 516, 519, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 556, 561, 563, 564, 566, 569, 580, 581, 587, 589, 590, 591, 593, 597, 598, 599, 600, 601, 602, 603, 605, 640, 662, 684, 695, 696, 707, 710, 711, 715, 718, 719, 721, 723, 724, 725, 726, 747, 752, 755, 757, 762, 763, 766, 770, 771, 772, 784, 794, 795, 796, 801, 803, 804, 806, 807, 811, 812, 817, 875, 877, 879], "other": [0, 1, 16, 33, 42, 51, 52, 54, 78, 93, 108, 135, 136, 137, 138, 140, 141, 143, 145, 146, 189, 193, 199, 205, 211, 216, 221, 226, 235, 244, 250, 251, 256, 258, 260, 265, 266, 267, 268, 271, 281, 287, 297, 306, 314, 324, 326, 332, 333, 334, 335, 338, 343, 348, 357, 365, 375, 377, 384, 385, 386, 387, 390, 396, 401, 410, 419, 425, 426, 431, 433, 435, 440, 441, 442, 443, 446, 455, 460, 469, 474, 478, 479, 485, 486, 487, 488, 490, 493, 495, 502, 521, 527, 532, 544, 547, 554, 569, 571, 578, 601, 707, 710, 711, 716, 723, 725, 732, 755, 756, 757, 763, 765, 766, 815, 838, 849, 873, 875, 877, 879], "word": [0, 135, 136, 138, 141, 145, 217, 263, 330, 382, 438, 483], "more": [0, 1, 46, 47, 48, 55, 59, 60, 66, 69, 80, 103, 110, 133, 135, 136, 137, 141, 142, 143, 144, 145, 181, 186, 218, 220, 252, 253, 254, 257, 270, 279, 320, 321, 322, 325, 337, 342, 343, 371, 372, 373, 376, 378, 389, 395, 427, 428, 429, 432, 445, 454, 489, 492, 497, 514, 520, 524, 527, 529, 532, 544, 549, 562, 567, 573, 586, 588, 594, 597, 598, 599, 600, 601, 602, 605, 617, 639, 650, 683, 694, 695, 707, 708, 709, 710, 711, 718, 724, 725, 753, 770, 789, 810, 811, 873, 877, 878], "costli": 0, "new": [0, 45, 48, 55, 56, 57, 71, 82, 84, 85, 105, 146, 159, 160, 161, 173, 184, 202, 218, 221, 228, 239, 242, 270, 271, 292, 299, 309, 312, 337, 338, 343, 350, 360, 363, 389, 390, 396, 403, 414, 417, 445, 446, 455, 462, 472, 489, 490, 514, 562, 586, 588, 599, 600, 602, 708, 711, 719, 733, 734, 758, 761, 788, 789, 793, 794, 808, 809, 812, 875, 877, 879], "exist": [0, 56, 69, 74, 141, 147, 159, 160, 161, 177, 178, 290, 493, 505, 509, 544, 559, 584, 596, 599, 602, 707, 732, 749, 757, 762, 764, 795, 836, 861, 875], "one": [0, 1, 45, 46, 47, 48, 51, 52, 54, 60, 61, 62, 78, 79, 80, 83, 88, 94, 103, 105, 106, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 160, 181, 186, 214, 217, 219, 231, 236, 239, 252, 253, 254, 255, 256, 257, 258, 290, 302, 307, 309, 320, 321, 322, 323, 324, 325, 326, 343, 353, 358, 360, 371, 372, 373, 374, 375, 376, 377, 378, 406, 411, 414, 427, 428, 429, 430, 431, 432, 433, 465, 470, 472, 477, 478, 479, 493, 497, 509, 527, 545, 549, 559, 573, 584, 591, 598, 599, 601, 602, 605, 606, 607, 696, 712, 715, 716, 723, 724, 725, 747, 749, 750, 756, 770, 783, 788, 796, 873, 877, 879], "local_pairwise_align_protein": [0, 60, 61, 62, 63, 64], "s1": [0, 1, 76, 221, 223, 239, 240, 244, 259, 260, 265, 266, 267, 268, 294, 309, 310, 314, 327, 332, 333, 334, 335, 343, 345, 360, 361, 365, 379, 384, 385, 386, 387, 396, 398, 414, 415, 419, 434, 435, 440, 441, 442, 443, 455, 457, 472, 473, 474, 480, 485, 486, 487, 488, 527, 532, 597, 601], "heagawghe": 0, "s2": [0, 1, 239, 244, 309, 314, 360, 365, 414, 419, 472, 474, 527, 532, 597, 601], "pawhea": 0, "return": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 37, 39, 40, 41, 42, 44, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 132, 139, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 189, 193, 194, 196, 197, 198, 199, 200, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 218, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 457, 458, 459, 460, 461, 462, 464, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 605, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 633, 634, 635, 636, 637, 638, 639, 641, 642, 644, 645, 646, 647, 648, 649, 650, 652, 653, 655, 656, 657, 658, 659, 660, 663, 664, 666, 667, 668, 669, 670, 671, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 733, 734, 735, 736, 739, 740, 742, 744, 745, 746, 747, 748, 750, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 780, 781, 782, 783, 784, 789, 790, 792, 793, 794, 795, 797, 798, 799, 801, 803, 804, 805, 807, 808, 809, 811, 812, 817, 818, 820, 821, 822, 824, 825, 826, 827, 828, 831, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 871, 873, 875, 879], "start": [0, 14, 15, 16, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 66, 132, 133, 135, 138, 139, 140, 141, 143, 145, 146, 192, 213, 219, 240, 259, 280, 281, 287, 290, 291, 310, 327, 361, 379, 415, 434, 473, 480, 545, 602, 603, 721, 724, 725, 879], "end": [0, 2, 16, 60, 61, 62, 63, 64, 65, 66, 132, 133, 135, 136, 137, 138, 139, 145, 146, 192, 202, 213, 219, 240, 259, 290, 310, 327, 361, 379, 415, 434, 473, 480, 794], "each": [0, 1, 16, 28, 38, 43, 46, 47, 50, 53, 56, 60, 61, 62, 63, 64, 65, 66, 78, 90, 103, 105, 106, 107, 108, 111, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 192, 203, 204, 213, 221, 231, 236, 239, 245, 248, 261, 263, 278, 291, 302, 307, 309, 315, 318, 328, 330, 343, 353, 358, 360, 366, 369, 380, 382, 406, 411, 414, 420, 423, 436, 438, 453, 455, 465, 470, 472, 476, 481, 483, 493, 497, 507, 509, 522, 524, 527, 529, 532, 536, 538, 539, 540, 541, 544, 549, 558, 559, 573, 583, 584, 597, 598, 599, 600, 601, 602, 605, 606, 607, 617, 618, 629, 639, 640, 650, 651, 673, 683, 684, 694, 695, 697, 707, 711, 712, 714, 715, 716, 718, 721, 724, 725, 805, 811, 873, 875, 879], "5": [0, 1, 16, 46, 54, 61, 64, 66, 73, 78, 80, 94, 105, 106, 108, 111, 133, 135, 136, 137, 138, 141, 143, 145, 146, 192, 226, 228, 238, 239, 240, 246, 248, 250, 251, 257, 263, 269, 272, 274, 290, 297, 299, 309, 310, 316, 318, 325, 330, 336, 340, 348, 350, 360, 361, 367, 369, 376, 382, 388, 393, 401, 403, 413, 414, 415, 421, 423, 425, 426, 432, 438, 444, 447, 450, 460, 462, 472, 473, 476, 483, 491, 504, 505, 519, 522, 524, 527, 532, 536, 538, 544, 556, 566, 580, 591, 593, 597, 598, 601, 602, 605, 696, 711, 721, 724, 725, 726, 747, 752, 756, 757, 759, 762, 763, 770, 771, 772, 794, 795, 796, 801, 803, 804, 811, 812, 815, 877], "awgh": 0, "aw": [0, 94], "he": 0, "25": [0, 1, 50, 63, 78, 83, 94, 105, 106, 108, 135, 141, 142, 244, 248, 250, 263, 267, 276, 280, 314, 318, 330, 334, 365, 369, 382, 386, 419, 423, 425, 438, 442, 448, 474, 476, 483, 487, 524, 527, 538, 597, 598, 601, 606, 721, 724, 725, 875], "4": [0, 1, 28, 45, 48, 49, 52, 54, 67, 69, 78, 81, 94, 105, 106, 135, 136, 138, 141, 142, 143, 145, 146, 192, 202, 214, 219, 221, 228, 233, 238, 239, 248, 258, 262, 272, 274, 277, 278, 280, 291, 299, 304, 309, 318, 326, 329, 340, 350, 355, 360, 369, 377, 381, 393, 403, 408, 413, 414, 423, 433, 437, 447, 450, 452, 453, 455, 462, 467, 472, 476, 479, 482, 491, 493, 504, 505, 513, 519, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 543, 556, 561, 566, 580, 587, 591, 593, 597, 599, 605, 696, 710, 711, 718, 721, 726, 747, 757, 762, 763, 770, 771, 772, 801, 803, 804, 806, 807, 811, 812, 875, 877], "8": [0, 1, 66, 132, 133, 137, 138, 143, 145, 146, 160, 219, 239, 248, 271, 276, 292, 309, 318, 338, 360, 369, 390, 414, 423, 446, 448, 472, 476, 490, 519, 537, 543, 566, 593, 598, 605, 696, 721, 725, 726, 762, 771, 804, 812, 875, 877], "similarli": [0, 1, 136, 875], "perform": [0, 1, 16, 53, 54, 66, 78, 90, 103, 105, 106, 107, 108, 136, 137, 193, 221, 278, 291, 343, 396, 453, 455, 495, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 542, 543, 545, 547, 569, 571, 581, 584, 601, 602, 605, 606, 607, 629, 673, 684, 696, 716, 718, 719, 725, 726, 733, 734, 758, 761, 768, 779, 785, 786, 787, 796, 808, 809, 815, 873], "global_pairwise_align_nucleotid": 0, "gcgtgcctaaggtatgcaag": 0, "acgtgcctaggtacgcaag": 0, "20": [0, 142, 343, 527, 532, 707, 713, 721, 724, 725], "acgtgccta": 0, "ggtacgcaag": 0, "packag": [1, 16, 66, 68, 104, 134, 136, 141, 143, 541, 544, 597, 598, 599, 600, 601, 604, 710, 711, 718, 721, 873, 876, 877, 878], "analyz": [1, 524, 711, 724], "biolog": [1, 53, 60, 61, 62, 89, 94, 95, 99, 101, 136, 137, 139, 141, 144, 192, 241, 242, 243, 245, 246, 249, 252, 253, 254, 257, 269, 311, 312, 313, 315, 316, 319, 320, 321, 322, 325, 336, 362, 363, 364, 366, 367, 370, 371, 372, 373, 376, 388, 416, 417, 418, 420, 421, 424, 427, 428, 429, 432, 444, 455, 493, 724, 812, 872], "It": [1, 16, 67, 74, 78, 79, 81, 94, 101, 132, 134, 136, 137, 138, 139, 141, 143, 146, 160, 192, 202, 205, 213, 214, 216, 217, 219, 221, 257, 269, 325, 336, 343, 376, 388, 396, 432, 444, 448, 527, 530, 532, 536, 544, 586, 599, 600, 605, 628, 629, 661, 672, 684, 710, 711, 715, 718, 721, 724, 725, 732, 733, 734, 758, 761, 815, 837, 861, 875], "alpha": [1, 103, 109, 527, 721, 722, 726], "beta": [1, 107, 108, 110, 135], "intend": [1, 84, 85, 221, 292, 343, 695, 707, 815, 816], "primari": [1, 147, 875], "interfac": [1, 51, 52, 104, 256, 258, 324, 326, 375, 377, 431, 433, 478, 479, 493, 597, 598, 599, 600, 811, 873], "addition": [1, 141, 189, 202, 875, 877], "support": [1, 47, 55, 59, 80, 189, 218, 220, 221, 270, 279, 337, 342, 343, 389, 395, 396, 445, 454, 489, 492, 493, 505, 514, 520, 562, 567, 588, 594, 599, 697, 708, 709, 716, 721, 732, 752, 789, 807, 810, 811, 818, 838, 861, 872, 877, 878, 879], "discoveri": 1, "avail": [1, 107, 132, 136, 137, 138, 142, 146, 177, 178, 274, 280, 289, 340, 393, 450, 491, 505, 569, 597, 598, 599, 600, 601, 640, 721, 725, 813, 873, 879], "document": [1, 35, 110, 136, 138, 143, 144, 179, 527, 707, 732, 873], "high": [1, 78, 105, 106, 136, 137, 532, 707, 710, 716], "level": [1, 57, 84, 141, 189, 527, 723, 724, 770, 818, 875], "discuss": [1, 94, 105, 106, 879], "how": [1, 43, 53, 54, 90, 136, 138, 189, 239, 261, 273, 290, 291, 309, 328, 339, 360, 380, 392, 414, 436, 449, 472, 481, 537, 543, 599, 716, 721, 723, 724, 725, 873, 879], "work": [1, 16, 108, 136, 143, 147, 221, 343, 396, 544, 599, 711, 725, 872, 874, 875, 877], "should": [1, 16, 47, 67, 74, 78, 79, 90, 94, 101, 103, 104, 105, 106, 107, 132, 138, 142, 146, 147, 159, 160, 161, 202, 221, 244, 261, 262, 263, 273, 280, 314, 328, 329, 330, 339, 343, 365, 380, 381, 382, 392, 396, 419, 436, 437, 438, 449, 474, 481, 482, 483, 523, 525, 526, 527, 537, 543, 581, 599, 601, 605, 695, 710, 711, 716, 717, 718, 721, 724, 725, 770, 791], "first": [1, 16, 28, 60, 61, 62, 63, 64, 65, 66, 69, 78, 105, 106, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 161, 214, 219, 259, 261, 277, 278, 290, 327, 328, 379, 380, 434, 436, 452, 455, 480, 481, 497, 524, 525, 526, 527, 532, 549, 573, 597, 599, 629, 684, 696, 712, 721, 724, 752, 756, 765, 766, 771, 774, 804, 805, 849, 873, 877, 879], "you": [1, 16, 60, 61, 62, 78, 103, 105, 106, 107, 108, 132, 134, 136, 137, 139, 143, 145, 147, 201, 202, 214, 216, 217, 221, 343, 396, 455, 493, 584, 597, 601, 718, 721, 723, 724, 725, 754, 756, 757, 873, 875, 877, 879], "read": [1, 16, 59, 78, 105, 106, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 145, 146, 159, 160, 177, 179, 181, 186, 189, 190, 220, 221, 278, 279, 280, 290, 291, 342, 343, 395, 396, 453, 454, 455, 492, 520, 542, 544, 567, 594, 602, 709, 733, 734, 746, 747, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 766, 767, 768, 770, 772, 773, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 818, 877], "befor": [1, 47, 136, 140, 145, 250, 251, 290, 425, 426, 598, 599, 725, 786, 805, 877, 879], "alpha_divers": [1, 78, 94, 107, 109], "beta_divers": [1, 103, 105, 106, 108, 110, 111], "design": [1, 108, 131, 135, 544, 723], "sampl": [1, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 131, 527, 532, 545, 597, 598, 600, 601, 607, 640, 673, 684, 695, 697, 706, 707, 710, 711, 716, 717, 718, 721, 723, 724, 725, 757, 816], "accept": [1, 28, 56, 108, 271, 277, 278, 338, 390, 446, 452, 453, 490, 505, 521, 527, 599, 603, 605, 721, 724, 725, 767, 796, 804, 807, 861], "matrix": [1, 16, 67, 103, 107, 108, 111, 274, 340, 393, 450, 491, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 517, 518, 519, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 549, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 568, 569, 570, 571, 573, 578, 579, 580, 582, 583, 584, 585, 586, 587, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 696, 707, 710, 712, 713, 714, 716, 717, 718, 720, 722, 769, 801, 812, 876], "contain": [1, 16, 28, 46, 48, 54, 60, 61, 62, 63, 64, 65, 66, 69, 103, 104, 107, 108, 111, 131, 132, 134, 135, 136, 137, 139, 140, 142, 143, 145, 146, 147, 179, 221, 223, 228, 241, 243, 248, 249, 252, 253, 254, 257, 261, 262, 263, 269, 271, 274, 280, 292, 294, 299, 311, 313, 318, 319, 320, 321, 322, 325, 328, 329, 330, 336, 338, 340, 343, 345, 350, 362, 364, 369, 370, 371, 372, 373, 376, 378, 380, 381, 382, 388, 390, 391, 393, 396, 398, 403, 416, 418, 423, 424, 427, 428, 429, 432, 436, 437, 438, 444, 446, 450, 455, 457, 462, 476, 481, 482, 483, 490, 491, 493, 507, 509, 513, 521, 522, 527, 541, 542, 544, 545, 558, 559, 561, 569, 583, 584, 587, 591, 597, 598, 599, 600, 601, 602, 604, 606, 696, 707, 711, 750, 754, 762, 792, 811, 812, 836, 839, 861, 875, 876, 877], "frequenc": [1, 47, 50, 69, 81, 250, 251, 263, 265, 267, 330, 332, 334, 382, 384, 386, 425, 426, 438, 440, 442, 483, 485, 487, 721, 723, 725, 732, 752], "taxa": [1, 69, 70, 71, 75, 76, 77, 78, 79, 81, 82, 83, 86, 88, 89, 90, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 146, 524, 527, 711, 725, 757, 812], "within": [1, 47, 94, 102, 108, 131, 133, 136, 137, 141, 143, 145, 221, 343, 396, 455, 504, 532, 556, 580, 601, 602, 662, 697, 707, 723, 724, 732, 774, 815, 818, 861, 877, 879], "term": [1, 47, 74, 92, 94, 138, 605, 812], "taxon": [1, 69, 70, 71, 74, 76, 78, 87, 88, 94, 97, 98, 102, 105, 106, 135, 138, 770, 877], "plural": [1, 191], "group": [1, 101, 275, 341, 394, 451, 504, 527, 532, 541, 556, 580, 597, 600, 601, 606, 607, 617, 618, 639, 650, 662, 672, 673, 683, 694, 723, 724, 725, 838, 877], "relat": [1, 78, 79, 87, 94, 105, 106, 108, 135, 136, 140, 145, 544, 591, 710, 711, 718], "organ": [1, 135, 138, 146], "constitut": [1, 493, 511], "unit": [1, 105, 138, 147, 493, 716, 718, 719, 815, 816, 878], "commun": [1, 69, 74, 78, 94, 97, 102, 105, 106, 532, 544, 597, 598, 600, 601, 707, 711, 718, 725], "usual": [1, 101, 135, 138, 146, 493, 752], "defin": [1, 28, 54, 56, 62, 65, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 111, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 149, 192, 202, 216, 221, 226, 244, 262, 263, 273, 274, 280, 281, 288, 289, 292, 297, 314, 329, 330, 339, 340, 343, 348, 365, 381, 382, 392, 393, 396, 401, 419, 437, 438, 449, 450, 460, 474, 482, 483, 491, 493, 505, 510, 513, 523, 525, 526, 530, 531, 533, 534, 535, 538, 539, 540, 545, 561, 587, 599, 602, 707, 721, 808, 809, 812, 815, 849, 873, 875, 877, 879], "uniform": [1, 603], "taxonom": [1, 105], "rank": [1, 102, 146, 527, 597, 598, 599, 720, 770], "speci": [1, 69, 78, 81, 83, 88, 94, 101, 102, 142, 146, 524, 532, 696, 711, 716, 718, 732], "genu": [1, 146], "famili": 1, "In": [1, 16, 47, 78, 94, 105, 106, 108, 136, 137, 138, 139, 141, 143, 146, 221, 251, 290, 343, 396, 426, 493, 524, 527, 532, 544, 598, 599, 605, 695, 710, 711, 716, 721, 725, 732, 752, 765, 811, 873, 875, 877, 879], "ecologi": [1, 76, 78, 79, 86, 87, 102, 527, 597, 598, 599, 600, 696, 710, 711, 716, 717, 718], "i": [1, 2, 16, 28, 29, 30, 31, 32, 33, 35, 40, 42, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 111, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 159, 160, 161, 173, 174, 176, 180, 181, 182, 184, 185, 186, 187, 189, 192, 193, 199, 201, 202, 205, 211, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 226, 228, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 287, 290, 291, 292, 293, 294, 295, 296, 297, 299, 306, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 357, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 462, 469, 472, 473, 474, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 502, 504, 507, 512, 513, 514, 515, 518, 519, 520, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 554, 556, 558, 560, 561, 562, 563, 565, 566, 567, 569, 570, 571, 573, 578, 580, 581, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 597, 598, 599, 600, 601, 603, 605, 628, 640, 661, 672, 673, 684, 695, 696, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 732, 733, 734, 737, 747, 750, 752, 754, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 771, 772, 774, 776, 777, 778, 780, 782, 783, 785, 788, 789, 793, 796, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 822, 835, 836, 837, 838, 839, 849, 850, 861, 872, 875, 877, 878, 879], "refer": [1, 16, 35, 47, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 105, 106, 108, 192, 221, 280, 288, 289, 292, 343, 396, 455, 493, 505, 515, 525, 527, 532, 536, 537, 541, 543, 545, 563, 569, 581, 589, 597, 598, 599, 600, 601, 605, 707, 710, 711, 718, 755, 784, 811, 812], "singular": [1, 720, 788, 861], "its": [1, 28, 45, 46, 48, 49, 51, 52, 53, 54, 60, 61, 62, 92, 135, 136, 137, 138, 141, 142, 145, 147, 161, 183, 189, 192, 202, 248, 255, 256, 258, 263, 318, 323, 324, 326, 330, 369, 374, 375, 377, 382, 423, 430, 431, 433, 438, 455, 476, 477, 478, 479, 483, 497, 505, 528, 549, 573, 598, 706, 710, 712, 715, 720, 732, 754, 784, 785, 794, 799, 804, 805, 811, 812, 836, 873, 877], "definit": [1, 46, 74, 135, 136, 137, 138, 139, 146, 221, 238, 239, 242, 243, 245, 252, 253, 257, 269, 272, 275, 276, 277, 278, 280, 290, 291, 292, 309, 312, 313, 315, 320, 321, 325, 336, 341, 343, 360, 363, 364, 366, 371, 372, 376, 388, 394, 396, 413, 414, 417, 418, 420, 427, 428, 432, 444, 447, 448, 451, 452, 453, 472, 505, 812, 875, 878, 879], "limit": [1, 77, 132, 141, 142, 143, 723, 724, 812], "synonym": [1, 146], "mani": [1, 69, 93, 110, 141, 493, 524, 527, 605, 710, 716, 724, 725, 879], "situat": [1, 707, 723], "veri": [1, 60, 61, 62, 83, 136, 141, 147, 524, 757], "loos": [1, 605], "practic": [1, 54, 94, 136, 137, 144, 695, 760, 765], "repres": [1, 46, 74, 76, 78, 81, 90, 97, 98, 105, 106, 108, 131, 132, 133, 135, 136, 140, 141, 143, 145, 146, 192, 213, 221, 274, 340, 343, 393, 396, 450, 455, 491, 493, 497, 504, 509, 519, 533, 534, 541, 542, 549, 556, 559, 566, 573, 580, 584, 593, 605, 696, 707, 721, 732, 799, 804, 811, 812, 875, 877], "featur": [1, 80, 91, 136, 139, 145, 192, 202, 205, 214, 216, 217, 219, 221, 292, 343, 396, 455, 527, 532, 541, 697, 706, 710, 711, 717, 718, 816, 875], "type": [1, 16, 28, 33, 45, 46, 48, 84, 95, 99, 107, 111, 131, 134, 136, 137, 138, 139, 140, 143, 145, 146, 159, 161, 174, 176, 177, 178, 180, 185, 189, 223, 226, 235, 238, 239, 240, 242, 244, 245, 246, 259, 260, 265, 266, 267, 268, 271, 272, 281, 287, 294, 297, 306, 309, 310, 312, 314, 315, 316, 327, 332, 333, 334, 335, 338, 345, 348, 357, 360, 361, 363, 365, 366, 367, 379, 384, 385, 386, 387, 390, 398, 401, 410, 413, 414, 415, 417, 419, 420, 421, 434, 435, 440, 441, 442, 443, 446, 447, 455, 457, 460, 469, 472, 473, 474, 480, 485, 486, 487, 488, 490, 493, 497, 506, 518, 522, 523, 544, 545, 549, 557, 565, 569, 573, 582, 592, 598, 601, 603, 696, 710, 711, 718, 721, 723, 733, 734, 754, 758, 761, 803, 811, 815, 822, 873, 875], "includ": [1, 47, 53, 55, 59, 67, 68, 78, 94, 105, 106, 110, 111, 134, 135, 136, 137, 140, 141, 142, 143, 145, 218, 220, 228, 237, 242, 250, 251, 261, 270, 274, 276, 277, 278, 279, 290, 291, 299, 308, 312, 328, 337, 340, 342, 350, 359, 363, 380, 389, 393, 395, 396, 403, 412, 417, 425, 426, 436, 445, 448, 450, 452, 453, 454, 462, 471, 481, 489, 491, 492, 493, 503, 505, 514, 520, 527, 544, 555, 562, 567, 579, 584, 588, 591, 594, 597, 598, 600, 601, 602, 606, 696, 706, 707, 708, 709, 711, 716, 717, 721, 725, 747, 748, 750, 779, 781, 782, 785, 786, 787, 789, 802, 804, 805, 810, 873, 875, 876, 877, 878], "gene": [1, 139, 192, 202, 214, 217, 221, 455, 532, 537, 543], "metabolit": [1, 725], "purpos": [1, 66, 69, 146, 280, 721, 872, 879], "singl": [1, 28, 45, 48, 56, 78, 84, 85, 93, 105, 106, 108, 135, 136, 137, 138, 141, 143, 144, 145, 192, 202, 214, 228, 231, 236, 248, 261, 275, 299, 302, 307, 318, 328, 341, 350, 353, 358, 369, 380, 394, 403, 406, 411, 423, 436, 451, 462, 465, 470, 476, 481, 493, 527, 541, 605, 722, 753, 861, 873, 877, 879], "what": [1, 78, 94, 103, 105, 106, 107, 141, 147, 149, 177, 178, 182, 187, 217, 261, 328, 380, 436, 481, 605, 695, 724, 877, 879], "vari": [1, 601, 721, 723, 724], "wide": [1, 54, 94, 239, 309, 360, 414, 472], "For": [1, 28, 47, 55, 59, 66, 94, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 202, 217, 218, 219, 220, 221, 270, 279, 337, 342, 343, 389, 395, 396, 445, 454, 455, 489, 492, 505, 514, 520, 527, 532, 562, 567, 588, 594, 597, 598, 599, 600, 601, 603, 605, 607, 673, 707, 708, 709, 710, 711, 721, 723, 724, 725, 752, 789, 810, 811, 813, 814, 873, 875, 877], "microbiom": [1, 94, 108, 527, 532, 716], "survei": 1, "could": [1, 28, 85, 136, 137, 144, 147, 180, 182, 185, 187, 527, 532, 545, 597, 599, 600, 601, 602, 605, 707, 723, 778, 780, 813, 814, 873], "all": [1, 16, 28, 29, 46, 47, 51, 52, 54, 60, 61, 62, 67, 69, 78, 79, 80, 90, 94, 95, 99, 102, 103, 105, 106, 107, 108, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 149, 173, 184, 192, 202, 205, 214, 216, 217, 221, 239, 242, 245, 248, 256, 258, 261, 271, 275, 290, 309, 312, 315, 318, 324, 326, 328, 338, 341, 343, 360, 363, 366, 369, 375, 377, 380, 390, 394, 396, 414, 417, 420, 423, 431, 433, 436, 446, 451, 455, 472, 476, 478, 479, 481, 490, 493, 504, 505, 509, 511, 519, 527, 529, 532, 536, 538, 539, 540, 541, 544, 556, 559, 566, 580, 584, 591, 593, 597, 598, 599, 600, 601, 602, 629, 640, 684, 695, 696, 707, 715, 716, 724, 725, 726, 732, 748, 751, 752, 753, 762, 765, 766, 767, 778, 780, 781, 784, 791, 796, 797, 799, 801, 811, 838, 839, 877], "16": [1, 76, 94, 134, 136, 137, 138, 142, 143, 238, 247, 272, 317, 368, 413, 422, 447, 475, 532, 707, 721, 725, 772, 801], "rrna": [1, 532], "oral": 1, "swab": 1, "compar": [1, 88, 105, 111, 132, 133, 219, 260, 265, 266, 267, 268, 271, 332, 333, 334, 335, 338, 384, 385, 386, 387, 390, 435, 440, 441, 442, 443, 446, 485, 486, 487, 488, 490, 495, 502, 527, 544, 547, 554, 571, 578, 599, 605, 723, 724, 725, 755, 756, 757, 785, 815, 816, 875, 877], "genom": [1, 202], "studi": [1, 78, 524, 527, 710, 718, 725], "hand": [1, 716], "individu": [1, 69, 70, 71, 74, 77, 78, 79, 81, 86, 87, 88, 89, 90, 95, 99, 102, 105, 106, 131, 136, 493, 527, 723, 879], "previou": [1, 60, 61, 62, 63, 64, 65, 226, 297, 348, 401, 460, 597, 599, 601], "version": [1, 72, 73, 78, 94, 103, 105, 106, 107, 131, 132, 134, 135, 138, 139, 143, 160, 245, 273, 275, 315, 339, 341, 366, 392, 394, 420, 449, 451, 541, 746, 750, 813, 817, 875], "oper": [1, 45, 48, 54, 105, 132, 136, 141, 215, 221, 250, 251, 343, 396, 425, 426, 455, 524, 526, 538, 539, 540, 544, 545, 581, 599, 600, 716, 770, 794, 811, 839, 873, 875], "otu": [1, 92], "histor": [1, 92, 280, 752], "research": [1, 146, 599, 716], "howev": [1, 78, 79, 94, 103, 105, 106, 107, 136, 140, 141, 146, 221, 343, 396, 455, 524, 532, 601, 605, 716, 763, 818], "field": [1, 133, 137, 144, 280], "advanc": 1, "diverg": 1, "e": [1, 16, 29, 40, 47, 50, 51, 57, 74, 79, 80, 81, 82, 83, 88, 89, 94, 95, 96, 97, 98, 99, 101, 105, 106, 107, 108, 111, 126, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 192, 215, 239, 247, 248, 256, 290, 309, 317, 318, 324, 343, 360, 368, 369, 375, 378, 391, 414, 422, 423, 431, 448, 455, 472, 475, 476, 478, 493, 497, 504, 513, 519, 522, 527, 532, 541, 542, 544, 545, 549, 556, 561, 566, 569, 573, 580, 587, 591, 593, 597, 598, 599, 600, 601, 707, 713, 714, 723, 724, 726, 732, 733, 734, 747, 748, 750, 752, 753, 754, 758, 759, 761, 762, 763, 765, 766, 767, 768, 772, 776, 778, 779, 780, 781, 782, 788, 792, 793, 794, 797, 798, 799, 801, 802, 803, 804, 806, 807, 808, 809, 811, 812, 816, 835, 838, 872, 873, 875, 877, 879], "amplicon": 1, "variant": [1, 78, 94, 144, 146, 493], "asv": 1, "gener": [1, 45, 48, 60, 66, 67, 68, 86, 94, 108, 137, 138, 139, 141, 145, 146, 159, 161, 174, 176, 180, 185, 188, 247, 261, 262, 317, 328, 329, 368, 380, 381, 422, 436, 437, 455, 475, 481, 482, 493, 532, 544, 568, 595, 597, 598, 599, 603, 695, 697, 707, 710, 721, 724, 725, 731, 872, 873, 875, 878], "becom": [1, 79, 136, 137, 141, 202], "appropri": [1, 131, 140, 189, 239, 309, 360, 414, 472, 527, 873, 877], "therefor": [1, 45, 48, 54, 74, 78, 94, 98, 105, 106, 111, 493, 527], "wa": [1, 60, 63, 69, 70, 71, 74, 77, 78, 80, 81, 82, 86, 87, 94, 95, 97, 98, 103, 105, 106, 107, 108, 134, 136, 137, 141, 143, 189, 261, 290, 328, 380, 436, 455, 481, 527, 537, 541, 543, 599, 651, 715, 723, 725, 748, 790, 811, 812, 873, 877, 879], "replac": [1, 67, 90, 136, 221, 273, 276, 339, 343, 392, 396, 448, 449, 493, 524, 536, 695, 719, 726, 803], "6": [1, 48, 72, 73, 78, 92, 94, 105, 106, 133, 135, 136, 137, 138, 145, 146, 238, 239, 247, 248, 271, 272, 274, 292, 309, 317, 318, 338, 340, 360, 368, 369, 390, 393, 413, 414, 422, 423, 446, 447, 450, 472, 475, 476, 490, 491, 519, 527, 529, 532, 534, 537, 538, 539, 566, 591, 593, 599, 601, 602, 605, 696, 721, 747, 752, 762, 763, 771, 772, 801, 803, 804, 811, 875], "given": [1, 55, 59, 69, 80, 83, 88, 90, 99, 103, 107, 108, 111, 136, 137, 141, 142, 159, 161, 177, 178, 180, 181, 185, 186, 215, 218, 220, 270, 274, 279, 337, 340, 342, 389, 393, 395, 445, 450, 454, 489, 491, 492, 509, 514, 520, 541, 559, 562, 567, 584, 588, 594, 598, 599, 602, 708, 709, 711, 715, 720, 722, 724, 732, 767, 789, 810, 837, 838, 850, 879], "number": [1, 28, 40, 45, 48, 69, 70, 71, 72, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 131, 132, 134, 135, 136, 138, 141, 143, 144, 145, 146, 189, 192, 202, 213, 233, 240, 248, 265, 267, 304, 310, 318, 332, 334, 355, 361, 369, 384, 386, 408, 415, 423, 440, 442, 467, 473, 476, 485, 487, 493, 508, 526, 527, 532, 536, 538, 539, 540, 541, 545, 569, 597, 598, 599, 600, 601, 602, 603, 605, 640, 684, 695, 711, 715, 716, 718, 719, 721, 722, 724, 725, 726, 752, 759, 796, 815, 816], "observ": [1, 78, 81, 90, 93, 101, 105, 106, 111, 221, 248, 274, 292, 318, 340, 343, 369, 393, 396, 423, 450, 455, 476, 491, 527, 605, 696, 721, 724, 725, 783, 811, 879], "particular": [1, 732, 814, 879], "associ": [1, 35, 69, 94, 137, 145, 146, 149, 174, 175, 176, 192, 213, 215, 217, 221, 343, 396, 455, 598, 605, 695, 715, 719, 722, 723, 724, 762, 768, 801, 873], "throughout": [1, 140, 280, 289, 724, 878], "array_lik": [1, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 111, 228, 246, 247, 261, 271, 299, 316, 317, 328, 338, 350, 367, 368, 380, 390, 403, 421, 422, 436, 446, 462, 475, 481, 490, 527, 528, 529, 530, 531, 535, 536, 537, 538, 539, 540, 543, 545, 597, 599, 600, 601, 602, 605, 712, 715, 719, 722, 725, 726], "anyth": [1, 136, 137, 144, 147, 455, 838, 849, 861, 879], "convert": [1, 132, 134, 135, 136, 138, 141, 143, 145, 189, 221, 244, 273, 274, 314, 339, 340, 343, 365, 392, 393, 396, 419, 449, 450, 455, 474, 491, 545, 586, 598, 726, 752, 817], "d": [1, 16, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 132, 133, 138, 141, 142, 221, 343, 396, 504, 508, 513, 519, 524, 525, 526, 530, 531, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 556, 561, 566, 580, 587, 591, 593, 597, 598, 599, 600, 601, 605, 640, 662, 684, 697, 707, 715, 724, 725, 726, 733, 734, 747, 748, 750, 752, 753, 754, 755, 756, 758, 759, 761, 762, 763, 765, 766, 767, 768, 772, 778, 779, 780, 781, 782, 788, 792, 793, 794, 796, 797, 798, 799, 801, 802, 803, 806, 807, 808, 809, 811, 812, 873, 875, 877, 879], "numpi": [1, 107, 497, 515, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 549, 563, 573, 581, 589, 597, 601, 603, 605, 606, 640, 662, 684, 695, 696, 721, 723, 724, 725, 726, 757, 796, 875], "arrai": [1, 16, 47, 50, 78, 94, 105, 106, 136, 142, 221, 238, 241, 243, 249, 266, 268, 269, 272, 274, 292, 311, 313, 319, 333, 335, 336, 340, 343, 362, 364, 370, 385, 387, 388, 391, 393, 396, 413, 416, 418, 424, 441, 443, 444, 447, 450, 455, 486, 488, 491, 493, 495, 503, 508, 511, 515, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 555, 563, 569, 571, 579, 581, 589, 605, 606, 640, 662, 684, 696, 715, 719, 721, 722, 723, 724, 725, 726, 774, 803, 811, 875], "nativ": [1, 515, 563, 589, 716], "list": [1, 66, 78, 94, 105, 106, 109, 110, 132, 135, 137, 138, 139, 142, 145, 146, 147, 159, 161, 177, 178, 189, 202, 271, 338, 390, 446, 455, 490, 503, 507, 510, 542, 544, 555, 558, 579, 583, 599, 601, 602, 618, 640, 651, 673, 706, 721, 723, 724, 725, 732, 748, 754, 762, 764, 766, 769, 778, 780, 781, 796, 797, 801, 803, 804, 811, 812, 873, 879], "result": [1, 2, 16, 17, 47, 49, 54, 60, 61, 62, 78, 79, 83, 103, 105, 106, 107, 111, 132, 133, 136, 147, 189, 214, 221, 238, 239, 242, 272, 274, 309, 312, 340, 343, 360, 363, 393, 396, 413, 414, 417, 447, 450, 472, 491, 524, 527, 532, 535, 536, 584, 597, 599, 600, 601, 602, 603, 606, 617, 618, 628, 629, 639, 650, 651, 661, 662, 672, 673, 683, 694, 695, 696, 697, 706, 707, 710, 711, 716, 718, 721, 726, 765, 781, 795, 803, 804, 811, 812, 816, 873, 875, 879], "ident": [1, 132, 133, 141, 497, 549, 569, 573, 605, 727, 757, 790, 877], "As": [1, 135, 138, 141, 455, 515, 541, 563, 589, 599, 601, 711, 765, 873, 879], "mention": [1, 141], "which": [1, 2, 28, 60, 61, 62, 69, 74, 78, 88, 94, 98, 101, 105, 106, 108, 132, 134, 136, 138, 139, 140, 141, 142, 143, 145, 146, 147, 149, 159, 160, 161, 162, 174, 176, 177, 178, 179, 180, 185, 221, 239, 240, 251, 259, 261, 264, 274, 290, 292, 309, 310, 327, 328, 331, 340, 343, 360, 361, 379, 380, 383, 393, 396, 414, 415, 426, 434, 436, 439, 450, 455, 472, 473, 480, 481, 484, 491, 504, 524, 525, 527, 532, 545, 556, 580, 597, 600, 601, 605, 711, 715, 716, 721, 722, 723, 724, 725, 757, 760, 791, 792, 803, 804, 809, 811, 812, 822, 839, 861, 873, 875, 877, 879], "row": [1, 28, 103, 107, 108, 111, 131, 143, 192, 493, 497, 512, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 549, 560, 573, 585, 586, 591, 597, 598, 599, 600, 601, 602, 603, 605, 697, 710, 711, 714, 718, 724, 725, 815], "so": [1, 2, 47, 60, 61, 62, 63, 64, 65, 67, 78, 103, 105, 106, 107, 136, 141, 147, 189, 190, 202, 205, 250, 251, 425, 426, 599, 673, 696, 710, 711, 712, 716, 718, 721, 723, 724, 725, 811, 873, 877, 879], "column": [1, 16, 28, 52, 53, 54, 107, 131, 136, 138, 139, 142, 143, 145, 146, 239, 258, 264, 309, 326, 331, 360, 377, 383, 414, 433, 439, 455, 472, 479, 484, 493, 497, 512, 516, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 544, 549, 560, 564, 573, 585, 586, 590, 597, 598, 599, 600, 601, 602, 603, 605, 640, 684, 696, 707, 710, 711, 712, 714, 718, 719, 723, 724, 770, 774, 815, 816], "some": [1, 16, 68, 78, 80, 90, 94, 136, 138, 141, 144, 159, 160, 161, 192, 216, 221, 343, 396, 526, 538, 539, 540, 711, 721, 724, 838, 877, 879], "incorpor": [1, 94, 523], "relationship": [1, 94, 141, 710, 711, 718, 721, 725, 812], "between": [1, 16, 61, 64, 74, 79, 80, 84, 95, 102, 105, 106, 107, 111, 131, 136, 137, 138, 140, 143, 145, 146, 205, 219, 239, 244, 265, 266, 267, 268, 309, 314, 332, 333, 334, 335, 360, 365, 384, 385, 386, 387, 414, 419, 440, 441, 442, 443, 472, 474, 485, 486, 487, 488, 493, 497, 509, 521, 522, 523, 527, 532, 541, 544, 545, 549, 559, 569, 573, 584, 597, 598, 599, 600, 601, 602, 604, 605, 640, 710, 711, 712, 718, 721, 724, 725, 732, 747, 755, 756, 757, 763, 772, 782, 801, 802, 812, 875, 877], "through": [1, 35, 60, 61, 62, 173, 179, 184, 497, 549, 573, 716, 765, 879], "phylogenet": [1, 78, 94, 105, 106, 141, 143, 544, 605, 732, 755, 765, 812, 872, 875], "tree": [1, 78, 94, 105, 106, 141, 145, 146, 202, 542, 872, 873], "take": [1, 107, 143, 147, 159, 160, 161, 244, 271, 314, 338, 365, 390, 419, 446, 474, 490, 509, 527, 559, 569, 584, 598, 599, 673, 710, 718, 721, 722, 812, 838, 877, 879], "treenod": [1, 78, 94, 105, 106, 141, 542, 811, 812, 873, 877], "map": [1, 49, 56, 108, 149, 162, 221, 292, 343, 396, 599, 602, 605, 606, 640, 684, 707, 723, 725, 771, 774, 875], "valu": [1, 3, 4, 7, 9, 10, 11, 18, 19, 21, 23, 24, 25, 34, 37, 39, 41, 47, 51, 60, 61, 62, 63, 64, 65, 67, 69, 80, 90, 102, 103, 106, 131, 132, 133, 135, 136, 137, 138, 139, 140, 145, 150, 151, 153, 155, 156, 157, 163, 164, 166, 168, 169, 170, 189, 192, 194, 196, 197, 198, 201, 206, 208, 209, 210, 213, 217, 221, 222, 227, 230, 232, 234, 238, 239, 256, 264, 271, 272, 282, 284, 285, 286, 292, 293, 298, 301, 303, 305, 309, 324, 331, 338, 343, 344, 349, 352, 354, 356, 360, 375, 383, 390, 396, 397, 402, 405, 407, 409, 413, 414, 431, 439, 446, 447, 455, 456, 461, 464, 466, 468, 472, 478, 484, 490, 496, 499, 500, 501, 504, 519, 524, 527, 529, 531, 532, 536, 537, 538, 539, 540, 543, 548, 551, 552, 553, 556, 566, 572, 575, 576, 577, 580, 593, 597, 598, 599, 600, 601, 602, 603, 605, 608, 609, 611, 613, 614, 615, 619, 620, 622, 624, 625, 626, 628, 630, 631, 633, 635, 636, 637, 640, 641, 642, 644, 646, 647, 648, 652, 653, 655, 657, 658, 659, 661, 663, 664, 666, 668, 669, 670, 672, 674, 675, 677, 679, 680, 681, 685, 686, 688, 690, 691, 692, 695, 698, 699, 701, 703, 704, 705, 707, 710, 711, 715, 716, 718, 720, 721, 722, 723, 724, 725, 732, 735, 736, 739, 742, 744, 745, 752, 754, 757, 796, 803, 814, 815, 816, 820, 821, 824, 826, 827, 828, 829, 838, 840, 841, 843, 845, 846, 847, 850, 852, 853, 855, 857, 858, 859, 861, 863, 864, 866, 868, 869, 870, 879], "tip": [1, 78, 94, 105, 106, 732, 750, 752, 754, 755, 756, 757, 759, 760, 762, 763, 765, 772, 777, 778, 779, 780, 782, 783, 785, 786, 787, 793, 794, 795, 796, 798, 799, 801, 804, 805, 806, 811, 873, 877], "optim": [1, 2, 16, 79, 103, 105, 106, 107, 601, 763, 813, 872], "time": [1, 16, 45, 48, 78, 90, 99, 105, 106, 108, 136, 137, 493, 541, 581, 597, 598, 599, 600, 602, 606, 629, 684, 718, 721, 724, 725, 732, 796, 879], "often": [1, 78, 103, 107, 135, 136, 138, 544, 605, 711, 716, 721, 836], "faster": [1, 78, 105, 106, 108, 248, 278, 291, 318, 369, 423, 453, 476, 601, 716, 785], "repeat": [1, 137, 721, 835], "call": [1, 54, 78, 79, 84, 85, 105, 106, 134, 136, 143, 145, 147, 189, 192, 239, 247, 250, 271, 290, 309, 317, 338, 360, 368, 390, 414, 422, 425, 446, 455, 472, 475, 490, 586, 598, 599, 695, 711, 721, 748, 750, 751, 754, 765, 766, 768, 781, 782, 788, 797, 802, 809, 836, 838, 839, 849, 873, 879], "reason": [1, 79, 90, 135, 141, 724, 752], "matric": [1, 62, 65, 131, 140, 343, 493, 495, 502, 505, 510, 545, 547, 554, 571, 578, 598, 599, 602, 604, 605, 712, 716, 757], "rather": [1, 83, 141, 493, 524, 605, 812], "thu": [1, 136, 137, 141, 248, 318, 369, 423, 455, 476, 497, 549, 569, 573, 597, 599, 601, 605, 716], "slow": [1, 78, 103, 105, 106, 107, 872], "possibl": [1, 16, 35, 95, 99, 136, 137, 145, 216, 245, 278, 280, 291, 315, 366, 420, 453, 598, 602, 724, 757, 805, 811], "disabl": [1, 78, 103, 105, 106, 107, 879], "step": [1, 28, 45, 48, 56, 78, 103, 105, 106, 107, 143, 147, 714, 721], "pass": [1, 28, 35, 48, 55, 56, 59, 66, 103, 107, 108, 109, 110, 132, 134, 136, 138, 143, 144, 145, 159, 160, 161, 173, 179, 180, 181, 182, 184, 185, 186, 187, 189, 218, 220, 221, 244, 246, 248, 270, 271, 279, 290, 314, 316, 318, 337, 338, 342, 343, 365, 367, 369, 389, 390, 395, 396, 419, 421, 423, 445, 446, 454, 455, 474, 476, 489, 490, 492, 497, 514, 520, 549, 562, 567, 573, 584, 586, 588, 594, 599, 602, 640, 708, 709, 724, 778, 780, 789, 810, 812, 861, 877, 879], "fals": [1, 14, 15, 16, 29, 30, 31, 32, 33, 45, 46, 48, 50, 51, 52, 53, 57, 60, 61, 62, 72, 73, 78, 94, 103, 105, 106, 107, 132, 135, 136, 137, 138, 139, 141, 144, 159, 160, 161, 189, 190, 192, 202, 214, 215, 221, 222, 223, 224, 226, 228, 235, 238, 239, 241, 242, 243, 245, 248, 249, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 290, 291, 292, 293, 294, 295, 297, 299, 306, 309, 311, 312, 313, 315, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 348, 350, 357, 360, 362, 363, 364, 366, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 401, 403, 410, 413, 414, 416, 417, 418, 420, 423, 424, 426, 427, 428, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 460, 462, 469, 472, 476, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 494, 495, 502, 504, 527, 532, 537, 543, 546, 547, 554, 556, 570, 571, 578, 580, 584, 586, 599, 602, 605, 606, 607, 629, 640, 673, 716, 718, 721, 723, 724, 726, 750, 755, 756, 759, 767, 773, 776, 777, 782, 790, 802, 804, 805, 807, 816, 838, 861, 875, 877, 879], "danger": 1, "If": [1, 16, 28, 45, 47, 48, 50, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 66, 69, 72, 73, 78, 79, 80, 84, 90, 94, 103, 105, 106, 107, 108, 111, 132, 136, 139, 140, 141, 142, 143, 144, 145, 147, 149, 159, 160, 161, 174, 176, 180, 181, 185, 186, 189, 192, 201, 205, 218, 219, 221, 223, 228, 238, 239, 240, 242, 244, 246, 248, 251, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 274, 275, 290, 292, 294, 299, 309, 310, 312, 314, 316, 318, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 340, 341, 343, 345, 350, 360, 361, 363, 365, 367, 369, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 393, 394, 396, 398, 403, 413, 414, 415, 417, 419, 421, 423, 426, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 450, 451, 452, 453, 455, 457, 462, 472, 473, 474, 476, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 497, 504, 505, 507, 508, 509, 512, 513, 514, 519, 522, 523, 527, 532, 533, 534, 536, 545, 549, 556, 558, 559, 560, 561, 562, 566, 573, 580, 583, 584, 585, 586, 587, 588, 593, 597, 598, 599, 600, 601, 602, 603, 605, 640, 651, 684, 695, 706, 707, 708, 710, 711, 712, 715, 716, 719, 721, 722, 723, 724, 725, 726, 752, 754, 755, 759, 762, 765, 766, 770, 775, 778, 780, 783, 789, 794, 795, 796, 801, 803, 804, 805, 811, 812, 815, 816, 817, 818], "invalid": [1, 50, 54, 78, 94, 103, 105, 106, 107, 136, 221, 343, 396, 598, 599, 707, 749, 754, 764, 775, 784, 788], "encount": [1, 763, 765, 772], "when": [1, 16, 45, 47, 48, 54, 57, 60, 61, 62, 69, 79, 94, 95, 99, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 159, 160, 161, 180, 181, 182, 185, 186, 187, 189, 202, 214, 221, 239, 246, 247, 250, 251, 264, 292, 309, 316, 317, 331, 343, 360, 367, 368, 383, 396, 414, 421, 422, 425, 426, 439, 455, 472, 475, 484, 522, 527, 544, 597, 599, 600, 601, 603, 605, 628, 661, 672, 710, 718, 721, 722, 723, 724, 725, 726, 729, 757, 791, 808, 809, 812, 816, 817, 838, 873, 877, 879], "difficult": 1, "interpret": [1, 47, 74, 78, 103, 105, 106, 107, 131, 141, 524, 710, 711, 718], "error": [1, 47, 78, 90, 94, 103, 105, 106, 107, 136, 137, 143, 147, 189, 216, 274, 340, 393, 450, 491, 529, 536, 568, 595, 596, 597, 599, 601, 721, 725, 731, 817, 873], "messag": [1, 78, 103, 105, 106, 107, 618, 662, 817, 873], "incorrect": 1, "recommend": [1, 83, 94, 143, 145, 221, 292, 343, 396, 455, 527, 544, 707, 710, 718, 724], "user": [1, 47, 104, 112, 132, 146, 147, 149, 159, 160, 161, 180, 182, 185, 187, 273, 339, 392, 449, 527, 532, 711, 716, 813, 872, 875], "care": [1, 47, 136, 138, 601], "ensur": [1, 16, 47, 78, 105, 106, 147, 221, 343, 396, 495, 529, 532, 536, 547, 569, 571, 753, 815], "data": [1, 28, 54, 78, 80, 90, 94, 103, 105, 106, 107, 108, 111, 132, 135, 137, 139, 140, 142, 144, 145, 146, 189, 221, 292, 343, 396, 455, 493, 495, 497, 515, 524, 525, 526, 527, 528, 532, 536, 537, 541, 543, 545, 547, 549, 563, 569, 571, 573, 589, 598, 605, 606, 628, 661, 672, 695, 707, 710, 711, 715, 721, 723, 724, 725, 770, 801, 805, 812, 836, 839, 872, 873, 875, 879], "condit": [1, 84, 85, 724], "follow": [1, 51, 52, 54, 66, 73, 78, 79, 94, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 192, 221, 228, 256, 258, 299, 324, 326, 343, 350, 375, 377, 396, 403, 431, 433, 455, 462, 478, 479, 497, 505, 524, 525, 526, 527, 530, 531, 533, 534, 535, 540, 541, 544, 549, 573, 597, 598, 599, 601, 602, 606, 707, 710, 725, 751, 788, 839, 877, 879], "confid": [1, 68, 73, 77, 84, 532, 721, 722, 732, 752], "met": [1, 343, 861], "safe": [1, 78, 103, 105, 106, 107, 716, 726, 750], "cast": [1, 141, 239, 309, 360, 414, 472, 544, 545, 603, 707], "integ": [1, 16, 103, 107, 131, 132, 136, 137, 140, 141, 142, 143, 144, 228, 299, 350, 403, 462, 527, 532, 544, 545, 597, 600, 601, 602, 603, 684, 726], "neg": [1, 16, 61, 64, 67, 80, 290, 529, 536, 569, 710, 711, 716, 721, 725, 812], "dimension": [1, 515, 526, 538, 539, 540, 543, 545, 563, 581, 589, 710, 717, 718, 724, 725], "equal": [1, 33, 42, 47, 67, 69, 101, 105, 106, 107, 136, 193, 199, 205, 211, 226, 235, 281, 287, 297, 306, 348, 357, 401, 410, 455, 460, 469, 493, 495, 502, 522, 524, 547, 554, 571, 578, 597, 599, 600, 601, 603, 605, 695, 710, 715, 716, 719, 724, 725, 726, 755, 811, 815, 816], "being": [1, 16, 45, 47, 48, 60, 61, 62, 78, 103, 107, 136, 137, 143, 146, 541, 601, 605, 695, 724, 733, 734, 754, 758, 761, 794, 873, 875], "confirm": [1, 119, 597, 601, 725], "uniqu": [1, 54, 58, 132, 136, 140, 141, 145, 146, 274, 340, 393, 450, 491, 523, 544, 601, 707, 751, 760, 765], "root": [1, 78, 89, 94, 105, 106, 141, 146, 542, 733, 734, 747, 748, 749, 750, 752, 753, 754, 758, 761, 762, 763, 764, 767, 768, 770, 772, 776, 778, 780, 781, 788, 793, 794, 797, 799, 801, 803, 804, 806, 808, 809, 811, 812, 877], "ha": [1, 16, 28, 46, 51, 52, 60, 61, 62, 67, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 181, 186, 189, 221, 238, 239, 242, 245, 255, 256, 257, 258, 269, 272, 276, 277, 278, 280, 290, 291, 292, 309, 312, 315, 323, 324, 325, 326, 336, 343, 360, 363, 366, 374, 375, 376, 377, 388, 396, 413, 414, 417, 420, 430, 431, 432, 433, 444, 447, 448, 452, 453, 455, 472, 477, 478, 479, 529, 544, 695, 710, 712, 723, 724, 725, 753, 773, 776, 777, 791, 795, 811, 838, 875, 877], "node": [1, 78, 105, 106, 542, 727, 728, 732, 733, 734, 737, 741, 747, 748, 749, 751, 752, 753, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 793, 794, 797, 798, 801, 802, 803, 804, 805, 806, 807, 811, 873, 877], "except": [1, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 141, 142, 143, 148, 160, 183, 290, 507, 558, 568, 583, 595, 596, 600, 711, 727, 728, 729, 730, 731, 760, 811, 813, 814, 849, 872, 878], "branch": [1, 78, 94, 106, 542, 732, 752, 753, 762, 803, 806, 812, 877], "name": [1, 55, 59, 78, 94, 105, 106, 132, 133, 137, 138, 139, 141, 142, 144, 145, 147, 149, 174, 175, 176, 181, 186, 192, 218, 220, 264, 270, 279, 280, 281, 287, 289, 331, 337, 342, 383, 389, 395, 439, 445, 454, 484, 489, 492, 493, 505, 510, 514, 520, 527, 532, 537, 562, 567, 588, 594, 597, 598, 600, 601, 606, 618, 662, 697, 707, 708, 709, 727, 732, 746, 748, 749, 750, 752, 754, 755, 756, 757, 760, 764, 765, 766, 767, 768, 770, 772, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 791, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 810, 811, 830, 836, 873, 877], "correspond": [1, 53, 78, 94, 105, 106, 136, 137, 139, 144, 145, 181, 186, 251, 264, 280, 290, 331, 383, 426, 439, 452, 453, 484, 497, 527, 541, 549, 573, 696, 697, 710, 711, 714, 725, 732, 765, 770, 774, 783, 804, 811], "There": [1, 54, 79, 90, 133, 138, 141, 144, 245, 315, 366, 420, 569, 716, 724, 725, 873, 877, 879], "ecolog": [1, 76, 711, 716], "literatur": [1, 74, 725], "softwar": [1, 136, 137, 872], "measur": [1, 74, 76, 82, 84, 85, 88, 89, 93, 94, 95, 97, 98, 99, 105, 106, 493, 527, 537, 543, 544, 710, 723, 724, 732, 752], "alwai": [1, 16, 135, 138, 141, 143, 160, 189, 192, 213, 290, 762, 818, 879], "assum": [1, 69, 78, 80, 86, 89, 105, 106, 134, 136, 137, 140, 142, 159, 161, 228, 276, 277, 278, 299, 350, 403, 462, 497, 532, 544, 545, 549, 573, 584, 605, 606, 711, 715, 721, 722, 724, 725], "abund": [1, 69, 70, 78, 80, 83, 90, 94, 102, 103, 105, 106, 107, 108, 111, 527, 532, 696, 710, 711, 717, 718, 725], "where": [1, 2, 67, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 107, 108, 111, 131, 136, 140, 141, 142, 145, 147, 241, 243, 247, 249, 259, 261, 266, 268, 269, 271, 311, 313, 317, 319, 327, 328, 333, 335, 336, 338, 362, 364, 368, 370, 379, 380, 385, 387, 388, 390, 391, 416, 418, 422, 424, 434, 436, 441, 443, 444, 446, 475, 480, 481, 486, 488, 490, 493, 497, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 549, 573, 599, 605, 695, 707, 715, 717, 718, 719, 721, 725, 726, 732, 756, 757, 767, 771, 804, 807, 836, 877, 879], "three": [1, 28, 93, 143, 146, 544, 569, 602, 696, 707, 724, 725, 757, 879], "were": [1, 62, 65, 78, 83, 103, 105, 106, 107, 141, 143, 144, 226, 261, 297, 328, 348, 380, 401, 436, 460, 481, 597, 599, 601, 707, 724, 725, 778, 780, 814, 879], "onli": [1, 16, 54, 81, 84, 94, 111, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 189, 202, 217, 221, 239, 246, 280, 309, 316, 343, 360, 367, 396, 414, 421, 455, 472, 493, 507, 524, 527, 558, 569, 583, 584, 586, 591, 597, 601, 602, 695, 711, 716, 718, 723, 724, 725, 753, 756, 757, 759, 762, 765, 788, 796, 801, 805, 818, 861, 872, 877, 879], "second": [1, 16, 28, 60, 61, 62, 63, 64, 65, 66, 137, 143, 147, 161, 192, 214, 281, 497, 527, 549, 573, 725, 771, 774, 804, 873, 879], "form": [1, 28, 60, 191, 497, 545, 549, 569, 573, 591, 803], "among": [1, 74, 94, 138, 519, 566, 593, 607, 711, 718], "expect": [1, 108, 132, 147, 176, 183, 221, 343, 396, 532, 533, 534, 544, 605, 710, 711, 718, 728, 729, 803, 879], "3": [1, 16, 28, 33, 45, 46, 48, 50, 53, 54, 56, 57, 60, 64, 69, 77, 78, 81, 86, 94, 97, 102, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 192, 202, 214, 219, 226, 228, 238, 239, 240, 245, 246, 262, 263, 265, 271, 272, 274, 277, 278, 290, 291, 297, 299, 309, 310, 315, 316, 329, 330, 332, 338, 340, 343, 348, 350, 360, 361, 366, 367, 381, 382, 384, 390, 393, 401, 403, 413, 414, 415, 420, 421, 437, 438, 440, 446, 447, 450, 452, 453, 455, 460, 462, 472, 473, 482, 483, 485, 490, 491, 504, 513, 516, 519, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 543, 545, 556, 561, 564, 566, 580, 587, 590, 591, 593, 597, 598, 599, 601, 602, 603, 605, 606, 607, 629, 640, 673, 696, 697, 707, 710, 711, 716, 721, 723, 724, 725, 726, 747, 757, 762, 763, 770, 771, 772, 795, 799, 801, 803, 804, 806, 807, 812, 817, 872, 875, 877, 879], "indic": [1, 15, 29, 30, 33, 42, 51, 52, 69, 72, 73, 88, 94, 111, 131, 136, 137, 147, 192, 193, 199, 202, 205, 211, 223, 226, 228, 235, 241, 243, 246, 247, 249, 252, 253, 254, 255, 256, 257, 258, 261, 266, 268, 269, 271, 274, 280, 281, 287, 294, 297, 299, 306, 311, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 333, 335, 336, 338, 340, 345, 348, 350, 357, 362, 364, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 385, 387, 388, 390, 391, 393, 398, 401, 403, 410, 416, 418, 421, 422, 424, 427, 428, 429, 430, 431, 432, 433, 436, 441, 443, 444, 446, 450, 457, 460, 462, 469, 475, 477, 478, 479, 481, 486, 488, 490, 491, 493, 527, 532, 542, 597, 599, 600, 601, 605, 695, 706, 707, 723, 767, 769, 807, 850, 861, 877, 879], "singleton": [1, 69, 72, 73, 77, 79, 81, 93, 96, 100, 147], "tripleton": 1, "do": [1, 45, 48, 90, 131, 136, 143, 147, 189, 221, 226, 268, 297, 335, 343, 348, 387, 396, 401, 443, 455, 460, 488, 522, 527, 599, 602, 640, 718, 752, 765, 795, 796, 877, 879], "ani": [1, 16, 46, 47, 54, 56, 66, 67, 70, 101, 102, 136, 138, 140, 141, 145, 159, 160, 161, 181, 186, 189, 192, 202, 216, 217, 221, 343, 396, 455, 493, 522, 527, 529, 599, 602, 606, 640, 662, 710, 715, 721, 723, 724, 749, 752, 753, 754, 764, 772, 801, 803, 811, 838, 839, 849, 861, 877, 879], "ton": 1, "doubleton": [1, 72, 73, 75, 77, 93], "paramet": [1, 2, 16, 17, 28, 30, 33, 42, 45, 47, 48, 49, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 147, 149, 159, 160, 161, 172, 174, 175, 176, 177, 178, 180, 181, 182, 185, 186, 187, 189, 192, 193, 199, 202, 205, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 226, 228, 235, 238, 239, 240, 244, 246, 247, 248, 251, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 277, 278, 279, 280, 281, 287, 289, 290, 291, 294, 297, 299, 306, 309, 310, 314, 316, 317, 318, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 348, 350, 357, 360, 361, 365, 367, 368, 369, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 398, 401, 403, 410, 413, 414, 415, 419, 421, 422, 423, 426, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 449, 450, 451, 452, 453, 454, 455, 457, 460, 462, 469, 472, 473, 474, 475, 476, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 502, 504, 505, 507, 508, 509, 511, 512, 513, 514, 519, 520, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 554, 556, 558, 559, 560, 561, 562, 566, 567, 570, 571, 573, 578, 580, 583, 584, 585, 586, 587, 588, 593, 594, 597, 598, 599, 600, 601, 602, 603, 605, 628, 640, 661, 672, 684, 695, 707, 708, 709, 710, 711, 712, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 732, 747, 749, 750, 753, 754, 755, 756, 757, 759, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 793, 795, 796, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 835, 836, 837, 838, 839, 849, 850, 861, 879], "either": [1, 28, 35, 54, 56, 60, 61, 62, 94, 132, 145, 159, 160, 161, 251, 261, 292, 328, 380, 426, 436, 481, 523, 599, 601, 695, 707, 710, 715, 723, 725, 811], "string": [1, 2, 16, 44, 103, 107, 108, 111, 131, 134, 136, 137, 141, 143, 145, 237, 247, 248, 264, 271, 274, 275, 280, 288, 308, 317, 318, 331, 338, 340, 341, 359, 368, 369, 383, 390, 393, 394, 412, 422, 423, 439, 446, 450, 451, 471, 475, 476, 484, 490, 491, 493, 497, 503, 509, 527, 532, 544, 545, 549, 555, 559, 573, 579, 584, 597, 600, 601, 603, 706, 707, 746, 750, 804, 812, 817, 877], "faith_pd": [1, 94], "ten": 1, "faith": [1, 78, 94, 544], "pd": [1, 28, 48, 52, 57, 78, 94, 103, 132, 133, 146, 221, 258, 292, 326, 343, 377, 396, 433, 455, 479, 504, 516, 519, 527, 532, 544, 556, 564, 566, 580, 590, 591, 593, 597, 598, 601, 606, 696, 697, 707, 710, 718, 723, 724, 770, 815], "about": [1, 55, 59, 90, 134, 136, 137, 141, 145, 147, 202, 218, 220, 221, 270, 279, 292, 337, 342, 343, 389, 395, 396, 445, 454, 455, 489, 492, 514, 520, 522, 562, 567, 588, 594, 696, 708, 709, 718, 724, 725, 789, 810, 813, 814, 875], "100": [1, 132, 133, 136, 139, 217, 527, 532, 725, 879], "unweighted_unifrac": [1, 106], "hundr": [1, 108], "unweight": [1, 94, 105, 106, 719], "unifrac": [1, 78, 94, 105, 106, 108, 111, 716], "latter": [1, 493], "mai": [1, 2, 16, 47, 56, 78, 85, 126, 133, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 160, 177, 178, 189, 192, 216, 221, 248, 292, 318, 343, 369, 396, 423, 455, 476, 493, 497, 507, 522, 527, 544, 549, 558, 573, 583, 599, 601, 605, 695, 710, 721, 723, 724, 725, 726, 770, 813, 836, 838, 873, 875], "case": [1, 47, 60, 61, 62, 70, 108, 136, 141, 143, 146, 149, 221, 251, 264, 274, 331, 340, 383, 393, 396, 426, 439, 450, 484, 491, 505, 545, 599, 605, 710, 715, 717, 725, 752, 785, 811, 838, 839, 873, 877], "run": [1, 78, 103, 105, 106, 107, 137, 144, 246, 316, 367, 421, 527, 597, 598, 599, 601, 602, 605, 617, 639, 650, 683, 694, 707, 875, 879], "like": [1, 60, 61, 62, 108, 136, 138, 139, 140, 142, 147, 264, 331, 383, 439, 484, 493, 544, 605, 628, 640, 661, 662, 672, 684, 716, 718, 724, 725, 837, 873, 879], "small": [1, 140, 145, 524, 536, 718], "neglig": 1, "know": [1, 16, 78, 105, 106, 134, 136, 143, 145, 147, 527, 721, 813, 873], "might": [1, 80, 140, 142, 598, 723, 724, 725, 757, 873], "ve": [1, 136, 137, 725, 877], "develop": [1, 2, 108, 111, 135, 159, 160, 161, 527, 812, 872, 873, 879], "To": [1, 35, 78, 105, 106, 136, 137, 138, 141, 144, 147, 189, 221, 343, 396, 527, 532, 569, 591, 597, 599, 601, 605, 721, 752, 873, 879], "discov": [1, 760], "get_alpha_diversity_metr": [1, 103, 110], "get_beta_diversity_metr": [1, 107, 109, 111], "respect": [1, 28, 72, 136, 139, 142, 146, 159, 160, 161, 179, 180, 182, 185, 187, 189, 248, 318, 369, 423, 455, 476, 504, 509, 511, 519, 527, 541, 556, 559, 566, 580, 584, 591, 593, 605, 697], "addit": [1, 66, 67, 78, 104, 105, 106, 110, 135, 136, 137, 138, 139, 143, 144, 221, 343, 396, 493, 524, 525, 526, 544, 569, 732, 753, 765, 766, 811, 838], "won": [1, 78, 103, 105, 106, 107, 137, 193, 711], "t": [1, 16, 28, 45, 47, 48, 49, 53, 54, 58, 66, 78, 80, 94, 103, 105, 106, 107, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 159, 161, 183, 190, 192, 193, 221, 226, 235, 240, 244, 248, 250, 251, 252, 253, 254, 257, 265, 266, 267, 268, 276, 290, 297, 306, 310, 314, 318, 320, 321, 322, 325, 332, 333, 334, 335, 343, 348, 357, 361, 365, 369, 371, 372, 373, 376, 384, 385, 386, 387, 396, 401, 410, 415, 419, 423, 425, 426, 427, 428, 429, 432, 440, 441, 442, 443, 448, 455, 460, 469, 473, 474, 476, 485, 486, 487, 488, 493, 511, 524, 525, 527, 532, 533, 534, 537, 542, 545, 569, 596, 602, 710, 711, 716, 718, 720, 721, 723, 725, 726, 756, 757, 794, 795, 803, 811, 812, 813, 875, 878, 879], "those": [1, 104, 605, 695, 710, 725, 762, 796, 801, 812, 838, 875], "scipi": [1, 79, 104, 107, 110, 515, 522, 527, 532, 533, 542, 545, 563, 569, 581, 589, 591, 598, 599, 601, 605, 716, 721, 724, 725, 769], "spatial": [1, 104, 107, 110, 515, 522, 545, 563, 569, 581, 589, 591, 601], "distanc": [1, 16, 94, 104, 105, 106, 107, 108, 110, 111, 131, 140, 141, 265, 267, 332, 334, 384, 386, 440, 442, 485, 487, 504, 507, 513, 515, 519, 525, 537, 604, 605, 707, 710, 711, 713, 716, 718, 732, 746, 747, 755, 757, 772, 794, 801, 812, 875, 876, 877], "pdist": [1, 104, 107, 110, 605], "creat": [1, 16, 28, 45, 48, 49, 53, 55, 56, 57, 58, 135, 136, 139, 141, 143, 162, 173, 184, 189, 190, 192, 202, 213, 214, 218, 221, 270, 271, 292, 337, 338, 343, 389, 390, 396, 445, 446, 455, 489, 490, 508, 509, 511, 513, 514, 516, 517, 527, 536, 544, 559, 561, 562, 564, 584, 587, 588, 590, 591, 603, 605, 640, 696, 707, 708, 753, 754, 775, 789, 812, 875, 877, 879], "7": [1, 63, 73, 94, 108, 136, 137, 138, 145, 146, 192, 202, 214, 219, 221, 228, 239, 290, 299, 309, 350, 360, 396, 403, 414, 462, 472, 519, 527, 532, 566, 593, 598, 599, 601, 602, 605, 696, 721, 757, 771, 795, 803, 804, 812, 816, 875], "23": [1, 142, 145, 289, 527, 812, 875], "64": [1, 108, 137, 280, 281, 807], "14": [1, 73, 83, 94, 135, 137, 142, 242, 246, 312, 316, 363, 367, 417, 421, 527, 532, 606, 725, 763, 801], "35": [1, 135, 137, 138, 144, 524, 725], "42": [1, 54, 79, 136, 142, 143, 221, 244, 314, 365, 396, 419, 474, 598, 601], "12": [1, 135, 142, 455, 527, 532, 537, 721, 875], "40": [1, 81, 136, 146, 541, 723, 725], "44": [1, 95, 601, 811], "9": [1, 132, 133, 134, 136, 139, 142, 145, 189, 192, 202, 221, 242, 246, 292, 312, 316, 343, 363, 367, 396, 417, 421, 455, 527, 532, 605, 606, 696, 710, 711, 713, 714, 716, 717, 718, 721, 759, 762, 771, 801, 804, 811, 812, 875], "45": [1, 142, 725], "19": [1, 135, 142, 721], "abcdef": 1, "ll": [1, 78, 105, 106, 598, 599, 602, 696, 721, 724, 725, 877, 879], "s_": [1, 69, 71, 72, 90, 101], "ob": [1, 72, 101], "adiv_sob": 1, "sob": [1, 91, 92, 93], "A": [1, 16, 28, 49, 50, 53, 54, 55, 58, 60, 62, 65, 69, 72, 77, 78, 79, 80, 82, 83, 89, 94, 97, 105, 106, 108, 131, 132, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 173, 177, 178, 184, 191, 192, 213, 217, 218, 221, 242, 248, 254, 270, 274, 281, 287, 292, 312, 318, 322, 337, 340, 343, 363, 369, 373, 389, 393, 396, 417, 423, 429, 445, 450, 455, 476, 489, 491, 493, 504, 505, 509, 511, 513, 514, 518, 519, 524, 527, 529, 532, 536, 537, 538, 539, 540, 541, 543, 544, 545, 556, 559, 561, 562, 565, 566, 569, 580, 584, 587, 588, 592, 593, 598, 599, 600, 601, 603, 605, 618, 640, 662, 706, 707, 708, 710, 711, 716, 718, 723, 724, 725, 732, 733, 734, 747, 752, 755, 757, 758, 761, 762, 763, 764, 767, 768, 769, 771, 772, 774, 781, 789, 791, 793, 794, 799, 801, 808, 809, 811, 861, 873, 877, 879], "b": [1, 16, 49, 54, 56, 57, 58, 78, 79, 80, 90, 94, 111, 137, 140, 141, 190, 221, 343, 396, 455, 497, 504, 505, 508, 513, 516, 519, 542, 544, 549, 556, 561, 564, 566, 573, 580, 587, 590, 591, 593, 598, 599, 695, 707, 723, 724, 733, 734, 746, 747, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 766, 767, 768, 772, 773, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 796, 797, 798, 799, 801, 802, 803, 805, 806, 807, 808, 809, 811, 812, 837, 873, 875, 877], "c": [1, 2, 16, 28, 46, 53, 54, 56, 57, 66, 69, 78, 79, 80, 81, 82, 94, 95, 97, 99, 105, 106, 111, 135, 136, 137, 141, 143, 145, 146, 161, 221, 231, 236, 242, 248, 250, 251, 302, 307, 312, 318, 343, 353, 358, 363, 369, 396, 406, 411, 417, 423, 425, 426, 455, 465, 470, 476, 493, 504, 508, 511, 513, 516, 519, 524, 526, 531, 537, 538, 539, 540, 542, 543, 544, 556, 561, 564, 566, 580, 587, 590, 591, 593, 598, 599, 707, 717, 723, 724, 733, 734, 746, 747, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 766, 767, 768, 772, 773, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 796, 797, 798, 799, 801, 802, 803, 805, 806, 807, 808, 809, 811, 812, 875, 877], "f": [1, 16, 54, 70, 84, 94, 108, 132, 133, 137, 141, 144, 145, 146, 190, 343, 599, 600, 601, 711, 714, 721, 724, 733, 734, 747, 748, 750, 752, 753, 754, 758, 759, 761, 762, 763, 765, 766, 767, 768, 772, 778, 779, 780, 781, 782, 788, 792, 793, 794, 797, 798, 799, 801, 802, 806, 807, 808, 809, 811, 877], "int64": [1, 28, 46, 54, 238, 242, 272, 312, 363, 413, 417, 447, 455, 527, 875], "next": [1, 78, 84, 85, 105, 106, 135, 141, 147, 455, 527, 684, 710, 811, 877, 879], "same": [1, 28, 46, 47, 48, 50, 54, 56, 74, 78, 83, 94, 95, 99, 105, 106, 136, 137, 138, 139, 141, 144, 145, 147, 205, 219, 226, 228, 235, 238, 239, 242, 244, 245, 261, 265, 266, 267, 268, 272, 273, 277, 280, 281, 290, 297, 299, 306, 309, 312, 314, 315, 328, 332, 333, 334, 335, 339, 348, 350, 357, 360, 363, 365, 366, 380, 384, 385, 386, 387, 392, 401, 403, 410, 413, 414, 417, 419, 420, 436, 440, 441, 442, 443, 447, 449, 452, 455, 460, 462, 469, 472, 474, 481, 485, 486, 487, 488, 495, 497, 505, 506, 507, 509, 518, 522, 523, 527, 532, 547, 549, 557, 558, 559, 565, 571, 573, 582, 583, 584, 586, 592, 597, 598, 599, 600, 601, 602, 605, 695, 710, 711, 715, 716, 718, 724, 725, 726, 766, 796, 811, 815, 875, 877], "sinc": [1, 28, 45, 48, 57, 80, 135, 136, 138, 143, 146, 193, 248, 290, 318, 369, 423, 455, 476, 527, 599, 721, 725, 805, 818, 879], "order": [1, 16, 38, 43, 49, 53, 54, 57, 103, 107, 131, 132, 136, 140, 141, 142, 143, 145, 214, 221, 236, 245, 248, 274, 278, 280, 291, 307, 315, 318, 340, 343, 358, 366, 369, 393, 396, 411, 420, 423, 450, 453, 470, 476, 491, 495, 497, 504, 507, 519, 527, 532, 542, 547, 549, 556, 558, 566, 571, 573, 580, 583, 586, 591, 593, 597, 598, 599, 600, 601, 602, 605, 710, 719, 723, 724, 782, 801, 802, 803, 811, 813, 815, 877, 879], "io": [1, 55, 59, 78, 105, 106, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 544, 562, 567, 588, 594, 707, 708, 709, 770, 789, 810, 811, 837, 872, 877], "stringio": [1, 78, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 189, 544, 811, 812, 873, 877], "u1": [1, 78, 105, 106], "u2": [1, 78, 105, 106], "u3": [1, 78, 105, 106], "u4": [1, 78, 105, 106], "75": [1, 50, 78, 83, 105, 106, 265, 332, 384, 440, 485, 527, 544, 598, 601, 807], "u5": [1, 78, 105, 106], "u6": [1, 78, 105, 106], "u7": [1, 78, 105, 106], "adiv_faith_pd": 1, "00": [1, 132, 133, 136, 139, 142, 239, 276, 309, 360, 414, 448, 472, 812, 875], "50": [1, 62, 65, 136, 139, 142, 239, 309, 360, 414, 472, 527, 532, 606, 707, 724, 725, 875], "float64": [1, 54, 131, 239, 309, 360, 414, 472, 527, 529, 536, 538, 539, 540, 591, 601, 696], "now": [1, 83, 135, 136, 138, 143, 455, 524, 527, 598, 695, 696, 721, 724, 725, 877, 879], "brai": 1, "curti": 1, "notic": [1, 136, 141, 143, 725, 879], "bc_dm": 1, "braycurti": 1, "6x6": [1, 601], "78787879": 1, "86666667": 1, "30927835": 1, "85714286": 1, "81521739": 1, "78142077": 1, "86813187": 1, "1627907": 1, "87709497": 1, "09392265": 1, "71597633": 1, "87777778": 1, "89285714": 1, "68235294": 1, "weight": [1, 78, 94, 105, 106, 141, 606, 607, 629, 640, 651, 673, 715, 719, 811], "becaus": [1, 47, 53, 54, 78, 105, 106, 132, 136, 137, 138, 141, 143, 144, 147, 226, 261, 290, 297, 328, 348, 380, 401, 436, 455, 460, 481, 527, 599, 711, 716, 718, 720, 723, 752, 757, 760, 804], "need": [1, 45, 48, 53, 78, 105, 106, 108, 131, 139, 141, 147, 159, 161, 189, 202, 217, 292, 527, 532, 533, 534, 542, 597, 598, 600, 601, 602, 695, 696, 711, 718, 721, 724, 725, 754, 757, 815, 816, 838, 879], "again": [1, 136, 137, 541, 812], "wu_dm": 1, "weighted_unifrac": [1, 105], "77549923": 1, "82857143": 1, "42512039": 1, "8547619": 1, "10937312": 1, "26433692": 1, "98435423": 1, "24270353": 1, "46774194": 1, "95224719": 1, "16025641": 1, "86111111": 1, "98796148": 1, "30870431": 1, "82967033": 1, "determin": [1, 30, 33, 42, 51, 52, 78, 94, 103, 105, 106, 107, 140, 147, 177, 178, 189, 223, 226, 235, 252, 253, 254, 255, 256, 257, 258, 260, 281, 287, 294, 297, 306, 320, 321, 322, 323, 324, 325, 326, 345, 348, 357, 371, 372, 373, 374, 375, 376, 377, 378, 398, 401, 410, 427, 428, 429, 430, 431, 432, 433, 435, 457, 460, 469, 477, 478, 479, 502, 527, 554, 578, 601, 605, 695, 716, 721, 723, 724, 811, 879], "significantli": [1, 53, 527, 597, 600, 601], "correl": [1, 537, 543, 544, 598, 599, 602, 604, 605, 697, 711, 712, 718, 721, 725, 757, 877], "mantel": [1, 544, 602, 605], "them": [1, 80, 138, 143, 193, 205, 214, 215, 273, 339, 392, 449, 455, 599, 640, 715, 716, 718, 839], "Then": [1, 524, 527, 606, 696], "p": [1, 16, 66, 78, 87, 88, 94, 343, 527, 532, 541, 544, 597, 599, 600, 601, 602, 605, 696, 710, 711, 712, 718, 721, 724, 725], "signific": [1, 527, 532, 597, 599, 600, 601, 602, 605, 724, 725], "base": [1, 54, 61, 64, 69, 72, 73, 77, 78, 82, 83, 88, 89, 90, 94, 97, 99, 105, 106, 132, 136, 138, 142, 144, 192, 213, 221, 261, 292, 328, 343, 380, 396, 436, 455, 481, 497, 545, 549, 573, 597, 599, 600, 601, 605, 640, 710, 711, 718, 721, 723, 724, 725, 755, 767, 768, 811, 837, 875, 876, 877, 879], "05": [1, 142, 527, 532, 605, 721, 722, 724, 725, 815], "r": [1, 16, 78, 79, 83, 84, 85, 86, 87, 94, 105, 106, 137, 138, 146, 189, 221, 343, 396, 505, 524, 525, 526, 530, 531, 533, 534, 541, 597, 598, 599, 600, 601, 605, 707, 710, 711, 718, 754, 795], "p_valu": [1, 599, 605], "n": [1, 16, 70, 71, 77, 79, 80, 81, 86, 87, 88, 89, 90, 94, 96, 102, 131, 132, 133, 134, 136, 137, 138, 142, 143, 144, 145, 146, 147, 159, 160, 161, 189, 190, 221, 261, 274, 328, 340, 343, 367, 380, 393, 396, 436, 450, 481, 491, 536, 544, 599, 602, 605, 695, 710, 711, 712, 715, 717, 718, 719, 721, 725, 726, 733, 734, 746, 754, 758, 761, 767, 772, 774, 781, 796, 797, 804, 811, 812, 817, 875], "922404392093": 1, "true": [1, 14, 15, 16, 29, 30, 31, 32, 33, 45, 46, 48, 49, 50, 51, 52, 53, 57, 58, 60, 61, 62, 72, 73, 78, 79, 94, 101, 103, 105, 106, 107, 108, 111, 132, 135, 136, 137, 138, 139, 141, 144, 149, 159, 160, 161, 180, 185, 189, 190, 192, 202, 214, 219, 221, 222, 223, 225, 226, 228, 235, 238, 239, 241, 242, 243, 245, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 290, 291, 292, 293, 294, 296, 297, 299, 306, 309, 311, 312, 313, 315, 318, 319, 320, 321, 322, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 347, 348, 350, 357, 360, 362, 363, 364, 366, 369, 370, 371, 372, 373, 375, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 403, 410, 413, 414, 416, 417, 418, 420, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 459, 460, 462, 469, 472, 476, 478, 479, 482, 483, 484, 485, 486, 487, 488, 490, 491, 494, 495, 502, 504, 507, 523, 527, 532, 533, 534, 537, 544, 545, 546, 547, 554, 556, 558, 569, 570, 571, 578, 580, 583, 584, 586, 597, 599, 601, 602, 605, 640, 651, 715, 716, 718, 719, 723, 724, 726, 750, 752, 754, 759, 767, 773, 775, 776, 777, 779, 782, 785, 786, 787, 790, 791, 792, 793, 802, 804, 805, 807, 811, 812, 838, 839, 849, 861, 875, 877, 879], "princip": [1, 601, 696, 707, 710, 716, 717], "coordin": [1, 138, 144, 192, 202, 205, 213, 214, 219, 532, 542, 601, 606, 640, 673, 684, 696, 697, 707, 710, 716, 717, 718], "analysi": [1, 78, 90, 105, 106, 136, 143, 524, 525, 527, 532, 541, 597, 600, 601, 606, 607, 628, 629, 661, 672, 673, 684, 696, 707, 710, 711, 716, 717, 718, 721, 724, 725], "pcoa": [1, 142, 601, 697, 707, 717], "our": [1, 80, 137, 147, 160, 190, 261, 328, 380, 436, 481, 696, 721, 724, 725, 726, 875, 879], "ordin": [1, 125, 601, 816, 817, 876], "wu_pc": 1, "plot": [1, 697], "realli": 1, "interest": [1, 455, 527, 544, 605, 710, 718, 724, 778, 780, 879], "context": [1, 16, 190, 191, 522, 707, 812], "let": [1, 136, 137, 139, 143, 144, 145, 192, 202, 271, 338, 390, 446, 455, 490, 527, 599, 695, 720, 721, 724, 725, 813, 875, 877, 879], "visual": [1, 707], "panda": [1, 28, 52, 57, 107, 132, 133, 146, 221, 258, 326, 343, 377, 396, 433, 479, 516, 527, 532, 564, 590, 591, 597, 598, 600, 601, 602, 606, 640, 684, 696, 707, 723, 724, 770, 815, 875], "sample_md": 1, "datafram": [1, 28, 52, 107, 132, 133, 146, 221, 258, 292, 326, 343, 377, 396, 433, 455, 479, 504, 516, 519, 527, 532, 556, 564, 566, 580, 590, 593, 597, 598, 600, 601, 602, 606, 640, 684, 696, 697, 707, 710, 711, 717, 718, 723, 724, 770, 815, 875], "gut": [1, 707], "skin": [1, 707], "tongu": 1, "body_sit": [1, 707], "subject": [1, 132, 133, 879], "color": [1, 84, 85, 513, 561, 587, 707], "taken": [1, 132, 133, 136, 143, 145, 146, 527, 605, 837], "fig": [1, 513, 561, 587, 707], "axis_label": [1, 707], "pc": [1, 606, 707], "titl": [1, 132, 133, 138, 145, 513, 561, 587, 707], "cmap": [1, 513, 561, 587, 707], "jet": 1, "don": [1, 16, 54, 136, 250, 251, 425, 426, 525, 527, 602, 718, 721, 725, 756, 757, 794, 812], "see": [1, 53, 54, 55, 59, 66, 78, 94, 103, 105, 106, 107, 108, 110, 111, 133, 135, 136, 137, 141, 143, 144, 146, 147, 218, 220, 244, 270, 279, 280, 291, 314, 337, 342, 365, 389, 395, 419, 445, 454, 455, 474, 489, 492, 497, 514, 520, 549, 562, 567, 573, 588, 594, 597, 598, 599, 600, 601, 602, 605, 696, 707, 708, 709, 716, 718, 720, 721, 725, 789, 810, 873, 879], "cluster": [1, 599, 601, 769, 875], "instead": [1, 50, 97, 135, 136, 138, 147, 149, 159, 160, 161, 215, 248, 261, 263, 265, 267, 274, 318, 328, 330, 332, 334, 340, 369, 380, 382, 384, 386, 393, 423, 436, 438, 440, 442, 450, 476, 481, 483, 485, 487, 491, 545, 597, 599, 601, 715, 724, 725, 757, 812, 813, 873], "bodi": [1, 707], "site": [1, 138, 142, 261, 328, 380, 436, 481, 696, 697, 707, 716], "appear": [1, 69, 132, 143, 145, 507, 558, 583, 598, 710, 711, 716, 721], "closer": [1, 879], "anoth": [1, 33, 42, 45, 54, 78, 105, 106, 138, 140, 141, 193, 199, 202, 205, 211, 216, 219, 226, 235, 244, 266, 268, 281, 287, 297, 306, 314, 333, 335, 348, 357, 365, 385, 387, 401, 410, 419, 441, 443, 455, 460, 469, 474, 486, 488, 493, 495, 547, 571, 605], "space": [1, 136, 141, 143, 145, 202, 205, 214, 524, 525, 526, 530, 531, 533, 534, 640, 697, 707, 710, 717], "techniqu": [1, 79, 524, 710, 711, 876], "exploratori": 1, "quantifi": 1, "strength": 1, "statist": [1, 69, 72, 77, 83, 90, 525, 527, 532, 597, 599, 600, 601, 602, 605, 710, 711, 715, 721, 724, 725, 872], "accomplish": [1, 524, 873], "anosim": [1, 600, 601], "test": [1, 33, 42, 94, 147, 193, 199, 205, 211, 226, 235, 281, 287, 297, 306, 348, 357, 401, 410, 460, 469, 524, 527, 532, 544, 597, 599, 600, 601, 602, 604, 605, 617, 639, 650, 683, 694, 721, 724, 725, 815, 816, 836, 872], "permut": [1, 193, 597, 599, 600, 601, 602, 605], "999": [1, 455, 597, 599, 600, 601, 602, 605], "33333333333333331": 1, "anti": [1, 597], "insignific": 1, "strong": [1, 221, 597, 599, 605], "separ": [1, 132, 133, 136, 137, 139, 140, 141, 142, 143, 601, 711], "explor": [1, 104, 696], "add": [1, 61, 64, 145, 147, 172, 192, 202, 214, 216, 226, 297, 348, 401, 455, 460, 529, 536, 538, 539, 540, 749, 762, 764], "rich": [1, 68, 72, 78, 86, 89, 94, 101], "straight": 1, "forward": [1, 278, 290, 291, 453], "seri": [1, 57, 103, 139, 527, 532, 591, 597, 598, 600, 601, 606, 697, 721], "investig": 1, "categori": [1, 145, 606, 607, 617, 618, 628, 639, 640, 650, 651, 662, 672, 673, 683, 684, 694, 707, 721, 723, 724], "boxplot": 1, "show": [1, 202, 721, 877], "spearman": [1, 598, 599, 602], "numer": [1, 79, 83, 132, 140, 146, 541, 598, 599, 640, 696, 707, 710, 711, 717, 718, 725, 816], "relev": [1, 16, 138, 532, 724, 812, 875], "give": [1, 141, 710, 711, 718, 757], "u": [1, 62, 65, 78, 84, 87, 105, 106, 135, 136, 138, 146, 226, 231, 235, 236, 276, 297, 302, 306, 307, 343, 348, 353, 357, 358, 396, 401, 406, 410, 411, 448, 460, 465, 469, 470, 527, 530, 531, 542, 599, 720, 725, 875, 879], "symmetr": [1, 493, 497, 544, 545, 549, 569, 573, 584, 599, 603, 605, 710, 755], "2x2": [1, 140], "corr": 1, "numeric_onli": 1, "000000": [1, 812], "939336": 1, "class": [2, 16, 28, 51, 52, 67, 69, 72, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 159, 161, 162, 174, 176, 177, 178, 179, 192, 202, 221, 239, 256, 258, 280, 292, 309, 324, 326, 343, 360, 375, 377, 396, 414, 431, 433, 455, 472, 478, 479, 493, 527, 545, 569, 607, 618, 629, 640, 651, 662, 673, 684, 697, 732, 754, 811, 818, 838, 850, 861, 872, 873], "wrap": [2, 143, 145, 862], "struct": [2, 138], "access": [2, 51, 52, 131, 135, 136, 138, 146, 256, 258, 281, 287, 324, 326, 375, 377, 431, 433, 478, 479, 544, 812, 818], "note": [2, 16, 28, 35, 40, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 105, 106, 108, 110, 135, 136, 137, 138, 139, 141, 143, 144, 192, 202, 203, 204, 216, 221, 224, 225, 228, 239, 242, 245, 248, 250, 261, 272, 274, 276, 277, 278, 280, 281, 288, 289, 290, 291, 292, 295, 296, 299, 309, 312, 315, 318, 328, 340, 343, 346, 347, 350, 360, 363, 366, 369, 380, 393, 396, 399, 400, 403, 414, 417, 420, 423, 425, 436, 447, 448, 450, 452, 453, 455, 458, 459, 462, 472, 476, 481, 491, 493, 497, 504, 505, 515, 518, 519, 522, 523, 527, 532, 533, 534, 536, 537, 542, 543, 545, 549, 556, 563, 565, 566, 569, 573, 580, 581, 586, 589, 592, 593, 597, 598, 599, 600, 601, 602, 605, 695, 707, 710, 711, 716, 718, 719, 724, 725, 726, 750, 752, 753, 754, 755, 757, 762, 768, 770, 796, 801, 803, 804, 805, 806, 811, 812, 815, 817, 836, 837, 875, 877, 879], "cigar": [2, 16], "empti": [2, 29, 51, 79, 133, 136, 139, 143, 177, 178, 248, 256, 318, 324, 369, 375, 423, 431, 476, 478, 507, 527, 558, 583, 723, 754, 804, 815, 873], "depend": [2, 73, 76, 77, 78, 94, 103, 105, 106, 107, 136, 137, 145, 159, 160, 161, 189, 251, 426, 497, 549, 573, 599, 601, 603, 662, 716, 733, 734, 757, 758, 761, 805, 811, 838, 849, 873, 877, 879], "target_begin": 2, "query_begin": 2, "read_sequ": 2, "alia": [2, 78, 91, 92, 94, 105, 106, 139, 515, 563, 589, 778, 780], "ssw": [2, 16, 66], "reference_sequ": 2, "attribut": [2, 28, 56, 131, 135, 136, 138, 139, 142, 144, 145, 149, 192, 201, 202, 217, 221, 226, 274, 280, 292, 297, 340, 343, 348, 393, 396, 401, 450, 455, 460, 491, 493, 504, 519, 545, 556, 566, 569, 580, 593, 618, 651, 662, 697, 706, 717, 724, 732, 733, 734, 747, 751, 754, 758, 761, 775, 803, 811, 816, 818, 819, 822, 829, 850, 875], "format": [2, 55, 59, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 162, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 192, 218, 220, 270, 275, 279, 280, 288, 337, 341, 342, 389, 394, 395, 445, 451, 454, 489, 492, 493, 514, 515, 520, 545, 562, 563, 567, 569, 581, 586, 588, 589, 594, 628, 661, 672, 708, 709, 750, 770, 789, 810, 812, 872, 877], "optimal_alignment_scor": 2, "charact": [2, 16, 33, 46, 47, 50, 54, 67, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 221, 226, 228, 231, 233, 235, 236, 237, 241, 242, 243, 246, 248, 249, 250, 251, 252, 253, 254, 257, 264, 269, 271, 273, 274, 280, 290, 292, 297, 299, 302, 304, 306, 307, 308, 311, 312, 313, 316, 318, 319, 320, 321, 322, 325, 331, 336, 338, 339, 340, 343, 348, 350, 353, 355, 357, 358, 359, 362, 363, 364, 367, 369, 370, 371, 372, 373, 376, 378, 383, 388, 390, 391, 392, 393, 396, 401, 403, 406, 408, 410, 411, 412, 416, 417, 418, 421, 423, 424, 425, 426, 427, 428, 429, 432, 439, 444, 446, 449, 450, 455, 460, 462, 465, 467, 469, 470, 471, 476, 484, 490, 491, 493, 508, 511, 522, 875], "begin": [2, 16, 135, 136, 137, 138, 142, 145, 160, 192, 290, 725], "query_end": 2, "suboptimal_alignment_scor": 2, "suboptim": [2, 16], "target_end_optim": 2, "target_end_suboptim": 2, "built": [2, 16, 28, 149, 162, 192, 202, 221, 280, 292, 343, 396, 455, 493, 545, 569, 607, 618, 629, 640, 651, 662, 673, 684, 697, 732, 757, 796, 818, 838, 850, 861, 873], "ins": [2, 16, 28, 149, 162, 192, 202, 221, 280, 292, 343, 396, 455, 493, 545, 569, 607, 618, 629, 640, 651, 662, 673, 684, 697, 732, 818, 838, 850, 861], "self": [3, 4, 5, 7, 8, 9, 10, 11, 13, 18, 19, 21, 22, 23, 24, 25, 27, 34, 37, 39, 41, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 184, 185, 186, 187, 194, 196, 197, 198, 200, 202, 206, 208, 209, 210, 212, 216, 227, 228, 230, 232, 234, 272, 282, 284, 285, 286, 298, 299, 301, 303, 305, 349, 350, 352, 354, 356, 402, 403, 405, 407, 409, 447, 461, 462, 464, 466, 468, 495, 496, 499, 500, 501, 502, 504, 506, 518, 519, 547, 548, 551, 552, 553, 554, 556, 557, 565, 566, 571, 572, 575, 576, 577, 578, 580, 582, 592, 593, 608, 609, 611, 612, 613, 614, 615, 616, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 633, 634, 635, 636, 637, 638, 641, 642, 644, 645, 646, 647, 648, 649, 652, 653, 655, 656, 657, 658, 659, 660, 663, 664, 666, 667, 668, 669, 670, 671, 674, 675, 677, 678, 679, 680, 681, 682, 685, 686, 688, 689, 690, 691, 692, 693, 698, 699, 701, 702, 703, 704, 705, 733, 734, 735, 736, 739, 740, 742, 744, 745, 746, 747, 748, 749, 751, 752, 755, 756, 757, 758, 761, 762, 763, 764, 781, 782, 783, 784, 790, 791, 792, 797, 798, 799, 802, 803, 804, 805, 806, 808, 809, 820, 821, 824, 825, 826, 827, 828, 831, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 863, 864, 866, 867, 868, 869, 870, 871, 877, 879], "kei": [5, 28, 45, 48, 49, 51, 56, 67, 135, 136, 138, 145, 213, 217, 221, 245, 256, 264, 271, 315, 324, 331, 338, 343, 366, 375, 383, 390, 396, 420, 431, 439, 446, 455, 478, 484, 490, 509, 559, 584, 783, 803, 811, 879], "helper": [6, 20, 36, 152, 165, 195, 207, 229, 283, 300, 351, 404, 463, 498, 550, 574, 610, 621, 632, 643, 654, 665, 676, 687, 700, 738, 815, 816, 823, 842, 854, 865, 877], "pickl": [6, 20, 36, 152, 165, 195, 207, 229, 283, 300, 351, 404, 463, 498, 550, 574, 610, 621, 632, 643, 654, 665, 676, 687, 700, 738, 823, 842, 854, 865], "hash": [8, 22, 154, 167, 612, 623, 634, 645, 656, 667, 678, 689, 702, 740, 825, 844, 856, 867], "str": [13, 17, 27, 33, 38, 43, 55, 59, 67, 103, 107, 108, 109, 110, 111, 132, 138, 139, 145, 149, 158, 171, 174, 175, 176, 180, 181, 182, 185, 186, 187, 189, 200, 212, 218, 220, 221, 223, 231, 236, 237, 240, 244, 245, 246, 247, 248, 259, 260, 262, 264, 265, 266, 267, 268, 270, 271, 273, 274, 279, 280, 288, 294, 302, 307, 308, 310, 314, 315, 316, 317, 318, 327, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 345, 353, 358, 359, 361, 365, 366, 367, 368, 369, 379, 381, 383, 384, 385, 386, 387, 389, 390, 392, 393, 395, 396, 398, 406, 411, 412, 415, 419, 420, 421, 422, 423, 434, 435, 437, 439, 440, 441, 442, 443, 445, 446, 449, 450, 454, 455, 457, 465, 470, 471, 473, 474, 475, 476, 480, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 497, 503, 504, 505, 507, 510, 512, 513, 514, 519, 520, 532, 537, 542, 545, 546, 549, 555, 556, 558, 560, 561, 562, 566, 567, 570, 573, 579, 580, 583, 585, 587, 588, 593, 594, 597, 598, 600, 601, 602, 603, 616, 618, 627, 638, 640, 649, 651, 660, 662, 671, 682, 693, 697, 706, 707, 708, 709, 716, 723, 724, 732, 746, 750, 754, 765, 766, 778, 780, 789, 793, 795, 799, 801, 810, 811, 812, 817, 831, 836, 848, 860, 871], "inidic": [14, 16], "els": [14, 15, 141, 147, 160, 180, 185, 222, 275, 293, 341, 344, 394, 397, 451, 455, 456, 712, 754], "bool": [14, 16, 29, 30, 33, 42, 45, 48, 50, 51, 52, 53, 57, 60, 61, 62, 72, 73, 78, 94, 103, 105, 106, 107, 108, 111, 159, 160, 161, 180, 185, 192, 193, 199, 205, 211, 213, 215, 219, 221, 222, 223, 226, 228, 235, 238, 239, 241, 243, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 273, 274, 275, 281, 287, 293, 294, 297, 299, 306, 309, 311, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 348, 350, 357, 360, 362, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 401, 403, 410, 413, 414, 416, 418, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 449, 450, 451, 455, 456, 457, 460, 462, 469, 472, 475, 476, 477, 478, 479, 481, 482, 483, 485, 486, 487, 488, 490, 491, 494, 495, 502, 504, 507, 523, 527, 533, 534, 537, 543, 545, 546, 547, 554, 556, 558, 570, 571, 578, 580, 583, 586, 599, 602, 605, 640, 651, 715, 716, 718, 719, 723, 724, 726, 750, 755, 756, 759, 773, 775, 776, 777, 779, 782, 785, 786, 787, 790, 802, 804, 805, 812, 816, 838], "whether": [14, 29, 30, 33, 42, 51, 52, 72, 73, 94, 139, 147, 159, 161, 189, 223, 226, 235, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 281, 287, 294, 297, 306, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 345, 348, 357, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 398, 401, 410, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 457, 460, 469, 477, 478, 479, 481, 482, 483, 493, 502, 523, 527, 537, 554, 578, 597, 599, 600, 601, 706, 718, 719], "is_zero_bas": 15, "set": [15, 16, 46, 49, 53, 54, 78, 94, 105, 106, 111, 136, 138, 140, 143, 149, 189, 202, 215, 221, 239, 248, 261, 264, 274, 292, 309, 318, 328, 331, 340, 343, 360, 369, 380, 383, 393, 396, 414, 423, 436, 439, 450, 455, 472, 476, 481, 484, 491, 505, 513, 519, 524, 536, 561, 566, 587, 593, 605, 695, 716, 718, 721, 723, 724, 725, 733, 734, 749, 751, 754, 758, 761, 762, 764, 784, 798, 799, 811, 818, 829, 830, 835, 875, 879], "alig": 15, "stripe": [16, 66], "band": 16, "must": [16, 28, 45, 48, 54, 55, 59, 78, 80, 94, 105, 106, 107, 108, 111, 132, 134, 136, 137, 140, 141, 142, 143, 145, 160, 217, 218, 220, 221, 239, 244, 264, 270, 277, 279, 309, 314, 331, 337, 342, 343, 360, 365, 383, 389, 395, 396, 414, 419, 439, 445, 452, 454, 455, 472, 474, 484, 489, 492, 507, 514, 520, 527, 532, 542, 545, 558, 562, 567, 583, 588, 594, 597, 598, 599, 600, 601, 603, 605, 628, 661, 672, 695, 707, 708, 709, 710, 715, 724, 725, 726, 754, 789, 796, 804, 810, 811, 812, 815, 817, 837, 838, 861, 879], "instanti": [16, 135, 147, 292, 879], "callabl": [16, 28, 45, 48, 56, 103, 107, 108, 111, 509, 559, 584], "reus": [16, 720], "larg": [16, 79, 83, 105, 106, 131, 136, 143, 536, 598, 718, 724, 750, 757], "collect": [16, 95, 99, 101, 189, 504, 541, 556, 580, 695], "upper": [16, 83, 84, 136, 143, 192, 202, 214, 216, 584, 591, 599], "lowercas": [16, 135, 136, 137, 138, 144, 221, 239, 292, 309, 343, 360, 396, 414, 455, 472], "q": [16, 83, 133, 343, 711, 712], "h": [16, 69, 70, 74, 82, 94, 95, 96, 97, 98, 99, 136, 143, 145, 190, 221, 343, 396, 753, 754, 759, 762, 793, 794, 795, 798, 799, 808, 809, 811, 877], "l": [16, 70, 71, 78, 83, 84, 94, 102, 135, 137, 146, 290, 343, 541, 599, 696, 710, 711, 718, 804], "k": [16, 69, 74, 94, 95, 97, 98, 99, 108, 221, 248, 262, 263, 318, 329, 330, 343, 369, 381, 382, 396, 423, 437, 438, 476, 482, 483, 493, 505, 523, 541, 598, 605, 762, 796, 803, 811], "m": [16, 63, 69, 78, 94, 105, 106, 132, 133, 135, 137, 143, 146, 221, 280, 281, 290, 343, 396, 505, 598, 601, 605, 707, 710, 711, 717, 718, 720, 723, 795, 812], "w": [16, 47, 69, 70, 77, 90, 94, 102, 132, 133, 134, 189, 221, 343, 396, 527, 541], "y": [16, 69, 80, 137, 144, 221, 343, 396, 535, 538, 539, 543, 599, 602, 605, 696, 707, 711, 712, 717, 718, 723, 757, 803], "v": [16, 105, 106, 221, 226, 235, 297, 306, 343, 348, 357, 396, 401, 410, 460, 469, 524, 537, 541, 543, 723, 724, 803], "z": [16, 54, 77, 343, 602, 707, 757, 803], "x": [16, 80, 96, 137, 144, 274, 292, 340, 343, 393, 450, 491, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 538, 539, 540, 541, 543, 599, 602, 605, 696, 697, 707, 710, 711, 712, 718, 721, 724, 725, 757, 767, 788, 791, 803, 807, 812, 837, 879], "gap_open_penalti": [16, 60, 61, 62, 63, 64, 65], "int": [16, 40, 50, 57, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 111, 132, 138, 139, 144, 160, 189, 192, 202, 213, 217, 228, 233, 240, 246, 247, 251, 259, 261, 262, 263, 265, 267, 271, 289, 299, 304, 310, 316, 317, 327, 328, 329, 330, 332, 334, 338, 350, 355, 361, 367, 368, 379, 380, 381, 382, 384, 386, 390, 403, 408, 415, 421, 422, 426, 434, 436, 437, 438, 440, 442, 446, 452, 453, 462, 467, 473, 475, 480, 481, 482, 483, 485, 487, 490, 511, 512, 523, 525, 526, 532, 537, 541, 543, 560, 585, 597, 599, 600, 601, 602, 603, 605, 640, 684, 695, 707, 711, 715, 716, 718, 719, 722, 724, 725, 726, 732, 753, 757, 759, 768, 774, 783, 784, 796, 811, 816, 817, 837, 850], "option": [16, 28, 45, 47, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 69, 72, 73, 78, 83, 84, 85, 90, 94, 97, 103, 105, 106, 107, 108, 111, 134, 136, 137, 142, 143, 145, 146, 149, 159, 160, 161, 180, 181, 182, 185, 186, 187, 189, 192, 202, 213, 217, 218, 219, 220, 221, 226, 238, 239, 240, 244, 246, 247, 248, 251, 259, 261, 262, 263, 265, 267, 270, 273, 274, 279, 280, 289, 290, 291, 297, 309, 310, 314, 316, 317, 318, 327, 328, 329, 330, 332, 334, 337, 339, 340, 342, 343, 348, 360, 361, 365, 367, 368, 369, 379, 380, 381, 382, 384, 386, 389, 392, 393, 395, 396, 401, 413, 414, 415, 419, 421, 422, 423, 426, 434, 436, 437, 438, 440, 442, 445, 449, 450, 452, 453, 454, 455, 460, 472, 473, 474, 475, 476, 480, 481, 482, 483, 485, 487, 489, 491, 492, 504, 507, 509, 513, 514, 520, 523, 527, 532, 533, 534, 536, 545, 556, 558, 559, 561, 562, 567, 580, 583, 584, 586, 587, 588, 594, 597, 598, 599, 600, 601, 602, 603, 605, 640, 695, 707, 708, 709, 711, 712, 715, 716, 718, 719, 722, 723, 724, 725, 726, 732, 753, 770, 775, 789, 796, 803, 804, 810, 811, 812, 815, 816, 837, 838, 839, 861, 875, 879], "cannot": [16, 28, 45, 48, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 136, 137, 140, 141, 180, 181, 185, 186, 189, 239, 292, 309, 360, 414, 472, 527, 597, 598, 599, 600, 601, 695, 707, 723, 725, 726, 765, 768, 796, 873], "gap_extend_penalti": [16, 60, 61, 62, 63, 64, 65], "score_s": 16, "your": [16, 54, 78, 103, 105, 106, 107, 137, 147, 202, 601, 721, 724, 873, 877, 879], "estim": [16, 69, 72, 73, 77, 79, 81, 83, 84, 85, 90, 96, 532, 715, 723, 724, 725], "best": [16, 60, 61, 62, 63, 64, 65, 84, 85, 524, 598, 710, 814], "255": [16, 711], "mask_length": 16, "suggest": [16, 160, 180, 181, 185, 186, 724], "len": [16, 28, 40, 233, 304, 355, 408, 467, 505, 603, 725, 733, 734, 758, 761, 799, 811, 879], "special": [16, 140, 147], "concern": [16, 140], "detail": [16, 53, 54, 66, 67, 94, 108, 110, 111, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 291, 455, 497, 549, 573, 598, 602, 707, 710, 711, 718, 812, 873], "descript": [16, 69, 78, 83, 88, 89, 99, 103, 105, 106, 107, 131, 132, 136, 137, 138, 139, 141, 143, 146, 497, 549, 573, 755, 811, 875, 877], "after": [16, 45, 48, 60, 61, 62, 136, 137, 145, 146, 147, 205, 216, 532, 537, 598, 599, 602, 605, 710, 725, 786, 788, 805], "locat": [16, 55, 59, 135, 141, 145, 174, 175, 176, 192, 218, 220, 246, 247, 270, 279, 316, 317, 337, 342, 367, 368, 389, 395, 421, 422, 445, 454, 475, 489, 492, 514, 520, 562, 567, 588, 594, 708, 709, 789, 793, 810, 815, 878], "heurist": [16, 601, 716], "found": [16, 101, 133, 135, 136, 137, 138, 141, 143, 145, 180, 182, 185, 187, 274, 340, 393, 450, 491, 507, 541, 558, 583, 598, 599, 601, 725, 755, 765, 766, 767, 768, 778, 780, 796, 811], "check": [16, 137, 160, 180, 185, 193, 202, 205, 216, 494, 495, 533, 534, 544, 545, 546, 547, 569, 570, 571, 606, 710, 711, 724, 815, 816, 836, 879], "largest": [16, 102], "maxim": [16, 94, 598, 711], "sw": [16, 723], "avoid": [16, 145, 147, 216, 696, 719, 808, 809], "pick": [16, 724], "belong": [16, 70, 74, 139, 527, 532, 597, 600, 601], "share": [16, 51, 52, 54, 69, 239, 256, 258, 309, 324, 326, 360, 375, 377, 414, 431, 433, 455, 472, 478, 479, 877], "partial": [16, 94, 216], "librari": [16, 66, 105, 106, 136, 872, 873], "mask": [16, 274, 340, 393, 450, 491, 537, 543], "loci": 16, "nearbi": 16, "unmask": 16, "element": [16, 140, 189, 493, 497, 509, 529, 533, 534, 545, 549, 559, 569, 573, 584, 684, 707, 710, 714, 715, 719, 722, 724, 725, 726, 835], "15": [16, 62, 65, 83, 133, 142, 606, 721, 724, 725, 801], "mask_auto": 16, "automat": [16, 45, 48, 54, 55, 59, 140, 144, 173, 184, 192, 218, 220, 264, 270, 279, 331, 337, 342, 383, 389, 395, 439, 445, 454, 484, 489, 492, 514, 520, 544, 562, 567, 588, 594, 697, 708, 709, 757, 789, 810, 873], "max": [16, 69, 70, 90, 724, 725, 772], "score_onli": 16, "prevent": 16, "babp": 16, "overrid": [16, 61, 64, 94, 149, 159, 160, 161, 180, 185, 788, 879], "score_filt": 16, "distance_filt": 16, "override_skip_babp": 16, "highest": [16, 141], "preced": [16, 134, 141, 143], "less": [16, 69, 78, 85, 105, 106, 108, 143, 262, 263, 329, 330, 381, 382, 437, 438, 482, 483, 523, 599, 602, 695, 710, 726, 783, 817], "save": [16, 202, 545, 628, 661, 672, 785], "computation": 16, "filter": [16, 47, 66, 144, 242, 312, 363, 417, 602, 804, 879], "overridden": [16, 28, 138, 812], "regardless": [16, 46, 53, 54, 145, 290, 511, 603], "argument": [16, 28, 55, 56, 59, 66, 140, 159, 160, 161, 173, 180, 181, 182, 184, 185, 186, 187, 218, 220, 264, 270, 277, 278, 279, 331, 337, 342, 383, 389, 395, 439, 445, 452, 453, 454, 484, 489, 492, 493, 509, 514, 520, 525, 527, 559, 562, 567, 584, 588, 594, 603, 708, 709, 789, 810, 838, 861], "caus": [16, 189, 290], "calcul": [16, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 108, 111, 131, 250, 251, 425, 426, 527, 532, 535, 542, 543, 597, 598, 599, 600, 601, 605, 629, 640, 684, 715, 719, 722, 724, 725, 755, 762, 801, 872, 875], "none": [16, 28, 45, 47, 48, 55, 56, 57, 61, 62, 64, 65, 66, 78, 90, 94, 103, 105, 106, 107, 108, 132, 136, 140, 147, 149, 159, 161, 174, 175, 176, 180, 185, 189, 192, 202, 213, 215, 217, 218, 221, 240, 244, 246, 247, 248, 259, 270, 274, 275, 292, 310, 314, 316, 317, 318, 327, 337, 340, 341, 343, 361, 365, 367, 368, 369, 379, 389, 393, 394, 396, 415, 419, 421, 422, 423, 434, 445, 450, 451, 455, 473, 474, 475, 476, 480, 489, 491, 509, 513, 514, 527, 532, 533, 534, 536, 537, 545, 559, 561, 562, 569, 584, 587, 588, 597, 598, 599, 600, 601, 602, 603, 607, 629, 640, 673, 695, 697, 707, 708, 712, 715, 716, 719, 720, 722, 723, 724, 725, 732, 752, 753, 757, 760, 762, 770, 779, 781, 784, 785, 786, 787, 789, 796, 800, 801, 803, 804, 805, 808, 809, 811, 812, 838, 839, 861, 875, 877, 879], "effect": [16, 66, 76, 105, 106, 189, 274, 340, 393, 450, 491, 504, 556, 580, 721, 723, 724, 725], "unless": [16, 28, 53, 72, 144, 839], "substitution_matrix": [16, 60, 61, 62, 63, 64, 65], "suppli": [16, 132, 136, 144, 180, 185, 244, 314, 365, 419, 474, 521, 725, 762], "match_scor": [16, 61, 64, 67], "ad": [16, 60, 61, 62, 63, 64, 65, 136, 145, 213, 455, 527, 532, 711, 714, 838, 877], "occur": [16, 133, 136, 137, 140, 141, 181, 186, 189, 259, 327, 379, 434, 455, 480, 725, 756, 765], "ignor": [16, 47, 69, 78, 105, 106, 133, 134, 135, 136, 137, 140, 141, 147, 246, 247, 290, 291, 316, 317, 367, 368, 421, 422, 475, 507, 558, 583, 597, 598, 599, 600, 601, 716, 723, 724, 762, 781, 816, 838, 839, 875, 877, 879], "mismatch_scor": [16, 61, 64, 67], "subtract": [16, 684], "2d": [16, 60, 61, 62, 63, 64, 65, 103, 107, 108, 111, 493, 508, 517, 525, 526, 527, 535, 603, 712, 719], "dict": [16, 28, 49, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 135, 138, 160, 180, 181, 182, 185, 186, 187, 192, 213, 217, 218, 220, 221, 248, 263, 270, 277, 278, 279, 292, 318, 330, 337, 342, 343, 369, 382, 389, 395, 396, 423, 438, 445, 452, 453, 454, 455, 476, 483, 489, 492, 493, 508, 514, 517, 520, 562, 567, 588, 594, 599, 602, 662, 708, 709, 770, 774, 783, 789, 803, 810, 838, 875, 879], "substitut": [16, 60, 61, 62, 63, 64, 65, 67, 140, 274, 340, 343, 393, 450, 491, 493, 505, 508, 510, 511, 517, 524, 814], "entir": [16, 28, 74, 221, 292, 343, 396, 455], "combin": [16, 28, 45, 48, 138, 532, 598, 697, 711], "enumer": 16, "requir": [16, 78, 84, 85, 94, 105, 106, 131, 133, 134, 136, 139, 143, 145, 146, 217, 277, 290, 291, 452, 542, 544, 569, 599, 605, 695, 715, 723, 754, 760, 794, 814, 838, 873, 875, 879], "suppress_sequ": [16, 66], "zero_index": [16, 66], "wrapper": [16, 66, 84, 85, 815], "otherwis": [16, 29, 45, 48, 57, 72, 73, 136, 138, 141, 144, 189, 274, 340, 393, 450, 491, 494, 495, 497, 502, 507, 546, 547, 549, 554, 558, 570, 571, 573, 578, 583, 586, 602, 790, 875], "inform": [16, 47, 55, 59, 71, 86, 94, 132, 133, 134, 135, 136, 137, 138, 144, 146, 192, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 618, 662, 696, 708, 709, 718, 724, 725, 789, 810, 838, 875, 879], "NOT": [16, 88, 189], "meaning": [16, 45, 48, 54, 716, 875], "zhao": [16, 66], "mengyao": [16, 66], "wan": [16, 66], "ping": [16, 66], "lee": [16, 66, 69], "erik": [16, 66], "garrison": [16, 66], "gabor": [16, 66], "marth": [16, 66], "simd": [16, 66], "applic": [16, 47, 60, 66, 757, 879], "plo": [16, 66, 84, 85, 537, 543], "ONE": [16, 66], "2013": [16, 66, 76, 94, 541, 707], "web": [16, 60, 63, 66, 134, 146, 597, 598, 599, 600, 601], "juli": [16, 66], "2014": [16, 66, 132, 143, 532, 541], "http": [16, 47, 60, 61, 62, 63, 64, 65, 66, 69, 73, 83, 108, 131, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 145, 146, 280, 288, 289, 515, 537, 541, 543, 545, 563, 569, 581, 589, 597, 598, 599, 600, 601, 707, 811, 812, 837], "www": [16, 60, 63, 66, 83, 108, 131, 132, 133, 134, 135, 136, 137, 138, 143, 146, 280, 288, 289, 598], "ploson": [16, 66], "org": [16, 66, 108, 131, 136, 137, 138, 143, 145, 515, 537, 541, 543, 545, 563, 569, 581, 589, 597, 598, 599, 600, 601, 707, 812], "articl": [16, 66, 134], "info": [16, 66, 202, 221, 292, 343, 396, 455, 606, 662], "doi": [16, 66, 135, 137, 537, 541, 543, 812], "10": [16, 47, 66, 69, 84, 85, 133, 135, 136, 137, 138, 139, 141, 142, 143, 192, 202, 217, 221, 246, 292, 316, 343, 367, 396, 421, 455, 527, 532, 537, 541, 543, 601, 696, 721, 724, 725, 812, 879], "1371": [16, 66, 537, 543], "journal": [16, 66, 69, 72, 79, 94, 95, 97, 99, 138, 527, 532, 537, 543, 597], "pone": [16, 66], "0082138": [16, 66], "alignmentstructur": 17, "positional_metadata": [28, 33, 46, 52, 53, 54, 136, 145, 221, 226, 238, 239, 242, 258, 264, 271, 272, 292, 297, 309, 312, 326, 331, 338, 343, 348, 360, 363, 377, 383, 390, 396, 401, 413, 414, 417, 433, 439, 446, 447, 455, 460, 472, 479, 484, 490, 875], "sourc": [28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 138, 139, 148, 149, 159, 160, 161, 162, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 199, 201, 202, 203, 204, 205, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 607, 617, 618, 628, 629, 639, 640, 650, 651, 661, 662, 672, 673, 683, 684, 694, 695, 697, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 741, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 829, 835, 836, 837, 838, 839, 849, 850, 851, 861, 862, 872], "store": [28, 38, 43, 51, 52, 53, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 192, 202, 221, 256, 258, 292, 324, 326, 343, 375, 377, 396, 431, 433, 455, 478, 479, 515, 544, 545, 563, 569, 589, 602, 618, 651, 662, 697, 710, 711, 716, 718, 732, 874, 875], "tabular": [28, 132, 133, 146], "iter": [28, 38, 43, 48, 53, 60, 61, 62, 63, 64, 65, 66, 67, 103, 107, 108, 111, 144, 192, 213, 214, 215, 217, 228, 231, 236, 239, 247, 261, 271, 274, 299, 302, 307, 309, 317, 328, 338, 340, 350, 353, 358, 360, 368, 380, 390, 393, 403, 406, 411, 414, 422, 436, 446, 450, 462, 465, 470, 472, 475, 481, 490, 491, 493, 504, 507, 509, 511, 519, 527, 556, 558, 559, 566, 580, 583, 584, 593, 598, 601, 602, 695, 707, 724, 725, 733, 734, 741, 758, 761, 762, 771, 779, 782, 785, 786, 787, 795, 796, 802, 805, 835, 837, 839, 861, 877, 879], "grammaredsequ": [28, 38, 43, 45, 48, 49, 60, 63, 134, 136, 143, 145, 221, 242, 245, 273, 343, 363, 366, 392, 396, 417, 420, 449], "exampl": [28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 78, 105, 106, 107, 140, 147, 159, 160, 161, 190, 192, 202, 214, 219, 221, 222, 223, 226, 228, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 278, 280, 281, 289, 290, 291, 292, 293, 294, 297, 299, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 340, 341, 343, 344, 345, 348, 350, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 393, 394, 396, 397, 398, 401, 403, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 460, 462, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 493, 504, 505, 508, 511, 513, 516, 519, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 556, 561, 564, 566, 580, 587, 590, 591, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 695, 707, 716, 723, 724, 725, 726, 733, 734, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 817, 837, 872, 873], "arbitrari": [28, 46, 49, 140, 145, 221, 343, 396, 455, 695, 838, 875], "shallow": [28, 31, 202, 203, 224, 295, 346, 399, 455, 458], "copi": [28, 31, 32, 136, 143, 145, 202, 203, 204, 224, 225, 271, 295, 296, 338, 346, 347, 390, 399, 400, 446, 455, 458, 459, 490, 515, 518, 545, 563, 565, 589, 592, 719, 726, 733, 734, 761, 793, 794, 800, 808, 809, 832, 833, 834], "made": [28, 90, 455, 527, 545, 569, 695, 748, 765, 766, 788, 814], "consum": [28, 48, 161, 221, 280, 343, 396, 455], "abl": [28, 48, 108, 221, 343, 396, 455, 527, 724, 762], "directli": [28, 45, 48, 221, 280, 343, 396, 455, 521, 605, 838, 879], "constructor": [28, 45, 48, 56, 134, 136, 137, 138, 143, 144, 145, 160, 173, 184, 221, 264, 280, 331, 343, 383, 396, 439, 455, 484, 493, 603], "label": [28, 30, 33, 35, 45, 48, 49, 54, 56, 57, 58, 134, 136, 138, 143, 145, 513, 541, 544, 561, 587, 597, 598, 600, 601, 602, 697, 707, 752, 816], "content": [28, 46, 135, 136, 137, 138, 139, 141, 147, 159, 160, 161, 221, 238, 239, 242, 245, 272, 276, 309, 312, 315, 360, 363, 366, 396, 413, 414, 417, 420, 447, 448, 472, 875], "hashabl": [28, 30, 695, 861], "rais": [28, 45, 47, 48, 50, 54, 56, 58, 69, 78, 79, 80, 94, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 143, 147, 148, 159, 160, 161, 180, 181, 182, 183, 185, 186, 187, 216, 223, 239, 240, 244, 246, 248, 259, 260, 262, 263, 265, 266, 267, 268, 274, 290, 292, 294, 309, 310, 314, 316, 318, 327, 329, 330, 332, 333, 334, 335, 340, 345, 360, 361, 365, 367, 369, 379, 381, 382, 384, 385, 386, 387, 393, 398, 414, 415, 419, 421, 423, 434, 435, 437, 438, 440, 441, 442, 443, 450, 457, 472, 473, 474, 476, 480, 482, 483, 485, 486, 487, 488, 491, 497, 504, 505, 507, 508, 509, 512, 519, 522, 523, 529, 536, 542, 549, 556, 558, 559, 560, 566, 573, 580, 583, 584, 585, 593, 597, 598, 599, 601, 602, 640, 684, 695, 707, 710, 711, 716, 724, 725, 726, 747, 754, 755, 757, 760, 762, 763, 765, 766, 768, 770, 772, 778, 780, 783, 793, 794, 795, 796, 801, 806, 815, 816, 817, 818], "valueerror": [28, 45, 47, 48, 50, 54, 56, 58, 69, 78, 80, 94, 103, 105, 106, 107, 111, 180, 185, 239, 240, 246, 248, 259, 262, 263, 265, 266, 267, 268, 274, 290, 292, 309, 310, 316, 318, 327, 329, 330, 332, 333, 334, 335, 340, 360, 361, 367, 369, 379, 381, 382, 384, 385, 386, 387, 393, 414, 415, 421, 423, 434, 437, 438, 440, 441, 442, 443, 450, 455, 472, 473, 476, 480, 482, 483, 485, 486, 487, 488, 491, 505, 508, 509, 522, 523, 529, 536, 542, 559, 584, 598, 599, 601, 602, 640, 684, 695, 707, 710, 711, 724, 725, 726, 755, 757, 762, 770, 778, 780, 783, 795, 796, 801, 806, 817], "both": [28, 46, 54, 56, 67, 72, 73, 74, 78, 94, 131, 132, 133, 136, 137, 143, 146, 180, 185, 217, 290, 509, 530, 531, 533, 534, 544, 559, 584, 586, 591, 598, 599, 600, 601, 716, 756, 757, 796, 805, 873, 875], "typeerror": [28, 45, 48, 54, 103, 180, 181, 185, 186, 223, 239, 240, 244, 248, 259, 260, 265, 266, 267, 268, 294, 309, 310, 314, 318, 327, 332, 333, 334, 335, 345, 360, 361, 365, 369, 379, 384, 385, 386, 387, 398, 414, 415, 419, 423, 434, 435, 440, 441, 442, 443, 457, 472, 473, 474, 476, 480, 485, 486, 487, 488, 522, 523, 598, 599, 601, 724, 725, 726, 754], "isn": [28, 45, 48, 54, 80, 145, 159, 161, 190, 192, 533, 534, 726], "doe": [28, 45, 46, 48, 54, 57, 66, 78, 94, 132, 134, 136, 137, 139, 141, 143, 145, 189, 239, 280, 281, 287, 290, 309, 360, 414, 472, 505, 515, 522, 544, 563, 586, 589, 597, 599, 601, 640, 716, 724, 725, 748, 757, 768, 781, 794, 801, 804, 811, 815, 873], "exactli": [28, 45, 48, 53, 63, 64, 65, 136, 137, 143, 147, 226, 235, 281, 297, 306, 348, 357, 401, 410, 460, 469, 542, 707, 750], "reassign_index": [28, 45, 48, 57, 58, 143], "neither": [28, 56, 190, 796, 805], "nor": [28, 45, 48, 56, 140, 143, 545, 796], "rangeindex": [28, 45, 48, 56, 143], "stop": [28, 45, 48, 56, 69, 143, 240, 259, 277, 278, 280, 290, 291, 310, 327, 343, 361, 378, 379, 415, 434, 452, 453, 473, 480, 752, 839, 875], "four": [28, 137, 145, 221, 343, 396, 527, 707], "acgt": [28, 45, 48, 49, 51, 52, 58, 222, 226, 235, 239, 250, 251, 256, 258, 260, 264, 293, 297, 306, 309, 324, 326, 331, 344, 348, 357, 360, 375, 377, 383, 397, 401, 410, 414, 425, 426, 431, 433, 435, 439, 455, 456, 460, 469, 472, 478, 479, 484, 493, 511], "ag": [28, 45, 48, 50, 544, 723, 724], "wasn": [28, 137], "non": [28, 72, 80, 132, 134, 135, 139, 192, 221, 257, 269, 273, 292, 325, 336, 339, 343, 376, 388, 392, 396, 432, 444, 449, 493, 525, 526, 527, 532, 536, 569, 597, 600, 601, 605, 710, 716, 721, 756, 757, 762], "seq3": [28, 48, 136, 143], "prob": [28, 33, 46, 53], "iloc": [28, 35], "slice": [28, 35, 228, 246, 247, 261, 271, 299, 316, 317, 328, 338, 350, 367, 368, 380, 390, 403, 421, 422, 436, 446, 462, 475, 481, 490, 497, 544, 549, 573, 737, 875], "axi": [28, 35, 50, 80, 96, 140, 221, 292, 343, 396, 455, 493, 640, 684, 697, 707, 715, 722, 725, 816], "along": [28, 140, 221, 292, 343, 396, 455, 707, 715, 716], "loc": [28, 35, 455, 527, 724], "shape": [28, 40, 49, 131, 142, 493, 495, 545, 547, 569, 571, 599, 712, 715, 726], "boolean": [29, 106, 136, 139, 144, 192, 221, 228, 241, 243, 246, 249, 261, 264, 266, 268, 269, 271, 299, 311, 313, 316, 319, 328, 331, 333, 335, 336, 338, 343, 350, 362, 364, 367, 370, 380, 383, 385, 387, 388, 390, 391, 396, 403, 416, 418, 421, 424, 436, 439, 441, 443, 444, 446, 455, 462, 481, 484, 486, 488, 490, 584], "OR": 29, "acg": [29, 30, 31, 32, 33, 38, 40, 43, 50, 53, 54, 56, 57, 144, 145, 259, 262, 327, 329, 379, 381, 434, 437, 480, 482], "ac": [29, 30, 31, 32, 33, 38, 40, 43, 46, 48, 50, 54, 56, 57, 60, 63, 135, 137, 138, 145, 192, 249, 319, 370, 424, 875], "No": [29, 73, 132, 133, 135, 144, 146, 202, 237, 308, 359, 412, 471, 599], "search": [30, 60, 132, 133, 136, 217, 246, 259, 316, 327, 367, 379, 421, 434, 480, 494, 546, 570, 711, 760, 765, 766, 767, 768, 835, 875], "l1": 30, "l2": 30, "l3": 30, "__deepcopy__": [31, 203], "msa_copi": [31, 32], "memo": [32, 204, 225, 296, 347, 400, 459], "deep": [32, 70, 204, 224, 225, 295, 296, 346, 347, 399, 400, 455, 458, 459, 506, 518, 557, 565, 582, 592], "__copy__": [32, 204], "deepcopi": [32, 733, 734, 758, 808, 809], "against": [33, 42, 60, 63, 137, 193, 199, 205, 211, 226, 235, 281, 287, 297, 306, 348, 357, 401, 410, 460, 469, 527, 605, 755], "pleas": [35, 55, 59, 136, 144, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 708, 709, 789, 810], "restrict": [35, 78, 105, 106, 143, 875], "over": [38, 43, 53, 108, 136, 137, 144, 145, 231, 236, 302, 307, 353, 358, 406, 411, 465, 470, 493, 532, 603, 617, 639, 650, 683, 694, 721, 722, 741, 779, 782, 785, 786, 787, 799, 802, 805, 877], "yield": [38, 43, 53, 136, 217, 231, 236, 245, 246, 247, 261, 262, 278, 291, 302, 307, 315, 316, 317, 328, 329, 353, 358, 366, 367, 368, 380, 381, 406, 411, 420, 421, 422, 436, 437, 453, 465, 470, 475, 481, 482, 601, 767, 779, 782, 785, 786, 787, 796, 802, 804, 805, 839, 873, 879], "size": [40, 76, 493, 532, 545, 569, 597, 598, 599, 601, 684, 695, 707, 715, 721, 723, 724, 725, 837], "1st": [40, 673, 817], "dimens": [40, 142, 143, 493, 503, 525, 529, 533, 534, 545, 555, 569, 579, 601, 697, 706, 707, 716, 717], "equival": [40, 76, 78, 94, 137, 224, 225, 248, 250, 271, 272, 278, 291, 295, 296, 318, 338, 346, 347, 369, 390, 399, 400, 423, 425, 446, 447, 453, 458, 459, 476, 490, 504, 519, 522, 524, 527, 556, 566, 580, 593, 599, 875], "inequ": [42, 199, 211, 235, 287, 306, 357, 410, 469, 569, 716], "__eq__": [42, 211, 502, 554, 578], "revers": [43, 53, 57, 147, 236, 238, 260, 272, 278, 290, 291, 307, 358, 411, 413, 435, 447, 448, 453, 470, 597, 601, 796, 875, 879], "summari": [44, 503, 527, 555, 579], "reset_index": [45, 48], "without": [45, 48, 54, 56, 90, 106, 133, 141, 143, 145, 455, 524, 695, 707, 725, 726, 763, 772, 804, 837, 838, 873], "recomput": [45, 48, 54], "treat": [45, 46, 47, 48, 136, 140, 221, 264, 273, 331, 339, 343, 383, 392, 396, 439, 449, 455, 484, 522, 724], "reset": [45, 48, 56], "choic": [45, 48, 140, 716], "necessarili": [45, 48, 54, 142, 248, 318, 369, 423, 455, 476, 726], "own": [45, 48, 54, 131, 136, 142, 145, 147, 721], "via": [45, 48, 56, 69, 84, 85, 136, 143, 244, 280, 281, 287, 314, 365, 419, 474, 597, 599, 600], "acga": [45, 48, 226, 235, 297, 306, 348, 357, 401, 410, 460, 469], "major": [46, 524, 591, 811], "most": [46, 70, 79, 94, 131, 134, 136, 137, 140, 141, 143, 146, 290, 455, 599, 695, 718, 721, 772, 774, 811, 877], "common": [46, 51, 52, 63, 78, 94, 132, 136, 137, 138, 145, 146, 256, 258, 324, 326, 375, 377, 431, 433, 478, 479, 525, 526, 545, 640, 732, 757, 765, 778, 780, 803, 804, 812, 875, 877, 878], "ti": [46, 70, 811], "broken": [46, 811], "manner": [46, 136, 143, 228, 242, 299, 312, 350, 363, 403, 417, 462, 599, 716], "present": [46, 47, 78, 105, 106, 132, 136, 142, 145, 203, 204, 221, 238, 241, 242, 243, 248, 249, 259, 269, 272, 290, 311, 312, 313, 318, 319, 327, 336, 343, 362, 363, 364, 369, 370, 379, 388, 391, 396, 413, 416, 417, 418, 423, 424, 434, 444, 447, 476, 480, 507, 527, 558, 583, 597, 598, 600, 601, 640, 706, 716, 725, 726, 756, 811, 812, 814, 877], "default_gap_char": [46, 47, 54, 221, 292, 343, 396], "distinct": [46, 91, 92, 101, 522, 544], "contribut": [46, 94, 605, 710, 715], "AT": [46, 136, 137, 143], "tt": [46, 261, 328, 380, 436, 481], "cg": [46, 271, 338, 390, 446, 455, 490], "degener": [46, 47, 135, 136, 137, 138, 139, 221, 238, 239, 241, 242, 245, 250, 251, 252, 253, 257, 269, 272, 273, 275, 276, 277, 278, 280, 290, 291, 292, 309, 311, 312, 315, 320, 321, 325, 336, 339, 341, 343, 360, 362, 363, 366, 371, 372, 376, 388, 392, 394, 396, 413, 414, 416, 417, 420, 425, 426, 427, 428, 432, 444, 447, 448, 449, 451, 452, 453, 472, 505, 875], "gc": [46, 135, 136, 137, 138, 139, 146, 221, 238, 239, 242, 245, 251, 272, 276, 281, 291, 309, 312, 315, 360, 363, 366, 396, 413, 414, 417, 420, 426, 447, 448, 472, 875], "33": [46, 78, 105, 106, 137, 245, 315, 366, 420, 532, 598, 601, 721, 724, 875], "last": [46, 135, 143, 261, 290, 328, 380, 436, 455, 481, 599, 696, 879], "metric": [47, 69, 74, 78, 79, 94, 103, 104, 105, 106, 107, 108, 109, 110, 111, 137, 244, 314, 365, 419, 474, 509, 523, 559, 569, 584, 732, 872, 875], "inverse_shannon_uncertainti": 47, "degenerate_mod": 47, "gap_mod": 47, "nan": [47, 50, 54, 85, 132, 239, 248, 309, 318, 360, 369, 414, 423, 472, 476, 522, 523, 597, 598, 599, 600, 601, 602, 605, 707, 723, 724, 803, 815], "larger": [47, 724], "mode": [47, 147, 189, 290, 725, 838], "handl": [47, 54, 136, 137, 144, 145, 146, 147, 149, 159, 161, 189, 290, 291, 527, 599, 601, 602, 721, 805, 812, 837, 879], "assign": [47, 56, 67, 103, 107, 143, 193, 271, 338, 390, 446, 455, 490, 511, 527, 532, 597, 600, 601, 695, 725, 751, 752, 753], "np": [47, 50, 78, 85, 94, 105, 106, 132, 221, 223, 240, 241, 243, 244, 248, 249, 259, 260, 265, 266, 267, 268, 269, 274, 294, 310, 311, 313, 314, 318, 319, 327, 332, 333, 334, 335, 336, 340, 343, 345, 361, 362, 364, 365, 369, 370, 379, 384, 385, 386, 387, 388, 391, 393, 396, 398, 415, 416, 418, 419, 423, 424, 434, 435, 440, 441, 442, 443, 444, 450, 455, 457, 473, 474, 476, 480, 485, 486, 487, 488, 491, 493, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 597, 599, 600, 601, 602, 605, 606, 695, 696, 707, 720, 721, 723, 724, 725, 726, 774, 796, 811, 815], "remov": [47, 66, 78, 94, 105, 106, 136, 140, 143, 215, 242, 273, 312, 339, 363, 392, 417, 449, 749, 764, 784, 788, 791, 795, 806, 875], "up": [47, 67, 134, 143, 145, 189, 202, 214, 452, 453, 497, 529, 536, 538, 539, 540, 549, 573, 599, 695, 725, 749, 754, 757, 788, 794, 861, 877], "float": [47, 50, 60, 61, 62, 63, 64, 65, 66, 67, 78, 83, 84, 94, 103, 105, 106, 107, 108, 111, 131, 132, 138, 140, 141, 244, 250, 251, 265, 267, 314, 332, 334, 365, 384, 386, 419, 425, 426, 440, 442, 474, 485, 487, 509, 511, 522, 523, 527, 528, 530, 531, 532, 534, 536, 537, 538, 540, 543, 544, 545, 559, 584, 599, 601, 603, 605, 618, 662, 707, 722, 724, 725, 732, 747, 755, 756, 757, 762, 763, 772, 803, 811, 815], "unknown": [47, 84, 85, 130, 138, 192, 246, 316, 367, 421, 695], "mislead": [47, 111], "point": [47, 80, 83, 85, 131, 134, 147, 160, 192, 264, 271, 274, 331, 338, 340, 383, 390, 393, 439, 446, 450, 484, 490, 491, 505, 601, 607, 629, 684, 707, 724, 725, 794, 815, 836], "out": [47, 144, 147, 707, 756, 757, 879], "compos": [47, 137, 144], "90": [47, 139, 532, 879], "tryptophan": [47, 343], "would": [47, 78, 80, 83, 105, 106, 134, 136, 139, 141, 143, 145, 147, 239, 261, 309, 328, 360, 380, 414, 436, 472, 481, 504, 524, 541, 556, 580, 605, 723, 724, 754, 804, 805, 811, 873], "highli": 47, "alanin": [47, 343], "glycin": [47, 343], "recod": 47, "awar": [47, 94, 455], "consid": [47, 69, 78, 83, 94, 105, 106, 136, 141, 226, 261, 297, 328, 348, 380, 401, 436, 460, 481, 522, 524, 601, 602, 695, 723, 724, 725, 815, 838], "simpli": [47, 54, 101, 147, 280, 515, 563, 589, 716, 721, 765, 879], "minu": [47, 138, 145, 673], "shannon": [47, 82, 95], "uncertainti": [47, 532, 605], "invers": [47, 526, 531, 534, 539], "impli": [47, 189, 605], "higher": [47, 493, 527, 532, 850], "entropi": [47, 82, 97], "make": [47, 54, 136, 141, 147, 281, 497, 522, 549, 573, 597, 601, 725, 800, 803, 804, 812, 818, 838, 879], "symbol": [47, 136], "done": [47, 527, 601, 628, 661, 672], "prefer": [47, 103, 107, 137, 710, 711], "valdar": 47, "residu": [47, 718], "2002": [47, 78, 94, 102, 133, 136], "schneider": 47, "pitfal": 47, "theori": [47, 71, 86, 97, 537, 543], "websit": 47, "ca": [47, 142, 697, 711, 718], "2015": [47, 524, 527, 537, 543], "ncifcrf": 47, "gov": [47, 61, 62, 64, 65, 132, 133, 136, 138, 144, 146, 280, 288, 289], "glossari": 47, "html": [47, 83, 132, 134, 136, 138, 141, 143, 145, 192, 515, 545, 563, 569, 581, 589, 597, 598, 599, 600, 601, 707, 811], "shannon_entropi": 47, "classmethod": [49, 55, 214, 218, 239, 270, 289, 309, 337, 360, 389, 414, 445, 472, 489, 505, 508, 509, 510, 511, 514, 559, 562, 584, 588, 708, 769, 770, 771, 789], "dictionari": [49, 51, 56, 58, 67, 145, 146, 149, 192, 203, 204, 213, 217, 256, 324, 375, 431, 455, 478, 508, 517, 599, 770], "construct": [49, 58, 138, 146, 192, 193, 221, 292, 343, 396, 493, 508, 511, 517, 537, 544, 696, 760, 770, 771, 812, 872, 873, 877], "to_dict": 49, "sort": [49, 54, 109, 110, 193, 202, 205, 245, 248, 274, 315, 318, 340, 366, 369, 393, 420, 423, 450, 476, 491, 640, 673, 695, 798, 803, 804, 811, 875, 879], "rel": [50, 94, 135, 138, 248, 250, 251, 263, 265, 267, 318, 330, 332, 334, 369, 382, 384, 386, 423, 425, 426, 438, 440, 442, 476, 483, 485, 487, 537, 543, 581, 797, 815, 850, 875], "across": [50, 94, 136, 137, 143, 202, 527, 532, 599, 724, 811], "1d": [50, 103, 221, 223, 228, 240, 241, 243, 244, 246, 247, 249, 259, 260, 261, 265, 266, 267, 268, 269, 271, 274, 294, 299, 310, 311, 313, 314, 316, 317, 319, 327, 328, 332, 333, 334, 335, 336, 338, 340, 343, 345, 350, 361, 362, 364, 365, 367, 368, 370, 379, 380, 384, 385, 386, 387, 388, 390, 391, 393, 396, 398, 403, 415, 416, 418, 419, 421, 422, 424, 434, 435, 436, 440, 441, 442, 443, 444, 446, 450, 455, 457, 462, 473, 474, 475, 480, 481, 485, 486, 487, 488, 490, 491, 526, 527], "ndarrai": [50, 107, 221, 223, 240, 241, 243, 244, 249, 259, 260, 265, 266, 267, 268, 269, 274, 294, 310, 311, 313, 314, 319, 327, 332, 333, 334, 335, 336, 340, 343, 345, 361, 362, 364, 365, 370, 379, 384, 385, 386, 387, 388, 391, 393, 396, 398, 415, 416, 418, 419, 424, 434, 435, 440, 441, 442, 443, 444, 450, 455, 457, 473, 474, 480, 485, 486, 487, 488, 491, 497, 515, 525, 526, 528, 530, 531, 533, 534, 535, 536, 538, 539, 540, 543, 545, 549, 563, 573, 581, 586, 589, 603, 605, 719, 726, 769], "vector": [50, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 140, 241, 243, 246, 249, 261, 264, 266, 268, 269, 271, 274, 280, 311, 313, 316, 319, 328, 331, 333, 335, 336, 338, 340, 362, 364, 367, 370, 380, 383, 385, 387, 388, 390, 391, 393, 416, 418, 421, 424, 436, 439, 441, 443, 444, 446, 450, 481, 484, 486, 488, 490, 491, 497, 524, 525, 526, 527, 532, 533, 534, 538, 539, 540, 543, 544, 545, 549, 569, 573, 597, 600, 601, 651, 711, 725, 726, 803, 872], "specifi": [50, 54, 94, 111, 132, 134, 136, 137, 138, 139, 140, 143, 145, 146, 147, 179, 189, 192, 202, 215, 217, 221, 228, 246, 248, 264, 277, 289, 290, 292, 299, 316, 318, 331, 343, 350, 367, 369, 383, 396, 403, 421, 423, 439, 452, 455, 462, 476, 484, 494, 497, 504, 507, 512, 513, 519, 525, 526, 527, 532, 533, 534, 536, 542, 546, 549, 556, 558, 560, 561, 566, 570, 573, 580, 583, 585, 587, 593, 597, 598, 599, 600, 601, 605, 684, 707, 715, 716, 722, 754, 762, 793, 796, 798, 801, 804, 811, 838, 850, 851, 861, 872, 879], "Will": [50, 179, 182, 187, 189, 506, 518, 557, 565, 582, 592, 697, 726], "least": [51, 52, 90, 141, 246, 255, 256, 258, 316, 323, 324, 326, 367, 374, 375, 377, 421, 430, 431, 433, 477, 478, 479, 527, 599, 707, 724, 725, 814, 879], "demonstr": [51, 52, 147, 256, 258, 324, 326, 375, 377, 431, 433, 478, 479], "behavior": [51, 52, 54, 60, 61, 62, 136, 137, 138, 189, 256, 258, 274, 290, 324, 326, 340, 375, 377, 393, 431, 433, 450, 455, 478, 479, 491, 597, 599, 601, 756, 879], "rang": [52, 74, 83, 95, 106, 137, 138, 238, 242, 248, 258, 261, 272, 312, 318, 326, 328, 363, 369, 377, 380, 413, 417, 423, 433, 436, 447, 476, 479, 481, 597, 598, 707, 725, 774, 879], "qualiti": [52, 136, 144, 221, 226, 238, 242, 258, 272, 297, 312, 326, 343, 348, 363, 377, 396, 401, 413, 417, 433, 447, 455, 460, 479, 707, 875], "ignore_metadata": 53, "improv": [53, 141, 143, 221, 343, 396, 584], "__iter__": 53, "__reversed__": 53, "concat": [53, 54], "artifact": [53, 60, 61, 62], "real": [53, 136, 137, 144, 524, 525, 526, 530, 531, 533, 534, 538, 539, 540], "concaten": [53, 145, 214, 239, 309, 360, 414, 472], "outer": [53, 54, 239, 309, 360, 414, 472, 508], "join": [53, 132, 133, 137, 144, 145, 146, 239, 309, 360, 414, 472, 804, 811, 812], "aa": [53, 136, 138, 143, 280], "gt": 53, "strict": [54, 143, 239, 309, 360, 414, 472, 507, 558, 583, 599, 602, 605], "horizont": 54, "control": [54, 136, 597, 599, 600, 606, 718, 721, 723, 724, 725], "dure": [54, 136, 193, 239, 309, 360, 414, 472, 601, 836], "section": [54, 136, 137, 142, 145, 280, 455, 598, 599, 710, 711], "inner": [54, 141, 239, 309, 360, 414, 472, 508], "left": [54, 69, 97, 141, 525, 526, 530, 535, 538, 539, 540, 541, 752, 774, 815, 816, 877], "right": [54, 69, 97, 141, 524, 525, 526, 530, 535, 538, 539, 540, 541, 774, 815, 816, 879], "unshar": 54, "pad": [54, 143, 239, 309, 360, 414, 472], "guarante": [54, 85, 221, 245, 315, 343, 366, 396, 420, 545, 603, 762], "duplic": [54, 111, 137, 145, 216, 274, 340, 393, 450, 491, 507, 558, 583, 727, 835], "doesn": [54, 136, 183, 290, 524, 542, 596, 710, 716, 720, 794, 813, 878], "subclass": [54, 134, 136, 143, 145, 147, 239, 309, 360, 414, 455, 472, 493, 544, 545, 603, 811, 838], "togeth": [54, 135, 136, 138, 145, 527, 838], "likewis": [54, 94, 145], "per": [54, 132, 133, 144, 145, 221, 343, 396, 455, 532, 602, 605, 695, 718, 724, 725, 750, 837], "retain": [54, 239, 271, 309, 338, 360, 390, 414, 446, 472, 490, 507, 558, 583, 695], "output": [54, 132, 133, 141, 143, 144, 145, 264, 331, 383, 439, 484, 526, 532, 597, 601, 602, 640, 711, 804, 812, 879], "reproduc": [54, 78, 105, 106], "necessari": [54, 132, 143, 202, 455, 527, 545, 597, 598, 599, 628, 661, 672, 757, 836, 873], "msa1": 54, "msa2": 54, "unnecessari": 54, "By": [54, 83, 94, 103, 107, 136, 138, 525, 526, 527, 601, 715, 716, 719, 801, 812, 839], "col1": 54, "43": [54, 90, 142, 811], "col2": 54, "col3": 54, "o": [54, 55, 59, 94, 135, 136, 137, 144, 145, 218, 220, 270, 279, 337, 342, 343, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 708, 709, 789, 810, 812, 872, 878], "file": [55, 59, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 160, 173, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 513, 514, 520, 527, 544, 561, 562, 567, 587, 588, 594, 628, 661, 672, 707, 708, 709, 723, 752, 789, 810, 836, 837, 872, 877], "kwarg": [55, 59, 66, 103, 107, 108, 111, 112, 159, 161, 173, 180, 181, 182, 184, 185, 186, 187, 190, 191, 218, 220, 270, 277, 278, 279, 337, 342, 389, 395, 445, 452, 453, 454, 489, 492, 493, 514, 520, 562, 567, 588, 594, 684, 708, 709, 789, 810, 838, 873], "instanc": [55, 59, 147, 161, 174, 176, 177, 178, 180, 185, 202, 217, 218, 220, 239, 270, 279, 309, 337, 342, 360, 389, 395, 414, 445, 454, 472, 489, 492, 495, 505, 514, 520, 522, 523, 532, 545, 547, 562, 567, 569, 571, 586, 588, 594, 599, 601, 602, 603, 617, 639, 650, 683, 694, 707, 708, 709, 725, 732, 748, 789, 810, 811, 818, 819, 822, 829, 877, 879], "registri": [55, 59, 136, 137, 144, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 708, 709, 789, 810, 873], "system": [55, 59, 86, 97, 146, 147, 202, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 708, 709, 724, 789, 810], "clustal": [55, 59, 114, 873], "fasta": [55, 59, 116, 137, 139, 144, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 873], "fastq": [55, 59, 117, 144, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 873], "phylip": [55, 59, 126, 136, 141, 811, 873, 877], "stockholm": [55, 59, 129], "filepath": [55, 59, 180, 181, 182, 185, 186, 187, 189, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 602, 708, 709, 789, 810], "url": [55, 59, 180, 181, 182, 185, 186, 187, 189, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 708, 709, 789, 810], "filehandl": [55, 59, 147, 159, 160, 161, 180, 181, 182, 185, 186, 187, 189, 190, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 708, 709, 789, 810], "etc": [55, 59, 80, 136, 137, 180, 181, 182, 185, 186, 187, 192, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 493, 514, 520, 562, 567, 588, 594, 708, 709, 716, 718, 732, 789, 810, 875], "someth": [55, 59, 147, 160, 180, 181, 182, 185, 186, 187, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 603, 708, 709, 789, 810, 879], "understood": [55, 59, 141, 180, 181, 182, 185, 186, 187, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 708, 709, 789, 810], "util": [55, 59, 146, 159, 161, 218, 220, 270, 279, 280, 288, 289, 292, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 708, 709, 789, 810, 872, 873], "close": [55, 59, 79, 136, 137, 141, 143, 145, 189, 190, 218, 220, 270, 279, 290, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 527, 562, 567, 588, 594, 628, 661, 672, 708, 709, 789, 810, 837], "respons": [55, 59, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 628, 661, 672, 696, 708, 709, 711, 718, 789, 810], "caller": [55, 59, 218, 220, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492, 514, 520, 562, 567, 588, 594, 628, 661, 672, 708, 709, 789, 810], "reader": [55, 131, 132, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 146, 147, 149, 160, 174, 179, 180, 181, 185, 186, 218, 270, 337, 389, 445, 489, 514, 562, 588, 708, 789], "attempt": [55, 136, 189, 218, 270, 337, 389, 445, 489, 514, 562, 588, 708, 752, 765, 789], "guess": [55, 90, 112, 136, 180, 185, 218, 270, 337, 389, 445, 489, 514, 562, 588, 708, 789, 814], "keyword": [55, 59, 66, 135, 138, 140, 160, 180, 181, 182, 185, 186, 187, 217, 218, 220, 264, 270, 277, 278, 279, 331, 337, 342, 383, 389, 395, 439, 445, 452, 453, 454, 484, 489, 492, 514, 520, 562, 567, 588, 594, 708, 709, 789, 810], "write": [55, 134, 135, 137, 139, 140, 141, 143, 145, 147, 161, 178, 179, 189, 218, 270, 337, 389, 445, 489, 514, 544, 562, 588, 628, 661, 672, 708, 746, 789, 817], "reassign": [56, 143, 599], "remain": [56, 136], "ccg": 56, "altern": [56, 146, 147, 273, 290, 339, 392, 449, 509, 524, 537, 543, 559, 584, 599, 601, 602, 605, 716, 721, 770, 796], "ascend": [57, 219], "place": [57, 141, 145, 290, 526, 695, 716, 719, 749, 774, 806, 816], "multiindex": [57, 591], "noth": [57, 189, 275, 341, 394, 451, 838], "descend": [57, 94, 219, 732, 762, 774, 782, 791, 798, 799, 802, 805, 877], "sort_index": 57, "passthrough": 57, "intern": [57, 138, 141, 542, 750, 752, 754, 760, 762, 765, 774, 783, 788, 794, 804, 806, 807, 873, 877], "identifi": [57, 103, 107, 108, 111, 131, 134, 136, 137, 138, 139, 140, 143, 145, 146, 217, 246, 367, 421, 544, 602, 721, 725, 873], "modifi": [57, 136, 138, 145, 179, 221, 343, 396, 455, 586, 684, 717, 796], "from_dict": [58, 597, 601, 606, 707, 723, 724], "regist": [59, 147, 148, 149, 159, 160, 161, 173, 179, 181, 184, 186, 220, 279, 342, 395, 454, 492, 520, 567, 594, 709, 810], "writer": [59, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 149, 176, 179, 182, 187, 189, 220, 279, 342, 395, 454, 492, 520, 567, 594, 709, 810], "penalize_terminal_gap": [60, 61, 62], "unalign": [60, 61, 62, 63, 64, 65, 66, 875], "substract": [60, 61, 62, 63, 64, 65, 714], "typic": [60, 61, 62, 63, 64, 65, 67, 136, 137, 144, 145, 192, 202, 716, 752], "similar": [60, 61, 62, 63, 64, 65, 104, 133, 135, 136, 137, 140, 143, 147, 455, 493, 597, 598, 599, 600, 601, 711, 716, 718, 724, 725, 875, 877], "lookup": [60, 61, 62, 63, 64, 65, 174, 175, 176, 497, 549, 573, 596, 599, 602, 749, 760, 764, 774, 775, 784, 788, 803, 838], "continu": [60, 61, 62, 696], "penal": [60, 61, 62], "even": [60, 61, 62, 68, 82, 88, 95, 99, 136, 141, 290, 597, 601, 725, 805], "irrelev": [60, 61, 62], "want": [60, 61, 62, 135, 138, 202, 721, 723, 724, 725, 756, 757, 873], "nearli": [60, 61, 62], "tupl": [60, 61, 62, 63, 64, 65, 66, 73, 77, 84, 90, 93, 111, 139, 160, 192, 213, 217, 277, 278, 452, 453, 493, 497, 545, 549, 569, 573, 771, 772, 803, 804], "input": [60, 61, 62, 63, 64, 65, 66, 78, 94, 103, 105, 106, 107, 146, 159, 161, 189, 190, 202, 214, 244, 271, 290, 291, 314, 338, 365, 390, 419, 446, 474, 490, 521, 527, 532, 542, 545, 598, 599, 695, 707, 710, 711, 713, 717, 726, 806, 811, 812, 872, 873, 875], "item": [60, 61, 62, 63, 64, 65, 66, 145, 248, 271, 318, 338, 369, 390, 423, 446, 455, 476, 490, 504, 519, 556, 566, 580, 593, 695, 726, 754, 796, 803, 804, 838, 839, 849, 879], "local_pairwise_align": [60, 61, 62, 64, 65], "local_pairwise_align_nucleotid": [60, 61, 62, 63, 65], "global_pairwise_align_protein": [60, 61, 63, 64, 65], "global_pairwise_align_nucelotid": [60, 62, 63, 64, 65], "algorithm": [60, 63, 138, 597, 598, 599, 601, 606, 607, 618, 629, 640, 651, 662, 673, 684, 710, 711, 718, 755, 812, 813, 872], "slightli": [60, 83, 601], "basic": [60, 80, 132, 133, 605, 697, 707], "origin": [60, 62, 63, 65, 70, 71, 74, 77, 78, 81, 82, 86, 87, 94, 95, 97, 98, 105, 106, 108, 134, 136, 141, 143, 144, 239, 309, 360, 414, 455, 472, 541, 597, 598, 599, 600, 601, 605, 710, 718, 726, 755, 811, 812, 877, 879], "valid": [60, 63, 78, 94, 103, 105, 106, 107, 108, 111, 136, 137, 141, 143, 221, 274, 292, 340, 343, 393, 396, 450, 491, 537, 543, 545, 568, 569, 584, 595, 872, 875, 879], "emboss": [60, 63], "needl": 60, "server": [60, 61, 62, 63, 64, 65, 146], "function": [60, 61, 62, 78, 79, 84, 85, 90, 93, 105, 106, 107, 108, 111, 136, 137, 144, 148, 149, 159, 160, 161, 174, 175, 176, 179, 183, 192, 202, 214, 221, 244, 280, 314, 343, 365, 396, 419, 474, 493, 509, 522, 525, 526, 527, 530, 531, 533, 534, 541, 559, 584, 598, 599, 600, 601, 602, 603, 606, 695, 711, 720, 723, 724, 725, 750, 754, 757, 762, 767, 791, 796, 804, 806, 807, 812, 813, 815, 816, 817, 818, 836, 838, 850, 851, 861, 862, 872], "amino": [60, 62, 65, 135, 136, 140, 221, 274, 280, 290, 340, 343, 393, 450, 491, 493, 505], "acid": [60, 62, 65, 135, 136, 137, 140, 143, 146, 221, 274, 280, 290, 292, 340, 343, 393, 396, 450, 455, 491, 493, 505], "sb": 60, "cd": [60, 135, 138, 290], "j": [60, 62, 63, 65, 78, 81, 82, 90, 94, 95, 105, 106, 131, 132, 133, 136, 137, 138, 145, 146, 343, 504, 505, 519, 524, 533, 534, 535, 536, 537, 541, 543, 556, 566, 580, 593, 599, 600, 601, 711, 762, 811], "mol": [60, 63, 132, 133, 135, 138], "biol": [60, 63, 78, 82, 94, 132, 133, 135, 138, 537, 543], "1970": [60, 70], "mar": [60, 63, 82], "48": [60, 87], "443": 60, "53": [60, 142, 755], "ebi": [60, 63, 135, 138, 192], "uk": [60, 63, 82, 135, 138, 192, 524], "tool": [60, 63, 132, 133, 136, 143, 146, 524, 707, 711], "psa": [60, 63], "emboss_needl": 60, "global_pairwise_align": [61, 62, 63, 64, 65], "deriv": [61, 62, 64, 65, 135, 261, 328, 380, 436, 455, 481, 533, 534, 541, 724, 812], "ncbi": [61, 62, 64, 65, 132, 133, 136, 138, 146, 277, 278, 280, 281, 288, 289, 290, 291, 452, 453, 770, 875], "blast": [61, 62, 64, 65, 136], "nlm": [61, 62, 64, 65, 132, 133, 136, 138, 146, 280, 288, 289], "nih": [61, 62, 64, 65, 132, 133, 136, 138, 144, 146, 280, 288, 289], "cgi": [61, 62, 64, 65, 280, 288, 289], "blosum": [62, 65, 343, 493, 505], "block": [62, 65, 108, 505, 837], "henikoff": [62, 65, 505], "proc": [62, 65], "natl": [62, 65], "acad": [62, 65], "sci": [62, 65, 133, 541], "nov": [62, 65, 135, 707], "1992": [62, 65, 69, 78, 94, 505, 544], "89": [62, 65, 138, 505], "22": [62, 65, 142, 146, 505, 527, 721, 875], "10915": [62, 65, 505], "10919": [62, 65, 505], "water": 63, "identif": 63, "molecular": [63, 605, 752, 812], "subsequ": [63, 134, 136, 223, 231, 236, 240, 259, 261, 294, 302, 307, 310, 327, 328, 345, 353, 358, 361, 379, 380, 398, 406, 411, 415, 434, 436, 455, 457, 465, 470, 473, 480, 481, 838, 875], "tf": 63, "1981": [63, 755, 811], "147": 63, "195": 63, "emboss_wat": 63, "sequence1": 66, "sequence2": 66, "deprec": [66, 67, 78, 92, 94, 105, 106, 111, 257, 269, 325, 336, 376, 388, 432, 444], "favor": 66, "1814": 66, "complet": [66, 84, 85, 137, 138, 141, 721, 814, 873], "meet": [66, 183, 217, 807], "acgtu": 67, "look": [67, 140, 142, 143, 147, 217, 271, 338, 390, 446, 452, 453, 490, 497, 527, 549, 573, 707, 723, 724, 725, 754, 861, 877, 879], "get": [67, 189, 190, 201, 202, 280, 289, 493, 544, 545, 569, 599, 695, 711, 759, 798], "substitutionmatrix": [67, 274, 340, 393, 450, 491], "1913": 67, "domin": [68, 70, 76, 87, 98, 99, 102], "interv": [68, 73, 77, 84, 135, 138, 139, 202, 203, 204, 205, 211, 213, 214, 215, 216, 217, 219, 221, 226, 238, 255, 276, 292, 297, 323, 343, 348, 374, 396, 401, 413, 430, 455, 460, 477, 532, 722], "ci": [68, 84, 532], "suffix": 68, "_ci": 68, "rare_threshold": 69, "coverag": [69, 77, 81, 85, 132, 133], "frac": [69, 70, 71, 72, 76, 77, 79, 80, 81, 82, 86, 87, 88, 89, 90, 95, 96, 99, 102, 525, 526, 530, 535, 536, 538, 539, 540, 541, 599, 718], "rare": [69, 725], "c_": 69, "f_1": [69, 72, 77, 81, 96], "gamma": 69, "2_": 69, "pool": 69, "coeffici": [69, 598, 599, 605, 697, 718, 721, 757], "variat": [69, 599, 711], "sum": [69, 71, 74, 78, 87, 88, 90, 94, 98, 214, 248, 318, 369, 423, 476, 526, 530, 531, 535, 725, 726, 747, 803, 837], "_": [69, 134, 136, 137, 141, 145, 214, 226, 297, 348, 401, 460, 544, 599], "f_i": 69, "n_": [69, 70], "threshold": [69, 815], "fewer": [69, 143, 724, 725], "doubl": [69, 70, 71, 72, 74, 76, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 102, 180, 185, 710, 716], "everi": [69, 146, 526, 538, 539, 540, 541, 542, 602, 753, 768, 774], "introduc": [69, 80, 134, 136, 524], "manual": [69, 73, 83, 88, 811], "zero": [69, 79, 111, 131, 192, 213, 248, 318, 369, 423, 476, 524, 527, 529, 532, 536, 537, 543, 545, 597, 598, 599, 600, 601, 602, 605, 710, 716, 719, 724, 726, 812, 879], "known": [69, 141, 180, 185, 541, 542, 711, 716, 875], "environ": [69, 105, 106, 524, 711], "did": [69, 136, 144, 180, 185, 190, 879], "chao": [69, 72, 94], "american": 69, "87": [69, 142], "210": 69, "217": 69, "ma": [69, 274, 340, 393, 450, 491], "yang": 69, "1993": [69, 597, 598], "rule": [69, 136, 143, 145, 811], "recaptur": 69, "debug": [69, 838, 849, 879], "unequ": [69, 281, 493], "failur": [69, 568, 595, 839, 879], "rate": [69, 493, 721], "biometrika": [69, 81], "80": [69, 136, 696, 724, 725, 752, 807, 879], "193": 69, "201": [69, 532], "viceroi": [69, 73], "eeb": [69, 73], "uconn": [69, 73], "edu": [69, 73, 134, 136, 141, 143, 811], "hwang": 69, "chen": [69, 94], "kuo": 69, "2000": [69, 725, 812], "statistica": [69, 80], "sinica": 69, "227": [69, 136], "246": [69, 102, 145], "berger": 70, "parker": 70, "fraction": [70, 523, 725, 756, 877], "total": [70, 71, 77, 78, 79, 81, 86, 87, 88, 89, 90, 102, 131, 132, 202, 248, 318, 369, 423, 476, 493, 545, 569, 598, 762], "plankton": 70, "foraminifera": 70, "sea": 70, "sediment": 70, "scienc": [70, 71, 78, 134, 136, 505, 711], "168": [70, 724], "3937": 70, "1345": 70, "1347": 70, "brillouin": 71, "h_b": 71, "ln": [71, 79, 86, 95, 525, 527, 530, 535, 541], "n_i": [71, 87, 88], "text": [71, 87, 88, 102, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 159, 160, 161, 189, 544, 628, 661, 672], "th": [71, 87, 88, 102], "1956": 71, "academ": 71, "press": 71, "york": 71, "bias_correct": [72, 73], "bia": [72, 73, 532], "correct": [72, 73, 80, 136, 527, 532, 788, 794, 873], "equat": [72, 73, 79, 90, 599], "uncorrect": [72, 73], "bias": [72, 73, 532], "chao1_ci": 72, "2f_2": 72, "f_2": [72, 77], "1984": [72, 221, 292, 343, 396, 455], "parametr": [72, 524, 527, 597, 600], "popul": [72, 79, 81, 101, 144, 145, 264, 331, 383, 439, 484, 524, 603, 721, 725], "scandinavian": [72, 527, 532], "265": 72, "270": 72, "zscore": 73, "96": [73, 139], "chao1": 73, "scalar": [73, 97, 274, 340, 393, 450, 491, 493, 497, 540, 544, 549, 573, 707], "95": [73, 77, 78, 84, 137, 142, 532, 752], "lower_bound": [73, 77, 84, 202], "upper_bound": [73, 77, 84, 202, 214], "emploi": 73, "varianc": [73, 537, 543, 598, 600, 601, 696, 712, 715, 719, 724], "presenc": [73, 94, 281, 290, 725], "absenc": [73, 725], "specif": [73, 78, 83, 103, 105, 106, 107, 108, 111, 147, 217, 455, 605, 617, 639, 640, 650, 683, 694, 724, 725, 796, 873, 878, 879], "simpson": [74, 99], "degre": [74, 94, 134, 532, 537, 543, 715, 722, 724], "concentr": [74, 725], "composit": [74, 78, 94, 189, 711], "p_i": [74, 76, 97, 98], "proport": [74, 76, 80, 81, 90, 94, 97, 98, 142, 251, 426, 522, 524, 525, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 543, 597, 599, 600, 606, 640, 684, 697, 710, 716, 718, 755], "probabl": [74, 84, 85, 96, 532, 606, 618, 695, 710, 721, 725, 732], "randomli": [74, 586, 597, 599, 600, 603, 695, 726, 757, 796], "select": [74, 94, 532, 601, 723, 724, 796], "sometim": [74, 136, 138, 711, 873], "distinguish": [74, 94], "reciproc": [74, 725], "discrep": 74, "denot": [74, 94, 98, 101, 102, 136, 527, 532, 597, 600, 601], "accord": [74, 78, 221, 343, 396, 715, 719], "mathemat": [74, 97, 105, 524, 752, 755, 811], "1949": [74, 98, 99], "natur": [74, 83, 98, 99], "163": [74, 98, 99], "4148": [74, 98, 99], "688": [74, 98, 99], "occurr": [75, 100, 240, 252, 253, 254, 257, 310, 320, 321, 322, 325, 361, 371, 372, 373, 376, 378, 415, 427, 428, 429, 432, 473], "ens_pi": 76, "ens_": 76, "pie": 76, "sum_": [76, 78, 80, 94, 97, 524, 526, 538, 539, 540, 599], "chase": 76, "knight": [76, 78, 105, 106, 707], "scale": [76, 598, 696, 710, 711, 712, 718], "driver": [76, 872], "biodivers": [76, 78, 94], "why": 76, "standardis": 76, "enough": [76, 136, 141, 725], "letter": [76, 78, 136, 138, 343], "volum": [76, 812], "issu": [76, 135, 136, 137, 160, 812, 873], "supplement": 76, "pg": 76, "17": [76, 78, 105, 106, 135, 142, 221, 396, 696, 724], "26": [76, 133, 141, 527, 600, 605, 707], "esti": 77, "good": [77, 81, 716], "pm": 77, "sqrt": [77, 87, 88, 89, 541, 718], "constant": [77, 524, 527, 581, 599, 723], "normal": [77, 106, 137, 138, 597, 601, 716, 717, 718, 721, 722, 724, 725, 754], "distribut": [77, 135, 524, 532, 603, 716, 721, 722, 724, 725], "2nf_2": 77, "hardcod": 77, "1983": 77, "law": 77, "nonparametr": [77, 524, 527, 536], "random": [77, 79, 90, 131, 532, 597, 601, 603, 695, 711, 721, 723, 724, 725, 757, 796], "ann": [77, 96], "905": 77, "912": 77, "otu_id": [78, 94, 105, 106], "sqcup": [78, 94], "minimum": [78, 94, 99, 146, 251, 261, 328, 380, 426, 436, 481, 527, 601, 695, 724, 725], "connect": [78, 80, 94, 141, 732, 781, 788], "lowest": [78, 94, 778, 780], "ancestor": [78, 94, 239, 309, 360, 414, 472, 747, 778, 780], "lca": [78, 94, 752, 780], "superset": [78, 94, 105, 106, 597, 601], "subset": [78, 94, 105, 106, 111, 131, 135, 598, 756, 762, 877], "elsewher": [78, 103, 105, 106, 107], "lead": [78, 103, 105, 106, 107, 136, 137, 140], "hard": [78, 103, 105, 106, 107], "bypass": [78, 103, 105, 106, 107], "certain": [78, 87, 103, 105, 106, 107, 221, 343, 396, 522, 807], "entail": [78, 103, 105, 106, 107], "backward": [78, 94, 105, 106], "compat": [78, 94, 105, 106, 146, 280], "futur": [78, 94, 105, 106, 136], "releas": [78, 94, 105, 106, 135, 146], "missingnodeerror": [78, 94, 103, 105, 106, 107, 765, 766, 768, 783, 796], "duplicatenodeerror": [78, 94, 103, 105, 106, 107, 760], "fail": [78, 79, 94, 103, 105, 106, 107, 216, 601, 721, 838, 839, 879], "exact": [78, 94, 103, 105, 106, 107, 192, 239, 309, 360, 414, 472, 601, 716, 873], "phydiv": 78, "span": [78, 94, 108, 136, 138, 141, 192, 217], "clarifi": 78, "ancestr": 78, "life": 78, "One": [78, 143, 147, 532, 581, 812], "choos": [78, 711, 721], "scope": [78, 879], "unroot": [78, 94, 105, 106, 141, 769, 793, 808, 809, 812], "sever": [78, 141, 143, 696, 721], "evolutionari": [78, 493, 505, 732, 812], "histori": [78, 725], "eh": 78, "fd": [78, 837], "pycog": [78, 105, 106, 811], "qiim": [78, 105, 106], "impos": [78, 105, 106], "few": [78, 105, 106, 108, 873, 877, 879], "had": [78, 105, 106, 597, 601, 725], "trifurc": [78, 105, 106, 141], "newick": [78, 105, 106, 124, 746, 752, 789, 810, 812, 873, 877], "convent": [78, 105, 106, 132, 135, 138], "silent": [78, 105, 106], "conserv": [78, 83, 84, 94, 134, 239, 309, 360, 414, 472, 527, 544], "evalu": [78, 94, 132, 133, 228, 299, 350, 403, 462, 544, 598, 695, 721, 754, 791, 794, 877, 879], "baker": 78, "2006": [78, 601, 812], "bioinformat": [78, 94, 137, 143, 752], "challeng": 78, "117693430600200007": 78, "nee": 78, "1997": [78, 145, 812], "extinct": 78, "loss": [78, 605], "278": 78, "5338": 78, "692": 78, "694": 78, "petchei": 78, "ol": 78, "gaston": 78, "kj": 78, "402": 78, "hamadi": [78, 105, 106], "lozupon": [78, 105, 106], "fast": [78, 105, 106, 606, 716], "facilit": [78, 105, 106, 108, 131, 569, 721, 760, 812], "throughput": [78, 105, 106, 136, 137, 532, 707, 724], "analys": [78, 105, 106, 597], "microbi": [78, 84, 85, 94, 105, 106, 527, 597, 598, 600, 601, 707], "pyrosequenc": [78, 105, 106], "phylochip": [78, 105, 106], "ism": [78, 105, 106], "2010": [78, 105, 106, 137], "u_count": [78, 105, 106], "u8": [78, 105, 106], "62": [78, 105, 106, 134, 137, 601, 875], "round": [78, 83, 90, 105, 106, 599, 721, 724, 725, 762], "fisher": 79, "solv": [79, 721], "runtimeerror": 79, "analyt": 79, "solut": 79, "obtain": [79, 228, 299, 350, 403, 455, 462, 504, 505, 519, 527, 544, 556, 566, 580, 591, 593, 597, 599, 601, 832, 833, 834], "minimize_scalar": 79, "determinist": [79, 597, 601], "inf": [79, 796], "corbet": 79, "william": 79, "1943": 79, "anim": 79, "pp": [79, 89, 96, 711], "58": [79, 142, 721], "rectangl": 80, "gini": [80, 98], "area": 80, "lorenz": 80, "curv": [80, 83, 90, 711, 721, 724, 725], "under": [80, 107, 136, 221, 343, 396, 455, 640, 724, 872], "simplifi": 80, "2b": 80, "entri": [80, 131, 135, 146, 695], "trapezoid": 80, "line": [80, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 189, 724, 750], "parallel": [80, 108], "opinion": 80, "though": [80, 136, 137, 143, 144, 527, 581, 597, 601, 812, 879], "desir": [80, 84, 132, 140, 716, 795, 879], "circumst": [80, 343, 724], "linear": [80, 135, 138, 697, 711], "segment": 80, "accur": [80, 84, 85], "fall": [80, 83, 94, 106, 695], "gradient": [80, 710, 711, 716, 718], "formula": [80, 601], "dx": [80, 541], "h_i": 80, "h_0": 80, "h_n": 80, "1912": 80, "variabl": [80, 131, 271, 338, 390, 446, 455, 490, 527, 598, 601, 696, 697, 707, 711, 716, 717, 718, 721, 723, 724, 838, 861, 879], "mutabl": [80, 455, 818, 875], "cuppini": 80, "bologna": 80, "156": 80, "page": [80, 527, 812, 877], "reprint": 80, "memori": [80, 134, 136, 137, 138, 143, 144, 145, 544, 602, 695, 716, 837, 873], "di": [80, 875], "metodologica": 80, "ed": 80, "pizetti": 80, "salvemini": 80, "rome": 80, "libreria": 80, "eredi": 80, "virgilio": 80, "veschi": 80, "1955": 80, "onc": [81, 136, 147, 805], "1953": 81, "237": [81, 102], "264": 81, "heip": [82, 88], "wiener": [82, 97], "logarithm": [82, 97, 527], "pielou_": 82, "1974": [82, 88], "ass": 82, "54": [82, 106], "555": 82, "557": 82, "lower_quantil": 83, "upper_quantil": 83, "kempton": 83, "taylor": 83, "slope": 83, "cumul": [83, 102, 134], "interquantil": 83, "lower": [83, 84, 136, 143, 192, 202, 527, 532, 584, 591, 599, 695, 725], "quartil": 83, "inward": 83, "bound": [83, 84, 138, 139, 147, 149, 192, 193, 201, 202, 205, 213, 214, 216, 217, 455, 527, 532, 722, 725], "sdr": [83, 88], "iv": [83, 88, 94], "onlin": [83, 88, 137], "magurran": [83, 89], "1998": [83, 696, 710, 711, 713, 714, 716, 718], "half": [83, 524], "uq": 83, "lq": 83, "justif": 83, "unclear": 83, "just": [83, 84, 85, 90, 147, 795, 873, 877, 879], "overlap": [83, 217, 262, 263, 329, 330, 381, 382, 437, 438, 482, 483, 504, 523, 532, 556, 580, 756], "quantil": [83, 532], "consider": [83, 94, 724], "off": [83, 96, 221, 343, 396, 524, 724, 755, 811, 815, 879], "leav": [83, 135, 273, 339, 392, 449], "chang": [83, 136, 201, 202, 290, 455, 505, 532, 597, 695, 754, 788, 879], "1976": 83, "model": [83, 84, 85, 90, 505, 524, 532, 544, 725], "262": 83, "818": 83, "820": 83, "pisc": 83, "com": [83, 132, 133, 134, 598, 837], "sdrhelp": 83, "ci_typ": 84, "ulcl": 84, "uncov": [84, 85], "predict": [84, 85, 145, 724], "ratio": [84, 95, 99, 524, 525, 526, 527, 530, 531, 533, 534, 537, 543, 725], "ulcu": 84, "fix": [84, 140, 143], "lladser_p": 84, "around": [84, 85, 108, 136, 143, 145, 493, 528, 599, 722, 877], "full": [84, 85, 134, 527, 768, 794, 836], "theorem": [84, 85], "iii": 84, "lladser": [84, 85, 105, 106], "gouet": [84, 85], "reeder": [84, 85], "extrapol": [84, 85, 721], "urn": [84, 85], "poisson": [84, 85], "2011": [84, 85, 94, 105, 106], "lladser_ci": 85, "too": [85, 716, 747], "low": [85, 716, 724], "log": [86, 524, 525, 526, 527, 530, 531, 532, 533, 534, 537, 543], "accumul": [86, 89, 747], "1958": 86, "36": [86, 96, 142, 537, 543, 721], "71": [86, 105, 142, 145], "mcintosh": [87, 88], "mcintosh_": 87, "1967": [87, 599], "concept": [87, 541], "1115": 87, "1126": 87, "mcintosh_d": 88, "wrong": 88, "engel": 88, "560": 88, "d_": [89, 99], "mn": 89, "squar": [89, 90, 107, 141, 493, 545, 569, 713], "2004": 89, "blackwel": 89, "76": [89, 94, 142], "77": [89, 601], "num_repeat": 90, "params_guess": 90, "micha": 90, "menten": 90, "fit": [90, 532, 695, 697, 718, 878], "rarefact": 90, "ns_": 90, "datapoint": 90, "subsampl": [90, 695, 721, 724, 725, 726, 757], "initi": [90, 136, 724, 779, 782, 785, 786, 787, 802, 805, 812, 849], "s_max": 90, "subsample_count": [90, 695], "controversi": 90, "ml": 90, "assumpt": [90, 141, 522, 527, 532, 765, 766, 814], "roughli": 90, "magnitud": [90, 532, 599, 601, 716, 813], "enzym": 90, "kinet": 90, "nonlinear": 90, "raaijmak": 90, "1987": [90, 812], "biometr": [90, 601], "793": 90, "803": 90, "due": [92, 141, 216, 536, 598, 601, 711, 724], "usag": [92, 600], "reli": [93, 221, 343, 396], "explicitli": [94, 143, 274, 340, 393, 450, 491, 696], "fulli": [94, 138, 873], "adopt": [94, 274, 340, 393, 450, 491], "author": [94, 138, 145, 455, 527], "upd": 94, "contrast": [94, 541], "rpd": 94, "advantag": [94, 569, 838], "framework": [94, 524], "rbwpd_": 94, "analog": 94, "pd_": 94, "multipli": 94, "bwpd_": 94, "delta": [94, 536, 715], "npd": 94, "min": [94, 99, 725], "lesser": 94, "side": [94, 599, 602, 605], "balanc": [94, 541], "adjust": [94, 532], "factor": [94, 105, 106, 597, 600, 605, 711, 725], "theta": [94, 527], "back": [94, 136, 139, 182, 187, 748, 877], "public": [94, 137, 707], "although": [94, 605, 724], "involv": [94, 525], "report": [94, 160, 532, 605, 718], "perspect": 94, "rpd_": 94, "upd_": 94, "pardi": 94, "goldman": 94, "2007": [94, 105, 106], "resourc": [94, 146, 189], "systemat": 94, "biologi": [94, 95, 99, 290, 605, 752, 765, 811, 812], "56": [94, 242, 312, 363, 417], "431": 94, "444": 94, "chiu": 94, "jost": 94, "2016": [94, 537, 543], "decomposit": [94, 108], "hill": 94, "141": [94, 755], "72": 94, "mccoi": 94, "matsen": 94, "state": [94, 134, 143, 189, 838, 839, 849, 861, 879], "robust": [94, 537, 543, 601, 605], "depth": [94, 696, 721, 724, 725, 805, 877], "peerj": 94, "e157": 94, "vellend": 94, "cornwel": 94, "magnuson": 94, "ford": 94, "mooer": 94, "\u00f8": 94, "frontier": 94, "assess": [94, 102, 597, 599, 600, 601, 605], "194": 94, "207": 94, "barker": 94, "quantit": [94, 105, 106, 710, 725], "prioriti": [94, 850, 851, 879], "achiev": [94, 875], "linnean": 94, "societi": 94, "165": 94, "bitting": 94, "charlson": 94, "hoffmann": 94, "lewi": 94, "wu": [94, 106], "li": 94, "2012": [94, 138, 146, 599], "environment": [94, 598, 696, 711, 716, 717], "covari": [94, 712], "2106": 94, "2113": 94, "pielou": [95, 99], "equit": [95, 99], "e_h": 95, "That": [95, 99, 141, 264, 331, 383, 439, 484], "actual": [95, 99, 147, 179, 599], "versu": [95, 99, 105, 106], "maximum": [95, 102, 136, 137, 527, 532, 598, 640, 695, 711, 715, 719, 724, 725, 757], "heip_": 95, "1966": [95, 99], "theoret": [95, 99], "131": [95, 99, 755], "unobserv": 96, "outcom": [96, 724], "1968": 96, "vol": 96, "256": [96, 721], "257": 96, "bit": [97, 132, 133], "log_2": 97, "propos": [97, 812], "1948": 97, "bell": 97, "technic": [97, 141], "379": 97, "423": 97, "impur": 98, "e_d": 99, "enspi": 99, "144": 99, "discret": 101, "entiti": [101, 192], "smaller": [101, 261, 328, 380, 436, 481, 602], "observed_featur": 101, "d_w": 102, "max_i": 102, "b_i": [102, 541], "sequenti": [102, 136, 137, 143, 527, 532, 541, 542, 707, 806], "smallest": [102, 143, 724, 725], "express": [102, 247, 275, 317, 341, 368, 394, 422, 451, 475, 532, 537, 543, 724, 875], "bracket": [102, 141], "uneven": 102, "plant": [102, 135, 541], "dissimilar": [104, 107, 140, 493, 494, 495, 497, 502, 503, 504, 506, 507, 509, 512, 513, 515, 518, 519, 537, 544, 545, 546, 547, 549, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 568, 569, 570, 571, 573, 578, 579, 580, 582, 583, 585, 587, 589, 592, 593, 596], "v_count": [105, 106], "qualit": [105, 106, 707], "deeper": [105, 106], "advis": [105, 106, 111], "appl": [105, 106], "microbiol": [105, 106], "8228": 105, "8235": 105, "2005": [105, 135], "kellei": [105, 106], "insight": [105, 106], "structur": [105, 106, 133, 138, 141, 146, 505, 545, 597, 598, 605, 794, 838, 872], "73": [105, 106], "1576": [105, 106], "1585": [105, 106], "stombaugh": [105, 106], "comparison": [105, 106, 527, 605, 723, 755, 815, 877], "169": [105, 106], "172": [105, 106], "biocor": [105, 106, 707], "uu": 105, "37": [105, 145], "quantiti": 106, "mathemt": 106, "pairwise_func": 107, "pairwis": [107, 108, 111, 509, 527, 537, 559, 584, 602, 605, 763, 801, 877], "doc": [107, 134, 135, 136, 143, 192, 515, 545, 563, 569, 581, 589, 811], "link": [107, 201, 598, 605, 732], "hollow": [107, 131, 545, 584, 586, 603], "sklearn": 107, "pairwise_dist": 107, "distancematrix": [107, 108, 111, 131, 140, 516, 521, 537, 545, 564, 597, 598, 599, 600, 601, 602, 603, 605, 707, 716, 801, 812], "itypeerror": 107, "reduce_f": 108, "map_f": 108, "resolv": [108, 111, 122, 605], "reduc": [108, 601, 695, 716], "partialdistancematrix": 108, "signatur": [108, 190], "_block_comput": 108, "ipyparallel": 108, "map_async": 108, "blocksiz": 108, "partial_beta_divers": 108, "process": [108, 136, 145, 216, 532, 718, 814, 839, 879], "motiv": 108, "earth": 108, "project": [108, 137, 525, 541, 597, 598, 599, 600, 601, 717], "dataset": [108, 131, 524, 532, 601, 696, 711, 716], "000": 108, "million": 108, "earthmicrobiom": 108, "id_pair": 111, "caution": 111, "unresolv": 111, "unstabl": 111, "warn": [112, 119, 137, 716, 754, 808, 813, 814, 872], "blast7": 113, "pars": [113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 136, 137, 138, 140, 147, 873], "embl": [115, 138, 146, 192, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492], "sniffer": [119, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 175, 180, 181, 185, 186, 873], "gff3": [120, 138, 218, 220, 270, 279, 337, 342, 489, 492], "genbank": [121, 135, 139, 146, 270, 279, 337, 342, 389, 395, 445, 454, 489, 492], "lsmat": [123, 514, 520, 562, 567, 588, 594], "written": [126, 134, 136, 137, 141, 143, 811, 873, 877], "qseq": [127, 132, 133, 270, 337, 389, 445, 489], "qual": [128, 137], "ambigu": [130, 181, 186], "unidentifi": 130, "encod": [131, 136, 137, 144, 147, 149, 189, 541, 696], "rapid": [131, 136, 774], "ye": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146], "dissimilaritymatrix": [131, 140, 493, 495, 497, 502, 504, 506, 507, 509, 513, 514, 516, 518, 519, 520, 537, 569, 571, 573, 578, 580, 582, 583, 587, 590, 592, 593, 603], "hdf5": 131, "datatyp": [131, 695, 726], "unicod": [131, 189], "diagon": [131, 584, 591], "dm": [131, 497, 504, 513, 516, 519, 544, 549, 556, 561, 564, 566, 573, 580, 587, 590, 591, 593, 597, 598, 601, 602, 707, 812], "current": [131, 132, 135, 136, 137, 138, 143, 145, 146, 202, 216, 278, 291, 453, 505, 599, 684, 710, 716, 754, 767, 776, 777, 782, 872], "float32": [131, 601], "human": [131, 136, 137, 140, 141, 142, 817], "readabl": [131, 136, 137, 140, 141, 142, 143, 189, 817], "especi": [131, 136, 605, 718], "hdfgroup": 131, "databas": [132, 133, 135, 138, 146, 192, 770], "simpl": [132, 133, 136, 137, 141, 145, 147, 173, 184, 524, 527, 532, 598, 605, 873, 877], "header": [132, 133, 134, 137, 138, 140, 142], "tab": [132, 133, 139, 140, 141, 142, 144, 146], "moac": 132, "gi": [132, 133, 138], "15800534": 132, "ref": [132, 749], "np_286546": 132, "161": 132, "3e": [132, 133, 721], "114": 132, "330": 132, "170768970": 132, "zp_02903423": 132, "99": [132, 133, 135, 142, 597, 601, 605], "9e": 132, "329": 132, "produc": [132, 133, 143, 144, 159, 261, 328, 380, 436, 481, 710, 718], "outfmt": [132, 133], "legaci": [132, 133, 136], "With": [132, 524, 536], "qseqid": [132, 133], "sseqid": [132, 133], "bitscor": [132, 133], "qstart": [132, 133], "sstart": [132, 133], "qgi": [132, 133], "qacc": [132, 133], "acces": 132, "qaccver": [132, 133], "qlen": [132, 133], "sallseqid": [132, 133], "sgi": [132, 133], "sallgi": [132, 133], "sacc": [132, 133], "saccver": [132, 133], "sallacc": [132, 133], "slen": [132, 133], "align": [132, 133, 136, 137, 192, 202, 455, 493, 872, 873, 875], "qend": [132, 133], "send": [132, 133], "part": [132, 136, 138, 141, 144, 521, 525, 541, 695, 782, 838, 877], "sseq": [132, 133], "raw": [132, 628, 661], "pident": [132, 133], "percent": [132, 875], "nident": [132, 133], "gapopen": [132, 133], "ppo": [132, 133], "percentag": [132, 524], "frame": [132, 133, 278, 280, 290, 291, 453, 532, 598, 770], "qframe": [132, 133], "sframe": [132, 133], "btop": [132, 133], "traceback": [132, 143, 290, 455, 599], "staxid": [132, 133], "taxonomi": [132, 141, 146, 280, 288, 289, 770, 771, 804], "sscinam": [132, 133], "scientif": [132, 569], "scomnam": [132, 133], "sblastnam": [132, 133], "sskingdom": [132, 133], "super": [132, 133], "kingdom": [132, 133, 146], "stitl": [132, 133], "sstrand": [132, 133], "strand": [132, 133, 138, 139, 145, 192, 276, 277, 278, 448], "salltitl": [132, 133], "qcov": [132, 133], "qcovhsp": [132, 133], "hsp": [132, 133], "miss": [132, 136, 145, 239, 309, 360, 414, 472, 524, 536, 598, 707, 723, 724, 729, 730, 879], "allow": [132, 136, 137, 141, 143, 144, 147, 159, 161, 189, 202, 221, 239, 248, 309, 318, 343, 360, 369, 396, 414, 423, 472, 476, 497, 504, 524, 549, 556, 573, 580, 597, 598, 600, 601, 602, 606, 716, 762, 804, 839, 879], "default_column": 132, "suppos": [132, 133, 135, 136, 137, 138, 141, 144, 145, 524, 721, 725], "tgi": 132, "t100": [132, 133], "t161": 132, "t0": [132, 133, 139, 142, 144, 544], "t1": [132, 133, 142, 144, 146, 544], "t3e": [132, 133], "t330": 132, "t99": 132, "t9e": 132, "t329": 132, "fh": [132, 133, 134, 136, 137, 138, 139, 143, 144, 145, 146, 147, 159, 160, 161], "df": [132, 133, 146, 516, 532, 564, 590, 597, 598, 601, 707, 722], "000000e": [132, 133], "altschul": [132, 133], "gish": [132, 133], "miller": [132, 133], "myer": [132, 133], "lipman": [132, 133, 136], "1990": [132, 133, 135], "215": [132, 133], "403": [132, 133], "410": [132, 133], "blastedbio": 132, "blogspot": 132, "csv": [132, 140, 873], "book": [132, 133, 136], "nbk279675": 132, "blastn": 133, "18": [133, 142, 145, 597, 721, 875], "1786181": 133, "gb": [133, 138], "ae000111": 133, "ecoli": 133, "hit": 133, "10596": 133, "ae000174": 133, "8e": 133, "5565": 133, "5671": 133, "6928": 133, "6821": 133, "ae000394": 133, "1e": [133, 141, 815], "5587": 133, "135": [133, 537, 543], "219": [133, 135, 598], "ae000425": 133, "6e": 133, "8552": 133, "8468": 133, "ae000171": 133, "2214": 133, "2130": 133, "minor": 133, "blastp": 133, "31": 133, "query1": 133, "subject2": 133, "sbjctframe": 133, "ver": 133, "record": [133, 135, 136, 137, 138, 139, 144], "subject1": 133, "other_vertebr": 133, "af178033": 133, "emorg": 133, "811": 133, "1566": 133, "af031394": 133, "63": [133, 142], "909": 133, "1542": [133, 752], "consist": [133, 136, 137, 139, 142, 143, 145, 146, 274, 340, 393, 450, 455, 491, 493, 724, 782, 802], "blast6": 133, "sbjct": 133, "tax": 133, "tae000111": 133, "t10596": 133, "tae000174": 133, "t8e": 133, "t5565": 133, "t5671": 133, "t6928": 133, "t6821": 133, "tae000171": 133, "t5587": 133, "t2214": 133, "t2130": 133, "tae000425": 133, "t6e": 133, "t8552": 133, "t8468": 133, "temorg": 133, "t811": 133, "t1566": 133, "af178032": 133, "t94": 133, "57": [133, 142, 711], "t44": 133, "t1217": 133, "af178031": 133, "82": [133, 134, 145], "t42": 133, "t1233": 133, "94": [133, 142], "nbk279682": 133, "plain": [134, 136, 137, 138, 141, 143, 144], "divid": [134, 541, 713, 715, 719], "60": [134, 135, 139, 606, 724], "long": [134, 136, 143, 246, 316, 367, 421, 525, 598, 684, 710], "below": [134, 136, 137, 141, 143, 145, 146, 280, 292, 455, 598, 599, 707, 724, 732], "properti": [134, 143, 146, 281, 287, 292, 493, 509, 559, 569, 584, 721, 752, 788, 818, 830, 832, 833, 834], "abc": [134, 226, 292, 297, 348, 401, 460], "gcaugcaucugcauacguacguacgcaugcauca": 134, "def": [134, 147, 159, 160, 161, 244, 292, 314, 365, 419, 474, 725, 879], "xyz": 134, "gucgauacauacguacgucguacguacgu": 134, "cgac": 134, "cgcgaugcaugcau": 134, "cgau": 134, "caugcaucguacguacgcaugac": 134, "code": [134, 136, 137, 138, 146, 217, 221, 274, 276, 277, 278, 280, 281, 287, 288, 289, 290, 291, 340, 343, 393, 396, 448, 450, 452, 453, 491, 605, 726, 755, 811, 813, 875], "clustal_f": 134, "gcaugcaucugcauacguacguacgcaugca": 134, "gucgauacauacguacgucgguacgu": 134, "cgugcaugcau": 134, "cauucguacguacgcaugac": 134, "gcaugcaucugcauacguacguacgcaugcagucgauacauacguacgucgguacgu": 134, "accgttgta": [134, 143], "gtagct": [134, 143], "gtcgaa": [134, 143], "gtacct": [134, 143], "agagttgaaggtatct": [134, 143], "getvalu": [134, 136, 137, 138, 139, 143, 145, 544], "sciencedirect": 134, "pii": 134, "0378111988903307": 134, "mit": 134, "meme_v4": 134, "clustalw": 134, "annot": [135, 138, 139, 202], "mark": [135, 138, 145, 879], "termin": [135, 277, 290, 452, 805], "comment": [135, 136, 138, 139, 140, 145, 146], "txt": [135, 146], "extens": 135, "seen": [135, 138, 725], "submit": [135, 136, 725], "ena": [135, 138], "assembl": 135, "flatfil": 135, "parent": [135, 139, 141, 146, 455, 541, 730, 732, 749, 752, 764, 767, 776, 784, 788, 797, 803, 806, 808, 809, 877], "metatdata": 135, "moment": [135, 599, 879], "track": 135, "1499": 135, "rn": [135, 145], "download": [135, 138, 146], "molecul": [135, 136, 138, 455, 493, 875], "thymin": [135, 138, 221, 276, 448], "uracil": [135, 138, 276, 396, 448], "embl_str": 135, "x56734": 135, "sv": 135, "mrna": 135, "std": [135, 715, 719, 724], "pln": [135, 146], "1859": 135, "bp": [135, 138], "xx": 135, "s46826": 135, "dt": 135, "sep": 135, "1991": 135, "29": [135, 137, 138], "85": [135, 142, 725, 807], "updat": [135, 136, 146, 202, 216, 455], "de": [135, 145], "trifolium": 135, "repen": 135, "cyanogen": 135, "glucosidas": 135, "kw": 135, "white": 135, "clover": 135, "oc": 135, "eukaryota": 135, "viridiplanta": 135, "streptophyta": 135, "embryophyta": 135, "tracheophyta": 135, "spermatophyta": 135, "magnoliophyta": 135, "eudicotyledon": 135, "gunnerida": 135, "pentapetala": 135, "rosid": 135, "fabid": 135, "fabal": 135, "fabacea": 135, "papilionoidea": 135, "trifoliea": 135, "rp": 135, "rx": 135, "1007": [135, 537, 543], "bf00039495": 135, "pubm": [135, 138, 455], "1907511": 135, "ra": [135, 145], "oxtobi": 135, "dunn": 135, "pancoro": 135, "hugh": 135, "rt": [135, 145], "linamaras": 135, "rl": [135, 145], "209": [135, 138, 599], "insdc": [135, 138, 192], "univers": [135, 136, 143, 149], "newcastl": 135, "upon": 135, "tyne": 135, "medic": 135, "school": 135, "ne2": 135, "4hh": 135, "dr": 135, "md5": [135, 837], "1e51ca3a5450c43524b9185c236cc5cc": 135, "qualifi": [135, 138], "mol_typ": [135, 138], "clone_lib": 135, "lambda": [135, 695, 721, 724, 725, 754, 767, 788, 791, 796, 807, 811, 812, 879], "gt10": 135, "clone": 135, "tre361": 135, "tissue_typ": 135, "db_xref": [135, 138], "3899": 135, "experiment": [135, 601], "evid": [135, 141], "1495": 135, "ec_numb": 135, "21": [135, 142, 527, 537, 543, 714, 725], "goa": 135, "p26204": 135, "interpro": 135, "ipr001360": 135, "ipr013781": 135, "ipr017853": 135, "ipr033132": 135, "uniprotkb": 135, "swiss": 135, "prot": 135, "protein_id": 135, "caa40058": 135, "translat": [135, 138, 141, 146, 189, 276, 278, 280, 291, 343, 448, 453, 875], "mdfivaifalfvissftitstnaveastlldignlsr": 135, "sfprgfifgagssayqfegavneggrgpsiwdtfthkypekirdgsnaditv": 135, "dqyhrykedvgimkdqnmdsyrfsiswprilpkgklsgginhegikyynnli": 135, "nellangiqpfvtlfhwdlpqvledeyggflnsgvindfrdytdlcfkefgd": 135, "rvrywstlnepwvfsnsgyalgtnapgrcsasnvakpgdsgtgpyivthnqi": 135, "lahaeavhvyktkyqayqkgkigitlvsnwlmplddnsipdikaaersldfq": 135, "fglfmeqlttgdysksmrrivknrlpkfskfesslvngsfdfiginyysssi": 135, "isnapshgnakpsystnpmtnisfekhgiplgpraasiwiyvypymfiqedf": 135, "eifcyilkinitilqfsitengmnefndatlpveeallntyridyyyrhlyi": 135, "irsairagsnvkgfyawsfldcnewfagftvrfglnfvd": 135, "609": 135, "314": 135, "355": [135, 606], "581": 135, "aaacaaacca": 135, "aatatggatt": 135, "ttattgtagc": 135, "catatttgct": 135, "ctgtttgtta": 135, "ttagctcatt": 135, "cacaattact": 135, "tccacaaatg": 135, "cagttgaagc": 135, "ttctactctt": 135, "cttgacatag": 135, "gtaacctgag": 135, "tcggagcagt": 135, "tttcctcgtg": 135, "gcttcatctt": 135, "tggtgctgga": 135, "tcttcagcat": 135, "accaatttga": 135, "aggtgcagta": 135, "aacgaaggcg": 135, "gtagaggacc": 135, "aagtatttgg": 135, "gataccttca": 135, "cccataaata": 135, "tccagaaaaa": 135, "ataagggatg": 135, "gaagcaatgc": 135, "agacatcacg": 135, "gttgaccaat": 135, "atcaccgcta": 135, "caaggaagat": 135, "gttgggatta": 135, "tgaaggatca": 135, "aaatatggat": 135, "tcgtatagat": 135, "tctcaatctc": 135, "ttggccaaga": 135, "atactcccaa": 135, "agggaaagtt": 135, "gagcggaggc": 135, "ataaatcacg": 135, "aaggaatcaa": 135, "atattacaac": 135, "aaccttatca": 135, "acgaactatt": 135, "ggctaacggt": 135, "atacaaccat": 135, "ttgtaactct": 135, "ttttcattgg": 135, "gatcttcccc": 135, "aagtcttaga": 135, "agatgagtat": 135, "ggtggtttct": 135, "taaactccgg": 135, "tgtaataaat": 135, "gattttcgag": 135, "actatacgga": 135, "tctttgcttc": 135, "aaggaatttg": 135, "gagatagagt": 135, "gaggtattgg": 135, "agtactctaa": 135, "atgagccatg": 135, "ggtgtttagc": 135, "aattctggat": 135, "atgcactagg": 135, "aacaaatgca": 135, "ccaggtcgat": 135, "gttcggcctc": 135, "caacgtggcc": 135, "aagcctggtg": 135, "attctggaac": 135, "aggaccttat": 135, "atagttacac": 135, "acaatcaaat": 135, "tcttgctcat": 135, "gcagaagctg": 135, "tacatgtgta": 135, "taagactaaa": 135, "taccaggcat": 135, "atcaaaaggg": 135, "aaagataggc": 135, "ataacgttgg": 135, "tatctaactg": 135, "gttaatgcca": 135, "cttgatgata": 135, "atagcatacc": 135, "agatataaag": 135, "gctgccgaga": 135, "gatcacttga": 135, "cttccaattt": 135, "ggattgttta": 135, "tggaacaatt": 135, "aacaacagga": 135, "gattattcta": 135, "agagcatgcg": 135, "gcgtatagtt": 135, "aaaaaccgat": 135, "tacctaagtt": 135, "ctcaaaattc": 135, "gaatcaagcc": 135, "tagtgaatgg": 135, "ttcatttgat": 135, "tttattggta": 135, "taaactatta": 135, "ctcttctagt": 135, "tatattagca": 135, "atgccccttc": 135, "acatggcaat": 135, "gccaaaccca": 135, "gttactcaac": 135, "aaatcctatg": 135, "accaatattt": 135, "catttgaaaa": 135, "acatgggata": 135, "cccttaggtc": 135, "caagggctgc": 135, "ttcaatttgg": 135, "atatatgttt": 135, "atccatatat": 135, "gtttatccaa": 135, "gaggacttcg": 135, "agatcttttg": 135, "ttacatatta": 135, "aaaataaata": 135, "taacaatcct": 135, "gcaattttca": 135, "atcactgaaa": 135, "atggtatgaa": 135, "tgaattcaac": 135, "gatgcaacac": 135, "ttccagtaga": 135, "agaagctctt": 135, "ttgaatactt": 135, "acagaattga": 135, "ttactattac": 135, "cgtcacttat": 135, "actacattcg": 135, "ttctgcaatc": 135, "agggctggct": 135, "caaatgtgaa": 135, "gggtttttac": 135, "gcatggtcat": 135, "ttttggactg": 135, "taatgaatgg": 135, "tttgcaggct": 135, "ttactgttcg": 135, "ttttggatta": 135, "aactttgtag": 135, "attagaaaga": 135, "tggattaaaa": 135, "aggtacccta": 135, "agctttctgc": 135, "ccaatggtac": 135, "aagaactttc": 135, "tcaaaagaaa": 135, "ctagctagta": 135, "ttattaaaag": 135, "tagattacag": 135, "tacatcgttt": 135, "gaagttgagt": 135, "tggtgcacct": 135, "aattaaataa": 135, "aagaggttac": 135, "tcttaacata": 135, "tttttaggcc": 135, "attcgttgtg": 135, "aagttgttag": 135, "gctgttattt": 135, "ctattatact": 135, "atgttgtagt": 135, "aataagtgca": 135, "ttgttgtacc": 135, "agaagctatg": 135, "atcataacta": 135, "taggttgatc": 135, "cttcatgtat": 135, "cagtttgatg": 135, "ttgagaatac": 135, "tttgaattaa": 135, "aagtcttttt": 135, "ttattttttt": 135, "aaaaaaaaaa": 135, "aaaaaaaaa": 135, "dna_seq": [135, 136, 138], "cross_refer": 135, "date": 135, "dbsourc": 135, "locu": [135, 138, 146], "1740": 135, "1800": 135, "rna_seq": [135, 138], "aauauggauu": 135, "uuauuguagc": 135, "cauauuugcu": 135, "cuguuuguua": 135, "uuagcucauu": 135, "cacaauuacu": 135, "uccacaaaug": 135, "caguugaagc": 135, "uucuacucuu": 135, "cuugacauag": 135, "guaaccugag": 135, "agaagcuaug": 135, "aucauaacua": 135, "uagguugauc": 135, "cuucauguau": 135, "caguuugaug": 135, "uugagaauac": 135, "uuugaauuaa": 135, "aagucuuuuu": 135, "uuauuuuuuu": 135, "trascrib": 135, "verifi": [135, 147, 180, 185], "transcrib": [135, 138, 277, 278, 448, 875], "soppos": 135, "deal": [135, 188, 524, 536, 716, 873], "embl_gen": 135, "ftp": [135, 146, 192], "pub": [135, 146, 192], "usrman": 135, "view": 135, "displai": [135, 248, 271, 280, 318, 338, 369, 390, 423, 446, 476, 490, 602, 697], "brows": 135, "easi": [136, 137], "db": 136, "149855": 136, "cgatgtcgatcgatcgatcgatcag": 136, "34989": 136, "catcgatcgatcgatgcatgcatgcatg": 136, "accompani": [136, 545, 814], "particuarli": 136, "instrument": 136, "phred": [136, 137], "nonneg": 136, "deflin": 136, "split": [136, 137, 143, 145], "blank": [136, 137, 141, 142, 143, 513, 561, 587], "whitespac": [136, 137, 140, 142, 145], "trail": [136, 137, 140], "semicolon": [136, 139], "resembl": 136, "request": [136, 504, 519, 556, 566, 580, 593, 762, 836, 873], "tracker": [136, 160], "pull": 136, "welcom": 136, "greater": [136, 202, 222, 293, 344, 397, 456, 532, 597, 599, 600, 601, 602, 605, 724, 725, 726], "immedi": [136, 143, 774], "repect": 136, "strictli": [136, 527, 532, 542, 753], "enforc": [136, 455], "itself": [136, 143, 146, 190, 192, 221, 280, 343, 396, 455, 493, 605, 697, 732, 875], "standard": [136, 137, 139, 141, 274, 277, 278, 280, 290, 291, 340, 393, 450, 452, 453, 491, 497, 524, 527, 549, 573, 598, 599, 712, 715, 718, 719, 873, 875], "remaind": 136, "iupac": [136, 137, 143, 144, 221, 251, 280, 290, 343, 396, 426, 455, 875], "lexicon": [136, 137, 143], "sciki": 136, "newlin": [136, 141, 143, 147, 149, 180, 181, 185, 186, 189], "additon": 136, "maintain": [136, 141, 147, 586, 710, 711, 721, 724], "path": [136, 137, 144, 189, 748, 836], "seq_num": [136, 137, 138, 139, 144], "50th": [136, 527], "id_whitespace_replac": [136, 137], "disk": [136, 545], "potenti": [136, 261, 328, 380, 436, 481, 695, 791, 813, 879], "description_newline_replac": [136, 137], "max_width": 136, "width": [136, 140, 143], "longer": [136, 143, 524, 725], "caveat": [136, 524], "never": [136, 145], "exce": [136, 143], "12345": [136, 455], "better": [136, 710, 711, 873], "runtim": [136, 221, 343, 396, 838, 879], "affect": [136, 141, 280, 281, 287, 455, 597, 601], "five": [136, 146, 513, 527, 561, 587, 812], "turkei": [136, 143], "aagctngggcatttcagggtgagcccgggcaatacagggtat": 136, "salmo": [136, 143], "gair": 136, "aagccttggcagtgcagggtgagccgtgg": 136, "ccgggcacggtat": 136, "sapien": 136, "accggttggccgttcagggtacaggttggccgttcagggtaa": 136, "seq4": 136, "chimp": [136, 143], "aaacccttgccg": 136, "ttacgcttaaac": 136, "cgaggccgggac": 136, "actcat": 136, "seq5": 136, "gorilla": [136, 143], "aaacccttgccggtacgcttaaaccattgccggtacgcttaa": 136, "copyright": [136, 143], "1986": [136, 141, 143, 711], "2008": [136, 143], "washington": [136, 141, 143, 811], "joseph": [136, 143, 877], "felsenstein": [136, 143, 877], "permiss": [136, 141, 143], "grant": [136, 143], "fee": [136, 143], "charg": [136, 143], "fl": 136, "presum": 136, "aagccttggcagtgcagggtgagccgtggccgggcacggtat": 136, "aaacccttgccgttacgcttaaaccgaggccgggacactcat": 136, "didn": [136, 879], "detect": [136, 138, 181, 186, 527, 599, 725], "infeas": 136, "stream": [136, 139, 873], "loop": [136, 808, 809], "aagctngggc": [136, 143], "atttcagggt": [136, 143], "gagcccgggc": [136, 143], "aatacagggt": [136, 143], "aagccttggc": 136, "agtgcagggt": [136, 143], "gagccgtggc": [136, 143], "cgggcacggt": [136, 143], "accggttggc": 136, "cgttcagggt": [136, 143], "acaggttggc": [136, 143], "aaacccttgc": [136, 143], "cgttacgctt": [136, 143], "aaaccgaggc": [136, 143], "cgggacactc": [136, 143], "cggtacgctt": [136, 143], "aaaccattgc": [136, 143], "fifth": 136, "api": [136, 183, 521], "standalon": 136, "cgatgtc": 136, "catcgtc": 136, "39": [136, 142, 541], "79": [136, 139, 142], "fasta_fl": 136, "qual_fl": 136, "uint8": [136, 137, 144, 221, 223, 240, 244, 259, 260, 265, 266, 267, 268, 274, 294, 310, 314, 327, 332, 333, 334, 335, 340, 343, 345, 361, 365, 379, 384, 385, 386, 387, 393, 396, 398, 415, 419, 434, 435, 440, 441, 442, 443, 450, 455, 457, 473, 474, 480, 485, 486, 487, 488, 491], "new_fasta_fh": 136, "new_qual_fh": 136, "dj": 136, "pearson": [136, 599, 602, 605, 757], "wr": [136, 605], "1985": [136, 221, 292, 343, 396, 455], "sensit": [136, 264, 331, 383, 439, 484], "4693": 136, "1435": 136, "41": [136, 142], "en": [136, 137, 145, 812], "wikipedia": [136, 137, 145, 812, 877], "wiki": [136, 137, 143, 145, 812], "fasta_format": 136, "blastcgihelp": 136, "shtml": 136, "broadinstitut": 136, "crd": 136, "php": 136, "madden": 136, "oct": [136, 138], "2003": [136, 524], "aug": 136, "mcentyr": 136, "ostel": 136, "editor": 136, "handbook": 136, "internet": [136, 146], "bethesda": 136, "md": 136, "nation": [136, 146, 505], "center": [136, 146, 528, 598, 710, 712, 716, 719], "biotechnologi": [136, 146], "chapter": [136, 717], "nbk21097": 136, "evolut": [136, 141, 143, 604, 605, 752, 811, 812], "genet": [136, 141, 143, 146, 277, 278, 280, 281, 287, 288, 289, 290, 291, 452, 453, 604, 811, 875], "invent": 137, "jim": 137, "mullikin": 137, "wellcom": 137, "trust": 137, "sanger": 137, "institut": 137, "formal": [137, 146, 524], "conceptu": [137, 600], "aacaccaaacttctccaccacgtgagctacaaaag": 137, "cabcacc": 137, "lb": 137, "ccyt": 137, "wf": [137, 879], "tatgtatatataacatatacatatatacatacata": 137, "kz": 137, "py": [137, 147], "yy": 137, "bt": 137, "aT": 137, "bbb": 137, "printabl": [137, 144], "ascii": [137, 144, 147, 274, 340, 393, 450, 491, 493, 750, 877], "decod": [137, 189], "excel": 137, "supplementari": [137, 527], "solexa": 137, "unfortun": [137, 724], "notabl": 137, "illumina": [137, 144], "tabl": [137, 138, 146, 277, 278, 280, 289, 290, 291, 452, 453, 527, 532, 696, 710, 711, 717, 718, 838, 875], "highlight": 137, "foundat": 137, "obf": 137, "biopython": 137, "bioperl": [137, 143], "offset": [137, 138], "126": 137, "93": 137, "illumina1": [137, 144], "later": [137, 723], "59": 137, "Not": [137, 221, 274, 340, 393, 450, 491, 601], "truncat": [137, 503, 555, 579, 706, 812, 879], "outsid": [137, 192, 216, 248, 318, 369, 423, 476], "phred_offset": [137, 144], "convers": [137, 189, 581], "explicit": 137, "whenev": [137, 716], "aacaccaaacttctccacc": 137, "acgtgagctacaaaag": 137, "reload": 137, "tatgtatata": 137, "taacatatac": 137, "atatatacat": 137, "acata": 137, "new_fh": 137, "ffffx": 137, "ab": [137, 292], "bbf": 137, "ka": 137, "bbx": 137, "jyzox": 137, "zxx": 137, "fff": 137, "fasffbf": 137, "sffaaa": 137, "peter": 137, "cock": 137, "christoph": 137, "naohisa": 137, "goto": 137, "michael": 137, "heuer": 137, "rice": 137, "nucl": 137, "1767": 137, "1771": 137, "publish": [137, 145], "decemb": 137, "2009": [137, 138, 605], "1093": [137, 812], "nar": 137, "gkp1137": 137, "oxfordjourn": 137, "fastq_format": 137, "flat": [138, 261, 328, 380, 436, 481], "gbk": 138, "renam": [138, 257, 269, 325, 336, 376, 388, 432, 444], "genpept": 138, "essenti": 138, "collabor": 138, "joint": 138, "effort": 138, "ddbj": 138, "organis": 138, "layout": 138, "webpag": 138, "interval_metadata": [138, 139, 192, 202, 214, 217, 221, 226, 228, 255, 292, 297, 299, 323, 343, 348, 350, 374, 396, 401, 403, 430, 455, 460, 462, 477], "sub": [138, 139, 192, 726], "keep": [138, 215, 228, 299, 350, 403, 462, 695, 794, 795], "vocabulari": [138, 139], "infer": [138, 180, 185, 836, 873], "whose": [138, 144, 512, 560, 585, 598, 599, 719], "stranded": 138, "codon_start": 138, "phase": [138, 139], "codon": [138, 146, 277, 280, 290, 291, 343, 452, 493], "dbxref": [138, 139], "cross": 138, "descriptor": [138, 717, 832, 833, 834], "explain": [138, 139, 142, 541, 606, 640, 684, 696, 697, 710, 716, 718], "67": [138, 142, 238, 245, 272, 315, 366, 413, 420, 447, 597, 601, 711, 721, 875], "66": [138, 142, 245, 315, 366, 420, 601, 875], "neighbor": [138, 797, 812], "68": [138, 606, 724], "insid": [138, 141], "remot": 138, "j00123": 138, "discard": [138, 599], "200": [138, 532], "kept": 138, "199": 138, "__locat": 138, "__": 138, "privat": [138, 750], "gb_str": 138, "3k1v_a": 138, "34": [138, 144, 752], "syn": 138, "chain": 138, "Of": 138, "mutant": 138, "preq1": 138, "260656459": 138, "synthet": 138, "artifici": [138, 696], "klein": 138, "edward": 138, "ferr": 138, "amar": 138, "cocryst": 138, "riboswitch": [138, 192], "nat": 138, "343": 138, "344": 138, "19234468": 138, "seqr": 138, "32630": 138, "misc_bind": 138, "bound_moieti": 138, "agaggttcta": 138, "gcacatccct": 138, "ctataaaaaa": 138, "ctaa": 138, "agagguucua": 138, "gcacaucccu": 138, "cuauaaaaaa": 138, "cuaa": 138, "sitemap": 138, "samplerecord": 138, "feature_t": 138, "webfeat": 138, "nuccor": 138, "delimit": [139, 140, 142, 144, 146, 544], "intervalmetadata": [139, 192, 201, 221, 292, 343, 396, 455], "seq_id": 139, "seqid": 139, "attr": [139, 775, 803], "tag": [139, 145, 245, 275, 315, 341, 366, 394, 420, 451, 541], "comma": [139, 140, 141], "predefin": [139, 244, 314, 365, 419, 474], "mean": [139, 141, 147, 189, 202, 217, 221, 250, 251, 425, 426, 504, 519, 524, 527, 530, 532, 541, 556, 566, 580, 593, 662, 684, 710, 714, 715, 716, 719, 721, 722, 724, 725, 873, 877], "derives_from": 139, "ontology_term": 139, "is_circular": 139, "And": [139, 221, 343, 524, 875], "parser": [139, 141], "skip_subregion": 139, "contigu": [139, 192, 261, 328, 380, 436, 481], "region": [139, 192, 202, 261, 328, 380, 436, 481], "exon": [139, 192, 264, 331, 383, 396, 439, 455, 484], "gff_str": 139, "gff": 139, "seq_1": 139, "tgene": 139, "t10": [139, 142], "t90": 139, "tid": 139, "gen1": 139, "texon": 139, "t30": [139, 144], "tparent": 139, "t50": 139, "seq_2": 139, "t80": 139, "t96": 139, "gen2": 139, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 139, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 139, "im": [139, 202, 214], "4604421736": 139, "fuzzi": [139, 192, 193, 201, 202, 213, 214, 455], "foo": [139, 202, 455, 837, 879], "gen": [139, 879], "4603377592": 139, "4603378712": 139, "atgcatgcat": 139, "gcatgcatgc": 139, "120": [139, 532], "ontologi": 139, "tsv": 140, "varieti": 140, "serial": [140, 544, 697, 873], "del": [140, 696], "anywher": [140, 141, 527], "easili": [140, 875], "program": [140, 141, 146], "spreadsheet": 140, "edg": [141, 605, 710, 750, 803], "minim": 141, "june": 141, "english": [141, 599], "subtre": [141, 146, 767, 877], "node_info": 141, "children": [141, 542, 732, 737, 741, 749, 753, 764, 766, 773, 777, 784, 788, 790, 797], "null": [141, 527, 532, 605, 721], "comment_char": 141, "all_char": 141, "safe_char": 141, "decim": [141, 816], "vice": [141, 605], "versa": [141, 605], "escap": 141, "nest": [141, 544, 599, 799, 877], "semi": 141, "colon": 141, "recal": 141, "alon": [141, 598], "imagin": 141, "parenthesi": 141, "insert": [141, 213, 753], "abil": 141, "child": [141, 202, 239, 309, 360, 414, 472, 541, 732, 753, 784, 788, 806, 877], "bifurc": [141, 542, 769], "alreadi": [141, 145, 147, 148, 159, 160, 161, 455, 545, 599], "who": [141, 725], "sibl": [141, 239, 309, 360, 414, 472], "multifurc": [141, 877], "notat": [141, 343], "recurs": [141, 750, 808, 809], "infinitum": 141, "clariti": 141, "estrang": 141, "omit": [141, 544, 770, 804, 806, 811, 873], "still": [141, 142, 189, 201, 527, 532, 536, 599, 601], "happen": [141, 261, 328, 380, 436, 481, 811, 879], "expon": 141, "disallow": [141, 145, 599], "stricter": [141, 815], "obviou": 141, "yet": [141, 146, 147], "underscor": [141, 143], "liter": 141, "regular": [141, 247, 275, 317, 341, 368, 394, 422, 451, 475, 875], "quot": 141, "surround": [141, 532], "a_1": 141, "_1": 141, "commonli": [141, 493, 601, 718, 877], "unpair": 141, "worri": 141, "properli": [141, 189], "un": 141, "permit": [141, 160], "isomorph": [141, 530, 531, 533, 534], "convert_underscor": 141, "unescap": 141, "extern": 141, "ascii_art": [141, 753, 770, 771, 812, 877], "complex": [141, 879], "b_b": 141, "d_d": 141, "becam": 141, "preserv": [141, 710, 711, 716, 794], "newick_doc": 141, "newicktre": 141, "variou": [142, 544, 697, 721, 876, 878], "rda": [142, 697, 710, 711], "cca": [142, 696, 697, 710, 718], "ordinationresult": [142, 601, 710, 711, 716, 717, 718, 816], "six": [142, 278, 280, 291, 453], "eigval": [142, 697], "biplot": [142, 710, 718], "constraint": [142, 697, 711, 718], "07": 142, "08": [142, 721, 724], "46": [142, 600, 725], "species0": 142, "species1": 142, "species2": 142, "01": [142, 721], "09": 142, "species3": 142, "03": [142, 601], "species4": 142, "species5": 142, "species6": 142, "species7": 142, "species8": 142, "70": 142, "69": 142, "site0": 142, "site1": [142, 696], "site2": [142, 696], "site3": [142, 696], "site4": [142, 696], "97": [142, 532], "06": 142, "61": [142, 601, 725], "site5": [142, 696], "04": [142, 721], "site6": [142, 696], "site7": [142, 696], "52": 142, "site8": [142, 696], "47": [142, 721], "site9": [142, 696], "74": 142, "32": [142, 600], "78": [142, 807], "55": [142, 242, 312, 363, 417, 601, 606, 721, 812], "02": [142, 146, 527], "declar": 142, "or_f": 142, "t4": 142, "t9": 142, "t2": [142, 144], "ord_r": 142, "joe": 143, "raxml": 143, "gairaagccttggc": 143, "sapiensaccggttggc": 143, "relax": 143, "interleav": [143, 145], "1x1": 143, "reach": 143, "11th": 143, "reserv": 143, "nucleic": [143, 146, 221, 292, 343, 396, 455], "older": 143, "chunk": 143, "2a": 143, "agagttgaag": 143, "gtatct": 143, "surpass": 143, "recent": [143, 290, 455, 599], "_except": 143, "phylipformaterror": 143, "shorter": 143, "post": [143, 721, 725], "phylogeni": [143, 604, 605], "phylo": 143, "obsolet": 143, "phylip_multiple_alignment_format": 143, "machin": 144, "lane": 144, "tile": 144, "casava": 144, "ommit": 144, "clear": 144, "exclud": [144, 541, 584, 591, 797], "acgtac": 144, "rubbbbrbcefgh": 144, "cgggcattgca": 144, "cgggcasdgca": 144, "acgta": 144, "aataaac": 144, "getaaafhwqaaf": 144, "catttagga": 144, "tgca": 144, "tjflkafnkkghvm": 144, "t3": 144, "t34": 144, "tacg": 144, "trubbbbrbcefgh": 144, "tcgggcattgca": 144, "tcgggcasdgca": 144, "t35": 144, "tacgta": 144, "tgetaaafhwqaaf": 144, "tcatttagga": 144, "ttjflkafnkkghvm": 144, "illumina_1": 144, "lane_numb": 144, "machine_nam": 144, "read_numb": 144, "run_numb": 144, "tile_numb": 144, "tac": 144, "aata": 144, "aac": 144, "biowulf": 144, "app": 144, "casava_ug_15011196b": 144, "pdf": 144, "upsk": 145, "se": 145, "infern": 145, "ss": 145, "pmid": [145, 599, 812], "9223489": 145, "rm": [145, 607, 673], "role": [145, 493, 724], "pseudoknot": 145, "turnip": 145, "yellow": 145, "mosaic": 145, "viru": 145, "synthesi": 145, "viral": 145, "polymeras": 145, "deiman": 145, "ba": 145, "kortlev": 145, "pleij": 145, "cw": 145, "virol": 145, "5990": 145, "5996": 145, "af035635": 145, "619": 145, "641": 145, "ugaguucucgaucucuaaaaucg": 145, "m24804": 145, "104": [145, 532], "ugaguucucuaucucuaaaaucg": 145, "j04373": 145, "6212": 145, "6234": 145, "uaaguucucgaucuuuaaaaucg": 145, "m24803": 145, "uaaguucucgaucucuaaaaucg": 145, "ss_con": 145, "aaa": [145, 261, 328, 380, 436, 481], "ggt": [145, 271, 338, 390, 446, 490], "accgttcg": 145, "pfam": 145, "rfam": 145, "whole": [145, 714, 722], "come": [145, 605, 799], "cb": [145, 723], "domain": [145, 343, 770, 804], "nh": 145, "tn": 145, "unlik": [145, 695], "nhx": 145, "rc": [145, 238, 413, 513, 561, 587, 707], "kestrel": 145, "gorlick": 145, "medlin": 145, "o83071": 145, "259": 145, "312": 145, "083071": 145, "o31698": 145, "ccchhhhhhhhhhhhhhh": 145, "eeeeeeee": 145, "eeeeeeeehhh": 145, "ccccchhhhhhhhhhhhh": 145, "eeeeeeeeeeh": 145, "final": [145, 605, 879], "cc": [145, 271, 280, 338, 390, 446, 490], "intracellular": 145, "mostli": 145, "192": 145, "88": [145, 601, 724], "139": 145, "bacillu": 145, "subtili": 145, "mtcraqliavprassla": 145, "aiacaqkm": 145, "rvsrv": 145, "sa": 145, "999887756453524252": 145, "55152525": 145, "36463": 145, "mqhvsapvfvfectrlai": 145, "vqhklrah": 145, "srava": 145, "mieadkvahvqvgnnleh": 145, "allvltkt": 145, "gytai": 145, "evmltdiprlhindpimk": 145, "gfgmvinn": 145, "gfv": 145, "o31699": 145, "AS": 145, "________________": 145, "____________________": 145, "IN": 145, "____________1______________2_________": 145, "eeeee": 145, "stockholm_format": 145, "sonnhamm": 145, "sbc": 145, "su": 145, "dump": [146, 877, 879], "classif": [146, 707], "pipe": 146, "host": [146, 605], "portal": 146, "daili": 146, "archiv": [146, 837], "month": 146, "pattern": [146, 247, 275, 317, 341, 368, 394, 422, 451, 475, 875, 879], "taxid": 146, "citat": 146, "hierarch": [146, 541], "tax_id": [146, 770], "superkingdom": 146, "prefix": 146, "inherit": [146, 292, 455], "div": 146, "flag": [146, 877], "mitochondri": [146, 277, 289, 452], "mgc": 146, "hidden": 146, "suppress": [146, 597, 601, 602], "lineag": [146, 724, 771, 804], "free": [146, 838, 879], "2018": 146, "new_taxdump": 146, "classic": 146, "plu": [146, 221, 343, 396], "extra": [146, 147, 597, 598, 600, 601, 662], "aforement": 146, "plastid": 146, "pgc": 146, "hydrogenosom": 146, "hgc": 146, "name_txt": 146, "cde": 146, "bct": 146, "vrt": 146, "mam": 146, "pri": 146, "abbrevi": [146, 697], "scheme": [146, 189, 513, 561, 587], "nodes_new": 146, "nodes_slim": 146, "parent_tax_id": [146, 770], "leftmost": 146, "till": 146, "crop": 146, "tno": 146, "t131567": 146, "tsuperkingdom": 146, "t335928": 146, "tgenu": 146, "131567": 146, "335928": 146, "federhen": 146, "d1": [146, 875], "d136": 146, "d143": 146, "schoch": 146, "ciufo": 146, "domrachev": 146, "hotton": 146, "kannan": 146, "khovanskaya": 146, "karsch": 146, "mizrachi": 146, "2020": 146, "comprehens": 146, "curat": 146, "kan": 146, "2022": 146, "entrez": 146, "direct": [146, 711, 732], "unix": 146, "command": [146, 290], "help": 146, "taxdump_readm": 146, "ncbiinsight": 146, "ioregistri": [147, 159, 161], "io_registri": 147, "focu": 147, "tutori": 147, "submodul": 147, "myformat": [147, 159, 160, 161], "create_format": [147, 159, 160, 161], "factori": [147, 159, 160, 161, 173, 184], "ideal": 147, "At": 147, "evaul": 147, "binari": [147, 149, 159, 160, 161, 189, 541, 542, 605, 710, 718, 805, 837], "readi": [147, 872], "decor": [147, 159, 160, 161, 202, 292, 754, 811, 818, 838, 850, 851, 861, 872], "onto": [147, 179, 717, 811], "_myformat_sniff": 147, "membership": 147, "futher": 147, "someskbioclass": [147, 873], "_myformat_to_some_skbio_class": 147, "kwarg1": 147, "filesentinel": [147, 159, 161], "auxilari": 147, "_some_skbio_class_to_myformat": 147, "obj": [147, 161, 182, 187, 829, 879], "whatev": 147, "receiv": [147, 149, 160, 248, 318, 369, 423, 476, 811], "further": [147, 724, 877], "fileformaterror": 147, "satisfi": [147, 217, 723, 861], "__init__": [147, 159, 161], "execut": [147, 618, 662, 839, 861, 879], "import_modul": 147, "boilerpl": 147, "busi": 147, "logic": [147, 838], "arg": [147, 173, 184, 277, 278, 343, 452, 453], "compress": [147, 189], "compresslevel": [147, 189], "auth": 147, "password": 147, "buffer": [147, 189, 695], "buffer_s": 147, "closefd": 147, "exclus": [147, 192, 202, 213, 240, 259, 310, 327, 361, 379, 415, 434, 473, 480, 527], "handler": [149, 180, 182, 185, 187, 189], "bufferedread": [149, 159, 160, 189], "bufferedwrit": [149, 161, 189], "textiobas": [149, 159, 160, 161, 189], "unabl": 149, "is_binary_format": 149, "monkey_patched_read": 149, "monkei": [149, 179], "patch": [149, 179], "monkey_patched_writ": 149, "sniffer_funct": 149, "cl": [159, 161, 174, 176, 177, 178, 292, 822], "monkey_patch": [159, 161], "transform": [159, 161, 261, 328, 380, 436, 481, 524, 525, 526, 530, 531, 533, 534, 537, 542, 710, 716, 718], "attach": [159, 161, 752], "overriden": [159, 160, 161], "duplicateregistrationerror": [159, 160, 161], "add_format": [159, 161], "myobject": [159, 161], "myformat_read": [159, 161], "readlin": [159, 189], "myformat2": [159, 160, 161], "thrown": [160, 772], "ask": 160, "myformat_sniff": 160, "default_write_format": 161, "format_object": 172, "regsistri": [173, 184], "format_nam": [174, 175, 176], "useabl": 179, "unrecognizedformaterror": [180, 181, 182, 185, 186, 187], "formatidentificationwarn": [180, 185], "agre": [180, 185], "member": [180, 185, 838, 861, 879], "argumentoverridewarn": [180, 185], "claim": [181, 186], "registr": 183, "auto": [189, 274, 340, 393, 450, 491], "bytesio": [189, 190, 837], "textiowrapp": 189, "bufferedrandom": 189, "tempfil": 189, "temporaryfil": 189, "namedtemporaryfil": 189, "writabl": 189, "unwrit": 189, "unread": 189, "byte": [189, 271, 338, 390, 446, 490], "gzip": 189, "bz2": 189, "decompress": 189, "transpar": 189, "legal": 189, "inclus": [189, 192, 202, 213, 240, 259, 310, 327, 361, 379, 415, 434, 473, 480, 598], "manag": [189, 190, 191], "closeabl": 189, "garbag": 189, "reflect": [189, 605, 788, 793], "flush": 189, "clean": [189, 749, 788], "bzh91ai": 190, "sy": 190, "x03": 190, "x89": 190, "x0c": 190, "xa6": 190, "x00": 190, "x01": 190, "xc1": 190, "x108": 190, "x9ah3m": 190, "x1c": 190, "xb7": 190, "x8b": 190, "xb9": 190, "x9c": 190, "xc4": 190, "x86": 190, "nb": 190, "nc": 190, "transcript": 192, "operon": 192, "accommod": 192, "gene_nam": 192, "product": [192, 535, 599, 872], "easier": [192, 493], "ft_current": 192, "hypothet": 192, "sai": [192, 202, 725], "gena": 192, "nt": 192, "shown": [192, 527, 710], "diagram": 192, "tggattctgc": 192, "0123456789": 192, "rememb": 192, "drop": [192, 202, 228, 299, 350, 403, 462, 602, 696, 711, 791, 811], "matter": [193, 214, 497, 549, 573], "setter": 201, "copy_from": 202, "storag": 202, "modif": [202, 605], "cover": [202, 505, 877], "coupl": 202, "unbound": [202, 216], "speed": [202, 716], "build": [202, 541], "defer": 202, "until": [202, 541, 795], "fetch": [202, 877], "_interval_tre": 202, "_rebuild_tre": 202, "stale": 202, "delet": [202, 775, 791, 819], "_is_stale_tre": 202, "sagb": [202, 214], "sagc": 202, "saga": [202, 214, 455], "intvl": 202, "num_interval_featur": 202, "interablemetadata": 214, "shift": 214, "im1": 214, "im2": 214, "negat": 215, "middl": 216, "live": 216, "reca": 217, "900": 217, "1000": [217, 695], "criteria": [217, 723, 807], "front": [219, 541], "uppercas": [221, 343, 396, 455], "turn": [221, 343, 396, 718, 815, 879], "behav": [221, 343, 396, 599], "compliant": [221, 343, 396], "canon": [221, 273, 292, 339, 343, 392, 396, 449, 493, 696, 711, 718, 872], "nucleobas": [221, 396], "adenin": [221, 396], "cytosin": [221, 396], "guanin": [221, 396], "purin": [221, 246, 316, 367, 421, 875], "pyrimidin": [221, 246, 421], "weak": 221, "keto": 221, "inosin": 221, "break": [221, 343, 396], "nomenclatur": [221, 292, 343, 396, 455], "incomplet": [221, 292, 343, 396, 455], "3021": [221, 292, 343, 396, 455], "3030": [221, 292, 343, 396, 455], "cornish": [221, 292, 343, 396, 455], "bowden": [221, 292, 343, 396, 455], "accgaat": 221, "86": [221, 396], "complement_map": [221, 238, 396, 413], "complement": [221, 260, 272, 290, 396, 435, 447, 875], "definite_char": [221, 292, 343, 396], "degenerate_char": [221, 292, 343, 396], "degenerate_map": [221, 245, 292, 315, 343, 366, 396, 420, 875], "gap_char": [221, 242, 292, 312, 343, 363, 396, 417], "noncanonical_char": [221, 292, 343, 396], "nondegenerate_char": [221, 292, 343, 396], "observed_char": [221, 248, 292, 318, 343, 369, 396, 423, 455, 476], "wildcard_char": [221, 274, 292, 340, 343, 393, 396, 450, 491], "wildcard": [221, 273, 274, 292, 339, 340, 343, 392, 393, 396, 449, 450, 491], "truth": [222, 293, 344, 397, 456], "truthi": [222, 293, 344, 397, 456], "put": [223, 294, 345, 398, 457], "ggucgugaagga": [223, 228, 294, 299, 345, 350, 398, 403, 455, 457, 462], "ggu": [223, 294, 345, 398, 457], "ccc": [223, 294, 345, 398, 457], "aagga": [228, 299, 350, 403, 462], "cgagc": [228, 299, 350, 403, 462], "ggucg": [228, 240, 299, 310, 350, 361, 403, 415, 462, 473], "guc": [228, 299, 350, 403, 462], "gguc": [231, 233, 236, 244, 265, 266, 267, 268, 302, 304, 307, 314, 332, 333, 334, 335, 353, 355, 358, 365, 384, 385, 386, 387, 406, 408, 411, 419, 440, 441, 442, 443, 465, 467, 470, 474, 485, 486, 487, 488], "ggucguaaagga": [237, 308, 359, 412, 471], "hello": [237, 308, 359, 412, 471], "nucleotidemixin": [238, 272, 413, 447], "reverse_compl": [238, 260, 413, 435, 875], "ttcatt": [238, 260, 272, 413, 435, 447], "aagtaa": [238, 413], "aatgaa": [238, 260, 272, 413, 435, 447], "intersect": [239, 309, 360, 414, 472, 733, 734, 758, 761], "ggaa": [239, 309, 360, 414, 472], "acgtggaa": [239, 309, 360, 414, 472], "coercion": [239, 309, 360, 414, 472], "gg": [240, 246, 310, 316, 361, 367, 415, 421, 473], "has_definit": [241, 243, 253, 257, 269, 311, 313, 321, 325, 336, 362, 364, 372, 376, 388, 416, 418, 428, 432, 444], "acwgn": [241, 243, 269, 311, 313, 336, 362, 364, 388, 416, 418, 444], "ggtc": [242, 312, 363, 417], "att": [242, 312, 363, 417], "ggtccattc": [242, 312, 363, 417], "has_degener": [243, 252, 257, 313, 320, 325, 364, 371, 376, 418, 427, 432], "ham": [244, 314, 365, 419, 474, 544, 875], "fraction_diff": [244, 314, 365, 419, 474], "fraction_sam": [244, 314, 365, 419, 474], "aguc": [244, 265, 267, 314, 332, 334, 365, 384, 386, 419, 440, 442, 474, 485, 487], "custom_metr": [244, 314, 365, 419, 474], "trg": [245, 275, 315, 341, 366, 394, 420, 451], "seq_gener": [245, 315, 366, 420], "tgg": [245, 275, 315, 341, 366, 394, 420, 451], "motif_typ": [246, 316, 367, 421], "min_length": [246, 261, 316, 328, 367, 380, 421, 436, 481, 875], "motif": [246, 316, 367, 421, 875], "acggggaggcggag": [246, 316, 367, 421], "motif_slic": [246, 316, 367, 421], "ggggagg": [246, 316, 367, 421], "ggag": [246, 316, 367, 421], "disrupt": [246, 316, 367, 421, 875], "regex": [247, 275, 317, 341, 368, 394, 422, 451, 475], "compil": [247, 275, 317, 341, 368, 394, 422, 451, 475, 726], "pre": [247, 275, 317, 341, 368, 394, 422, 451, 475, 493, 505, 510, 725], "aatataccggttataa": [247, 317, 368, 422, 475], "tata": [247, 317, 368, 422, 475], "tataa": [247, 317, 368, 422, 475], "char": [248, 275, 318, 341, 369, 394, 423, 451, 476], "kmer_frequ": [248, 318, 369, 423, 476], "iter_km": [248, 318, 369, 423, 476], "agaagacc": [248, 318, 369, 423, 476], "freq": [248, 263, 318, 330, 369, 382, 423, 438, 476, 483], "has_gap": [249, 319, 370, 424], "gc_frequenc": [250, 425], "degap": [250, 251, 425, 426, 875], "acgtacgt": [250, 425], "acttagtt": [250, 425], "asst": [250, 251, 425, 426], "rykmbdhvn": [250, 251, 425, 426], "stand": [251, 426, 599], "ie": [251, 426], "gc_content": [251, 426], "nwnnnnnn": [252, 257, 320, 325, 371, 376, 427, 432], "ancacwwgacgtt": [252, 253, 257, 320, 321, 325, 371, 372, 376, 427, 428, 432], "acac": [253, 262, 321, 329, 372, 381, 428, 437, 482], "gacgtt": [253, 254, 321, 322, 372, 373, 428, 429], "acacgacgtt": [254, 259, 262, 322, 327, 329, 373, 379, 381, 429, 434, 437, 480, 482], "cac": [254, 262, 322, 329, 373, 381, 429, 437, 482], "aatgtt": [260, 435], "invert": [261, 328, 380, 436, 481], "skip": [261, 328, 380, 436, 481, 597, 599, 600, 601, 605], "adjac": [261, 328, 380, 436, 481], "ungap": [261, 328, 380, 436, 481], "cccc": [261, 328, 380, 436, 481], "no_gap": [261, 328, 380, 436, 481], "ungapped_subsequ": [261, 328, 380, 436, 481], "find_motif": [261, 328, 380, 436, 481, 875], "find_with_regex": [261, 328, 380, 436, 481, 875], "acdfnasanftacgnpnrtesl": [261, 328, 380, 436, 481], "subseq": [261, 328, 380, 436, 455, 481], "glycosyl": [261, 328, 367, 380, 436, 481, 875], "nasanfta": [261, 328, 380, 436, 481], "nrte": [261, 328, 380, 436, 481], "kmer": [262, 263, 329, 330, 381, 382, 437, 438, 482, 483, 523], "gacg": [262, 329, 381, 437, 482], "aca": [262, 263, 329, 330, 381, 382, 437, 438, 482, 483], "cga": [262, 329, 381, 437, 482], "gac": [262, 329, 381, 437, 482], "cgt": [262, 329, 381, 437, 482], "gtt": [262, 329, 381, 437, 482], "acacatttatta": [263, 330, 382, 438, 483], "cat": [263, 330, 382, 438, 483, 723, 724], "tta": [263, 330, 382, 438, 483], "intron": [264, 331, 383, 396, 439, 484], "mismatch_frequ": [265, 332, 384, 440, 485, 875], "gauu": [266, 268, 333, 335, 385, 387, 441, 443, 486, 488], "match_frequ": [267, 334, 386, 442, 487, 875], "chosen": [271, 338, 390, 446, 490, 536, 598, 707, 718, 726], "ggtaccaacg": [271, 338, 390, 446, 490], "is_reverse_compl": [272, 447], "wild": [273, 339, 392, 449], "noncanon": [273, 339, 392, 449], "trim": [273, 290, 339, 392, 449], "mask_gap": [274, 340, 393, 450, 491], "return_cod": [274, 340, 393, 450, 491], "gap_charact": [274, 340, 393, 450, 491], "subsitut": [274, 340, 393, 450, 491], "absent": [274, 340, 393, 450, 491, 716], "meepqsdpsv": [274, 340, 393, 450, 491], "idx": [274, 340, 393, 450, 491], "uniq": [274, 340, 393, 450, 491], "dempqsv": [274, 340, 393, 450, 491], "ctcaaaagtc": [274, 340, 393, 450, 491], "tcga": [274, 340, 393, 450, 491], "sm": [274, 340, 393, 450, 491], "by_nam": [274, 340, 393, 450, 491, 493, 510], "nuc": [274, 340, 393, 450, 491, 493, 505], "gag": [274, 340, 393, 450, 491], "ctc": [274, 340, 393, 450, 491], "acgtn": [274, 340, 393, 450, 491], "gagrctc": [274, 340, 393, 450, 491], "within_captur": [275, 341, 394, 451], "account": [275, 341, 394, 451, 640, 710, 718, 725, 877], "captur": [275, 341, 394, 451], "tcg": [275, 341, 394, 451], "translate_six_fram": [276, 277, 290, 448, 452], "taacgtta": [276, 448], "uaacguua": [276, 448], "reverse_transcrib": 277, "atgccactttaa": [277, 278], "mpl": [277, 278, 280, 290, 291, 452, 453], "yeast": [277, 452], "mpt": [277, 452], "independ": [278, 291, 453, 605, 617, 618, 639, 650, 683, 694, 805], "reading_fram": [278, 280, 290, 291, 453], "rf": [278, 291, 453], "geneticcod": [278, 452, 453, 875], "chf": [278, 291, 453], "atl": [278, 291, 453], "lkwh": [278, 291, 453], "sg": [278, 291, 453], "kva": [278, 291, 453], "amino_acid": [280, 281, 287], "from_ncbi": [280, 281, 290, 291, 452, 453], "uuuuuuuuuuuuuuuuccccccccccccccccaaaaaaaaaaaaaaaagggggggggggggggg": 280, "uuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggg": 280, "ucagucagucagucagucagucagucagucagucagucagucagucagucagucagucagucag": 280, "wprintgc": [280, 288, 289], "ffllssssyi": 280, "wllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 280, "base1": 280, "base2": 280, "base3": 280, "candid": [280, 725], "divis": [280, 541, 719], "sr1": 280, "gracilibacteria": 280, "ccgwllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 280, "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm": 280, "augccacuuuaa": [280, 291, 452, 453], "named_gc": 281, "table_id": 289, "thraustochytrium": 289, "tmgc": 289, "prior": [290, 599, 602, 770, 839, 849, 879], "methionin": [290, 343], "fmet": 290, "aguauucugccacuguaagaa": 290, "sgc": [290, 291], "silpl": 290, "cug": 290, "fact": 290, "conform": 292, "abstract": 292, "grammar": [292, 455], "static": 292, "classproperti": 292, "customsequ": 292, "ababacac": 292, "xxxxxx": 292, "ala": 343, "cy": 343, "cystein": 343, "asp": 343, "aspart": 343, "glu": 343, "glutam": 343, "phe": 343, "phenylalanin": 343, "gly": 343, "hi": 343, "histidin": 343, "il": 343, "isoleucin": 343, "ly": 343, "lysin": 343, "leu": 343, "leucin": 343, "asn": 343, "asparagin": 343, "pro": 343, "prolin": 343, "gln": 343, "glutamin": 343, "arginin": 343, "ser": 343, "serin": 343, "thr": 343, "threonin": 343, "val": 343, "valin": 343, "trp": 343, "tyr": 343, "tyrosin": 343, "asx": 343, "glx": 343, "xle": 343, "xaa": 343, "ter": [343, 711], "sec": 343, "selenocystein": 343, "pyl": 343, "pyrrolysin": 343, "pam": [343, 493, 505], "unsupport": 343, "paw": [343, 378, 391], "stop_char": 343, "has_stop": 391, "accgaau": 396, "genetic_cod": [452, 453], "immut": [455, 875], "metdata": 455, "ncrna": 455, "ggucgugaag": 455, "ga": [455, 875], "alic": 455, "desc": 455, "retriev": [455, 569], "attributeerror": [455, 818], "destin": 455, "Be": 455, "illustr": [455, 597, 601], "hasn": [455, 726], "bob": 455, "propag": 455, "carol": 455, "chemic": [493, 725], "mutat": [493, 505, 732], "likelihood": 493, "homolog": 493, "chanc": [493, 605], "complic": [493, 873], "asymmetr": [493, 497, 549, 573], "former": 493, "mat": [493, 505, 508, 511, 525, 526, 528, 529, 530, 531, 533, 534, 536, 537, 801], "blosum62": [493, 505], "transpos": [493, 545, 569], "is_ascii": 493, "png": [493, 545, 569, 697], "figur": [493, 513, 545, 561, 569, 587, 707], "svg": [493, 545, 569, 697], "lookup_id": [494, 512, 546, 560, 570, 585], "extract": [497, 532, 544, 545, 549, 573, 597, 601, 711, 752, 875], "missingiderror": [497, 504, 507, 512, 519, 549, 556, 558, 560, 566, 573, 580, 583, 585, 593], "quick": [497, 549, 573, 581, 707, 710], "from_": [504, 556, 580], "to_": [504, 556, 580], "allow_overlap": [504, 556, 580], "stabl": [504, 519, 556, 566, 580, 593, 751], "get_nam": 505, "insensit": 505, "dnaful": 505, "pam30": 505, "pam70": 505, "pam250": 505, "blosum45": 505, "blosum50": 505, "blosum80": 505, "blosum90": 505, "dayhoff": 505, "schwartz": 505, "orcutt": 505, "1978": 505, "atla": 505, "345": 505, "352": 505, "proceed": 505, "academi": 505, "inconsist": 508, "heatmap": [513, 561, 587], "matplotlib": [513, 561, 587, 697, 707], "colormap": [513, 561, 587, 707], "colorbar": [513, 561, 587, 707], "red": [513, 561, 587], "binary_dm": [514, 520, 562, 567, 588, 594], "redund": [515, 545, 563, 569, 589, 696, 718], "gather": [519, 566, 593, 877], "from_iter": 521, "agggta": 522, "cgttta": 522, "atcggcgat": 523, "gcagatgtg": 523, "9230769230": 523, "omic": 524, "inher": [524, 605], "absolut": [524, 532, 599, 836], "x_": [524, 525, 541, 721, 725], "leq": 524, "compon": [524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 673, 697, 710, 716, 879], "aitchison": [524, 525, 526, 530, 531, 533, 534, 541], "geometri": [524, 526, 530, 531, 534], "euclidean": [524, 544, 598, 710, 716, 718], "perturb": [524, 539], "power": [524, 532, 873], "style": [524, 808, 809], "simul": [524, 721, 724, 725], "strategi": [524, 536, 812], "centr": [524, 530, 531, 714], "clr": [524, 531, 532, 542], "isometr": [524, 525, 526, 533, 534], "ilr": [524, 534, 542], "hypothesi": [524, 527, 532, 599, 602, 605, 721], "regress": [524, 599, 718, 725], "nonzero": [524, 529, 536, 538, 539, 540], "pseudocount": [524, 527, 532], "distort": 524, "pawlowski": [524, 537, 543], "glahn": [524, 537, 543], "egozcu": [524, 533, 534, 537, 541, 543], "tolosana": [524, 541], "delgado": [524, 541], "wilei": 524, "chichest": 524, "logratio": 524, "geologi": 524, "martin": [524, 536], "fernandez": [524, 536], "imput": [524, 536], "antibiot": [524, 723], "kill": 524, "harm": 524, "third": [524, 544, 774, 879], "denominator_idx": [525, 526], "simplex": [525, 533, 534, 541], "denominator_col": 525, "denomin": [525, 526, 541], "math": [525, 533], "amen": 525, "multivari": [525, 597, 598, 600, 601, 710, 711], "rightarrow": [525, 526, 530, 531, 533, 534], "mathbb": [525, 526, 527, 530, 531, 533, 534], "x_1": [525, 526, 530, 531, 538, 539, 540], "x_d": [525, 526, 530, 531, 538, 539, 540], "ldot": [525, 526, 530, 531, 533, 534, 538, 539, 540], "09861229": 525, "38629436": 525, "69314718": 525, "alr": 526, "exp": [526, 531, 537, 543], "y_1": [526, 538, 539], "y_2": 526, "y_": [526, 725], "closur": [526, 538, 539, 540], "x_i": [526, 530, 535, 538, 539, 540, 541], "tau": 527, "multiple_comparisons_correct": 527, "holm": [527, 532], "bonferroni": [527, 532], "significance_test": 527, "percentil": 527, "differenti": [527, 532], "treatment": [527, 532, 606, 724], "h_": 527, "0i": 527, "u_i": 527, "cutoff": [527, 811], "procedur": [527, 532, 601, 873], "boniferroni": 527, "f_onewai": 527, "25th": 527, "median": [527, 601], "75th": 527, "reject": [527, 532, 721], "multi": 527, "multiplicative_replac": 527, "ttest_ind": [527, 532], "wilcoxon": 527, "kruskal": [527, 724, 725], "top": [527, 770], "mann": 527, "whitnei": 527, "mannwhitneyu": 527, "ttest_rel": 527, "sign": [527, 816], "anova": [527, 600, 617, 618, 639, 650, 683, 694], "walli": [527, 724, 725], "friedman": 527, "friedmanchisquar": 527, "understand": 527, "unsolv": 527, "problem": [527, 716], "promis": 527, "001": [527, 721], "address": [527, 873], "1979": [527, 532], "mandal": 527, "et": [527, 532, 605], "al": [527, 532, 605], "novel": 527, "health": [527, 723, 724], "diseas": [527, 599], "bacteri": 527, "s3": [527, 532, 597, 601], "s4": [527, 532, 597, 601], "s5": [527, 532, 597, 601], "s6": [527, 532, 601], "b1": [527, 532], "b2": [527, 532], "b3": [527, 532], "b4": [527, 532], "b5": [527, 532], "b6": [527, 532], "b7": [527, 532], "placebo": [527, 532], "ancom_df": 527, "percentile_df": 527, "scenario": 527, "summar": 527, "conclud": 527, "tell": 527, "geometr": [528, 530, 532, 541, 601], "averag": [528, 532, 606, 607, 715, 719, 785, 811], "17445763": 528, "30216948": 528, "34891526": 528, "32495488": 528, "18761279": 528, "16247744": 528, "isometri": [530, 531, 533, 534], "limits_": [530, 531, 534, 535, 541], "foral": [530, 531], "g_m": 530, "prod": [530, 541], "79451346": 530, "30409883": 530, "5917809": 530, "10136628": 530, "21383822": 531, "26118259": 531, "28865141": 531, "23632778": 531, "draw": [532, 721, 723, 724, 725, 750, 793], "128": 532, "seed": [532, 597, 601, 695, 721, 724, 725], "dirichilet": 532, "mulitnomi": 532, "dirichlet": 532, "multinomi": 532, "compound": 532, "fold": 532, "posterior": [532, 732], "drawn": [532, 603, 721, 724, 725], "credibl": 532, "pvalu": 532, "fdr": 532, "mirror": 532, "approach": [532, 599, 724, 733, 734, 758, 761], "aldex2": 532, "conting": [532, 718], "freedom": [532, 537, 543, 715, 722], "log2": 532, "fc": 532, "qvalu": 532, "benjamini": 532, "hochberg": 532, "mininum": 532, "violat": 532, "reliabl": 532, "benefit": 532, "increas": [532, 544, 545, 602, 603, 605, 695, 721, 724], "regard": 532, "shrink": 532, "fernand": 532, "unifi": 532, "character": 532, "growth": [532, 724], "110": 532, "101": 532, "103": 532, "102": 532, "202": 532, "203": 532, "lfc_result": 532, "991987": 532, "884498": 532, "293463": 532, "020131": 532, "533729": 532, "594590": 532, "462339": 532, "007446": 532, "627677": 532, "048219": 532, "750792": 532, "068310": 532, "707221": 532, "467481": 532, "164998": 532, "065613": 532, "528243": 532, "036910": 532, "978387": 532, "182343": 532, "702656": 532, "556061": 532, "480232": 532, "601277": 532, "043888": 532, "basi": [533, 534, 541, 542], "langl": [533, 535], "e_1": [533, 534], "rangle_a": [533, 535], "e_": [533, 534], "orthonorm": [533, 534, 541, 542], "orthornorm": 533, "gram": [533, 534], "schmidt": [533, 534], "orthogon": [533, 534, 541], "spars": [533, 542, 710, 718], "7768362": 533, "68339802": 533, "11704769": 533, "bigoplu": 534, "odot": [534, 540], "e_i": 534, "34180297": 534, "29672718": 534, "22054469": 534, "14092516": 534, "aitchson": 535, "x_j": 535, "y_i": 535, "y_j": 535, "2107852473": 535, "1875": [536, 538], "375": 536, "0625": [536, 538], "4375": 536, "ddof": [537, 543, 715, 719], "cost": [537, 543], "lovel": [537, 543], "jj": [537, 543], "marguerat": [537, 543], "b\u00e4hler": [537, 543], "proportion": [537, 543], "e1004075": [537, 543], "pcbi": [537, 543], "1004075": [537, 543], "erb": [537, 543], "notredam": [537, 543], "biosci": [537, 543], "s12064": [537, 543], "015": [537, 543], "0220": [537, 543], "dism": 537, "redundant_form": 537, "oplu": 538, "y_d": [538, 539], "ominu": 539, "14285714": 539, "42857143": 539, "28571429": 539, "23059566": 540, "25737316": 540, "26488486": 540, "24714631": 540, "sbp": 541, "partit": [541, 542], "gsi": 541, "buildilrbas": 541, "ith": 541, "r_i": 541, "s_i": 541, "\u00e9": 541, "rozan": 541, "hernand": 541, "lapoint": 541, "h\u00e9bert": 541, "gentil": 541, "naess": 541, "marchand": 541, "lafond": 541, "matto": 541, "barlow": 541, "natal": 541, "ionom": 541, "revisit": 541, "nutrient": 541, "3389": 541, "fpl": 541, "00039": 541, "van": 541, "den": 541, "boogaart": 541, "gerald": 541, "raimon": 541, "bren": 541, "matevz": 541, "cran": [541, 597, 598, 599, 600, 601], "54772256": 541, "36514837": 541, "70710678": [541, 542], "81649658": [541, 542], "40824829": [541, 542], "coo_matrix": 542, "ilr_inv": 542, "toarrai": 542, "subpackag": [544, 872], "deseri": [544, 697], "gender": [544, 723, 724], "gain": [544, 716], "symmetri": [544, 545, 569, 584, 586], "ta": [544, 875], "tb": 544, "tc": 544, "dm_fh": 544, "3x3": [544, 599, 602, 603], "out_fh": 544, "dm_from_np": 544, "monoton": [544, 545, 602, 603], "divers": [544, 726, 872], "asarrai": 545, "squareform": [545, 591], "col": 545, "routin": 569, "condens": [569, 581, 586, 591], "condensed_form": [569, 586, 591], "hold": [569, 617, 639, 650, 683, 694, 695, 716, 723, 760, 861], "indiscern": 569, "triangl": [569, 584, 591, 599, 716], "planetmath": 569, "metricspac": 569, "sure": [584, 725, 879], "to_data_fram": 591, "missing_id": 596, "distance_matrix": [597, 598, 600, 601, 713, 716], "categor": [597, 600, 696, 707], "statis": [597, 600], "unpermut": [597, 599, 600], "permanova": [597, 601], "vegan": [597, 598, 599, 600, 601, 710, 711, 718], "clark": [597, 598], "kr": 597, "australian": 597, "117": 597, "143": 597, "4x4": [597, 598, 801], "group1": 597, "group2": 597, "group3": 597, "data_fram": 598, "ph": 598, "rho": 598, "spearmanr": [598, 599], "env": 598, "primer": 598, "deviat": [598, 715, 718, 719, 722], "ainsworth": 598, "marin": 598, "progress": 598, "92": 598, "205": 598, "htm": 598, "elev": 598, "400": 598, "530": 598, "450": 598, "810": 598, "var": 598, "771517": 598, "714286": 598, "triangular": 599, "portion": 599, "r_m": 599, "d_x": 599, "d_y": 599, "ij": 599, "extrem": 599, "reorder": [599, 602, 753, 757], "kendalltau": 599, "nonmatch": [599, 602], "corr_coeff": [599, 605], "pearsonr": [599, 605, 721], "pwmantel": 599, "legendr": [599, 696, 710, 711, 713, 714, 716, 717, 718], "3rd": [599, 673, 717, 817, 879], "edit": [599, 717], "elsevi": [599, 696, 710, 711, 718], "cancer": 599, "220": 599, "6018555": 599, "coeff": 599, "7559": 599, "moder": 599, "rerun": 599, "notifi": 599, "redefin": [599, 818], "henc": 599, "notion": 599, "pseudo": [600, 721], "adoni": 600, "anderson": [600, 601], "marti": [600, 601], "austral": 600, "2001": 600, "eigh": [601, 716], "number_of_dimens": [601, 716], "homogen": [601, 710, 718], "disperison": 601, "analogu": 601, "leven": 601, "dispers": 601, "centroid": 601, "spaitial": 601, "eigendecomposit": [601, 716], "eigenvector": [601, 711, 716], "eigenvalu": [601, 697, 710, 716, 718], "fsvd": [601, 716], "lose": [601, 716], "accuraci": [601, 716], "lost": [601, 716], "keyerror": 601, "permdisp2": 601, "betadisp": 601, "245": 601, "253": 601, "g1": 601, "g2": 601, "calucul": 601, "thought": 601, "yeild": 601, "s7": 601, "conjunct": 601, "collat": 602, "amount": [602, 732, 879], "consumpt": [602, 716], "oppos": [602, 879], "dm1": 602, "dm2": 602, "755929": 602, "142857": 602, "num_object": 603, "random_fn": 603, "rand": 603, "pertain": 604, "host_dist": 605, "par_dist": 605, "interact": 605, "hommola": 605, "parasit": 605, "cospeci": 605, "expand": [605, 804], "symbiont": 605, "somewhat": [605, 785], "weaker": 605, "incid": 605, "speciat": 605, "recapitul": 605, "co": 605, "cladogenesi": 605, "explanatori": [605, 696, 697, 711, 718], "poorli": [605, 716], "perm_stat": 605, "je": 605, "qiu": 605, "gilk": 605, "1457": 605, "1468": 605, "hdist": 605, "3f": 605, "832": 605, "fairli": 605, "inde": 605, "mainli": 606, "volatil": 606, "averagegradientanova": 606, "coord_data": 606, "354": 606, "2761": 606, "0341": 606, "0633": 606, "1004": 606, "2364": 606, "2186": 606, "0301": 606, "0225": 606, "356": 606, "2208": 606, "0874": 606, "3519": 606, "0031": 606, "607": 606, "1055": 606, "4140": 606, "116": 606, "634": 606, "3716": 606, "1154": 606, "0721": 606, "0898": 606, "coord": [606, 607, 629, 640, 673, 684], "orient": [606, 707, 723, 793, 873], "metadata_map": [606, 607, 629, 640, 673, 684], "65": 606, "prop_expl": [606, 607, 629, 640, 673, 684], "6216": 606, "7715": 606, "1215": 606, "6913": 606, "8304": 606, "trajectori": [606, 607, 617, 618, 628, 629, 639, 640, 650, 651, 661, 662, 672, 673, 683, 684, 694], "av": 606, "trajectory_categori": [606, 607, 629, 640, 673], "sort_categori": [606, 607, 629, 640, 673], "trajectory_result": 606, "get_trajectori": 606, "avg": 606, "0118478282382": 606, "52199973": 606, "29597001": 606, "20309816": 606, "007022633956606": 606, "ax": [607, 629, 640, 673, 696, 707, 710, 711], "norm": [607, 629, 673, 684], "gradientanova": [607, 629, 673, 684], "gradientanovaresult": [617, 639, 650, 683, 694], "groupresult": 618, "out_f": [628, 661, 672], "raw_f": [628, 661, 672], "categoryresult": 651, "2nd": [673, 817], "window_s": 684, "window": 684, "buf_siz": 695, "bin_f": 695, "bin": 695, "unsign": [695, 783], "resid": 695, "prng": 695, "wherea": 695, "decreas": 695, "overhead": 695, "demultiplex": 695, "123": 695, "samplea": 695, "aattgg": 695, "sampleb": 695, "atatatat": 695, "samplec": 695, "atggcc": 695, "atggct": 695, "atggcg": 695, "atggca": 695, "bin_": 695, "fish": 696, "transect": 696, "substrate_cor": 696, "substrate_sand": 696, "substrate_oth": 696, "site10": 696, "specie1": 696, "specie2": 696, "specie3": 696, "specie4": 696, "specie5": 696, "specie6": 696, "specie7": 696, "specie8": 696, "specie9": 696, "substrat": 696, "hot": 696, "perfect": [696, 711], "collinear": [696, 711], "ordination_result": 696, "proportion_explain": [696, 697], "cca1": 696, "466911": 696, "cca2": 696, "238327": 696, "cca3": 696, "100548": 696, "cca4": 696, "104937": 696, "cca5": 696, "044805": 696, "cca6": 696, "029747": 696, "cca7": 696, "012631": 696, "cca8": 696, "001562": 696, "cca9": 696, "000532": 696, "amsterdam": [696, 710, 711, 718], "short_method_nam": [697, 816], "long_method_nam": [697, 816], "biplot_scor": [697, 816], "sample_constraint": 697, "scatterplot": [697, 707], "ipython": 697, "notebook": 697, "constrain": [697, 711], "legend": 707, "evenli": 707, "set1": 707, "grei": 707, "axes3d": 707, "scatter": 707, "jupyt": 707, "lab": [707, 724], "emperor": 707, "colormaps_refer": 707, "vazquez": 707, "baeza": 707, "pirrung": 707, "gonzalez": 707, "gigasci": 707, "github": 707, "21712454": 707, "5007512": 707, "91769271": 707, "45995501": 707, "80332382": 707, "65463348": 707, "pcoa_result": 707, "chi": [710, 711], "pca": [710, 716, 718], "lot": 710, "steep": 710, "kind": 710, "explan": [710, 711], "ecologist": 710, "456": 710, "far": 710, "exhibit": 710, "multimod": 710, "notimplementederror": [710, 711], "suit": 711, "nich": 711, "unimod": [711, 716], "habitat": 711, "unconstrain": 711, "deem": 711, "ones": [711, 724], "shouldn": 711, "confus": 711, "ccora": 711, "sens": [711, 725, 804, 812], "cajo": 711, "braak": 711, "1167": 711, "1179": 711, "piet": 711, "verdonschot": 711, "aquat": 711, "1995": 711, "289": 711, "columnwis": 712, "elementwis": 713, "eq": [713, 714], "e_matrix": 714, "with_mean": [715, 719], "with_std": [715, 719], "flatten": 715, "likelyhood": [715, 719], "inplac": [716, 796], "euclidian": 716, "On": 716, "semimetr": 716, "decid": [716, 879], "heterogen": 717, "physic": [717, 725], "scale_i": 718, "Its": 718, "geq": 718, "focus": 718, "approxim": [718, 721], "stimat": 719, "wherev": 719, "m_shape": 720, "tol": 720, "linalg": 720, "matrix_rank": 720, "rational": 720, "toler": [720, 815], "precomput": 720, "svd": 720, "hoc": 721, "principl": 721, "mont": 721, "carlo": 721, "k_": 721, "mu": 721, "mu_": 721, "neq": 721, "approx": 721, "commit": 721, "ii": 721, "repeatedli": 721, "underpow": 721, "statsmodel": 721, "ind": [721, 725], "dep": 721, "randint": 721, "randn": [721, 724, 725], "617": 721, "533": 721, "788": 721, "602": 721, "229": 721, "779": 721, "838": 721, "032": 721, "157": 721, "051": 721, "601": 721, "664": 721, "783": 721, "646e": 721, "subsample_pow": 721, "draw_mod": [721, 725], "critic": [721, 722, 724, 725, 752], "pwr_100": 721, "counts_100": 721, "max_count": [721, 724, 725], "min_count": [721, 724, 725], "counts_interv": [721, 724, 725], "alpha_pwr": [721, 724, 725], "num_it": [721, 724, 725], "pwr_010": 721, "counts_010": 721, "pwr_001": 721, "counts_001": 721, "484": 721, "844": 721, "932": 721, "984": 721, "044": 721, "224": 721, "572": 721, "836": 721, "928": 721, "996": [721, 725], "016": 721, "108": 721, "332": 721, "848": 721, "956": 721, "vec": 722, "meta": [723, 724], "control_cat": [723, 724], "strict_match": [723, 724], "sex": [723, 724], "educ": [723, 872], "diet": 723, "exercis": 723, "statu": [723, 724], "healthi": [723, 724, 725], "undefin": [723, 724, 757], "hous": 723, "abx": 723, "bb": 723, "hstack": [723, 724], "500": [724, 725], "num_run": [724, 725], "sample_count": [724, 725], "cytokin": 724, "transloc": 724, "myeloid": 724, "cell": 724, "cultur": 724, "macrophag": 724, "bone": 724, "marrow": 724, "phagocyt": 724, "periton": 724, "media": 724, "acquir": 724, "compani": 724, "labor": 724, "intens": 724, "assai": 724, "preliminari": 724, "cell_lin": 724, "binomi": [724, 725], "incub": 724, "untreat": 724, "treatment_stat": 724, "groupbi": 724, "00193863362662502": 724, "seem": 724, "receptor": 724, "temperatur": 724, "co2": 724, "idea": 724, "encourag": 724, "pwr": 724, "cnt": 724, "528": 724, "088": 724, "127": 724, "adequ": 724, "sublist": 725, "bacteria": [725, 770, 771, 804], "gardnerella": 725, "vaginali": 725, "vagin": 725, "menopaus": 725, "woman": 725, "experienc": 725, "urinari": 725, "tract": 725, "infect": 725, "uti": 725, "women": 725, "enrol": 725, "eight": 725, "week": 725, "particip": 725, "fecal": 725, "clinic": 725, "symptom": 725, "endpoint": [725, 801], "premenopaus": 725, "postmenopaus": 725, "pcr": 725, "pre_rat": 725, "pos_rat": 725, "chisquar": 725, "003": 725, "try": [725, 726], "risk": 725, "reproduct": 725, "bmi": 725, "tobacco": 725, "subsample_paired_pow": 725, "linkag": [725, 769], "pwr_est": 725, "nanmean": 725, "056": 725, "074": 725, "226": 725, "806": 725, "952": 725, "stool": 725, "secondari": 725, "met_po": 725, "2500": 725, "met_neg": 725, "metabolite_test": 725, "005": 725, "go": [725, 877, 879], "twice": 725, "pwr_est2": 725, "counts2": 725, "272": 725, "426": 725, "646": 725, "824": 725, "efficiencywarn": 726, "acceler": 726, "isubsampl": 726, "frequent": [732, 754], "grand": 732, "ellaps": 732, "bootstrap": 732, "assur": [733, 734, 758, 761], "unrooted_deepcopi": [733, 734, 758, 761, 793, 794, 808], "unrooted_copi": [733, 734, 758, 761, 794, 809], "tree_copi": [733, 734, 758, 761], "tree_nod": [733, 734, 758, 761], "travers": [733, 734, 754, 758, 761, 765, 768, 779, 782, 785, 786, 787, 802, 808, 809, 877], "tree_copy_nod": [733, 734, 758, 761], "deleg": 737, "noparenterror": 747, "nolengtherror": [747, 763, 772], "lack": 747, "toward": 748, "cach": [749, 754, 760, 764, 765, 766, 768, 775, 784, 788], "child1": [749, 764], "child2": [749, 764], "show_intern": 750, "compact": 750, "topolog": 751, "incom": 752, "species_a": 752, "successfulli": 752, "strip": [752, 756, 757], "czech": 752, "luca": 752, "jaim": 752, "huerta": 752, "cepa": 752, "alexandro": 752, "stamataki": 752, "review": 752, "viewer": 752, "toolkit": 752, "2017": 752, "1535": 752, "speciesa": 752, "insert_length": 753, "intermedi": 753, "prune": [753, 795, 806, 807], "collaps": 753, "func": [754, 767, 791, 796, 807, 818, 851, 862], "cache_attrnam": 754, "cache_typ": 754, "frozenset": [754, 798, 799], "particularli": 754, "topologi": [754, 788, 877], "invalidate_cach": [754, 760], "is_tip": [754, 773, 776, 877], "tip_nam": 754, "include_self": [754, 779, 782, 785, 786, 787, 802, 805, 877], "robinson": 755, "fould": 755, "compare_subset": [755, 757, 798, 799, 877], "compare_tip_dist": [755, 756, 763, 772, 801, 877], "julia": 755, "goodrich": 755, "bioscienc": 755, "tree1": [755, 756, 757, 877], "tree2": [755, 756, 757, 877], "exclude_absent_taxa": 756, "compare_rfd": [756, 757], "dist_f": 757, "distance_from_r": 757, "shuffle_f": [757, 796], "shuffl": 757, "mtrand": [757, 796], "randomst": [757, 796], "m1": 757, "m2": 757, "distance_from_r_squar": 757, "dist": [757, 772], "9f": 757, "000133446": 757, "conflict": 760, "cache_attr": [760, 775], "tip_subset": 762, "replic": 762, "cogent": 762, "totaldescendingbranch": 762, "postord": [762, 765, 779, 782, 786, 787, 802, 805, 877], "tr": 762, "tdbl": 762, "sdbl": 762, "tip_tip_dist": [763, 772], "accumulate_to_ancestor": 763, "get_max_dist": 763, "tip_a": [763, 792], "tip_d": 763, "find_al": [765, 767, 768], "find_by_id": [765, 766, 767], "find_by_func": [765, 766, 768], "node_id": [768, 774, 803], "linkage_matrix": 769, "id_list": 769, "hierarchi": [769, 770, 877], "from_taxonomi": [770, 804], "taxdump": 770, "dmp": 770, "phylum": 770, "set_index": 770, "archaea": [770, 771, 804], "firmicut": [770, 771, 804], "bacteroidet": [770, 771, 804], "lineage_map": 771, "from_taxdump": 771, "clostridia": [771, 804], "bacilli": [771, 804], "sphingobacteria": [771, 804], "euryarchaeota": [771, 804], "thermoplasmata": [771, 804], "halobacteria": [771, 804], "cytophagia": [771, 804], "distant": 772, "is_root": [773, 777, 877], "_leaf_index": 774, "create_cach": 775, "has_children": [776, 777], "tipnam": [778, 780], "lowest_common_ancestor": 778, "convienc": [778, 780], "preorder": [779, 782, 785, 786, 802, 805, 877], "pre_and_postord": [779, 782, 785, 787, 802, 805], "non_tip": [779, 785, 786, 787, 802, 805, 811, 877], "node_c": 781, "nontip": 782, "levelord": [782, 785, 786, 787, 802, 805], "tip_count": 783, "remove_delet": [784, 788, 790, 795], "ineleg": 785, "stack": 785, "3x": 785, "worst": 785, "comb": 785, "visit": 786, "reconstruct": [788, 812, 872, 875], "shear": 788, "pop": [788, 790, 791, 795], "to_delet": 788, "clade": [791, 798, 811, 877], "knowledg": [793, 873], "treeerror": [793, 794], "root_at_midpoint": [793, 812], "midpoint": [794, 812], "farthest": 794, "apart": 794, "lengtherror": 794, "indirectli": 794, "mid": 794, "root_at": [794, 808, 809], "infinit": [796, 808, 809], "rev": 796, "shuffler": 796, "shuffled_tre": 796, "tip_": 797, "tip_list": 800, "representationwarn": 801, "nan_length_valu": 803, "attribute_nam": 803, "aris": [803, 811], "problemat": 803, "id_index": 803, "child_index": 803, "left_child_id": 803, "right_child_id": 803, "attr_1": 803, "attr_n": 803, "allow_empti": 804, "filter_f": 804, "self_befor": 805, "self_aft": 805, "inord": 805, "unpack_by_func": 806, "elong": 806, "graft": 806, "unpack": 807, "assign_support": 807, "walk": [808, 809, 877, 879], "_not_": 808, "new_tre": [808, 809], "support_attr": 811, "tree_node_class": 811, "_tree": 811, "consensu": 811, "arbitrarili": [811, 879], "usefulli": 811, "disjoint": 811, "adapt": 811, "matthew": 811, "wakefield": 811, "margush": 811, "mcmorri": 811, "fr": 811, "bulletin": 811, "239": 811, "consens": 811, "support_valu": 811, "consensus_tre": 811, "disallow_negative_branch_length": 812, "result_constructor": 812, "saitou": 812, "nei": 812, "gascuel": 812, "steel": 812, "overview": 812, "3447015": 812, "neighbour_join": 812, "reveal": 812, "novemb": 812, "molbev": 812, "msl072": 812, "abcd": 812, "render": 812, "newick_str": 812, "accident": 813, "ineffici": 813, "instal": 813, "success": [814, 839, 879], "alter": 814, "task": [814, 873], "deleteri": 814, "rtol": 815, "assertionerror": [815, 816], "almost": 815, "assert_frame_equ": 815, "ignore_method_nam": 816, "ignore_axis_label": 816, "ignore_direction": 816, "assert": 816, "direction": 816, "cardin": 817, "0th": 817, "fdel": 818, "fget": 818, "fset": 818, "owner": 822, "fn": 836, "subfold": 836, "filenam": 836, "folder": 836, "open_fil": 837, "block_siz": 837, "1048576": 837, "checksum": 837, "hashlib": 837, "answer": 837, "stackoverflow": 837, "1131255": 837, "379593": 837, "bar": [837, 879], "baz": 837, "hexdigest": 837, "ab07acbb1e496801937adfa772424bf7": 837, "short_circuit": 838, "offer": 838, "mechan": [838, 879], "prealloc": 838, "enabl": [838, 879], "interrog": 838, "handi": [838, 879], "contextu": 838, "iter_": 839, "success_callback": [839, 879], "fail_callback": [839, 879], "engin": 839, "callback": [839, 879], "short_cicruit": 839, "examin": [839, 879], "aspect": 839, "_setup_debug_trac": 849, "not_non": [861, 879], "pronounc": 872, "sigh": 872, "kit": 872, "bui": 872, "oh": 872, "bsd": 872, "licens": 872, "activ": 872, "skbio": 872, "introduct": 872, "workflow": 872, "miscellan": 872, "writeabl": 873, "snif": 873, "my_obj": 873, "someformat": 873, "oo": 873, "open_filehandl": 873, "unnam": 873, "goal": 873, "twofold": 873, "nonbiolog": 875, "accgggta": 875, "my": 875, "gfp": 875, "ggg": 875, "d2": 875, "d3": 875, "tacccggt": 875, "straightforward": 875, "r1": 875, "gacccgcuuu": 875, "r2": 875, "gccccccuuu": 875, "r3": 875, "accguuaguc": 875, "r4": 875, "acgggu": 875, "uc": 875, "r5": 875, "agg": 875, "ggacugaa": 875, "gga": 875, "gaa": 875, "themselv": 875, "agggga": 875, "ut": 875, "atgtgtatttga": 875, "auguguauuu": 875, "protein_from_dna": 875, "mci": 875, "protein_from_rna": 875, "parenthes": 877, "traver": 877, "wish": 877, "tree3": 877, "6666666666666667": 877, "120492524415": 877, "short": 879, "circuit": 879, "processor": 879, "nuc_pattern": 879, "aattg": 879, "has_nuc_pattern": 879, "sequenceprocessor": 879, "initialize_st": 879, "setup": 879, "check_length": 879, "indicatd": 879, "specfi": 879, "aaaaaaattttttt": 879, "atagacc": 879, "aattgccggac": 879, "atatgaacaaa": 879, "fun": 879, "excit": 879, "success_f": 879, "fail_f": 879, "ccggac": 879, "thing": 879, "assist": 879, "ahead": 879, "tttttttaaaaaaa": 879, "debug_trac": 879, "earlier": 879, "caggcc": 879, "anticip": 879, "rapidli": 879, "debug_pre_st": 879, "debug_post_st": 879, "awesom": 879, "piec": 879, "debug_runtim": 879, "diagnos": 879, "aggreg": 879, "cprofil": 879, "quit": 879, "ex": 879, "do_someth": 879, "do_something_els": 879, "foobar": 879, "do_something_awesom": 879}, "objects": {"skbio": [[0, 0, 0, "-", "alignment"], [1, 0, 0, "-", "diversity"], [873, 0, 0, "-", "io"], [874, 0, 0, "-", "metadata"], [875, 0, 0, "-", "sequence"], [876, 0, 0, "-", "stats"], [877, 0, 0, "-", "tree"], [878, 0, 0, "-", "util"], [879, 0, 0, "-", "workflow"]], "skbio.alignment": [[2, 1, 1, "", "AlignmentStructure"], [16, 1, 1, "", "StripedSmithWaterman"], [28, 1, 1, "", "TabularMSA"], [60, 3, 1, "", "global_pairwise_align"], [61, 3, 1, "", "global_pairwise_align_nucleotide"], [62, 3, 1, "", "global_pairwise_align_protein"], [63, 3, 1, "", "local_pairwise_align"], [64, 3, 1, "", "local_pairwise_align_nucleotide"], [65, 3, 1, "", "local_pairwise_align_protein"], [66, 3, 1, "", "local_pairwise_align_ssw"], [67, 3, 1, "", "make_identity_substitution_matrix"]], "skbio.alignment.AlignmentStructure": [[3, 2, 1, "", "__eq__"], [4, 2, 1, "", "__ge__"], [5, 2, 1, "", "__getitem__"], [6, 2, 1, "", "__getstate__"], [7, 2, 1, "", "__gt__"], [8, 2, 1, "", "__hash__"], [9, 2, 1, "", "__le__"], [10, 2, 1, "", "__lt__"], [11, 2, 1, "", "__ne__"], [12, 2, 1, "", "__setstate__"], [13, 2, 1, "", "__str__"], [14, 2, 1, "", "is_zero_based"], [15, 2, 1, "", "set_zero_based"]], "skbio.alignment.StripedSmithWaterman": [[17, 2, 1, "", "__call__"], [18, 2, 1, "", "__eq__"], [19, 2, 1, "", "__ge__"], [20, 2, 1, "", "__getstate__"], [21, 2, 1, "", "__gt__"], [22, 2, 1, "", "__hash__"], [23, 2, 1, "", "__le__"], [24, 2, 1, "", "__lt__"], [25, 2, 1, "", "__ne__"], [26, 2, 1, "", "__setstate__"], [27, 2, 1, "", "__str__"]], "skbio.alignment.TabularMSA": [[29, 2, 1, "", "__bool__"], [30, 2, 1, "", "__contains__"], [31, 2, 1, "", "__copy__"], [32, 2, 1, "", "__deepcopy__"], [33, 2, 1, "", "__eq__"], [34, 2, 1, "", "__ge__"], [35, 2, 1, "", "__getitem__"], [36, 2, 1, "", "__getstate__"], [37, 2, 1, "", "__gt__"], [38, 2, 1, "", "__iter__"], [39, 2, 1, "", "__le__"], [40, 2, 1, "", "__len__"], [41, 2, 1, "", "__lt__"], [42, 2, 1, "", "__ne__"], [43, 2, 1, "", "__reversed__"], [44, 2, 1, "", "__str__"], [45, 2, 1, "", "append"], [46, 2, 1, "", "consensus"], [47, 2, 1, "", "conservation"], [48, 2, 1, "", "extend"], [49, 2, 1, "", "from_dict"], [50, 2, 1, "", "gap_frequencies"], [51, 2, 1, "", "has_metadata"], [52, 2, 1, "", "has_positional_metadata"], [53, 2, 1, "", "iter_positions"], [54, 2, 1, "", "join"], [55, 2, 1, "", "read"], [56, 2, 1, "", "reassign_index"], [57, 2, 1, "", "sort"], [58, 2, 1, "", "to_dict"], [59, 2, 1, "", "write"]], "skbio.diversity": [[68, 0, 0, "-", "alpha"], [103, 3, 1, "", "alpha_diversity"], [104, 0, 0, "-", "beta"], [107, 3, 1, "", "beta_diversity"], [108, 3, 1, "", "block_beta_diversity"], [109, 3, 1, "", "get_alpha_diversity_metrics"], [110, 3, 1, "", "get_beta_diversity_metrics"], [111, 3, 1, "", "partial_beta_diversity"]], "skbio.diversity.alpha": [[69, 3, 1, "", "ace"], [70, 3, 1, "", "berger_parker_d"], [71, 3, 1, "", "brillouin_d"], [72, 3, 1, "", "chao1"], [73, 3, 1, "", "chao1_ci"], [74, 3, 1, "", "dominance"], [75, 3, 1, "", "doubles"], [76, 3, 1, "", "enspie"], [77, 3, 1, "", "esty_ci"], [78, 3, 1, "", "faith_pd"], [79, 3, 1, "", "fisher_alpha"], [80, 3, 1, "", "gini_index"], [81, 3, 1, "", "goods_coverage"], [82, 3, 1, "", "heip_e"], [83, 3, 1, "", "kempton_taylor_q"], [84, 3, 1, "", "lladser_ci"], [85, 3, 1, "", "lladser_pe"], [86, 3, 1, "", "margalef"], [87, 3, 1, "", "mcintosh_d"], [88, 3, 1, "", "mcintosh_e"], [89, 3, 1, "", "menhinick"], [90, 3, 1, "", "michaelis_menten_fit"], [91, 3, 1, "", "observed_features"], [92, 3, 1, "", "observed_otus"], [93, 3, 1, "", "osd"], [94, 3, 1, "", "phydiv"], [95, 3, 1, "", "pielou_e"], [96, 3, 1, "", "robbins"], [97, 3, 1, "", "shannon"], [98, 3, 1, "", "simpson"], [99, 3, 1, "", "simpson_e"], [100, 3, 1, "", "singles"], [101, 3, 1, "", "sobs"], [102, 3, 1, "", "strong"]], "skbio.diversity.beta": [[105, 3, 1, "", "unweighted_unifrac"], [106, 3, 1, "", "weighted_unifrac"]], "skbio.io": [[112, 4, 1, "", "ArgumentOverrideWarning"], [113, 4, 1, "", "BLAST7FormatError"], [114, 4, 1, "", "ClustalFormatError"], [115, 4, 1, "", "EMBLFormatError"], [116, 4, 1, "", "FASTAFormatError"], [117, 4, 1, "", "FASTQFormatError"], [118, 4, 1, "", "FileFormatError"], [119, 4, 1, "", "FormatIdentificationWarning"], [120, 4, 1, "", "GFF3FormatError"], [121, 4, 1, "", "GenBankFormatError"], [122, 4, 1, "", "IOSourceError"], [123, 4, 1, "", "LSMatFormatError"], [124, 4, 1, "", "NewickFormatError"], [125, 4, 1, "", "OrdinationFormatError"], [126, 4, 1, "", "PhylipFormatError"], [127, 4, 1, "", "QSeqFormatError"], [128, 4, 1, "", "QUALFormatError"], [129, 4, 1, "", "StockholmFormatError"], [130, 4, 1, "", "UnrecognizedFormatError"], [147, 0, 0, "-", "registry"], [188, 0, 0, "-", "util"]], "skbio.io.format": [[131, 0, 0, "-", "binary_dm"], [132, 0, 0, "-", "blast6"], [133, 0, 0, "-", "blast7"], [134, 0, 0, "-", "clustal"], [135, 0, 0, "-", "embl"], [136, 0, 0, "-", "fasta"], [137, 0, 0, "-", "fastq"], [138, 0, 0, "-", "genbank"], [139, 0, 0, "-", "gff3"], [140, 0, 0, "-", "lsmat"], [141, 0, 0, "-", "newick"], [142, 0, 0, "-", "ordination"], [143, 0, 0, "-", "phylip"], [144, 0, 0, "-", "qseq"], [145, 0, 0, "-", "stockholm"], [146, 0, 0, "-", "taxdump"]], "skbio.io.registry": [[148, 4, 1, "", "DuplicateRegistrationError"], [149, 1, 1, "", "Format"], [162, 1, 1, "", "IORegistry"], [183, 4, 1, "", "InvalidRegistrationError"], [184, 3, 1, "", "create_format"], [185, 3, 1, "", "read"], [186, 3, 1, "", "sniff"], [187, 3, 1, "", "write"]], "skbio.io.registry.Format": [[150, 2, 1, "", "__eq__"], [151, 2, 1, "", "__ge__"], [152, 2, 1, "", "__getstate__"], [153, 2, 1, "", "__gt__"], [154, 2, 1, "", "__hash__"], [155, 2, 1, "", "__le__"], [156, 2, 1, "", "__lt__"], [157, 2, 1, "", "__ne__"], [158, 2, 1, "", "__str__"], [159, 2, 1, "", "reader"], [160, 2, 1, "", "sniffer"], [161, 2, 1, "", "writer"]], "skbio.io.registry.IORegistry": [[163, 2, 1, "", "__eq__"], [164, 2, 1, "", "__ge__"], [165, 2, 1, "", "__getstate__"], [166, 2, 1, "", "__gt__"], [167, 2, 1, "", "__hash__"], [168, 2, 1, "", "__le__"], [169, 2, 1, "", "__lt__"], [170, 2, 1, "", "__ne__"], [171, 2, 1, "", "__str__"], [172, 2, 1, "", "add_format"], [173, 2, 1, "", "create_format"], [174, 2, 1, "", "get_reader"], [175, 2, 1, "", "get_sniffer"], [176, 2, 1, "", "get_writer"], [177, 2, 1, "", "list_read_formats"], [178, 2, 1, "", "list_write_formats"], [179, 2, 1, "", "monkey_patch"], [180, 2, 1, "", "read"], [181, 2, 1, "", "sniff"], [182, 2, 1, "", "write"]], "skbio.io.util": [[189, 3, 1, "", "open"], [190, 3, 1, "", "open_file"], [191, 3, 1, "", "open_files"]], "skbio.metadata": [[192, 1, 1, "", "Interval"], [202, 1, 1, "", "IntervalMetadata"]], "skbio.metadata.Interval": [[193, 2, 1, "", "__eq__"], [194, 2, 1, "", "__ge__"], [195, 2, 1, "", "__getstate__"], [196, 2, 1, "", "__gt__"], [197, 2, 1, "", "__le__"], [198, 2, 1, "", "__lt__"], [199, 2, 1, "", "__ne__"], [200, 2, 1, "", "__str__"], [201, 2, 1, "", "drop"]], "skbio.metadata.IntervalMetadata": [[203, 2, 1, "", "__copy__"], [204, 2, 1, "", "__deepcopy__"], [205, 2, 1, "", "__eq__"], [206, 2, 1, "", "__ge__"], [207, 2, 1, "", "__getstate__"], [208, 2, 1, "", "__gt__"], [209, 2, 1, "", "__le__"], [210, 2, 1, "", "__lt__"], [211, 2, 1, "", "__ne__"], [212, 2, 1, "", "__str__"], [213, 2, 1, "", "add"], [214, 2, 1, "", "concat"], [215, 2, 1, "", "drop"], [216, 2, 1, "", "merge"], [217, 2, 1, "", "query"], [218, 2, 1, "", "read"], [219, 2, 1, "", "sort"], [220, 2, 1, "", "write"]], "skbio.sequence": [[221, 1, 1, "", "DNA"], [280, 1, 1, "", "GeneticCode"], [292, 1, 1, "", "GrammaredSequence"], [343, 1, 1, "", "Protein"], [396, 1, 1, "", "RNA"], [455, 1, 1, "", "Sequence"], [493, 1, 1, "", "SubstitutionMatrix"], [521, 0, 0, "-", "distance"]], "skbio.sequence.DNA": [[222, 2, 1, "", "__bool__"], [223, 2, 1, "", "__contains__"], [224, 2, 1, "", "__copy__"], [225, 2, 1, "", "__deepcopy__"], [226, 2, 1, "", "__eq__"], [227, 2, 1, "", "__ge__"], [228, 2, 1, "", "__getitem__"], [229, 2, 1, "", "__getstate__"], [230, 2, 1, "", "__gt__"], [231, 2, 1, "", "__iter__"], [232, 2, 1, "", "__le__"], [233, 2, 1, "", "__len__"], [234, 2, 1, "", "__lt__"], [235, 2, 1, "", "__ne__"], [236, 2, 1, "", "__reversed__"], [237, 2, 1, "", "__str__"], [238, 2, 1, "", "complement"], [239, 2, 1, "", "concat"], [240, 2, 1, "", "count"], [241, 2, 1, "", "definites"], [242, 2, 1, "", "degap"], [243, 2, 1, "", "degenerates"], [244, 2, 1, "", "distance"], [245, 2, 1, "", "expand_degenerates"], [246, 2, 1, "", "find_motifs"], [247, 2, 1, "", "find_with_regex"], [248, 2, 1, "", "frequencies"], [249, 2, 1, "", "gaps"], [250, 2, 1, "", "gc_content"], [251, 2, 1, "", "gc_frequency"], [252, 2, 1, "", "has_definites"], [253, 2, 1, "", "has_degenerates"], [254, 2, 1, "", "has_gaps"], [255, 2, 1, "", "has_interval_metadata"], [256, 2, 1, "", "has_metadata"], [257, 2, 1, "", "has_nondegenerates"], [258, 2, 1, "", "has_positional_metadata"], [259, 2, 1, "", "index"], [260, 2, 1, "", "is_reverse_complement"], [261, 2, 1, "", "iter_contiguous"], [262, 2, 1, "", "iter_kmers"], [263, 2, 1, "", "kmer_frequencies"], [264, 2, 1, "", "lowercase"], [265, 2, 1, "", "match_frequency"], [266, 2, 1, "", "matches"], [267, 2, 1, "", "mismatch_frequency"], [268, 2, 1, "", "mismatches"], [269, 2, 1, "", "nondegenerates"], [270, 2, 1, "", "read"], [271, 2, 1, "", "replace"], [272, 2, 1, "", "reverse_complement"], [273, 2, 1, "", "to_definites"], [274, 2, 1, "", "to_indices"], [275, 2, 1, "", "to_regex"], [276, 2, 1, "", "transcribe"], [277, 2, 1, "", "translate"], [278, 2, 1, "", "translate_six_frames"], [279, 2, 1, "", "write"]], "skbio.sequence.GeneticCode": [[281, 2, 1, "", "__eq__"], [282, 2, 1, "", "__ge__"], [283, 2, 1, "", "__getstate__"], [284, 2, 1, "", "__gt__"], [285, 2, 1, "", "__le__"], [286, 2, 1, "", "__lt__"], [287, 2, 1, "", "__ne__"], [288, 2, 1, "", "__str__"], [289, 2, 1, "", "from_ncbi"], [290, 2, 1, "", "translate"], [291, 2, 1, "", "translate_six_frames"]], "skbio.sequence.GrammaredSequence": [[293, 2, 1, "", "__bool__"], [294, 2, 1, "", "__contains__"], [295, 2, 1, "", "__copy__"], [296, 2, 1, "", "__deepcopy__"], [297, 2, 1, "", "__eq__"], [298, 2, 1, "", "__ge__"], [299, 2, 1, "", "__getitem__"], [300, 2, 1, "", "__getstate__"], [301, 2, 1, "", "__gt__"], [302, 2, 1, "", "__iter__"], [303, 2, 1, "", "__le__"], [304, 2, 1, "", "__len__"], [305, 2, 1, "", "__lt__"], [306, 2, 1, "", "__ne__"], [307, 2, 1, "", "__reversed__"], [308, 2, 1, "", "__str__"], [309, 2, 1, "", "concat"], [310, 2, 1, "", "count"], [311, 2, 1, "", "definites"], [312, 2, 1, "", "degap"], [313, 2, 1, "", "degenerates"], [314, 2, 1, "", "distance"], [315, 2, 1, "", "expand_degenerates"], [316, 2, 1, "", "find_motifs"], [317, 2, 1, "", "find_with_regex"], [318, 2, 1, "", "frequencies"], [319, 2, 1, "", "gaps"], [320, 2, 1, "", "has_definites"], [321, 2, 1, "", "has_degenerates"], [322, 2, 1, "", "has_gaps"], [323, 2, 1, "", "has_interval_metadata"], [324, 2, 1, "", "has_metadata"], [325, 2, 1, "", "has_nondegenerates"], [326, 2, 1, "", "has_positional_metadata"], [327, 2, 1, "", "index"], [328, 2, 1, "", "iter_contiguous"], [329, 2, 1, "", "iter_kmers"], [330, 2, 1, "", "kmer_frequencies"], [331, 2, 1, "", "lowercase"], [332, 2, 1, "", "match_frequency"], [333, 2, 1, "", "matches"], [334, 2, 1, "", "mismatch_frequency"], [335, 2, 1, "", "mismatches"], [336, 2, 1, "", "nondegenerates"], [337, 2, 1, "", "read"], [338, 2, 1, "", "replace"], [339, 2, 1, "", "to_definites"], [340, 2, 1, "", "to_indices"], [341, 2, 1, "", "to_regex"], [342, 2, 1, "", "write"]], "skbio.sequence.Protein": [[344, 2, 1, "", "__bool__"], [345, 2, 1, "", "__contains__"], [346, 2, 1, "", "__copy__"], [347, 2, 1, "", "__deepcopy__"], [348, 2, 1, "", "__eq__"], [349, 2, 1, "", "__ge__"], [350, 2, 1, "", "__getitem__"], [351, 2, 1, "", "__getstate__"], [352, 2, 1, "", "__gt__"], [353, 2, 1, "", "__iter__"], [354, 2, 1, "", "__le__"], [355, 2, 1, "", "__len__"], [356, 2, 1, "", "__lt__"], [357, 2, 1, "", "__ne__"], [358, 2, 1, "", "__reversed__"], [359, 2, 1, "", "__str__"], [360, 2, 1, "", "concat"], [361, 2, 1, "", "count"], [362, 2, 1, "", "definites"], [363, 2, 1, "", "degap"], [364, 2, 1, "", "degenerates"], [365, 2, 1, "", "distance"], [366, 2, 1, "", "expand_degenerates"], [367, 2, 1, "", "find_motifs"], [368, 2, 1, "", "find_with_regex"], [369, 2, 1, "", "frequencies"], [370, 2, 1, "", "gaps"], [371, 2, 1, "", "has_definites"], [372, 2, 1, "", "has_degenerates"], [373, 2, 1, "", "has_gaps"], [374, 2, 1, "", "has_interval_metadata"], [375, 2, 1, "", "has_metadata"], [376, 2, 1, "", "has_nondegenerates"], [377, 2, 1, "", "has_positional_metadata"], [378, 2, 1, "", "has_stops"], [379, 2, 1, "", "index"], [380, 2, 1, "", "iter_contiguous"], [381, 2, 1, "", "iter_kmers"], [382, 2, 1, "", "kmer_frequencies"], [383, 2, 1, "", "lowercase"], [384, 2, 1, "", "match_frequency"], [385, 2, 1, "", "matches"], [386, 2, 1, "", "mismatch_frequency"], [387, 2, 1, "", "mismatches"], [388, 2, 1, "", "nondegenerates"], [389, 2, 1, "", "read"], [390, 2, 1, "", "replace"], [391, 2, 1, "", "stops"], [392, 2, 1, "", "to_definites"], [393, 2, 1, "", "to_indices"], [394, 2, 1, "", "to_regex"], [395, 2, 1, "", "write"]], "skbio.sequence.RNA": [[397, 2, 1, "", "__bool__"], [398, 2, 1, "", "__contains__"], [399, 2, 1, "", "__copy__"], [400, 2, 1, "", "__deepcopy__"], [401, 2, 1, "", "__eq__"], [402, 2, 1, "", "__ge__"], [403, 2, 1, "", "__getitem__"], [404, 2, 1, "", "__getstate__"], [405, 2, 1, "", "__gt__"], [406, 2, 1, "", "__iter__"], [407, 2, 1, "", "__le__"], [408, 2, 1, "", "__len__"], [409, 2, 1, "", "__lt__"], [410, 2, 1, "", "__ne__"], [411, 2, 1, "", "__reversed__"], [412, 2, 1, "", "__str__"], [413, 2, 1, "", "complement"], [414, 2, 1, "", "concat"], [415, 2, 1, "", "count"], [416, 2, 1, "", "definites"], [417, 2, 1, "", "degap"], [418, 2, 1, "", "degenerates"], [419, 2, 1, "", "distance"], [420, 2, 1, "", "expand_degenerates"], [421, 2, 1, "", "find_motifs"], [422, 2, 1, "", "find_with_regex"], [423, 2, 1, "", "frequencies"], [424, 2, 1, "", "gaps"], [425, 2, 1, "", "gc_content"], [426, 2, 1, "", "gc_frequency"], [427, 2, 1, "", "has_definites"], [428, 2, 1, "", "has_degenerates"], [429, 2, 1, "", "has_gaps"], [430, 2, 1, "", "has_interval_metadata"], [431, 2, 1, "", "has_metadata"], [432, 2, 1, "", "has_nondegenerates"], [433, 2, 1, "", "has_positional_metadata"], [434, 2, 1, "", "index"], [435, 2, 1, "", "is_reverse_complement"], [436, 2, 1, "", "iter_contiguous"], [437, 2, 1, "", "iter_kmers"], [438, 2, 1, "", "kmer_frequencies"], [439, 2, 1, "", "lowercase"], [440, 2, 1, "", "match_frequency"], [441, 2, 1, "", "matches"], [442, 2, 1, "", "mismatch_frequency"], [443, 2, 1, "", "mismatches"], [444, 2, 1, "", "nondegenerates"], [445, 2, 1, "", "read"], [446, 2, 1, "", "replace"], [447, 2, 1, "", "reverse_complement"], [448, 2, 1, "", "reverse_transcribe"], [449, 2, 1, "", "to_definites"], [450, 2, 1, "", "to_indices"], [451, 2, 1, "", "to_regex"], [452, 2, 1, "", "translate"], [453, 2, 1, "", "translate_six_frames"], [454, 2, 1, "", "write"]], "skbio.sequence.Sequence": [[456, 2, 1, "", "__bool__"], [457, 2, 1, "", "__contains__"], [458, 2, 1, "", "__copy__"], [459, 2, 1, "", "__deepcopy__"], [460, 2, 1, "", "__eq__"], [461, 2, 1, "", "__ge__"], [462, 2, 1, "", "__getitem__"], [463, 2, 1, "", "__getstate__"], [464, 2, 1, "", "__gt__"], [465, 2, 1, "", "__iter__"], [466, 2, 1, "", "__le__"], [467, 2, 1, "", "__len__"], [468, 2, 1, "", "__lt__"], [469, 2, 1, "", "__ne__"], [470, 2, 1, "", "__reversed__"], [471, 2, 1, "", "__str__"], [472, 2, 1, "", "concat"], [473, 2, 1, "", "count"], [474, 2, 1, "", "distance"], [475, 2, 1, "", "find_with_regex"], [476, 2, 1, "", "frequencies"], [477, 2, 1, "", "has_interval_metadata"], [478, 2, 1, "", "has_metadata"], [479, 2, 1, "", "has_positional_metadata"], [480, 2, 1, "", "index"], [481, 2, 1, "", "iter_contiguous"], [482, 2, 1, "", "iter_kmers"], [483, 2, 1, "", "kmer_frequencies"], [484, 2, 1, "", "lowercase"], [485, 2, 1, "", "match_frequency"], [486, 2, 1, "", "matches"], [487, 2, 1, "", "mismatch_frequency"], [488, 2, 1, "", "mismatches"], [489, 2, 1, "", "read"], [490, 2, 1, "", "replace"], [491, 2, 1, "", "to_indices"], [492, 2, 1, "", "write"]], "skbio.sequence.SubstitutionMatrix": [[494, 2, 1, "", "__contains__"], [495, 2, 1, "", "__eq__"], [496, 2, 1, "", "__ge__"], [497, 2, 1, "", "__getitem__"], [498, 2, 1, "", "__getstate__"], [499, 2, 1, "", "__gt__"], [500, 2, 1, "", "__le__"], [501, 2, 1, "", "__lt__"], [502, 2, 1, "", "__ne__"], [503, 2, 1, "", "__str__"], [504, 2, 1, "", "between"], [505, 2, 1, "", "by_name"], [506, 2, 1, "", "copy"], [507, 2, 1, "", "filter"], [508, 2, 1, "", "from_dict"], [509, 2, 1, "", "from_iterable"], [510, 2, 1, "", "get_names"], [511, 2, 1, "", "identity"], [512, 2, 1, "", "index"], [513, 2, 1, "", "plot"], [514, 2, 1, "", "read"], [515, 2, 1, "", "redundant_form"], [516, 2, 1, "", "to_data_frame"], [517, 2, 1, "", "to_dict"], [518, 2, 1, "", "transpose"], [519, 2, 1, "", "within"], [520, 2, 1, "", "write"]], "skbio.sequence.distance": [[522, 3, 1, "", "hamming"], [523, 3, 1, "", "kmer_distance"]], "skbio.stats": [[524, 0, 0, "-", "composition"], [544, 0, 0, "-", "distance"], [604, 0, 0, "-", "evolve"], [606, 0, 0, "-", "gradient"], [695, 3, 1, "", "isubsample"], [696, 0, 0, "-", "ordination"], [721, 0, 0, "-", "power"], [726, 3, 1, "", "subsample_counts"]], "skbio.stats.composition": [[525, 3, 1, "", "alr"], [526, 3, 1, "", "alr_inv"], [527, 3, 1, "", "ancom"], [528, 3, 1, "", "centralize"], [529, 3, 1, "", "closure"], [530, 3, 1, "", "clr"], [531, 3, 1, "", "clr_inv"], [532, 3, 1, "", "dirmult_ttest"], [533, 3, 1, "", "ilr"], [534, 3, 1, "", "ilr_inv"], [535, 3, 1, "", "inner"], [536, 3, 1, "", "multiplicative_replacement"], [537, 3, 1, "", "pairwise_vlr"], [538, 3, 1, "", "perturb"], [539, 3, 1, "", "perturb_inv"], [540, 3, 1, "", "power"], [541, 3, 1, "", "sbp_basis"], [542, 3, 1, "", "tree_basis"], [543, 3, 1, "", "vlr"]], "skbio.stats.distance": [[545, 1, 1, "", "DissimilarityMatrix"], [568, 4, 1, "", "DissimilarityMatrixError"], [569, 1, 1, "", "DistanceMatrix"], [595, 4, 1, "", "DistanceMatrixError"], [596, 4, 1, "", "MissingIDError"], [597, 3, 1, "", "anosim"], [598, 3, 1, "", "bioenv"], [599, 3, 1, "", "mantel"], [600, 3, 1, "", "permanova"], [601, 3, 1, "", "permdisp"], [602, 3, 1, "", "pwmantel"], [603, 3, 1, "", "randdm"]], "skbio.stats.distance.DissimilarityMatrix": [[546, 2, 1, "", "__contains__"], [547, 2, 1, "", "__eq__"], [548, 2, 1, "", "__ge__"], [549, 2, 1, "", "__getitem__"], [550, 2, 1, "", "__getstate__"], [551, 2, 1, "", "__gt__"], [552, 2, 1, "", "__le__"], [553, 2, 1, "", "__lt__"], [554, 2, 1, "", "__ne__"], [555, 2, 1, "", "__str__"], [556, 2, 1, "", "between"], [557, 2, 1, "", "copy"], [558, 2, 1, "", "filter"], [559, 2, 1, "", "from_iterable"], [560, 2, 1, "", "index"], [561, 2, 1, "", "plot"], [562, 2, 1, "", "read"], [563, 2, 1, "", "redundant_form"], [564, 2, 1, "", "to_data_frame"], [565, 2, 1, "", "transpose"], [566, 2, 1, "", "within"], [567, 2, 1, "", "write"]], "skbio.stats.distance.DistanceMatrix": [[570, 2, 1, "", "__contains__"], [571, 2, 1, "", "__eq__"], [572, 2, 1, "", "__ge__"], [573, 2, 1, "", "__getitem__"], [574, 2, 1, "", "__getstate__"], [575, 2, 1, "", "__gt__"], [576, 2, 1, "", "__le__"], [577, 2, 1, "", "__lt__"], [578, 2, 1, "", "__ne__"], [579, 2, 1, "", "__str__"], [580, 2, 1, "", "between"], [581, 2, 1, "", "condensed_form"], [582, 2, 1, "", "copy"], [583, 2, 1, "", "filter"], [584, 2, 1, "", "from_iterable"], [585, 2, 1, "", "index"], [586, 2, 1, "", "permute"], [587, 2, 1, "", "plot"], [588, 2, 1, "", "read"], [589, 2, 1, "", "redundant_form"], [590, 2, 1, "", "to_data_frame"], [591, 2, 1, "", "to_series"], [592, 2, 1, "", "transpose"], [593, 2, 1, "", "within"], [594, 2, 1, "", "write"]], "skbio.stats.evolve": [[605, 3, 1, "", "hommola_cospeciation"]], "skbio.stats.gradient": [[607, 1, 1, "", "AverageGradientANOVA"], [618, 1, 1, "", "CategoryResults"], [629, 1, 1, "", "FirstDifferenceGradientANOVA"], [640, 1, 1, "", "GradientANOVA"], [651, 1, 1, "", "GradientANOVAResults"], [662, 1, 1, "", "GroupResults"], [673, 1, 1, "", "TrajectoryGradientANOVA"], [684, 1, 1, "", "WindowDifferenceGradientANOVA"]], "skbio.stats.gradient.AverageGradientANOVA": [[608, 2, 1, "", "__eq__"], [609, 2, 1, "", "__ge__"], [610, 2, 1, "", "__getstate__"], [611, 2, 1, "", "__gt__"], [612, 2, 1, "", "__hash__"], [613, 2, 1, "", "__le__"], [614, 2, 1, "", "__lt__"], [615, 2, 1, "", "__ne__"], [616, 2, 1, "", "__str__"], [617, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.CategoryResults": [[619, 2, 1, "", "__eq__"], [620, 2, 1, "", "__ge__"], [621, 2, 1, "", "__getstate__"], [622, 2, 1, "", "__gt__"], [623, 2, 1, "", "__hash__"], [624, 2, 1, "", "__le__"], [625, 2, 1, "", "__lt__"], [626, 2, 1, "", "__ne__"], [627, 2, 1, "", "__str__"], [628, 2, 1, "", "to_files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[630, 2, 1, "", "__eq__"], [631, 2, 1, "", "__ge__"], [632, 2, 1, "", "__getstate__"], [633, 2, 1, "", "__gt__"], [634, 2, 1, "", "__hash__"], [635, 2, 1, "", "__le__"], [636, 2, 1, "", "__lt__"], [637, 2, 1, "", "__ne__"], [638, 2, 1, "", "__str__"], [639, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVA": [[641, 2, 1, "", "__eq__"], [642, 2, 1, "", "__ge__"], [643, 2, 1, "", "__getstate__"], [644, 2, 1, "", "__gt__"], [645, 2, 1, "", "__hash__"], [646, 2, 1, "", "__le__"], [647, 2, 1, "", "__lt__"], [648, 2, 1, "", "__ne__"], [649, 2, 1, "", "__str__"], [650, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[652, 2, 1, "", "__eq__"], [653, 2, 1, "", "__ge__"], [654, 2, 1, "", "__getstate__"], [655, 2, 1, "", "__gt__"], [656, 2, 1, "", "__hash__"], [657, 2, 1, "", "__le__"], [658, 2, 1, "", "__lt__"], [659, 2, 1, "", "__ne__"], [660, 2, 1, "", "__str__"], [661, 2, 1, "", "to_files"]], "skbio.stats.gradient.GroupResults": [[663, 2, 1, "", "__eq__"], [664, 2, 1, "", "__ge__"], [665, 2, 1, "", "__getstate__"], [666, 2, 1, "", "__gt__"], [667, 2, 1, "", "__hash__"], [668, 2, 1, "", "__le__"], [669, 2, 1, "", "__lt__"], [670, 2, 1, "", "__ne__"], [671, 2, 1, "", "__str__"], [672, 2, 1, "", "to_files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[674, 2, 1, "", "__eq__"], [675, 2, 1, "", "__ge__"], [676, 2, 1, "", "__getstate__"], [677, 2, 1, "", "__gt__"], [678, 2, 1, "", "__hash__"], [679, 2, 1, "", "__le__"], [680, 2, 1, "", "__lt__"], [681, 2, 1, "", "__ne__"], [682, 2, 1, "", "__str__"], [683, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[685, 2, 1, "", "__eq__"], [686, 2, 1, "", "__ge__"], [687, 2, 1, "", "__getstate__"], [688, 2, 1, "", "__gt__"], [689, 2, 1, "", "__hash__"], [690, 2, 1, "", "__le__"], [691, 2, 1, "", "__lt__"], [692, 2, 1, "", "__ne__"], [693, 2, 1, "", "__str__"], [694, 2, 1, "", "get_trajectories"]], "skbio.stats.ordination": [[697, 1, 1, "", "OrdinationResults"], [710, 3, 1, "", "ca"], [711, 3, 1, "", "cca"], [712, 3, 1, "", "corr"], [713, 3, 1, "", "e_matrix"], [714, 3, 1, "", "f_matrix"], [715, 3, 1, "", "mean_and_std"], [716, 3, 1, "", "pcoa"], [717, 3, 1, "", "pcoa_biplot"], [718, 3, 1, "", "rda"], [719, 3, 1, "", "scale"], [720, 3, 1, "", "svd_rank"]], "skbio.stats.ordination.OrdinationResults": [[698, 2, 1, "", "__eq__"], [699, 2, 1, "", "__ge__"], [700, 2, 1, "", "__getstate__"], [701, 2, 1, "", "__gt__"], [702, 2, 1, "", "__hash__"], [703, 2, 1, "", "__le__"], [704, 2, 1, "", "__lt__"], [705, 2, 1, "", "__ne__"], [706, 2, 1, "", "__str__"], [707, 2, 1, "", "plot"], [708, 2, 1, "", "read"], [709, 2, 1, "", "write"]], "skbio.stats.power": [[722, 3, 1, "", "confidence_bound"], [723, 3, 1, "", "paired_subsamples"], [724, 3, 1, "", "subsample_paired_power"], [725, 3, 1, "", "subsample_power"]], "skbio.tree": [[727, 4, 1, "", "DuplicateNodeError"], [728, 4, 1, "", "MissingNodeError"], [729, 4, 1, "", "NoLengthError"], [730, 4, 1, "", "NoParentError"], [731, 4, 1, "", "TreeError"], [732, 1, 1, "", "TreeNode"], [811, 3, 1, "", "majority_rule"], [812, 3, 1, "", "nj"]], "skbio.tree.TreeNode": [[733, 2, 1, "", "__copy__"], [734, 2, 1, "", "__deepcopy__"], [735, 2, 1, "", "__eq__"], [736, 2, 1, "", "__ge__"], [737, 2, 1, "", "__getitem__"], [738, 2, 1, "", "__getstate__"], [739, 2, 1, "", "__gt__"], [740, 2, 1, "", "__hash__"], [741, 2, 1, "", "__iter__"], [742, 2, 1, "", "__le__"], [743, 2, 1, "", "__len__"], [744, 2, 1, "", "__lt__"], [745, 2, 1, "", "__ne__"], [746, 2, 1, "", "__str__"], [747, 2, 1, "", "accumulate_to_ancestor"], [748, 2, 1, "", "ancestors"], [749, 2, 1, "", "append"], [750, 2, 1, "", "ascii_art"], [751, 2, 1, "", "assign_ids"], [752, 2, 1, "", "assign_supports"], [753, 2, 1, "", "bifurcate"], [754, 2, 1, "", "cache_attr"], [755, 2, 1, "", "compare_rfd"], [756, 2, 1, "", "compare_subsets"], [757, 2, 1, "", "compare_tip_distances"], [758, 2, 1, "", "copy"], [759, 2, 1, "", "count"], [760, 2, 1, "", "create_caches"], [761, 2, 1, "", "deepcopy"], [762, 2, 1, "", "descending_branch_length"], [763, 2, 1, "", "distance"], [764, 2, 1, "", "extend"], [765, 2, 1, "", "find"], [766, 2, 1, "", "find_all"], [767, 2, 1, "", "find_by_func"], [768, 2, 1, "", "find_by_id"], [769, 2, 1, "", "from_linkage_matrix"], [770, 2, 1, "", "from_taxdump"], [771, 2, 1, "", "from_taxonomy"], [772, 2, 1, "", "get_max_distance"], [773, 2, 1, "", "has_children"], [774, 2, 1, "", "index_tree"], [775, 2, 1, "", "invalidate_caches"], [776, 2, 1, "", "is_root"], [777, 2, 1, "", "is_tip"], [778, 2, 1, "", "lca"], [779, 2, 1, "", "levelorder"], [780, 2, 1, "", "lowest_common_ancestor"], [781, 2, 1, "", "neighbors"], [782, 2, 1, "", "non_tips"], [783, 2, 1, "", "observed_node_counts"], [784, 2, 1, "", "pop"], [785, 2, 1, "", "postorder"], [786, 2, 1, "", "pre_and_postorder"], [787, 2, 1, "", "preorder"], [788, 2, 1, "", "prune"], [789, 2, 1, "", "read"], [790, 2, 1, "", "remove"], [791, 2, 1, "", "remove_deleted"], [792, 2, 1, "", "root"], [793, 2, 1, "", "root_at"], [794, 2, 1, "", "root_at_midpoint"], [795, 2, 1, "", "shear"], [796, 2, 1, "", "shuffle"], [797, 2, 1, "", "siblings"], [798, 2, 1, "", "subset"], [799, 2, 1, "", "subsets"], [800, 2, 1, "", "subtree"], [801, 2, 1, "", "tip_tip_distances"], [802, 2, 1, "", "tips"], [803, 2, 1, "", "to_array"], [804, 2, 1, "", "to_taxonomy"], [805, 2, 1, "", "traverse"], [806, 2, 1, "", "unpack"], [807, 2, 1, "", "unpack_by_func"], [808, 2, 1, "", "unrooted_copy"], [809, 2, 1, "", "unrooted_deepcopy"], [810, 2, 1, "", "write"]], "skbio.util": [[813, 4, 1, "", "EfficiencyWarning"], [814, 4, 1, "", "RepresentationWarning"], [815, 3, 1, "", "assert_data_frame_almost_equal"], [816, 3, 1, "", "assert_ordination_results_equal"], [817, 3, 1, "", "cardinal_to_ordinal"], [818, 1, 1, "", "classproperty"], [835, 3, 1, "", "find_duplicates"], [836, 3, 1, "", "get_data_path"], [837, 3, 1, "", "safe_md5"]], "skbio.util.classproperty": [[819, 2, 1, "", "__delete__"], [820, 2, 1, "", "__eq__"], [821, 2, 1, "", "__ge__"], [822, 2, 1, "", "__get__"], [823, 2, 1, "", "__getstate__"], [824, 2, 1, "", "__gt__"], [825, 2, 1, "", "__hash__"], [826, 2, 1, "", "__le__"], [827, 2, 1, "", "__lt__"], [828, 2, 1, "", "__ne__"], [829, 2, 1, "", "__set__"], [830, 2, 1, "", "__set_name__"], [831, 2, 1, "", "__str__"], [832, 2, 1, "", "deleter"], [833, 2, 1, "", "getter"], [834, 2, 1, "", "setter"]], "skbio.workflow": [[838, 1, 1, "", "Workflow"], [850, 1, 1, "", "method"], [861, 1, 1, "", "requires"]], "skbio.workflow.Workflow": [[839, 2, 1, "", "__call__"], [840, 2, 1, "", "__eq__"], [841, 2, 1, "", "__ge__"], [842, 2, 1, "", "__getstate__"], [843, 2, 1, "", "__gt__"], [844, 2, 1, "", "__hash__"], [845, 2, 1, "", "__le__"], [846, 2, 1, "", "__lt__"], [847, 2, 1, "", "__ne__"], [848, 2, 1, "", "__str__"], [849, 2, 1, "", "initialize_state"]], "skbio.workflow.method": [[851, 2, 1, "", "__call__"], [852, 2, 1, "", "__eq__"], [853, 2, 1, "", "__ge__"], [854, 2, 1, "", "__getstate__"], [855, 2, 1, "", "__gt__"], [856, 2, 1, "", "__hash__"], [857, 2, 1, "", "__le__"], [858, 2, 1, "", "__lt__"], [859, 2, 1, "", "__ne__"], [860, 2, 1, "", "__str__"]], "skbio.workflow.requires": [[862, 2, 1, "", "__call__"], [863, 2, 1, "", "__eq__"], [864, 2, 1, "", "__ge__"], [865, 2, 1, "", "__getstate__"], [866, 2, 1, "", "__gt__"], [867, 2, 1, "", "__hash__"], [868, 2, 1, "", "__le__"], [869, 2, 1, "", "__lt__"], [870, 2, 1, "", "__ne__"], [871, 2, 1, "", "__str__"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"]}, "titleterms": {"align": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 134, 143, 145], "skbio": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879], "data": [0, 136, 544], "structur": [0, 544], "optim": 0, "i": [0, 147, 188, 873], "e": 0, "product": [0, 135], "readi": 0, "algorithm": 0, "slow": 0, "educ": 0, "purpos": 0, "onli": [0, 144], "gener": [0, 135, 136, 144], "function": [0, 1, 68, 104, 147, 188, 521, 524, 544, 604, 696, 721, 873, 876, 877, 878], "exampl": [0, 1, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 524, 544, 606, 696, 721, 875, 877, 879], "divers": [1, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], "calcul": 1, "driver": 1, "input": 1, "valid": 1, "count": [1, 240, 310, 361, 415, 473, 759], "vector": 1, "specifi": 1, "metric": [1, 521], "subpackag": [1, 873, 875, 876], "alignmentstructur": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "__eq__": [3, 18, 33, 150, 163, 193, 205, 226, 281, 297, 348, 401, 460, 495, 547, 571, 608, 619, 630, 641, 652, 663, 674, 685, 698, 735, 820, 840, 852, 863], "__ge__": [4, 19, 34, 151, 164, 194, 206, 227, 282, 298, 349, 402, 461, 496, 548, 572, 609, 620, 631, 642, 653, 664, 675, 686, 699, 736, 821, 841, 853, 864], "__getitem__": [5, 35, 228, 299, 350, 403, 462, 497, 549, 573, 737], "__getstate__": [6, 20, 36, 152, 165, 195, 207, 229, 283, 300, 351, 404, 463, 498, 550, 574, 610, 621, 632, 643, 654, 665, 676, 687, 700, 738, 823, 842, 854, 865], "__gt__": [7, 21, 37, 153, 166, 196, 208, 230, 284, 301, 352, 405, 464, 499, 551, 575, 611, 622, 633, 644, 655, 666, 677, 688, 701, 739, 824, 843, 855, 866], "__hash__": [8, 22, 154, 167, 612, 623, 634, 645, 656, 667, 678, 689, 702, 740, 825, 844, 856, 867], "__le__": [9, 23, 39, 155, 168, 197, 209, 232, 285, 303, 354, 407, 466, 500, 552, 576, 613, 624, 635, 646, 657, 668, 679, 690, 703, 742, 826, 845, 857, 868], "__lt__": [10, 24, 41, 156, 169, 198, 210, 234, 286, 305, 356, 409, 468, 501, 553, 577, 614, 625, 636, 647, 658, 669, 680, 691, 704, 744, 827, 846, 858, 869], "__ne__": [11, 25, 42, 157, 170, 199, 211, 235, 287, 306, 357, 410, 469, 502, 554, 578, 615, 626, 637, 648, 659, 670, 681, 692, 705, 745, 828, 847, 859, 870], "__setstate__": [12, 26], "__str__": [13, 27, 44, 158, 171, 200, 212, 237, 288, 308, 359, 412, 471, 503, 555, 579, 616, 627, 638, 649, 660, 671, 682, 693, 706, 746, 831, 848, 860, 871], "is_zero_bas": 14, "set_zero_bas": 15, "stripedsmithwaterman": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "__call__": [17, 839, 851, 862], "tabularmsa": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 136], "__bool__": [29, 222, 293, 344, 397, 456], "__contains__": [30, 223, 294, 345, 398, 457, 494, 546, 570], "__copy__": [31, 203, 224, 295, 346, 399, 458, 733], "__deepcopy__": [32, 204, 225, 296, 347, 400, 459, 734], "__iter__": [38, 231, 302, 353, 406, 465, 741], "__len__": [40, 233, 304, 355, 408, 467, 743], "__reversed__": [43, 236, 307, 358, 411, 470], "append": [45, 749], "consensu": 46, "conserv": 47, "extend": [48, 764], "from_dict": [49, 508], "gap_frequ": 50, "has_metadata": [51, 256, 324, 375, 431, 478], "has_positional_metadata": [52, 258, 326, 377, 433, 479], "iter_posit": 53, "join": 54, "read": [55, 135, 136, 138, 180, 185, 218, 270, 337, 389, 445, 489, 514, 562, 588, 708, 789, 873], "reassign_index": 56, "sort": [57, 219], "to_dict": [58, 517], "write": [59, 136, 138, 182, 187, 220, 279, 342, 395, 454, 492, 520, 567, 594, 709, 810, 873], "global_pairwise_align": 60, "global_pairwise_align_nucleotid": 61, "global_pairwise_align_protein": 62, "local_pairwise_align": 63, "local_pairwise_align_nucleotid": 64, "local_pairwise_align_protein": 65, "local_pairwise_align_ssw": 66, "make_identity_substitution_matrix": 67, "alpha": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "measur": [68, 104], "ac": 69, "berger_parker_d": 70, "brillouin_d": 71, "chao1": 72, "chao1_ci": 73, "domin": 74, "doubl": 75, "enspi": 76, "esty_ci": 77, "faith_pd": 78, "fisher_alpha": 79, "gini_index": 80, "goods_coverag": 81, "heip_": 82, "kempton_taylor_q": 83, "lladser_ci": 84, "lladser_p": 85, "margalef": 86, "mcintosh_d": 87, "mcintosh_": 88, "menhinick": 89, "michaelis_menten_fit": 90, "observed_featur": 91, "observed_otu": 92, "osd": 93, "phydiv": 94, "pielou_": 95, "robbin": 96, "shannon": 97, "simpson": 98, "simpson_": 99, "singl": 100, "sob": 101, "strong": 102, "alpha_divers": 103, "beta": [104, 105, 106], "unweighted_unifrac": 105, "weighted_unifrac": 106, "beta_divers": 107, "block_beta_divers": 108, "get_alpha_diversity_metr": 109, "get_beta_diversity_metr": 110, "partial_beta_divers": 111, "io": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 873], "argumentoverridewarn": 112, "blast7formaterror": 113, "clustalformaterror": 114, "emblformaterror": 115, "fastaformaterror": 116, "fastqformaterror": 117, "fileformaterror": 118, "formatidentificationwarn": 119, "gff3formaterror": 120, "genbankformaterror": 121, "iosourceerror": 122, "lsmatformaterror": 123, "newickformaterror": 124, "ordinationformaterror": 125, "phylipformaterror": 126, "qseqformaterror": 127, "qualformaterror": 128, "stockholmformaterror": 129, "unrecognizedformaterror": 130, "simpl": 131, "binari": 131, "dissimilar": 131, "matrix": [131, 140, 544], "format": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 873], "binary_dm": 131, "support": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 873], "specif": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146], "refer": [131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 524, 544, 696, 872], "blast": [132, 133], "6": [132, 872], "blast6": 132, "column": [132, 133], "type": [132, 133], "paramet": [132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146], "7": 133, "blast7": 133, "clustal": 134, "section": [134, 135, 138, 143], "embl": 135, "featur": [135, 138], "level": 135, "befor": [135, 138], "fh": 135, "header": [135, 136, 143, 145], "ft": 135, "sq": 135, "file": [135, 136, 138, 873], "us": [135, 873], "fasta": 136, "qual": 136, "sequenc": [136, 143, 145, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 875], "reader": [136, 138, 139, 159], "writer": [136, 139, 161], "fastq": 137, "qualiti": 137, "score": 137, "variant": 137, "genbank": 138, "locat": 138, "string": 138, "origin": 138, "gff3": 139, "label": [140, 141], "squar": 140, "lsmat": 140, "newick": 141, "formal": 141, "grammar": 141, "explan": 141, "basic": 141, "symbol": 141, "applic": 141, "rule": 141, "ad": 141, "node": [141, 146], "inform": 141, "advanc": 141, "length": 141, "inlin": 141, "comment": 141, "whitespac": 141, "caveat": 141, "ordin": [142, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720], "result": 142, "phylip": 143, "multipl": [143, 145], "qseq": 144, "stockholm": 145, "metadata": [145, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 874], "gf": 145, "g": 145, "gr": 145, "gc": 145, "footer": 145, "taxdump": 146, "dmp": 146, "name": 146, "divis": 146, "gencod": 146, "o": [147, 188, 873], "registri": [147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "class": [147, 544, 606, 696, 874, 875, 877, 879], "except": [147, 544, 873, 877], "creat": 147, "new": 147, "scikit": [147, 872, 873], "bio": [147, 872, 873], "reserv": 147, "keyword": 147, "argument": 147, "duplicateregistrationerror": 148, "sniffer": 160, "ioregistri": [162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], "add_format": 172, "create_format": [173, 184], "get_read": 174, "get_sniff": 175, "get_writ": 176, "list_read_format": 177, "list_write_format": 178, "monkey_patch": 179, "sniff": [181, 186], "invalidregistrationerror": 183, "util": [188, 189, 190, 191, 696, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 877, 878], "open": 189, "open_fil": [190, 191], "interv": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "drop": [201, 215], "intervalmetadata": [202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220], "add": 213, "concat": [214, 239, 309, 360, 414, 472], "merg": 216, "queri": 217, "dna": [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279], "complement": [238, 413], "definit": [241, 311, 362, 416], "degap": [242, 312, 363, 417], "degener": [243, 313, 364, 418], "distanc": [244, 314, 365, 419, 474, 521, 522, 523, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 763], "expand_degener": [245, 315, 366, 420], "find_motif": [246, 316, 367, 421], "find_with_regex": [247, 317, 368, 422, 475], "frequenc": [248, 318, 369, 423, 476], "gap": [249, 319, 370, 424], "gc_content": [250, 425], "gc_frequenc": [251, 426], "has_definit": [252, 320, 371, 427], "has_degener": [253, 321, 372, 428], "has_gap": [254, 322, 373, 429], "has_interval_metadata": [255, 323, 374, 430, 477], "has_nondegener": [257, 325, 376, 432], "index": [259, 327, 379, 434, 480, 512, 560, 585], "is_reverse_compl": [260, 435], "iter_contigu": [261, 328, 380, 436, 481], "iter_km": [262, 329, 381, 437, 482], "kmer_frequ": [263, 330, 382, 438, 483], "lowercas": [264, 331, 383, 439, 484], "match_frequ": [265, 332, 384, 440, 485], "match": [266, 333, 385, 441, 486], "mismatch_frequ": [267, 334, 386, 442, 487], "mismatch": [268, 335, 387, 443, 488], "nondegener": [269, 336, 388, 444], "replac": [271, 338, 390, 446, 490], "reverse_compl": [272, 447], "to_definit": [273, 339, 392, 449], "to_indic": [274, 340, 393, 450, 491], "to_regex": [275, 341, 394, 451], "transcrib": 276, "translat": [277, 290, 452], "translate_six_fram": [278, 291, 453], "geneticcod": [280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], "from_ncbi": 289, "grammaredsequ": [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "protein": [343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395], "has_stop": 378, "stop": 391, "rna": [396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454], "reverse_transcrib": 448, "substitutionmatrix": [493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "between": [504, 556, 580], "by_nam": 505, "copi": [506, 557, 582, 758], "filter": [507, 558, 583], "from_iter": [509, 559, 584], "get_nam": 510, "ident": 511, "plot": [513, 561, 587, 707], "redundant_form": [515, 563, 589], "to_data_fram": [516, 564, 590], "transpos": [518, 565, 592], "within": [519, 566, 593], "ham": 522, "kmer_dist": 523, "composit": [524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543], "statist": [524, 544, 604, 876], "stat": [524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 876], "alr": 525, "alr_inv": 526, "ancom": 527, "central": 528, "closur": 529, "clr": 530, "clr_inv": 531, "dirmult_ttest": 532, "ilr": 533, "ilr_inv": 534, "inner": 535, "multiplicative_replac": 536, "pairwise_vlr": 537, "perturb": 538, "perturb_inv": 539, "power": [540, 721, 722, 723, 724, 725], "sbp_basi": 541, "tree_basi": 542, "vlr": 543, "matric": 544, "base": 544, "dissimilaritymatrix": [544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "distancematrix": [544, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594], "categor": 544, "variabl": 544, "continu": 544, "comparison": 544, "dissimilaritymatrixerror": 568, "condensed_form": 581, "permut": 586, "to_seri": 591, "distancematrixerror": 595, "missingiderror": 596, "anosim": 597, "bioenv": 598, "mantel": 599, "permanova": 600, "permdisp": 601, "pwmantel": 602, "randdm": 603, "evolutionari": 604, "evolv": [604, 605], "cophylogenet": 604, "method": [604, 696, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860], "hommola_cospeci": 605, "gradient": [606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694], "analys": 606, "averagegradientanova": [607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617], "get_trajectori": [617, 639, 650, 683, 694], "categoryresult": [618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628], "to_fil": [628, 661, 672], "firstdifferencegradientanova": [629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639], "gradientanova": [640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650], "gradientanovaresult": [651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661], "groupresult": [662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672], "trajectorygradientanova": [673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683], "windowdifferencegradientanova": [684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694], "isubsampl": 695, "ordinationresult": [697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709], "ca": 710, "cca": 711, "corr": 712, "e_matrix": 713, "f_matrix": 714, "mean_and_std": 715, "pcoa": 716, "pcoa_biplot": 717, "rda": 718, "scale": 719, "svd_rank": 720, "empir": 721, "estim": 721, "confidence_bound": 722, "paired_subsampl": 723, "subsample_paired_pow": 724, "subsample_pow": 725, "subsample_count": 726, "tree": [727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 877], "duplicatenodeerror": 727, "missingnodeerror": 728, "nolengtherror": 729, "noparenterror": 730, "treeerror": 731, "treenod": [732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810], "accumulate_to_ancestor": 747, "ancestor": 748, "ascii_art": 750, "assign_id": 751, "assign_support": 752, "bifurc": 753, "cache_attr": 754, "compare_rfd": 755, "compare_subset": 756, "compare_tip_dist": 757, "create_cach": 760, "deepcopi": 761, "descending_branch_length": 762, "find": 765, "find_al": 766, "find_by_func": 767, "find_by_id": 768, "from_linkage_matrix": 769, "from_taxdump": 770, "from_taxonomi": 771, "get_max_dist": 772, "has_children": 773, "index_tre": 774, "invalidate_cach": 775, "is_root": 776, "is_tip": 777, "lca": 778, "levelord": 779, "lowest_common_ancestor": 780, "neighbor": 781, "non_tip": 782, "observed_node_count": 783, "pop": 784, "postord": 785, "pre_and_postord": 786, "preorder": 787, "prune": 788, "remov": 790, "remove_delet": 791, "root": 792, "root_at": 793, "root_at_midpoint": 794, "shear": 795, "shuffl": 796, "sibl": 797, "subset": [798, 799], "subtre": 800, "tip_tip_dist": 801, "tip": 802, "to_arrai": 803, "to_taxonomi": 804, "travers": 805, "unpack": 806, "unpack_by_func": 807, "unrooted_copi": 808, "unrooted_deepcopi": 809, "majority_rul": 811, "nj": 812, "efficiencywarn": 813, "representationwarn": 814, "assert_data_frame_almost_equ": 815, "assert_ordination_results_equ": 816, "cardinal_to_ordin": 817, "classproperti": [818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834], "__delete__": 819, "__get__": 822, "__set__": 829, "__set_name__": 830, "delet": 832, "getter": 833, "setter": 834, "find_dupl": 835, "get_data_path": 836, "safe_md5": 837, "workflow": [838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 879], "initialize_st": 849, "requir": [861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871], "0": 872, "dev": 872, "api": 872, "user": 873, "warn": [873, 878], "introduct": 873, "what": 873, "kind": 873, "can": 873, "from": 873, "represent": 877, "phylogenet": 877, "reconstruct": 877, "test": 878, "miscellan": 878, "construct": 879, "decor": 879}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Alignments (skbio.alignment)": [[0, "alignments-skbio-alignment"]], "Data Structures": [[0, "data-structures"]], "Optimized (i.e., production-ready) Alignment Algorithms": [[0, "optimized-i-e-production-ready-alignment-algorithms"]], "Slow (i.e., educational-purposes only) Alignment Algorithms": [[0, "slow-i-e-educational-purposes-only-alignment-algorithms"]], "General functionality": [[0, "general-functionality"]], "Data Structure Examples": [[0, "data-structure-examples"]], "Alignment Algorithm Examples": [[0, "alignment-algorithm-examples"]], "Optimized Alignment Algorithm Examples": [[0, "optimized-alignment-algorithm-examples"]], "Slow Alignment Algorithm Examples": [[0, "slow-alignment-algorithm-examples"]], "Diversity calculations (skbio.diversity)": [[1, "diversity-calculations-skbio-diversity"]], "Driver functions": [[1, "driver-functions"]], "Input validation": [[1, "input-validation"]], "Count vectors": [[1, "count-vectors"]], "Specifying a diversity metric": [[1, "specifying-a-diversity-metric"]], "Subpackages": [[1, "subpackages"], [873, "subpackages"], [875, "subpackages"], [876, "subpackages"]], "Functions": [[1, "functions"], [68, "functions"], [104, "functions"], [147, "functions"], [188, "functions"], [521, "functions"], [524, "functions"], [544, "functions"], [604, "functions"], [721, "functions"], [876, "functions"]], "Examples": [[1, "examples"], [132, "examples"], [133, "examples"], [134, "examples"], [135, "examples"], [136, "examples"], [137, "examples"], [138, "examples"], [139, "examples"], [141, "examples"], [142, "examples"], [143, "examples"], [144, "examples"], [145, "examples"], [146, "examples"], [524, "examples"], [544, "examples"], [606, "examples"], [696, "examples"], [721, "examples"], [875, "examples"], [877, "examples"], [879, "examples"]], "skbio.alignment.AlignmentStructure": [[2, "skbio-alignment-alignmentstructure"]], "skbio.alignment.AlignmentStructure.__eq__": [[3, "skbio-alignment-alignmentstructure-eq"]], "skbio.alignment.AlignmentStructure.__ge__": [[4, "skbio-alignment-alignmentstructure-ge"]], "skbio.alignment.AlignmentStructure.__getitem__": [[5, "skbio-alignment-alignmentstructure-getitem"]], "skbio.alignment.AlignmentStructure.__getstate__": [[6, "skbio-alignment-alignmentstructure-getstate"]], "skbio.alignment.AlignmentStructure.__gt__": [[7, "skbio-alignment-alignmentstructure-gt"]], "skbio.alignment.AlignmentStructure.__hash__": [[8, "skbio-alignment-alignmentstructure-hash"]], "skbio.alignment.AlignmentStructure.__le__": [[9, "skbio-alignment-alignmentstructure-le"]], "skbio.alignment.AlignmentStructure.__lt__": [[10, "skbio-alignment-alignmentstructure-lt"]], "skbio.alignment.AlignmentStructure.__ne__": [[11, "skbio-alignment-alignmentstructure-ne"]], "skbio.alignment.AlignmentStructure.__setstate__": [[12, "skbio-alignment-alignmentstructure-setstate"]], "skbio.alignment.AlignmentStructure.__str__": [[13, "skbio-alignment-alignmentstructure-str"]], "skbio.alignment.AlignmentStructure.is_zero_based": [[14, "skbio-alignment-alignmentstructure-is-zero-based"]], "skbio.alignment.AlignmentStructure.set_zero_based": [[15, "skbio-alignment-alignmentstructure-set-zero-based"]], "skbio.alignment.StripedSmithWaterman": [[16, "skbio-alignment-stripedsmithwaterman"]], "skbio.alignment.StripedSmithWaterman.__call__": [[17, "skbio-alignment-stripedsmithwaterman-call"]], "skbio.alignment.StripedSmithWaterman.__eq__": [[18, "skbio-alignment-stripedsmithwaterman-eq"]], "skbio.alignment.StripedSmithWaterman.__ge__": [[19, "skbio-alignment-stripedsmithwaterman-ge"]], "skbio.alignment.StripedSmithWaterman.__getstate__": [[20, "skbio-alignment-stripedsmithwaterman-getstate"]], "skbio.alignment.StripedSmithWaterman.__gt__": [[21, "skbio-alignment-stripedsmithwaterman-gt"]], "skbio.alignment.StripedSmithWaterman.__hash__": [[22, "skbio-alignment-stripedsmithwaterman-hash"]], "skbio.alignment.StripedSmithWaterman.__le__": [[23, "skbio-alignment-stripedsmithwaterman-le"]], "skbio.alignment.StripedSmithWaterman.__lt__": [[24, "skbio-alignment-stripedsmithwaterman-lt"]], "skbio.alignment.StripedSmithWaterman.__ne__": [[25, "skbio-alignment-stripedsmithwaterman-ne"]], "skbio.alignment.StripedSmithWaterman.__setstate__": [[26, "skbio-alignment-stripedsmithwaterman-setstate"]], "skbio.alignment.StripedSmithWaterman.__str__": [[27, "skbio-alignment-stripedsmithwaterman-str"]], "skbio.alignment.TabularMSA": [[28, "skbio-alignment-tabularmsa"]], "skbio.alignment.TabularMSA.__bool__": [[29, "skbio-alignment-tabularmsa-bool"]], "skbio.alignment.TabularMSA.__contains__": [[30, "skbio-alignment-tabularmsa-contains"]], "skbio.alignment.TabularMSA.__copy__": [[31, "skbio-alignment-tabularmsa-copy"]], "skbio.alignment.TabularMSA.__deepcopy__": [[32, "skbio-alignment-tabularmsa-deepcopy"]], "skbio.alignment.TabularMSA.__eq__": [[33, "skbio-alignment-tabularmsa-eq"]], "skbio.alignment.TabularMSA.__ge__": [[34, "skbio-alignment-tabularmsa-ge"]], "skbio.alignment.TabularMSA.__getitem__": [[35, "skbio-alignment-tabularmsa-getitem"]], "skbio.alignment.TabularMSA.__getstate__": [[36, "skbio-alignment-tabularmsa-getstate"]], "skbio.alignment.TabularMSA.__gt__": [[37, "skbio-alignment-tabularmsa-gt"]], "skbio.alignment.TabularMSA.__iter__": [[38, "skbio-alignment-tabularmsa-iter"]], "skbio.alignment.TabularMSA.__le__": [[39, "skbio-alignment-tabularmsa-le"]], "skbio.alignment.TabularMSA.__len__": [[40, "skbio-alignment-tabularmsa-len"]], "skbio.alignment.TabularMSA.__lt__": [[41, "skbio-alignment-tabularmsa-lt"]], "skbio.alignment.TabularMSA.__ne__": [[42, "skbio-alignment-tabularmsa-ne"]], "skbio.alignment.TabularMSA.__reversed__": [[43, "skbio-alignment-tabularmsa-reversed"]], "skbio.alignment.TabularMSA.__str__": [[44, "skbio-alignment-tabularmsa-str"]], "skbio.alignment.TabularMSA.append": [[45, "skbio-alignment-tabularmsa-append"]], "skbio.alignment.TabularMSA.consensus": [[46, "skbio-alignment-tabularmsa-consensus"]], "skbio.alignment.TabularMSA.conservation": [[47, "skbio-alignment-tabularmsa-conservation"]], "skbio.alignment.TabularMSA.extend": [[48, "skbio-alignment-tabularmsa-extend"]], "skbio.alignment.TabularMSA.from_dict": [[49, "skbio-alignment-tabularmsa-from-dict"]], "skbio.alignment.TabularMSA.gap_frequencies": [[50, "skbio-alignment-tabularmsa-gap-frequencies"]], "skbio.alignment.TabularMSA.has_metadata": [[51, "skbio-alignment-tabularmsa-has-metadata"]], "skbio.alignment.TabularMSA.has_positional_metadata": [[52, "skbio-alignment-tabularmsa-has-positional-metadata"]], "skbio.alignment.TabularMSA.iter_positions": [[53, "skbio-alignment-tabularmsa-iter-positions"]], "skbio.alignment.TabularMSA.join": [[54, "skbio-alignment-tabularmsa-join"]], "skbio.alignment.TabularMSA.read": [[55, "skbio-alignment-tabularmsa-read"]], "skbio.alignment.TabularMSA.reassign_index": [[56, "skbio-alignment-tabularmsa-reassign-index"]], "skbio.alignment.TabularMSA.sort": [[57, "skbio-alignment-tabularmsa-sort"]], "skbio.alignment.TabularMSA.to_dict": [[58, "skbio-alignment-tabularmsa-to-dict"]], "skbio.alignment.TabularMSA.write": [[59, "skbio-alignment-tabularmsa-write"]], "skbio.alignment.global_pairwise_align": [[60, "skbio-alignment-global-pairwise-align"]], "skbio.alignment.global_pairwise_align_nucleotide": [[61, "skbio-alignment-global-pairwise-align-nucleotide"]], "skbio.alignment.global_pairwise_align_protein": [[62, "skbio-alignment-global-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align": [[63, "skbio-alignment-local-pairwise-align"]], "skbio.alignment.local_pairwise_align_nucleotide": [[64, "skbio-alignment-local-pairwise-align-nucleotide"]], "skbio.alignment.local_pairwise_align_protein": [[65, "skbio-alignment-local-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align_ssw": [[66, "skbio-alignment-local-pairwise-align-ssw"]], "skbio.alignment.make_identity_substitution_matrix": [[67, "skbio-alignment-make-identity-substitution-matrix"]], "Alpha diversity measures (skbio.diversity.alpha)": [[68, "alpha-diversity-measures-skbio-diversity-alpha"]], "skbio.diversity.alpha.ace": [[69, "skbio-diversity-alpha-ace"]], "skbio.diversity.alpha.berger_parker_d": [[70, "skbio-diversity-alpha-berger-parker-d"]], "skbio.diversity.alpha.brillouin_d": [[71, "skbio-diversity-alpha-brillouin-d"]], "skbio.diversity.alpha.chao1": [[72, "skbio-diversity-alpha-chao1"]], "skbio.diversity.alpha.chao1_ci": [[73, "skbio-diversity-alpha-chao1-ci"]], "skbio.diversity.alpha.dominance": [[74, "skbio-diversity-alpha-dominance"]], "skbio.diversity.alpha.doubles": [[75, "skbio-diversity-alpha-doubles"]], "skbio.diversity.alpha.enspie": [[76, "skbio-diversity-alpha-enspie"]], "skbio.diversity.alpha.esty_ci": [[77, "skbio-diversity-alpha-esty-ci"]], "skbio.diversity.alpha.faith_pd": [[78, "skbio-diversity-alpha-faith-pd"]], "skbio.diversity.alpha.fisher_alpha": [[79, "skbio-diversity-alpha-fisher-alpha"]], "skbio.diversity.alpha.gini_index": [[80, "skbio-diversity-alpha-gini-index"]], "skbio.diversity.alpha.goods_coverage": [[81, "skbio-diversity-alpha-goods-coverage"]], "skbio.diversity.alpha.heip_e": [[82, "skbio-diversity-alpha-heip-e"]], "skbio.diversity.alpha.kempton_taylor_q": [[83, "skbio-diversity-alpha-kempton-taylor-q"]], "skbio.diversity.alpha.lladser_ci": [[84, "skbio-diversity-alpha-lladser-ci"]], "skbio.diversity.alpha.lladser_pe": [[85, "skbio-diversity-alpha-lladser-pe"]], "skbio.diversity.alpha.margalef": [[86, "skbio-diversity-alpha-margalef"]], "skbio.diversity.alpha.mcintosh_d": [[87, "skbio-diversity-alpha-mcintosh-d"]], "skbio.diversity.alpha.mcintosh_e": [[88, "skbio-diversity-alpha-mcintosh-e"]], "skbio.diversity.alpha.menhinick": [[89, "skbio-diversity-alpha-menhinick"]], "skbio.diversity.alpha.michaelis_menten_fit": [[90, "skbio-diversity-alpha-michaelis-menten-fit"]], "skbio.diversity.alpha.observed_features": [[91, "skbio-diversity-alpha-observed-features"]], "skbio.diversity.alpha.observed_otus": [[92, "skbio-diversity-alpha-observed-otus"]], "skbio.diversity.alpha.osd": [[93, "skbio-diversity-alpha-osd"]], "skbio.diversity.alpha.phydiv": [[94, "skbio-diversity-alpha-phydiv"]], "skbio.diversity.alpha.pielou_e": [[95, "skbio-diversity-alpha-pielou-e"]], "skbio.diversity.alpha.robbins": [[96, "skbio-diversity-alpha-robbins"]], "skbio.diversity.alpha.shannon": [[97, "skbio-diversity-alpha-shannon"]], "skbio.diversity.alpha.simpson": [[98, "skbio-diversity-alpha-simpson"]], "skbio.diversity.alpha.simpson_e": [[99, "skbio-diversity-alpha-simpson-e"]], "skbio.diversity.alpha.singles": [[100, "skbio-diversity-alpha-singles"]], "skbio.diversity.alpha.sobs": [[101, "skbio-diversity-alpha-sobs"]], "skbio.diversity.alpha.strong": [[102, "skbio-diversity-alpha-strong"]], "skbio.diversity.alpha_diversity": [[103, "skbio-diversity-alpha-diversity"]], "Beta diversity measures (skbio.diversity.beta)": [[104, "beta-diversity-measures-skbio-diversity-beta"]], "skbio.diversity.beta.unweighted_unifrac": [[105, "skbio-diversity-beta-unweighted-unifrac"]], "skbio.diversity.beta.weighted_unifrac": [[106, "skbio-diversity-beta-weighted-unifrac"]], "skbio.diversity.beta_diversity": [[107, "skbio-diversity-beta-diversity"]], "skbio.diversity.block_beta_diversity": [[108, "skbio-diversity-block-beta-diversity"]], "skbio.diversity.get_alpha_diversity_metrics": [[109, "skbio-diversity-get-alpha-diversity-metrics"]], "skbio.diversity.get_beta_diversity_metrics": [[110, "skbio-diversity-get-beta-diversity-metrics"]], "skbio.diversity.partial_beta_diversity": [[111, "skbio-diversity-partial-beta-diversity"]], "skbio.io.ArgumentOverrideWarning": [[112, "skbio-io-argumentoverridewarning"]], "skbio.io.BLAST7FormatError": [[113, "skbio-io-blast7formaterror"]], "skbio.io.ClustalFormatError": [[114, "skbio-io-clustalformaterror"]], "skbio.io.EMBLFormatError": [[115, "skbio-io-emblformaterror"]], "skbio.io.FASTAFormatError": [[116, "skbio-io-fastaformaterror"]], "skbio.io.FASTQFormatError": [[117, "skbio-io-fastqformaterror"]], "skbio.io.FileFormatError": [[118, "skbio-io-fileformaterror"]], "skbio.io.FormatIdentificationWarning": [[119, "skbio-io-formatidentificationwarning"]], "skbio.io.GFF3FormatError": [[120, "skbio-io-gff3formaterror"]], "skbio.io.GenBankFormatError": [[121, "skbio-io-genbankformaterror"]], "skbio.io.IOSourceError": [[122, "skbio-io-iosourceerror"]], "skbio.io.LSMatFormatError": [[123, "skbio-io-lsmatformaterror"]], "skbio.io.NewickFormatError": [[124, "skbio-io-newickformaterror"]], "skbio.io.OrdinationFormatError": [[125, "skbio-io-ordinationformaterror"]], "skbio.io.PhylipFormatError": [[126, "skbio-io-phylipformaterror"]], "skbio.io.QSeqFormatError": [[127, "skbio-io-qseqformaterror"]], "skbio.io.QUALFormatError": [[128, "skbio-io-qualformaterror"]], "skbio.io.StockholmFormatError": [[129, "skbio-io-stockholmformaterror"]], "skbio.io.UnrecognizedFormatError": [[130, "skbio-io-unrecognizedformaterror"]], "Simple binary dissimilarity matrix format (skbio.io.format.binary_dm)": [[131, "simple-binary-dissimilarity-matrix-format-skbio-io-format-binary-dm"]], "Format Support": [[131, "format-support"], [132, "format-support"], [133, "format-support"], [134, "format-support"], [135, "format-support"], [136, "format-support"], [137, "format-support"], [138, "format-support"], [139, "format-support"], [140, "format-support"], [141, "format-support"], [142, "format-support"], [143, "format-support"], [144, "format-support"], [145, "format-support"], [146, "format-support"]], "Format Specification": [[131, "format-specification"], [132, "format-specification"], [133, "format-specification"], [134, "format-specification"], [135, "format-specification"], [136, "format-specification"], [137, "format-specification"], [138, "format-specification"], [139, "format-specification"], [140, "format-specification"], [141, "format-specification"], [142, "format-specification"], [143, "format-specification"], [144, "format-specification"], [145, "format-specification"], [146, "format-specification"]], "References": [[131, "references"], [132, "references"], [133, "references"], [134, "references"], [135, "references"], [136, "references"], [137, "references"], [138, "references"], [139, "references"], [141, "references"], [143, "references"], [144, "references"], [145, "references"], [146, "references"], [524, "references"], [544, "references"], [696, "references"]], "BLAST+6 format (skbio.io.format.blast6)": [[132, "blast-6-format-skbio-io-format-blast6"]], "BLAST Column Types": [[132, "blast-column-types"], [133, "blast-column-types"]], "Format Parameters": [[132, "format-parameters"], [134, "format-parameters"], [136, "format-parameters"], [137, "format-parameters"], [138, "format-parameters"], [139, "format-parameters"], [140, "format-parameters"], [141, "format-parameters"], [143, "format-parameters"], [144, "format-parameters"], [145, "format-parameters"], [146, "format-parameters"]], "BLAST+7 format (skbio.io.format.blast7)": [[133, "blast-7-format-skbio-io-format-blast7"]], "Clustal format (skbio.io.format.clustal)": [[134, "clustal-format-skbio-io-format-clustal"]], "Alignment Section": [[134, "alignment-section"], [143, "alignment-section"]], "EMBL format (skbio.io.format.embl)": [[135, "embl-format-skbio-io-format-embl"]], "Feature Level Products": [[135, "feature-level-products"]], "Sections before FH (Feature Header)": [[135, "sections-before-fh-feature-header"]], "FT section": [[135, "ft-section"]], "SQ section": [[135, "sq-section"]], "Reading EMBL Files": [[135, "reading-embl-files"]], "Reading EMBL Files using generators": [[135, "reading-embl-files-using-generators"]], "FASTA/QUAL format (skbio.io.format.fasta)": [[136, "fasta-qual-format-skbio-io-format-fasta"]], "FASTA Format": [[136, "fasta-format"]], "Sequence Header": [[136, "sequence-header"]], "Sequence Data": [[136, "sequence-data"]], "QUAL Format": [[136, "qual-format"]], "QUAL File Parameter (Readers and Writers)": [[136, "qual-file-parameter-readers-and-writers"]], "Reader-specific Parameters": [[136, "reader-specific-parameters"], [138, "reader-specific-parameters"], [139, "reader-specific-parameters"]], "Generator and TabularMSA Reader Parameters": [[136, "generator-and-tabularmsa-reader-parameters"]], "Sequence Reader Parameters": [[136, "sequence-reader-parameters"]], "Writer-specific Parameters": [[136, "writer-specific-parameters"], [139, "writer-specific-parameters"]], "Reading and Writing FASTA Files": [[136, "reading-and-writing-fasta-files"]], "Reading and Writing FASTA/QUAL Files": [[136, "reading-and-writing-fasta-qual-files"]], "FASTQ format (skbio.io.format.fastq)": [[137, "fastq-format-skbio-io-format-fastq"]], "Quality Score Variants": [[137, "quality-score-variants"]], "GenBank format (skbio.io.format.genbank)": [[138, "genbank-format-skbio-io-format-genbank"]], "Sections before FEATURES": [[138, "sections-before-features"]], "FEATURES section": [[138, "features-section"]], "Location string": [[138, "location-string"]], "ORIGIN section": [[138, "origin-section"]], "Reading and Writing GenBank Files": [[138, "reading-and-writing-genbank-files"]], "GFF3 format (skbio.io.format.gff3)": [[139, "gff3-format-skbio-io-format-gff3"]], "Labeled square matrix format (skbio.io.format.lsmat)": [[140, "labeled-square-matrix-format-skbio-io-format-lsmat"]], "Newick format (skbio.io.format.newick)": [[141, "newick-format-skbio-io-format-newick"]], "Formal Grammar": [[141, "formal-grammar"]], "Explanation": [[141, "explanation"]], "Basic Symbols": [[141, "basic-symbols"]], "Application of Rules": [[141, "application-of-rules"]], "Adding Node Information": [[141, "adding-node-information"]], "Advanced Label and Length Rules": [[141, "advanced-label-and-length-rules"]], "Inline Comments": [[141, "inline-comments"]], "Whitespace": [[141, "whitespace"]], "Caveats": [[141, "caveats"]], "Ordination results format (skbio.io.format.ordination)": [[142, "ordination-results-format-skbio-io-format-ordination"]], "PHYLIP multiple sequence alignment format (skbio.io.format.phylip)": [[143, "phylip-multiple-sequence-alignment-format-skbio-io-format-phylip"]], "Header Section": [[143, "header-section"]], "QSeq format (skbio.io.format.qseq)": [[144, "qseq-format-skbio-io-format-qseq"]], "Generators Only": [[144, "generators-only"]], "Stockholm format (skbio.io.format.stockholm)": [[145, "stockholm-format-skbio-io-format-stockholm"]], "Header": [[145, "header"]], "Multiple Sequence Alignment": [[145, "multiple-sequence-alignment"]], "Metadata": [[145, "metadata"]], "GF metadata": [[145, "gf-metadata"]], "GS metadata": [[145, "gs-metadata"]], "GR metadata": [[145, "gr-metadata"]], "GC metadata": [[145, "gc-metadata"]], "Footer": [[145, "footer"]], "Taxdump format (skbio.io.format.taxdump)": [[146, "taxdump-format-skbio-io-format-taxdump"]], "nodes.dmp": [[146, "nodes-dmp"]], "names.dmp": [[146, "names-dmp"]], "division.dmp": [[146, "division-dmp"]], "gencode.dmp": [[146, "gencode-dmp"]], "I/O Registry (skbio.io.registry)": [[147, "i-o-registry-skbio-io-registry"]], "Classes": [[147, "classes"], [544, "classes"], [606, "classes"], [696, "classes"], [874, "classes"], [875, "classes"], [877, "classes"], [879, "classes"]], "Exceptions": [[147, "exceptions"], [544, "exceptions"], [877, "exceptions"]], "Creating a new format for scikit-bio": [[147, "creating-a-new-format-for-scikit-bio"]], "Reserved Keyword Arguments": [[147, "reserved-keyword-arguments"]], "skbio.io.registry.DuplicateRegistrationError": [[148, "skbio-io-registry-duplicateregistrationerror"]], "skbio.io.registry.Format": [[149, "skbio-io-registry-format"]], "skbio.io.registry.Format.__eq__": [[150, "skbio-io-registry-format-eq"]], "skbio.io.registry.Format.__ge__": [[151, "skbio-io-registry-format-ge"]], "skbio.io.registry.Format.__getstate__": [[152, "skbio-io-registry-format-getstate"]], "skbio.io.registry.Format.__gt__": [[153, "skbio-io-registry-format-gt"]], "skbio.io.registry.Format.__hash__": [[154, "skbio-io-registry-format-hash"]], "skbio.io.registry.Format.__le__": [[155, "skbio-io-registry-format-le"]], "skbio.io.registry.Format.__lt__": [[156, "skbio-io-registry-format-lt"]], "skbio.io.registry.Format.__ne__": [[157, "skbio-io-registry-format-ne"]], "skbio.io.registry.Format.__str__": [[158, "skbio-io-registry-format-str"]], "skbio.io.registry.Format.reader": [[159, "skbio-io-registry-format-reader"]], "skbio.io.registry.Format.sniffer": [[160, "skbio-io-registry-format-sniffer"]], "skbio.io.registry.Format.writer": [[161, "skbio-io-registry-format-writer"]], "skbio.io.registry.IORegistry": [[162, "skbio-io-registry-ioregistry"]], "skbio.io.registry.IORegistry.__eq__": [[163, "skbio-io-registry-ioregistry-eq"]], "skbio.io.registry.IORegistry.__ge__": [[164, "skbio-io-registry-ioregistry-ge"]], "skbio.io.registry.IORegistry.__getstate__": [[165, "skbio-io-registry-ioregistry-getstate"]], "skbio.io.registry.IORegistry.__gt__": [[166, "skbio-io-registry-ioregistry-gt"]], "skbio.io.registry.IORegistry.__hash__": [[167, "skbio-io-registry-ioregistry-hash"]], "skbio.io.registry.IORegistry.__le__": [[168, "skbio-io-registry-ioregistry-le"]], "skbio.io.registry.IORegistry.__lt__": [[169, "skbio-io-registry-ioregistry-lt"]], "skbio.io.registry.IORegistry.__ne__": [[170, "skbio-io-registry-ioregistry-ne"]], "skbio.io.registry.IORegistry.__str__": [[171, "skbio-io-registry-ioregistry-str"]], "skbio.io.registry.IORegistry.add_format": [[172, "skbio-io-registry-ioregistry-add-format"]], "skbio.io.registry.IORegistry.create_format": [[173, "skbio-io-registry-ioregistry-create-format"]], "skbio.io.registry.IORegistry.get_reader": [[174, "skbio-io-registry-ioregistry-get-reader"]], "skbio.io.registry.IORegistry.get_sniffer": [[175, "skbio-io-registry-ioregistry-get-sniffer"]], "skbio.io.registry.IORegistry.get_writer": [[176, "skbio-io-registry-ioregistry-get-writer"]], "skbio.io.registry.IORegistry.list_read_formats": [[177, "skbio-io-registry-ioregistry-list-read-formats"]], "skbio.io.registry.IORegistry.list_write_formats": [[178, "skbio-io-registry-ioregistry-list-write-formats"]], "skbio.io.registry.IORegistry.monkey_patch": [[179, "skbio-io-registry-ioregistry-monkey-patch"]], "skbio.io.registry.IORegistry.read": [[180, "skbio-io-registry-ioregistry-read"]], "skbio.io.registry.IORegistry.sniff": [[181, "skbio-io-registry-ioregistry-sniff"]], "skbio.io.registry.IORegistry.write": [[182, "skbio-io-registry-ioregistry-write"]], "skbio.io.registry.InvalidRegistrationError": [[183, "skbio-io-registry-invalidregistrationerror"]], "skbio.io.registry.create_format": [[184, "skbio-io-registry-create-format"]], "skbio.io.registry.read": [[185, "skbio-io-registry-read"]], "skbio.io.registry.sniff": [[186, "skbio-io-registry-sniff"]], "skbio.io.registry.write": [[187, "skbio-io-registry-write"]], "I/O utils (skbio.io.util)": [[188, "i-o-utils-skbio-io-util"]], "skbio.io.util.open": [[189, "skbio-io-util-open"]], "skbio.io.util.open_file": [[190, "skbio-io-util-open-file"]], "skbio.io.util.open_files": [[191, "skbio-io-util-open-files"]], "skbio.metadata.Interval": [[192, "skbio-metadata-interval"]], "skbio.metadata.Interval.__eq__": [[193, "skbio-metadata-interval-eq"]], "skbio.metadata.Interval.__ge__": [[194, "skbio-metadata-interval-ge"]], "skbio.metadata.Interval.__getstate__": [[195, "skbio-metadata-interval-getstate"]], "skbio.metadata.Interval.__gt__": [[196, "skbio-metadata-interval-gt"]], "skbio.metadata.Interval.__le__": [[197, "skbio-metadata-interval-le"]], "skbio.metadata.Interval.__lt__": [[198, "skbio-metadata-interval-lt"]], "skbio.metadata.Interval.__ne__": [[199, "skbio-metadata-interval-ne"]], "skbio.metadata.Interval.__str__": [[200, "skbio-metadata-interval-str"]], "skbio.metadata.Interval.drop": [[201, "skbio-metadata-interval-drop"]], "skbio.metadata.IntervalMetadata": [[202, "skbio-metadata-intervalmetadata"]], "skbio.metadata.IntervalMetadata.__copy__": [[203, "skbio-metadata-intervalmetadata-copy"]], "skbio.metadata.IntervalMetadata.__deepcopy__": [[204, "skbio-metadata-intervalmetadata-deepcopy"]], "skbio.metadata.IntervalMetadata.__eq__": [[205, "skbio-metadata-intervalmetadata-eq"]], "skbio.metadata.IntervalMetadata.__ge__": [[206, "skbio-metadata-intervalmetadata-ge"]], "skbio.metadata.IntervalMetadata.__getstate__": [[207, "skbio-metadata-intervalmetadata-getstate"]], "skbio.metadata.IntervalMetadata.__gt__": [[208, "skbio-metadata-intervalmetadata-gt"]], "skbio.metadata.IntervalMetadata.__le__": [[209, "skbio-metadata-intervalmetadata-le"]], "skbio.metadata.IntervalMetadata.__lt__": [[210, "skbio-metadata-intervalmetadata-lt"]], "skbio.metadata.IntervalMetadata.__ne__": [[211, "skbio-metadata-intervalmetadata-ne"]], "skbio.metadata.IntervalMetadata.__str__": [[212, "skbio-metadata-intervalmetadata-str"]], "skbio.metadata.IntervalMetadata.add": [[213, "skbio-metadata-intervalmetadata-add"]], "skbio.metadata.IntervalMetadata.concat": [[214, "skbio-metadata-intervalmetadata-concat"]], "skbio.metadata.IntervalMetadata.drop": [[215, "skbio-metadata-intervalmetadata-drop"]], "skbio.metadata.IntervalMetadata.merge": [[216, "skbio-metadata-intervalmetadata-merge"]], "skbio.metadata.IntervalMetadata.query": [[217, "skbio-metadata-intervalmetadata-query"]], "skbio.metadata.IntervalMetadata.read": [[218, "skbio-metadata-intervalmetadata-read"]], "skbio.metadata.IntervalMetadata.sort": [[219, "skbio-metadata-intervalmetadata-sort"]], "skbio.metadata.IntervalMetadata.write": [[220, "skbio-metadata-intervalmetadata-write"]], "skbio.sequence.DNA": [[221, "skbio-sequence-dna"]], "skbio.sequence.DNA.__bool__": [[222, "skbio-sequence-dna-bool"]], "skbio.sequence.DNA.__contains__": [[223, "skbio-sequence-dna-contains"]], "skbio.sequence.DNA.__copy__": [[224, "skbio-sequence-dna-copy"]], "skbio.sequence.DNA.__deepcopy__": [[225, "skbio-sequence-dna-deepcopy"]], "skbio.sequence.DNA.__eq__": [[226, "skbio-sequence-dna-eq"]], "skbio.sequence.DNA.__ge__": [[227, "skbio-sequence-dna-ge"]], "skbio.sequence.DNA.__getitem__": [[228, "skbio-sequence-dna-getitem"]], "skbio.sequence.DNA.__getstate__": [[229, "skbio-sequence-dna-getstate"]], "skbio.sequence.DNA.__gt__": [[230, "skbio-sequence-dna-gt"]], "skbio.sequence.DNA.__iter__": [[231, "skbio-sequence-dna-iter"]], "skbio.sequence.DNA.__le__": [[232, "skbio-sequence-dna-le"]], "skbio.sequence.DNA.__len__": [[233, "skbio-sequence-dna-len"]], "skbio.sequence.DNA.__lt__": [[234, "skbio-sequence-dna-lt"]], "skbio.sequence.DNA.__ne__": [[235, "skbio-sequence-dna-ne"]], "skbio.sequence.DNA.__reversed__": [[236, "skbio-sequence-dna-reversed"]], "skbio.sequence.DNA.__str__": [[237, "skbio-sequence-dna-str"]], "skbio.sequence.DNA.complement": [[238, "skbio-sequence-dna-complement"]], "skbio.sequence.DNA.concat": [[239, "skbio-sequence-dna-concat"]], "skbio.sequence.DNA.count": [[240, "skbio-sequence-dna-count"]], "skbio.sequence.DNA.definites": [[241, "skbio-sequence-dna-definites"]], "skbio.sequence.DNA.degap": [[242, "skbio-sequence-dna-degap"]], "skbio.sequence.DNA.degenerates": [[243, "skbio-sequence-dna-degenerates"]], "skbio.sequence.DNA.distance": [[244, "skbio-sequence-dna-distance"]], "skbio.sequence.DNA.expand_degenerates": [[245, "skbio-sequence-dna-expand-degenerates"]], "skbio.sequence.DNA.find_motifs": [[246, "skbio-sequence-dna-find-motifs"]], "skbio.sequence.DNA.find_with_regex": [[247, "skbio-sequence-dna-find-with-regex"]], "skbio.sequence.DNA.frequencies": [[248, "skbio-sequence-dna-frequencies"]], "skbio.sequence.DNA.gaps": [[249, "skbio-sequence-dna-gaps"]], "skbio.sequence.DNA.gc_content": [[250, "skbio-sequence-dna-gc-content"]], "skbio.sequence.DNA.gc_frequency": [[251, "skbio-sequence-dna-gc-frequency"]], "skbio.sequence.DNA.has_definites": [[252, "skbio-sequence-dna-has-definites"]], "skbio.sequence.DNA.has_degenerates": [[253, "skbio-sequence-dna-has-degenerates"]], "skbio.sequence.DNA.has_gaps": [[254, "skbio-sequence-dna-has-gaps"]], "skbio.sequence.DNA.has_interval_metadata": [[255, "skbio-sequence-dna-has-interval-metadata"]], "skbio.sequence.DNA.has_metadata": [[256, "skbio-sequence-dna-has-metadata"]], "skbio.sequence.DNA.has_nondegenerates": [[257, "skbio-sequence-dna-has-nondegenerates"]], "skbio.sequence.DNA.has_positional_metadata": [[258, "skbio-sequence-dna-has-positional-metadata"]], "skbio.sequence.DNA.index": [[259, "skbio-sequence-dna-index"]], "skbio.sequence.DNA.is_reverse_complement": [[260, "skbio-sequence-dna-is-reverse-complement"]], "skbio.sequence.DNA.iter_contiguous": [[261, "skbio-sequence-dna-iter-contiguous"]], "skbio.sequence.DNA.iter_kmers": [[262, "skbio-sequence-dna-iter-kmers"]], "skbio.sequence.DNA.kmer_frequencies": [[263, "skbio-sequence-dna-kmer-frequencies"]], "skbio.sequence.DNA.lowercase": [[264, "skbio-sequence-dna-lowercase"]], "skbio.sequence.DNA.match_frequency": [[265, "skbio-sequence-dna-match-frequency"]], "skbio.sequence.DNA.matches": [[266, "skbio-sequence-dna-matches"]], "skbio.sequence.DNA.mismatch_frequency": [[267, "skbio-sequence-dna-mismatch-frequency"]], "skbio.sequence.DNA.mismatches": [[268, "skbio-sequence-dna-mismatches"]], "skbio.sequence.DNA.nondegenerates": [[269, "skbio-sequence-dna-nondegenerates"]], "skbio.sequence.DNA.read": [[270, "skbio-sequence-dna-read"]], "skbio.sequence.DNA.replace": [[271, "skbio-sequence-dna-replace"]], "skbio.sequence.DNA.reverse_complement": [[272, "skbio-sequence-dna-reverse-complement"]], "skbio.sequence.DNA.to_definites": [[273, "skbio-sequence-dna-to-definites"]], "skbio.sequence.DNA.to_indices": [[274, "skbio-sequence-dna-to-indices"]], "skbio.sequence.DNA.to_regex": [[275, "skbio-sequence-dna-to-regex"]], "skbio.sequence.DNA.transcribe": [[276, "skbio-sequence-dna-transcribe"]], "skbio.sequence.DNA.translate": [[277, "skbio-sequence-dna-translate"]], "skbio.sequence.DNA.translate_six_frames": [[278, "skbio-sequence-dna-translate-six-frames"]], "skbio.sequence.DNA.write": [[279, "skbio-sequence-dna-write"]], "skbio.sequence.GeneticCode": [[280, "skbio-sequence-geneticcode"]], "skbio.sequence.GeneticCode.__eq__": [[281, "skbio-sequence-geneticcode-eq"]], "skbio.sequence.GeneticCode.__ge__": [[282, "skbio-sequence-geneticcode-ge"]], "skbio.sequence.GeneticCode.__getstate__": [[283, "skbio-sequence-geneticcode-getstate"]], "skbio.sequence.GeneticCode.__gt__": [[284, "skbio-sequence-geneticcode-gt"]], "skbio.sequence.GeneticCode.__le__": [[285, "skbio-sequence-geneticcode-le"]], "skbio.sequence.GeneticCode.__lt__": [[286, "skbio-sequence-geneticcode-lt"]], "skbio.sequence.GeneticCode.__ne__": [[287, "skbio-sequence-geneticcode-ne"]], "skbio.sequence.GeneticCode.__str__": [[288, "skbio-sequence-geneticcode-str"]], "skbio.sequence.GeneticCode.from_ncbi": [[289, "skbio-sequence-geneticcode-from-ncbi"]], "skbio.sequence.GeneticCode.translate": [[290, "skbio-sequence-geneticcode-translate"]], "skbio.sequence.GeneticCode.translate_six_frames": [[291, "skbio-sequence-geneticcode-translate-six-frames"]], "skbio.sequence.GrammaredSequence": [[292, "skbio-sequence-grammaredsequence"]], "skbio.sequence.GrammaredSequence.__bool__": [[293, "skbio-sequence-grammaredsequence-bool"]], "skbio.sequence.GrammaredSequence.__contains__": [[294, "skbio-sequence-grammaredsequence-contains"]], "skbio.sequence.GrammaredSequence.__copy__": [[295, "skbio-sequence-grammaredsequence-copy"]], "skbio.sequence.GrammaredSequence.__deepcopy__": [[296, "skbio-sequence-grammaredsequence-deepcopy"]], "skbio.sequence.GrammaredSequence.__eq__": [[297, "skbio-sequence-grammaredsequence-eq"]], "skbio.sequence.GrammaredSequence.__ge__": [[298, "skbio-sequence-grammaredsequence-ge"]], "skbio.sequence.GrammaredSequence.__getitem__": [[299, "skbio-sequence-grammaredsequence-getitem"]], "skbio.sequence.GrammaredSequence.__getstate__": [[300, "skbio-sequence-grammaredsequence-getstate"]], "skbio.sequence.GrammaredSequence.__gt__": [[301, "skbio-sequence-grammaredsequence-gt"]], "skbio.sequence.GrammaredSequence.__iter__": [[302, "skbio-sequence-grammaredsequence-iter"]], "skbio.sequence.GrammaredSequence.__le__": [[303, "skbio-sequence-grammaredsequence-le"]], "skbio.sequence.GrammaredSequence.__len__": [[304, "skbio-sequence-grammaredsequence-len"]], "skbio.sequence.GrammaredSequence.__lt__": [[305, "skbio-sequence-grammaredsequence-lt"]], "skbio.sequence.GrammaredSequence.__ne__": [[306, "skbio-sequence-grammaredsequence-ne"]], "skbio.sequence.GrammaredSequence.__reversed__": [[307, "skbio-sequence-grammaredsequence-reversed"]], "skbio.sequence.GrammaredSequence.__str__": [[308, "skbio-sequence-grammaredsequence-str"]], "skbio.sequence.GrammaredSequence.concat": [[309, "skbio-sequence-grammaredsequence-concat"]], "skbio.sequence.GrammaredSequence.count": [[310, "skbio-sequence-grammaredsequence-count"]], "skbio.sequence.GrammaredSequence.definites": [[311, "skbio-sequence-grammaredsequence-definites"]], "skbio.sequence.GrammaredSequence.degap": [[312, "skbio-sequence-grammaredsequence-degap"]], "skbio.sequence.GrammaredSequence.degenerates": [[313, "skbio-sequence-grammaredsequence-degenerates"]], "skbio.sequence.GrammaredSequence.distance": [[314, "skbio-sequence-grammaredsequence-distance"]], "skbio.sequence.GrammaredSequence.expand_degenerates": [[315, "skbio-sequence-grammaredsequence-expand-degenerates"]], "skbio.sequence.GrammaredSequence.find_motifs": [[316, "skbio-sequence-grammaredsequence-find-motifs"]], "skbio.sequence.GrammaredSequence.find_with_regex": [[317, "skbio-sequence-grammaredsequence-find-with-regex"]], "skbio.sequence.GrammaredSequence.frequencies": [[318, "skbio-sequence-grammaredsequence-frequencies"]], "skbio.sequence.GrammaredSequence.gaps": [[319, "skbio-sequence-grammaredsequence-gaps"]], "skbio.sequence.GrammaredSequence.has_definites": [[320, "skbio-sequence-grammaredsequence-has-definites"]], "skbio.sequence.GrammaredSequence.has_degenerates": [[321, "skbio-sequence-grammaredsequence-has-degenerates"]], "skbio.sequence.GrammaredSequence.has_gaps": [[322, "skbio-sequence-grammaredsequence-has-gaps"]], "skbio.sequence.GrammaredSequence.has_interval_metadata": [[323, "skbio-sequence-grammaredsequence-has-interval-metadata"]], "skbio.sequence.GrammaredSequence.has_metadata": [[324, "skbio-sequence-grammaredsequence-has-metadata"]], "skbio.sequence.GrammaredSequence.has_nondegenerates": [[325, "skbio-sequence-grammaredsequence-has-nondegenerates"]], "skbio.sequence.GrammaredSequence.has_positional_metadata": [[326, "skbio-sequence-grammaredsequence-has-positional-metadata"]], "skbio.sequence.GrammaredSequence.index": [[327, "skbio-sequence-grammaredsequence-index"]], "skbio.sequence.GrammaredSequence.iter_contiguous": [[328, "skbio-sequence-grammaredsequence-iter-contiguous"]], "skbio.sequence.GrammaredSequence.iter_kmers": [[329, "skbio-sequence-grammaredsequence-iter-kmers"]], "skbio.sequence.GrammaredSequence.kmer_frequencies": [[330, "skbio-sequence-grammaredsequence-kmer-frequencies"]], "skbio.sequence.GrammaredSequence.lowercase": [[331, "skbio-sequence-grammaredsequence-lowercase"]], "skbio.sequence.GrammaredSequence.match_frequency": [[332, "skbio-sequence-grammaredsequence-match-frequency"]], "skbio.sequence.GrammaredSequence.matches": [[333, "skbio-sequence-grammaredsequence-matches"]], "skbio.sequence.GrammaredSequence.mismatch_frequency": [[334, "skbio-sequence-grammaredsequence-mismatch-frequency"]], "skbio.sequence.GrammaredSequence.mismatches": [[335, "skbio-sequence-grammaredsequence-mismatches"]], "skbio.sequence.GrammaredSequence.nondegenerates": [[336, "skbio-sequence-grammaredsequence-nondegenerates"]], "skbio.sequence.GrammaredSequence.read": [[337, "skbio-sequence-grammaredsequence-read"]], "skbio.sequence.GrammaredSequence.replace": [[338, "skbio-sequence-grammaredsequence-replace"]], "skbio.sequence.GrammaredSequence.to_definites": [[339, "skbio-sequence-grammaredsequence-to-definites"]], "skbio.sequence.GrammaredSequence.to_indices": [[340, "skbio-sequence-grammaredsequence-to-indices"]], "skbio.sequence.GrammaredSequence.to_regex": [[341, "skbio-sequence-grammaredsequence-to-regex"]], "skbio.sequence.GrammaredSequence.write": [[342, "skbio-sequence-grammaredsequence-write"]], "skbio.sequence.Protein": [[343, "skbio-sequence-protein"]], "skbio.sequence.Protein.__bool__": [[344, "skbio-sequence-protein-bool"]], "skbio.sequence.Protein.__contains__": [[345, "skbio-sequence-protein-contains"]], "skbio.sequence.Protein.__copy__": [[346, "skbio-sequence-protein-copy"]], "skbio.sequence.Protein.__deepcopy__": [[347, "skbio-sequence-protein-deepcopy"]], "skbio.sequence.Protein.__eq__": [[348, "skbio-sequence-protein-eq"]], "skbio.sequence.Protein.__ge__": [[349, "skbio-sequence-protein-ge"]], "skbio.sequence.Protein.__getitem__": [[350, "skbio-sequence-protein-getitem"]], "skbio.sequence.Protein.__getstate__": [[351, "skbio-sequence-protein-getstate"]], "skbio.sequence.Protein.__gt__": [[352, "skbio-sequence-protein-gt"]], "skbio.sequence.Protein.__iter__": [[353, "skbio-sequence-protein-iter"]], "skbio.sequence.Protein.__le__": [[354, "skbio-sequence-protein-le"]], "skbio.sequence.Protein.__len__": [[355, "skbio-sequence-protein-len"]], "skbio.sequence.Protein.__lt__": [[356, "skbio-sequence-protein-lt"]], "skbio.sequence.Protein.__ne__": [[357, "skbio-sequence-protein-ne"]], "skbio.sequence.Protein.__reversed__": [[358, "skbio-sequence-protein-reversed"]], "skbio.sequence.Protein.__str__": [[359, "skbio-sequence-protein-str"]], "skbio.sequence.Protein.concat": [[360, "skbio-sequence-protein-concat"]], "skbio.sequence.Protein.count": [[361, "skbio-sequence-protein-count"]], "skbio.sequence.Protein.definites": [[362, "skbio-sequence-protein-definites"]], "skbio.sequence.Protein.degap": [[363, "skbio-sequence-protein-degap"]], "skbio.sequence.Protein.degenerates": [[364, "skbio-sequence-protein-degenerates"]], "skbio.sequence.Protein.distance": [[365, "skbio-sequence-protein-distance"]], "skbio.sequence.Protein.expand_degenerates": [[366, "skbio-sequence-protein-expand-degenerates"]], "skbio.sequence.Protein.find_motifs": [[367, "skbio-sequence-protein-find-motifs"]], "skbio.sequence.Protein.find_with_regex": [[368, "skbio-sequence-protein-find-with-regex"]], "skbio.sequence.Protein.frequencies": [[369, "skbio-sequence-protein-frequencies"]], "skbio.sequence.Protein.gaps": [[370, "skbio-sequence-protein-gaps"]], "skbio.sequence.Protein.has_definites": [[371, "skbio-sequence-protein-has-definites"]], "skbio.sequence.Protein.has_degenerates": [[372, "skbio-sequence-protein-has-degenerates"]], "skbio.sequence.Protein.has_gaps": [[373, "skbio-sequence-protein-has-gaps"]], "skbio.sequence.Protein.has_interval_metadata": [[374, "skbio-sequence-protein-has-interval-metadata"]], "skbio.sequence.Protein.has_metadata": [[375, "skbio-sequence-protein-has-metadata"]], "skbio.sequence.Protein.has_nondegenerates": [[376, "skbio-sequence-protein-has-nondegenerates"]], "skbio.sequence.Protein.has_positional_metadata": [[377, "skbio-sequence-protein-has-positional-metadata"]], "skbio.sequence.Protein.has_stops": [[378, "skbio-sequence-protein-has-stops"]], "skbio.sequence.Protein.index": [[379, "skbio-sequence-protein-index"]], "skbio.sequence.Protein.iter_contiguous": [[380, "skbio-sequence-protein-iter-contiguous"]], "skbio.sequence.Protein.iter_kmers": [[381, "skbio-sequence-protein-iter-kmers"]], "skbio.sequence.Protein.kmer_frequencies": [[382, "skbio-sequence-protein-kmer-frequencies"]], "skbio.sequence.Protein.lowercase": [[383, "skbio-sequence-protein-lowercase"]], "skbio.sequence.Protein.match_frequency": [[384, "skbio-sequence-protein-match-frequency"]], "skbio.sequence.Protein.matches": [[385, "skbio-sequence-protein-matches"]], "skbio.sequence.Protein.mismatch_frequency": [[386, "skbio-sequence-protein-mismatch-frequency"]], "skbio.sequence.Protein.mismatches": [[387, "skbio-sequence-protein-mismatches"]], "skbio.sequence.Protein.nondegenerates": [[388, "skbio-sequence-protein-nondegenerates"]], "skbio.sequence.Protein.read": [[389, "skbio-sequence-protein-read"]], "skbio.sequence.Protein.replace": [[390, "skbio-sequence-protein-replace"]], "skbio.sequence.Protein.stops": [[391, "skbio-sequence-protein-stops"]], "skbio.sequence.Protein.to_definites": [[392, "skbio-sequence-protein-to-definites"]], "skbio.sequence.Protein.to_indices": [[393, "skbio-sequence-protein-to-indices"]], "skbio.sequence.Protein.to_regex": [[394, "skbio-sequence-protein-to-regex"]], "skbio.sequence.Protein.write": [[395, "skbio-sequence-protein-write"]], "skbio.sequence.RNA": [[396, "skbio-sequence-rna"]], "skbio.sequence.RNA.__bool__": [[397, "skbio-sequence-rna-bool"]], "skbio.sequence.RNA.__contains__": [[398, "skbio-sequence-rna-contains"]], "skbio.sequence.RNA.__copy__": [[399, "skbio-sequence-rna-copy"]], "skbio.sequence.RNA.__deepcopy__": [[400, "skbio-sequence-rna-deepcopy"]], "skbio.sequence.RNA.__eq__": [[401, "skbio-sequence-rna-eq"]], "skbio.sequence.RNA.__ge__": [[402, "skbio-sequence-rna-ge"]], "skbio.sequence.RNA.__getitem__": [[403, "skbio-sequence-rna-getitem"]], "skbio.sequence.RNA.__getstate__": [[404, "skbio-sequence-rna-getstate"]], "skbio.sequence.RNA.__gt__": [[405, "skbio-sequence-rna-gt"]], "skbio.sequence.RNA.__iter__": [[406, "skbio-sequence-rna-iter"]], "skbio.sequence.RNA.__le__": [[407, "skbio-sequence-rna-le"]], "skbio.sequence.RNA.__len__": [[408, "skbio-sequence-rna-len"]], "skbio.sequence.RNA.__lt__": [[409, "skbio-sequence-rna-lt"]], "skbio.sequence.RNA.__ne__": [[410, "skbio-sequence-rna-ne"]], "skbio.sequence.RNA.__reversed__": [[411, "skbio-sequence-rna-reversed"]], "skbio.sequence.RNA.__str__": [[412, "skbio-sequence-rna-str"]], "skbio.sequence.RNA.complement": [[413, "skbio-sequence-rna-complement"]], "skbio.sequence.RNA.concat": [[414, "skbio-sequence-rna-concat"]], "skbio.sequence.RNA.count": [[415, "skbio-sequence-rna-count"]], "skbio.sequence.RNA.definites": [[416, "skbio-sequence-rna-definites"]], "skbio.sequence.RNA.degap": [[417, "skbio-sequence-rna-degap"]], "skbio.sequence.RNA.degenerates": [[418, "skbio-sequence-rna-degenerates"]], "skbio.sequence.RNA.distance": [[419, "skbio-sequence-rna-distance"]], "skbio.sequence.RNA.expand_degenerates": [[420, "skbio-sequence-rna-expand-degenerates"]], "skbio.sequence.RNA.find_motifs": [[421, "skbio-sequence-rna-find-motifs"]], "skbio.sequence.RNA.find_with_regex": [[422, "skbio-sequence-rna-find-with-regex"]], "skbio.sequence.RNA.frequencies": [[423, "skbio-sequence-rna-frequencies"]], "skbio.sequence.RNA.gaps": [[424, "skbio-sequence-rna-gaps"]], "skbio.sequence.RNA.gc_content": [[425, "skbio-sequence-rna-gc-content"]], "skbio.sequence.RNA.gc_frequency": [[426, "skbio-sequence-rna-gc-frequency"]], "skbio.sequence.RNA.has_definites": [[427, "skbio-sequence-rna-has-definites"]], "skbio.sequence.RNA.has_degenerates": [[428, "skbio-sequence-rna-has-degenerates"]], "skbio.sequence.RNA.has_gaps": [[429, "skbio-sequence-rna-has-gaps"]], "skbio.sequence.RNA.has_interval_metadata": [[430, "skbio-sequence-rna-has-interval-metadata"]], "skbio.sequence.RNA.has_metadata": [[431, "skbio-sequence-rna-has-metadata"]], "skbio.sequence.RNA.has_nondegenerates": [[432, "skbio-sequence-rna-has-nondegenerates"]], "skbio.sequence.RNA.has_positional_metadata": [[433, "skbio-sequence-rna-has-positional-metadata"]], "skbio.sequence.RNA.index": [[434, "skbio-sequence-rna-index"]], "skbio.sequence.RNA.is_reverse_complement": [[435, "skbio-sequence-rna-is-reverse-complement"]], "skbio.sequence.RNA.iter_contiguous": [[436, "skbio-sequence-rna-iter-contiguous"]], "skbio.sequence.RNA.iter_kmers": [[437, "skbio-sequence-rna-iter-kmers"]], "skbio.sequence.RNA.kmer_frequencies": [[438, "skbio-sequence-rna-kmer-frequencies"]], "skbio.sequence.RNA.lowercase": [[439, "skbio-sequence-rna-lowercase"]], "skbio.sequence.RNA.match_frequency": [[440, "skbio-sequence-rna-match-frequency"]], "skbio.sequence.RNA.matches": [[441, "skbio-sequence-rna-matches"]], "skbio.sequence.RNA.mismatch_frequency": [[442, "skbio-sequence-rna-mismatch-frequency"]], "skbio.sequence.RNA.mismatches": [[443, "skbio-sequence-rna-mismatches"]], "skbio.sequence.RNA.nondegenerates": [[444, "skbio-sequence-rna-nondegenerates"]], "skbio.sequence.RNA.read": [[445, "skbio-sequence-rna-read"]], "skbio.sequence.RNA.replace": [[446, "skbio-sequence-rna-replace"]], "skbio.sequence.RNA.reverse_complement": [[447, "skbio-sequence-rna-reverse-complement"]], "skbio.sequence.RNA.reverse_transcribe": [[448, "skbio-sequence-rna-reverse-transcribe"]], "skbio.sequence.RNA.to_definites": [[449, "skbio-sequence-rna-to-definites"]], "skbio.sequence.RNA.to_indices": [[450, "skbio-sequence-rna-to-indices"]], "skbio.sequence.RNA.to_regex": [[451, "skbio-sequence-rna-to-regex"]], "skbio.sequence.RNA.translate": [[452, "skbio-sequence-rna-translate"]], "skbio.sequence.RNA.translate_six_frames": [[453, "skbio-sequence-rna-translate-six-frames"]], "skbio.sequence.RNA.write": [[454, "skbio-sequence-rna-write"]], "skbio.sequence.Sequence": [[455, "skbio-sequence-sequence"]], "skbio.sequence.Sequence.__bool__": [[456, "skbio-sequence-sequence-bool"]], "skbio.sequence.Sequence.__contains__": [[457, "skbio-sequence-sequence-contains"]], "skbio.sequence.Sequence.__copy__": [[458, "skbio-sequence-sequence-copy"]], "skbio.sequence.Sequence.__deepcopy__": [[459, "skbio-sequence-sequence-deepcopy"]], "skbio.sequence.Sequence.__eq__": [[460, "skbio-sequence-sequence-eq"]], "skbio.sequence.Sequence.__ge__": [[461, "skbio-sequence-sequence-ge"]], "skbio.sequence.Sequence.__getitem__": [[462, "skbio-sequence-sequence-getitem"]], "skbio.sequence.Sequence.__getstate__": [[463, "skbio-sequence-sequence-getstate"]], "skbio.sequence.Sequence.__gt__": [[464, "skbio-sequence-sequence-gt"]], "skbio.sequence.Sequence.__iter__": [[465, "skbio-sequence-sequence-iter"]], "skbio.sequence.Sequence.__le__": [[466, "skbio-sequence-sequence-le"]], "skbio.sequence.Sequence.__len__": [[467, "skbio-sequence-sequence-len"]], "skbio.sequence.Sequence.__lt__": [[468, "skbio-sequence-sequence-lt"]], "skbio.sequence.Sequence.__ne__": [[469, "skbio-sequence-sequence-ne"]], "skbio.sequence.Sequence.__reversed__": [[470, "skbio-sequence-sequence-reversed"]], "skbio.sequence.Sequence.__str__": [[471, "skbio-sequence-sequence-str"]], "skbio.sequence.Sequence.concat": [[472, "skbio-sequence-sequence-concat"]], "skbio.sequence.Sequence.count": [[473, "skbio-sequence-sequence-count"]], "skbio.sequence.Sequence.distance": [[474, "skbio-sequence-sequence-distance"]], "skbio.sequence.Sequence.find_with_regex": [[475, "skbio-sequence-sequence-find-with-regex"]], "skbio.sequence.Sequence.frequencies": [[476, "skbio-sequence-sequence-frequencies"]], "skbio.sequence.Sequence.has_interval_metadata": [[477, "skbio-sequence-sequence-has-interval-metadata"]], "skbio.sequence.Sequence.has_metadata": [[478, "skbio-sequence-sequence-has-metadata"]], "skbio.sequence.Sequence.has_positional_metadata": [[479, "skbio-sequence-sequence-has-positional-metadata"]], "skbio.sequence.Sequence.index": [[480, "skbio-sequence-sequence-index"]], "skbio.sequence.Sequence.iter_contiguous": [[481, "skbio-sequence-sequence-iter-contiguous"]], "skbio.sequence.Sequence.iter_kmers": [[482, "skbio-sequence-sequence-iter-kmers"]], "skbio.sequence.Sequence.kmer_frequencies": [[483, "skbio-sequence-sequence-kmer-frequencies"]], "skbio.sequence.Sequence.lowercase": [[484, "skbio-sequence-sequence-lowercase"]], "skbio.sequence.Sequence.match_frequency": [[485, "skbio-sequence-sequence-match-frequency"]], "skbio.sequence.Sequence.matches": [[486, "skbio-sequence-sequence-matches"]], "skbio.sequence.Sequence.mismatch_frequency": [[487, "skbio-sequence-sequence-mismatch-frequency"]], "skbio.sequence.Sequence.mismatches": [[488, "skbio-sequence-sequence-mismatches"]], "skbio.sequence.Sequence.read": [[489, "skbio-sequence-sequence-read"]], "skbio.sequence.Sequence.replace": [[490, "skbio-sequence-sequence-replace"]], "skbio.sequence.Sequence.to_indices": [[491, "skbio-sequence-sequence-to-indices"]], "skbio.sequence.Sequence.write": [[492, "skbio-sequence-sequence-write"]], "skbio.sequence.SubstitutionMatrix": [[493, "skbio-sequence-substitutionmatrix"]], "skbio.sequence.SubstitutionMatrix.__contains__": [[494, "skbio-sequence-substitutionmatrix-contains"]], "skbio.sequence.SubstitutionMatrix.__eq__": [[495, "skbio-sequence-substitutionmatrix-eq"]], "skbio.sequence.SubstitutionMatrix.__ge__": [[496, "skbio-sequence-substitutionmatrix-ge"]], "skbio.sequence.SubstitutionMatrix.__getitem__": [[497, "skbio-sequence-substitutionmatrix-getitem"]], "skbio.sequence.SubstitutionMatrix.__getstate__": [[498, "skbio-sequence-substitutionmatrix-getstate"]], "skbio.sequence.SubstitutionMatrix.__gt__": [[499, "skbio-sequence-substitutionmatrix-gt"]], "skbio.sequence.SubstitutionMatrix.__le__": [[500, "skbio-sequence-substitutionmatrix-le"]], "skbio.sequence.SubstitutionMatrix.__lt__": [[501, "skbio-sequence-substitutionmatrix-lt"]], "skbio.sequence.SubstitutionMatrix.__ne__": [[502, "skbio-sequence-substitutionmatrix-ne"]], "skbio.sequence.SubstitutionMatrix.__str__": [[503, "skbio-sequence-substitutionmatrix-str"]], "skbio.sequence.SubstitutionMatrix.between": [[504, "skbio-sequence-substitutionmatrix-between"]], "skbio.sequence.SubstitutionMatrix.by_name": [[505, "skbio-sequence-substitutionmatrix-by-name"]], "skbio.sequence.SubstitutionMatrix.copy": [[506, "skbio-sequence-substitutionmatrix-copy"]], "skbio.sequence.SubstitutionMatrix.filter": [[507, "skbio-sequence-substitutionmatrix-filter"]], "skbio.sequence.SubstitutionMatrix.from_dict": [[508, "skbio-sequence-substitutionmatrix-from-dict"]], "skbio.sequence.SubstitutionMatrix.from_iterable": [[509, "skbio-sequence-substitutionmatrix-from-iterable"]], "skbio.sequence.SubstitutionMatrix.get_names": [[510, "skbio-sequence-substitutionmatrix-get-names"]], "skbio.sequence.SubstitutionMatrix.identity": [[511, "skbio-sequence-substitutionmatrix-identity"]], "skbio.sequence.SubstitutionMatrix.index": [[512, "skbio-sequence-substitutionmatrix-index"]], "skbio.sequence.SubstitutionMatrix.plot": [[513, "skbio-sequence-substitutionmatrix-plot"]], "skbio.sequence.SubstitutionMatrix.read": [[514, "skbio-sequence-substitutionmatrix-read"]], "skbio.sequence.SubstitutionMatrix.redundant_form": [[515, "skbio-sequence-substitutionmatrix-redundant-form"]], "skbio.sequence.SubstitutionMatrix.to_data_frame": [[516, "skbio-sequence-substitutionmatrix-to-data-frame"]], "skbio.sequence.SubstitutionMatrix.to_dict": [[517, "skbio-sequence-substitutionmatrix-to-dict"]], "skbio.sequence.SubstitutionMatrix.transpose": [[518, "skbio-sequence-substitutionmatrix-transpose"]], "skbio.sequence.SubstitutionMatrix.within": [[519, "skbio-sequence-substitutionmatrix-within"]], "skbio.sequence.SubstitutionMatrix.write": [[520, "skbio-sequence-substitutionmatrix-write"]], "Sequence distance metrics (skbio.sequence.distance)": [[521, "sequence-distance-metrics-skbio-sequence-distance"]], "skbio.sequence.distance.hamming": [[522, "skbio-sequence-distance-hamming"]], "skbio.sequence.distance.kmer_distance": [[523, "skbio-sequence-distance-kmer-distance"]], "Composition Statistics (skbio.stats.composition)": [[524, "composition-statistics-skbio-stats-composition"]], "skbio.stats.composition.alr": [[525, "skbio-stats-composition-alr"]], "skbio.stats.composition.alr_inv": [[526, "skbio-stats-composition-alr-inv"]], "skbio.stats.composition.ancom": [[527, "skbio-stats-composition-ancom"]], "skbio.stats.composition.centralize": [[528, "skbio-stats-composition-centralize"]], "skbio.stats.composition.closure": [[529, "skbio-stats-composition-closure"]], "skbio.stats.composition.clr": [[530, "skbio-stats-composition-clr"]], "skbio.stats.composition.clr_inv": [[531, "skbio-stats-composition-clr-inv"]], "skbio.stats.composition.dirmult_ttest": [[532, "skbio-stats-composition-dirmult-ttest"]], "skbio.stats.composition.ilr": [[533, "skbio-stats-composition-ilr"]], "skbio.stats.composition.ilr_inv": [[534, "skbio-stats-composition-ilr-inv"]], "skbio.stats.composition.inner": [[535, "skbio-stats-composition-inner"]], "skbio.stats.composition.multiplicative_replacement": [[536, "skbio-stats-composition-multiplicative-replacement"]], "skbio.stats.composition.pairwise_vlr": [[537, "skbio-stats-composition-pairwise-vlr"]], "skbio.stats.composition.perturb": [[538, "skbio-stats-composition-perturb"]], "skbio.stats.composition.perturb_inv": [[539, "skbio-stats-composition-perturb-inv"]], "skbio.stats.composition.power": [[540, "skbio-stats-composition-power"]], "skbio.stats.composition.sbp_basis": [[541, "skbio-stats-composition-sbp-basis"]], "skbio.stats.composition.tree_basis": [[542, "skbio-stats-composition-tree-basis"]], "skbio.stats.composition.vlr": [[543, "skbio-stats-composition-vlr"]], "Distance matrices and distance-based statistics (skbio.stats.distance)": [[544, "distance-matrices-and-distance-based-statistics-skbio-stats-distance"]], "Data Structures: DissimilarityMatrix and DistanceMatrix": [[544, "data-structures-dissimilaritymatrix-and-distancematrix"]], "Distance-based statistics": [[544, "distance-based-statistics"]], "Categorical Variable Stats": [[544, "categorical-variable-stats"]], "Continuous Variable Stats": [[544, "continuous-variable-stats"]], "Distance Matrix Comparisons": [[544, "distance-matrix-comparisons"]], "skbio.stats.distance.DissimilarityMatrix": [[545, "skbio-stats-distance-dissimilaritymatrix"]], "skbio.stats.distance.DissimilarityMatrix.__contains__": [[546, "skbio-stats-distance-dissimilaritymatrix-contains"]], "skbio.stats.distance.DissimilarityMatrix.__eq__": [[547, "skbio-stats-distance-dissimilaritymatrix-eq"]], "skbio.stats.distance.DissimilarityMatrix.__ge__": [[548, "skbio-stats-distance-dissimilaritymatrix-ge"]], "skbio.stats.distance.DissimilarityMatrix.__getitem__": [[549, "skbio-stats-distance-dissimilaritymatrix-getitem"]], "skbio.stats.distance.DissimilarityMatrix.__getstate__": [[550, "skbio-stats-distance-dissimilaritymatrix-getstate"]], "skbio.stats.distance.DissimilarityMatrix.__gt__": [[551, "skbio-stats-distance-dissimilaritymatrix-gt"]], "skbio.stats.distance.DissimilarityMatrix.__le__": [[552, "skbio-stats-distance-dissimilaritymatrix-le"]], "skbio.stats.distance.DissimilarityMatrix.__lt__": [[553, "skbio-stats-distance-dissimilaritymatrix-lt"]], "skbio.stats.distance.DissimilarityMatrix.__ne__": [[554, "skbio-stats-distance-dissimilaritymatrix-ne"]], "skbio.stats.distance.DissimilarityMatrix.__str__": [[555, "skbio-stats-distance-dissimilaritymatrix-str"]], "skbio.stats.distance.DissimilarityMatrix.between": [[556, "skbio-stats-distance-dissimilaritymatrix-between"]], "skbio.stats.distance.DissimilarityMatrix.copy": [[557, "skbio-stats-distance-dissimilaritymatrix-copy"]], "skbio.stats.distance.DissimilarityMatrix.filter": [[558, "skbio-stats-distance-dissimilaritymatrix-filter"]], "skbio.stats.distance.DissimilarityMatrix.from_iterable": [[559, "skbio-stats-distance-dissimilaritymatrix-from-iterable"]], "skbio.stats.distance.DissimilarityMatrix.index": [[560, "skbio-stats-distance-dissimilaritymatrix-index"]], "skbio.stats.distance.DissimilarityMatrix.plot": [[561, "skbio-stats-distance-dissimilaritymatrix-plot"]], "skbio.stats.distance.DissimilarityMatrix.read": [[562, "skbio-stats-distance-dissimilaritymatrix-read"]], "skbio.stats.distance.DissimilarityMatrix.redundant_form": [[563, "skbio-stats-distance-dissimilaritymatrix-redundant-form"]], "skbio.stats.distance.DissimilarityMatrix.to_data_frame": [[564, "skbio-stats-distance-dissimilaritymatrix-to-data-frame"]], "skbio.stats.distance.DissimilarityMatrix.transpose": [[565, "skbio-stats-distance-dissimilaritymatrix-transpose"]], "skbio.stats.distance.DissimilarityMatrix.within": [[566, "skbio-stats-distance-dissimilaritymatrix-within"]], "skbio.stats.distance.DissimilarityMatrix.write": [[567, "skbio-stats-distance-dissimilaritymatrix-write"]], "skbio.stats.distance.DissimilarityMatrixError": [[568, "skbio-stats-distance-dissimilaritymatrixerror"]], "skbio.stats.distance.DistanceMatrix": [[569, "skbio-stats-distance-distancematrix"]], "skbio.stats.distance.DistanceMatrix.__contains__": [[570, "skbio-stats-distance-distancematrix-contains"]], "skbio.stats.distance.DistanceMatrix.__eq__": [[571, "skbio-stats-distance-distancematrix-eq"]], "skbio.stats.distance.DistanceMatrix.__ge__": [[572, "skbio-stats-distance-distancematrix-ge"]], "skbio.stats.distance.DistanceMatrix.__getitem__": [[573, "skbio-stats-distance-distancematrix-getitem"]], "skbio.stats.distance.DistanceMatrix.__getstate__": [[574, "skbio-stats-distance-distancematrix-getstate"]], "skbio.stats.distance.DistanceMatrix.__gt__": [[575, "skbio-stats-distance-distancematrix-gt"]], "skbio.stats.distance.DistanceMatrix.__le__": [[576, "skbio-stats-distance-distancematrix-le"]], "skbio.stats.distance.DistanceMatrix.__lt__": [[577, "skbio-stats-distance-distancematrix-lt"]], "skbio.stats.distance.DistanceMatrix.__ne__": [[578, "skbio-stats-distance-distancematrix-ne"]], "skbio.stats.distance.DistanceMatrix.__str__": [[579, "skbio-stats-distance-distancematrix-str"]], "skbio.stats.distance.DistanceMatrix.between": [[580, "skbio-stats-distance-distancematrix-between"]], "skbio.stats.distance.DistanceMatrix.condensed_form": [[581, "skbio-stats-distance-distancematrix-condensed-form"]], "skbio.stats.distance.DistanceMatrix.copy": [[582, "skbio-stats-distance-distancematrix-copy"]], "skbio.stats.distance.DistanceMatrix.filter": [[583, "skbio-stats-distance-distancematrix-filter"]], "skbio.stats.distance.DistanceMatrix.from_iterable": [[584, "skbio-stats-distance-distancematrix-from-iterable"]], "skbio.stats.distance.DistanceMatrix.index": [[585, "skbio-stats-distance-distancematrix-index"]], "skbio.stats.distance.DistanceMatrix.permute": [[586, "skbio-stats-distance-distancematrix-permute"]], "skbio.stats.distance.DistanceMatrix.plot": [[587, "skbio-stats-distance-distancematrix-plot"]], "skbio.stats.distance.DistanceMatrix.read": [[588, "skbio-stats-distance-distancematrix-read"]], "skbio.stats.distance.DistanceMatrix.redundant_form": [[589, "skbio-stats-distance-distancematrix-redundant-form"]], "skbio.stats.distance.DistanceMatrix.to_data_frame": [[590, "skbio-stats-distance-distancematrix-to-data-frame"]], "skbio.stats.distance.DistanceMatrix.to_series": [[591, "skbio-stats-distance-distancematrix-to-series"]], "skbio.stats.distance.DistanceMatrix.transpose": [[592, "skbio-stats-distance-distancematrix-transpose"]], "skbio.stats.distance.DistanceMatrix.within": [[593, "skbio-stats-distance-distancematrix-within"]], "skbio.stats.distance.DistanceMatrix.write": [[594, "skbio-stats-distance-distancematrix-write"]], "skbio.stats.distance.DistanceMatrixError": [[595, "skbio-stats-distance-distancematrixerror"]], "skbio.stats.distance.MissingIDError": [[596, "skbio-stats-distance-missingiderror"]], "skbio.stats.distance.anosim": [[597, "skbio-stats-distance-anosim"]], "skbio.stats.distance.bioenv": [[598, "skbio-stats-distance-bioenv"]], "skbio.stats.distance.mantel": [[599, "skbio-stats-distance-mantel"]], "skbio.stats.distance.permanova": [[600, "skbio-stats-distance-permanova"]], "skbio.stats.distance.permdisp": [[601, "skbio-stats-distance-permdisp"]], "skbio.stats.distance.pwmantel": [[602, "skbio-stats-distance-pwmantel"]], "skbio.stats.distance.randdm": [[603, "skbio-stats-distance-randdm"]], "Evolutionary statistics (skbio.stats.evolve)": [[604, "evolutionary-statistics-skbio-stats-evolve"]], "Cophylogenetic methods": [[604, "cophylogenetic-methods"]], "skbio.stats.evolve.hommola_cospeciation": [[605, "skbio-stats-evolve-hommola-cospeciation"]], "Gradient analyses (skbio.stats.gradient)": [[606, "gradient-analyses-skbio-stats-gradient"]], "skbio.stats.gradient.AverageGradientANOVA": [[607, "skbio-stats-gradient-averagegradientanova"]], "skbio.stats.gradient.AverageGradientANOVA.__eq__": [[608, "skbio-stats-gradient-averagegradientanova-eq"]], "skbio.stats.gradient.AverageGradientANOVA.__ge__": [[609, "skbio-stats-gradient-averagegradientanova-ge"]], "skbio.stats.gradient.AverageGradientANOVA.__getstate__": [[610, "skbio-stats-gradient-averagegradientanova-getstate"]], "skbio.stats.gradient.AverageGradientANOVA.__gt__": [[611, "skbio-stats-gradient-averagegradientanova-gt"]], "skbio.stats.gradient.AverageGradientANOVA.__hash__": [[612, "skbio-stats-gradient-averagegradientanova-hash"]], "skbio.stats.gradient.AverageGradientANOVA.__le__": [[613, "skbio-stats-gradient-averagegradientanova-le"]], "skbio.stats.gradient.AverageGradientANOVA.__lt__": [[614, "skbio-stats-gradient-averagegradientanova-lt"]], "skbio.stats.gradient.AverageGradientANOVA.__ne__": [[615, "skbio-stats-gradient-averagegradientanova-ne"]], "skbio.stats.gradient.AverageGradientANOVA.__str__": [[616, "skbio-stats-gradient-averagegradientanova-str"]], "skbio.stats.gradient.AverageGradientANOVA.get_trajectories": [[617, "skbio-stats-gradient-averagegradientanova-get-trajectories"]], "skbio.stats.gradient.CategoryResults": [[618, "skbio-stats-gradient-categoryresults"]], "skbio.stats.gradient.CategoryResults.__eq__": [[619, "skbio-stats-gradient-categoryresults-eq"]], "skbio.stats.gradient.CategoryResults.__ge__": [[620, "skbio-stats-gradient-categoryresults-ge"]], "skbio.stats.gradient.CategoryResults.__getstate__": [[621, "skbio-stats-gradient-categoryresults-getstate"]], "skbio.stats.gradient.CategoryResults.__gt__": [[622, "skbio-stats-gradient-categoryresults-gt"]], "skbio.stats.gradient.CategoryResults.__hash__": [[623, "skbio-stats-gradient-categoryresults-hash"]], "skbio.stats.gradient.CategoryResults.__le__": [[624, "skbio-stats-gradient-categoryresults-le"]], "skbio.stats.gradient.CategoryResults.__lt__": [[625, "skbio-stats-gradient-categoryresults-lt"]], "skbio.stats.gradient.CategoryResults.__ne__": [[626, "skbio-stats-gradient-categoryresults-ne"]], "skbio.stats.gradient.CategoryResults.__str__": [[627, "skbio-stats-gradient-categoryresults-str"]], "skbio.stats.gradient.CategoryResults.to_files": [[628, "skbio-stats-gradient-categoryresults-to-files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[629, "skbio-stats-gradient-firstdifferencegradientanova"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__": [[630, "skbio-stats-gradient-firstdifferencegradientanova-eq"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__": [[631, "skbio-stats-gradient-firstdifferencegradientanova-ge"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__": [[632, "skbio-stats-gradient-firstdifferencegradientanova-getstate"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__": [[633, "skbio-stats-gradient-firstdifferencegradientanova-gt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__": [[634, "skbio-stats-gradient-firstdifferencegradientanova-hash"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__": [[635, "skbio-stats-gradient-firstdifferencegradientanova-le"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__": [[636, "skbio-stats-gradient-firstdifferencegradientanova-lt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__": [[637, "skbio-stats-gradient-firstdifferencegradientanova-ne"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__": [[638, "skbio-stats-gradient-firstdifferencegradientanova-str"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories": [[639, "skbio-stats-gradient-firstdifferencegradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVA": [[640, "skbio-stats-gradient-gradientanova"]], "skbio.stats.gradient.GradientANOVA.__eq__": [[641, "skbio-stats-gradient-gradientanova-eq"]], "skbio.stats.gradient.GradientANOVA.__ge__": [[642, "skbio-stats-gradient-gradientanova-ge"]], "skbio.stats.gradient.GradientANOVA.__getstate__": [[643, "skbio-stats-gradient-gradientanova-getstate"]], "skbio.stats.gradient.GradientANOVA.__gt__": [[644, "skbio-stats-gradient-gradientanova-gt"]], "skbio.stats.gradient.GradientANOVA.__hash__": [[645, "skbio-stats-gradient-gradientanova-hash"]], "skbio.stats.gradient.GradientANOVA.__le__": [[646, "skbio-stats-gradient-gradientanova-le"]], "skbio.stats.gradient.GradientANOVA.__lt__": [[647, "skbio-stats-gradient-gradientanova-lt"]], "skbio.stats.gradient.GradientANOVA.__ne__": [[648, "skbio-stats-gradient-gradientanova-ne"]], "skbio.stats.gradient.GradientANOVA.__str__": [[649, "skbio-stats-gradient-gradientanova-str"]], "skbio.stats.gradient.GradientANOVA.get_trajectories": [[650, "skbio-stats-gradient-gradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[651, "skbio-stats-gradient-gradientanovaresults"]], "skbio.stats.gradient.GradientANOVAResults.__eq__": [[652, "skbio-stats-gradient-gradientanovaresults-eq"]], "skbio.stats.gradient.GradientANOVAResults.__ge__": [[653, "skbio-stats-gradient-gradientanovaresults-ge"]], "skbio.stats.gradient.GradientANOVAResults.__getstate__": [[654, "skbio-stats-gradient-gradientanovaresults-getstate"]], "skbio.stats.gradient.GradientANOVAResults.__gt__": [[655, "skbio-stats-gradient-gradientanovaresults-gt"]], "skbio.stats.gradient.GradientANOVAResults.__hash__": [[656, "skbio-stats-gradient-gradientanovaresults-hash"]], "skbio.stats.gradient.GradientANOVAResults.__le__": [[657, "skbio-stats-gradient-gradientanovaresults-le"]], "skbio.stats.gradient.GradientANOVAResults.__lt__": [[658, "skbio-stats-gradient-gradientanovaresults-lt"]], "skbio.stats.gradient.GradientANOVAResults.__ne__": [[659, "skbio-stats-gradient-gradientanovaresults-ne"]], "skbio.stats.gradient.GradientANOVAResults.__str__": [[660, "skbio-stats-gradient-gradientanovaresults-str"]], "skbio.stats.gradient.GradientANOVAResults.to_files": [[661, "skbio-stats-gradient-gradientanovaresults-to-files"]], "skbio.stats.gradient.GroupResults": [[662, "skbio-stats-gradient-groupresults"]], "skbio.stats.gradient.GroupResults.__eq__": [[663, "skbio-stats-gradient-groupresults-eq"]], "skbio.stats.gradient.GroupResults.__ge__": [[664, "skbio-stats-gradient-groupresults-ge"]], "skbio.stats.gradient.GroupResults.__getstate__": [[665, "skbio-stats-gradient-groupresults-getstate"]], "skbio.stats.gradient.GroupResults.__gt__": [[666, "skbio-stats-gradient-groupresults-gt"]], "skbio.stats.gradient.GroupResults.__hash__": [[667, "skbio-stats-gradient-groupresults-hash"]], "skbio.stats.gradient.GroupResults.__le__": [[668, "skbio-stats-gradient-groupresults-le"]], "skbio.stats.gradient.GroupResults.__lt__": [[669, "skbio-stats-gradient-groupresults-lt"]], "skbio.stats.gradient.GroupResults.__ne__": [[670, "skbio-stats-gradient-groupresults-ne"]], "skbio.stats.gradient.GroupResults.__str__": [[671, "skbio-stats-gradient-groupresults-str"]], "skbio.stats.gradient.GroupResults.to_files": [[672, "skbio-stats-gradient-groupresults-to-files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[673, "skbio-stats-gradient-trajectorygradientanova"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__": [[674, "skbio-stats-gradient-trajectorygradientanova-eq"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__": [[675, "skbio-stats-gradient-trajectorygradientanova-ge"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__": [[676, "skbio-stats-gradient-trajectorygradientanova-getstate"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__": [[677, "skbio-stats-gradient-trajectorygradientanova-gt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__": [[678, "skbio-stats-gradient-trajectorygradientanova-hash"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__le__": [[679, "skbio-stats-gradient-trajectorygradientanova-le"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__": [[680, "skbio-stats-gradient-trajectorygradientanova-lt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__": [[681, "skbio-stats-gradient-trajectorygradientanova-ne"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__str__": [[682, "skbio-stats-gradient-trajectorygradientanova-str"]], "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories": [[683, "skbio-stats-gradient-trajectorygradientanova-get-trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[684, "skbio-stats-gradient-windowdifferencegradientanova"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__": [[685, "skbio-stats-gradient-windowdifferencegradientanova-eq"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__": [[686, "skbio-stats-gradient-windowdifferencegradientanova-ge"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__": [[687, "skbio-stats-gradient-windowdifferencegradientanova-getstate"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__": [[688, "skbio-stats-gradient-windowdifferencegradientanova-gt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__": [[689, "skbio-stats-gradient-windowdifferencegradientanova-hash"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__": [[690, "skbio-stats-gradient-windowdifferencegradientanova-le"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__": [[691, "skbio-stats-gradient-windowdifferencegradientanova-lt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__": [[692, "skbio-stats-gradient-windowdifferencegradientanova-ne"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__": [[693, "skbio-stats-gradient-windowdifferencegradientanova-str"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories": [[694, "skbio-stats-gradient-windowdifferencegradientanova-get-trajectories"]], "skbio.stats.isubsample": [[695, "skbio-stats-isubsample"]], "Ordination methods (skbio.stats.ordination)": [[696, "ordination-methods-skbio-stats-ordination"]], "Ordination Functions": [[696, "ordination-functions"]], "Utility Functions": [[696, "utility-functions"], [877, "utility-functions"]], "skbio.stats.ordination.OrdinationResults": [[697, "skbio-stats-ordination-ordinationresults"]], "skbio.stats.ordination.OrdinationResults.__eq__": [[698, "skbio-stats-ordination-ordinationresults-eq"]], "skbio.stats.ordination.OrdinationResults.__ge__": [[699, "skbio-stats-ordination-ordinationresults-ge"]], "skbio.stats.ordination.OrdinationResults.__getstate__": [[700, "skbio-stats-ordination-ordinationresults-getstate"]], "skbio.stats.ordination.OrdinationResults.__gt__": [[701, "skbio-stats-ordination-ordinationresults-gt"]], "skbio.stats.ordination.OrdinationResults.__hash__": [[702, "skbio-stats-ordination-ordinationresults-hash"]], "skbio.stats.ordination.OrdinationResults.__le__": [[703, "skbio-stats-ordination-ordinationresults-le"]], "skbio.stats.ordination.OrdinationResults.__lt__": [[704, "skbio-stats-ordination-ordinationresults-lt"]], "skbio.stats.ordination.OrdinationResults.__ne__": [[705, "skbio-stats-ordination-ordinationresults-ne"]], "skbio.stats.ordination.OrdinationResults.__str__": [[706, "skbio-stats-ordination-ordinationresults-str"]], "skbio.stats.ordination.OrdinationResults.plot": [[707, "skbio-stats-ordination-ordinationresults-plot"]], "skbio.stats.ordination.OrdinationResults.read": [[708, "skbio-stats-ordination-ordinationresults-read"]], "skbio.stats.ordination.OrdinationResults.write": [[709, "skbio-stats-ordination-ordinationresults-write"]], "skbio.stats.ordination.ca": [[710, "skbio-stats-ordination-ca"]], "skbio.stats.ordination.cca": [[711, "skbio-stats-ordination-cca"]], "skbio.stats.ordination.corr": [[712, "skbio-stats-ordination-corr"]], "skbio.stats.ordination.e_matrix": [[713, "skbio-stats-ordination-e-matrix"]], "skbio.stats.ordination.f_matrix": [[714, "skbio-stats-ordination-f-matrix"]], "skbio.stats.ordination.mean_and_std": [[715, "skbio-stats-ordination-mean-and-std"]], "skbio.stats.ordination.pcoa": [[716, "skbio-stats-ordination-pcoa"]], "skbio.stats.ordination.pcoa_biplot": [[717, "skbio-stats-ordination-pcoa-biplot"]], "skbio.stats.ordination.rda": [[718, "skbio-stats-ordination-rda"]], "skbio.stats.ordination.scale": [[719, "skbio-stats-ordination-scale"]], "skbio.stats.ordination.svd_rank": [[720, "skbio-stats-ordination-svd-rank"]], "Empirical Power Estimation (skbio.stats.power)": [[721, "empirical-power-estimation-skbio-stats-power"]], "skbio.stats.power.confidence_bound": [[722, "skbio-stats-power-confidence-bound"]], "skbio.stats.power.paired_subsamples": [[723, "skbio-stats-power-paired-subsamples"]], "skbio.stats.power.subsample_paired_power": [[724, "skbio-stats-power-subsample-paired-power"]], "skbio.stats.power.subsample_power": [[725, "skbio-stats-power-subsample-power"]], "skbio.stats.subsample_counts": [[726, "skbio-stats-subsample-counts"]], "skbio.tree.DuplicateNodeError": [[727, "skbio-tree-duplicatenodeerror"]], "skbio.tree.MissingNodeError": [[728, "skbio-tree-missingnodeerror"]], "skbio.tree.NoLengthError": [[729, "skbio-tree-nolengtherror"]], "skbio.tree.NoParentError": [[730, "skbio-tree-noparenterror"]], "skbio.tree.TreeError": [[731, "skbio-tree-treeerror"]], "skbio.tree.TreeNode": [[732, "skbio-tree-treenode"]], "skbio.tree.TreeNode.__copy__": [[733, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.__deepcopy__": [[734, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.__eq__": [[735, "skbio-tree-treenode-eq"]], "skbio.tree.TreeNode.__ge__": [[736, "skbio-tree-treenode-ge"]], "skbio.tree.TreeNode.__getitem__": [[737, "skbio-tree-treenode-getitem"]], "skbio.tree.TreeNode.__getstate__": [[738, "skbio-tree-treenode-getstate"]], "skbio.tree.TreeNode.__gt__": [[739, "skbio-tree-treenode-gt"]], "skbio.tree.TreeNode.__hash__": [[740, "skbio-tree-treenode-hash"]], "skbio.tree.TreeNode.__iter__": [[741, "skbio-tree-treenode-iter"]], "skbio.tree.TreeNode.__le__": [[742, "skbio-tree-treenode-le"]], "skbio.tree.TreeNode.__len__": [[743, "skbio-tree-treenode-len"]], "skbio.tree.TreeNode.__lt__": [[744, "skbio-tree-treenode-lt"]], "skbio.tree.TreeNode.__ne__": [[745, "skbio-tree-treenode-ne"]], "skbio.tree.TreeNode.__str__": [[746, "skbio-tree-treenode-str"]], "skbio.tree.TreeNode.accumulate_to_ancestor": [[747, "skbio-tree-treenode-accumulate-to-ancestor"]], "skbio.tree.TreeNode.ancestors": [[748, "skbio-tree-treenode-ancestors"]], "skbio.tree.TreeNode.append": [[749, "skbio-tree-treenode-append"]], "skbio.tree.TreeNode.ascii_art": [[750, "skbio-tree-treenode-ascii-art"]], "skbio.tree.TreeNode.assign_ids": [[751, "skbio-tree-treenode-assign-ids"]], "skbio.tree.TreeNode.assign_supports": [[752, "skbio-tree-treenode-assign-supports"]], "skbio.tree.TreeNode.bifurcate": [[753, "skbio-tree-treenode-bifurcate"]], "skbio.tree.TreeNode.cache_attr": [[754, "skbio-tree-treenode-cache-attr"]], "skbio.tree.TreeNode.compare_rfd": [[755, "skbio-tree-treenode-compare-rfd"]], "skbio.tree.TreeNode.compare_subsets": [[756, "skbio-tree-treenode-compare-subsets"]], "skbio.tree.TreeNode.compare_tip_distances": [[757, "skbio-tree-treenode-compare-tip-distances"]], "skbio.tree.TreeNode.copy": [[758, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.count": [[759, "skbio-tree-treenode-count"]], "skbio.tree.TreeNode.create_caches": [[760, "skbio-tree-treenode-create-caches"]], "skbio.tree.TreeNode.deepcopy": [[761, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.descending_branch_length": [[762, "skbio-tree-treenode-descending-branch-length"]], "skbio.tree.TreeNode.distance": [[763, "skbio-tree-treenode-distance"]], "skbio.tree.TreeNode.extend": [[764, "skbio-tree-treenode-extend"]], "skbio.tree.TreeNode.find": [[765, "skbio-tree-treenode-find"]], "skbio.tree.TreeNode.find_all": [[766, "skbio-tree-treenode-find-all"]], "skbio.tree.TreeNode.find_by_func": [[767, "skbio-tree-treenode-find-by-func"]], "skbio.tree.TreeNode.find_by_id": [[768, "skbio-tree-treenode-find-by-id"]], "skbio.tree.TreeNode.from_linkage_matrix": [[769, "skbio-tree-treenode-from-linkage-matrix"]], "skbio.tree.TreeNode.from_taxdump": [[770, "skbio-tree-treenode-from-taxdump"]], "skbio.tree.TreeNode.from_taxonomy": [[771, "skbio-tree-treenode-from-taxonomy"]], "skbio.tree.TreeNode.get_max_distance": [[772, "skbio-tree-treenode-get-max-distance"]], "skbio.tree.TreeNode.has_children": [[773, "skbio-tree-treenode-has-children"]], "skbio.tree.TreeNode.index_tree": [[774, "skbio-tree-treenode-index-tree"]], "skbio.tree.TreeNode.invalidate_caches": [[775, "skbio-tree-treenode-invalidate-caches"]], "skbio.tree.TreeNode.is_root": [[776, "skbio-tree-treenode-is-root"]], "skbio.tree.TreeNode.is_tip": [[777, "skbio-tree-treenode-is-tip"]], "skbio.tree.TreeNode.lca": [[778, "skbio-tree-treenode-lca"]], "skbio.tree.TreeNode.levelorder": [[779, "skbio-tree-treenode-levelorder"]], "skbio.tree.TreeNode.lowest_common_ancestor": [[780, "skbio-tree-treenode-lowest-common-ancestor"]], "skbio.tree.TreeNode.neighbors": [[781, "skbio-tree-treenode-neighbors"]], "skbio.tree.TreeNode.non_tips": [[782, "skbio-tree-treenode-non-tips"]], "skbio.tree.TreeNode.observed_node_counts": [[783, "skbio-tree-treenode-observed-node-counts"]], "skbio.tree.TreeNode.pop": [[784, "skbio-tree-treenode-pop"]], "skbio.tree.TreeNode.postorder": [[785, "skbio-tree-treenode-postorder"]], "skbio.tree.TreeNode.pre_and_postorder": [[786, "skbio-tree-treenode-pre-and-postorder"]], "skbio.tree.TreeNode.preorder": [[787, "skbio-tree-treenode-preorder"]], "skbio.tree.TreeNode.prune": [[788, "skbio-tree-treenode-prune"]], "skbio.tree.TreeNode.read": [[789, "skbio-tree-treenode-read"]], "skbio.tree.TreeNode.remove": [[790, "skbio-tree-treenode-remove"]], "skbio.tree.TreeNode.remove_deleted": [[791, "skbio-tree-treenode-remove-deleted"]], "skbio.tree.TreeNode.root": [[792, "skbio-tree-treenode-root"]], "skbio.tree.TreeNode.root_at": [[793, "skbio-tree-treenode-root-at"]], "skbio.tree.TreeNode.root_at_midpoint": [[794, "skbio-tree-treenode-root-at-midpoint"]], "skbio.tree.TreeNode.shear": [[795, "skbio-tree-treenode-shear"]], "skbio.tree.TreeNode.shuffle": [[796, "skbio-tree-treenode-shuffle"]], "skbio.tree.TreeNode.siblings": [[797, "skbio-tree-treenode-siblings"]], "skbio.tree.TreeNode.subset": [[798, "skbio-tree-treenode-subset"]], "skbio.tree.TreeNode.subsets": [[799, "skbio-tree-treenode-subsets"]], "skbio.tree.TreeNode.subtree": [[800, "skbio-tree-treenode-subtree"]], "skbio.tree.TreeNode.tip_tip_distances": [[801, "skbio-tree-treenode-tip-tip-distances"]], "skbio.tree.TreeNode.tips": [[802, "skbio-tree-treenode-tips"]], "skbio.tree.TreeNode.to_array": [[803, "skbio-tree-treenode-to-array"]], "skbio.tree.TreeNode.to_taxonomy": [[804, "skbio-tree-treenode-to-taxonomy"]], "skbio.tree.TreeNode.traverse": [[805, "skbio-tree-treenode-traverse"]], "skbio.tree.TreeNode.unpack": [[806, "skbio-tree-treenode-unpack"]], "skbio.tree.TreeNode.unpack_by_func": [[807, "skbio-tree-treenode-unpack-by-func"]], "skbio.tree.TreeNode.unrooted_copy": [[808, "skbio-tree-treenode-unrooted-copy"]], "skbio.tree.TreeNode.unrooted_deepcopy": [[809, "skbio-tree-treenode-unrooted-deepcopy"]], "skbio.tree.TreeNode.write": [[810, "skbio-tree-treenode-write"]], "skbio.tree.majority_rule": [[811, "skbio-tree-majority-rule"]], "skbio.tree.nj": [[812, "skbio-tree-nj"]], "skbio.util.EfficiencyWarning": [[813, "skbio-util-efficiencywarning"]], "skbio.util.RepresentationWarning": [[814, "skbio-util-representationwarning"]], "skbio.util.assert_data_frame_almost_equal": [[815, "skbio-util-assert-data-frame-almost-equal"]], "skbio.util.assert_ordination_results_equal": [[816, "skbio-util-assert-ordination-results-equal"]], "skbio.util.cardinal_to_ordinal": [[817, "skbio-util-cardinal-to-ordinal"]], "skbio.util.classproperty": [[818, "skbio-util-classproperty"]], "skbio.util.classproperty.__delete__": [[819, "skbio-util-classproperty-delete"]], "skbio.util.classproperty.__eq__": [[820, "skbio-util-classproperty-eq"]], "skbio.util.classproperty.__ge__": [[821, "skbio-util-classproperty-ge"]], "skbio.util.classproperty.__get__": [[822, "skbio-util-classproperty-get"]], "skbio.util.classproperty.__getstate__": [[823, "skbio-util-classproperty-getstate"]], "skbio.util.classproperty.__gt__": [[824, "skbio-util-classproperty-gt"]], "skbio.util.classproperty.__hash__": [[825, "skbio-util-classproperty-hash"]], "skbio.util.classproperty.__le__": [[826, "skbio-util-classproperty-le"]], "skbio.util.classproperty.__lt__": [[827, "skbio-util-classproperty-lt"]], "skbio.util.classproperty.__ne__": [[828, "skbio-util-classproperty-ne"]], "skbio.util.classproperty.__set__": [[829, "skbio-util-classproperty-set"]], "skbio.util.classproperty.__set_name__": [[830, "skbio-util-classproperty-set-name"]], "skbio.util.classproperty.__str__": [[831, "skbio-util-classproperty-str"]], "skbio.util.classproperty.deleter": [[832, "skbio-util-classproperty-deleter"]], "skbio.util.classproperty.getter": [[833, "skbio-util-classproperty-getter"]], "skbio.util.classproperty.setter": [[834, "skbio-util-classproperty-setter"]], "skbio.util.find_duplicates": [[835, "skbio-util-find-duplicates"]], "skbio.util.get_data_path": [[836, "skbio-util-get-data-path"]], "skbio.util.safe_md5": [[837, "skbio-util-safe-md5"]], "skbio.workflow.Workflow": [[838, "skbio-workflow-workflow"]], "skbio.workflow.Workflow.__call__": [[839, "skbio-workflow-workflow-call"]], "skbio.workflow.Workflow.__eq__": [[840, "skbio-workflow-workflow-eq"]], "skbio.workflow.Workflow.__ge__": [[841, "skbio-workflow-workflow-ge"]], "skbio.workflow.Workflow.__getstate__": [[842, "skbio-workflow-workflow-getstate"]], "skbio.workflow.Workflow.__gt__": [[843, "skbio-workflow-workflow-gt"]], "skbio.workflow.Workflow.__hash__": [[844, "skbio-workflow-workflow-hash"]], "skbio.workflow.Workflow.__le__": [[845, "skbio-workflow-workflow-le"]], "skbio.workflow.Workflow.__lt__": [[846, "skbio-workflow-workflow-lt"]], "skbio.workflow.Workflow.__ne__": [[847, "skbio-workflow-workflow-ne"]], "skbio.workflow.Workflow.__str__": [[848, "skbio-workflow-workflow-str"]], "skbio.workflow.Workflow.initialize_state": [[849, "skbio-workflow-workflow-initialize-state"]], "skbio.workflow.method": [[850, "skbio-workflow-method"]], "skbio.workflow.method.__call__": [[851, "skbio-workflow-method-call"]], "skbio.workflow.method.__eq__": [[852, "skbio-workflow-method-eq"]], "skbio.workflow.method.__ge__": [[853, "skbio-workflow-method-ge"]], "skbio.workflow.method.__getstate__": [[854, "skbio-workflow-method-getstate"]], "skbio.workflow.method.__gt__": [[855, "skbio-workflow-method-gt"]], "skbio.workflow.method.__hash__": [[856, "skbio-workflow-method-hash"]], "skbio.workflow.method.__le__": [[857, "skbio-workflow-method-le"]], "skbio.workflow.method.__lt__": [[858, "skbio-workflow-method-lt"]], "skbio.workflow.method.__ne__": [[859, "skbio-workflow-method-ne"]], "skbio.workflow.method.__str__": [[860, "skbio-workflow-method-str"]], "skbio.workflow.requires": [[861, "skbio-workflow-requires"]], "skbio.workflow.requires.__call__": [[862, "skbio-workflow-requires-call"]], "skbio.workflow.requires.__eq__": [[863, "skbio-workflow-requires-eq"]], "skbio.workflow.requires.__ge__": [[864, "skbio-workflow-requires-ge"]], "skbio.workflow.requires.__getstate__": [[865, "skbio-workflow-requires-getstate"]], "skbio.workflow.requires.__gt__": [[866, "skbio-workflow-requires-gt"]], "skbio.workflow.requires.__hash__": [[867, "skbio-workflow-requires-hash"]], "skbio.workflow.requires.__le__": [[868, "skbio-workflow-requires-le"]], "skbio.workflow.requires.__lt__": [[869, "skbio-workflow-requires-lt"]], "skbio.workflow.requires.__ne__": [[870, "skbio-workflow-requires-ne"]], "skbio.workflow.requires.__str__": [[871, "skbio-workflow-requires-str"]], "scikit-bio 0.6.0-dev": [[872, "scikit-bio-version"]], "API Reference": [[872, "api-reference"]], "File I/O (skbio.io)": [[873, "file-i-o-skbio-io"]], "Supported file formats": [[873, "supported-file-formats"]], "User functions": [[873, "user-functions"]], "User exceptions and warnings": [[873, "user-exceptions-and-warnings"]], "Introduction to I/O": [[873, "introduction-to-i-o"]], "What kinds of files scikit-bio can use": [[873, "what-kinds-of-files-scikit-bio-can-use"]], "Reading files into scikit-bio": [[873, "reading-files-into-scikit-bio"]], "Writing files from scikit-bio": [[873, "writing-files-from-scikit-bio"]], "Metadata (skbio.metadata)": [[874, "metadata-skbio-metadata"]], "Sequences (skbio.sequence)": [[875, "sequences-skbio-sequence"]], "Statistics (skbio.stats)": [[876, "statistics-skbio-stats"]], "Tree representations (skbio.tree)": [[877, "tree-representations-skbio-tree"]], "Phylogenetic Reconstruction": [[877, "phylogenetic-reconstruction"]], "Utility functionality (skbio.util)": [[878, "utility-functionality-skbio-util"]], "Testing functionality": [[878, "testing-functionality"]], "Miscellaneous functionality": [[878, "miscellaneous-functionality"]], "Warnings": [[878, "warnings"]], "Constructing workflows (skbio.workflow)": [[879, "constructing-workflows-skbio-workflow"]], "Decorators": [[879, "decorators"]]}, "indexentries": {"module": [[0, "module-skbio.alignment"], [1, "module-skbio.diversity"], [68, "module-skbio.diversity.alpha"], [104, "module-skbio.diversity.beta"], [131, "module-skbio.io.format.binary_dm"], [132, "module-skbio.io.format.blast6"], [133, "module-skbio.io.format.blast7"], [134, "module-skbio.io.format.clustal"], [135, "module-skbio.io.format.embl"], [136, "module-skbio.io.format.fasta"], [137, "module-skbio.io.format.fastq"], [138, "module-skbio.io.format.genbank"], [139, "module-skbio.io.format.gff3"], [140, "module-skbio.io.format.lsmat"], [141, "module-skbio.io.format.newick"], [142, "module-skbio.io.format.ordination"], [143, "module-skbio.io.format.phylip"], [144, "module-skbio.io.format.qseq"], [145, "module-skbio.io.format.stockholm"], [146, "module-skbio.io.format.taxdump"], [147, "module-skbio.io.registry"], [188, "module-skbio.io.util"], [521, "module-skbio.sequence.distance"], [524, "module-skbio.stats.composition"], [544, "module-skbio.stats.distance"], [604, "module-skbio.stats.evolve"], [606, "module-skbio.stats.gradient"], [696, "module-skbio.stats.ordination"], [721, "module-skbio.stats.power"], [873, "module-skbio.io"], [874, "module-skbio.metadata"], [875, "module-skbio.sequence"], [876, "module-skbio.stats"], [877, "module-skbio.tree"], [878, "module-skbio.util"], [879, "module-skbio.workflow"]], "skbio.alignment": [[0, "module-skbio.alignment"]], "skbio.diversity": [[1, "module-skbio.diversity"]], "alignmentstructure (class in skbio.alignment)": [[2, "skbio.alignment.AlignmentStructure"]], "__eq__() (skbio.alignment.alignmentstructure method)": [[3, "skbio.alignment.AlignmentStructure.__eq__"]], "__ge__() (skbio.alignment.alignmentstructure method)": [[4, "skbio.alignment.AlignmentStructure.__ge__"]], "__getitem__() (skbio.alignment.alignmentstructure method)": [[5, "skbio.alignment.AlignmentStructure.__getitem__"]], "__getstate__() (skbio.alignment.alignmentstructure method)": [[6, "skbio.alignment.AlignmentStructure.__getstate__"]], "__gt__() (skbio.alignment.alignmentstructure method)": [[7, "skbio.alignment.AlignmentStructure.__gt__"]], "__hash__() (skbio.alignment.alignmentstructure method)": [[8, "skbio.alignment.AlignmentStructure.__hash__"]], "__le__() (skbio.alignment.alignmentstructure method)": [[9, "skbio.alignment.AlignmentStructure.__le__"]], "__lt__() (skbio.alignment.alignmentstructure method)": [[10, "skbio.alignment.AlignmentStructure.__lt__"]], "__ne__() (skbio.alignment.alignmentstructure method)": [[11, "skbio.alignment.AlignmentStructure.__ne__"]], "__setstate__() (skbio.alignment.alignmentstructure method)": [[12, "skbio.alignment.AlignmentStructure.__setstate__"]], "__str__() (skbio.alignment.alignmentstructure method)": [[13, "skbio.alignment.AlignmentStructure.__str__"]], "is_zero_based() (skbio.alignment.alignmentstructure method)": [[14, "skbio.alignment.AlignmentStructure.is_zero_based"]], "set_zero_based() (skbio.alignment.alignmentstructure method)": [[15, "skbio.alignment.AlignmentStructure.set_zero_based"]], "stripedsmithwaterman (class in skbio.alignment)": [[16, "skbio.alignment.StripedSmithWaterman"]], "__call__() (skbio.alignment.stripedsmithwaterman method)": [[17, "skbio.alignment.StripedSmithWaterman.__call__"]], "__eq__() (skbio.alignment.stripedsmithwaterman method)": [[18, "skbio.alignment.StripedSmithWaterman.__eq__"]], "__ge__() (skbio.alignment.stripedsmithwaterman method)": [[19, "skbio.alignment.StripedSmithWaterman.__ge__"]], "__getstate__() (skbio.alignment.stripedsmithwaterman method)": [[20, "skbio.alignment.StripedSmithWaterman.__getstate__"]], "__gt__() (skbio.alignment.stripedsmithwaterman method)": [[21, "skbio.alignment.StripedSmithWaterman.__gt__"]], "__hash__() (skbio.alignment.stripedsmithwaterman method)": [[22, "skbio.alignment.StripedSmithWaterman.__hash__"]], "__le__() (skbio.alignment.stripedsmithwaterman method)": [[23, "skbio.alignment.StripedSmithWaterman.__le__"]], "__lt__() (skbio.alignment.stripedsmithwaterman method)": [[24, "skbio.alignment.StripedSmithWaterman.__lt__"]], "__ne__() (skbio.alignment.stripedsmithwaterman method)": [[25, "skbio.alignment.StripedSmithWaterman.__ne__"]], "__setstate__() (skbio.alignment.stripedsmithwaterman method)": [[26, "skbio.alignment.StripedSmithWaterman.__setstate__"]], "__str__() (skbio.alignment.stripedsmithwaterman method)": [[27, "skbio.alignment.StripedSmithWaterman.__str__"]], "tabularmsa (class in skbio.alignment)": [[28, "skbio.alignment.TabularMSA"]], "__bool__() (skbio.alignment.tabularmsa method)": [[29, "skbio.alignment.TabularMSA.__bool__"]], "__contains__() (skbio.alignment.tabularmsa method)": [[30, "skbio.alignment.TabularMSA.__contains__"]], "__copy__() (skbio.alignment.tabularmsa method)": [[31, "skbio.alignment.TabularMSA.__copy__"]], "__deepcopy__() (skbio.alignment.tabularmsa method)": [[32, "skbio.alignment.TabularMSA.__deepcopy__"]], "__eq__() (skbio.alignment.tabularmsa method)": [[33, "skbio.alignment.TabularMSA.__eq__"]], "__ge__() (skbio.alignment.tabularmsa method)": [[34, "skbio.alignment.TabularMSA.__ge__"]], "__getitem__() (skbio.alignment.tabularmsa method)": [[35, "skbio.alignment.TabularMSA.__getitem__"]], "__getstate__() (skbio.alignment.tabularmsa method)": [[36, "skbio.alignment.TabularMSA.__getstate__"]], "__gt__() (skbio.alignment.tabularmsa method)": [[37, "skbio.alignment.TabularMSA.__gt__"]], "__iter__() (skbio.alignment.tabularmsa method)": [[38, "skbio.alignment.TabularMSA.__iter__"]], "__le__() (skbio.alignment.tabularmsa method)": [[39, "skbio.alignment.TabularMSA.__le__"]], "__len__() (skbio.alignment.tabularmsa method)": [[40, "skbio.alignment.TabularMSA.__len__"]], "__lt__() (skbio.alignment.tabularmsa method)": [[41, "skbio.alignment.TabularMSA.__lt__"]], "__ne__() (skbio.alignment.tabularmsa method)": [[42, "skbio.alignment.TabularMSA.__ne__"]], "__reversed__() (skbio.alignment.tabularmsa method)": [[43, "skbio.alignment.TabularMSA.__reversed__"]], "__str__() (skbio.alignment.tabularmsa method)": [[44, "skbio.alignment.TabularMSA.__str__"]], "append() (skbio.alignment.tabularmsa method)": [[45, "skbio.alignment.TabularMSA.append"]], "consensus() (skbio.alignment.tabularmsa method)": [[46, "skbio.alignment.TabularMSA.consensus"]], "conservation() (skbio.alignment.tabularmsa method)": [[47, "skbio.alignment.TabularMSA.conservation"]], "extend() (skbio.alignment.tabularmsa method)": [[48, "skbio.alignment.TabularMSA.extend"]], "from_dict() (skbio.alignment.tabularmsa class method)": [[49, "skbio.alignment.TabularMSA.from_dict"]], "gap_frequencies() (skbio.alignment.tabularmsa method)": [[50, "skbio.alignment.TabularMSA.gap_frequencies"]], "has_metadata() (skbio.alignment.tabularmsa method)": [[51, "skbio.alignment.TabularMSA.has_metadata"]], "has_positional_metadata() (skbio.alignment.tabularmsa method)": [[52, "skbio.alignment.TabularMSA.has_positional_metadata"]], "iter_positions() (skbio.alignment.tabularmsa method)": [[53, "skbio.alignment.TabularMSA.iter_positions"]], "join() (skbio.alignment.tabularmsa method)": [[54, "skbio.alignment.TabularMSA.join"]], "read() (skbio.alignment.tabularmsa class method)": [[55, "skbio.alignment.TabularMSA.read"]], "reassign_index() (skbio.alignment.tabularmsa method)": [[56, "skbio.alignment.TabularMSA.reassign_index"]], "sort() (skbio.alignment.tabularmsa method)": [[57, "skbio.alignment.TabularMSA.sort"]], "to_dict() (skbio.alignment.tabularmsa method)": [[58, "skbio.alignment.TabularMSA.to_dict"]], "write() (skbio.alignment.tabularmsa method)": [[59, "skbio.alignment.TabularMSA.write"]], "global_pairwise_align() (in module skbio.alignment)": [[60, "skbio.alignment.global_pairwise_align"]], "global_pairwise_align_nucleotide() (in module skbio.alignment)": [[61, "skbio.alignment.global_pairwise_align_nucleotide"]], "global_pairwise_align_protein() (in module skbio.alignment)": [[62, "skbio.alignment.global_pairwise_align_protein"]], "local_pairwise_align() (in module skbio.alignment)": [[63, "skbio.alignment.local_pairwise_align"]], "local_pairwise_align_nucleotide() (in module skbio.alignment)": [[64, "skbio.alignment.local_pairwise_align_nucleotide"]], "local_pairwise_align_protein() (in module skbio.alignment)": [[65, "skbio.alignment.local_pairwise_align_protein"]], "local_pairwise_align_ssw() (in module skbio.alignment)": [[66, "skbio.alignment.local_pairwise_align_ssw"]], "make_identity_substitution_matrix() (in module skbio.alignment)": [[67, "skbio.alignment.make_identity_substitution_matrix"]], "skbio.diversity.alpha": [[68, "module-skbio.diversity.alpha"]], "ace() (in module skbio.diversity.alpha)": [[69, "skbio.diversity.alpha.ace"]], "berger_parker_d() (in module skbio.diversity.alpha)": [[70, "skbio.diversity.alpha.berger_parker_d"]], "brillouin_d() (in module skbio.diversity.alpha)": [[71, "skbio.diversity.alpha.brillouin_d"]], "chao1() (in module skbio.diversity.alpha)": [[72, "skbio.diversity.alpha.chao1"]], "chao1_ci() (in module skbio.diversity.alpha)": [[73, "skbio.diversity.alpha.chao1_ci"]], "dominance() (in module skbio.diversity.alpha)": [[74, "skbio.diversity.alpha.dominance"]], "doubles() (in module skbio.diversity.alpha)": [[75, "skbio.diversity.alpha.doubles"]], "enspie() (in module skbio.diversity.alpha)": [[76, "skbio.diversity.alpha.enspie"]], "esty_ci() (in module skbio.diversity.alpha)": [[77, "skbio.diversity.alpha.esty_ci"]], "faith_pd() (in module skbio.diversity.alpha)": [[78, "skbio.diversity.alpha.faith_pd"]], "fisher_alpha() (in module skbio.diversity.alpha)": [[79, "skbio.diversity.alpha.fisher_alpha"]], "gini_index() (in module skbio.diversity.alpha)": [[80, "skbio.diversity.alpha.gini_index"]], "goods_coverage() (in module skbio.diversity.alpha)": [[81, "skbio.diversity.alpha.goods_coverage"]], "heip_e() (in module skbio.diversity.alpha)": [[82, "skbio.diversity.alpha.heip_e"]], "kempton_taylor_q() (in module skbio.diversity.alpha)": [[83, "skbio.diversity.alpha.kempton_taylor_q"]], "lladser_ci() (in module skbio.diversity.alpha)": [[84, "skbio.diversity.alpha.lladser_ci"]], "lladser_pe() (in module skbio.diversity.alpha)": [[85, "skbio.diversity.alpha.lladser_pe"]], "margalef() (in module skbio.diversity.alpha)": [[86, "skbio.diversity.alpha.margalef"]], "mcintosh_d() (in module skbio.diversity.alpha)": [[87, "skbio.diversity.alpha.mcintosh_d"]], "mcintosh_e() (in module skbio.diversity.alpha)": [[88, "skbio.diversity.alpha.mcintosh_e"]], "menhinick() (in module skbio.diversity.alpha)": [[89, "skbio.diversity.alpha.menhinick"]], "michaelis_menten_fit() (in module skbio.diversity.alpha)": [[90, "skbio.diversity.alpha.michaelis_menten_fit"]], "observed_features() (in module skbio.diversity.alpha)": [[91, "skbio.diversity.alpha.observed_features"]], "observed_otus() (in module skbio.diversity.alpha)": [[92, "skbio.diversity.alpha.observed_otus"]], "osd() (in module skbio.diversity.alpha)": [[93, "skbio.diversity.alpha.osd"]], "phydiv() (in module skbio.diversity.alpha)": [[94, "skbio.diversity.alpha.phydiv"]], "pielou_e() (in module skbio.diversity.alpha)": [[95, "skbio.diversity.alpha.pielou_e"]], "robbins() (in module skbio.diversity.alpha)": [[96, "skbio.diversity.alpha.robbins"]], "shannon() (in module skbio.diversity.alpha)": [[97, "skbio.diversity.alpha.shannon"]], "simpson() (in module skbio.diversity.alpha)": [[98, "skbio.diversity.alpha.simpson"]], "simpson_e() (in module skbio.diversity.alpha)": [[99, "skbio.diversity.alpha.simpson_e"]], "singles() (in module skbio.diversity.alpha)": [[100, "skbio.diversity.alpha.singles"]], "sobs() (in module skbio.diversity.alpha)": [[101, "skbio.diversity.alpha.sobs"]], "strong() (in module skbio.diversity.alpha)": [[102, "skbio.diversity.alpha.strong"]], "alpha_diversity() (in module skbio.diversity)": [[103, "skbio.diversity.alpha_diversity"]], "skbio.diversity.beta": [[104, "module-skbio.diversity.beta"]], "unweighted_unifrac() (in module skbio.diversity.beta)": [[105, "skbio.diversity.beta.unweighted_unifrac"]], "weighted_unifrac() (in module skbio.diversity.beta)": [[106, "skbio.diversity.beta.weighted_unifrac"]], "beta_diversity() (in module skbio.diversity)": [[107, "skbio.diversity.beta_diversity"]], "block_beta_diversity() (in module skbio.diversity)": [[108, "skbio.diversity.block_beta_diversity"]], "get_alpha_diversity_metrics() (in module skbio.diversity)": [[109, "skbio.diversity.get_alpha_diversity_metrics"]], "get_beta_diversity_metrics() (in module skbio.diversity)": [[110, "skbio.diversity.get_beta_diversity_metrics"]], "partial_beta_diversity() (in module skbio.diversity)": [[111, "skbio.diversity.partial_beta_diversity"]], "argumentoverridewarning": [[112, "skbio.io.ArgumentOverrideWarning"]], "blast7formaterror": [[113, "skbio.io.BLAST7FormatError"]], "clustalformaterror": [[114, "skbio.io.ClustalFormatError"]], "emblformaterror": [[115, "skbio.io.EMBLFormatError"]], "fastaformaterror": [[116, "skbio.io.FASTAFormatError"]], "fastqformaterror": [[117, "skbio.io.FASTQFormatError"]], "fileformaterror": [[118, "skbio.io.FileFormatError"]], "formatidentificationwarning": [[119, "skbio.io.FormatIdentificationWarning"]], "gff3formaterror": [[120, "skbio.io.GFF3FormatError"]], "genbankformaterror": [[121, "skbio.io.GenBankFormatError"]], "iosourceerror": [[122, "skbio.io.IOSourceError"]], "lsmatformaterror": [[123, "skbio.io.LSMatFormatError"]], "newickformaterror": [[124, "skbio.io.NewickFormatError"]], "ordinationformaterror": [[125, "skbio.io.OrdinationFormatError"]], "phylipformaterror": [[126, "skbio.io.PhylipFormatError"]], "qseqformaterror": [[127, "skbio.io.QSeqFormatError"]], "qualformaterror": [[128, "skbio.io.QUALFormatError"]], "stockholmformaterror": [[129, "skbio.io.StockholmFormatError"]], "unrecognizedformaterror": [[130, "skbio.io.UnrecognizedFormatError"]], "skbio.io.format.binary_dm": [[131, "module-skbio.io.format.binary_dm"]], "skbio.io.format.blast6": [[132, "module-skbio.io.format.blast6"]], "skbio.io.format.blast7": [[133, "module-skbio.io.format.blast7"]], "skbio.io.format.clustal": [[134, "module-skbio.io.format.clustal"]], "skbio.io.format.embl": [[135, "module-skbio.io.format.embl"]], "skbio.io.format.fasta": [[136, "module-skbio.io.format.fasta"]], "skbio.io.format.fastq": [[137, "module-skbio.io.format.fastq"]], "skbio.io.format.genbank": [[138, "module-skbio.io.format.genbank"]], "skbio.io.format.gff3": [[139, "module-skbio.io.format.gff3"]], "skbio.io.format.lsmat": [[140, "module-skbio.io.format.lsmat"]], "skbio.io.format.newick": [[141, "module-skbio.io.format.newick"]], "skbio.io.format.ordination": [[142, "module-skbio.io.format.ordination"]], "skbio.io.format.phylip": [[143, "module-skbio.io.format.phylip"]], "skbio.io.format.qseq": [[144, "module-skbio.io.format.qseq"]], "skbio.io.format.stockholm": [[145, "module-skbio.io.format.stockholm"]], "skbio.io.format.taxdump": [[146, "module-skbio.io.format.taxdump"]], "skbio.io.registry": [[147, "module-skbio.io.registry"]], "duplicateregistrationerror": [[148, "skbio.io.registry.DuplicateRegistrationError"]], "format (class in skbio.io.registry)": [[149, "skbio.io.registry.Format"]], "__eq__() (skbio.io.registry.format method)": [[150, "skbio.io.registry.Format.__eq__"]], "__ge__() (skbio.io.registry.format method)": [[151, "skbio.io.registry.Format.__ge__"]], "__getstate__() (skbio.io.registry.format method)": [[152, "skbio.io.registry.Format.__getstate__"]], "__gt__() (skbio.io.registry.format method)": [[153, "skbio.io.registry.Format.__gt__"]], "__hash__() (skbio.io.registry.format method)": [[154, "skbio.io.registry.Format.__hash__"]], "__le__() (skbio.io.registry.format method)": [[155, "skbio.io.registry.Format.__le__"]], "__lt__() (skbio.io.registry.format method)": [[156, "skbio.io.registry.Format.__lt__"]], "__ne__() (skbio.io.registry.format method)": [[157, "skbio.io.registry.Format.__ne__"]], "__str__() (skbio.io.registry.format method)": [[158, "skbio.io.registry.Format.__str__"]], "reader() (skbio.io.registry.format method)": [[159, "skbio.io.registry.Format.reader"]], "sniffer() (skbio.io.registry.format method)": [[160, "skbio.io.registry.Format.sniffer"]], "writer() (skbio.io.registry.format method)": [[161, "skbio.io.registry.Format.writer"]], "ioregistry (class in skbio.io.registry)": [[162, "skbio.io.registry.IORegistry"]], "__eq__() (skbio.io.registry.ioregistry method)": [[163, "skbio.io.registry.IORegistry.__eq__"]], "__ge__() (skbio.io.registry.ioregistry method)": [[164, "skbio.io.registry.IORegistry.__ge__"]], "__getstate__() (skbio.io.registry.ioregistry method)": [[165, "skbio.io.registry.IORegistry.__getstate__"]], "__gt__() (skbio.io.registry.ioregistry method)": [[166, "skbio.io.registry.IORegistry.__gt__"]], "__hash__() (skbio.io.registry.ioregistry method)": [[167, "skbio.io.registry.IORegistry.__hash__"]], "__le__() (skbio.io.registry.ioregistry method)": [[168, "skbio.io.registry.IORegistry.__le__"]], "__lt__() (skbio.io.registry.ioregistry method)": [[169, "skbio.io.registry.IORegistry.__lt__"]], "__ne__() (skbio.io.registry.ioregistry method)": [[170, "skbio.io.registry.IORegistry.__ne__"]], "__str__() (skbio.io.registry.ioregistry method)": [[171, "skbio.io.registry.IORegistry.__str__"]], "add_format() (skbio.io.registry.ioregistry method)": [[172, "skbio.io.registry.IORegistry.add_format"]], "create_format() (skbio.io.registry.ioregistry method)": [[173, "skbio.io.registry.IORegistry.create_format"]], "get_reader() (skbio.io.registry.ioregistry method)": [[174, "skbio.io.registry.IORegistry.get_reader"]], "get_sniffer() (skbio.io.registry.ioregistry method)": [[175, "skbio.io.registry.IORegistry.get_sniffer"]], "get_writer() (skbio.io.registry.ioregistry method)": [[176, "skbio.io.registry.IORegistry.get_writer"]], "list_read_formats() (skbio.io.registry.ioregistry method)": [[177, "skbio.io.registry.IORegistry.list_read_formats"]], "list_write_formats() (skbio.io.registry.ioregistry method)": [[178, "skbio.io.registry.IORegistry.list_write_formats"]], "monkey_patch() (skbio.io.registry.ioregistry method)": [[179, "skbio.io.registry.IORegistry.monkey_patch"]], "read() (skbio.io.registry.ioregistry method)": [[180, "skbio.io.registry.IORegistry.read"]], "sniff() (skbio.io.registry.ioregistry method)": [[181, "skbio.io.registry.IORegistry.sniff"]], "write() (skbio.io.registry.ioregistry method)": [[182, "skbio.io.registry.IORegistry.write"]], "invalidregistrationerror": [[183, "skbio.io.registry.InvalidRegistrationError"]], "create_format() (in module skbio.io.registry)": [[184, "skbio.io.registry.create_format"]], "read() (in module skbio.io.registry)": [[185, "skbio.io.registry.read"]], "sniff() (in module skbio.io.registry)": [[186, "skbio.io.registry.sniff"]], "write() (in module skbio.io.registry)": [[187, "skbio.io.registry.write"]], "skbio.io.util": [[188, "module-skbio.io.util"]], "open() (in module skbio.io.util)": [[189, "skbio.io.util.open"]], "open_file() (in module skbio.io.util)": [[190, "skbio.io.util.open_file"]], "open_files() (in module skbio.io.util)": [[191, "skbio.io.util.open_files"]], "interval (class in skbio.metadata)": [[192, "skbio.metadata.Interval"]], "__eq__() (skbio.metadata.interval method)": [[193, "skbio.metadata.Interval.__eq__"]], "__ge__() (skbio.metadata.interval method)": [[194, "skbio.metadata.Interval.__ge__"]], "__getstate__() (skbio.metadata.interval method)": [[195, "skbio.metadata.Interval.__getstate__"]], "__gt__() (skbio.metadata.interval method)": [[196, "skbio.metadata.Interval.__gt__"]], "__le__() (skbio.metadata.interval method)": [[197, "skbio.metadata.Interval.__le__"]], "__lt__() (skbio.metadata.interval method)": [[198, "skbio.metadata.Interval.__lt__"]], "__ne__() (skbio.metadata.interval method)": [[199, "skbio.metadata.Interval.__ne__"]], "__str__() (skbio.metadata.interval method)": [[200, "skbio.metadata.Interval.__str__"]], "drop() (skbio.metadata.interval method)": [[201, "skbio.metadata.Interval.drop"]], "intervalmetadata (class in skbio.metadata)": [[202, "skbio.metadata.IntervalMetadata"]], "__copy__() (skbio.metadata.intervalmetadata method)": [[203, "skbio.metadata.IntervalMetadata.__copy__"]], "__deepcopy__() (skbio.metadata.intervalmetadata method)": [[204, "skbio.metadata.IntervalMetadata.__deepcopy__"]], "__eq__() (skbio.metadata.intervalmetadata method)": [[205, "skbio.metadata.IntervalMetadata.__eq__"]], "__ge__() (skbio.metadata.intervalmetadata method)": [[206, "skbio.metadata.IntervalMetadata.__ge__"]], "__getstate__() (skbio.metadata.intervalmetadata method)": [[207, "skbio.metadata.IntervalMetadata.__getstate__"]], "__gt__() (skbio.metadata.intervalmetadata method)": [[208, "skbio.metadata.IntervalMetadata.__gt__"]], "__le__() (skbio.metadata.intervalmetadata method)": [[209, "skbio.metadata.IntervalMetadata.__le__"]], "__lt__() (skbio.metadata.intervalmetadata method)": [[210, "skbio.metadata.IntervalMetadata.__lt__"]], "__ne__() (skbio.metadata.intervalmetadata method)": [[211, "skbio.metadata.IntervalMetadata.__ne__"]], "__str__() (skbio.metadata.intervalmetadata method)": [[212, "skbio.metadata.IntervalMetadata.__str__"]], "add() (skbio.metadata.intervalmetadata method)": [[213, "skbio.metadata.IntervalMetadata.add"]], "concat() (skbio.metadata.intervalmetadata class method)": [[214, "skbio.metadata.IntervalMetadata.concat"]], "drop() (skbio.metadata.intervalmetadata method)": [[215, "skbio.metadata.IntervalMetadata.drop"]], "merge() (skbio.metadata.intervalmetadata method)": [[216, "skbio.metadata.IntervalMetadata.merge"]], "query() (skbio.metadata.intervalmetadata method)": [[217, "skbio.metadata.IntervalMetadata.query"]], "read() (skbio.metadata.intervalmetadata class method)": [[218, "skbio.metadata.IntervalMetadata.read"]], "sort() (skbio.metadata.intervalmetadata method)": [[219, "skbio.metadata.IntervalMetadata.sort"]], "write() (skbio.metadata.intervalmetadata method)": [[220, "skbio.metadata.IntervalMetadata.write"]], "dna (class in skbio.sequence)": [[221, "skbio.sequence.DNA"]], "__bool__() (skbio.sequence.dna method)": [[222, "skbio.sequence.DNA.__bool__"]], "__contains__() (skbio.sequence.dna method)": [[223, "skbio.sequence.DNA.__contains__"]], "__copy__() (skbio.sequence.dna method)": [[224, "skbio.sequence.DNA.__copy__"]], "__deepcopy__() (skbio.sequence.dna method)": [[225, "skbio.sequence.DNA.__deepcopy__"]], "__eq__() (skbio.sequence.dna method)": [[226, "skbio.sequence.DNA.__eq__"]], "__ge__() (skbio.sequence.dna method)": [[227, "skbio.sequence.DNA.__ge__"]], "__getitem__() (skbio.sequence.dna method)": [[228, "skbio.sequence.DNA.__getitem__"]], "__getstate__() (skbio.sequence.dna method)": [[229, "skbio.sequence.DNA.__getstate__"]], "__gt__() (skbio.sequence.dna method)": [[230, "skbio.sequence.DNA.__gt__"]], "__iter__() (skbio.sequence.dna method)": [[231, "skbio.sequence.DNA.__iter__"]], "__le__() (skbio.sequence.dna method)": [[232, "skbio.sequence.DNA.__le__"]], "__len__() (skbio.sequence.dna method)": [[233, "skbio.sequence.DNA.__len__"]], "__lt__() (skbio.sequence.dna method)": [[234, "skbio.sequence.DNA.__lt__"]], "__ne__() (skbio.sequence.dna method)": [[235, "skbio.sequence.DNA.__ne__"]], "__reversed__() (skbio.sequence.dna method)": [[236, "skbio.sequence.DNA.__reversed__"]], "__str__() (skbio.sequence.dna method)": [[237, "skbio.sequence.DNA.__str__"]], "complement() (skbio.sequence.dna method)": [[238, "skbio.sequence.DNA.complement"]], "concat() (skbio.sequence.dna class method)": [[239, "skbio.sequence.DNA.concat"]], "count() (skbio.sequence.dna method)": [[240, "skbio.sequence.DNA.count"]], "definites() (skbio.sequence.dna method)": [[241, "skbio.sequence.DNA.definites"]], "degap() (skbio.sequence.dna method)": [[242, "skbio.sequence.DNA.degap"]], "degenerates() (skbio.sequence.dna method)": [[243, "skbio.sequence.DNA.degenerates"]], "distance() (skbio.sequence.dna method)": [[244, "skbio.sequence.DNA.distance"]], "expand_degenerates() (skbio.sequence.dna method)": [[245, "skbio.sequence.DNA.expand_degenerates"]], "find_motifs() (skbio.sequence.dna method)": [[246, "skbio.sequence.DNA.find_motifs"]], "find_with_regex() (skbio.sequence.dna method)": [[247, "skbio.sequence.DNA.find_with_regex"]], "frequencies() (skbio.sequence.dna method)": [[248, "skbio.sequence.DNA.frequencies"]], "gaps() (skbio.sequence.dna method)": [[249, "skbio.sequence.DNA.gaps"]], "gc_content() (skbio.sequence.dna method)": [[250, "skbio.sequence.DNA.gc_content"]], "gc_frequency() (skbio.sequence.dna method)": [[251, "skbio.sequence.DNA.gc_frequency"]], "has_definites() (skbio.sequence.dna method)": [[252, "skbio.sequence.DNA.has_definites"]], "has_degenerates() (skbio.sequence.dna method)": [[253, "skbio.sequence.DNA.has_degenerates"]], "has_gaps() (skbio.sequence.dna method)": [[254, "skbio.sequence.DNA.has_gaps"]], "has_interval_metadata() (skbio.sequence.dna method)": [[255, "skbio.sequence.DNA.has_interval_metadata"]], "has_metadata() (skbio.sequence.dna method)": [[256, "skbio.sequence.DNA.has_metadata"]], "has_nondegenerates() (skbio.sequence.dna method)": [[257, "skbio.sequence.DNA.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.dna method)": [[258, "skbio.sequence.DNA.has_positional_metadata"]], "index() (skbio.sequence.dna method)": [[259, "skbio.sequence.DNA.index"]], "is_reverse_complement() (skbio.sequence.dna method)": [[260, "skbio.sequence.DNA.is_reverse_complement"]], "iter_contiguous() (skbio.sequence.dna method)": [[261, "skbio.sequence.DNA.iter_contiguous"]], "iter_kmers() (skbio.sequence.dna method)": [[262, "skbio.sequence.DNA.iter_kmers"]], "kmer_frequencies() (skbio.sequence.dna method)": [[263, "skbio.sequence.DNA.kmer_frequencies"]], "lowercase() (skbio.sequence.dna method)": [[264, "skbio.sequence.DNA.lowercase"]], "match_frequency() (skbio.sequence.dna method)": [[265, "skbio.sequence.DNA.match_frequency"]], "matches() (skbio.sequence.dna method)": [[266, "skbio.sequence.DNA.matches"]], "mismatch_frequency() (skbio.sequence.dna method)": [[267, "skbio.sequence.DNA.mismatch_frequency"]], "mismatches() (skbio.sequence.dna method)": [[268, "skbio.sequence.DNA.mismatches"]], "nondegenerates() (skbio.sequence.dna method)": [[269, "skbio.sequence.DNA.nondegenerates"]], "read() (skbio.sequence.dna class method)": [[270, "skbio.sequence.DNA.read"]], "replace() (skbio.sequence.dna method)": [[271, "skbio.sequence.DNA.replace"]], "reverse_complement() (skbio.sequence.dna method)": [[272, "skbio.sequence.DNA.reverse_complement"]], "to_definites() (skbio.sequence.dna method)": [[273, "skbio.sequence.DNA.to_definites"]], "to_indices() (skbio.sequence.dna method)": [[274, "skbio.sequence.DNA.to_indices"]], "to_regex() (skbio.sequence.dna method)": [[275, "skbio.sequence.DNA.to_regex"]], "transcribe() (skbio.sequence.dna method)": [[276, "skbio.sequence.DNA.transcribe"]], "translate() (skbio.sequence.dna method)": [[277, "skbio.sequence.DNA.translate"]], "translate_six_frames() (skbio.sequence.dna method)": [[278, "skbio.sequence.DNA.translate_six_frames"]], "write() (skbio.sequence.dna method)": [[279, "skbio.sequence.DNA.write"]], "geneticcode (class in skbio.sequence)": [[280, "skbio.sequence.GeneticCode"]], "__eq__() (skbio.sequence.geneticcode method)": [[281, "skbio.sequence.GeneticCode.__eq__"]], "__ge__() (skbio.sequence.geneticcode method)": [[282, "skbio.sequence.GeneticCode.__ge__"]], "__getstate__() (skbio.sequence.geneticcode method)": [[283, "skbio.sequence.GeneticCode.__getstate__"]], "__gt__() (skbio.sequence.geneticcode method)": [[284, "skbio.sequence.GeneticCode.__gt__"]], "__le__() (skbio.sequence.geneticcode method)": [[285, "skbio.sequence.GeneticCode.__le__"]], "__lt__() (skbio.sequence.geneticcode method)": [[286, "skbio.sequence.GeneticCode.__lt__"]], "__ne__() (skbio.sequence.geneticcode method)": [[287, "skbio.sequence.GeneticCode.__ne__"]], "__str__() (skbio.sequence.geneticcode method)": [[288, "skbio.sequence.GeneticCode.__str__"]], "from_ncbi() (skbio.sequence.geneticcode class method)": [[289, "skbio.sequence.GeneticCode.from_ncbi"]], "translate() (skbio.sequence.geneticcode method)": [[290, "skbio.sequence.GeneticCode.translate"]], "translate_six_frames() (skbio.sequence.geneticcode method)": [[291, "skbio.sequence.GeneticCode.translate_six_frames"]], "grammaredsequence (class in skbio.sequence)": [[292, "skbio.sequence.GrammaredSequence"]], "__bool__() (skbio.sequence.grammaredsequence method)": [[293, "skbio.sequence.GrammaredSequence.__bool__"]], "__contains__() (skbio.sequence.grammaredsequence method)": [[294, "skbio.sequence.GrammaredSequence.__contains__"]], "__copy__() (skbio.sequence.grammaredsequence method)": [[295, "skbio.sequence.GrammaredSequence.__copy__"]], "__deepcopy__() (skbio.sequence.grammaredsequence method)": [[296, "skbio.sequence.GrammaredSequence.__deepcopy__"]], "__eq__() (skbio.sequence.grammaredsequence method)": [[297, "skbio.sequence.GrammaredSequence.__eq__"]], "__ge__() (skbio.sequence.grammaredsequence method)": [[298, "skbio.sequence.GrammaredSequence.__ge__"]], "__getitem__() (skbio.sequence.grammaredsequence method)": [[299, "skbio.sequence.GrammaredSequence.__getitem__"]], "__getstate__() (skbio.sequence.grammaredsequence method)": [[300, "skbio.sequence.GrammaredSequence.__getstate__"]], "__gt__() (skbio.sequence.grammaredsequence method)": [[301, "skbio.sequence.GrammaredSequence.__gt__"]], "__iter__() (skbio.sequence.grammaredsequence method)": [[302, "skbio.sequence.GrammaredSequence.__iter__"]], "__le__() (skbio.sequence.grammaredsequence method)": [[303, "skbio.sequence.GrammaredSequence.__le__"]], "__len__() (skbio.sequence.grammaredsequence method)": [[304, "skbio.sequence.GrammaredSequence.__len__"]], "__lt__() (skbio.sequence.grammaredsequence method)": [[305, "skbio.sequence.GrammaredSequence.__lt__"]], "__ne__() (skbio.sequence.grammaredsequence method)": [[306, "skbio.sequence.GrammaredSequence.__ne__"]], "__reversed__() (skbio.sequence.grammaredsequence method)": [[307, "skbio.sequence.GrammaredSequence.__reversed__"]], "__str__() (skbio.sequence.grammaredsequence method)": [[308, "skbio.sequence.GrammaredSequence.__str__"]], "concat() (skbio.sequence.grammaredsequence class method)": [[309, "skbio.sequence.GrammaredSequence.concat"]], "count() (skbio.sequence.grammaredsequence method)": [[310, "skbio.sequence.GrammaredSequence.count"]], "definites() (skbio.sequence.grammaredsequence method)": [[311, "skbio.sequence.GrammaredSequence.definites"]], "degap() (skbio.sequence.grammaredsequence method)": [[312, "skbio.sequence.GrammaredSequence.degap"]], "degenerates() (skbio.sequence.grammaredsequence method)": [[313, "skbio.sequence.GrammaredSequence.degenerates"]], "distance() (skbio.sequence.grammaredsequence method)": [[314, "skbio.sequence.GrammaredSequence.distance"]], "expand_degenerates() (skbio.sequence.grammaredsequence method)": [[315, "skbio.sequence.GrammaredSequence.expand_degenerates"]], "find_motifs() (skbio.sequence.grammaredsequence method)": [[316, "skbio.sequence.GrammaredSequence.find_motifs"]], "find_with_regex() (skbio.sequence.grammaredsequence method)": [[317, "skbio.sequence.GrammaredSequence.find_with_regex"]], "frequencies() (skbio.sequence.grammaredsequence method)": [[318, "skbio.sequence.GrammaredSequence.frequencies"]], "gaps() (skbio.sequence.grammaredsequence method)": [[319, "skbio.sequence.GrammaredSequence.gaps"]], "has_definites() (skbio.sequence.grammaredsequence method)": [[320, "skbio.sequence.GrammaredSequence.has_definites"]], "has_degenerates() (skbio.sequence.grammaredsequence method)": [[321, "skbio.sequence.GrammaredSequence.has_degenerates"]], "has_gaps() (skbio.sequence.grammaredsequence method)": [[322, "skbio.sequence.GrammaredSequence.has_gaps"]], "has_interval_metadata() (skbio.sequence.grammaredsequence method)": [[323, "skbio.sequence.GrammaredSequence.has_interval_metadata"]], "has_metadata() (skbio.sequence.grammaredsequence method)": [[324, "skbio.sequence.GrammaredSequence.has_metadata"]], "has_nondegenerates() (skbio.sequence.grammaredsequence method)": [[325, "skbio.sequence.GrammaredSequence.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.grammaredsequence method)": [[326, "skbio.sequence.GrammaredSequence.has_positional_metadata"]], "index() (skbio.sequence.grammaredsequence method)": [[327, "skbio.sequence.GrammaredSequence.index"]], "iter_contiguous() (skbio.sequence.grammaredsequence method)": [[328, "skbio.sequence.GrammaredSequence.iter_contiguous"]], "iter_kmers() (skbio.sequence.grammaredsequence method)": [[329, "skbio.sequence.GrammaredSequence.iter_kmers"]], "kmer_frequencies() (skbio.sequence.grammaredsequence method)": [[330, "skbio.sequence.GrammaredSequence.kmer_frequencies"]], "lowercase() (skbio.sequence.grammaredsequence method)": [[331, "skbio.sequence.GrammaredSequence.lowercase"]], "match_frequency() (skbio.sequence.grammaredsequence method)": [[332, "skbio.sequence.GrammaredSequence.match_frequency"]], "matches() (skbio.sequence.grammaredsequence method)": [[333, "skbio.sequence.GrammaredSequence.matches"]], "mismatch_frequency() (skbio.sequence.grammaredsequence method)": [[334, "skbio.sequence.GrammaredSequence.mismatch_frequency"]], "mismatches() (skbio.sequence.grammaredsequence method)": [[335, "skbio.sequence.GrammaredSequence.mismatches"]], "nondegenerates() (skbio.sequence.grammaredsequence method)": [[336, "skbio.sequence.GrammaredSequence.nondegenerates"]], "read() (skbio.sequence.grammaredsequence class method)": [[337, "skbio.sequence.GrammaredSequence.read"]], "replace() (skbio.sequence.grammaredsequence method)": [[338, "skbio.sequence.GrammaredSequence.replace"]], "to_definites() (skbio.sequence.grammaredsequence method)": [[339, "skbio.sequence.GrammaredSequence.to_definites"]], "to_indices() (skbio.sequence.grammaredsequence method)": [[340, "skbio.sequence.GrammaredSequence.to_indices"]], "to_regex() (skbio.sequence.grammaredsequence method)": [[341, "skbio.sequence.GrammaredSequence.to_regex"]], "write() (skbio.sequence.grammaredsequence method)": [[342, "skbio.sequence.GrammaredSequence.write"]], "protein (class in skbio.sequence)": [[343, "skbio.sequence.Protein"]], "__bool__() (skbio.sequence.protein method)": [[344, "skbio.sequence.Protein.__bool__"]], "__contains__() (skbio.sequence.protein method)": [[345, "skbio.sequence.Protein.__contains__"]], "__copy__() (skbio.sequence.protein method)": [[346, "skbio.sequence.Protein.__copy__"]], "__deepcopy__() (skbio.sequence.protein method)": [[347, "skbio.sequence.Protein.__deepcopy__"]], "__eq__() (skbio.sequence.protein method)": [[348, "skbio.sequence.Protein.__eq__"]], "__ge__() (skbio.sequence.protein method)": [[349, "skbio.sequence.Protein.__ge__"]], "__getitem__() (skbio.sequence.protein method)": [[350, "skbio.sequence.Protein.__getitem__"]], "__getstate__() (skbio.sequence.protein method)": [[351, "skbio.sequence.Protein.__getstate__"]], "__gt__() (skbio.sequence.protein method)": [[352, "skbio.sequence.Protein.__gt__"]], "__iter__() (skbio.sequence.protein method)": [[353, "skbio.sequence.Protein.__iter__"]], "__le__() (skbio.sequence.protein method)": [[354, "skbio.sequence.Protein.__le__"]], "__len__() (skbio.sequence.protein method)": [[355, "skbio.sequence.Protein.__len__"]], "__lt__() (skbio.sequence.protein method)": [[356, "skbio.sequence.Protein.__lt__"]], "__ne__() (skbio.sequence.protein method)": [[357, "skbio.sequence.Protein.__ne__"]], "__reversed__() (skbio.sequence.protein method)": [[358, "skbio.sequence.Protein.__reversed__"]], "__str__() (skbio.sequence.protein method)": [[359, "skbio.sequence.Protein.__str__"]], "concat() (skbio.sequence.protein class method)": [[360, "skbio.sequence.Protein.concat"]], "count() (skbio.sequence.protein method)": [[361, "skbio.sequence.Protein.count"]], "definites() (skbio.sequence.protein method)": [[362, "skbio.sequence.Protein.definites"]], "degap() (skbio.sequence.protein method)": [[363, "skbio.sequence.Protein.degap"]], "degenerates() (skbio.sequence.protein method)": [[364, "skbio.sequence.Protein.degenerates"]], "distance() (skbio.sequence.protein method)": [[365, "skbio.sequence.Protein.distance"]], "expand_degenerates() (skbio.sequence.protein method)": [[366, "skbio.sequence.Protein.expand_degenerates"]], "find_motifs() (skbio.sequence.protein method)": [[367, "skbio.sequence.Protein.find_motifs"]], "find_with_regex() (skbio.sequence.protein method)": [[368, "skbio.sequence.Protein.find_with_regex"]], "frequencies() (skbio.sequence.protein method)": [[369, "skbio.sequence.Protein.frequencies"]], "gaps() (skbio.sequence.protein method)": [[370, "skbio.sequence.Protein.gaps"]], "has_definites() (skbio.sequence.protein method)": [[371, "skbio.sequence.Protein.has_definites"]], "has_degenerates() (skbio.sequence.protein method)": [[372, "skbio.sequence.Protein.has_degenerates"]], "has_gaps() (skbio.sequence.protein method)": [[373, "skbio.sequence.Protein.has_gaps"]], "has_interval_metadata() (skbio.sequence.protein method)": [[374, "skbio.sequence.Protein.has_interval_metadata"]], "has_metadata() (skbio.sequence.protein method)": [[375, "skbio.sequence.Protein.has_metadata"]], "has_nondegenerates() (skbio.sequence.protein method)": [[376, "skbio.sequence.Protein.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.protein method)": [[377, "skbio.sequence.Protein.has_positional_metadata"]], "has_stops() (skbio.sequence.protein method)": [[378, "skbio.sequence.Protein.has_stops"]], "index() (skbio.sequence.protein method)": [[379, "skbio.sequence.Protein.index"]], "iter_contiguous() (skbio.sequence.protein method)": [[380, "skbio.sequence.Protein.iter_contiguous"]], "iter_kmers() (skbio.sequence.protein method)": [[381, "skbio.sequence.Protein.iter_kmers"]], "kmer_frequencies() (skbio.sequence.protein method)": [[382, "skbio.sequence.Protein.kmer_frequencies"]], "lowercase() (skbio.sequence.protein method)": [[383, "skbio.sequence.Protein.lowercase"]], "match_frequency() (skbio.sequence.protein method)": [[384, "skbio.sequence.Protein.match_frequency"]], "matches() (skbio.sequence.protein method)": [[385, "skbio.sequence.Protein.matches"]], "mismatch_frequency() (skbio.sequence.protein method)": [[386, "skbio.sequence.Protein.mismatch_frequency"]], "mismatches() (skbio.sequence.protein method)": [[387, "skbio.sequence.Protein.mismatches"]], "nondegenerates() (skbio.sequence.protein method)": [[388, "skbio.sequence.Protein.nondegenerates"]], "read() (skbio.sequence.protein class method)": [[389, "skbio.sequence.Protein.read"]], "replace() (skbio.sequence.protein method)": [[390, "skbio.sequence.Protein.replace"]], "stops() (skbio.sequence.protein method)": [[391, "skbio.sequence.Protein.stops"]], "to_definites() (skbio.sequence.protein method)": [[392, "skbio.sequence.Protein.to_definites"]], "to_indices() (skbio.sequence.protein method)": [[393, "skbio.sequence.Protein.to_indices"]], "to_regex() (skbio.sequence.protein method)": [[394, "skbio.sequence.Protein.to_regex"]], "write() (skbio.sequence.protein method)": [[395, "skbio.sequence.Protein.write"]], "rna (class in skbio.sequence)": [[396, "skbio.sequence.RNA"]], "__bool__() (skbio.sequence.rna method)": [[397, "skbio.sequence.RNA.__bool__"]], "__contains__() (skbio.sequence.rna method)": [[398, "skbio.sequence.RNA.__contains__"]], "__copy__() (skbio.sequence.rna method)": [[399, "skbio.sequence.RNA.__copy__"]], "__deepcopy__() (skbio.sequence.rna method)": [[400, "skbio.sequence.RNA.__deepcopy__"]], "__eq__() (skbio.sequence.rna method)": [[401, "skbio.sequence.RNA.__eq__"]], "__ge__() (skbio.sequence.rna method)": [[402, "skbio.sequence.RNA.__ge__"]], "__getitem__() (skbio.sequence.rna method)": [[403, "skbio.sequence.RNA.__getitem__"]], "__getstate__() (skbio.sequence.rna method)": [[404, "skbio.sequence.RNA.__getstate__"]], "__gt__() (skbio.sequence.rna method)": [[405, "skbio.sequence.RNA.__gt__"]], "__iter__() (skbio.sequence.rna method)": [[406, "skbio.sequence.RNA.__iter__"]], "__le__() (skbio.sequence.rna method)": [[407, "skbio.sequence.RNA.__le__"]], "__len__() (skbio.sequence.rna method)": [[408, "skbio.sequence.RNA.__len__"]], "__lt__() (skbio.sequence.rna method)": [[409, "skbio.sequence.RNA.__lt__"]], "__ne__() (skbio.sequence.rna method)": [[410, "skbio.sequence.RNA.__ne__"]], "__reversed__() (skbio.sequence.rna method)": [[411, "skbio.sequence.RNA.__reversed__"]], "__str__() (skbio.sequence.rna method)": [[412, "skbio.sequence.RNA.__str__"]], "complement() (skbio.sequence.rna method)": [[413, "skbio.sequence.RNA.complement"]], "concat() (skbio.sequence.rna class method)": [[414, "skbio.sequence.RNA.concat"]], "count() (skbio.sequence.rna method)": [[415, "skbio.sequence.RNA.count"]], "definites() (skbio.sequence.rna method)": [[416, "skbio.sequence.RNA.definites"]], "degap() (skbio.sequence.rna method)": [[417, "skbio.sequence.RNA.degap"]], "degenerates() (skbio.sequence.rna method)": [[418, "skbio.sequence.RNA.degenerates"]], "distance() (skbio.sequence.rna method)": [[419, "skbio.sequence.RNA.distance"]], "expand_degenerates() (skbio.sequence.rna method)": [[420, "skbio.sequence.RNA.expand_degenerates"]], "find_motifs() (skbio.sequence.rna method)": [[421, "skbio.sequence.RNA.find_motifs"]], "find_with_regex() (skbio.sequence.rna method)": [[422, "skbio.sequence.RNA.find_with_regex"]], "frequencies() (skbio.sequence.rna method)": [[423, "skbio.sequence.RNA.frequencies"]], "gaps() (skbio.sequence.rna method)": [[424, "skbio.sequence.RNA.gaps"]], "gc_content() (skbio.sequence.rna method)": [[425, "skbio.sequence.RNA.gc_content"]], "gc_frequency() (skbio.sequence.rna method)": [[426, "skbio.sequence.RNA.gc_frequency"]], "has_definites() (skbio.sequence.rna method)": [[427, "skbio.sequence.RNA.has_definites"]], "has_degenerates() (skbio.sequence.rna method)": [[428, "skbio.sequence.RNA.has_degenerates"]], "has_gaps() (skbio.sequence.rna method)": [[429, "skbio.sequence.RNA.has_gaps"]], "has_interval_metadata() (skbio.sequence.rna method)": [[430, "skbio.sequence.RNA.has_interval_metadata"]], "has_metadata() (skbio.sequence.rna method)": [[431, "skbio.sequence.RNA.has_metadata"]], "has_nondegenerates() (skbio.sequence.rna method)": [[432, "skbio.sequence.RNA.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.rna method)": [[433, "skbio.sequence.RNA.has_positional_metadata"]], "index() (skbio.sequence.rna method)": [[434, "skbio.sequence.RNA.index"]], "is_reverse_complement() (skbio.sequence.rna method)": [[435, "skbio.sequence.RNA.is_reverse_complement"]], "iter_contiguous() (skbio.sequence.rna method)": [[436, "skbio.sequence.RNA.iter_contiguous"]], "iter_kmers() (skbio.sequence.rna method)": [[437, "skbio.sequence.RNA.iter_kmers"]], "kmer_frequencies() (skbio.sequence.rna method)": [[438, "skbio.sequence.RNA.kmer_frequencies"]], "lowercase() (skbio.sequence.rna method)": [[439, "skbio.sequence.RNA.lowercase"]], "match_frequency() (skbio.sequence.rna method)": [[440, "skbio.sequence.RNA.match_frequency"]], "matches() (skbio.sequence.rna method)": [[441, "skbio.sequence.RNA.matches"]], "mismatch_frequency() (skbio.sequence.rna method)": [[442, "skbio.sequence.RNA.mismatch_frequency"]], "mismatches() (skbio.sequence.rna method)": [[443, "skbio.sequence.RNA.mismatches"]], "nondegenerates() (skbio.sequence.rna method)": [[444, "skbio.sequence.RNA.nondegenerates"]], "read() (skbio.sequence.rna class method)": [[445, "skbio.sequence.RNA.read"]], "replace() (skbio.sequence.rna method)": [[446, "skbio.sequence.RNA.replace"]], "reverse_complement() (skbio.sequence.rna method)": [[447, "skbio.sequence.RNA.reverse_complement"]], "reverse_transcribe() (skbio.sequence.rna method)": [[448, "skbio.sequence.RNA.reverse_transcribe"]], "to_definites() (skbio.sequence.rna method)": [[449, "skbio.sequence.RNA.to_definites"]], "to_indices() (skbio.sequence.rna method)": [[450, "skbio.sequence.RNA.to_indices"]], "to_regex() (skbio.sequence.rna method)": [[451, "skbio.sequence.RNA.to_regex"]], "translate() (skbio.sequence.rna method)": [[452, "skbio.sequence.RNA.translate"]], "translate_six_frames() (skbio.sequence.rna method)": [[453, "skbio.sequence.RNA.translate_six_frames"]], "write() (skbio.sequence.rna method)": [[454, "skbio.sequence.RNA.write"]], "sequence (class in skbio.sequence)": [[455, "skbio.sequence.Sequence"]], "__bool__() (skbio.sequence.sequence method)": [[456, "skbio.sequence.Sequence.__bool__"]], "__contains__() (skbio.sequence.sequence method)": [[457, "skbio.sequence.Sequence.__contains__"]], "__copy__() (skbio.sequence.sequence method)": [[458, "skbio.sequence.Sequence.__copy__"]], "__deepcopy__() (skbio.sequence.sequence method)": [[459, "skbio.sequence.Sequence.__deepcopy__"]], "__eq__() (skbio.sequence.sequence method)": [[460, "skbio.sequence.Sequence.__eq__"]], "__ge__() (skbio.sequence.sequence method)": [[461, "skbio.sequence.Sequence.__ge__"]], "__getitem__() (skbio.sequence.sequence method)": [[462, "skbio.sequence.Sequence.__getitem__"]], "__getstate__() (skbio.sequence.sequence method)": [[463, "skbio.sequence.Sequence.__getstate__"]], "__gt__() (skbio.sequence.sequence method)": [[464, "skbio.sequence.Sequence.__gt__"]], "__iter__() (skbio.sequence.sequence method)": [[465, "skbio.sequence.Sequence.__iter__"]], "__le__() (skbio.sequence.sequence method)": [[466, "skbio.sequence.Sequence.__le__"]], "__len__() (skbio.sequence.sequence method)": [[467, "skbio.sequence.Sequence.__len__"]], "__lt__() (skbio.sequence.sequence method)": [[468, "skbio.sequence.Sequence.__lt__"]], "__ne__() (skbio.sequence.sequence method)": [[469, "skbio.sequence.Sequence.__ne__"]], "__reversed__() (skbio.sequence.sequence method)": [[470, "skbio.sequence.Sequence.__reversed__"]], "__str__() (skbio.sequence.sequence method)": [[471, "skbio.sequence.Sequence.__str__"]], "concat() (skbio.sequence.sequence class method)": [[472, "skbio.sequence.Sequence.concat"]], "count() (skbio.sequence.sequence method)": [[473, "skbio.sequence.Sequence.count"]], "distance() (skbio.sequence.sequence method)": [[474, "skbio.sequence.Sequence.distance"]], "find_with_regex() (skbio.sequence.sequence method)": [[475, "skbio.sequence.Sequence.find_with_regex"]], "frequencies() (skbio.sequence.sequence method)": [[476, "skbio.sequence.Sequence.frequencies"]], "has_interval_metadata() (skbio.sequence.sequence method)": [[477, "skbio.sequence.Sequence.has_interval_metadata"]], "has_metadata() (skbio.sequence.sequence method)": [[478, "skbio.sequence.Sequence.has_metadata"]], "has_positional_metadata() (skbio.sequence.sequence method)": [[479, "skbio.sequence.Sequence.has_positional_metadata"]], "index() (skbio.sequence.sequence method)": [[480, "skbio.sequence.Sequence.index"]], "iter_contiguous() (skbio.sequence.sequence method)": [[481, "skbio.sequence.Sequence.iter_contiguous"]], "iter_kmers() (skbio.sequence.sequence method)": [[482, "skbio.sequence.Sequence.iter_kmers"]], "kmer_frequencies() (skbio.sequence.sequence method)": [[483, "skbio.sequence.Sequence.kmer_frequencies"]], "lowercase() (skbio.sequence.sequence method)": [[484, "skbio.sequence.Sequence.lowercase"]], "match_frequency() (skbio.sequence.sequence method)": [[485, "skbio.sequence.Sequence.match_frequency"]], "matches() (skbio.sequence.sequence method)": [[486, "skbio.sequence.Sequence.matches"]], "mismatch_frequency() (skbio.sequence.sequence method)": [[487, "skbio.sequence.Sequence.mismatch_frequency"]], "mismatches() (skbio.sequence.sequence method)": [[488, "skbio.sequence.Sequence.mismatches"]], "read() (skbio.sequence.sequence class method)": [[489, "skbio.sequence.Sequence.read"]], "replace() (skbio.sequence.sequence method)": [[490, "skbio.sequence.Sequence.replace"]], "to_indices() (skbio.sequence.sequence method)": [[491, "skbio.sequence.Sequence.to_indices"]], "write() (skbio.sequence.sequence method)": [[492, "skbio.sequence.Sequence.write"]], "substitutionmatrix (class in skbio.sequence)": [[493, "skbio.sequence.SubstitutionMatrix"]], "__contains__() (skbio.sequence.substitutionmatrix method)": [[494, "skbio.sequence.SubstitutionMatrix.__contains__"]], "__eq__() (skbio.sequence.substitutionmatrix method)": [[495, "skbio.sequence.SubstitutionMatrix.__eq__"]], "__ge__() (skbio.sequence.substitutionmatrix method)": [[496, "skbio.sequence.SubstitutionMatrix.__ge__"]], "__getitem__() (skbio.sequence.substitutionmatrix method)": [[497, "skbio.sequence.SubstitutionMatrix.__getitem__"]], "__getstate__() (skbio.sequence.substitutionmatrix method)": [[498, "skbio.sequence.SubstitutionMatrix.__getstate__"]], "__gt__() (skbio.sequence.substitutionmatrix method)": [[499, "skbio.sequence.SubstitutionMatrix.__gt__"]], "__le__() (skbio.sequence.substitutionmatrix method)": [[500, "skbio.sequence.SubstitutionMatrix.__le__"]], "__lt__() (skbio.sequence.substitutionmatrix method)": [[501, "skbio.sequence.SubstitutionMatrix.__lt__"]], "__ne__() (skbio.sequence.substitutionmatrix method)": [[502, "skbio.sequence.SubstitutionMatrix.__ne__"]], "__str__() (skbio.sequence.substitutionmatrix method)": [[503, "skbio.sequence.SubstitutionMatrix.__str__"]], "between() (skbio.sequence.substitutionmatrix method)": [[504, "skbio.sequence.SubstitutionMatrix.between"]], "by_name() (skbio.sequence.substitutionmatrix class method)": [[505, "skbio.sequence.SubstitutionMatrix.by_name"]], "copy() (skbio.sequence.substitutionmatrix method)": [[506, "skbio.sequence.SubstitutionMatrix.copy"]], "filter() (skbio.sequence.substitutionmatrix method)": [[507, "skbio.sequence.SubstitutionMatrix.filter"]], "from_dict() (skbio.sequence.substitutionmatrix class method)": [[508, "skbio.sequence.SubstitutionMatrix.from_dict"]], "from_iterable() (skbio.sequence.substitutionmatrix class method)": [[509, "skbio.sequence.SubstitutionMatrix.from_iterable"]], "get_names() (skbio.sequence.substitutionmatrix class method)": [[510, "skbio.sequence.SubstitutionMatrix.get_names"]], "identity() (skbio.sequence.substitutionmatrix class method)": [[511, "skbio.sequence.SubstitutionMatrix.identity"]], "index() (skbio.sequence.substitutionmatrix method)": [[512, "skbio.sequence.SubstitutionMatrix.index"]], "plot() (skbio.sequence.substitutionmatrix method)": [[513, "skbio.sequence.SubstitutionMatrix.plot"]], "read() (skbio.sequence.substitutionmatrix class method)": [[514, "skbio.sequence.SubstitutionMatrix.read"]], "redundant_form() (skbio.sequence.substitutionmatrix method)": [[515, "skbio.sequence.SubstitutionMatrix.redundant_form"]], "to_data_frame() (skbio.sequence.substitutionmatrix method)": [[516, "skbio.sequence.SubstitutionMatrix.to_data_frame"]], "to_dict() (skbio.sequence.substitutionmatrix method)": [[517, "skbio.sequence.SubstitutionMatrix.to_dict"]], "transpose() (skbio.sequence.substitutionmatrix method)": [[518, "skbio.sequence.SubstitutionMatrix.transpose"]], "within() (skbio.sequence.substitutionmatrix method)": [[519, "skbio.sequence.SubstitutionMatrix.within"]], "write() (skbio.sequence.substitutionmatrix method)": [[520, "skbio.sequence.SubstitutionMatrix.write"]], "skbio.sequence.distance": [[521, "module-skbio.sequence.distance"]], "hamming() (in module skbio.sequence.distance)": [[522, "skbio.sequence.distance.hamming"]], "kmer_distance() (in module skbio.sequence.distance)": [[523, "skbio.sequence.distance.kmer_distance"]], "skbio.stats.composition": [[524, "module-skbio.stats.composition"]], "alr() (in module skbio.stats.composition)": [[525, "skbio.stats.composition.alr"]], "alr_inv() (in module skbio.stats.composition)": [[526, "skbio.stats.composition.alr_inv"]], "ancom() (in module skbio.stats.composition)": [[527, "skbio.stats.composition.ancom"]], "centralize() (in module skbio.stats.composition)": [[528, "skbio.stats.composition.centralize"]], "closure() (in module skbio.stats.composition)": [[529, "skbio.stats.composition.closure"]], "clr() (in module skbio.stats.composition)": [[530, "skbio.stats.composition.clr"]], "clr_inv() (in module skbio.stats.composition)": [[531, "skbio.stats.composition.clr_inv"]], "dirmult_ttest() (in module skbio.stats.composition)": [[532, "skbio.stats.composition.dirmult_ttest"]], "ilr() (in module skbio.stats.composition)": [[533, "skbio.stats.composition.ilr"]], "ilr_inv() (in module skbio.stats.composition)": [[534, "skbio.stats.composition.ilr_inv"]], "inner() (in module skbio.stats.composition)": [[535, "skbio.stats.composition.inner"]], "multiplicative_replacement() (in module skbio.stats.composition)": [[536, "skbio.stats.composition.multiplicative_replacement"]], "pairwise_vlr() (in module skbio.stats.composition)": [[537, "skbio.stats.composition.pairwise_vlr"]], "perturb() (in module skbio.stats.composition)": [[538, "skbio.stats.composition.perturb"]], "perturb_inv() (in module skbio.stats.composition)": [[539, "skbio.stats.composition.perturb_inv"]], "power() (in module skbio.stats.composition)": [[540, "skbio.stats.composition.power"]], "sbp_basis() (in module skbio.stats.composition)": [[541, "skbio.stats.composition.sbp_basis"]], "tree_basis() (in module skbio.stats.composition)": [[542, "skbio.stats.composition.tree_basis"]], "vlr() (in module skbio.stats.composition)": [[543, "skbio.stats.composition.vlr"]], "skbio.stats.distance": [[544, "module-skbio.stats.distance"]], "dissimilaritymatrix (class in skbio.stats.distance)": [[545, "skbio.stats.distance.DissimilarityMatrix"]], "__contains__() (skbio.stats.distance.dissimilaritymatrix method)": [[546, "skbio.stats.distance.DissimilarityMatrix.__contains__"]], "__eq__() (skbio.stats.distance.dissimilaritymatrix method)": [[547, "skbio.stats.distance.DissimilarityMatrix.__eq__"]], "__ge__() (skbio.stats.distance.dissimilaritymatrix method)": [[548, "skbio.stats.distance.DissimilarityMatrix.__ge__"]], "__getitem__() (skbio.stats.distance.dissimilaritymatrix method)": [[549, "skbio.stats.distance.DissimilarityMatrix.__getitem__"]], "__getstate__() (skbio.stats.distance.dissimilaritymatrix method)": [[550, "skbio.stats.distance.DissimilarityMatrix.__getstate__"]], "__gt__() (skbio.stats.distance.dissimilaritymatrix method)": [[551, "skbio.stats.distance.DissimilarityMatrix.__gt__"]], "__le__() (skbio.stats.distance.dissimilaritymatrix method)": [[552, "skbio.stats.distance.DissimilarityMatrix.__le__"]], "__lt__() (skbio.stats.distance.dissimilaritymatrix method)": [[553, "skbio.stats.distance.DissimilarityMatrix.__lt__"]], "__ne__() (skbio.stats.distance.dissimilaritymatrix method)": [[554, "skbio.stats.distance.DissimilarityMatrix.__ne__"]], "__str__() (skbio.stats.distance.dissimilaritymatrix method)": [[555, "skbio.stats.distance.DissimilarityMatrix.__str__"]], "between() (skbio.stats.distance.dissimilaritymatrix method)": [[556, "skbio.stats.distance.DissimilarityMatrix.between"]], "copy() (skbio.stats.distance.dissimilaritymatrix method)": [[557, "skbio.stats.distance.DissimilarityMatrix.copy"]], "filter() (skbio.stats.distance.dissimilaritymatrix method)": [[558, "skbio.stats.distance.DissimilarityMatrix.filter"]], "from_iterable() (skbio.stats.distance.dissimilaritymatrix class method)": [[559, "skbio.stats.distance.DissimilarityMatrix.from_iterable"]], "index() (skbio.stats.distance.dissimilaritymatrix method)": [[560, "skbio.stats.distance.DissimilarityMatrix.index"]], "plot() (skbio.stats.distance.dissimilaritymatrix method)": [[561, "skbio.stats.distance.DissimilarityMatrix.plot"]], "read() (skbio.stats.distance.dissimilaritymatrix class method)": [[562, "skbio.stats.distance.DissimilarityMatrix.read"]], "redundant_form() (skbio.stats.distance.dissimilaritymatrix method)": [[563, "skbio.stats.distance.DissimilarityMatrix.redundant_form"]], "to_data_frame() (skbio.stats.distance.dissimilaritymatrix method)": [[564, "skbio.stats.distance.DissimilarityMatrix.to_data_frame"]], "transpose() (skbio.stats.distance.dissimilaritymatrix method)": [[565, "skbio.stats.distance.DissimilarityMatrix.transpose"]], "within() (skbio.stats.distance.dissimilaritymatrix method)": [[566, "skbio.stats.distance.DissimilarityMatrix.within"]], "write() (skbio.stats.distance.dissimilaritymatrix method)": [[567, "skbio.stats.distance.DissimilarityMatrix.write"]], "dissimilaritymatrixerror": [[568, "skbio.stats.distance.DissimilarityMatrixError"]], "distancematrix (class in skbio.stats.distance)": [[569, "skbio.stats.distance.DistanceMatrix"]], "__contains__() (skbio.stats.distance.distancematrix method)": [[570, "skbio.stats.distance.DistanceMatrix.__contains__"]], "__eq__() (skbio.stats.distance.distancematrix method)": [[571, "skbio.stats.distance.DistanceMatrix.__eq__"]], "__ge__() (skbio.stats.distance.distancematrix method)": [[572, "skbio.stats.distance.DistanceMatrix.__ge__"]], "__getitem__() (skbio.stats.distance.distancematrix method)": [[573, "skbio.stats.distance.DistanceMatrix.__getitem__"]], "__getstate__() (skbio.stats.distance.distancematrix method)": [[574, "skbio.stats.distance.DistanceMatrix.__getstate__"]], "__gt__() (skbio.stats.distance.distancematrix method)": [[575, "skbio.stats.distance.DistanceMatrix.__gt__"]], "__le__() (skbio.stats.distance.distancematrix method)": [[576, "skbio.stats.distance.DistanceMatrix.__le__"]], "__lt__() (skbio.stats.distance.distancematrix method)": [[577, "skbio.stats.distance.DistanceMatrix.__lt__"]], "__ne__() (skbio.stats.distance.distancematrix method)": [[578, "skbio.stats.distance.DistanceMatrix.__ne__"]], "__str__() (skbio.stats.distance.distancematrix method)": [[579, "skbio.stats.distance.DistanceMatrix.__str__"]], "between() (skbio.stats.distance.distancematrix method)": [[580, "skbio.stats.distance.DistanceMatrix.between"]], "condensed_form() (skbio.stats.distance.distancematrix method)": [[581, "skbio.stats.distance.DistanceMatrix.condensed_form"]], "copy() (skbio.stats.distance.distancematrix method)": [[582, "skbio.stats.distance.DistanceMatrix.copy"]], "filter() (skbio.stats.distance.distancematrix method)": [[583, "skbio.stats.distance.DistanceMatrix.filter"]], "from_iterable() (skbio.stats.distance.distancematrix class method)": [[584, "skbio.stats.distance.DistanceMatrix.from_iterable"]], "index() (skbio.stats.distance.distancematrix method)": [[585, "skbio.stats.distance.DistanceMatrix.index"]], "permute() (skbio.stats.distance.distancematrix method)": [[586, "skbio.stats.distance.DistanceMatrix.permute"]], "plot() (skbio.stats.distance.distancematrix method)": [[587, "skbio.stats.distance.DistanceMatrix.plot"]], "read() (skbio.stats.distance.distancematrix class method)": [[588, "skbio.stats.distance.DistanceMatrix.read"]], "redundant_form() (skbio.stats.distance.distancematrix method)": [[589, "skbio.stats.distance.DistanceMatrix.redundant_form"]], "to_data_frame() (skbio.stats.distance.distancematrix method)": [[590, "skbio.stats.distance.DistanceMatrix.to_data_frame"]], "to_series() (skbio.stats.distance.distancematrix method)": [[591, "skbio.stats.distance.DistanceMatrix.to_series"]], "transpose() (skbio.stats.distance.distancematrix method)": [[592, "skbio.stats.distance.DistanceMatrix.transpose"]], "within() (skbio.stats.distance.distancematrix method)": [[593, "skbio.stats.distance.DistanceMatrix.within"]], "write() (skbio.stats.distance.distancematrix method)": [[594, "skbio.stats.distance.DistanceMatrix.write"]], "distancematrixerror": [[595, "skbio.stats.distance.DistanceMatrixError"]], "missingiderror": [[596, "skbio.stats.distance.MissingIDError"]], "anosim() (in module skbio.stats.distance)": [[597, "skbio.stats.distance.anosim"]], "bioenv() (in module skbio.stats.distance)": [[598, "skbio.stats.distance.bioenv"]], "mantel() (in module skbio.stats.distance)": [[599, "skbio.stats.distance.mantel"]], "permanova() (in module skbio.stats.distance)": [[600, "skbio.stats.distance.permanova"]], "permdisp() (in module skbio.stats.distance)": [[601, "skbio.stats.distance.permdisp"]], "pwmantel() (in module skbio.stats.distance)": [[602, "skbio.stats.distance.pwmantel"]], "randdm() (in module skbio.stats.distance)": [[603, "skbio.stats.distance.randdm"]], "skbio.stats.evolve": [[604, "module-skbio.stats.evolve"]], "hommola_cospeciation() (in module skbio.stats.evolve)": [[605, "skbio.stats.evolve.hommola_cospeciation"]], "skbio.stats.gradient": [[606, "module-skbio.stats.gradient"]], "averagegradientanova (class in skbio.stats.gradient)": [[607, "skbio.stats.gradient.AverageGradientANOVA"]], "__eq__() (skbio.stats.gradient.averagegradientanova method)": [[608, "skbio.stats.gradient.AverageGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.averagegradientanova method)": [[609, "skbio.stats.gradient.AverageGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.averagegradientanova method)": [[610, "skbio.stats.gradient.AverageGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.averagegradientanova method)": [[611, "skbio.stats.gradient.AverageGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.averagegradientanova method)": [[612, "skbio.stats.gradient.AverageGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.averagegradientanova method)": [[613, "skbio.stats.gradient.AverageGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.averagegradientanova method)": [[614, "skbio.stats.gradient.AverageGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.averagegradientanova method)": [[615, "skbio.stats.gradient.AverageGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.averagegradientanova method)": [[616, "skbio.stats.gradient.AverageGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.averagegradientanova method)": [[617, "skbio.stats.gradient.AverageGradientANOVA.get_trajectories"]], "categoryresults (class in skbio.stats.gradient)": [[618, "skbio.stats.gradient.CategoryResults"]], "__eq__() (skbio.stats.gradient.categoryresults method)": [[619, "skbio.stats.gradient.CategoryResults.__eq__"]], "__ge__() (skbio.stats.gradient.categoryresults method)": [[620, "skbio.stats.gradient.CategoryResults.__ge__"]], "__getstate__() (skbio.stats.gradient.categoryresults method)": [[621, "skbio.stats.gradient.CategoryResults.__getstate__"]], "__gt__() (skbio.stats.gradient.categoryresults method)": [[622, "skbio.stats.gradient.CategoryResults.__gt__"]], "__hash__() (skbio.stats.gradient.categoryresults method)": [[623, "skbio.stats.gradient.CategoryResults.__hash__"]], "__le__() (skbio.stats.gradient.categoryresults method)": [[624, "skbio.stats.gradient.CategoryResults.__le__"]], "__lt__() (skbio.stats.gradient.categoryresults method)": [[625, "skbio.stats.gradient.CategoryResults.__lt__"]], "__ne__() (skbio.stats.gradient.categoryresults method)": [[626, "skbio.stats.gradient.CategoryResults.__ne__"]], "__str__() (skbio.stats.gradient.categoryresults method)": [[627, "skbio.stats.gradient.CategoryResults.__str__"]], "to_files() (skbio.stats.gradient.categoryresults method)": [[628, "skbio.stats.gradient.CategoryResults.to_files"]], "firstdifferencegradientanova (class in skbio.stats.gradient)": [[629, "skbio.stats.gradient.FirstDifferenceGradientANOVA"]], "__eq__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[630, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[631, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[632, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[633, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[634, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[635, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[636, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[637, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[638, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.firstdifferencegradientanova method)": [[639, "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories"]], "gradientanova (class in skbio.stats.gradient)": [[640, "skbio.stats.gradient.GradientANOVA"]], "__eq__() (skbio.stats.gradient.gradientanova method)": [[641, "skbio.stats.gradient.GradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.gradientanova method)": [[642, "skbio.stats.gradient.GradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.gradientanova method)": [[643, "skbio.stats.gradient.GradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.gradientanova method)": [[644, "skbio.stats.gradient.GradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.gradientanova method)": [[645, "skbio.stats.gradient.GradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.gradientanova method)": [[646, "skbio.stats.gradient.GradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.gradientanova method)": [[647, "skbio.stats.gradient.GradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.gradientanova method)": [[648, "skbio.stats.gradient.GradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.gradientanova method)": [[649, "skbio.stats.gradient.GradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.gradientanova method)": [[650, "skbio.stats.gradient.GradientANOVA.get_trajectories"]], "gradientanovaresults (class in skbio.stats.gradient)": [[651, "skbio.stats.gradient.GradientANOVAResults"]], "__eq__() (skbio.stats.gradient.gradientanovaresults method)": [[652, "skbio.stats.gradient.GradientANOVAResults.__eq__"]], "__ge__() (skbio.stats.gradient.gradientanovaresults method)": [[653, "skbio.stats.gradient.GradientANOVAResults.__ge__"]], "__getstate__() (skbio.stats.gradient.gradientanovaresults method)": [[654, "skbio.stats.gradient.GradientANOVAResults.__getstate__"]], "__gt__() (skbio.stats.gradient.gradientanovaresults method)": [[655, "skbio.stats.gradient.GradientANOVAResults.__gt__"]], "__hash__() (skbio.stats.gradient.gradientanovaresults method)": [[656, "skbio.stats.gradient.GradientANOVAResults.__hash__"]], "__le__() (skbio.stats.gradient.gradientanovaresults method)": [[657, "skbio.stats.gradient.GradientANOVAResults.__le__"]], "__lt__() (skbio.stats.gradient.gradientanovaresults method)": [[658, "skbio.stats.gradient.GradientANOVAResults.__lt__"]], "__ne__() (skbio.stats.gradient.gradientanovaresults method)": [[659, "skbio.stats.gradient.GradientANOVAResults.__ne__"]], "__str__() (skbio.stats.gradient.gradientanovaresults method)": [[660, "skbio.stats.gradient.GradientANOVAResults.__str__"]], "to_files() (skbio.stats.gradient.gradientanovaresults method)": [[661, "skbio.stats.gradient.GradientANOVAResults.to_files"]], "groupresults (class in skbio.stats.gradient)": [[662, "skbio.stats.gradient.GroupResults"]], "__eq__() (skbio.stats.gradient.groupresults method)": [[663, "skbio.stats.gradient.GroupResults.__eq__"]], "__ge__() (skbio.stats.gradient.groupresults method)": [[664, "skbio.stats.gradient.GroupResults.__ge__"]], "__getstate__() (skbio.stats.gradient.groupresults method)": [[665, "skbio.stats.gradient.GroupResults.__getstate__"]], "__gt__() (skbio.stats.gradient.groupresults method)": [[666, "skbio.stats.gradient.GroupResults.__gt__"]], "__hash__() (skbio.stats.gradient.groupresults method)": [[667, "skbio.stats.gradient.GroupResults.__hash__"]], "__le__() (skbio.stats.gradient.groupresults method)": [[668, "skbio.stats.gradient.GroupResults.__le__"]], "__lt__() (skbio.stats.gradient.groupresults method)": [[669, "skbio.stats.gradient.GroupResults.__lt__"]], "__ne__() (skbio.stats.gradient.groupresults method)": [[670, "skbio.stats.gradient.GroupResults.__ne__"]], "__str__() (skbio.stats.gradient.groupresults method)": [[671, "skbio.stats.gradient.GroupResults.__str__"]], "to_files() (skbio.stats.gradient.groupresults method)": [[672, "skbio.stats.gradient.GroupResults.to_files"]], "trajectorygradientanova (class in skbio.stats.gradient)": [[673, "skbio.stats.gradient.TrajectoryGradientANOVA"]], "__eq__() (skbio.stats.gradient.trajectorygradientanova method)": [[674, "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.trajectorygradientanova method)": [[675, "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.trajectorygradientanova method)": [[676, "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.trajectorygradientanova method)": [[677, "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.trajectorygradientanova method)": [[678, "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.trajectorygradientanova method)": [[679, "skbio.stats.gradient.TrajectoryGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.trajectorygradientanova method)": [[680, "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.trajectorygradientanova method)": [[681, "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.trajectorygradientanova method)": [[682, "skbio.stats.gradient.TrajectoryGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.trajectorygradientanova method)": [[683, "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories"]], "windowdifferencegradientanova (class in skbio.stats.gradient)": [[684, "skbio.stats.gradient.WindowDifferenceGradientANOVA"]], "__eq__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[685, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[686, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[687, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[688, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[689, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[690, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[691, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[692, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[693, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.windowdifferencegradientanova method)": [[694, "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories"]], "isubsample() (in module skbio.stats)": [[695, "skbio.stats.isubsample"]], "skbio.stats.ordination": [[696, "module-skbio.stats.ordination"]], "ordinationresults (class in skbio.stats.ordination)": [[697, "skbio.stats.ordination.OrdinationResults"]], "__eq__() (skbio.stats.ordination.ordinationresults method)": [[698, "skbio.stats.ordination.OrdinationResults.__eq__"]], "__ge__() (skbio.stats.ordination.ordinationresults method)": [[699, "skbio.stats.ordination.OrdinationResults.__ge__"]], "__getstate__() (skbio.stats.ordination.ordinationresults method)": [[700, "skbio.stats.ordination.OrdinationResults.__getstate__"]], "__gt__() (skbio.stats.ordination.ordinationresults method)": [[701, "skbio.stats.ordination.OrdinationResults.__gt__"]], "__hash__() (skbio.stats.ordination.ordinationresults method)": [[702, "skbio.stats.ordination.OrdinationResults.__hash__"]], "__le__() (skbio.stats.ordination.ordinationresults method)": [[703, "skbio.stats.ordination.OrdinationResults.__le__"]], "__lt__() (skbio.stats.ordination.ordinationresults method)": [[704, "skbio.stats.ordination.OrdinationResults.__lt__"]], "__ne__() (skbio.stats.ordination.ordinationresults method)": [[705, "skbio.stats.ordination.OrdinationResults.__ne__"]], "__str__() (skbio.stats.ordination.ordinationresults method)": [[706, "skbio.stats.ordination.OrdinationResults.__str__"]], "plot() (skbio.stats.ordination.ordinationresults method)": [[707, "skbio.stats.ordination.OrdinationResults.plot"]], "read() (skbio.stats.ordination.ordinationresults class method)": [[708, "skbio.stats.ordination.OrdinationResults.read"]], "write() (skbio.stats.ordination.ordinationresults method)": [[709, "skbio.stats.ordination.OrdinationResults.write"]], "ca() (in module skbio.stats.ordination)": [[710, "skbio.stats.ordination.ca"]], "cca() (in module skbio.stats.ordination)": [[711, "skbio.stats.ordination.cca"]], "corr() (in module skbio.stats.ordination)": [[712, "skbio.stats.ordination.corr"]], "e_matrix() (in module skbio.stats.ordination)": [[713, "skbio.stats.ordination.e_matrix"]], "f_matrix() (in module skbio.stats.ordination)": [[714, "skbio.stats.ordination.f_matrix"]], "mean_and_std() (in module skbio.stats.ordination)": [[715, "skbio.stats.ordination.mean_and_std"]], "pcoa() (in module skbio.stats.ordination)": [[716, "skbio.stats.ordination.pcoa"]], "pcoa_biplot() (in module skbio.stats.ordination)": [[717, "skbio.stats.ordination.pcoa_biplot"]], "rda() (in module skbio.stats.ordination)": [[718, "skbio.stats.ordination.rda"]], "scale() (in module skbio.stats.ordination)": [[719, "skbio.stats.ordination.scale"]], "svd_rank() (in module skbio.stats.ordination)": [[720, "skbio.stats.ordination.svd_rank"]], "skbio.stats.power": [[721, "module-skbio.stats.power"]], "confidence_bound() (in module skbio.stats.power)": [[722, "skbio.stats.power.confidence_bound"]], "paired_subsamples() (in module skbio.stats.power)": [[723, "skbio.stats.power.paired_subsamples"]], "subsample_paired_power() (in module skbio.stats.power)": [[724, "skbio.stats.power.subsample_paired_power"]], "subsample_power() (in module skbio.stats.power)": [[725, "skbio.stats.power.subsample_power"]], "subsample_counts() (in module skbio.stats)": [[726, "skbio.stats.subsample_counts"]], "duplicatenodeerror": [[727, "skbio.tree.DuplicateNodeError"]], "missingnodeerror": [[728, "skbio.tree.MissingNodeError"]], "nolengtherror": [[729, "skbio.tree.NoLengthError"]], "noparenterror": [[730, "skbio.tree.NoParentError"]], "treeerror": [[731, "skbio.tree.TreeError"]], "treenode (class in skbio.tree)": [[732, "skbio.tree.TreeNode"]], "__copy__() (skbio.tree.treenode method)": [[733, "skbio.tree.TreeNode.__copy__"]], "__deepcopy__() (skbio.tree.treenode method)": [[734, "skbio.tree.TreeNode.__deepcopy__"]], "__eq__() (skbio.tree.treenode method)": [[735, "skbio.tree.TreeNode.__eq__"]], "__ge__() (skbio.tree.treenode method)": [[736, "skbio.tree.TreeNode.__ge__"]], "__getitem__() (skbio.tree.treenode method)": [[737, "skbio.tree.TreeNode.__getitem__"]], "__getstate__() (skbio.tree.treenode method)": [[738, "skbio.tree.TreeNode.__getstate__"]], "__gt__() (skbio.tree.treenode method)": [[739, "skbio.tree.TreeNode.__gt__"]], "__hash__() (skbio.tree.treenode method)": [[740, "skbio.tree.TreeNode.__hash__"]], "__iter__() (skbio.tree.treenode method)": [[741, "skbio.tree.TreeNode.__iter__"]], "__le__() (skbio.tree.treenode method)": [[742, "skbio.tree.TreeNode.__le__"]], "__len__() (skbio.tree.treenode method)": [[743, "skbio.tree.TreeNode.__len__"]], "__lt__() (skbio.tree.treenode method)": [[744, "skbio.tree.TreeNode.__lt__"]], "__ne__() (skbio.tree.treenode method)": [[745, "skbio.tree.TreeNode.__ne__"]], "__str__() (skbio.tree.treenode method)": [[746, "skbio.tree.TreeNode.__str__"]], "accumulate_to_ancestor() (skbio.tree.treenode method)": [[747, "skbio.tree.TreeNode.accumulate_to_ancestor"]], "ancestors() (skbio.tree.treenode method)": [[748, "skbio.tree.TreeNode.ancestors"]], "append() (skbio.tree.treenode method)": [[749, "skbio.tree.TreeNode.append"]], "ascii_art() (skbio.tree.treenode method)": [[750, "skbio.tree.TreeNode.ascii_art"]], "assign_ids() (skbio.tree.treenode method)": [[751, "skbio.tree.TreeNode.assign_ids"]], "assign_supports() (skbio.tree.treenode method)": [[752, "skbio.tree.TreeNode.assign_supports"]], "bifurcate() (skbio.tree.treenode method)": [[753, "skbio.tree.TreeNode.bifurcate"]], "cache_attr() (skbio.tree.treenode method)": [[754, "skbio.tree.TreeNode.cache_attr"]], "compare_rfd() (skbio.tree.treenode method)": [[755, "skbio.tree.TreeNode.compare_rfd"]], "compare_subsets() (skbio.tree.treenode method)": [[756, "skbio.tree.TreeNode.compare_subsets"]], "compare_tip_distances() (skbio.tree.treenode method)": [[757, "skbio.tree.TreeNode.compare_tip_distances"]], "copy() (skbio.tree.treenode method)": [[758, "skbio.tree.TreeNode.copy"]], "count() (skbio.tree.treenode method)": [[759, "skbio.tree.TreeNode.count"]], "create_caches() (skbio.tree.treenode method)": [[760, "skbio.tree.TreeNode.create_caches"]], "deepcopy() (skbio.tree.treenode method)": [[761, "skbio.tree.TreeNode.deepcopy"]], "descending_branch_length() (skbio.tree.treenode method)": [[762, "skbio.tree.TreeNode.descending_branch_length"]], "distance() (skbio.tree.treenode method)": [[763, "skbio.tree.TreeNode.distance"]], "extend() (skbio.tree.treenode method)": [[764, "skbio.tree.TreeNode.extend"]], "find() (skbio.tree.treenode method)": [[765, "skbio.tree.TreeNode.find"]], "find_all() (skbio.tree.treenode method)": [[766, "skbio.tree.TreeNode.find_all"]], "find_by_func() (skbio.tree.treenode method)": [[767, "skbio.tree.TreeNode.find_by_func"]], "find_by_id() (skbio.tree.treenode method)": [[768, "skbio.tree.TreeNode.find_by_id"]], "from_linkage_matrix() (skbio.tree.treenode class method)": [[769, "skbio.tree.TreeNode.from_linkage_matrix"]], "from_taxdump() (skbio.tree.treenode class method)": [[770, "skbio.tree.TreeNode.from_taxdump"]], "from_taxonomy() (skbio.tree.treenode class method)": [[771, "skbio.tree.TreeNode.from_taxonomy"]], "get_max_distance() (skbio.tree.treenode method)": [[772, "skbio.tree.TreeNode.get_max_distance"]], "has_children() (skbio.tree.treenode method)": [[773, "skbio.tree.TreeNode.has_children"]], "index_tree() (skbio.tree.treenode method)": [[774, "skbio.tree.TreeNode.index_tree"]], "invalidate_caches() (skbio.tree.treenode method)": [[775, "skbio.tree.TreeNode.invalidate_caches"]], "is_root() (skbio.tree.treenode method)": [[776, "skbio.tree.TreeNode.is_root"]], "is_tip() (skbio.tree.treenode method)": [[777, "skbio.tree.TreeNode.is_tip"]], "lca() (skbio.tree.treenode method)": [[778, "skbio.tree.TreeNode.lca"]], "levelorder() (skbio.tree.treenode method)": [[779, "skbio.tree.TreeNode.levelorder"]], "lowest_common_ancestor() (skbio.tree.treenode method)": [[780, "skbio.tree.TreeNode.lowest_common_ancestor"]], "neighbors() (skbio.tree.treenode method)": [[781, "skbio.tree.TreeNode.neighbors"]], "non_tips() (skbio.tree.treenode method)": [[782, "skbio.tree.TreeNode.non_tips"]], "observed_node_counts() (skbio.tree.treenode method)": [[783, "skbio.tree.TreeNode.observed_node_counts"]], "pop() (skbio.tree.treenode method)": [[784, "skbio.tree.TreeNode.pop"]], "postorder() (skbio.tree.treenode method)": [[785, "skbio.tree.TreeNode.postorder"]], "pre_and_postorder() (skbio.tree.treenode method)": [[786, "skbio.tree.TreeNode.pre_and_postorder"]], "preorder() (skbio.tree.treenode method)": [[787, "skbio.tree.TreeNode.preorder"]], "prune() (skbio.tree.treenode method)": [[788, "skbio.tree.TreeNode.prune"]], "read() (skbio.tree.treenode class method)": [[789, "skbio.tree.TreeNode.read"]], "remove() (skbio.tree.treenode method)": [[790, "skbio.tree.TreeNode.remove"]], "remove_deleted() (skbio.tree.treenode method)": [[791, "skbio.tree.TreeNode.remove_deleted"]], "root() (skbio.tree.treenode method)": [[792, "skbio.tree.TreeNode.root"]], "root_at() (skbio.tree.treenode method)": [[793, "skbio.tree.TreeNode.root_at"]], "root_at_midpoint() (skbio.tree.treenode method)": [[794, "skbio.tree.TreeNode.root_at_midpoint"]], "shear() (skbio.tree.treenode method)": [[795, "skbio.tree.TreeNode.shear"]], "shuffle() (skbio.tree.treenode method)": [[796, "skbio.tree.TreeNode.shuffle"]], "siblings() (skbio.tree.treenode method)": [[797, "skbio.tree.TreeNode.siblings"]], "subset() (skbio.tree.treenode method)": [[798, "skbio.tree.TreeNode.subset"]], "subsets() (skbio.tree.treenode method)": [[799, "skbio.tree.TreeNode.subsets"]], "subtree() (skbio.tree.treenode method)": [[800, "skbio.tree.TreeNode.subtree"]], "tip_tip_distances() (skbio.tree.treenode method)": [[801, "skbio.tree.TreeNode.tip_tip_distances"]], "tips() (skbio.tree.treenode method)": [[802, "skbio.tree.TreeNode.tips"]], "to_array() (skbio.tree.treenode method)": [[803, "skbio.tree.TreeNode.to_array"]], "to_taxonomy() (skbio.tree.treenode method)": [[804, "skbio.tree.TreeNode.to_taxonomy"]], "traverse() (skbio.tree.treenode method)": [[805, "skbio.tree.TreeNode.traverse"]], "unpack() (skbio.tree.treenode method)": [[806, "skbio.tree.TreeNode.unpack"]], "unpack_by_func() (skbio.tree.treenode method)": [[807, "skbio.tree.TreeNode.unpack_by_func"]], "unrooted_copy() (skbio.tree.treenode method)": [[808, "skbio.tree.TreeNode.unrooted_copy"]], "unrooted_deepcopy() (skbio.tree.treenode method)": [[809, "skbio.tree.TreeNode.unrooted_deepcopy"]], "write() (skbio.tree.treenode method)": [[810, "skbio.tree.TreeNode.write"]], "majority_rule() (in module skbio.tree)": [[811, "skbio.tree.majority_rule"]], "nj() (in module skbio.tree)": [[812, "skbio.tree.nj"]], "efficiencywarning": [[813, "skbio.util.EfficiencyWarning"]], "representationwarning": [[814, "skbio.util.RepresentationWarning"]], "assert_data_frame_almost_equal() (in module skbio.util)": [[815, "skbio.util.assert_data_frame_almost_equal"]], "assert_ordination_results_equal() (in module skbio.util)": [[816, "skbio.util.assert_ordination_results_equal"]], "cardinal_to_ordinal() (in module skbio.util)": [[817, "skbio.util.cardinal_to_ordinal"]], "classproperty (class in skbio.util)": [[818, "skbio.util.classproperty"]], "__delete__() (skbio.util.classproperty method)": [[819, "skbio.util.classproperty.__delete__"]], "__eq__() (skbio.util.classproperty method)": [[820, "skbio.util.classproperty.__eq__"]], "__ge__() (skbio.util.classproperty method)": [[821, "skbio.util.classproperty.__ge__"]], "__get__() (skbio.util.classproperty method)": [[822, "skbio.util.classproperty.__get__"]], "__getstate__() (skbio.util.classproperty method)": [[823, "skbio.util.classproperty.__getstate__"]], "__gt__() (skbio.util.classproperty method)": [[824, "skbio.util.classproperty.__gt__"]], "__hash__() (skbio.util.classproperty method)": [[825, "skbio.util.classproperty.__hash__"]], "__le__() (skbio.util.classproperty method)": [[826, "skbio.util.classproperty.__le__"]], "__lt__() (skbio.util.classproperty method)": [[827, "skbio.util.classproperty.__lt__"]], "__ne__() (skbio.util.classproperty method)": [[828, "skbio.util.classproperty.__ne__"]], "__set__() (skbio.util.classproperty method)": [[829, "skbio.util.classproperty.__set__"]], "__set_name__() (skbio.util.classproperty method)": [[830, "skbio.util.classproperty.__set_name__"]], "__str__() (skbio.util.classproperty method)": [[831, "skbio.util.classproperty.__str__"]], "deleter() (skbio.util.classproperty method)": [[832, "skbio.util.classproperty.deleter"]], "getter() (skbio.util.classproperty method)": [[833, "skbio.util.classproperty.getter"]], "setter() (skbio.util.classproperty method)": [[834, "skbio.util.classproperty.setter"]], "find_duplicates() (in module skbio.util)": [[835, "skbio.util.find_duplicates"]], "get_data_path() (in module skbio.util)": [[836, "skbio.util.get_data_path"]], "safe_md5() (in module skbio.util)": [[837, "skbio.util.safe_md5"]], "workflow (class in skbio.workflow)": [[838, "skbio.workflow.Workflow"]], "__call__() (skbio.workflow.workflow method)": [[839, "skbio.workflow.Workflow.__call__"]], "__eq__() (skbio.workflow.workflow method)": [[840, "skbio.workflow.Workflow.__eq__"]], "__ge__() (skbio.workflow.workflow method)": [[841, "skbio.workflow.Workflow.__ge__"]], "__getstate__() (skbio.workflow.workflow method)": [[842, "skbio.workflow.Workflow.__getstate__"]], "__gt__() (skbio.workflow.workflow method)": [[843, "skbio.workflow.Workflow.__gt__"]], "__hash__() (skbio.workflow.workflow method)": [[844, "skbio.workflow.Workflow.__hash__"]], "__le__() (skbio.workflow.workflow method)": [[845, "skbio.workflow.Workflow.__le__"]], "__lt__() (skbio.workflow.workflow method)": [[846, "skbio.workflow.Workflow.__lt__"]], "__ne__() (skbio.workflow.workflow method)": [[847, "skbio.workflow.Workflow.__ne__"]], "__str__() (skbio.workflow.workflow method)": [[848, "skbio.workflow.Workflow.__str__"]], "initialize_state() (skbio.workflow.workflow method)": [[849, "skbio.workflow.Workflow.initialize_state"]], "method (class in skbio.workflow)": [[850, "skbio.workflow.method"]], "__call__() (skbio.workflow.method method)": [[851, "skbio.workflow.method.__call__"]], "__eq__() (skbio.workflow.method method)": [[852, "skbio.workflow.method.__eq__"]], "__ge__() (skbio.workflow.method method)": [[853, "skbio.workflow.method.__ge__"]], "__getstate__() (skbio.workflow.method method)": [[854, "skbio.workflow.method.__getstate__"]], "__gt__() (skbio.workflow.method method)": [[855, "skbio.workflow.method.__gt__"]], "__hash__() (skbio.workflow.method method)": [[856, "skbio.workflow.method.__hash__"]], "__le__() (skbio.workflow.method method)": [[857, "skbio.workflow.method.__le__"]], "__lt__() (skbio.workflow.method method)": [[858, "skbio.workflow.method.__lt__"]], "__ne__() (skbio.workflow.method method)": [[859, "skbio.workflow.method.__ne__"]], "__str__() (skbio.workflow.method method)": [[860, "skbio.workflow.method.__str__"]], "requires (class in skbio.workflow)": [[861, "skbio.workflow.requires"]], "__call__() (skbio.workflow.requires method)": [[862, "skbio.workflow.requires.__call__"]], "__eq__() (skbio.workflow.requires method)": [[863, "skbio.workflow.requires.__eq__"]], "__ge__() (skbio.workflow.requires method)": [[864, "skbio.workflow.requires.__ge__"]], "__getstate__() (skbio.workflow.requires method)": [[865, "skbio.workflow.requires.__getstate__"]], "__gt__() (skbio.workflow.requires method)": [[866, "skbio.workflow.requires.__gt__"]], "__hash__() (skbio.workflow.requires method)": [[867, "skbio.workflow.requires.__hash__"]], "__le__() (skbio.workflow.requires method)": [[868, "skbio.workflow.requires.__le__"]], "__lt__() (skbio.workflow.requires method)": [[869, "skbio.workflow.requires.__lt__"]], "__ne__() (skbio.workflow.requires method)": [[870, "skbio.workflow.requires.__ne__"]], "__str__() (skbio.workflow.requires method)": [[871, "skbio.workflow.requires.__str__"]], "skbio.io": [[873, "module-skbio.io"]], "skbio.metadata": [[874, "module-skbio.metadata"]], "skbio.sequence": [[875, "module-skbio.sequence"]], "skbio.stats": [[876, "module-skbio.stats"]], "skbio.tree": [[877, "module-skbio.tree"]], "skbio.util": [[878, "module-skbio.util"]], "skbio.workflow": [[879, "module-skbio.workflow"]]}})