Search.setIndex({"alltitles": {"Adding Node Information": [[225, "adding-node-information"]], "Advanced Label and Length Rules": [[225, "advanced-label-and-length-rules"]], "Alignment Section": [[217, "alignment-section"], [227, "alignment-section"]], "Alignment algorithms": [[0, "alignment-algorithms"]], "Alignment data structure": [[0, "alignment-data-structure"]], "Alignment structure": [[0, "alignment-structure"]], "Alpha diversity": [[1, "alpha-diversity"]], "Alpha diversity measures (skbio.diversity.alpha)": [[106, "alpha-diversity-measures-skbio-diversity-alpha"]], "Application of Rules": [[225, "application-of-rules"]], "BIOM table": [[1094, "biom-table"]], "BIOM-Format (skbio.io.format.biom)": [[214, "biom-format-skbio-io-format-biom"]], "BLAST Column Types": [[215, "blast-column-types"], [216, "blast-column-types"]], "BLAST+6 format (skbio.io.format.blast6)": [[215, "blast-6-format-skbio-io-format-blast6"]], "BLAST+7 format (skbio.io.format.blast7)": [[216, "blast-7-format-skbio-io-format-blast7"]], "Basic Symbols": [[225, "basic-symbols"]], "Beta diversity": [[1, "beta-diversity"]], "Beta diversity measures (skbio.diversity.beta)": [[142, "beta-diversity-measures-skbio-diversity-beta"]], "Biological Embeddings (skbio.embedding)": [[2, "biological-embeddings-skbio-embedding"]], "Biological Sequences (skbio.sequence)": [[1092, "biological-sequences-skbio-sequence"]], "Canonical analysis": [[850, "canonical-analysis"]], "Categorical Variable Stats": [[701, "categorical-variable-stats"]], "Caveats": [[225, "caveats"]], "Classes": [[232, "classes"], [701, "classes"], [760, "classes"], [1097, "classes"]], "Clustal format (skbio.io.format.clustal)": [[217, "clustal-format-skbio-io-format-clustal"]], "Column Types": [[229, "column-types"]], "Comments and Empty Rows": [[229, "comments-and-empty-rows"]], "Community Diversity (skbio.diversity)": [[1, "community-diversity-skbio-diversity"]], "Composition Statistics (skbio.stats.composition)": [[680, "composition-statistics-skbio-stats-composition"]], "Composition statistics": [[1093, "composition-statistics"]], "Continuous Variable Stats": [[701, "continuous-variable-stats"]], "Cophylogenetic methods": [[758, "cophylogenetic-methods"]], "Correspondence analysis": [[850, "correspondence-analysis"]], "Count vectors": [[1, "count-vectors"]], "Creating a new format for scikit-bio": [[232, "creating-a-new-format-for-scikit-bio"]], "Data Table (skbio.table)": [[1094, "data-table-skbio-table"]], "Data structures": [[701, "data-structures"]], "Data subsampling": [[1093, "data-subsampling"]], "Decorators": [[1097, "decorators"]], "Deprecated functionality": [[0, "deprecated-functionality"]], "Develop custom formats": [[1090, "develop-custom-formats"]], "Developer warnings": [[1096, "developer-warnings"]], "Distance Matrix Comparisons": [[701, "distance-matrix-comparisons"]], "Distance calculation": [[1092, "distance-calculation"]], "Distance matrix statistics": [[1093, "distance-matrix-statistics"]], "Distance matrix-based statistics (skbio.stats.distance)": [[701, "distance-matrix-based-statistics-skbio-stats-distance"]], "Distance-based statistics": [[701, "distance-based-statistics"]], "EMBL format (skbio.io.format.embl)": [[219, "embl-format-skbio-io-format-embl"]], "Embedding format (skbio.io.format.embed).": [[218, "embedding-format-skbio-io-format-embed"]], "Embedding types": [[2, "embedding-types"]], "Embedding vector types": [[2, "embedding-vector-types"]], "Embedding vector utilities": [[2, "embedding-vector-utilities"]], "Empirical Power Estimation (skbio.stats.power)": [[875, "empirical-power-estimation-skbio-stats-power"]], "Evolutionary statistics (skbio.stats.evolve)": [[758, "evolutionary-statistics-skbio-stats-evolve"]], "Example data": [[1094, "example-data"]], "Examples": [[214, "examples"], [215, "examples"], [216, "examples"], [217, "examples"], [218, "examples"], [219, "examples"], [220, "examples"], [221, "examples"], [222, "examples"], [223, "examples"], [225, "examples"], [226, "examples"], [227, "examples"], [228, "examples"], [230, "examples"], [231, "examples"], [701, "examples"], [760, "examples"], [850, "examples"], [875, "examples"]], "Exceptions": [[232, "exceptions"], [701, "exceptions"], [1095, "exceptions"]], "Exceptions and warnings": [[1090, "exceptions-and-warnings"]], "Explanation": [[225, "explanation"]], "FASTA Format": [[220, "fasta-format"]], "FASTA/QUAL format (skbio.io.format.fasta)": [[220, "fasta-qual-format-skbio-io-format-fasta"]], "FASTQ format (skbio.io.format.fastq)": [[221, "fastq-format-skbio-io-format-fastq"]], "FEATURES section": [[222, "features-section"]], "FT section": [[219, "ft-section"]], "Feature Level Products": [[219, "feature-level-products"]], "Footer": [[230, "footer"]], "Formal Grammar": [[225, "formal-grammar"]], "Format Parameters": [[215, "format-parameters"], [217, "format-parameters"], [220, "format-parameters"], [221, "format-parameters"], [222, "format-parameters"], [223, "format-parameters"], [224, "format-parameters"], [225, "format-parameters"], [227, "format-parameters"], [228, "format-parameters"], [230, "format-parameters"], [231, "format-parameters"]], "Format Specification": [[213, "format-specification"], [214, "format-specification"], [215, "format-specification"], [216, "format-specification"], [217, "format-specification"], [218, "format-specification"], [219, "format-specification"], [220, "format-specification"], [221, "format-specification"], [222, "format-specification"], [223, "format-specification"], [224, "format-specification"], [225, "format-specification"], [226, "format-specification"], [227, "format-specification"], [228, "format-specification"], [229, "format-specification"], [230, "format-specification"], [231, "format-specification"]], "Format Support": [[213, "format-support"], [214, "format-support"], [215, "format-support"], [216, "format-support"], [217, "format-support"], [218, "format-support"], [219, "format-support"], [220, "format-support"], [221, "format-support"], [222, "format-support"], [223, "format-support"], [224, "format-support"], [225, "format-support"], [226, "format-support"], [227, "format-support"], [228, "format-support"], [229, "format-support"], [230, "format-support"], [231, "format-support"]], "Functions": [[106, "functions"], [142, "functions"], [232, "functions"], [271, "functions"], [677, "functions"], [680, "functions"], [701, "functions"], [758, "functions"], [875, "functions"]], "GC metadata": [[230, "gc-metadata"]], "GF metadata": [[230, "gf-metadata"]], "GFF3 format (skbio.io.format.gff3)": [[223, "gff3-format-skbio-io-format-gff3"]], "GR metadata": [[230, "gr-metadata"]], "GS metadata": [[230, "gs-metadata"]], "GenBank format (skbio.io.format.genbank)": [[222, "genbank-format-skbio-io-format-genbank"]], "Generator and TabularMSA Reader Parameters": [[220, "generator-and-tabularmsa-reader-parameters"]], "Generators Only": [[228, "generators-only"]], "Gradient analyses (skbio.stats.gradient)": [[760, "gradient-analyses-skbio-stats-gradient"]], "Header": [[230, "header"]], "Header Section": [[227, "header-section"]], "I/O Registry (skbio.io.registry)": [[232, "i-o-registry-skbio-io-registry"]], "I/O utilities (skbio.io.util)": [[271, "i-o-utilities-skbio-io-util"]], "Identifier Column": [[229, "identifier-column"]], "Inline Comments": [[225, "inline-comments"]], "Input and Output (skbio.io)": [[1090, "input-and-output-skbio-io"]], "Input validation": [[1, "input-validation"]], "Interval metadata": [[1091, "interval-metadata"]], "Introduction": [[1, "introduction"]], "Labeled square matrix format (skbio.io.format.lsmat)": [[224, "labeled-square-matrix-format-skbio-io-format-lsmat"]], "Leading and trailing whitespace characters": [[229, "leading-and-trailing-whitespace-characters"]], "Location string": [[222, "location-string"]], "Metadata": [[230, "metadata"]], "Metadata (skbio.metadata)": [[1091, "metadata-skbio-metadata"]], "Metadata Columns": [[229, "metadata-columns"]], "Metadata Formatting Requirements": [[229, "metadata-formatting-requirements"]], "Metadata Validation": [[229, "metadata-validation"]], "Metadata columns": [[1091, "metadata-columns"]], "Miscellaneous functionality": [[1096, "miscellaneous-functionality"]], "Multidimensional scaling": [[850, "multidimensional-scaling"]], "Multiple Sequence Alignment": [[230, "multiple-sequence-alignment"]], "Multivariate Statistics (skbio.stats)": [[1093, "multivariate-statistics-skbio-stats"]], "Newick format (skbio.io.format.newick)": [[225, "newick-format-skbio-io-format-newick"]], "Number Formatting": [[229, "number-formatting"]], "ORIGIN section": [[222, "origin-section"]], "Ordination methods": [[1093, "ordination-methods"]], "Ordination methods (skbio.stats.ordination)": [[850, "ordination-methods-skbio-stats-ordination"]], "Ordination results": [[850, "ordination-results"]], "Ordination results format (skbio.io.format.ordination)": [[226, "ordination-results-format-skbio-io-format-ordination"]], "Other statistical methods": [[1093, "other-statistical-methods"]], "PHYLIP multiple sequence alignment format (skbio.io.format.phylip)": [[227, "phylip-multiple-sequence-alignment-format-skbio-io-format-phylip"]], "Phylogenetic reconstruction": [[1095, "phylogenetic-reconstruction"]], "QSeq format (skbio.io.format.qseq)": [[228, "qseq-format-skbio-io-format-qseq"]], "QUAL File Parameter (Readers and Writers)": [[220, "qual-file-parameter-readers-and-writers"]], "QUAL Format": [[220, "qual-format"]], "Quality Score Variants": [[221, "quality-score-variants"]], "Read/write files": [[1090, "read-write-files"]], "Reader-specific Parameters": [[220, "reader-specific-parameters"], [222, "reader-specific-parameters"], [223, "reader-specific-parameters"]], "Reading EMBL Files": [[219, "reading-embl-files"]], "Reading EMBL Files using generators": [[219, "reading-embl-files-using-generators"]], "Reading and Writing FASTA Files": [[220, "reading-and-writing-fasta-files"]], "Reading and Writing FASTA/QUAL Files": [[220, "reading-and-writing-fasta-qual-files"]], "Reading and Writing GenBank Files": [[222, "reading-and-writing-genbank-files"]], "Reading files into scikit-bio": [[1090, "reading-files-into-scikit-bio"]], "Recommendations for Identifiers": [[229, "recommendations-for-identifiers"]], "References": [[213, "references"], [214, "references"], [215, "references"], [216, "references"], [217, "references"], [219, "references"], [220, "references"], [221, "references"], [222, "references"], [223, "references"], [225, "references"], [227, "references"], [228, "references"], [230, "references"], [231, "references"], [680, "references"], [701, "references"], [850, "references"]], "Reserved Keyword Arguments": [[232, "reserved-keyword-arguments"]], "SQ section": [[219, "sq-section"]], "Sample metadata": [[1091, "sample-metadata"]], "Sections before FEATURES": [[222, "sections-before-features"]], "Sections before FH (Feature Header)": [[219, "sections-before-fh-feature-header"]], "Sequence Alignments (skbio.alignment)": [[0, "sequence-alignments-skbio-alignment"]], "Sequence Data": [[220, "sequence-data"]], "Sequence Header": [[220, "sequence-header"]], "Sequence Reader Parameters": [[220, "sequence-reader-parameters"]], "Sequence distance metrics (skbio.sequence.distance)": [[677, "sequence-distance-metrics-skbio-sequence-distance"]], "Sequence types": [[1092, "sequence-types"]], "Sequence utilities": [[1092, "sequence-utilities"]], "Simple binary dissimilarity matrix format (skbio.io.format.binary_dm)": [[213, "simple-binary-dissimilarity-matrix-format-skbio-io-format-binary-dm"]], "Specifying a diversity metric": [[1, "specifying-a-diversity-metric"]], "Stockholm format (skbio.io.format.stockholm)": [[230, "stockholm-format-skbio-io-format-stockholm"]], "Supported file formats": [[1090, "supported-file-formats"]], "Taxdump format (skbio.io.format.taxdump)": [[231, "taxdump-format-skbio-io-format-taxdump"]], "Testing functionality": [[1096, "testing-functionality"]], "Tree structure and operations": [[1095, "tree-structure-and-operations"]], "Tree utilities": [[1095, "tree-utilities"]], "Trees and Phylogenetics (skbio.tree)": [[1095, "trees-and-phylogenetics-skbio-tree"]], "Tutorial": [[0, "tutorial"], [1, "tutorial"], [1090, "tutorial"], [1092, "tutorial"], [1095, "tutorial"], [1097, "tutorial"]], "Using the optimized alignment algorithm": [[0, "using-the-optimized-alignment-algorithm"]], "Using the slow alignment algorithm": [[0, "using-the-slow-alignment-algorithm"]], "Utilities for Developers (skbio.util)": [[1096, "utilities-for-developers-skbio-util"]], "Utility functions": [[850, "utility-functions"]], "What kinds of files scikit-bio can use": [[1090, "what-kinds-of-files-scikit-bio-can-use"]], "Whitespace": [[225, "whitespace"]], "Workflow construction (skbio.workflow)": [[1097, "workflow-construction-skbio-workflow"]], "Writer-specific Parameters": [[220, "writer-specific-parameters"], [223, "writer-specific-parameters"]], "Writing files from scikit-bio": [[1090, "writing-files-from-scikit-bio"]], "division.dmp": [[231, "division-dmp"]], "gencode.dmp": [[231, "gencode-dmp"]], "names.dmp": [[231, "names-dmp"]], "nodes.dmp": [[231, "nodes-dmp"]], "scikit-bio 0.6.1-dev documentation": [[1089, "scikit-bio-version-documentation"]], "skbio.alignment.AlignPath": [[3, "skbio-alignment-alignpath"]], "skbio.alignment.AlignPath.__eq__": [[4, "skbio-alignment-alignpath-eq"]], "skbio.alignment.AlignPath.__ge__": [[5, "skbio-alignment-alignpath-ge"]], "skbio.alignment.AlignPath.__getstate__": [[6, "skbio-alignment-alignpath-getstate"]], "skbio.alignment.AlignPath.__gt__": [[7, "skbio-alignment-alignpath-gt"]], "skbio.alignment.AlignPath.__hash__": [[8, "skbio-alignment-alignpath-hash"]], "skbio.alignment.AlignPath.__le__": [[9, "skbio-alignment-alignpath-le"]], "skbio.alignment.AlignPath.__lt__": [[10, "skbio-alignment-alignpath-lt"]], "skbio.alignment.AlignPath.__ne__": [[11, "skbio-alignment-alignpath-ne"]], "skbio.alignment.AlignPath.__str__": [[12, "skbio-alignment-alignpath-str"]], "skbio.alignment.AlignPath.from_bits": [[13, "skbio-alignment-alignpath-from-bits"]], "skbio.alignment.AlignPath.from_coordinates": [[14, "skbio-alignment-alignpath-from-coordinates"]], "skbio.alignment.AlignPath.from_indices": [[15, "skbio-alignment-alignpath-from-indices"]], "skbio.alignment.AlignPath.from_tabular": [[16, "skbio-alignment-alignpath-from-tabular"]], "skbio.alignment.AlignPath.to_bits": [[17, "skbio-alignment-alignpath-to-bits"]], "skbio.alignment.AlignPath.to_coordinates": [[18, "skbio-alignment-alignpath-to-coordinates"]], "skbio.alignment.AlignPath.to_indices": [[19, "skbio-alignment-alignpath-to-indices"]], "skbio.alignment.AlignmentStructure": [[20, "skbio-alignment-alignmentstructure"]], "skbio.alignment.AlignmentStructure.__eq__": [[21, "skbio-alignment-alignmentstructure-eq"]], "skbio.alignment.AlignmentStructure.__ge__": [[22, "skbio-alignment-alignmentstructure-ge"]], "skbio.alignment.AlignmentStructure.__getitem__": [[23, "skbio-alignment-alignmentstructure-getitem"]], "skbio.alignment.AlignmentStructure.__getstate__": [[24, "skbio-alignment-alignmentstructure-getstate"]], "skbio.alignment.AlignmentStructure.__gt__": [[25, "skbio-alignment-alignmentstructure-gt"]], "skbio.alignment.AlignmentStructure.__hash__": [[26, "skbio-alignment-alignmentstructure-hash"]], "skbio.alignment.AlignmentStructure.__le__": [[27, "skbio-alignment-alignmentstructure-le"]], "skbio.alignment.AlignmentStructure.__lt__": [[28, "skbio-alignment-alignmentstructure-lt"]], "skbio.alignment.AlignmentStructure.__ne__": [[29, "skbio-alignment-alignmentstructure-ne"]], "skbio.alignment.AlignmentStructure.__setstate__": [[30, "skbio-alignment-alignmentstructure-setstate"]], "skbio.alignment.AlignmentStructure.__str__": [[31, "skbio-alignment-alignmentstructure-str"]], "skbio.alignment.AlignmentStructure.is_zero_based": [[32, "skbio-alignment-alignmentstructure-is-zero-based"]], "skbio.alignment.AlignmentStructure.set_zero_based": [[33, "skbio-alignment-alignmentstructure-set-zero-based"]], "skbio.alignment.PairAlignPath": [[34, "skbio-alignment-pairalignpath"]], "skbio.alignment.PairAlignPath.__eq__": [[35, "skbio-alignment-pairalignpath-eq"]], "skbio.alignment.PairAlignPath.__ge__": [[36, "skbio-alignment-pairalignpath-ge"]], "skbio.alignment.PairAlignPath.__getstate__": [[37, "skbio-alignment-pairalignpath-getstate"]], "skbio.alignment.PairAlignPath.__gt__": [[38, "skbio-alignment-pairalignpath-gt"]], "skbio.alignment.PairAlignPath.__hash__": [[39, "skbio-alignment-pairalignpath-hash"]], "skbio.alignment.PairAlignPath.__le__": [[40, "skbio-alignment-pairalignpath-le"]], "skbio.alignment.PairAlignPath.__lt__": [[41, "skbio-alignment-pairalignpath-lt"]], "skbio.alignment.PairAlignPath.__ne__": [[42, "skbio-alignment-pairalignpath-ne"]], "skbio.alignment.PairAlignPath.__str__": [[43, "skbio-alignment-pairalignpath-str"]], "skbio.alignment.PairAlignPath.from_bits": [[44, "skbio-alignment-pairalignpath-from-bits"]], "skbio.alignment.PairAlignPath.from_cigar": [[45, "skbio-alignment-pairalignpath-from-cigar"]], "skbio.alignment.PairAlignPath.from_coordinates": [[46, "skbio-alignment-pairalignpath-from-coordinates"]], "skbio.alignment.PairAlignPath.from_indices": [[47, "skbio-alignment-pairalignpath-from-indices"]], "skbio.alignment.PairAlignPath.from_tabular": [[48, "skbio-alignment-pairalignpath-from-tabular"]], "skbio.alignment.PairAlignPath.to_bits": [[49, "skbio-alignment-pairalignpath-to-bits"]], "skbio.alignment.PairAlignPath.to_cigar": [[50, "skbio-alignment-pairalignpath-to-cigar"]], "skbio.alignment.PairAlignPath.to_coordinates": [[51, "skbio-alignment-pairalignpath-to-coordinates"]], "skbio.alignment.PairAlignPath.to_indices": [[52, "skbio-alignment-pairalignpath-to-indices"]], "skbio.alignment.StripedSmithWaterman": [[53, "skbio-alignment-stripedsmithwaterman"]], "skbio.alignment.StripedSmithWaterman.__call__": [[54, "skbio-alignment-stripedsmithwaterman-call"]], "skbio.alignment.StripedSmithWaterman.__eq__": [[55, "skbio-alignment-stripedsmithwaterman-eq"]], "skbio.alignment.StripedSmithWaterman.__ge__": [[56, "skbio-alignment-stripedsmithwaterman-ge"]], "skbio.alignment.StripedSmithWaterman.__getstate__": [[57, "skbio-alignment-stripedsmithwaterman-getstate"]], "skbio.alignment.StripedSmithWaterman.__gt__": [[58, "skbio-alignment-stripedsmithwaterman-gt"]], "skbio.alignment.StripedSmithWaterman.__hash__": [[59, "skbio-alignment-stripedsmithwaterman-hash"]], "skbio.alignment.StripedSmithWaterman.__le__": [[60, "skbio-alignment-stripedsmithwaterman-le"]], "skbio.alignment.StripedSmithWaterman.__lt__": [[61, "skbio-alignment-stripedsmithwaterman-lt"]], "skbio.alignment.StripedSmithWaterman.__ne__": [[62, "skbio-alignment-stripedsmithwaterman-ne"]], "skbio.alignment.StripedSmithWaterman.__setstate__": [[63, "skbio-alignment-stripedsmithwaterman-setstate"]], "skbio.alignment.StripedSmithWaterman.__str__": [[64, "skbio-alignment-stripedsmithwaterman-str"]], "skbio.alignment.TabularMSA": [[65, "skbio-alignment-tabularmsa"]], "skbio.alignment.TabularMSA.__bool__": [[66, "skbio-alignment-tabularmsa-bool"]], "skbio.alignment.TabularMSA.__contains__": [[67, "skbio-alignment-tabularmsa-contains"]], "skbio.alignment.TabularMSA.__copy__": [[68, "skbio-alignment-tabularmsa-copy"]], "skbio.alignment.TabularMSA.__deepcopy__": [[69, "skbio-alignment-tabularmsa-deepcopy"]], "skbio.alignment.TabularMSA.__eq__": [[70, "skbio-alignment-tabularmsa-eq"]], "skbio.alignment.TabularMSA.__ge__": [[71, "skbio-alignment-tabularmsa-ge"]], "skbio.alignment.TabularMSA.__getitem__": [[72, "skbio-alignment-tabularmsa-getitem"]], "skbio.alignment.TabularMSA.__getstate__": [[73, "skbio-alignment-tabularmsa-getstate"]], "skbio.alignment.TabularMSA.__gt__": [[74, "skbio-alignment-tabularmsa-gt"]], "skbio.alignment.TabularMSA.__iter__": [[75, "skbio-alignment-tabularmsa-iter"]], "skbio.alignment.TabularMSA.__le__": [[76, "skbio-alignment-tabularmsa-le"]], "skbio.alignment.TabularMSA.__len__": [[77, "skbio-alignment-tabularmsa-len"]], "skbio.alignment.TabularMSA.__lt__": [[78, "skbio-alignment-tabularmsa-lt"]], "skbio.alignment.TabularMSA.__ne__": [[79, "skbio-alignment-tabularmsa-ne"]], "skbio.alignment.TabularMSA.__reversed__": [[80, "skbio-alignment-tabularmsa-reversed"]], "skbio.alignment.TabularMSA.__str__": [[81, "skbio-alignment-tabularmsa-str"]], "skbio.alignment.TabularMSA.append": [[82, "skbio-alignment-tabularmsa-append"]], "skbio.alignment.TabularMSA.consensus": [[83, "skbio-alignment-tabularmsa-consensus"]], "skbio.alignment.TabularMSA.conservation": [[84, "skbio-alignment-tabularmsa-conservation"]], "skbio.alignment.TabularMSA.extend": [[85, "skbio-alignment-tabularmsa-extend"]], "skbio.alignment.TabularMSA.from_dict": [[86, "skbio-alignment-tabularmsa-from-dict"]], "skbio.alignment.TabularMSA.from_path_seqs": [[87, "skbio-alignment-tabularmsa-from-path-seqs"]], "skbio.alignment.TabularMSA.gap_frequencies": [[88, "skbio-alignment-tabularmsa-gap-frequencies"]], "skbio.alignment.TabularMSA.has_metadata": [[89, "skbio-alignment-tabularmsa-has-metadata"]], "skbio.alignment.TabularMSA.has_positional_metadata": [[90, "skbio-alignment-tabularmsa-has-positional-metadata"]], "skbio.alignment.TabularMSA.iter_positions": [[91, "skbio-alignment-tabularmsa-iter-positions"]], "skbio.alignment.TabularMSA.join": [[92, "skbio-alignment-tabularmsa-join"]], "skbio.alignment.TabularMSA.read": [[93, "skbio-alignment-tabularmsa-read"]], "skbio.alignment.TabularMSA.reassign_index": [[94, "skbio-alignment-tabularmsa-reassign-index"]], "skbio.alignment.TabularMSA.sort": [[95, "skbio-alignment-tabularmsa-sort"]], "skbio.alignment.TabularMSA.to_dict": [[96, "skbio-alignment-tabularmsa-to-dict"]], "skbio.alignment.TabularMSA.write": [[97, "skbio-alignment-tabularmsa-write"]], "skbio.alignment.global_pairwise_align": [[98, "skbio-alignment-global-pairwise-align"]], "skbio.alignment.global_pairwise_align_nucleotide": [[99, "skbio-alignment-global-pairwise-align-nucleotide"]], "skbio.alignment.global_pairwise_align_protein": [[100, "skbio-alignment-global-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align": [[101, "skbio-alignment-local-pairwise-align"]], "skbio.alignment.local_pairwise_align_nucleotide": [[102, "skbio-alignment-local-pairwise-align-nucleotide"]], "skbio.alignment.local_pairwise_align_protein": [[103, "skbio-alignment-local-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align_ssw": [[104, "skbio-alignment-local-pairwise-align-ssw"]], "skbio.alignment.make_identity_substitution_matrix": [[105, "skbio-alignment-make-identity-substitution-matrix"]], "skbio.diversity.alpha.ace": [[107, "skbio-diversity-alpha-ace"]], "skbio.diversity.alpha.berger_parker_d": [[108, "skbio-diversity-alpha-berger-parker-d"]], "skbio.diversity.alpha.brillouin_d": [[109, "skbio-diversity-alpha-brillouin-d"]], "skbio.diversity.alpha.chao1": [[110, "skbio-diversity-alpha-chao1"]], "skbio.diversity.alpha.chao1_ci": [[111, "skbio-diversity-alpha-chao1-ci"]], "skbio.diversity.alpha.dominance": [[112, "skbio-diversity-alpha-dominance"]], "skbio.diversity.alpha.doubles": [[113, "skbio-diversity-alpha-doubles"]], "skbio.diversity.alpha.enspie": [[114, "skbio-diversity-alpha-enspie"]], "skbio.diversity.alpha.esty_ci": [[115, "skbio-diversity-alpha-esty-ci"]], "skbio.diversity.alpha.faith_pd": [[116, "skbio-diversity-alpha-faith-pd"]], "skbio.diversity.alpha.fisher_alpha": [[117, "skbio-diversity-alpha-fisher-alpha"]], "skbio.diversity.alpha.gini_index": [[118, "skbio-diversity-alpha-gini-index"]], "skbio.diversity.alpha.goods_coverage": [[119, "skbio-diversity-alpha-goods-coverage"]], "skbio.diversity.alpha.heip_e": [[120, "skbio-diversity-alpha-heip-e"]], "skbio.diversity.alpha.kempton_taylor_q": [[121, "skbio-diversity-alpha-kempton-taylor-q"]], "skbio.diversity.alpha.lladser_ci": [[122, "skbio-diversity-alpha-lladser-ci"]], "skbio.diversity.alpha.lladser_pe": [[123, "skbio-diversity-alpha-lladser-pe"]], "skbio.diversity.alpha.margalef": [[124, "skbio-diversity-alpha-margalef"]], "skbio.diversity.alpha.mcintosh_d": [[125, "skbio-diversity-alpha-mcintosh-d"]], "skbio.diversity.alpha.mcintosh_e": [[126, "skbio-diversity-alpha-mcintosh-e"]], "skbio.diversity.alpha.menhinick": [[127, "skbio-diversity-alpha-menhinick"]], "skbio.diversity.alpha.michaelis_menten_fit": [[128, "skbio-diversity-alpha-michaelis-menten-fit"]], "skbio.diversity.alpha.observed_features": [[129, "skbio-diversity-alpha-observed-features"]], "skbio.diversity.alpha.observed_otus": [[130, "skbio-diversity-alpha-observed-otus"]], "skbio.diversity.alpha.osd": [[131, "skbio-diversity-alpha-osd"]], "skbio.diversity.alpha.phydiv": [[132, "skbio-diversity-alpha-phydiv"]], "skbio.diversity.alpha.pielou_e": [[133, "skbio-diversity-alpha-pielou-e"]], "skbio.diversity.alpha.robbins": [[134, "skbio-diversity-alpha-robbins"]], "skbio.diversity.alpha.shannon": [[135, "skbio-diversity-alpha-shannon"]], "skbio.diversity.alpha.simpson": [[136, "skbio-diversity-alpha-simpson"]], "skbio.diversity.alpha.simpson_e": [[137, "skbio-diversity-alpha-simpson-e"]], "skbio.diversity.alpha.singles": [[138, "skbio-diversity-alpha-singles"]], "skbio.diversity.alpha.sobs": [[139, "skbio-diversity-alpha-sobs"]], "skbio.diversity.alpha.strong": [[140, "skbio-diversity-alpha-strong"]], "skbio.diversity.alpha_diversity": [[141, "skbio-diversity-alpha-diversity"]], "skbio.diversity.beta.unweighted_unifrac": [[143, "skbio-diversity-beta-unweighted-unifrac"]], "skbio.diversity.beta.weighted_unifrac": [[144, "skbio-diversity-beta-weighted-unifrac"]], "skbio.diversity.beta_diversity": [[145, "skbio-diversity-beta-diversity"]], "skbio.diversity.block_beta_diversity": [[146, "skbio-diversity-block-beta-diversity"]], "skbio.diversity.get_alpha_diversity_metrics": [[147, "skbio-diversity-get-alpha-diversity-metrics"]], "skbio.diversity.get_beta_diversity_metrics": [[148, "skbio-diversity-get-beta-diversity-metrics"]], "skbio.diversity.partial_beta_diversity": [[149, "skbio-diversity-partial-beta-diversity"]], "skbio.embedding.Embedding": [[150, "skbio-embedding-embedding"]], "skbio.embedding.Embedding.__eq__": [[151, "skbio-embedding-embedding-eq"]], "skbio.embedding.Embedding.__ge__": [[152, "skbio-embedding-embedding-ge"]], "skbio.embedding.Embedding.__getstate__": [[153, "skbio-embedding-embedding-getstate"]], "skbio.embedding.Embedding.__gt__": [[154, "skbio-embedding-embedding-gt"]], "skbio.embedding.Embedding.__hash__": [[155, "skbio-embedding-embedding-hash"]], "skbio.embedding.Embedding.__le__": [[156, "skbio-embedding-embedding-le"]], "skbio.embedding.Embedding.__lt__": [[157, "skbio-embedding-embedding-lt"]], "skbio.embedding.Embedding.__ne__": [[158, "skbio-embedding-embedding-ne"]], "skbio.embedding.Embedding.__str__": [[159, "skbio-embedding-embedding-str"]], "skbio.embedding.Embedding.bytes": [[160, "skbio-embedding-embedding-bytes"]], "skbio.embedding.ProteinEmbedding": [[161, "skbio-embedding-proteinembedding"]], "skbio.embedding.ProteinEmbedding.__eq__": [[162, "skbio-embedding-proteinembedding-eq"]], "skbio.embedding.ProteinEmbedding.__ge__": [[163, "skbio-embedding-proteinembedding-ge"]], "skbio.embedding.ProteinEmbedding.__getstate__": [[164, "skbio-embedding-proteinembedding-getstate"]], "skbio.embedding.ProteinEmbedding.__gt__": [[165, "skbio-embedding-proteinembedding-gt"]], "skbio.embedding.ProteinEmbedding.__hash__": [[166, "skbio-embedding-proteinembedding-hash"]], "skbio.embedding.ProteinEmbedding.__le__": [[167, "skbio-embedding-proteinembedding-le"]], "skbio.embedding.ProteinEmbedding.__lt__": [[168, "skbio-embedding-proteinembedding-lt"]], "skbio.embedding.ProteinEmbedding.__ne__": [[169, "skbio-embedding-proteinembedding-ne"]], "skbio.embedding.ProteinEmbedding.__str__": [[170, "skbio-embedding-proteinembedding-str"]], "skbio.embedding.ProteinEmbedding.bytes": [[171, "skbio-embedding-proteinembedding-bytes"]], "skbio.embedding.ProteinEmbedding.read": [[172, "skbio-embedding-proteinembedding-read"]], "skbio.embedding.ProteinEmbedding.write": [[173, "skbio-embedding-proteinembedding-write"]], "skbio.embedding.ProteinVector": [[174, "skbio-embedding-proteinvector"]], "skbio.embedding.ProteinVector.__eq__": [[175, "skbio-embedding-proteinvector-eq"]], "skbio.embedding.ProteinVector.__ge__": [[176, "skbio-embedding-proteinvector-ge"]], "skbio.embedding.ProteinVector.__getstate__": [[177, "skbio-embedding-proteinvector-getstate"]], "skbio.embedding.ProteinVector.__gt__": [[178, "skbio-embedding-proteinvector-gt"]], "skbio.embedding.ProteinVector.__hash__": [[179, "skbio-embedding-proteinvector-hash"]], "skbio.embedding.ProteinVector.__le__": [[180, "skbio-embedding-proteinvector-le"]], "skbio.embedding.ProteinVector.__lt__": [[181, "skbio-embedding-proteinvector-lt"]], "skbio.embedding.ProteinVector.__ne__": [[182, "skbio-embedding-proteinvector-ne"]], "skbio.embedding.ProteinVector.__str__": [[183, "skbio-embedding-proteinvector-str"]], "skbio.embedding.ProteinVector.bytes": [[184, "skbio-embedding-proteinvector-bytes"]], "skbio.embedding.ProteinVector.read": [[185, "skbio-embedding-proteinvector-read"]], "skbio.embedding.ProteinVector.write": [[186, "skbio-embedding-proteinvector-write"]], "skbio.embedding.SequenceEmbedding": [[187, "skbio-embedding-sequenceembedding"]], "skbio.embedding.SequenceEmbedding.__eq__": [[188, "skbio-embedding-sequenceembedding-eq"]], "skbio.embedding.SequenceEmbedding.__ge__": [[189, "skbio-embedding-sequenceembedding-ge"]], "skbio.embedding.SequenceEmbedding.__getstate__": [[190, "skbio-embedding-sequenceembedding-getstate"]], "skbio.embedding.SequenceEmbedding.__gt__": [[191, "skbio-embedding-sequenceembedding-gt"]], "skbio.embedding.SequenceEmbedding.__hash__": [[192, "skbio-embedding-sequenceembedding-hash"]], "skbio.embedding.SequenceEmbedding.__le__": [[193, "skbio-embedding-sequenceembedding-le"]], "skbio.embedding.SequenceEmbedding.__lt__": [[194, "skbio-embedding-sequenceembedding-lt"]], "skbio.embedding.SequenceEmbedding.__ne__": [[195, "skbio-embedding-sequenceembedding-ne"]], "skbio.embedding.SequenceEmbedding.__str__": [[196, "skbio-embedding-sequenceembedding-str"]], "skbio.embedding.SequenceEmbedding.bytes": [[197, "skbio-embedding-sequenceembedding-bytes"]], "skbio.embedding.SequenceVector": [[198, "skbio-embedding-sequencevector"]], "skbio.embedding.SequenceVector.__eq__": [[199, "skbio-embedding-sequencevector-eq"]], "skbio.embedding.SequenceVector.__ge__": [[200, "skbio-embedding-sequencevector-ge"]], "skbio.embedding.SequenceVector.__getstate__": [[201, "skbio-embedding-sequencevector-getstate"]], "skbio.embedding.SequenceVector.__gt__": [[202, "skbio-embedding-sequencevector-gt"]], "skbio.embedding.SequenceVector.__hash__": [[203, "skbio-embedding-sequencevector-hash"]], "skbio.embedding.SequenceVector.__le__": [[204, "skbio-embedding-sequencevector-le"]], "skbio.embedding.SequenceVector.__lt__": [[205, "skbio-embedding-sequencevector-lt"]], "skbio.embedding.SequenceVector.__ne__": [[206, "skbio-embedding-sequencevector-ne"]], "skbio.embedding.SequenceVector.__str__": [[207, "skbio-embedding-sequencevector-str"]], "skbio.embedding.SequenceVector.bytes": [[208, "skbio-embedding-sequencevector-bytes"]], "skbio.embedding.embed_vec_to_dataframe": [[209, "skbio-embedding-embed-vec-to-dataframe"]], "skbio.embedding.embed_vec_to_distances": [[210, "skbio-embedding-embed-vec-to-distances"]], "skbio.embedding.embed_vec_to_numpy": [[211, "skbio-embedding-embed-vec-to-numpy"]], "skbio.embedding.embed_vec_to_ordination": [[212, "skbio-embedding-embed-vec-to-ordination"]], "skbio.io.registry.Format": [[233, "skbio-io-registry-format"]], "skbio.io.registry.Format.__eq__": [[234, "skbio-io-registry-format-eq"]], "skbio.io.registry.Format.__ge__": [[235, "skbio-io-registry-format-ge"]], "skbio.io.registry.Format.__getstate__": [[236, "skbio-io-registry-format-getstate"]], "skbio.io.registry.Format.__gt__": [[237, "skbio-io-registry-format-gt"]], "skbio.io.registry.Format.__hash__": [[238, "skbio-io-registry-format-hash"]], "skbio.io.registry.Format.__le__": [[239, "skbio-io-registry-format-le"]], "skbio.io.registry.Format.__lt__": [[240, "skbio-io-registry-format-lt"]], "skbio.io.registry.Format.__ne__": [[241, "skbio-io-registry-format-ne"]], "skbio.io.registry.Format.__str__": [[242, "skbio-io-registry-format-str"]], "skbio.io.registry.Format.reader": [[243, "skbio-io-registry-format-reader"]], "skbio.io.registry.Format.sniffer": [[244, "skbio-io-registry-format-sniffer"]], "skbio.io.registry.Format.writer": [[245, "skbio-io-registry-format-writer"]], "skbio.io.registry.IORegistry": [[246, "skbio-io-registry-ioregistry"]], "skbio.io.registry.IORegistry.__eq__": [[247, "skbio-io-registry-ioregistry-eq"]], "skbio.io.registry.IORegistry.__ge__": [[248, "skbio-io-registry-ioregistry-ge"]], "skbio.io.registry.IORegistry.__getstate__": [[249, "skbio-io-registry-ioregistry-getstate"]], "skbio.io.registry.IORegistry.__gt__": [[250, "skbio-io-registry-ioregistry-gt"]], "skbio.io.registry.IORegistry.__hash__": [[251, "skbio-io-registry-ioregistry-hash"]], "skbio.io.registry.IORegistry.__le__": [[252, "skbio-io-registry-ioregistry-le"]], "skbio.io.registry.IORegistry.__lt__": [[253, "skbio-io-registry-ioregistry-lt"]], "skbio.io.registry.IORegistry.__ne__": [[254, "skbio-io-registry-ioregistry-ne"]], "skbio.io.registry.IORegistry.__str__": [[255, "skbio-io-registry-ioregistry-str"]], "skbio.io.registry.IORegistry.add_format": [[256, "skbio-io-registry-ioregistry-add-format"]], "skbio.io.registry.IORegistry.create_format": [[257, "skbio-io-registry-ioregistry-create-format"]], "skbio.io.registry.IORegistry.get_reader": [[258, "skbio-io-registry-ioregistry-get-reader"]], "skbio.io.registry.IORegistry.get_sniffer": [[259, "skbio-io-registry-ioregistry-get-sniffer"]], "skbio.io.registry.IORegistry.get_writer": [[260, "skbio-io-registry-ioregistry-get-writer"]], "skbio.io.registry.IORegistry.list_read_formats": [[261, "skbio-io-registry-ioregistry-list-read-formats"]], "skbio.io.registry.IORegistry.list_write_formats": [[262, "skbio-io-registry-ioregistry-list-write-formats"]], "skbio.io.registry.IORegistry.monkey_patch": [[263, "skbio-io-registry-ioregistry-monkey-patch"]], "skbio.io.registry.IORegistry.read": [[264, "skbio-io-registry-ioregistry-read"]], "skbio.io.registry.IORegistry.sniff": [[265, "skbio-io-registry-ioregistry-sniff"]], "skbio.io.registry.IORegistry.write": [[266, "skbio-io-registry-ioregistry-write"]], "skbio.io.registry.create_format": [[267, "skbio-io-registry-create-format"]], "skbio.io.registry.read": [[268, "skbio-io-registry-read"]], "skbio.io.registry.sniff": [[269, "skbio-io-registry-sniff"]], "skbio.io.registry.write": [[270, "skbio-io-registry-write"]], "skbio.io.util.open": [[272, "skbio-io-util-open"]], "skbio.io.util.open_file": [[273, "skbio-io-util-open-file"]], "skbio.io.util.open_files": [[274, "skbio-io-util-open-files"]], "skbio.metadata.CategoricalMetadataColumn": [[275, "skbio-metadata-categoricalmetadatacolumn"]], "skbio.metadata.CategoricalMetadataColumn.__eq__": [[276, "skbio-metadata-categoricalmetadatacolumn-eq"]], "skbio.metadata.CategoricalMetadataColumn.__ge__": [[277, "skbio-metadata-categoricalmetadatacolumn-ge"]], "skbio.metadata.CategoricalMetadataColumn.__getstate__": [[278, "skbio-metadata-categoricalmetadatacolumn-getstate"]], "skbio.metadata.CategoricalMetadataColumn.__gt__": [[279, "skbio-metadata-categoricalmetadatacolumn-gt"]], "skbio.metadata.CategoricalMetadataColumn.__le__": [[280, "skbio-metadata-categoricalmetadatacolumn-le"]], "skbio.metadata.CategoricalMetadataColumn.__lt__": [[281, "skbio-metadata-categoricalmetadatacolumn-lt"]], "skbio.metadata.CategoricalMetadataColumn.__ne__": [[282, "skbio-metadata-categoricalmetadatacolumn-ne"]], "skbio.metadata.CategoricalMetadataColumn.__str__": [[283, "skbio-metadata-categoricalmetadatacolumn-str"]], "skbio.metadata.CategoricalMetadataColumn.drop_missing_values": [[284, "skbio-metadata-categoricalmetadatacolumn-drop-missing-values"]], "skbio.metadata.CategoricalMetadataColumn.filter_ids": [[285, "skbio-metadata-categoricalmetadatacolumn-filter-ids"]], "skbio.metadata.CategoricalMetadataColumn.get_ids": [[286, "skbio-metadata-categoricalmetadatacolumn-get-ids"]], "skbio.metadata.CategoricalMetadataColumn.get_missing": [[287, "skbio-metadata-categoricalmetadatacolumn-get-missing"]], "skbio.metadata.CategoricalMetadataColumn.get_value": [[288, "skbio-metadata-categoricalmetadatacolumn-get-value"]], "skbio.metadata.CategoricalMetadataColumn.has_missing_values": [[289, "skbio-metadata-categoricalmetadatacolumn-has-missing-values"]], "skbio.metadata.CategoricalMetadataColumn.save": [[290, "skbio-metadata-categoricalmetadatacolumn-save"]], "skbio.metadata.CategoricalMetadataColumn.to_dataframe": [[291, "skbio-metadata-categoricalmetadatacolumn-to-dataframe"]], "skbio.metadata.CategoricalMetadataColumn.to_series": [[292, "skbio-metadata-categoricalmetadatacolumn-to-series"]], "skbio.metadata.Interval": [[293, "skbio-metadata-interval"]], "skbio.metadata.Interval.__eq__": [[294, "skbio-metadata-interval-eq"]], "skbio.metadata.Interval.__ge__": [[295, "skbio-metadata-interval-ge"]], "skbio.metadata.Interval.__getstate__": [[296, "skbio-metadata-interval-getstate"]], "skbio.metadata.Interval.__gt__": [[297, "skbio-metadata-interval-gt"]], "skbio.metadata.Interval.__le__": [[298, "skbio-metadata-interval-le"]], "skbio.metadata.Interval.__lt__": [[299, "skbio-metadata-interval-lt"]], "skbio.metadata.Interval.__ne__": [[300, "skbio-metadata-interval-ne"]], "skbio.metadata.Interval.__str__": [[301, "skbio-metadata-interval-str"]], "skbio.metadata.Interval.drop": [[302, "skbio-metadata-interval-drop"]], "skbio.metadata.IntervalMetadata": [[303, "skbio-metadata-intervalmetadata"]], "skbio.metadata.IntervalMetadata.__copy__": [[304, "skbio-metadata-intervalmetadata-copy"]], "skbio.metadata.IntervalMetadata.__deepcopy__": [[305, "skbio-metadata-intervalmetadata-deepcopy"]], "skbio.metadata.IntervalMetadata.__eq__": [[306, "skbio-metadata-intervalmetadata-eq"]], "skbio.metadata.IntervalMetadata.__ge__": [[307, "skbio-metadata-intervalmetadata-ge"]], "skbio.metadata.IntervalMetadata.__getstate__": [[308, "skbio-metadata-intervalmetadata-getstate"]], "skbio.metadata.IntervalMetadata.__gt__": [[309, "skbio-metadata-intervalmetadata-gt"]], "skbio.metadata.IntervalMetadata.__le__": [[310, "skbio-metadata-intervalmetadata-le"]], "skbio.metadata.IntervalMetadata.__lt__": [[311, "skbio-metadata-intervalmetadata-lt"]], "skbio.metadata.IntervalMetadata.__ne__": [[312, "skbio-metadata-intervalmetadata-ne"]], "skbio.metadata.IntervalMetadata.__str__": [[313, "skbio-metadata-intervalmetadata-str"]], "skbio.metadata.IntervalMetadata.add": [[314, "skbio-metadata-intervalmetadata-add"]], "skbio.metadata.IntervalMetadata.concat": [[315, "skbio-metadata-intervalmetadata-concat"]], "skbio.metadata.IntervalMetadata.drop": [[316, "skbio-metadata-intervalmetadata-drop"]], "skbio.metadata.IntervalMetadata.merge": [[317, "skbio-metadata-intervalmetadata-merge"]], "skbio.metadata.IntervalMetadata.query": [[318, "skbio-metadata-intervalmetadata-query"]], "skbio.metadata.IntervalMetadata.read": [[319, "skbio-metadata-intervalmetadata-read"]], "skbio.metadata.IntervalMetadata.sort": [[320, "skbio-metadata-intervalmetadata-sort"]], "skbio.metadata.IntervalMetadata.write": [[321, "skbio-metadata-intervalmetadata-write"]], "skbio.metadata.MetadataColumn": [[322, "skbio-metadata-metadatacolumn"]], "skbio.metadata.MetadataColumn.__eq__": [[323, "skbio-metadata-metadatacolumn-eq"]], "skbio.metadata.MetadataColumn.__ge__": [[324, "skbio-metadata-metadatacolumn-ge"]], "skbio.metadata.MetadataColumn.__getstate__": [[325, "skbio-metadata-metadatacolumn-getstate"]], "skbio.metadata.MetadataColumn.__gt__": [[326, "skbio-metadata-metadatacolumn-gt"]], "skbio.metadata.MetadataColumn.__le__": [[327, "skbio-metadata-metadatacolumn-le"]], "skbio.metadata.MetadataColumn.__lt__": [[328, "skbio-metadata-metadatacolumn-lt"]], "skbio.metadata.MetadataColumn.__ne__": [[329, "skbio-metadata-metadatacolumn-ne"]], "skbio.metadata.MetadataColumn.__str__": [[330, "skbio-metadata-metadatacolumn-str"]], "skbio.metadata.MetadataColumn.drop_missing_values": [[331, "skbio-metadata-metadatacolumn-drop-missing-values"]], "skbio.metadata.MetadataColumn.filter_ids": [[332, "skbio-metadata-metadatacolumn-filter-ids"]], "skbio.metadata.MetadataColumn.get_ids": [[333, "skbio-metadata-metadatacolumn-get-ids"]], "skbio.metadata.MetadataColumn.get_missing": [[334, "skbio-metadata-metadatacolumn-get-missing"]], "skbio.metadata.MetadataColumn.get_value": [[335, "skbio-metadata-metadatacolumn-get-value"]], "skbio.metadata.MetadataColumn.has_missing_values": [[336, "skbio-metadata-metadatacolumn-has-missing-values"]], "skbio.metadata.MetadataColumn.save": [[337, "skbio-metadata-metadatacolumn-save"]], "skbio.metadata.MetadataColumn.to_dataframe": [[338, "skbio-metadata-metadatacolumn-to-dataframe"]], "skbio.metadata.MetadataColumn.to_series": [[339, "skbio-metadata-metadatacolumn-to-series"]], "skbio.metadata.NumericMetadataColumn": [[340, "skbio-metadata-numericmetadatacolumn"]], "skbio.metadata.NumericMetadataColumn.__eq__": [[341, "skbio-metadata-numericmetadatacolumn-eq"]], "skbio.metadata.NumericMetadataColumn.__ge__": [[342, "skbio-metadata-numericmetadatacolumn-ge"]], "skbio.metadata.NumericMetadataColumn.__getstate__": [[343, "skbio-metadata-numericmetadatacolumn-getstate"]], "skbio.metadata.NumericMetadataColumn.__gt__": [[344, "skbio-metadata-numericmetadatacolumn-gt"]], "skbio.metadata.NumericMetadataColumn.__le__": [[345, "skbio-metadata-numericmetadatacolumn-le"]], "skbio.metadata.NumericMetadataColumn.__lt__": [[346, "skbio-metadata-numericmetadatacolumn-lt"]], "skbio.metadata.NumericMetadataColumn.__ne__": [[347, "skbio-metadata-numericmetadatacolumn-ne"]], "skbio.metadata.NumericMetadataColumn.__str__": [[348, "skbio-metadata-numericmetadatacolumn-str"]], "skbio.metadata.NumericMetadataColumn.drop_missing_values": [[349, "skbio-metadata-numericmetadatacolumn-drop-missing-values"]], "skbio.metadata.NumericMetadataColumn.filter_ids": [[350, "skbio-metadata-numericmetadatacolumn-filter-ids"]], "skbio.metadata.NumericMetadataColumn.get_ids": [[351, "skbio-metadata-numericmetadatacolumn-get-ids"]], "skbio.metadata.NumericMetadataColumn.get_missing": [[352, "skbio-metadata-numericmetadatacolumn-get-missing"]], "skbio.metadata.NumericMetadataColumn.get_value": [[353, "skbio-metadata-numericmetadatacolumn-get-value"]], "skbio.metadata.NumericMetadataColumn.has_missing_values": [[354, "skbio-metadata-numericmetadatacolumn-has-missing-values"]], "skbio.metadata.NumericMetadataColumn.save": [[355, "skbio-metadata-numericmetadatacolumn-save"]], "skbio.metadata.NumericMetadataColumn.to_dataframe": [[356, "skbio-metadata-numericmetadatacolumn-to-dataframe"]], "skbio.metadata.NumericMetadataColumn.to_series": [[357, "skbio-metadata-numericmetadatacolumn-to-series"]], "skbio.metadata.SampleMetadata": [[358, "skbio-metadata-samplemetadata"]], "skbio.metadata.SampleMetadata.__eq__": [[359, "skbio-metadata-samplemetadata-eq"]], "skbio.metadata.SampleMetadata.__ge__": [[360, "skbio-metadata-samplemetadata-ge"]], "skbio.metadata.SampleMetadata.__getstate__": [[361, "skbio-metadata-samplemetadata-getstate"]], "skbio.metadata.SampleMetadata.__gt__": [[362, "skbio-metadata-samplemetadata-gt"]], "skbio.metadata.SampleMetadata.__le__": [[363, "skbio-metadata-samplemetadata-le"]], "skbio.metadata.SampleMetadata.__lt__": [[364, "skbio-metadata-samplemetadata-lt"]], "skbio.metadata.SampleMetadata.__ne__": [[365, "skbio-metadata-samplemetadata-ne"]], "skbio.metadata.SampleMetadata.__str__": [[366, "skbio-metadata-samplemetadata-str"]], "skbio.metadata.SampleMetadata.filter_columns": [[367, "skbio-metadata-samplemetadata-filter-columns"]], "skbio.metadata.SampleMetadata.filter_ids": [[368, "skbio-metadata-samplemetadata-filter-ids"]], "skbio.metadata.SampleMetadata.get_column": [[369, "skbio-metadata-samplemetadata-get-column"]], "skbio.metadata.SampleMetadata.get_ids": [[370, "skbio-metadata-samplemetadata-get-ids"]], "skbio.metadata.SampleMetadata.load": [[371, "skbio-metadata-samplemetadata-load"]], "skbio.metadata.SampleMetadata.merge": [[372, "skbio-metadata-samplemetadata-merge"]], "skbio.metadata.SampleMetadata.read": [[373, "skbio-metadata-samplemetadata-read"]], "skbio.metadata.SampleMetadata.save": [[374, "skbio-metadata-samplemetadata-save"]], "skbio.metadata.SampleMetadata.to_dataframe": [[375, "skbio-metadata-samplemetadata-to-dataframe"]], "skbio.metadata.SampleMetadata.write": [[376, "skbio-metadata-samplemetadata-write"]], "skbio.sequence.DNA": [[377, "skbio-sequence-dna"]], "skbio.sequence.DNA.__bool__": [[378, "skbio-sequence-dna-bool"]], "skbio.sequence.DNA.__contains__": [[379, "skbio-sequence-dna-contains"]], "skbio.sequence.DNA.__copy__": [[380, "skbio-sequence-dna-copy"]], "skbio.sequence.DNA.__deepcopy__": [[381, "skbio-sequence-dna-deepcopy"]], "skbio.sequence.DNA.__eq__": [[382, "skbio-sequence-dna-eq"]], "skbio.sequence.DNA.__ge__": [[383, "skbio-sequence-dna-ge"]], "skbio.sequence.DNA.__getitem__": [[384, "skbio-sequence-dna-getitem"]], "skbio.sequence.DNA.__getstate__": [[385, "skbio-sequence-dna-getstate"]], "skbio.sequence.DNA.__gt__": [[386, "skbio-sequence-dna-gt"]], "skbio.sequence.DNA.__iter__": [[387, "skbio-sequence-dna-iter"]], "skbio.sequence.DNA.__le__": [[388, "skbio-sequence-dna-le"]], "skbio.sequence.DNA.__len__": [[389, "skbio-sequence-dna-len"]], "skbio.sequence.DNA.__lt__": [[390, "skbio-sequence-dna-lt"]], "skbio.sequence.DNA.__ne__": [[391, "skbio-sequence-dna-ne"]], "skbio.sequence.DNA.__reversed__": [[392, "skbio-sequence-dna-reversed"]], "skbio.sequence.DNA.__str__": [[393, "skbio-sequence-dna-str"]], "skbio.sequence.DNA.complement": [[394, "skbio-sequence-dna-complement"]], "skbio.sequence.DNA.concat": [[395, "skbio-sequence-dna-concat"]], "skbio.sequence.DNA.count": [[396, "skbio-sequence-dna-count"]], "skbio.sequence.DNA.definites": [[397, "skbio-sequence-dna-definites"]], "skbio.sequence.DNA.degap": [[398, "skbio-sequence-dna-degap"]], "skbio.sequence.DNA.degenerates": [[399, "skbio-sequence-dna-degenerates"]], "skbio.sequence.DNA.distance": [[400, "skbio-sequence-dna-distance"]], "skbio.sequence.DNA.expand_degenerates": [[401, "skbio-sequence-dna-expand-degenerates"]], "skbio.sequence.DNA.find_motifs": [[402, "skbio-sequence-dna-find-motifs"]], "skbio.sequence.DNA.find_with_regex": [[403, "skbio-sequence-dna-find-with-regex"]], "skbio.sequence.DNA.frequencies": [[404, "skbio-sequence-dna-frequencies"]], "skbio.sequence.DNA.gaps": [[405, "skbio-sequence-dna-gaps"]], "skbio.sequence.DNA.gc_content": [[406, "skbio-sequence-dna-gc-content"]], "skbio.sequence.DNA.gc_frequency": [[407, "skbio-sequence-dna-gc-frequency"]], "skbio.sequence.DNA.has_definites": [[408, "skbio-sequence-dna-has-definites"]], "skbio.sequence.DNA.has_degenerates": [[409, "skbio-sequence-dna-has-degenerates"]], "skbio.sequence.DNA.has_gaps": [[410, "skbio-sequence-dna-has-gaps"]], "skbio.sequence.DNA.has_interval_metadata": [[411, "skbio-sequence-dna-has-interval-metadata"]], "skbio.sequence.DNA.has_metadata": [[412, "skbio-sequence-dna-has-metadata"]], "skbio.sequence.DNA.has_nondegenerates": [[413, "skbio-sequence-dna-has-nondegenerates"]], "skbio.sequence.DNA.has_positional_metadata": [[414, "skbio-sequence-dna-has-positional-metadata"]], "skbio.sequence.DNA.index": [[415, "skbio-sequence-dna-index"]], "skbio.sequence.DNA.is_reverse_complement": [[416, "skbio-sequence-dna-is-reverse-complement"]], "skbio.sequence.DNA.iter_contiguous": [[417, "skbio-sequence-dna-iter-contiguous"]], "skbio.sequence.DNA.iter_kmers": [[418, "skbio-sequence-dna-iter-kmers"]], "skbio.sequence.DNA.kmer_frequencies": [[419, "skbio-sequence-dna-kmer-frequencies"]], "skbio.sequence.DNA.lowercase": [[420, "skbio-sequence-dna-lowercase"]], "skbio.sequence.DNA.match_frequency": [[421, "skbio-sequence-dna-match-frequency"]], "skbio.sequence.DNA.matches": [[422, "skbio-sequence-dna-matches"]], "skbio.sequence.DNA.mismatch_frequency": [[423, "skbio-sequence-dna-mismatch-frequency"]], "skbio.sequence.DNA.mismatches": [[424, "skbio-sequence-dna-mismatches"]], "skbio.sequence.DNA.nondegenerates": [[425, "skbio-sequence-dna-nondegenerates"]], "skbio.sequence.DNA.read": [[426, "skbio-sequence-dna-read"]], "skbio.sequence.DNA.replace": [[427, "skbio-sequence-dna-replace"]], "skbio.sequence.DNA.reverse_complement": [[428, "skbio-sequence-dna-reverse-complement"]], "skbio.sequence.DNA.to_definites": [[429, "skbio-sequence-dna-to-definites"]], "skbio.sequence.DNA.to_indices": [[430, "skbio-sequence-dna-to-indices"]], "skbio.sequence.DNA.to_regex": [[431, "skbio-sequence-dna-to-regex"]], "skbio.sequence.DNA.transcribe": [[432, "skbio-sequence-dna-transcribe"]], "skbio.sequence.DNA.translate": [[433, "skbio-sequence-dna-translate"]], "skbio.sequence.DNA.translate_six_frames": [[434, "skbio-sequence-dna-translate-six-frames"]], "skbio.sequence.DNA.write": [[435, "skbio-sequence-dna-write"]], "skbio.sequence.GeneticCode": [[436, "skbio-sequence-geneticcode"]], "skbio.sequence.GeneticCode.__eq__": [[437, "skbio-sequence-geneticcode-eq"]], "skbio.sequence.GeneticCode.__ge__": [[438, "skbio-sequence-geneticcode-ge"]], "skbio.sequence.GeneticCode.__getstate__": [[439, "skbio-sequence-geneticcode-getstate"]], "skbio.sequence.GeneticCode.__gt__": [[440, "skbio-sequence-geneticcode-gt"]], "skbio.sequence.GeneticCode.__le__": [[441, "skbio-sequence-geneticcode-le"]], "skbio.sequence.GeneticCode.__lt__": [[442, "skbio-sequence-geneticcode-lt"]], "skbio.sequence.GeneticCode.__ne__": [[443, "skbio-sequence-geneticcode-ne"]], "skbio.sequence.GeneticCode.__str__": [[444, "skbio-sequence-geneticcode-str"]], "skbio.sequence.GeneticCode.from_ncbi": [[445, "skbio-sequence-geneticcode-from-ncbi"]], "skbio.sequence.GeneticCode.translate": [[446, "skbio-sequence-geneticcode-translate"]], "skbio.sequence.GeneticCode.translate_six_frames": [[447, "skbio-sequence-geneticcode-translate-six-frames"]], "skbio.sequence.GrammaredSequence": [[448, "skbio-sequence-grammaredsequence"]], "skbio.sequence.GrammaredSequence.__bool__": [[449, "skbio-sequence-grammaredsequence-bool"]], "skbio.sequence.GrammaredSequence.__contains__": [[450, "skbio-sequence-grammaredsequence-contains"]], "skbio.sequence.GrammaredSequence.__copy__": [[451, "skbio-sequence-grammaredsequence-copy"]], "skbio.sequence.GrammaredSequence.__deepcopy__": [[452, "skbio-sequence-grammaredsequence-deepcopy"]], "skbio.sequence.GrammaredSequence.__eq__": [[453, "skbio-sequence-grammaredsequence-eq"]], "skbio.sequence.GrammaredSequence.__ge__": [[454, "skbio-sequence-grammaredsequence-ge"]], "skbio.sequence.GrammaredSequence.__getitem__": [[455, "skbio-sequence-grammaredsequence-getitem"]], "skbio.sequence.GrammaredSequence.__getstate__": [[456, "skbio-sequence-grammaredsequence-getstate"]], "skbio.sequence.GrammaredSequence.__gt__": [[457, "skbio-sequence-grammaredsequence-gt"]], "skbio.sequence.GrammaredSequence.__iter__": [[458, "skbio-sequence-grammaredsequence-iter"]], "skbio.sequence.GrammaredSequence.__le__": [[459, "skbio-sequence-grammaredsequence-le"]], "skbio.sequence.GrammaredSequence.__len__": [[460, "skbio-sequence-grammaredsequence-len"]], "skbio.sequence.GrammaredSequence.__lt__": [[461, "skbio-sequence-grammaredsequence-lt"]], "skbio.sequence.GrammaredSequence.__ne__": [[462, "skbio-sequence-grammaredsequence-ne"]], "skbio.sequence.GrammaredSequence.__reversed__": [[463, "skbio-sequence-grammaredsequence-reversed"]], "skbio.sequence.GrammaredSequence.__str__": [[464, "skbio-sequence-grammaredsequence-str"]], "skbio.sequence.GrammaredSequence.concat": [[465, "skbio-sequence-grammaredsequence-concat"]], "skbio.sequence.GrammaredSequence.count": [[466, "skbio-sequence-grammaredsequence-count"]], "skbio.sequence.GrammaredSequence.definites": [[467, "skbio-sequence-grammaredsequence-definites"]], "skbio.sequence.GrammaredSequence.degap": [[468, "skbio-sequence-grammaredsequence-degap"]], "skbio.sequence.GrammaredSequence.degenerates": [[469, "skbio-sequence-grammaredsequence-degenerates"]], "skbio.sequence.GrammaredSequence.distance": [[470, "skbio-sequence-grammaredsequence-distance"]], "skbio.sequence.GrammaredSequence.expand_degenerates": [[471, "skbio-sequence-grammaredsequence-expand-degenerates"]], "skbio.sequence.GrammaredSequence.find_motifs": [[472, "skbio-sequence-grammaredsequence-find-motifs"]], "skbio.sequence.GrammaredSequence.find_with_regex": [[473, "skbio-sequence-grammaredsequence-find-with-regex"]], "skbio.sequence.GrammaredSequence.frequencies": [[474, "skbio-sequence-grammaredsequence-frequencies"]], "skbio.sequence.GrammaredSequence.gaps": [[475, "skbio-sequence-grammaredsequence-gaps"]], "skbio.sequence.GrammaredSequence.has_definites": [[476, "skbio-sequence-grammaredsequence-has-definites"]], "skbio.sequence.GrammaredSequence.has_degenerates": [[477, "skbio-sequence-grammaredsequence-has-degenerates"]], "skbio.sequence.GrammaredSequence.has_gaps": [[478, "skbio-sequence-grammaredsequence-has-gaps"]], "skbio.sequence.GrammaredSequence.has_interval_metadata": [[479, "skbio-sequence-grammaredsequence-has-interval-metadata"]], "skbio.sequence.GrammaredSequence.has_metadata": [[480, "skbio-sequence-grammaredsequence-has-metadata"]], "skbio.sequence.GrammaredSequence.has_nondegenerates": [[481, "skbio-sequence-grammaredsequence-has-nondegenerates"]], "skbio.sequence.GrammaredSequence.has_positional_metadata": [[482, "skbio-sequence-grammaredsequence-has-positional-metadata"]], "skbio.sequence.GrammaredSequence.index": [[483, "skbio-sequence-grammaredsequence-index"]], "skbio.sequence.GrammaredSequence.iter_contiguous": [[484, "skbio-sequence-grammaredsequence-iter-contiguous"]], "skbio.sequence.GrammaredSequence.iter_kmers": [[485, "skbio-sequence-grammaredsequence-iter-kmers"]], "skbio.sequence.GrammaredSequence.kmer_frequencies": [[486, "skbio-sequence-grammaredsequence-kmer-frequencies"]], "skbio.sequence.GrammaredSequence.lowercase": [[487, "skbio-sequence-grammaredsequence-lowercase"]], "skbio.sequence.GrammaredSequence.match_frequency": [[488, "skbio-sequence-grammaredsequence-match-frequency"]], "skbio.sequence.GrammaredSequence.matches": [[489, "skbio-sequence-grammaredsequence-matches"]], "skbio.sequence.GrammaredSequence.mismatch_frequency": [[490, "skbio-sequence-grammaredsequence-mismatch-frequency"]], "skbio.sequence.GrammaredSequence.mismatches": [[491, "skbio-sequence-grammaredsequence-mismatches"]], "skbio.sequence.GrammaredSequence.nondegenerates": [[492, "skbio-sequence-grammaredsequence-nondegenerates"]], "skbio.sequence.GrammaredSequence.read": [[493, "skbio-sequence-grammaredsequence-read"]], "skbio.sequence.GrammaredSequence.replace": [[494, "skbio-sequence-grammaredsequence-replace"]], "skbio.sequence.GrammaredSequence.to_definites": [[495, "skbio-sequence-grammaredsequence-to-definites"]], "skbio.sequence.GrammaredSequence.to_indices": [[496, "skbio-sequence-grammaredsequence-to-indices"]], "skbio.sequence.GrammaredSequence.to_regex": [[497, "skbio-sequence-grammaredsequence-to-regex"]], "skbio.sequence.GrammaredSequence.write": [[498, "skbio-sequence-grammaredsequence-write"]], "skbio.sequence.Protein": [[499, "skbio-sequence-protein"]], "skbio.sequence.Protein.__bool__": [[500, "skbio-sequence-protein-bool"]], "skbio.sequence.Protein.__contains__": [[501, "skbio-sequence-protein-contains"]], "skbio.sequence.Protein.__copy__": [[502, "skbio-sequence-protein-copy"]], "skbio.sequence.Protein.__deepcopy__": [[503, "skbio-sequence-protein-deepcopy"]], "skbio.sequence.Protein.__eq__": [[504, "skbio-sequence-protein-eq"]], "skbio.sequence.Protein.__ge__": [[505, "skbio-sequence-protein-ge"]], "skbio.sequence.Protein.__getitem__": [[506, "skbio-sequence-protein-getitem"]], "skbio.sequence.Protein.__getstate__": [[507, "skbio-sequence-protein-getstate"]], "skbio.sequence.Protein.__gt__": [[508, "skbio-sequence-protein-gt"]], "skbio.sequence.Protein.__iter__": [[509, "skbio-sequence-protein-iter"]], "skbio.sequence.Protein.__le__": [[510, "skbio-sequence-protein-le"]], "skbio.sequence.Protein.__len__": [[511, "skbio-sequence-protein-len"]], "skbio.sequence.Protein.__lt__": [[512, "skbio-sequence-protein-lt"]], "skbio.sequence.Protein.__ne__": [[513, "skbio-sequence-protein-ne"]], "skbio.sequence.Protein.__reversed__": [[514, "skbio-sequence-protein-reversed"]], "skbio.sequence.Protein.__str__": [[515, "skbio-sequence-protein-str"]], "skbio.sequence.Protein.concat": [[516, "skbio-sequence-protein-concat"]], "skbio.sequence.Protein.count": [[517, "skbio-sequence-protein-count"]], "skbio.sequence.Protein.definites": [[518, "skbio-sequence-protein-definites"]], "skbio.sequence.Protein.degap": [[519, "skbio-sequence-protein-degap"]], "skbio.sequence.Protein.degenerates": [[520, "skbio-sequence-protein-degenerates"]], "skbio.sequence.Protein.distance": [[521, "skbio-sequence-protein-distance"]], "skbio.sequence.Protein.expand_degenerates": [[522, "skbio-sequence-protein-expand-degenerates"]], "skbio.sequence.Protein.find_motifs": [[523, "skbio-sequence-protein-find-motifs"]], "skbio.sequence.Protein.find_with_regex": [[524, "skbio-sequence-protein-find-with-regex"]], "skbio.sequence.Protein.frequencies": [[525, "skbio-sequence-protein-frequencies"]], "skbio.sequence.Protein.gaps": [[526, "skbio-sequence-protein-gaps"]], "skbio.sequence.Protein.has_definites": [[527, "skbio-sequence-protein-has-definites"]], "skbio.sequence.Protein.has_degenerates": [[528, "skbio-sequence-protein-has-degenerates"]], "skbio.sequence.Protein.has_gaps": [[529, "skbio-sequence-protein-has-gaps"]], "skbio.sequence.Protein.has_interval_metadata": [[530, "skbio-sequence-protein-has-interval-metadata"]], "skbio.sequence.Protein.has_metadata": [[531, "skbio-sequence-protein-has-metadata"]], "skbio.sequence.Protein.has_nondegenerates": [[532, "skbio-sequence-protein-has-nondegenerates"]], "skbio.sequence.Protein.has_positional_metadata": [[533, "skbio-sequence-protein-has-positional-metadata"]], "skbio.sequence.Protein.has_stops": [[534, "skbio-sequence-protein-has-stops"]], "skbio.sequence.Protein.index": [[535, "skbio-sequence-protein-index"]], "skbio.sequence.Protein.iter_contiguous": [[536, "skbio-sequence-protein-iter-contiguous"]], "skbio.sequence.Protein.iter_kmers": [[537, "skbio-sequence-protein-iter-kmers"]], "skbio.sequence.Protein.kmer_frequencies": [[538, "skbio-sequence-protein-kmer-frequencies"]], "skbio.sequence.Protein.lowercase": [[539, "skbio-sequence-protein-lowercase"]], "skbio.sequence.Protein.match_frequency": [[540, "skbio-sequence-protein-match-frequency"]], "skbio.sequence.Protein.matches": [[541, "skbio-sequence-protein-matches"]], "skbio.sequence.Protein.mismatch_frequency": [[542, "skbio-sequence-protein-mismatch-frequency"]], "skbio.sequence.Protein.mismatches": [[543, "skbio-sequence-protein-mismatches"]], "skbio.sequence.Protein.nondegenerates": [[544, "skbio-sequence-protein-nondegenerates"]], "skbio.sequence.Protein.read": [[545, "skbio-sequence-protein-read"]], "skbio.sequence.Protein.replace": [[546, "skbio-sequence-protein-replace"]], "skbio.sequence.Protein.stops": [[547, "skbio-sequence-protein-stops"]], "skbio.sequence.Protein.to_definites": [[548, "skbio-sequence-protein-to-definites"]], "skbio.sequence.Protein.to_indices": [[549, "skbio-sequence-protein-to-indices"]], "skbio.sequence.Protein.to_regex": [[550, "skbio-sequence-protein-to-regex"]], "skbio.sequence.Protein.write": [[551, "skbio-sequence-protein-write"]], "skbio.sequence.RNA": [[552, "skbio-sequence-rna"]], "skbio.sequence.RNA.__bool__": [[553, "skbio-sequence-rna-bool"]], "skbio.sequence.RNA.__contains__": [[554, "skbio-sequence-rna-contains"]], "skbio.sequence.RNA.__copy__": [[555, "skbio-sequence-rna-copy"]], "skbio.sequence.RNA.__deepcopy__": [[556, "skbio-sequence-rna-deepcopy"]], "skbio.sequence.RNA.__eq__": [[557, "skbio-sequence-rna-eq"]], "skbio.sequence.RNA.__ge__": [[558, "skbio-sequence-rna-ge"]], "skbio.sequence.RNA.__getitem__": [[559, "skbio-sequence-rna-getitem"]], "skbio.sequence.RNA.__getstate__": [[560, "skbio-sequence-rna-getstate"]], "skbio.sequence.RNA.__gt__": [[561, "skbio-sequence-rna-gt"]], "skbio.sequence.RNA.__iter__": [[562, "skbio-sequence-rna-iter"]], "skbio.sequence.RNA.__le__": [[563, "skbio-sequence-rna-le"]], "skbio.sequence.RNA.__len__": [[564, "skbio-sequence-rna-len"]], "skbio.sequence.RNA.__lt__": [[565, "skbio-sequence-rna-lt"]], "skbio.sequence.RNA.__ne__": [[566, "skbio-sequence-rna-ne"]], "skbio.sequence.RNA.__reversed__": [[567, "skbio-sequence-rna-reversed"]], "skbio.sequence.RNA.__str__": [[568, "skbio-sequence-rna-str"]], "skbio.sequence.RNA.complement": [[569, "skbio-sequence-rna-complement"]], "skbio.sequence.RNA.concat": [[570, "skbio-sequence-rna-concat"]], "skbio.sequence.RNA.count": [[571, "skbio-sequence-rna-count"]], "skbio.sequence.RNA.definites": [[572, "skbio-sequence-rna-definites"]], "skbio.sequence.RNA.degap": [[573, "skbio-sequence-rna-degap"]], "skbio.sequence.RNA.degenerates": [[574, "skbio-sequence-rna-degenerates"]], "skbio.sequence.RNA.distance": [[575, "skbio-sequence-rna-distance"]], "skbio.sequence.RNA.expand_degenerates": [[576, "skbio-sequence-rna-expand-degenerates"]], "skbio.sequence.RNA.find_motifs": [[577, "skbio-sequence-rna-find-motifs"]], "skbio.sequence.RNA.find_with_regex": [[578, "skbio-sequence-rna-find-with-regex"]], "skbio.sequence.RNA.frequencies": [[579, "skbio-sequence-rna-frequencies"]], "skbio.sequence.RNA.gaps": [[580, "skbio-sequence-rna-gaps"]], "skbio.sequence.RNA.gc_content": [[581, "skbio-sequence-rna-gc-content"]], "skbio.sequence.RNA.gc_frequency": [[582, "skbio-sequence-rna-gc-frequency"]], "skbio.sequence.RNA.has_definites": [[583, "skbio-sequence-rna-has-definites"]], "skbio.sequence.RNA.has_degenerates": [[584, "skbio-sequence-rna-has-degenerates"]], "skbio.sequence.RNA.has_gaps": [[585, "skbio-sequence-rna-has-gaps"]], "skbio.sequence.RNA.has_interval_metadata": [[586, "skbio-sequence-rna-has-interval-metadata"]], "skbio.sequence.RNA.has_metadata": [[587, "skbio-sequence-rna-has-metadata"]], "skbio.sequence.RNA.has_nondegenerates": [[588, "skbio-sequence-rna-has-nondegenerates"]], "skbio.sequence.RNA.has_positional_metadata": [[589, "skbio-sequence-rna-has-positional-metadata"]], "skbio.sequence.RNA.index": [[590, "skbio-sequence-rna-index"]], "skbio.sequence.RNA.is_reverse_complement": [[591, "skbio-sequence-rna-is-reverse-complement"]], "skbio.sequence.RNA.iter_contiguous": [[592, "skbio-sequence-rna-iter-contiguous"]], "skbio.sequence.RNA.iter_kmers": [[593, "skbio-sequence-rna-iter-kmers"]], "skbio.sequence.RNA.kmer_frequencies": [[594, "skbio-sequence-rna-kmer-frequencies"]], "skbio.sequence.RNA.lowercase": [[595, "skbio-sequence-rna-lowercase"]], "skbio.sequence.RNA.match_frequency": [[596, "skbio-sequence-rna-match-frequency"]], "skbio.sequence.RNA.matches": [[597, "skbio-sequence-rna-matches"]], "skbio.sequence.RNA.mismatch_frequency": [[598, "skbio-sequence-rna-mismatch-frequency"]], "skbio.sequence.RNA.mismatches": [[599, "skbio-sequence-rna-mismatches"]], "skbio.sequence.RNA.nondegenerates": [[600, "skbio-sequence-rna-nondegenerates"]], "skbio.sequence.RNA.read": [[601, "skbio-sequence-rna-read"]], "skbio.sequence.RNA.replace": [[602, "skbio-sequence-rna-replace"]], "skbio.sequence.RNA.reverse_complement": [[603, "skbio-sequence-rna-reverse-complement"]], "skbio.sequence.RNA.reverse_transcribe": [[604, "skbio-sequence-rna-reverse-transcribe"]], "skbio.sequence.RNA.to_definites": [[605, "skbio-sequence-rna-to-definites"]], "skbio.sequence.RNA.to_indices": [[606, "skbio-sequence-rna-to-indices"]], "skbio.sequence.RNA.to_regex": [[607, "skbio-sequence-rna-to-regex"]], "skbio.sequence.RNA.translate": [[608, "skbio-sequence-rna-translate"]], "skbio.sequence.RNA.translate_six_frames": [[609, "skbio-sequence-rna-translate-six-frames"]], "skbio.sequence.RNA.write": [[610, "skbio-sequence-rna-write"]], "skbio.sequence.Sequence": [[611, "skbio-sequence-sequence"]], "skbio.sequence.Sequence.__bool__": [[612, "skbio-sequence-sequence-bool"]], "skbio.sequence.Sequence.__contains__": [[613, "skbio-sequence-sequence-contains"]], "skbio.sequence.Sequence.__copy__": [[614, "skbio-sequence-sequence-copy"]], "skbio.sequence.Sequence.__deepcopy__": [[615, "skbio-sequence-sequence-deepcopy"]], "skbio.sequence.Sequence.__eq__": [[616, "skbio-sequence-sequence-eq"]], "skbio.sequence.Sequence.__ge__": [[617, "skbio-sequence-sequence-ge"]], "skbio.sequence.Sequence.__getitem__": [[618, "skbio-sequence-sequence-getitem"]], "skbio.sequence.Sequence.__getstate__": [[619, "skbio-sequence-sequence-getstate"]], "skbio.sequence.Sequence.__gt__": [[620, "skbio-sequence-sequence-gt"]], "skbio.sequence.Sequence.__iter__": [[621, "skbio-sequence-sequence-iter"]], "skbio.sequence.Sequence.__le__": [[622, "skbio-sequence-sequence-le"]], "skbio.sequence.Sequence.__len__": [[623, "skbio-sequence-sequence-len"]], "skbio.sequence.Sequence.__lt__": [[624, "skbio-sequence-sequence-lt"]], "skbio.sequence.Sequence.__ne__": [[625, "skbio-sequence-sequence-ne"]], "skbio.sequence.Sequence.__reversed__": [[626, "skbio-sequence-sequence-reversed"]], "skbio.sequence.Sequence.__str__": [[627, "skbio-sequence-sequence-str"]], "skbio.sequence.Sequence.concat": [[628, "skbio-sequence-sequence-concat"]], "skbio.sequence.Sequence.count": [[629, "skbio-sequence-sequence-count"]], "skbio.sequence.Sequence.distance": [[630, "skbio-sequence-sequence-distance"]], "skbio.sequence.Sequence.find_with_regex": [[631, "skbio-sequence-sequence-find-with-regex"]], "skbio.sequence.Sequence.frequencies": [[632, "skbio-sequence-sequence-frequencies"]], "skbio.sequence.Sequence.has_interval_metadata": [[633, "skbio-sequence-sequence-has-interval-metadata"]], "skbio.sequence.Sequence.has_metadata": [[634, "skbio-sequence-sequence-has-metadata"]], "skbio.sequence.Sequence.has_positional_metadata": [[635, "skbio-sequence-sequence-has-positional-metadata"]], "skbio.sequence.Sequence.index": [[636, "skbio-sequence-sequence-index"]], "skbio.sequence.Sequence.iter_contiguous": [[637, "skbio-sequence-sequence-iter-contiguous"]], "skbio.sequence.Sequence.iter_kmers": [[638, "skbio-sequence-sequence-iter-kmers"]], "skbio.sequence.Sequence.kmer_frequencies": [[639, "skbio-sequence-sequence-kmer-frequencies"]], "skbio.sequence.Sequence.lowercase": [[640, "skbio-sequence-sequence-lowercase"]], "skbio.sequence.Sequence.match_frequency": [[641, "skbio-sequence-sequence-match-frequency"]], "skbio.sequence.Sequence.matches": [[642, "skbio-sequence-sequence-matches"]], "skbio.sequence.Sequence.mismatch_frequency": [[643, "skbio-sequence-sequence-mismatch-frequency"]], "skbio.sequence.Sequence.mismatches": [[644, "skbio-sequence-sequence-mismatches"]], "skbio.sequence.Sequence.read": [[645, "skbio-sequence-sequence-read"]], "skbio.sequence.Sequence.replace": [[646, "skbio-sequence-sequence-replace"]], "skbio.sequence.Sequence.to_indices": [[647, "skbio-sequence-sequence-to-indices"]], "skbio.sequence.Sequence.write": [[648, "skbio-sequence-sequence-write"]], "skbio.sequence.SubstitutionMatrix": [[649, "skbio-sequence-substitutionmatrix"]], "skbio.sequence.SubstitutionMatrix.__contains__": [[650, "skbio-sequence-substitutionmatrix-contains"]], "skbio.sequence.SubstitutionMatrix.__eq__": [[651, "skbio-sequence-substitutionmatrix-eq"]], "skbio.sequence.SubstitutionMatrix.__ge__": [[652, "skbio-sequence-substitutionmatrix-ge"]], "skbio.sequence.SubstitutionMatrix.__getitem__": [[653, "skbio-sequence-substitutionmatrix-getitem"]], "skbio.sequence.SubstitutionMatrix.__getstate__": [[654, "skbio-sequence-substitutionmatrix-getstate"]], "skbio.sequence.SubstitutionMatrix.__gt__": [[655, "skbio-sequence-substitutionmatrix-gt"]], "skbio.sequence.SubstitutionMatrix.__le__": [[656, "skbio-sequence-substitutionmatrix-le"]], "skbio.sequence.SubstitutionMatrix.__lt__": [[657, "skbio-sequence-substitutionmatrix-lt"]], "skbio.sequence.SubstitutionMatrix.__ne__": [[658, "skbio-sequence-substitutionmatrix-ne"]], "skbio.sequence.SubstitutionMatrix.__str__": [[659, "skbio-sequence-substitutionmatrix-str"]], "skbio.sequence.SubstitutionMatrix.between": [[660, "skbio-sequence-substitutionmatrix-between"]], "skbio.sequence.SubstitutionMatrix.by_name": [[661, "skbio-sequence-substitutionmatrix-by-name"]], "skbio.sequence.SubstitutionMatrix.copy": [[662, "skbio-sequence-substitutionmatrix-copy"]], "skbio.sequence.SubstitutionMatrix.filter": [[663, "skbio-sequence-substitutionmatrix-filter"]], "skbio.sequence.SubstitutionMatrix.from_dict": [[664, "skbio-sequence-substitutionmatrix-from-dict"]], "skbio.sequence.SubstitutionMatrix.from_iterable": [[665, "skbio-sequence-substitutionmatrix-from-iterable"]], "skbio.sequence.SubstitutionMatrix.get_names": [[666, "skbio-sequence-substitutionmatrix-get-names"]], "skbio.sequence.SubstitutionMatrix.identity": [[667, "skbio-sequence-substitutionmatrix-identity"]], "skbio.sequence.SubstitutionMatrix.index": [[668, "skbio-sequence-substitutionmatrix-index"]], "skbio.sequence.SubstitutionMatrix.plot": [[669, "skbio-sequence-substitutionmatrix-plot"]], "skbio.sequence.SubstitutionMatrix.read": [[670, "skbio-sequence-substitutionmatrix-read"]], "skbio.sequence.SubstitutionMatrix.redundant_form": [[671, "skbio-sequence-substitutionmatrix-redundant-form"]], "skbio.sequence.SubstitutionMatrix.to_data_frame": [[672, "skbio-sequence-substitutionmatrix-to-data-frame"]], "skbio.sequence.SubstitutionMatrix.to_dict": [[673, "skbio-sequence-substitutionmatrix-to-dict"]], "skbio.sequence.SubstitutionMatrix.transpose": [[674, "skbio-sequence-substitutionmatrix-transpose"]], "skbio.sequence.SubstitutionMatrix.within": [[675, "skbio-sequence-substitutionmatrix-within"]], "skbio.sequence.SubstitutionMatrix.write": [[676, "skbio-sequence-substitutionmatrix-write"]], "skbio.sequence.distance.hamming": [[678, "skbio-sequence-distance-hamming"]], "skbio.sequence.distance.kmer_distance": [[679, "skbio-sequence-distance-kmer-distance"]], "skbio.stats.composition.alr": [[681, "skbio-stats-composition-alr"]], "skbio.stats.composition.alr_inv": [[682, "skbio-stats-composition-alr-inv"]], "skbio.stats.composition.ancom": [[683, "skbio-stats-composition-ancom"]], "skbio.stats.composition.centralize": [[684, "skbio-stats-composition-centralize"]], "skbio.stats.composition.closure": [[685, "skbio-stats-composition-closure"]], "skbio.stats.composition.clr": [[686, "skbio-stats-composition-clr"]], "skbio.stats.composition.clr_inv": [[687, "skbio-stats-composition-clr-inv"]], "skbio.stats.composition.dirmult_ttest": [[688, "skbio-stats-composition-dirmult-ttest"]], "skbio.stats.composition.ilr": [[689, "skbio-stats-composition-ilr"]], "skbio.stats.composition.ilr_inv": [[690, "skbio-stats-composition-ilr-inv"]], "skbio.stats.composition.inner": [[691, "skbio-stats-composition-inner"]], "skbio.stats.composition.multi_replace": [[692, "skbio-stats-composition-multi-replace"]], "skbio.stats.composition.multiplicative_replacement": [[693, "skbio-stats-composition-multiplicative-replacement"]], "skbio.stats.composition.pairwise_vlr": [[694, "skbio-stats-composition-pairwise-vlr"]], "skbio.stats.composition.perturb": [[695, "skbio-stats-composition-perturb"]], "skbio.stats.composition.perturb_inv": [[696, "skbio-stats-composition-perturb-inv"]], "skbio.stats.composition.power": [[697, "skbio-stats-composition-power"]], "skbio.stats.composition.sbp_basis": [[698, "skbio-stats-composition-sbp-basis"]], "skbio.stats.composition.tree_basis": [[699, "skbio-stats-composition-tree-basis"]], "skbio.stats.composition.vlr": [[700, "skbio-stats-composition-vlr"]], "skbio.stats.distance.DissimilarityMatrix": [[702, "skbio-stats-distance-dissimilaritymatrix"]], "skbio.stats.distance.DissimilarityMatrix.__contains__": [[703, "skbio-stats-distance-dissimilaritymatrix-contains"]], "skbio.stats.distance.DissimilarityMatrix.__eq__": [[704, "skbio-stats-distance-dissimilaritymatrix-eq"]], "skbio.stats.distance.DissimilarityMatrix.__ge__": [[705, "skbio-stats-distance-dissimilaritymatrix-ge"]], "skbio.stats.distance.DissimilarityMatrix.__getitem__": [[706, "skbio-stats-distance-dissimilaritymatrix-getitem"]], "skbio.stats.distance.DissimilarityMatrix.__getstate__": [[707, "skbio-stats-distance-dissimilaritymatrix-getstate"]], "skbio.stats.distance.DissimilarityMatrix.__gt__": [[708, "skbio-stats-distance-dissimilaritymatrix-gt"]], "skbio.stats.distance.DissimilarityMatrix.__le__": [[709, "skbio-stats-distance-dissimilaritymatrix-le"]], "skbio.stats.distance.DissimilarityMatrix.__lt__": [[710, "skbio-stats-distance-dissimilaritymatrix-lt"]], "skbio.stats.distance.DissimilarityMatrix.__ne__": [[711, "skbio-stats-distance-dissimilaritymatrix-ne"]], "skbio.stats.distance.DissimilarityMatrix.__str__": [[712, "skbio-stats-distance-dissimilaritymatrix-str"]], "skbio.stats.distance.DissimilarityMatrix.between": [[713, "skbio-stats-distance-dissimilaritymatrix-between"]], "skbio.stats.distance.DissimilarityMatrix.copy": [[714, "skbio-stats-distance-dissimilaritymatrix-copy"]], "skbio.stats.distance.DissimilarityMatrix.filter": [[715, "skbio-stats-distance-dissimilaritymatrix-filter"]], "skbio.stats.distance.DissimilarityMatrix.from_iterable": [[716, "skbio-stats-distance-dissimilaritymatrix-from-iterable"]], "skbio.stats.distance.DissimilarityMatrix.index": [[717, "skbio-stats-distance-dissimilaritymatrix-index"]], "skbio.stats.distance.DissimilarityMatrix.plot": [[718, "skbio-stats-distance-dissimilaritymatrix-plot"]], "skbio.stats.distance.DissimilarityMatrix.read": [[719, "skbio-stats-distance-dissimilaritymatrix-read"]], "skbio.stats.distance.DissimilarityMatrix.redundant_form": [[720, "skbio-stats-distance-dissimilaritymatrix-redundant-form"]], "skbio.stats.distance.DissimilarityMatrix.to_data_frame": [[721, "skbio-stats-distance-dissimilaritymatrix-to-data-frame"]], "skbio.stats.distance.DissimilarityMatrix.transpose": [[722, "skbio-stats-distance-dissimilaritymatrix-transpose"]], "skbio.stats.distance.DissimilarityMatrix.within": [[723, "skbio-stats-distance-dissimilaritymatrix-within"]], "skbio.stats.distance.DissimilarityMatrix.write": [[724, "skbio-stats-distance-dissimilaritymatrix-write"]], "skbio.stats.distance.DistanceMatrix": [[725, "skbio-stats-distance-distancematrix"]], "skbio.stats.distance.DistanceMatrix.__contains__": [[726, "skbio-stats-distance-distancematrix-contains"]], "skbio.stats.distance.DistanceMatrix.__eq__": [[727, "skbio-stats-distance-distancematrix-eq"]], "skbio.stats.distance.DistanceMatrix.__ge__": [[728, "skbio-stats-distance-distancematrix-ge"]], "skbio.stats.distance.DistanceMatrix.__getitem__": [[729, "skbio-stats-distance-distancematrix-getitem"]], "skbio.stats.distance.DistanceMatrix.__getstate__": [[730, "skbio-stats-distance-distancematrix-getstate"]], "skbio.stats.distance.DistanceMatrix.__gt__": [[731, "skbio-stats-distance-distancematrix-gt"]], "skbio.stats.distance.DistanceMatrix.__le__": [[732, "skbio-stats-distance-distancematrix-le"]], "skbio.stats.distance.DistanceMatrix.__lt__": [[733, "skbio-stats-distance-distancematrix-lt"]], "skbio.stats.distance.DistanceMatrix.__ne__": [[734, "skbio-stats-distance-distancematrix-ne"]], "skbio.stats.distance.DistanceMatrix.__str__": [[735, "skbio-stats-distance-distancematrix-str"]], "skbio.stats.distance.DistanceMatrix.between": [[736, "skbio-stats-distance-distancematrix-between"]], "skbio.stats.distance.DistanceMatrix.condensed_form": [[737, "skbio-stats-distance-distancematrix-condensed-form"]], "skbio.stats.distance.DistanceMatrix.copy": [[738, "skbio-stats-distance-distancematrix-copy"]], "skbio.stats.distance.DistanceMatrix.filter": [[739, "skbio-stats-distance-distancematrix-filter"]], "skbio.stats.distance.DistanceMatrix.from_iterable": [[740, "skbio-stats-distance-distancematrix-from-iterable"]], "skbio.stats.distance.DistanceMatrix.index": [[741, "skbio-stats-distance-distancematrix-index"]], "skbio.stats.distance.DistanceMatrix.permute": [[742, "skbio-stats-distance-distancematrix-permute"]], "skbio.stats.distance.DistanceMatrix.plot": [[743, "skbio-stats-distance-distancematrix-plot"]], "skbio.stats.distance.DistanceMatrix.read": [[744, "skbio-stats-distance-distancematrix-read"]], "skbio.stats.distance.DistanceMatrix.redundant_form": [[745, "skbio-stats-distance-distancematrix-redundant-form"]], "skbio.stats.distance.DistanceMatrix.to_data_frame": [[746, "skbio-stats-distance-distancematrix-to-data-frame"]], "skbio.stats.distance.DistanceMatrix.to_series": [[747, "skbio-stats-distance-distancematrix-to-series"]], "skbio.stats.distance.DistanceMatrix.transpose": [[748, "skbio-stats-distance-distancematrix-transpose"]], "skbio.stats.distance.DistanceMatrix.within": [[749, "skbio-stats-distance-distancematrix-within"]], "skbio.stats.distance.DistanceMatrix.write": [[750, "skbio-stats-distance-distancematrix-write"]], "skbio.stats.distance.anosim": [[751, "skbio-stats-distance-anosim"]], "skbio.stats.distance.bioenv": [[752, "skbio-stats-distance-bioenv"]], "skbio.stats.distance.mantel": [[753, "skbio-stats-distance-mantel"]], "skbio.stats.distance.permanova": [[754, "skbio-stats-distance-permanova"]], "skbio.stats.distance.permdisp": [[755, "skbio-stats-distance-permdisp"]], "skbio.stats.distance.pwmantel": [[756, "skbio-stats-distance-pwmantel"]], "skbio.stats.distance.randdm": [[757, "skbio-stats-distance-randdm"]], "skbio.stats.evolve.hommola_cospeciation": [[759, "skbio-stats-evolve-hommola-cospeciation"]], "skbio.stats.gradient.AverageGradientANOVA": [[761, "skbio-stats-gradient-averagegradientanova"]], "skbio.stats.gradient.AverageGradientANOVA.__eq__": [[762, "skbio-stats-gradient-averagegradientanova-eq"]], "skbio.stats.gradient.AverageGradientANOVA.__ge__": [[763, "skbio-stats-gradient-averagegradientanova-ge"]], "skbio.stats.gradient.AverageGradientANOVA.__getstate__": [[764, "skbio-stats-gradient-averagegradientanova-getstate"]], "skbio.stats.gradient.AverageGradientANOVA.__gt__": [[765, "skbio-stats-gradient-averagegradientanova-gt"]], "skbio.stats.gradient.AverageGradientANOVA.__hash__": [[766, "skbio-stats-gradient-averagegradientanova-hash"]], "skbio.stats.gradient.AverageGradientANOVA.__le__": [[767, "skbio-stats-gradient-averagegradientanova-le"]], "skbio.stats.gradient.AverageGradientANOVA.__lt__": [[768, "skbio-stats-gradient-averagegradientanova-lt"]], "skbio.stats.gradient.AverageGradientANOVA.__ne__": [[769, "skbio-stats-gradient-averagegradientanova-ne"]], "skbio.stats.gradient.AverageGradientANOVA.__str__": [[770, "skbio-stats-gradient-averagegradientanova-str"]], "skbio.stats.gradient.AverageGradientANOVA.get_trajectories": [[771, "skbio-stats-gradient-averagegradientanova-get-trajectories"]], "skbio.stats.gradient.CategoryResults": [[772, "skbio-stats-gradient-categoryresults"]], "skbio.stats.gradient.CategoryResults.__eq__": [[773, "skbio-stats-gradient-categoryresults-eq"]], "skbio.stats.gradient.CategoryResults.__ge__": [[774, "skbio-stats-gradient-categoryresults-ge"]], "skbio.stats.gradient.CategoryResults.__getstate__": [[775, "skbio-stats-gradient-categoryresults-getstate"]], "skbio.stats.gradient.CategoryResults.__gt__": [[776, "skbio-stats-gradient-categoryresults-gt"]], "skbio.stats.gradient.CategoryResults.__hash__": [[777, "skbio-stats-gradient-categoryresults-hash"]], "skbio.stats.gradient.CategoryResults.__le__": [[778, "skbio-stats-gradient-categoryresults-le"]], "skbio.stats.gradient.CategoryResults.__lt__": [[779, "skbio-stats-gradient-categoryresults-lt"]], "skbio.stats.gradient.CategoryResults.__ne__": [[780, "skbio-stats-gradient-categoryresults-ne"]], "skbio.stats.gradient.CategoryResults.__str__": [[781, "skbio-stats-gradient-categoryresults-str"]], "skbio.stats.gradient.CategoryResults.to_files": [[782, "skbio-stats-gradient-categoryresults-to-files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[783, "skbio-stats-gradient-firstdifferencegradientanova"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__": [[784, "skbio-stats-gradient-firstdifferencegradientanova-eq"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__": [[785, "skbio-stats-gradient-firstdifferencegradientanova-ge"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__": [[786, "skbio-stats-gradient-firstdifferencegradientanova-getstate"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__": [[787, "skbio-stats-gradient-firstdifferencegradientanova-gt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__": [[788, "skbio-stats-gradient-firstdifferencegradientanova-hash"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__": [[789, "skbio-stats-gradient-firstdifferencegradientanova-le"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__": [[790, "skbio-stats-gradient-firstdifferencegradientanova-lt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__": [[791, "skbio-stats-gradient-firstdifferencegradientanova-ne"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__": [[792, "skbio-stats-gradient-firstdifferencegradientanova-str"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories": [[793, "skbio-stats-gradient-firstdifferencegradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVA": [[794, "skbio-stats-gradient-gradientanova"]], "skbio.stats.gradient.GradientANOVA.__eq__": [[795, "skbio-stats-gradient-gradientanova-eq"]], "skbio.stats.gradient.GradientANOVA.__ge__": [[796, "skbio-stats-gradient-gradientanova-ge"]], "skbio.stats.gradient.GradientANOVA.__getstate__": [[797, "skbio-stats-gradient-gradientanova-getstate"]], "skbio.stats.gradient.GradientANOVA.__gt__": [[798, "skbio-stats-gradient-gradientanova-gt"]], "skbio.stats.gradient.GradientANOVA.__hash__": [[799, "skbio-stats-gradient-gradientanova-hash"]], "skbio.stats.gradient.GradientANOVA.__le__": [[800, "skbio-stats-gradient-gradientanova-le"]], "skbio.stats.gradient.GradientANOVA.__lt__": [[801, "skbio-stats-gradient-gradientanova-lt"]], "skbio.stats.gradient.GradientANOVA.__ne__": [[802, "skbio-stats-gradient-gradientanova-ne"]], "skbio.stats.gradient.GradientANOVA.__str__": [[803, "skbio-stats-gradient-gradientanova-str"]], "skbio.stats.gradient.GradientANOVA.get_trajectories": [[804, "skbio-stats-gradient-gradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[805, "skbio-stats-gradient-gradientanovaresults"]], "skbio.stats.gradient.GradientANOVAResults.__eq__": [[806, "skbio-stats-gradient-gradientanovaresults-eq"]], "skbio.stats.gradient.GradientANOVAResults.__ge__": [[807, "skbio-stats-gradient-gradientanovaresults-ge"]], "skbio.stats.gradient.GradientANOVAResults.__getstate__": [[808, "skbio-stats-gradient-gradientanovaresults-getstate"]], "skbio.stats.gradient.GradientANOVAResults.__gt__": [[809, "skbio-stats-gradient-gradientanovaresults-gt"]], "skbio.stats.gradient.GradientANOVAResults.__hash__": [[810, "skbio-stats-gradient-gradientanovaresults-hash"]], "skbio.stats.gradient.GradientANOVAResults.__le__": [[811, "skbio-stats-gradient-gradientanovaresults-le"]], "skbio.stats.gradient.GradientANOVAResults.__lt__": [[812, "skbio-stats-gradient-gradientanovaresults-lt"]], "skbio.stats.gradient.GradientANOVAResults.__ne__": [[813, "skbio-stats-gradient-gradientanovaresults-ne"]], "skbio.stats.gradient.GradientANOVAResults.__str__": [[814, "skbio-stats-gradient-gradientanovaresults-str"]], "skbio.stats.gradient.GradientANOVAResults.to_files": [[815, "skbio-stats-gradient-gradientanovaresults-to-files"]], "skbio.stats.gradient.GroupResults": [[816, "skbio-stats-gradient-groupresults"]], "skbio.stats.gradient.GroupResults.__eq__": [[817, "skbio-stats-gradient-groupresults-eq"]], "skbio.stats.gradient.GroupResults.__ge__": [[818, "skbio-stats-gradient-groupresults-ge"]], "skbio.stats.gradient.GroupResults.__getstate__": [[819, "skbio-stats-gradient-groupresults-getstate"]], "skbio.stats.gradient.GroupResults.__gt__": [[820, "skbio-stats-gradient-groupresults-gt"]], "skbio.stats.gradient.GroupResults.__hash__": [[821, "skbio-stats-gradient-groupresults-hash"]], "skbio.stats.gradient.GroupResults.__le__": [[822, "skbio-stats-gradient-groupresults-le"]], "skbio.stats.gradient.GroupResults.__lt__": [[823, "skbio-stats-gradient-groupresults-lt"]], "skbio.stats.gradient.GroupResults.__ne__": [[824, "skbio-stats-gradient-groupresults-ne"]], "skbio.stats.gradient.GroupResults.__str__": [[825, "skbio-stats-gradient-groupresults-str"]], "skbio.stats.gradient.GroupResults.to_files": [[826, "skbio-stats-gradient-groupresults-to-files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[827, "skbio-stats-gradient-trajectorygradientanova"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__": [[828, "skbio-stats-gradient-trajectorygradientanova-eq"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__": [[829, "skbio-stats-gradient-trajectorygradientanova-ge"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__": [[830, "skbio-stats-gradient-trajectorygradientanova-getstate"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__": [[831, "skbio-stats-gradient-trajectorygradientanova-gt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__": [[832, "skbio-stats-gradient-trajectorygradientanova-hash"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__le__": [[833, "skbio-stats-gradient-trajectorygradientanova-le"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__": [[834, "skbio-stats-gradient-trajectorygradientanova-lt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__": [[835, "skbio-stats-gradient-trajectorygradientanova-ne"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__str__": [[836, "skbio-stats-gradient-trajectorygradientanova-str"]], "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories": [[837, "skbio-stats-gradient-trajectorygradientanova-get-trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[838, "skbio-stats-gradient-windowdifferencegradientanova"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__": [[839, "skbio-stats-gradient-windowdifferencegradientanova-eq"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__": [[840, "skbio-stats-gradient-windowdifferencegradientanova-ge"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__": [[841, "skbio-stats-gradient-windowdifferencegradientanova-getstate"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__": [[842, "skbio-stats-gradient-windowdifferencegradientanova-gt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__": [[843, "skbio-stats-gradient-windowdifferencegradientanova-hash"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__": [[844, "skbio-stats-gradient-windowdifferencegradientanova-le"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__": [[845, "skbio-stats-gradient-windowdifferencegradientanova-lt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__": [[846, "skbio-stats-gradient-windowdifferencegradientanova-ne"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__": [[847, "skbio-stats-gradient-windowdifferencegradientanova-str"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories": [[848, "skbio-stats-gradient-windowdifferencegradientanova-get-trajectories"]], "skbio.stats.isubsample": [[849, "skbio-stats-isubsample"]], "skbio.stats.ordination.OrdinationResults": [[851, "skbio-stats-ordination-ordinationresults"]], "skbio.stats.ordination.OrdinationResults.__eq__": [[852, "skbio-stats-ordination-ordinationresults-eq"]], "skbio.stats.ordination.OrdinationResults.__ge__": [[853, "skbio-stats-ordination-ordinationresults-ge"]], "skbio.stats.ordination.OrdinationResults.__getstate__": [[854, "skbio-stats-ordination-ordinationresults-getstate"]], "skbio.stats.ordination.OrdinationResults.__gt__": [[855, "skbio-stats-ordination-ordinationresults-gt"]], "skbio.stats.ordination.OrdinationResults.__hash__": [[856, "skbio-stats-ordination-ordinationresults-hash"]], "skbio.stats.ordination.OrdinationResults.__le__": [[857, "skbio-stats-ordination-ordinationresults-le"]], "skbio.stats.ordination.OrdinationResults.__lt__": [[858, "skbio-stats-ordination-ordinationresults-lt"]], "skbio.stats.ordination.OrdinationResults.__ne__": [[859, "skbio-stats-ordination-ordinationresults-ne"]], "skbio.stats.ordination.OrdinationResults.__str__": [[860, "skbio-stats-ordination-ordinationresults-str"]], "skbio.stats.ordination.OrdinationResults.plot": [[861, "skbio-stats-ordination-ordinationresults-plot"]], "skbio.stats.ordination.OrdinationResults.read": [[862, "skbio-stats-ordination-ordinationresults-read"]], "skbio.stats.ordination.OrdinationResults.write": [[863, "skbio-stats-ordination-ordinationresults-write"]], "skbio.stats.ordination.ca": [[864, "skbio-stats-ordination-ca"]], "skbio.stats.ordination.cca": [[865, "skbio-stats-ordination-cca"]], "skbio.stats.ordination.corr": [[866, "skbio-stats-ordination-corr"]], "skbio.stats.ordination.e_matrix": [[867, "skbio-stats-ordination-e-matrix"]], "skbio.stats.ordination.f_matrix": [[868, "skbio-stats-ordination-f-matrix"]], "skbio.stats.ordination.mean_and_std": [[869, "skbio-stats-ordination-mean-and-std"]], "skbio.stats.ordination.pcoa": [[870, "skbio-stats-ordination-pcoa"]], "skbio.stats.ordination.pcoa_biplot": [[871, "skbio-stats-ordination-pcoa-biplot"]], "skbio.stats.ordination.rda": [[872, "skbio-stats-ordination-rda"]], "skbio.stats.ordination.scale": [[873, "skbio-stats-ordination-scale"]], "skbio.stats.ordination.svd_rank": [[874, "skbio-stats-ordination-svd-rank"]], "skbio.stats.power.confidence_bound": [[876, "skbio-stats-power-confidence-bound"]], "skbio.stats.power.paired_subsamples": [[877, "skbio-stats-power-paired-subsamples"]], "skbio.stats.power.subsample_paired_power": [[878, "skbio-stats-power-subsample-paired-power"]], "skbio.stats.power.subsample_power": [[879, "skbio-stats-power-subsample-power"]], "skbio.stats.subsample_counts": [[880, "skbio-stats-subsample-counts"]], "skbio.table.Table": [[881, "skbio-table-table"]], "skbio.table.Table.__eq__": [[882, "skbio-table-table-eq"]], "skbio.table.Table.__ge__": [[883, "skbio-table-table-ge"]], "skbio.table.Table.__getitem__": [[884, "skbio-table-table-getitem"]], "skbio.table.Table.__getstate__": [[885, "skbio-table-table-getstate"]], "skbio.table.Table.__gt__": [[886, "skbio-table-table-gt"]], "skbio.table.Table.__iter__": [[887, "skbio-table-table-iter"]], "skbio.table.Table.__le__": [[888, "skbio-table-table-le"]], "skbio.table.Table.__lt__": [[889, "skbio-table-table-lt"]], "skbio.table.Table.__ne__": [[890, "skbio-table-table-ne"]], "skbio.table.Table.__str__": [[891, "skbio-table-table-str"]], "skbio.table.Table.add_group_metadata": [[892, "skbio-table-table-add-group-metadata"]], "skbio.table.Table.add_metadata": [[893, "skbio-table-table-add-metadata"]], "skbio.table.Table.align_to": [[894, "skbio-table-table-align-to"]], "skbio.table.Table.align_to_dataframe": [[895, "skbio-table-table-align-to-dataframe"]], "skbio.table.Table.align_tree": [[896, "skbio-table-table-align-tree"]], "skbio.table.Table.collapse": [[897, "skbio-table-table-collapse"]], "skbio.table.Table.concat": [[898, "skbio-table-table-concat"]], "skbio.table.Table.copy": [[899, "skbio-table-table-copy"]], "skbio.table.Table.data": [[900, "skbio-table-table-data"]], "skbio.table.Table.del_metadata": [[901, "skbio-table-table-del-metadata"]], "skbio.table.Table.delimited_self": [[902, "skbio-table-table-delimited-self"]], "skbio.table.Table.descriptive_equality": [[903, "skbio-table-table-descriptive-equality"]], "skbio.table.Table.exists": [[904, "skbio-table-table-exists"]], "skbio.table.Table.filter": [[905, "skbio-table-table-filter"]], "skbio.table.Table.from_adjacency": [[906, "skbio-table-table-from-adjacency"]], "skbio.table.Table.from_hdf5": [[907, "skbio-table-table-from-hdf5"]], "skbio.table.Table.from_json": [[908, "skbio-table-table-from-json"]], "skbio.table.Table.from_tsv": [[909, "skbio-table-table-from-tsv"]], "skbio.table.Table.get_table_density": [[910, "skbio-table-table-get-table-density"]], "skbio.table.Table.get_value_by_ids": [[911, "skbio-table-table-get-value-by-ids"]], "skbio.table.Table.group_metadata": [[912, "skbio-table-table-group-metadata"]], "skbio.table.Table.head": [[913, "skbio-table-table-head"]], "skbio.table.Table.ids": [[914, "skbio-table-table-ids"]], "skbio.table.Table.index": [[915, "skbio-table-table-index"]], "skbio.table.Table.is_empty": [[916, "skbio-table-table-is-empty"]], "skbio.table.Table.iter": [[917, "skbio-table-table-iter"]], "skbio.table.Table.iter_data": [[918, "skbio-table-table-iter-data"]], "skbio.table.Table.iter_pairwise": [[919, "skbio-table-table-iter-pairwise"]], "skbio.table.Table.length": [[920, "skbio-table-table-length"]], "skbio.table.Table.max": [[921, "skbio-table-table-max"]], "skbio.table.Table.merge": [[922, "skbio-table-table-merge"]], "skbio.table.Table.metadata": [[923, "skbio-table-table-metadata"]], "skbio.table.Table.metadata_to_dataframe": [[924, "skbio-table-table-metadata-to-dataframe"]], "skbio.table.Table.min": [[925, "skbio-table-table-min"]], "skbio.table.Table.nonzero": [[926, "skbio-table-table-nonzero"]], "skbio.table.Table.nonzero_counts": [[927, "skbio-table-table-nonzero-counts"]], "skbio.table.Table.norm": [[928, "skbio-table-table-norm"]], "skbio.table.Table.pa": [[929, "skbio-table-table-pa"]], "skbio.table.Table.partition": [[930, "skbio-table-table-partition"]], "skbio.table.Table.rankdata": [[931, "skbio-table-table-rankdata"]], "skbio.table.Table.read": [[932, "skbio-table-table-read"]], "skbio.table.Table.reduce": [[933, "skbio-table-table-reduce"]], "skbio.table.Table.remove_empty": [[934, "skbio-table-table-remove-empty"]], "skbio.table.Table.sort": [[935, "skbio-table-table-sort"]], "skbio.table.Table.sort_order": [[936, "skbio-table-table-sort-order"]], "skbio.table.Table.subsample": [[937, "skbio-table-table-subsample"]], "skbio.table.Table.sum": [[938, "skbio-table-table-sum"]], "skbio.table.Table.to_anndata": [[939, "skbio-table-table-to-anndata"]], "skbio.table.Table.to_dataframe": [[940, "skbio-table-table-to-dataframe"]], "skbio.table.Table.to_hdf5": [[941, "skbio-table-table-to-hdf5"]], "skbio.table.Table.to_json": [[942, "skbio-table-table-to-json"]], "skbio.table.Table.to_tsv": [[943, "skbio-table-table-to-tsv"]], "skbio.table.Table.transform": [[944, "skbio-table-table-transform"]], "skbio.table.Table.transpose": [[945, "skbio-table-table-transpose"]], "skbio.table.Table.update_ids": [[946, "skbio-table-table-update-ids"]], "skbio.table.Table.write": [[947, "skbio-table-table-write"]], "skbio.table.example_table": [[948, "skbio-table-example-table"]], "skbio.tree.TreeNode": [[949, "skbio-tree-treenode"]], "skbio.tree.TreeNode.__copy__": [[950, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.__deepcopy__": [[951, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.__eq__": [[952, "skbio-tree-treenode-eq"]], "skbio.tree.TreeNode.__ge__": [[953, "skbio-tree-treenode-ge"]], "skbio.tree.TreeNode.__getitem__": [[954, "skbio-tree-treenode-getitem"]], "skbio.tree.TreeNode.__getstate__": [[955, "skbio-tree-treenode-getstate"]], "skbio.tree.TreeNode.__gt__": [[956, "skbio-tree-treenode-gt"]], "skbio.tree.TreeNode.__hash__": [[957, "skbio-tree-treenode-hash"]], "skbio.tree.TreeNode.__iter__": [[958, "skbio-tree-treenode-iter"]], "skbio.tree.TreeNode.__le__": [[959, "skbio-tree-treenode-le"]], "skbio.tree.TreeNode.__len__": [[960, "skbio-tree-treenode-len"]], "skbio.tree.TreeNode.__lt__": [[961, "skbio-tree-treenode-lt"]], "skbio.tree.TreeNode.__ne__": [[962, "skbio-tree-treenode-ne"]], "skbio.tree.TreeNode.__str__": [[963, "skbio-tree-treenode-str"]], "skbio.tree.TreeNode.accumulate_to_ancestor": [[964, "skbio-tree-treenode-accumulate-to-ancestor"]], "skbio.tree.TreeNode.ancestors": [[965, "skbio-tree-treenode-ancestors"]], "skbio.tree.TreeNode.append": [[966, "skbio-tree-treenode-append"]], "skbio.tree.TreeNode.ascii_art": [[967, "skbio-tree-treenode-ascii-art"]], "skbio.tree.TreeNode.assign_ids": [[968, "skbio-tree-treenode-assign-ids"]], "skbio.tree.TreeNode.assign_supports": [[969, "skbio-tree-treenode-assign-supports"]], "skbio.tree.TreeNode.bifurcate": [[970, "skbio-tree-treenode-bifurcate"]], "skbio.tree.TreeNode.cache_attr": [[971, "skbio-tree-treenode-cache-attr"]], "skbio.tree.TreeNode.compare_rfd": [[972, "skbio-tree-treenode-compare-rfd"]], "skbio.tree.TreeNode.compare_subsets": [[973, "skbio-tree-treenode-compare-subsets"]], "skbio.tree.TreeNode.compare_tip_distances": [[974, "skbio-tree-treenode-compare-tip-distances"]], "skbio.tree.TreeNode.copy": [[975, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.count": [[976, "skbio-tree-treenode-count"]], "skbio.tree.TreeNode.create_caches": [[977, "skbio-tree-treenode-create-caches"]], "skbio.tree.TreeNode.deepcopy": [[978, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.descending_branch_length": [[979, "skbio-tree-treenode-descending-branch-length"]], "skbio.tree.TreeNode.distance": [[980, "skbio-tree-treenode-distance"]], "skbio.tree.TreeNode.extend": [[981, "skbio-tree-treenode-extend"]], "skbio.tree.TreeNode.find": [[982, "skbio-tree-treenode-find"]], "skbio.tree.TreeNode.find_all": [[983, "skbio-tree-treenode-find-all"]], "skbio.tree.TreeNode.find_by_func": [[984, "skbio-tree-treenode-find-by-func"]], "skbio.tree.TreeNode.find_by_id": [[985, "skbio-tree-treenode-find-by-id"]], "skbio.tree.TreeNode.from_linkage_matrix": [[986, "skbio-tree-treenode-from-linkage-matrix"]], "skbio.tree.TreeNode.from_taxdump": [[987, "skbio-tree-treenode-from-taxdump"]], "skbio.tree.TreeNode.from_taxonomy": [[988, "skbio-tree-treenode-from-taxonomy"]], "skbio.tree.TreeNode.get_max_distance": [[989, "skbio-tree-treenode-get-max-distance"]], "skbio.tree.TreeNode.has_children": [[990, "skbio-tree-treenode-has-children"]], "skbio.tree.TreeNode.index_tree": [[991, "skbio-tree-treenode-index-tree"]], "skbio.tree.TreeNode.invalidate_caches": [[992, "skbio-tree-treenode-invalidate-caches"]], "skbio.tree.TreeNode.is_root": [[993, "skbio-tree-treenode-is-root"]], "skbio.tree.TreeNode.is_tip": [[994, "skbio-tree-treenode-is-tip"]], "skbio.tree.TreeNode.lca": [[995, "skbio-tree-treenode-lca"]], "skbio.tree.TreeNode.levelorder": [[996, "skbio-tree-treenode-levelorder"]], "skbio.tree.TreeNode.lowest_common_ancestor": [[997, "skbio-tree-treenode-lowest-common-ancestor"]], "skbio.tree.TreeNode.neighbors": [[998, "skbio-tree-treenode-neighbors"]], "skbio.tree.TreeNode.non_tips": [[999, "skbio-tree-treenode-non-tips"]], "skbio.tree.TreeNode.observed_node_counts": [[1000, "skbio-tree-treenode-observed-node-counts"]], "skbio.tree.TreeNode.pop": [[1001, "skbio-tree-treenode-pop"]], "skbio.tree.TreeNode.postorder": [[1002, "skbio-tree-treenode-postorder"]], "skbio.tree.TreeNode.pre_and_postorder": [[1003, "skbio-tree-treenode-pre-and-postorder"]], "skbio.tree.TreeNode.preorder": [[1004, "skbio-tree-treenode-preorder"]], "skbio.tree.TreeNode.prune": [[1005, "skbio-tree-treenode-prune"]], "skbio.tree.TreeNode.read": [[1006, "skbio-tree-treenode-read"]], "skbio.tree.TreeNode.remove": [[1007, "skbio-tree-treenode-remove"]], "skbio.tree.TreeNode.remove_deleted": [[1008, "skbio-tree-treenode-remove-deleted"]], "skbio.tree.TreeNode.root": [[1009, "skbio-tree-treenode-root"]], "skbio.tree.TreeNode.root_at": [[1010, "skbio-tree-treenode-root-at"]], "skbio.tree.TreeNode.root_at_midpoint": [[1011, "skbio-tree-treenode-root-at-midpoint"]], "skbio.tree.TreeNode.shear": [[1012, "skbio-tree-treenode-shear"]], "skbio.tree.TreeNode.shuffle": [[1013, "skbio-tree-treenode-shuffle"]], "skbio.tree.TreeNode.siblings": [[1014, "skbio-tree-treenode-siblings"]], "skbio.tree.TreeNode.subset": [[1015, "skbio-tree-treenode-subset"]], "skbio.tree.TreeNode.subsets": [[1016, "skbio-tree-treenode-subsets"]], "skbio.tree.TreeNode.subtree": [[1017, "skbio-tree-treenode-subtree"]], "skbio.tree.TreeNode.tip_tip_distances": [[1018, "skbio-tree-treenode-tip-tip-distances"]], "skbio.tree.TreeNode.tips": [[1019, "skbio-tree-treenode-tips"]], "skbio.tree.TreeNode.to_array": [[1020, "skbio-tree-treenode-to-array"]], "skbio.tree.TreeNode.to_taxonomy": [[1021, "skbio-tree-treenode-to-taxonomy"]], "skbio.tree.TreeNode.traverse": [[1022, "skbio-tree-treenode-traverse"]], "skbio.tree.TreeNode.unpack": [[1023, "skbio-tree-treenode-unpack"]], "skbio.tree.TreeNode.unpack_by_func": [[1024, "skbio-tree-treenode-unpack-by-func"]], "skbio.tree.TreeNode.unrooted_copy": [[1025, "skbio-tree-treenode-unrooted-copy"]], "skbio.tree.TreeNode.unrooted_deepcopy": [[1026, "skbio-tree-treenode-unrooted-deepcopy"]], "skbio.tree.TreeNode.write": [[1027, "skbio-tree-treenode-write"]], "skbio.tree.majority_rule": [[1028, "skbio-tree-majority-rule"]], "skbio.tree.nj": [[1029, "skbio-tree-nj"]], "skbio.util.EfficiencyWarning": [[1030, "skbio-util-efficiencywarning"]], "skbio.util.RepresentationWarning": [[1031, "skbio-util-representationwarning"]], "skbio.util.assert_data_frame_almost_equal": [[1032, "skbio-util-assert-data-frame-almost-equal"]], "skbio.util.assert_ordination_results_equal": [[1033, "skbio-util-assert-ordination-results-equal"]], "skbio.util.cardinal_to_ordinal": [[1034, "skbio-util-cardinal-to-ordinal"]], "skbio.util.classproperty": [[1035, "skbio-util-classproperty"]], "skbio.util.classproperty.__delete__": [[1036, "skbio-util-classproperty-delete"]], "skbio.util.classproperty.__eq__": [[1037, "skbio-util-classproperty-eq"]], "skbio.util.classproperty.__ge__": [[1038, "skbio-util-classproperty-ge"]], "skbio.util.classproperty.__get__": [[1039, "skbio-util-classproperty-get"]], "skbio.util.classproperty.__getstate__": [[1040, "skbio-util-classproperty-getstate"]], "skbio.util.classproperty.__gt__": [[1041, "skbio-util-classproperty-gt"]], "skbio.util.classproperty.__hash__": [[1042, "skbio-util-classproperty-hash"]], "skbio.util.classproperty.__le__": [[1043, "skbio-util-classproperty-le"]], "skbio.util.classproperty.__lt__": [[1044, "skbio-util-classproperty-lt"]], "skbio.util.classproperty.__ne__": [[1045, "skbio-util-classproperty-ne"]], "skbio.util.classproperty.__set__": [[1046, "skbio-util-classproperty-set"]], "skbio.util.classproperty.__set_name__": [[1047, "skbio-util-classproperty-set-name"]], "skbio.util.classproperty.__str__": [[1048, "skbio-util-classproperty-str"]], "skbio.util.classproperty.deleter": [[1049, "skbio-util-classproperty-deleter"]], "skbio.util.classproperty.getter": [[1050, "skbio-util-classproperty-getter"]], "skbio.util.classproperty.setter": [[1051, "skbio-util-classproperty-setter"]], "skbio.util.find_duplicates": [[1052, "skbio-util-find-duplicates"]], "skbio.util.get_data_path": [[1053, "skbio-util-get-data-path"]], "skbio.util.safe_md5": [[1054, "skbio-util-safe-md5"]], "skbio.workflow.Workflow": [[1055, "skbio-workflow-workflow"]], "skbio.workflow.Workflow.__call__": [[1056, "skbio-workflow-workflow-call"]], "skbio.workflow.Workflow.__eq__": [[1057, "skbio-workflow-workflow-eq"]], "skbio.workflow.Workflow.__ge__": [[1058, "skbio-workflow-workflow-ge"]], "skbio.workflow.Workflow.__getstate__": [[1059, "skbio-workflow-workflow-getstate"]], "skbio.workflow.Workflow.__gt__": [[1060, "skbio-workflow-workflow-gt"]], "skbio.workflow.Workflow.__hash__": [[1061, "skbio-workflow-workflow-hash"]], "skbio.workflow.Workflow.__le__": [[1062, "skbio-workflow-workflow-le"]], "skbio.workflow.Workflow.__lt__": [[1063, "skbio-workflow-workflow-lt"]], "skbio.workflow.Workflow.__ne__": [[1064, "skbio-workflow-workflow-ne"]], "skbio.workflow.Workflow.__str__": [[1065, "skbio-workflow-workflow-str"]], "skbio.workflow.Workflow.initialize_state": [[1066, "skbio-workflow-workflow-initialize-state"]], "skbio.workflow.method": [[1067, "skbio-workflow-method"]], "skbio.workflow.method.__call__": [[1068, "skbio-workflow-method-call"]], "skbio.workflow.method.__eq__": [[1069, "skbio-workflow-method-eq"]], "skbio.workflow.method.__ge__": [[1070, "skbio-workflow-method-ge"]], "skbio.workflow.method.__getstate__": [[1071, "skbio-workflow-method-getstate"]], "skbio.workflow.method.__gt__": [[1072, "skbio-workflow-method-gt"]], "skbio.workflow.method.__hash__": [[1073, "skbio-workflow-method-hash"]], "skbio.workflow.method.__le__": [[1074, "skbio-workflow-method-le"]], "skbio.workflow.method.__lt__": [[1075, "skbio-workflow-method-lt"]], "skbio.workflow.method.__ne__": [[1076, "skbio-workflow-method-ne"]], "skbio.workflow.method.__str__": [[1077, "skbio-workflow-method-str"]], "skbio.workflow.requires": [[1078, "skbio-workflow-requires"]], "skbio.workflow.requires.__call__": [[1079, "skbio-workflow-requires-call"]], "skbio.workflow.requires.__eq__": [[1080, "skbio-workflow-requires-eq"]], "skbio.workflow.requires.__ge__": [[1081, "skbio-workflow-requires-ge"]], "skbio.workflow.requires.__getstate__": [[1082, "skbio-workflow-requires-getstate"]], "skbio.workflow.requires.__gt__": [[1083, "skbio-workflow-requires-gt"]], "skbio.workflow.requires.__hash__": [[1084, "skbio-workflow-requires-hash"]], "skbio.workflow.requires.__le__": [[1085, "skbio-workflow-requires-le"]], "skbio.workflow.requires.__lt__": [[1086, "skbio-workflow-requires-lt"]], "skbio.workflow.requires.__ne__": [[1087, "skbio-workflow-requires-ne"]], "skbio.workflow.requires.__str__": [[1088, "skbio-workflow-requires-str"]]}, "docnames": ["alignment", "diversity", "embedding", "generated/skbio.alignment.AlignPath", "generated/skbio.alignment.AlignPath.__eq__", "generated/skbio.alignment.AlignPath.__ge__", "generated/skbio.alignment.AlignPath.__getstate__", "generated/skbio.alignment.AlignPath.__gt__", "generated/skbio.alignment.AlignPath.__hash__", "generated/skbio.alignment.AlignPath.__le__", "generated/skbio.alignment.AlignPath.__lt__", "generated/skbio.alignment.AlignPath.__ne__", "generated/skbio.alignment.AlignPath.__str__", "generated/skbio.alignment.AlignPath.from_bits", "generated/skbio.alignment.AlignPath.from_coordinates", "generated/skbio.alignment.AlignPath.from_indices", "generated/skbio.alignment.AlignPath.from_tabular", "generated/skbio.alignment.AlignPath.to_bits", "generated/skbio.alignment.AlignPath.to_coordinates", "generated/skbio.alignment.AlignPath.to_indices", "generated/skbio.alignment.AlignmentStructure", "generated/skbio.alignment.AlignmentStructure.__eq__", "generated/skbio.alignment.AlignmentStructure.__ge__", "generated/skbio.alignment.AlignmentStructure.__getitem__", "generated/skbio.alignment.AlignmentStructure.__getstate__", "generated/skbio.alignment.AlignmentStructure.__gt__", "generated/skbio.alignment.AlignmentStructure.__hash__", "generated/skbio.alignment.AlignmentStructure.__le__", "generated/skbio.alignment.AlignmentStructure.__lt__", "generated/skbio.alignment.AlignmentStructure.__ne__", "generated/skbio.alignment.AlignmentStructure.__setstate__", "generated/skbio.alignment.AlignmentStructure.__str__", "generated/skbio.alignment.AlignmentStructure.is_zero_based", "generated/skbio.alignment.AlignmentStructure.set_zero_based", "generated/skbio.alignment.PairAlignPath", "generated/skbio.alignment.PairAlignPath.__eq__", "generated/skbio.alignment.PairAlignPath.__ge__", "generated/skbio.alignment.PairAlignPath.__getstate__", "generated/skbio.alignment.PairAlignPath.__gt__", "generated/skbio.alignment.PairAlignPath.__hash__", "generated/skbio.alignment.PairAlignPath.__le__", "generated/skbio.alignment.PairAlignPath.__lt__", "generated/skbio.alignment.PairAlignPath.__ne__", "generated/skbio.alignment.PairAlignPath.__str__", "generated/skbio.alignment.PairAlignPath.from_bits", "generated/skbio.alignment.PairAlignPath.from_cigar", "generated/skbio.alignment.PairAlignPath.from_coordinates", "generated/skbio.alignment.PairAlignPath.from_indices", "generated/skbio.alignment.PairAlignPath.from_tabular", "generated/skbio.alignment.PairAlignPath.to_bits", "generated/skbio.alignment.PairAlignPath.to_cigar", "generated/skbio.alignment.PairAlignPath.to_coordinates", "generated/skbio.alignment.PairAlignPath.to_indices", "generated/skbio.alignment.StripedSmithWaterman", "generated/skbio.alignment.StripedSmithWaterman.__call__", "generated/skbio.alignment.StripedSmithWaterman.__eq__", "generated/skbio.alignment.StripedSmithWaterman.__ge__", "generated/skbio.alignment.StripedSmithWaterman.__getstate__", "generated/skbio.alignment.StripedSmithWaterman.__gt__", "generated/skbio.alignment.StripedSmithWaterman.__hash__", "generated/skbio.alignment.StripedSmithWaterman.__le__", "generated/skbio.alignment.StripedSmithWaterman.__lt__", "generated/skbio.alignment.StripedSmithWaterman.__ne__", "generated/skbio.alignment.StripedSmithWaterman.__setstate__", "generated/skbio.alignment.StripedSmithWaterman.__str__", "generated/skbio.alignment.TabularMSA", "generated/skbio.alignment.TabularMSA.__bool__", "generated/skbio.alignment.TabularMSA.__contains__", "generated/skbio.alignment.TabularMSA.__copy__", "generated/skbio.alignment.TabularMSA.__deepcopy__", "generated/skbio.alignment.TabularMSA.__eq__", "generated/skbio.alignment.TabularMSA.__ge__", "generated/skbio.alignment.TabularMSA.__getitem__", "generated/skbio.alignment.TabularMSA.__getstate__", "generated/skbio.alignment.TabularMSA.__gt__", "generated/skbio.alignment.TabularMSA.__iter__", "generated/skbio.alignment.TabularMSA.__le__", "generated/skbio.alignment.TabularMSA.__len__", "generated/skbio.alignment.TabularMSA.__lt__", "generated/skbio.alignment.TabularMSA.__ne__", "generated/skbio.alignment.TabularMSA.__reversed__", "generated/skbio.alignment.TabularMSA.__str__", "generated/skbio.alignment.TabularMSA.append", "generated/skbio.alignment.TabularMSA.consensus", "generated/skbio.alignment.TabularMSA.conservation", "generated/skbio.alignment.TabularMSA.extend", "generated/skbio.alignment.TabularMSA.from_dict", "generated/skbio.alignment.TabularMSA.from_path_seqs", "generated/skbio.alignment.TabularMSA.gap_frequencies", "generated/skbio.alignment.TabularMSA.has_metadata", "generated/skbio.alignment.TabularMSA.has_positional_metadata", "generated/skbio.alignment.TabularMSA.iter_positions", "generated/skbio.alignment.TabularMSA.join", "generated/skbio.alignment.TabularMSA.read", "generated/skbio.alignment.TabularMSA.reassign_index", "generated/skbio.alignment.TabularMSA.sort", "generated/skbio.alignment.TabularMSA.to_dict", "generated/skbio.alignment.TabularMSA.write", "generated/skbio.alignment.global_pairwise_align", "generated/skbio.alignment.global_pairwise_align_nucleotide", "generated/skbio.alignment.global_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align", "generated/skbio.alignment.local_pairwise_align_nucleotide", "generated/skbio.alignment.local_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align_ssw", "generated/skbio.alignment.make_identity_substitution_matrix", "generated/skbio.diversity.alpha", "generated/skbio.diversity.alpha.ace", "generated/skbio.diversity.alpha.berger_parker_d", "generated/skbio.diversity.alpha.brillouin_d", "generated/skbio.diversity.alpha.chao1", "generated/skbio.diversity.alpha.chao1_ci", "generated/skbio.diversity.alpha.dominance", "generated/skbio.diversity.alpha.doubles", "generated/skbio.diversity.alpha.enspie", "generated/skbio.diversity.alpha.esty_ci", "generated/skbio.diversity.alpha.faith_pd", "generated/skbio.diversity.alpha.fisher_alpha", "generated/skbio.diversity.alpha.gini_index", "generated/skbio.diversity.alpha.goods_coverage", "generated/skbio.diversity.alpha.heip_e", "generated/skbio.diversity.alpha.kempton_taylor_q", "generated/skbio.diversity.alpha.lladser_ci", "generated/skbio.diversity.alpha.lladser_pe", "generated/skbio.diversity.alpha.margalef", "generated/skbio.diversity.alpha.mcintosh_d", "generated/skbio.diversity.alpha.mcintosh_e", "generated/skbio.diversity.alpha.menhinick", "generated/skbio.diversity.alpha.michaelis_menten_fit", "generated/skbio.diversity.alpha.observed_features", "generated/skbio.diversity.alpha.observed_otus", "generated/skbio.diversity.alpha.osd", "generated/skbio.diversity.alpha.phydiv", "generated/skbio.diversity.alpha.pielou_e", "generated/skbio.diversity.alpha.robbins", "generated/skbio.diversity.alpha.shannon", "generated/skbio.diversity.alpha.simpson", "generated/skbio.diversity.alpha.simpson_e", "generated/skbio.diversity.alpha.singles", "generated/skbio.diversity.alpha.sobs", "generated/skbio.diversity.alpha.strong", "generated/skbio.diversity.alpha_diversity", "generated/skbio.diversity.beta", "generated/skbio.diversity.beta.unweighted_unifrac", "generated/skbio.diversity.beta.weighted_unifrac", "generated/skbio.diversity.beta_diversity", "generated/skbio.diversity.block_beta_diversity", "generated/skbio.diversity.get_alpha_diversity_metrics", "generated/skbio.diversity.get_beta_diversity_metrics", "generated/skbio.diversity.partial_beta_diversity", "generated/skbio.embedding.Embedding", "generated/skbio.embedding.Embedding.__eq__", "generated/skbio.embedding.Embedding.__ge__", "generated/skbio.embedding.Embedding.__getstate__", "generated/skbio.embedding.Embedding.__gt__", "generated/skbio.embedding.Embedding.__hash__", "generated/skbio.embedding.Embedding.__le__", "generated/skbio.embedding.Embedding.__lt__", "generated/skbio.embedding.Embedding.__ne__", "generated/skbio.embedding.Embedding.__str__", "generated/skbio.embedding.Embedding.bytes", "generated/skbio.embedding.ProteinEmbedding", "generated/skbio.embedding.ProteinEmbedding.__eq__", "generated/skbio.embedding.ProteinEmbedding.__ge__", "generated/skbio.embedding.ProteinEmbedding.__getstate__", "generated/skbio.embedding.ProteinEmbedding.__gt__", "generated/skbio.embedding.ProteinEmbedding.__hash__", "generated/skbio.embedding.ProteinEmbedding.__le__", "generated/skbio.embedding.ProteinEmbedding.__lt__", "generated/skbio.embedding.ProteinEmbedding.__ne__", "generated/skbio.embedding.ProteinEmbedding.__str__", "generated/skbio.embedding.ProteinEmbedding.bytes", "generated/skbio.embedding.ProteinEmbedding.read", "generated/skbio.embedding.ProteinEmbedding.write", "generated/skbio.embedding.ProteinVector", "generated/skbio.embedding.ProteinVector.__eq__", "generated/skbio.embedding.ProteinVector.__ge__", "generated/skbio.embedding.ProteinVector.__getstate__", "generated/skbio.embedding.ProteinVector.__gt__", "generated/skbio.embedding.ProteinVector.__hash__", "generated/skbio.embedding.ProteinVector.__le__", "generated/skbio.embedding.ProteinVector.__lt__", "generated/skbio.embedding.ProteinVector.__ne__", "generated/skbio.embedding.ProteinVector.__str__", "generated/skbio.embedding.ProteinVector.bytes", "generated/skbio.embedding.ProteinVector.read", "generated/skbio.embedding.ProteinVector.write", "generated/skbio.embedding.SequenceEmbedding", "generated/skbio.embedding.SequenceEmbedding.__eq__", "generated/skbio.embedding.SequenceEmbedding.__ge__", "generated/skbio.embedding.SequenceEmbedding.__getstate__", "generated/skbio.embedding.SequenceEmbedding.__gt__", "generated/skbio.embedding.SequenceEmbedding.__hash__", "generated/skbio.embedding.SequenceEmbedding.__le__", "generated/skbio.embedding.SequenceEmbedding.__lt__", "generated/skbio.embedding.SequenceEmbedding.__ne__", "generated/skbio.embedding.SequenceEmbedding.__str__", "generated/skbio.embedding.SequenceEmbedding.bytes", "generated/skbio.embedding.SequenceVector", "generated/skbio.embedding.SequenceVector.__eq__", "generated/skbio.embedding.SequenceVector.__ge__", "generated/skbio.embedding.SequenceVector.__getstate__", "generated/skbio.embedding.SequenceVector.__gt__", "generated/skbio.embedding.SequenceVector.__hash__", "generated/skbio.embedding.SequenceVector.__le__", "generated/skbio.embedding.SequenceVector.__lt__", "generated/skbio.embedding.SequenceVector.__ne__", "generated/skbio.embedding.SequenceVector.__str__", "generated/skbio.embedding.SequenceVector.bytes", "generated/skbio.embedding.embed_vec_to_dataframe", "generated/skbio.embedding.embed_vec_to_distances", "generated/skbio.embedding.embed_vec_to_numpy", "generated/skbio.embedding.embed_vec_to_ordination", "generated/skbio.io.format.binary_dm", "generated/skbio.io.format.biom", "generated/skbio.io.format.blast6", "generated/skbio.io.format.blast7", "generated/skbio.io.format.clustal", "generated/skbio.io.format.embed", "generated/skbio.io.format.embl", "generated/skbio.io.format.fasta", "generated/skbio.io.format.fastq", "generated/skbio.io.format.genbank", "generated/skbio.io.format.gff3", "generated/skbio.io.format.lsmat", "generated/skbio.io.format.newick", "generated/skbio.io.format.ordination", "generated/skbio.io.format.phylip", "generated/skbio.io.format.qseq", "generated/skbio.io.format.sample_metadata", "generated/skbio.io.format.stockholm", "generated/skbio.io.format.taxdump", "generated/skbio.io.registry", "generated/skbio.io.registry.Format", "generated/skbio.io.registry.Format.__eq__", "generated/skbio.io.registry.Format.__ge__", "generated/skbio.io.registry.Format.__getstate__", "generated/skbio.io.registry.Format.__gt__", "generated/skbio.io.registry.Format.__hash__", "generated/skbio.io.registry.Format.__le__", "generated/skbio.io.registry.Format.__lt__", "generated/skbio.io.registry.Format.__ne__", "generated/skbio.io.registry.Format.__str__", "generated/skbio.io.registry.Format.reader", "generated/skbio.io.registry.Format.sniffer", "generated/skbio.io.registry.Format.writer", "generated/skbio.io.registry.IORegistry", "generated/skbio.io.registry.IORegistry.__eq__", "generated/skbio.io.registry.IORegistry.__ge__", "generated/skbio.io.registry.IORegistry.__getstate__", "generated/skbio.io.registry.IORegistry.__gt__", "generated/skbio.io.registry.IORegistry.__hash__", "generated/skbio.io.registry.IORegistry.__le__", "generated/skbio.io.registry.IORegistry.__lt__", "generated/skbio.io.registry.IORegistry.__ne__", "generated/skbio.io.registry.IORegistry.__str__", "generated/skbio.io.registry.IORegistry.add_format", "generated/skbio.io.registry.IORegistry.create_format", "generated/skbio.io.registry.IORegistry.get_reader", "generated/skbio.io.registry.IORegistry.get_sniffer", "generated/skbio.io.registry.IORegistry.get_writer", "generated/skbio.io.registry.IORegistry.list_read_formats", "generated/skbio.io.registry.IORegistry.list_write_formats", "generated/skbio.io.registry.IORegistry.monkey_patch", "generated/skbio.io.registry.IORegistry.read", "generated/skbio.io.registry.IORegistry.sniff", "generated/skbio.io.registry.IORegistry.write", "generated/skbio.io.registry.create_format", "generated/skbio.io.registry.read", "generated/skbio.io.registry.sniff", "generated/skbio.io.registry.write", "generated/skbio.io.util", "generated/skbio.io.util.open", "generated/skbio.io.util.open_file", "generated/skbio.io.util.open_files", "generated/skbio.metadata.CategoricalMetadataColumn", "generated/skbio.metadata.CategoricalMetadataColumn.__eq__", "generated/skbio.metadata.CategoricalMetadataColumn.__ge__", "generated/skbio.metadata.CategoricalMetadataColumn.__getstate__", "generated/skbio.metadata.CategoricalMetadataColumn.__gt__", "generated/skbio.metadata.CategoricalMetadataColumn.__le__", "generated/skbio.metadata.CategoricalMetadataColumn.__lt__", "generated/skbio.metadata.CategoricalMetadataColumn.__ne__", "generated/skbio.metadata.CategoricalMetadataColumn.__str__", "generated/skbio.metadata.CategoricalMetadataColumn.drop_missing_values", "generated/skbio.metadata.CategoricalMetadataColumn.filter_ids", "generated/skbio.metadata.CategoricalMetadataColumn.get_ids", "generated/skbio.metadata.CategoricalMetadataColumn.get_missing", "generated/skbio.metadata.CategoricalMetadataColumn.get_value", "generated/skbio.metadata.CategoricalMetadataColumn.has_missing_values", "generated/skbio.metadata.CategoricalMetadataColumn.save", "generated/skbio.metadata.CategoricalMetadataColumn.to_dataframe", "generated/skbio.metadata.CategoricalMetadataColumn.to_series", "generated/skbio.metadata.Interval", "generated/skbio.metadata.Interval.__eq__", "generated/skbio.metadata.Interval.__ge__", "generated/skbio.metadata.Interval.__getstate__", "generated/skbio.metadata.Interval.__gt__", "generated/skbio.metadata.Interval.__le__", "generated/skbio.metadata.Interval.__lt__", "generated/skbio.metadata.Interval.__ne__", "generated/skbio.metadata.Interval.__str__", "generated/skbio.metadata.Interval.drop", "generated/skbio.metadata.IntervalMetadata", "generated/skbio.metadata.IntervalMetadata.__copy__", "generated/skbio.metadata.IntervalMetadata.__deepcopy__", "generated/skbio.metadata.IntervalMetadata.__eq__", "generated/skbio.metadata.IntervalMetadata.__ge__", "generated/skbio.metadata.IntervalMetadata.__getstate__", "generated/skbio.metadata.IntervalMetadata.__gt__", "generated/skbio.metadata.IntervalMetadata.__le__", "generated/skbio.metadata.IntervalMetadata.__lt__", "generated/skbio.metadata.IntervalMetadata.__ne__", "generated/skbio.metadata.IntervalMetadata.__str__", "generated/skbio.metadata.IntervalMetadata.add", "generated/skbio.metadata.IntervalMetadata.concat", "generated/skbio.metadata.IntervalMetadata.drop", "generated/skbio.metadata.IntervalMetadata.merge", "generated/skbio.metadata.IntervalMetadata.query", "generated/skbio.metadata.IntervalMetadata.read", "generated/skbio.metadata.IntervalMetadata.sort", "generated/skbio.metadata.IntervalMetadata.write", "generated/skbio.metadata.MetadataColumn", "generated/skbio.metadata.MetadataColumn.__eq__", "generated/skbio.metadata.MetadataColumn.__ge__", "generated/skbio.metadata.MetadataColumn.__getstate__", "generated/skbio.metadata.MetadataColumn.__gt__", "generated/skbio.metadata.MetadataColumn.__le__", "generated/skbio.metadata.MetadataColumn.__lt__", "generated/skbio.metadata.MetadataColumn.__ne__", "generated/skbio.metadata.MetadataColumn.__str__", "generated/skbio.metadata.MetadataColumn.drop_missing_values", "generated/skbio.metadata.MetadataColumn.filter_ids", "generated/skbio.metadata.MetadataColumn.get_ids", "generated/skbio.metadata.MetadataColumn.get_missing", "generated/skbio.metadata.MetadataColumn.get_value", "generated/skbio.metadata.MetadataColumn.has_missing_values", "generated/skbio.metadata.MetadataColumn.save", "generated/skbio.metadata.MetadataColumn.to_dataframe", "generated/skbio.metadata.MetadataColumn.to_series", "generated/skbio.metadata.NumericMetadataColumn", "generated/skbio.metadata.NumericMetadataColumn.__eq__", "generated/skbio.metadata.NumericMetadataColumn.__ge__", "generated/skbio.metadata.NumericMetadataColumn.__getstate__", "generated/skbio.metadata.NumericMetadataColumn.__gt__", "generated/skbio.metadata.NumericMetadataColumn.__le__", "generated/skbio.metadata.NumericMetadataColumn.__lt__", "generated/skbio.metadata.NumericMetadataColumn.__ne__", "generated/skbio.metadata.NumericMetadataColumn.__str__", "generated/skbio.metadata.NumericMetadataColumn.drop_missing_values", "generated/skbio.metadata.NumericMetadataColumn.filter_ids", "generated/skbio.metadata.NumericMetadataColumn.get_ids", "generated/skbio.metadata.NumericMetadataColumn.get_missing", "generated/skbio.metadata.NumericMetadataColumn.get_value", "generated/skbio.metadata.NumericMetadataColumn.has_missing_values", "generated/skbio.metadata.NumericMetadataColumn.save", "generated/skbio.metadata.NumericMetadataColumn.to_dataframe", "generated/skbio.metadata.NumericMetadataColumn.to_series", "generated/skbio.metadata.SampleMetadata", "generated/skbio.metadata.SampleMetadata.__eq__", "generated/skbio.metadata.SampleMetadata.__ge__", "generated/skbio.metadata.SampleMetadata.__getstate__", "generated/skbio.metadata.SampleMetadata.__gt__", "generated/skbio.metadata.SampleMetadata.__le__", "generated/skbio.metadata.SampleMetadata.__lt__", "generated/skbio.metadata.SampleMetadata.__ne__", "generated/skbio.metadata.SampleMetadata.__str__", "generated/skbio.metadata.SampleMetadata.filter_columns", "generated/skbio.metadata.SampleMetadata.filter_ids", "generated/skbio.metadata.SampleMetadata.get_column", "generated/skbio.metadata.SampleMetadata.get_ids", "generated/skbio.metadata.SampleMetadata.load", "generated/skbio.metadata.SampleMetadata.merge", "generated/skbio.metadata.SampleMetadata.read", "generated/skbio.metadata.SampleMetadata.save", "generated/skbio.metadata.SampleMetadata.to_dataframe", "generated/skbio.metadata.SampleMetadata.write", "generated/skbio.sequence.DNA", "generated/skbio.sequence.DNA.__bool__", "generated/skbio.sequence.DNA.__contains__", "generated/skbio.sequence.DNA.__copy__", "generated/skbio.sequence.DNA.__deepcopy__", "generated/skbio.sequence.DNA.__eq__", "generated/skbio.sequence.DNA.__ge__", "generated/skbio.sequence.DNA.__getitem__", "generated/skbio.sequence.DNA.__getstate__", "generated/skbio.sequence.DNA.__gt__", "generated/skbio.sequence.DNA.__iter__", "generated/skbio.sequence.DNA.__le__", "generated/skbio.sequence.DNA.__len__", "generated/skbio.sequence.DNA.__lt__", "generated/skbio.sequence.DNA.__ne__", "generated/skbio.sequence.DNA.__reversed__", "generated/skbio.sequence.DNA.__str__", "generated/skbio.sequence.DNA.complement", "generated/skbio.sequence.DNA.concat", "generated/skbio.sequence.DNA.count", "generated/skbio.sequence.DNA.definites", "generated/skbio.sequence.DNA.degap", "generated/skbio.sequence.DNA.degenerates", "generated/skbio.sequence.DNA.distance", "generated/skbio.sequence.DNA.expand_degenerates", "generated/skbio.sequence.DNA.find_motifs", "generated/skbio.sequence.DNA.find_with_regex", "generated/skbio.sequence.DNA.frequencies", "generated/skbio.sequence.DNA.gaps", "generated/skbio.sequence.DNA.gc_content", "generated/skbio.sequence.DNA.gc_frequency", "generated/skbio.sequence.DNA.has_definites", "generated/skbio.sequence.DNA.has_degenerates", "generated/skbio.sequence.DNA.has_gaps", "generated/skbio.sequence.DNA.has_interval_metadata", "generated/skbio.sequence.DNA.has_metadata", "generated/skbio.sequence.DNA.has_nondegenerates", "generated/skbio.sequence.DNA.has_positional_metadata", "generated/skbio.sequence.DNA.index", "generated/skbio.sequence.DNA.is_reverse_complement", "generated/skbio.sequence.DNA.iter_contiguous", "generated/skbio.sequence.DNA.iter_kmers", "generated/skbio.sequence.DNA.kmer_frequencies", "generated/skbio.sequence.DNA.lowercase", "generated/skbio.sequence.DNA.match_frequency", "generated/skbio.sequence.DNA.matches", "generated/skbio.sequence.DNA.mismatch_frequency", "generated/skbio.sequence.DNA.mismatches", "generated/skbio.sequence.DNA.nondegenerates", "generated/skbio.sequence.DNA.read", "generated/skbio.sequence.DNA.replace", "generated/skbio.sequence.DNA.reverse_complement", "generated/skbio.sequence.DNA.to_definites", "generated/skbio.sequence.DNA.to_indices", "generated/skbio.sequence.DNA.to_regex", "generated/skbio.sequence.DNA.transcribe", "generated/skbio.sequence.DNA.translate", "generated/skbio.sequence.DNA.translate_six_frames", "generated/skbio.sequence.DNA.write", "generated/skbio.sequence.GeneticCode", "generated/skbio.sequence.GeneticCode.__eq__", "generated/skbio.sequence.GeneticCode.__ge__", "generated/skbio.sequence.GeneticCode.__getstate__", "generated/skbio.sequence.GeneticCode.__gt__", "generated/skbio.sequence.GeneticCode.__le__", "generated/skbio.sequence.GeneticCode.__lt__", "generated/skbio.sequence.GeneticCode.__ne__", "generated/skbio.sequence.GeneticCode.__str__", "generated/skbio.sequence.GeneticCode.from_ncbi", "generated/skbio.sequence.GeneticCode.translate", "generated/skbio.sequence.GeneticCode.translate_six_frames", "generated/skbio.sequence.GrammaredSequence", "generated/skbio.sequence.GrammaredSequence.__bool__", "generated/skbio.sequence.GrammaredSequence.__contains__", "generated/skbio.sequence.GrammaredSequence.__copy__", "generated/skbio.sequence.GrammaredSequence.__deepcopy__", "generated/skbio.sequence.GrammaredSequence.__eq__", "generated/skbio.sequence.GrammaredSequence.__ge__", "generated/skbio.sequence.GrammaredSequence.__getitem__", "generated/skbio.sequence.GrammaredSequence.__getstate__", "generated/skbio.sequence.GrammaredSequence.__gt__", "generated/skbio.sequence.GrammaredSequence.__iter__", "generated/skbio.sequence.GrammaredSequence.__le__", "generated/skbio.sequence.GrammaredSequence.__len__", "generated/skbio.sequence.GrammaredSequence.__lt__", "generated/skbio.sequence.GrammaredSequence.__ne__", "generated/skbio.sequence.GrammaredSequence.__reversed__", "generated/skbio.sequence.GrammaredSequence.__str__", "generated/skbio.sequence.GrammaredSequence.concat", "generated/skbio.sequence.GrammaredSequence.count", "generated/skbio.sequence.GrammaredSequence.definites", "generated/skbio.sequence.GrammaredSequence.degap", "generated/skbio.sequence.GrammaredSequence.degenerates", "generated/skbio.sequence.GrammaredSequence.distance", "generated/skbio.sequence.GrammaredSequence.expand_degenerates", "generated/skbio.sequence.GrammaredSequence.find_motifs", "generated/skbio.sequence.GrammaredSequence.find_with_regex", "generated/skbio.sequence.GrammaredSequence.frequencies", "generated/skbio.sequence.GrammaredSequence.gaps", "generated/skbio.sequence.GrammaredSequence.has_definites", "generated/skbio.sequence.GrammaredSequence.has_degenerates", "generated/skbio.sequence.GrammaredSequence.has_gaps", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata", "generated/skbio.sequence.GrammaredSequence.has_metadata", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata", "generated/skbio.sequence.GrammaredSequence.index", "generated/skbio.sequence.GrammaredSequence.iter_contiguous", "generated/skbio.sequence.GrammaredSequence.iter_kmers", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies", "generated/skbio.sequence.GrammaredSequence.lowercase", "generated/skbio.sequence.GrammaredSequence.match_frequency", "generated/skbio.sequence.GrammaredSequence.matches", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency", "generated/skbio.sequence.GrammaredSequence.mismatches", "generated/skbio.sequence.GrammaredSequence.nondegenerates", "generated/skbio.sequence.GrammaredSequence.read", "generated/skbio.sequence.GrammaredSequence.replace", "generated/skbio.sequence.GrammaredSequence.to_definites", "generated/skbio.sequence.GrammaredSequence.to_indices", "generated/skbio.sequence.GrammaredSequence.to_regex", "generated/skbio.sequence.GrammaredSequence.write", "generated/skbio.sequence.Protein", "generated/skbio.sequence.Protein.__bool__", "generated/skbio.sequence.Protein.__contains__", "generated/skbio.sequence.Protein.__copy__", "generated/skbio.sequence.Protein.__deepcopy__", "generated/skbio.sequence.Protein.__eq__", "generated/skbio.sequence.Protein.__ge__", "generated/skbio.sequence.Protein.__getitem__", "generated/skbio.sequence.Protein.__getstate__", "generated/skbio.sequence.Protein.__gt__", "generated/skbio.sequence.Protein.__iter__", "generated/skbio.sequence.Protein.__le__", "generated/skbio.sequence.Protein.__len__", "generated/skbio.sequence.Protein.__lt__", "generated/skbio.sequence.Protein.__ne__", "generated/skbio.sequence.Protein.__reversed__", "generated/skbio.sequence.Protein.__str__", "generated/skbio.sequence.Protein.concat", "generated/skbio.sequence.Protein.count", "generated/skbio.sequence.Protein.definites", "generated/skbio.sequence.Protein.degap", "generated/skbio.sequence.Protein.degenerates", "generated/skbio.sequence.Protein.distance", "generated/skbio.sequence.Protein.expand_degenerates", "generated/skbio.sequence.Protein.find_motifs", "generated/skbio.sequence.Protein.find_with_regex", "generated/skbio.sequence.Protein.frequencies", "generated/skbio.sequence.Protein.gaps", "generated/skbio.sequence.Protein.has_definites", "generated/skbio.sequence.Protein.has_degenerates", "generated/skbio.sequence.Protein.has_gaps", "generated/skbio.sequence.Protein.has_interval_metadata", "generated/skbio.sequence.Protein.has_metadata", "generated/skbio.sequence.Protein.has_nondegenerates", "generated/skbio.sequence.Protein.has_positional_metadata", "generated/skbio.sequence.Protein.has_stops", "generated/skbio.sequence.Protein.index", "generated/skbio.sequence.Protein.iter_contiguous", "generated/skbio.sequence.Protein.iter_kmers", "generated/skbio.sequence.Protein.kmer_frequencies", "generated/skbio.sequence.Protein.lowercase", "generated/skbio.sequence.Protein.match_frequency", "generated/skbio.sequence.Protein.matches", "generated/skbio.sequence.Protein.mismatch_frequency", "generated/skbio.sequence.Protein.mismatches", "generated/skbio.sequence.Protein.nondegenerates", "generated/skbio.sequence.Protein.read", "generated/skbio.sequence.Protein.replace", "generated/skbio.sequence.Protein.stops", "generated/skbio.sequence.Protein.to_definites", "generated/skbio.sequence.Protein.to_indices", "generated/skbio.sequence.Protein.to_regex", "generated/skbio.sequence.Protein.write", "generated/skbio.sequence.RNA", "generated/skbio.sequence.RNA.__bool__", "generated/skbio.sequence.RNA.__contains__", "generated/skbio.sequence.RNA.__copy__", "generated/skbio.sequence.RNA.__deepcopy__", "generated/skbio.sequence.RNA.__eq__", "generated/skbio.sequence.RNA.__ge__", "generated/skbio.sequence.RNA.__getitem__", "generated/skbio.sequence.RNA.__getstate__", "generated/skbio.sequence.RNA.__gt__", "generated/skbio.sequence.RNA.__iter__", "generated/skbio.sequence.RNA.__le__", "generated/skbio.sequence.RNA.__len__", "generated/skbio.sequence.RNA.__lt__", "generated/skbio.sequence.RNA.__ne__", "generated/skbio.sequence.RNA.__reversed__", "generated/skbio.sequence.RNA.__str__", "generated/skbio.sequence.RNA.complement", "generated/skbio.sequence.RNA.concat", "generated/skbio.sequence.RNA.count", "generated/skbio.sequence.RNA.definites", "generated/skbio.sequence.RNA.degap", "generated/skbio.sequence.RNA.degenerates", "generated/skbio.sequence.RNA.distance", "generated/skbio.sequence.RNA.expand_degenerates", "generated/skbio.sequence.RNA.find_motifs", "generated/skbio.sequence.RNA.find_with_regex", "generated/skbio.sequence.RNA.frequencies", "generated/skbio.sequence.RNA.gaps", "generated/skbio.sequence.RNA.gc_content", "generated/skbio.sequence.RNA.gc_frequency", "generated/skbio.sequence.RNA.has_definites", "generated/skbio.sequence.RNA.has_degenerates", "generated/skbio.sequence.RNA.has_gaps", "generated/skbio.sequence.RNA.has_interval_metadata", "generated/skbio.sequence.RNA.has_metadata", "generated/skbio.sequence.RNA.has_nondegenerates", "generated/skbio.sequence.RNA.has_positional_metadata", "generated/skbio.sequence.RNA.index", "generated/skbio.sequence.RNA.is_reverse_complement", "generated/skbio.sequence.RNA.iter_contiguous", "generated/skbio.sequence.RNA.iter_kmers", "generated/skbio.sequence.RNA.kmer_frequencies", "generated/skbio.sequence.RNA.lowercase", "generated/skbio.sequence.RNA.match_frequency", "generated/skbio.sequence.RNA.matches", "generated/skbio.sequence.RNA.mismatch_frequency", "generated/skbio.sequence.RNA.mismatches", "generated/skbio.sequence.RNA.nondegenerates", "generated/skbio.sequence.RNA.read", "generated/skbio.sequence.RNA.replace", "generated/skbio.sequence.RNA.reverse_complement", "generated/skbio.sequence.RNA.reverse_transcribe", "generated/skbio.sequence.RNA.to_definites", "generated/skbio.sequence.RNA.to_indices", "generated/skbio.sequence.RNA.to_regex", "generated/skbio.sequence.RNA.translate", "generated/skbio.sequence.RNA.translate_six_frames", "generated/skbio.sequence.RNA.write", "generated/skbio.sequence.Sequence", "generated/skbio.sequence.Sequence.__bool__", "generated/skbio.sequence.Sequence.__contains__", "generated/skbio.sequence.Sequence.__copy__", "generated/skbio.sequence.Sequence.__deepcopy__", "generated/skbio.sequence.Sequence.__eq__", "generated/skbio.sequence.Sequence.__ge__", "generated/skbio.sequence.Sequence.__getitem__", "generated/skbio.sequence.Sequence.__getstate__", "generated/skbio.sequence.Sequence.__gt__", "generated/skbio.sequence.Sequence.__iter__", "generated/skbio.sequence.Sequence.__le__", "generated/skbio.sequence.Sequence.__len__", "generated/skbio.sequence.Sequence.__lt__", "generated/skbio.sequence.Sequence.__ne__", "generated/skbio.sequence.Sequence.__reversed__", "generated/skbio.sequence.Sequence.__str__", "generated/skbio.sequence.Sequence.concat", "generated/skbio.sequence.Sequence.count", "generated/skbio.sequence.Sequence.distance", "generated/skbio.sequence.Sequence.find_with_regex", "generated/skbio.sequence.Sequence.frequencies", "generated/skbio.sequence.Sequence.has_interval_metadata", "generated/skbio.sequence.Sequence.has_metadata", "generated/skbio.sequence.Sequence.has_positional_metadata", "generated/skbio.sequence.Sequence.index", "generated/skbio.sequence.Sequence.iter_contiguous", "generated/skbio.sequence.Sequence.iter_kmers", "generated/skbio.sequence.Sequence.kmer_frequencies", "generated/skbio.sequence.Sequence.lowercase", "generated/skbio.sequence.Sequence.match_frequency", "generated/skbio.sequence.Sequence.matches", "generated/skbio.sequence.Sequence.mismatch_frequency", "generated/skbio.sequence.Sequence.mismatches", "generated/skbio.sequence.Sequence.read", "generated/skbio.sequence.Sequence.replace", "generated/skbio.sequence.Sequence.to_indices", "generated/skbio.sequence.Sequence.write", "generated/skbio.sequence.SubstitutionMatrix", "generated/skbio.sequence.SubstitutionMatrix.__contains__", "generated/skbio.sequence.SubstitutionMatrix.__eq__", "generated/skbio.sequence.SubstitutionMatrix.__ge__", "generated/skbio.sequence.SubstitutionMatrix.__getitem__", "generated/skbio.sequence.SubstitutionMatrix.__getstate__", "generated/skbio.sequence.SubstitutionMatrix.__gt__", "generated/skbio.sequence.SubstitutionMatrix.__le__", "generated/skbio.sequence.SubstitutionMatrix.__lt__", "generated/skbio.sequence.SubstitutionMatrix.__ne__", "generated/skbio.sequence.SubstitutionMatrix.__str__", "generated/skbio.sequence.SubstitutionMatrix.between", "generated/skbio.sequence.SubstitutionMatrix.by_name", "generated/skbio.sequence.SubstitutionMatrix.copy", "generated/skbio.sequence.SubstitutionMatrix.filter", "generated/skbio.sequence.SubstitutionMatrix.from_dict", "generated/skbio.sequence.SubstitutionMatrix.from_iterable", "generated/skbio.sequence.SubstitutionMatrix.get_names", "generated/skbio.sequence.SubstitutionMatrix.identity", "generated/skbio.sequence.SubstitutionMatrix.index", "generated/skbio.sequence.SubstitutionMatrix.plot", "generated/skbio.sequence.SubstitutionMatrix.read", "generated/skbio.sequence.SubstitutionMatrix.redundant_form", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame", "generated/skbio.sequence.SubstitutionMatrix.to_dict", "generated/skbio.sequence.SubstitutionMatrix.transpose", "generated/skbio.sequence.SubstitutionMatrix.within", "generated/skbio.sequence.SubstitutionMatrix.write", "generated/skbio.sequence.distance", "generated/skbio.sequence.distance.hamming", "generated/skbio.sequence.distance.kmer_distance", "generated/skbio.stats.composition", "generated/skbio.stats.composition.alr", "generated/skbio.stats.composition.alr_inv", "generated/skbio.stats.composition.ancom", "generated/skbio.stats.composition.centralize", "generated/skbio.stats.composition.closure", "generated/skbio.stats.composition.clr", "generated/skbio.stats.composition.clr_inv", "generated/skbio.stats.composition.dirmult_ttest", "generated/skbio.stats.composition.ilr", "generated/skbio.stats.composition.ilr_inv", "generated/skbio.stats.composition.inner", "generated/skbio.stats.composition.multi_replace", "generated/skbio.stats.composition.multiplicative_replacement", "generated/skbio.stats.composition.pairwise_vlr", "generated/skbio.stats.composition.perturb", "generated/skbio.stats.composition.perturb_inv", "generated/skbio.stats.composition.power", "generated/skbio.stats.composition.sbp_basis", "generated/skbio.stats.composition.tree_basis", "generated/skbio.stats.composition.vlr", "generated/skbio.stats.distance", "generated/skbio.stats.distance.DissimilarityMatrix", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__", "generated/skbio.stats.distance.DissimilarityMatrix.__le__", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__", "generated/skbio.stats.distance.DissimilarityMatrix.__str__", "generated/skbio.stats.distance.DissimilarityMatrix.between", "generated/skbio.stats.distance.DissimilarityMatrix.copy", "generated/skbio.stats.distance.DissimilarityMatrix.filter", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable", "generated/skbio.stats.distance.DissimilarityMatrix.index", "generated/skbio.stats.distance.DissimilarityMatrix.plot", "generated/skbio.stats.distance.DissimilarityMatrix.read", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame", "generated/skbio.stats.distance.DissimilarityMatrix.transpose", "generated/skbio.stats.distance.DissimilarityMatrix.within", "generated/skbio.stats.distance.DissimilarityMatrix.write", "generated/skbio.stats.distance.DistanceMatrix", "generated/skbio.stats.distance.DistanceMatrix.__contains__", "generated/skbio.stats.distance.DistanceMatrix.__eq__", "generated/skbio.stats.distance.DistanceMatrix.__ge__", "generated/skbio.stats.distance.DistanceMatrix.__getitem__", "generated/skbio.stats.distance.DistanceMatrix.__getstate__", "generated/skbio.stats.distance.DistanceMatrix.__gt__", "generated/skbio.stats.distance.DistanceMatrix.__le__", "generated/skbio.stats.distance.DistanceMatrix.__lt__", "generated/skbio.stats.distance.DistanceMatrix.__ne__", "generated/skbio.stats.distance.DistanceMatrix.__str__", "generated/skbio.stats.distance.DistanceMatrix.between", "generated/skbio.stats.distance.DistanceMatrix.condensed_form", "generated/skbio.stats.distance.DistanceMatrix.copy", "generated/skbio.stats.distance.DistanceMatrix.filter", "generated/skbio.stats.distance.DistanceMatrix.from_iterable", "generated/skbio.stats.distance.DistanceMatrix.index", "generated/skbio.stats.distance.DistanceMatrix.permute", "generated/skbio.stats.distance.DistanceMatrix.plot", "generated/skbio.stats.distance.DistanceMatrix.read", "generated/skbio.stats.distance.DistanceMatrix.redundant_form", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame", "generated/skbio.stats.distance.DistanceMatrix.to_series", "generated/skbio.stats.distance.DistanceMatrix.transpose", "generated/skbio.stats.distance.DistanceMatrix.within", "generated/skbio.stats.distance.DistanceMatrix.write", "generated/skbio.stats.distance.anosim", "generated/skbio.stats.distance.bioenv", "generated/skbio.stats.distance.mantel", "generated/skbio.stats.distance.permanova", "generated/skbio.stats.distance.permdisp", "generated/skbio.stats.distance.pwmantel", "generated/skbio.stats.distance.randdm", "generated/skbio.stats.evolve", "generated/skbio.stats.evolve.hommola_cospeciation", "generated/skbio.stats.gradient", "generated/skbio.stats.gradient.AverageGradientANOVA", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.CategoryResults", "generated/skbio.stats.gradient.CategoryResults.__eq__", "generated/skbio.stats.gradient.CategoryResults.__ge__", "generated/skbio.stats.gradient.CategoryResults.__getstate__", "generated/skbio.stats.gradient.CategoryResults.__gt__", "generated/skbio.stats.gradient.CategoryResults.__hash__", "generated/skbio.stats.gradient.CategoryResults.__le__", "generated/skbio.stats.gradient.CategoryResults.__lt__", "generated/skbio.stats.gradient.CategoryResults.__ne__", "generated/skbio.stats.gradient.CategoryResults.__str__", "generated/skbio.stats.gradient.CategoryResults.to_files", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVA", "generated/skbio.stats.gradient.GradientANOVA.__eq__", "generated/skbio.stats.gradient.GradientANOVA.__ge__", "generated/skbio.stats.gradient.GradientANOVA.__getstate__", "generated/skbio.stats.gradient.GradientANOVA.__gt__", "generated/skbio.stats.gradient.GradientANOVA.__hash__", "generated/skbio.stats.gradient.GradientANOVA.__le__", "generated/skbio.stats.gradient.GradientANOVA.__lt__", "generated/skbio.stats.gradient.GradientANOVA.__ne__", "generated/skbio.stats.gradient.GradientANOVA.__str__", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVAResults", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__", "generated/skbio.stats.gradient.GradientANOVAResults.__le__", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__", "generated/skbio.stats.gradient.GradientANOVAResults.__str__", "generated/skbio.stats.gradient.GradientANOVAResults.to_files", "generated/skbio.stats.gradient.GroupResults", "generated/skbio.stats.gradient.GroupResults.__eq__", "generated/skbio.stats.gradient.GroupResults.__ge__", "generated/skbio.stats.gradient.GroupResults.__getstate__", "generated/skbio.stats.gradient.GroupResults.__gt__", "generated/skbio.stats.gradient.GroupResults.__hash__", "generated/skbio.stats.gradient.GroupResults.__le__", "generated/skbio.stats.gradient.GroupResults.__lt__", "generated/skbio.stats.gradient.GroupResults.__ne__", "generated/skbio.stats.gradient.GroupResults.__str__", "generated/skbio.stats.gradient.GroupResults.to_files", "generated/skbio.stats.gradient.TrajectoryGradientANOVA", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.isubsample", "generated/skbio.stats.ordination", "generated/skbio.stats.ordination.OrdinationResults", "generated/skbio.stats.ordination.OrdinationResults.__eq__", "generated/skbio.stats.ordination.OrdinationResults.__ge__", "generated/skbio.stats.ordination.OrdinationResults.__getstate__", "generated/skbio.stats.ordination.OrdinationResults.__gt__", "generated/skbio.stats.ordination.OrdinationResults.__hash__", "generated/skbio.stats.ordination.OrdinationResults.__le__", "generated/skbio.stats.ordination.OrdinationResults.__lt__", "generated/skbio.stats.ordination.OrdinationResults.__ne__", "generated/skbio.stats.ordination.OrdinationResults.__str__", "generated/skbio.stats.ordination.OrdinationResults.plot", "generated/skbio.stats.ordination.OrdinationResults.read", "generated/skbio.stats.ordination.OrdinationResults.write", "generated/skbio.stats.ordination.ca", "generated/skbio.stats.ordination.cca", "generated/skbio.stats.ordination.corr", "generated/skbio.stats.ordination.e_matrix", "generated/skbio.stats.ordination.f_matrix", "generated/skbio.stats.ordination.mean_and_std", "generated/skbio.stats.ordination.pcoa", "generated/skbio.stats.ordination.pcoa_biplot", "generated/skbio.stats.ordination.rda", "generated/skbio.stats.ordination.scale", "generated/skbio.stats.ordination.svd_rank", "generated/skbio.stats.power", "generated/skbio.stats.power.confidence_bound", "generated/skbio.stats.power.paired_subsamples", "generated/skbio.stats.power.subsample_paired_power", "generated/skbio.stats.power.subsample_power", "generated/skbio.stats.subsample_counts", "generated/skbio.table.Table", "generated/skbio.table.Table.__eq__", "generated/skbio.table.Table.__ge__", "generated/skbio.table.Table.__getitem__", "generated/skbio.table.Table.__getstate__", "generated/skbio.table.Table.__gt__", "generated/skbio.table.Table.__iter__", "generated/skbio.table.Table.__le__", "generated/skbio.table.Table.__lt__", "generated/skbio.table.Table.__ne__", "generated/skbio.table.Table.__str__", "generated/skbio.table.Table.add_group_metadata", "generated/skbio.table.Table.add_metadata", "generated/skbio.table.Table.align_to", "generated/skbio.table.Table.align_to_dataframe", "generated/skbio.table.Table.align_tree", "generated/skbio.table.Table.collapse", "generated/skbio.table.Table.concat", "generated/skbio.table.Table.copy", "generated/skbio.table.Table.data", "generated/skbio.table.Table.del_metadata", "generated/skbio.table.Table.delimited_self", "generated/skbio.table.Table.descriptive_equality", "generated/skbio.table.Table.exists", "generated/skbio.table.Table.filter", "generated/skbio.table.Table.from_adjacency", "generated/skbio.table.Table.from_hdf5", "generated/skbio.table.Table.from_json", "generated/skbio.table.Table.from_tsv", "generated/skbio.table.Table.get_table_density", "generated/skbio.table.Table.get_value_by_ids", "generated/skbio.table.Table.group_metadata", "generated/skbio.table.Table.head", "generated/skbio.table.Table.ids", "generated/skbio.table.Table.index", "generated/skbio.table.Table.is_empty", "generated/skbio.table.Table.iter", "generated/skbio.table.Table.iter_data", "generated/skbio.table.Table.iter_pairwise", "generated/skbio.table.Table.length", "generated/skbio.table.Table.max", "generated/skbio.table.Table.merge", "generated/skbio.table.Table.metadata", "generated/skbio.table.Table.metadata_to_dataframe", "generated/skbio.table.Table.min", "generated/skbio.table.Table.nonzero", "generated/skbio.table.Table.nonzero_counts", "generated/skbio.table.Table.norm", "generated/skbio.table.Table.pa", "generated/skbio.table.Table.partition", "generated/skbio.table.Table.rankdata", "generated/skbio.table.Table.read", "generated/skbio.table.Table.reduce", "generated/skbio.table.Table.remove_empty", "generated/skbio.table.Table.sort", "generated/skbio.table.Table.sort_order", "generated/skbio.table.Table.subsample", "generated/skbio.table.Table.sum", "generated/skbio.table.Table.to_anndata", "generated/skbio.table.Table.to_dataframe", "generated/skbio.table.Table.to_hdf5", "generated/skbio.table.Table.to_json", "generated/skbio.table.Table.to_tsv", "generated/skbio.table.Table.transform", "generated/skbio.table.Table.transpose", "generated/skbio.table.Table.update_ids", "generated/skbio.table.Table.write", "generated/skbio.table.example_table", "generated/skbio.tree.TreeNode", "generated/skbio.tree.TreeNode.__copy__", "generated/skbio.tree.TreeNode.__deepcopy__", "generated/skbio.tree.TreeNode.__eq__", "generated/skbio.tree.TreeNode.__ge__", "generated/skbio.tree.TreeNode.__getitem__", "generated/skbio.tree.TreeNode.__getstate__", "generated/skbio.tree.TreeNode.__gt__", "generated/skbio.tree.TreeNode.__hash__", "generated/skbio.tree.TreeNode.__iter__", "generated/skbio.tree.TreeNode.__le__", "generated/skbio.tree.TreeNode.__len__", "generated/skbio.tree.TreeNode.__lt__", "generated/skbio.tree.TreeNode.__ne__", "generated/skbio.tree.TreeNode.__str__", "generated/skbio.tree.TreeNode.accumulate_to_ancestor", "generated/skbio.tree.TreeNode.ancestors", "generated/skbio.tree.TreeNode.append", "generated/skbio.tree.TreeNode.ascii_art", "generated/skbio.tree.TreeNode.assign_ids", "generated/skbio.tree.TreeNode.assign_supports", "generated/skbio.tree.TreeNode.bifurcate", "generated/skbio.tree.TreeNode.cache_attr", "generated/skbio.tree.TreeNode.compare_rfd", "generated/skbio.tree.TreeNode.compare_subsets", "generated/skbio.tree.TreeNode.compare_tip_distances", "generated/skbio.tree.TreeNode.copy", "generated/skbio.tree.TreeNode.count", "generated/skbio.tree.TreeNode.create_caches", "generated/skbio.tree.TreeNode.deepcopy", "generated/skbio.tree.TreeNode.descending_branch_length", "generated/skbio.tree.TreeNode.distance", "generated/skbio.tree.TreeNode.extend", "generated/skbio.tree.TreeNode.find", "generated/skbio.tree.TreeNode.find_all", "generated/skbio.tree.TreeNode.find_by_func", "generated/skbio.tree.TreeNode.find_by_id", "generated/skbio.tree.TreeNode.from_linkage_matrix", "generated/skbio.tree.TreeNode.from_taxdump", "generated/skbio.tree.TreeNode.from_taxonomy", "generated/skbio.tree.TreeNode.get_max_distance", "generated/skbio.tree.TreeNode.has_children", "generated/skbio.tree.TreeNode.index_tree", "generated/skbio.tree.TreeNode.invalidate_caches", "generated/skbio.tree.TreeNode.is_root", "generated/skbio.tree.TreeNode.is_tip", "generated/skbio.tree.TreeNode.lca", "generated/skbio.tree.TreeNode.levelorder", "generated/skbio.tree.TreeNode.lowest_common_ancestor", "generated/skbio.tree.TreeNode.neighbors", "generated/skbio.tree.TreeNode.non_tips", "generated/skbio.tree.TreeNode.observed_node_counts", "generated/skbio.tree.TreeNode.pop", "generated/skbio.tree.TreeNode.postorder", "generated/skbio.tree.TreeNode.pre_and_postorder", "generated/skbio.tree.TreeNode.preorder", "generated/skbio.tree.TreeNode.prune", "generated/skbio.tree.TreeNode.read", "generated/skbio.tree.TreeNode.remove", "generated/skbio.tree.TreeNode.remove_deleted", "generated/skbio.tree.TreeNode.root", "generated/skbio.tree.TreeNode.root_at", "generated/skbio.tree.TreeNode.root_at_midpoint", "generated/skbio.tree.TreeNode.shear", "generated/skbio.tree.TreeNode.shuffle", "generated/skbio.tree.TreeNode.siblings", "generated/skbio.tree.TreeNode.subset", "generated/skbio.tree.TreeNode.subsets", "generated/skbio.tree.TreeNode.subtree", "generated/skbio.tree.TreeNode.tip_tip_distances", "generated/skbio.tree.TreeNode.tips", "generated/skbio.tree.TreeNode.to_array", "generated/skbio.tree.TreeNode.to_taxonomy", "generated/skbio.tree.TreeNode.traverse", "generated/skbio.tree.TreeNode.unpack", "generated/skbio.tree.TreeNode.unpack_by_func", "generated/skbio.tree.TreeNode.unrooted_copy", "generated/skbio.tree.TreeNode.unrooted_deepcopy", "generated/skbio.tree.TreeNode.write", "generated/skbio.tree.majority_rule", "generated/skbio.tree.nj", "generated/skbio.util.EfficiencyWarning", "generated/skbio.util.RepresentationWarning", "generated/skbio.util.assert_data_frame_almost_equal", "generated/skbio.util.assert_ordination_results_equal", "generated/skbio.util.cardinal_to_ordinal", "generated/skbio.util.classproperty", "generated/skbio.util.classproperty.__delete__", "generated/skbio.util.classproperty.__eq__", "generated/skbio.util.classproperty.__ge__", "generated/skbio.util.classproperty.__get__", "generated/skbio.util.classproperty.__getstate__", "generated/skbio.util.classproperty.__gt__", "generated/skbio.util.classproperty.__hash__", "generated/skbio.util.classproperty.__le__", "generated/skbio.util.classproperty.__lt__", "generated/skbio.util.classproperty.__ne__", "generated/skbio.util.classproperty.__set__", "generated/skbio.util.classproperty.__set_name__", "generated/skbio.util.classproperty.__str__", "generated/skbio.util.classproperty.deleter", "generated/skbio.util.classproperty.getter", "generated/skbio.util.classproperty.setter", "generated/skbio.util.find_duplicates", "generated/skbio.util.get_data_path", "generated/skbio.util.safe_md5", "generated/skbio.workflow.Workflow", "generated/skbio.workflow.Workflow.__call__", "generated/skbio.workflow.Workflow.__eq__", "generated/skbio.workflow.Workflow.__ge__", "generated/skbio.workflow.Workflow.__getstate__", "generated/skbio.workflow.Workflow.__gt__", "generated/skbio.workflow.Workflow.__hash__", "generated/skbio.workflow.Workflow.__le__", "generated/skbio.workflow.Workflow.__lt__", "generated/skbio.workflow.Workflow.__ne__", "generated/skbio.workflow.Workflow.__str__", "generated/skbio.workflow.Workflow.initialize_state", "generated/skbio.workflow.method", "generated/skbio.workflow.method.__call__", "generated/skbio.workflow.method.__eq__", "generated/skbio.workflow.method.__ge__", "generated/skbio.workflow.method.__getstate__", "generated/skbio.workflow.method.__gt__", "generated/skbio.workflow.method.__hash__", "generated/skbio.workflow.method.__le__", "generated/skbio.workflow.method.__lt__", "generated/skbio.workflow.method.__ne__", "generated/skbio.workflow.method.__str__", "generated/skbio.workflow.requires", "generated/skbio.workflow.requires.__call__", "generated/skbio.workflow.requires.__eq__", "generated/skbio.workflow.requires.__ge__", "generated/skbio.workflow.requires.__getstate__", "generated/skbio.workflow.requires.__gt__", "generated/skbio.workflow.requires.__hash__", "generated/skbio.workflow.requires.__le__", "generated/skbio.workflow.requires.__lt__", "generated/skbio.workflow.requires.__ne__", "generated/skbio.workflow.requires.__str__", "index", "io", "metadata", "sequence", "stats", "table", "tree", "util", "workflow"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["alignment.rst", "diversity.rst", "embedding.rst", "generated/skbio.alignment.AlignPath.rst", "generated/skbio.alignment.AlignPath.__eq__.rst", "generated/skbio.alignment.AlignPath.__ge__.rst", "generated/skbio.alignment.AlignPath.__getstate__.rst", "generated/skbio.alignment.AlignPath.__gt__.rst", "generated/skbio.alignment.AlignPath.__hash__.rst", "generated/skbio.alignment.AlignPath.__le__.rst", "generated/skbio.alignment.AlignPath.__lt__.rst", "generated/skbio.alignment.AlignPath.__ne__.rst", "generated/skbio.alignment.AlignPath.__str__.rst", "generated/skbio.alignment.AlignPath.from_bits.rst", "generated/skbio.alignment.AlignPath.from_coordinates.rst", "generated/skbio.alignment.AlignPath.from_indices.rst", "generated/skbio.alignment.AlignPath.from_tabular.rst", "generated/skbio.alignment.AlignPath.to_bits.rst", "generated/skbio.alignment.AlignPath.to_coordinates.rst", "generated/skbio.alignment.AlignPath.to_indices.rst", "generated/skbio.alignment.AlignmentStructure.rst", "generated/skbio.alignment.AlignmentStructure.__eq__.rst", "generated/skbio.alignment.AlignmentStructure.__ge__.rst", "generated/skbio.alignment.AlignmentStructure.__getitem__.rst", "generated/skbio.alignment.AlignmentStructure.__getstate__.rst", "generated/skbio.alignment.AlignmentStructure.__gt__.rst", "generated/skbio.alignment.AlignmentStructure.__hash__.rst", "generated/skbio.alignment.AlignmentStructure.__le__.rst", "generated/skbio.alignment.AlignmentStructure.__lt__.rst", "generated/skbio.alignment.AlignmentStructure.__ne__.rst", "generated/skbio.alignment.AlignmentStructure.__setstate__.rst", "generated/skbio.alignment.AlignmentStructure.__str__.rst", "generated/skbio.alignment.AlignmentStructure.is_zero_based.rst", "generated/skbio.alignment.AlignmentStructure.set_zero_based.rst", "generated/skbio.alignment.PairAlignPath.rst", "generated/skbio.alignment.PairAlignPath.__eq__.rst", "generated/skbio.alignment.PairAlignPath.__ge__.rst", "generated/skbio.alignment.PairAlignPath.__getstate__.rst", "generated/skbio.alignment.PairAlignPath.__gt__.rst", "generated/skbio.alignment.PairAlignPath.__hash__.rst", "generated/skbio.alignment.PairAlignPath.__le__.rst", "generated/skbio.alignment.PairAlignPath.__lt__.rst", "generated/skbio.alignment.PairAlignPath.__ne__.rst", "generated/skbio.alignment.PairAlignPath.__str__.rst", "generated/skbio.alignment.PairAlignPath.from_bits.rst", "generated/skbio.alignment.PairAlignPath.from_cigar.rst", "generated/skbio.alignment.PairAlignPath.from_coordinates.rst", "generated/skbio.alignment.PairAlignPath.from_indices.rst", "generated/skbio.alignment.PairAlignPath.from_tabular.rst", "generated/skbio.alignment.PairAlignPath.to_bits.rst", "generated/skbio.alignment.PairAlignPath.to_cigar.rst", "generated/skbio.alignment.PairAlignPath.to_coordinates.rst", "generated/skbio.alignment.PairAlignPath.to_indices.rst", "generated/skbio.alignment.StripedSmithWaterman.rst", "generated/skbio.alignment.StripedSmithWaterman.__call__.rst", "generated/skbio.alignment.StripedSmithWaterman.__eq__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ge__.rst", "generated/skbio.alignment.StripedSmithWaterman.__getstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__gt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__hash__.rst", "generated/skbio.alignment.StripedSmithWaterman.__le__.rst", "generated/skbio.alignment.StripedSmithWaterman.__lt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ne__.rst", "generated/skbio.alignment.StripedSmithWaterman.__setstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__str__.rst", "generated/skbio.alignment.TabularMSA.rst", "generated/skbio.alignment.TabularMSA.__bool__.rst", "generated/skbio.alignment.TabularMSA.__contains__.rst", "generated/skbio.alignment.TabularMSA.__copy__.rst", "generated/skbio.alignment.TabularMSA.__deepcopy__.rst", "generated/skbio.alignment.TabularMSA.__eq__.rst", "generated/skbio.alignment.TabularMSA.__ge__.rst", "generated/skbio.alignment.TabularMSA.__getitem__.rst", "generated/skbio.alignment.TabularMSA.__getstate__.rst", "generated/skbio.alignment.TabularMSA.__gt__.rst", "generated/skbio.alignment.TabularMSA.__iter__.rst", "generated/skbio.alignment.TabularMSA.__le__.rst", "generated/skbio.alignment.TabularMSA.__len__.rst", "generated/skbio.alignment.TabularMSA.__lt__.rst", "generated/skbio.alignment.TabularMSA.__ne__.rst", "generated/skbio.alignment.TabularMSA.__reversed__.rst", "generated/skbio.alignment.TabularMSA.__str__.rst", "generated/skbio.alignment.TabularMSA.append.rst", "generated/skbio.alignment.TabularMSA.consensus.rst", "generated/skbio.alignment.TabularMSA.conservation.rst", "generated/skbio.alignment.TabularMSA.extend.rst", "generated/skbio.alignment.TabularMSA.from_dict.rst", "generated/skbio.alignment.TabularMSA.from_path_seqs.rst", "generated/skbio.alignment.TabularMSA.gap_frequencies.rst", "generated/skbio.alignment.TabularMSA.has_metadata.rst", "generated/skbio.alignment.TabularMSA.has_positional_metadata.rst", "generated/skbio.alignment.TabularMSA.iter_positions.rst", "generated/skbio.alignment.TabularMSA.join.rst", "generated/skbio.alignment.TabularMSA.read.rst", "generated/skbio.alignment.TabularMSA.reassign_index.rst", "generated/skbio.alignment.TabularMSA.sort.rst", "generated/skbio.alignment.TabularMSA.to_dict.rst", "generated/skbio.alignment.TabularMSA.write.rst", "generated/skbio.alignment.global_pairwise_align.rst", "generated/skbio.alignment.global_pairwise_align_nucleotide.rst", "generated/skbio.alignment.global_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align.rst", "generated/skbio.alignment.local_pairwise_align_nucleotide.rst", "generated/skbio.alignment.local_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align_ssw.rst", "generated/skbio.alignment.make_identity_substitution_matrix.rst", "generated/skbio.diversity.alpha.rst", "generated/skbio.diversity.alpha.ace.rst", "generated/skbio.diversity.alpha.berger_parker_d.rst", "generated/skbio.diversity.alpha.brillouin_d.rst", "generated/skbio.diversity.alpha.chao1.rst", "generated/skbio.diversity.alpha.chao1_ci.rst", "generated/skbio.diversity.alpha.dominance.rst", "generated/skbio.diversity.alpha.doubles.rst", "generated/skbio.diversity.alpha.enspie.rst", "generated/skbio.diversity.alpha.esty_ci.rst", "generated/skbio.diversity.alpha.faith_pd.rst", "generated/skbio.diversity.alpha.fisher_alpha.rst", "generated/skbio.diversity.alpha.gini_index.rst", "generated/skbio.diversity.alpha.goods_coverage.rst", "generated/skbio.diversity.alpha.heip_e.rst", "generated/skbio.diversity.alpha.kempton_taylor_q.rst", "generated/skbio.diversity.alpha.lladser_ci.rst", "generated/skbio.diversity.alpha.lladser_pe.rst", "generated/skbio.diversity.alpha.margalef.rst", "generated/skbio.diversity.alpha.mcintosh_d.rst", "generated/skbio.diversity.alpha.mcintosh_e.rst", "generated/skbio.diversity.alpha.menhinick.rst", "generated/skbio.diversity.alpha.michaelis_menten_fit.rst", "generated/skbio.diversity.alpha.observed_features.rst", "generated/skbio.diversity.alpha.observed_otus.rst", "generated/skbio.diversity.alpha.osd.rst", "generated/skbio.diversity.alpha.phydiv.rst", "generated/skbio.diversity.alpha.pielou_e.rst", "generated/skbio.diversity.alpha.robbins.rst", "generated/skbio.diversity.alpha.shannon.rst", "generated/skbio.diversity.alpha.simpson.rst", "generated/skbio.diversity.alpha.simpson_e.rst", "generated/skbio.diversity.alpha.singles.rst", "generated/skbio.diversity.alpha.sobs.rst", "generated/skbio.diversity.alpha.strong.rst", "generated/skbio.diversity.alpha_diversity.rst", "generated/skbio.diversity.beta.rst", "generated/skbio.diversity.beta.unweighted_unifrac.rst", "generated/skbio.diversity.beta.weighted_unifrac.rst", "generated/skbio.diversity.beta_diversity.rst", "generated/skbio.diversity.block_beta_diversity.rst", "generated/skbio.diversity.get_alpha_diversity_metrics.rst", "generated/skbio.diversity.get_beta_diversity_metrics.rst", "generated/skbio.diversity.partial_beta_diversity.rst", "generated/skbio.embedding.Embedding.rst", "generated/skbio.embedding.Embedding.__eq__.rst", "generated/skbio.embedding.Embedding.__ge__.rst", "generated/skbio.embedding.Embedding.__getstate__.rst", "generated/skbio.embedding.Embedding.__gt__.rst", "generated/skbio.embedding.Embedding.__hash__.rst", "generated/skbio.embedding.Embedding.__le__.rst", "generated/skbio.embedding.Embedding.__lt__.rst", "generated/skbio.embedding.Embedding.__ne__.rst", "generated/skbio.embedding.Embedding.__str__.rst", "generated/skbio.embedding.Embedding.bytes.rst", "generated/skbio.embedding.ProteinEmbedding.rst", "generated/skbio.embedding.ProteinEmbedding.__eq__.rst", "generated/skbio.embedding.ProteinEmbedding.__ge__.rst", "generated/skbio.embedding.ProteinEmbedding.__getstate__.rst", "generated/skbio.embedding.ProteinEmbedding.__gt__.rst", "generated/skbio.embedding.ProteinEmbedding.__hash__.rst", "generated/skbio.embedding.ProteinEmbedding.__le__.rst", "generated/skbio.embedding.ProteinEmbedding.__lt__.rst", "generated/skbio.embedding.ProteinEmbedding.__ne__.rst", "generated/skbio.embedding.ProteinEmbedding.__str__.rst", "generated/skbio.embedding.ProteinEmbedding.bytes.rst", "generated/skbio.embedding.ProteinEmbedding.read.rst", "generated/skbio.embedding.ProteinEmbedding.write.rst", "generated/skbio.embedding.ProteinVector.rst", "generated/skbio.embedding.ProteinVector.__eq__.rst", "generated/skbio.embedding.ProteinVector.__ge__.rst", "generated/skbio.embedding.ProteinVector.__getstate__.rst", "generated/skbio.embedding.ProteinVector.__gt__.rst", "generated/skbio.embedding.ProteinVector.__hash__.rst", "generated/skbio.embedding.ProteinVector.__le__.rst", "generated/skbio.embedding.ProteinVector.__lt__.rst", "generated/skbio.embedding.ProteinVector.__ne__.rst", "generated/skbio.embedding.ProteinVector.__str__.rst", "generated/skbio.embedding.ProteinVector.bytes.rst", "generated/skbio.embedding.ProteinVector.read.rst", "generated/skbio.embedding.ProteinVector.write.rst", "generated/skbio.embedding.SequenceEmbedding.rst", "generated/skbio.embedding.SequenceEmbedding.__eq__.rst", "generated/skbio.embedding.SequenceEmbedding.__ge__.rst", "generated/skbio.embedding.SequenceEmbedding.__getstate__.rst", "generated/skbio.embedding.SequenceEmbedding.__gt__.rst", "generated/skbio.embedding.SequenceEmbedding.__hash__.rst", "generated/skbio.embedding.SequenceEmbedding.__le__.rst", "generated/skbio.embedding.SequenceEmbedding.__lt__.rst", "generated/skbio.embedding.SequenceEmbedding.__ne__.rst", "generated/skbio.embedding.SequenceEmbedding.__str__.rst", "generated/skbio.embedding.SequenceEmbedding.bytes.rst", "generated/skbio.embedding.SequenceVector.rst", "generated/skbio.embedding.SequenceVector.__eq__.rst", "generated/skbio.embedding.SequenceVector.__ge__.rst", "generated/skbio.embedding.SequenceVector.__getstate__.rst", "generated/skbio.embedding.SequenceVector.__gt__.rst", "generated/skbio.embedding.SequenceVector.__hash__.rst", "generated/skbio.embedding.SequenceVector.__le__.rst", "generated/skbio.embedding.SequenceVector.__lt__.rst", "generated/skbio.embedding.SequenceVector.__ne__.rst", "generated/skbio.embedding.SequenceVector.__str__.rst", "generated/skbio.embedding.SequenceVector.bytes.rst", "generated/skbio.embedding.embed_vec_to_dataframe.rst", "generated/skbio.embedding.embed_vec_to_distances.rst", "generated/skbio.embedding.embed_vec_to_numpy.rst", "generated/skbio.embedding.embed_vec_to_ordination.rst", "generated/skbio.io.format.binary_dm.rst", "generated/skbio.io.format.biom.rst", "generated/skbio.io.format.blast6.rst", "generated/skbio.io.format.blast7.rst", "generated/skbio.io.format.clustal.rst", "generated/skbio.io.format.embed.rst", "generated/skbio.io.format.embl.rst", "generated/skbio.io.format.fasta.rst", "generated/skbio.io.format.fastq.rst", "generated/skbio.io.format.genbank.rst", "generated/skbio.io.format.gff3.rst", "generated/skbio.io.format.lsmat.rst", "generated/skbio.io.format.newick.rst", "generated/skbio.io.format.ordination.rst", "generated/skbio.io.format.phylip.rst", "generated/skbio.io.format.qseq.rst", "generated/skbio.io.format.sample_metadata.rst", "generated/skbio.io.format.stockholm.rst", "generated/skbio.io.format.taxdump.rst", "generated/skbio.io.registry.rst", "generated/skbio.io.registry.Format.rst", "generated/skbio.io.registry.Format.__eq__.rst", "generated/skbio.io.registry.Format.__ge__.rst", "generated/skbio.io.registry.Format.__getstate__.rst", "generated/skbio.io.registry.Format.__gt__.rst", "generated/skbio.io.registry.Format.__hash__.rst", "generated/skbio.io.registry.Format.__le__.rst", "generated/skbio.io.registry.Format.__lt__.rst", "generated/skbio.io.registry.Format.__ne__.rst", "generated/skbio.io.registry.Format.__str__.rst", "generated/skbio.io.registry.Format.reader.rst", "generated/skbio.io.registry.Format.sniffer.rst", "generated/skbio.io.registry.Format.writer.rst", "generated/skbio.io.registry.IORegistry.rst", "generated/skbio.io.registry.IORegistry.__eq__.rst", "generated/skbio.io.registry.IORegistry.__ge__.rst", "generated/skbio.io.registry.IORegistry.__getstate__.rst", "generated/skbio.io.registry.IORegistry.__gt__.rst", "generated/skbio.io.registry.IORegistry.__hash__.rst", "generated/skbio.io.registry.IORegistry.__le__.rst", "generated/skbio.io.registry.IORegistry.__lt__.rst", "generated/skbio.io.registry.IORegistry.__ne__.rst", "generated/skbio.io.registry.IORegistry.__str__.rst", "generated/skbio.io.registry.IORegistry.add_format.rst", "generated/skbio.io.registry.IORegistry.create_format.rst", "generated/skbio.io.registry.IORegistry.get_reader.rst", "generated/skbio.io.registry.IORegistry.get_sniffer.rst", "generated/skbio.io.registry.IORegistry.get_writer.rst", "generated/skbio.io.registry.IORegistry.list_read_formats.rst", "generated/skbio.io.registry.IORegistry.list_write_formats.rst", "generated/skbio.io.registry.IORegistry.monkey_patch.rst", "generated/skbio.io.registry.IORegistry.read.rst", "generated/skbio.io.registry.IORegistry.sniff.rst", "generated/skbio.io.registry.IORegistry.write.rst", "generated/skbio.io.registry.create_format.rst", "generated/skbio.io.registry.read.rst", "generated/skbio.io.registry.sniff.rst", "generated/skbio.io.registry.write.rst", "generated/skbio.io.util.rst", "generated/skbio.io.util.open.rst", "generated/skbio.io.util.open_file.rst", "generated/skbio.io.util.open_files.rst", "generated/skbio.metadata.CategoricalMetadataColumn.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__eq__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__ge__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__getstate__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__gt__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__le__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__lt__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__ne__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.__str__.rst", "generated/skbio.metadata.CategoricalMetadataColumn.drop_missing_values.rst", "generated/skbio.metadata.CategoricalMetadataColumn.filter_ids.rst", "generated/skbio.metadata.CategoricalMetadataColumn.get_ids.rst", "generated/skbio.metadata.CategoricalMetadataColumn.get_missing.rst", "generated/skbio.metadata.CategoricalMetadataColumn.get_value.rst", "generated/skbio.metadata.CategoricalMetadataColumn.has_missing_values.rst", "generated/skbio.metadata.CategoricalMetadataColumn.save.rst", "generated/skbio.metadata.CategoricalMetadataColumn.to_dataframe.rst", "generated/skbio.metadata.CategoricalMetadataColumn.to_series.rst", "generated/skbio.metadata.Interval.rst", "generated/skbio.metadata.Interval.__eq__.rst", "generated/skbio.metadata.Interval.__ge__.rst", "generated/skbio.metadata.Interval.__getstate__.rst", "generated/skbio.metadata.Interval.__gt__.rst", "generated/skbio.metadata.Interval.__le__.rst", "generated/skbio.metadata.Interval.__lt__.rst", "generated/skbio.metadata.Interval.__ne__.rst", "generated/skbio.metadata.Interval.__str__.rst", "generated/skbio.metadata.Interval.drop.rst", "generated/skbio.metadata.IntervalMetadata.rst", "generated/skbio.metadata.IntervalMetadata.__copy__.rst", "generated/skbio.metadata.IntervalMetadata.__deepcopy__.rst", "generated/skbio.metadata.IntervalMetadata.__eq__.rst", "generated/skbio.metadata.IntervalMetadata.__ge__.rst", "generated/skbio.metadata.IntervalMetadata.__getstate__.rst", "generated/skbio.metadata.IntervalMetadata.__gt__.rst", "generated/skbio.metadata.IntervalMetadata.__le__.rst", "generated/skbio.metadata.IntervalMetadata.__lt__.rst", "generated/skbio.metadata.IntervalMetadata.__ne__.rst", "generated/skbio.metadata.IntervalMetadata.__str__.rst", "generated/skbio.metadata.IntervalMetadata.add.rst", "generated/skbio.metadata.IntervalMetadata.concat.rst", "generated/skbio.metadata.IntervalMetadata.drop.rst", "generated/skbio.metadata.IntervalMetadata.merge.rst", "generated/skbio.metadata.IntervalMetadata.query.rst", "generated/skbio.metadata.IntervalMetadata.read.rst", "generated/skbio.metadata.IntervalMetadata.sort.rst", "generated/skbio.metadata.IntervalMetadata.write.rst", "generated/skbio.metadata.MetadataColumn.rst", "generated/skbio.metadata.MetadataColumn.__eq__.rst", "generated/skbio.metadata.MetadataColumn.__ge__.rst", "generated/skbio.metadata.MetadataColumn.__getstate__.rst", "generated/skbio.metadata.MetadataColumn.__gt__.rst", "generated/skbio.metadata.MetadataColumn.__le__.rst", "generated/skbio.metadata.MetadataColumn.__lt__.rst", "generated/skbio.metadata.MetadataColumn.__ne__.rst", "generated/skbio.metadata.MetadataColumn.__str__.rst", "generated/skbio.metadata.MetadataColumn.drop_missing_values.rst", "generated/skbio.metadata.MetadataColumn.filter_ids.rst", "generated/skbio.metadata.MetadataColumn.get_ids.rst", "generated/skbio.metadata.MetadataColumn.get_missing.rst", "generated/skbio.metadata.MetadataColumn.get_value.rst", "generated/skbio.metadata.MetadataColumn.has_missing_values.rst", "generated/skbio.metadata.MetadataColumn.save.rst", "generated/skbio.metadata.MetadataColumn.to_dataframe.rst", "generated/skbio.metadata.MetadataColumn.to_series.rst", "generated/skbio.metadata.NumericMetadataColumn.rst", "generated/skbio.metadata.NumericMetadataColumn.__eq__.rst", "generated/skbio.metadata.NumericMetadataColumn.__ge__.rst", "generated/skbio.metadata.NumericMetadataColumn.__getstate__.rst", "generated/skbio.metadata.NumericMetadataColumn.__gt__.rst", "generated/skbio.metadata.NumericMetadataColumn.__le__.rst", "generated/skbio.metadata.NumericMetadataColumn.__lt__.rst", "generated/skbio.metadata.NumericMetadataColumn.__ne__.rst", "generated/skbio.metadata.NumericMetadataColumn.__str__.rst", "generated/skbio.metadata.NumericMetadataColumn.drop_missing_values.rst", "generated/skbio.metadata.NumericMetadataColumn.filter_ids.rst", "generated/skbio.metadata.NumericMetadataColumn.get_ids.rst", "generated/skbio.metadata.NumericMetadataColumn.get_missing.rst", "generated/skbio.metadata.NumericMetadataColumn.get_value.rst", "generated/skbio.metadata.NumericMetadataColumn.has_missing_values.rst", "generated/skbio.metadata.NumericMetadataColumn.save.rst", "generated/skbio.metadata.NumericMetadataColumn.to_dataframe.rst", "generated/skbio.metadata.NumericMetadataColumn.to_series.rst", "generated/skbio.metadata.SampleMetadata.rst", "generated/skbio.metadata.SampleMetadata.__eq__.rst", "generated/skbio.metadata.SampleMetadata.__ge__.rst", "generated/skbio.metadata.SampleMetadata.__getstate__.rst", "generated/skbio.metadata.SampleMetadata.__gt__.rst", "generated/skbio.metadata.SampleMetadata.__le__.rst", "generated/skbio.metadata.SampleMetadata.__lt__.rst", "generated/skbio.metadata.SampleMetadata.__ne__.rst", "generated/skbio.metadata.SampleMetadata.__str__.rst", "generated/skbio.metadata.SampleMetadata.filter_columns.rst", "generated/skbio.metadata.SampleMetadata.filter_ids.rst", "generated/skbio.metadata.SampleMetadata.get_column.rst", "generated/skbio.metadata.SampleMetadata.get_ids.rst", "generated/skbio.metadata.SampleMetadata.load.rst", "generated/skbio.metadata.SampleMetadata.merge.rst", "generated/skbio.metadata.SampleMetadata.read.rst", "generated/skbio.metadata.SampleMetadata.save.rst", "generated/skbio.metadata.SampleMetadata.to_dataframe.rst", "generated/skbio.metadata.SampleMetadata.write.rst", "generated/skbio.sequence.DNA.rst", "generated/skbio.sequence.DNA.__bool__.rst", "generated/skbio.sequence.DNA.__contains__.rst", "generated/skbio.sequence.DNA.__copy__.rst", "generated/skbio.sequence.DNA.__deepcopy__.rst", "generated/skbio.sequence.DNA.__eq__.rst", "generated/skbio.sequence.DNA.__ge__.rst", "generated/skbio.sequence.DNA.__getitem__.rst", "generated/skbio.sequence.DNA.__getstate__.rst", "generated/skbio.sequence.DNA.__gt__.rst", "generated/skbio.sequence.DNA.__iter__.rst", "generated/skbio.sequence.DNA.__le__.rst", "generated/skbio.sequence.DNA.__len__.rst", "generated/skbio.sequence.DNA.__lt__.rst", "generated/skbio.sequence.DNA.__ne__.rst", "generated/skbio.sequence.DNA.__reversed__.rst", "generated/skbio.sequence.DNA.__str__.rst", "generated/skbio.sequence.DNA.complement.rst", "generated/skbio.sequence.DNA.concat.rst", "generated/skbio.sequence.DNA.count.rst", "generated/skbio.sequence.DNA.definites.rst", "generated/skbio.sequence.DNA.degap.rst", "generated/skbio.sequence.DNA.degenerates.rst", "generated/skbio.sequence.DNA.distance.rst", "generated/skbio.sequence.DNA.expand_degenerates.rst", "generated/skbio.sequence.DNA.find_motifs.rst", "generated/skbio.sequence.DNA.find_with_regex.rst", "generated/skbio.sequence.DNA.frequencies.rst", "generated/skbio.sequence.DNA.gaps.rst", "generated/skbio.sequence.DNA.gc_content.rst", "generated/skbio.sequence.DNA.gc_frequency.rst", "generated/skbio.sequence.DNA.has_definites.rst", "generated/skbio.sequence.DNA.has_degenerates.rst", "generated/skbio.sequence.DNA.has_gaps.rst", "generated/skbio.sequence.DNA.has_interval_metadata.rst", "generated/skbio.sequence.DNA.has_metadata.rst", "generated/skbio.sequence.DNA.has_nondegenerates.rst", "generated/skbio.sequence.DNA.has_positional_metadata.rst", "generated/skbio.sequence.DNA.index.rst", "generated/skbio.sequence.DNA.is_reverse_complement.rst", "generated/skbio.sequence.DNA.iter_contiguous.rst", "generated/skbio.sequence.DNA.iter_kmers.rst", "generated/skbio.sequence.DNA.kmer_frequencies.rst", "generated/skbio.sequence.DNA.lowercase.rst", "generated/skbio.sequence.DNA.match_frequency.rst", "generated/skbio.sequence.DNA.matches.rst", "generated/skbio.sequence.DNA.mismatch_frequency.rst", "generated/skbio.sequence.DNA.mismatches.rst", "generated/skbio.sequence.DNA.nondegenerates.rst", "generated/skbio.sequence.DNA.read.rst", "generated/skbio.sequence.DNA.replace.rst", "generated/skbio.sequence.DNA.reverse_complement.rst", "generated/skbio.sequence.DNA.to_definites.rst", "generated/skbio.sequence.DNA.to_indices.rst", "generated/skbio.sequence.DNA.to_regex.rst", "generated/skbio.sequence.DNA.transcribe.rst", "generated/skbio.sequence.DNA.translate.rst", "generated/skbio.sequence.DNA.translate_six_frames.rst", "generated/skbio.sequence.DNA.write.rst", "generated/skbio.sequence.GeneticCode.rst", "generated/skbio.sequence.GeneticCode.__eq__.rst", "generated/skbio.sequence.GeneticCode.__ge__.rst", "generated/skbio.sequence.GeneticCode.__getstate__.rst", "generated/skbio.sequence.GeneticCode.__gt__.rst", "generated/skbio.sequence.GeneticCode.__le__.rst", "generated/skbio.sequence.GeneticCode.__lt__.rst", "generated/skbio.sequence.GeneticCode.__ne__.rst", "generated/skbio.sequence.GeneticCode.__str__.rst", "generated/skbio.sequence.GeneticCode.from_ncbi.rst", "generated/skbio.sequence.GeneticCode.translate.rst", "generated/skbio.sequence.GeneticCode.translate_six_frames.rst", "generated/skbio.sequence.GrammaredSequence.rst", "generated/skbio.sequence.GrammaredSequence.__bool__.rst", "generated/skbio.sequence.GrammaredSequence.__contains__.rst", "generated/skbio.sequence.GrammaredSequence.__copy__.rst", "generated/skbio.sequence.GrammaredSequence.__deepcopy__.rst", "generated/skbio.sequence.GrammaredSequence.__eq__.rst", "generated/skbio.sequence.GrammaredSequence.__ge__.rst", "generated/skbio.sequence.GrammaredSequence.__getitem__.rst", "generated/skbio.sequence.GrammaredSequence.__getstate__.rst", "generated/skbio.sequence.GrammaredSequence.__gt__.rst", "generated/skbio.sequence.GrammaredSequence.__iter__.rst", "generated/skbio.sequence.GrammaredSequence.__le__.rst", "generated/skbio.sequence.GrammaredSequence.__len__.rst", "generated/skbio.sequence.GrammaredSequence.__lt__.rst", "generated/skbio.sequence.GrammaredSequence.__ne__.rst", "generated/skbio.sequence.GrammaredSequence.__reversed__.rst", "generated/skbio.sequence.GrammaredSequence.__str__.rst", "generated/skbio.sequence.GrammaredSequence.concat.rst", "generated/skbio.sequence.GrammaredSequence.count.rst", "generated/skbio.sequence.GrammaredSequence.definites.rst", "generated/skbio.sequence.GrammaredSequence.degap.rst", "generated/skbio.sequence.GrammaredSequence.degenerates.rst", "generated/skbio.sequence.GrammaredSequence.distance.rst", "generated/skbio.sequence.GrammaredSequence.expand_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.find_motifs.rst", "generated/skbio.sequence.GrammaredSequence.find_with_regex.rst", "generated/skbio.sequence.GrammaredSequence.frequencies.rst", "generated/skbio.sequence.GrammaredSequence.gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_definites.rst", "generated/skbio.sequence.GrammaredSequence.has_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata.rst", "generated/skbio.sequence.GrammaredSequence.index.rst", "generated/skbio.sequence.GrammaredSequence.iter_contiguous.rst", "generated/skbio.sequence.GrammaredSequence.iter_kmers.rst", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies.rst", "generated/skbio.sequence.GrammaredSequence.lowercase.rst", "generated/skbio.sequence.GrammaredSequence.match_frequency.rst", "generated/skbio.sequence.GrammaredSequence.matches.rst", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency.rst", "generated/skbio.sequence.GrammaredSequence.mismatches.rst", "generated/skbio.sequence.GrammaredSequence.nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.read.rst", "generated/skbio.sequence.GrammaredSequence.replace.rst", "generated/skbio.sequence.GrammaredSequence.to_definites.rst", "generated/skbio.sequence.GrammaredSequence.to_indices.rst", "generated/skbio.sequence.GrammaredSequence.to_regex.rst", "generated/skbio.sequence.GrammaredSequence.write.rst", "generated/skbio.sequence.Protein.rst", "generated/skbio.sequence.Protein.__bool__.rst", "generated/skbio.sequence.Protein.__contains__.rst", "generated/skbio.sequence.Protein.__copy__.rst", "generated/skbio.sequence.Protein.__deepcopy__.rst", "generated/skbio.sequence.Protein.__eq__.rst", "generated/skbio.sequence.Protein.__ge__.rst", "generated/skbio.sequence.Protein.__getitem__.rst", "generated/skbio.sequence.Protein.__getstate__.rst", "generated/skbio.sequence.Protein.__gt__.rst", "generated/skbio.sequence.Protein.__iter__.rst", "generated/skbio.sequence.Protein.__le__.rst", "generated/skbio.sequence.Protein.__len__.rst", "generated/skbio.sequence.Protein.__lt__.rst", "generated/skbio.sequence.Protein.__ne__.rst", "generated/skbio.sequence.Protein.__reversed__.rst", "generated/skbio.sequence.Protein.__str__.rst", "generated/skbio.sequence.Protein.concat.rst", "generated/skbio.sequence.Protein.count.rst", "generated/skbio.sequence.Protein.definites.rst", "generated/skbio.sequence.Protein.degap.rst", "generated/skbio.sequence.Protein.degenerates.rst", "generated/skbio.sequence.Protein.distance.rst", "generated/skbio.sequence.Protein.expand_degenerates.rst", "generated/skbio.sequence.Protein.find_motifs.rst", "generated/skbio.sequence.Protein.find_with_regex.rst", "generated/skbio.sequence.Protein.frequencies.rst", "generated/skbio.sequence.Protein.gaps.rst", "generated/skbio.sequence.Protein.has_definites.rst", "generated/skbio.sequence.Protein.has_degenerates.rst", "generated/skbio.sequence.Protein.has_gaps.rst", "generated/skbio.sequence.Protein.has_interval_metadata.rst", "generated/skbio.sequence.Protein.has_metadata.rst", "generated/skbio.sequence.Protein.has_nondegenerates.rst", "generated/skbio.sequence.Protein.has_positional_metadata.rst", "generated/skbio.sequence.Protein.has_stops.rst", "generated/skbio.sequence.Protein.index.rst", "generated/skbio.sequence.Protein.iter_contiguous.rst", "generated/skbio.sequence.Protein.iter_kmers.rst", "generated/skbio.sequence.Protein.kmer_frequencies.rst", "generated/skbio.sequence.Protein.lowercase.rst", "generated/skbio.sequence.Protein.match_frequency.rst", "generated/skbio.sequence.Protein.matches.rst", "generated/skbio.sequence.Protein.mismatch_frequency.rst", "generated/skbio.sequence.Protein.mismatches.rst", "generated/skbio.sequence.Protein.nondegenerates.rst", "generated/skbio.sequence.Protein.read.rst", "generated/skbio.sequence.Protein.replace.rst", "generated/skbio.sequence.Protein.stops.rst", "generated/skbio.sequence.Protein.to_definites.rst", "generated/skbio.sequence.Protein.to_indices.rst", "generated/skbio.sequence.Protein.to_regex.rst", "generated/skbio.sequence.Protein.write.rst", "generated/skbio.sequence.RNA.rst", "generated/skbio.sequence.RNA.__bool__.rst", "generated/skbio.sequence.RNA.__contains__.rst", "generated/skbio.sequence.RNA.__copy__.rst", "generated/skbio.sequence.RNA.__deepcopy__.rst", "generated/skbio.sequence.RNA.__eq__.rst", "generated/skbio.sequence.RNA.__ge__.rst", "generated/skbio.sequence.RNA.__getitem__.rst", "generated/skbio.sequence.RNA.__getstate__.rst", "generated/skbio.sequence.RNA.__gt__.rst", "generated/skbio.sequence.RNA.__iter__.rst", "generated/skbio.sequence.RNA.__le__.rst", "generated/skbio.sequence.RNA.__len__.rst", "generated/skbio.sequence.RNA.__lt__.rst", "generated/skbio.sequence.RNA.__ne__.rst", "generated/skbio.sequence.RNA.__reversed__.rst", "generated/skbio.sequence.RNA.__str__.rst", "generated/skbio.sequence.RNA.complement.rst", "generated/skbio.sequence.RNA.concat.rst", "generated/skbio.sequence.RNA.count.rst", "generated/skbio.sequence.RNA.definites.rst", "generated/skbio.sequence.RNA.degap.rst", "generated/skbio.sequence.RNA.degenerates.rst", "generated/skbio.sequence.RNA.distance.rst", "generated/skbio.sequence.RNA.expand_degenerates.rst", "generated/skbio.sequence.RNA.find_motifs.rst", "generated/skbio.sequence.RNA.find_with_regex.rst", "generated/skbio.sequence.RNA.frequencies.rst", "generated/skbio.sequence.RNA.gaps.rst", "generated/skbio.sequence.RNA.gc_content.rst", "generated/skbio.sequence.RNA.gc_frequency.rst", "generated/skbio.sequence.RNA.has_definites.rst", "generated/skbio.sequence.RNA.has_degenerates.rst", "generated/skbio.sequence.RNA.has_gaps.rst", "generated/skbio.sequence.RNA.has_interval_metadata.rst", "generated/skbio.sequence.RNA.has_metadata.rst", "generated/skbio.sequence.RNA.has_nondegenerates.rst", "generated/skbio.sequence.RNA.has_positional_metadata.rst", "generated/skbio.sequence.RNA.index.rst", "generated/skbio.sequence.RNA.is_reverse_complement.rst", "generated/skbio.sequence.RNA.iter_contiguous.rst", "generated/skbio.sequence.RNA.iter_kmers.rst", "generated/skbio.sequence.RNA.kmer_frequencies.rst", "generated/skbio.sequence.RNA.lowercase.rst", "generated/skbio.sequence.RNA.match_frequency.rst", "generated/skbio.sequence.RNA.matches.rst", "generated/skbio.sequence.RNA.mismatch_frequency.rst", "generated/skbio.sequence.RNA.mismatches.rst", "generated/skbio.sequence.RNA.nondegenerates.rst", "generated/skbio.sequence.RNA.read.rst", "generated/skbio.sequence.RNA.replace.rst", "generated/skbio.sequence.RNA.reverse_complement.rst", "generated/skbio.sequence.RNA.reverse_transcribe.rst", "generated/skbio.sequence.RNA.to_definites.rst", "generated/skbio.sequence.RNA.to_indices.rst", "generated/skbio.sequence.RNA.to_regex.rst", "generated/skbio.sequence.RNA.translate.rst", "generated/skbio.sequence.RNA.translate_six_frames.rst", "generated/skbio.sequence.RNA.write.rst", "generated/skbio.sequence.Sequence.rst", "generated/skbio.sequence.Sequence.__bool__.rst", "generated/skbio.sequence.Sequence.__contains__.rst", "generated/skbio.sequence.Sequence.__copy__.rst", "generated/skbio.sequence.Sequence.__deepcopy__.rst", "generated/skbio.sequence.Sequence.__eq__.rst", "generated/skbio.sequence.Sequence.__ge__.rst", "generated/skbio.sequence.Sequence.__getitem__.rst", "generated/skbio.sequence.Sequence.__getstate__.rst", "generated/skbio.sequence.Sequence.__gt__.rst", "generated/skbio.sequence.Sequence.__iter__.rst", "generated/skbio.sequence.Sequence.__le__.rst", "generated/skbio.sequence.Sequence.__len__.rst", "generated/skbio.sequence.Sequence.__lt__.rst", "generated/skbio.sequence.Sequence.__ne__.rst", "generated/skbio.sequence.Sequence.__reversed__.rst", "generated/skbio.sequence.Sequence.__str__.rst", "generated/skbio.sequence.Sequence.concat.rst", "generated/skbio.sequence.Sequence.count.rst", "generated/skbio.sequence.Sequence.distance.rst", "generated/skbio.sequence.Sequence.find_with_regex.rst", "generated/skbio.sequence.Sequence.frequencies.rst", "generated/skbio.sequence.Sequence.has_interval_metadata.rst", "generated/skbio.sequence.Sequence.has_metadata.rst", "generated/skbio.sequence.Sequence.has_positional_metadata.rst", "generated/skbio.sequence.Sequence.index.rst", "generated/skbio.sequence.Sequence.iter_contiguous.rst", "generated/skbio.sequence.Sequence.iter_kmers.rst", "generated/skbio.sequence.Sequence.kmer_frequencies.rst", "generated/skbio.sequence.Sequence.lowercase.rst", "generated/skbio.sequence.Sequence.match_frequency.rst", "generated/skbio.sequence.Sequence.matches.rst", "generated/skbio.sequence.Sequence.mismatch_frequency.rst", "generated/skbio.sequence.Sequence.mismatches.rst", "generated/skbio.sequence.Sequence.read.rst", "generated/skbio.sequence.Sequence.replace.rst", "generated/skbio.sequence.Sequence.to_indices.rst", "generated/skbio.sequence.Sequence.write.rst", "generated/skbio.sequence.SubstitutionMatrix.rst", "generated/skbio.sequence.SubstitutionMatrix.__contains__.rst", "generated/skbio.sequence.SubstitutionMatrix.__eq__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ge__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getitem__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getstate__.rst", "generated/skbio.sequence.SubstitutionMatrix.__gt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__le__.rst", "generated/skbio.sequence.SubstitutionMatrix.__lt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ne__.rst", "generated/skbio.sequence.SubstitutionMatrix.__str__.rst", "generated/skbio.sequence.SubstitutionMatrix.between.rst", "generated/skbio.sequence.SubstitutionMatrix.by_name.rst", "generated/skbio.sequence.SubstitutionMatrix.copy.rst", "generated/skbio.sequence.SubstitutionMatrix.filter.rst", "generated/skbio.sequence.SubstitutionMatrix.from_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.from_iterable.rst", "generated/skbio.sequence.SubstitutionMatrix.get_names.rst", "generated/skbio.sequence.SubstitutionMatrix.identity.rst", "generated/skbio.sequence.SubstitutionMatrix.index.rst", "generated/skbio.sequence.SubstitutionMatrix.plot.rst", "generated/skbio.sequence.SubstitutionMatrix.read.rst", "generated/skbio.sequence.SubstitutionMatrix.redundant_form.rst", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame.rst", "generated/skbio.sequence.SubstitutionMatrix.to_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.transpose.rst", "generated/skbio.sequence.SubstitutionMatrix.within.rst", "generated/skbio.sequence.SubstitutionMatrix.write.rst", "generated/skbio.sequence.distance.rst", "generated/skbio.sequence.distance.hamming.rst", "generated/skbio.sequence.distance.kmer_distance.rst", "generated/skbio.stats.composition.rst", "generated/skbio.stats.composition.alr.rst", "generated/skbio.stats.composition.alr_inv.rst", "generated/skbio.stats.composition.ancom.rst", "generated/skbio.stats.composition.centralize.rst", "generated/skbio.stats.composition.closure.rst", "generated/skbio.stats.composition.clr.rst", "generated/skbio.stats.composition.clr_inv.rst", "generated/skbio.stats.composition.dirmult_ttest.rst", "generated/skbio.stats.composition.ilr.rst", "generated/skbio.stats.composition.ilr_inv.rst", "generated/skbio.stats.composition.inner.rst", "generated/skbio.stats.composition.multi_replace.rst", "generated/skbio.stats.composition.multiplicative_replacement.rst", "generated/skbio.stats.composition.pairwise_vlr.rst", "generated/skbio.stats.composition.perturb.rst", "generated/skbio.stats.composition.perturb_inv.rst", "generated/skbio.stats.composition.power.rst", "generated/skbio.stats.composition.sbp_basis.rst", "generated/skbio.stats.composition.tree_basis.rst", "generated/skbio.stats.composition.vlr.rst", "generated/skbio.stats.distance.rst", "generated/skbio.stats.distance.DissimilarityMatrix.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__le__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__str__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.between.rst", "generated/skbio.stats.distance.DissimilarityMatrix.copy.rst", "generated/skbio.stats.distance.DissimilarityMatrix.filter.rst", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable.rst", "generated/skbio.stats.distance.DissimilarityMatrix.index.rst", "generated/skbio.stats.distance.DissimilarityMatrix.plot.rst", "generated/skbio.stats.distance.DissimilarityMatrix.read.rst", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form.rst", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DissimilarityMatrix.transpose.rst", "generated/skbio.stats.distance.DissimilarityMatrix.within.rst", "generated/skbio.stats.distance.DissimilarityMatrix.write.rst", "generated/skbio.stats.distance.DistanceMatrix.rst", "generated/skbio.stats.distance.DistanceMatrix.__contains__.rst", "generated/skbio.stats.distance.DistanceMatrix.__eq__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ge__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getitem__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getstate__.rst", "generated/skbio.stats.distance.DistanceMatrix.__gt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__le__.rst", "generated/skbio.stats.distance.DistanceMatrix.__lt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ne__.rst", "generated/skbio.stats.distance.DistanceMatrix.__str__.rst", "generated/skbio.stats.distance.DistanceMatrix.between.rst", "generated/skbio.stats.distance.DistanceMatrix.condensed_form.rst", "generated/skbio.stats.distance.DistanceMatrix.copy.rst", "generated/skbio.stats.distance.DistanceMatrix.filter.rst", "generated/skbio.stats.distance.DistanceMatrix.from_iterable.rst", "generated/skbio.stats.distance.DistanceMatrix.index.rst", "generated/skbio.stats.distance.DistanceMatrix.permute.rst", "generated/skbio.stats.distance.DistanceMatrix.plot.rst", "generated/skbio.stats.distance.DistanceMatrix.read.rst", "generated/skbio.stats.distance.DistanceMatrix.redundant_form.rst", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DistanceMatrix.to_series.rst", "generated/skbio.stats.distance.DistanceMatrix.transpose.rst", "generated/skbio.stats.distance.DistanceMatrix.within.rst", "generated/skbio.stats.distance.DistanceMatrix.write.rst", "generated/skbio.stats.distance.anosim.rst", "generated/skbio.stats.distance.bioenv.rst", "generated/skbio.stats.distance.mantel.rst", "generated/skbio.stats.distance.permanova.rst", "generated/skbio.stats.distance.permdisp.rst", "generated/skbio.stats.distance.pwmantel.rst", "generated/skbio.stats.distance.randdm.rst", "generated/skbio.stats.evolve.rst", "generated/skbio.stats.evolve.hommola_cospeciation.rst", "generated/skbio.stats.gradient.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.CategoryResults.rst", "generated/skbio.stats.gradient.CategoryResults.__eq__.rst", "generated/skbio.stats.gradient.CategoryResults.__ge__.rst", "generated/skbio.stats.gradient.CategoryResults.__getstate__.rst", "generated/skbio.stats.gradient.CategoryResults.__gt__.rst", "generated/skbio.stats.gradient.CategoryResults.__hash__.rst", "generated/skbio.stats.gradient.CategoryResults.__le__.rst", "generated/skbio.stats.gradient.CategoryResults.__lt__.rst", "generated/skbio.stats.gradient.CategoryResults.__ne__.rst", "generated/skbio.stats.gradient.CategoryResults.__str__.rst", "generated/skbio.stats.gradient.CategoryResults.to_files.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVA.rst", "generated/skbio.stats.gradient.GradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVA.__le__.rst", "generated/skbio.stats.gradient.GradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVA.__str__.rst", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVAResults.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__le__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__str__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.to_files.rst", "generated/skbio.stats.gradient.GroupResults.rst", "generated/skbio.stats.gradient.GroupResults.__eq__.rst", "generated/skbio.stats.gradient.GroupResults.__ge__.rst", "generated/skbio.stats.gradient.GroupResults.__getstate__.rst", "generated/skbio.stats.gradient.GroupResults.__gt__.rst", "generated/skbio.stats.gradient.GroupResults.__hash__.rst", "generated/skbio.stats.gradient.GroupResults.__le__.rst", "generated/skbio.stats.gradient.GroupResults.__lt__.rst", "generated/skbio.stats.gradient.GroupResults.__ne__.rst", "generated/skbio.stats.gradient.GroupResults.__str__.rst", "generated/skbio.stats.gradient.GroupResults.to_files.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.isubsample.rst", "generated/skbio.stats.ordination.rst", "generated/skbio.stats.ordination.OrdinationResults.rst", "generated/skbio.stats.ordination.OrdinationResults.__eq__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ge__.rst", "generated/skbio.stats.ordination.OrdinationResults.__getstate__.rst", "generated/skbio.stats.ordination.OrdinationResults.__gt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__hash__.rst", "generated/skbio.stats.ordination.OrdinationResults.__le__.rst", "generated/skbio.stats.ordination.OrdinationResults.__lt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ne__.rst", "generated/skbio.stats.ordination.OrdinationResults.__str__.rst", "generated/skbio.stats.ordination.OrdinationResults.plot.rst", "generated/skbio.stats.ordination.OrdinationResults.read.rst", "generated/skbio.stats.ordination.OrdinationResults.write.rst", "generated/skbio.stats.ordination.ca.rst", "generated/skbio.stats.ordination.cca.rst", "generated/skbio.stats.ordination.corr.rst", "generated/skbio.stats.ordination.e_matrix.rst", "generated/skbio.stats.ordination.f_matrix.rst", "generated/skbio.stats.ordination.mean_and_std.rst", "generated/skbio.stats.ordination.pcoa.rst", "generated/skbio.stats.ordination.pcoa_biplot.rst", "generated/skbio.stats.ordination.rda.rst", "generated/skbio.stats.ordination.scale.rst", "generated/skbio.stats.ordination.svd_rank.rst", "generated/skbio.stats.power.rst", "generated/skbio.stats.power.confidence_bound.rst", "generated/skbio.stats.power.paired_subsamples.rst", "generated/skbio.stats.power.subsample_paired_power.rst", "generated/skbio.stats.power.subsample_power.rst", "generated/skbio.stats.subsample_counts.rst", "generated/skbio.table.Table.rst", "generated/skbio.table.Table.__eq__.rst", "generated/skbio.table.Table.__ge__.rst", "generated/skbio.table.Table.__getitem__.rst", "generated/skbio.table.Table.__getstate__.rst", "generated/skbio.table.Table.__gt__.rst", "generated/skbio.table.Table.__iter__.rst", "generated/skbio.table.Table.__le__.rst", "generated/skbio.table.Table.__lt__.rst", "generated/skbio.table.Table.__ne__.rst", "generated/skbio.table.Table.__str__.rst", "generated/skbio.table.Table.add_group_metadata.rst", "generated/skbio.table.Table.add_metadata.rst", "generated/skbio.table.Table.align_to.rst", "generated/skbio.table.Table.align_to_dataframe.rst", "generated/skbio.table.Table.align_tree.rst", "generated/skbio.table.Table.collapse.rst", "generated/skbio.table.Table.concat.rst", "generated/skbio.table.Table.copy.rst", "generated/skbio.table.Table.data.rst", "generated/skbio.table.Table.del_metadata.rst", "generated/skbio.table.Table.delimited_self.rst", "generated/skbio.table.Table.descriptive_equality.rst", "generated/skbio.table.Table.exists.rst", "generated/skbio.table.Table.filter.rst", "generated/skbio.table.Table.from_adjacency.rst", "generated/skbio.table.Table.from_hdf5.rst", "generated/skbio.table.Table.from_json.rst", "generated/skbio.table.Table.from_tsv.rst", "generated/skbio.table.Table.get_table_density.rst", "generated/skbio.table.Table.get_value_by_ids.rst", "generated/skbio.table.Table.group_metadata.rst", "generated/skbio.table.Table.head.rst", "generated/skbio.table.Table.ids.rst", "generated/skbio.table.Table.index.rst", "generated/skbio.table.Table.is_empty.rst", "generated/skbio.table.Table.iter.rst", "generated/skbio.table.Table.iter_data.rst", "generated/skbio.table.Table.iter_pairwise.rst", "generated/skbio.table.Table.length.rst", "generated/skbio.table.Table.max.rst", "generated/skbio.table.Table.merge.rst", "generated/skbio.table.Table.metadata.rst", "generated/skbio.table.Table.metadata_to_dataframe.rst", "generated/skbio.table.Table.min.rst", "generated/skbio.table.Table.nonzero.rst", "generated/skbio.table.Table.nonzero_counts.rst", "generated/skbio.table.Table.norm.rst", "generated/skbio.table.Table.pa.rst", "generated/skbio.table.Table.partition.rst", "generated/skbio.table.Table.rankdata.rst", "generated/skbio.table.Table.read.rst", "generated/skbio.table.Table.reduce.rst", "generated/skbio.table.Table.remove_empty.rst", "generated/skbio.table.Table.sort.rst", "generated/skbio.table.Table.sort_order.rst", "generated/skbio.table.Table.subsample.rst", "generated/skbio.table.Table.sum.rst", "generated/skbio.table.Table.to_anndata.rst", "generated/skbio.table.Table.to_dataframe.rst", "generated/skbio.table.Table.to_hdf5.rst", "generated/skbio.table.Table.to_json.rst", "generated/skbio.table.Table.to_tsv.rst", "generated/skbio.table.Table.transform.rst", "generated/skbio.table.Table.transpose.rst", "generated/skbio.table.Table.update_ids.rst", "generated/skbio.table.Table.write.rst", "generated/skbio.table.example_table.rst", "generated/skbio.tree.TreeNode.rst", "generated/skbio.tree.TreeNode.__copy__.rst", "generated/skbio.tree.TreeNode.__deepcopy__.rst", "generated/skbio.tree.TreeNode.__eq__.rst", "generated/skbio.tree.TreeNode.__ge__.rst", "generated/skbio.tree.TreeNode.__getitem__.rst", "generated/skbio.tree.TreeNode.__getstate__.rst", "generated/skbio.tree.TreeNode.__gt__.rst", "generated/skbio.tree.TreeNode.__hash__.rst", "generated/skbio.tree.TreeNode.__iter__.rst", "generated/skbio.tree.TreeNode.__le__.rst", "generated/skbio.tree.TreeNode.__len__.rst", "generated/skbio.tree.TreeNode.__lt__.rst", "generated/skbio.tree.TreeNode.__ne__.rst", "generated/skbio.tree.TreeNode.__str__.rst", "generated/skbio.tree.TreeNode.accumulate_to_ancestor.rst", "generated/skbio.tree.TreeNode.ancestors.rst", "generated/skbio.tree.TreeNode.append.rst", "generated/skbio.tree.TreeNode.ascii_art.rst", "generated/skbio.tree.TreeNode.assign_ids.rst", "generated/skbio.tree.TreeNode.assign_supports.rst", "generated/skbio.tree.TreeNode.bifurcate.rst", "generated/skbio.tree.TreeNode.cache_attr.rst", "generated/skbio.tree.TreeNode.compare_rfd.rst", "generated/skbio.tree.TreeNode.compare_subsets.rst", "generated/skbio.tree.TreeNode.compare_tip_distances.rst", "generated/skbio.tree.TreeNode.copy.rst", "generated/skbio.tree.TreeNode.count.rst", "generated/skbio.tree.TreeNode.create_caches.rst", "generated/skbio.tree.TreeNode.deepcopy.rst", "generated/skbio.tree.TreeNode.descending_branch_length.rst", "generated/skbio.tree.TreeNode.distance.rst", "generated/skbio.tree.TreeNode.extend.rst", "generated/skbio.tree.TreeNode.find.rst", "generated/skbio.tree.TreeNode.find_all.rst", "generated/skbio.tree.TreeNode.find_by_func.rst", "generated/skbio.tree.TreeNode.find_by_id.rst", "generated/skbio.tree.TreeNode.from_linkage_matrix.rst", "generated/skbio.tree.TreeNode.from_taxdump.rst", "generated/skbio.tree.TreeNode.from_taxonomy.rst", "generated/skbio.tree.TreeNode.get_max_distance.rst", "generated/skbio.tree.TreeNode.has_children.rst", "generated/skbio.tree.TreeNode.index_tree.rst", "generated/skbio.tree.TreeNode.invalidate_caches.rst", "generated/skbio.tree.TreeNode.is_root.rst", "generated/skbio.tree.TreeNode.is_tip.rst", "generated/skbio.tree.TreeNode.lca.rst", "generated/skbio.tree.TreeNode.levelorder.rst", "generated/skbio.tree.TreeNode.lowest_common_ancestor.rst", "generated/skbio.tree.TreeNode.neighbors.rst", "generated/skbio.tree.TreeNode.non_tips.rst", "generated/skbio.tree.TreeNode.observed_node_counts.rst", "generated/skbio.tree.TreeNode.pop.rst", "generated/skbio.tree.TreeNode.postorder.rst", "generated/skbio.tree.TreeNode.pre_and_postorder.rst", "generated/skbio.tree.TreeNode.preorder.rst", "generated/skbio.tree.TreeNode.prune.rst", "generated/skbio.tree.TreeNode.read.rst", "generated/skbio.tree.TreeNode.remove.rst", "generated/skbio.tree.TreeNode.remove_deleted.rst", "generated/skbio.tree.TreeNode.root.rst", "generated/skbio.tree.TreeNode.root_at.rst", "generated/skbio.tree.TreeNode.root_at_midpoint.rst", "generated/skbio.tree.TreeNode.shear.rst", "generated/skbio.tree.TreeNode.shuffle.rst", "generated/skbio.tree.TreeNode.siblings.rst", "generated/skbio.tree.TreeNode.subset.rst", "generated/skbio.tree.TreeNode.subsets.rst", "generated/skbio.tree.TreeNode.subtree.rst", "generated/skbio.tree.TreeNode.tip_tip_distances.rst", "generated/skbio.tree.TreeNode.tips.rst", "generated/skbio.tree.TreeNode.to_array.rst", "generated/skbio.tree.TreeNode.to_taxonomy.rst", "generated/skbio.tree.TreeNode.traverse.rst", "generated/skbio.tree.TreeNode.unpack.rst", "generated/skbio.tree.TreeNode.unpack_by_func.rst", "generated/skbio.tree.TreeNode.unrooted_copy.rst", "generated/skbio.tree.TreeNode.unrooted_deepcopy.rst", "generated/skbio.tree.TreeNode.write.rst", "generated/skbio.tree.majority_rule.rst", "generated/skbio.tree.nj.rst", "generated/skbio.util.EfficiencyWarning.rst", "generated/skbio.util.RepresentationWarning.rst", "generated/skbio.util.assert_data_frame_almost_equal.rst", "generated/skbio.util.assert_ordination_results_equal.rst", "generated/skbio.util.cardinal_to_ordinal.rst", "generated/skbio.util.classproperty.rst", "generated/skbio.util.classproperty.__delete__.rst", "generated/skbio.util.classproperty.__eq__.rst", "generated/skbio.util.classproperty.__ge__.rst", "generated/skbio.util.classproperty.__get__.rst", "generated/skbio.util.classproperty.__getstate__.rst", "generated/skbio.util.classproperty.__gt__.rst", "generated/skbio.util.classproperty.__hash__.rst", "generated/skbio.util.classproperty.__le__.rst", "generated/skbio.util.classproperty.__lt__.rst", "generated/skbio.util.classproperty.__ne__.rst", "generated/skbio.util.classproperty.__set__.rst", "generated/skbio.util.classproperty.__set_name__.rst", "generated/skbio.util.classproperty.__str__.rst", "generated/skbio.util.classproperty.deleter.rst", "generated/skbio.util.classproperty.getter.rst", "generated/skbio.util.classproperty.setter.rst", "generated/skbio.util.find_duplicates.rst", "generated/skbio.util.get_data_path.rst", "generated/skbio.util.safe_md5.rst", "generated/skbio.workflow.Workflow.rst", "generated/skbio.workflow.Workflow.__call__.rst", "generated/skbio.workflow.Workflow.__eq__.rst", "generated/skbio.workflow.Workflow.__ge__.rst", "generated/skbio.workflow.Workflow.__getstate__.rst", "generated/skbio.workflow.Workflow.__gt__.rst", "generated/skbio.workflow.Workflow.__hash__.rst", "generated/skbio.workflow.Workflow.__le__.rst", "generated/skbio.workflow.Workflow.__lt__.rst", "generated/skbio.workflow.Workflow.__ne__.rst", "generated/skbio.workflow.Workflow.__str__.rst", "generated/skbio.workflow.Workflow.initialize_state.rst", "generated/skbio.workflow.method.rst", "generated/skbio.workflow.method.__call__.rst", "generated/skbio.workflow.method.__eq__.rst", "generated/skbio.workflow.method.__ge__.rst", "generated/skbio.workflow.method.__getstate__.rst", "generated/skbio.workflow.method.__gt__.rst", "generated/skbio.workflow.method.__hash__.rst", "generated/skbio.workflow.method.__le__.rst", "generated/skbio.workflow.method.__lt__.rst", "generated/skbio.workflow.method.__ne__.rst", "generated/skbio.workflow.method.__str__.rst", "generated/skbio.workflow.requires.rst", "generated/skbio.workflow.requires.__call__.rst", "generated/skbio.workflow.requires.__eq__.rst", "generated/skbio.workflow.requires.__ge__.rst", "generated/skbio.workflow.requires.__getstate__.rst", "generated/skbio.workflow.requires.__gt__.rst", "generated/skbio.workflow.requires.__hash__.rst", "generated/skbio.workflow.requires.__le__.rst", "generated/skbio.workflow.requires.__lt__.rst", "generated/skbio.workflow.requires.__ne__.rst", "generated/skbio.workflow.requires.__str__.rst", "index.rst", "io.rst", "metadata.rst", "sequence.rst", "stats.rst", "table.rst", "tree.rst", "util.rst", "workflow.rst"], "indexentries": {"__bool__() (skbio.alignment.tabularmsa method)": [[66, "skbio.alignment.TabularMSA.__bool__", false]], "__bool__() (skbio.sequence.dna method)": [[378, "skbio.sequence.DNA.__bool__", false]], "__bool__() (skbio.sequence.grammaredsequence method)": [[449, "skbio.sequence.GrammaredSequence.__bool__", false]], "__bool__() (skbio.sequence.protein method)": [[500, "skbio.sequence.Protein.__bool__", false]], "__bool__() (skbio.sequence.rna method)": [[553, "skbio.sequence.RNA.__bool__", false]], "__bool__() (skbio.sequence.sequence method)": [[612, "skbio.sequence.Sequence.__bool__", false]], "__call__() (skbio.alignment.stripedsmithwaterman method)": [[54, "skbio.alignment.StripedSmithWaterman.__call__", false]], "__call__() (skbio.workflow.method method)": [[1068, "skbio.workflow.method.__call__", false]], "__call__() (skbio.workflow.requires method)": [[1079, "skbio.workflow.requires.__call__", false]], "__call__() (skbio.workflow.workflow method)": [[1056, "skbio.workflow.Workflow.__call__", false]], "__contains__() (skbio.alignment.tabularmsa method)": [[67, "skbio.alignment.TabularMSA.__contains__", false]], "__contains__() (skbio.sequence.dna method)": [[379, "skbio.sequence.DNA.__contains__", false]], "__contains__() (skbio.sequence.grammaredsequence method)": [[450, "skbio.sequence.GrammaredSequence.__contains__", false]], "__contains__() (skbio.sequence.protein method)": [[501, "skbio.sequence.Protein.__contains__", false]], "__contains__() (skbio.sequence.rna method)": [[554, "skbio.sequence.RNA.__contains__", false]], "__contains__() (skbio.sequence.sequence method)": [[613, "skbio.sequence.Sequence.__contains__", false]], "__contains__() (skbio.sequence.substitutionmatrix method)": [[650, "skbio.sequence.SubstitutionMatrix.__contains__", false]], "__contains__() (skbio.stats.distance.dissimilaritymatrix method)": [[703, "skbio.stats.distance.DissimilarityMatrix.__contains__", false]], "__contains__() (skbio.stats.distance.distancematrix method)": [[726, "skbio.stats.distance.DistanceMatrix.__contains__", false]], "__copy__() (skbio.alignment.tabularmsa method)": [[68, "skbio.alignment.TabularMSA.__copy__", false]], "__copy__() (skbio.metadata.intervalmetadata method)": [[304, "skbio.metadata.IntervalMetadata.__copy__", false]], "__copy__() (skbio.sequence.dna method)": [[380, "skbio.sequence.DNA.__copy__", false]], "__copy__() (skbio.sequence.grammaredsequence method)": [[451, "skbio.sequence.GrammaredSequence.__copy__", false]], "__copy__() (skbio.sequence.protein method)": [[502, "skbio.sequence.Protein.__copy__", false]], "__copy__() (skbio.sequence.rna method)": [[555, "skbio.sequence.RNA.__copy__", false]], "__copy__() (skbio.sequence.sequence method)": [[614, "skbio.sequence.Sequence.__copy__", false]], "__copy__() (skbio.tree.treenode method)": [[950, "skbio.tree.TreeNode.__copy__", false]], "__deepcopy__() (skbio.alignment.tabularmsa method)": [[69, "skbio.alignment.TabularMSA.__deepcopy__", false]], "__deepcopy__() (skbio.metadata.intervalmetadata method)": [[305, "skbio.metadata.IntervalMetadata.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.dna method)": [[381, "skbio.sequence.DNA.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.grammaredsequence method)": [[452, "skbio.sequence.GrammaredSequence.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.protein method)": [[503, "skbio.sequence.Protein.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.rna method)": [[556, "skbio.sequence.RNA.__deepcopy__", false]], "__deepcopy__() (skbio.sequence.sequence method)": [[615, "skbio.sequence.Sequence.__deepcopy__", false]], "__deepcopy__() (skbio.tree.treenode method)": [[951, "skbio.tree.TreeNode.__deepcopy__", false]], "__delete__() (skbio.util.classproperty method)": [[1036, "skbio.util.classproperty.__delete__", false]], "__eq__() (skbio.alignment.alignmentstructure method)": [[21, "skbio.alignment.AlignmentStructure.__eq__", false]], "__eq__() (skbio.alignment.alignpath method)": [[4, "skbio.alignment.AlignPath.__eq__", false]], "__eq__() (skbio.alignment.pairalignpath method)": [[35, "skbio.alignment.PairAlignPath.__eq__", false]], "__eq__() (skbio.alignment.stripedsmithwaterman method)": [[55, "skbio.alignment.StripedSmithWaterman.__eq__", false]], "__eq__() (skbio.alignment.tabularmsa method)": [[70, "skbio.alignment.TabularMSA.__eq__", false]], "__eq__() (skbio.embedding.embedding method)": [[151, "skbio.embedding.Embedding.__eq__", false]], "__eq__() (skbio.embedding.proteinembedding method)": [[162, "skbio.embedding.ProteinEmbedding.__eq__", false]], "__eq__() (skbio.embedding.proteinvector method)": [[175, "skbio.embedding.ProteinVector.__eq__", false]], "__eq__() (skbio.embedding.sequenceembedding method)": [[188, "skbio.embedding.SequenceEmbedding.__eq__", false]], "__eq__() (skbio.embedding.sequencevector method)": [[199, "skbio.embedding.SequenceVector.__eq__", false]], "__eq__() (skbio.io.registry.format method)": [[234, "skbio.io.registry.Format.__eq__", false]], "__eq__() (skbio.io.registry.ioregistry method)": [[247, "skbio.io.registry.IORegistry.__eq__", false]], "__eq__() (skbio.metadata.categoricalmetadatacolumn method)": [[276, "skbio.metadata.CategoricalMetadataColumn.__eq__", false]], "__eq__() (skbio.metadata.interval method)": [[294, "skbio.metadata.Interval.__eq__", false]], "__eq__() (skbio.metadata.intervalmetadata method)": [[306, "skbio.metadata.IntervalMetadata.__eq__", false]], "__eq__() (skbio.metadata.metadatacolumn method)": [[323, "skbio.metadata.MetadataColumn.__eq__", false]], "__eq__() (skbio.metadata.numericmetadatacolumn method)": [[341, "skbio.metadata.NumericMetadataColumn.__eq__", false]], "__eq__() (skbio.metadata.samplemetadata method)": [[359, "skbio.metadata.SampleMetadata.__eq__", false]], "__eq__() (skbio.sequence.dna method)": [[382, "skbio.sequence.DNA.__eq__", false]], "__eq__() (skbio.sequence.geneticcode method)": [[437, "skbio.sequence.GeneticCode.__eq__", false]], "__eq__() (skbio.sequence.grammaredsequence method)": [[453, "skbio.sequence.GrammaredSequence.__eq__", false]], "__eq__() (skbio.sequence.protein method)": [[504, "skbio.sequence.Protein.__eq__", false]], "__eq__() (skbio.sequence.rna method)": [[557, "skbio.sequence.RNA.__eq__", false]], "__eq__() (skbio.sequence.sequence method)": [[616, "skbio.sequence.Sequence.__eq__", false]], "__eq__() (skbio.sequence.substitutionmatrix method)": [[651, "skbio.sequence.SubstitutionMatrix.__eq__", false]], "__eq__() (skbio.stats.distance.dissimilaritymatrix method)": [[704, "skbio.stats.distance.DissimilarityMatrix.__eq__", false]], "__eq__() (skbio.stats.distance.distancematrix method)": [[727, "skbio.stats.distance.DistanceMatrix.__eq__", false]], "__eq__() (skbio.stats.gradient.averagegradientanova method)": [[762, "skbio.stats.gradient.AverageGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.categoryresults method)": [[773, "skbio.stats.gradient.CategoryResults.__eq__", false]], "__eq__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[784, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.gradientanova method)": [[795, "skbio.stats.gradient.GradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.gradientanovaresults method)": [[806, "skbio.stats.gradient.GradientANOVAResults.__eq__", false]], "__eq__() (skbio.stats.gradient.groupresults method)": [[817, "skbio.stats.gradient.GroupResults.__eq__", false]], "__eq__() (skbio.stats.gradient.trajectorygradientanova method)": [[828, "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[839, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", false]], "__eq__() (skbio.stats.ordination.ordinationresults method)": [[852, "skbio.stats.ordination.OrdinationResults.__eq__", false]], "__eq__() (skbio.table.table method)": [[882, "skbio.table.Table.__eq__", false]], "__eq__() (skbio.tree.treenode method)": [[952, "skbio.tree.TreeNode.__eq__", false]], "__eq__() (skbio.util.classproperty method)": [[1037, "skbio.util.classproperty.__eq__", false]], "__eq__() (skbio.workflow.method method)": [[1069, "skbio.workflow.method.__eq__", false]], "__eq__() (skbio.workflow.requires method)": [[1080, "skbio.workflow.requires.__eq__", false]], "__eq__() (skbio.workflow.workflow method)": [[1057, "skbio.workflow.Workflow.__eq__", false]], "__ge__() (skbio.alignment.alignmentstructure method)": [[22, "skbio.alignment.AlignmentStructure.__ge__", false]], "__ge__() (skbio.alignment.alignpath method)": [[5, "skbio.alignment.AlignPath.__ge__", false]], "__ge__() (skbio.alignment.pairalignpath method)": [[36, "skbio.alignment.PairAlignPath.__ge__", false]], "__ge__() (skbio.alignment.stripedsmithwaterman method)": [[56, "skbio.alignment.StripedSmithWaterman.__ge__", false]], "__ge__() (skbio.alignment.tabularmsa method)": [[71, "skbio.alignment.TabularMSA.__ge__", false]], "__ge__() (skbio.embedding.embedding method)": [[152, "skbio.embedding.Embedding.__ge__", false]], "__ge__() (skbio.embedding.proteinembedding method)": [[163, "skbio.embedding.ProteinEmbedding.__ge__", false]], "__ge__() (skbio.embedding.proteinvector method)": [[176, "skbio.embedding.ProteinVector.__ge__", false]], "__ge__() (skbio.embedding.sequenceembedding method)": [[189, "skbio.embedding.SequenceEmbedding.__ge__", false]], "__ge__() (skbio.embedding.sequencevector method)": [[200, "skbio.embedding.SequenceVector.__ge__", false]], "__ge__() (skbio.io.registry.format method)": [[235, "skbio.io.registry.Format.__ge__", false]], "__ge__() (skbio.io.registry.ioregistry method)": [[248, "skbio.io.registry.IORegistry.__ge__", false]], "__ge__() (skbio.metadata.categoricalmetadatacolumn method)": [[277, "skbio.metadata.CategoricalMetadataColumn.__ge__", false]], "__ge__() (skbio.metadata.interval method)": [[295, "skbio.metadata.Interval.__ge__", false]], "__ge__() (skbio.metadata.intervalmetadata method)": [[307, "skbio.metadata.IntervalMetadata.__ge__", false]], "__ge__() (skbio.metadata.metadatacolumn method)": [[324, "skbio.metadata.MetadataColumn.__ge__", false]], "__ge__() (skbio.metadata.numericmetadatacolumn method)": [[342, "skbio.metadata.NumericMetadataColumn.__ge__", false]], "__ge__() (skbio.metadata.samplemetadata method)": [[360, "skbio.metadata.SampleMetadata.__ge__", false]], "__ge__() (skbio.sequence.dna method)": [[383, "skbio.sequence.DNA.__ge__", false]], "__ge__() (skbio.sequence.geneticcode method)": [[438, "skbio.sequence.GeneticCode.__ge__", false]], "__ge__() (skbio.sequence.grammaredsequence method)": [[454, "skbio.sequence.GrammaredSequence.__ge__", false]], "__ge__() (skbio.sequence.protein method)": [[505, "skbio.sequence.Protein.__ge__", false]], "__ge__() (skbio.sequence.rna method)": [[558, "skbio.sequence.RNA.__ge__", false]], "__ge__() (skbio.sequence.sequence method)": [[617, "skbio.sequence.Sequence.__ge__", false]], "__ge__() (skbio.sequence.substitutionmatrix method)": [[652, "skbio.sequence.SubstitutionMatrix.__ge__", false]], "__ge__() (skbio.stats.distance.dissimilaritymatrix method)": [[705, "skbio.stats.distance.DissimilarityMatrix.__ge__", false]], "__ge__() (skbio.stats.distance.distancematrix method)": [[728, "skbio.stats.distance.DistanceMatrix.__ge__", false]], "__ge__() (skbio.stats.gradient.averagegradientanova method)": [[763, "skbio.stats.gradient.AverageGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.categoryresults method)": [[774, "skbio.stats.gradient.CategoryResults.__ge__", false]], "__ge__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[785, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.gradientanova method)": [[796, "skbio.stats.gradient.GradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.gradientanovaresults method)": [[807, "skbio.stats.gradient.GradientANOVAResults.__ge__", false]], "__ge__() (skbio.stats.gradient.groupresults method)": [[818, "skbio.stats.gradient.GroupResults.__ge__", false]], "__ge__() (skbio.stats.gradient.trajectorygradientanova method)": [[829, "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[840, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", false]], "__ge__() (skbio.stats.ordination.ordinationresults method)": [[853, "skbio.stats.ordination.OrdinationResults.__ge__", false]], "__ge__() (skbio.table.table method)": [[883, "skbio.table.Table.__ge__", false]], "__ge__() (skbio.tree.treenode method)": [[953, "skbio.tree.TreeNode.__ge__", false]], "__ge__() (skbio.util.classproperty method)": [[1038, "skbio.util.classproperty.__ge__", false]], "__ge__() (skbio.workflow.method method)": [[1070, "skbio.workflow.method.__ge__", false]], "__ge__() (skbio.workflow.requires method)": [[1081, "skbio.workflow.requires.__ge__", false]], "__ge__() (skbio.workflow.workflow method)": [[1058, "skbio.workflow.Workflow.__ge__", false]], "__get__() (skbio.util.classproperty method)": [[1039, "skbio.util.classproperty.__get__", false]], "__getitem__() (skbio.alignment.alignmentstructure method)": [[23, "skbio.alignment.AlignmentStructure.__getitem__", false]], "__getitem__() (skbio.alignment.tabularmsa method)": [[72, "skbio.alignment.TabularMSA.__getitem__", false]], "__getitem__() (skbio.sequence.dna method)": [[384, "skbio.sequence.DNA.__getitem__", false]], "__getitem__() (skbio.sequence.grammaredsequence method)": [[455, "skbio.sequence.GrammaredSequence.__getitem__", false]], "__getitem__() (skbio.sequence.protein method)": [[506, "skbio.sequence.Protein.__getitem__", false]], "__getitem__() (skbio.sequence.rna method)": [[559, "skbio.sequence.RNA.__getitem__", false]], "__getitem__() (skbio.sequence.sequence method)": [[618, "skbio.sequence.Sequence.__getitem__", false]], "__getitem__() (skbio.sequence.substitutionmatrix method)": [[653, "skbio.sequence.SubstitutionMatrix.__getitem__", false]], "__getitem__() (skbio.stats.distance.dissimilaritymatrix method)": [[706, "skbio.stats.distance.DissimilarityMatrix.__getitem__", false]], "__getitem__() (skbio.stats.distance.distancematrix method)": [[729, "skbio.stats.distance.DistanceMatrix.__getitem__", false]], "__getitem__() (skbio.table.table method)": [[884, "skbio.table.Table.__getitem__", false]], "__getitem__() (skbio.tree.treenode method)": [[954, "skbio.tree.TreeNode.__getitem__", false]], "__getstate__() (skbio.alignment.alignmentstructure method)": [[24, "skbio.alignment.AlignmentStructure.__getstate__", false]], "__getstate__() (skbio.alignment.alignpath method)": [[6, "skbio.alignment.AlignPath.__getstate__", false]], "__getstate__() (skbio.alignment.pairalignpath method)": [[37, "skbio.alignment.PairAlignPath.__getstate__", false]], "__getstate__() (skbio.alignment.stripedsmithwaterman method)": [[57, "skbio.alignment.StripedSmithWaterman.__getstate__", false]], "__getstate__() (skbio.alignment.tabularmsa method)": [[73, "skbio.alignment.TabularMSA.__getstate__", false]], "__getstate__() (skbio.embedding.embedding method)": [[153, "skbio.embedding.Embedding.__getstate__", false]], "__getstate__() (skbio.embedding.proteinembedding method)": [[164, "skbio.embedding.ProteinEmbedding.__getstate__", false]], "__getstate__() (skbio.embedding.proteinvector method)": [[177, "skbio.embedding.ProteinVector.__getstate__", false]], "__getstate__() (skbio.embedding.sequenceembedding method)": [[190, "skbio.embedding.SequenceEmbedding.__getstate__", false]], "__getstate__() (skbio.embedding.sequencevector method)": [[201, "skbio.embedding.SequenceVector.__getstate__", false]], "__getstate__() (skbio.io.registry.format method)": [[236, "skbio.io.registry.Format.__getstate__", false]], "__getstate__() (skbio.io.registry.ioregistry method)": [[249, "skbio.io.registry.IORegistry.__getstate__", false]], "__getstate__() (skbio.metadata.categoricalmetadatacolumn method)": [[278, "skbio.metadata.CategoricalMetadataColumn.__getstate__", false]], "__getstate__() (skbio.metadata.interval method)": [[296, "skbio.metadata.Interval.__getstate__", false]], "__getstate__() (skbio.metadata.intervalmetadata method)": [[308, "skbio.metadata.IntervalMetadata.__getstate__", false]], "__getstate__() (skbio.metadata.metadatacolumn method)": [[325, "skbio.metadata.MetadataColumn.__getstate__", false]], "__getstate__() (skbio.metadata.numericmetadatacolumn method)": [[343, "skbio.metadata.NumericMetadataColumn.__getstate__", false]], "__getstate__() (skbio.metadata.samplemetadata method)": [[361, "skbio.metadata.SampleMetadata.__getstate__", false]], "__getstate__() (skbio.sequence.dna method)": [[385, "skbio.sequence.DNA.__getstate__", false]], "__getstate__() (skbio.sequence.geneticcode method)": [[439, "skbio.sequence.GeneticCode.__getstate__", false]], "__getstate__() (skbio.sequence.grammaredsequence method)": [[456, "skbio.sequence.GrammaredSequence.__getstate__", false]], "__getstate__() (skbio.sequence.protein method)": [[507, "skbio.sequence.Protein.__getstate__", false]], "__getstate__() (skbio.sequence.rna method)": [[560, "skbio.sequence.RNA.__getstate__", false]], "__getstate__() (skbio.sequence.sequence method)": [[619, "skbio.sequence.Sequence.__getstate__", false]], "__getstate__() (skbio.sequence.substitutionmatrix method)": [[654, "skbio.sequence.SubstitutionMatrix.__getstate__", false]], "__getstate__() (skbio.stats.distance.dissimilaritymatrix method)": [[707, "skbio.stats.distance.DissimilarityMatrix.__getstate__", false]], "__getstate__() (skbio.stats.distance.distancematrix method)": [[730, "skbio.stats.distance.DistanceMatrix.__getstate__", false]], "__getstate__() (skbio.stats.gradient.averagegradientanova method)": [[764, "skbio.stats.gradient.AverageGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.categoryresults method)": [[775, "skbio.stats.gradient.CategoryResults.__getstate__", false]], "__getstate__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[786, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.gradientanova method)": [[797, "skbio.stats.gradient.GradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.gradientanovaresults method)": [[808, "skbio.stats.gradient.GradientANOVAResults.__getstate__", false]], "__getstate__() (skbio.stats.gradient.groupresults method)": [[819, "skbio.stats.gradient.GroupResults.__getstate__", false]], "__getstate__() (skbio.stats.gradient.trajectorygradientanova method)": [[830, "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[841, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", false]], "__getstate__() (skbio.stats.ordination.ordinationresults method)": [[854, "skbio.stats.ordination.OrdinationResults.__getstate__", false]], "__getstate__() (skbio.table.table method)": [[885, "skbio.table.Table.__getstate__", false]], "__getstate__() (skbio.tree.treenode method)": [[955, "skbio.tree.TreeNode.__getstate__", false]], "__getstate__() (skbio.util.classproperty method)": [[1040, "skbio.util.classproperty.__getstate__", false]], "__getstate__() (skbio.workflow.method method)": [[1071, "skbio.workflow.method.__getstate__", false]], "__getstate__() (skbio.workflow.requires method)": [[1082, "skbio.workflow.requires.__getstate__", false]], "__getstate__() (skbio.workflow.workflow method)": [[1059, "skbio.workflow.Workflow.__getstate__", false]], "__gt__() (skbio.alignment.alignmentstructure method)": [[25, "skbio.alignment.AlignmentStructure.__gt__", false]], "__gt__() (skbio.alignment.alignpath method)": [[7, "skbio.alignment.AlignPath.__gt__", false]], "__gt__() (skbio.alignment.pairalignpath method)": [[38, "skbio.alignment.PairAlignPath.__gt__", false]], "__gt__() (skbio.alignment.stripedsmithwaterman method)": [[58, "skbio.alignment.StripedSmithWaterman.__gt__", false]], "__gt__() (skbio.alignment.tabularmsa method)": [[74, "skbio.alignment.TabularMSA.__gt__", false]], "__gt__() (skbio.embedding.embedding method)": [[154, "skbio.embedding.Embedding.__gt__", false]], "__gt__() (skbio.embedding.proteinembedding method)": [[165, "skbio.embedding.ProteinEmbedding.__gt__", false]], "__gt__() (skbio.embedding.proteinvector method)": [[178, "skbio.embedding.ProteinVector.__gt__", false]], "__gt__() (skbio.embedding.sequenceembedding method)": [[191, "skbio.embedding.SequenceEmbedding.__gt__", false]], "__gt__() (skbio.embedding.sequencevector method)": [[202, "skbio.embedding.SequenceVector.__gt__", false]], "__gt__() (skbio.io.registry.format method)": [[237, "skbio.io.registry.Format.__gt__", false]], "__gt__() (skbio.io.registry.ioregistry method)": [[250, "skbio.io.registry.IORegistry.__gt__", false]], "__gt__() (skbio.metadata.categoricalmetadatacolumn method)": [[279, "skbio.metadata.CategoricalMetadataColumn.__gt__", false]], "__gt__() (skbio.metadata.interval method)": [[297, "skbio.metadata.Interval.__gt__", false]], "__gt__() (skbio.metadata.intervalmetadata method)": [[309, "skbio.metadata.IntervalMetadata.__gt__", false]], "__gt__() (skbio.metadata.metadatacolumn method)": [[326, "skbio.metadata.MetadataColumn.__gt__", false]], "__gt__() (skbio.metadata.numericmetadatacolumn method)": [[344, "skbio.metadata.NumericMetadataColumn.__gt__", false]], "__gt__() (skbio.metadata.samplemetadata method)": [[362, "skbio.metadata.SampleMetadata.__gt__", false]], "__gt__() (skbio.sequence.dna method)": [[386, "skbio.sequence.DNA.__gt__", false]], "__gt__() (skbio.sequence.geneticcode method)": [[440, "skbio.sequence.GeneticCode.__gt__", false]], "__gt__() (skbio.sequence.grammaredsequence method)": [[457, "skbio.sequence.GrammaredSequence.__gt__", false]], "__gt__() (skbio.sequence.protein method)": [[508, "skbio.sequence.Protein.__gt__", false]], "__gt__() (skbio.sequence.rna method)": [[561, "skbio.sequence.RNA.__gt__", false]], "__gt__() (skbio.sequence.sequence method)": [[620, "skbio.sequence.Sequence.__gt__", false]], "__gt__() (skbio.sequence.substitutionmatrix method)": [[655, "skbio.sequence.SubstitutionMatrix.__gt__", false]], "__gt__() (skbio.stats.distance.dissimilaritymatrix method)": [[708, "skbio.stats.distance.DissimilarityMatrix.__gt__", false]], "__gt__() (skbio.stats.distance.distancematrix method)": [[731, "skbio.stats.distance.DistanceMatrix.__gt__", false]], "__gt__() (skbio.stats.gradient.averagegradientanova method)": [[765, "skbio.stats.gradient.AverageGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.categoryresults method)": [[776, "skbio.stats.gradient.CategoryResults.__gt__", false]], "__gt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[787, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.gradientanova method)": [[798, "skbio.stats.gradient.GradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.gradientanovaresults method)": [[809, "skbio.stats.gradient.GradientANOVAResults.__gt__", false]], "__gt__() (skbio.stats.gradient.groupresults method)": [[820, "skbio.stats.gradient.GroupResults.__gt__", false]], "__gt__() (skbio.stats.gradient.trajectorygradientanova method)": [[831, "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[842, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", false]], "__gt__() (skbio.stats.ordination.ordinationresults method)": [[855, "skbio.stats.ordination.OrdinationResults.__gt__", false]], "__gt__() (skbio.table.table method)": [[886, "skbio.table.Table.__gt__", false]], "__gt__() (skbio.tree.treenode method)": [[956, "skbio.tree.TreeNode.__gt__", false]], "__gt__() (skbio.util.classproperty method)": [[1041, "skbio.util.classproperty.__gt__", false]], "__gt__() (skbio.workflow.method method)": [[1072, "skbio.workflow.method.__gt__", false]], "__gt__() (skbio.workflow.requires method)": [[1083, "skbio.workflow.requires.__gt__", false]], "__gt__() (skbio.workflow.workflow method)": [[1060, "skbio.workflow.Workflow.__gt__", false]], "__hash__() (skbio.alignment.alignmentstructure method)": [[26, "skbio.alignment.AlignmentStructure.__hash__", false]], "__hash__() (skbio.alignment.alignpath method)": [[8, "skbio.alignment.AlignPath.__hash__", false]], "__hash__() (skbio.alignment.pairalignpath method)": [[39, "skbio.alignment.PairAlignPath.__hash__", false]], "__hash__() (skbio.alignment.stripedsmithwaterman method)": [[59, "skbio.alignment.StripedSmithWaterman.__hash__", false]], "__hash__() (skbio.embedding.embedding method)": [[155, "skbio.embedding.Embedding.__hash__", false]], "__hash__() (skbio.embedding.proteinembedding method)": [[166, "skbio.embedding.ProteinEmbedding.__hash__", false]], "__hash__() (skbio.embedding.proteinvector method)": [[179, "skbio.embedding.ProteinVector.__hash__", false]], "__hash__() (skbio.embedding.sequenceembedding method)": [[192, "skbio.embedding.SequenceEmbedding.__hash__", false]], "__hash__() (skbio.embedding.sequencevector method)": [[203, "skbio.embedding.SequenceVector.__hash__", false]], "__hash__() (skbio.io.registry.format method)": [[238, "skbio.io.registry.Format.__hash__", false]], "__hash__() (skbio.io.registry.ioregistry method)": [[251, "skbio.io.registry.IORegistry.__hash__", false]], "__hash__() (skbio.stats.gradient.averagegradientanova method)": [[766, "skbio.stats.gradient.AverageGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.categoryresults method)": [[777, "skbio.stats.gradient.CategoryResults.__hash__", false]], "__hash__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[788, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.gradientanova method)": [[799, "skbio.stats.gradient.GradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.gradientanovaresults method)": [[810, "skbio.stats.gradient.GradientANOVAResults.__hash__", false]], "__hash__() (skbio.stats.gradient.groupresults method)": [[821, "skbio.stats.gradient.GroupResults.__hash__", false]], "__hash__() (skbio.stats.gradient.trajectorygradientanova method)": [[832, "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[843, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", false]], "__hash__() (skbio.stats.ordination.ordinationresults method)": [[856, "skbio.stats.ordination.OrdinationResults.__hash__", false]], "__hash__() (skbio.tree.treenode method)": [[957, "skbio.tree.TreeNode.__hash__", false]], "__hash__() (skbio.util.classproperty method)": [[1042, "skbio.util.classproperty.__hash__", false]], "__hash__() (skbio.workflow.method method)": [[1073, "skbio.workflow.method.__hash__", false]], "__hash__() (skbio.workflow.requires method)": [[1084, "skbio.workflow.requires.__hash__", false]], "__hash__() (skbio.workflow.workflow method)": [[1061, "skbio.workflow.Workflow.__hash__", false]], "__iter__() (skbio.alignment.tabularmsa method)": [[75, "skbio.alignment.TabularMSA.__iter__", false]], "__iter__() (skbio.sequence.dna method)": [[387, "skbio.sequence.DNA.__iter__", false]], "__iter__() (skbio.sequence.grammaredsequence method)": [[458, "skbio.sequence.GrammaredSequence.__iter__", false]], "__iter__() (skbio.sequence.protein method)": [[509, "skbio.sequence.Protein.__iter__", false]], "__iter__() (skbio.sequence.rna method)": [[562, "skbio.sequence.RNA.__iter__", false]], "__iter__() (skbio.sequence.sequence method)": [[621, "skbio.sequence.Sequence.__iter__", false]], "__iter__() (skbio.table.table method)": [[887, "skbio.table.Table.__iter__", false]], "__iter__() (skbio.tree.treenode method)": [[958, "skbio.tree.TreeNode.__iter__", false]], "__le__() (skbio.alignment.alignmentstructure method)": [[27, "skbio.alignment.AlignmentStructure.__le__", false]], "__le__() (skbio.alignment.alignpath method)": [[9, "skbio.alignment.AlignPath.__le__", false]], "__le__() (skbio.alignment.pairalignpath method)": [[40, "skbio.alignment.PairAlignPath.__le__", false]], "__le__() (skbio.alignment.stripedsmithwaterman method)": [[60, "skbio.alignment.StripedSmithWaterman.__le__", false]], "__le__() (skbio.alignment.tabularmsa method)": [[76, "skbio.alignment.TabularMSA.__le__", false]], "__le__() (skbio.embedding.embedding method)": [[156, "skbio.embedding.Embedding.__le__", false]], "__le__() (skbio.embedding.proteinembedding method)": [[167, "skbio.embedding.ProteinEmbedding.__le__", false]], "__le__() (skbio.embedding.proteinvector method)": [[180, "skbio.embedding.ProteinVector.__le__", false]], "__le__() (skbio.embedding.sequenceembedding method)": [[193, "skbio.embedding.SequenceEmbedding.__le__", false]], "__le__() (skbio.embedding.sequencevector method)": [[204, "skbio.embedding.SequenceVector.__le__", false]], "__le__() (skbio.io.registry.format method)": [[239, "skbio.io.registry.Format.__le__", false]], "__le__() (skbio.io.registry.ioregistry method)": [[252, "skbio.io.registry.IORegistry.__le__", false]], "__le__() (skbio.metadata.categoricalmetadatacolumn method)": [[280, "skbio.metadata.CategoricalMetadataColumn.__le__", false]], "__le__() (skbio.metadata.interval method)": [[298, "skbio.metadata.Interval.__le__", false]], "__le__() (skbio.metadata.intervalmetadata method)": [[310, "skbio.metadata.IntervalMetadata.__le__", false]], "__le__() (skbio.metadata.metadatacolumn method)": [[327, "skbio.metadata.MetadataColumn.__le__", false]], "__le__() (skbio.metadata.numericmetadatacolumn method)": [[345, "skbio.metadata.NumericMetadataColumn.__le__", false]], "__le__() (skbio.metadata.samplemetadata method)": [[363, "skbio.metadata.SampleMetadata.__le__", false]], "__le__() (skbio.sequence.dna method)": [[388, "skbio.sequence.DNA.__le__", false]], "__le__() (skbio.sequence.geneticcode method)": [[441, "skbio.sequence.GeneticCode.__le__", false]], "__le__() (skbio.sequence.grammaredsequence method)": [[459, "skbio.sequence.GrammaredSequence.__le__", false]], "__le__() (skbio.sequence.protein method)": [[510, "skbio.sequence.Protein.__le__", false]], "__le__() (skbio.sequence.rna method)": [[563, "skbio.sequence.RNA.__le__", false]], "__le__() (skbio.sequence.sequence method)": [[622, "skbio.sequence.Sequence.__le__", false]], "__le__() (skbio.sequence.substitutionmatrix method)": [[656, "skbio.sequence.SubstitutionMatrix.__le__", false]], "__le__() (skbio.stats.distance.dissimilaritymatrix method)": [[709, "skbio.stats.distance.DissimilarityMatrix.__le__", false]], "__le__() (skbio.stats.distance.distancematrix method)": [[732, "skbio.stats.distance.DistanceMatrix.__le__", false]], "__le__() (skbio.stats.gradient.averagegradientanova method)": [[767, "skbio.stats.gradient.AverageGradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.categoryresults method)": [[778, "skbio.stats.gradient.CategoryResults.__le__", false]], "__le__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[789, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.gradientanova method)": [[800, "skbio.stats.gradient.GradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.gradientanovaresults method)": [[811, "skbio.stats.gradient.GradientANOVAResults.__le__", false]], "__le__() (skbio.stats.gradient.groupresults method)": [[822, "skbio.stats.gradient.GroupResults.__le__", false]], "__le__() (skbio.stats.gradient.trajectorygradientanova method)": [[833, "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", false]], "__le__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[844, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", false]], "__le__() (skbio.stats.ordination.ordinationresults method)": [[857, "skbio.stats.ordination.OrdinationResults.__le__", false]], "__le__() (skbio.table.table method)": [[888, "skbio.table.Table.__le__", false]], "__le__() (skbio.tree.treenode method)": [[959, "skbio.tree.TreeNode.__le__", false]], "__le__() (skbio.util.classproperty method)": [[1043, "skbio.util.classproperty.__le__", false]], "__le__() (skbio.workflow.method method)": [[1074, "skbio.workflow.method.__le__", false]], "__le__() (skbio.workflow.requires method)": [[1085, "skbio.workflow.requires.__le__", false]], "__le__() (skbio.workflow.workflow method)": [[1062, "skbio.workflow.Workflow.__le__", false]], "__len__() (skbio.alignment.tabularmsa method)": [[77, "skbio.alignment.TabularMSA.__len__", false]], "__len__() (skbio.sequence.dna method)": [[389, "skbio.sequence.DNA.__len__", false]], "__len__() (skbio.sequence.grammaredsequence method)": [[460, "skbio.sequence.GrammaredSequence.__len__", false]], "__len__() (skbio.sequence.protein method)": [[511, "skbio.sequence.Protein.__len__", false]], "__len__() (skbio.sequence.rna method)": [[564, "skbio.sequence.RNA.__len__", false]], "__len__() (skbio.sequence.sequence method)": [[623, "skbio.sequence.Sequence.__len__", false]], "__len__() (skbio.tree.treenode method)": [[960, "skbio.tree.TreeNode.__len__", false]], "__lt__() (skbio.alignment.alignmentstructure method)": [[28, "skbio.alignment.AlignmentStructure.__lt__", false]], "__lt__() (skbio.alignment.alignpath method)": [[10, "skbio.alignment.AlignPath.__lt__", false]], "__lt__() (skbio.alignment.pairalignpath method)": [[41, "skbio.alignment.PairAlignPath.__lt__", false]], "__lt__() (skbio.alignment.stripedsmithwaterman method)": [[61, "skbio.alignment.StripedSmithWaterman.__lt__", false]], "__lt__() (skbio.alignment.tabularmsa method)": [[78, "skbio.alignment.TabularMSA.__lt__", false]], "__lt__() (skbio.embedding.embedding method)": [[157, "skbio.embedding.Embedding.__lt__", false]], "__lt__() (skbio.embedding.proteinembedding method)": [[168, "skbio.embedding.ProteinEmbedding.__lt__", false]], "__lt__() (skbio.embedding.proteinvector method)": [[181, "skbio.embedding.ProteinVector.__lt__", false]], "__lt__() (skbio.embedding.sequenceembedding method)": [[194, "skbio.embedding.SequenceEmbedding.__lt__", false]], "__lt__() (skbio.embedding.sequencevector method)": [[205, "skbio.embedding.SequenceVector.__lt__", false]], "__lt__() (skbio.io.registry.format method)": [[240, "skbio.io.registry.Format.__lt__", false]], "__lt__() (skbio.io.registry.ioregistry method)": [[253, "skbio.io.registry.IORegistry.__lt__", false]], "__lt__() (skbio.metadata.categoricalmetadatacolumn method)": [[281, "skbio.metadata.CategoricalMetadataColumn.__lt__", false]], "__lt__() (skbio.metadata.interval method)": [[299, "skbio.metadata.Interval.__lt__", false]], "__lt__() (skbio.metadata.intervalmetadata method)": [[311, "skbio.metadata.IntervalMetadata.__lt__", false]], "__lt__() (skbio.metadata.metadatacolumn method)": [[328, "skbio.metadata.MetadataColumn.__lt__", false]], "__lt__() (skbio.metadata.numericmetadatacolumn method)": [[346, "skbio.metadata.NumericMetadataColumn.__lt__", false]], "__lt__() (skbio.metadata.samplemetadata method)": [[364, "skbio.metadata.SampleMetadata.__lt__", false]], "__lt__() (skbio.sequence.dna method)": [[390, "skbio.sequence.DNA.__lt__", false]], "__lt__() (skbio.sequence.geneticcode method)": [[442, "skbio.sequence.GeneticCode.__lt__", false]], "__lt__() (skbio.sequence.grammaredsequence method)": [[461, "skbio.sequence.GrammaredSequence.__lt__", false]], "__lt__() (skbio.sequence.protein method)": [[512, "skbio.sequence.Protein.__lt__", false]], "__lt__() (skbio.sequence.rna method)": [[565, "skbio.sequence.RNA.__lt__", false]], "__lt__() (skbio.sequence.sequence method)": [[624, "skbio.sequence.Sequence.__lt__", false]], "__lt__() (skbio.sequence.substitutionmatrix method)": [[657, "skbio.sequence.SubstitutionMatrix.__lt__", false]], "__lt__() (skbio.stats.distance.dissimilaritymatrix method)": [[710, "skbio.stats.distance.DissimilarityMatrix.__lt__", false]], "__lt__() (skbio.stats.distance.distancematrix method)": [[733, "skbio.stats.distance.DistanceMatrix.__lt__", false]], "__lt__() (skbio.stats.gradient.averagegradientanova method)": [[768, "skbio.stats.gradient.AverageGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.categoryresults method)": [[779, "skbio.stats.gradient.CategoryResults.__lt__", false]], "__lt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[790, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.gradientanova method)": [[801, "skbio.stats.gradient.GradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.gradientanovaresults method)": [[812, "skbio.stats.gradient.GradientANOVAResults.__lt__", false]], "__lt__() (skbio.stats.gradient.groupresults method)": [[823, "skbio.stats.gradient.GroupResults.__lt__", false]], "__lt__() (skbio.stats.gradient.trajectorygradientanova method)": [[834, "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[845, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", false]], "__lt__() (skbio.stats.ordination.ordinationresults method)": [[858, "skbio.stats.ordination.OrdinationResults.__lt__", false]], "__lt__() (skbio.table.table method)": [[889, "skbio.table.Table.__lt__", false]], "__lt__() (skbio.tree.treenode method)": [[961, "skbio.tree.TreeNode.__lt__", false]], "__lt__() (skbio.util.classproperty method)": [[1044, "skbio.util.classproperty.__lt__", false]], "__lt__() (skbio.workflow.method method)": [[1075, "skbio.workflow.method.__lt__", false]], "__lt__() (skbio.workflow.requires method)": [[1086, "skbio.workflow.requires.__lt__", false]], "__lt__() (skbio.workflow.workflow method)": [[1063, "skbio.workflow.Workflow.__lt__", false]], "__ne__() (skbio.alignment.alignmentstructure method)": [[29, "skbio.alignment.AlignmentStructure.__ne__", false]], "__ne__() (skbio.alignment.alignpath method)": [[11, "skbio.alignment.AlignPath.__ne__", false]], "__ne__() (skbio.alignment.pairalignpath method)": [[42, "skbio.alignment.PairAlignPath.__ne__", false]], "__ne__() (skbio.alignment.stripedsmithwaterman method)": [[62, "skbio.alignment.StripedSmithWaterman.__ne__", false]], "__ne__() (skbio.alignment.tabularmsa method)": [[79, "skbio.alignment.TabularMSA.__ne__", false]], "__ne__() (skbio.embedding.embedding method)": [[158, "skbio.embedding.Embedding.__ne__", false]], "__ne__() (skbio.embedding.proteinembedding method)": [[169, "skbio.embedding.ProteinEmbedding.__ne__", false]], "__ne__() (skbio.embedding.proteinvector method)": [[182, "skbio.embedding.ProteinVector.__ne__", false]], "__ne__() (skbio.embedding.sequenceembedding method)": [[195, "skbio.embedding.SequenceEmbedding.__ne__", false]], "__ne__() (skbio.embedding.sequencevector method)": [[206, "skbio.embedding.SequenceVector.__ne__", false]], "__ne__() (skbio.io.registry.format method)": [[241, "skbio.io.registry.Format.__ne__", false]], "__ne__() (skbio.io.registry.ioregistry method)": [[254, "skbio.io.registry.IORegistry.__ne__", false]], "__ne__() (skbio.metadata.categoricalmetadatacolumn method)": [[282, "skbio.metadata.CategoricalMetadataColumn.__ne__", false]], "__ne__() (skbio.metadata.interval method)": [[300, "skbio.metadata.Interval.__ne__", false]], "__ne__() (skbio.metadata.intervalmetadata method)": [[312, "skbio.metadata.IntervalMetadata.__ne__", false]], "__ne__() (skbio.metadata.metadatacolumn method)": [[329, "skbio.metadata.MetadataColumn.__ne__", false]], "__ne__() (skbio.metadata.numericmetadatacolumn method)": [[347, "skbio.metadata.NumericMetadataColumn.__ne__", false]], "__ne__() (skbio.metadata.samplemetadata method)": [[365, "skbio.metadata.SampleMetadata.__ne__", false]], "__ne__() (skbio.sequence.dna method)": [[391, "skbio.sequence.DNA.__ne__", false]], "__ne__() (skbio.sequence.geneticcode method)": [[443, "skbio.sequence.GeneticCode.__ne__", false]], "__ne__() (skbio.sequence.grammaredsequence method)": [[462, "skbio.sequence.GrammaredSequence.__ne__", false]], "__ne__() (skbio.sequence.protein method)": [[513, "skbio.sequence.Protein.__ne__", false]], "__ne__() (skbio.sequence.rna method)": [[566, "skbio.sequence.RNA.__ne__", false]], "__ne__() (skbio.sequence.sequence method)": [[625, "skbio.sequence.Sequence.__ne__", false]], "__ne__() (skbio.sequence.substitutionmatrix method)": [[658, "skbio.sequence.SubstitutionMatrix.__ne__", false]], "__ne__() (skbio.stats.distance.dissimilaritymatrix method)": [[711, "skbio.stats.distance.DissimilarityMatrix.__ne__", false]], "__ne__() (skbio.stats.distance.distancematrix method)": [[734, "skbio.stats.distance.DistanceMatrix.__ne__", false]], "__ne__() (skbio.stats.gradient.averagegradientanova method)": [[769, "skbio.stats.gradient.AverageGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.categoryresults method)": [[780, "skbio.stats.gradient.CategoryResults.__ne__", false]], "__ne__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[791, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.gradientanova method)": [[802, "skbio.stats.gradient.GradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.gradientanovaresults method)": [[813, "skbio.stats.gradient.GradientANOVAResults.__ne__", false]], "__ne__() (skbio.stats.gradient.groupresults method)": [[824, "skbio.stats.gradient.GroupResults.__ne__", false]], "__ne__() (skbio.stats.gradient.trajectorygradientanova method)": [[835, "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[846, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", false]], "__ne__() (skbio.stats.ordination.ordinationresults method)": [[859, "skbio.stats.ordination.OrdinationResults.__ne__", false]], "__ne__() (skbio.table.table method)": [[890, "skbio.table.Table.__ne__", false]], "__ne__() (skbio.tree.treenode method)": [[962, "skbio.tree.TreeNode.__ne__", false]], "__ne__() (skbio.util.classproperty method)": [[1045, "skbio.util.classproperty.__ne__", false]], "__ne__() (skbio.workflow.method method)": [[1076, "skbio.workflow.method.__ne__", false]], "__ne__() (skbio.workflow.requires method)": [[1087, "skbio.workflow.requires.__ne__", false]], "__ne__() (skbio.workflow.workflow method)": [[1064, "skbio.workflow.Workflow.__ne__", false]], "__reversed__() (skbio.alignment.tabularmsa method)": [[80, "skbio.alignment.TabularMSA.__reversed__", false]], "__reversed__() (skbio.sequence.dna method)": [[392, "skbio.sequence.DNA.__reversed__", false]], "__reversed__() (skbio.sequence.grammaredsequence method)": [[463, "skbio.sequence.GrammaredSequence.__reversed__", false]], "__reversed__() (skbio.sequence.protein method)": [[514, "skbio.sequence.Protein.__reversed__", false]], "__reversed__() (skbio.sequence.rna method)": [[567, "skbio.sequence.RNA.__reversed__", false]], "__reversed__() (skbio.sequence.sequence method)": [[626, "skbio.sequence.Sequence.__reversed__", false]], "__set__() (skbio.util.classproperty method)": [[1046, "skbio.util.classproperty.__set__", false]], "__set_name__() (skbio.util.classproperty method)": [[1047, "skbio.util.classproperty.__set_name__", false]], "__setstate__() (skbio.alignment.alignmentstructure method)": [[30, "skbio.alignment.AlignmentStructure.__setstate__", false]], "__setstate__() (skbio.alignment.stripedsmithwaterman method)": [[63, "skbio.alignment.StripedSmithWaterman.__setstate__", false]], "__str__() (skbio.alignment.alignmentstructure method)": [[31, "skbio.alignment.AlignmentStructure.__str__", false]], "__str__() (skbio.alignment.alignpath method)": [[12, "skbio.alignment.AlignPath.__str__", false]], "__str__() (skbio.alignment.pairalignpath method)": [[43, "skbio.alignment.PairAlignPath.__str__", false]], "__str__() (skbio.alignment.stripedsmithwaterman method)": [[64, "skbio.alignment.StripedSmithWaterman.__str__", false]], "__str__() (skbio.alignment.tabularmsa method)": [[81, "skbio.alignment.TabularMSA.__str__", false]], "__str__() (skbio.embedding.embedding method)": [[159, "skbio.embedding.Embedding.__str__", false]], "__str__() (skbio.embedding.proteinembedding method)": [[170, "skbio.embedding.ProteinEmbedding.__str__", false]], "__str__() (skbio.embedding.proteinvector method)": [[183, "skbio.embedding.ProteinVector.__str__", false]], "__str__() (skbio.embedding.sequenceembedding method)": [[196, "skbio.embedding.SequenceEmbedding.__str__", false]], "__str__() (skbio.embedding.sequencevector method)": [[207, "skbio.embedding.SequenceVector.__str__", false]], "__str__() (skbio.io.registry.format method)": [[242, "skbio.io.registry.Format.__str__", false]], "__str__() (skbio.io.registry.ioregistry method)": [[255, "skbio.io.registry.IORegistry.__str__", false]], "__str__() (skbio.metadata.categoricalmetadatacolumn method)": [[283, "skbio.metadata.CategoricalMetadataColumn.__str__", false]], "__str__() (skbio.metadata.interval method)": [[301, "skbio.metadata.Interval.__str__", false]], "__str__() (skbio.metadata.intervalmetadata method)": [[313, "skbio.metadata.IntervalMetadata.__str__", false]], "__str__() (skbio.metadata.metadatacolumn method)": [[330, "skbio.metadata.MetadataColumn.__str__", false]], "__str__() (skbio.metadata.numericmetadatacolumn method)": [[348, "skbio.metadata.NumericMetadataColumn.__str__", false]], "__str__() (skbio.metadata.samplemetadata method)": [[366, "skbio.metadata.SampleMetadata.__str__", false]], "__str__() (skbio.sequence.dna method)": [[393, "skbio.sequence.DNA.__str__", false]], "__str__() (skbio.sequence.geneticcode method)": [[444, "skbio.sequence.GeneticCode.__str__", false]], "__str__() (skbio.sequence.grammaredsequence method)": [[464, "skbio.sequence.GrammaredSequence.__str__", false]], "__str__() (skbio.sequence.protein method)": [[515, "skbio.sequence.Protein.__str__", false]], "__str__() (skbio.sequence.rna method)": [[568, "skbio.sequence.RNA.__str__", false]], "__str__() (skbio.sequence.sequence method)": [[627, "skbio.sequence.Sequence.__str__", false]], "__str__() (skbio.sequence.substitutionmatrix method)": [[659, "skbio.sequence.SubstitutionMatrix.__str__", false]], "__str__() (skbio.stats.distance.dissimilaritymatrix method)": [[712, "skbio.stats.distance.DissimilarityMatrix.__str__", false]], "__str__() (skbio.stats.distance.distancematrix method)": [[735, "skbio.stats.distance.DistanceMatrix.__str__", false]], "__str__() (skbio.stats.gradient.averagegradientanova method)": [[770, "skbio.stats.gradient.AverageGradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.categoryresults method)": [[781, "skbio.stats.gradient.CategoryResults.__str__", false]], "__str__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[792, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.gradientanova method)": [[803, "skbio.stats.gradient.GradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.gradientanovaresults method)": [[814, "skbio.stats.gradient.GradientANOVAResults.__str__", false]], "__str__() (skbio.stats.gradient.groupresults method)": [[825, "skbio.stats.gradient.GroupResults.__str__", false]], "__str__() (skbio.stats.gradient.trajectorygradientanova method)": [[836, "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", false]], "__str__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[847, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", false]], "__str__() (skbio.stats.ordination.ordinationresults method)": [[860, "skbio.stats.ordination.OrdinationResults.__str__", false]], "__str__() (skbio.table.table method)": [[891, "skbio.table.Table.__str__", false]], "__str__() (skbio.tree.treenode method)": [[963, "skbio.tree.TreeNode.__str__", false]], "__str__() (skbio.util.classproperty method)": [[1048, "skbio.util.classproperty.__str__", false]], "__str__() (skbio.workflow.method method)": [[1077, "skbio.workflow.method.__str__", false]], "__str__() (skbio.workflow.requires method)": [[1088, "skbio.workflow.requires.__str__", false]], "__str__() (skbio.workflow.workflow method)": [[1065, "skbio.workflow.Workflow.__str__", false]], "accumulate_to_ancestor() (skbio.tree.treenode method)": [[964, "skbio.tree.TreeNode.accumulate_to_ancestor", false]], "ace() (in module skbio.diversity.alpha)": [[107, "skbio.diversity.alpha.ace", false]], "add() (skbio.metadata.intervalmetadata method)": [[314, "skbio.metadata.IntervalMetadata.add", false]], "add_format() (skbio.io.registry.ioregistry method)": [[256, "skbio.io.registry.IORegistry.add_format", false]], "add_group_metadata() (skbio.table.table method)": [[892, "skbio.table.Table.add_group_metadata", false]], "add_metadata() (skbio.table.table method)": [[893, "skbio.table.Table.add_metadata", false]], "align_to() (skbio.table.table method)": [[894, "skbio.table.Table.align_to", false]], "align_to_dataframe() (skbio.table.table method)": [[895, "skbio.table.Table.align_to_dataframe", false]], "align_tree() (skbio.table.table method)": [[896, "skbio.table.Table.align_tree", false]], "alignmentstructure (class in skbio.alignment)": [[20, "skbio.alignment.AlignmentStructure", false]], "alignpath (class in skbio.alignment)": [[3, "skbio.alignment.AlignPath", false]], "alpha_diversity() (in module skbio.diversity)": [[141, "skbio.diversity.alpha_diversity", false]], "alr() (in module skbio.stats.composition)": [[681, "skbio.stats.composition.alr", false]], "alr_inv() (in module skbio.stats.composition)": [[682, "skbio.stats.composition.alr_inv", false]], "ancestors() (skbio.tree.treenode method)": [[965, "skbio.tree.TreeNode.ancestors", false]], "ancom() (in module skbio.stats.composition)": [[683, "skbio.stats.composition.ancom", false]], "anosim() (in module skbio.stats.distance)": [[751, "skbio.stats.distance.anosim", false]], "append() (skbio.alignment.tabularmsa method)": [[82, "skbio.alignment.TabularMSA.append", false]], "append() (skbio.tree.treenode method)": [[966, "skbio.tree.TreeNode.append", false]], "ascii_art() (skbio.tree.treenode method)": [[967, "skbio.tree.TreeNode.ascii_art", false]], "assert_data_frame_almost_equal() (in module skbio.util)": [[1032, "skbio.util.assert_data_frame_almost_equal", false]], "assert_ordination_results_equal() (in module skbio.util)": [[1033, "skbio.util.assert_ordination_results_equal", false]], "assign_ids() (skbio.tree.treenode method)": [[968, "skbio.tree.TreeNode.assign_ids", false]], "assign_supports() (skbio.tree.treenode method)": [[969, "skbio.tree.TreeNode.assign_supports", false]], "averagegradientanova (class in skbio.stats.gradient)": [[761, "skbio.stats.gradient.AverageGradientANOVA", false]], "berger_parker_d() (in module skbio.diversity.alpha)": [[108, "skbio.diversity.alpha.berger_parker_d", false]], "beta_diversity() (in module skbio.diversity)": [[145, "skbio.diversity.beta_diversity", false]], "between() (skbio.sequence.substitutionmatrix method)": [[660, "skbio.sequence.SubstitutionMatrix.between", false]], "between() (skbio.stats.distance.dissimilaritymatrix method)": [[713, "skbio.stats.distance.DissimilarityMatrix.between", false]], "between() (skbio.stats.distance.distancematrix method)": [[736, "skbio.stats.distance.DistanceMatrix.between", false]], "bifurcate() (skbio.tree.treenode method)": [[970, "skbio.tree.TreeNode.bifurcate", false]], "bioenv() (in module skbio.stats.distance)": [[752, "skbio.stats.distance.bioenv", false]], "block_beta_diversity() (in module skbio.diversity)": [[146, "skbio.diversity.block_beta_diversity", false]], "brillouin_d() (in module skbio.diversity.alpha)": [[109, "skbio.diversity.alpha.brillouin_d", false]], "by_name() (skbio.sequence.substitutionmatrix class method)": [[661, "skbio.sequence.SubstitutionMatrix.by_name", false]], "bytes() (skbio.embedding.embedding method)": [[160, "skbio.embedding.Embedding.bytes", false]], "bytes() (skbio.embedding.proteinembedding method)": [[171, "skbio.embedding.ProteinEmbedding.bytes", false]], "bytes() (skbio.embedding.proteinvector method)": [[184, "skbio.embedding.ProteinVector.bytes", false]], "bytes() (skbio.embedding.sequenceembedding method)": [[197, "skbio.embedding.SequenceEmbedding.bytes", false]], "bytes() (skbio.embedding.sequencevector method)": [[208, "skbio.embedding.SequenceVector.bytes", false]], "ca() (in module skbio.stats.ordination)": [[864, "skbio.stats.ordination.ca", false]], "cache_attr() (skbio.tree.treenode method)": [[971, "skbio.tree.TreeNode.cache_attr", false]], "cardinal_to_ordinal() (in module skbio.util)": [[1034, "skbio.util.cardinal_to_ordinal", false]], "categoricalmetadatacolumn (class in skbio.metadata)": [[275, "skbio.metadata.CategoricalMetadataColumn", false]], "categoryresults (class in skbio.stats.gradient)": [[772, "skbio.stats.gradient.CategoryResults", false]], "cca() (in module skbio.stats.ordination)": [[865, "skbio.stats.ordination.cca", false]], "centralize() (in module skbio.stats.composition)": [[684, "skbio.stats.composition.centralize", false]], "chao1() (in module skbio.diversity.alpha)": [[110, "skbio.diversity.alpha.chao1", false]], "chao1_ci() (in module skbio.diversity.alpha)": [[111, "skbio.diversity.alpha.chao1_ci", false]], "classproperty (class in skbio.util)": [[1035, "skbio.util.classproperty", false]], "closure() (in module skbio.stats.composition)": [[685, "skbio.stats.composition.closure", false]], "clr() (in module skbio.stats.composition)": [[686, "skbio.stats.composition.clr", false]], "clr_inv() (in module skbio.stats.composition)": [[687, "skbio.stats.composition.clr_inv", false]], "collapse() (skbio.table.table method)": [[897, "skbio.table.Table.collapse", false]], "compare_rfd() (skbio.tree.treenode method)": [[972, "skbio.tree.TreeNode.compare_rfd", false]], "compare_subsets() (skbio.tree.treenode method)": [[973, "skbio.tree.TreeNode.compare_subsets", false]], "compare_tip_distances() (skbio.tree.treenode method)": [[974, "skbio.tree.TreeNode.compare_tip_distances", false]], "complement() (skbio.sequence.dna method)": [[394, "skbio.sequence.DNA.complement", false]], "complement() (skbio.sequence.rna method)": [[569, "skbio.sequence.RNA.complement", false]], "concat() (skbio.metadata.intervalmetadata class method)": [[315, "skbio.metadata.IntervalMetadata.concat", false]], "concat() (skbio.sequence.dna class method)": [[395, "skbio.sequence.DNA.concat", false]], "concat() (skbio.sequence.grammaredsequence class method)": [[465, "skbio.sequence.GrammaredSequence.concat", false]], "concat() (skbio.sequence.protein class method)": [[516, "skbio.sequence.Protein.concat", false]], "concat() (skbio.sequence.rna class method)": [[570, "skbio.sequence.RNA.concat", false]], "concat() (skbio.sequence.sequence class method)": [[628, "skbio.sequence.Sequence.concat", false]], "concat() (skbio.table.table method)": [[898, "skbio.table.Table.concat", false]], "condensed_form() (skbio.stats.distance.distancematrix method)": [[737, "skbio.stats.distance.DistanceMatrix.condensed_form", false]], "confidence_bound() (in module skbio.stats.power)": [[876, "skbio.stats.power.confidence_bound", false]], "consensus() (skbio.alignment.tabularmsa method)": [[83, "skbio.alignment.TabularMSA.consensus", false]], "conservation() (skbio.alignment.tabularmsa method)": [[84, "skbio.alignment.TabularMSA.conservation", false]], "copy() (skbio.sequence.substitutionmatrix method)": [[662, "skbio.sequence.SubstitutionMatrix.copy", false]], "copy() (skbio.stats.distance.dissimilaritymatrix method)": [[714, "skbio.stats.distance.DissimilarityMatrix.copy", false]], "copy() (skbio.stats.distance.distancematrix method)": [[738, "skbio.stats.distance.DistanceMatrix.copy", false]], "copy() (skbio.table.table method)": [[899, "skbio.table.Table.copy", false]], "copy() (skbio.tree.treenode method)": [[975, "skbio.tree.TreeNode.copy", false]], "corr() (in module skbio.stats.ordination)": [[866, "skbio.stats.ordination.corr", false]], "count() (skbio.sequence.dna method)": [[396, "skbio.sequence.DNA.count", false]], "count() (skbio.sequence.grammaredsequence method)": [[466, "skbio.sequence.GrammaredSequence.count", false]], "count() (skbio.sequence.protein method)": [[517, "skbio.sequence.Protein.count", false]], "count() (skbio.sequence.rna method)": [[571, "skbio.sequence.RNA.count", false]], "count() (skbio.sequence.sequence method)": [[629, "skbio.sequence.Sequence.count", false]], "count() (skbio.tree.treenode method)": [[976, "skbio.tree.TreeNode.count", false]], "create_caches() (skbio.tree.treenode method)": [[977, "skbio.tree.TreeNode.create_caches", false]], "create_format() (in module skbio.io.registry)": [[267, "skbio.io.registry.create_format", false]], "create_format() (skbio.io.registry.ioregistry method)": [[257, "skbio.io.registry.IORegistry.create_format", false]], "data() (skbio.table.table method)": [[900, "skbio.table.Table.data", false]], "deepcopy() (skbio.tree.treenode method)": [[978, "skbio.tree.TreeNode.deepcopy", false]], "definites() (skbio.sequence.dna method)": [[397, "skbio.sequence.DNA.definites", false]], "definites() (skbio.sequence.grammaredsequence method)": [[467, "skbio.sequence.GrammaredSequence.definites", false]], "definites() (skbio.sequence.protein method)": [[518, "skbio.sequence.Protein.definites", false]], "definites() (skbio.sequence.rna method)": [[572, "skbio.sequence.RNA.definites", false]], "degap() (skbio.sequence.dna method)": [[398, "skbio.sequence.DNA.degap", false]], "degap() (skbio.sequence.grammaredsequence method)": [[468, "skbio.sequence.GrammaredSequence.degap", false]], "degap() (skbio.sequence.protein method)": [[519, "skbio.sequence.Protein.degap", false]], "degap() (skbio.sequence.rna method)": [[573, "skbio.sequence.RNA.degap", false]], "degenerates() (skbio.sequence.dna method)": [[399, "skbio.sequence.DNA.degenerates", false]], "degenerates() (skbio.sequence.grammaredsequence method)": [[469, "skbio.sequence.GrammaredSequence.degenerates", false]], "degenerates() (skbio.sequence.protein method)": [[520, "skbio.sequence.Protein.degenerates", false]], "degenerates() (skbio.sequence.rna method)": [[574, "skbio.sequence.RNA.degenerates", false]], "del_metadata() (skbio.table.table method)": [[901, "skbio.table.Table.del_metadata", false]], "deleter() (skbio.util.classproperty method)": [[1049, "skbio.util.classproperty.deleter", false]], "delimited_self() (skbio.table.table method)": [[902, "skbio.table.Table.delimited_self", false]], "descending_branch_length() (skbio.tree.treenode method)": [[979, "skbio.tree.TreeNode.descending_branch_length", false]], "descriptive_equality() (skbio.table.table method)": [[903, "skbio.table.Table.descriptive_equality", false]], "dirmult_ttest() (in module skbio.stats.composition)": [[688, "skbio.stats.composition.dirmult_ttest", false]], "dissimilaritymatrix (class in skbio.stats.distance)": [[702, "skbio.stats.distance.DissimilarityMatrix", false]], "distance() (skbio.sequence.dna method)": [[400, "skbio.sequence.DNA.distance", false]], "distance() (skbio.sequence.grammaredsequence method)": [[470, "skbio.sequence.GrammaredSequence.distance", false]], "distance() (skbio.sequence.protein method)": [[521, "skbio.sequence.Protein.distance", false]], "distance() (skbio.sequence.rna method)": [[575, "skbio.sequence.RNA.distance", false]], "distance() (skbio.sequence.sequence method)": [[630, "skbio.sequence.Sequence.distance", false]], "distance() (skbio.tree.treenode method)": [[980, "skbio.tree.TreeNode.distance", false]], "distancematrix (class in skbio.stats.distance)": [[725, "skbio.stats.distance.DistanceMatrix", false]], "dna (class in skbio.sequence)": [[377, "skbio.sequence.DNA", false]], "dominance() (in module skbio.diversity.alpha)": [[112, "skbio.diversity.alpha.dominance", false]], "doubles() (in module skbio.diversity.alpha)": [[113, "skbio.diversity.alpha.doubles", false]], "drop() (skbio.metadata.interval method)": [[302, "skbio.metadata.Interval.drop", false]], "drop() (skbio.metadata.intervalmetadata method)": [[316, "skbio.metadata.IntervalMetadata.drop", false]], "drop_missing_values() (skbio.metadata.categoricalmetadatacolumn method)": [[284, "skbio.metadata.CategoricalMetadataColumn.drop_missing_values", false]], "drop_missing_values() (skbio.metadata.metadatacolumn method)": [[331, "skbio.metadata.MetadataColumn.drop_missing_values", false]], "drop_missing_values() (skbio.metadata.numericmetadatacolumn method)": [[349, "skbio.metadata.NumericMetadataColumn.drop_missing_values", false]], "e_matrix() (in module skbio.stats.ordination)": [[867, "skbio.stats.ordination.e_matrix", false]], "efficiencywarning": [[1030, "skbio.util.EfficiencyWarning", false]], "embed_vec_to_dataframe() (in module skbio.embedding)": [[209, "skbio.embedding.embed_vec_to_dataframe", false]], "embed_vec_to_distances() (in module skbio.embedding)": [[210, "skbio.embedding.embed_vec_to_distances", false]], "embed_vec_to_numpy() (in module skbio.embedding)": [[211, "skbio.embedding.embed_vec_to_numpy", false]], "embed_vec_to_ordination() (in module skbio.embedding)": [[212, "skbio.embedding.embed_vec_to_ordination", false]], "embedding (class in skbio.embedding)": [[150, "skbio.embedding.Embedding", false]], "enspie() (in module skbio.diversity.alpha)": [[114, "skbio.diversity.alpha.enspie", false]], "esty_ci() (in module skbio.diversity.alpha)": [[115, "skbio.diversity.alpha.esty_ci", false]], "example_table (in module skbio.table)": [[948, "skbio.table.example_table", false]], "exists() (skbio.table.table method)": [[904, "skbio.table.Table.exists", false]], "expand_degenerates() (skbio.sequence.dna method)": [[401, "skbio.sequence.DNA.expand_degenerates", false]], "expand_degenerates() (skbio.sequence.grammaredsequence method)": [[471, "skbio.sequence.GrammaredSequence.expand_degenerates", false]], "expand_degenerates() (skbio.sequence.protein method)": [[522, "skbio.sequence.Protein.expand_degenerates", false]], "expand_degenerates() (skbio.sequence.rna method)": [[576, "skbio.sequence.RNA.expand_degenerates", false]], "extend() (skbio.alignment.tabularmsa method)": [[85, "skbio.alignment.TabularMSA.extend", false]], "extend() (skbio.tree.treenode method)": [[981, "skbio.tree.TreeNode.extend", false]], "f_matrix() (in module skbio.stats.ordination)": [[868, "skbio.stats.ordination.f_matrix", false]], "faith_pd() (in module skbio.diversity.alpha)": [[116, "skbio.diversity.alpha.faith_pd", false]], "filter() (skbio.sequence.substitutionmatrix method)": [[663, "skbio.sequence.SubstitutionMatrix.filter", false]], "filter() (skbio.stats.distance.dissimilaritymatrix method)": [[715, "skbio.stats.distance.DissimilarityMatrix.filter", false]], "filter() (skbio.stats.distance.distancematrix method)": [[739, "skbio.stats.distance.DistanceMatrix.filter", false]], "filter() (skbio.table.table method)": [[905, "skbio.table.Table.filter", false]], "filter_columns() (skbio.metadata.samplemetadata method)": [[367, "skbio.metadata.SampleMetadata.filter_columns", false]], "filter_ids() (skbio.metadata.categoricalmetadatacolumn method)": [[285, "skbio.metadata.CategoricalMetadataColumn.filter_ids", false]], "filter_ids() (skbio.metadata.metadatacolumn method)": [[332, "skbio.metadata.MetadataColumn.filter_ids", false]], "filter_ids() (skbio.metadata.numericmetadatacolumn method)": [[350, "skbio.metadata.NumericMetadataColumn.filter_ids", false]], "filter_ids() (skbio.metadata.samplemetadata method)": [[368, "skbio.metadata.SampleMetadata.filter_ids", false]], "find() (skbio.tree.treenode method)": [[982, "skbio.tree.TreeNode.find", false]], "find_all() (skbio.tree.treenode method)": [[983, "skbio.tree.TreeNode.find_all", false]], "find_by_func() (skbio.tree.treenode method)": [[984, "skbio.tree.TreeNode.find_by_func", false]], "find_by_id() (skbio.tree.treenode method)": [[985, "skbio.tree.TreeNode.find_by_id", false]], "find_duplicates() (in module skbio.util)": [[1052, "skbio.util.find_duplicates", false]], "find_motifs() (skbio.sequence.dna method)": [[402, "skbio.sequence.DNA.find_motifs", false]], "find_motifs() (skbio.sequence.grammaredsequence method)": [[472, "skbio.sequence.GrammaredSequence.find_motifs", false]], "find_motifs() (skbio.sequence.protein method)": [[523, "skbio.sequence.Protein.find_motifs", false]], "find_motifs() (skbio.sequence.rna method)": [[577, "skbio.sequence.RNA.find_motifs", false]], "find_with_regex() (skbio.sequence.dna method)": [[403, "skbio.sequence.DNA.find_with_regex", false]], "find_with_regex() (skbio.sequence.grammaredsequence method)": [[473, "skbio.sequence.GrammaredSequence.find_with_regex", false]], "find_with_regex() (skbio.sequence.protein method)": [[524, "skbio.sequence.Protein.find_with_regex", false]], "find_with_regex() (skbio.sequence.rna method)": [[578, "skbio.sequence.RNA.find_with_regex", false]], "find_with_regex() (skbio.sequence.sequence method)": [[631, "skbio.sequence.Sequence.find_with_regex", false]], "firstdifferencegradientanova (class in skbio.stats.gradient)": [[783, "skbio.stats.gradient.FirstDifferenceGradientANOVA", false]], "fisher_alpha() (in module skbio.diversity.alpha)": [[117, "skbio.diversity.alpha.fisher_alpha", false]], "format (class in skbio.io.registry)": [[233, "skbio.io.registry.Format", false]], "frequencies() (skbio.sequence.dna method)": [[404, "skbio.sequence.DNA.frequencies", false]], "frequencies() (skbio.sequence.grammaredsequence method)": [[474, "skbio.sequence.GrammaredSequence.frequencies", false]], "frequencies() (skbio.sequence.protein method)": [[525, "skbio.sequence.Protein.frequencies", false]], "frequencies() (skbio.sequence.rna method)": [[579, "skbio.sequence.RNA.frequencies", false]], "frequencies() (skbio.sequence.sequence method)": [[632, "skbio.sequence.Sequence.frequencies", false]], "from_adjacency() (skbio.table.table static method)": [[906, "skbio.table.Table.from_adjacency", false]], "from_bits() (skbio.alignment.alignpath class method)": [[13, "skbio.alignment.AlignPath.from_bits", false]], "from_bits() (skbio.alignment.pairalignpath class method)": [[44, "skbio.alignment.PairAlignPath.from_bits", false]], "from_cigar() (skbio.alignment.pairalignpath class method)": [[45, "skbio.alignment.PairAlignPath.from_cigar", false]], "from_coordinates() (skbio.alignment.alignpath class method)": [[14, "skbio.alignment.AlignPath.from_coordinates", false]], "from_coordinates() (skbio.alignment.pairalignpath class method)": [[46, "skbio.alignment.PairAlignPath.from_coordinates", false]], "from_dict() (skbio.alignment.tabularmsa class method)": [[86, "skbio.alignment.TabularMSA.from_dict", false]], "from_dict() (skbio.sequence.substitutionmatrix class method)": [[664, "skbio.sequence.SubstitutionMatrix.from_dict", false]], "from_hdf5() (skbio.table.table class method)": [[907, "skbio.table.Table.from_hdf5", false]], "from_indices() (skbio.alignment.alignpath class method)": [[15, "skbio.alignment.AlignPath.from_indices", false]], "from_indices() (skbio.alignment.pairalignpath class method)": [[47, "skbio.alignment.PairAlignPath.from_indices", false]], "from_iterable() (skbio.sequence.substitutionmatrix class method)": [[665, "skbio.sequence.SubstitutionMatrix.from_iterable", false]], "from_iterable() (skbio.stats.distance.dissimilaritymatrix class method)": [[716, "skbio.stats.distance.DissimilarityMatrix.from_iterable", false]], "from_iterable() (skbio.stats.distance.distancematrix class method)": [[740, "skbio.stats.distance.DistanceMatrix.from_iterable", false]], "from_json() (skbio.table.table class method)": [[908, "skbio.table.Table.from_json", false]], "from_linkage_matrix() (skbio.tree.treenode class method)": [[986, "skbio.tree.TreeNode.from_linkage_matrix", false]], "from_ncbi() (skbio.sequence.geneticcode class method)": [[445, "skbio.sequence.GeneticCode.from_ncbi", false]], "from_path_seqs() (skbio.alignment.tabularmsa class method)": [[87, "skbio.alignment.TabularMSA.from_path_seqs", false]], "from_tabular() (skbio.alignment.alignpath class method)": [[16, "skbio.alignment.AlignPath.from_tabular", false]], "from_tabular() (skbio.alignment.pairalignpath class method)": [[48, "skbio.alignment.PairAlignPath.from_tabular", false]], "from_taxdump() (skbio.tree.treenode class method)": [[987, "skbio.tree.TreeNode.from_taxdump", false]], "from_taxonomy() (skbio.tree.treenode class method)": [[988, "skbio.tree.TreeNode.from_taxonomy", false]], "from_tsv() (skbio.table.table static method)": [[909, "skbio.table.Table.from_tsv", false]], "gap_frequencies() (skbio.alignment.tabularmsa method)": [[88, "skbio.alignment.TabularMSA.gap_frequencies", false]], "gaps() (skbio.sequence.dna method)": [[405, "skbio.sequence.DNA.gaps", false]], "gaps() (skbio.sequence.grammaredsequence method)": [[475, "skbio.sequence.GrammaredSequence.gaps", false]], "gaps() (skbio.sequence.protein method)": [[526, "skbio.sequence.Protein.gaps", false]], "gaps() (skbio.sequence.rna method)": [[580, "skbio.sequence.RNA.gaps", false]], "gc_content() (skbio.sequence.dna method)": [[406, "skbio.sequence.DNA.gc_content", false]], "gc_content() (skbio.sequence.rna method)": [[581, "skbio.sequence.RNA.gc_content", false]], "gc_frequency() (skbio.sequence.dna method)": [[407, "skbio.sequence.DNA.gc_frequency", false]], "gc_frequency() (skbio.sequence.rna method)": [[582, "skbio.sequence.RNA.gc_frequency", false]], "geneticcode (class in skbio.sequence)": [[436, "skbio.sequence.GeneticCode", false]], "get_alpha_diversity_metrics() (in module skbio.diversity)": [[147, "skbio.diversity.get_alpha_diversity_metrics", false]], "get_beta_diversity_metrics() (in module skbio.diversity)": [[148, "skbio.diversity.get_beta_diversity_metrics", false]], "get_column() (skbio.metadata.samplemetadata method)": [[369, "skbio.metadata.SampleMetadata.get_column", false]], "get_data_path() (in module skbio.util)": [[1053, "skbio.util.get_data_path", false]], "get_ids() (skbio.metadata.categoricalmetadatacolumn method)": [[286, "skbio.metadata.CategoricalMetadataColumn.get_ids", false]], "get_ids() (skbio.metadata.metadatacolumn method)": [[333, "skbio.metadata.MetadataColumn.get_ids", false]], "get_ids() (skbio.metadata.numericmetadatacolumn method)": [[351, "skbio.metadata.NumericMetadataColumn.get_ids", false]], "get_ids() (skbio.metadata.samplemetadata method)": [[370, "skbio.metadata.SampleMetadata.get_ids", false]], "get_max_distance() (skbio.tree.treenode method)": [[989, "skbio.tree.TreeNode.get_max_distance", false]], "get_missing() (skbio.metadata.categoricalmetadatacolumn method)": [[287, "skbio.metadata.CategoricalMetadataColumn.get_missing", false]], "get_missing() (skbio.metadata.metadatacolumn method)": [[334, "skbio.metadata.MetadataColumn.get_missing", false]], "get_missing() (skbio.metadata.numericmetadatacolumn method)": [[352, "skbio.metadata.NumericMetadataColumn.get_missing", false]], "get_names() (skbio.sequence.substitutionmatrix class method)": [[666, "skbio.sequence.SubstitutionMatrix.get_names", false]], "get_reader() (skbio.io.registry.ioregistry method)": [[258, "skbio.io.registry.IORegistry.get_reader", false]], "get_sniffer() (skbio.io.registry.ioregistry method)": [[259, "skbio.io.registry.IORegistry.get_sniffer", false]], "get_table_density() (skbio.table.table method)": [[910, "skbio.table.Table.get_table_density", false]], "get_trajectories() (skbio.stats.gradient.averagegradientanova method)": [[771, "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.firstdifferencegradientanova method)": [[793, "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.gradientanova method)": [[804, "skbio.stats.gradient.GradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.trajectorygradientanova method)": [[837, "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", false]], "get_trajectories() (skbio.stats.gradient.windowdifferencegradientanova method)": [[848, "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", false]], "get_value() (skbio.metadata.categoricalmetadatacolumn method)": [[288, "skbio.metadata.CategoricalMetadataColumn.get_value", false]], "get_value() (skbio.metadata.metadatacolumn method)": [[335, "skbio.metadata.MetadataColumn.get_value", false]], "get_value() (skbio.metadata.numericmetadatacolumn method)": [[353, "skbio.metadata.NumericMetadataColumn.get_value", false]], "get_value_by_ids() (skbio.table.table method)": [[911, "skbio.table.Table.get_value_by_ids", false]], "get_writer() (skbio.io.registry.ioregistry method)": [[260, "skbio.io.registry.IORegistry.get_writer", false]], "getter() (skbio.util.classproperty method)": [[1050, "skbio.util.classproperty.getter", false]], "gini_index() (in module skbio.diversity.alpha)": [[118, "skbio.diversity.alpha.gini_index", false]], "global_pairwise_align() (in module skbio.alignment)": [[98, "skbio.alignment.global_pairwise_align", false]], "global_pairwise_align_nucleotide() (in module skbio.alignment)": [[99, "skbio.alignment.global_pairwise_align_nucleotide", false]], "global_pairwise_align_protein() (in module skbio.alignment)": [[100, "skbio.alignment.global_pairwise_align_protein", false]], "goods_coverage() (in module skbio.diversity.alpha)": [[119, "skbio.diversity.alpha.goods_coverage", false]], "gradientanova (class in skbio.stats.gradient)": [[794, "skbio.stats.gradient.GradientANOVA", false]], "gradientanovaresults (class in skbio.stats.gradient)": [[805, "skbio.stats.gradient.GradientANOVAResults", false]], "grammaredsequence (class in skbio.sequence)": [[448, "skbio.sequence.GrammaredSequence", false]], "group_metadata() (skbio.table.table method)": [[912, "skbio.table.Table.group_metadata", false]], "groupresults (class in skbio.stats.gradient)": [[816, "skbio.stats.gradient.GroupResults", false]], "hamming() (in module skbio.sequence.distance)": [[678, "skbio.sequence.distance.hamming", false]], "has_children() (skbio.tree.treenode method)": [[990, "skbio.tree.TreeNode.has_children", false]], "has_definites() (skbio.sequence.dna method)": [[408, "skbio.sequence.DNA.has_definites", false]], "has_definites() (skbio.sequence.grammaredsequence method)": [[476, "skbio.sequence.GrammaredSequence.has_definites", false]], "has_definites() (skbio.sequence.protein method)": [[527, "skbio.sequence.Protein.has_definites", false]], "has_definites() (skbio.sequence.rna method)": [[583, "skbio.sequence.RNA.has_definites", false]], "has_degenerates() (skbio.sequence.dna method)": [[409, "skbio.sequence.DNA.has_degenerates", false]], "has_degenerates() (skbio.sequence.grammaredsequence method)": [[477, "skbio.sequence.GrammaredSequence.has_degenerates", false]], "has_degenerates() (skbio.sequence.protein method)": [[528, "skbio.sequence.Protein.has_degenerates", false]], "has_degenerates() (skbio.sequence.rna method)": [[584, "skbio.sequence.RNA.has_degenerates", false]], "has_gaps() (skbio.sequence.dna method)": [[410, "skbio.sequence.DNA.has_gaps", false]], "has_gaps() (skbio.sequence.grammaredsequence method)": [[478, "skbio.sequence.GrammaredSequence.has_gaps", false]], "has_gaps() (skbio.sequence.protein method)": [[529, "skbio.sequence.Protein.has_gaps", false]], "has_gaps() (skbio.sequence.rna method)": [[585, "skbio.sequence.RNA.has_gaps", false]], "has_interval_metadata() (skbio.sequence.dna method)": [[411, "skbio.sequence.DNA.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.grammaredsequence method)": [[479, "skbio.sequence.GrammaredSequence.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.protein method)": [[530, "skbio.sequence.Protein.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.rna method)": [[586, "skbio.sequence.RNA.has_interval_metadata", false]], "has_interval_metadata() (skbio.sequence.sequence method)": [[633, "skbio.sequence.Sequence.has_interval_metadata", false]], "has_metadata() (skbio.alignment.tabularmsa method)": [[89, "skbio.alignment.TabularMSA.has_metadata", false]], "has_metadata() (skbio.sequence.dna method)": [[412, "skbio.sequence.DNA.has_metadata", false]], "has_metadata() (skbio.sequence.grammaredsequence method)": [[480, "skbio.sequence.GrammaredSequence.has_metadata", false]], "has_metadata() (skbio.sequence.protein method)": [[531, "skbio.sequence.Protein.has_metadata", false]], "has_metadata() (skbio.sequence.rna method)": [[587, "skbio.sequence.RNA.has_metadata", false]], "has_metadata() (skbio.sequence.sequence method)": [[634, "skbio.sequence.Sequence.has_metadata", false]], "has_missing_values() (skbio.metadata.categoricalmetadatacolumn method)": [[289, "skbio.metadata.CategoricalMetadataColumn.has_missing_values", false]], "has_missing_values() (skbio.metadata.metadatacolumn method)": [[336, "skbio.metadata.MetadataColumn.has_missing_values", false]], "has_missing_values() (skbio.metadata.numericmetadatacolumn method)": [[354, "skbio.metadata.NumericMetadataColumn.has_missing_values", false]], "has_nondegenerates() (skbio.sequence.dna method)": [[413, "skbio.sequence.DNA.has_nondegenerates", false]], "has_nondegenerates() (skbio.sequence.grammaredsequence method)": [[481, "skbio.sequence.GrammaredSequence.has_nondegenerates", false]], "has_nondegenerates() (skbio.sequence.protein method)": [[532, "skbio.sequence.Protein.has_nondegenerates", false]], "has_nondegenerates() (skbio.sequence.rna method)": [[588, "skbio.sequence.RNA.has_nondegenerates", false]], "has_positional_metadata() (skbio.alignment.tabularmsa method)": [[90, "skbio.alignment.TabularMSA.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.dna method)": [[414, "skbio.sequence.DNA.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.grammaredsequence method)": [[482, "skbio.sequence.GrammaredSequence.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.protein method)": [[533, "skbio.sequence.Protein.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.rna method)": [[589, "skbio.sequence.RNA.has_positional_metadata", false]], "has_positional_metadata() (skbio.sequence.sequence method)": [[635, "skbio.sequence.Sequence.has_positional_metadata", false]], "has_stops() (skbio.sequence.protein method)": [[534, "skbio.sequence.Protein.has_stops", false]], "head() (skbio.table.table method)": [[913, "skbio.table.Table.head", false]], "heip_e() (in module skbio.diversity.alpha)": [[120, "skbio.diversity.alpha.heip_e", false]], "hommola_cospeciation() (in module skbio.stats.evolve)": [[759, "skbio.stats.evolve.hommola_cospeciation", false]], "identity() (skbio.sequence.substitutionmatrix class method)": [[667, "skbio.sequence.SubstitutionMatrix.identity", false]], "ids() (skbio.table.table method)": [[914, "skbio.table.Table.ids", false]], "ilr() (in module skbio.stats.composition)": [[689, "skbio.stats.composition.ilr", false]], "ilr_inv() (in module skbio.stats.composition)": [[690, "skbio.stats.composition.ilr_inv", false]], "index() (skbio.sequence.dna method)": [[415, "skbio.sequence.DNA.index", false]], "index() (skbio.sequence.grammaredsequence method)": [[483, "skbio.sequence.GrammaredSequence.index", false]], "index() (skbio.sequence.protein method)": [[535, "skbio.sequence.Protein.index", false]], "index() (skbio.sequence.rna method)": [[590, "skbio.sequence.RNA.index", false]], "index() (skbio.sequence.sequence method)": [[636, "skbio.sequence.Sequence.index", false]], "index() (skbio.sequence.substitutionmatrix method)": [[668, "skbio.sequence.SubstitutionMatrix.index", false]], "index() (skbio.stats.distance.dissimilaritymatrix method)": [[717, "skbio.stats.distance.DissimilarityMatrix.index", false]], "index() (skbio.stats.distance.distancematrix method)": [[741, "skbio.stats.distance.DistanceMatrix.index", false]], "index() (skbio.table.table method)": [[915, "skbio.table.Table.index", false]], "index_tree() (skbio.tree.treenode method)": [[991, "skbio.tree.TreeNode.index_tree", false]], "initialize_state() (skbio.workflow.workflow method)": [[1066, "skbio.workflow.Workflow.initialize_state", false]], "inner() (in module skbio.stats.composition)": [[691, "skbio.stats.composition.inner", false]], "interval (class in skbio.metadata)": [[293, "skbio.metadata.Interval", false]], "intervalmetadata (class in skbio.metadata)": [[303, "skbio.metadata.IntervalMetadata", false]], "invalidate_caches() (skbio.tree.treenode method)": [[992, "skbio.tree.TreeNode.invalidate_caches", false]], "ioregistry (class in skbio.io.registry)": [[246, "skbio.io.registry.IORegistry", false]], "is_empty() (skbio.table.table method)": [[916, "skbio.table.Table.is_empty", false]], "is_reverse_complement() (skbio.sequence.dna method)": [[416, "skbio.sequence.DNA.is_reverse_complement", false]], "is_reverse_complement() (skbio.sequence.rna method)": [[591, "skbio.sequence.RNA.is_reverse_complement", false]], "is_root() (skbio.tree.treenode method)": [[993, "skbio.tree.TreeNode.is_root", false]], "is_tip() (skbio.tree.treenode method)": [[994, "skbio.tree.TreeNode.is_tip", false]], "is_zero_based() (skbio.alignment.alignmentstructure method)": [[32, "skbio.alignment.AlignmentStructure.is_zero_based", false]], "isubsample() (in module skbio.stats)": [[849, "skbio.stats.isubsample", false]], "iter() (skbio.table.table method)": [[917, "skbio.table.Table.iter", false]], "iter_contiguous() (skbio.sequence.dna method)": [[417, "skbio.sequence.DNA.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.grammaredsequence method)": [[484, "skbio.sequence.GrammaredSequence.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.protein method)": [[536, "skbio.sequence.Protein.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.rna method)": [[592, "skbio.sequence.RNA.iter_contiguous", false]], "iter_contiguous() (skbio.sequence.sequence method)": [[637, "skbio.sequence.Sequence.iter_contiguous", false]], "iter_data() (skbio.table.table method)": [[918, "skbio.table.Table.iter_data", false]], "iter_kmers() (skbio.sequence.dna method)": [[418, "skbio.sequence.DNA.iter_kmers", false]], "iter_kmers() (skbio.sequence.grammaredsequence method)": [[485, "skbio.sequence.GrammaredSequence.iter_kmers", false]], "iter_kmers() (skbio.sequence.protein method)": [[537, "skbio.sequence.Protein.iter_kmers", false]], "iter_kmers() (skbio.sequence.rna method)": [[593, "skbio.sequence.RNA.iter_kmers", false]], "iter_kmers() (skbio.sequence.sequence method)": [[638, "skbio.sequence.Sequence.iter_kmers", false]], "iter_pairwise() (skbio.table.table method)": [[919, "skbio.table.Table.iter_pairwise", false]], "iter_positions() (skbio.alignment.tabularmsa method)": [[91, "skbio.alignment.TabularMSA.iter_positions", false]], "join() (skbio.alignment.tabularmsa method)": [[92, "skbio.alignment.TabularMSA.join", false]], "kempton_taylor_q() (in module skbio.diversity.alpha)": [[121, "skbio.diversity.alpha.kempton_taylor_q", false]], "kmer_distance() (in module skbio.sequence.distance)": [[679, "skbio.sequence.distance.kmer_distance", false]], "kmer_frequencies() (skbio.sequence.dna method)": [[419, "skbio.sequence.DNA.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.grammaredsequence method)": [[486, "skbio.sequence.GrammaredSequence.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.protein method)": [[538, "skbio.sequence.Protein.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.rna method)": [[594, "skbio.sequence.RNA.kmer_frequencies", false]], "kmer_frequencies() (skbio.sequence.sequence method)": [[639, "skbio.sequence.Sequence.kmer_frequencies", false]], "lca() (skbio.tree.treenode method)": [[995, "skbio.tree.TreeNode.lca", false]], "length() (skbio.table.table method)": [[920, "skbio.table.Table.length", false]], "levelorder() (skbio.tree.treenode method)": [[996, "skbio.tree.TreeNode.levelorder", false]], "list_read_formats() (skbio.io.registry.ioregistry method)": [[261, "skbio.io.registry.IORegistry.list_read_formats", false]], "list_write_formats() (skbio.io.registry.ioregistry method)": [[262, "skbio.io.registry.IORegistry.list_write_formats", false]], "lladser_ci() (in module skbio.diversity.alpha)": [[122, "skbio.diversity.alpha.lladser_ci", false]], "lladser_pe() (in module skbio.diversity.alpha)": [[123, "skbio.diversity.alpha.lladser_pe", false]], "load() (skbio.metadata.samplemetadata class method)": [[371, "skbio.metadata.SampleMetadata.load", false]], "local_pairwise_align() (in module skbio.alignment)": [[101, "skbio.alignment.local_pairwise_align", false]], "local_pairwise_align_nucleotide() (in module skbio.alignment)": [[102, "skbio.alignment.local_pairwise_align_nucleotide", false]], "local_pairwise_align_protein() (in module skbio.alignment)": [[103, "skbio.alignment.local_pairwise_align_protein", false]], "local_pairwise_align_ssw() (in module skbio.alignment)": [[104, "skbio.alignment.local_pairwise_align_ssw", false]], "lowercase() (skbio.sequence.dna method)": [[420, "skbio.sequence.DNA.lowercase", false]], "lowercase() (skbio.sequence.grammaredsequence method)": [[487, "skbio.sequence.GrammaredSequence.lowercase", false]], "lowercase() (skbio.sequence.protein method)": [[539, "skbio.sequence.Protein.lowercase", false]], "lowercase() (skbio.sequence.rna method)": [[595, "skbio.sequence.RNA.lowercase", false]], "lowercase() (skbio.sequence.sequence method)": [[640, "skbio.sequence.Sequence.lowercase", false]], "lowest_common_ancestor() (skbio.tree.treenode method)": [[997, "skbio.tree.TreeNode.lowest_common_ancestor", false]], "majority_rule() (in module skbio.tree)": [[1028, "skbio.tree.majority_rule", false]], "make_identity_substitution_matrix() (in module skbio.alignment)": [[105, "skbio.alignment.make_identity_substitution_matrix", false]], "mantel() (in module skbio.stats.distance)": [[753, "skbio.stats.distance.mantel", false]], "margalef() (in module skbio.diversity.alpha)": [[124, "skbio.diversity.alpha.margalef", false]], "match_frequency() (skbio.sequence.dna method)": [[421, "skbio.sequence.DNA.match_frequency", false]], "match_frequency() (skbio.sequence.grammaredsequence method)": [[488, "skbio.sequence.GrammaredSequence.match_frequency", false]], "match_frequency() (skbio.sequence.protein method)": [[540, "skbio.sequence.Protein.match_frequency", false]], "match_frequency() (skbio.sequence.rna method)": [[596, "skbio.sequence.RNA.match_frequency", false]], "match_frequency() (skbio.sequence.sequence method)": [[641, "skbio.sequence.Sequence.match_frequency", false]], "matches() (skbio.sequence.dna method)": [[422, "skbio.sequence.DNA.matches", false]], "matches() (skbio.sequence.grammaredsequence method)": [[489, "skbio.sequence.GrammaredSequence.matches", false]], "matches() (skbio.sequence.protein method)": [[541, "skbio.sequence.Protein.matches", false]], "matches() (skbio.sequence.rna method)": [[597, "skbio.sequence.RNA.matches", false]], "matches() (skbio.sequence.sequence method)": [[642, "skbio.sequence.Sequence.matches", false]], "max() (skbio.table.table method)": [[921, "skbio.table.Table.max", false]], "mcintosh_d() (in module skbio.diversity.alpha)": [[125, "skbio.diversity.alpha.mcintosh_d", false]], "mcintosh_e() (in module skbio.diversity.alpha)": [[126, "skbio.diversity.alpha.mcintosh_e", false]], "mean_and_std() (in module skbio.stats.ordination)": [[869, "skbio.stats.ordination.mean_and_std", false]], "menhinick() (in module skbio.diversity.alpha)": [[127, "skbio.diversity.alpha.menhinick", false]], "merge() (skbio.metadata.intervalmetadata method)": [[317, "skbio.metadata.IntervalMetadata.merge", false]], "merge() (skbio.metadata.samplemetadata method)": [[372, "skbio.metadata.SampleMetadata.merge", false]], "merge() (skbio.table.table method)": [[922, "skbio.table.Table.merge", false]], "metadata() (skbio.table.table method)": [[923, "skbio.table.Table.metadata", false]], "metadata_to_dataframe() (skbio.table.table method)": [[924, "skbio.table.Table.metadata_to_dataframe", false]], "metadatacolumn (class in skbio.metadata)": [[322, "skbio.metadata.MetadataColumn", false]], "method (class in skbio.workflow)": [[1067, "skbio.workflow.method", false]], "michaelis_menten_fit() (in module skbio.diversity.alpha)": [[128, "skbio.diversity.alpha.michaelis_menten_fit", false]], "min() (skbio.table.table method)": [[925, "skbio.table.Table.min", false]], "mismatch_frequency() (skbio.sequence.dna method)": [[423, "skbio.sequence.DNA.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.grammaredsequence method)": [[490, "skbio.sequence.GrammaredSequence.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.protein method)": [[542, "skbio.sequence.Protein.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.rna method)": [[598, "skbio.sequence.RNA.mismatch_frequency", false]], "mismatch_frequency() (skbio.sequence.sequence method)": [[643, "skbio.sequence.Sequence.mismatch_frequency", false]], "mismatches() (skbio.sequence.dna method)": [[424, "skbio.sequence.DNA.mismatches", false]], "mismatches() (skbio.sequence.grammaredsequence method)": [[491, "skbio.sequence.GrammaredSequence.mismatches", false]], "mismatches() (skbio.sequence.protein method)": [[543, "skbio.sequence.Protein.mismatches", false]], "mismatches() (skbio.sequence.rna method)": [[599, "skbio.sequence.RNA.mismatches", false]], "mismatches() (skbio.sequence.sequence method)": [[644, "skbio.sequence.Sequence.mismatches", false]], "module": [[0, "module-skbio.alignment", false], [1, "module-skbio.diversity", false], [2, "module-skbio.embedding", false], [106, "module-skbio.diversity.alpha", false], [142, "module-skbio.diversity.beta", false], [213, "module-skbio.io.format.binary_dm", false], [214, "module-skbio.io.format.biom", false], [215, "module-skbio.io.format.blast6", false], [216, "module-skbio.io.format.blast7", false], [217, "module-skbio.io.format.clustal", false], [218, "module-skbio.io.format.embed", false], [219, "module-skbio.io.format.embl", false], [220, "module-skbio.io.format.fasta", false], [221, "module-skbio.io.format.fastq", false], [222, "module-skbio.io.format.genbank", false], [223, "module-skbio.io.format.gff3", false], [224, "module-skbio.io.format.lsmat", false], [225, "module-skbio.io.format.newick", false], [226, "module-skbio.io.format.ordination", false], [227, "module-skbio.io.format.phylip", false], [228, "module-skbio.io.format.qseq", false], [229, "module-skbio.io.format.sample_metadata", false], [230, "module-skbio.io.format.stockholm", false], [231, "module-skbio.io.format.taxdump", false], [232, "module-skbio.io.registry", false], [271, "module-skbio.io.util", false], [677, "module-skbio.sequence.distance", false], [680, "module-skbio.stats.composition", false], [701, "module-skbio.stats.distance", false], [758, "module-skbio.stats.evolve", false], [760, "module-skbio.stats.gradient", false], [850, "module-skbio.stats.ordination", false], [875, "module-skbio.stats.power", false], [1090, "module-skbio.io", false], [1091, "module-skbio.metadata", false], [1092, "module-skbio.sequence", false], [1093, "module-skbio.stats", false], [1094, "module-skbio.table", false], [1095, "module-skbio.tree", false], [1096, "module-skbio.util", false], [1097, "module-skbio.workflow", false]], "monkey_patch() (skbio.io.registry.ioregistry method)": [[263, "skbio.io.registry.IORegistry.monkey_patch", false]], "multi_replace() (in module skbio.stats.composition)": [[692, "skbio.stats.composition.multi_replace", false]], "multiplicative_replacement() (in module skbio.stats.composition)": [[693, "skbio.stats.composition.multiplicative_replacement", false]], "neighbors() (skbio.tree.treenode method)": [[998, "skbio.tree.TreeNode.neighbors", false]], "nj() (in module skbio.tree)": [[1029, "skbio.tree.nj", false]], "non_tips() (skbio.tree.treenode method)": [[999, "skbio.tree.TreeNode.non_tips", false]], "nondegenerates() (skbio.sequence.dna method)": [[425, "skbio.sequence.DNA.nondegenerates", false]], "nondegenerates() (skbio.sequence.grammaredsequence method)": [[492, "skbio.sequence.GrammaredSequence.nondegenerates", false]], "nondegenerates() (skbio.sequence.protein method)": [[544, "skbio.sequence.Protein.nondegenerates", false]], "nondegenerates() (skbio.sequence.rna method)": [[600, "skbio.sequence.RNA.nondegenerates", false]], "nonzero() (skbio.table.table method)": [[926, "skbio.table.Table.nonzero", false]], "nonzero_counts() (skbio.table.table method)": [[927, "skbio.table.Table.nonzero_counts", false]], "norm() (skbio.table.table method)": [[928, "skbio.table.Table.norm", false]], "numericmetadatacolumn (class in skbio.metadata)": [[340, "skbio.metadata.NumericMetadataColumn", false]], "observed_features() (in module skbio.diversity.alpha)": [[129, "skbio.diversity.alpha.observed_features", false]], "observed_node_counts() (skbio.tree.treenode method)": [[1000, "skbio.tree.TreeNode.observed_node_counts", false]], "observed_otus() (in module skbio.diversity.alpha)": [[130, "skbio.diversity.alpha.observed_otus", false]], "open() (in module skbio.io.util)": [[272, "skbio.io.util.open", false]], "open_file() (in module skbio.io.util)": [[273, "skbio.io.util.open_file", false]], "open_files() (in module skbio.io.util)": [[274, "skbio.io.util.open_files", false]], "ordinationresults (class in skbio.stats.ordination)": [[851, "skbio.stats.ordination.OrdinationResults", false]], "osd() (in module skbio.diversity.alpha)": [[131, "skbio.diversity.alpha.osd", false]], "pa() (skbio.table.table method)": [[929, "skbio.table.Table.pa", false]], "pairalignpath (class in skbio.alignment)": [[34, "skbio.alignment.PairAlignPath", false]], "paired_subsamples() (in module skbio.stats.power)": [[877, "skbio.stats.power.paired_subsamples", false]], "pairwise_vlr() (in module skbio.stats.composition)": [[694, "skbio.stats.composition.pairwise_vlr", false]], "partial_beta_diversity() (in module skbio.diversity)": [[149, "skbio.diversity.partial_beta_diversity", false]], "partition() (skbio.table.table method)": [[930, "skbio.table.Table.partition", false]], "pcoa() (in module skbio.stats.ordination)": [[870, "skbio.stats.ordination.pcoa", false]], "pcoa_biplot() (in module skbio.stats.ordination)": [[871, "skbio.stats.ordination.pcoa_biplot", false]], "permanova() (in module skbio.stats.distance)": [[754, "skbio.stats.distance.permanova", false]], "permdisp() (in module skbio.stats.distance)": [[755, "skbio.stats.distance.permdisp", false]], "permute() (skbio.stats.distance.distancematrix method)": [[742, "skbio.stats.distance.DistanceMatrix.permute", false]], "perturb() (in module skbio.stats.composition)": [[695, "skbio.stats.composition.perturb", false]], "perturb_inv() (in module skbio.stats.composition)": [[696, "skbio.stats.composition.perturb_inv", false]], "phydiv() (in module skbio.diversity.alpha)": [[132, "skbio.diversity.alpha.phydiv", false]], "pielou_e() (in module skbio.diversity.alpha)": [[133, "skbio.diversity.alpha.pielou_e", false]], "plot() (skbio.sequence.substitutionmatrix method)": [[669, "skbio.sequence.SubstitutionMatrix.plot", false]], "plot() (skbio.stats.distance.dissimilaritymatrix method)": [[718, "skbio.stats.distance.DissimilarityMatrix.plot", false]], "plot() (skbio.stats.distance.distancematrix method)": [[743, "skbio.stats.distance.DistanceMatrix.plot", false]], "plot() (skbio.stats.ordination.ordinationresults method)": [[861, "skbio.stats.ordination.OrdinationResults.plot", false]], "pop() (skbio.tree.treenode method)": [[1001, "skbio.tree.TreeNode.pop", false]], "postorder() (skbio.tree.treenode method)": [[1002, "skbio.tree.TreeNode.postorder", false]], "power() (in module skbio.stats.composition)": [[697, "skbio.stats.composition.power", false]], "pre_and_postorder() (skbio.tree.treenode method)": [[1003, "skbio.tree.TreeNode.pre_and_postorder", false]], "preorder() (skbio.tree.treenode method)": [[1004, "skbio.tree.TreeNode.preorder", false]], "protein (class in skbio.sequence)": [[499, "skbio.sequence.Protein", false]], "proteinembedding (class in skbio.embedding)": [[161, "skbio.embedding.ProteinEmbedding", false]], "proteinvector (class in skbio.embedding)": [[174, "skbio.embedding.ProteinVector", false]], "prune() (skbio.tree.treenode method)": [[1005, "skbio.tree.TreeNode.prune", false]], "pwmantel() (in module skbio.stats.distance)": [[756, "skbio.stats.distance.pwmantel", false]], "query() (skbio.metadata.intervalmetadata method)": [[318, "skbio.metadata.IntervalMetadata.query", false]], "randdm() (in module skbio.stats.distance)": [[757, "skbio.stats.distance.randdm", false]], "rankdata() (skbio.table.table method)": [[931, "skbio.table.Table.rankdata", false]], "rda() (in module skbio.stats.ordination)": [[872, "skbio.stats.ordination.rda", false]], "read() (in module skbio.io.registry)": [[268, "skbio.io.registry.read", false]], "read() (skbio.alignment.tabularmsa class method)": [[93, "skbio.alignment.TabularMSA.read", false]], "read() (skbio.embedding.proteinembedding class method)": [[172, "skbio.embedding.ProteinEmbedding.read", false]], "read() (skbio.embedding.proteinvector class method)": [[185, "skbio.embedding.ProteinVector.read", false]], "read() (skbio.io.registry.ioregistry method)": [[264, "skbio.io.registry.IORegistry.read", false]], "read() (skbio.metadata.intervalmetadata class method)": [[319, "skbio.metadata.IntervalMetadata.read", false]], "read() (skbio.metadata.samplemetadata class method)": [[373, "skbio.metadata.SampleMetadata.read", false]], "read() (skbio.sequence.dna class method)": [[426, "skbio.sequence.DNA.read", false]], "read() (skbio.sequence.grammaredsequence class method)": [[493, "skbio.sequence.GrammaredSequence.read", false]], "read() (skbio.sequence.protein class method)": [[545, "skbio.sequence.Protein.read", false]], "read() (skbio.sequence.rna class method)": [[601, "skbio.sequence.RNA.read", false]], "read() (skbio.sequence.sequence class method)": [[645, "skbio.sequence.Sequence.read", false]], "read() (skbio.sequence.substitutionmatrix class method)": [[670, "skbio.sequence.SubstitutionMatrix.read", false]], "read() (skbio.stats.distance.dissimilaritymatrix class method)": [[719, "skbio.stats.distance.DissimilarityMatrix.read", false]], "read() (skbio.stats.distance.distancematrix class method)": [[744, "skbio.stats.distance.DistanceMatrix.read", false]], "read() (skbio.stats.ordination.ordinationresults class method)": [[862, "skbio.stats.ordination.OrdinationResults.read", false]], "read() (skbio.table.table class method)": [[932, "skbio.table.Table.read", false]], "read() (skbio.tree.treenode class method)": [[1006, "skbio.tree.TreeNode.read", false]], "reader() (skbio.io.registry.format method)": [[243, "skbio.io.registry.Format.reader", false]], "reassign_index() (skbio.alignment.tabularmsa method)": [[94, "skbio.alignment.TabularMSA.reassign_index", false]], "reduce() (skbio.table.table method)": [[933, "skbio.table.Table.reduce", false]], "redundant_form() (skbio.sequence.substitutionmatrix method)": [[671, "skbio.sequence.SubstitutionMatrix.redundant_form", false]], "redundant_form() (skbio.stats.distance.dissimilaritymatrix method)": [[720, "skbio.stats.distance.DissimilarityMatrix.redundant_form", false]], "redundant_form() (skbio.stats.distance.distancematrix method)": [[745, "skbio.stats.distance.DistanceMatrix.redundant_form", false]], "remove() (skbio.tree.treenode method)": [[1007, "skbio.tree.TreeNode.remove", false]], "remove_deleted() (skbio.tree.treenode method)": [[1008, "skbio.tree.TreeNode.remove_deleted", false]], "remove_empty() (skbio.table.table method)": [[934, "skbio.table.Table.remove_empty", false]], "replace() (skbio.sequence.dna method)": [[427, "skbio.sequence.DNA.replace", false]], "replace() (skbio.sequence.grammaredsequence method)": [[494, "skbio.sequence.GrammaredSequence.replace", false]], "replace() (skbio.sequence.protein method)": [[546, "skbio.sequence.Protein.replace", false]], "replace() (skbio.sequence.rna method)": [[602, "skbio.sequence.RNA.replace", false]], "replace() (skbio.sequence.sequence method)": [[646, "skbio.sequence.Sequence.replace", false]], "representationwarning": [[1031, "skbio.util.RepresentationWarning", false]], "requires (class in skbio.workflow)": [[1078, "skbio.workflow.requires", false]], "reverse_complement() (skbio.sequence.dna method)": [[428, "skbio.sequence.DNA.reverse_complement", false]], "reverse_complement() (skbio.sequence.rna method)": [[603, "skbio.sequence.RNA.reverse_complement", false]], "reverse_transcribe() (skbio.sequence.rna method)": [[604, "skbio.sequence.RNA.reverse_transcribe", false]], "rna (class in skbio.sequence)": [[552, "skbio.sequence.RNA", false]], "robbins() (in module skbio.diversity.alpha)": [[134, "skbio.diversity.alpha.robbins", false]], "root() (skbio.tree.treenode method)": [[1009, "skbio.tree.TreeNode.root", false]], "root_at() (skbio.tree.treenode method)": [[1010, "skbio.tree.TreeNode.root_at", false]], "root_at_midpoint() (skbio.tree.treenode method)": [[1011, "skbio.tree.TreeNode.root_at_midpoint", false]], "safe_md5() (in module skbio.util)": [[1054, "skbio.util.safe_md5", false]], "samplemetadata (class in skbio.metadata)": [[358, "skbio.metadata.SampleMetadata", false]], "save() (skbio.metadata.categoricalmetadatacolumn method)": [[290, "skbio.metadata.CategoricalMetadataColumn.save", false]], "save() (skbio.metadata.metadatacolumn method)": [[337, "skbio.metadata.MetadataColumn.save", false]], "save() (skbio.metadata.numericmetadatacolumn method)": [[355, "skbio.metadata.NumericMetadataColumn.save", false]], "save() (skbio.metadata.samplemetadata method)": [[374, "skbio.metadata.SampleMetadata.save", false]], "sbp_basis() (in module skbio.stats.composition)": [[698, "skbio.stats.composition.sbp_basis", false]], "scale() (in module skbio.stats.ordination)": [[873, "skbio.stats.ordination.scale", false]], "sequence (class in skbio.sequence)": [[611, "skbio.sequence.Sequence", false]], "sequenceembedding (class in skbio.embedding)": [[187, "skbio.embedding.SequenceEmbedding", false]], "sequencevector (class in skbio.embedding)": [[198, "skbio.embedding.SequenceVector", false]], "set_zero_based() (skbio.alignment.alignmentstructure method)": [[33, "skbio.alignment.AlignmentStructure.set_zero_based", false]], "setter() (skbio.util.classproperty method)": [[1051, "skbio.util.classproperty.setter", false]], "shannon() (in module skbio.diversity.alpha)": [[135, "skbio.diversity.alpha.shannon", false]], "shear() (skbio.tree.treenode method)": [[1012, "skbio.tree.TreeNode.shear", false]], "shuffle() (skbio.tree.treenode method)": [[1013, "skbio.tree.TreeNode.shuffle", false]], "siblings() (skbio.tree.treenode method)": [[1014, "skbio.tree.TreeNode.siblings", false]], "simpson() (in module skbio.diversity.alpha)": [[136, "skbio.diversity.alpha.simpson", false]], "simpson_e() (in module skbio.diversity.alpha)": [[137, "skbio.diversity.alpha.simpson_e", false]], "singles() (in module skbio.diversity.alpha)": [[138, "skbio.diversity.alpha.singles", false]], "skbio.alignment": [[0, "module-skbio.alignment", false]], "skbio.diversity": [[1, "module-skbio.diversity", false]], "skbio.diversity.alpha": [[106, "module-skbio.diversity.alpha", false]], "skbio.diversity.beta": [[142, "module-skbio.diversity.beta", false]], "skbio.embedding": [[2, "module-skbio.embedding", false]], "skbio.io": [[1090, "module-skbio.io", false]], "skbio.io.format.binary_dm": [[213, "module-skbio.io.format.binary_dm", false]], "skbio.io.format.biom": [[214, "module-skbio.io.format.biom", false]], "skbio.io.format.blast6": [[215, "module-skbio.io.format.blast6", false]], "skbio.io.format.blast7": [[216, "module-skbio.io.format.blast7", false]], "skbio.io.format.clustal": [[217, "module-skbio.io.format.clustal", false]], "skbio.io.format.embed": [[218, "module-skbio.io.format.embed", false]], "skbio.io.format.embl": [[219, "module-skbio.io.format.embl", false]], "skbio.io.format.fasta": [[220, "module-skbio.io.format.fasta", false]], "skbio.io.format.fastq": [[221, "module-skbio.io.format.fastq", false]], "skbio.io.format.genbank": [[222, "module-skbio.io.format.genbank", false]], "skbio.io.format.gff3": [[223, "module-skbio.io.format.gff3", false]], "skbio.io.format.lsmat": [[224, "module-skbio.io.format.lsmat", false]], "skbio.io.format.newick": [[225, "module-skbio.io.format.newick", false]], "skbio.io.format.ordination": [[226, "module-skbio.io.format.ordination", false]], "skbio.io.format.phylip": [[227, "module-skbio.io.format.phylip", false]], "skbio.io.format.qseq": [[228, "module-skbio.io.format.qseq", false]], "skbio.io.format.sample_metadata": [[229, "module-skbio.io.format.sample_metadata", false]], "skbio.io.format.stockholm": [[230, "module-skbio.io.format.stockholm", false]], "skbio.io.format.taxdump": [[231, "module-skbio.io.format.taxdump", false]], "skbio.io.registry": [[232, "module-skbio.io.registry", false]], "skbio.io.util": [[271, "module-skbio.io.util", false]], "skbio.metadata": [[1091, "module-skbio.metadata", false]], "skbio.sequence": [[1092, "module-skbio.sequence", false]], "skbio.sequence.distance": [[677, "module-skbio.sequence.distance", false]], "skbio.stats": [[1093, "module-skbio.stats", false]], "skbio.stats.composition": [[680, "module-skbio.stats.composition", false]], "skbio.stats.distance": [[701, "module-skbio.stats.distance", false]], "skbio.stats.evolve": [[758, "module-skbio.stats.evolve", false]], "skbio.stats.gradient": [[760, "module-skbio.stats.gradient", false]], "skbio.stats.ordination": [[850, "module-skbio.stats.ordination", false]], "skbio.stats.power": [[875, "module-skbio.stats.power", false]], "skbio.table": [[1094, "module-skbio.table", false]], "skbio.tree": [[1095, "module-skbio.tree", false]], "skbio.util": [[1096, "module-skbio.util", false]], "skbio.workflow": [[1097, "module-skbio.workflow", false]], "sniff() (in module skbio.io.registry)": [[269, "skbio.io.registry.sniff", false]], "sniff() (skbio.io.registry.ioregistry method)": [[265, "skbio.io.registry.IORegistry.sniff", false]], "sniffer() (skbio.io.registry.format method)": [[244, "skbio.io.registry.Format.sniffer", false]], "sobs() (in module skbio.diversity.alpha)": [[139, "skbio.diversity.alpha.sobs", false]], "sort() (skbio.alignment.tabularmsa method)": [[95, "skbio.alignment.TabularMSA.sort", false]], "sort() (skbio.metadata.intervalmetadata method)": [[320, "skbio.metadata.IntervalMetadata.sort", false]], "sort() (skbio.table.table method)": [[935, "skbio.table.Table.sort", false]], "sort_order() (skbio.table.table method)": [[936, "skbio.table.Table.sort_order", false]], "stops() (skbio.sequence.protein method)": [[547, "skbio.sequence.Protein.stops", false]], "stripedsmithwaterman (class in skbio.alignment)": [[53, "skbio.alignment.StripedSmithWaterman", false]], "strong() (in module skbio.diversity.alpha)": [[140, "skbio.diversity.alpha.strong", false]], "subsample() (skbio.table.table method)": [[937, "skbio.table.Table.subsample", false]], "subsample_counts() (in module skbio.stats)": [[880, "skbio.stats.subsample_counts", false]], "subsample_paired_power() (in module skbio.stats.power)": [[878, "skbio.stats.power.subsample_paired_power", false]], "subsample_power() (in module skbio.stats.power)": [[879, "skbio.stats.power.subsample_power", false]], "subset() (skbio.tree.treenode method)": [[1015, "skbio.tree.TreeNode.subset", false]], "subsets() (skbio.tree.treenode method)": [[1016, "skbio.tree.TreeNode.subsets", false]], "substitutionmatrix (class in skbio.sequence)": [[649, "skbio.sequence.SubstitutionMatrix", false]], "subtree() (skbio.tree.treenode method)": [[1017, "skbio.tree.TreeNode.subtree", false]], "sum() (skbio.table.table method)": [[938, "skbio.table.Table.sum", false]], "svd_rank() (in module skbio.stats.ordination)": [[874, "skbio.stats.ordination.svd_rank", false]], "table (class in skbio.table)": [[881, "skbio.table.Table", false]], "tabularmsa (class in skbio.alignment)": [[65, "skbio.alignment.TabularMSA", false]], "tip_tip_distances() (skbio.tree.treenode method)": [[1018, "skbio.tree.TreeNode.tip_tip_distances", false]], "tips() (skbio.tree.treenode method)": [[1019, "skbio.tree.TreeNode.tips", false]], "to_anndata() (skbio.table.table method)": [[939, "skbio.table.Table.to_anndata", false]], "to_array() (skbio.tree.treenode method)": [[1020, "skbio.tree.TreeNode.to_array", false]], "to_bits() (skbio.alignment.alignpath method)": [[17, "skbio.alignment.AlignPath.to_bits", false]], "to_bits() (skbio.alignment.pairalignpath method)": [[49, "skbio.alignment.PairAlignPath.to_bits", false]], "to_cigar() (skbio.alignment.pairalignpath method)": [[50, "skbio.alignment.PairAlignPath.to_cigar", false]], "to_coordinates() (skbio.alignment.alignpath method)": [[18, "skbio.alignment.AlignPath.to_coordinates", false]], "to_coordinates() (skbio.alignment.pairalignpath method)": [[51, "skbio.alignment.PairAlignPath.to_coordinates", false]], "to_data_frame() (skbio.sequence.substitutionmatrix method)": [[672, "skbio.sequence.SubstitutionMatrix.to_data_frame", false]], "to_data_frame() (skbio.stats.distance.dissimilaritymatrix method)": [[721, "skbio.stats.distance.DissimilarityMatrix.to_data_frame", false]], "to_data_frame() (skbio.stats.distance.distancematrix method)": [[746, "skbio.stats.distance.DistanceMatrix.to_data_frame", false]], "to_dataframe() (skbio.metadata.categoricalmetadatacolumn method)": [[291, "skbio.metadata.CategoricalMetadataColumn.to_dataframe", false]], "to_dataframe() (skbio.metadata.metadatacolumn method)": [[338, "skbio.metadata.MetadataColumn.to_dataframe", false]], "to_dataframe() (skbio.metadata.numericmetadatacolumn method)": [[356, "skbio.metadata.NumericMetadataColumn.to_dataframe", false]], "to_dataframe() (skbio.metadata.samplemetadata method)": [[375, "skbio.metadata.SampleMetadata.to_dataframe", false]], "to_dataframe() (skbio.table.table method)": [[940, "skbio.table.Table.to_dataframe", false]], "to_definites() (skbio.sequence.dna method)": [[429, "skbio.sequence.DNA.to_definites", false]], "to_definites() (skbio.sequence.grammaredsequence method)": [[495, "skbio.sequence.GrammaredSequence.to_definites", false]], "to_definites() (skbio.sequence.protein method)": [[548, "skbio.sequence.Protein.to_definites", false]], "to_definites() (skbio.sequence.rna method)": [[605, "skbio.sequence.RNA.to_definites", false]], "to_dict() (skbio.alignment.tabularmsa method)": [[96, "skbio.alignment.TabularMSA.to_dict", false]], "to_dict() (skbio.sequence.substitutionmatrix method)": [[673, "skbio.sequence.SubstitutionMatrix.to_dict", false]], "to_files() (skbio.stats.gradient.categoryresults method)": [[782, "skbio.stats.gradient.CategoryResults.to_files", false]], "to_files() (skbio.stats.gradient.gradientanovaresults method)": [[815, "skbio.stats.gradient.GradientANOVAResults.to_files", false]], "to_files() (skbio.stats.gradient.groupresults method)": [[826, "skbio.stats.gradient.GroupResults.to_files", false]], "to_hdf5() (skbio.table.table method)": [[941, "skbio.table.Table.to_hdf5", false]], "to_indices() (skbio.alignment.alignpath method)": [[19, "skbio.alignment.AlignPath.to_indices", false]], "to_indices() (skbio.alignment.pairalignpath method)": [[52, "skbio.alignment.PairAlignPath.to_indices", false]], "to_indices() (skbio.sequence.dna method)": [[430, "skbio.sequence.DNA.to_indices", false]], "to_indices() (skbio.sequence.grammaredsequence method)": [[496, "skbio.sequence.GrammaredSequence.to_indices", false]], "to_indices() (skbio.sequence.protein method)": [[549, "skbio.sequence.Protein.to_indices", false]], "to_indices() (skbio.sequence.rna method)": [[606, "skbio.sequence.RNA.to_indices", false]], "to_indices() (skbio.sequence.sequence method)": [[647, "skbio.sequence.Sequence.to_indices", false]], "to_json() (skbio.table.table method)": [[942, "skbio.table.Table.to_json", false]], "to_regex() (skbio.sequence.dna method)": [[431, "skbio.sequence.DNA.to_regex", false]], "to_regex() (skbio.sequence.grammaredsequence method)": [[497, "skbio.sequence.GrammaredSequence.to_regex", false]], "to_regex() (skbio.sequence.protein method)": [[550, "skbio.sequence.Protein.to_regex", false]], "to_regex() (skbio.sequence.rna method)": [[607, "skbio.sequence.RNA.to_regex", false]], "to_series() (skbio.metadata.categoricalmetadatacolumn method)": [[292, "skbio.metadata.CategoricalMetadataColumn.to_series", false]], "to_series() (skbio.metadata.metadatacolumn method)": [[339, "skbio.metadata.MetadataColumn.to_series", false]], "to_series() (skbio.metadata.numericmetadatacolumn method)": [[357, "skbio.metadata.NumericMetadataColumn.to_series", false]], "to_series() (skbio.stats.distance.distancematrix method)": [[747, "skbio.stats.distance.DistanceMatrix.to_series", false]], "to_taxonomy() (skbio.tree.treenode method)": [[1021, "skbio.tree.TreeNode.to_taxonomy", false]], "to_tsv() (skbio.table.table method)": [[943, "skbio.table.Table.to_tsv", false]], "trajectorygradientanova (class in skbio.stats.gradient)": [[827, "skbio.stats.gradient.TrajectoryGradientANOVA", false]], "transcribe() (skbio.sequence.dna method)": [[432, "skbio.sequence.DNA.transcribe", false]], "transform() (skbio.table.table method)": [[944, "skbio.table.Table.transform", false]], "translate() (skbio.sequence.dna method)": [[433, "skbio.sequence.DNA.translate", false]], "translate() (skbio.sequence.geneticcode method)": [[446, "skbio.sequence.GeneticCode.translate", false]], "translate() (skbio.sequence.rna method)": [[608, "skbio.sequence.RNA.translate", false]], "translate_six_frames() (skbio.sequence.dna method)": [[434, "skbio.sequence.DNA.translate_six_frames", false]], "translate_six_frames() (skbio.sequence.geneticcode method)": [[447, "skbio.sequence.GeneticCode.translate_six_frames", false]], "translate_six_frames() (skbio.sequence.rna method)": [[609, "skbio.sequence.RNA.translate_six_frames", false]], "transpose() (skbio.sequence.substitutionmatrix method)": [[674, "skbio.sequence.SubstitutionMatrix.transpose", false]], "transpose() (skbio.stats.distance.dissimilaritymatrix method)": [[722, "skbio.stats.distance.DissimilarityMatrix.transpose", false]], "transpose() (skbio.stats.distance.distancematrix method)": [[748, "skbio.stats.distance.DistanceMatrix.transpose", false]], "transpose() (skbio.table.table method)": [[945, "skbio.table.Table.transpose", false]], "traverse() (skbio.tree.treenode method)": [[1022, "skbio.tree.TreeNode.traverse", false]], "tree_basis() (in module skbio.stats.composition)": [[699, "skbio.stats.composition.tree_basis", false]], "treenode (class in skbio.tree)": [[949, "skbio.tree.TreeNode", false]], "unpack() (skbio.tree.treenode method)": [[1023, "skbio.tree.TreeNode.unpack", false]], "unpack_by_func() (skbio.tree.treenode method)": [[1024, "skbio.tree.TreeNode.unpack_by_func", false]], "unrooted_copy() (skbio.tree.treenode method)": [[1025, "skbio.tree.TreeNode.unrooted_copy", false]], "unrooted_deepcopy() (skbio.tree.treenode method)": [[1026, "skbio.tree.TreeNode.unrooted_deepcopy", false]], "unweighted_unifrac() (in module skbio.diversity.beta)": [[143, "skbio.diversity.beta.unweighted_unifrac", false]], "update_ids() (skbio.table.table method)": [[946, "skbio.table.Table.update_ids", false]], "vlr() (in module skbio.stats.composition)": [[700, "skbio.stats.composition.vlr", false]], "weighted_unifrac() (in module skbio.diversity.beta)": [[144, "skbio.diversity.beta.weighted_unifrac", false]], "windowdifferencegradientanova (class in skbio.stats.gradient)": [[838, "skbio.stats.gradient.WindowDifferenceGradientANOVA", false]], "within() (skbio.sequence.substitutionmatrix method)": [[675, "skbio.sequence.SubstitutionMatrix.within", false]], "within() (skbio.stats.distance.dissimilaritymatrix method)": [[723, "skbio.stats.distance.DissimilarityMatrix.within", false]], "within() (skbio.stats.distance.distancematrix method)": [[749, "skbio.stats.distance.DistanceMatrix.within", false]], "workflow (class in skbio.workflow)": [[1055, "skbio.workflow.Workflow", false]], "write() (in module skbio.io.registry)": [[270, "skbio.io.registry.write", false]], "write() (skbio.alignment.tabularmsa method)": [[97, "skbio.alignment.TabularMSA.write", false]], "write() (skbio.embedding.proteinembedding method)": [[173, "skbio.embedding.ProteinEmbedding.write", false]], "write() (skbio.embedding.proteinvector method)": [[186, "skbio.embedding.ProteinVector.write", false]], "write() (skbio.io.registry.ioregistry method)": [[266, "skbio.io.registry.IORegistry.write", false]], "write() (skbio.metadata.intervalmetadata method)": [[321, "skbio.metadata.IntervalMetadata.write", false]], "write() (skbio.metadata.samplemetadata method)": [[376, "skbio.metadata.SampleMetadata.write", false]], "write() (skbio.sequence.dna method)": [[435, "skbio.sequence.DNA.write", false]], "write() (skbio.sequence.grammaredsequence method)": [[498, "skbio.sequence.GrammaredSequence.write", false]], "write() (skbio.sequence.protein method)": [[551, "skbio.sequence.Protein.write", false]], "write() (skbio.sequence.rna method)": [[610, "skbio.sequence.RNA.write", false]], "write() (skbio.sequence.sequence method)": [[648, "skbio.sequence.Sequence.write", false]], "write() (skbio.sequence.substitutionmatrix method)": [[676, "skbio.sequence.SubstitutionMatrix.write", false]], "write() (skbio.stats.distance.dissimilaritymatrix method)": [[724, "skbio.stats.distance.DissimilarityMatrix.write", false]], "write() (skbio.stats.distance.distancematrix method)": [[750, "skbio.stats.distance.DistanceMatrix.write", false]], "write() (skbio.stats.ordination.ordinationresults method)": [[863, "skbio.stats.ordination.OrdinationResults.write", false]], "write() (skbio.table.table method)": [[947, "skbio.table.Table.write", false]], "write() (skbio.tree.treenode method)": [[1027, "skbio.tree.TreeNode.write", false]], "writer() (skbio.io.registry.format method)": [[245, "skbio.io.registry.Format.writer", false]]}, "objects": {"skbio": [[0, 0, 0, "-", "alignment"], [1, 0, 0, "-", "diversity"], [2, 0, 0, "-", "embedding"], [1090, 0, 0, "-", "io"], [1091, 0, 0, "-", "metadata"], [1092, 0, 0, "-", "sequence"], [1093, 0, 0, "-", "stats"], [1094, 0, 0, "-", "table"], [1095, 0, 0, "-", "tree"], [1096, 0, 0, "-", "util"], [1097, 0, 0, "-", "workflow"]], "skbio.alignment": [[3, 1, 1, "", "AlignPath"], [20, 1, 1, "", "AlignmentStructure"], [34, 1, 1, "", "PairAlignPath"], [53, 1, 1, "", "StripedSmithWaterman"], [65, 1, 1, "", "TabularMSA"], [98, 3, 1, "", "global_pairwise_align"], [99, 3, 1, "", "global_pairwise_align_nucleotide"], [100, 3, 1, "", "global_pairwise_align_protein"], [101, 3, 1, "", "local_pairwise_align"], [102, 3, 1, "", "local_pairwise_align_nucleotide"], [103, 3, 1, "", "local_pairwise_align_protein"], [104, 3, 1, "", "local_pairwise_align_ssw"], [105, 3, 1, "", "make_identity_substitution_matrix"]], "skbio.alignment.AlignPath": [[4, 2, 1, "", "__eq__"], [5, 2, 1, "", "__ge__"], [6, 2, 1, "", "__getstate__"], [7, 2, 1, "", "__gt__"], [8, 2, 1, "", "__hash__"], [9, 2, 1, "", "__le__"], [10, 2, 1, "", "__lt__"], [11, 2, 1, "", "__ne__"], [12, 2, 1, "", "__str__"], [13, 2, 1, "", "from_bits"], [14, 2, 1, "", "from_coordinates"], [15, 2, 1, "", "from_indices"], [16, 2, 1, "", "from_tabular"], [17, 2, 1, "", "to_bits"], [18, 2, 1, "", "to_coordinates"], [19, 2, 1, "", "to_indices"]], "skbio.alignment.AlignmentStructure": [[21, 2, 1, "", "__eq__"], [22, 2, 1, "", "__ge__"], [23, 2, 1, "", "__getitem__"], [24, 2, 1, "", "__getstate__"], [25, 2, 1, "", "__gt__"], [26, 2, 1, "", "__hash__"], [27, 2, 1, "", "__le__"], [28, 2, 1, "", "__lt__"], [29, 2, 1, "", "__ne__"], [30, 2, 1, "", "__setstate__"], [31, 2, 1, "", "__str__"], [32, 2, 1, "", "is_zero_based"], [33, 2, 1, "", "set_zero_based"]], "skbio.alignment.PairAlignPath": [[35, 2, 1, "", "__eq__"], [36, 2, 1, "", "__ge__"], [37, 2, 1, "", "__getstate__"], [38, 2, 1, "", "__gt__"], [39, 2, 1, "", "__hash__"], [40, 2, 1, "", "__le__"], [41, 2, 1, "", "__lt__"], [42, 2, 1, "", "__ne__"], [43, 2, 1, "", "__str__"], [44, 2, 1, "", "from_bits"], [45, 2, 1, "", "from_cigar"], [46, 2, 1, "", "from_coordinates"], [47, 2, 1, "", "from_indices"], [48, 2, 1, "", "from_tabular"], [49, 2, 1, "", "to_bits"], [50, 2, 1, "", "to_cigar"], [51, 2, 1, "", "to_coordinates"], [52, 2, 1, "", "to_indices"]], "skbio.alignment.StripedSmithWaterman": [[54, 2, 1, "", "__call__"], [55, 2, 1, "", "__eq__"], [56, 2, 1, "", "__ge__"], [57, 2, 1, "", "__getstate__"], [58, 2, 1, "", "__gt__"], [59, 2, 1, "", "__hash__"], [60, 2, 1, "", "__le__"], [61, 2, 1, "", "__lt__"], [62, 2, 1, "", "__ne__"], [63, 2, 1, "", "__setstate__"], [64, 2, 1, "", "__str__"]], "skbio.alignment.TabularMSA": [[66, 2, 1, "", "__bool__"], [67, 2, 1, "", "__contains__"], [68, 2, 1, "", "__copy__"], [69, 2, 1, "", "__deepcopy__"], [70, 2, 1, "", "__eq__"], [71, 2, 1, "", "__ge__"], [72, 2, 1, "", "__getitem__"], [73, 2, 1, "", "__getstate__"], [74, 2, 1, "", "__gt__"], [75, 2, 1, "", "__iter__"], [76, 2, 1, "", "__le__"], [77, 2, 1, "", "__len__"], [78, 2, 1, "", "__lt__"], [79, 2, 1, "", "__ne__"], [80, 2, 1, "", "__reversed__"], [81, 2, 1, "", "__str__"], [82, 2, 1, "", "append"], [83, 2, 1, "", "consensus"], [84, 2, 1, "", "conservation"], [85, 2, 1, "", "extend"], [86, 2, 1, "", "from_dict"], [87, 2, 1, "", "from_path_seqs"], [88, 2, 1, "", "gap_frequencies"], [89, 2, 1, "", "has_metadata"], [90, 2, 1, "", "has_positional_metadata"], [91, 2, 1, "", "iter_positions"], [92, 2, 1, "", "join"], [93, 2, 1, "", "read"], [94, 2, 1, "", "reassign_index"], [95, 2, 1, "", "sort"], [96, 2, 1, "", "to_dict"], [97, 2, 1, "", "write"]], "skbio.diversity": [[106, 0, 0, "-", "alpha"], [141, 3, 1, "", "alpha_diversity"], [142, 0, 0, "-", "beta"], [145, 3, 1, "", "beta_diversity"], [146, 3, 1, "", "block_beta_diversity"], [147, 3, 1, "", "get_alpha_diversity_metrics"], [148, 3, 1, "", "get_beta_diversity_metrics"], [149, 3, 1, "", "partial_beta_diversity"]], "skbio.diversity.alpha": [[107, 3, 1, "", "ace"], [108, 3, 1, "", "berger_parker_d"], [109, 3, 1, "", "brillouin_d"], [110, 3, 1, "", "chao1"], [111, 3, 1, "", "chao1_ci"], [112, 3, 1, "", "dominance"], [113, 3, 1, "", "doubles"], [114, 3, 1, "", "enspie"], [115, 3, 1, "", "esty_ci"], [116, 3, 1, "", "faith_pd"], [117, 3, 1, "", "fisher_alpha"], [118, 3, 1, "", "gini_index"], [119, 3, 1, "", "goods_coverage"], [120, 3, 1, "", "heip_e"], [121, 3, 1, "", "kempton_taylor_q"], [122, 3, 1, "", "lladser_ci"], [123, 3, 1, "", "lladser_pe"], [124, 3, 1, "", "margalef"], [125, 3, 1, "", "mcintosh_d"], [126, 3, 1, "", "mcintosh_e"], [127, 3, 1, "", "menhinick"], [128, 3, 1, "", "michaelis_menten_fit"], [129, 3, 1, "", "observed_features"], [130, 3, 1, "", "observed_otus"], [131, 3, 1, "", "osd"], [132, 3, 1, "", "phydiv"], [133, 3, 1, "", "pielou_e"], [134, 3, 1, "", "robbins"], [135, 3, 1, "", "shannon"], [136, 3, 1, "", "simpson"], [137, 3, 1, "", "simpson_e"], [138, 3, 1, "", "singles"], [139, 3, 1, "", "sobs"], [140, 3, 1, "", "strong"]], "skbio.diversity.beta": [[143, 3, 1, "", "unweighted_unifrac"], [144, 3, 1, "", "weighted_unifrac"]], "skbio.embedding": [[150, 1, 1, "", "Embedding"], [161, 1, 1, "", "ProteinEmbedding"], [174, 1, 1, "", "ProteinVector"], [187, 1, 1, "", "SequenceEmbedding"], [198, 1, 1, "", "SequenceVector"], [209, 3, 1, "", "embed_vec_to_dataframe"], [210, 3, 1, "", "embed_vec_to_distances"], [211, 3, 1, "", "embed_vec_to_numpy"], [212, 3, 1, "", "embed_vec_to_ordination"]], "skbio.embedding.Embedding": [[151, 2, 1, "", "__eq__"], [152, 2, 1, "", "__ge__"], [153, 2, 1, "", "__getstate__"], [154, 2, 1, "", "__gt__"], [155, 2, 1, "", "__hash__"], [156, 2, 1, "", "__le__"], [157, 2, 1, "", "__lt__"], [158, 2, 1, "", "__ne__"], [159, 2, 1, "", "__str__"], [160, 2, 1, "", "bytes"]], "skbio.embedding.ProteinEmbedding": [[162, 2, 1, "", "__eq__"], [163, 2, 1, "", "__ge__"], [164, 2, 1, "", "__getstate__"], [165, 2, 1, "", "__gt__"], [166, 2, 1, "", "__hash__"], [167, 2, 1, "", "__le__"], [168, 2, 1, "", "__lt__"], [169, 2, 1, "", "__ne__"], [170, 2, 1, "", "__str__"], [171, 2, 1, "", "bytes"], [172, 2, 1, "", "read"], [173, 2, 1, "", "write"]], "skbio.embedding.ProteinVector": [[175, 2, 1, "", "__eq__"], [176, 2, 1, "", "__ge__"], [177, 2, 1, "", "__getstate__"], [178, 2, 1, "", "__gt__"], [179, 2, 1, "", "__hash__"], [180, 2, 1, "", "__le__"], [181, 2, 1, "", "__lt__"], [182, 2, 1, "", "__ne__"], [183, 2, 1, "", "__str__"], [184, 2, 1, "", "bytes"], [185, 2, 1, "", "read"], [186, 2, 1, "", "write"]], "skbio.embedding.SequenceEmbedding": [[188, 2, 1, "", "__eq__"], [189, 2, 1, "", "__ge__"], [190, 2, 1, "", "__getstate__"], [191, 2, 1, "", "__gt__"], [192, 2, 1, "", "__hash__"], [193, 2, 1, "", "__le__"], [194, 2, 1, "", "__lt__"], [195, 2, 1, "", "__ne__"], [196, 2, 1, "", "__str__"], [197, 2, 1, "", "bytes"]], "skbio.embedding.SequenceVector": [[199, 2, 1, "", "__eq__"], [200, 2, 1, "", "__ge__"], [201, 2, 1, "", "__getstate__"], [202, 2, 1, "", "__gt__"], [203, 2, 1, "", "__hash__"], [204, 2, 1, "", "__le__"], [205, 2, 1, "", "__lt__"], [206, 2, 1, "", "__ne__"], [207, 2, 1, "", "__str__"], [208, 2, 1, "", "bytes"]], "skbio.io": [[232, 0, 0, "-", "registry"], [271, 0, 0, "-", "util"]], "skbio.io.format": [[213, 0, 0, "-", "binary_dm"], [214, 0, 0, "-", "biom"], [215, 0, 0, "-", "blast6"], [216, 0, 0, "-", "blast7"], [217, 0, 0, "-", "clustal"], [218, 0, 0, "-", "embed"], [219, 0, 0, "-", "embl"], [220, 0, 0, "-", "fasta"], [221, 0, 0, "-", "fastq"], [222, 0, 0, "-", "genbank"], [223, 0, 0, "-", "gff3"], [224, 0, 0, "-", "lsmat"], [225, 0, 0, "-", "newick"], [226, 0, 0, "-", "ordination"], [227, 0, 0, "-", "phylip"], [228, 0, 0, "-", "qseq"], [229, 0, 0, "-", "sample_metadata"], [230, 0, 0, "-", "stockholm"], [231, 0, 0, "-", "taxdump"]], "skbio.io.registry": [[233, 1, 1, "", "Format"], [246, 1, 1, "", "IORegistry"], [267, 3, 1, "", "create_format"], [268, 3, 1, "", "read"], [269, 3, 1, "", "sniff"], [270, 3, 1, "", "write"]], "skbio.io.registry.Format": [[234, 2, 1, "", "__eq__"], [235, 2, 1, "", "__ge__"], [236, 2, 1, "", "__getstate__"], [237, 2, 1, "", "__gt__"], [238, 2, 1, "", "__hash__"], [239, 2, 1, "", "__le__"], [240, 2, 1, "", "__lt__"], [241, 2, 1, "", "__ne__"], [242, 2, 1, "", "__str__"], [243, 2, 1, "", "reader"], [244, 2, 1, "", "sniffer"], [245, 2, 1, "", "writer"]], "skbio.io.registry.IORegistry": [[247, 2, 1, "", "__eq__"], [248, 2, 1, "", "__ge__"], [249, 2, 1, "", "__getstate__"], [250, 2, 1, "", "__gt__"], [251, 2, 1, "", "__hash__"], [252, 2, 1, "", "__le__"], [253, 2, 1, "", "__lt__"], [254, 2, 1, "", "__ne__"], [255, 2, 1, "", "__str__"], [256, 2, 1, "", "add_format"], [257, 2, 1, "", "create_format"], [258, 2, 1, "", "get_reader"], [259, 2, 1, "", "get_sniffer"], [260, 2, 1, "", "get_writer"], [261, 2, 1, "", "list_read_formats"], [262, 2, 1, "", "list_write_formats"], [263, 2, 1, "", "monkey_patch"], [264, 2, 1, "", "read"], [265, 2, 1, "", "sniff"], [266, 2, 1, "", "write"]], "skbio.io.util": [[272, 3, 1, "", "open"], [273, 3, 1, "", "open_file"], [274, 3, 1, "", "open_files"]], "skbio.metadata": [[275, 1, 1, "", "CategoricalMetadataColumn"], [293, 1, 1, "", "Interval"], [303, 1, 1, "", "IntervalMetadata"], [322, 1, 1, "", "MetadataColumn"], [340, 1, 1, "", "NumericMetadataColumn"], [358, 1, 1, "", "SampleMetadata"]], "skbio.metadata.CategoricalMetadataColumn": [[276, 2, 1, "", "__eq__"], [277, 2, 1, "", "__ge__"], [278, 2, 1, "", "__getstate__"], [279, 2, 1, "", "__gt__"], [280, 2, 1, "", "__le__"], [281, 2, 1, "", "__lt__"], [282, 2, 1, "", "__ne__"], [283, 2, 1, "", "__str__"], [284, 2, 1, "", "drop_missing_values"], [285, 2, 1, "", "filter_ids"], [286, 2, 1, "", "get_ids"], [287, 2, 1, "", "get_missing"], [288, 2, 1, "", "get_value"], [289, 2, 1, "", "has_missing_values"], [290, 2, 1, "", "save"], [291, 2, 1, "", "to_dataframe"], [292, 2, 1, "", "to_series"]], "skbio.metadata.Interval": [[294, 2, 1, "", "__eq__"], [295, 2, 1, "", "__ge__"], [296, 2, 1, "", "__getstate__"], [297, 2, 1, "", "__gt__"], [298, 2, 1, "", "__le__"], [299, 2, 1, "", "__lt__"], [300, 2, 1, "", "__ne__"], [301, 2, 1, "", "__str__"], [302, 2, 1, "", "drop"]], "skbio.metadata.IntervalMetadata": [[304, 2, 1, "", "__copy__"], [305, 2, 1, "", "__deepcopy__"], [306, 2, 1, "", "__eq__"], [307, 2, 1, "", "__ge__"], [308, 2, 1, "", "__getstate__"], [309, 2, 1, "", "__gt__"], [310, 2, 1, "", "__le__"], [311, 2, 1, "", "__lt__"], [312, 2, 1, "", "__ne__"], [313, 2, 1, "", "__str__"], [314, 2, 1, "", "add"], [315, 2, 1, "", "concat"], [316, 2, 1, "", "drop"], [317, 2, 1, "", "merge"], [318, 2, 1, "", "query"], [319, 2, 1, "", "read"], [320, 2, 1, "", "sort"], [321, 2, 1, "", "write"]], "skbio.metadata.MetadataColumn": [[323, 2, 1, "", "__eq__"], [324, 2, 1, "", "__ge__"], [325, 2, 1, "", "__getstate__"], [326, 2, 1, "", "__gt__"], [327, 2, 1, "", "__le__"], [328, 2, 1, "", "__lt__"], [329, 2, 1, "", "__ne__"], [330, 2, 1, "", "__str__"], [331, 2, 1, "", "drop_missing_values"], [332, 2, 1, "", "filter_ids"], [333, 2, 1, "", "get_ids"], [334, 2, 1, "", "get_missing"], [335, 2, 1, "", "get_value"], [336, 2, 1, "", "has_missing_values"], [337, 2, 1, "", "save"], [338, 2, 1, "", "to_dataframe"], [339, 2, 1, "", "to_series"]], "skbio.metadata.NumericMetadataColumn": [[341, 2, 1, "", "__eq__"], [342, 2, 1, "", "__ge__"], [343, 2, 1, "", "__getstate__"], [344, 2, 1, "", "__gt__"], [345, 2, 1, "", "__le__"], [346, 2, 1, "", "__lt__"], [347, 2, 1, "", "__ne__"], [348, 2, 1, "", "__str__"], [349, 2, 1, "", "drop_missing_values"], [350, 2, 1, "", "filter_ids"], [351, 2, 1, "", "get_ids"], [352, 2, 1, "", "get_missing"], [353, 2, 1, "", "get_value"], [354, 2, 1, "", "has_missing_values"], [355, 2, 1, "", "save"], [356, 2, 1, "", "to_dataframe"], [357, 2, 1, "", "to_series"]], "skbio.metadata.SampleMetadata": [[359, 2, 1, "", "__eq__"], [360, 2, 1, "", "__ge__"], [361, 2, 1, "", "__getstate__"], [362, 2, 1, "", "__gt__"], [363, 2, 1, "", "__le__"], [364, 2, 1, "", "__lt__"], [365, 2, 1, "", "__ne__"], [366, 2, 1, "", "__str__"], [367, 2, 1, "", "filter_columns"], [368, 2, 1, "", "filter_ids"], [369, 2, 1, "", "get_column"], [370, 2, 1, "", "get_ids"], [371, 2, 1, "", "load"], [372, 2, 1, "", "merge"], [373, 2, 1, "", "read"], [374, 2, 1, "", "save"], [375, 2, 1, "", "to_dataframe"], [376, 2, 1, "", "write"]], "skbio.sequence": [[377, 1, 1, "", "DNA"], [436, 1, 1, "", "GeneticCode"], [448, 1, 1, "", "GrammaredSequence"], [499, 1, 1, "", "Protein"], [552, 1, 1, "", "RNA"], [611, 1, 1, "", "Sequence"], [649, 1, 1, "", "SubstitutionMatrix"], [677, 0, 0, "-", "distance"]], "skbio.sequence.DNA": [[378, 2, 1, "", "__bool__"], [379, 2, 1, "", "__contains__"], [380, 2, 1, "", "__copy__"], [381, 2, 1, "", "__deepcopy__"], [382, 2, 1, "", "__eq__"], [383, 2, 1, "", "__ge__"], [384, 2, 1, "", "__getitem__"], [385, 2, 1, "", "__getstate__"], [386, 2, 1, "", "__gt__"], [387, 2, 1, "", "__iter__"], [388, 2, 1, "", "__le__"], [389, 2, 1, "", "__len__"], [390, 2, 1, "", "__lt__"], [391, 2, 1, "", "__ne__"], [392, 2, 1, "", "__reversed__"], [393, 2, 1, "", "__str__"], [394, 2, 1, "", "complement"], [395, 2, 1, "", "concat"], [396, 2, 1, "", "count"], [397, 2, 1, "", "definites"], [398, 2, 1, "", "degap"], [399, 2, 1, "", "degenerates"], [400, 2, 1, "", "distance"], [401, 2, 1, "", "expand_degenerates"], [402, 2, 1, "", "find_motifs"], [403, 2, 1, "", "find_with_regex"], [404, 2, 1, "", "frequencies"], [405, 2, 1, "", "gaps"], [406, 2, 1, "", "gc_content"], [407, 2, 1, "", "gc_frequency"], [408, 2, 1, "", "has_definites"], [409, 2, 1, "", "has_degenerates"], [410, 2, 1, "", "has_gaps"], [411, 2, 1, "", "has_interval_metadata"], [412, 2, 1, "", "has_metadata"], [413, 2, 1, "", "has_nondegenerates"], [414, 2, 1, "", "has_positional_metadata"], [415, 2, 1, "", "index"], [416, 2, 1, "", "is_reverse_complement"], [417, 2, 1, "", "iter_contiguous"], [418, 2, 1, "", "iter_kmers"], [419, 2, 1, "", "kmer_frequencies"], [420, 2, 1, "", "lowercase"], [421, 2, 1, "", "match_frequency"], [422, 2, 1, "", "matches"], [423, 2, 1, "", "mismatch_frequency"], [424, 2, 1, "", "mismatches"], [425, 2, 1, "", "nondegenerates"], [426, 2, 1, "", "read"], [427, 2, 1, "", "replace"], [428, 2, 1, "", "reverse_complement"], [429, 2, 1, "", "to_definites"], [430, 2, 1, "", "to_indices"], [431, 2, 1, "", "to_regex"], [432, 2, 1, "", "transcribe"], [433, 2, 1, "", "translate"], [434, 2, 1, "", "translate_six_frames"], [435, 2, 1, "", "write"]], "skbio.sequence.GeneticCode": [[437, 2, 1, "", "__eq__"], [438, 2, 1, "", "__ge__"], [439, 2, 1, "", "__getstate__"], [440, 2, 1, "", "__gt__"], [441, 2, 1, "", "__le__"], [442, 2, 1, "", "__lt__"], [443, 2, 1, "", "__ne__"], [444, 2, 1, "", "__str__"], [445, 2, 1, "", "from_ncbi"], [446, 2, 1, "", "translate"], [447, 2, 1, "", "translate_six_frames"]], "skbio.sequence.GrammaredSequence": [[449, 2, 1, "", "__bool__"], [450, 2, 1, "", "__contains__"], [451, 2, 1, "", "__copy__"], [452, 2, 1, "", "__deepcopy__"], [453, 2, 1, "", "__eq__"], [454, 2, 1, "", "__ge__"], [455, 2, 1, "", "__getitem__"], [456, 2, 1, "", "__getstate__"], [457, 2, 1, "", "__gt__"], [458, 2, 1, "", "__iter__"], [459, 2, 1, "", "__le__"], [460, 2, 1, "", "__len__"], [461, 2, 1, "", "__lt__"], [462, 2, 1, "", "__ne__"], [463, 2, 1, "", "__reversed__"], [464, 2, 1, "", "__str__"], [465, 2, 1, "", "concat"], [466, 2, 1, "", "count"], [467, 2, 1, "", "definites"], [468, 2, 1, "", "degap"], [469, 2, 1, "", "degenerates"], [470, 2, 1, "", "distance"], [471, 2, 1, "", "expand_degenerates"], [472, 2, 1, "", "find_motifs"], [473, 2, 1, "", "find_with_regex"], [474, 2, 1, "", "frequencies"], [475, 2, 1, "", "gaps"], [476, 2, 1, "", "has_definites"], [477, 2, 1, "", "has_degenerates"], [478, 2, 1, "", "has_gaps"], [479, 2, 1, "", "has_interval_metadata"], [480, 2, 1, "", "has_metadata"], [481, 2, 1, "", "has_nondegenerates"], [482, 2, 1, "", "has_positional_metadata"], [483, 2, 1, "", "index"], [484, 2, 1, "", "iter_contiguous"], [485, 2, 1, "", "iter_kmers"], [486, 2, 1, "", "kmer_frequencies"], [487, 2, 1, "", "lowercase"], [488, 2, 1, "", "match_frequency"], [489, 2, 1, "", "matches"], [490, 2, 1, "", "mismatch_frequency"], [491, 2, 1, "", "mismatches"], [492, 2, 1, "", "nondegenerates"], [493, 2, 1, "", "read"], [494, 2, 1, "", "replace"], [495, 2, 1, "", "to_definites"], [496, 2, 1, "", "to_indices"], [497, 2, 1, "", "to_regex"], [498, 2, 1, "", "write"]], "skbio.sequence.Protein": [[500, 2, 1, "", "__bool__"], [501, 2, 1, "", "__contains__"], [502, 2, 1, "", "__copy__"], [503, 2, 1, "", "__deepcopy__"], [504, 2, 1, "", "__eq__"], [505, 2, 1, "", "__ge__"], [506, 2, 1, "", "__getitem__"], [507, 2, 1, "", "__getstate__"], [508, 2, 1, "", "__gt__"], [509, 2, 1, "", "__iter__"], [510, 2, 1, "", "__le__"], [511, 2, 1, "", "__len__"], [512, 2, 1, "", "__lt__"], [513, 2, 1, "", "__ne__"], [514, 2, 1, "", "__reversed__"], [515, 2, 1, "", "__str__"], [516, 2, 1, "", "concat"], [517, 2, 1, "", "count"], [518, 2, 1, "", "definites"], [519, 2, 1, "", "degap"], [520, 2, 1, "", "degenerates"], [521, 2, 1, "", "distance"], [522, 2, 1, "", "expand_degenerates"], [523, 2, 1, "", "find_motifs"], [524, 2, 1, "", "find_with_regex"], [525, 2, 1, "", "frequencies"], [526, 2, 1, "", "gaps"], [527, 2, 1, "", "has_definites"], [528, 2, 1, "", "has_degenerates"], [529, 2, 1, "", "has_gaps"], [530, 2, 1, "", "has_interval_metadata"], [531, 2, 1, "", "has_metadata"], [532, 2, 1, "", "has_nondegenerates"], [533, 2, 1, "", "has_positional_metadata"], [534, 2, 1, "", "has_stops"], [535, 2, 1, "", "index"], [536, 2, 1, "", "iter_contiguous"], [537, 2, 1, "", "iter_kmers"], [538, 2, 1, "", "kmer_frequencies"], [539, 2, 1, "", "lowercase"], [540, 2, 1, "", "match_frequency"], [541, 2, 1, "", "matches"], [542, 2, 1, "", "mismatch_frequency"], [543, 2, 1, "", "mismatches"], [544, 2, 1, "", "nondegenerates"], [545, 2, 1, "", "read"], [546, 2, 1, "", "replace"], [547, 2, 1, "", "stops"], [548, 2, 1, "", "to_definites"], [549, 2, 1, "", "to_indices"], [550, 2, 1, "", "to_regex"], [551, 2, 1, "", "write"]], "skbio.sequence.RNA": [[553, 2, 1, "", "__bool__"], [554, 2, 1, "", "__contains__"], [555, 2, 1, "", "__copy__"], [556, 2, 1, "", "__deepcopy__"], [557, 2, 1, "", "__eq__"], [558, 2, 1, "", "__ge__"], [559, 2, 1, "", "__getitem__"], [560, 2, 1, "", "__getstate__"], [561, 2, 1, "", "__gt__"], [562, 2, 1, "", "__iter__"], [563, 2, 1, "", "__le__"], [564, 2, 1, "", "__len__"], [565, 2, 1, "", "__lt__"], [566, 2, 1, "", "__ne__"], [567, 2, 1, "", "__reversed__"], [568, 2, 1, "", "__str__"], [569, 2, 1, "", "complement"], [570, 2, 1, "", "concat"], [571, 2, 1, "", "count"], [572, 2, 1, "", "definites"], [573, 2, 1, "", "degap"], [574, 2, 1, "", "degenerates"], [575, 2, 1, "", "distance"], [576, 2, 1, "", "expand_degenerates"], [577, 2, 1, "", "find_motifs"], [578, 2, 1, "", "find_with_regex"], [579, 2, 1, "", "frequencies"], [580, 2, 1, "", "gaps"], [581, 2, 1, "", "gc_content"], [582, 2, 1, "", "gc_frequency"], [583, 2, 1, "", "has_definites"], [584, 2, 1, "", "has_degenerates"], [585, 2, 1, "", "has_gaps"], [586, 2, 1, "", "has_interval_metadata"], [587, 2, 1, "", "has_metadata"], [588, 2, 1, "", "has_nondegenerates"], [589, 2, 1, "", "has_positional_metadata"], [590, 2, 1, "", "index"], [591, 2, 1, "", "is_reverse_complement"], [592, 2, 1, "", "iter_contiguous"], [593, 2, 1, "", "iter_kmers"], [594, 2, 1, "", "kmer_frequencies"], [595, 2, 1, "", "lowercase"], [596, 2, 1, "", "match_frequency"], [597, 2, 1, "", "matches"], [598, 2, 1, "", "mismatch_frequency"], [599, 2, 1, "", "mismatches"], [600, 2, 1, "", "nondegenerates"], [601, 2, 1, "", "read"], [602, 2, 1, "", "replace"], [603, 2, 1, "", "reverse_complement"], [604, 2, 1, "", "reverse_transcribe"], [605, 2, 1, "", "to_definites"], [606, 2, 1, "", "to_indices"], [607, 2, 1, "", "to_regex"], [608, 2, 1, "", "translate"], [609, 2, 1, "", "translate_six_frames"], [610, 2, 1, "", "write"]], "skbio.sequence.Sequence": [[612, 2, 1, "", "__bool__"], [613, 2, 1, "", "__contains__"], [614, 2, 1, "", "__copy__"], [615, 2, 1, "", "__deepcopy__"], [616, 2, 1, "", "__eq__"], [617, 2, 1, "", "__ge__"], [618, 2, 1, "", "__getitem__"], [619, 2, 1, "", "__getstate__"], [620, 2, 1, "", "__gt__"], [621, 2, 1, "", "__iter__"], [622, 2, 1, "", "__le__"], [623, 2, 1, "", "__len__"], [624, 2, 1, "", "__lt__"], [625, 2, 1, "", "__ne__"], [626, 2, 1, "", "__reversed__"], [627, 2, 1, "", "__str__"], [628, 2, 1, "", "concat"], [629, 2, 1, "", "count"], [630, 2, 1, "", "distance"], [631, 2, 1, "", "find_with_regex"], [632, 2, 1, "", "frequencies"], [633, 2, 1, "", "has_interval_metadata"], [634, 2, 1, "", "has_metadata"], [635, 2, 1, "", "has_positional_metadata"], [636, 2, 1, "", "index"], [637, 2, 1, "", "iter_contiguous"], [638, 2, 1, "", "iter_kmers"], [639, 2, 1, "", "kmer_frequencies"], [640, 2, 1, "", "lowercase"], [641, 2, 1, "", "match_frequency"], [642, 2, 1, "", "matches"], [643, 2, 1, "", "mismatch_frequency"], [644, 2, 1, "", "mismatches"], [645, 2, 1, "", "read"], [646, 2, 1, "", "replace"], [647, 2, 1, "", "to_indices"], [648, 2, 1, "", "write"]], "skbio.sequence.SubstitutionMatrix": [[650, 2, 1, "", "__contains__"], [651, 2, 1, "", "__eq__"], [652, 2, 1, "", "__ge__"], [653, 2, 1, "", "__getitem__"], [654, 2, 1, "", "__getstate__"], [655, 2, 1, "", "__gt__"], [656, 2, 1, "", "__le__"], [657, 2, 1, "", "__lt__"], [658, 2, 1, "", "__ne__"], [659, 2, 1, "", "__str__"], [660, 2, 1, "", "between"], [661, 2, 1, "", "by_name"], [662, 2, 1, "", "copy"], [663, 2, 1, "", "filter"], [664, 2, 1, "", "from_dict"], [665, 2, 1, "", "from_iterable"], [666, 2, 1, "", "get_names"], [667, 2, 1, "", "identity"], [668, 2, 1, "", "index"], [669, 2, 1, "", "plot"], [670, 2, 1, "", "read"], [671, 2, 1, "", "redundant_form"], [672, 2, 1, "", "to_data_frame"], [673, 2, 1, "", "to_dict"], [674, 2, 1, "", "transpose"], [675, 2, 1, "", "within"], [676, 2, 1, "", "write"]], "skbio.sequence.distance": [[678, 3, 1, "", "hamming"], [679, 3, 1, "", "kmer_distance"]], "skbio.stats": [[680, 0, 0, "-", "composition"], [701, 0, 0, "-", "distance"], [758, 0, 0, "-", "evolve"], [760, 0, 0, "-", "gradient"], [849, 3, 1, "", "isubsample"], [850, 0, 0, "-", "ordination"], [875, 0, 0, "-", "power"], [880, 3, 1, "", "subsample_counts"]], "skbio.stats.composition": [[681, 3, 1, "", "alr"], [682, 3, 1, "", "alr_inv"], [683, 3, 1, "", "ancom"], [684, 3, 1, "", "centralize"], [685, 3, 1, "", "closure"], [686, 3, 1, "", "clr"], [687, 3, 1, "", "clr_inv"], [688, 3, 1, "", "dirmult_ttest"], [689, 3, 1, "", "ilr"], [690, 3, 1, "", "ilr_inv"], [691, 3, 1, "", "inner"], [692, 3, 1, "", "multi_replace"], [693, 3, 1, "", "multiplicative_replacement"], [694, 3, 1, "", "pairwise_vlr"], [695, 3, 1, "", "perturb"], [696, 3, 1, "", "perturb_inv"], [697, 3, 1, "", "power"], [698, 3, 1, "", "sbp_basis"], [699, 3, 1, "", "tree_basis"], [700, 3, 1, "", "vlr"]], "skbio.stats.distance": [[702, 1, 1, "", "DissimilarityMatrix"], [725, 1, 1, "", "DistanceMatrix"], [751, 3, 1, "", "anosim"], [752, 3, 1, "", "bioenv"], [753, 3, 1, "", "mantel"], [754, 3, 1, "", "permanova"], [755, 3, 1, "", "permdisp"], [756, 3, 1, "", "pwmantel"], [757, 3, 1, "", "randdm"]], "skbio.stats.distance.DissimilarityMatrix": [[703, 2, 1, "", "__contains__"], [704, 2, 1, "", "__eq__"], [705, 2, 1, "", "__ge__"], [706, 2, 1, "", "__getitem__"], [707, 2, 1, "", "__getstate__"], [708, 2, 1, "", "__gt__"], [709, 2, 1, "", "__le__"], [710, 2, 1, "", "__lt__"], [711, 2, 1, "", "__ne__"], [712, 2, 1, "", "__str__"], [713, 2, 1, "", "between"], [714, 2, 1, "", "copy"], [715, 2, 1, "", "filter"], [716, 2, 1, "", "from_iterable"], [717, 2, 1, "", "index"], [718, 2, 1, "", "plot"], [719, 2, 1, "", "read"], [720, 2, 1, "", "redundant_form"], [721, 2, 1, "", "to_data_frame"], [722, 2, 1, "", "transpose"], [723, 2, 1, "", "within"], [724, 2, 1, "", "write"]], "skbio.stats.distance.DistanceMatrix": [[726, 2, 1, "", "__contains__"], [727, 2, 1, "", "__eq__"], [728, 2, 1, "", "__ge__"], [729, 2, 1, "", "__getitem__"], [730, 2, 1, "", "__getstate__"], [731, 2, 1, "", "__gt__"], [732, 2, 1, "", "__le__"], [733, 2, 1, "", "__lt__"], [734, 2, 1, "", "__ne__"], [735, 2, 1, "", "__str__"], [736, 2, 1, "", "between"], [737, 2, 1, "", "condensed_form"], [738, 2, 1, "", "copy"], [739, 2, 1, "", "filter"], [740, 2, 1, "", "from_iterable"], [741, 2, 1, "", "index"], [742, 2, 1, "", "permute"], [743, 2, 1, "", "plot"], [744, 2, 1, "", "read"], [745, 2, 1, "", "redundant_form"], [746, 2, 1, "", "to_data_frame"], [747, 2, 1, "", "to_series"], [748, 2, 1, "", "transpose"], [749, 2, 1, "", "within"], [750, 2, 1, "", "write"]], "skbio.stats.evolve": [[759, 3, 1, "", "hommola_cospeciation"]], "skbio.stats.gradient": [[761, 1, 1, "", "AverageGradientANOVA"], [772, 1, 1, "", "CategoryResults"], [783, 1, 1, "", "FirstDifferenceGradientANOVA"], [794, 1, 1, "", "GradientANOVA"], [805, 1, 1, "", "GradientANOVAResults"], [816, 1, 1, "", "GroupResults"], [827, 1, 1, "", "TrajectoryGradientANOVA"], [838, 1, 1, "", "WindowDifferenceGradientANOVA"]], "skbio.stats.gradient.AverageGradientANOVA": [[762, 2, 1, "", "__eq__"], [763, 2, 1, "", "__ge__"], [764, 2, 1, "", "__getstate__"], [765, 2, 1, "", "__gt__"], [766, 2, 1, "", "__hash__"], [767, 2, 1, "", "__le__"], [768, 2, 1, "", "__lt__"], [769, 2, 1, "", "__ne__"], [770, 2, 1, "", "__str__"], [771, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.CategoryResults": [[773, 2, 1, "", "__eq__"], [774, 2, 1, "", "__ge__"], [775, 2, 1, "", "__getstate__"], [776, 2, 1, "", "__gt__"], [777, 2, 1, "", "__hash__"], [778, 2, 1, "", "__le__"], [779, 2, 1, "", "__lt__"], [780, 2, 1, "", "__ne__"], [781, 2, 1, "", "__str__"], [782, 2, 1, "", "to_files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[784, 2, 1, "", "__eq__"], [785, 2, 1, "", "__ge__"], [786, 2, 1, "", "__getstate__"], [787, 2, 1, "", "__gt__"], [788, 2, 1, "", "__hash__"], [789, 2, 1, "", "__le__"], [790, 2, 1, "", "__lt__"], [791, 2, 1, "", "__ne__"], [792, 2, 1, "", "__str__"], [793, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVA": [[795, 2, 1, "", "__eq__"], [796, 2, 1, "", "__ge__"], [797, 2, 1, "", "__getstate__"], [798, 2, 1, "", "__gt__"], [799, 2, 1, "", "__hash__"], [800, 2, 1, "", "__le__"], [801, 2, 1, "", "__lt__"], [802, 2, 1, "", "__ne__"], [803, 2, 1, "", "__str__"], [804, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[806, 2, 1, "", "__eq__"], [807, 2, 1, "", "__ge__"], [808, 2, 1, "", "__getstate__"], [809, 2, 1, "", "__gt__"], [810, 2, 1, "", "__hash__"], [811, 2, 1, "", "__le__"], [812, 2, 1, "", "__lt__"], [813, 2, 1, "", "__ne__"], [814, 2, 1, "", "__str__"], [815, 2, 1, "", "to_files"]], "skbio.stats.gradient.GroupResults": [[817, 2, 1, "", "__eq__"], [818, 2, 1, "", "__ge__"], [819, 2, 1, "", "__getstate__"], [820, 2, 1, "", "__gt__"], [821, 2, 1, "", "__hash__"], [822, 2, 1, "", "__le__"], [823, 2, 1, "", "__lt__"], [824, 2, 1, "", "__ne__"], [825, 2, 1, "", "__str__"], [826, 2, 1, "", "to_files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[828, 2, 1, "", "__eq__"], [829, 2, 1, "", "__ge__"], [830, 2, 1, "", "__getstate__"], [831, 2, 1, "", "__gt__"], [832, 2, 1, "", "__hash__"], [833, 2, 1, "", "__le__"], [834, 2, 1, "", "__lt__"], [835, 2, 1, "", "__ne__"], [836, 2, 1, "", "__str__"], [837, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[839, 2, 1, "", "__eq__"], [840, 2, 1, "", "__ge__"], [841, 2, 1, "", "__getstate__"], [842, 2, 1, "", "__gt__"], [843, 2, 1, "", "__hash__"], [844, 2, 1, "", "__le__"], [845, 2, 1, "", "__lt__"], [846, 2, 1, "", "__ne__"], [847, 2, 1, "", "__str__"], [848, 2, 1, "", "get_trajectories"]], "skbio.stats.ordination": [[851, 1, 1, "", "OrdinationResults"], [864, 3, 1, "", "ca"], [865, 3, 1, "", "cca"], [866, 3, 1, "", "corr"], [867, 3, 1, "", "e_matrix"], [868, 3, 1, "", "f_matrix"], [869, 3, 1, "", "mean_and_std"], [870, 3, 1, "", "pcoa"], [871, 3, 1, "", "pcoa_biplot"], [872, 3, 1, "", "rda"], [873, 3, 1, "", "scale"], [874, 3, 1, "", "svd_rank"]], "skbio.stats.ordination.OrdinationResults": [[852, 2, 1, "", "__eq__"], [853, 2, 1, "", "__ge__"], [854, 2, 1, "", "__getstate__"], [855, 2, 1, "", "__gt__"], [856, 2, 1, "", "__hash__"], [857, 2, 1, "", "__le__"], [858, 2, 1, "", "__lt__"], [859, 2, 1, "", "__ne__"], [860, 2, 1, "", "__str__"], [861, 2, 1, "", "plot"], [862, 2, 1, "", "read"], [863, 2, 1, "", "write"]], "skbio.stats.power": [[876, 3, 1, "", "confidence_bound"], [877, 3, 1, "", "paired_subsamples"], [878, 3, 1, "", "subsample_paired_power"], [879, 3, 1, "", "subsample_power"]], "skbio.table": [[881, 1, 1, "", "Table"], [948, 4, 1, "", "example_table"]], "skbio.table.Table": [[882, 2, 1, "", "__eq__"], [883, 2, 1, "", "__ge__"], [884, 2, 1, "", "__getitem__"], [885, 2, 1, "", "__getstate__"], [886, 2, 1, "", "__gt__"], [887, 2, 1, "", "__iter__"], [888, 2, 1, "", "__le__"], [889, 2, 1, "", "__lt__"], [890, 2, 1, "", "__ne__"], [891, 2, 1, "", "__str__"], [892, 2, 1, "", "add_group_metadata"], [893, 2, 1, "", "add_metadata"], [894, 2, 1, "", "align_to"], [895, 2, 1, "", "align_to_dataframe"], [896, 2, 1, "", "align_tree"], [897, 2, 1, "", "collapse"], [898, 2, 1, "", "concat"], [899, 2, 1, "", "copy"], [900, 2, 1, "", "data"], [901, 2, 1, "", "del_metadata"], [902, 2, 1, "", "delimited_self"], [903, 2, 1, "", "descriptive_equality"], [904, 2, 1, "", "exists"], [905, 2, 1, "", "filter"], [906, 2, 1, "", "from_adjacency"], [907, 2, 1, "", "from_hdf5"], [908, 2, 1, "", "from_json"], [909, 2, 1, "", "from_tsv"], [910, 2, 1, "", "get_table_density"], [911, 2, 1, "", "get_value_by_ids"], [912, 2, 1, "", "group_metadata"], [913, 2, 1, "", "head"], [914, 2, 1, "", "ids"], [915, 2, 1, "", "index"], [916, 2, 1, "", "is_empty"], [917, 2, 1, "", "iter"], [918, 2, 1, "", "iter_data"], [919, 2, 1, "", "iter_pairwise"], [920, 2, 1, "", "length"], [921, 2, 1, "", "max"], [922, 2, 1, "", "merge"], [923, 2, 1, "", "metadata"], [924, 2, 1, "", "metadata_to_dataframe"], [925, 2, 1, "", "min"], [926, 2, 1, "", "nonzero"], [927, 2, 1, "", "nonzero_counts"], [928, 2, 1, "", "norm"], [929, 2, 1, "", "pa"], [930, 2, 1, "", "partition"], [931, 2, 1, "", "rankdata"], [932, 2, 1, "", "read"], [933, 2, 1, "", "reduce"], [934, 2, 1, "", "remove_empty"], [935, 2, 1, "", "sort"], [936, 2, 1, "", "sort_order"], [937, 2, 1, "", "subsample"], [938, 2, 1, "", "sum"], [939, 2, 1, "", "to_anndata"], [940, 2, 1, "", "to_dataframe"], [941, 2, 1, "", "to_hdf5"], [942, 2, 1, "", "to_json"], [943, 2, 1, "", "to_tsv"], [944, 2, 1, "", "transform"], [945, 2, 1, "", "transpose"], [946, 2, 1, "", "update_ids"], [947, 2, 1, "", "write"]], "skbio.tree": [[949, 1, 1, "", "TreeNode"], [1028, 3, 1, "", "majority_rule"], [1029, 3, 1, "", "nj"]], "skbio.tree.TreeNode": [[950, 2, 1, "", "__copy__"], [951, 2, 1, "", "__deepcopy__"], [952, 2, 1, "", "__eq__"], [953, 2, 1, "", "__ge__"], [954, 2, 1, "", "__getitem__"], [955, 2, 1, "", "__getstate__"], [956, 2, 1, "", "__gt__"], [957, 2, 1, "", "__hash__"], [958, 2, 1, "", "__iter__"], [959, 2, 1, "", "__le__"], [960, 2, 1, "", "__len__"], [961, 2, 1, "", "__lt__"], [962, 2, 1, "", "__ne__"], [963, 2, 1, "", "__str__"], [964, 2, 1, "", "accumulate_to_ancestor"], [965, 2, 1, "", "ancestors"], [966, 2, 1, "", "append"], [967, 2, 1, "", "ascii_art"], [968, 2, 1, "", "assign_ids"], [969, 2, 1, "", "assign_supports"], [970, 2, 1, "", "bifurcate"], [971, 2, 1, "", "cache_attr"], [972, 2, 1, "", "compare_rfd"], [973, 2, 1, "", "compare_subsets"], [974, 2, 1, "", "compare_tip_distances"], [975, 2, 1, "", "copy"], [976, 2, 1, "", "count"], [977, 2, 1, "", "create_caches"], [978, 2, 1, "", "deepcopy"], [979, 2, 1, "", "descending_branch_length"], [980, 2, 1, "", "distance"], [981, 2, 1, "", "extend"], [982, 2, 1, "", "find"], [983, 2, 1, "", "find_all"], [984, 2, 1, "", "find_by_func"], [985, 2, 1, "", "find_by_id"], [986, 2, 1, "", "from_linkage_matrix"], [987, 2, 1, "", "from_taxdump"], [988, 2, 1, "", "from_taxonomy"], [989, 2, 1, "", "get_max_distance"], [990, 2, 1, "", "has_children"], [991, 2, 1, "", "index_tree"], [992, 2, 1, "", "invalidate_caches"], [993, 2, 1, "", "is_root"], [994, 2, 1, "", "is_tip"], [995, 2, 1, "", "lca"], [996, 2, 1, "", "levelorder"], [997, 2, 1, "", "lowest_common_ancestor"], [998, 2, 1, "", "neighbors"], [999, 2, 1, "", "non_tips"], [1000, 2, 1, "", "observed_node_counts"], [1001, 2, 1, "", "pop"], [1002, 2, 1, "", "postorder"], [1003, 2, 1, "", "pre_and_postorder"], [1004, 2, 1, "", "preorder"], [1005, 2, 1, "", "prune"], [1006, 2, 1, "", "read"], [1007, 2, 1, "", "remove"], [1008, 2, 1, "", "remove_deleted"], [1009, 2, 1, "", "root"], [1010, 2, 1, "", "root_at"], [1011, 2, 1, "", "root_at_midpoint"], [1012, 2, 1, "", "shear"], [1013, 2, 1, "", "shuffle"], [1014, 2, 1, "", "siblings"], [1015, 2, 1, "", "subset"], [1016, 2, 1, "", "subsets"], [1017, 2, 1, "", "subtree"], [1018, 2, 1, "", "tip_tip_distances"], [1019, 2, 1, "", "tips"], [1020, 2, 1, "", "to_array"], [1021, 2, 1, "", "to_taxonomy"], [1022, 2, 1, "", "traverse"], [1023, 2, 1, "", "unpack"], [1024, 2, 1, "", "unpack_by_func"], [1025, 2, 1, "", "unrooted_copy"], [1026, 2, 1, "", "unrooted_deepcopy"], [1027, 2, 1, "", "write"]], "skbio.util": [[1030, 5, 1, "", "EfficiencyWarning"], [1031, 5, 1, "", "RepresentationWarning"], [1032, 3, 1, "", "assert_data_frame_almost_equal"], [1033, 3, 1, "", "assert_ordination_results_equal"], [1034, 3, 1, "", "cardinal_to_ordinal"], [1035, 1, 1, "", "classproperty"], [1052, 3, 1, "", "find_duplicates"], [1053, 3, 1, "", "get_data_path"], [1054, 3, 1, "", "safe_md5"]], "skbio.util.classproperty": [[1036, 2, 1, "", "__delete__"], [1037, 2, 1, "", "__eq__"], [1038, 2, 1, "", "__ge__"], [1039, 2, 1, "", "__get__"], [1040, 2, 1, "", "__getstate__"], [1041, 2, 1, "", "__gt__"], [1042, 2, 1, "", "__hash__"], [1043, 2, 1, "", "__le__"], [1044, 2, 1, "", "__lt__"], [1045, 2, 1, "", "__ne__"], [1046, 2, 1, "", "__set__"], [1047, 2, 1, "", "__set_name__"], [1048, 2, 1, "", "__str__"], [1049, 2, 1, "", "deleter"], [1050, 2, 1, "", "getter"], [1051, 2, 1, "", "setter"]], "skbio.workflow": [[1055, 1, 1, "", "Workflow"], [1067, 1, 1, "", "method"], [1078, 1, 1, "", "requires"]], "skbio.workflow.Workflow": [[1056, 2, 1, "", "__call__"], [1057, 2, 1, "", "__eq__"], [1058, 2, 1, "", "__ge__"], [1059, 2, 1, "", "__getstate__"], [1060, 2, 1, "", "__gt__"], [1061, 2, 1, "", "__hash__"], [1062, 2, 1, "", "__le__"], [1063, 2, 1, "", "__lt__"], [1064, 2, 1, "", "__ne__"], [1065, 2, 1, "", "__str__"], [1066, 2, 1, "", "initialize_state"]], "skbio.workflow.method": [[1068, 2, 1, "", "__call__"], [1069, 2, 1, "", "__eq__"], [1070, 2, 1, "", "__ge__"], [1071, 2, 1, "", "__getstate__"], [1072, 2, 1, "", "__gt__"], [1073, 2, 1, "", "__hash__"], [1074, 2, 1, "", "__le__"], [1075, 2, 1, "", "__lt__"], [1076, 2, 1, "", "__ne__"], [1077, 2, 1, "", "__str__"]], "skbio.workflow.requires": [[1079, 2, 1, "", "__call__"], [1080, 2, 1, "", "__eq__"], [1081, 2, 1, "", "__ge__"], [1082, 2, 1, "", "__getstate__"], [1083, 2, 1, "", "__gt__"], [1084, 2, 1, "", "__hash__"], [1085, 2, 1, "", "__le__"], [1086, 2, 1, "", "__lt__"], [1087, 2, 1, "", "__ne__"], [1088, 2, 1, "", "__str__"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "data", "Python data"], "5": ["py", "exception", "Python exception"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:data", "5": "py:exception"}, "terms": {"": [0, 1, 3, 44, 53, 65, 82, 83, 84, 85, 89, 90, 91, 92, 94, 98, 99, 100, 103, 107, 109, 112, 114, 115, 116, 117, 119, 120, 124, 126, 127, 128, 132, 133, 135, 136, 137, 139, 140, 141, 143, 144, 146, 147, 148, 215, 216, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 291, 292, 293, 303, 315, 338, 339, 356, 357, 358, 370, 371, 375, 377, 379, 382, 384, 387, 389, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 430, 432, 433, 434, 436, 437, 443, 446, 447, 448, 450, 453, 455, 458, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 496, 499, 501, 504, 506, 509, 511, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 552, 554, 557, 559, 562, 564, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 604, 606, 608, 609, 611, 613, 616, 618, 621, 623, 625, 626, 627, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 653, 660, 661, 663, 675, 678, 681, 682, 683, 686, 687, 689, 690, 694, 698, 700, 702, 706, 713, 715, 723, 729, 736, 739, 749, 751, 752, 753, 754, 755, 782, 815, 826, 849, 861, 864, 865, 866, 870, 872, 874, 875, 877, 878, 879, 897, 905, 913, 918, 933, 936, 971, 979, 991, 1007, 1028, 1078, 1090, 1092, 1095, 1097], "0": [0, 1, 3, 13, 14, 15, 17, 18, 19, 32, 33, 34, 44, 45, 46, 47, 50, 51, 52, 53, 65, 77, 82, 83, 85, 88, 91, 92, 94, 104, 105, 107, 112, 116, 117, 118, 121, 122, 130, 132, 133, 143, 144, 149, 161, 174, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 272, 315, 377, 378, 382, 384, 394, 395, 396, 398, 400, 401, 402, 404, 406, 407, 413, 419, 421, 423, 425, 428, 430, 431, 432, 433, 434, 436, 446, 447, 448, 449, 453, 455, 465, 466, 468, 470, 471, 472, 474, 481, 486, 488, 490, 492, 496, 497, 499, 500, 504, 506, 516, 517, 519, 521, 522, 523, 525, 532, 538, 540, 542, 544, 549, 550, 552, 553, 557, 559, 569, 570, 571, 573, 575, 576, 577, 579, 581, 582, 588, 594, 596, 598, 600, 603, 604, 606, 607, 608, 609, 611, 612, 616, 618, 628, 629, 630, 632, 639, 641, 643, 647, 649, 660, 661, 664, 669, 672, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 713, 718, 721, 723, 736, 743, 746, 747, 749, 751, 752, 753, 755, 756, 757, 759, 760, 794, 849, 850, 861, 865, 869, 870, 873, 875, 876, 878, 879, 880, 881, 884, 894, 895, 896, 897, 898, 900, 904, 905, 908, 911, 912, 913, 914, 915, 917, 918, 922, 923, 928, 929, 930, 931, 933, 935, 936, 937, 938, 940, 941, 943, 944, 946, 948, 950, 951, 964, 969, 972, 973, 974, 975, 978, 979, 980, 983, 989, 1001, 1007, 1011, 1012, 1013, 1018, 1020, 1023, 1024, 1028, 1029, 1034, 1067, 1090, 1092, 1095, 1097], "00": [1, 215, 216, 220, 223, 226, 395, 432, 465, 516, 570, 604, 628, 1029, 1092], "000": 146, "000000": [1, 1029], "000000e": [215, 216], "000123": 229, "000133446": 974, "000532": 850, "001": [683, 875], "001562": 850, "00193863362662502": 878, "003": 879, "0031": 760, "005": 879, "007022633956606": 760, "007446": 688, "0082138": [53, 104], "01": [226, 875], "0118478282382": 760, "0123": 229, "0123456789": 293, "012631": 850, "015": [694, 700], "016": 875, "02": [226, 231, 683], "020131": 688, "0220": [694, 700], "0225": 760, "029747": 850, "03": [226, 755], "0301": 760, "032": 875, "0341": 760, "036910": 688, "0378111988903307": 217, "03t14": 908, "04": [226, 875], "043888": 688, "044": 875, "044805": 850, "048219": 688, "05": [1, 226, 683, 688, 759, 875, 876, 878, 879, 1032], "051": 875, "056": 879, "06": [226, 908], "0625": 692, "0633": 760, "065613": 688, "068310": 688, "07": 226, "0721": 760, "074": 879, "08": [226, 229, 875, 878], "083071": 230, "0874": 760, "088": 878, "0898": 760, "09": 226, "09392265": 1, "09861229": 681, "0i": 683, "0th": [924, 1034], "1": [0, 1, 3, 13, 14, 15, 17, 18, 19, 20, 33, 34, 44, 46, 47, 50, 51, 52, 53, 65, 70, 82, 83, 84, 85, 88, 91, 92, 94, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 146, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 243, 244, 293, 303, 315, 318, 320, 377, 382, 384, 394, 395, 396, 402, 404, 417, 418, 419, 423, 428, 429, 430, 433, 434, 436, 437, 444, 445, 446, 447, 448, 453, 455, 465, 466, 472, 474, 484, 485, 486, 490, 495, 496, 499, 504, 506, 516, 517, 523, 525, 536, 537, 538, 542, 548, 549, 552, 557, 559, 569, 570, 571, 577, 579, 592, 593, 594, 598, 603, 605, 606, 608, 609, 611, 616, 618, 628, 629, 632, 637, 638, 639, 643, 647, 649, 660, 661, 664, 667, 669, 671, 672, 675, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 713, 718, 720, 721, 723, 725, 736, 737, 743, 745, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 759, 794, 816, 838, 849, 850, 861, 864, 865, 869, 872, 873, 875, 877, 878, 879, 880, 881, 894, 895, 896, 897, 898, 901, 904, 905, 907, 908, 911, 912, 913, 914, 915, 917, 918, 922, 923, 925, 928, 929, 930, 931, 933, 935, 936, 937, 938, 940, 941, 943, 944, 946, 948, 964, 969, 972, 974, 979, 980, 983, 987, 988, 989, 1001, 1011, 1012, 1013, 1018, 1020, 1021, 1023, 1024, 1028, 1029, 1034, 1092, 1095, 1097], "10": [53, 84, 104, 107, 122, 123, 161, 174, 216, 219, 220, 221, 222, 223, 225, 226, 227, 293, 303, 318, 377, 402, 448, 472, 499, 523, 552, 577, 611, 683, 688, 694, 700, 755, 850, 875, 878, 879, 884, 894, 897, 898, 902, 918, 922, 1029, 1097], "100": [1, 215, 216, 220, 223, 318, 683, 688, 879, 913, 937, 1097], "1000": [318, 849], "1004": 760, "1004075": [694, 700], "100548": 850, "1007": [219, 694, 700], "101": 688, "10136628": 686, "102": 688, "1024": 218, "103": 688, "104": [230, 688], "1048576": 1054, "104937": 850, "1055": 760, "10596": 216, "108": 875, "10915": [100, 103, 661], "10919": [100, 103, 661], "1093": [221, 1029], "10937312": 1, "11": [0, 45, 53, 100, 103, 104, 110, 115, 116, 215, 219, 226, 228, 377, 403, 473, 524, 552, 578, 631, 683, 688, 694, 700, 760, 850, 865, 872, 875, 894, 897, 898, 918, 1029], "110": 688, "1115": 125, "112": 931, "1126": 125, "1131255": 1054, "114": 215, "1154": 760, "116": 760, "1167": 865, "117": 751, "11704769": 689, "117693430600200007": 116, "1179": 865, "11th": 227, "12": [1, 219, 226, 611, 683, 688, 694, 875, 897, 898, 931, 1092], "120": [223, 688], "120492524415": 1095, "1215": 760, "123": [229, 849], "12345": [220, 611], "126": 221, "127": 878, "128": 688, "13": [0, 111, 133, 137, 216, 220, 226, 228, 377, 448, 499, 552, 611, 683, 688, 850, 897, 898, 941], "131": [133, 137, 972], "131567": 231, "1345": 108, "1347": 108, "135": [216, 694, 700], "1371": [53, 104, 694, 700], "139": 230, "14": [1, 111, 121, 132, 219, 221, 226, 398, 402, 468, 472, 519, 523, 573, 577, 683, 688, 760, 879, 898, 980, 1018], "14092516": 690, "141": [132, 972], "142857": 756, "14285714": 696, "142857142857": 928, "143": 751, "1435": 220, "144": 137, "1457": 759, "1468": 759, "147": 101, "1495": 219, "149855": 220, "1499": 219, "15": [53, 100, 103, 121, 216, 226, 229, 760, 875, 878, 879, 898, 1018], "1535": 969, "1542": [216, 969], "156": 118, "1566": 216, "157": 875, "1576": [143, 144], "15800534": 215, "1585": [143, 144], "16": [1, 114, 132, 217, 220, 221, 222, 226, 227, 394, 403, 428, 473, 524, 569, 578, 603, 631, 688, 861, 875, 879, 894, 898, 989, 1018], "16025641": 1, "161": 215, "16247744": 684, "1627907": 1, "163": [112, 136, 137], "164998": 688, "165": 132, "168": [108, 878], "169": [143, 144], "17": [114, 116, 143, 144, 219, 226, 377, 552, 850, 878, 898], "170768970": 215, "172": [143, 144], "1740": 219, "17445763": 684, "1767": 221, "1771": 221, "1786181": 216, "18": [216, 226, 230, 751, 875, 1092], "1800": 219, "1814": 104, "182343": 688, "1859": 219, "1875": 692, "18761279": 684, "19": [1, 219, 226, 875, 897], "1907511": 219, "1912": 118, "1913": 105, "192": 230, "19234468": 222, "193": 107, "194": 132, "1943": 117, "1948": 135, "1949": [112, 136, 137], "195": 101, "1953": 119, "1955": 118, "1956": 109, "1958": 124, "1966": [133, 137], "1967": [125, 753], "1968": 134, "1970": [98, 108], "1974": [120, 126], "1976": 121, "1978": 661, "1981": [101, 972, 1028], "1983": 115, "1984": [110, 377, 448, 499, 552, 611], "1985": [220, 377, 448, 499, 552, 611], "1986": [220, 225, 227, 865], "1987": [128, 1029], "199": 222, "1990": [215, 216, 219], "1991": 219, "1992": [100, 103, 107, 116, 132, 661, 701], "1993": [107, 751, 752], "1995": 865, "1997": [116, 230, 1029], "1998": [121, 850, 864, 865, 867, 868, 870, 872], "1d": [88, 141, 161, 174, 187, 198, 377, 379, 384, 396, 397, 399, 400, 402, 403, 405, 415, 416, 417, 421, 422, 423, 424, 425, 427, 430, 450, 455, 466, 467, 469, 470, 472, 473, 475, 483, 484, 488, 489, 490, 491, 492, 494, 496, 499, 501, 506, 517, 518, 520, 521, 523, 524, 526, 535, 536, 540, 541, 542, 543, 544, 546, 547, 549, 552, 554, 559, 571, 572, 574, 575, 577, 578, 580, 590, 591, 592, 596, 597, 598, 599, 600, 602, 606, 611, 613, 618, 629, 630, 631, 636, 637, 641, 642, 643, 644, 646, 647], "1e": [216, 225, 1032], "1e51ca3a5450c43524b9185c236cc5cc": 219, "1e9": 229, "1st": [77, 827, 1034], "1x1": 227, "2": [0, 1, 3, 13, 14, 15, 18, 19, 45, 46, 47, 50, 51, 52, 53, 65, 70, 77, 82, 83, 84, 86, 88, 91, 92, 94, 98, 99, 100, 101, 102, 103, 107, 110, 112, 114, 116, 118, 121, 122, 123, 125, 126, 128, 132, 135, 136, 137, 143, 144, 145, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 244, 303, 315, 318, 320, 358, 377, 394, 395, 396, 402, 403, 404, 407, 415, 417, 419, 428, 430, 434, 437, 446, 447, 465, 466, 472, 473, 474, 483, 484, 486, 496, 516, 517, 523, 524, 525, 535, 536, 538, 549, 569, 570, 571, 577, 578, 579, 582, 590, 592, 594, 603, 606, 609, 611, 628, 629, 631, 632, 636, 637, 639, 647, 649, 660, 661, 667, 669, 672, 675, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 713, 718, 721, 723, 725, 736, 743, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 759, 760, 849, 850, 861, 864, 865, 867, 870, 872, 875, 877, 878, 879, 880, 881, 894, 895, 896, 897, 898, 901, 902, 905, 907, 908, 913, 920, 921, 922, 925, 928, 931, 937, 939, 940, 941, 944, 946, 948, 964, 969, 970, 972, 974, 979, 980, 985, 987, 988, 989, 1012, 1013, 1018, 1020, 1021, 1023, 1024, 1028, 1029, 1034, 1090, 1092, 1095, 1097], "20": [0, 3, 226, 499, 683, 688, 861, 867, 875, 878, 879, 913], "200": [222, 688], "2000": [107, 879, 1029], "2001": 754, "2002": [84, 116, 132, 140, 216, 220], "2003": [220, 680], "2004": 127, "2005": [143, 219], "2006": [116, 755, 1029], "2007": [132, 143, 144], "2008": [220, 227], "2009": [221, 222, 759], "201": [107, 688], "2010": [116, 143, 144, 221], "2011": [122, 123, 132, 143, 144], "2012": [132, 222, 231, 753, 881, 948], "2013": [53, 104, 114, 132, 698, 861], "2014": [53, 104, 215, 227, 688, 698, 908], "2015": [84, 680, 683, 694, 700], "2016": [132, 694, 700], "2017": 969, "2018": 231, "202": 688, "2020": 231, "2022": 231, "2024": 229, "203": 688, "20309816": 760, "205": 752, "207": 132, "209": [219, 222, 753], "21": [219, 226, 683, 694, 700, 868, 879, 897, 913, 944], "210": 107, "2106": 132, "2107852473": 691, "2113": 132, "2130": 216, "21383822": 687, "215": [215, 216], "217": 107, "21712454": 861, "2186": 760, "219": [216, 219, 752], "22": [100, 103, 226, 231, 661, 683, 875, 913, 1092], "220": 753, "22054469": 690, "2208": 760, "2214": 216, "224": 875, "226": 879, "227": [107, 220], "229": 875, "23": [1, 226, 229, 230, 445, 683, 897, 913, 1029, 1092], "23059566": 697, "23632778": 687, "2364": 760, "237": [119, 140], "238327": 850, "239": 1028, "23e": 229, "24": [0, 216, 226, 661, 878, 908, 913], "24270353": 1, "245": 755, "246": [107, 140, 230], "24714631": 697, "25": [0, 1, 88, 101, 116, 121, 132, 143, 144, 146, 219, 225, 226, 400, 404, 406, 419, 423, 432, 436, 470, 474, 486, 490, 521, 525, 538, 542, 575, 579, 581, 594, 598, 604, 630, 632, 639, 643, 683, 695, 751, 752, 755, 760, 875, 878, 879, 928, 1092], "2500": 879, "253": 755, "255": [53, 865], "256": [134, 875], "257": 134, "25737316": 697, "259": 230, "25th": 683, "26": [114, 216, 225, 683, 754, 759, 861], "260656459": 222, "26118259": 687, "262": 121, "264": 119, "26433692": 1, "26488486": 697, "265": 110, "27": [0, 116, 135, 143, 144, 216, 499, 694, 753], "270": 110, "272": 879, "2761": 760, "278": 116, "28": [0, 132, 226, 875], "28571429": 696, "28865141": 687, "289": 865, "29": [219, 221, 222], "293463": 688, "29597001": 760, "29672718": 690, "2_": 107, "2a": 227, "2b": 118, "2d": [53, 98, 99, 100, 101, 102, 103, 141, 145, 146, 149, 174, 198, 649, 664, 673, 691, 757, 866, 873], "2e": 229, "2f_2": 110, "2m5p3d1i": [45, 50], "2nd": [827, 917, 1034], "2nf_2": 115, "2x2": [1, 224, 922, 928], "2x3": [904, 905, 911, 912, 914, 915, 917, 923, 929, 930, 933, 935, 936, 938, 943, 944, 946], "3": [1, 3, 13, 14, 15, 18, 19, 46, 47, 50, 51, 52, 53, 65, 70, 82, 83, 85, 88, 91, 92, 94, 95, 98, 102, 107, 115, 116, 119, 124, 132, 135, 140, 143, 144, 161, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 293, 303, 315, 320, 382, 384, 394, 395, 396, 401, 402, 418, 419, 421, 427, 428, 430, 433, 434, 446, 447, 453, 455, 465, 466, 471, 472, 485, 486, 488, 494, 496, 499, 504, 506, 516, 517, 522, 523, 537, 538, 540, 546, 549, 557, 559, 569, 570, 571, 576, 577, 593, 594, 596, 602, 603, 606, 608, 609, 611, 616, 618, 628, 629, 638, 639, 641, 646, 647, 660, 669, 672, 675, 679, 680, 681, 682, 684, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 700, 702, 713, 718, 721, 723, 736, 743, 746, 747, 749, 751, 752, 753, 755, 756, 757, 759, 760, 761, 783, 794, 827, 850, 851, 861, 864, 865, 870, 875, 877, 878, 879, 880, 894, 895, 896, 897, 898, 900, 901, 904, 905, 908, 911, 912, 913, 914, 915, 917, 918, 920, 922, 923, 925, 928, 929, 930, 931, 933, 935, 936, 937, 938, 939, 940, 941, 943, 944, 946, 948, 964, 974, 979, 980, 987, 988, 989, 1012, 1016, 1018, 1020, 1021, 1023, 1024, 1029, 1034, 1089, 1092, 1095, 1097], "30": [0, 216, 222, 223, 226, 228, 878, 879, 918, 1002], "3021": [377, 448, 499, 552, 611], "30216948": 684, "3030": [377, 448, 499, 552, 611], "30409883": 686, "30870431": 1, "30927835": 1, "31": 216, "312": 230, "314": 219, "32": [226, 754], "32495488": 684, "32630": 222, "329": 215, "33": [83, 116, 143, 144, 221, 401, 471, 522, 576, 688, 752, 755, 875, 878, 1092], "330": 215, "332": 875, "33333333333333331": 1, "335928": 231, "34": [222, 228, 969], "34180297": 690, "343": 222, "344": 222, "3447015": 1029, "345": 661, "34891526": 684, "34989": 220, "35": [1, 219, 221, 222, 228, 680, 879], "3519": 760, "352": 661, "354": 760, "355": [219, 760], "356": 760, "36": [124, 134, 226, 229, 694, 700, 875], "36463": 230, "36514837": 698, "37": [143, 230], "3716": 760, "375": 692, "379": 135, "379593": 1054, "38": [0, 215, 221, 226, 875], "38629436": 681, "3899": 219, "39": [220, 226, 698], "3937": 108, "3e": [215, 216, 875], "3f": 759, "3k1v_a": 222, "3rd": [753, 827, 871, 1034, 1097], "3x": 1002, "3x2": 922, "3x3": [701, 753, 756, 757], "4": [0, 1, 3, 14, 18, 46, 51, 65, 82, 85, 86, 90, 92, 105, 107, 116, 119, 132, 143, 144, 219, 220, 222, 225, 226, 227, 229, 230, 231, 293, 303, 315, 320, 377, 384, 389, 394, 395, 404, 414, 418, 428, 430, 433, 434, 436, 447, 455, 460, 465, 474, 482, 485, 496, 506, 511, 516, 525, 533, 537, 549, 559, 564, 569, 570, 579, 589, 593, 603, 606, 608, 609, 611, 618, 623, 628, 632, 635, 638, 647, 649, 660, 661, 669, 675, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 696, 697, 698, 700, 713, 718, 723, 736, 743, 747, 749, 751, 753, 759, 850, 864, 865, 872, 875, 880, 894, 895, 896, 898, 901, 902, 908, 912, 913, 922, 931, 935, 936, 940, 941, 964, 974, 979, 980, 987, 988, 989, 1018, 1020, 1021, 1023, 1024, 1028, 1029, 1092, 1095], "40": [1, 119, 220, 229, 231, 698, 877, 879, 908, 913], "400": 752, "402": 116, "403": [215, 216], "40824829": [698, 699], "41": [220, 226, 913], "410": [215, 216], "4140": 760, "4148": [112, 136, 137], "42": [1, 92, 117, 220, 226, 227, 229, 377, 400, 470, 521, 552, 575, 630, 752, 755, 904, 905, 911, 912, 913, 914, 915, 917, 923, 929, 930, 931, 933, 938, 943, 944, 946], "423": 135, "42512039": 1, "426": 879, "42857143": 696, "43": [92, 128, 226, 913, 933, 938, 1028], "431": 132, "4375": 692, "44": [1, 133, 755, 913, 1028], "443": 98, "444": 132, "45": [1, 226, 229, 879], "450": 752, "456": 864, "45995501": 861, "46": [226, 754, 879, 917, 933, 938], "4603377592": 223, "4603378712": 223, "4604421736": 223, "462339": 688, "466911": 850, "467481": 688, "46774194": 1, "4693": 220, "47": [226, 875, 938], "48": [98, 125], "480232": 688, "484": 875, "49": [0, 223, 226], "4hh": 219, "4x4": [751, 752, 1018], "5": [0, 1, 3, 14, 15, 18, 19, 46, 47, 50, 51, 52, 53, 83, 92, 99, 102, 104, 111, 116, 118, 132, 143, 144, 146, 149, 214, 216, 219, 220, 221, 222, 225, 227, 230, 231, 293, 382, 384, 394, 395, 396, 402, 404, 406, 407, 413, 419, 425, 428, 430, 446, 453, 455, 465, 466, 472, 474, 481, 486, 492, 496, 504, 506, 516, 517, 523, 525, 532, 538, 544, 549, 557, 559, 569, 570, 571, 577, 579, 581, 582, 588, 594, 600, 603, 606, 616, 618, 628, 629, 632, 639, 647, 660, 661, 675, 678, 683, 688, 692, 695, 701, 713, 723, 736, 747, 749, 751, 752, 755, 756, 759, 850, 865, 875, 878, 879, 880, 884, 894, 895, 896, 897, 898, 908, 913, 921, 922, 931, 940, 944, 948, 964, 969, 973, 974, 976, 979, 980, 987, 988, 989, 1011, 1012, 1013, 1018, 1020, 1021, 1028, 1029, 1032, 1095], "50": [1, 100, 103, 220, 223, 226, 395, 465, 516, 570, 628, 683, 688, 760, 861, 878, 879, 905, 1092], "500": [878, 879], "5007512": 861, "50th": [220, 683], "52": 226, "52199973": 760, "528": 878, "528243": 688, "53": [98, 226, 972], "530": 752, "533": 875, "533729": 688, "5338": 116, "54": [120, 144], "54772256": 698, "55": [226, 398, 468, 519, 573, 755, 760, 875, 1029], "55152525": 230, "555": 120, "556061": 688, "5565": 216, "557": 120, "5587": 216, "56": [132, 398, 468, 519, 573], "560": 126, "5671": 216, "57": [216, 226, 865, 918], "572": 875, "58": [117, 226, 875], "581": 219, "59": 221, "5917809": 686, "594590": 688, "5990": 230, "5996": 230, "5e": 229, "6": [1, 3, 13, 14, 15, 18, 19, 46, 47, 51, 52, 85, 110, 111, 116, 130, 132, 143, 144, 216, 219, 220, 221, 222, 229, 230, 231, 394, 395, 403, 404, 427, 428, 430, 448, 465, 473, 474, 494, 496, 516, 524, 525, 546, 549, 569, 570, 578, 579, 602, 603, 606, 628, 631, 632, 646, 647, 675, 683, 685, 690, 693, 694, 696, 723, 747, 749, 753, 755, 756, 759, 850, 875, 894, 897, 898, 908, 913, 922, 928, 931, 964, 969, 979, 980, 988, 989, 1018, 1020, 1021, 1028, 1092], "60": [217, 218, 219, 223, 760, 878, 913], "601": 875, "601277": 688, "6018555": 753, "602": 875, "607": 760, "609": 219, "61": [226, 755, 879, 913], "617": 875, "619": 230, "62": [116, 143, 144, 217, 218, 221, 755, 913, 1092], "6212": 230, "6216": 760, "6234": 230, "627677": 688, "63": [216, 226, 913], "634": 760, "64": [1, 146, 221, 229, 436, 437, 913, 1024], "641": 230, "646": 879, "646e": 875, "65": 760, "65463348": 861, "66": [222, 226, 401, 471, 522, 576, 755, 1092], "664": 875, "6666666666666667": 1095, "67": [222, 226, 394, 401, 428, 471, 522, 569, 576, 603, 751, 755, 865, 875, 1092], "68": [222, 760, 878], "6821": 216, "68235294": 1, "68339802": 689, "688": [112, 136, 137], "69": 226, "6913": 760, "692": 116, "6928": 216, "69314718": 681, "694": 116, "6e": 216, "6x6": [1, 755], "7": [1, 101, 111, 132, 146, 220, 221, 222, 230, 231, 293, 303, 315, 320, 377, 384, 395, 446, 455, 465, 506, 516, 552, 559, 570, 618, 628, 675, 688, 723, 749, 752, 753, 755, 756, 759, 850, 875, 881, 894, 897, 898, 931, 948, 974, 988, 1012, 1020, 1021, 1029, 1033, 1092], "70": 226, "702656": 688, "70710678": [698, 699], "707221": 688, "71": [124, 143, 226, 230], "714286": 752, "71597633": 1, "72": 132, "73": [143, 144], "74": 226, "75": [1, 88, 116, 121, 143, 144, 421, 488, 540, 596, 641, 683, 701, 752, 755, 928, 931, 1024], "750792": 688, "7559": 753, "755929": 756, "75th": 683, "76": [127, 132, 226], "77": [127, 755], "7715": 760, "771517": 752, "77549923": 1, "7768362": 689, "779": 875, "78": [226, 1024], "78142077": 1, "783": 875, "78787879": 1, "788": 875, "79": [220, 223, 226], "793": 128, "79451346": 686, "8": [0, 1, 13, 104, 215, 216, 221, 222, 227, 230, 231, 244, 320, 395, 404, 427, 432, 448, 465, 474, 494, 516, 525, 546, 570, 579, 602, 604, 628, 632, 646, 675, 694, 700, 723, 749, 752, 759, 850, 875, 879, 880, 894, 897, 898, 902, 931, 979, 988, 1021, 1029, 1092, 1095], "80": [107, 220, 850, 878, 879, 913, 969, 1024, 1097], "803": 128, "80332382": 861, "806": 879, "81": 913, "810": 752, "811": 216, "81521739": 1, "81649658": [698, 699], "818": 121, "82": [216, 217, 230, 913], "820": 121, "8228": 143, "8235": 143, "824": 879, "82857143": 1, "82967033": 1, "83": [214, 913, 948], "8304": 760, "832": 759, "836": 875, "838": 875, "84": 913, "844": 875, "8468": 216, "848": 875, "85": [219, 226, 879, 1024], "8547619": 1, "8552": 216, "857142857143": 928, "85714286": 1, "86": [377, 552], "86111111": 1, "86666667": 1, "86813187": 1, "87": [107, 226], "87709497": 1, "87777778": 1, "88": [230, 755, 878], "884420": 908, "884498": 688, "89": [100, 103, 222, 661], "89285714": 1, "8e": 216, "9": [1, 215, 216, 217, 220, 223, 226, 229, 230, 272, 293, 303, 377, 398, 402, 448, 468, 472, 499, 519, 523, 552, 573, 577, 611, 683, 688, 759, 760, 850, 864, 865, 867, 868, 870, 871, 872, 875, 894, 897, 898, 976, 979, 988, 1018, 1021, 1028, 1029, 1092], "90": [84, 223, 688, 1097], "900": 318, "905": 115, "909": 216, "912": 115, "91769271": 861, "92": 752, "9223489": 230, "922404392093": 1, "9230769230": 679, "928": 875, "93": 221, "932": 875, "939336": 1, "94": [216, 226], "95": [111, 115, 116, 122, 221, 226, 969], "952": 879, "95224719": 1, "956": 875, "96": [111, 223], "97": [226, 688], "978387": 688, "984": 875, "98435423": 1, "98796148": 1, "99": [215, 216, 219, 226, 751, 755, 759, 931], "991987": 688, "996": [875, 879], "999": [1, 611, 751, 753, 754, 755, 756, 759], "999887756453524252": 230, "9e": 215, "9f": 974, "A": [1, 50, 53, 65, 86, 88, 91, 92, 93, 96, 98, 100, 103, 107, 110, 115, 116, 117, 118, 120, 121, 127, 132, 135, 143, 144, 146, 172, 185, 210, 211, 212, 213, 215, 217, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 257, 261, 262, 267, 274, 275, 293, 314, 318, 319, 340, 358, 373, 377, 398, 404, 410, 426, 430, 437, 443, 448, 468, 474, 478, 493, 496, 499, 519, 525, 529, 545, 549, 552, 573, 579, 585, 601, 606, 611, 632, 645, 647, 649, 660, 661, 665, 667, 669, 670, 674, 675, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 713, 716, 718, 719, 722, 723, 725, 736, 740, 743, 744, 748, 749, 752, 753, 754, 755, 757, 759, 772, 794, 816, 860, 861, 862, 864, 865, 870, 872, 877, 878, 879, 880, 884, 895, 896, 897, 901, 906, 907, 908, 909, 917, 924, 930, 932, 933, 934, 935, 936, 937, 940, 941, 942, 944, 949, 950, 951, 964, 969, 972, 974, 975, 978, 979, 980, 981, 984, 985, 986, 989, 991, 998, 1006, 1008, 1010, 1011, 1016, 1018, 1025, 1026, 1028, 1078, 1090, 1095, 1097], "AS": 230, "AT": [83, 220, 221, 227], "And": [223, 377, 499, 695, 1092], "As": [1, 219, 222, 225, 229, 611, 671, 720, 745, 753, 755, 865, 982, 1090, 1097], "At": [229, 232, 897], "Be": 611, "By": [92, 121, 132, 141, 145, 220, 222, 229, 683, 755, 869, 870, 873, 907, 919, 1018, 1029, 1056], "For": [1, 65, 84, 93, 97, 104, 132, 172, 173, 185, 186, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 303, 318, 319, 320, 321, 358, 373, 376, 377, 426, 435, 493, 498, 499, 545, 551, 552, 601, 610, 611, 645, 648, 661, 670, 676, 683, 688, 719, 724, 744, 750, 751, 752, 753, 754, 755, 757, 759, 761, 827, 861, 862, 863, 864, 865, 875, 877, 878, 879, 881, 897, 902, 903, 924, 932, 937, 947, 948, 969, 1006, 1027, 1028, 1030, 1031, 1090, 1092, 1095], "IF": 924, "IN": 230, "If": [1, 13, 15, 19, 45, 47, 50, 52, 53, 65, 82, 84, 85, 88, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 104, 107, 110, 111, 116, 117, 118, 122, 128, 132, 141, 143, 144, 145, 146, 149, 161, 172, 185, 209, 210, 211, 212, 215, 218, 220, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 243, 244, 245, 258, 260, 264, 265, 268, 269, 272, 285, 286, 287, 293, 302, 306, 319, 320, 332, 333, 334, 350, 351, 352, 358, 367, 368, 371, 372, 373, 377, 379, 384, 394, 395, 396, 398, 400, 402, 404, 407, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 428, 430, 431, 446, 448, 450, 455, 465, 466, 468, 470, 472, 474, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 496, 497, 499, 501, 506, 516, 517, 519, 521, 523, 525, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 549, 550, 552, 554, 559, 569, 570, 571, 573, 575, 577, 579, 582, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 603, 606, 607, 608, 609, 611, 613, 618, 628, 629, 630, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 653, 660, 661, 663, 664, 665, 668, 669, 670, 675, 678, 679, 683, 685, 688, 689, 690, 692, 693, 699, 702, 706, 713, 715, 716, 717, 718, 719, 723, 729, 736, 739, 740, 741, 742, 743, 744, 749, 751, 752, 753, 754, 755, 756, 757, 759, 794, 805, 838, 849, 860, 861, 862, 864, 865, 866, 869, 870, 873, 875, 876, 877, 878, 879, 880, 884, 892, 894, 897, 898, 900, 901, 902, 905, 906, 907, 908, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 930, 931, 932, 933, 934, 937, 938, 939, 940, 941, 942, 943, 944, 946, 969, 971, 972, 976, 979, 982, 983, 987, 992, 995, 997, 1000, 1006, 1011, 1012, 1013, 1018, 1020, 1021, 1022, 1028, 1029, 1032, 1033, 1034, 1035], "In": [1, 3, 53, 84, 116, 132, 143, 144, 146, 220, 221, 222, 223, 225, 227, 231, 358, 377, 407, 446, 499, 552, 582, 649, 680, 683, 688, 701, 752, 753, 759, 849, 864, 865, 870, 875, 879, 894, 949, 969, 982, 1028, 1090, 1092, 1095, 1097], "It": [1, 3, 53, 105, 112, 116, 117, 119, 132, 139, 214, 215, 217, 220, 221, 222, 223, 225, 227, 229, 231, 244, 293, 303, 306, 314, 315, 317, 318, 320, 377, 413, 425, 481, 492, 499, 532, 544, 552, 588, 600, 604, 683, 686, 688, 692, 701, 742, 753, 754, 759, 782, 783, 815, 826, 838, 864, 865, 869, 872, 875, 878, 879, 905, 944, 949, 950, 951, 975, 978, 1032, 1054, 1078, 1092], "Its": [16, 48, 872], "NOT": [53, 126, 272], "No": [66, 111, 215, 216, 219, 228, 231, 303, 393, 464, 515, 568, 627, 753], "Not": [221, 377, 430, 496, 549, 606, 647, 755], "ONE": [53, 104], "OR": 66, "Of": 222, "On": 870, "One": [116, 227, 232, 372, 688, 737, 1029], "That": [133, 137, 225, 420, 487, 539, 595, 640], "The": [0, 1, 3, 13, 14, 15, 16, 44, 45, 46, 47, 48, 50, 53, 54, 82, 83, 84, 85, 86, 89, 90, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 110, 111, 116, 117, 118, 119, 121, 126, 128, 132, 133, 134, 135, 137, 140, 141, 143, 144, 145, 146, 147, 148, 149, 161, 172, 173, 174, 185, 186, 187, 198, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 243, 244, 245, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 285, 290, 291, 292, 293, 294, 303, 304, 305, 314, 315, 316, 317, 318, 319, 321, 322, 332, 337, 338, 339, 350, 355, 356, 357, 358, 367, 368, 370, 371, 372, 373, 374, 375, 376, 379, 382, 384, 389, 394, 395, 396, 398, 400, 404, 412, 414, 415, 417, 418, 419, 426, 428, 430, 434, 435, 436, 445, 446, 447, 450, 453, 455, 460, 465, 466, 468, 470, 474, 480, 482, 483, 484, 485, 486, 493, 496, 498, 501, 504, 506, 511, 516, 517, 519, 521, 525, 531, 533, 535, 536, 537, 538, 545, 549, 551, 552, 554, 557, 559, 564, 569, 570, 571, 573, 575, 579, 587, 589, 590, 592, 593, 594, 601, 603, 606, 609, 610, 611, 613, 616, 618, 623, 628, 629, 630, 632, 634, 635, 636, 637, 638, 639, 645, 647, 648, 649, 653, 660, 665, 670, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 695, 697, 698, 699, 702, 706, 713, 716, 719, 723, 724, 725, 729, 736, 737, 740, 742, 744, 747, 749, 750, 751, 752, 753, 754, 755, 757, 759, 760, 772, 794, 805, 816, 838, 849, 851, 862, 863, 864, 865, 869, 870, 871, 872, 875, 876, 877, 878, 879, 881, 884, 892, 893, 894, 895, 896, 897, 898, 901, 904, 906, 907, 909, 910, 911, 912, 913, 914, 917, 919, 920, 921, 922, 923, 924, 925, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 941, 943, 944, 945, 947, 948, 964, 965, 970, 971, 972, 973, 974, 976, 977, 979, 980, 982, 983, 985, 986, 987, 988, 989, 991, 995, 997, 998, 1001, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1018, 1020, 1027, 1028, 1029, 1032, 1035, 1053, 1055, 1056, 1090, 1092, 1095, 1097], "Then": [1, 3, 683, 695, 760, 850], "There": [1, 92, 117, 128, 216, 222, 225, 228, 401, 471, 522, 576, 725, 870, 878, 879, 897, 922, 1090, 1095, 1097], "These": [0, 1, 83, 89, 90, 106, 116, 143, 144, 222, 225, 229, 230, 231, 322, 412, 414, 480, 482, 531, 533, 587, 589, 634, 635, 677, 756, 758, 851, 871, 877, 884, 922], "To": [1, 72, 116, 143, 144, 220, 221, 222, 225, 228, 229, 232, 272, 358, 377, 499, 552, 683, 688, 725, 747, 751, 753, 755, 759, 875, 969, 1090, 1097], "Will": [88, 263, 266, 270, 272, 290, 337, 355, 374, 662, 674, 714, 722, 738, 748, 851, 880], "With": [215, 680, 692], "_": [107, 217, 220, 221, 225, 230, 315, 382, 453, 504, 557, 616, 701, 753, 929], "_1": 225, "__": 222, "____________1______________2_________": 230, "________________": 230, "____________________": 230, "__copy__": [69, 305], "__deepcopy__": [68, 304], "__eq__": [79, 282, 312, 329, 347, 365, 658, 711, 734], "__init__": [232, 243, 245], "__iter__": 91, "__locat": 222, "__ne__": [276, 323, 341, 359], "__reversed__": 91, "_block_comput": 146, "_ci": 106, "_except": 227, "_interval_tre": 303, "_io": [214, 218], "_is_stale_tre": 303, "_leaf_index": 991, "_myformat_sniff": 232, "_myformat_to_some_skbio_class": 232, "_not_": [897, 1025], "_rebuild_tre": 303, "_setup_debug_trac": 1066, "_some_skbio_class_to_myformat": 232, "_tree": 1028, "aT": 221, "a_1": 225, "aa": [91, 220, 222, 227, 436], "aaa": [230, 417, 484, 536, 592, 637], "aaaaaaaaa": 219, "aaaaaaaaaa": 219, "aaaaaaattttttt": 1097, "aaaaaactctctaaactcactaaggctctctacccctcttcagagaagtcga": 0, "aaaaaccgat": 219, "aaaataaata": 219, "aaacaaacca": 219, "aaaccattgc": [220, 227], "aaacccttgc": [220, 227], "aaacccttgccg": 220, "aaacccttgccggtacgcttaaaccattgccggtacgcttaa": 220, "aaacccttgccgttacgcttaaaccgaggccgggacactcat": 220, "aaaccgaggc": [220, 227], "aaagataggc": 219, "aaatatggat": 219, "aaatcctatg": 219, "aac": 228, "aacaaatgca": 219, "aacaacagga": 219, "aacaccaaacttctccacc": 221, "aacaccaaacttctccaccacgtgagctacaaaag": 221, "aaccttatca": 219, "aacgaaggcg": 219, "aactttgtag": 219, "aagaactttc": 219, "aagaggttac": 219, "aagcctggtg": 219, "aagccttggc": 220, "aagccttggcagtgcagggtgagccgtgg": 220, "aagccttggcagtgcagggtgagccgtggccgggcacggtat": 220, "aagctngggc": [220, 227], "aagctngggcatttcagggtgagcccgggcaatacagggtat": 220, "aagga": [384, 455, 506, 559, 618], "aaggaatcaa": 219, "aaggaatttg": 219, "aagtaa": [394, 569], "aagtatttgg": 219, "aagtcttaga": 219, "aagtcttttt": 219, "aagttgttag": 219, "aagucuuuuu": 219, "aata": 228, "aataaac": 228, "aataagtgca": 219, "aatacagggt": [220, 227], "aatataccggttataa": [403, 473, 524, 578, 631], "aatatggatt": 219, "aatgaa": [394, 416, 428, 569, 591, 603], "aatgtt": [416, 591], "aatt": 897, "aattaaataa": 219, "aattctggat": 219, "aattg": 1097, "aattgccggac": 1097, "aattgg": 849, "aauauggauu": 219, "ab": [221, 448], "ab07acbb1e496801937adfa772424bf7": 1054, "ababacac": 448, "abbrevi": [231, 851], "abc": [217, 382, 448, 453, 504, 557, 616], "abcd": 1029, "abcdef": 1, "abil": 225, "abl": [65, 85, 146, 377, 499, 552, 611, 683, 878, 979], "about": [1, 93, 97, 128, 172, 173, 185, 186, 217, 220, 221, 225, 229, 230, 232, 275, 303, 319, 321, 322, 340, 358, 373, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 678, 719, 724, 744, 750, 850, 862, 863, 872, 878, 879, 897, 927, 932, 947, 1006, 1027, 1030, 1031, 1091, 1092], "abov": [0, 1, 3, 92, 220, 222, 226, 227, 228, 229, 230, 232, 243, 245, 377, 499, 552, 611, 701, 751, 753, 755, 759, 1092], "absenc": [111, 879, 929], "absent": [430, 496, 549, 606, 647, 870], "absolut": [680, 688, 753, 937, 1053], "abstract": [322, 448], "abund": [1, 107, 108, 116, 118, 121, 128, 132, 140, 141, 143, 144, 145, 146, 149, 214, 683, 688, 850, 864, 865, 871, 872, 879, 931, 937], "abx": 877, "ac": [66, 67, 68, 69, 70, 75, 77, 80, 83, 85, 88, 92, 94, 95, 98, 101, 219, 221, 222, 230, 293, 405, 475, 526, 580, 1092], "aca": [418, 419, 485, 486, 537, 538, 593, 594, 638, 639], "acaatcaaat": 219, "acac": [409, 418, 477, 485, 528, 537, 584, 593, 638], "acacatttatta": [419, 486, 538, 594, 639], "acacgacgtt": [410, 415, 418, 478, 483, 485, 529, 535, 537, 585, 590, 593, 636, 638], "acad": [100, 103], "academ": 109, "academi": 661, "acagaattga": 219, "acaggttggc": [220, 227], "acata": 221, "acatggcaat": 219, "acatgggata": 219, "acc": [0, 216, 1092], "accaatattt": 219, "accaatttga": 219, "acccc": 0, "acceler": 880, "accept": [1, 65, 94, 146, 427, 433, 434, 494, 546, 602, 608, 609, 646, 661, 677, 683, 753, 757, 759, 875, 878, 879, 984, 1013, 1021, 1024, 1078], "acces": 215, "access": [20, 89, 90, 213, 219, 220, 222, 231, 358, 412, 414, 437, 443, 480, 482, 531, 533, 587, 589, 634, 635, 701, 1029, 1035], "accgaat": 377, "accgaau": 552, "accgggta": 1092, "accggttggc": 220, "accggttggccgttcagggtacaggttggccgttcagggtaa": 220, "accgttcg": 230, "accgttgta": [217, 227], "accguuaguc": 1092, "accident": 1030, "accommod": 293, "accompani": [220, 702, 1031], "accomplish": [1, 680, 1090], "accord": [112, 116, 377, 499, 552, 869, 873, 935, 936], "account": [161, 431, 497, 550, 607, 794, 864, 872, 879, 1095], "accumul": [124, 127, 964], "accumulate_to_ancestor": 980, "accur": [118, 122, 123], "accuraci": [755, 870], "acdefghikl": [161, 174], "acdfnasanftacgnpnrtesl": [417, 484, 536, 592, 637], "acg": [66, 67, 68, 69, 70, 75, 77, 80, 88, 91, 92, 94, 95, 228, 230, 415, 418, 483, 485, 535, 537, 590, 593, 636, 638], "acga": [82, 85, 382, 391, 453, 462, 504, 513, 557, 566, 616, 625], "acgaactatt": 219, "acggggaggcggag": [402, 472, 523, 577], "acgggu": 1092, "acgt": [65, 82, 85, 86, 89, 90, 96, 378, 382, 391, 395, 406, 407, 412, 414, 416, 420, 449, 453, 462, 465, 480, 482, 487, 500, 504, 513, 516, 531, 533, 539, 553, 557, 566, 570, 581, 582, 587, 589, 591, 595, 611, 612, 616, 625, 628, 634, 635, 640, 649, 667], "acgta": 228, "acgtac": 228, "acgtacgt": [406, 581], "acgtgagctacaaaag": 221, "acgtgccta": 0, "acgtgcctaggtacgcaag": 0, "acgtggaa": [395, 465, 516, 570, 628], "acgtn": [430, 496, 549, 606, 647], "acgtu": 105, "achiev": [132, 1092], "acid": [98, 100, 103, 219, 220, 221, 224, 227, 231, 377, 430, 436, 446, 448, 496, 499, 549, 552, 606, 611, 647, 649, 661], "acquir": 878, "across": [16, 48, 88, 132, 220, 221, 227, 303, 372, 683, 688, 753, 878, 898, 1028], "act": [0, 92, 243, 244, 245], "actaaggctc": 0, "actaaggctcctaacccccttttctcaga": 0, "actaaggctctct": 0, "actaaggctctctacccctctcagaga": 0, "actacattcg": 219, "actatacgga": 219, "actcat": 220, "action": 322, "activ": 1089, "acttagtt": [406, 581], "actual": [133, 137, 229, 232, 263, 753], "acwgn": [397, 399, 425, 467, 469, 492, 518, 520, 544, 572, 574, 600], "ad": [53, 98, 99, 100, 101, 102, 103, 220, 230, 314, 611, 683, 688, 865, 868, 897, 922, 1055, 1095], "adapt": 1028, "adata": 939, "add": [1, 99, 102, 229, 230, 232, 256, 293, 303, 315, 317, 382, 453, 504, 557, 611, 616, 685, 692, 693, 695, 696, 697, 892, 893, 897, 917, 938, 966, 979, 981], "add_format": [243, 245], "addit": [1, 104, 105, 116, 142, 143, 144, 148, 219, 220, 221, 222, 223, 227, 228, 229, 290, 337, 355, 358, 374, 377, 499, 552, 649, 680, 681, 682, 683, 701, 725, 949, 970, 982, 983, 1028, 1055, 1090], "addition": [1, 214, 225, 272, 303, 936, 1092, 1095], "additon": 220, "address": [683, 1090], "adenin": [377, 552], "adequ": 878, "adher": 229, "adiv_faith_pd": 1, "adiv_sob": 1, "adjac": [417, 484, 536, 592, 637, 906], "adjust": 132, "adoni": 754, "adopt": [132, 430, 496, 549, 606, 647], "advanc": 1, "advantag": [132, 725, 1055], "advis": [143, 144, 149], "ae000111": 216, "ae000171": 216, "ae000174": 216, "ae000394": 216, "ae000425": 216, "af031394": 216, "af035635": 230, "af178031": 216, "af178032": 216, "af178033": 216, "affect": [220, 225, 436, 437, 443, 611, 751, 755], "aforement": 231, "after": [53, 82, 85, 98, 99, 100, 220, 221, 229, 230, 231, 232, 306, 317, 372, 688, 694, 695, 752, 753, 756, 759, 864, 879, 1003, 1005, 1022], "ag": [65, 82, 85, 88, 701, 877, 878], "agaagacc": [404, 474, 525, 579, 632], "agaagctatg": 219, "agaagctctt": 219, "agaagcuaug": 219, "agacatcacg": 219, "agagcatgcg": 219, "agaggttcta": 222, "agagguucua": 222, "agagttgaag": 227, "agagttgaaggtatct": [217, 227], "again": [1, 220, 221, 358, 698, 928, 1029], "against": [70, 79, 98, 101, 221, 294, 300, 306, 312, 382, 391, 437, 443, 453, 462, 504, 513, 557, 566, 616, 625, 683, 759, 895, 896, 972], "agatataaag": 219, "agatcttttg": 219, "agatgagtat": 219, "agctttctgc": 219, "agg": 1092, "aggaccttat": 219, "aggctc": 0, "aggctcccttctacccctctcagaga": 0, "agggaaagtt": 219, "agggctggct": 219, "agggga": 1092, "agggta": 678, "aggreg": 1097, "aggtacccta": 219, "aggtgcagta": 219, "agre": [264, 268], "agtactctaa": 219, "agtgcagggt": [220, 227], "aguauucugccacuguaagaa": 446, "aguc": [400, 421, 423, 470, 488, 490, 521, 540, 542, 575, 596, 598, 630, 641, 643], "ahead": 1097, "aiacaqkm": 230, "aim": 850, "ainsworth": 752, "aitchison": [680, 681, 682, 686, 687, 689, 690, 698], "aitchson": 691, "al": [683, 688, 759, 881, 948], "ala": 499, "alanin": [84, 499], "aldex2": 688, "alexandro": 969, "algorithm": [98, 101, 222, 751, 752, 753, 755, 760, 761, 772, 783, 794, 805, 816, 827, 838, 864, 865, 872, 972, 1029, 1030, 1089], "alia": [20, 116, 129, 130, 132, 143, 144, 223, 671, 683, 693, 720, 745, 995, 997], "alic": 611, "alig": 33, "align": [215, 216, 220, 221, 293, 303, 611, 649, 894, 895, 896, 1089, 1090, 1092], "aligned_query_sequ": 0, "aligned_target_sequ": 0, "alignmentstructur": 54, "alignpath": [43, 46, 47, 48, 51, 52], "all": [1, 53, 65, 66, 83, 84, 89, 90, 92, 98, 99, 100, 105, 107, 116, 117, 118, 128, 132, 133, 137, 140, 141, 143, 144, 145, 146, 209, 210, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 257, 267, 286, 293, 303, 306, 315, 317, 318, 333, 351, 370, 372, 377, 395, 398, 401, 404, 412, 414, 417, 427, 431, 446, 465, 468, 471, 474, 480, 482, 484, 494, 497, 499, 516, 519, 522, 525, 531, 533, 536, 546, 550, 552, 570, 573, 576, 579, 587, 589, 592, 602, 607, 611, 628, 632, 634, 635, 637, 646, 649, 660, 661, 665, 667, 675, 683, 685, 688, 692, 693, 695, 696, 697, 698, 701, 713, 716, 723, 736, 740, 747, 749, 751, 752, 753, 754, 755, 756, 783, 794, 838, 849, 850, 861, 869, 870, 878, 879, 880, 897, 898, 901, 905, 938, 946, 949, 965, 968, 969, 970, 979, 982, 983, 984, 995, 997, 998, 1001, 1008, 1013, 1014, 1016, 1018, 1028, 1055, 1056, 1095], "all_char": 225, "allow": [215, 220, 221, 225, 227, 228, 229, 232, 243, 245, 272, 303, 377, 395, 404, 465, 474, 499, 516, 525, 552, 570, 579, 628, 632, 653, 660, 680, 706, 713, 729, 736, 751, 752, 754, 755, 756, 760, 870, 881, 897, 948, 979, 1021, 1056, 1097], "allow_empti": 1021, "allow_overlap": [660, 713, 736], "allvltkt": 230, "almost": 1032, "alon": [225, 752], "along": [224, 861, 869, 870, 914, 935, 946], "alpha": [141, 147, 683, 875, 876, 880, 1089], "alpha_divers": [1, 116, 132, 145, 147], "alpha_pwr": [875, 878, 879], "alphabet": [0, 95, 105, 147, 148, 215, 220, 377, 430, 436, 448, 496, 499, 549, 552, 606, 611, 647, 649, 661, 664, 667, 678, 1092], "alphanumer": 229, "alr": 682, "alreadi": [225, 230, 232, 243, 244, 245, 611, 702, 753], "also": [0, 1, 83, 84, 112, 116, 136, 142, 143, 144, 145, 174, 198, 219, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 303, 358, 407, 417, 427, 430, 446, 484, 494, 496, 536, 546, 549, 582, 592, 602, 606, 611, 637, 646, 647, 649, 683, 698, 699, 701, 751, 752, 753, 755, 759, 850, 865, 872, 875, 878, 879, 902, 907, 919, 1032, 1078, 1090, 1092, 1097], "alter": 1031, "altern": [94, 231, 232, 429, 446, 495, 548, 605, 665, 680, 694, 700, 716, 740, 753, 755, 756, 759, 870, 875, 987, 1013], "although": [132, 759, 878, 898], "altschul": [215, 216], "alwai": [1, 53, 219, 222, 225, 227, 229, 244, 272, 290, 293, 314, 337, 355, 358, 372, 374, 446, 922, 979, 1035, 1097], "amar": 222, "ambigu": [265, 269], "amen": 681, "american": 107, "amino": [98, 100, 103, 219, 220, 224, 377, 430, 436, 446, 496, 499, 549, 606, 647, 649, 661], "amino_acid": [436, 437, 443], "among": [1, 112, 132, 210, 222, 675, 723, 749, 761, 865, 872, 1093], "amount": [756, 949, 1097], "amplicon": [1, 894], "amsterdam": [850, 864, 865, 872], "an": [0, 1, 3, 13, 14, 15, 16, 17, 18, 19, 20, 46, 47, 48, 49, 51, 52, 53, 65, 67, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 97, 98, 99, 100, 104, 116, 117, 119, 125, 129, 130, 141, 143, 144, 145, 149, 173, 186, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 243, 244, 245, 258, 260, 261, 262, 264, 266, 268, 270, 272, 273, 287, 288, 293, 303, 314, 315, 317, 318, 320, 321, 334, 335, 352, 353, 358, 372, 376, 384, 395, 402, 411, 412, 414, 421, 423, 427, 430, 435, 436, 446, 448, 455, 465, 472, 479, 480, 482, 488, 490, 494, 496, 498, 506, 516, 523, 530, 531, 533, 540, 542, 546, 549, 551, 552, 559, 570, 577, 586, 587, 589, 596, 598, 602, 606, 610, 611, 618, 628, 633, 634, 635, 641, 643, 646, 647, 648, 649, 653, 660, 663, 665, 667, 671, 675, 676, 683, 686, 687, 689, 690, 693, 695, 698, 699, 701, 706, 713, 715, 716, 720, 723, 724, 729, 736, 737, 739, 740, 745, 749, 750, 751, 753, 754, 755, 759, 771, 793, 804, 816, 837, 848, 849, 850, 860, 863, 869, 870, 875, 877, 878, 879, 880, 881, 884, 892, 893, 894, 900, 901, 904, 905, 906, 907, 912, 914, 915, 917, 920, 921, 922, 923, 925, 927, 928, 938, 941, 944, 945, 946, 947, 948, 950, 951, 964, 966, 967, 969, 971, 975, 977, 978, 982, 985, 986, 995, 997, 1000, 1010, 1013, 1018, 1020, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1035, 1036, 1039, 1046, 1052, 1053, 1054, 1056, 1078, 1090, 1092, 1095, 1097], "analog": 132, "analogu": 755, "analys": [116, 143, 144, 751, 1093], "analysi": [1, 116, 128, 143, 144, 220, 227, 680, 681, 683, 688, 698, 751, 754, 755, 760, 761, 782, 783, 815, 826, 827, 838, 861, 864, 865, 870, 871, 872, 875, 878, 879], "analyt": 117, "analyz": [1, 680, 865, 878], "ancacwwgacgtt": [408, 409, 413, 476, 477, 481, 527, 528, 532, 583, 584, 588], "ancestor": [116, 132, 395, 465, 516, 570, 628, 964, 995, 997], "ancestr": 116, "ancom_df": 683, "anderson": [754, 755], "ani": [1, 19, 52, 53, 83, 84, 92, 94, 104, 105, 108, 139, 140, 220, 222, 224, 225, 229, 230, 243, 244, 245, 265, 269, 272, 285, 290, 293, 303, 317, 318, 332, 337, 350, 355, 358, 368, 371, 374, 377, 499, 552, 611, 649, 678, 683, 685, 753, 756, 760, 794, 816, 864, 869, 875, 877, 878, 902, 907, 931, 941, 943, 966, 969, 970, 971, 981, 989, 1018, 1020, 1028, 1055, 1056, 1066, 1078, 1095, 1097], "anim": 117, "ann": [115, 134], "anndata": 939, "annot": [219, 222, 223, 229, 303], "announc": 229, "anosim": [1, 754, 755], "anoth": [1, 70, 79, 82, 92, 116, 143, 144, 222, 224, 225, 276, 282, 294, 300, 303, 306, 312, 317, 320, 323, 329, 341, 347, 359, 365, 382, 391, 400, 422, 424, 437, 443, 453, 462, 470, 489, 491, 504, 513, 521, 541, 543, 557, 566, 575, 597, 599, 611, 616, 625, 630, 642, 644, 649, 651, 704, 727, 759, 894], "anova": [683, 754, 771, 772, 793, 804, 837, 848], "answer": 1054, "anti": [1, 751], "antibiot": [695, 877], "anticip": 1097, "anyon": 229, "anyth": [1, 220, 221, 228, 232, 611, 941, 1055, 1066, 1078, 1097], "anytim": 229, "anywher": [224, 225, 229, 683], "apart": 1011, "api": [220, 358, 677], "app": 228, "appear": [1, 107, 215, 227, 229, 230, 663, 715, 739, 752, 864, 865, 870, 875, 884], "append": [0, 85, 227, 232, 611, 981], "appl": [143, 144], "appli": [0, 1, 53, 65, 84, 89, 90, 141, 144, 145, 146, 149, 219, 220, 225, 229, 231, 303, 322, 377, 412, 414, 480, 482, 499, 531, 533, 552, 587, 589, 611, 634, 635, 649, 665, 680, 716, 740, 742, 753, 756, 760, 864, 878, 901, 922, 928, 931, 937, 944, 1029, 1056, 1097], "applic": [53, 84, 98, 104, 358, 850, 974, 1097], "approach": [688, 753, 878, 950, 951, 975, 978], "appropri": [1, 213, 224, 272, 395, 465, 516, 570, 628, 683, 1090, 1095], "approx": 875, "approxim": [872, 875], "aqfvdhwkel": 218, "aquat": 865, "ar": [0, 1, 3, 53, 65, 66, 70, 75, 79, 80, 83, 84, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 110, 111, 112, 116, 117, 122, 123, 132, 141, 143, 144, 145, 146, 148, 149, 172, 173, 185, 186, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 243, 244, 245, 257, 264, 267, 268, 272, 276, 282, 285, 286, 293, 294, 300, 306, 312, 315, 317, 319, 320, 321, 322, 323, 329, 332, 333, 341, 347, 350, 351, 358, 359, 365, 367, 368, 370, 371, 372, 373, 376, 377, 382, 384, 391, 394, 395, 401, 404, 408, 409, 410, 413, 421, 422, 423, 424, 426, 427, 430, 432, 433, 434, 435, 436, 437, 443, 445, 446, 447, 448, 453, 455, 462, 465, 471, 474, 476, 477, 478, 481, 488, 489, 490, 491, 493, 494, 496, 498, 499, 504, 506, 513, 516, 522, 525, 527, 528, 529, 532, 534, 540, 541, 542, 543, 545, 546, 549, 551, 552, 557, 559, 566, 569, 570, 576, 579, 583, 584, 585, 588, 596, 597, 598, 599, 601, 602, 604, 606, 608, 609, 610, 611, 616, 618, 625, 628, 632, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 653, 658, 661, 664, 665, 670, 671, 675, 676, 678, 679, 680, 681, 683, 685, 688, 689, 690, 692, 693, 695, 696, 697, 698, 701, 702, 704, 706, 711, 716, 719, 720, 723, 724, 725, 727, 729, 734, 740, 742, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 772, 794, 838, 849, 850, 851, 860, 861, 862, 863, 864, 865, 868, 869, 870, 872, 873, 875, 877, 878, 879, 881, 884, 897, 898, 901, 903, 907, 913, 922, 924, 932, 934, 935, 936, 937, 939, 940, 941, 946, 947, 948, 949, 969, 972, 977, 987, 998, 1000, 1001, 1005, 1006, 1013, 1014, 1018, 1020, 1021, 1022, 1027, 1028, 1030, 1032, 1033, 1035, 1052, 1055, 1056, 1067, 1078, 1090, 1092, 1095, 1097], "arang": [913, 918], "arbitrari": [65, 83, 86, 224, 229, 230, 377, 499, 552, 611, 849, 907, 941, 1055, 1092], "arbitrarili": [1028, 1097], "archaea": [987, 988, 1021], "archiv": [231, 1054], "area": [1, 118], "arg": [232, 257, 267, 433, 434, 499, 608, 609, 884], "arginin": 499, "argument": [53, 65, 93, 94, 97, 104, 172, 173, 185, 186, 224, 243, 244, 245, 257, 264, 265, 266, 267, 268, 269, 270, 319, 321, 373, 376, 420, 426, 433, 434, 435, 487, 493, 498, 539, 545, 551, 595, 601, 608, 609, 610, 640, 645, 648, 649, 665, 670, 676, 681, 716, 719, 724, 740, 744, 750, 757, 862, 863, 884, 932, 947, 1006, 1027, 1055, 1078], "argumentoverridewarn": [264, 268], "aris": [1020, 1028], "around": [122, 123, 146, 220, 227, 230, 649, 684, 753, 876, 1095], "arrai": [1, 3, 13, 14, 15, 17, 18, 19, 44, 46, 47, 49, 51, 52, 53, 84, 88, 116, 132, 143, 144, 174, 198, 211, 220, 226, 377, 394, 397, 399, 405, 422, 424, 425, 428, 430, 467, 469, 475, 489, 491, 492, 496, 499, 518, 520, 526, 541, 543, 544, 547, 549, 552, 569, 572, 574, 580, 597, 599, 600, 603, 606, 611, 642, 644, 647, 649, 651, 659, 664, 667, 671, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 701, 704, 712, 720, 727, 735, 737, 745, 759, 760, 794, 816, 838, 850, 869, 873, 875, 876, 877, 878, 879, 880, 894, 895, 896, 897, 898, 900, 901, 914, 917, 921, 925, 927, 931, 933, 937, 938, 941, 944, 991, 1020, 1028, 1092], "arrang": 850, "array_lik": [1, 3, 13, 14, 15, 34, 44, 45, 46, 47, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 149, 150, 161, 174, 187, 198, 384, 402, 403, 417, 427, 455, 472, 473, 484, 494, 506, 523, 524, 536, 546, 559, 577, 578, 592, 602, 618, 631, 637, 646, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 751, 753, 754, 755, 756, 759, 866, 869, 873, 876, 879, 880], "articl": [53, 104, 217], "artifact": [91, 98, 99, 100], "artifici": [222, 850], "asarrai": [702, 904, 905, 911, 912, 914, 915, 917, 922, 923, 928, 929, 930, 933, 935, 936, 938, 943, 944, 946], "ascend": [95, 320], "ascii": [221, 228, 229, 232, 430, 496, 549, 606, 647, 967, 1095], "ascii_art": [225, 896, 970, 987, 988, 1029, 1095], "ask": 244, "asn": 499, "asp": 499, "asparagin": 499, "aspart": 499, "aspect": 1056, "ass": 120, "assai": 878, "assembl": 219, "assert": 1033, "assert_frame_equ": 1032, "assertionerror": [1032, 1033], "assess": [132, 140, 751, 753, 754, 755, 759], "assign": [84, 94, 105, 141, 145, 227, 229, 294, 427, 494, 546, 602, 611, 646, 667, 683, 688, 751, 754, 755, 849, 879, 968, 969, 970], "assign_support": 1024, "assist": [229, 1097], "associ": [1, 72, 107, 132, 221, 229, 230, 231, 258, 259, 260, 286, 288, 293, 314, 316, 318, 333, 335, 351, 353, 358, 377, 499, 552, 611, 752, 759, 849, 869, 873, 876, 877, 878, 897, 900, 907, 922, 939, 941, 979, 985, 1018, 1090], "asst": [406, 407, 581, 582], "assum": [1, 107, 116, 118, 124, 127, 143, 144, 217, 220, 221, 224, 226, 243, 245, 358, 384, 432, 433, 434, 455, 506, 559, 618, 653, 688, 701, 702, 706, 729, 740, 759, 760, 865, 869, 875, 876, 878, 879, 937], "assumpt": [128, 225, 678, 683, 688, 982, 983, 1031], "assur": [950, 951, 975, 978], "asv": 1, "asx": 499, "asymmetr": [649, 653, 706, 729], "ataaatcacg": 219, "ataacgttgg": 219, "ataagggatg": 219, "atacaaccat": 219, "atactcccaa": 219, "atagacc": 1097, "atagcatacc": 219, "atagttacac": 219, "atatatacat": 221, "atatatat": 849, "atatatgttt": 219, "atatgaacaaa": 1097, "atattacaac": 219, "atcaaaaggg": 219, "atcaccgcta": 219, "atcactgaaa": 219, "atcataacta": 219, "atccatatat": 219, "atcggcgat": 679, "atgagccatg": 219, "atgc": 901, "atgcactagg": 219, "atgcatgcat": 223, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 223, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 223, "atgccactttaa": [433, 434], "atgccccttc": 219, "atggca": 849, "atggcc": 849, "atggcg": 849, "atggct": 849, "atggtatgaa": 219, "atgtgtatttga": 1092, "atgttgtagt": 219, "atl": [434, 447, 609], "atla": 661, "atom": [907, 941], "att": [398, 468, 519, 573], "attach": [243, 245, 969], "attagaaaga": 219, "attcgttgtg": 219, "attctggaac": 219, "attempt": [93, 172, 185, 220, 229, 272, 319, 373, 426, 493, 545, 601, 645, 670, 719, 744, 862, 932, 969, 982, 1006], "attr": [223, 907, 941, 992, 1020], "attr_1": 1020, "attr_n": 1020, "attribut": [3, 20, 34, 65, 94, 150, 161, 174, 187, 198, 213, 218, 219, 220, 222, 223, 226, 228, 229, 230, 233, 275, 293, 302, 303, 318, 322, 340, 358, 377, 382, 430, 436, 448, 453, 496, 499, 504, 549, 552, 557, 606, 611, 616, 647, 649, 660, 675, 702, 713, 723, 725, 736, 749, 772, 805, 816, 851, 860, 871, 878, 881, 907, 941, 948, 949, 950, 951, 964, 968, 971, 975, 978, 992, 1020, 1028, 1033, 1035, 1036, 1039, 1046, 1067, 1092], "attribute_nam": 1020, "attributeerror": [611, 1035], "atttcagggt": [220, 227], "aucauaacua": 219, "aug": 220, "augccacuuuaa": [436, 447, 608, 609], "auguguauuu": 1092, "austral": 754, "australian": 751, "auth": 232, "author": [132, 222, 230, 611, 683], "auto": [272, 430, 496, 549, 606, 647], "automat": [53, 82, 85, 92, 93, 97, 172, 173, 185, 186, 224, 228, 229, 257, 267, 293, 319, 321, 373, 376, 420, 426, 435, 487, 493, 498, 539, 545, 551, 595, 601, 610, 640, 645, 648, 670, 676, 701, 719, 724, 744, 750, 851, 862, 863, 932, 947, 974, 1006, 1027, 1090], "auxilari": 232, "av": 760, "avail": [1, 145, 215, 220, 221, 222, 226, 229, 231, 261, 262, 430, 436, 445, 496, 549, 606, 647, 661, 725, 751, 752, 753, 754, 755, 794, 875, 879, 907, 941, 1030, 1090, 1097], "averag": [684, 688, 760, 761, 869, 873, 931, 1002, 1028], "averagegradientanova": 760, "avg": 760, "avoid": [53, 218, 229, 230, 232, 317, 850, 873, 1025, 1026], "aw": [0, 132], "awar": [84, 132, 229, 611], "awesom": 1097, "awgh": 0, "ax": [761, 783, 794, 827, 850, 861, 864, 865, 884, 894, 901, 922], "axes3d": 861, "axi": [72, 88, 118, 134, 150, 224, 649, 794, 838, 851, 861, 869, 876, 879, 884, 892, 893, 894, 895, 896, 897, 898, 900, 901, 904, 905, 907, 912, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 930, 931, 933, 934, 935, 936, 937, 938, 941, 944, 946, 1033], "axis_label": [1, 861], "b": [1, 53, 86, 92, 94, 95, 96, 116, 117, 118, 128, 132, 149, 221, 224, 225, 229, 273, 377, 499, 552, 611, 653, 660, 661, 664, 669, 672, 675, 699, 701, 706, 713, 718, 721, 723, 729, 736, 743, 746, 747, 749, 752, 753, 849, 861, 877, 878, 895, 897, 898, 901, 905, 930, 941, 950, 951, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 982, 983, 984, 985, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1054, 1090, 1092, 1095], "b1": [683, 688], "b2": [683, 688], "b3": [683, 688], "b4": [683, 688], "b5": [683, 688], "b6": [683, 688], "b7": [683, 688], "b_b": 225, "b_i": [140, 698], "ba": 230, "babp": 53, "bacilli": [988, 1021], "bacillu": 230, "back": [132, 218, 220, 223, 266, 270, 291, 292, 338, 339, 356, 357, 375, 965, 1095], "backward": [116, 132, 143, 144, 229, 683], "bacteri": 683, "bacteria": [879, 924, 987, 988, 1021], "bacteroidet": [924, 987, 988, 1021], "baeza": 861, "baker": 116, "balanc": [132, 698], "band": 53, "bar": [229, 898, 923, 933, 943, 944, 1054, 1097], "barcod": [895, 897, 901], "barker": 132, "barlow": 698, "base": [1, 3, 13, 34, 45, 92, 99, 102, 107, 110, 111, 115, 116, 120, 121, 126, 127, 128, 132, 135, 137, 143, 144, 214, 215, 220, 222, 226, 228, 229, 293, 314, 322, 358, 369, 377, 417, 448, 484, 499, 536, 552, 592, 611, 637, 653, 702, 706, 729, 751, 753, 754, 755, 759, 794, 864, 865, 872, 875, 877, 878, 879, 881, 897, 905, 937, 948, 972, 984, 985, 1028, 1054, 1092, 1093, 1095, 1097], "base1": 436, "base2": 436, "base3": 436, "basi": [689, 690, 698, 699], "basic": [98, 118, 215, 216, 759, 851, 861, 907, 941], "baz": [898, 1054], "bb": 877, "bbb": 221, "bbf": 221, "bbx": 221, "bc_dm": 1, "bct": 231, "becam": 225, "becaus": [1, 84, 91, 92, 116, 143, 144, 215, 220, 221, 222, 225, 227, 228, 229, 232, 358, 382, 417, 446, 453, 484, 504, 536, 557, 592, 611, 616, 637, 683, 753, 865, 870, 872, 874, 877, 969, 974, 977, 1021], "becom": [1, 3, 117, 220, 221, 225, 229, 303, 897, 924], "been": [0, 98, 99, 100, 105, 149, 220, 221, 222, 227, 263, 265, 269, 272, 358, 371, 413, 417, 425, 481, 484, 492, 532, 536, 544, 588, 592, 600, 611, 637, 683, 753, 759, 880, 907, 941, 946, 1005], "befor": [1, 84, 220, 224, 229, 230, 406, 407, 446, 581, 582, 695, 752, 753, 879, 897, 1003, 1022, 1095, 1097], "begin": [53, 219, 220, 221, 222, 226, 229, 230, 244, 293, 358, 446, 879], "behav": [377, 499, 552, 753], "behavior": [89, 90, 92, 98, 99, 100, 220, 221, 222, 229, 272, 412, 414, 430, 446, 480, 482, 496, 531, 533, 549, 587, 589, 606, 611, 634, 635, 647, 751, 753, 755, 973, 1097], "being": [1, 53, 82, 84, 85, 98, 99, 100, 116, 141, 145, 220, 221, 227, 231, 358, 372, 698, 755, 759, 849, 878, 897, 941, 950, 951, 971, 975, 978, 1011, 1090, 1092], "bell": 135, "belong": [53, 108, 112, 223, 683, 688, 751, 754, 755, 897], "below": [217, 220, 221, 225, 227, 229, 230, 231, 358, 436, 448, 611, 752, 753, 861, 878, 907, 937, 941, 949], "benefit": 688, "benjamini": [683, 688], "berger": 108, "best": [53, 98, 99, 100, 101, 102, 103, 122, 123, 680, 752, 864, 1031], "beta": [145, 146, 148, 219, 1089], "beta_divers": [1, 141, 143, 144, 146, 148, 149], "betadisp": 755, "bethesda": 220, "better": [220, 864, 865, 1090], "between": [1, 3, 53, 99, 102, 112, 117, 118, 122, 133, 140, 143, 144, 145, 149, 213, 220, 221, 222, 224, 227, 230, 231, 306, 320, 395, 400, 421, 422, 423, 424, 465, 470, 488, 489, 490, 491, 516, 521, 540, 541, 542, 543, 570, 575, 596, 597, 598, 599, 628, 630, 641, 642, 643, 644, 649, 653, 665, 677, 678, 679, 683, 688, 698, 701, 702, 706, 716, 725, 729, 740, 751, 752, 753, 754, 755, 756, 758, 759, 794, 864, 865, 866, 872, 875, 878, 879, 884, 922, 949, 964, 972, 973, 974, 980, 989, 999, 1018, 1019, 1029, 1092, 1095], "bf00039495": 219, "bh": [683, 688], "bia": [110, 111, 688], "bias": [110, 111, 688], "bias_correct": [110, 111], "bifurc": [225, 699, 986], "bigoplu": 690, "bin": [849, 897, 930], "bin_": 849, "bin_f": [849, 897], "binari": [232, 233, 243, 244, 245, 272, 698, 699, 759, 864, 872, 927, 1022, 1054], "binary_dm": [670, 676, 719, 724, 744, 750], "binomi": [878, 879], "bio": [0, 1, 89, 90, 93, 97, 98, 101, 104, 105, 116, 143, 144, 145, 146, 147, 148, 149, 172, 173, 185, 186, 214, 215, 216, 217, 219, 220, 221, 225, 226, 227, 228, 230, 231, 319, 321, 373, 376, 412, 414, 426, 433, 434, 435, 436, 446, 447, 480, 482, 493, 498, 531, 533, 545, 551, 587, 589, 601, 608, 609, 610, 634, 635, 645, 648, 670, 676, 677, 719, 724, 744, 750, 752, 850, 862, 863, 932, 947, 1006, 1027, 1030, 1092, 1096], "biocor": [143, 144, 861], "biodivers": [1, 114, 116, 132], "bioinformat": [116, 132, 221, 227, 229, 969], "biol": [98, 101, 116, 120, 132, 215, 216, 219, 222, 694, 700], "biolog": [1, 91, 98, 99, 100, 127, 132, 133, 137, 139, 150, 187, 198, 220, 221, 223, 225, 228, 293, 397, 398, 399, 401, 402, 405, 408, 409, 410, 413, 425, 467, 468, 469, 471, 472, 475, 476, 477, 478, 481, 492, 518, 519, 520, 522, 523, 526, 527, 528, 529, 532, 544, 572, 573, 574, 576, 577, 580, 583, 584, 585, 588, 600, 611, 649, 878, 881, 908, 948, 1029, 1089, 1093, 1094], "biologi": [132, 133, 137, 446, 759, 969, 982, 1028, 1029], "biom": [229, 881, 887, 894, 895, 896, 897, 898, 900, 901, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 1089], "biom_format": [881, 948], "biom_open": [907, 941], "biometr": [128, 755], "biometrika": [107, 119], "bioperl": [221, 227], "biopython": [3, 221], "biosci": [694, 700], "bioscienc": 972, "biotechnologi": [220, 231], "biotit": 3, "biowulf": 228, "biplot": [226, 864, 872], "biplot_scor": [851, 1033], "bit": [3, 13, 17, 34, 44, 49, 135, 215, 216, 229], "bit_arr": 13, "bitscor": [215, 216], "bitting": 132, "biz": 898, "blackwel": 127, "blank": [220, 221, 225, 226, 227, 229, 275, 290, 322, 337, 340, 355, 358, 371, 374, 669, 718, 743], "blast": [99, 100, 102, 103, 220], "blast6": 216, "blastcgihelp": 220, "blastedbio": 215, "blastn": 216, "blastp": 216, "block": [100, 103, 146, 661, 1054], "block_siz": 1054, "blocksiz": 146, "blogspot": 215, "blosum": [100, 103, 499, 649, 661], "blosum45": 661, "blosum50": 661, "blosum62": [649, 661], "blosum80": 661, "blosum90": 661, "bmi": 879, "bob": 611, "bodi": [1, 861], "body_sit": [1, 861], "boilerpl": 232, "bologna": 118, "bone": 878, "bonferroni": [683, 688], "boniferroni": [683, 688], "boogaart": 698, "book": [215, 216, 220], "bool": [32, 53, 66, 67, 70, 79, 82, 85, 88, 89, 90, 91, 95, 98, 99, 100, 110, 111, 116, 132, 141, 143, 144, 145, 146, 149, 161, 209, 210, 211, 212, 243, 244, 245, 264, 268, 276, 282, 286, 289, 291, 292, 293, 294, 300, 306, 312, 314, 316, 320, 323, 329, 333, 336, 338, 339, 341, 347, 351, 354, 356, 357, 359, 365, 367, 375, 377, 378, 379, 382, 384, 391, 394, 395, 397, 399, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 427, 429, 430, 431, 437, 443, 449, 450, 453, 455, 462, 465, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 501, 504, 506, 513, 516, 518, 520, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 552, 553, 554, 557, 559, 566, 569, 570, 572, 574, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 602, 605, 606, 607, 611, 612, 613, 616, 618, 625, 628, 631, 632, 633, 634, 635, 637, 638, 639, 641, 642, 643, 644, 646, 647, 650, 651, 658, 660, 663, 679, 683, 689, 690, 694, 700, 702, 703, 704, 711, 713, 715, 726, 727, 734, 736, 739, 742, 753, 756, 759, 794, 805, 869, 870, 872, 873, 877, 878, 880, 897, 900, 904, 905, 907, 908, 916, 917, 918, 919, 927, 928, 929, 930, 931, 934, 939, 940, 941, 944, 946, 967, 972, 973, 976, 990, 992, 993, 994, 996, 999, 1002, 1003, 1004, 1007, 1019, 1021, 1022, 1029, 1033, 1055], "boolean": [66, 144, 220, 223, 228, 377, 384, 397, 399, 402, 405, 417, 420, 422, 424, 425, 427, 455, 467, 469, 472, 475, 484, 487, 489, 491, 492, 494, 499, 506, 518, 520, 523, 526, 536, 539, 541, 543, 544, 546, 547, 552, 559, 572, 574, 577, 580, 592, 595, 597, 599, 600, 602, 611, 618, 637, 640, 642, 644, 646, 740, 905, 937], "bootstrap": 949, "both": [65, 83, 92, 94, 105, 110, 111, 112, 116, 132, 213, 214, 215, 216, 218, 220, 221, 227, 229, 231, 264, 268, 318, 446, 665, 686, 687, 689, 690, 701, 716, 740, 742, 747, 752, 753, 754, 755, 870, 884, 894, 897, 901, 907, 922, 937, 941, 973, 974, 1013, 1022, 1090, 1092], "bound": [121, 122, 222, 223, 232, 293, 294, 302, 303, 306, 314, 315, 317, 318, 611, 683, 688, 876, 879], "bound_moieti": 222, "bowden": [377, 448, 499, 552, 611], "boxplot": 1, "bp": [219, 222], "braak": 865, "bracket": [140, 225], "brai": 1, "branch": [1, 116, 132, 144, 699, 949, 969, 970, 979, 1020, 1023, 1029, 1095], "braycurti": 1, "break": [377, 499, 552], "bren": 698, "brillouin": 109, "broader": 850, "broadinstitut": 220, "broken": [83, 1028], "brows": 219, "bsd": 1089, "bt": [221, 918], "btop": [215, 216], "buf_siz": 849, "buffer": [232, 272, 849], "buffer_s": 232, "bufferedrandom": 272, "bufferedread": [233, 243, 244, 272], "bufferedwrit": [233, 245, 272], "bui": 1089, "build": [45, 303, 698, 942], "buildilrbas": 698, "built": [3, 20, 34, 53, 65, 150, 161, 174, 187, 198, 233, 246, 275, 293, 303, 322, 340, 358, 377, 436, 448, 499, 552, 611, 649, 702, 725, 761, 772, 783, 794, 805, 816, 827, 838, 851, 881, 949, 974, 1013, 1035, 1055, 1067, 1078, 1090], "bulletin": 1028, "busi": 232, "bwpd_": 132, "by_id": 937, "by_nam": [430, 496, 549, 606, 647, 649, 666], "bypass": [116, 141, 143, 144, 145], "byte": [3, 272, 427, 494, 546, 602, 646], "byteio": [214, 218], "bytesio": [214, 218, 272, 273, 1054], "bz2": 272, "bzh91ai": 273, "b\u00e4hler": [694, 700], "c": [1, 17, 20, 53, 65, 83, 91, 92, 94, 95, 104, 107, 116, 117, 118, 119, 120, 132, 133, 135, 137, 143, 144, 149, 219, 220, 221, 225, 227, 229, 230, 231, 245, 377, 387, 392, 398, 404, 406, 407, 458, 463, 468, 474, 499, 509, 514, 519, 525, 552, 562, 567, 573, 579, 581, 582, 611, 621, 626, 632, 649, 660, 664, 667, 669, 672, 675, 680, 682, 687, 694, 695, 696, 697, 699, 700, 701, 713, 718, 721, 723, 736, 743, 746, 747, 749, 752, 753, 861, 871, 877, 878, 895, 897, 898, 950, 951, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 982, 983, 984, 985, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1092, 1095], "c_": 107, "ca": [3, 17, 84, 226, 851, 865, 872], "caa40058": 219, "caaatgtgaa": 219, "caacgtggcc": 219, "caaggaagat": 219, "caagggctgc": 219, "cabcacc": 221, "cac": [410, 418, 478, 485, 529, 537, 585, 593, 638], "cacaattact": 219, "cacaauuacu": 219, "cach": [966, 971, 977, 981, 982, 983, 985, 992, 1001, 1005], "cache_attr": [977, 992], "cache_attrnam": 971, "cache_typ": 971, "cag": 3, "caggcc": 1097, "cagttgaagc": 219, "cagtttgatg": 219, "caguugaagc": 219, "caguuugaug": 219, "cajo": 865, "calcul": [3, 53, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 146, 149, 210, 213, 406, 407, 581, 582, 683, 688, 691, 699, 700, 751, 752, 753, 754, 755, 759, 783, 794, 838, 869, 873, 876, 878, 879, 921, 925, 937, 972, 979, 1018, 1089], "call": [1, 92, 116, 117, 122, 123, 143, 144, 217, 220, 227, 230, 232, 272, 293, 395, 403, 406, 427, 446, 465, 473, 494, 516, 524, 546, 570, 578, 581, 602, 611, 628, 631, 646, 742, 752, 753, 849, 865, 875, 905, 965, 967, 968, 971, 982, 983, 985, 998, 999, 1005, 1014, 1019, 1026, 1053, 1055, 1056, 1066, 1090, 1097], "callabl": [53, 65, 82, 85, 94, 141, 145, 146, 149, 210, 665, 683, 716, 740], "callback": [1056, 1097], "caller": [93, 97, 172, 173, 185, 186, 319, 321, 373, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 782, 815, 826, 862, 863, 932, 945, 947, 1006, 1027], "calucul": 755, "can": [0, 1, 15, 47, 53, 65, 91, 94, 98, 99, 100, 104, 105, 112, 116, 117, 132, 141, 143, 144, 145, 147, 148, 149, 161, 174, 198, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 272, 293, 302, 303, 318, 358, 395, 400, 402, 417, 427, 465, 470, 472, 484, 494, 516, 521, 523, 536, 546, 570, 575, 577, 592, 602, 611, 628, 630, 637, 646, 649, 653, 661, 677, 680, 683, 688, 698, 701, 702, 706, 725, 729, 751, 752, 753, 755, 756, 757, 760, 850, 861, 864, 869, 870, 871, 872, 875, 877, 878, 879, 884, 894, 898, 907, 919, 922, 931, 941, 944, 949, 970, 972, 980, 1010, 1013, 1020, 1028, 1029, 1030, 1034, 1035, 1055, 1078, 1092, 1095, 1097], "cancer": 753, "candid": [436, 879], "cannot": [15, 47, 53, 65, 82, 85, 220, 221, 224, 225, 229, 264, 265, 268, 269, 272, 358, 395, 448, 465, 516, 570, 628, 683, 751, 752, 753, 754, 755, 849, 861, 877, 879, 982, 985, 1013, 1090], "canon": [377, 429, 495, 499, 548, 552, 605, 649, 865, 872, 881, 948, 1089], "captur": [431, 497, 550, 607], "cardin": 1034, "care": [1, 84, 220, 222, 755], "carlo": 875, "carol": 611, "casava": 228, "casava_ug_15011196b": 228, "case": [1, 84, 98, 99, 100, 108, 146, 214, 218, 220, 225, 227, 229, 231, 233, 358, 372, 377, 407, 420, 430, 487, 496, 539, 549, 552, 582, 595, 606, 640, 647, 661, 683, 688, 702, 753, 759, 864, 869, 871, 879, 969, 1002, 1028, 1055, 1056, 1090, 1095], "cast": [1, 225, 358, 395, 465, 516, 570, 628, 701, 702, 757, 861, 923], "cat": [419, 486, 538, 594, 639, 877, 878], "catacctca": 3, "catatttgct": 219, "catcgatcgatcgatgcatgcatgcatg": 220, "catcgtc": 220, "categor": [229, 275, 358, 367, 371, 375, 751, 754, 850, 861], "categori": [1, 229, 230, 760, 761, 771, 772, 782, 793, 794, 804, 805, 816, 826, 827, 837, 838, 848, 850, 861, 875, 877, 878, 892, 897, 941, 1091], "categoricalmetadatacolumn": [322, 358, 369], "categoryresult": 805, "catttagga": 228, "catttgaaaa": 219, "cauauuugcu": 219, "caugcaucguacguacgcaugac": 217, "caus": [53, 229, 272, 446], "caution": 149, "cauucguacguacgcaugac": 217, "caveat": [220, 680], "cb": [230, 877], "cc": [230, 427, 436, 494, 546, 602, 646], "cca": [226, 850, 851, 864, 872], "cca1": 850, "cca2": 850, "cca3": 850, "cca4": 850, "cca5": 850, "cca6": 850, "cca7": 850, "cca8": 850, "cca9": 850, "ccaatggtac": 219, "ccaggtcgat": 219, "ccc": [379, 450, 501, 554, 613], "cccataaata": 219, "cccc": [417, 484, 536, 592, 637], "ccccchhhhhhhhhhhhh": 230, "ccchhhhhhhhhhhhhhh": 230, "cccttaggtc": 219, "ccg": 94, "ccggac": 1097, "ccgggcacggtat": 220, "ccgwllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 436, "ccora": 865, "ccyt": 221, "cd": [98, 219, 222, 446], "cde": 231, "ceil": 937, "cell": [229, 878], "cell_lin": 878, "center": [220, 231, 684, 752, 864, 866, 870, 873], "centr": [680, 686, 687, 868], "centroid": 755, "cepa": 969, "certain": [116, 125, 141, 143, 144, 145, 264, 266, 268, 270, 358, 377, 499, 552, 678, 1024], "cg": [83, 427, 494, 546, 602, 611, 646], "cga": [418, 485, 537, 593, 638], "cgac": 217, "cgagc": [384, 455, 506, 559, 618], "cgaggccgggac": 220, "cgatgtc": 220, "cgatgtcgatcgatcgatcgatcag": 220, "cgau": 217, "cgcgaugcaugcau": 217, "cgggacactc": [220, 227], "cgggcacggt": [220, 227], "cgggcasdgca": 228, "cgggcattgca": 228, "cggtacgctt": [220, 227], "cggtcgtaacgcgta": 3, "cggtcgtcac": 3, "cgi": [99, 100, 102, 103, 436, 444, 445], "cgt": [418, 485, 537, 593, 638], "cgtcacttat": 219, "cgtcgt": 17, "cgtcgtgc": 17, "cgttacgctt": [220, 227], "cgttcagggt": [220, 227], "cgttta": 678, "cgugcaugcau": 217, "chain": 222, "challeng": 116, "chanc": [649, 759, 937], "chang": [121, 220, 302, 303, 446, 611, 661, 683, 688, 751, 849, 944, 971, 1005, 1097], "chao": [107, 110, 132], "chao1": 111, "chao1_ci": 110, "chapter": [220, 871], "char": [404, 431, 474, 497, 525, 550, 579, 607, 632], "charact": [3, 13, 15, 17, 19, 34, 44, 47, 52, 53, 70, 83, 84, 88, 92, 105, 161, 174, 187, 198, 215, 216, 217, 220, 221, 224, 225, 226, 227, 228, 230, 231, 232, 358, 377, 382, 384, 387, 389, 391, 392, 393, 397, 398, 399, 402, 404, 405, 406, 407, 408, 409, 410, 413, 420, 425, 427, 429, 430, 436, 446, 448, 453, 455, 458, 460, 462, 463, 464, 467, 468, 469, 472, 474, 475, 476, 477, 478, 481, 487, 492, 494, 495, 496, 499, 504, 506, 509, 511, 513, 514, 515, 518, 519, 520, 523, 525, 526, 527, 528, 529, 532, 534, 539, 544, 546, 547, 548, 549, 552, 557, 559, 562, 564, 566, 567, 568, 572, 573, 574, 577, 579, 580, 581, 582, 583, 584, 585, 588, 595, 600, 602, 605, 606, 611, 616, 618, 621, 623, 625, 626, 627, 632, 640, 646, 647, 649, 664, 667, 678, 907, 941, 1092], "character": 688, "charg": [220, 227], "charlson": 132, "chase": 114, "check": [53, 221, 244, 264, 268, 294, 303, 306, 317, 650, 651, 689, 690, 701, 702, 703, 704, 725, 726, 727, 760, 864, 865, 878, 904, 916, 1032, 1033, 1053, 1097], "check_length": 1097, "checksum": 1054, "chemic": [649, 879], "chen": [107, 132], "chf": [434, 447, 609], "chi": [864, 865], "chichest": 680, "child": [225, 303, 395, 465, 516, 570, 628, 698, 949, 970, 1001, 1005, 1023, 1095], "child1": [966, 981], "child2": [966, 981], "child_index": 1020, "children": [225, 699, 949, 954, 958, 966, 970, 981, 983, 990, 994, 1001, 1005, 1007, 1014], "chimp": [220, 227], "chisquar": 879, "chiu": 132, "choic": [82, 85, 224, 870], "choos": [116, 229, 865, 875], "chosen": [427, 494, 546, 602, 646, 692, 752, 861, 872, 880], "christoph": 221, "chunk": 227, "ci": [106, 122, 688], "ci_typ": 122, "cigar": [3, 20, 45, 50, 53], "circuit": 1097, "circumst": [118, 499, 878], "citat": 231, "ciufo": 231, "cl": [243, 245, 258, 260, 261, 262, 448, 1039], "clade": [1008, 1015, 1028, 1095], "cladogenesi": 759, "claim": [265, 269], "clarifi": 116, "clariti": 225, "clark": [751, 752], "class": [3, 20, 34, 53, 65, 89, 90, 105, 107, 110, 150, 161, 174, 187, 198, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 243, 245, 246, 258, 260, 261, 262, 263, 275, 293, 303, 322, 340, 358, 377, 395, 412, 414, 436, 448, 465, 480, 482, 499, 516, 531, 533, 552, 570, 587, 589, 611, 628, 634, 635, 649, 683, 702, 725, 761, 772, 783, 794, 805, 816, 827, 838, 851, 881, 902, 905, 928, 943, 948, 949, 971, 1028, 1035, 1055, 1067, 1078, 1089, 1090, 1092], "classic": 231, "classif": [231, 861], "classmethod": [13, 14, 15, 16, 44, 45, 46, 47, 48, 86, 87, 93, 172, 185, 315, 319, 371, 373, 395, 426, 445, 465, 493, 516, 545, 570, 601, 628, 645, 661, 664, 665, 666, 667, 670, 716, 719, 740, 744, 862, 907, 908, 932, 986, 987, 988, 1006], "classproperti": 448, "claus": 370, "clean": [272, 966, 1005], "clear": 228, "clinic": [879, 1091], "clip_head": 161, "clip_tail": 161, "clone": 219, "clone_lib": 219, "close": [93, 97, 117, 172, 173, 185, 186, 220, 221, 225, 227, 230, 272, 273, 319, 321, 358, 373, 376, 426, 435, 446, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 683, 719, 724, 744, 750, 782, 815, 826, 862, 863, 932, 947, 1006, 1027, 1054], "closeabl": 272, "closefd": 232, "closer": [1, 1097], "clostridia": [988, 1021], "closur": [682, 695, 696, 697], "clover": 219, "clr": [680, 687, 688, 699], "clustal": [93, 97, 1090], "clustal_f": 217, "clustalw": 217, "cluster": [1, 753, 755, 986, 1092], "cmap": [1, 669, 718, 743, 861], "cnt": 878, "co": 759, "co2": 878, "cock": 221, "cocryst": 222, "code": [217, 220, 221, 222, 231, 318, 377, 430, 432, 433, 434, 436, 437, 443, 444, 445, 446, 447, 496, 499, 549, 552, 604, 606, 608, 609, 647, 759, 880, 937, 972, 1028, 1030, 1092], "codon": [222, 231, 433, 436, 446, 447, 608, 649], "codon_start": 222, "coeff": 753, "coeffici": [107, 752, 753, 759, 851, 872, 875, 974], "coercion": [395, 465, 516, 570, 628], "cogent": 979, "col": [702, 891, 902, 917, 943], "col1": [92, 229], "col2": [92, 229], "col3": [92, 229], "collabor": 222, "collaps": [229, 970], "collapse_f": 897, "collapsed_id": [897, 907, 941], "collat": 756, "collect": [53, 133, 137, 139, 272, 358, 660, 698, 713, 736, 849], "collinear": [850, 865], "colon": 225, "color": [1, 122, 123, 669, 718, 743, 861], "colorbar": [669, 718, 743, 861], "colormap": [669, 718, 743, 861], "colormaps_refer": 861, "column": [1, 19, 52, 53, 65, 90, 91, 92, 145, 209, 213, 214, 220, 222, 223, 226, 227, 230, 231, 275, 276, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 322, 323, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 365, 367, 369, 370, 371, 372, 374, 375, 395, 414, 420, 465, 482, 487, 516, 533, 539, 570, 589, 595, 611, 628, 635, 640, 649, 653, 668, 672, 681, 682, 683, 688, 689, 690, 701, 706, 717, 721, 729, 741, 742, 746, 751, 752, 753, 754, 755, 756, 757, 759, 794, 838, 850, 861, 864, 865, 866, 868, 872, 873, 877, 878, 884, 895, 897, 902, 907, 908, 913, 917, 918, 919, 924, 933, 934, 939, 940, 941, 943, 987, 991, 1032, 1033, 1089], "column_missing_schem": [358, 371], "column_typ": [367, 371], "columnwis": 866, "com": [121, 215, 216, 217, 752, 1054], "comb": 1002, "combin": [53, 65, 82, 85, 222, 688, 752, 851, 865, 919], "come": [230, 759, 1016], "comma": [223, 224, 225], "command": [229, 231, 446], "comment": [219, 220, 222, 223, 224, 230, 231, 358], "comment_char": 225, "commit": 875, "common": [83, 89, 90, 101, 116, 132, 215, 220, 221, 222, 229, 230, 231, 412, 414, 480, 482, 531, 533, 587, 589, 634, 635, 681, 702, 794, 895, 896, 949, 974, 982, 995, 997, 1020, 1021, 1029, 1092, 1095, 1096], "commonli": [225, 229, 649, 755, 872, 1095], "commun": [107, 112, 116, 132, 135, 140, 143, 144, 688, 701, 751, 752, 754, 755, 850, 861, 865, 872, 879, 1089], "compact": 967, "compani": 878, "compar": [1, 126, 143, 149, 215, 216, 320, 416, 421, 422, 423, 424, 427, 488, 489, 490, 491, 494, 540, 541, 542, 543, 546, 591, 596, 597, 598, 599, 602, 641, 642, 643, 644, 646, 651, 658, 683, 701, 704, 711, 727, 734, 753, 759, 877, 878, 879, 972, 973, 974, 1002, 1032, 1033, 1092, 1095], "compare_rfd": [973, 974], "compare_subset": [972, 974, 1015, 1016, 1095], "compare_tip_dist": [972, 973, 980, 989, 1018, 1095], "comparison": [143, 144, 683, 688, 759, 877, 972, 1032, 1095], "compat": [116, 132, 143, 144, 229, 231, 436, 683], "compil": [403, 431, 473, 497, 524, 550, 578, 607, 631, 880], "complement": [416, 428, 446, 591, 603, 1092], "complement_map": [394, 569], "complet": [104, 122, 123, 221, 222, 225, 875, 1031, 1090], "complex": [225, 1097], "compliant": [377, 499, 552], "complic": [649, 1090], "compon": [680, 682, 692, 693, 694, 695, 696, 697, 827, 851, 864, 870, 1097], "compos": [84, 221, 228, 358], "composit": [112, 116, 132, 272, 865, 1089], "compound": 688, "comprehens": 231, "compress": [214, 232, 272, 907, 917, 918, 919, 941], "compresslevel": [232, 272], "comput": [0, 1, 83, 84, 88, 107, 110, 116, 123, 134, 140, 141, 142, 143, 144, 145, 146, 149, 303, 400, 404, 470, 474, 521, 525, 575, 579, 630, 632, 665, 677, 678, 679, 683, 688, 694, 698, 699, 700, 701, 716, 740, 751, 752, 753, 754, 755, 756, 759, 760, 761, 771, 793, 794, 804, 805, 816, 827, 837, 838, 848, 850, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 980, 1016, 1018, 1028, 1054, 1092, 1095], "computation": 53, "concat": [91, 92], "concaten": [91, 230, 315, 395, 465, 516, 570, 628, 898], "concentr": [112, 879], "concept": [3, 125, 698], "conceptu": [221, 754], "concern": [53, 224], "concis": 683, "conclud": 683, "concret": 322, "condens": [725, 737, 742, 747], "condensed_form": [725, 742, 747], "condit": [1, 122, 123, 878, 937], "confid": [1, 106, 111, 115, 122, 688, 875, 876, 949, 969], "confirm": [1, 751, 755, 879], "conflict": 977, "conform": 448, "confus": 865, "conjunct": 755, "connect": [116, 118, 132, 225, 949, 998, 1005], "consens": 1028, "consensu": 1028, "consensus_tre": 1028, "conserv": [116, 121, 122, 132, 217, 395, 465, 516, 570, 628, 683, 701], "consid": [3, 84, 107, 116, 121, 132, 143, 144, 220, 225, 358, 382, 417, 453, 484, 504, 536, 557, 592, 616, 637, 678, 680, 695, 755, 756, 849, 877, 878, 879, 1032, 1055], "consider": [121, 132, 322, 358, 878], "consist": [3, 15, 47, 216, 220, 221, 223, 226, 227, 229, 230, 231, 367, 430, 496, 549, 606, 611, 647, 649, 878, 999, 1019], "constant": [115, 680, 683, 737, 753, 877], "constitut": [1, 649, 667], "constrain": [851, 865], "constraint": [226, 851, 865, 872], "construct": [86, 96, 222, 231, 287, 291, 292, 293, 294, 322, 334, 338, 339, 352, 356, 357, 358, 375, 649, 664, 667, 673, 694, 701, 850, 894, 895, 896, 897, 898, 913, 922, 928, 930, 931, 935, 936, 943, 944, 977, 987, 988, 1029, 1089, 1090, 1095], "constructor": [65, 82, 85, 94, 217, 220, 221, 222, 227, 228, 230, 244, 257, 267, 377, 420, 436, 487, 499, 539, 552, 595, 611, 640, 649, 757], "consum": [65, 85, 245, 377, 436, 499, 552, 611], "consumpt": [756, 870, 897], "contain": [1, 3, 53, 65, 83, 85, 92, 98, 99, 100, 101, 102, 103, 104, 107, 141, 142, 145, 146, 149, 209, 213, 215, 217, 218, 219, 220, 221, 223, 224, 226, 227, 229, 230, 231, 232, 263, 275, 285, 287, 291, 292, 332, 334, 338, 339, 340, 350, 352, 356, 357, 358, 367, 368, 372, 375, 377, 379, 384, 397, 399, 404, 405, 408, 409, 410, 413, 417, 418, 419, 425, 427, 430, 436, 450, 455, 467, 469, 474, 475, 476, 477, 478, 481, 484, 485, 486, 492, 494, 496, 499, 501, 506, 518, 520, 525, 526, 527, 528, 529, 532, 534, 536, 537, 538, 544, 546, 547, 549, 552, 554, 559, 572, 574, 579, 580, 583, 584, 585, 588, 592, 593, 594, 600, 602, 606, 613, 618, 632, 637, 638, 639, 646, 647, 663, 665, 669, 677, 678, 683, 698, 699, 701, 715, 716, 718, 739, 740, 743, 747, 751, 752, 753, 754, 755, 756, 758, 760, 850, 861, 865, 897, 907, 908, 937, 941, 967, 971, 979, 1009, 1028, 1029, 1053, 1056, 1078, 1092, 1095], "content": [65, 83, 219, 220, 221, 222, 223, 225, 229, 232, 243, 244, 245, 372, 377, 394, 395, 398, 401, 428, 432, 465, 468, 471, 516, 519, 522, 552, 569, 570, 573, 576, 603, 604, 628, 1092], "context": [1, 53, 273, 274, 678, 861, 1029], "contextu": 1055, "contigu": [223, 293, 417, 484, 536, 592, 637], "conting": [688, 872, 881, 945], "continu": [98, 99, 100, 850], "contrast": [132, 698], "contribut": [83, 132, 759, 864, 869], "control": [92, 220, 751, 753, 754, 760, 872, 875, 877, 878, 879, 895, 905, 922], "control_cat": [877, 878], "controversi": 128, "conveni": [0, 53, 93, 97, 131, 172, 173, 185, 186, 266, 270, 319, 321, 373, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 862, 863, 932, 947, 1006, 1027, 1096], "convent": [116, 143, 144, 215, 219, 222], "convers": [3, 221, 272, 737, 922], "convert": [1, 3, 16, 48, 209, 210, 211, 212, 215, 217, 219, 220, 222, 225, 227, 230, 272, 291, 292, 322, 338, 339, 356, 357, 375, 377, 400, 429, 430, 470, 495, 496, 499, 521, 548, 549, 552, 575, 605, 606, 611, 630, 647, 702, 742, 752, 924, 929, 931, 939, 940, 969, 1034], "convert_underscor": 225, "convienc": [995, 997], "coo_matrix": 699, "coord": [14, 46, 760, 761, 783, 794, 827, 838], "coord_data": 760, "coordin": [1, 3, 14, 18, 46, 51, 161, 187, 222, 228, 293, 303, 306, 314, 315, 320, 688, 699, 755, 760, 794, 827, 838, 851, 861, 864, 870, 871, 872], "copi": [65, 68, 69, 220, 227, 230, 303, 304, 305, 380, 381, 427, 451, 452, 494, 502, 503, 546, 555, 556, 602, 611, 614, 615, 646, 671, 674, 702, 720, 722, 745, 748, 873, 880, 945, 950, 951, 978, 1010, 1011, 1017, 1025, 1026, 1049, 1050, 1051], "copy_from": 303, "copyright": [220, 227], "corbet": 117, "cornish": [377, 448, 499, 552, 611], "cornwel": 132, "corr": 1, "corr_coeff": [753, 759], "correct": [110, 111, 118, 220, 683, 688, 1005, 1011, 1090], "correl": [1, 694, 700, 701, 752, 753, 756, 758, 759, 851, 865, 866, 872, 875, 879, 974, 1095], "correspond": [1, 15, 47, 91, 116, 132, 143, 144, 161, 187, 211, 218, 220, 221, 223, 228, 230, 265, 269, 288, 335, 353, 358, 407, 420, 436, 446, 487, 539, 582, 595, 608, 609, 640, 653, 683, 698, 706, 729, 851, 864, 865, 868, 879, 897, 902, 907, 909, 911, 912, 923, 924, 941, 943, 944, 949, 982, 987, 991, 1000, 1021, 1028], "cospeci": 759, "cost": [694, 700], "costli": 0, "could": [1, 65, 123, 218, 220, 221, 228, 232, 264, 266, 268, 270, 683, 688, 702, 751, 753, 754, 755, 756, 759, 861, 877, 936, 995, 997, 1030, 1031, 1090], "count": [0, 3, 65, 82, 85, 88, 92, 95, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 149, 214, 217, 220, 221, 227, 230, 404, 406, 407, 419, 421, 423, 474, 486, 488, 490, 525, 538, 540, 542, 579, 581, 582, 594, 596, 598, 632, 639, 641, 643, 679, 680, 683, 688, 759, 865, 871, 878, 879, 880, 897, 911, 927, 931, 937, 973, 974, 1000, 1028, 1090], "counts2": 879, "counts_001": 875, "counts_010": 875, "counts_100": 875, "counts_interv": [875, 878, 879], "coupl": 303, "covari": [132, 866], "cover": [303, 661, 1095], "coverag": [107, 115, 119, 123, 215, 216], "cprofil": 1097, "cran": [698, 751, 752, 753, 754, 755], "crd": 220, "creat": [1, 3, 13, 14, 15, 16, 34, 44, 45, 46, 47, 48, 53, 65, 82, 85, 86, 87, 91, 93, 94, 95, 96, 172, 185, 219, 220, 223, 225, 227, 229, 246, 257, 267, 272, 273, 291, 292, 293, 303, 314, 315, 319, 338, 339, 356, 357, 373, 375, 377, 426, 427, 448, 493, 494, 499, 545, 546, 552, 601, 602, 611, 645, 646, 664, 665, 667, 669, 670, 672, 673, 683, 692, 693, 701, 716, 718, 719, 721, 740, 743, 744, 746, 747, 757, 759, 794, 850, 861, 862, 881, 897, 904, 905, 911, 912, 914, 915, 917, 922, 923, 928, 929, 930, 932, 933, 935, 936, 938, 943, 944, 946, 948, 970, 971, 992, 1006, 1029, 1092, 1095, 1097], "create_cach": 992, "create_d": [881, 948], "create_format": [232, 243, 244, 245], "creation": [907, 941, 942], "creation_d": [941, 942], "credibl": 688, "criteria": [286, 318, 333, 351, 370, 877, 1024], "critic": [875, 876, 878, 879, 969], "crop": 231, "cross": 222, "cross_refer": 219, "csc": [884, 941], "csc_matrix": 941, "csr": [884, 941], "csr_matrix": 941, "csv": [215, 224, 1090], "ctaa": 222, "ctaacccccttttctcaga": 0, "ctagctagta": 219, "ctataaaaaa": 222, "ctattatact": 219, "ctc": [430, 496, 549, 606, 647], "ctcaaaagtc": [430, 496, 549, 606, 647], "ctcaaaattc": 219, "ctcttctagt": 219, "ctgtttgtta": 219, "cttcatgtat": 219, "cttccaattt": 219, "cttgacatag": 219, "cttgatgata": 219, "cuaa": 222, "cual": 229, "cuauaaaaaa": 222, "cug": 446, "cuguuuguua": 219, "cultur": 878, "cumbersom": 229, "cumul": [121, 140, 217, 218], "cuppini": 118, "curat": 231, "current": [213, 215, 218, 219, 220, 221, 222, 227, 229, 230, 231, 303, 317, 358, 367, 434, 447, 609, 661, 683, 753, 838, 864, 870, 907, 941, 971, 984, 993, 994, 999, 1089], "curti": 1, "curv": [118, 121, 128, 865, 875, 878, 879], "custom": [0, 1, 231, 377, 400, 436, 437, 448, 470, 499, 521, 552, 575, 630, 861, 907, 935, 941, 1089, 1092], "custom_metr": [400, 470, 521, 575, 630], "customsequ": 448, "cutoff": [683, 1028], "cuucauguau": 219, "cuugacauag": 219, "cw": 230, "cy": 499, "cyanogen": 219, "cystein": 499, "cytokin": 878, "cytophagia": [988, 1021], "cytosin": [377, 552], "czech": 969, "d": [1, 53, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 215, 216, 222, 225, 226, 377, 499, 552, 660, 664, 669, 675, 680, 681, 682, 683, 686, 687, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 713, 718, 723, 736, 743, 747, 749, 751, 752, 753, 754, 755, 759, 794, 816, 838, 851, 861, 869, 878, 879, 880, 881, 898, 913, 914, 934, 948, 950, 951, 964, 965, 967, 969, 970, 971, 972, 973, 975, 976, 978, 979, 980, 982, 983, 984, 985, 989, 995, 996, 997, 998, 999, 1005, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1028, 1029, 1090, 1092, 1095, 1097], "d1": [231, 1092], "d136": 231, "d143": 231, "d2": 1092, "d3": 1092, "d_": [127, 137], "d_a": 922, "d_b": 922, "d_d": 225, "d_w": 140, "d_x": 753, "d_y": 753, "daili": 231, "danger": 1, "dash": 229, "data": [1, 3, 92, 116, 118, 128, 132, 141, 143, 144, 145, 146, 149, 209, 212, 214, 215, 218, 219, 221, 223, 224, 226, 228, 229, 230, 231, 272, 275, 322, 340, 358, 367, 377, 448, 499, 552, 611, 651, 653, 671, 680, 681, 682, 683, 684, 687, 688, 690, 692, 694, 698, 700, 702, 704, 706, 720, 725, 727, 729, 745, 752, 759, 760, 782, 815, 826, 849, 850, 861, 864, 865, 869, 875, 877, 878, 879, 881, 882, 884, 891, 892, 894, 897, 902, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 917, 918, 923, 926, 928, 929, 930, 931, 933, 935, 936, 938, 939, 940, 941, 943, 944, 945, 946, 987, 1018, 1022, 1029, 1053, 1056, 1089, 1090, 1091, 1092, 1097], "data_fh": 906, "data_fram": 752, "data_pump": 908, "data_typ": [907, 941], "databas": [215, 216, 219, 222, 229, 231, 293, 987], "datafram": [1, 65, 90, 145, 209, 215, 216, 231, 291, 322, 338, 356, 358, 375, 377, 414, 482, 499, 533, 552, 589, 611, 635, 660, 672, 675, 683, 688, 713, 721, 723, 736, 746, 749, 751, 752, 754, 755, 756, 760, 794, 838, 850, 851, 861, 864, 865, 871, 872, 877, 878, 895, 924, 940, 987, 988, 1032, 1092], "datapoint": 128, "dataset": [146, 213, 218, 680, 688, 755, 850, 865, 870, 907, 941], "datatyp": [213, 849], "date": [219, 907, 908, 941, 942], "datetim": [941, 942], "dayhoff": 661, "db": 220, "db_xref": [219, 222], "dbsourc": 219, "dbxref": [222, 223], "ddbj": 222, "ddl": [907, 941], "ddof": [694, 700, 869, 873], "de": [219, 230], "deal": [218, 219, 271, 680, 692, 870, 1090], "debug": [107, 1055, 1066, 1097], "debug_post_st": 1097, "debug_pre_st": 1097, "debug_runtim": 1097, "debug_trac": 1097, "decemb": 221, "decid": [870, 1097], "decim": [225, 229, 1033], "declar": [226, 229], "decod": [221, 272], "decomposit": [132, 146, 212], "decompress": 272, "decor": [232, 243, 244, 245, 303, 448, 971, 1028, 1035, 1055, 1067, 1068, 1078, 1089], "decreas": 849, "deem": 865, "deep": [69, 108, 305, 380, 381, 451, 452, 502, 503, 555, 556, 611, 614, 615, 662, 674, 714, 722, 738, 748], "deepcopi": [69, 950, 951, 975, 1025, 1026], "deeper": [143, 144], "def": [217, 232, 243, 244, 245, 400, 448, 470, 521, 575, 630, 879, 1097], "default": [0, 1, 15, 19, 47, 52, 53, 65, 82, 83, 85, 92, 94, 97, 98, 99, 100, 102, 103, 107, 111, 121, 128, 132, 135, 141, 145, 173, 186, 215, 220, 222, 223, 224, 225, 227, 228, 229, 232, 233, 243, 245, 258, 260, 286, 318, 321, 322, 333, 351, 358, 370, 376, 400, 417, 429, 430, 433, 434, 435, 436, 446, 447, 470, 484, 495, 496, 498, 521, 536, 548, 549, 551, 575, 592, 605, 606, 608, 609, 610, 630, 637, 647, 648, 660, 665, 669, 676, 681, 682, 683, 688, 689, 690, 692, 693, 702, 713, 716, 718, 724, 736, 740, 743, 750, 752, 753, 755, 756, 757, 794, 849, 861, 863, 869, 870, 872, 873, 880, 891, 897, 902, 905, 907, 912, 914, 917, 918, 919, 921, 922, 925, 927, 928, 929, 930, 931, 935, 937, 941, 942, 943, 944, 946, 947, 974, 999, 1018, 1027, 1028, 1029, 1032, 1033, 1053, 1056, 1078, 1090, 1092, 1095, 1097], "default_column": 215, "default_gap_char": [83, 84, 92, 448], "default_missing_schem": [358, 371], "default_write_format": 245, "defaultdict": 923, "defer": 303, "defin": [1, 14, 18, 46, 51, 65, 92, 94, 100, 103, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 140, 149, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 293, 303, 317, 358, 382, 400, 418, 419, 429, 430, 436, 437, 444, 445, 453, 470, 485, 486, 495, 496, 504, 521, 537, 538, 548, 549, 557, 575, 593, 594, 605, 606, 616, 630, 638, 639, 647, 649, 661, 666, 669, 679, 681, 682, 686, 687, 689, 690, 691, 695, 696, 697, 702, 718, 743, 753, 756, 861, 875, 905, 907, 922, 930, 941, 946, 1025, 1026, 1029, 1032, 1066, 1090, 1092, 1095, 1097], "definit": [1, 83, 112, 161, 174, 218, 219, 220, 221, 222, 223, 231, 377, 394, 395, 398, 399, 401, 408, 409, 413, 425, 428, 431, 432, 433, 434, 436, 446, 447, 448, 465, 468, 469, 471, 476, 477, 481, 492, 497, 499, 516, 519, 520, 522, 527, 528, 532, 544, 550, 552, 569, 570, 573, 574, 576, 583, 584, 588, 600, 603, 604, 607, 608, 609, 628, 661, 907, 941, 1029, 1092, 1096, 1097], "definite_char": 448, "deflin": 220, "degap": [406, 407, 581, 582, 1092], "degener": [83, 84, 161, 174, 218, 219, 220, 221, 222, 223, 377, 394, 395, 397, 398, 401, 406, 407, 408, 409, 413, 425, 428, 429, 431, 432, 433, 434, 436, 446, 447, 448, 465, 467, 468, 471, 476, 477, 481, 492, 495, 497, 499, 516, 518, 519, 522, 527, 528, 532, 544, 548, 550, 552, 569, 570, 572, 573, 576, 581, 582, 583, 584, 588, 600, 603, 604, 605, 607, 608, 609, 628, 661, 1092], "degenerate_map": [401, 448, 471, 522, 576, 1092], "degenerate_mod": 84, "degre": [112, 132, 217, 688, 694, 700, 869, 876, 878], "deiman": 230, "del": [15, 19, 47, 52, 224, 429, 495, 548, 605, 850], "deleg": 954, "delet": [19, 52, 303, 992, 1008, 1036], "deleteri": 1031, "delgado": [680, 698], "delim": 902, "delimit": [223, 224, 226, 228, 231, 290, 337, 355, 374, 701, 902, 906, 909, 943], "delta": [132, 692, 693, 869], "demograph": 1091, "demonstr": [89, 90, 232, 412, 414, 480, 482, 531, 533, 587, 589, 634, 635], "dempqsv": [430, 496, 549, 606, 647], "demultiplex": 849, "den": 698, "denomin": [681, 698], "denominator_col": 681, "denominator_idx": [681, 682], "denot": [112, 132, 136, 139, 140, 220, 683, 688, 751, 754, 755], "dens": [214, 897, 900, 905, 908, 917, 918, 919, 928, 939, 940, 948], "densiti": 944, "dep": 875, "depend": [20, 111, 114, 115, 116, 132, 141, 143, 144, 145, 220, 221, 230, 243, 244, 245, 272, 407, 582, 653, 706, 729, 753, 755, 757, 816, 870, 907, 950, 951, 974, 975, 978, 1022, 1028, 1055, 1066, 1090, 1095, 1097], "deprec": [104, 105, 116, 130, 132, 143, 144, 149, 413, 425, 481, 492, 532, 544, 588, 600, 683, 693], "depth": [132, 850, 875, 878, 879, 1022, 1095], "deriv": [99, 100, 102, 103, 219, 417, 484, 536, 592, 611, 637, 689, 690, 698, 878, 1029], "derives_from": 223, "desc": 611, "descend": [95, 132, 320, 949, 979, 991, 999, 1008, 1015, 1016, 1019, 1022, 1095], "describ": [0, 1, 84, 98, 101, 108, 109, 112, 115, 116, 119, 120, 122, 123, 124, 125, 132, 133, 136, 143, 144, 149, 214, 219, 220, 221, 222, 223, 226, 227, 229, 230, 290, 337, 355, 358, 371, 374, 417, 420, 484, 487, 536, 539, 592, 595, 611, 637, 640, 671, 694, 700, 701, 720, 737, 745, 753, 759, 871, 897, 903, 907, 941, 942, 991, 1029, 1091, 1092, 1095], "descript": [53, 107, 116, 121, 126, 127, 137, 141, 143, 144, 145, 213, 215, 220, 221, 222, 223, 225, 227, 229, 231, 275, 322, 340, 653, 706, 729, 941, 972, 1028, 1092, 1095], "description_newline_replac": [220, 221], "descriptor": [222, 871, 1049, 1050, 1051], "deseri": [701, 851], "design": [1, 146, 213, 214, 219, 229, 358, 701, 877], "desir": [118, 122, 215, 224, 870, 924, 936, 1012, 1097], "destin": 611, "detach": 3, "detail": [53, 91, 92, 104, 105, 132, 146, 148, 149, 219, 220, 221, 222, 223, 227, 228, 230, 231, 232, 275, 322, 340, 358, 447, 611, 653, 706, 729, 752, 756, 861, 864, 865, 872, 1029, 1090], "detect": [220, 222, 229, 265, 269, 683, 753, 879, 894], "determin": [1, 67, 70, 79, 89, 90, 116, 132, 141, 143, 144, 145, 224, 232, 261, 262, 272, 276, 282, 285, 289, 323, 329, 332, 336, 341, 347, 350, 354, 358, 359, 365, 367, 368, 379, 382, 391, 408, 409, 410, 411, 412, 413, 414, 416, 437, 443, 450, 453, 462, 476, 477, 478, 479, 480, 481, 482, 501, 504, 513, 527, 528, 529, 530, 531, 532, 533, 534, 554, 557, 566, 583, 584, 585, 586, 587, 588, 589, 591, 613, 616, 625, 633, 634, 635, 658, 683, 711, 734, 755, 759, 849, 870, 875, 877, 878, 882, 897, 1028, 1097], "determinist": [117, 751, 755], "develop": [1, 20, 146, 149, 219, 229, 243, 244, 245, 683, 1029, 1089, 1097], "deviat": [752, 869, 872, 873, 876], "df": [215, 216, 231, 672, 688, 721, 746, 751, 752, 755, 861, 876, 940], "di": [118, 1092], "diag": 919, "diagnos": 1097, "diagon": [213, 740, 747, 919], "diagram": 293, "dict": [53, 65, 86, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 172, 173, 185, 186, 219, 222, 244, 264, 265, 266, 268, 269, 270, 293, 314, 318, 319, 321, 358, 371, 373, 376, 377, 404, 419, 426, 433, 434, 435, 474, 486, 493, 498, 499, 525, 538, 545, 551, 552, 579, 594, 601, 608, 609, 610, 611, 632, 639, 645, 648, 649, 664, 670, 673, 676, 719, 724, 744, 750, 753, 756, 816, 862, 863, 892, 893, 907, 908, 909, 912, 922, 923, 930, 932, 941, 946, 947, 987, 988, 991, 1000, 1006, 1020, 1027, 1055, 1092, 1097], "dict_of_metadata": 893, "dictionari": [86, 89, 94, 96, 105, 230, 231, 293, 304, 305, 314, 318, 412, 480, 531, 587, 611, 634, 664, 673, 753, 905, 987], "did": [107, 220, 228, 264, 268, 273, 1097], "didn": [220, 1097], "diet": 877, "differ": [0, 1, 70, 83, 84, 86, 98, 99, 100, 111, 116, 121, 133, 137, 143, 144, 216, 218, 220, 221, 227, 230, 231, 232, 322, 379, 382, 391, 395, 396, 400, 415, 416, 421, 422, 423, 424, 427, 433, 436, 443, 450, 453, 462, 465, 466, 470, 483, 488, 489, 490, 491, 494, 501, 504, 513, 516, 517, 521, 535, 540, 541, 542, 543, 546, 554, 557, 566, 570, 571, 575, 590, 591, 596, 597, 598, 599, 602, 608, 613, 616, 625, 628, 629, 630, 636, 641, 642, 643, 644, 646, 653, 678, 683, 688, 701, 706, 729, 751, 754, 755, 759, 783, 838, 850, 864, 865, 870, 878, 879, 944, 972, 973, 1032, 1033, 1049, 1050, 1051, 1092, 1095], "differenti": [683, 688], "difficult": 1, "digit": 229, "dim": 218, "dimens": [77, 161, 174, 218, 226, 227, 659, 681, 685, 689, 690, 712, 735, 755, 851, 860, 861, 870, 871], "dimension": [1, 211, 218, 671, 682, 695, 696, 697, 702, 720, 737, 745, 850, 864, 871, 872, 878, 879, 933, 1093], "direct": [229, 231, 290, 337, 355, 374, 865, 949], "direct_io": [902, 942, 943], "direction": 1033, "directli": [65, 82, 85, 229, 377, 436, 499, 552, 611, 677, 683, 759, 942, 943, 1055, 1097], "dirichilet": 688, "dirichlet": 688, "disabl": [1, 116, 141, 143, 144, 145, 1097], "disallow": [225, 230, 753], "disallow_negative_branch_length": 1029, "discard": [222, 753, 905], "discov": [1, 977], "discoveri": 1, "discrep": 112, "discret": 139, "discuss": [132, 143, 144, 229, 1097], "diseas": [683, 753, 895], "disjoint": [898, 1028], "disjointiderror": [894, 898], "disk": [220, 358, 702], "dism": 694, "disperison": 755, "dispers": 755, "displai": [219, 404, 427, 436, 474, 494, 525, 546, 579, 602, 632, 646, 756, 851], "disrupt": [402, 472, 523, 577, 1092], "dissimilar": [142, 145, 224, 650, 651, 653, 658, 659, 660, 662, 663, 665, 668, 669, 671, 674, 675, 694, 701, 702, 703, 704, 706, 711, 712, 713, 714, 715, 716, 717, 718, 720, 722, 723, 726, 727, 729, 734, 735, 736, 738, 739, 741, 743, 745, 748, 749], "dissimilaritymatrix": [213, 224, 649, 651, 653, 658, 660, 662, 663, 665, 669, 670, 672, 674, 675, 676, 694, 701, 725, 727, 729, 734, 736, 738, 739, 743, 746, 748, 749, 757], "dist": [974, 989], "dist_f": 974, "distanc": [1, 53, 132, 142, 143, 144, 145, 146, 148, 149, 210, 213, 224, 225, 421, 423, 488, 490, 540, 542, 596, 598, 641, 643, 649, 660, 663, 669, 671, 675, 681, 694, 758, 759, 861, 864, 865, 867, 870, 872, 949, 963, 964, 972, 974, 989, 1011, 1018, 1029, 1089, 1095], "distance_filt": 53, "distance_from_r": 974, "distance_from_r_squar": 974, "distance_matrix": [751, 752, 754, 755, 867, 870], "distancematrix": [145, 146, 149, 210, 213, 224, 672, 677, 694, 701, 702, 721, 751, 752, 753, 754, 755, 756, 757, 759, 861, 870, 1018, 1029], "distant": 989, "distinct": [83, 129, 130, 139, 678, 701], "distinguish": [50, 112, 132], "distort": 680, "distribut": [115, 219, 688, 695, 757, 870, 875, 876, 878, 879, 937], "div": 231, "diverg": 1, "divers": [701, 880, 1089], "divid": [217, 698, 867, 869, 873, 897], "divis": [436, 698, 873], "dj": 220, "dm": [213, 653, 660, 669, 672, 675, 701, 706, 713, 718, 721, 723, 729, 736, 743, 746, 747, 749, 751, 752, 755, 756, 861, 1029], "dm1": 756, "dm2": 756, "dm_fh": 701, "dm_from_np": 701, "dmp": 987, "dna": [0, 3, 17, 65, 66, 67, 68, 69, 70, 75, 77, 80, 82, 83, 85, 86, 88, 90, 91, 92, 94, 95, 96, 99, 102, 104, 217, 219, 220, 221, 222, 223, 227, 228, 230, 436, 448, 465, 467, 468, 469, 471, 472, 475, 476, 477, 478, 481, 482, 484, 492, 496, 497, 516, 518, 519, 520, 522, 523, 526, 527, 528, 529, 532, 533, 536, 544, 549, 550, 552, 569, 570, 572, 573, 574, 576, 577, 580, 581, 582, 583, 584, 585, 588, 589, 591, 592, 600, 603, 604, 606, 607, 611, 628, 635, 637, 647, 702, 1090, 1092], "dna_seq": [219, 220, 222], "dnaful": 661, "do": [1, 82, 85, 128, 211, 213, 218, 220, 227, 229, 232, 272, 377, 382, 424, 453, 491, 499, 504, 543, 552, 557, 599, 611, 616, 644, 678, 683, 753, 756, 794, 872, 884, 905, 928, 937, 969, 982, 1012, 1013, 1095, 1097], "do_someth": 1097, "do_something_awesom": 1097, "do_something_els": 1097, "doc": [145, 217, 219, 220, 227, 229, 290, 293, 337, 355, 358, 371, 374, 671, 702, 720, 725, 737, 745, 941, 1028], "docstr": [275, 322, 340], "doctest": 907, "document": [1, 72, 148, 214, 220, 222, 227, 228, 263, 683, 861, 881, 907, 941, 948, 949, 1090, 1094], "doe": [65, 82, 83, 85, 92, 95, 104, 116, 132, 215, 217, 218, 220, 221, 223, 225, 227, 230, 272, 285, 332, 350, 368, 395, 436, 437, 443, 446, 465, 516, 570, 628, 661, 671, 678, 701, 720, 742, 745, 751, 753, 755, 794, 870, 878, 879, 901, 923, 924, 941, 965, 974, 985, 998, 1011, 1018, 1021, 1028, 1032, 1090], "doesn": [92, 220, 229, 371, 446, 695, 699, 864, 870, 874, 1011, 1030, 1096], "doi": [53, 104, 219, 221, 694, 700, 1029], "domain": [230, 499, 987, 1021], "domin": [106, 108, 114, 125, 136, 137, 140], "domrachev": 231, "don": [1, 53, 92, 220, 229, 406, 407, 581, 582, 681, 683, 756, 872, 875, 879, 973, 974, 1011, 1029], "done": [84, 683, 755, 782, 815, 826, 884], "doubl": [107, 108, 109, 110, 112, 114, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136, 137, 140, 264, 268, 864, 870], "doubleton": [1, 110, 111, 113, 115, 131], "doubt": 229, "download": [219, 222, 231], "dqyhrykedvgimkdqnmdsyrfsiswprilpkgklsgginhegikyynnli": 219, "dr": 219, "draw": [688, 875, 877, 878, 879, 967, 1010], "draw_mod": [875, 879], "drawn": [688, 757, 875, 878, 879], "driver": [1, 114], "drop": [303, 367, 384, 455, 506, 559, 618, 756, 850, 865, 905, 1008, 1028], "drop_all_miss": 367, "drop_all_uniqu": 367, "drop_missing_valu": [286, 289, 333, 336, 351, 354], "drop_zero_vari": 367, "dt": 219, "dt_rich": 897, "dtype": [0, 1, 17, 65, 70, 82, 83, 84, 85, 88, 91, 92, 94, 95, 217, 218, 220, 221, 227, 228, 230, 358, 375, 394, 395, 397, 398, 399, 405, 422, 424, 425, 428, 430, 465, 467, 468, 469, 475, 489, 491, 492, 496, 516, 518, 519, 520, 526, 541, 543, 544, 547, 549, 569, 570, 572, 573, 574, 580, 597, 599, 600, 603, 606, 611, 628, 642, 644, 647, 683, 702, 747, 751, 755, 850, 881, 921, 925, 939, 948, 1020, 1092], "due": [130, 225, 317, 692, 693, 752, 755, 865, 878], "dump": [231, 1095, 1097], "dunn": 219, "duplic": [92, 149, 221, 229, 230, 317, 430, 496, 549, 606, 647, 663, 715, 739, 1052], "duplicatenodeerror": [116, 132, 141, 143, 144, 145, 977], "duplicateregistrationerror": [243, 244, 245], "dure": [92, 220, 294, 395, 465, 516, 570, 628, 755, 922, 942, 943, 1053], "dx": 118, "e": [0, 1, 53, 66, 77, 84, 88, 89, 95, 112, 117, 118, 119, 120, 121, 126, 127, 132, 133, 134, 135, 136, 137, 139, 143, 144, 145, 146, 149, 215, 216, 217, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 293, 316, 322, 358, 371, 372, 395, 403, 404, 412, 446, 465, 473, 474, 480, 499, 516, 524, 525, 531, 534, 547, 570, 578, 579, 587, 604, 611, 628, 631, 632, 634, 649, 653, 660, 669, 675, 678, 683, 688, 698, 699, 701, 702, 706, 713, 718, 723, 725, 729, 736, 743, 747, 749, 751, 752, 753, 754, 755, 861, 867, 868, 877, 878, 880, 898, 902, 907, 924, 937, 941, 949, 950, 951, 964, 965, 967, 969, 970, 971, 975, 976, 978, 979, 980, 982, 983, 984, 985, 989, 993, 995, 996, 997, 998, 999, 1005, 1009, 1010, 1011, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1028, 1029, 1033, 1052, 1055, 1090, 1092, 1095, 1097], "e1004075": [694, 700], "e157": 132, "e_": [689, 690], "e_1": [689, 690], "e_d": 137, "e_h": 133, "e_i": 690, "e_matrix": 868, "each": [0, 1, 3, 13, 14, 15, 18, 34, 45, 46, 47, 51, 53, 65, 75, 80, 83, 84, 88, 91, 94, 98, 99, 100, 101, 102, 103, 104, 116, 128, 141, 143, 144, 145, 146, 149, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 293, 304, 305, 314, 358, 372, 377, 387, 392, 395, 401, 404, 417, 419, 434, 447, 458, 463, 465, 471, 474, 484, 486, 499, 509, 514, 516, 522, 525, 536, 538, 562, 567, 570, 576, 579, 592, 594, 609, 611, 621, 626, 628, 632, 637, 639, 649, 653, 663, 665, 678, 683, 685, 688, 692, 693, 695, 696, 697, 698, 701, 706, 715, 716, 729, 739, 740, 751, 752, 753, 754, 755, 756, 759, 760, 761, 771, 772, 783, 793, 794, 804, 805, 827, 837, 838, 848, 849, 850, 851, 861, 865, 866, 868, 869, 870, 872, 875, 878, 879, 897, 905, 907, 918, 924, 926, 938, 941, 944, 1022, 1028, 1090, 1092, 1097], "earlier": 1097, "earth": 146, "earthmicrobiom": 146, "easi": [220, 221, 229], "easier": [293, 649], "easili": [224, 1092], "ebi": [98, 101, 219, 222, 293], "ec_numb": 219, "ecoli": [216, 894], "ecolog": [1, 114, 850, 865, 870], "ecologi": [1, 114, 116, 117, 124, 125, 140, 683, 751, 752, 753, 754, 850, 864, 865, 870, 871, 872], "ecologist": 864, "ed": [118, 218], "edg": [225, 759, 864, 967, 1020], "edit": [229, 753, 871], "editor": 220, "edu": [107, 111, 217, 220, 225, 227, 1028], "educ": [0, 877], "edward": 222, "eeb": [107, 111], "eeeee": 230, "eeeeeeee": 230, "eeeeeeeeeeh": 230, "eeeeeeeehhh": 230, "effect": [53, 104, 114, 143, 144, 229, 272, 430, 496, 549, 606, 647, 660, 713, 736, 875, 877, 878, 879], "effici": [0, 3, 224, 742], "efficiencywarn": 880, "effort": 222, "egozcu": [680, 689, 690, 694, 698, 700], "eh": 116, "eifcyilkinitilqfsitengmnefndatlpveeallntyridyyyrhlyi": 219, "eigendecomposit": [755, 870], "eigenvalu": [755, 851, 864, 870, 872], "eigenvector": [755, 865, 870], "eigh": [755, 870], "eight": 879, "eigval": [226, 851], "either": [1, 65, 72, 92, 94, 98, 99, 100, 132, 215, 229, 230, 243, 244, 245, 358, 407, 417, 448, 484, 536, 582, 592, 637, 679, 753, 755, 849, 861, 864, 869, 877, 879, 895, 896, 922, 930, 938, 1028], "elem": [907, 941], "element": [15, 47, 53, 224, 272, 653, 665, 685, 689, 690, 706, 716, 729, 740, 838, 861, 864, 868, 869, 873, 876, 878, 879, 880, 881, 884, 907, 910, 926, 941, 1052], "elementwis": 867, "elev": 752, "ellaps": 949, "elong": 1023, "els": [32, 33, 225, 232, 244, 264, 268, 378, 431, 449, 497, 500, 550, 553, 607, 611, 612, 866, 905, 929, 944, 971], "elsevi": [753, 850, 864, 865, 872], "elsewher": [116, 141, 143, 144, 145], "emb": [172, 173, 185, 186], "embed": [850, 1089], "embedding_ptr": 218, "embeddingvector": [198, 209, 210, 211, 212], "embl": [222, 231, 293, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648], "embl_gen": 219, "embl_str": 219, "emboss": [98, 101], "emboss_needl": 98, "emboss_wat": 101, "embptr": 218, "embryophyta": 219, "emdptr": 218, "emorg": 216, "emperor": 861, "emploi": 111, "empti": [20, 66, 89, 117, 216, 220, 223, 227, 261, 262, 404, 412, 474, 480, 525, 531, 579, 587, 632, 634, 663, 683, 715, 739, 877, 884, 916, 930, 933, 934, 971, 1021, 1032, 1090], "en": [220, 221, 230, 1029], "ena": [219, 222], "enabl": [3, 941, 1055, 1097], "encod": [3, 19, 52, 160, 171, 184, 197, 208, 213, 220, 221, 228, 232, 233, 272, 358, 698, 850], "encode_miss": [291, 292, 338, 339, 356, 357, 375], "encount": [1, 229, 980, 982, 989], "encourag": 878, "end": [0, 53, 98, 99, 100, 101, 102, 103, 104, 161, 215, 216, 219, 220, 221, 222, 223, 230, 231, 293, 303, 314, 320, 396, 415, 446, 466, 483, 517, 535, 571, 590, 629, 636, 1011], "endpoint": [879, 1018], "enforc": [220, 358, 611], "engel": 126, "engin": 1056, "english": [225, 753], "enough": [114, 220, 225, 879], "enrol": 879, "ens_": 114, "ens_pi": 114, "enspi": 137, "ensur": [1, 53, 84, 116, 143, 144, 232, 377, 499, 552, 651, 685, 688, 692, 704, 725, 727, 937, 970, 1032], "entail": [116, 141, 143, 144, 145], "entir": [1, 15, 16, 47, 48, 53, 65, 112, 377, 499, 552, 611, 884, 941, 945], "entiti": [139, 293, 941], "entrez": 231, "entri": [118, 213, 214, 219, 231, 849, 902, 905, 927, 928, 943, 944, 948], "entropi": [84, 120, 135], "enumer": 53, "env": [752, 901], "environ": [107, 143, 144, 695, 865, 939], "environment": [132, 752, 850, 865, 870, 871], "enzym": 128, "eq": [867, 868], "equal": [1, 3, 15, 47, 70, 79, 84, 105, 107, 139, 143, 144, 145, 220, 276, 282, 294, 300, 306, 312, 323, 329, 341, 347, 359, 365, 382, 391, 437, 443, 453, 462, 504, 513, 557, 566, 611, 616, 625, 649, 651, 658, 678, 695, 704, 711, 727, 734, 751, 753, 754, 755, 757, 759, 849, 864, 869, 870, 873, 878, 879, 880, 882, 903, 972, 1028, 1032, 1033], "equat": [110, 111, 117, 128, 753], "equit": [133, 137], "equival": [77, 114, 116, 132, 221, 229, 380, 381, 404, 406, 427, 428, 434, 447, 451, 452, 474, 494, 502, 503, 525, 546, 555, 556, 579, 581, 602, 603, 609, 614, 615, 632, 646, 660, 675, 678, 683, 713, 723, 736, 749, 753, 850, 1092], "erb": [694, 700], "eredi": 118, "erik": [53, 104], "error": [1, 84, 116, 128, 132, 141, 143, 144, 145, 220, 221, 227, 229, 232, 272, 317, 358, 372, 430, 496, 549, 606, 647, 751, 753, 755, 875, 879, 946, 1034, 1090], "escap": 225, "especi": [213, 220, 229, 759, 872], "essenti": 222, "esti": 115, "estim": [53, 107, 110, 111, 115, 117, 119, 121, 122, 123, 128, 134, 688, 869, 877, 878, 879], "estrang": 225, "et": [683, 688, 759, 881, 948], "etc": [93, 97, 118, 172, 173, 185, 186, 220, 221, 229, 264, 265, 266, 268, 269, 270, 290, 293, 319, 321, 337, 355, 373, 374, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 649, 670, 676, 719, 724, 744, 750, 862, 863, 870, 872, 924, 932, 947, 949, 1006, 1027, 1091, 1092], "euclidean": [210, 680, 701, 752, 864, 870, 872], "euclidian": 870, "eudicotyledon": 219, "eukaryota": 219, "euryarchaeota": [988, 1021], "evalu": [116, 132, 215, 216, 384, 455, 506, 559, 618, 701, 752, 849, 875, 971, 1008, 1011, 1095, 1097], "evaul": 232, "even": [98, 99, 100, 106, 120, 126, 133, 137, 220, 225, 446, 751, 755, 879, 1022], "evenli": [695, 861], "everi": [107, 229, 231, 367, 682, 695, 696, 697, 698, 699, 756, 970, 985, 991], "evid": [219, 225], "evmltdiprlhindpimk": 230, "evolut": [220, 225, 227, 758, 759, 969, 1028, 1029], "evolutionari": [116, 649, 661, 949, 1029], "ex": 1097, "exact": [116, 132, 141, 143, 144, 145, 229, 293, 395, 465, 516, 570, 628, 755, 870, 1090], "exactli": [65, 82, 85, 91, 101, 102, 103, 220, 221, 227, 232, 291, 338, 356, 358, 382, 391, 437, 453, 462, 504, 513, 557, 566, 616, 625, 699, 861, 967], "examin": [1056, 1097], "exampl": [0, 1, 3, 13, 14, 15, 17, 18, 19, 45, 46, 47, 50, 51, 52, 65, 66, 67, 68, 69, 70, 75, 77, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 116, 143, 144, 145, 161, 174, 224, 229, 232, 243, 244, 245, 273, 293, 303, 315, 320, 358, 377, 378, 379, 382, 384, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 430, 431, 432, 433, 434, 436, 437, 445, 446, 447, 448, 449, 450, 453, 455, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 496, 497, 499, 500, 501, 504, 506, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 552, 553, 554, 557, 559, 562, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 611, 612, 613, 616, 618, 621, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 649, 660, 661, 664, 667, 669, 672, 675, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 702, 713, 718, 721, 723, 736, 743, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 849, 861, 870, 877, 878, 879, 880, 894, 895, 896, 897, 898, 900, 901, 902, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 929, 930, 931, 933, 935, 936, 937, 938, 939, 940, 941, 943, 944, 946, 950, 951, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1054, 1090, 1091, 1092, 1093, 1095, 1097], "example_protein_embed": 218, "example_t": [214, 900, 919, 920, 921, 924, 925, 939, 940], "exce": [220, 227], "exceed": 229, "excel": [221, 229], "except": [1, 220, 225, 226, 227, 229, 244, 446, 663, 715, 739, 754, 865, 977, 1028, 1030, 1031, 1066, 1096], "excit": 1097, "exclud": [228, 698, 740, 747, 1014], "exclude_absent_taxa": 973, "exclus": [232, 293, 303, 314, 396, 415, 466, 483, 517, 535, 571, 590, 629, 636, 683], "execut": [232, 772, 816, 1056, 1078, 1097], "exercis": 877, "exhibit": 864, "exist": [0, 94, 107, 112, 214, 225, 232, 243, 244, 245, 261, 262, 446, 649, 661, 665, 701, 716, 740, 753, 756, 861, 901, 907, 913, 949, 966, 974, 979, 981, 1012, 1053, 1078, 1092], "exon": [223, 293, 420, 487, 539, 552, 595, 611, 640], "exp": [682, 687, 694, 700], "expand": [759, 924, 1021], "expect": [1, 146, 215, 232, 260, 377, 499, 552, 688, 689, 690, 701, 759, 864, 865, 872, 897, 906, 907, 922, 941, 1020, 1097], "expens": 884, "experi": [0, 219, 222, 229, 683, 688, 878], "experienc": 879, "experiment": [219, 755, 1091], "explain": [222, 223, 226, 760, 794, 838, 850, 851, 864, 870, 872], "explan": [864, 865], "explanatori": [759, 850, 851, 865, 872], "explicit": 221, "explicitli": [132, 227, 229, 430, 496, 549, 606, 647, 850], "explor": [1, 142, 850], "exploratori": 1, "expon": [225, 697], "export": 229, "expos": 907, "express": [140, 403, 431, 473, 497, 524, 550, 578, 607, 631, 688, 694, 700, 878, 1092], "ext": [290, 337, 355, 374], "extend": [0, 53, 82, 92, 98, 99, 100, 101, 102, 103, 116, 878, 966, 979, 1028, 1090], "extens": [219, 229, 290, 337, 355, 374], "extern": 225, "extinct": 116, "extra": [231, 232, 751, 752, 754, 755, 816], "extract": [653, 688, 701, 702, 706, 729, 751, 755, 865, 969, 1092], "extrapol": [122, 123, 875], "extrem": 753, "f": [1, 53, 92, 108, 122, 132, 146, 214, 215, 216, 218, 221, 225, 228, 230, 231, 273, 499, 753, 754, 755, 865, 868, 875, 878, 896, 897, 907, 930, 933, 941, 943, 944, 950, 951, 964, 965, 967, 969, 970, 971, 975, 976, 978, 979, 980, 982, 983, 984, 985, 989, 995, 996, 997, 998, 999, 1005, 1009, 1010, 1011, 1014, 1015, 1016, 1018, 1019, 1023, 1024, 1025, 1026, 1028, 1095], "f_1": [107, 110, 115, 119, 134], "f_2": [110, 115], "f_i": 107, "f_onewai": 683, "fabacea": 219, "fabal": 219, "fabid": 219, "facilit": [116, 143, 144, 146, 213, 725, 850, 875, 977, 1029], "fact": 446, "factor": [132, 143, 144, 751, 754, 759, 865, 879], "factori": [232, 243, 244, 245, 257, 267], "fail": [116, 117, 132, 141, 143, 144, 145, 317, 755, 875, 1055, 1056, 1097], "fail_callback": [1056, 1097], "fail_f": 1097, "failur": [107, 1056, 1097], "fairli": 759, "faith": [1, 116, 132, 701], "faith_pd": [1, 132], "fall": [118, 121, 132, 144, 849], "fals": [1, 32, 33, 53, 66, 67, 68, 69, 70, 82, 83, 85, 88, 89, 90, 91, 95, 98, 99, 100, 110, 111, 116, 132, 141, 143, 144, 145, 161, 174, 215, 218, 219, 220, 221, 222, 223, 225, 228, 243, 244, 245, 272, 273, 286, 289, 291, 292, 293, 303, 315, 316, 333, 336, 338, 339, 351, 354, 356, 357, 367, 375, 377, 378, 379, 380, 382, 384, 391, 394, 395, 397, 398, 399, 401, 404, 405, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 446, 447, 448, 449, 450, 451, 453, 455, 462, 465, 467, 468, 469, 471, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 501, 502, 504, 506, 513, 516, 518, 519, 520, 522, 525, 526, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 552, 553, 554, 555, 557, 559, 566, 569, 570, 572, 573, 574, 576, 579, 580, 582, 583, 584, 585, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 616, 618, 625, 628, 632, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 650, 651, 658, 660, 683, 688, 694, 700, 703, 704, 711, 713, 726, 727, 734, 736, 740, 742, 753, 756, 759, 760, 761, 783, 794, 827, 870, 872, 875, 877, 878, 880, 897, 904, 905, 908, 916, 917, 918, 919, 927, 928, 930, 934, 937, 939, 940, 941, 944, 946, 967, 972, 973, 976, 984, 990, 993, 994, 999, 1007, 1019, 1021, 1022, 1024, 1033, 1055, 1078, 1092, 1095, 1097], "famili": 1, "far": 864, "farthest": 1011, "fasffbf": 221, "fast": [116, 143, 144, 760, 870, 922], "fasta": [93, 97, 221, 223, 228, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 1090], "fasta_fl": 220, "fasta_format": 220, "faster": [1, 116, 143, 144, 146, 404, 434, 447, 474, 525, 579, 609, 632, 755, 870, 1002], "fastq": [93, 97, 228, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 1090], "fastq_format": 221, "favor": [104, 693], "fc": 688, "fd": [116, 1054], "fdr_bh": [683, 688], "featur": [1, 118, 129, 212, 214, 220, 223, 229, 230, 293, 303, 306, 315, 317, 318, 320, 358, 377, 499, 552, 611, 680, 683, 688, 698, 851, 860, 864, 865, 871, 872, 937, 1033, 1091, 1092, 1093], "feature_t": 222, "fecal": 879, "federhen": 231, "fee": [220, 227], "felsenstein": [220, 227, 1095], "fernand": 688, "fernandez": [680, 692], "ferr": 222, "fetch": [303, 937, 1095], "fetureid": 229, "few": [116, 143, 144, 146, 907, 941, 1090, 1095, 1097], "fewer": [107, 227, 878, 879], "fff": 221, "ffffx": 221, "ffllssssyi": 436, "fglfmeqlttgdysksmrrivknrlpkfskfesslvngsfdfiginyysssi": 219, "fh": [215, 216, 217, 220, 221, 222, 223, 227, 228, 230, 231, 232, 243, 244, 245], "field": [1, 216, 221, 228, 436, 850, 907, 941], "fifth": 220, "fig": [1, 669, 718, 743, 861], "figur": [669, 718, 743, 861], "file": [93, 97, 172, 173, 185, 186, 213, 214, 215, 216, 217, 218, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 244, 257, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 290, 319, 321, 337, 355, 358, 371, 373, 374, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 669, 670, 676, 683, 701, 718, 719, 724, 743, 744, 750, 782, 815, 826, 861, 862, 863, 877, 881, 894, 895, 896, 897, 898, 902, 906, 907, 909, 913, 922, 928, 930, 931, 932, 935, 936, 941, 942, 943, 944, 947, 948, 969, 1006, 1027, 1053, 1054, 1089, 1095], "fileformaterror": 232, "filehandl": [93, 97, 172, 173, 185, 186, 232, 243, 244, 245, 264, 265, 266, 268, 269, 270, 272, 273, 319, 321, 373, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 862, 863, 932, 947, 1006, 1027], "filenam": 1053, "filepath": [93, 97, 172, 173, 185, 186, 264, 265, 266, 268, 269, 270, 272, 290, 319, 321, 337, 355, 371, 373, 374, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 756, 862, 863, 932, 947, 1006, 1027], "filesentinel": [232, 243, 245], "filter": [53, 84, 104, 228, 284, 285, 331, 332, 349, 350, 358, 367, 368, 398, 468, 519, 573, 756, 895, 896, 937, 1021, 1097], "filter_column": 368, "filter_f": 1021, "filter_fn": 905, "filter_id": [286, 333, 351, 367, 370], "final": [230, 759, 897, 942, 943, 1097], "find": [0, 117, 397, 399, 402, 405, 415, 417, 422, 424, 425, 467, 469, 472, 475, 483, 484, 489, 491, 492, 518, 520, 523, 526, 535, 536, 541, 543, 544, 547, 572, 574, 577, 580, 590, 592, 597, 599, 600, 636, 637, 642, 644, 752, 755, 759, 865, 879, 918, 964, 965, 977, 979, 980, 983, 984, 985, 990, 992, 993, 994, 995, 997, 998, 1005, 1009, 1014, 1023, 1025, 1026, 1052], "find_al": [982, 984, 985], "find_by_func": [982, 983, 985], "find_by_id": [982, 983, 984], "find_motif": [417, 484, 536, 592, 637, 1092], "find_with_regex": [417, 484, 536, 592, 637, 1092], "fine": 944, "firmicut": [924, 987, 988, 1021], "first": [1, 3, 50, 53, 98, 99, 100, 101, 102, 103, 104, 107, 116, 143, 144, 150, 161, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 245, 315, 320, 415, 417, 433, 434, 446, 483, 484, 535, 536, 590, 592, 608, 611, 636, 637, 653, 681, 682, 683, 688, 695, 706, 729, 751, 753, 783, 838, 850, 866, 875, 878, 902, 913, 943, 969, 973, 982, 983, 991, 1021, 1022, 1066, 1090, 1095, 1097], "fish": 850, "fisher": 117, "fit": [128, 688, 849, 851, 872, 1096], "five": [220, 231, 669, 683, 718, 743, 1029], "fix": [122, 224, 227], "fl": 220, "flag": [231, 1095], "flat": [222, 417, 484, 536, 592, 637], "flatfil": 219, "flatten": 869, "float": [84, 88, 98, 99, 100, 101, 102, 103, 104, 105, 116, 121, 122, 132, 141, 143, 144, 145, 146, 149, 213, 215, 222, 224, 225, 229, 358, 375, 400, 406, 407, 421, 423, 470, 488, 490, 521, 540, 542, 575, 581, 582, 596, 598, 630, 641, 643, 665, 667, 678, 679, 683, 688, 692, 693, 697, 700, 701, 702, 716, 740, 753, 755, 757, 759, 772, 816, 861, 876, 878, 879, 880, 884, 907, 908, 910, 911, 922, 938, 941, 949, 964, 972, 973, 974, 979, 980, 989, 1020, 1028, 1032], "float32": [213, 218, 755, 939], "float64": [1, 92, 213, 218, 395, 465, 516, 570, 628, 683, 747, 755, 850, 907, 941], "flush": 272, "fmet": 446, "fn": 1053, "focu": 232, "focus": [358, 872], "fold": [688, 1090], "folder": 1053, "follow": [1, 89, 90, 92, 104, 111, 116, 117, 132, 143, 144, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 293, 358, 377, 384, 412, 414, 455, 480, 482, 499, 506, 531, 533, 552, 559, 587, 589, 611, 618, 634, 635, 653, 661, 681, 682, 683, 686, 687, 689, 690, 691, 695, 697, 698, 701, 706, 729, 751, 752, 753, 755, 756, 760, 861, 864, 879, 968, 1005, 1056, 1090, 1095, 1097], "foo": [223, 229, 303, 611, 884, 897, 898, 907, 908, 923, 933, 941, 943, 944, 1054, 1097], "foobar": [898, 1097], "foral": [686, 687], "foraminifera": 108, "ford": 132, "form": [1, 65, 98, 274, 653, 702, 706, 725, 729, 747, 892, 893, 902, 906, 943, 1020], "formal": [221, 231, 680], "format": [3, 45, 93, 97, 172, 173, 185, 186, 246, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 290, 293, 319, 321, 337, 340, 355, 358, 371, 373, 374, 376, 426, 431, 435, 436, 444, 493, 497, 498, 545, 550, 551, 601, 607, 610, 645, 648, 670, 671, 676, 702, 719, 720, 724, 725, 737, 742, 744, 745, 750, 782, 815, 826, 862, 863, 881, 902, 906, 907, 908, 909, 932, 939, 941, 942, 943, 947, 948, 967, 987, 1006, 1027, 1029, 1089, 1094, 1095], "format_f": 941, "format_nam": [258, 259, 260], "format_object": 256, "format_url": 908, "format_vers": [214, 881, 907, 941, 948], "formatidentificationwarn": [264, 268], "former": 649, "formula": [118, 755], "forum": 229, "forward": [1, 434, 446, 447, 609], "fould": 972, "found": [53, 139, 214, 216, 219, 220, 221, 222, 225, 227, 230, 264, 266, 268, 270, 430, 496, 549, 606, 647, 663, 715, 739, 752, 753, 755, 879, 907, 941, 972, 982, 983, 984, 985, 995, 997, 1013, 1028], "foundat": 221, "four": [65, 221, 230, 377, 499, 552, 683, 861], "fourth": 3, "fr": 1028, "frac": [107, 108, 109, 110, 114, 115, 117, 118, 119, 120, 124, 125, 126, 127, 128, 133, 134, 137, 140, 681, 682, 686, 691, 692, 693, 695, 696, 697, 698, 753, 872], "fraction": [108, 679, 879, 910, 973, 1095], "fraction_diff": [400, 470, 521, 575, 630], "fraction_sam": [400, 470, 521, 575, 630], "frame": [209, 215, 216, 434, 446, 447, 609, 688, 752, 987], "framework": [132, 680], "free": [231, 1055, 1097], "freedom": [688, 694, 700, 869, 876], "freq": [404, 419, 474, 486, 525, 538, 579, 594, 632, 639], "frequenc": [1, 84, 88, 107, 119, 406, 407, 419, 421, 423, 486, 488, 490, 538, 540, 542, 581, 582, 594, 596, 598, 639, 641, 643, 875, 877, 879, 949, 969], "frequent": [884, 949, 971], "friedman": 683, "friedmanchisquar": 683, "from": [0, 1, 2, 3, 13, 14, 15, 16, 17, 18, 19, 34, 44, 45, 46, 47, 48, 50, 51, 52, 53, 65, 66, 67, 68, 69, 70, 75, 77, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 112, 116, 121, 132, 139, 140, 143, 144, 161, 172, 174, 185, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 243, 244, 245, 264, 268, 284, 291, 292, 293, 302, 303, 315, 316, 319, 322, 331, 338, 339, 349, 356, 357, 358, 371, 372, 373, 375, 377, 378, 379, 382, 384, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 436, 446, 447, 448, 449, 450, 453, 455, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 501, 504, 506, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 557, 559, 562, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 611, 612, 613, 616, 618, 621, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 653, 660, 661, 664, 665, 667, 669, 670, 672, 673, 675, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 713, 716, 718, 719, 721, 723, 729, 736, 740, 743, 744, 746, 747, 749, 751, 752, 753, 755, 756, 757, 759, 760, 761, 849, 850, 861, 862, 864, 865, 867, 868, 870, 875, 877, 878, 879, 880, 894, 895, 896, 897, 898, 900, 901, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 946, 950, 951, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1034, 1054, 1056, 1092, 1095, 1097], "from_": [660, 713, 736], "from_dict": [96, 751, 755, 760, 861, 877, 878], "from_hdf5": 941, "from_iter": 677, "from_ncbi": [436, 437, 446, 447, 608, 609], "from_path_seq": [16, 48], "from_tabular": [3, 17], "from_taxdump": 988, "from_taxonomi": [987, 1021], "front": [320, 698], "frontier": 132, "frozenset": [971, 1015, 1016], "fsvd": [755, 870], "ft_current": 293, "ftp": [219, 231, 293], "full": [122, 123, 217, 218, 683, 884, 897, 919, 985, 1011, 1053], "full_genome_avail": [905, 930], "fulli": [3, 132, 222, 1090], "fun": 1097, "func": [909, 933, 971, 984, 1008, 1013, 1024, 1035, 1068, 1079], "function": [1, 98, 99, 100, 116, 117, 122, 123, 128, 131, 143, 144, 145, 146, 149, 220, 221, 228, 243, 244, 245, 258, 259, 260, 263, 293, 303, 315, 377, 400, 436, 470, 499, 521, 552, 575, 630, 649, 665, 678, 681, 682, 683, 686, 687, 689, 690, 693, 698, 716, 740, 752, 753, 754, 755, 756, 757, 760, 849, 865, 874, 877, 878, 879, 881, 897, 902, 905, 907, 909, 922, 930, 933, 935, 941, 942, 943, 944, 948, 967, 971, 974, 979, 984, 1008, 1013, 1021, 1023, 1024, 1029, 1030, 1032, 1033, 1034, 1035, 1053, 1055, 1067, 1068, 1078, 1079, 1089, 1090, 1091, 1092, 1095], "further": [232, 358, 878, 1095], "futher": 232, "futur": [116, 132, 143, 144, 220], "fuzzi": [223, 293, 294, 302, 303, 314, 315, 611], "g": [0, 1, 53, 70, 84, 85, 92, 100, 103, 118, 121, 128, 132, 146, 149, 215, 217, 219, 220, 221, 222, 224, 225, 226, 227, 229, 231, 232, 293, 322, 358, 371, 377, 384, 387, 392, 395, 396, 403, 404, 405, 406, 407, 417, 455, 458, 463, 465, 466, 473, 474, 475, 484, 499, 506, 509, 514, 516, 517, 524, 525, 526, 536, 552, 559, 562, 567, 570, 571, 578, 579, 580, 581, 582, 592, 611, 618, 621, 626, 628, 629, 631, 632, 637, 649, 653, 661, 667, 678, 683, 698, 701, 702, 706, 725, 729, 747, 751, 752, 754, 755, 861, 878, 879, 907, 924, 937, 941, 949, 970, 971, 976, 979, 983, 1010, 1011, 1012, 1014, 1015, 1021, 1024, 1025, 1026, 1028, 1055, 1090, 1092, 1095, 1097], "g1": 755, "g2": 755, "g_m": 686, "ga": [611, 1092], "gaa": 1092, "gaagcaatgc": 219, "gaagttgagt": 219, "gaatcaagcc": 219, "gabor": [53, 104], "gac": [418, 485, 537, 593, 638], "gacccgcuuu": 1092, "gacg": [418, 485, 537, 593, 638], "gacgtt": [409, 410, 477, 478, 528, 529, 584, 585], "gag": [430, 496, 549, 606, 647], "gagatagagt": 219, "gagcccgggc": [220, 227], "gagccgtggc": [220, 227], "gagcggaggc": 219, "gaggacttcg": 219, "gaggtattgg": 219, "gagrctc": [430, 496, 549, 606, 647], "gain": [358, 701, 870], "gair": 220, "gairaagccttggc": 227, "gamma": 107, "gap": [0, 3, 13, 15, 17, 19, 34, 44, 47, 52, 53, 83, 84, 88, 92, 98, 99, 100, 101, 102, 103, 161, 174, 215, 216, 217, 218, 219, 220, 221, 222, 223, 227, 377, 394, 395, 398, 401, 402, 406, 407, 410, 417, 428, 429, 430, 432, 433, 434, 436, 446, 447, 448, 465, 468, 471, 472, 478, 484, 495, 496, 499, 516, 519, 522, 523, 529, 536, 548, 549, 552, 569, 570, 573, 576, 577, 581, 582, 585, 592, 603, 604, 605, 606, 608, 609, 611, 628, 637, 647, 678, 1021, 1092, 1097], "gap_char": [398, 448, 468, 519, 573], "gap_charact": [430, 496, 549, 606, 647], "gap_extend_penalti": [53, 98, 99, 100, 101, 102, 103], "gap_mod": 84, "gap_open_penalti": [53, 98, 99, 100, 101, 102, 103], "gapopen": [215, 216], "garbag": 272, "gardnerella": 879, "garrison": [53, 104], "gascuel": 1029, "gaston": 116, "gataccttca": 219, "gatcacttga": 219, "gatcttcccc": 219, "gatgcaacac": 219, "gather": [675, 723, 749, 1095], "gattattcta": 219, "gattttcgag": 219, "gauu": [422, 424, 489, 491, 541, 543, 597, 599, 642, 644], "gb": [216, 222], "gb_str": 222, "gbk": 222, "gc": [83, 219, 220, 221, 222, 223, 231, 377, 394, 395, 398, 401, 407, 428, 432, 437, 447, 465, 468, 471, 516, 519, 522, 552, 569, 570, 573, 576, 582, 603, 604, 628, 1092], "gc_content": [407, 582], "gc_frequenc": [406, 581], "gcaattttca": 219, "gcacatccct": 222, "gcacaucccu": 222, "gcagaagctg": 219, "gcagatgtg": 679, "gcatgcatgc": 223, "gcatggtcat": 219, "gcaugcaucugcauacguacguacgcaugca": 217, "gcaugcaucugcauacguacguacgcaugcagucgauacauacguacgucgguacgu": 217, "gcaugcaucugcauacguacguacgcaugcauca": 217, "gccaaaccca": 219, "gcccagtagcttcccaatatgagagcatcaattgtagatcgggcc": 0, "gccccccuuu": 1092, "gcgtatagtt": 219, "gcgtgcctaaggtatgcaag": 0, "gctaactaggctcccttctacccctctcagaga": 0, "gctgccgaga": 219, "gctgttattt": 219, "gcttcatctt": 219, "gen": [223, 1097], "gen1": 223, "gen2": 223, "gena": 293, "genbank": [219, 223, 231, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648], "gender": [701, 877, 878], "gene": [1, 223, 293, 303, 315, 318, 377, 611, 688, 694, 700, 881, 948, 1091], "gene_nam": 293, "genea": 894, "geneb": 894, "gener": [1, 14, 18, 19, 46, 50, 51, 52, 82, 85, 98, 104, 105, 106, 124, 132, 146, 218, 221, 222, 223, 225, 230, 231, 243, 245, 258, 260, 264, 268, 271, 403, 417, 418, 473, 484, 485, 524, 536, 537, 578, 592, 593, 611, 631, 637, 638, 649, 688, 701, 751, 752, 753, 757, 849, 851, 861, 864, 875, 878, 879, 880, 907, 917, 918, 926, 930, 941, 1090, 1092, 1096], "generated_bi": [881, 908, 941, 942, 948], "generatortyp": [917, 919, 930], "genet": [220, 225, 227, 231, 433, 434, 436, 437, 443, 444, 445, 446, 447, 608, 609, 758, 1028, 1092], "genetic_cod": [608, 609], "geneticcod": [434, 608, 609, 1092], "genom": [1, 303], "genpept": 222, "gentil": 698, "genu": [1, 231], "geologi": 680, "geometr": [684, 686, 688, 698, 755], "geometri": [680, 682, 686, 687, 690], "geq": 872, "gerald": 698, "get": [105, 214, 218, 229, 272, 273, 302, 303, 436, 445, 701, 753, 849, 865, 905, 912, 913, 914, 915, 921, 923, 925, 927, 928, 946, 976, 1015], "get_alpha_diversity_metr": [1, 141, 148], "get_beta_diversity_metr": [1, 145, 147, 149], "get_column": 370, "get_id": [284, 285, 289, 331, 332, 336, 349, 350, 354, 368, 369], "get_max_dist": 980, "get_nam": 661, "get_trajectori": 760, "get_value_by_id": 900, "getaaafhwqaaf": 228, "getvalu": [217, 220, 221, 222, 223, 227, 230, 701], "gff": 223, "gff3": [222, 319, 321, 426, 435, 493, 498, 645, 648], "gff_str": 223, "gfgmvinn": 230, "gfp": 1092, "gfv": 230, "gg": [396, 402, 466, 472, 517, 523, 571, 577, 629], "gg_otu_1": [907, 908], "gg_otu_2": 908, "gg_otu_3": 908, "gg_otu_4": 908, "gg_otu_5": 908, "gga": 1092, "ggaa": [395, 465, 516, 570, 628], "ggacugaa": 1092, "ggag": [402, 472, 523, 577], "ggattgttta": 219, "ggca": 0, "ggctaacggt": 219, "ggg": 1092, "ggggagg": [402, 472, 523, 577], "gggtttttac": 219, "ggt": [230, 427, 494, 546, 602, 646], "ggta": 0, "ggtaccaacg": [427, 494, 546, 602, 646], "ggtacgcaag": 0, "ggtc": [398, 468, 519, 573], "ggtccattc": [398, 468, 519, 573], "ggtggtttct": 219, "ggtgtttagc": 219, "ggtt": 901, "ggu": [379, 450, 501, 554, 613], "gguc": [387, 389, 392, 400, 421, 422, 423, 424, 458, 460, 463, 470, 488, 489, 490, 491, 509, 511, 514, 521, 540, 541, 542, 543, 562, 564, 567, 575, 596, 597, 598, 599, 621, 623, 626, 630, 641, 642, 643, 644], "ggucg": [384, 396, 455, 466, 506, 517, 559, 571, 618, 629], "ggucguaaagga": [393, 464, 515, 568, 627], "ggucgugaag": 611, "ggucgugaagga": [379, 384, 450, 455, 501, 506, 554, 559, 611, 613, 618], "gi": [215, 216, 222], "gigasci": [861, 881, 948], "gilk": 759, "gini": [118, 136], "gish": [215, 216], "github": 861, "give": [1, 225, 864, 865, 872, 881, 948, 974], "given": [1, 13, 14, 15, 45, 46, 47, 93, 97, 107, 118, 121, 126, 128, 137, 141, 145, 146, 149, 172, 173, 185, 186, 210, 220, 221, 225, 226, 229, 243, 245, 261, 262, 264, 265, 268, 269, 316, 319, 321, 373, 376, 426, 430, 435, 493, 496, 498, 545, 549, 551, 601, 606, 610, 645, 647, 648, 665, 670, 676, 698, 716, 719, 724, 740, 744, 750, 752, 753, 756, 862, 863, 865, 869, 874, 876, 878, 912, 914, 922, 930, 932, 946, 947, 949, 984, 1006, 1027, 1054, 1055, 1067, 1097], "gkp1137": 221, "glahn": [680, 694, 700], "gln": 499, "global": [0, 98, 99, 100], "global_pairwise_align": [99, 100, 101, 102, 103], "global_pairwise_align_nucelotid": [98, 100, 101, 102, 103], "global_pairwise_align_nucleotid": 0, "global_pairwise_align_protein": [98, 99, 101, 102, 103], "glossari": 84, "glu": 499, "glucosidas": 219, "glutam": 499, "glutamin": 499, "glx": 499, "gly": 499, "glycin": [84, 499], "glycosyl": [417, 484, 523, 536, 592, 637, 1092], "go": [879, 937, 1095, 1097], "goa": 219, "goal": [229, 1090], "goldman": 132, "gonzalez": 861, "good": [115, 119, 870], "goodrich": 972, "googl": 229, "gorilla": [220, 227], "gorlick": 230, "goto": 221, "gouet": [122, 123], "gov": [84, 99, 100, 102, 103, 215, 216, 220, 222, 228, 231, 436, 444, 445], "gracilibacteria": 436, "gradient": [118, 850, 864, 865, 870, 872], "gradientanova": [761, 783, 827, 838], "gradientanovaresult": [771, 793, 804, 837, 848], "graft": 1023, "gram": [689, 690], "grammar": [448, 611], "grammaredsequ": [65, 75, 80, 82, 85, 86, 98, 101, 217, 220, 227, 230, 377, 398, 401, 429, 499, 519, 522, 548, 552, 573, 576, 605, 1092], "grand": 949, "grant": [220, 227], "greater": [220, 303, 378, 449, 500, 553, 612, 688, 751, 753, 754, 755, 756, 759, 878, 879, 880, 913], "grei": 861, "group": [1, 139, 229, 431, 497, 550, 607, 660, 683, 688, 698, 713, 736, 751, 754, 755, 760, 761, 771, 772, 793, 804, 816, 826, 827, 837, 848, 850, 877, 878, 879, 892, 907, 912, 930, 941, 1055, 1091, 1095], "group1": 751, "group2": 751, "group3": 751, "group_md": 892, "group_observation_md": 912, "groupbi": 878, "groupresult": 772, "growth": [688, 878], "gsi": 698, "gt": [17, 91], "gt10": 219, "gtaacctgag": 219, "gtaag": 3, "gtacct": [217, 227], "gtagaggacc": 219, "gtagct": [217, 227], "gtatct": 227, "gtcgaa": [217, 227], "gtt": [418, 485, 537, 593, 638], "gttaatgcca": 219, "gttactcaac": 219, "gttcggcctc": 219, "gttgaccaat": 219, "gttgggatta": 219, "gtttatccaa": 219, "guaaccugag": 219, "guanin": [377, 552], "guarante": [92, 123, 229, 377, 401, 471, 499, 522, 552, 576, 702, 757, 979], "guc": [384, 455, 506, 559, 618], "gucgauacauacguacgucgguacgu": 217, "gucgauacauacguacgucguacguacgu": 217, "guess": [93, 128, 172, 185, 220, 264, 268, 319, 373, 426, 493, 545, 601, 645, 670, 719, 744, 862, 932, 1006, 1031], "gunnerida": 219, "gut": [1, 229, 861], "gytai": 230, "gzip": [272, 941], "h": [53, 107, 108, 112, 120, 132, 133, 134, 135, 136, 137, 220, 227, 230, 273, 377, 499, 552, 970, 971, 976, 979, 1010, 1011, 1012, 1015, 1016, 1025, 1026, 1028, 1095], "h5grp": [907, 941], "h5py": [907, 941], "h_": 683, "h_0": 118, "h_b": 109, "h_i": 118, "h_n": 118, "ha": [1, 3, 53, 65, 83, 89, 90, 98, 99, 100, 105, 149, 161, 174, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 265, 269, 272, 289, 336, 354, 358, 371, 377, 394, 395, 398, 401, 411, 412, 413, 414, 425, 428, 432, 433, 434, 436, 446, 447, 448, 465, 468, 471, 479, 480, 481, 482, 492, 499, 516, 519, 522, 530, 531, 532, 533, 544, 552, 569, 570, 573, 576, 586, 587, 588, 589, 600, 603, 604, 608, 609, 611, 628, 633, 634, 635, 683, 685, 701, 849, 864, 866, 877, 878, 879, 897, 905, 922, 970, 990, 993, 994, 1008, 1012, 1028, 1055, 1092, 1095], "habitat": 865, "had": [116, 143, 144, 751, 755, 879], "half": [121, 695], "halobacteria": [988, 1021], "ham": [400, 470, 521, 575, 630, 701, 1092], "hamadi": [116, 143, 144], "hand": [1, 870], "handbook": 220, "handi": [1055, 1097], "handl": [84, 92, 220, 221, 228, 230, 231, 232, 233, 243, 245, 272, 358, 371, 446, 447, 683, 753, 755, 756, 875, 884, 897, 922, 931, 1022, 1029, 1054, 1097], "handler": [233, 264, 266, 268, 270, 272], "happen": [225, 417, 484, 536, 592, 637, 1028, 1097], "hard": [116, 141, 143, 144, 145], "hardcod": 115, "harm": 695, "has_children": [993, 994], "has_definit": [397, 399, 409, 413, 425, 467, 469, 477, 481, 492, 518, 520, 528, 532, 544, 572, 574, 584, 588, 600], "has_degener": [399, 408, 413, 469, 476, 481, 520, 527, 532, 574, 583, 588], "has_gap": [405, 475, 526, 580], "has_missing_valu": [284, 286, 331, 333, 349, 351], "has_nuc_pattern": 1097, "has_stop": 547, "hash": [8, 26, 39, 59, 155, 166, 179, 192, 203, 238, 251, 766, 777, 788, 799, 810, 821, 832, 843, 856, 957, 1042, 1061, 1073, 1084], "hashabl": [65, 67, 849, 1078], "hashlib": 1054, "hasn": [611, 880, 944], "have": [0, 1, 19, 52, 53, 83, 86, 88, 91, 92, 104, 106, 116, 121, 133, 137, 143, 144, 209, 210, 211, 212, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 263, 272, 293, 303, 304, 305, 358, 367, 372, 382, 395, 401, 417, 446, 453, 465, 471, 484, 504, 516, 522, 536, 557, 570, 576, 592, 616, 628, 637, 651, 667, 683, 699, 701, 704, 727, 753, 759, 760, 782, 794, 815, 826, 849, 861, 864, 865, 866, 869, 870, 872, 873, 875, 877, 878, 879, 880, 905, 907, 922, 923, 924, 937, 941, 946, 949, 968, 969, 970, 979, 981, 982, 1005, 1011, 1018, 1020, 1021, 1030, 1032, 1095, 1097], "hdf5": [213, 214, 218, 881, 907, 941, 948], "hdfgroup": 213, "hdist": 759, "he": 0, "header": [215, 216, 217, 221, 222, 224, 226, 229, 276, 282, 323, 329, 341, 347, 358, 359, 365, 370, 902, 906], "header_kei": [902, 943], "header_valu": [902, 943], "heagawghe": 0, "health": [683, 877, 878], "healthi": [877, 878, 879], "heatmap": [669, 718, 743], "heip": [120, 126], "heip_": 133, "held": 937, "hello": [393, 464, 515, 568, 627], "help": [229, 231], "helper": [6, 24, 37, 57, 73, 153, 164, 177, 190, 201, 236, 249, 278, 296, 308, 325, 343, 361, 385, 439, 456, 507, 560, 619, 654, 707, 730, 764, 775, 786, 797, 808, 819, 830, 841, 854, 885, 955, 1032, 1033, 1040, 1059, 1071, 1082, 1095], "henc": 753, "henikoff": [100, 103, 661], "here": [0, 1, 84, 107, 111, 116, 121, 126, 128, 134, 135, 137, 141, 142, 143, 144, 145, 146, 147, 148, 214, 218, 219, 222, 227, 232, 243, 245, 273, 417, 484, 536, 592, 637, 683, 688, 759, 870, 872, 907, 941, 1022, 1029, 1095], "hernand": 698, "heterogen": 871, "heuer": 221, "heurist": [53, 755, 870], "hexdigest": 1054, "hgc": 231, "hi": 499, "hidden": 231, "hierarch": [231, 698], "hierarchi": [897, 986, 987, 1095], "high": [116, 143, 144, 220, 221, 688, 850, 861, 864, 870, 988, 1093], "higher": [84, 649, 683, 688, 1067], "highest": [53, 225], "highli": [3, 84], "highlight": 221, "hill": 132, "histidin": 499, "histor": [1, 130, 436, 969], "histori": [116, 879], "hit": 216, "hoc": 875, "hochberg": [683, 688], "hoffmann": 132, "hold": [725, 771, 793, 804, 837, 848, 849, 870, 877, 938, 977, 1078], "hollow": [145, 213, 702, 740, 742, 757], "holm": [683, 688], "hommola": 759, "homogen": [755, 864, 872], "homolog": 649, "horizont": 92, "host": [231, 759], "host_dist": 759, "hot": 850, "hotton": 231, "hous": 877, "how": [80, 91, 92, 128, 220, 222, 229, 272, 322, 358, 395, 417, 429, 446, 447, 465, 484, 495, 516, 536, 548, 570, 592, 605, 628, 637, 694, 700, 753, 870, 875, 877, 878, 879, 881, 903, 922, 948, 1090, 1097], "howev": [1, 116, 117, 132, 141, 143, 144, 145, 220, 224, 225, 229, 231, 377, 499, 552, 611, 680, 688, 755, 759, 850, 870, 884, 944, 980, 1035], "hsp": [215, 216], "hstack": [877, 878], "htm": 752, "html": [84, 121, 214, 215, 217, 220, 222, 225, 227, 230, 293, 671, 702, 720, 725, 737, 745, 751, 752, 753, 754, 755, 861, 881, 907, 941, 948, 1028], "http": [53, 84, 98, 99, 100, 101, 102, 103, 104, 107, 111, 121, 146, 213, 214, 215, 216, 217, 219, 220, 221, 222, 225, 227, 228, 229, 230, 231, 290, 337, 355, 358, 371, 374, 436, 444, 445, 671, 694, 698, 700, 702, 720, 725, 737, 745, 751, 752, 753, 754, 755, 861, 881, 907, 908, 941, 948, 1028, 1029, 1054], "huerta": 969, "hugh": 219, "human": [213, 220, 221, 224, 225, 226, 1034], "hundr": [1, 146], "hwang": 107, "hydrogenosom": 231, "hypothesi": [680, 683, 688, 753, 756, 759, 875], "hypothet": 293, "h\u00e9bert": 698, "i": [0, 1, 3, 15, 19, 20, 47, 50, 52, 53, 65, 66, 67, 68, 69, 70, 72, 77, 79, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 149, 150, 172, 173, 185, 186, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 243, 244, 245, 257, 258, 260, 264, 265, 266, 267, 268, 269, 270, 272, 276, 282, 290, 293, 294, 300, 302, 303, 306, 312, 314, 315, 316, 317, 319, 321, 322, 323, 329, 337, 341, 347, 355, 358, 359, 365, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 443, 446, 447, 448, 449, 450, 451, 452, 453, 455, 462, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 513, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 618, 625, 628, 629, 630, 632, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 658, 660, 663, 668, 669, 670, 671, 674, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 711, 713, 715, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 734, 736, 737, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 759, 782, 794, 815, 826, 827, 838, 849, 850, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 884, 891, 894, 897, 898, 901, 902, 904, 905, 906, 907, 913, 916, 917, 918, 919, 922, 923, 924, 930, 931, 932, 933, 934, 937, 938, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 954, 964, 967, 969, 971, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 987, 989, 991, 993, 994, 995, 997, 999, 1000, 1002, 1005, 1006, 1010, 1013, 1015, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1039, 1052, 1053, 1054, 1055, 1056, 1066, 1067, 1078, 1089, 1090, 1092, 1095, 1096, 1097], "id": [0, 1, 65, 70, 89, 94, 95, 116, 132, 141, 143, 144, 145, 146, 149, 150, 209, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 276, 282, 285, 286, 288, 291, 292, 323, 329, 332, 333, 335, 338, 339, 341, 347, 350, 351, 353, 356, 357, 358, 359, 365, 367, 368, 370, 372, 375, 382, 391, 393, 412, 433, 434, 436, 445, 446, 447, 453, 462, 464, 480, 504, 513, 515, 531, 557, 566, 568, 587, 608, 609, 611, 616, 625, 627, 634, 650, 651, 653, 659, 660, 663, 665, 668, 672, 675, 694, 701, 702, 703, 704, 706, 712, 713, 715, 716, 717, 721, 723, 725, 726, 727, 729, 735, 736, 739, 740, 741, 742, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 794, 838, 851, 860, 861, 877, 878, 879, 882, 891, 893, 894, 895, 896, 897, 898, 900, 901, 902, 904, 905, 906, 907, 908, 911, 913, 915, 917, 922, 923, 924, 928, 930, 931, 935, 936, 937, 940, 941, 943, 944, 945, 946, 950, 951, 968, 975, 978, 985, 987, 988, 991, 1018, 1020, 1029, 1092], "id1": 229, "id2": 229, "id3": 229, "id_": [897, 905, 930, 944], "id_head": [291, 292, 338, 339, 356, 357, 370, 372, 375], "id_i": 919, "id_index": 1020, "id_j": 919, "id_list": 986, "id_map": 946, "id_pair": 149, "id_whitespace_replac": [220, 221], "idea": 878, "ideal": 232, "ident": [1, 215, 216, 225, 229, 653, 706, 725, 729, 759, 974, 1007, 1095], "identif": 101, "identifi": [95, 141, 145, 146, 149, 213, 217, 220, 221, 222, 223, 224, 227, 230, 231, 318, 358, 402, 523, 577, 701, 756, 875, 879, 915, 923, 946, 1090], "idptr": 218, "ids_to_keep": [285, 332, 350, 368, 905], "idx": [430, 496, 549, 606, 647], "ie": [407, 582], "igkeeiqqrl": 218, "ignor": [53, 84, 107, 116, 143, 144, 216, 217, 219, 220, 221, 224, 225, 229, 232, 367, 402, 403, 446, 447, 472, 473, 523, 524, 577, 578, 631, 663, 715, 739, 751, 752, 753, 754, 755, 870, 877, 878, 930, 941, 979, 998, 1033, 1055, 1056, 1092, 1095, 1097], "ignore_axis_label": 1033, "ignore_direction": 1033, "ignore_metadata": 91, "ignore_method_nam": 1033, "ignore_non": 930, "ii": 875, "iii": 122, "ij": 753, "il": 499, "illumina": [221, 228], "illumina1": [221, 228], "illumina_1": 228, "illustr": [611, 751, 755], "iloc": 72, "ilr": [680, 690, 699], "ilr_inv": 699, "im": [223, 303, 315], "im1": 315, "im2": 315, "imagin": 225, "immedi": [220, 227, 991], "immut": [611, 1092], "implement": [0, 1, 98, 101, 106, 107, 111, 116, 121, 126, 137, 142, 143, 144, 147, 148, 221, 225, 229, 232, 243, 244, 245, 246, 272, 358, 698, 850, 864, 865, 870, 871, 942, 943, 972, 1028, 1030], "impli": [84, 272, 759], "implicit": 922, "implicitli": [214, 218], "import": [0, 1, 3, 13, 14, 15, 17, 18, 19, 45, 46, 47, 50, 51, 52, 65, 66, 67, 68, 69, 70, 75, 77, 80, 82, 83, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 112, 116, 132, 143, 144, 161, 174, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 243, 244, 245, 293, 303, 315, 377, 378, 379, 382, 384, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 430, 431, 432, 433, 434, 436, 446, 447, 448, 449, 450, 453, 455, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 496, 497, 499, 500, 501, 504, 506, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 552, 553, 554, 557, 559, 562, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 611, 612, 613, 616, 618, 621, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 649, 660, 661, 664, 667, 669, 672, 675, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 713, 718, 721, 723, 736, 743, 746, 747, 749, 751, 752, 753, 755, 756, 759, 760, 849, 850, 861, 875, 877, 878, 879, 880, 894, 895, 896, 897, 898, 900, 901, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 929, 930, 931, 933, 935, 936, 937, 938, 939, 940, 941, 943, 944, 950, 951, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1034, 1054, 1090, 1092, 1095, 1097], "import_modul": 232, "impos": [116, 143, 144], "improv": [91, 225, 227, 377, 499, 552, 740], "impur": 136, "imput": [680, 692], "incid": 759, "includ": [1, 84, 91, 93, 97, 105, 106, 116, 132, 143, 144, 148, 149, 172, 173, 185, 186, 217, 218, 219, 220, 221, 224, 225, 226, 227, 229, 230, 275, 290, 319, 321, 322, 337, 340, 355, 358, 359, 365, 370, 372, 373, 374, 376, 384, 393, 398, 406, 407, 417, 426, 430, 432, 433, 434, 435, 446, 447, 455, 464, 468, 484, 493, 496, 498, 506, 515, 519, 536, 545, 549, 551, 552, 559, 568, 573, 581, 582, 592, 601, 604, 606, 608, 609, 610, 618, 627, 637, 645, 647, 648, 649, 659, 661, 670, 676, 683, 701, 712, 719, 724, 735, 740, 744, 747, 750, 751, 752, 754, 755, 756, 760, 860, 861, 862, 863, 865, 870, 871, 875, 879, 897, 902, 932, 939, 940, 945, 947, 964, 965, 967, 996, 998, 999, 1002, 1003, 1004, 1006, 1019, 1021, 1022, 1027, 1090, 1091, 1092, 1093, 1095, 1096], "include_collapsed_metadata": 897, "include_self": [971, 996, 999, 1002, 1003, 1004, 1019, 1022, 1095], "inclus": [272, 293, 314, 396, 415, 466, 483, 517, 535, 571, 590, 629, 636, 752], "incom": 969, "incomplet": [377, 448, 499, 552, 611], "inconsist": 664, "incorpor": [1, 132, 679], "incorrect": 1, "incorrectli": 906, "increas": [688, 701, 702, 756, 757, 759, 849, 875, 878, 897, 944], "incub": 878, "ind": [875, 879], "inde": 759, "independ": [434, 447, 609, 759, 771, 772, 793, 804, 837, 848, 922, 1022], "index": [0, 1, 14, 15, 18, 46, 47, 51, 65, 67, 70, 72, 79, 82, 85, 86, 90, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 108, 109, 112, 118, 120, 121, 124, 125, 127, 133, 135, 136, 137, 140, 141, 150, 209, 217, 218, 220, 227, 228, 230, 287, 291, 292, 334, 338, 339, 352, 356, 357, 358, 375, 384, 414, 455, 482, 506, 533, 559, 589, 618, 635, 650, 653, 672, 681, 682, 683, 688, 701, 703, 706, 721, 726, 729, 746, 747, 751, 752, 753, 754, 755, 760, 794, 838, 851, 861, 877, 884, 895, 897, 907, 923, 924, 927, 940, 941, 991, 1001, 1002, 1020, 1028, 1032], "indexerror": [884, 913], "indic": [1, 3, 15, 19, 33, 47, 52, 66, 67, 70, 79, 89, 90, 107, 110, 111, 126, 132, 149, 213, 220, 221, 229, 232, 276, 282, 293, 294, 300, 303, 306, 312, 323, 329, 341, 347, 358, 359, 365, 379, 382, 384, 391, 397, 399, 402, 403, 405, 408, 409, 410, 411, 412, 413, 414, 417, 422, 424, 425, 427, 430, 436, 437, 443, 450, 453, 455, 462, 467, 469, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 489, 491, 492, 494, 496, 501, 504, 506, 513, 518, 520, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 541, 543, 544, 546, 547, 549, 554, 557, 559, 566, 572, 574, 577, 578, 580, 583, 584, 585, 586, 587, 588, 589, 592, 597, 599, 600, 602, 606, 613, 616, 618, 625, 631, 633, 634, 635, 637, 642, 644, 646, 647, 649, 683, 688, 699, 751, 753, 754, 755, 759, 849, 860, 861, 877, 907, 941, 984, 986, 1024, 1067, 1078, 1095, 1097], "indicatd": 1097, "indirectli": 1011, "indiscern": 725, "individu": [1, 3, 107, 108, 109, 112, 115, 116, 117, 119, 124, 125, 126, 127, 128, 133, 137, 140, 143, 144, 213, 218, 220, 358, 649, 683, 877, 884, 1097], "indptr": [907, 941], "ineffici": [884, 1030], "inekmtlva": 218, "ineleg": 1002, "inequ": [79, 282, 300, 312, 329, 347, 365, 391, 443, 462, 513, 566, 625, 725, 870], "inf": [19, 52, 117, 229, 1013], "infeas": 220, "infect": 879, "infer": [222, 229, 264, 268, 290, 337, 355, 371, 374, 1053, 1090], "infern": 230, "infin": 229, "infinit": [1013, 1025, 1026], "infinitum": 225, "info": [53, 104, 303, 760, 816], "inform": [53, 84, 93, 97, 109, 124, 132, 172, 173, 185, 186, 215, 216, 217, 219, 220, 221, 222, 228, 229, 231, 293, 319, 321, 373, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 772, 816, 850, 862, 863, 872, 878, 879, 881, 897, 932, 947, 948, 1006, 1027, 1055, 1091, 1092, 1097], "inher": [680, 759], "inherit": [231, 448, 611, 898], "inidic": [32, 53], "initi": [128, 220, 878, 996, 999, 1002, 1003, 1004, 1019, 1022, 1029, 1066], "initialize_st": 1097, "inlin": 229, "inner": [92, 225, 372, 395, 465, 516, 570, 628, 664], "inord": 1022, "inosin": 377, "inplac": [870, 905, 928, 929, 931, 934, 944, 946, 1013], "input": [98, 99, 100, 101, 102, 103, 104, 116, 132, 141, 143, 144, 145, 231, 243, 245, 272, 273, 303, 315, 400, 427, 446, 447, 470, 494, 521, 546, 575, 602, 630, 646, 677, 683, 688, 699, 702, 752, 753, 849, 861, 864, 865, 867, 871, 880, 906, 1023, 1028, 1029, 1089, 1092], "input_is_dens": 908, "ins": [3, 20, 34, 53, 65, 150, 161, 174, 187, 198, 233, 246, 275, 293, 303, 322, 340, 358, 377, 436, 448, 499, 552, 611, 649, 702, 725, 761, 772, 783, 794, 805, 816, 827, 838, 851, 881, 949, 1035, 1055, 1067, 1078], "insdc": [219, 222, 293, 322, 358, 371], "insensit": [229, 661, 683, 688], "insert": [225, 314, 970], "insert_length": 970, "insid": [222, 225], "insight": [143, 144], "insignific": 1, "instal": 1030, "instanc": [93, 97, 172, 173, 185, 186, 218, 232, 245, 258, 260, 261, 262, 264, 268, 303, 318, 319, 321, 373, 376, 395, 426, 435, 465, 493, 498, 516, 545, 551, 570, 601, 610, 628, 645, 648, 651, 661, 670, 676, 678, 679, 688, 702, 704, 719, 724, 725, 727, 742, 744, 750, 753, 755, 756, 757, 771, 793, 804, 837, 848, 861, 862, 863, 879, 880, 894, 898, 924, 932, 947, 949, 965, 1006, 1027, 1028, 1035, 1036, 1039, 1046, 1095, 1097], "instanti": [53, 219, 232, 448, 1097], "instead": [1, 88, 135, 219, 220, 222, 229, 232, 233, 243, 244, 245, 287, 316, 322, 334, 352, 404, 417, 419, 421, 423, 430, 474, 484, 486, 488, 490, 496, 525, 536, 538, 540, 542, 549, 579, 592, 594, 596, 598, 606, 632, 637, 639, 641, 643, 647, 702, 751, 753, 755, 869, 878, 879, 939, 940, 974, 1029, 1030, 1090], "institut": 221, "instruct": 1094, "instrument": 220, "int": [3, 13, 14, 15, 18, 19, 34, 45, 46, 47, 51, 52, 53, 77, 88, 95, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 149, 215, 222, 223, 228, 244, 272, 293, 303, 314, 318, 358, 384, 389, 396, 402, 403, 407, 415, 417, 418, 419, 421, 423, 427, 445, 455, 460, 466, 472, 473, 483, 484, 485, 486, 488, 490, 494, 506, 511, 517, 523, 524, 535, 536, 537, 538, 540, 542, 546, 559, 564, 571, 577, 578, 582, 590, 592, 593, 594, 596, 598, 602, 608, 609, 618, 623, 629, 631, 636, 637, 638, 639, 641, 643, 646, 667, 668, 679, 681, 682, 688, 694, 700, 717, 741, 751, 753, 754, 755, 756, 757, 759, 794, 838, 849, 861, 865, 869, 870, 872, 873, 876, 878, 879, 880, 897, 907, 913, 915, 937, 941, 949, 970, 974, 976, 985, 991, 1000, 1001, 1013, 1028, 1033, 1034, 1054, 1067], "int32": [907, 941], "int64": [65, 83, 92, 394, 398, 428, 468, 519, 569, 573, 603, 611, 907, 941, 1092], "integ": [1, 53, 141, 145, 213, 215, 218, 220, 221, 224, 225, 226, 227, 228, 358, 384, 455, 506, 559, 618, 683, 688, 701, 702, 751, 754, 755, 756, 757, 838, 880], "intend": [1, 122, 123, 229, 377, 448, 499, 849, 861, 1032, 1033], "intens": 878, "interablemetadata": 315, "interact": [759, 1094], "interest": [1, 229, 611, 683, 701, 759, 864, 872, 878, 995, 997, 1097], "interfac": [89, 90, 142, 229, 412, 414, 480, 482, 531, 533, 587, 589, 634, 635, 649, 751, 752, 753, 754, 1028, 1090], "interleav": [227, 230], "intermedi": 970, "intern": [95, 214, 222, 225, 699, 967, 969, 971, 977, 979, 982, 991, 1000, 1005, 1011, 1021, 1023, 1024, 1090, 1095], "internet": [220, 231], "interpret": [1, 84, 112, 116, 141, 143, 144, 145, 213, 225, 229, 322, 358, 680, 864, 865, 872, 908], "interpro": 219, "interquantil": 121, "interrog": 1055, "intersect": [395, 465, 516, 570, 628, 922, 950, 951, 975, 978], "interv": [106, 111, 115, 122, 219, 222, 223, 303, 304, 305, 306, 312, 314, 315, 316, 317, 318, 320, 377, 382, 394, 411, 432, 453, 479, 499, 504, 530, 552, 557, 569, 586, 611, 616, 633, 688, 876, 1089], "interval_metadata": [222, 223, 293, 303, 315, 318, 377, 382, 384, 411, 448, 453, 455, 479, 499, 504, 506, 530, 552, 557, 559, 586, 611, 616, 618, 633], "intervalmetadata": [223, 293, 302, 377, 499, 552, 611], "intracellular": 230, "introduc": [107, 118, 217, 220, 680], "introduct": 1089, "intron": [420, 487, 539, 552, 595, 640], "intvl": 303, "invalid": [1, 88, 92, 116, 132, 141, 143, 144, 145, 220, 371, 377, 499, 552, 752, 753, 861, 881, 948, 966, 971, 981, 992, 1001, 1005], "invalidate_cach": [971, 977], "invent": 221, "invers": [84, 682, 687, 690, 696], "inverse_shannon_uncertainti": 84, "invert": [417, 484, 536, 592, 637, 905], "investig": 1, "involv": [132, 681], "inward": 121, "io": [1, 93, 97, 116, 143, 144, 172, 173, 185, 186, 319, 321, 373, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 701, 719, 724, 744, 750, 861, 862, 863, 906, 909, 932, 947, 987, 1006, 1027, 1028, 1054, 1089, 1095], "io_registri": 232, "ionom": 698, "ioregistri": [232, 243, 245], "ipr001360": 219, "ipr013781": 219, "ipr017853": 219, "ipr033132": 219, "ipyparallel": 146, "ipython": 851, "irrelev": [98, 99, 100], "irsairagsnvkgfyawsfldcnewfagftvrfglnfvd": 219, "is_circular": 223, "is_reverse_compl": [428, 603], "is_root": [990, 994, 1095], "is_tip": [971, 990, 993, 1095], "is_zero_bas": 33, "ism": [116, 143, 144], "isn": [65, 82, 85, 92, 118, 229, 230, 243, 245, 273, 293, 689, 690, 880, 924], "isnapshgnakpsystnpmtnisfekhgiplgpraasiwiyvypymfiqedf": 219, "iso": [907, 941], "isoleucin": 499, "isometr": [680, 681, 682, 689, 690], "isometri": [686, 687, 689, 690], "isomorph": [225, 686, 687, 689, 690], "issu": [114, 219, 220, 221, 229, 244, 1029, 1090], "isubsampl": 880, "item": [98, 99, 100, 101, 102, 103, 104, 230, 404, 427, 474, 494, 525, 546, 579, 602, 611, 632, 646, 660, 675, 713, 723, 736, 749, 849, 880, 901, 937, 971, 1013, 1020, 1021, 1055, 1056, 1066, 1097], "iter": [65, 75, 80, 85, 91, 98, 99, 100, 101, 102, 103, 104, 105, 141, 145, 146, 149, 209, 210, 211, 212, 218, 228, 285, 293, 314, 315, 316, 318, 332, 350, 368, 384, 387, 392, 395, 403, 417, 427, 430, 455, 458, 463, 465, 473, 484, 494, 496, 506, 509, 514, 516, 524, 536, 546, 549, 559, 562, 567, 570, 578, 592, 602, 606, 618, 621, 626, 628, 631, 637, 646, 647, 649, 660, 663, 665, 667, 675, 683, 713, 715, 716, 723, 736, 739, 740, 749, 752, 755, 756, 849, 861, 878, 879, 887, 897, 898, 905, 906, 907, 918, 919, 922, 930, 936, 944, 950, 951, 958, 975, 978, 979, 988, 996, 999, 1002, 1003, 1004, 1012, 1013, 1019, 1022, 1052, 1054, 1056, 1078, 1095, 1097], "iter_": [919, 1056], "iter_km": [404, 474, 525, 579, 632], "its": [1, 15, 47, 65, 82, 83, 85, 86, 89, 90, 91, 92, 98, 99, 100, 130, 219, 220, 221, 222, 225, 226, 230, 232, 245, 272, 293, 303, 358, 372, 404, 411, 412, 414, 419, 474, 479, 480, 482, 486, 525, 530, 531, 533, 538, 579, 586, 587, 589, 594, 611, 632, 633, 634, 635, 639, 653, 661, 684, 706, 729, 752, 860, 864, 866, 869, 874, 905, 949, 971, 1001, 1002, 1011, 1016, 1021, 1022, 1028, 1029, 1053, 1090, 1095], "itself": [161, 174, 187, 198, 220, 227, 231, 273, 293, 377, 436, 499, 552, 611, 649, 759, 851, 905, 929, 944, 949, 1092], "itypeerror": 145, "iupac": [220, 221, 227, 228, 377, 407, 436, 446, 499, 552, 582, 611, 1092], "iv": [121, 126, 132], "j": [98, 100, 101, 103, 116, 119, 120, 128, 132, 133, 143, 144, 213, 215, 216, 220, 221, 222, 230, 231, 499, 660, 661, 675, 680, 689, 690, 691, 692, 694, 698, 700, 713, 723, 736, 749, 753, 754, 755, 865, 919, 979, 1028], "j00123": 222, "j04373": 230, "jag": 924, "jaim": 969, "je": 759, "jet": 1, "jim": 221, "jj": [694, 700], "joe": 227, "join": [91, 215, 216, 221, 228, 230, 231, 372, 395, 465, 516, 570, 628, 898, 1021, 1028, 1029], "joint": 222, "joseph": [220, 227, 1095], "jost": 132, "journal": [53, 104, 107, 110, 117, 132, 133, 135, 137, 222, 694, 700, 751], "json": [881, 908, 942, 948], "json_obj": 908, "json_tabl": 908, "juli": [53, 104], "julia": 972, "june": 225, "jupyt": 861, "just": [121, 122, 123, 128, 232, 891, 902, 919, 922, 943, 1012, 1090, 1095, 1097], "justif": 121, "jyzox": 221, "k": [53, 107, 112, 132, 133, 135, 136, 137, 146, 377, 404, 418, 419, 474, 485, 486, 499, 525, 537, 538, 552, 579, 593, 594, 632, 638, 639, 649, 661, 679, 698, 752, 759, 979, 1013, 1020, 1028], "k_": 875, "k__a": 897, "ka": 221, "kan": 231, "kannan": 231, "karsch": 231, "keemei": 229, "keep": [218, 222, 229, 316, 384, 455, 506, 559, 618, 849, 895, 896, 905, 917, 922, 1011, 1012], "kegg_pathwai": [907, 924, 941], "kei": [23, 65, 82, 85, 86, 89, 94, 105, 219, 220, 222, 230, 314, 318, 377, 401, 412, 420, 427, 471, 480, 487, 494, 499, 522, 531, 539, 546, 552, 576, 587, 595, 602, 611, 634, 640, 646, 665, 716, 740, 897, 901, 924, 946, 1000, 1020, 1028, 1097], "kellei": [143, 144], "kempton": 121, "kendalltau": 753, "kept": 222, "kestrel": 230, "keto": 377, "keyerror": [755, 924], "keyword": [93, 97, 104, 172, 173, 185, 186, 219, 222, 224, 244, 264, 265, 266, 268, 269, 270, 318, 319, 321, 373, 376, 420, 426, 433, 434, 435, 487, 493, 498, 539, 545, 551, 595, 601, 608, 609, 610, 640, 645, 648, 670, 676, 719, 724, 744, 750, 862, 863, 932, 947, 1006, 1027], "khovanskaya": 231, "kill": 695, "kind": 864, "kinet": 128, "kingdom": [215, 216, 231], "kit": 1089, "kj": 116, "klein": 222, "kmer": [418, 419, 485, 486, 537, 538, 593, 594, 638, 639, 679], "kmer_frequ": [404, 474, 525, 579, 632], "knight": [114, 116, 143, 144, 861], "know": [1, 53, 116, 143, 144, 217, 220, 227, 230, 232, 683, 875, 1030, 1090], "knowledg": [1010, 1090], "known": [107, 225, 264, 268, 698, 699, 865, 870, 1092], "kortlev": 230, "kqlaaargqr": 218, "kr": 751, "kruskal": [683, 878, 879], "kuo": 107, "kva": [434, 447, 609], "kw": 219, "kwarg": [93, 97, 104, 141, 145, 146, 149, 150, 161, 172, 173, 174, 185, 186, 187, 198, 243, 245, 257, 264, 265, 266, 267, 268, 269, 270, 273, 274, 319, 321, 373, 376, 426, 433, 434, 435, 493, 498, 545, 551, 601, 608, 609, 610, 645, 648, 649, 670, 676, 719, 724, 744, 750, 838, 862, 863, 881, 909, 932, 947, 1006, 1027, 1055, 1090], "kwarg1": 232, "kz": 221, "l": [53, 108, 109, 116, 121, 122, 132, 140, 219, 221, 231, 446, 499, 698, 753, 850, 864, 865, 872, 1021], "l1": 67, "l2": 67, "l3": 67, "lab": [861, 878], "label": [65, 67, 70, 72, 82, 85, 86, 92, 94, 95, 96, 217, 220, 222, 227, 229, 230, 669, 698, 701, 718, 743, 751, 752, 754, 755, 756, 851, 861, 930, 969, 1033], "labor": 878, "lack": 964, "lafond": 698, "lahaeavhvyktkyqayqkgkigitlvsnwlmplddnsipdikaaersldfq": 219, "lambda": [219, 849, 875, 878, 879, 897, 905, 909, 930, 933, 935, 944, 971, 984, 1005, 1008, 1013, 1024, 1028, 1029, 1097], "lane": 228, "lane_numb": 228, "langl": [689, 691], "languag": [2, 161, 218], "lapoint": 698, "larg": [53, 117, 121, 143, 144, 213, 220, 227, 692, 693, 752, 872, 878, 907, 967, 974], "larger": [84, 878], "largest": [53, 140, 918, 931], "last": [83, 161, 219, 227, 417, 446, 484, 536, 592, 611, 637, 753, 850, 1097], "latent": [161, 187, 211, 212], "later": [221, 877], "latter": [1, 649], "law": 115, "layout": 222, "lb": 221, "lca": [116, 132, 969, 997], "ldot": [681, 682, 686, 687, 689, 690, 695, 696, 697], "lead": [116, 141, 143, 144, 145, 220, 221, 224], "learn": [881, 948], "least": [89, 90, 128, 225, 229, 358, 402, 411, 412, 414, 472, 479, 480, 482, 523, 530, 531, 533, 577, 586, 587, 589, 633, 634, 635, 683, 753, 861, 878, 879, 1031, 1097], "leav": [121, 219, 429, 495, 548, 605, 905, 928], "lee": [53, 104, 107], "leesleyqqf": 218, "left": [92, 107, 135, 225, 290, 337, 355, 372, 374, 681, 682, 686, 691, 695, 696, 697, 698, 969, 991, 1032, 1033, 1095], "left_child_id": 1020, "leftmost": 231, "legaci": [215, 216, 220], "legal": 272, "legend": 861, "legendr": [753, 850, 864, 865, 867, 868, 870, 871, 872], "len": [53, 65, 77, 389, 460, 511, 564, 623, 661, 757, 879, 950, 951, 975, 978, 1016, 1028, 1097], "length": [0, 1, 3, 13, 14, 15, 18, 19, 34, 46, 47, 50, 51, 52, 53, 65, 82, 83, 85, 91, 98, 99, 100, 116, 132, 143, 144, 161, 174, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 227, 228, 230, 303, 315, 377, 378, 384, 389, 394, 395, 396, 398, 401, 404, 406, 407, 417, 418, 419, 421, 422, 423, 424, 428, 429, 430, 432, 433, 434, 436, 446, 447, 448, 449, 455, 460, 465, 466, 468, 471, 474, 484, 485, 486, 488, 489, 490, 491, 495, 496, 499, 500, 506, 511, 516, 517, 519, 522, 525, 536, 537, 538, 540, 541, 542, 543, 548, 549, 552, 553, 559, 564, 569, 570, 571, 573, 576, 579, 581, 582, 592, 593, 594, 596, 597, 598, 599, 603, 604, 605, 606, 608, 609, 611, 612, 618, 623, 628, 629, 632, 637, 638, 639, 641, 642, 643, 644, 647, 665, 678, 679, 683, 688, 716, 740, 751, 754, 755, 759, 869, 870, 878, 879, 907, 941, 949, 964, 970, 979, 980, 989, 1011, 1018, 1020, 1023, 1024, 1029, 1092, 1095, 1097], "lengtherror": 1011, "leq": 680, "less": [53, 107, 116, 123, 143, 144, 146, 227, 229, 418, 419, 485, 486, 537, 538, 593, 594, 638, 639, 679, 753, 756, 849, 864, 880, 897, 937, 1000, 1034], "lesser": 132, "let": [1, 220, 221, 223, 227, 228, 230, 293, 303, 427, 494, 546, 602, 611, 646, 683, 753, 849, 874, 875, 878, 879, 918, 1030, 1092, 1095, 1097], "letter": [114, 116, 220, 222, 499], "leu": 499, "leucin": 499, "level": [95, 122, 225, 272, 358, 683, 877, 878, 987, 1035, 1092], "levelord": [999, 1002, 1003, 1004, 1019, 1022], "leven": 755, "lewi": 132, "lexicon": [220, 221, 227], "lfc_result": 688, "li": 132, "librari": [53, 104, 143, 144, 220, 1089, 1090], "libreria": 118, "licens": 1089, "life": 116, "like": [1, 98, 99, 100, 146, 220, 222, 223, 224, 226, 229, 232, 420, 487, 539, 595, 640, 649, 701, 759, 782, 794, 815, 816, 826, 838, 870, 872, 878, 879, 902, 906, 909, 913, 942, 943, 1054, 1090, 1097], "likelihood": 649, "likelyhood": [869, 873], "likewis": [92, 132, 230], "limit": [1, 115, 215, 225, 226, 227, 877, 878, 1029], "limits_": [686, 687, 690, 691, 698], "linalg": 874, "linamaras": 219, "line": [118, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 272, 878, 906, 909, 967], "lineag": [231, 878, 988, 1021], "lineage_map": 988, "linear": [118, 219, 222, 851, 865], "link": [145, 302, 358, 752, 759, 949], "linkag": [879, 986], "linkage_matrix": 986, "linnean": 132, "linux": 913, "lipman": [215, 216, 220], "list": [1, 50, 104, 116, 132, 143, 144, 147, 148, 209, 215, 219, 221, 222, 223, 226, 229, 230, 231, 232, 243, 245, 261, 262, 272, 303, 427, 494, 546, 602, 611, 646, 659, 663, 666, 699, 701, 712, 715, 735, 739, 753, 755, 756, 772, 794, 805, 827, 860, 875, 877, 878, 879, 897, 901, 905, 906, 907, 909, 918, 924, 930, 935, 936, 941, 949, 965, 971, 979, 981, 983, 986, 995, 997, 998, 1013, 1014, 1018, 1020, 1021, 1028, 1029, 1090, 1097], "liter": 225, "literatur": [1, 112, 879], "live": [1, 317], "lkwh": [434, 447, 609], "ll": [1, 116, 143, 144, 752, 753, 756, 850, 875, 878, 879, 1095, 1097], "lladser": [122, 123, 143, 144], "lladser_ci": 123, "lladser_p": 122, "ln": [109, 117, 124, 133, 681, 683, 686, 691, 698], "load": [0, 218, 220, 221, 226, 228, 229, 290, 337, 355, 358, 374, 661, 683, 701, 702, 751, 752, 755, 756, 907, 1053, 1054, 1090], "loc": [72, 611, 683, 878], "local": [0, 101, 102, 103, 215, 216, 222], "local_pairwise_align": [98, 99, 100, 102, 103], "local_pairwise_align_nucleotid": [98, 99, 100, 101, 103], "local_pairwise_align_protein": [0, 98, 99, 100, 101, 102], "local_pairwise_align_ssw": [0, 98, 99, 100, 101, 102, 103], "locat": [53, 93, 97, 172, 173, 185, 186, 219, 225, 230, 258, 259, 260, 293, 319, 321, 373, 376, 402, 403, 426, 435, 472, 473, 493, 498, 523, 524, 545, 551, 577, 578, 601, 610, 631, 645, 648, 670, 676, 719, 724, 744, 750, 862, 863, 926, 932, 947, 1006, 1010, 1027, 1032, 1096], "loci": 53, "locu": [219, 222, 231], "log": [124, 680, 681, 682, 683, 686, 687, 688, 689, 690, 694, 700], "log2": 688, "log_2": 135, "logarithm": [120, 135, 683], "logic": [3, 232, 1055], "logratio": 680, "long": [217, 220, 227, 229, 402, 472, 523, 577, 681, 752, 838, 864], "long_method_nam": [851, 1033], "longer": [220, 227, 680, 879], "look": [105, 224, 226, 227, 232, 318, 427, 494, 546, 602, 608, 609, 646, 653, 683, 706, 729, 861, 877, 878, 879, 902, 971, 1078, 1095, 1097], "lookup": [98, 99, 100, 101, 102, 103, 258, 259, 260, 653, 706, 729, 753, 756, 966, 977, 981, 991, 992, 1001, 1005, 1020, 1055], "lookup_id": [650, 668, 703, 717, 726, 741], "loop": [220, 1025, 1026], "loos": [1, 759], "lorenz": 118, "lose": [755, 870], "loss": [116, 759], "lost": [755, 870], "lot": 864, "love": [881, 948], "lovel": [694, 700], "low": [123, 850, 870, 878, 937, 988], "lower": [121, 122, 220, 227, 293, 358, 683, 688, 740, 747, 753, 849, 850, 879], "lower_bound": [111, 115, 122], "lower_quantil": 121, "lowercas": [53, 219, 220, 221, 222, 228, 377, 395, 448, 465, 499, 516, 552, 570, 611, 628], "lowest": [116, 132, 995, 997], "lowest_common_ancestor": 995, "lozupon": [116, 143, 144], "lq": 121, "lsmat": [670, 676, 719, 724, 744, 750], "luca": 969, "ly": 499, "lysin": 499, "m": [50, 53, 101, 107, 116, 132, 143, 144, 215, 216, 219, 221, 227, 231, 377, 436, 437, 446, 499, 552, 661, 752, 755, 759, 861, 864, 865, 871, 872, 874, 877, 907, 913, 941, 1012, 1029], "m1": 974, "m2": 974, "m24803": 230, "m24804": 230, "m_shape": 874, "ma": [15, 19, 47, 52, 107, 430, 496, 549, 606, 647], "machin": 228, "machine_nam": 228, "macrophag": 878, "madden": 220, "made": [65, 128, 611, 683, 702, 725, 849, 897, 965, 982, 983, 1005, 1031], "magnitud": [128, 688, 753, 755, 870, 1030], "magnoliophyta": 219, "magnuson": 132, "magurran": [121, 127], "mai": [1, 20, 53, 84, 94, 116, 123, 216, 219, 220, 221, 222, 224, 225, 227, 229, 230, 231, 232, 244, 261, 262, 272, 293, 317, 358, 370, 371, 377, 404, 448, 474, 499, 525, 552, 579, 611, 632, 649, 653, 663, 678, 683, 701, 706, 715, 729, 739, 753, 755, 759, 849, 864, 875, 877, 878, 879, 880, 897, 987, 1030, 1053, 1055, 1090, 1092], "main": 322, "mainli": [760, 850], "maintain": [220, 225, 232, 742, 864, 865, 875, 878], "major": [83, 680, 747, 907, 941, 1028], "make": [84, 92, 220, 225, 229, 232, 290, 337, 355, 358, 374, 437, 653, 678, 706, 729, 751, 755, 879, 1017, 1020, 1021, 1029, 1035, 1055, 1097], "mam": 231, "manag": [272, 273, 274], "mandal": 683, "mani": [1, 107, 131, 148, 225, 229, 649, 680, 683, 759, 864, 870, 878, 879, 897, 1097], "manipul": [0, 89, 90, 229, 358, 412, 414, 480, 482, 531, 533, 587, 589, 611, 634, 635, 680, 701, 907], "mann": 683, "manner": [83, 220, 227, 384, 398, 455, 468, 506, 519, 559, 573, 618, 753, 870], "mannwhitneyu": 683, "mantel": [1, 701, 756, 759], "manual": [107, 111, 121, 126, 229, 1028], "map": [1, 86, 94, 146, 246, 358, 371, 753, 756, 759, 760, 794, 838, 861, 877, 879, 897, 930, 946, 988, 991, 1092], "map_async": 146, "map_f": 146, "mar": [98, 101, 120], "marchand": 698, "marguerat": [694, 700], "margush": 1028, "marin": 752, "mark": [219, 222, 230, 1097], "marrow": 878, "marth": [53, 104], "marti": [754, 755], "martin": [680, 692], "mask": [15, 19, 47, 52, 53, 430, 496, 549, 606, 647, 694, 700], "mask_auto": 53, "mask_gap": [430, 496, 549, 606, 647], "mask_length": 53, "maskedarrai": [15, 19, 47, 52], "mat": [649, 661, 664, 667, 681, 682, 684, 685, 686, 687, 689, 690, 692, 693, 694, 1018], "match": [0, 50, 53, 82, 85, 92, 99, 102, 105, 215, 220, 221, 229, 272, 273, 286, 291, 292, 333, 338, 339, 351, 356, 357, 358, 370, 372, 375, 382, 402, 403, 421, 423, 424, 431, 446, 453, 472, 473, 488, 490, 491, 497, 504, 523, 524, 540, 542, 543, 550, 557, 577, 578, 596, 598, 599, 607, 616, 631, 641, 643, 644, 667, 702, 751, 753, 755, 756, 875, 877, 878, 879, 973, 974, 983, 985, 1092, 1097], "match_frequ": [423, 490, 542, 598, 643, 1092], "match_scor": [53, 99, 102, 105], "matevz": 698, "mathbb": [681, 682, 683, 686, 687, 689, 690], "mathemat": [112, 135, 143, 680, 850, 969, 972, 1028], "mathemt": 144, "matplotlib": [669, 718, 743, 851, 861], "matric": [1, 100, 103, 213, 224, 499, 649, 651, 658, 661, 666, 701, 702, 704, 711, 727, 734, 752, 753, 756, 758, 759, 866, 870, 974], "matrix": [1, 53, 105, 141, 145, 146, 149, 150, 210, 430, 496, 549, 606, 647, 649, 650, 651, 653, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 673, 674, 675, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 703, 704, 706, 711, 712, 713, 714, 715, 716, 717, 718, 722, 723, 725, 726, 727, 729, 734, 735, 736, 738, 739, 740, 741, 742, 743, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 759, 850, 861, 864, 866, 867, 868, 870, 871, 872, 874, 876, 881, 882, 884, 897, 907, 908, 911, 926, 933, 937, 939, 940, 941, 948, 986, 1018, 1029, 1089, 1094], "matrix_data": [881, 948], "matrix_element_typ": 908, "matrix_rank": 874, "matsen": 132, "matter": [229, 294, 315, 653, 706, 729], "matthew": 1028, "matto": 698, "max": [53, 107, 108, 128, 878, 879, 918, 989], "max_count": [875, 878, 879], "max_i": 140, "max_sample_count": 918, "max_width": 220, "maxim": [53, 132, 752, 865], "maxima": 921, "maximum": [133, 140, 220, 221, 683, 688, 752, 794, 849, 865, 869, 873, 878, 879, 921, 974], "mccoi": 132, "mcdonald": [881, 948], "mcentyr": 220, "mci": 1092, "mcintosh": [125, 126], "mcintosh_": 125, "mcintosh_d": 126, "mcmorri": 1028, "md": [220, 893, 901, 905, 930, 944], "md5": [219, 1054], "md_i": 919, "md_j": 919, "mdfivaifalfvissftitstnaveastlldignlsr": 219, "mean": [223, 225, 232, 272, 303, 318, 377, 406, 407, 581, 582, 660, 675, 680, 683, 686, 688, 698, 713, 723, 736, 749, 816, 838, 864, 868, 869, 870, 873, 875, 876, 878, 879, 907, 941, 1090, 1095], "meaning": [53, 82, 85, 92, 870, 1092], "measur": [1, 112, 114, 120, 122, 123, 126, 127, 131, 132, 133, 135, 136, 137, 143, 144, 649, 683, 694, 700, 701, 864, 877, 878, 949, 969, 1091], "mechan": [1055, 1097], "media": 878, "median": [683, 755], "medic": 219, "medlin": 230, "meepqsdpsv": [430, 496, 549, 606, 647], "meet": [104, 229, 318, 370, 371, 1024], "member": [264, 268, 1055, 1078, 1097], "membership": 232, "meme_v4": 217, "memo": [69, 305, 381, 452, 503, 556, 615], "memori": [3, 118, 217, 218, 220, 221, 222, 227, 228, 230, 358, 701, 756, 849, 870, 881, 948, 1054, 1090], "mengyao": [53, 104], "menopaus": 879, "menten": 128, "mention": 225, "merg": 358, "merged_t": 922, "messag": [1, 116, 141, 143, 144, 145, 772, 816, 1034, 1090], "met": [1, 499, 1078], "met_neg": 879, "met_po": 879, "meta": [229, 877, 878], "metabolit": [1, 879, 881, 948, 1091], "metabolite_test": 879, "metadata": [0, 1, 65, 70, 79, 82, 83, 85, 89, 90, 91, 92, 94, 95, 214, 217, 219, 220, 221, 222, 223, 227, 228, 377, 382, 384, 391, 393, 394, 395, 398, 401, 411, 412, 414, 420, 427, 428, 432, 433, 434, 436, 446, 447, 448, 453, 455, 462, 464, 465, 468, 471, 479, 480, 482, 487, 494, 499, 504, 506, 513, 515, 516, 519, 522, 530, 531, 533, 539, 546, 552, 557, 559, 566, 568, 569, 570, 573, 576, 586, 587, 589, 595, 602, 603, 604, 608, 609, 611, 616, 618, 625, 627, 628, 633, 634, 635, 640, 646, 665, 716, 740, 752, 760, 772, 794, 805, 816, 838, 861, 872, 875, 877, 878, 879, 882, 892, 893, 895, 896, 897, 901, 902, 905, 907, 908, 909, 912, 917, 922, 924, 930, 939, 940, 941, 943, 944, 945, 1089, 1092, 1093], "metadata_f": 897, "metadata_field": [907, 941], "metadata_formatt": [902, 943], "metadata_i": 919, "metadata_j": 919, "metadata_map": [760, 761, 783, 794, 827, 838], "metadatacolumn": [275, 276, 282, 284, 285, 340, 341, 347, 349, 350, 358, 369], "metadatafileerror": 371, "metag": 894, "metagenom": 894, "metatdata": 219, "metdata": [611, 922], "methionin": [446, 499], "method": [0, 1, 3, 19, 20, 34, 52, 53, 65, 72, 84, 92, 93, 97, 98, 118, 141, 143, 145, 146, 149, 150, 161, 172, 173, 174, 185, 186, 187, 198, 214, 218, 226, 229, 233, 243, 245, 246, 263, 275, 293, 303, 314, 319, 321, 322, 340, 358, 373, 376, 377, 380, 381, 395, 404, 426, 428, 434, 435, 436, 445, 447, 448, 451, 452, 465, 474, 493, 498, 499, 502, 503, 516, 525, 545, 551, 552, 555, 556, 570, 579, 601, 603, 609, 610, 611, 614, 615, 628, 632, 645, 648, 649, 670, 676, 680, 683, 688, 692, 698, 701, 702, 719, 724, 725, 742, 744, 750, 751, 752, 753, 754, 755, 756, 761, 772, 782, 783, 794, 805, 815, 816, 826, 827, 838, 849, 851, 861, 862, 863, 864, 865, 870, 881, 931, 932, 941, 947, 949, 950, 951, 967, 969, 970, 971, 974, 975, 977, 978, 979, 980, 982, 984, 985, 1005, 1006, 1011, 1013, 1025, 1026, 1027, 1028, 1029, 1035, 1047, 1054, 1055, 1056, 1066, 1078, 1089, 1092, 1095, 1097], "metodologica": 118, "metric": [84, 107, 112, 116, 117, 132, 141, 142, 143, 144, 145, 146, 147, 148, 149, 210, 221, 400, 470, 521, 575, 630, 665, 679, 716, 725, 740, 949, 1092], "metricspac": 725, "mgc": 231, "mi": 50, "micha": 128, "michael": 221, "microbi": [116, 122, 123, 132, 143, 144, 683, 751, 752, 754, 755, 861], "microbiol": [143, 144], "microbiom": [1, 132, 146, 683, 688, 870], "microsoft": 229, "mid": 1011, "middl": 317, "midpoint": [1011, 1029], "mieadkvahvqvgnnleh": 230, "might": [1, 118, 224, 226, 752, 877, 878, 879, 974, 1090], "miller": [215, 216], "million": 146, "min": [132, 137, 879], "min_count": [875, 878, 879], "min_group_s": 897, "min_length": [402, 417, 472, 484, 523, 536, 577, 592, 637, 1092], "minim": 225, "minima": 925, "minimize_scalar": 117, "minimum": [116, 132, 137, 231, 407, 417, 484, 536, 582, 592, 637, 683, 755, 849, 878, 879, 897, 925], "mininum": 688, "minor": [216, 907, 941], "minter": [0, 65, 70, 82, 85, 94, 95, 217, 227], "minu": [84, 222, 230, 827], "mirror": 688, "misc_bind": 222, "miscellan": 1089, "mislead": [84, 149], "mismatch": [0, 50, 53, 99, 102, 105, 215, 216, 421, 422, 423, 488, 489, 490, 540, 541, 542, 596, 597, 598, 641, 642, 643, 667, 753, 973], "mismatch_frequ": [421, 488, 540, 596, 641, 1092], "mismatch_scor": [53, 99, 102, 105], "miss": [215, 220, 229, 230, 284, 286, 287, 289, 291, 292, 322, 331, 333, 334, 336, 338, 339, 349, 351, 352, 354, 356, 357, 358, 367, 371, 375, 395, 465, 516, 570, 628, 680, 692, 752, 861, 877, 878, 1097], "missing_schem": [275, 322, 340], "missingiderror": [653, 660, 663, 668, 675, 706, 713, 715, 717, 723, 729, 736, 739, 741, 749], "missingnodeerror": [116, 132, 141, 143, 144, 145, 982, 983, 985, 1000, 1013], "mit": 217, "mitochondri": [231, 433, 445, 608], "mix": 229, "mizrachi": 231, "ml": 128, "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm": 436, "mn": 127, "moac": 215, "mode": [84, 232, 272, 446, 879, 897, 1055], "model": [2, 121, 122, 123, 128, 161, 218, 661, 680, 688, 701, 879], "moder": 753, "modif": [303, 759], "modifi": [95, 220, 222, 230, 263, 377, 499, 552, 611, 742, 838, 871, 905, 944, 1013], "modul": [0, 1, 2, 218, 230, 232, 271, 677, 680, 701, 760, 850, 875, 1053, 1054, 1090, 1091, 1092, 1093, 1094, 1095, 1097], "mol": [98, 101, 215, 216, 219, 222], "mol_typ": [219, 222], "molbev": 1029, "molecul": [219, 220, 222, 611, 649, 1092], "molecular": [101, 759, 969, 1029, 1092], "moment": [219, 753, 1097], "monkei": 263, "monkey_patch": [243, 245], "monoton": [701, 702, 756, 757], "mont": 875, "month": 231, "mooer": 132, "more": [0, 1, 83, 84, 85, 93, 97, 98, 104, 107, 118, 141, 148, 172, 173, 185, 186, 216, 219, 220, 221, 225, 226, 227, 228, 229, 230, 265, 269, 289, 319, 321, 336, 354, 358, 372, 373, 376, 408, 409, 410, 413, 426, 435, 476, 477, 478, 481, 493, 498, 499, 527, 528, 529, 532, 534, 545, 551, 583, 584, 585, 588, 601, 610, 645, 648, 653, 670, 676, 680, 683, 685, 688, 701, 706, 719, 724, 729, 742, 744, 750, 751, 752, 753, 754, 755, 756, 759, 771, 793, 804, 837, 848, 849, 861, 862, 863, 864, 865, 872, 878, 879, 881, 897, 913, 932, 947, 948, 970, 987, 1006, 1027, 1028, 1090, 1095, 1096], "mosaic": 230, "most": [83, 108, 117, 132, 213, 217, 220, 221, 224, 225, 227, 229, 231, 446, 611, 753, 849, 872, 875, 989, 991, 1028, 1095], "mostli": [229, 230], "motif": [402, 472, 523, 577, 1092], "motif_slic": [402, 472, 523, 577], "motif_typ": [402, 472, 523, 577], "motiv": 146, "mpl": [433, 434, 436, 446, 447, 608, 609], "mpt": [433, 608], "mqhvsapvfvfectrlai": 230, "mrna": 219, "msa": [0, 3, 16, 17, 48, 65, 66, 67, 68, 69, 70, 72, 75, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 91, 92, 94, 95, 96, 217, 220, 221, 227, 230], "msa1": 92, "msa2": 92, "msa_copi": [68, 69], "msl072": 1029, "mtcraqliavprassla": 230, "mtrand": [974, 1013], "mu": 875, "mu_": 875, "much": [0, 1, 116, 143, 144, 225, 1090], "mullikin": 221, "multi": 683, "multi_replac": [683, 693], "multifurc": [225, 1095], "multiindex": [95, 747], "multimod": 864, "multinomi": [688, 937], "multipl": [0, 65, 91, 116, 143, 144, 217, 219, 220, 221, 222, 223, 225, 231, 293, 315, 611, 649, 680, 683, 688, 692, 759, 850, 872, 878, 897, 1021, 1028, 1090, 1095], "multiple_comparisons_correct": 683, "multipli": 132, "multivari": [681, 751, 752, 754, 755, 864, 865, 1089], "must": [15, 47, 53, 65, 82, 85, 92, 93, 97, 116, 118, 132, 143, 144, 145, 146, 149, 172, 173, 185, 186, 210, 215, 217, 220, 221, 224, 225, 226, 227, 229, 230, 244, 318, 319, 321, 358, 370, 372, 373, 376, 377, 395, 400, 420, 426, 433, 435, 465, 470, 487, 493, 498, 499, 516, 521, 539, 545, 551, 552, 570, 575, 595, 601, 608, 610, 611, 628, 630, 640, 645, 648, 663, 670, 676, 683, 688, 699, 702, 715, 719, 724, 739, 744, 750, 751, 752, 753, 754, 755, 757, 759, 782, 815, 826, 849, 861, 862, 863, 864, 869, 878, 879, 880, 897, 905, 906, 913, 922, 930, 932, 942, 943, 944, 947, 971, 1006, 1013, 1021, 1027, 1028, 1029, 1032, 1034, 1054, 1055, 1078, 1097], "mutabl": [118, 611, 1035, 1092], "mutant": 222, "mutat": [649, 661, 949], "my": 1092, "my_obj": 1090, "myeloid": 878, "myer": [215, 216], "myformat": [232, 243, 244, 245], "myformat2": [243, 244, 245], "myformat_read": [243, 245], "myformat_sniff": 244, "myobject": [243, 245], "n": [1, 53, 108, 109, 115, 117, 118, 119, 124, 125, 126, 127, 128, 132, 134, 140, 213, 215, 216, 217, 220, 221, 222, 226, 227, 228, 230, 231, 232, 243, 244, 245, 272, 273, 377, 417, 430, 484, 496, 499, 523, 536, 549, 552, 592, 606, 637, 647, 692, 693, 701, 753, 756, 759, 849, 864, 865, 866, 869, 871, 872, 873, 875, 879, 880, 907, 913, 937, 941, 950, 951, 963, 971, 975, 978, 984, 989, 991, 998, 1013, 1014, 1021, 1028, 1029, 1034, 1092], "n1": 909, "n4": 909, "n_": [107, 108], "n_compon": [681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700], "n_composit": [681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697], "n_featur": [211, 698], "n_i": [109, 125, 126], "n_ob": 939, "n_object": 211, "n_pack": 3, "n_partit": 698, "n_posit": [13, 15, 17, 19, 44, 47, 52], "n_segment": [3, 14, 18, 34, 46, 51], "n_seq": [13, 14, 15, 17, 18, 19, 44, 46, 47, 51, 52], "n_sequenc": [3, 13], "n_var": 939, "na": [229, 906], "naess": 698, "name": [1, 93, 97, 116, 132, 143, 144, 172, 173, 185, 186, 215, 216, 221, 222, 223, 225, 226, 228, 229, 230, 232, 233, 258, 259, 260, 265, 269, 276, 282, 291, 292, 293, 319, 321, 323, 329, 338, 339, 341, 347, 356, 357, 358, 359, 365, 369, 371, 372, 373, 375, 376, 420, 426, 435, 436, 437, 443, 445, 487, 493, 498, 539, 545, 551, 595, 601, 610, 640, 645, 648, 649, 661, 666, 670, 676, 683, 688, 694, 699, 719, 724, 744, 750, 751, 752, 754, 755, 760, 772, 816, 851, 861, 862, 863, 897, 902, 932, 940, 943, 947, 949, 963, 965, 966, 967, 969, 971, 972, 973, 974, 977, 981, 982, 983, 984, 985, 987, 989, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1027, 1028, 1047, 1053, 1090, 1095], "name_txt": 231, "named_gc": 437, "namedtemporaryfil": 272, "nan": [19, 52, 84, 88, 92, 123, 215, 229, 286, 287, 289, 291, 292, 322, 333, 334, 336, 338, 339, 351, 352, 354, 356, 357, 358, 367, 375, 395, 404, 465, 474, 516, 525, 570, 579, 628, 632, 678, 679, 751, 752, 753, 754, 755, 756, 759, 861, 877, 878, 1020, 1032], "nan_length_valu": 1020, "nanmean": 879, "naohisa": 221, "nar": 221, "nasanfta": [417, 484, 536, 592, 637], "nat": 222, "natal": 698, "nation": [220, 231, 661], "nativ": [1, 671, 720, 745, 870], "natl": [100, 103], "natsort": 935, "natur": [112, 121, 136, 137, 358, 935], "nb": 273, "nbk21097": 220, "nbk279675": 215, "nbk279682": 216, "nc": 273, "ncbi": [99, 100, 102, 103, 215, 216, 220, 222, 231, 433, 434, 436, 437, 444, 445, 446, 447, 608, 609, 987, 1092], "ncbiinsight": 231, "ncifcrf": 84, "ncrna": 611, "nd": 906, "ndarrai": [17, 18, 19, 51, 52, 88, 145, 161, 174, 187, 198, 211, 377, 379, 396, 397, 399, 400, 405, 415, 416, 421, 422, 423, 424, 425, 430, 450, 466, 467, 469, 470, 475, 483, 488, 489, 490, 491, 492, 496, 499, 501, 517, 518, 520, 521, 526, 535, 540, 541, 542, 543, 544, 547, 549, 552, 554, 571, 572, 574, 575, 580, 590, 591, 596, 597, 598, 599, 600, 606, 611, 613, 629, 630, 636, 641, 642, 643, 644, 647, 653, 671, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 695, 696, 697, 698, 702, 706, 720, 729, 737, 742, 745, 757, 759, 873, 880, 900, 939, 986], "ne2": 219, "nearbi": 53, "nearli": [98, 99, 100], "necessari": [92, 215, 227, 303, 611, 702, 751, 752, 753, 782, 815, 826, 974, 1053, 1090], "necessarili": [82, 85, 92, 226, 404, 474, 525, 579, 611, 632, 880], "nee": 116, "need": [1, 82, 85, 91, 116, 143, 144, 146, 213, 218, 223, 225, 232, 243, 245, 272, 303, 318, 448, 683, 688, 689, 690, 699, 751, 752, 754, 755, 756, 849, 850, 865, 872, 875, 878, 879, 907, 971, 974, 1032, 1033, 1055, 1097], "needl": 98, "needleman": [0, 98, 99, 100], "neg": [1, 53, 99, 102, 105, 118, 229, 446, 685, 692, 693, 725, 864, 865, 870, 875, 879, 1029], "negat": 316, "neglig": 1, "nei": 1029, "neighbor": [222, 1014, 1029], "neighbour_join": 1029, "neither": [65, 94, 273, 933, 1013, 1022], "nellangiqpfvtlfhwdlpqvledeyggflnsgvindfrdytdlcfkefgd": 219, "neq": 875, "nest": [225, 701, 753, 924, 939, 1016, 1095], "never": [220, 230], "new": [0, 82, 85, 93, 94, 95, 109, 120, 122, 123, 143, 172, 185, 231, 243, 244, 245, 257, 267, 303, 319, 372, 373, 384, 395, 398, 426, 427, 455, 465, 468, 493, 494, 506, 516, 519, 545, 546, 559, 570, 573, 601, 602, 611, 618, 628, 645, 646, 670, 719, 742, 744, 753, 754, 756, 862, 865, 873, 905, 928, 929, 931, 932, 934, 936, 944, 945, 946, 950, 951, 975, 978, 1005, 1006, 1010, 1011, 1025, 1026, 1029, 1092, 1095, 1097], "new_fasta_fh": 220, "new_fh": 221, "new_qual_fh": 220, "new_tabl": [905, 928, 935], "new_taxdump": 231, "new_tre": [1025, 1026], "newcastl": 219, "newick": [116, 143, 144, 907, 912, 941, 963, 969, 1006, 1027, 1029, 1090, 1095], "newick_doc": 225, "newick_str": 1029, "newicktre": 225, "newlin": [220, 225, 227, 232, 233, 264, 265, 268, 269, 272], "next": [1, 116, 122, 123, 143, 144, 219, 225, 232, 611, 683, 838, 864, 1028, 1095, 1097], "nh": 230, "nhx": 230, "nich": 865, "nident": [215, 216], "nih": [99, 100, 102, 103, 215, 216, 220, 222, 228, 231, 436, 444, 445], "nlm": [99, 100, 102, 103, 215, 216, 220, 222, 231, 436, 444, 445], "nnz": [881, 907, 941, 948], "no_gap": [417, 484, 536, 592, 637], "node": [1, 116, 143, 144, 699, 949, 950, 951, 954, 958, 964, 965, 966, 968, 969, 970, 971, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1090, 1095], "node_c": 998, "node_id": [985, 991, 1020], "node_info": 225, "nodes_new": 231, "nodes_slim": 231, "nolengtherror": [964, 980, 989], "nomenclatur": [377, 448, 499, 552, 611], "non": [65, 110, 118, 215, 217, 219, 223, 229, 293, 377, 413, 425, 429, 481, 492, 495, 499, 532, 544, 548, 588, 600, 605, 649, 680, 681, 682, 683, 685, 688, 692, 693, 695, 696, 697, 725, 751, 754, 755, 759, 864, 870, 875, 881, 907, 922, 941, 944, 973, 974, 979, 1092], "non_tip": [996, 1002, 1003, 1004, 1019, 1022, 1028, 1095], "noncanon": [429, 495, 548, 605], "none": [13, 45, 50, 53, 65, 82, 84, 85, 93, 94, 95, 99, 100, 102, 103, 104, 116, 128, 132, 141, 143, 144, 145, 146, 172, 185, 215, 220, 224, 232, 233, 243, 245, 258, 259, 260, 264, 268, 272, 290, 293, 303, 314, 316, 318, 319, 337, 355, 358, 367, 370, 371, 373, 374, 377, 396, 400, 402, 403, 404, 415, 426, 430, 431, 448, 466, 470, 472, 473, 474, 483, 493, 496, 497, 499, 517, 521, 523, 524, 525, 535, 545, 549, 550, 552, 571, 575, 577, 578, 579, 590, 601, 606, 607, 611, 629, 630, 631, 632, 636, 645, 647, 665, 669, 670, 683, 688, 689, 690, 692, 693, 694, 702, 716, 718, 719, 725, 740, 743, 744, 751, 752, 753, 754, 755, 756, 757, 761, 783, 794, 827, 849, 851, 861, 862, 866, 869, 870, 873, 874, 876, 877, 878, 879, 880, 881, 897, 901, 902, 907, 908, 909, 912, 917, 922, 923, 930, 932, 933, 937, 941, 942, 943, 944, 948, 949, 969, 970, 974, 977, 979, 987, 996, 998, 1001, 1002, 1003, 1004, 1006, 1013, 1017, 1018, 1020, 1021, 1022, 1025, 1026, 1028, 1029, 1055, 1056, 1078, 1092, 1095, 1097], "nonlinear": 128, "nonmatch": [753, 756], "nonneg": 220, "nonparametr": [115, 680, 692], "nontip": 999, "nonzero": [214, 905, 910, 921, 925, 927, 928, 944, 948], "noparenterror": 964, "noqa": 907, "nor": [65, 82, 85, 94, 224, 227, 702, 933, 1013], "norm": [761, 783, 827, 838, 897], "normal": [115, 144, 221, 222, 322, 358, 751, 755, 870, 871, 872, 875, 876, 878, 879, 897, 928, 971], "not_non": [1078, 1097], "notabl": 221, "notat": [225, 229, 499], "note": [3, 15, 16, 20, 47, 48, 50, 53, 65, 72, 77, 82, 83, 84, 85, 86, 88, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 144, 146, 148, 214, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 293, 303, 304, 305, 317, 370, 372, 377, 380, 381, 384, 395, 398, 401, 404, 406, 417, 428, 430, 432, 433, 434, 436, 437, 444, 445, 446, 447, 448, 451, 452, 455, 465, 468, 471, 474, 484, 496, 499, 502, 503, 506, 516, 519, 522, 525, 536, 549, 552, 555, 556, 559, 570, 573, 576, 579, 581, 592, 603, 604, 606, 608, 609, 611, 614, 615, 618, 628, 632, 637, 647, 649, 653, 660, 661, 671, 674, 675, 678, 679, 683, 688, 689, 690, 692, 694, 698, 699, 700, 702, 706, 713, 720, 722, 723, 725, 729, 736, 737, 742, 745, 748, 749, 751, 752, 753, 754, 755, 756, 759, 849, 861, 864, 865, 870, 872, 873, 878, 879, 880, 881, 884, 897, 898, 906, 907, 913, 922, 924, 937, 939, 940, 941, 948, 967, 969, 970, 971, 972, 974, 979, 985, 987, 1013, 1018, 1020, 1021, 1022, 1023, 1028, 1029, 1032, 1034, 1053, 1054, 1092, 1095, 1097], "notebook": 851, "noth": [95, 272, 372, 431, 497, 550, 607, 1055], "notic": [1, 220, 225, 227, 879, 1097], "notifi": 753, "notimplementederror": [864, 865], "notion": 753, "notredam": [694, 700], "notstart": 229, "nov": [100, 103, 219, 861], "novel": 683, "novemb": 1029, "now": [1, 121, 219, 220, 222, 227, 611, 680, 683, 752, 849, 850, 875, 878, 879, 944, 1095, 1097], "np": [13, 14, 15, 19, 46, 47, 52, 84, 88, 116, 123, 132, 143, 144, 161, 174, 215, 286, 289, 333, 336, 351, 354, 358, 367, 377, 379, 396, 397, 399, 400, 404, 405, 415, 416, 421, 422, 423, 424, 425, 430, 450, 466, 467, 469, 470, 474, 475, 483, 488, 489, 490, 491, 492, 496, 499, 501, 517, 518, 520, 521, 525, 526, 535, 540, 541, 542, 543, 544, 547, 549, 552, 554, 571, 572, 574, 575, 579, 580, 590, 591, 596, 597, 598, 599, 600, 606, 611, 613, 629, 630, 632, 636, 641, 642, 643, 644, 647, 649, 678, 679, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 751, 753, 754, 755, 756, 759, 760, 849, 850, 861, 874, 875, 877, 878, 879, 880, 894, 895, 896, 897, 898, 900, 901, 904, 905, 911, 912, 913, 914, 915, 917, 918, 921, 922, 923, 925, 928, 929, 930, 931, 933, 935, 936, 937, 938, 939, 943, 944, 946, 991, 1013, 1028, 1032], "np_286546": 215, "npd": 132, "nrte": [417, 484, 536, 592, 637], "ns_": 128, "nt": 293, "nuc": [430, 496, 549, 606, 647, 649, 661], "nuc_pattern": 1097, "nuccor": 222, "nucl": 221, "nucleic": [227, 231, 377, 448, 499, 552, 611], "nucleobas": [377, 552], "nucleotid": [0, 53, 99, 102, 216, 219, 220, 221, 222, 377, 394, 416, 428, 430, 496, 549, 552, 569, 591, 603, 606, 647, 649, 661, 1097], "nucleotidemixin": [394, 428, 569, 603], "null": [225, 683, 688, 759, 875, 944], "num_it": [875, 878, 879], "num_object": 757, "num_repeat": 128, "num_run": [878, 879], "number": [1, 65, 77, 82, 85, 107, 108, 109, 110, 113, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 143, 144, 145, 213, 215, 217, 219, 220, 222, 225, 227, 228, 230, 231, 272, 293, 314, 358, 389, 396, 404, 421, 423, 460, 466, 474, 488, 490, 511, 517, 525, 540, 542, 564, 571, 579, 596, 598, 623, 629, 632, 641, 643, 649, 664, 682, 683, 688, 692, 693, 695, 696, 697, 698, 702, 751, 752, 753, 754, 755, 756, 757, 759, 794, 838, 849, 865, 869, 870, 872, 873, 875, 876, 878, 879, 880, 881, 897, 907, 911, 913, 927, 937, 941, 969, 976, 1013, 1032, 1033], "number_of_dimens": [755, 870], "numer": [1, 19, 52, 117, 121, 215, 224, 229, 231, 340, 358, 367, 371, 375, 698, 752, 753, 794, 850, 861, 864, 865, 871, 872, 879, 1033], "numeric_onli": 1, "numericmetadatacolumn": [322, 358, 369], "numpi": [1, 13, 14, 15, 46, 47, 145, 161, 174, 211, 653, 671, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 706, 720, 729, 737, 745, 751, 755, 757, 759, 760, 794, 816, 838, 849, 850, 875, 877, 878, 879, 880, 894, 895, 896, 897, 898, 901, 904, 905, 911, 912, 913, 914, 915, 917, 918, 922, 923, 927, 928, 929, 930, 931, 933, 935, 936, 937, 938, 941, 943, 944, 974, 1013, 1092], "nutrient": 698, "nwnnnnnn": [408, 413, 476, 481, 527, 532, 583, 588], "o": [92, 93, 97, 132, 172, 173, 185, 186, 219, 220, 221, 228, 230, 319, 321, 373, 376, 426, 435, 493, 498, 499, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 862, 863, 913, 932, 947, 1006, 1027, 1029, 1090, 1096], "o1": [895, 896, 898, 901, 904, 905, 911, 912, 913, 914, 915, 917, 918, 922, 923, 924, 928, 929, 930, 931, 933, 935, 936, 937, 938, 940, 943, 944, 946], "o2": [895, 896, 898, 901, 904, 905, 911, 912, 913, 914, 915, 917, 918, 922, 923, 924, 928, 929, 930, 931, 933, 935, 936, 937, 938, 940, 943, 944, 946], "o3": [895, 896, 898, 904, 913, 918, 922, 931], "o31698": 230, "o31699": 230, "o4": [895, 896, 898, 913, 931], "o5": [898, 913], "o83071": 230, "ob": [1, 110, 139, 939], "obesrvation_metadata_f": 922, "obf": 221, "obj": [232, 245, 266, 270, 1046, 1097], "object": [0, 1, 2, 3, 16, 48, 53, 65, 68, 69, 70, 79, 82, 85, 86, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 146, 149, 150, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 264, 266, 268, 270, 275, 276, 282, 285, 288, 293, 294, 300, 302, 303, 304, 305, 306, 312, 314, 315, 316, 317, 318, 322, 323, 329, 332, 335, 340, 341, 347, 350, 353, 358, 359, 365, 368, 371, 372, 375, 377, 379, 382, 384, 395, 396, 400, 403, 404, 411, 412, 414, 415, 416, 421, 422, 423, 424, 431, 450, 453, 455, 465, 466, 470, 473, 474, 479, 480, 482, 483, 488, 489, 490, 491, 497, 499, 501, 504, 506, 516, 517, 521, 524, 525, 530, 531, 533, 535, 540, 541, 542, 543, 550, 552, 554, 557, 559, 570, 571, 575, 578, 579, 586, 587, 589, 590, 591, 596, 597, 598, 599, 607, 611, 613, 616, 618, 628, 629, 630, 631, 632, 633, 634, 635, 636, 641, 642, 643, 644, 653, 663, 665, 669, 677, 678, 683, 701, 702, 706, 715, 716, 718, 725, 729, 739, 740, 743, 751, 752, 754, 755, 756, 757, 782, 815, 826, 864, 865, 870, 871, 872, 881, 884, 896, 906, 907, 908, 909, 934, 939, 941, 942, 943, 946, 949, 966, 974, 981, 1013, 1018, 1020, 1029, 1032, 1033, 1054, 1055, 1078, 1090, 1092, 1095, 1097], "obs_id": [911, 913, 918], "obs_map": 909, "obs_phi": 897, "observ": [1, 116, 119, 128, 131, 139, 143, 144, 149, 214, 404, 430, 474, 496, 525, 549, 579, 606, 632, 647, 683, 759, 850, 875, 878, 879, 881, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 948, 1000, 1028, 1094, 1097], "observation_column_nam": [902, 943], "observation_group_metadata": [881, 912], "observation_id": [881, 918, 926, 931], "observation_index": 881, "observation_metadata": 881, "observation_metadata_f": 922, "observed_char": [404, 474, 525, 579, 632], "observed_featur": 139, "obsolet": 227, "obtain": [117, 358, 384, 455, 506, 559, 611, 618, 660, 661, 675, 683, 701, 713, 723, 736, 747, 749, 751, 753, 755, 1049, 1050, 1051], "obviou": 225, "oc": 219, "occur": [53, 216, 220, 221, 224, 225, 265, 269, 272, 415, 483, 535, 590, 611, 636, 879, 973, 982], "occurr": [113, 138, 396, 408, 409, 410, 413, 466, 476, 477, 478, 481, 517, 527, 528, 529, 532, 534, 571, 583, 584, 585, 588, 629], "oct": [220, 222], "odot": [690, 697], "off": [121, 134, 377, 499, 552, 695, 878, 972, 1028, 1032, 1097], "offer": 1055, "offici": 214, "offset": [221, 222], "often": [1, 116, 141, 145, 219, 220, 222, 701, 759, 865, 870, 875, 1053], "oh": 1089, "ol": 116, "old": 946, "older": 227, "om": [881, 948], "omic": 680, "ominu": 696, "omit": [13, 45, 225, 358, 371, 701, 937, 987, 1021, 1023, 1028, 1090], "ommit": 228, "onc": [119, 220, 232, 1022], "one": [0, 1, 82, 83, 84, 85, 89, 90, 92, 98, 99, 100, 116, 117, 118, 121, 126, 132, 141, 143, 144, 174, 198, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 244, 265, 269, 289, 291, 315, 318, 320, 336, 338, 354, 356, 358, 387, 392, 395, 408, 409, 410, 411, 412, 413, 414, 446, 458, 463, 465, 476, 477, 478, 479, 480, 481, 482, 499, 509, 514, 516, 527, 528, 529, 530, 531, 532, 533, 534, 562, 567, 570, 583, 584, 585, 586, 587, 588, 589, 621, 626, 628, 633, 634, 635, 649, 653, 665, 683, 702, 706, 716, 729, 740, 747, 752, 753, 755, 756, 759, 760, 761, 850, 866, 869, 870, 877, 878, 879, 894, 897, 922, 933, 964, 966, 967, 973, 987, 1000, 1005, 1013, 1090, 1095, 1097], "one_to_mani": 897, "one_to_many_md_kei": 897, "one_to_many_mod": 897, "ones": [13, 17, 44, 865, 878, 922], "onli": [0, 1, 53, 92, 119, 122, 132, 149, 174, 198, 217, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 272, 286, 287, 303, 318, 333, 334, 351, 352, 358, 367, 372, 377, 395, 402, 436, 465, 472, 499, 516, 523, 552, 570, 577, 611, 628, 649, 663, 680, 683, 695, 715, 725, 739, 740, 742, 747, 751, 755, 756, 849, 850, 865, 870, 872, 877, 878, 879, 895, 896, 897, 905, 907, 919, 944, 970, 973, 974, 976, 979, 982, 1005, 1013, 1018, 1022, 1035, 1078, 1095, 1097], "onlin": [121, 126, 221], "ons": 229, "onto": [232, 263, 871, 1028], "ontologi": 223, "ontology_term": 223, "oo": 1090, "open": [0, 93, 97, 98, 99, 100, 101, 102, 103, 146, 172, 173, 185, 186, 215, 216, 221, 232, 243, 245, 264, 265, 266, 268, 269, 270, 273, 274, 319, 321, 373, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 862, 863, 907, 932, 943, 947, 1006, 1027, 1054, 1089, 1090], "open_fil": 1054, "open_filehandl": 1090, "oper": [1, 3, 82, 85, 92, 143, 215, 220, 225, 316, 377, 406, 407, 499, 552, 581, 582, 611, 680, 682, 695, 696, 697, 701, 702, 737, 753, 754, 870, 892, 893, 895, 896, 897, 901, 907, 920, 924, 933, 934, 935, 936, 937, 938, 941, 944, 987, 1011, 1028, 1056, 1089, 1090, 1092], "operon": 293, "opinion": 118, "oplu": 695, "oppos": [756, 1097], "optim": [1, 53, 117, 141, 143, 144, 145, 755, 980, 1030], "option": [13, 15, 19, 34, 45, 47, 52, 53, 65, 82, 84, 85, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 110, 111, 116, 121, 122, 123, 128, 132, 135, 141, 143, 144, 145, 146, 149, 161, 172, 173, 185, 186, 209, 210, 211, 212, 217, 218, 220, 221, 226, 227, 229, 230, 231, 233, 243, 244, 245, 264, 265, 266, 268, 269, 270, 272, 286, 290, 291, 292, 293, 303, 314, 318, 319, 320, 321, 333, 337, 338, 339, 351, 355, 356, 357, 358, 367, 370, 371, 373, 374, 375, 376, 377, 382, 394, 395, 396, 400, 402, 403, 404, 407, 415, 417, 418, 419, 421, 423, 426, 429, 430, 435, 436, 445, 446, 447, 453, 465, 466, 470, 472, 473, 474, 483, 484, 485, 486, 488, 490, 493, 495, 496, 498, 499, 504, 516, 517, 521, 523, 524, 525, 535, 536, 537, 538, 540, 542, 545, 548, 549, 551, 552, 557, 569, 570, 571, 575, 577, 578, 579, 582, 590, 592, 593, 594, 596, 598, 601, 605, 606, 608, 609, 610, 611, 616, 628, 629, 630, 631, 632, 636, 637, 638, 639, 641, 643, 645, 647, 648, 660, 663, 665, 669, 670, 676, 679, 683, 688, 689, 690, 692, 693, 702, 713, 715, 716, 718, 719, 724, 736, 739, 740, 742, 743, 744, 750, 751, 752, 753, 754, 755, 756, 757, 759, 794, 849, 861, 862, 863, 865, 866, 869, 870, 872, 873, 876, 877, 878, 879, 880, 892, 893, 894, 897, 898, 900, 901, 904, 905, 907, 912, 913, 914, 917, 918, 919, 920, 921, 922, 925, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 949, 970, 987, 992, 1006, 1013, 1020, 1021, 1027, 1028, 1029, 1032, 1033, 1054, 1055, 1056, 1078, 1092, 1097], "or_f": 226, "oral": 1, "orcutt": 661, "ord_r": 226, "order": [1, 53, 75, 80, 86, 91, 92, 95, 141, 145, 213, 215, 220, 224, 225, 226, 227, 230, 285, 290, 315, 332, 337, 350, 355, 358, 359, 365, 368, 372, 374, 377, 392, 401, 404, 430, 434, 436, 447, 463, 471, 474, 496, 499, 514, 522, 525, 549, 552, 567, 576, 579, 606, 609, 626, 632, 647, 651, 653, 660, 663, 675, 683, 688, 699, 704, 706, 713, 715, 723, 727, 729, 736, 739, 742, 747, 749, 751, 752, 753, 754, 755, 756, 759, 864, 873, 877, 878, 907, 927, 935, 936, 941, 999, 1018, 1019, 1020, 1028, 1030, 1032, 1095, 1097], "ordin": [1, 212, 755, 1033, 1034, 1089], "ordination_result": 850, "ordinationresult": [212, 226, 755, 864, 865, 870, 871, 872, 1033], "org": [53, 104, 146, 213, 214, 220, 221, 222, 227, 229, 230, 290, 337, 355, 358, 371, 374, 671, 694, 698, 700, 702, 720, 725, 737, 745, 751, 752, 753, 754, 755, 861, 881, 907, 908, 941, 948, 1029], "organ": [1, 219, 222, 231], "organis": 222, "orient": [760, 861, 877, 907, 941, 1010, 1090], "origin": [1, 3, 15, 18, 19, 47, 51, 52, 98, 100, 101, 103, 108, 109, 112, 115, 116, 119, 120, 124, 125, 132, 133, 135, 136, 143, 144, 146, 217, 218, 220, 225, 227, 228, 287, 291, 292, 334, 338, 339, 352, 356, 357, 375, 395, 465, 516, 570, 611, 628, 751, 752, 753, 754, 755, 759, 864, 872, 880, 897, 905, 928, 944, 972, 1028, 1029, 1095, 1097], "orthogon": [689, 690, 698], "ortholog": [881, 948], "orthonorm": [689, 690, 698, 699], "orthornorm": 689, "ostel": 220, "other": [0, 1, 15, 47, 53, 70, 79, 89, 90, 92, 116, 131, 146, 219, 220, 221, 222, 224, 225, 227, 229, 230, 231, 272, 276, 282, 294, 300, 306, 312, 317, 323, 329, 341, 347, 358, 359, 365, 372, 377, 382, 391, 400, 406, 407, 412, 414, 416, 421, 422, 423, 424, 427, 437, 443, 453, 462, 470, 480, 482, 488, 489, 490, 491, 494, 499, 504, 513, 521, 531, 533, 540, 541, 542, 543, 546, 552, 557, 566, 575, 581, 582, 587, 589, 591, 596, 597, 598, 599, 602, 611, 616, 625, 630, 634, 635, 641, 642, 643, 644, 646, 649, 651, 658, 677, 683, 688, 701, 704, 711, 725, 727, 734, 755, 850, 861, 864, 865, 870, 877, 879, 882, 890, 894, 898, 903, 918, 922, 949, 972, 973, 974, 980, 982, 983, 1032, 1055, 1066, 1089, 1090, 1091, 1092, 1095, 1097], "other_vertebr": 216, "otherwis": [50, 53, 66, 82, 85, 95, 110, 111, 220, 222, 225, 228, 229, 272, 289, 322, 336, 354, 430, 496, 549, 606, 647, 650, 651, 653, 658, 663, 703, 704, 706, 711, 715, 726, 727, 729, 734, 739, 742, 756, 884, 900, 904, 916, 922, 928, 931, 1007, 1092], "otu": [1, 130, 229, 881, 894, 895, 896, 897, 898, 902, 906, 907, 908, 913, 918, 922, 928, 930, 931, 935, 936, 941, 943, 944, 948], "otu1": 902, "otu2": 902, "otu_id": [116, 132, 143, 144], "otuid": 229, "our": [1, 118, 221, 229, 232, 244, 273, 417, 484, 536, 592, 637, 850, 875, 878, 879, 880, 1092, 1097], "out": [84, 218, 228, 229, 232, 284, 331, 349, 861, 905, 937, 973, 974, 1097], "out_f": [782, 815, 826], "out_fh": 701, "outcom": [134, 878], "outer": [91, 92, 395, 465, 516, 570, 628, 664], "outfmt": [215, 216], "output": [2, 92, 215, 216, 218, 225, 227, 228, 230, 420, 487, 539, 595, 640, 688, 751, 755, 756, 794, 865, 891, 897, 902, 942, 943, 1021, 1029, 1089, 1097], "outsid": [221, 293, 317, 404, 474, 525, 579, 632], "over": [75, 80, 91, 146, 220, 221, 228, 229, 230, 387, 392, 458, 463, 509, 514, 562, 567, 621, 626, 649, 688, 757, 771, 793, 804, 837, 848, 875, 876, 884, 894, 897, 898, 917, 918, 919, 921, 924, 925, 930, 933, 937, 944, 958, 996, 999, 1002, 1003, 1004, 1016, 1019, 1022, 1095], "overal": [881, 948], "overhead": [849, 907], "overlap": [121, 318, 372, 418, 419, 485, 486, 537, 538, 593, 594, 638, 639, 660, 679, 688, 713, 736, 922, 973], "overrid": [53, 99, 102, 132, 233, 243, 244, 245, 264, 268, 371, 1005, 1097], "overridden": [53, 65, 222, 1029], "override_skip_babp": 53, "overriden": [243, 244, 245], "overview": 1029, "own": [82, 85, 92, 213, 220, 226, 230, 232, 875], "owner": 1039, "oxfordjourn": 221, "oxtobi": 219, "p": [1, 53, 104, 116, 125, 126, 132, 499, 683, 688, 698, 701, 751, 753, 754, 755, 756, 759, 850, 864, 865, 866, 872, 875, 878, 879, 937], "p26204": 219, "p__b": 897, "p__c": 897, "p_adjust": [683, 688], "p_i": [112, 114, 135, 136], "p_valu": [1, 753, 759], "pack": 3, "packag": [53, 104, 106, 142, 217, 220, 225, 227, 688, 698, 701, 751, 752, 753, 754, 755, 758, 864, 865, 872, 875, 1095, 1096], "pad": [92, 227, 395, 465, 516, 570, 628], "page": [118, 683, 1029, 1095], "pair": [0, 1, 50, 89, 98, 99, 100, 102, 105, 143, 144, 145, 149, 219, 221, 222, 223, 225, 230, 314, 318, 412, 480, 531, 587, 634, 649, 653, 660, 675, 679, 683, 706, 713, 723, 729, 736, 740, 747, 749, 756, 875, 989, 1018, 1092], "pairwis": [34, 44, 45, 50, 145, 146, 149, 210, 665, 683, 694, 716, 740, 756, 759, 897, 919, 980, 1018, 1095], "pairwise_dist": 145, "pairwise_func": 145, "pam": [499, 649, 661], "pam250": 661, "pam30": 661, "pam70": 661, "pancoro": 219, "panda": [1, 65, 90, 95, 145, 209, 215, 216, 231, 291, 292, 322, 338, 339, 356, 357, 358, 375, 377, 414, 482, 499, 533, 552, 589, 635, 672, 683, 688, 721, 746, 747, 751, 752, 754, 755, 756, 760, 794, 838, 850, 861, 877, 878, 895, 924, 940, 987, 1032, 1092], "paper": 229, "papilionoidea": 219, "par_dist": 759, "parallel": [118, 146], "paramet": [1, 3, 13, 14, 15, 16, 19, 20, 34, 44, 45, 46, 47, 48, 50, 52, 53, 54, 65, 67, 70, 79, 82, 84, 85, 86, 88, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 149, 150, 161, 172, 173, 174, 185, 186, 187, 198, 209, 210, 211, 212, 232, 233, 243, 244, 245, 256, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 276, 282, 285, 286, 288, 290, 291, 292, 293, 294, 300, 303, 306, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 329, 332, 333, 335, 337, 338, 339, 341, 347, 350, 351, 353, 355, 356, 357, 358, 359, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 382, 384, 391, 394, 395, 396, 400, 402, 403, 404, 407, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 429, 430, 431, 433, 434, 435, 436, 437, 443, 445, 446, 447, 450, 453, 455, 462, 465, 466, 470, 472, 473, 474, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 504, 506, 513, 516, 517, 521, 523, 524, 525, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 554, 557, 559, 566, 569, 570, 571, 575, 577, 578, 579, 582, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 605, 606, 607, 608, 609, 610, 611, 613, 616, 618, 625, 628, 629, 630, 631, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 658, 660, 661, 663, 664, 665, 667, 668, 669, 670, 675, 676, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 706, 711, 713, 715, 716, 717, 718, 719, 723, 724, 726, 727, 729, 734, 736, 739, 740, 741, 742, 743, 744, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 782, 794, 815, 826, 838, 849, 861, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 884, 892, 893, 894, 895, 896, 897, 898, 900, 901, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 949, 964, 966, 967, 970, 971, 972, 973, 974, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1034, 1035, 1052, 1053, 1054, 1055, 1056, 1066, 1067, 1078, 1097], "parametr": [110, 680, 683, 751, 754], "params_guess": 128, "parasit": 759, "pardi": 132, "parent": [219, 223, 225, 231, 611, 698, 949, 966, 969, 981, 984, 993, 1001, 1005, 1014, 1020, 1023, 1025, 1026, 1095], "parent_tax_id": [231, 987], "parenthes": 1095, "parenthesi": 225, "parker": 108, "pars": [220, 221, 222, 224, 232, 906, 907, 908, 909, 1090], "parse_biom_t": 907, "parse_f": 907, "parser": [223, 225, 1090], "part": [215, 220, 222, 225, 228, 677, 681, 698, 849, 930, 999, 1055, 1095], "partial": [53, 132, 317, 884], "partial_beta_divers": 146, "partialdistancematrix": 146, "particip": 879, "particuarli": 220, "particular": [1, 949, 1031, 1097], "particularli": 971, "partit": [698, 699, 897], "pass": [1, 65, 72, 85, 93, 94, 97, 104, 141, 145, 146, 147, 148, 172, 173, 185, 186, 215, 217, 220, 222, 227, 228, 230, 243, 244, 245, 257, 263, 264, 265, 266, 267, 268, 269, 270, 272, 319, 321, 373, 376, 377, 400, 402, 404, 426, 427, 435, 446, 470, 472, 474, 493, 494, 498, 499, 521, 523, 525, 545, 546, 551, 552, 575, 577, 579, 601, 602, 610, 611, 630, 632, 645, 646, 648, 653, 670, 676, 706, 719, 724, 729, 740, 742, 744, 750, 753, 756, 794, 862, 863, 878, 918, 931, 932, 947, 995, 997, 1006, 1027, 1029, 1078, 1095, 1097], "passthrough": 95, "password": 232, "patch": 263, "path": [3, 13, 14, 15, 16, 17, 18, 19, 34, 44, 45, 46, 47, 48, 50, 51, 52, 87, 214, 218, 220, 221, 228, 272, 290, 337, 355, 371, 374, 897, 965, 1053], "pathwai": [881, 897, 948], "pattern": [231, 403, 431, 473, 497, 524, 550, 578, 607, 631, 850, 1092, 1097], "paw": [499, 534, 547], "pawhea": 0, "pawlowski": [680, 694, 700], "pc": [1, 760, 861], "pca": [864, 870, 872], "pcbi": [694, 700], "pcoa": [1, 226, 755, 851, 861, 871], "pcoa_result": 861, "pcr": 879, "pd": [1, 65, 85, 90, 95, 116, 132, 141, 209, 215, 216, 231, 322, 414, 482, 533, 589, 611, 635, 660, 672, 675, 683, 688, 701, 713, 721, 723, 736, 746, 747, 749, 751, 752, 755, 760, 850, 851, 861, 864, 872, 877, 878, 895, 924, 940, 987, 988, 1032], "pd_": 132, "pdf": 228, "pdist": [1, 142, 145, 148, 210, 759], "pearson": [220, 753, 756, 759, 974], "pearsonr": [753, 759, 875], "peerj": 132, "penal": [98, 99, 100], "penalize_terminal_gap": [98, 99, 100], "penalti": [0, 53, 98, 99, 100, 101, 102, 103], "pentapetala": 219, "per": [3, 34, 92, 215, 216, 228, 230, 377, 499, 552, 611, 688, 756, 759, 849, 872, 878, 879, 938, 967, 1054], "percent": [215, 1092], "percentag": [215, 680], "percentil": 683, "percentile_df": 683, "perfect": [850, 865], "perform": [0, 1, 3, 53, 91, 92, 104, 116, 128, 141, 143, 144, 145, 146, 212, 220, 221, 229, 294, 372, 377, 434, 447, 499, 552, 609, 611, 651, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 694, 695, 696, 697, 699, 700, 702, 704, 725, 727, 737, 740, 755, 756, 759, 760, 761, 783, 827, 838, 850, 870, 872, 873, 879, 880, 884, 897, 928, 931, 937, 950, 951, 975, 978, 985, 996, 1002, 1003, 1004, 1013, 1025, 1026, 1032, 1090], "period": [229, 290, 337, 355, 374], "periton": 878, "perm_stat": 759, "permanova": [751, 755], "permdisp2": 755, "permiss": [220, 225, 227], "permit": [3, 225, 244], "permut": [1, 294, 751, 753, 754, 755, 756, 759], "perspect": 132, "pertain": 758, "perturb": [680, 696], "petchei": 116, "peter": 221, "pfam": 230, "pg": 114, "pgc": 231, "ph": 752, "phagocyt": 878, "phase": [222, 223], "phe": 499, "phenylalanin": 499, "php": 220, "phred": [220, 221], "phred_offset": [221, 228], "phydiv": 116, "phylip": [93, 97, 220, 225, 1028, 1090, 1095], "phylip_multiple_alignment_format": 227, "phylipformaterror": 227, "phylo": 227, "phylochip": [116, 143, 144], "phylogenet": [1, 116, 132, 143, 144, 225, 227, 701, 759, 949, 972, 982, 1029, 1089, 1092], "phylogeni": [227, 758, 759], "phylum": 987, "physic": [871, 879], "pick": [53, 878], "pickl": [6, 24, 37, 57, 73, 153, 164, 177, 190, 201, 236, 249, 278, 296, 308, 325, 343, 361, 385, 439, 456, 507, 560, 619, 654, 707, 730, 764, 775, 786, 797, 808, 819, 830, 841, 854, 885, 955, 1040, 1059, 1071, 1082], "pident": [215, 216], "pie": 114, "piec": 1097, "pielou": [133, 137], "pielou_": 120, "piet": 865, "pii": 217, "ping": [53, 104], "pipe": 231, "pirrung": 861, "pisc": 121, "pitfal": 84, "pizetti": 118, "place": [95, 225, 230, 372, 446, 849, 870, 873, 905, 928, 931, 941, 944, 966, 991, 1023, 1033], "placebo": [683, 688], "plain": [217, 220, 221, 222, 225, 227, 228], "plan": 229, "planetmath": 725, "plankton": 108, "plant": [140, 219, 698], "plastid": 231, "pleas": [72, 93, 97, 172, 173, 185, 186, 220, 228, 319, 321, 373, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 862, 863, 932, 947, 1006, 1027, 1094], "pleij": 230, "plm": [2, 218], "pln": [219, 231], "plo": [53, 104, 122, 123, 694, 700], "ploson": [53, 104], "plot": [1, 851], "plu": [231, 377, 499, 552], "plugin": 229, "plural": [1, 274], "pm": 115, "pmid": [230, 753, 1029], "png": 851, "point": [84, 118, 121, 123, 213, 217, 229, 232, 244, 293, 358, 420, 427, 430, 487, 494, 496, 539, 546, 549, 595, 602, 606, 640, 646, 647, 661, 755, 761, 783, 838, 850, 861, 878, 879, 1011, 1032, 1053], "poisson": [122, 123], "polymeras": 230, "pone": [53, 104], "pool": 107, "poorli": [759, 870], "pop": [1005, 1007, 1008, 1012], "popul": [110, 117, 119, 139, 228, 230, 420, 487, 539, 595, 640, 695, 757, 875, 879], "port": 229, "portal": 231, "portion": 753, "pos_rat": 879, "posit": [0, 3, 13, 14, 15, 16, 18, 34, 45, 46, 47, 48, 51, 53, 65, 66, 70, 79, 82, 83, 84, 85, 86, 88, 90, 91, 92, 95, 98, 99, 100, 101, 102, 103, 104, 105, 215, 216, 217, 220, 221, 222, 225, 227, 228, 229, 230, 377, 382, 384, 387, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 414, 415, 417, 420, 421, 422, 423, 424, 425, 427, 428, 432, 433, 434, 446, 447, 453, 455, 458, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 482, 483, 484, 487, 488, 489, 490, 491, 492, 494, 499, 504, 506, 509, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 526, 533, 535, 536, 539, 540, 541, 542, 543, 544, 546, 547, 552, 557, 559, 562, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 589, 590, 592, 595, 596, 597, 598, 599, 600, 602, 603, 604, 608, 609, 611, 616, 618, 621, 625, 626, 627, 628, 629, 631, 635, 636, 637, 640, 641, 642, 643, 644, 646, 681, 682, 683, 692, 753, 759, 838, 851, 875, 876, 878, 879, 884, 911, 924, 1001, 1092], "positional_metadata": [65, 70, 83, 90, 91, 92, 220, 230, 377, 382, 394, 395, 398, 414, 420, 427, 428, 448, 453, 465, 468, 482, 487, 494, 499, 504, 516, 519, 533, 539, 546, 552, 557, 569, 570, 573, 589, 595, 602, 603, 611, 616, 628, 635, 640, 646, 1092], "possibl": [1, 53, 72, 133, 137, 220, 221, 229, 230, 317, 401, 434, 447, 471, 522, 576, 609, 752, 756, 878, 974, 1022, 1028], "post": [227, 875, 879], "posterior": [688, 949], "postmenopaus": 879, "postord": [979, 982, 996, 999, 1003, 1004, 1019, 1022, 1095], "potenti": [220, 417, 484, 536, 592, 637, 849, 1008, 1030, 1097], "pound": [229, 358], "power": [680, 688, 881, 948, 1090], "pp": [117, 127, 134, 865], "ppo": [215, 216], "practic": [1, 92, 132, 220, 221, 228, 849, 977, 982], "pre": [403, 431, 473, 497, 524, 550, 578, 607, 631, 649, 661, 666, 879], "pre_and_postord": [996, 999, 1002, 1004, 1019, 1022], "pre_rat": 879, "prealloc": 1055, "preced": [53, 217, 225, 227], "precomput": 874, "predefin": [223, 400, 470, 521, 575, 630], "predict": [122, 123, 230, 878], "prefer": [84, 141, 145, 221, 290, 337, 355, 374, 864, 865], "prefer_self": 922, "prefix": 231, "preliminari": 878, "premenopaus": 879, "preorder": [996, 999, 1002, 1003, 1019, 1022, 1095], "prepar": 229, "preq1": 222, "presenc": [111, 132, 437, 446, 879, 929], "present": [83, 84, 116, 143, 144, 215, 218, 220, 226, 229, 230, 304, 305, 358, 377, 394, 397, 398, 399, 404, 405, 415, 425, 428, 446, 467, 468, 469, 474, 475, 483, 492, 499, 518, 519, 520, 525, 526, 535, 544, 547, 552, 569, 572, 573, 574, 579, 580, 590, 600, 603, 632, 636, 663, 683, 715, 739, 751, 752, 754, 755, 794, 860, 870, 879, 880, 897, 906, 907, 946, 973, 1028, 1029, 1031, 1095], "preserv": [225, 358, 850, 864, 865, 870, 1011], "press": 109, "presum": 220, "prevent": 53, "previou": [1, 98, 99, 100, 101, 102, 103, 382, 453, 504, 557, 616, 751, 753, 755], "previous": [0, 420, 427, 487, 494, 539, 546, 595, 602, 640, 646, 1097], "pri": 231, "primari": [232, 1092], "primer": 752, "princip": [1, 755, 861, 864, 870, 871], "principl": 875, "print": [0, 1, 91, 116, 143, 144, 217, 220, 221, 222, 223, 225, 227, 228, 230, 401, 417, 430, 434, 447, 471, 484, 496, 522, 536, 549, 576, 592, 606, 609, 611, 637, 647, 701, 753, 759, 760, 849, 875, 879, 894, 895, 896, 897, 898, 901, 905, 911, 913, 914, 918, 919, 920, 921, 922, 925, 928, 929, 930, 931, 935, 936, 937, 943, 944, 946, 950, 951, 966, 967, 970, 971, 974, 975, 976, 978, 979, 981, 982, 983, 985, 987, 988, 990, 993, 994, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1092, 1095, 1097], "printabl": [221, 228], "prior": [446, 753, 756, 937, 987, 1056, 1066, 1097], "prioriti": [132, 1067, 1068, 1097], "privat": [222, 967], "prng": 849, "pro": 499, "prob": [65, 70, 83, 91], "probabl": [112, 122, 123, 134, 688, 760, 772, 849, 864, 875, 879, 949], "problem": [229, 683, 870], "problemat": [229, 1020], "proc": [100, 103], "procedur": [755, 1090], "proceed": 661, "process": [146, 220, 230, 317, 688, 872, 942, 943, 1031, 1056, 1097], "process_func": 909, "processor": 1097, "prod": [686, 698], "produc": [215, 216, 227, 228, 243, 417, 484, 536, 592, 637, 864, 872], "product": [0, 293, 691, 753], "program": [224, 225, 229, 231], "progress": 752, "project": [146, 221, 681, 698, 751, 752, 753, 754, 755, 871], "prolin": 499, "promis": 683, "pronounc": [881, 948, 1089], "prop_expl": [760, 761, 783, 794, 827, 838], "propag": 611, "properli": [225, 272], "properti": [217, 227, 231, 372, 437, 443, 448, 649, 665, 716, 725, 740, 875, 969, 1005, 1035, 1047, 1049, 1050, 1051, 1091], "proport": [112, 114, 118, 119, 128, 132, 135, 136, 226, 407, 582, 678, 680, 681, 683, 684, 685, 686, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 751, 753, 754, 760, 794, 838, 851, 864, 870, 872, 972], "proportion": [694, 700], "proportion_explain": [850, 851], "propos": [135, 1029], "prot": 219, "protein": [0, 2, 53, 65, 84, 98, 100, 103, 104, 161, 174, 215, 217, 218, 219, 220, 221, 222, 227, 228, 230, 417, 430, 433, 434, 436, 446, 447, 448, 484, 496, 592, 606, 608, 609, 611, 637, 647, 661, 878, 1092], "protein_from_dna": 1092, "protein_from_rna": 1092, "protein_id": 219, "proteinembed": 218, "proteinvector": 218, "provid": [0, 1, 2, 44, 50, 53, 65, 82, 84, 85, 93, 94, 99, 102, 104, 106, 116, 121, 132, 141, 142, 143, 144, 145, 172, 185, 215, 218, 220, 221, 225, 227, 229, 230, 231, 232, 243, 245, 264, 265, 268, 269, 271, 273, 288, 290, 319, 335, 337, 353, 355, 358, 371, 372, 373, 374, 382, 404, 417, 420, 426, 430, 453, 474, 484, 487, 493, 496, 504, 525, 536, 539, 545, 549, 552, 557, 579, 592, 595, 601, 606, 611, 616, 632, 637, 640, 645, 647, 649, 665, 670, 675, 680, 688, 701, 702, 716, 719, 723, 740, 744, 749, 751, 752, 753, 754, 755, 757, 760, 794, 849, 850, 851, 861, 862, 866, 875, 877, 878, 880, 881, 892, 900, 902, 905, 907, 912, 914, 915, 920, 921, 923, 925, 930, 931, 932, 937, 941, 942, 944, 946, 948, 971, 979, 987, 1000, 1006, 1010, 1013, 1020, 1028, 1029, 1056, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097], "proxim": 850, "prune": [970, 1012, 1023, 1024], "psa": [98, 101], "pseudo": [754, 875], "pseudocount": [680, 683, 688], "pseudoknot": 230, "pub": [219, 231, 293], "public": [132, 221, 861], "publish": [221, 230], "pubm": [219, 222, 611], "pull": 220, "pure": [0, 1030], "purin": [377, 402, 472, 523, 577, 1092], "purpos": [0, 1, 104, 107, 229, 231, 436, 875, 1097], "put": [379, 450, 501, 554, 613], "pvalu": 688, "pwmantel": 753, "pwr": 878, "pwr_001": 875, "pwr_010": 875, "pwr_100": 875, "pwr_est": 879, "pwr_est2": 879, "py": [221, 232], "pycog": [116, 143, 144, 1028], "pyl": 499, "pyrimidin": [377, 402, 577], "pyrosequenc": [116, 143, 144], "pyrrolysin": 499, "python": [0, 1, 20, 611, 701, 725, 753, 1030, 1035, 1089, 1090, 1092], "q": [53, 121, 216, 499, 865, 866], "q2": 229, "q2cli": 229, "qacc": [215, 216], "qaccver": [215, 216], "qcov": [215, 216], "qcovhsp": [215, 216], "qend": [215, 216], "qframe": [215, 216], "qgi": [215, 216], "qiim": [116, 143, 144, 229, 358], "qiime2": [229, 290, 337, 355, 358, 371, 374], "qiita": 229, "qiu": 759, "qlen": [215, 216], "qseq": [215, 216, 426, 493, 545, 601, 645], "qseqid": [215, 216], "qstart": [215, 216], "qual": 221, "qual_fl": 220, "qualifi": [219, 222], "qualit": [143, 144, 861], "qualiti": [90, 220, 228, 377, 382, 394, 398, 414, 428, 453, 468, 482, 499, 504, 519, 533, 552, 557, 569, 573, 589, 603, 611, 616, 635, 861, 1092], "quantifi": 1, "quantil": [121, 688], "quantit": [132, 143, 144, 864, 879], "quantiti": 144, "quartil": 121, "queri": [0, 50, 53, 104, 215, 216, 303, 370, 611], "query1": 216, "query_begin": 20, "query_sequ": [0, 20, 53, 54], "quick": [653, 706, 729, 737, 861, 864], "quit": 1097, "quot": 225, "qvalu": 688, "r": [1, 53, 116, 117, 121, 122, 123, 124, 125, 132, 143, 144, 221, 222, 231, 272, 377, 499, 552, 661, 680, 681, 682, 686, 687, 688, 689, 690, 698, 751, 752, 753, 754, 755, 759, 861, 864, 865, 872, 896, 971, 1012], "r1": 1092, "r2": 1092, "r3": 1092, "r4": 1092, "r5": 1092, "r_i": 698, "r_m": 753, "ra": [219, 230], "raaijmak": 128, "raimon": 698, "rais": [65, 82, 84, 85, 88, 92, 94, 96, 107, 116, 117, 118, 132, 141, 143, 144, 145, 149, 211, 220, 221, 227, 232, 243, 244, 245, 264, 265, 266, 268, 269, 270, 285, 317, 332, 350, 368, 371, 372, 379, 395, 396, 400, 402, 404, 415, 416, 418, 419, 421, 422, 423, 424, 430, 446, 448, 450, 465, 466, 470, 472, 474, 483, 485, 486, 488, 489, 490, 491, 496, 501, 516, 517, 521, 523, 525, 535, 537, 538, 540, 541, 542, 543, 549, 554, 570, 571, 575, 577, 579, 590, 591, 593, 594, 596, 597, 598, 599, 606, 613, 628, 629, 630, 632, 636, 638, 639, 641, 642, 643, 644, 647, 653, 660, 661, 663, 664, 665, 668, 675, 678, 679, 685, 692, 693, 699, 706, 713, 715, 716, 717, 723, 729, 736, 739, 740, 741, 749, 751, 752, 753, 755, 756, 794, 838, 849, 861, 864, 865, 870, 878, 879, 880, 881, 884, 892, 894, 898, 900, 901, 905, 906, 907, 912, 913, 914, 915, 918, 919, 920, 921, 923, 924, 925, 931, 933, 934, 937, 944, 946, 948, 964, 971, 972, 974, 977, 979, 980, 982, 983, 985, 987, 989, 995, 997, 1000, 1010, 1011, 1012, 1013, 1018, 1023, 1032, 1033, 1034, 1035], "rand": [161, 174, 757], "randint": 875, "randn": [875, 878, 879], "random": [115, 117, 128, 161, 174, 213, 688, 751, 755, 757, 849, 865, 875, 877, 878, 879, 880, 937, 974, 1013], "random_fn": 757, "randomli": [112, 742, 751, 753, 754, 757, 849, 880, 937, 974, 1013], "randomst": [974, 1013], "rang": [90, 112, 121, 133, 144, 221, 222, 229, 394, 398, 404, 414, 417, 428, 468, 474, 482, 484, 519, 525, 533, 536, 569, 573, 579, 589, 592, 603, 632, 635, 637, 751, 752, 861, 879, 913, 918, 937, 991, 1097], "rangeindex": [65, 82, 85, 94, 227], "rangle_a": [689, 691], "rank": [1, 140, 231, 683, 751, 752, 753, 874, 931, 987, 988], "rapid": [213, 220, 991], "rapidli": 1097, "rare": [107, 879], "rare_threshold": 107, "rarefact": [128, 937], "rate": [107, 649, 875], "rather": [1, 121, 225, 649, 680, 759, 1029], "ratio": [122, 133, 137, 680, 681, 682, 683, 686, 687, 689, 690, 694, 700, 879], "rational": 874, "raw": [215, 782, 815], "raw_f": [782, 815, 826], "raxml": 227, "rbwpd_": 132, "rc": [230, 394, 569, 669, 718, 743, 861], "rda": [226, 851, 864, 865], "re": [0, 1, 82, 85, 92, 116, 141, 143, 144, 145, 214, 217, 220, 221, 227, 230, 377, 403, 431, 448, 473, 497, 499, 524, 550, 552, 578, 607, 611, 631, 756, 864, 872, 874, 875, 879, 894, 937, 1020, 1095, 1097], "reach": 227, "read": [1, 53, 97, 116, 143, 144, 173, 186, 214, 215, 216, 217, 218, 221, 223, 224, 225, 226, 227, 228, 230, 231, 243, 244, 261, 263, 265, 269, 272, 273, 321, 371, 376, 377, 434, 435, 446, 447, 498, 499, 551, 552, 609, 610, 611, 648, 676, 699, 701, 724, 750, 756, 863, 896, 947, 950, 951, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 982, 983, 984, 985, 987, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1035, 1089, 1095], "read_numb": 228, "read_sequ": 20, "readabl": [213, 220, 221, 224, 225, 226, 227, 272, 1034], "reader": [93, 172, 185, 213, 214, 215, 216, 217, 218, 219, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 244, 258, 263, 264, 265, 268, 269, 319, 373, 426, 493, 545, 601, 645, 670, 719, 744, 862, 932, 1006], "readi": [0, 232], "reading_fram": [434, 446, 447, 609], "readlin": [243, 272], "real": [91, 220, 221, 228, 680, 681, 682, 686, 687, 689, 690, 695, 696, 697], "realli": 1, "reason": [1, 117, 128, 219, 225, 878, 907, 969], "reassign": [94, 227, 753], "reassign_index": [65, 82, 85, 95, 96, 227], "reca": 318, "recal": 225, "recapitul": 759, "recaptur": 107, "receiv": [232, 233, 244, 404, 474, 525, 579, 632, 1028], "recent": [227, 446, 611, 753], "receptor": 878, "reciproc": [112, 879], "recod": 84, "recogn": [229, 924, 934], "recommend": [1, 121, 132, 227, 230, 377, 448, 499, 552, 611, 683, 701, 861, 864, 872, 878], "recomput": [82, 85, 92], "reconstruct": [1005, 1029, 1089, 1092], "record": [216, 219, 220, 221, 222, 223, 228], "rectangl": 118, "recurs": [225, 967, 1025, 1026], "red": [669, 718, 743], "redefin": [753, 1035], "reduc": [146, 290, 337, 355, 374, 755, 849, 870, 897], "reduce_f": 146, "reduct": 850, "redund": [671, 702, 720, 725, 745, 872], "redundant_form": 694, "reeder": [122, 123], "ref": [215, 966], "refer": [1, 50, 53, 72, 84, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 140, 143, 144, 146, 293, 377, 436, 444, 445, 448, 499, 552, 611, 649, 661, 671, 681, 682, 683, 688, 692, 694, 698, 700, 702, 720, 725, 737, 745, 751, 752, 753, 754, 755, 759, 861, 864, 865, 872, 881, 907, 941, 948, 972, 1001, 1028, 1029, 1094], "reference_sequ": 20, "reflect": [272, 759, 1005, 1010], "regard": 688, "regardless": [53, 83, 91, 92, 230, 358, 372, 446, 667, 757], "regex": [403, 431, 473, 497, 524, 550, 578, 607, 631], "region": [223, 293, 303, 417, 484, 536, 592, 637], "regist": [97, 173, 186, 232, 233, 243, 244, 245, 257, 263, 265, 267, 269, 321, 376, 435, 498, 551, 610, 648, 676, 724, 750, 863, 947, 1027], "registri": [93, 97, 172, 173, 185, 186, 214, 218, 220, 221, 228, 319, 321, 373, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 862, 863, 932, 947, 1006, 1027, 1090], "regress": [680, 753, 872, 879], "regsistri": [257, 267], "regular": [214, 218, 225, 403, 431, 473, 497, 524, 550, 578, 607, 631, 1092], "reject": [683, 688, 875], "rel": [88, 132, 214, 219, 222, 285, 332, 350, 368, 372, 404, 406, 407, 419, 421, 423, 474, 486, 488, 490, 525, 538, 540, 542, 579, 581, 582, 594, 596, 598, 632, 639, 641, 643, 694, 700, 737, 1014, 1032, 1067, 1092], "relat": [1, 116, 117, 125, 132, 143, 144, 146, 219, 220, 224, 230, 701, 747, 864, 865, 872, 907, 941], "relationship": [1, 132, 225, 864, 865, 872, 875, 879, 897, 1029, 1093], "relax": 227, "releas": [116, 132, 143, 144, 219, 231], "relev": [1, 53, 222, 688, 878, 897, 907, 941, 1029, 1092], "reli": [131, 229, 290, 337, 355, 374, 377, 499, 552], "reliabl": 688, "reload": 221, "remain": [94, 220], "remaind": [220, 897], "rememb": [229, 293], "remot": 222, "remov": [84, 104, 116, 132, 143, 144, 161, 220, 224, 227, 284, 316, 331, 349, 398, 429, 468, 495, 519, 548, 573, 605, 901, 930, 934, 966, 981, 1001, 1005, 1008, 1012, 1023, 1092], "remove_delet": [1001, 1005, 1007, 1012], "remove_empti": 930, "renam": [222, 413, 425, 481, 492, 532, 544, 588, 600, 683], "render": 1029, "reorder": [753, 756, 970, 974], "repeat": [1, 221, 875, 1052], "repeatedli": 875, "repect": 220, "repen": 219, "replac": [1, 19, 52, 105, 128, 220, 377, 429, 432, 495, 499, 548, 552, 604, 605, 649, 680, 683, 692, 693, 849, 873, 880, 937, 944, 1020], "replic": 979, "report": [132, 229, 244, 688, 759, 872], "repres": [1, 3, 13, 15, 17, 34, 44, 47, 50, 83, 112, 114, 116, 119, 128, 135, 136, 143, 144, 146, 161, 174, 187, 198, 210, 213, 214, 215, 216, 219, 220, 224, 225, 227, 229, 230, 231, 293, 314, 322, 358, 377, 430, 496, 499, 549, 552, 606, 611, 647, 649, 653, 660, 665, 675, 689, 690, 698, 699, 706, 713, 716, 723, 729, 736, 740, 749, 759, 850, 861, 875, 884, 897, 908, 933, 938, 942, 949, 1016, 1021, 1028, 1029, 1092, 1095], "represent": [0, 1, 12, 43, 160, 170, 171, 174, 184, 196, 197, 198, 208, 213, 214, 220, 225, 229, 303, 420, 444, 487, 539, 595, 640, 659, 699, 712, 735, 758, 851, 860, 881, 884, 897, 907, 943, 948, 949, 963, 1020, 1021, 1090, 1095], "representationwarn": 1018, "reprint": 118, "reproduc": [92, 116, 143, 144], "reproduct": 879, "request": [220, 369, 660, 675, 713, 723, 736, 749, 894, 901, 913, 924, 979, 1053, 1090], "requir": [53, 116, 122, 123, 132, 143, 144, 213, 216, 217, 220, 223, 227, 230, 231, 318, 358, 371, 433, 446, 447, 608, 699, 701, 725, 753, 759, 849, 869, 877, 884, 897, 906, 971, 977, 1011, 1031, 1055, 1090, 1092, 1097], "rerun": 753, "res_metadata": 895, "res_tabl": [895, 896], "res_tre": 896, "resampl": 937, "research": [1, 231, 753, 870], "resembl": 220, "reserv": [227, 229], "reset": [82, 85, 94], "reset_index": [82, 85], "reshap": [913, 918], "resid": 849, "residu": [84, 161, 218, 872], "resolv": [146, 149, 229, 759], "resourc": [132, 229, 231, 272], "respect": [1, 65, 110, 220, 223, 226, 229, 231, 243, 244, 245, 263, 264, 266, 268, 270, 272, 358, 404, 474, 525, 579, 611, 632, 660, 665, 667, 675, 683, 698, 713, 716, 723, 736, 740, 747, 749, 759, 850, 851, 895, 896, 917, 918, 919, 938], "respons": [93, 97, 172, 173, 185, 186, 319, 321, 373, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 782, 815, 826, 850, 862, 863, 865, 872, 932, 947, 1006, 1027], "restrict": [72, 116, 143, 144, 227, 322, 358, 1092], "result": [1, 20, 53, 54, 84, 86, 92, 98, 99, 100, 116, 117, 121, 141, 143, 144, 145, 149, 212, 215, 216, 220, 229, 232, 272, 315, 370, 372, 377, 394, 395, 398, 428, 430, 465, 468, 496, 499, 516, 519, 549, 552, 569, 570, 573, 603, 606, 628, 647, 683, 688, 691, 692, 695, 740, 751, 753, 754, 755, 756, 757, 760, 771, 772, 782, 783, 793, 804, 805, 815, 816, 826, 827, 837, 848, 849, 851, 860, 861, 864, 865, 870, 872, 875, 880, 897, 898, 919, 922, 930, 937, 941, 943, 982, 998, 1012, 1020, 1021, 1028, 1029, 1033, 1090, 1092, 1097], "result_constructor": 1029, "retain": [92, 285, 332, 350, 367, 368, 395, 427, 465, 494, 516, 546, 570, 602, 628, 646, 663, 715, 739, 849, 897, 937, 946], "retriev": [286, 288, 333, 335, 351, 353, 358, 369, 370, 611, 725, 907, 911, 913], "return": [0, 1, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 74, 76, 77, 78, 79, 81, 83, 84, 86, 88, 89, 90, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 169, 172, 175, 176, 178, 179, 180, 181, 182, 183, 185, 188, 189, 191, 192, 193, 194, 195, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 215, 223, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 319, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 381, 382, 383, 384, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 614, 615, 616, 617, 618, 620, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 759, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 776, 777, 778, 779, 780, 781, 784, 785, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 810, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 883, 884, 886, 888, 889, 890, 895, 896, 897, 899, 900, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 950, 951, 952, 953, 956, 957, 959, 961, 962, 963, 964, 965, 967, 971, 972, 973, 974, 975, 976, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1028, 1029, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1048, 1052, 1053, 1054, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1092, 1097], "return_cod": [430, 496, 549, 606, 647], "reus": [53, 874], "rev": 1013, "reveal": [850, 1029], "revers": [80, 91, 95, 232, 392, 394, 416, 428, 434, 446, 447, 463, 514, 567, 569, 591, 603, 604, 609, 626, 751, 755, 935, 1013, 1092, 1097], "reverse_compl": [394, 416, 569, 591, 1092], "reverse_transcrib": 433, "review": 969, "revisit": 698, "rf": [434, 447, 609], "rfam": 230, "rho": 752, "riboswitch": [222, 293], "rice": 221, "rich": [1, 106, 110, 116, 124, 127, 132, 139], "rich_sparse_otu_table_hdf5": 907, "right": [92, 107, 135, 225, 372, 680, 681, 682, 686, 691, 695, 696, 697, 698, 991, 1032, 1033, 1097], "right_child_id": 1020, "rightarrow": [681, 682, 686, 687, 689, 690], "risk": 879, "rl": [219, 230], "rm": [230, 761, 827], "rn": [219, 230], "rna": [0, 65, 70, 99, 102, 104, 217, 219, 220, 221, 222, 227, 228, 230, 377, 395, 432, 433, 434, 436, 446, 447, 448, 465, 516, 611, 628, 688, 1092], "rna_seq": [219, 222], "robinson": 972, "robust": [132, 229, 694, 700, 755, 759], "role": [230, 649, 878], "rome": 118, "root": [1, 3, 116, 127, 132, 143, 144, 225, 231, 699, 950, 951, 964, 965, 966, 967, 969, 970, 971, 975, 978, 979, 980, 981, 984, 985, 987, 989, 993, 995, 997, 998, 1005, 1010, 1011, 1014, 1016, 1018, 1020, 1021, 1023, 1025, 1026, 1028, 1029, 1095], "root_at": [1011, 1025, 1026], "root_at_midpoint": [1010, 1029], "rosid": 219, "roughli": 128, "round": [116, 121, 128, 143, 144, 753, 875, 878, 879, 979], "roundtrip": [214, 218], "roundtripp": [290, 337, 355, 358, 374], "routin": 725, "row": [1, 65, 141, 145, 146, 149, 161, 174, 187, 198, 209, 213, 214, 218, 227, 293, 358, 649, 653, 668, 682, 683, 685, 688, 689, 690, 692, 693, 695, 696, 697, 698, 701, 702, 706, 717, 729, 741, 742, 747, 751, 752, 753, 754, 755, 756, 757, 759, 851, 864, 865, 868, 872, 878, 879, 884, 891, 902, 907, 908, 913, 917, 918, 919, 933, 934, 941, 943, 1032], "rozan": 698, "rp": 219, "rpd": 132, "rpd_": 132, "rrna": [1, 688], "rt": [219, 230], "rtol": 1032, "rubbbbrbcefgh": 228, "rule": [107, 220, 227, 229, 230, 1028], "run": [1, 3, 116, 141, 143, 144, 145, 221, 228, 229, 402, 472, 523, 577, 683, 751, 752, 753, 755, 756, 759, 771, 793, 804, 837, 848, 861, 1092, 1097], "run_numb": 228, "runtim": [220, 377, 499, 552, 1055, 1097], "runtimeerror": 117, "rvrywstlnepwvfsnsgyalgtnapgrcsasnvakpgdsgtgpyivthnqi": 219, "rvsrv": 230, "rx": 219, "rykmbdhvn": [406, 407, 581, 582], "s1": [0, 1, 114, 377, 379, 395, 396, 400, 415, 416, 421, 422, 423, 424, 450, 465, 466, 470, 483, 488, 489, 490, 491, 499, 501, 516, 517, 521, 535, 540, 541, 542, 543, 552, 554, 570, 571, 575, 590, 591, 596, 597, 598, 599, 611, 613, 628, 629, 630, 636, 641, 642, 643, 644, 683, 688, 751, 755, 894, 895, 896, 898, 900, 901, 904, 905, 911, 912, 913, 914, 915, 917, 919, 922, 923, 928, 929, 930, 931, 933, 935, 936, 937, 938, 940, 943, 944, 946], "s12064": [694, 700], "s2": [0, 1, 395, 400, 465, 470, 516, 521, 570, 575, 628, 630, 683, 688, 751, 755, 894, 895, 896, 898, 901, 904, 905, 911, 912, 913, 914, 915, 917, 919, 922, 923, 928, 929, 930, 931, 933, 935, 936, 937, 938, 940, 943, 944, 946], "s3": [683, 688, 751, 755, 894, 895, 896, 898, 904, 905, 912, 913, 914, 915, 919, 922, 923, 929, 930, 931, 933, 935, 936, 937, 938, 940, 943, 944, 946], "s4": [683, 688, 751, 755, 895, 896, 898, 904, 913], "s46826": 219, "s5": [683, 688, 751, 755, 898, 913], "s6": [683, 688, 755, 898], "s7": [755, 898], "s8": 898, "s9": 898, "s_": [1, 107, 109, 110, 128, 139], "s_i": 698, "s_max": 128, "sa": 230, "sacc": [215, 216], "saccver": [215, 216], "safe": [1, 116, 141, 143, 144, 145, 229, 870, 967], "safe_char": 225, "saga": [303, 315, 611], "sagb": [303, 315], "sagc": 303, "sai": [293, 303, 879], "saitou": 1029, "sallacc": [215, 216], "sallgi": [215, 216], "sallseqid": [215, 216], "salltitl": [215, 216], "salmo": [220, 227], "salvemini": 118, "sam_id": 918, "same": [1, 65, 83, 84, 85, 88, 92, 94, 112, 116, 121, 132, 133, 137, 143, 144, 209, 210, 211, 212, 218, 220, 221, 222, 223, 225, 228, 230, 232, 285, 306, 320, 322, 332, 350, 367, 368, 372, 382, 384, 391, 394, 395, 398, 400, 401, 417, 421, 422, 423, 424, 428, 429, 433, 436, 437, 446, 453, 455, 462, 465, 468, 470, 471, 484, 488, 489, 490, 491, 495, 504, 506, 513, 516, 519, 521, 522, 536, 540, 541, 542, 543, 548, 557, 559, 566, 569, 570, 573, 575, 576, 592, 596, 597, 598, 599, 603, 605, 608, 611, 616, 618, 625, 628, 630, 637, 641, 642, 643, 644, 651, 653, 661, 662, 663, 665, 674, 678, 679, 683, 688, 704, 706, 714, 715, 716, 722, 727, 729, 738, 739, 740, 742, 748, 751, 752, 753, 754, 755, 756, 759, 849, 864, 865, 869, 870, 872, 878, 879, 880, 884, 897, 905, 928, 944, 983, 1013, 1028, 1032, 1092, 1095], "samp_id": [911, 913], "sampl": [1, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 149, 212, 213, 214, 229, 358, 680, 683, 688, 702, 751, 752, 754, 755, 761, 794, 827, 838, 849, 851, 860, 861, 864, 865, 870, 871, 872, 875, 877, 878, 879, 892, 893, 894, 895, 896, 897, 898, 900, 901, 904, 905, 906, 907, 909, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 974, 1033, 1089, 1093], "sample1": [902, 908], "sample2": [902, 908], "sample3": 908, "sample4": 908, "sample5": 908, "sample6": 908, "sample_constraint": 851, "sample_count": [878, 879], "sample_gen": 918, "sample_group_metadata": 881, "sample_id": [881, 918, 926, 931], "sample_index": 881, "sample_map": 909, "sample_md": 1, "sample_metadata": [229, 373, 376, 881, 901], "sample_metadata_f": 922, "sample_nam": 229, "sample_typ": [905, 930], "samplea": 849, "sampleb": 849, "samplec": 849, "sampleid": [229, 906], "samplemetadata": 229, "samplerecord": 222, "sanger": 221, "sapien": 220, "sapiensaccggttggc": 227, "satisfi": [232, 318, 877, 1078], "save": [53, 303, 358, 371, 702, 782, 815, 826, 1002], "sb": 98, "sbc": 230, "sbjct": 216, "sbjctframe": 216, "sblastnam": [215, 216], "sbp": 698, "scalar": [111, 135, 430, 496, 549, 606, 647, 649, 653, 691, 697, 701, 706, 729, 861, 921, 925], "scale": [114, 752, 864, 865, 866, 872], "scale_i": 872, "scandinavian": 110, "scatter": 861, "scatterplot": [851, 861], "scenario": [218, 683], "scheme": [231, 272, 287, 291, 292, 334, 338, 339, 352, 356, 357, 358, 371, 375, 669, 718, 743], "schmidt": [689, 690], "schneider": 84, "schoch": 231, "school": 219, "schwartz": 661, "sci": [100, 103, 216, 698], "scienc": [108, 109, 116, 217, 220, 661, 865], "sciencedirect": 217, "scientif": [215, 229, 725, 850], "sciki": 220, "scikit": [0, 1, 89, 90, 93, 97, 98, 101, 104, 105, 116, 143, 144, 145, 146, 147, 148, 149, 172, 173, 185, 186, 214, 215, 216, 217, 219, 220, 221, 225, 226, 227, 228, 230, 231, 319, 321, 373, 376, 412, 414, 426, 433, 434, 435, 436, 446, 447, 480, 482, 493, 498, 531, 533, 545, 551, 587, 589, 601, 608, 609, 610, 634, 635, 645, 648, 670, 676, 677, 719, 724, 744, 750, 850, 862, 863, 932, 947, 1006, 1027, 1030, 1092, 1096], "scipi": [1, 117, 142, 145, 148, 210, 671, 678, 683, 688, 699, 702, 720, 725, 737, 745, 747, 752, 753, 755, 759, 870, 875, 878, 879, 900, 931, 941, 986], "scomnam": [215, 216], "scope": [116, 1097], "score": [0, 53, 84, 98, 99, 100, 101, 102, 103, 104, 105, 111, 215, 216, 220, 222, 223, 228, 611, 649, 664, 667, 851, 872, 1092], "score_filt": 53, "score_onli": 53, "score_s": 53, "sdbl": 979, "sdr": [121, 126], "sdrhelp": 121, "se": 230, "sea": 108, "search": [67, 98, 215, 216, 220, 286, 318, 333, 351, 370, 402, 415, 472, 483, 523, 535, 577, 590, 636, 650, 703, 726, 865, 900, 912, 915, 923, 946, 977, 982, 983, 984, 985, 1052, 1092], "sec": 499, "second": [1, 50, 53, 98, 99, 100, 101, 102, 103, 104, 218, 221, 227, 232, 245, 293, 315, 437, 653, 683, 706, 729, 879, 991, 1021, 1090, 1097], "secondari": [879, 908], "section": [92, 220, 221, 226, 229, 230, 358, 436, 611, 752, 753, 864, 865], "sediment": 108, "see": [1, 91, 92, 93, 97, 104, 116, 132, 141, 143, 144, 145, 146, 148, 149, 172, 173, 185, 186, 216, 219, 220, 221, 225, 227, 228, 229, 231, 232, 275, 319, 321, 322, 340, 358, 373, 376, 400, 426, 435, 436, 447, 470, 493, 498, 521, 545, 551, 575, 601, 610, 611, 630, 645, 648, 653, 670, 676, 689, 690, 706, 719, 724, 729, 744, 750, 751, 752, 753, 754, 755, 756, 759, 850, 861, 862, 863, 870, 872, 874, 875, 879, 881, 887, 922, 932, 947, 948, 1006, 1027, 1090, 1091, 1097], "seed": [688, 751, 755, 849, 875, 878, 879, 880, 937], "seem": 878, "seen": [219, 222, 879], "segment": [3, 14, 18, 34, 46, 51, 118], "select": [112, 132, 229, 688, 755, 877, 878, 937, 1013], "selenocystein": 499, "self": [4, 5, 7, 8, 9, 10, 11, 21, 22, 23, 25, 26, 27, 28, 29, 31, 35, 36, 38, 39, 40, 41, 42, 55, 56, 58, 59, 60, 61, 62, 64, 71, 74, 76, 78, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 169, 175, 176, 178, 179, 180, 181, 182, 183, 188, 189, 191, 192, 193, 194, 195, 199, 200, 202, 203, 204, 205, 206, 207, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 247, 248, 250, 251, 252, 253, 254, 255, 267, 268, 269, 270, 277, 279, 280, 281, 283, 295, 297, 298, 299, 301, 303, 307, 309, 310, 311, 313, 317, 324, 326, 327, 328, 330, 342, 344, 345, 346, 348, 360, 362, 363, 364, 366, 383, 384, 386, 388, 390, 428, 438, 440, 441, 442, 454, 455, 457, 459, 461, 505, 506, 508, 510, 512, 558, 559, 561, 563, 565, 603, 617, 618, 620, 622, 624, 651, 652, 655, 656, 657, 658, 660, 662, 674, 675, 704, 705, 708, 709, 710, 711, 713, 714, 722, 723, 727, 728, 731, 732, 733, 734, 736, 738, 748, 749, 762, 763, 765, 766, 767, 768, 769, 770, 773, 774, 776, 777, 778, 779, 780, 781, 784, 785, 787, 788, 789, 790, 791, 792, 795, 796, 798, 799, 800, 801, 802, 803, 806, 807, 809, 810, 811, 812, 813, 814, 817, 818, 820, 821, 822, 823, 824, 825, 828, 829, 831, 832, 833, 834, 835, 836, 839, 840, 842, 843, 844, 845, 846, 847, 852, 853, 855, 856, 857, 858, 859, 883, 886, 888, 889, 890, 891, 894, 898, 902, 913, 919, 921, 922, 925, 934, 937, 943, 946, 950, 951, 952, 953, 956, 957, 959, 961, 962, 963, 964, 965, 966, 968, 969, 972, 973, 974, 975, 978, 979, 980, 981, 998, 999, 1000, 1001, 1007, 1008, 1009, 1014, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1048, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1095, 1097], "self_aft": 1022, "self_befor": 1022, "semi": 225, "semicolon": [220, 223], "semimetr": 870, "send": [215, 216], "sens": [865, 879, 1021, 1029], "sensit": [220, 229, 420, 487, 539, 595, 640], "sep": 219, "separ": [1, 215, 216, 218, 220, 221, 223, 224, 225, 226, 227, 229, 755, 865, 906, 909], "seq": [0, 3, 17, 50, 65, 75, 80, 86, 87, 89, 90, 94, 95, 96, 98, 99, 100, 101, 102, 103, 215, 216, 217, 220, 221, 223, 227, 228, 380, 381, 394, 401, 404, 412, 414, 427, 428, 430, 431, 434, 447, 448, 451, 452, 471, 474, 480, 482, 494, 496, 497, 502, 503, 522, 525, 531, 533, 546, 549, 550, 555, 556, 569, 576, 579, 587, 589, 602, 603, 606, 607, 609, 611, 614, 615, 632, 634, 635, 646, 647, 688, 849, 1097], "seq1": [0, 65, 82, 85, 94, 98, 99, 100, 101, 102, 103, 217, 220, 221, 227, 230, 678, 679], "seq2": [0, 65, 82, 85, 94, 98, 99, 100, 101, 102, 103, 220, 221, 230, 678, 679], "seq3": [65, 85, 220, 227], "seq4": 220, "seq5": 220, "seq_1": 223, "seq_2": 223, "seq_gener": [401, 471, 522, 576], "seq_id": 223, "seq_num": [220, 221, 222, 223, 228], "seqid": 223, "seqr": 222, "sequenc": [1, 3, 13, 14, 15, 18, 19, 34, 45, 46, 47, 50, 51, 52, 53, 65, 66, 68, 69, 70, 75, 77, 79, 80, 82, 83, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 161, 170, 174, 187, 196, 198, 215, 216, 217, 218, 219, 221, 222, 223, 228, 231, 293, 303, 315, 688, 702, 757, 849, 879, 1089, 1090, 1097], "sequence1": 104, "sequence2": 104, "sequenceprocessor": 1097, "sequencevector": [174, 209], "sequenti": [140, 218, 220, 221, 227, 698, 699, 861, 1023], "ser": 499, "seri": [1, 95, 141, 223, 275, 287, 292, 322, 334, 339, 340, 352, 357, 683, 688, 747, 751, 752, 754, 755, 760, 851, 875], "serial": [224, 358, 701, 851, 1090], "serin": 499, "serv": [0, 231, 850, 861], "server": [98, 99, 100, 101, 102, 103, 231], "set": [13, 33, 45, 53, 83, 86, 91, 92, 116, 132, 143, 144, 149, 220, 222, 224, 227, 233, 272, 286, 303, 316, 333, 351, 370, 372, 377, 395, 404, 417, 420, 430, 448, 465, 474, 484, 487, 496, 499, 516, 525, 536, 539, 549, 552, 570, 579, 592, 595, 606, 611, 628, 632, 637, 640, 647, 661, 669, 675, 680, 692, 718, 723, 743, 749, 759, 849, 870, 872, 875, 877, 878, 879, 897, 898, 905, 937, 939, 950, 951, 966, 968, 971, 975, 978, 979, 981, 1001, 1015, 1016, 1028, 1035, 1046, 1047, 1052, 1092, 1097], "set1": 861, "set_index": 987, "setter": 302, "setup": 1097, "seven": 683, "sever": [116, 225, 227, 875], "sex": [877, 878], "sffaaa": 221, "sfprgfifgagssayqfegavneggrgpsiwdtfthkypekirdgsnaditv": 219, "sframe": [215, 216], "sg": [434, 447, 609], "sgc": [446, 447], "sgi": [215, 216], "shallow": [65, 68, 303, 304, 380, 451, 502, 555, 611, 614], "shannon": [84, 120, 133], "shannon_entropi": 84, "shape": [3, 13, 14, 15, 17, 18, 19, 34, 44, 45, 46, 47, 51, 52, 77, 86, 211, 213, 226, 651, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 704, 727, 753, 866, 869, 880, 881, 907, 908, 941, 948], "share": [53, 89, 90, 92, 107, 372, 395, 412, 414, 465, 480, 482, 516, 531, 533, 570, 587, 589, 611, 628, 634, 635, 850, 1095], "shear": 1005, "sheet": 229, "shift": 315, "short": 1097, "short_cicruit": 1056, "short_circuit": 1055, "short_method_nam": [851, 1033], "shorter": 227, "should": [1, 53, 84, 105, 112, 116, 117, 128, 132, 139, 141, 142, 143, 144, 145, 215, 222, 226, 229, 231, 232, 243, 244, 245, 285, 303, 332, 350, 358, 368, 377, 400, 417, 418, 419, 429, 436, 470, 484, 485, 486, 495, 499, 521, 536, 537, 538, 548, 552, 575, 592, 593, 594, 605, 630, 637, 638, 639, 679, 681, 682, 683, 694, 700, 737, 753, 755, 759, 849, 864, 865, 870, 871, 872, 875, 878, 879, 892, 893, 902, 937, 943, 946, 987, 1008], "shouldn": 865, "show": [1, 303, 875, 1095], "show_intern": 967, "shown": [293, 683, 864], "shrink": 688, "shtml": 220, "shuffl": 974, "shuffle_f": [974, 1013], "shuffled_tre": 1013, "shuffler": 1013, "sibl": [225, 395, 465, 516, 570, 628], "side": [132, 753, 756, 759], "sigh": 1089, "sign": [229, 683, 1033], "signatur": [146, 273, 897, 907, 941], "signific": [1, 229, 683, 688, 751, 753, 754, 755, 756, 759, 878, 879], "significance_test": 683, "significantli": [1, 91, 683, 751, 754, 755], "silent": [116, 143, 144, 913], "silpl": 446, "simd": [53, 104], "similar": [98, 99, 100, 101, 102, 103, 142, 216, 219, 220, 221, 224, 227, 229, 232, 611, 649, 751, 752, 753, 754, 755, 850, 865, 870, 872, 878, 879, 1092, 1095], "similarli": [0, 1, 220, 1092], "simpl": [215, 216, 220, 221, 225, 229, 230, 232, 257, 267, 695, 752, 759, 1090, 1095], "simpler": 0, "simplex": [681, 689, 690, 698], "simpli": [84, 92, 139, 232, 436, 671, 720, 745, 870, 875, 982, 1097], "simplifi": 118, "simpson": [112, 137], "simul": [680, 875, 878, 879], "sinc": [1, 65, 82, 85, 95, 118, 219, 220, 222, 227, 229, 231, 294, 404, 446, 474, 525, 579, 611, 632, 683, 753, 875, 879, 1022, 1035, 1097], "singl": [1, 65, 82, 85, 94, 116, 122, 123, 131, 143, 144, 146, 218, 219, 220, 221, 222, 225, 227, 228, 229, 230, 275, 290, 293, 303, 315, 322, 337, 340, 355, 358, 374, 384, 387, 392, 404, 417, 431, 455, 458, 463, 474, 484, 497, 506, 509, 514, 525, 536, 550, 559, 562, 567, 579, 592, 607, 618, 621, 626, 632, 637, 683, 698, 759, 876, 897, 898, 907, 922, 970, 1078, 1090, 1095, 1097], "singleton": [1, 107, 110, 111, 115, 117, 119, 131, 134, 138, 232], "singular": [1, 212, 874, 1005, 1078], "sinica": 107, "site": [1, 222, 226, 417, 484, 536, 592, 637, 850, 851, 861, 870], "site0": 226, "site1": [226, 850], "site10": 850, "site2": [226, 850], "site3": [226, 850], "site4": [226, 850], "site5": [226, 850], "site6": [226, 850], "site7": [226, 850], "site8": [226, 850], "site9": [226, 850], "sitemap": 222, "situat": [1, 861, 877], "six": [226, 434, 447, 609, 683], "size": [77, 114, 688, 751, 752, 753, 755, 838, 849, 861, 869, 875, 877, 878, 879, 897, 907, 941, 1054], "sk": [229, 290, 337, 355, 374], "skbio": [229, 1089], "skin": [1, 861], "skip": [417, 484, 536, 592, 637, 751, 753, 754, 755, 759, 907], "skip_subregion": 223, "sklearn": 145, "slen": [215, 216], "slice": [72, 384, 402, 403, 417, 427, 455, 472, 473, 484, 494, 506, 523, 524, 536, 546, 559, 577, 578, 592, 602, 618, 631, 637, 646, 653, 701, 706, 729, 884, 954, 1092], "slightli": [98, 121, 755], "slope": 121, "slow": [1, 116, 141, 143, 144, 145], "slower": [0, 1030], "sm": [430, 496, 549, 606, 647], "small": [1, 224, 230, 680, 692, 693, 872], "smaller": [139, 417, 484, 536, 592, 637, 756], "smallest": [140, 227, 878, 879, 931], "smith": [0, 53, 101, 102, 103, 104, 759], "snif": 1090, "sniffer": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 259, 264, 265, 268, 269, 1090], "so": [1, 3, 20, 84, 98, 99, 100, 101, 102, 103, 105, 116, 141, 143, 144, 145, 220, 225, 229, 232, 272, 273, 303, 306, 406, 407, 581, 582, 753, 827, 850, 864, 865, 866, 870, 872, 875, 877, 878, 879, 939, 1028, 1090, 1095, 1097], "sob": [1, 129, 130, 131], "societi": 132, "softwar": [1, 220, 221, 229, 942, 1089], "sole": [229, 367], "solexa": 221, "solut": 117, "solv": [117, 875], "some": [1, 53, 106, 116, 118, 128, 132, 161, 220, 222, 225, 228, 229, 243, 244, 245, 293, 317, 377, 499, 552, 682, 695, 696, 697, 865, 875, 878, 1055, 1095, 1097], "someformat": 1090, "someskbioclass": [232, 1090], "someth": [93, 97, 172, 173, 185, 186, 232, 244, 264, 265, 266, 268, 269, 270, 319, 321, 373, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 757, 862, 863, 902, 932, 947, 1006, 1027, 1097], "sometim": [112, 220, 222, 229, 865, 1090], "somewhat": [759, 1002], "sonnhamm": 230, "soppos": 219, "sort": [86, 92, 147, 148, 294, 303, 306, 401, 404, 430, 471, 474, 496, 522, 525, 549, 576, 579, 606, 632, 647, 794, 827, 849, 897, 936, 937, 1015, 1020, 1021, 1028, 1092, 1097], "sort_categori": [760, 761, 783, 794, 827], "sort_f": 935, "sort_index": 95, "sorted_t": 936, "sourc": [3, 12, 13, 14, 15, 16, 17, 18, 19, 34, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 72, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 159, 160, 161, 170, 171, 172, 173, 174, 183, 184, 185, 186, 187, 196, 197, 198, 207, 208, 209, 210, 211, 212, 219, 220, 222, 223, 233, 243, 244, 245, 246, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 300, 302, 303, 304, 305, 306, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 562, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 621, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 706, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 761, 771, 772, 782, 783, 793, 794, 804, 805, 815, 816, 826, 827, 837, 838, 848, 849, 851, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 884, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 954, 958, 960, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1039, 1046, 1052, 1053, 1054, 1055, 1056, 1066, 1067, 1068, 1078, 1079, 1089], "space": [1, 211, 220, 225, 227, 229, 230, 303, 306, 315, 680, 681, 682, 686, 687, 689, 690, 794, 850, 851, 861, 864, 871, 897], "spaitial": 755, "span": [16, 48, 116, 132, 146, 220, 222, 225, 293, 318, 897], "spars": [214, 689, 690, 699, 864, 872, 881, 884, 900, 907, 917, 918, 919, 939, 941], "sparse_vector": 897, "sparsedatafram": 940, "spatial": [1, 142, 145, 148, 210, 671, 678, 702, 720, 725, 737, 745, 747, 755], "spearman": [1, 752, 753, 756], "spearmanr": [752, 753], "spec": 358, "specfi": 1097, "speci": [1, 107, 116, 119, 121, 126, 132, 139, 140, 226, 231, 688, 695, 850, 865, 870, 872, 949], "special": [53, 224, 232, 907, 941], "speciat": 759, "specie1": 850, "specie2": 850, "specie3": 850, "specie4": 850, "specie5": 850, "specie6": 850, "specie7": 850, "specie8": 850, "specie9": 850, "species0": 226, "species1": 226, "species2": 226, "species3": 226, "species4": 226, "species5": 226, "species6": 226, "species7": 226, "species8": 226, "species_a": 969, "speciesa": 969, "specif": [111, 116, 121, 141, 143, 144, 145, 146, 149, 232, 318, 322, 611, 759, 771, 793, 794, 804, 837, 848, 878, 879, 884, 897, 907, 941, 1013, 1090, 1096, 1097], "specifi": [88, 92, 132, 149, 161, 215, 217, 218, 220, 221, 222, 223, 224, 227, 230, 231, 232, 263, 272, 293, 303, 316, 318, 370, 371, 377, 384, 402, 404, 420, 433, 445, 446, 448, 455, 472, 474, 487, 499, 506, 523, 525, 539, 552, 559, 577, 579, 595, 608, 611, 618, 632, 640, 650, 653, 660, 663, 668, 669, 675, 681, 682, 683, 688, 689, 690, 692, 693, 699, 703, 706, 713, 715, 717, 718, 723, 726, 729, 736, 739, 741, 743, 749, 751, 752, 753, 754, 755, 759, 838, 861, 869, 870, 876, 884, 894, 897, 907, 911, 913, 934, 941, 971, 979, 1010, 1013, 1015, 1018, 1021, 1028, 1055, 1067, 1068, 1078, 1097], "speed": [303, 870], "spermatophyta": 219, "sphingobacteria": [988, 1021], "split": [220, 221, 227, 230], "spmatrix": [884, 900], "spreadsheet": [224, 229], "sqcup": [116, 132], "sqlite": 370, "sqrt": [115, 125, 126, 127, 698, 872], "squar": [127, 128, 145, 225, 649, 702, 725, 867], "squareform": [702, 747], "sr1": 436, "srava": 230, "ss": [230, 937], "ss_con": 230, "sscinam": [215, 216], "sseq": [215, 216], "sseqid": [215, 216], "sskingdom": [215, 216], "sstart": [215, 216], "sstrand": [215, 216], "ssw": [20, 53, 104], "stabl": [660, 675, 713, 723, 736, 749, 968], "stack": 1002, "stackoverflow": 1054, "stai": 229, "stale": 303, "stamataki": 969, "stand": [407, 582, 753], "standalon": 220, "standard": [220, 221, 223, 225, 229, 430, 433, 434, 436, 446, 447, 496, 549, 606, 608, 609, 647, 653, 680, 683, 706, 729, 752, 753, 866, 869, 872, 873, 1090, 1092], "standardis": 114, "staphylococcu": 894, "start": [0, 3, 13, 14, 15, 16, 18, 19, 32, 33, 34, 45, 46, 47, 48, 50, 51, 52, 53, 65, 82, 85, 94, 98, 99, 100, 101, 102, 103, 104, 161, 215, 216, 219, 222, 223, 224, 225, 227, 230, 231, 293, 314, 320, 396, 415, 436, 437, 443, 446, 447, 466, 483, 517, 535, 571, 590, 629, 636, 702, 756, 757, 875, 878, 879, 917, 1097], "start_end_posit": 0, "stat": [0, 1, 3, 65, 82, 83, 85, 91, 92, 95, 128, 134, 161, 174, 210, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 230, 377, 384, 394, 395, 398, 401, 428, 432, 433, 434, 436, 446, 447, 448, 455, 465, 468, 471, 499, 506, 516, 519, 522, 552, 559, 569, 570, 573, 576, 603, 604, 608, 609, 611, 618, 628, 649, 660, 669, 675, 677, 931, 1089, 1092], "state": [3, 13, 14, 15, 17, 18, 19, 34, 46, 47, 49, 50, 51, 52, 132, 217, 227, 229, 272, 1055, 1056, 1066, 1078, 1097], "static": [448, 906, 909], "statis": [751, 754], "statist": [1, 107, 110, 115, 121, 128, 681, 683, 688, 751, 753, 754, 755, 756, 759, 850, 864, 865, 869, 875, 878, 879, 1089], "statistica": [107, 118], "statsmodel": 875, "statu": [3, 34, 877, 878], "staxid": [215, 216], "std": [219, 869, 873, 878], "steel": 1029, "steep": 864, "step": [1, 65, 82, 85, 94, 116, 141, 143, 144, 145, 227, 232, 868, 875], "still": [225, 226, 272, 302, 683, 688, 692, 753, 755], "stimat": 873, "stitl": [215, 216], "stockholm": [93, 97], "stockholm_format": 230, "stombaugh": [143, 144], "stool": 879, "stop": [65, 82, 85, 94, 107, 161, 174, 218, 227, 396, 415, 433, 434, 436, 446, 447, 466, 483, 499, 517, 534, 535, 571, 590, 608, 609, 629, 636, 881, 948, 969, 1056, 1092], "storag": [303, 939], "store": [2, 65, 75, 80, 89, 90, 91, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 293, 303, 358, 375, 377, 412, 414, 448, 480, 482, 499, 531, 533, 552, 587, 589, 611, 634, 635, 671, 701, 702, 720, 725, 745, 756, 772, 805, 816, 851, 864, 865, 870, 872, 897, 907, 941, 949, 1091, 1092], "str": [31, 45, 50, 54, 64, 70, 75, 80, 93, 97, 105, 141, 145, 146, 147, 148, 149, 159, 161, 172, 173, 174, 183, 185, 186, 187, 198, 207, 210, 215, 222, 223, 230, 233, 242, 255, 258, 259, 260, 264, 265, 266, 268, 269, 270, 272, 283, 285, 288, 290, 301, 313, 319, 321, 330, 332, 335, 337, 348, 350, 353, 355, 358, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 379, 387, 392, 393, 396, 400, 401, 402, 403, 404, 415, 416, 418, 420, 421, 422, 423, 424, 426, 427, 429, 430, 435, 436, 444, 450, 458, 463, 464, 466, 470, 471, 472, 473, 474, 483, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 501, 509, 514, 515, 517, 521, 522, 523, 524, 525, 535, 537, 539, 540, 541, 542, 543, 545, 546, 548, 549, 551, 552, 554, 562, 567, 568, 571, 575, 576, 577, 578, 579, 590, 591, 593, 595, 596, 597, 598, 599, 601, 602, 605, 606, 610, 611, 613, 621, 626, 627, 629, 630, 631, 632, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 653, 659, 660, 661, 663, 666, 668, 669, 670, 675, 676, 683, 688, 694, 699, 702, 703, 706, 712, 713, 715, 717, 718, 719, 723, 724, 726, 729, 735, 736, 739, 741, 743, 744, 749, 750, 751, 752, 754, 755, 756, 757, 770, 772, 781, 792, 794, 803, 805, 814, 816, 825, 836, 847, 851, 860, 861, 862, 863, 870, 877, 878, 891, 894, 897, 900, 901, 902, 904, 906, 907, 911, 915, 923, 931, 932, 939, 941, 942, 943, 947, 949, 963, 967, 971, 982, 983, 995, 997, 1006, 1010, 1012, 1016, 1018, 1027, 1028, 1029, 1034, 1048, 1053, 1065, 1077, 1088], "straight": 1, "straightforward": [229, 1092], "strand": [215, 216, 222, 223, 230, 293, 432, 433, 434, 604], "stranded": 222, "strategi": [680, 692, 1029], "stream": [220, 223, 1090], "strength": 1, "streptophyta": 219, "strict": [92, 227, 395, 465, 516, 570, 628, 663, 715, 739, 753, 756, 759, 897, 946], "strict_match": [877, 878], "stricter": [225, 1032], "strictli": [220, 683, 688, 699, 970], "string": [1, 12, 43, 45, 50, 53, 81, 141, 145, 146, 149, 160, 170, 171, 184, 196, 197, 208, 213, 217, 218, 220, 221, 225, 227, 229, 230, 291, 292, 338, 339, 356, 357, 358, 375, 393, 403, 404, 420, 427, 430, 431, 436, 444, 464, 473, 474, 487, 494, 496, 497, 515, 524, 525, 539, 546, 549, 550, 568, 578, 579, 595, 602, 606, 607, 627, 631, 632, 640, 646, 647, 649, 653, 659, 665, 683, 688, 701, 702, 706, 712, 716, 729, 735, 740, 751, 754, 755, 757, 860, 861, 902, 905, 931, 942, 943, 946, 963, 967, 1021, 1029, 1034, 1095], "stringifi": 891, "stringio": [1, 116, 143, 144, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 272, 701, 906, 909, 1028, 1029, 1090, 1095], "strip": [969, 973, 974], "stripe": [53, 104], "stripedsmithwaterman": [0, 104], "strong": [1, 377, 751, 753, 759], "struct": [20, 222], "structur": [3, 143, 144, 216, 218, 222, 225, 231, 661, 702, 751, 752, 759, 850, 881, 897, 907, 941, 948, 1011, 1055, 1089], "studi": [1, 116, 229, 358, 680, 683, 850, 864, 872, 879], "style": [680, 1025, 1026], "su": 230, "sub": [222, 223, 293, 880], "subclass": [92, 209, 210, 211, 212, 217, 220, 227, 230, 232, 322, 395, 465, 516, 570, 611, 628, 649, 701, 702, 757, 1028, 1055], "subfold": 1053, "subject": [1, 215, 216, 229, 1091, 1097], "subject1": 216, "subject2": 216, "sublist": 879, "submit": [219, 220, 879], "submodul": 232, "suboptim": 53, "subsampl": [128, 849, 875, 878, 879, 880, 974, 1089], "subsample_count": [128, 849], "subsample_paired_pow": 879, "subsample_pow": 875, "subseq": [417, 484, 536, 592, 611, 637], "subsequ": [101, 217, 220, 229, 379, 387, 392, 396, 415, 417, 450, 458, 463, 466, 483, 484, 501, 509, 514, 517, 535, 536, 554, 562, 567, 571, 590, 592, 611, 613, 621, 626, 629, 636, 637, 1055, 1092], "subset": [116, 132, 143, 144, 149, 213, 219, 752, 907, 913, 937, 973, 979, 1095], "subset_with_metadata": 907, "subsitut": [430, 496, 549, 606, 647], "substitut": [53, 98, 99, 100, 101, 102, 103, 105, 224, 430, 496, 499, 549, 606, 647, 649, 661, 664, 666, 667, 673, 680, 1031, 1092], "substitution_matrix": [53, 98, 99, 100, 101, 102, 103], "substitutionmatrix": [105, 430, 496, 549, 606, 647, 1092], "substract": [98, 99, 100, 101, 102, 103, 868], "substrat": 850, "substrate_cor": 850, "substrate_oth": 850, "substrate_sand": 850, "subtili": 230, "subtract": [53, 838], "subtre": [225, 231, 984, 1095], "success": [1031, 1056, 1097], "success_callback": [1056, 1097], "success_f": 1097, "successfulli": 969, "suffix": 106, "suggest": [53, 244, 264, 265, 268, 269, 878], "suit": 865, "sum": [107, 109, 112, 116, 125, 126, 128, 132, 136, 218, 315, 404, 474, 525, 579, 632, 682, 686, 687, 691, 879, 880, 917, 918, 922, 927, 937, 964, 1020, 1054], "sum_": [114, 116, 118, 132, 135, 680, 682, 695, 696, 697, 753], "summar": 683, "summari": [81, 659, 683, 712, 735, 927], "super": [215, 216], "superkingdom": 231, "superset": [116, 132, 143, 144, 751, 755], "supplement": 114, "supplementari": [221, 683], "suppli": [53, 215, 220, 228, 264, 268, 367, 400, 470, 521, 575, 630, 677, 879, 897, 979], "support": [1, 2, 84, 93, 97, 118, 172, 173, 185, 186, 272, 275, 319, 321, 340, 358, 367, 373, 376, 377, 426, 435, 493, 498, 499, 545, 551, 552, 601, 610, 645, 648, 649, 661, 670, 676, 719, 724, 744, 750, 753, 851, 862, 863, 870, 875, 884, 897, 924, 932, 947, 949, 969, 1006, 1024, 1027, 1028, 1035, 1055, 1078, 1089, 1093, 1094, 1095, 1096, 1097], "support_attr": 1028, "support_valu": 1028, "suppos": [215, 216, 219, 220, 221, 222, 225, 228, 230, 695, 875, 879], "suppress": [231, 751, 755, 756], "suppress_sequ": [53, 104], "sure": [740, 879, 1097], "surpass": 227, "surround": [225, 688], "survei": 1, "sv": 219, "svd": [212, 874], "svg": 851, "sw": [53, 877], "swab": 1, "swiss": 219, "switch": 884, "sy": 273, "symbiont": 759, "symbol": [84, 220], "symmetr": [1, 649, 653, 701, 702, 706, 725, 729, 740, 753, 757, 759, 864, 972], "symmetri": [701, 702, 725, 740, 742], "symptom": 879, "syn": 222, "synonym": [1, 231], "synthesi": 230, "synthet": 222, "system": [93, 97, 124, 135, 172, 173, 185, 186, 229, 231, 232, 303, 319, 321, 373, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 862, 863, 878, 913, 932, 947, 1006, 1027], "systemat": 132, "t": [1, 17, 53, 65, 82, 84, 85, 86, 91, 92, 96, 104, 116, 118, 132, 141, 143, 144, 145, 219, 220, 221, 222, 223, 224, 226, 228, 229, 230, 231, 243, 245, 273, 293, 294, 371, 377, 382, 391, 396, 400, 404, 406, 407, 408, 409, 410, 413, 421, 422, 423, 424, 432, 446, 453, 462, 466, 470, 474, 476, 477, 478, 481, 488, 489, 490, 491, 499, 504, 513, 517, 521, 525, 527, 528, 529, 532, 540, 541, 542, 543, 552, 557, 566, 571, 575, 579, 581, 582, 583, 584, 585, 588, 596, 597, 598, 599, 604, 611, 616, 625, 629, 630, 632, 641, 642, 643, 644, 649, 667, 681, 683, 688, 689, 690, 694, 695, 699, 756, 864, 865, 870, 872, 874, 875, 877, 879, 880, 894, 902, 907, 908, 924, 931, 941, 944, 973, 974, 1011, 1012, 1020, 1028, 1029, 1030, 1092, 1096, 1097], "t0": [215, 216, 223, 226, 228, 701], "t1": [215, 216, 226, 228, 231, 701, 906], "t10": [223, 226], "t100": [215, 216], "t10596": 216, "t1217": 216, "t1233": 216, "t131567": 231, "t1566": 216, "t161": 215, "t2": [226, 228, 906, 909], "t2130": 216, "t2214": 216, "t3": [228, 906, 909], "t30": [223, 228], "t329": 215, "t330": 215, "t335928": 231, "t34": 228, "t35": 228, "t3e": [215, 216], "t4": 226, "t42": 216, "t44": 216, "t5": 909, "t50": 223, "t5565": 216, "t5587": 216, "t5671": 216, "t6": 909, "t6821": 216, "t6928": 216, "t6e": 216, "t80": 223, "t811": 216, "t8468": 216, "t8552": 216, "t8e": 216, "t9": 226, "t90": 223, "t94": 216, "t96": 223, "t99": 215, "t9e": 215, "t_a": 922, "t_b": 922, "ta": [701, 1092], "taaactatta": 219, "taaactccgg": 219, "taacaatcct": 219, "taacatatac": 221, "taacgtta": [432, 604], "taagactaaa": 219, "taatgaatgg": 219, "tab": [215, 216, 223, 224, 225, 226, 228, 229, 231, 901, 906, 909, 943], "tabl": [1, 141, 145, 214, 221, 222, 229, 231, 370, 433, 434, 436, 445, 446, 447, 608, 609, 683, 688, 850, 864, 865, 871, 872, 1055, 1089, 1091, 1092], "table2": 944, "table3": 944, "table_id": [445, 881, 948], "tableexcept": [881, 933, 946, 948], "tabular": [3, 16, 48, 65, 87, 215, 216, 229, 231, 358], "tabularmsa": [0, 3, 16, 17, 34, 48, 98, 99, 100, 101, 102, 103, 104, 217, 221, 227, 230, 303, 1090], "tac": 228, "tacatcgttt": 219, "tacatgtgta": 219, "taccaggcat": 219, "tacccggt": 1092, "tacctaagtt": 219, "tacg": 228, "tacgta": 228, "tae000111": 216, "tae000171": 216, "tae000174": 216, "tae000425": 216, "tag": [223, 230, 401, 431, 471, 497, 522, 550, 576, 607, 698], "tagagattaattgccactgccaaaattctg": 0, "tagattacag": 219, "taggttgatc": 219, "tagtgaatgg": 219, "take": [1, 145, 227, 232, 243, 244, 245, 322, 400, 427, 470, 494, 521, 546, 575, 602, 630, 646, 665, 683, 716, 725, 740, 752, 753, 827, 864, 872, 875, 876, 892, 893, 902, 922, 935, 943, 944, 1029, 1055, 1095, 1097], "taken": [1, 215, 216, 220, 227, 230, 231, 683, 759, 1054], "target": [0, 1, 53, 104, 115, 223, 660, 675, 713, 723, 736, 749], "target_begin": 20, "target_sequ": [0, 20, 53, 54], "task": [1031, 1090], "tata": [403, 473, 524, 578, 631], "tataa": [403, 473, 524, 578, 631], "tatattagca": 219, "tatctaactg": 219, "tatgtatata": 221, "tatgtatatataacatatacatatatacatacata": 221, "tau": 683, "tax": 216, "tax_id": [231, 987], "taxa": [1, 107, 108, 109, 113, 114, 115, 116, 117, 119, 120, 121, 124, 126, 127, 128, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 149, 229, 231, 683, 865, 879, 974, 1029], "taxdump": 987, "taxdump_readm": 231, "taxid": 231, "taxon": [1, 107, 108, 109, 112, 114, 116, 125, 126, 132, 135, 136, 140, 143, 144, 219, 222, 881, 948, 987, 988, 1095], "taxonom": [1, 143, 988], "taxonomi": [215, 225, 229, 231, 436, 444, 445, 897, 898, 907, 924, 941, 987, 988, 1021], "taxonomy_0": [924, 939], "taxonomy_1": [924, 939], "taylor": 121, "tb": [701, 906, 909], "tc": [701, 906, 909], "tcaaaagaaa": 219, "tcatttagga": 228, "tcc": 0, "tccacaaatg": 219, "tccagaaaaa": 219, "tcg": [431, 497, 550, 607], "tcga": [430, 496, 549, 606, 647], "tcggagcagt": 219, "tcgggcasdgca": 228, "tcgggcattgca": 228, "tcgtatagat": 219, "tctacccctctcagaga": 0, "tctataagattccgcatgcgttacttataagatgtctcaacgg": 0, "tctcaatctc": 219, "tctcaga": 0, "tcttaacata": 219, "tcttcagcat": 219, "tcttgctcat": 219, "tctttgcttc": 219, "tdbl": 979, "technic": [135, 225], "techniqu": [1, 117, 680, 864, 865, 1093], "teh": [881, 948], "tell": 683, "temorg": 216, "temperatur": 878, "tempfil": 272, "temporari": 897, "temporaryfil": 272, "ten": 1, "tend": 229, "ter": [499, 865], "term": [1, 84, 112, 130, 132, 214, 222, 287, 322, 334, 352, 358, 759, 850, 1029], "termin": [219, 433, 446, 608, 1022], "test": [1, 70, 79, 132, 232, 276, 282, 294, 300, 306, 312, 323, 329, 341, 347, 359, 365, 382, 391, 437, 443, 453, 462, 504, 513, 557, 566, 616, 625, 680, 683, 688, 701, 751, 753, 754, 755, 756, 758, 759, 771, 793, 804, 837, 848, 875, 878, 879, 903, 1032, 1033, 1053, 1089], "test_tabl": [906, 909], "texon": 223, "text": [109, 125, 126, 140, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 243, 244, 245, 272, 358, 701, 782, 815, 826], "textiobas": [233, 243, 244, 245, 272], "textiowrapp": 272, "tf": 101, "tgaaggatca": 219, "tgaattcaac": 219, "tgca": 228, "tgene": 223, "tgenu": 231, "tgetaaafhwqaaf": 228, "tgg": [401, 431, 471, 497, 522, 550, 576, 607], "tggaacaatt": 219, "tggattaaaa": 219, "tggattctgc": 293, "tggtgcacct": 219, "tggtgctgga": 219, "tgi": 215, "tgtaataaat": 219, "tgtacacta": 3, "th": [109, 125, 126, 140, 698], "than": [0, 1, 53, 83, 84, 107, 116, 121, 123, 139, 143, 144, 220, 225, 227, 230, 265, 269, 303, 358, 377, 378, 379, 382, 396, 400, 404, 415, 416, 417, 418, 419, 421, 422, 423, 424, 434, 447, 449, 450, 453, 466, 470, 474, 483, 484, 485, 486, 488, 489, 490, 491, 499, 500, 501, 504, 517, 521, 525, 535, 536, 537, 538, 540, 541, 542, 543, 552, 553, 554, 557, 571, 575, 579, 590, 591, 592, 593, 594, 596, 597, 598, 599, 609, 612, 613, 616, 629, 630, 632, 636, 637, 638, 639, 641, 642, 643, 644, 649, 679, 680, 683, 685, 688, 701, 742, 751, 753, 754, 755, 759, 849, 864, 865, 878, 879, 880, 913, 918, 937, 970, 987, 1000, 1029, 1034, 1090, 1095], "thei": [0, 1, 75, 80, 84, 91, 107, 141, 145, 215, 219, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 232, 320, 377, 382, 391, 394, 417, 437, 453, 462, 484, 504, 513, 536, 552, 557, 566, 569, 592, 616, 625, 637, 651, 663, 680, 704, 715, 727, 739, 751, 752, 753, 754, 755, 756, 760, 860, 861, 864, 870, 875, 898, 907, 941, 974, 981, 1030, 1032, 1097], "them": [1, 50, 118, 222, 227, 229, 294, 306, 315, 316, 429, 495, 548, 605, 611, 753, 794, 869, 870, 872, 1056], "themselv": [1091, 1092], "theorem": [122, 123], "theoret": [133, 137], "theori": [84, 109, 124, 135, 694, 700], "therebi": 850, "therefor": [1, 82, 85, 92, 112, 116, 132, 136, 143, 144, 149, 229, 358, 649, 683], "thermoplasmata": [988, 1021], "theta": [132, 683], "thi": [0, 1, 2, 3, 12, 19, 43, 52, 53, 67, 68, 69, 70, 72, 77, 79, 81, 82, 83, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 116, 117, 118, 121, 122, 123, 128, 131, 132, 141, 142, 143, 144, 145, 146, 148, 149, 161, 172, 173, 185, 186, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 243, 244, 245, 257, 265, 267, 269, 271, 272, 273, 276, 282, 285, 291, 292, 293, 294, 300, 302, 303, 304, 305, 306, 312, 314, 315, 316, 317, 318, 319, 321, 323, 329, 332, 338, 339, 341, 347, 350, 356, 357, 358, 359, 365, 367, 368, 371, 372, 373, 375, 376, 379, 380, 381, 382, 384, 387, 389, 391, 392, 395, 396, 400, 404, 406, 407, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 430, 431, 434, 435, 436, 445, 446, 447, 448, 450, 451, 452, 453, 455, 458, 460, 462, 463, 465, 466, 470, 474, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 496, 497, 498, 501, 502, 503, 504, 506, 509, 511, 513, 514, 516, 517, 521, 525, 535, 536, 537, 538, 540, 541, 542, 543, 545, 546, 549, 550, 551, 554, 555, 556, 557, 559, 562, 564, 566, 567, 570, 571, 575, 579, 581, 582, 590, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 606, 607, 609, 610, 611, 613, 614, 615, 616, 618, 621, 623, 625, 626, 628, 629, 630, 632, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 653, 670, 671, 672, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 699, 701, 704, 706, 719, 720, 721, 724, 725, 727, 729, 742, 744, 745, 746, 747, 750, 751, 752, 753, 755, 757, 758, 759, 760, 849, 850, 861, 862, 863, 865, 870, 871, 872, 875, 877, 878, 879, 894, 897, 898, 905, 907, 913, 922, 928, 931, 932, 937, 941, 942, 946, 947, 949, 965, 967, 969, 971, 973, 974, 977, 979, 980, 982, 984, 985, 987, 991, 998, 1002, 1005, 1006, 1008, 1010, 1011, 1013, 1014, 1015, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1053, 1054, 1055, 1056, 1066, 1078, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097], "thing": 1097, "third": [695, 701, 991, 1097], "those": [1, 142, 229, 358, 372, 759, 849, 864, 879, 917, 979, 1013, 1018, 1029, 1055, 1092], "though": [118, 220, 221, 227, 228, 229, 683, 737, 751, 755, 919, 1029, 1097], "thought": 755, "thr": 499, "thraustochytrium": 445, "three": [1, 3, 65, 131, 227, 231, 695, 701, 725, 756, 850, 861, 878, 879, 897, 898, 944, 974, 1097], "threonin": 499, "threshold": [107, 1032], "through": [1, 72, 98, 99, 100, 218, 229, 257, 263, 267, 653, 706, 729, 870, 982, 1097], "throughout": [1, 224, 436, 445, 878, 1096], "throughput": [116, 143, 144, 220, 221, 688, 861, 878], "thrown": [244, 989], "thu": [1, 220, 221, 225, 229, 285, 332, 350, 368, 404, 474, 525, 579, 611, 632, 653, 706, 725, 729, 751, 753, 755, 759, 870], "thymin": [219, 222, 377, 432, 604], "ti": [83, 108, 931, 1028], "tid": 223, "tile": 228, "tile_numb": 228, "till": 231, "time": [1, 53, 82, 85, 116, 128, 137, 143, 144, 146, 220, 221, 229, 649, 689, 690, 698, 737, 751, 752, 753, 754, 756, 760, 783, 838, 872, 875, 878, 879, 884, 897, 928, 937, 949, 1013, 1097], "timestamp": 941, "tip": [1, 116, 132, 143, 144, 949, 967, 969, 971, 972, 973, 974, 976, 977, 979, 980, 982, 989, 994, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1021, 1022, 1023, 1028, 1090, 1095], "tip_": 1014, "tip_a": [980, 1009], "tip_count": 1000, "tip_d": 980, "tip_list": 1017, "tip_nam": 971, "tip_subset": 979, "tip_tip_dist": [980, 989], "tipnam": [995, 997], "tissue_typ": 219, "titl": [1, 215, 216, 222, 230, 669, 718, 743, 861], "tjflkafnkkghvm": 228, "tmgc": 445, "tn": 230, "tno": 231, "to_": [660, 713, 736], "to_data_fram": 747, "to_datafram": [292, 339, 357, 358], "to_delet": 1005, "to_dict": 86, "to_hdf5": 907, "to_seri": [291, 338, 356], "toarrai": 699, "tobacco": 879, "togeth": [92, 219, 220, 222, 230, 683, 897, 922, 1055], "token": 161, "tol": 874, "toler": [874, 1032], "tolosana": [680, 698], "ton": 1, "tongu": 1, "too": [123, 870, 894, 964], "tool": [98, 101, 215, 216, 220, 227, 229, 231, 861, 865], "toolkit": 969, "top": [683, 987], "topolog": 968, "topologi": [971, 1005, 1095], "total": [108, 109, 115, 116, 117, 119, 124, 125, 126, 127, 128, 140, 213, 215, 229, 404, 474, 525, 579, 632, 752, 897, 979], "totaldescendingbranch": 979, "toward": 965, "tparent": 223, "tr": 979, "traceback": [215, 227, 446, 611, 753], "tracheophyta": 219, "track": [218, 219], "tracker": [220, 244], "tract": 879, "trail": [220, 221, 224], "trajectori": [760, 761, 771, 772, 782, 783, 793, 794, 804, 805, 815, 816, 826, 827, 837, 838, 848], "trajectory_categori": [760, 761, 783, 794, 827], "trajectory_result": 760, "tranform": 944, "tranpos": 939, "transcrib": [219, 222, 433, 434, 604, 1092], "transcript": 293, "transect": 850, "transform": [243, 245, 417, 484, 536, 592, 637, 680, 681, 682, 686, 687, 689, 690, 694, 699, 864, 870, 872, 884, 909, 931], "translat": [219, 222, 225, 231, 272, 432, 434, 436, 447, 604, 609, 1092], "translate_six_fram": [432, 433, 446, 604, 608], "transloc": 878, "transpar": [229, 272], "transpos": 939, "trapezoid": 118, "trascrib": 219, "traver": 1095, "travers": [950, 951, 971, 975, 978, 982, 985, 996, 999, 1002, 1003, 1004, 1019, 1025, 1026, 1095], "tre361": 219, "treat": [82, 83, 84, 85, 220, 224, 229, 358, 377, 420, 429, 487, 495, 499, 539, 548, 552, 595, 605, 611, 640, 678, 878], "treatment": [322, 683, 688, 760, 878, 895], "treatment_stat": 878, "tree": [1, 116, 132, 143, 144, 225, 230, 231, 303, 699, 896, 912, 1089, 1090], "tree1": [972, 973, 974, 1095], "tree2": [972, 973, 974, 1095], "tree3": 1095, "tree_copi": [950, 951, 975, 978], "tree_copy_nod": [950, 951, 975, 978], "tree_nod": [950, 951, 975, 978], "tree_node_class": 1028, "treeerror": [1010, 1011], "treenod": [1, 116, 132, 143, 144, 225, 699, 896, 1028, 1029, 1090, 1095], "trg": [401, 431, 471, 497, 522, 550, 576, 607], "tri": 919, "triangl": [725, 740, 747, 753, 870, 919], "triangular": 753, "trifoliea": 219, "trifolium": 219, "trifurc": [116, 143, 144, 225], "trim": 446, "tripleton": 1, "trp": 499, "trubbbbrbcefgh": 228, "true": [1, 32, 33, 53, 66, 67, 68, 69, 70, 82, 83, 85, 86, 88, 89, 90, 91, 95, 96, 98, 99, 100, 110, 111, 116, 117, 132, 139, 141, 143, 144, 145, 146, 149, 161, 174, 209, 210, 211, 212, 215, 218, 219, 220, 221, 222, 223, 225, 228, 243, 244, 245, 264, 268, 272, 273, 286, 289, 293, 303, 315, 320, 333, 336, 351, 354, 367, 377, 378, 379, 381, 382, 384, 391, 394, 395, 397, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 446, 447, 448, 449, 450, 452, 453, 455, 462, 465, 467, 468, 469, 471, 474, 475, 476, 477, 478, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 501, 503, 504, 506, 513, 516, 518, 519, 520, 522, 525, 526, 527, 528, 529, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 552, 553, 554, 556, 557, 559, 566, 569, 570, 572, 573, 574, 576, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 615, 616, 618, 625, 628, 632, 634, 635, 638, 639, 640, 641, 642, 643, 644, 646, 647, 650, 651, 658, 660, 663, 679, 683, 688, 689, 690, 694, 701, 702, 703, 704, 711, 713, 715, 725, 726, 727, 734, 736, 739, 740, 742, 751, 753, 755, 756, 759, 794, 805, 869, 870, 872, 873, 877, 878, 880, 881, 897, 900, 904, 905, 907, 908, 916, 917, 918, 919, 923, 927, 928, 929, 930, 931, 934, 935, 937, 939, 940, 941, 944, 946, 967, 969, 971, 976, 984, 990, 992, 993, 994, 996, 999, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1019, 1021, 1022, 1024, 1028, 1029, 1055, 1056, 1066, 1078, 1092, 1095, 1097], "truncat": [221, 659, 712, 735, 860, 1029, 1097], "trust": 221, "truth": [378, 449, 500, 553, 612], "truthi": [378, 449, 500, 553, 612], "try": [879, 880], "tryptophan": [84, 499], "tsuperkingdom": 231, "tsv": [224, 229, 290, 337, 355, 358, 371, 374, 909, 943], "tsv_fh": 909, "tt": [83, 417, 484, 536, 592, 637], "tta": [419, 486, 538, 594, 639], "ttacatatta": 219, "ttacgcttaaac": 220, "ttactattac": 219, "ttactgttcg": 219, "ttagctcatt": 219, "ttattaaaag": 219, "ttattgtagc": 219, "ttattttttt": 219, "ttcaatttgg": 219, "ttcatt": [394, 416, 428, 569, 591, 603], "ttcatttgat": 219, "ttccagtaga": 219, "ttctactctt": 219, "ttctgcaatc": 219, "ttest_ind": [683, 688], "ttest_rel": 683, "ttgaatactt": 219, "ttgagaatac": 219, "ttgg": 897, "ttggccaaga": 219, "ttgtaactct": 219, "ttgttgtacc": 219, "ttjflkafnkkghvm": 228, "tttattggta": 219, "tttcctcgtg": 219, "tttgaattaa": 219, "tttgcaggct": 219, "ttttcattgg": 219, "ttttggactg": 219, "ttttggatta": 219, "tttttaggcc": 219, "tttttttaaaaaaa": 1097, "tupl": [98, 99, 100, 101, 102, 103, 104, 111, 115, 122, 128, 131, 149, 223, 244, 293, 314, 318, 372, 433, 434, 608, 609, 653, 706, 729, 884, 892, 897, 907, 908, 924, 937, 941, 988, 989, 1020, 1021], "turkei": [220, 227], "turn": [3, 377, 499, 552, 872, 1032, 1097], "turnip": 230, "tutori": [229, 232, 290, 337, 355, 358, 371, 374, 1089], "twice": 879, "two": [0, 1, 3, 98, 99, 100, 101, 102, 103, 104, 107, 112, 132, 143, 144, 215, 216, 220, 221, 222, 223, 225, 227, 228, 231, 293, 294, 300, 306, 312, 315, 320, 377, 382, 395, 400, 417, 421, 423, 453, 465, 470, 484, 488, 490, 499, 504, 516, 521, 536, 540, 542, 552, 557, 570, 575, 592, 596, 598, 616, 628, 630, 637, 641, 643, 649, 651, 653, 658, 660, 665, 671, 678, 679, 680, 683, 685, 688, 695, 698, 699, 701, 702, 704, 706, 711, 713, 716, 720, 727, 729, 734, 736, 740, 745, 751, 752, 753, 754, 755, 756, 757, 759, 865, 870, 875, 878, 879, 894, 897, 907, 922, 941, 973, 974, 980, 989, 1011, 1013, 1028, 1033, 1090, 1092, 1095], "txt": [219, 229, 231, 290, 337, 355, 374], "tyne": 219, "type": [1, 53, 65, 70, 82, 83, 85, 122, 133, 137, 145, 149, 209, 210, 211, 212, 213, 217, 218, 220, 221, 222, 223, 224, 227, 230, 231, 243, 245, 258, 260, 261, 262, 264, 268, 272, 275, 276, 282, 290, 322, 323, 329, 337, 340, 341, 347, 355, 358, 359, 365, 367, 371, 374, 379, 382, 391, 394, 395, 396, 398, 400, 401, 402, 415, 416, 421, 422, 423, 424, 427, 428, 437, 443, 450, 453, 462, 465, 466, 468, 470, 471, 472, 483, 488, 489, 490, 491, 494, 501, 504, 513, 516, 517, 519, 521, 522, 523, 535, 540, 541, 542, 543, 546, 554, 557, 566, 569, 570, 571, 573, 575, 576, 577, 590, 591, 596, 597, 598, 599, 602, 603, 611, 613, 616, 625, 628, 629, 630, 636, 641, 642, 643, 644, 646, 653, 662, 674, 678, 679, 701, 706, 714, 722, 729, 738, 748, 752, 755, 757, 850, 864, 865, 872, 875, 877, 881, 892, 898, 907, 908, 922, 941, 948, 950, 951, 971, 975, 978, 1020, 1028, 1032, 1039, 1089, 1090], "typeerror": [65, 82, 85, 92, 141, 264, 265, 268, 269, 379, 395, 396, 400, 404, 415, 416, 421, 422, 423, 424, 450, 465, 466, 470, 474, 483, 488, 489, 490, 491, 501, 516, 517, 521, 525, 535, 540, 541, 542, 543, 554, 570, 571, 575, 579, 590, 591, 596, 597, 598, 599, 613, 628, 629, 630, 632, 636, 641, 642, 643, 644, 678, 679, 752, 753, 755, 878, 879, 924, 971], "typic": [98, 99, 100, 101, 102, 103, 105, 174, 198, 220, 221, 228, 229, 230, 293, 303, 870, 969, 1091], "tyr": 499, "tyrosin": 499, "u": [1, 100, 103, 116, 122, 125, 143, 144, 219, 220, 222, 231, 382, 387, 391, 392, 432, 453, 458, 462, 463, 499, 504, 509, 513, 514, 552, 557, 562, 566, 567, 604, 616, 621, 625, 626, 683, 686, 687, 699, 753, 874, 879, 896, 1092, 1097], "u1": [1, 116, 143, 144], "u2": [1, 116, 143, 144], "u3": [1, 116, 143, 144], "u4": [1, 116, 143, 144], "u5": [1, 116, 143, 144], "u6": [1, 116, 143, 144], "u7": [1, 116, 143, 144], "u8": [116, 143, 144], "u_count": [116, 143, 144], "u_i": 683, "uaacguua": [432, 604], "uaaguucucgaucucuaaaaucg": 230, "uaaguucucgaucuuuaaaaucg": 230, "uagguugauc": 219, "uc": 1092, "ucagucagucagucagucagucagucagucagucagucagucagucagucagucagucagucag": 436, "uccacaaaug": 219, "uconn": [107, 111], "ugaguucucgaucucuaaaaucg": 230, "ugaguucucuaucucuaaaaucg": 230, "uint8": [3, 17, 34, 220, 221, 228, 377, 379, 396, 400, 415, 416, 421, 422, 423, 424, 430, 450, 466, 470, 483, 488, 489, 490, 491, 496, 499, 501, 517, 521, 535, 540, 541, 542, 543, 549, 552, 554, 571, 575, 590, 591, 596, 597, 598, 599, 606, 611, 613, 629, 630, 636, 641, 642, 643, 644, 647], "uk": [98, 101, 120, 219, 222, 293, 680], "ulcl": 122, "ulcu": 122, "un": 225, "unabl": 233, "unalign": [98, 99, 100, 101, 102, 103, 104, 1092], "unbound": [303, 317], "uncertainti": [84, 688, 759], "unclear": 121, "unconstrain": 865, "uncorrect": [110, 111], "uncov": [122, 123, 1093], "undefin": [229, 877, 878, 974], "under": [118, 145, 220, 377, 499, 552, 611, 683, 794, 878, 897, 1089], "underli": [0, 3, 170, 196, 272, 382, 446, 453, 504, 557, 611, 616, 678, 850, 875, 881, 1092], "underlii": 3, "underpow": 875, "underscor": [225, 227], "understand": [229, 683], "understood": [93, 97, 172, 173, 185, 186, 225, 264, 265, 266, 268, 269, 270, 319, 321, 373, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 862, 863, 932, 947, 1006, 1027], "unequ": [107, 437, 649], "unescap": 225, "uneven": 140, "unfortun": [221, 878], "ungap": [417, 484, 536, 592, 637], "ungapped_subsequ": [417, 484, 536, 592, 637], "unicod": [213, 229, 272], "unifi": 688, "uniform": [1, 757], "uniformli": [16, 48, 50], "unifrac": [1, 116, 132, 143, 144, 146, 149, 870], "unimod": [865, 870], "union": [898, 922], "uniprotkb": 219, "uniq": [430, 496, 549, 606, 647], "uniqu": [1, 92, 96, 215, 220, 224, 225, 229, 230, 231, 367, 372, 430, 496, 549, 606, 647, 679, 701, 755, 861, 897, 924, 968, 977, 982], "unit": [1, 3, 143, 222, 232, 649, 870, 872, 873, 988, 1032, 1033, 1096], "univers": [219, 220, 227, 229, 233], "unix": 231, "unknown": [84, 122, 123, 222, 293, 402, 472, 523, 577, 849, 931], "unknownaxiserror": [892, 894, 900, 901, 905, 912, 914, 915, 918, 919, 920, 921, 923, 924, 925, 933, 934, 944, 946], "unknowniderror": [915, 923], "unless": [53, 65, 91, 110, 228, 1056], "unlik": [230, 849], "unmask": 53, "unnam": 1090, "unnecessari": 92, "unobserv": 134, "unpack": [17, 49, 1024], "unpack_by_func": 1023, "unpair": 225, "unpermut": [751, 753, 754], "unread": 272, "unrecogn": [892, 894, 900, 905, 912, 914, 915, 920, 921, 923, 925, 944, 946], "unrecognizedformaterror": [264, 265, 266, 268, 269, 270], "unresolv": 149, "unroot": [116, 132, 143, 144, 225, 986, 1010, 1025, 1026, 1029], "unrooted_copi": [950, 951, 975, 978, 1011, 1026], "unrooted_deepcopi": [950, 951, 975, 978, 1010, 1011, 1025], "unshar": 92, "unsign": [849, 1000], "unsolv": 683, "unstabl": 149, "unsupport": [229, 499], "until": [303, 698, 1012], "untouch": [905, 928], "untreat": 878, "unweight": [1, 132, 143, 144, 873], "unweighted_unifrac": [1, 144], "unwrit": 272, "unzip": 930, "up": [84, 105, 217, 227, 229, 230, 272, 303, 315, 608, 609, 653, 685, 692, 693, 695, 696, 697, 706, 729, 753, 849, 879, 897, 966, 971, 974, 1005, 1011, 1078, 1095], "upd": 132, "upd_": 132, "updat": [219, 220, 231, 303, 317, 611, 946], "updated_t": 946, "upon": 219, "upper": [53, 121, 122, 220, 227, 293, 303, 315, 317, 740, 747, 753, 919], "upper_bound": [111, 115, 122, 303, 315], "upper_quantil": 121, "uppercas": [377, 499, 552, 611], "upsk": 230, "uq": 121, "uracil": [219, 222, 432, 552, 604], "urinari": 879, "url": [93, 97, 172, 173, 185, 186, 264, 265, 266, 268, 269, 270, 272, 319, 321, 373, 376, 426, 435, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 862, 863, 907, 932, 941, 947, 1006, 1027], "urn": [122, 123], "us": [1, 15, 20, 45, 47, 53, 65, 72, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 98, 99, 100, 110, 111, 112, 116, 117, 120, 121, 128, 131, 132, 135, 141, 143, 144, 145, 146, 149, 161, 210, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 229, 231, 232, 233, 243, 244, 245, 261, 262, 265, 269, 272, 291, 292, 303, 315, 338, 339, 356, 357, 358, 370, 371, 375, 377, 395, 400, 412, 414, 417, 420, 427, 430, 433, 434, 436, 444, 445, 446, 447, 448, 465, 470, 480, 482, 484, 487, 494, 496, 499, 516, 521, 531, 533, 536, 539, 546, 549, 552, 570, 575, 587, 589, 592, 595, 602, 606, 608, 609, 611, 628, 630, 634, 635, 637, 640, 646, 647, 649, 653, 665, 677, 678, 680, 681, 682, 683, 688, 689, 690, 692, 693, 699, 701, 702, 706, 716, 725, 729, 740, 747, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 783, 794, 805, 827, 838, 850, 861, 864, 870, 874, 875, 876, 877, 878, 879, 897, 902, 903, 905, 928, 931, 933, 935, 936, 939, 941, 942, 949, 950, 951, 967, 969, 970, 971, 974, 975, 978, 980, 986, 987, 1005, 1010, 1011, 1018, 1020, 1025, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1055, 1078, 1092, 1095, 1096, 1097], "usag": [130, 754], "useabl": 263, "usefulli": 1028, "user": [1, 84, 142, 215, 229, 231, 232, 233, 243, 244, 245, 264, 266, 268, 270, 429, 495, 548, 605, 683, 688, 865, 870, 880, 1030, 1092], "usrman": 219, "usual": [1, 139, 219, 222, 229, 231, 649, 969], "ut": 1092, "uti": 879, "util": [1, 93, 97, 172, 173, 185, 186, 231, 243, 245, 319, 321, 373, 376, 426, 435, 436, 444, 445, 448, 493, 498, 545, 551, 601, 610, 645, 648, 670, 676, 719, 724, 744, 750, 862, 863, 907, 922, 930, 932, 935, 941, 947, 1006, 1027, 1089, 1090], "uu": 143, "uuagcucauu": 219, "uuauuguagc": 219, "uuauuuuuuu": 219, "uucuacucuu": 219, "uugagaauac": 219, "uuugaauuaa": 219, "uuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggg": 436, "uuuuuuuuuuuuuuuuccccccccccccccccaaaaaaaaaaaaaaaagggggggggggggggg": 436, "v": [53, 143, 144, 322, 358, 377, 382, 391, 453, 462, 499, 504, 513, 552, 557, 566, 616, 625, 680, 694, 698, 700, 877, 878, 1020], "v2": 214, "v_count": [143, 144], "vagin": 879, "vaginali": 879, "val": [499, 905], "val_i": 919, "val_j": 919, "valdar": 84, "valid": [98, 101, 116, 132, 141, 143, 144, 145, 146, 149, 209, 210, 211, 212, 218, 220, 221, 225, 227, 358, 371, 377, 430, 448, 496, 499, 549, 552, 606, 647, 694, 700, 702, 725, 740, 881, 907, 931, 941, 1092, 1097], "valin": 499, "valu": [1, 3, 4, 5, 7, 9, 10, 11, 14, 15, 18, 19, 21, 22, 25, 27, 28, 29, 35, 36, 38, 40, 41, 42, 46, 47, 51, 52, 55, 56, 58, 60, 61, 62, 71, 74, 76, 78, 84, 89, 98, 99, 100, 101, 102, 103, 105, 107, 118, 128, 140, 141, 144, 151, 152, 154, 156, 157, 158, 162, 163, 165, 167, 168, 169, 175, 176, 178, 180, 181, 182, 188, 189, 191, 193, 194, 195, 199, 200, 202, 204, 205, 206, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 229, 230, 234, 235, 237, 239, 240, 241, 247, 248, 250, 252, 253, 254, 272, 276, 277, 279, 280, 281, 282, 284, 286, 287, 288, 289, 291, 292, 295, 297, 298, 299, 302, 307, 309, 310, 311, 314, 318, 322, 323, 324, 326, 327, 328, 329, 331, 333, 334, 335, 336, 338, 339, 341, 342, 344, 345, 346, 347, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 365, 367, 371, 372, 375, 377, 378, 383, 386, 388, 390, 394, 395, 412, 420, 427, 428, 438, 440, 441, 442, 449, 454, 457, 459, 461, 465, 480, 487, 494, 499, 500, 505, 508, 510, 512, 516, 531, 539, 546, 552, 553, 558, 561, 563, 565, 569, 570, 587, 595, 602, 603, 611, 612, 617, 620, 622, 624, 628, 634, 640, 646, 652, 655, 656, 657, 660, 675, 680, 683, 685, 688, 692, 693, 694, 695, 696, 697, 700, 705, 708, 709, 710, 713, 723, 728, 731, 732, 733, 736, 749, 751, 752, 753, 754, 755, 756, 757, 759, 762, 763, 765, 767, 768, 769, 773, 774, 776, 778, 779, 780, 782, 784, 785, 787, 789, 790, 791, 794, 795, 796, 798, 800, 801, 802, 806, 807, 809, 811, 812, 813, 815, 817, 818, 820, 822, 823, 824, 826, 828, 829, 831, 833, 834, 835, 839, 840, 842, 844, 845, 846, 849, 852, 853, 855, 857, 858, 859, 861, 864, 865, 869, 870, 872, 874, 875, 876, 877, 878, 879, 883, 886, 888, 889, 890, 891, 892, 897, 905, 906, 907, 911, 917, 918, 921, 925, 927, 928, 931, 935, 937, 938, 944, 946, 949, 952, 953, 956, 959, 961, 962, 969, 971, 974, 1013, 1020, 1031, 1032, 1033, 1037, 1038, 1041, 1043, 1044, 1045, 1046, 1055, 1057, 1058, 1060, 1062, 1063, 1064, 1067, 1069, 1070, 1072, 1074, 1075, 1076, 1078, 1080, 1081, 1083, 1085, 1086, 1087, 1097], "valueerror": [65, 82, 84, 85, 88, 92, 94, 96, 107, 116, 118, 132, 141, 143, 144, 145, 149, 211, 264, 268, 285, 332, 350, 368, 372, 395, 396, 402, 404, 415, 418, 419, 421, 422, 423, 424, 430, 446, 448, 465, 466, 472, 474, 483, 485, 486, 488, 489, 490, 491, 496, 516, 517, 523, 525, 535, 537, 538, 540, 541, 542, 543, 549, 570, 571, 577, 579, 590, 593, 594, 596, 597, 598, 599, 606, 611, 628, 629, 632, 636, 638, 639, 641, 642, 643, 644, 647, 661, 664, 665, 678, 679, 685, 692, 693, 699, 716, 740, 752, 753, 755, 756, 794, 838, 849, 861, 864, 865, 878, 879, 880, 906, 907, 931, 937, 972, 974, 979, 987, 995, 997, 1000, 1012, 1013, 1018, 1023, 1034], "van": 698, "vanveeeeaw": 218, "var": [752, 939], "vari": [1, 755, 875, 877, 878], "variabl": [118, 212, 213, 427, 494, 546, 602, 611, 646, 683, 752, 755, 850, 851, 861, 865, 870, 871, 872, 875, 877, 878, 1055, 1078, 1097], "varianc": [111, 367, 694, 700, 752, 754, 755, 850, 866, 869, 873, 878], "variant": [1, 116, 132, 228, 231, 649], "variat": [107, 753, 865], "varieti": 224, "variou": [1, 3, 226, 358, 701, 851, 875, 1093, 1096], "vazquez": 861, "ve": [1, 220, 221, 879, 1095], "vec": 876, "vector": [3, 88, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 161, 174, 187, 198, 209, 210, 211, 212, 218, 224, 397, 399, 402, 405, 417, 420, 422, 424, 425, 427, 430, 436, 467, 469, 472, 475, 484, 487, 489, 491, 492, 494, 496, 518, 520, 523, 526, 536, 539, 541, 543, 544, 546, 547, 549, 572, 574, 577, 580, 592, 595, 597, 599, 600, 602, 606, 637, 640, 642, 644, 646, 647, 653, 681, 682, 683, 688, 689, 690, 695, 696, 697, 700, 701, 702, 706, 725, 729, 751, 754, 755, 805, 865, 879, 880, 884, 897, 930, 934, 937, 944, 1020, 1089], "vegan": [751, 752, 753, 754, 755, 864, 865, 872], "vellend": 132, "ver": 216, "verdonschot": 865, "veri": [1, 98, 99, 100, 121, 220, 225, 232, 695, 907, 974], "verifi": [219, 232, 264, 268], "versa": [225, 759, 928], "versatil": 850, "version": [1, 110, 111, 116, 132, 141, 143, 144, 145, 213, 215, 217, 218, 219, 222, 223, 227, 244, 401, 429, 431, 471, 495, 497, 522, 548, 550, 576, 605, 607, 683, 698, 881, 902, 905, 907, 928, 937, 941, 943, 948, 963, 967, 1030, 1034, 1092], "versu": [133, 137, 143, 144], "veschi": 118, "via": [82, 85, 94, 107, 122, 123, 220, 227, 400, 436, 437, 443, 470, 521, 575, 630, 751, 753, 754, 897, 937], "vice": [225, 759, 928], "viceroi": [107, 111], "view": [219, 930], "viewer": 969, "violat": 688, "viral": 230, "virgilio": 118, "viridiplanta": 219, "virol": 230, "viru": 230, "visit": 1003, "visual": [1, 850, 861], "vlen": [907, 941], "vocabulari": [222, 223, 291, 292, 338, 339, 356, 357, 358, 375], "vol": 134, "volatil": 760, "volum": [114, 1029], "vqhklrah": 230, "vrt": 231, "w": [53, 84, 107, 108, 115, 128, 132, 140, 215, 216, 217, 272, 377, 499, 552, 683, 698, 941, 943], "wa": [1, 98, 101, 107, 108, 109, 112, 115, 116, 118, 119, 120, 124, 125, 132, 133, 135, 136, 141, 143, 144, 145, 146, 217, 220, 221, 225, 227, 272, 287, 290, 291, 292, 334, 337, 338, 339, 352, 355, 356, 357, 374, 375, 417, 446, 484, 536, 592, 611, 637, 683, 694, 698, 700, 753, 805, 869, 877, 879, 965, 1007, 1028, 1029, 1090, 1095, 1097], "wai": [0, 1, 220, 221, 225, 227, 230, 232, 293, 371, 429, 495, 548, 605, 649, 683, 753, 870, 875, 897, 907, 941, 1090, 1095], "wakefield": 1028, "walk": [1025, 1026, 1095, 1097], "walli": [683, 878, 879], "wan": [53, 104], "want": [98, 99, 100, 219, 222, 303, 875, 877, 878, 879, 973, 974, 1090], "warn": [221, 229, 870, 971, 1025, 1030, 1031, 1089], "washington": [220, 225, 227, 1028], "wasn": [65, 221], "water": 101, "waterman": [0, 53, 101, 102, 103, 104], "we": [0, 1, 53, 82, 84, 85, 116, 121, 128, 132, 143, 144, 146, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 273, 293, 303, 404, 417, 427, 446, 474, 484, 494, 525, 536, 546, 579, 592, 602, 611, 632, 637, 646, 683, 688, 694, 700, 701, 751, 752, 753, 755, 756, 759, 760, 850, 861, 864, 872, 874, 875, 877, 878, 879, 894, 907, 937, 974, 1028, 1090, 1095, 1097], "weak": 377, "weaker": 759, "web": [53, 98, 101, 104, 217, 231, 751, 752, 753, 754, 755], "webfeat": 222, "webpag": 222, "websit": 84, "week": 879, "weight": [1, 116, 132, 143, 144, 225, 760, 761, 783, 794, 805, 827, 869, 873, 1028], "weighted_unifrac": [1, 143], "welcom": 220, "well": [0, 221, 229, 232, 358, 611, 688, 701, 702, 752, 754, 755, 759, 851, 865, 907, 1028, 1090, 1095, 1096], "wellcom": 221, "were": [1, 100, 103, 116, 121, 141, 143, 144, 145, 225, 227, 228, 382, 417, 453, 484, 504, 536, 557, 592, 616, 637, 751, 753, 755, 861, 878, 879, 995, 997, 1031, 1097], "wf": [221, 1097], "what": [1, 116, 132, 141, 143, 144, 145, 225, 229, 232, 233, 261, 262, 266, 270, 318, 417, 484, 536, 592, 637, 759, 849, 878, 894, 897, 907, 930, 941, 1095, 1097], "whatev": 232, "when": [1, 53, 82, 84, 85, 92, 95, 98, 99, 100, 107, 117, 132, 133, 137, 146, 149, 213, 215, 217, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 232, 243, 244, 245, 264, 265, 266, 268, 269, 270, 272, 303, 315, 358, 367, 371, 395, 402, 403, 406, 407, 420, 465, 472, 473, 487, 516, 523, 524, 539, 570, 577, 578, 581, 582, 595, 611, 628, 631, 640, 678, 683, 701, 751, 753, 754, 755, 757, 759, 782, 815, 826, 864, 872, 875, 876, 877, 878, 879, 880, 881, 897, 907, 937, 948, 974, 1008, 1025, 1026, 1029, 1033, 1034, 1055, 1090, 1095, 1097], "whenev": [221, 870], "where": [1, 3, 14, 18, 46, 51, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 140, 145, 146, 149, 150, 211, 213, 218, 220, 224, 225, 226, 229, 230, 232, 370, 397, 399, 403, 405, 415, 417, 422, 424, 425, 427, 467, 469, 473, 475, 483, 484, 489, 491, 492, 494, 518, 520, 524, 526, 535, 536, 541, 543, 544, 546, 547, 572, 574, 578, 580, 590, 592, 597, 599, 600, 602, 631, 636, 637, 642, 644, 646, 649, 653, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 706, 729, 753, 759, 849, 861, 869, 871, 872, 873, 875, 879, 880, 905, 907, 924, 936, 941, 946, 949, 973, 974, 984, 1021, 1024, 1053, 1095, 1097], "where_values_miss": [286, 333, 351], "wherea": [214, 849], "wherev": 873, "whether": [32, 66, 67, 70, 79, 89, 90, 110, 111, 132, 223, 232, 243, 245, 272, 276, 282, 291, 292, 323, 329, 338, 339, 341, 347, 356, 357, 359, 365, 375, 379, 382, 391, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 437, 443, 450, 453, 462, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 501, 504, 513, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 554, 557, 566, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 613, 616, 625, 633, 634, 635, 637, 638, 639, 658, 679, 683, 694, 700, 711, 734, 751, 753, 754, 755, 860, 872, 873, 904, 905, 907, 916, 941, 944], "which": [1, 3, 13, 15, 17, 44, 47, 65, 98, 99, 100, 107, 112, 116, 126, 132, 136, 139, 143, 144, 146, 215, 217, 218, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 243, 244, 245, 246, 258, 260, 261, 262, 263, 264, 268, 358, 377, 395, 396, 407, 415, 417, 420, 430, 446, 465, 466, 483, 484, 487, 496, 499, 516, 517, 535, 536, 539, 549, 552, 570, 571, 582, 590, 592, 595, 606, 611, 628, 629, 636, 637, 640, 647, 660, 680, 681, 682, 683, 688, 702, 713, 736, 751, 754, 755, 759, 865, 869, 870, 875, 876, 877, 878, 879, 895, 896, 897, 898, 902, 905, 921, 924, 925, 927, 933, 934, 938, 941, 943, 974, 977, 1008, 1009, 1020, 1021, 1026, 1028, 1029, 1039, 1056, 1078, 1090, 1092, 1095, 1097], "while": [0, 1, 213, 219, 220, 221, 222, 227, 293, 436, 611, 683, 755, 794, 838, 850, 861, 877, 881, 884, 948, 949, 977, 1055, 1091, 1092, 1097], "white": 219, "whitespac": [220, 221, 224, 226, 230], "whitnei": 683, "who": [225, 879], "whole": [230, 868, 876, 901, 921, 925, 927, 934, 938], "whose": [222, 228, 229, 668, 717, 741, 752, 753, 873, 900, 915, 923, 935], "why": 114, "wide": [1, 92, 132, 395, 465, 516, 570, 628], "width": [220, 224, 227], "wiener": [120, 135], "wiki": [220, 221, 227, 230, 1029], "wikipedia": [220, 221, 230, 1029, 1095], "wilcoxon": 683, "wild": [429, 495, 548, 605], "wildcard": [429, 430, 495, 496, 548, 549, 605, 606, 647], "wildcard_char": [430, 496, 549, 606, 647], "wilei": 680, "william": 117, "window": 838, "window_s": 838, "wish": [229, 1095], "with_mean": [869, 873], "with_replac": 937, "with_std": [869, 873], "within": [1, 84, 132, 140, 146, 213, 216, 220, 221, 225, 227, 229, 230, 358, 377, 499, 552, 611, 660, 688, 713, 736, 755, 756, 816, 850, 851, 861, 877, 878, 897, 926, 949, 991, 1032, 1035, 1078, 1095, 1097], "within_captur": [431, 497, 550, 607], "without": [82, 85, 92, 94, 128, 144, 216, 225, 227, 229, 230, 290, 337, 355, 374, 611, 680, 849, 861, 879, 880, 902, 919, 937, 943, 980, 989, 1021, 1054, 1055, 1090], "wllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 436, "woman": 879, "women": 879, "won": [1, 116, 141, 143, 144, 145, 221, 294, 865], "word": [0, 219, 220, 222, 225, 230, 318, 419, 486, 538, 594, 639], "work": [1, 53, 146, 220, 227, 229, 232, 358, 377, 499, 552, 701, 753, 865, 879, 913, 922, 1089, 1091, 1092, 1094, 1095], "workflow": 1089, "worri": [225, 881, 948], "worst": 1002, "would": [3, 84, 116, 118, 121, 143, 144, 217, 220, 223, 225, 227, 229, 230, 232, 358, 395, 417, 465, 484, 516, 536, 570, 592, 628, 637, 660, 695, 698, 713, 736, 759, 877, 878, 971, 1021, 1022, 1028, 1090], "wprintgc": [436, 444, 445], "wr": [220, 759], "wrap": [20, 227, 230, 1079], "wrapper": [53, 104, 122, 123, 1032], "writabl": 272, "write": [93, 172, 185, 214, 217, 218, 219, 221, 223, 224, 225, 227, 230, 232, 245, 262, 263, 272, 319, 373, 426, 493, 545, 601, 645, 670, 701, 719, 744, 782, 815, 826, 862, 932, 941, 942, 943, 963, 1006, 1034, 1089], "writeabl": 1090, "writer": [97, 173, 186, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 260, 263, 266, 270, 272, 321, 376, 435, 498, 551, 610, 648, 676, 724, 750, 863, 947, 1027], "written": [217, 220, 221, 225, 227, 358, 902, 942, 943, 1028, 1090, 1095], "wrong": 126, "wu": [132, 144], "wu_dm": 1, "wu_pc": 1, "wunsch": [0, 98, 99, 100], "www": [53, 98, 101, 104, 121, 146, 213, 215, 216, 217, 219, 220, 221, 222, 227, 231, 436, 444, 445, 752], "x": [50, 53, 118, 134, 214, 221, 228, 430, 448, 496, 499, 549, 606, 647, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 695, 696, 697, 698, 700, 753, 756, 759, 850, 851, 861, 864, 865, 866, 872, 875, 878, 879, 897, 905, 909, 918, 923, 928, 933, 935, 939, 941, 943, 944, 948, 974, 984, 1005, 1008, 1020, 1024, 1029, 1054, 1097], "x00": 273, "x01": 273, "x03": 273, "x0c": 273, "x108": 273, "x1c": 273, "x56734": 219, "x86": 273, "x89": 273, "x8b": 273, "x9ah3m": 273, "x9c": 273, "x_": [680, 681, 698, 875, 879], "x_1": [681, 682, 686, 687, 695, 696, 697], "x_d": [681, 682, 686, 687, 695, 696, 697], "x_i": [682, 686, 691, 695, 696, 697, 698], "x_j": 691, "xa6": 273, "xaa": 499, "xb7": 273, "xb9": 273, "xc1": 273, "xc4": 273, "xle": 499, "xx": 219, "xxxxxx": 448, "xyz": 217, "y": [53, 107, 118, 221, 228, 377, 499, 552, 691, 695, 696, 700, 753, 756, 759, 850, 861, 865, 866, 871, 872, 877, 923, 933, 941, 943, 944, 974, 1020], "y_": [682, 879], "y_1": [682, 695, 696], "y_2": 682, "y_d": [695, 696], "y_i": 691, "y_j": 691, "yang": 107, "ye": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231], "yeast": [433, 608], "yeild": 755, "yellow": 230, "yet": [225, 231, 232], "yield": [75, 80, 91, 220, 318, 387, 392, 401, 402, 403, 417, 418, 434, 447, 458, 463, 471, 472, 473, 484, 485, 509, 514, 522, 523, 524, 536, 537, 562, 567, 576, 577, 578, 592, 593, 609, 621, 626, 631, 637, 638, 755, 917, 918, 919, 926, 930, 984, 996, 999, 1002, 1003, 1004, 1013, 1019, 1021, 1022, 1056, 1090, 1097], "york": 109, "you": [1, 53, 98, 99, 100, 116, 141, 143, 144, 145, 146, 215, 217, 220, 221, 223, 227, 229, 230, 232, 302, 303, 315, 317, 318, 377, 499, 552, 611, 649, 740, 751, 755, 872, 875, 877, 878, 879, 936, 971, 973, 974, 1090, 1092, 1095, 1097], "your": [53, 92, 116, 141, 143, 144, 145, 221, 229, 232, 303, 755, 875, 878, 1090, 1095, 1097], "yy": 221, "z": [53, 92, 115, 229, 499, 756, 861, 917, 974, 1020], "z3": [911, 917], "zero": [3, 13, 16, 17, 44, 45, 48, 107, 117, 149, 213, 293, 314, 358, 372, 404, 474, 525, 579, 632, 680, 683, 685, 688, 692, 693, 694, 695, 696, 697, 700, 702, 751, 752, 753, 754, 755, 756, 759, 864, 870, 873, 878, 880, 881, 907, 934, 937, 941, 944, 1029, 1097], "zero_index": [53, 104], "zhao": [53, 104], "zip": 901, "zp_02903423": 215, "zscore": 111, "zxx": 221, "\u00e9": 698, "\u00f8": 132}, "titles": ["Sequence Alignments (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.alignment</span></code>)", "Community Diversity (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity</span></code>)", "Biological Embeddings (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.embedding</span></code>)", "skbio.alignment.AlignPath", "skbio.alignment.AlignPath.__eq__", "skbio.alignment.AlignPath.__ge__", "skbio.alignment.AlignPath.__getstate__", "skbio.alignment.AlignPath.__gt__", "skbio.alignment.AlignPath.__hash__", "skbio.alignment.AlignPath.__le__", "skbio.alignment.AlignPath.__lt__", "skbio.alignment.AlignPath.__ne__", "skbio.alignment.AlignPath.__str__", "skbio.alignment.AlignPath.from_bits", "skbio.alignment.AlignPath.from_coordinates", "skbio.alignment.AlignPath.from_indices", "skbio.alignment.AlignPath.from_tabular", "skbio.alignment.AlignPath.to_bits", "skbio.alignment.AlignPath.to_coordinates", "skbio.alignment.AlignPath.to_indices", "skbio.alignment.AlignmentStructure", "skbio.alignment.AlignmentStructure.__eq__", "skbio.alignment.AlignmentStructure.__ge__", "skbio.alignment.AlignmentStructure.__getitem__", "skbio.alignment.AlignmentStructure.__getstate__", "skbio.alignment.AlignmentStructure.__gt__", "skbio.alignment.AlignmentStructure.__hash__", "skbio.alignment.AlignmentStructure.__le__", "skbio.alignment.AlignmentStructure.__lt__", "skbio.alignment.AlignmentStructure.__ne__", "skbio.alignment.AlignmentStructure.__setstate__", "skbio.alignment.AlignmentStructure.__str__", "skbio.alignment.AlignmentStructure.is_zero_based", "skbio.alignment.AlignmentStructure.set_zero_based", "skbio.alignment.PairAlignPath", "skbio.alignment.PairAlignPath.__eq__", "skbio.alignment.PairAlignPath.__ge__", "skbio.alignment.PairAlignPath.__getstate__", "skbio.alignment.PairAlignPath.__gt__", "skbio.alignment.PairAlignPath.__hash__", "skbio.alignment.PairAlignPath.__le__", "skbio.alignment.PairAlignPath.__lt__", "skbio.alignment.PairAlignPath.__ne__", "skbio.alignment.PairAlignPath.__str__", "skbio.alignment.PairAlignPath.from_bits", "skbio.alignment.PairAlignPath.from_cigar", "skbio.alignment.PairAlignPath.from_coordinates", "skbio.alignment.PairAlignPath.from_indices", "skbio.alignment.PairAlignPath.from_tabular", "skbio.alignment.PairAlignPath.to_bits", "skbio.alignment.PairAlignPath.to_cigar", "skbio.alignment.PairAlignPath.to_coordinates", "skbio.alignment.PairAlignPath.to_indices", "skbio.alignment.StripedSmithWaterman", "skbio.alignment.StripedSmithWaterman.__call__", "skbio.alignment.StripedSmithWaterman.__eq__", "skbio.alignment.StripedSmithWaterman.__ge__", "skbio.alignment.StripedSmithWaterman.__getstate__", "skbio.alignment.StripedSmithWaterman.__gt__", "skbio.alignment.StripedSmithWaterman.__hash__", "skbio.alignment.StripedSmithWaterman.__le__", "skbio.alignment.StripedSmithWaterman.__lt__", "skbio.alignment.StripedSmithWaterman.__ne__", "skbio.alignment.StripedSmithWaterman.__setstate__", "skbio.alignment.StripedSmithWaterman.__str__", "skbio.alignment.TabularMSA", "skbio.alignment.TabularMSA.__bool__", "skbio.alignment.TabularMSA.__contains__", "skbio.alignment.TabularMSA.__copy__", "skbio.alignment.TabularMSA.__deepcopy__", "skbio.alignment.TabularMSA.__eq__", "skbio.alignment.TabularMSA.__ge__", "skbio.alignment.TabularMSA.__getitem__", "skbio.alignment.TabularMSA.__getstate__", "skbio.alignment.TabularMSA.__gt__", "skbio.alignment.TabularMSA.__iter__", "skbio.alignment.TabularMSA.__le__", "skbio.alignment.TabularMSA.__len__", "skbio.alignment.TabularMSA.__lt__", "skbio.alignment.TabularMSA.__ne__", "skbio.alignment.TabularMSA.__reversed__", "skbio.alignment.TabularMSA.__str__", "skbio.alignment.TabularMSA.append", "skbio.alignment.TabularMSA.consensus", "skbio.alignment.TabularMSA.conservation", "skbio.alignment.TabularMSA.extend", "skbio.alignment.TabularMSA.from_dict", "skbio.alignment.TabularMSA.from_path_seqs", "skbio.alignment.TabularMSA.gap_frequencies", "skbio.alignment.TabularMSA.has_metadata", "skbio.alignment.TabularMSA.has_positional_metadata", "skbio.alignment.TabularMSA.iter_positions", "skbio.alignment.TabularMSA.join", "skbio.alignment.TabularMSA.read", "skbio.alignment.TabularMSA.reassign_index", "skbio.alignment.TabularMSA.sort", "skbio.alignment.TabularMSA.to_dict", "skbio.alignment.TabularMSA.write", "skbio.alignment.global_pairwise_align", "skbio.alignment.global_pairwise_align_nucleotide", "skbio.alignment.global_pairwise_align_protein", "skbio.alignment.local_pairwise_align", "skbio.alignment.local_pairwise_align_nucleotide", "skbio.alignment.local_pairwise_align_protein", "skbio.alignment.local_pairwise_align_ssw", "skbio.alignment.make_identity_substitution_matrix", "Alpha diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.alpha</span></code>)", "skbio.diversity.alpha.ace", "skbio.diversity.alpha.berger_parker_d", "skbio.diversity.alpha.brillouin_d", "skbio.diversity.alpha.chao1", "skbio.diversity.alpha.chao1_ci", "skbio.diversity.alpha.dominance", "skbio.diversity.alpha.doubles", "skbio.diversity.alpha.enspie", "skbio.diversity.alpha.esty_ci", "skbio.diversity.alpha.faith_pd", "skbio.diversity.alpha.fisher_alpha", "skbio.diversity.alpha.gini_index", "skbio.diversity.alpha.goods_coverage", "skbio.diversity.alpha.heip_e", "skbio.diversity.alpha.kempton_taylor_q", "skbio.diversity.alpha.lladser_ci", "skbio.diversity.alpha.lladser_pe", "skbio.diversity.alpha.margalef", "skbio.diversity.alpha.mcintosh_d", "skbio.diversity.alpha.mcintosh_e", "skbio.diversity.alpha.menhinick", "skbio.diversity.alpha.michaelis_menten_fit", "skbio.diversity.alpha.observed_features", "skbio.diversity.alpha.observed_otus", "skbio.diversity.alpha.osd", "skbio.diversity.alpha.phydiv", "skbio.diversity.alpha.pielou_e", "skbio.diversity.alpha.robbins", "skbio.diversity.alpha.shannon", "skbio.diversity.alpha.simpson", "skbio.diversity.alpha.simpson_e", "skbio.diversity.alpha.singles", "skbio.diversity.alpha.sobs", "skbio.diversity.alpha.strong", "skbio.diversity.alpha_diversity", "Beta diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.beta</span></code>)", "skbio.diversity.beta.unweighted_unifrac", "skbio.diversity.beta.weighted_unifrac", "skbio.diversity.beta_diversity", "skbio.diversity.block_beta_diversity", "skbio.diversity.get_alpha_diversity_metrics", "skbio.diversity.get_beta_diversity_metrics", "skbio.diversity.partial_beta_diversity", "skbio.embedding.Embedding", "skbio.embedding.Embedding.__eq__", "skbio.embedding.Embedding.__ge__", "skbio.embedding.Embedding.__getstate__", "skbio.embedding.Embedding.__gt__", "skbio.embedding.Embedding.__hash__", "skbio.embedding.Embedding.__le__", "skbio.embedding.Embedding.__lt__", "skbio.embedding.Embedding.__ne__", "skbio.embedding.Embedding.__str__", "skbio.embedding.Embedding.bytes", "skbio.embedding.ProteinEmbedding", "skbio.embedding.ProteinEmbedding.__eq__", "skbio.embedding.ProteinEmbedding.__ge__", "skbio.embedding.ProteinEmbedding.__getstate__", "skbio.embedding.ProteinEmbedding.__gt__", "skbio.embedding.ProteinEmbedding.__hash__", "skbio.embedding.ProteinEmbedding.__le__", "skbio.embedding.ProteinEmbedding.__lt__", "skbio.embedding.ProteinEmbedding.__ne__", "skbio.embedding.ProteinEmbedding.__str__", "skbio.embedding.ProteinEmbedding.bytes", "skbio.embedding.ProteinEmbedding.read", "skbio.embedding.ProteinEmbedding.write", "skbio.embedding.ProteinVector", "skbio.embedding.ProteinVector.__eq__", "skbio.embedding.ProteinVector.__ge__", "skbio.embedding.ProteinVector.__getstate__", "skbio.embedding.ProteinVector.__gt__", "skbio.embedding.ProteinVector.__hash__", "skbio.embedding.ProteinVector.__le__", "skbio.embedding.ProteinVector.__lt__", "skbio.embedding.ProteinVector.__ne__", "skbio.embedding.ProteinVector.__str__", "skbio.embedding.ProteinVector.bytes", "skbio.embedding.ProteinVector.read", "skbio.embedding.ProteinVector.write", "skbio.embedding.SequenceEmbedding", "skbio.embedding.SequenceEmbedding.__eq__", "skbio.embedding.SequenceEmbedding.__ge__", "skbio.embedding.SequenceEmbedding.__getstate__", "skbio.embedding.SequenceEmbedding.__gt__", "skbio.embedding.SequenceEmbedding.__hash__", "skbio.embedding.SequenceEmbedding.__le__", "skbio.embedding.SequenceEmbedding.__lt__", "skbio.embedding.SequenceEmbedding.__ne__", "skbio.embedding.SequenceEmbedding.__str__", "skbio.embedding.SequenceEmbedding.bytes", "skbio.embedding.SequenceVector", "skbio.embedding.SequenceVector.__eq__", "skbio.embedding.SequenceVector.__ge__", "skbio.embedding.SequenceVector.__getstate__", "skbio.embedding.SequenceVector.__gt__", "skbio.embedding.SequenceVector.__hash__", "skbio.embedding.SequenceVector.__le__", "skbio.embedding.SequenceVector.__lt__", "skbio.embedding.SequenceVector.__ne__", "skbio.embedding.SequenceVector.__str__", "skbio.embedding.SequenceVector.bytes", "skbio.embedding.embed_vec_to_dataframe", "skbio.embedding.embed_vec_to_distances", "skbio.embedding.embed_vec_to_numpy", "skbio.embedding.embed_vec_to_ordination", "Simple binary dissimilarity matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.binary_dm</span></code>)", "BIOM-Format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.biom</span></code>)", "BLAST+6 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast6</span></code>)", "BLAST+7 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast7</span></code>)", "Clustal format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.clustal</span></code>)", "Embedding format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embed</span></code>).", "EMBL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embl</span></code>)", "FASTA/QUAL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fasta</span></code>)", "FASTQ format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fastq</span></code>)", "GenBank format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.genbank</span></code>)", "GFF3 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.gff3</span></code>)", "Labeled square matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.lsmat</span></code>)", "Newick format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.newick</span></code>)", "Ordination results format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.ordination</span></code>)", "PHYLIP multiple sequence alignment format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.phylip</span></code>)", "QSeq format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.qseq</span></code>)", "Format Support", "Stockholm format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.stockholm</span></code>)", "Taxdump format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.taxdump</span></code>)", "I/O Registry (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.registry</span></code>)", "skbio.io.registry.Format", "skbio.io.registry.Format.__eq__", "skbio.io.registry.Format.__ge__", "skbio.io.registry.Format.__getstate__", "skbio.io.registry.Format.__gt__", "skbio.io.registry.Format.__hash__", "skbio.io.registry.Format.__le__", "skbio.io.registry.Format.__lt__", "skbio.io.registry.Format.__ne__", "skbio.io.registry.Format.__str__", "skbio.io.registry.Format.reader", "skbio.io.registry.Format.sniffer", "skbio.io.registry.Format.writer", "skbio.io.registry.IORegistry", "skbio.io.registry.IORegistry.__eq__", "skbio.io.registry.IORegistry.__ge__", "skbio.io.registry.IORegistry.__getstate__", "skbio.io.registry.IORegistry.__gt__", "skbio.io.registry.IORegistry.__hash__", "skbio.io.registry.IORegistry.__le__", "skbio.io.registry.IORegistry.__lt__", "skbio.io.registry.IORegistry.__ne__", "skbio.io.registry.IORegistry.__str__", "skbio.io.registry.IORegistry.add_format", "skbio.io.registry.IORegistry.create_format", "skbio.io.registry.IORegistry.get_reader", "skbio.io.registry.IORegistry.get_sniffer", "skbio.io.registry.IORegistry.get_writer", "skbio.io.registry.IORegistry.list_read_formats", "skbio.io.registry.IORegistry.list_write_formats", "skbio.io.registry.IORegistry.monkey_patch", "skbio.io.registry.IORegistry.read", "skbio.io.registry.IORegistry.sniff", "skbio.io.registry.IORegistry.write", "skbio.io.registry.create_format", "skbio.io.registry.read", "skbio.io.registry.sniff", "skbio.io.registry.write", "I/O utilities (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.util</span></code>)", "skbio.io.util.open", "skbio.io.util.open_file", "skbio.io.util.open_files", "skbio.metadata.CategoricalMetadataColumn", "skbio.metadata.CategoricalMetadataColumn.__eq__", "skbio.metadata.CategoricalMetadataColumn.__ge__", "skbio.metadata.CategoricalMetadataColumn.__getstate__", "skbio.metadata.CategoricalMetadataColumn.__gt__", "skbio.metadata.CategoricalMetadataColumn.__le__", "skbio.metadata.CategoricalMetadataColumn.__lt__", "skbio.metadata.CategoricalMetadataColumn.__ne__", "skbio.metadata.CategoricalMetadataColumn.__str__", "skbio.metadata.CategoricalMetadataColumn.drop_missing_values", "skbio.metadata.CategoricalMetadataColumn.filter_ids", "skbio.metadata.CategoricalMetadataColumn.get_ids", "skbio.metadata.CategoricalMetadataColumn.get_missing", "skbio.metadata.CategoricalMetadataColumn.get_value", "skbio.metadata.CategoricalMetadataColumn.has_missing_values", "skbio.metadata.CategoricalMetadataColumn.save", "skbio.metadata.CategoricalMetadataColumn.to_dataframe", "skbio.metadata.CategoricalMetadataColumn.to_series", "skbio.metadata.Interval", "skbio.metadata.Interval.__eq__", "skbio.metadata.Interval.__ge__", "skbio.metadata.Interval.__getstate__", "skbio.metadata.Interval.__gt__", "skbio.metadata.Interval.__le__", "skbio.metadata.Interval.__lt__", "skbio.metadata.Interval.__ne__", "skbio.metadata.Interval.__str__", "skbio.metadata.Interval.drop", "skbio.metadata.IntervalMetadata", "skbio.metadata.IntervalMetadata.__copy__", "skbio.metadata.IntervalMetadata.__deepcopy__", "skbio.metadata.IntervalMetadata.__eq__", "skbio.metadata.IntervalMetadata.__ge__", "skbio.metadata.IntervalMetadata.__getstate__", "skbio.metadata.IntervalMetadata.__gt__", "skbio.metadata.IntervalMetadata.__le__", "skbio.metadata.IntervalMetadata.__lt__", "skbio.metadata.IntervalMetadata.__ne__", "skbio.metadata.IntervalMetadata.__str__", "skbio.metadata.IntervalMetadata.add", "skbio.metadata.IntervalMetadata.concat", "skbio.metadata.IntervalMetadata.drop", "skbio.metadata.IntervalMetadata.merge", "skbio.metadata.IntervalMetadata.query", "skbio.metadata.IntervalMetadata.read", "skbio.metadata.IntervalMetadata.sort", "skbio.metadata.IntervalMetadata.write", "skbio.metadata.MetadataColumn", "skbio.metadata.MetadataColumn.__eq__", "skbio.metadata.MetadataColumn.__ge__", "skbio.metadata.MetadataColumn.__getstate__", "skbio.metadata.MetadataColumn.__gt__", "skbio.metadata.MetadataColumn.__le__", "skbio.metadata.MetadataColumn.__lt__", "skbio.metadata.MetadataColumn.__ne__", "skbio.metadata.MetadataColumn.__str__", "skbio.metadata.MetadataColumn.drop_missing_values", "skbio.metadata.MetadataColumn.filter_ids", "skbio.metadata.MetadataColumn.get_ids", "skbio.metadata.MetadataColumn.get_missing", "skbio.metadata.MetadataColumn.get_value", "skbio.metadata.MetadataColumn.has_missing_values", "skbio.metadata.MetadataColumn.save", "skbio.metadata.MetadataColumn.to_dataframe", "skbio.metadata.MetadataColumn.to_series", "skbio.metadata.NumericMetadataColumn", "skbio.metadata.NumericMetadataColumn.__eq__", "skbio.metadata.NumericMetadataColumn.__ge__", "skbio.metadata.NumericMetadataColumn.__getstate__", "skbio.metadata.NumericMetadataColumn.__gt__", "skbio.metadata.NumericMetadataColumn.__le__", "skbio.metadata.NumericMetadataColumn.__lt__", "skbio.metadata.NumericMetadataColumn.__ne__", "skbio.metadata.NumericMetadataColumn.__str__", "skbio.metadata.NumericMetadataColumn.drop_missing_values", "skbio.metadata.NumericMetadataColumn.filter_ids", "skbio.metadata.NumericMetadataColumn.get_ids", "skbio.metadata.NumericMetadataColumn.get_missing", "skbio.metadata.NumericMetadataColumn.get_value", "skbio.metadata.NumericMetadataColumn.has_missing_values", "skbio.metadata.NumericMetadataColumn.save", "skbio.metadata.NumericMetadataColumn.to_dataframe", "skbio.metadata.NumericMetadataColumn.to_series", "skbio.metadata.SampleMetadata", "skbio.metadata.SampleMetadata.__eq__", "skbio.metadata.SampleMetadata.__ge__", "skbio.metadata.SampleMetadata.__getstate__", "skbio.metadata.SampleMetadata.__gt__", "skbio.metadata.SampleMetadata.__le__", "skbio.metadata.SampleMetadata.__lt__", "skbio.metadata.SampleMetadata.__ne__", "skbio.metadata.SampleMetadata.__str__", "skbio.metadata.SampleMetadata.filter_columns", "skbio.metadata.SampleMetadata.filter_ids", "skbio.metadata.SampleMetadata.get_column", "skbio.metadata.SampleMetadata.get_ids", "skbio.metadata.SampleMetadata.load", "skbio.metadata.SampleMetadata.merge", "skbio.metadata.SampleMetadata.read", "skbio.metadata.SampleMetadata.save", "skbio.metadata.SampleMetadata.to_dataframe", "skbio.metadata.SampleMetadata.write", "skbio.sequence.DNA", "skbio.sequence.DNA.__bool__", "skbio.sequence.DNA.__contains__", "skbio.sequence.DNA.__copy__", "skbio.sequence.DNA.__deepcopy__", "skbio.sequence.DNA.__eq__", "skbio.sequence.DNA.__ge__", "skbio.sequence.DNA.__getitem__", "skbio.sequence.DNA.__getstate__", "skbio.sequence.DNA.__gt__", "skbio.sequence.DNA.__iter__", "skbio.sequence.DNA.__le__", "skbio.sequence.DNA.__len__", "skbio.sequence.DNA.__lt__", "skbio.sequence.DNA.__ne__", "skbio.sequence.DNA.__reversed__", "skbio.sequence.DNA.__str__", "skbio.sequence.DNA.complement", "skbio.sequence.DNA.concat", "skbio.sequence.DNA.count", "skbio.sequence.DNA.definites", "skbio.sequence.DNA.degap", "skbio.sequence.DNA.degenerates", "skbio.sequence.DNA.distance", "skbio.sequence.DNA.expand_degenerates", "skbio.sequence.DNA.find_motifs", "skbio.sequence.DNA.find_with_regex", "skbio.sequence.DNA.frequencies", "skbio.sequence.DNA.gaps", "skbio.sequence.DNA.gc_content", "skbio.sequence.DNA.gc_frequency", "skbio.sequence.DNA.has_definites", "skbio.sequence.DNA.has_degenerates", "skbio.sequence.DNA.has_gaps", "skbio.sequence.DNA.has_interval_metadata", "skbio.sequence.DNA.has_metadata", "skbio.sequence.DNA.has_nondegenerates", "skbio.sequence.DNA.has_positional_metadata", "skbio.sequence.DNA.index", "skbio.sequence.DNA.is_reverse_complement", "skbio.sequence.DNA.iter_contiguous", "skbio.sequence.DNA.iter_kmers", "skbio.sequence.DNA.kmer_frequencies", "skbio.sequence.DNA.lowercase", "skbio.sequence.DNA.match_frequency", "skbio.sequence.DNA.matches", "skbio.sequence.DNA.mismatch_frequency", "skbio.sequence.DNA.mismatches", "skbio.sequence.DNA.nondegenerates", "skbio.sequence.DNA.read", "skbio.sequence.DNA.replace", "skbio.sequence.DNA.reverse_complement", "skbio.sequence.DNA.to_definites", "skbio.sequence.DNA.to_indices", "skbio.sequence.DNA.to_regex", "skbio.sequence.DNA.transcribe", "skbio.sequence.DNA.translate", "skbio.sequence.DNA.translate_six_frames", "skbio.sequence.DNA.write", "skbio.sequence.GeneticCode", "skbio.sequence.GeneticCode.__eq__", "skbio.sequence.GeneticCode.__ge__", "skbio.sequence.GeneticCode.__getstate__", "skbio.sequence.GeneticCode.__gt__", "skbio.sequence.GeneticCode.__le__", "skbio.sequence.GeneticCode.__lt__", "skbio.sequence.GeneticCode.__ne__", "skbio.sequence.GeneticCode.__str__", "skbio.sequence.GeneticCode.from_ncbi", "skbio.sequence.GeneticCode.translate", "skbio.sequence.GeneticCode.translate_six_frames", "skbio.sequence.GrammaredSequence", "skbio.sequence.GrammaredSequence.__bool__", "skbio.sequence.GrammaredSequence.__contains__", "skbio.sequence.GrammaredSequence.__copy__", "skbio.sequence.GrammaredSequence.__deepcopy__", "skbio.sequence.GrammaredSequence.__eq__", "skbio.sequence.GrammaredSequence.__ge__", "skbio.sequence.GrammaredSequence.__getitem__", "skbio.sequence.GrammaredSequence.__getstate__", "skbio.sequence.GrammaredSequence.__gt__", "skbio.sequence.GrammaredSequence.__iter__", "skbio.sequence.GrammaredSequence.__le__", "skbio.sequence.GrammaredSequence.__len__", "skbio.sequence.GrammaredSequence.__lt__", "skbio.sequence.GrammaredSequence.__ne__", "skbio.sequence.GrammaredSequence.__reversed__", "skbio.sequence.GrammaredSequence.__str__", "skbio.sequence.GrammaredSequence.concat", "skbio.sequence.GrammaredSequence.count", "skbio.sequence.GrammaredSequence.definites", "skbio.sequence.GrammaredSequence.degap", "skbio.sequence.GrammaredSequence.degenerates", "skbio.sequence.GrammaredSequence.distance", "skbio.sequence.GrammaredSequence.expand_degenerates", "skbio.sequence.GrammaredSequence.find_motifs", "skbio.sequence.GrammaredSequence.find_with_regex", "skbio.sequence.GrammaredSequence.frequencies", "skbio.sequence.GrammaredSequence.gaps", "skbio.sequence.GrammaredSequence.has_definites", "skbio.sequence.GrammaredSequence.has_degenerates", "skbio.sequence.GrammaredSequence.has_gaps", "skbio.sequence.GrammaredSequence.has_interval_metadata", "skbio.sequence.GrammaredSequence.has_metadata", "skbio.sequence.GrammaredSequence.has_nondegenerates", "skbio.sequence.GrammaredSequence.has_positional_metadata", "skbio.sequence.GrammaredSequence.index", "skbio.sequence.GrammaredSequence.iter_contiguous", "skbio.sequence.GrammaredSequence.iter_kmers", "skbio.sequence.GrammaredSequence.kmer_frequencies", "skbio.sequence.GrammaredSequence.lowercase", "skbio.sequence.GrammaredSequence.match_frequency", "skbio.sequence.GrammaredSequence.matches", "skbio.sequence.GrammaredSequence.mismatch_frequency", "skbio.sequence.GrammaredSequence.mismatches", "skbio.sequence.GrammaredSequence.nondegenerates", "skbio.sequence.GrammaredSequence.read", "skbio.sequence.GrammaredSequence.replace", "skbio.sequence.GrammaredSequence.to_definites", "skbio.sequence.GrammaredSequence.to_indices", "skbio.sequence.GrammaredSequence.to_regex", "skbio.sequence.GrammaredSequence.write", "skbio.sequence.Protein", "skbio.sequence.Protein.__bool__", "skbio.sequence.Protein.__contains__", "skbio.sequence.Protein.__copy__", "skbio.sequence.Protein.__deepcopy__", "skbio.sequence.Protein.__eq__", "skbio.sequence.Protein.__ge__", "skbio.sequence.Protein.__getitem__", "skbio.sequence.Protein.__getstate__", "skbio.sequence.Protein.__gt__", "skbio.sequence.Protein.__iter__", "skbio.sequence.Protein.__le__", "skbio.sequence.Protein.__len__", "skbio.sequence.Protein.__lt__", "skbio.sequence.Protein.__ne__", "skbio.sequence.Protein.__reversed__", "skbio.sequence.Protein.__str__", "skbio.sequence.Protein.concat", "skbio.sequence.Protein.count", "skbio.sequence.Protein.definites", "skbio.sequence.Protein.degap", "skbio.sequence.Protein.degenerates", "skbio.sequence.Protein.distance", "skbio.sequence.Protein.expand_degenerates", "skbio.sequence.Protein.find_motifs", "skbio.sequence.Protein.find_with_regex", "skbio.sequence.Protein.frequencies", "skbio.sequence.Protein.gaps", "skbio.sequence.Protein.has_definites", "skbio.sequence.Protein.has_degenerates", "skbio.sequence.Protein.has_gaps", "skbio.sequence.Protein.has_interval_metadata", "skbio.sequence.Protein.has_metadata", "skbio.sequence.Protein.has_nondegenerates", "skbio.sequence.Protein.has_positional_metadata", "skbio.sequence.Protein.has_stops", "skbio.sequence.Protein.index", "skbio.sequence.Protein.iter_contiguous", "skbio.sequence.Protein.iter_kmers", "skbio.sequence.Protein.kmer_frequencies", "skbio.sequence.Protein.lowercase", "skbio.sequence.Protein.match_frequency", "skbio.sequence.Protein.matches", "skbio.sequence.Protein.mismatch_frequency", "skbio.sequence.Protein.mismatches", "skbio.sequence.Protein.nondegenerates", "skbio.sequence.Protein.read", "skbio.sequence.Protein.replace", "skbio.sequence.Protein.stops", "skbio.sequence.Protein.to_definites", "skbio.sequence.Protein.to_indices", "skbio.sequence.Protein.to_regex", "skbio.sequence.Protein.write", "skbio.sequence.RNA", "skbio.sequence.RNA.__bool__", "skbio.sequence.RNA.__contains__", "skbio.sequence.RNA.__copy__", "skbio.sequence.RNA.__deepcopy__", "skbio.sequence.RNA.__eq__", "skbio.sequence.RNA.__ge__", "skbio.sequence.RNA.__getitem__", "skbio.sequence.RNA.__getstate__", "skbio.sequence.RNA.__gt__", "skbio.sequence.RNA.__iter__", "skbio.sequence.RNA.__le__", "skbio.sequence.RNA.__len__", "skbio.sequence.RNA.__lt__", "skbio.sequence.RNA.__ne__", "skbio.sequence.RNA.__reversed__", "skbio.sequence.RNA.__str__", "skbio.sequence.RNA.complement", "skbio.sequence.RNA.concat", "skbio.sequence.RNA.count", "skbio.sequence.RNA.definites", "skbio.sequence.RNA.degap", "skbio.sequence.RNA.degenerates", "skbio.sequence.RNA.distance", "skbio.sequence.RNA.expand_degenerates", "skbio.sequence.RNA.find_motifs", "skbio.sequence.RNA.find_with_regex", "skbio.sequence.RNA.frequencies", "skbio.sequence.RNA.gaps", "skbio.sequence.RNA.gc_content", "skbio.sequence.RNA.gc_frequency", "skbio.sequence.RNA.has_definites", "skbio.sequence.RNA.has_degenerates", "skbio.sequence.RNA.has_gaps", "skbio.sequence.RNA.has_interval_metadata", "skbio.sequence.RNA.has_metadata", "skbio.sequence.RNA.has_nondegenerates", "skbio.sequence.RNA.has_positional_metadata", "skbio.sequence.RNA.index", "skbio.sequence.RNA.is_reverse_complement", "skbio.sequence.RNA.iter_contiguous", "skbio.sequence.RNA.iter_kmers", "skbio.sequence.RNA.kmer_frequencies", "skbio.sequence.RNA.lowercase", "skbio.sequence.RNA.match_frequency", "skbio.sequence.RNA.matches", "skbio.sequence.RNA.mismatch_frequency", "skbio.sequence.RNA.mismatches", "skbio.sequence.RNA.nondegenerates", "skbio.sequence.RNA.read", "skbio.sequence.RNA.replace", "skbio.sequence.RNA.reverse_complement", "skbio.sequence.RNA.reverse_transcribe", "skbio.sequence.RNA.to_definites", "skbio.sequence.RNA.to_indices", "skbio.sequence.RNA.to_regex", "skbio.sequence.RNA.translate", "skbio.sequence.RNA.translate_six_frames", "skbio.sequence.RNA.write", "skbio.sequence.Sequence", "skbio.sequence.Sequence.__bool__", "skbio.sequence.Sequence.__contains__", "skbio.sequence.Sequence.__copy__", "skbio.sequence.Sequence.__deepcopy__", "skbio.sequence.Sequence.__eq__", "skbio.sequence.Sequence.__ge__", "skbio.sequence.Sequence.__getitem__", "skbio.sequence.Sequence.__getstate__", "skbio.sequence.Sequence.__gt__", "skbio.sequence.Sequence.__iter__", "skbio.sequence.Sequence.__le__", "skbio.sequence.Sequence.__len__", "skbio.sequence.Sequence.__lt__", "skbio.sequence.Sequence.__ne__", "skbio.sequence.Sequence.__reversed__", "skbio.sequence.Sequence.__str__", "skbio.sequence.Sequence.concat", "skbio.sequence.Sequence.count", "skbio.sequence.Sequence.distance", "skbio.sequence.Sequence.find_with_regex", "skbio.sequence.Sequence.frequencies", "skbio.sequence.Sequence.has_interval_metadata", "skbio.sequence.Sequence.has_metadata", "skbio.sequence.Sequence.has_positional_metadata", "skbio.sequence.Sequence.index", "skbio.sequence.Sequence.iter_contiguous", "skbio.sequence.Sequence.iter_kmers", "skbio.sequence.Sequence.kmer_frequencies", "skbio.sequence.Sequence.lowercase", "skbio.sequence.Sequence.match_frequency", "skbio.sequence.Sequence.matches", "skbio.sequence.Sequence.mismatch_frequency", "skbio.sequence.Sequence.mismatches", "skbio.sequence.Sequence.read", "skbio.sequence.Sequence.replace", "skbio.sequence.Sequence.to_indices", "skbio.sequence.Sequence.write", "skbio.sequence.SubstitutionMatrix", "skbio.sequence.SubstitutionMatrix.__contains__", "skbio.sequence.SubstitutionMatrix.__eq__", "skbio.sequence.SubstitutionMatrix.__ge__", "skbio.sequence.SubstitutionMatrix.__getitem__", "skbio.sequence.SubstitutionMatrix.__getstate__", "skbio.sequence.SubstitutionMatrix.__gt__", "skbio.sequence.SubstitutionMatrix.__le__", "skbio.sequence.SubstitutionMatrix.__lt__", "skbio.sequence.SubstitutionMatrix.__ne__", "skbio.sequence.SubstitutionMatrix.__str__", "skbio.sequence.SubstitutionMatrix.between", "skbio.sequence.SubstitutionMatrix.by_name", "skbio.sequence.SubstitutionMatrix.copy", "skbio.sequence.SubstitutionMatrix.filter", "skbio.sequence.SubstitutionMatrix.from_dict", "skbio.sequence.SubstitutionMatrix.from_iterable", "skbio.sequence.SubstitutionMatrix.get_names", "skbio.sequence.SubstitutionMatrix.identity", "skbio.sequence.SubstitutionMatrix.index", "skbio.sequence.SubstitutionMatrix.plot", "skbio.sequence.SubstitutionMatrix.read", "skbio.sequence.SubstitutionMatrix.redundant_form", "skbio.sequence.SubstitutionMatrix.to_data_frame", "skbio.sequence.SubstitutionMatrix.to_dict", "skbio.sequence.SubstitutionMatrix.transpose", "skbio.sequence.SubstitutionMatrix.within", "skbio.sequence.SubstitutionMatrix.write", "Sequence distance metrics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence.distance</span></code>)", "skbio.sequence.distance.hamming", "skbio.sequence.distance.kmer_distance", "Composition Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.composition</span></code>)", "skbio.stats.composition.alr", "skbio.stats.composition.alr_inv", "skbio.stats.composition.ancom", "skbio.stats.composition.centralize", "skbio.stats.composition.closure", "skbio.stats.composition.clr", "skbio.stats.composition.clr_inv", "skbio.stats.composition.dirmult_ttest", "skbio.stats.composition.ilr", "skbio.stats.composition.ilr_inv", "skbio.stats.composition.inner", "skbio.stats.composition.multi_replace", "skbio.stats.composition.multiplicative_replacement", "skbio.stats.composition.pairwise_vlr", "skbio.stats.composition.perturb", "skbio.stats.composition.perturb_inv", "skbio.stats.composition.power", "skbio.stats.composition.sbp_basis", "skbio.stats.composition.tree_basis", "skbio.stats.composition.vlr", "Distance matrix-based statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.distance</span></code>)", "skbio.stats.distance.DissimilarityMatrix", "skbio.stats.distance.DissimilarityMatrix.__contains__", "skbio.stats.distance.DissimilarityMatrix.__eq__", "skbio.stats.distance.DissimilarityMatrix.__ge__", "skbio.stats.distance.DissimilarityMatrix.__getitem__", "skbio.stats.distance.DissimilarityMatrix.__getstate__", "skbio.stats.distance.DissimilarityMatrix.__gt__", "skbio.stats.distance.DissimilarityMatrix.__le__", "skbio.stats.distance.DissimilarityMatrix.__lt__", "skbio.stats.distance.DissimilarityMatrix.__ne__", "skbio.stats.distance.DissimilarityMatrix.__str__", "skbio.stats.distance.DissimilarityMatrix.between", "skbio.stats.distance.DissimilarityMatrix.copy", "skbio.stats.distance.DissimilarityMatrix.filter", "skbio.stats.distance.DissimilarityMatrix.from_iterable", "skbio.stats.distance.DissimilarityMatrix.index", "skbio.stats.distance.DissimilarityMatrix.plot", "skbio.stats.distance.DissimilarityMatrix.read", "skbio.stats.distance.DissimilarityMatrix.redundant_form", "skbio.stats.distance.DissimilarityMatrix.to_data_frame", "skbio.stats.distance.DissimilarityMatrix.transpose", "skbio.stats.distance.DissimilarityMatrix.within", "skbio.stats.distance.DissimilarityMatrix.write", "skbio.stats.distance.DistanceMatrix", "skbio.stats.distance.DistanceMatrix.__contains__", "skbio.stats.distance.DistanceMatrix.__eq__", "skbio.stats.distance.DistanceMatrix.__ge__", "skbio.stats.distance.DistanceMatrix.__getitem__", "skbio.stats.distance.DistanceMatrix.__getstate__", "skbio.stats.distance.DistanceMatrix.__gt__", "skbio.stats.distance.DistanceMatrix.__le__", "skbio.stats.distance.DistanceMatrix.__lt__", "skbio.stats.distance.DistanceMatrix.__ne__", "skbio.stats.distance.DistanceMatrix.__str__", "skbio.stats.distance.DistanceMatrix.between", "skbio.stats.distance.DistanceMatrix.condensed_form", "skbio.stats.distance.DistanceMatrix.copy", "skbio.stats.distance.DistanceMatrix.filter", "skbio.stats.distance.DistanceMatrix.from_iterable", "skbio.stats.distance.DistanceMatrix.index", "skbio.stats.distance.DistanceMatrix.permute", "skbio.stats.distance.DistanceMatrix.plot", "skbio.stats.distance.DistanceMatrix.read", "skbio.stats.distance.DistanceMatrix.redundant_form", "skbio.stats.distance.DistanceMatrix.to_data_frame", "skbio.stats.distance.DistanceMatrix.to_series", "skbio.stats.distance.DistanceMatrix.transpose", "skbio.stats.distance.DistanceMatrix.within", "skbio.stats.distance.DistanceMatrix.write", "skbio.stats.distance.anosim", "skbio.stats.distance.bioenv", "skbio.stats.distance.mantel", "skbio.stats.distance.permanova", "skbio.stats.distance.permdisp", "skbio.stats.distance.pwmantel", "skbio.stats.distance.randdm", "Evolutionary statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.evolve</span></code>)", "skbio.stats.evolve.hommola_cospeciation", "Gradient analyses (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.gradient</span></code>)", "skbio.stats.gradient.AverageGradientANOVA", "skbio.stats.gradient.AverageGradientANOVA.__eq__", "skbio.stats.gradient.AverageGradientANOVA.__ge__", "skbio.stats.gradient.AverageGradientANOVA.__getstate__", "skbio.stats.gradient.AverageGradientANOVA.__gt__", "skbio.stats.gradient.AverageGradientANOVA.__hash__", "skbio.stats.gradient.AverageGradientANOVA.__le__", "skbio.stats.gradient.AverageGradientANOVA.__lt__", "skbio.stats.gradient.AverageGradientANOVA.__ne__", "skbio.stats.gradient.AverageGradientANOVA.__str__", "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "skbio.stats.gradient.CategoryResults", "skbio.stats.gradient.CategoryResults.__eq__", "skbio.stats.gradient.CategoryResults.__ge__", "skbio.stats.gradient.CategoryResults.__getstate__", "skbio.stats.gradient.CategoryResults.__gt__", "skbio.stats.gradient.CategoryResults.__hash__", "skbio.stats.gradient.CategoryResults.__le__", "skbio.stats.gradient.CategoryResults.__lt__", "skbio.stats.gradient.CategoryResults.__ne__", "skbio.stats.gradient.CategoryResults.__str__", "skbio.stats.gradient.CategoryResults.to_files", "skbio.stats.gradient.FirstDifferenceGradientANOVA", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVA", "skbio.stats.gradient.GradientANOVA.__eq__", "skbio.stats.gradient.GradientANOVA.__ge__", "skbio.stats.gradient.GradientANOVA.__getstate__", "skbio.stats.gradient.GradientANOVA.__gt__", "skbio.stats.gradient.GradientANOVA.__hash__", "skbio.stats.gradient.GradientANOVA.__le__", "skbio.stats.gradient.GradientANOVA.__lt__", "skbio.stats.gradient.GradientANOVA.__ne__", "skbio.stats.gradient.GradientANOVA.__str__", "skbio.stats.gradient.GradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVAResults", "skbio.stats.gradient.GradientANOVAResults.__eq__", "skbio.stats.gradient.GradientANOVAResults.__ge__", "skbio.stats.gradient.GradientANOVAResults.__getstate__", "skbio.stats.gradient.GradientANOVAResults.__gt__", "skbio.stats.gradient.GradientANOVAResults.__hash__", "skbio.stats.gradient.GradientANOVAResults.__le__", "skbio.stats.gradient.GradientANOVAResults.__lt__", "skbio.stats.gradient.GradientANOVAResults.__ne__", "skbio.stats.gradient.GradientANOVAResults.__str__", "skbio.stats.gradient.GradientANOVAResults.to_files", "skbio.stats.gradient.GroupResults", "skbio.stats.gradient.GroupResults.__eq__", "skbio.stats.gradient.GroupResults.__ge__", "skbio.stats.gradient.GroupResults.__getstate__", "skbio.stats.gradient.GroupResults.__gt__", "skbio.stats.gradient.GroupResults.__hash__", "skbio.stats.gradient.GroupResults.__le__", "skbio.stats.gradient.GroupResults.__lt__", "skbio.stats.gradient.GroupResults.__ne__", "skbio.stats.gradient.GroupResults.__str__", "skbio.stats.gradient.GroupResults.to_files", "skbio.stats.gradient.TrajectoryGradientANOVA", "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "skbio.stats.gradient.WindowDifferenceGradientANOVA", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "skbio.stats.isubsample", "Ordination methods (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.ordination</span></code>)", "skbio.stats.ordination.OrdinationResults", "skbio.stats.ordination.OrdinationResults.__eq__", "skbio.stats.ordination.OrdinationResults.__ge__", "skbio.stats.ordination.OrdinationResults.__getstate__", "skbio.stats.ordination.OrdinationResults.__gt__", "skbio.stats.ordination.OrdinationResults.__hash__", "skbio.stats.ordination.OrdinationResults.__le__", "skbio.stats.ordination.OrdinationResults.__lt__", "skbio.stats.ordination.OrdinationResults.__ne__", "skbio.stats.ordination.OrdinationResults.__str__", "skbio.stats.ordination.OrdinationResults.plot", "skbio.stats.ordination.OrdinationResults.read", "skbio.stats.ordination.OrdinationResults.write", "skbio.stats.ordination.ca", "skbio.stats.ordination.cca", "skbio.stats.ordination.corr", "skbio.stats.ordination.e_matrix", "skbio.stats.ordination.f_matrix", "skbio.stats.ordination.mean_and_std", "skbio.stats.ordination.pcoa", "skbio.stats.ordination.pcoa_biplot", "skbio.stats.ordination.rda", "skbio.stats.ordination.scale", "skbio.stats.ordination.svd_rank", "Empirical Power Estimation (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.power</span></code>)", "skbio.stats.power.confidence_bound", "skbio.stats.power.paired_subsamples", "skbio.stats.power.subsample_paired_power", "skbio.stats.power.subsample_power", "skbio.stats.subsample_counts", "skbio.table.Table", "skbio.table.Table.__eq__", "skbio.table.Table.__ge__", "skbio.table.Table.__getitem__", "skbio.table.Table.__getstate__", "skbio.table.Table.__gt__", "skbio.table.Table.__iter__", "skbio.table.Table.__le__", "skbio.table.Table.__lt__", "skbio.table.Table.__ne__", "skbio.table.Table.__str__", "skbio.table.Table.add_group_metadata", "skbio.table.Table.add_metadata", "skbio.table.Table.align_to", "skbio.table.Table.align_to_dataframe", "skbio.table.Table.align_tree", "skbio.table.Table.collapse", "skbio.table.Table.concat", "skbio.table.Table.copy", "skbio.table.Table.data", "skbio.table.Table.del_metadata", "skbio.table.Table.delimited_self", "skbio.table.Table.descriptive_equality", "skbio.table.Table.exists", "skbio.table.Table.filter", "skbio.table.Table.from_adjacency", "skbio.table.Table.from_hdf5", "skbio.table.Table.from_json", "skbio.table.Table.from_tsv", "skbio.table.Table.get_table_density", "skbio.table.Table.get_value_by_ids", "skbio.table.Table.group_metadata", "skbio.table.Table.head", "skbio.table.Table.ids", "skbio.table.Table.index", "skbio.table.Table.is_empty", "skbio.table.Table.iter", "skbio.table.Table.iter_data", "skbio.table.Table.iter_pairwise", "skbio.table.Table.length", "skbio.table.Table.max", "skbio.table.Table.merge", "skbio.table.Table.metadata", "skbio.table.Table.metadata_to_dataframe", "skbio.table.Table.min", "skbio.table.Table.nonzero", "skbio.table.Table.nonzero_counts", "skbio.table.Table.norm", "skbio.table.Table.pa", "skbio.table.Table.partition", "skbio.table.Table.rankdata", "skbio.table.Table.read", "skbio.table.Table.reduce", "skbio.table.Table.remove_empty", "skbio.table.Table.sort", "skbio.table.Table.sort_order", "skbio.table.Table.subsample", "skbio.table.Table.sum", "skbio.table.Table.to_anndata", "skbio.table.Table.to_dataframe", "skbio.table.Table.to_hdf5", "skbio.table.Table.to_json", "skbio.table.Table.to_tsv", "skbio.table.Table.transform", "skbio.table.Table.transpose", "skbio.table.Table.update_ids", "skbio.table.Table.write", "skbio.table.example_table", "skbio.tree.TreeNode", "skbio.tree.TreeNode.__copy__", "skbio.tree.TreeNode.__deepcopy__", "skbio.tree.TreeNode.__eq__", "skbio.tree.TreeNode.__ge__", "skbio.tree.TreeNode.__getitem__", "skbio.tree.TreeNode.__getstate__", "skbio.tree.TreeNode.__gt__", "skbio.tree.TreeNode.__hash__", "skbio.tree.TreeNode.__iter__", "skbio.tree.TreeNode.__le__", "skbio.tree.TreeNode.__len__", "skbio.tree.TreeNode.__lt__", "skbio.tree.TreeNode.__ne__", "skbio.tree.TreeNode.__str__", "skbio.tree.TreeNode.accumulate_to_ancestor", "skbio.tree.TreeNode.ancestors", "skbio.tree.TreeNode.append", "skbio.tree.TreeNode.ascii_art", "skbio.tree.TreeNode.assign_ids", "skbio.tree.TreeNode.assign_supports", "skbio.tree.TreeNode.bifurcate", "skbio.tree.TreeNode.cache_attr", "skbio.tree.TreeNode.compare_rfd", "skbio.tree.TreeNode.compare_subsets", "skbio.tree.TreeNode.compare_tip_distances", "skbio.tree.TreeNode.copy", "skbio.tree.TreeNode.count", "skbio.tree.TreeNode.create_caches", "skbio.tree.TreeNode.deepcopy", "skbio.tree.TreeNode.descending_branch_length", "skbio.tree.TreeNode.distance", "skbio.tree.TreeNode.extend", "skbio.tree.TreeNode.find", "skbio.tree.TreeNode.find_all", "skbio.tree.TreeNode.find_by_func", "skbio.tree.TreeNode.find_by_id", "skbio.tree.TreeNode.from_linkage_matrix", "skbio.tree.TreeNode.from_taxdump", "skbio.tree.TreeNode.from_taxonomy", "skbio.tree.TreeNode.get_max_distance", "skbio.tree.TreeNode.has_children", "skbio.tree.TreeNode.index_tree", "skbio.tree.TreeNode.invalidate_caches", "skbio.tree.TreeNode.is_root", "skbio.tree.TreeNode.is_tip", "skbio.tree.TreeNode.lca", "skbio.tree.TreeNode.levelorder", "skbio.tree.TreeNode.lowest_common_ancestor", "skbio.tree.TreeNode.neighbors", "skbio.tree.TreeNode.non_tips", "skbio.tree.TreeNode.observed_node_counts", "skbio.tree.TreeNode.pop", "skbio.tree.TreeNode.postorder", "skbio.tree.TreeNode.pre_and_postorder", "skbio.tree.TreeNode.preorder", "skbio.tree.TreeNode.prune", "skbio.tree.TreeNode.read", "skbio.tree.TreeNode.remove", "skbio.tree.TreeNode.remove_deleted", "skbio.tree.TreeNode.root", "skbio.tree.TreeNode.root_at", "skbio.tree.TreeNode.root_at_midpoint", "skbio.tree.TreeNode.shear", "skbio.tree.TreeNode.shuffle", "skbio.tree.TreeNode.siblings", "skbio.tree.TreeNode.subset", "skbio.tree.TreeNode.subsets", "skbio.tree.TreeNode.subtree", "skbio.tree.TreeNode.tip_tip_distances", "skbio.tree.TreeNode.tips", "skbio.tree.TreeNode.to_array", "skbio.tree.TreeNode.to_taxonomy", "skbio.tree.TreeNode.traverse", "skbio.tree.TreeNode.unpack", "skbio.tree.TreeNode.unpack_by_func", "skbio.tree.TreeNode.unrooted_copy", "skbio.tree.TreeNode.unrooted_deepcopy", "skbio.tree.TreeNode.write", "skbio.tree.majority_rule", "skbio.tree.nj", "skbio.util.EfficiencyWarning", "skbio.util.RepresentationWarning", "skbio.util.assert_data_frame_almost_equal", "skbio.util.assert_ordination_results_equal", "skbio.util.cardinal_to_ordinal", "skbio.util.classproperty", "skbio.util.classproperty.__delete__", "skbio.util.classproperty.__eq__", "skbio.util.classproperty.__ge__", "skbio.util.classproperty.__get__", "skbio.util.classproperty.__getstate__", "skbio.util.classproperty.__gt__", "skbio.util.classproperty.__hash__", "skbio.util.classproperty.__le__", "skbio.util.classproperty.__lt__", "skbio.util.classproperty.__ne__", "skbio.util.classproperty.__set__", "skbio.util.classproperty.__set_name__", "skbio.util.classproperty.__str__", "skbio.util.classproperty.deleter", "skbio.util.classproperty.getter", "skbio.util.classproperty.setter", "skbio.util.find_duplicates", "skbio.util.get_data_path", "skbio.util.safe_md5", "skbio.workflow.Workflow", "skbio.workflow.Workflow.__call__", "skbio.workflow.Workflow.__eq__", "skbio.workflow.Workflow.__ge__", "skbio.workflow.Workflow.__getstate__", "skbio.workflow.Workflow.__gt__", "skbio.workflow.Workflow.__hash__", "skbio.workflow.Workflow.__le__", "skbio.workflow.Workflow.__lt__", "skbio.workflow.Workflow.__ne__", "skbio.workflow.Workflow.__str__", "skbio.workflow.Workflow.initialize_state", "skbio.workflow.method", "skbio.workflow.method.__call__", "skbio.workflow.method.__eq__", "skbio.workflow.method.__ge__", "skbio.workflow.method.__getstate__", "skbio.workflow.method.__gt__", "skbio.workflow.method.__hash__", "skbio.workflow.method.__le__", "skbio.workflow.method.__lt__", "skbio.workflow.method.__ne__", "skbio.workflow.method.__str__", "skbio.workflow.requires", "skbio.workflow.requires.__call__", "skbio.workflow.requires.__eq__", "skbio.workflow.requires.__ge__", "skbio.workflow.requires.__getstate__", "skbio.workflow.requires.__gt__", "skbio.workflow.requires.__hash__", "skbio.workflow.requires.__le__", "skbio.workflow.requires.__lt__", "skbio.workflow.requires.__ne__", "skbio.workflow.requires.__str__", "Home", "Input and Output (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io</span></code>)", "Metadata (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.metadata</span></code>)", "Biological Sequences (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence</span></code>)", "Multivariate Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats</span></code>)", "Data Table (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.table</span></code>)", "Trees and Phylogenetics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.tree</span></code>)", "Utilities for Developers (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.util</span></code>)", "Workflow construction (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.workflow</span></code>)"], "titleterms": {"0": 1089, "1": 1089, "6": [215, 1089], "7": 216, "__bool__": [66, 378, 449, 500, 553, 612], "__call__": [54, 1056, 1068, 1079], "__contains__": [67, 379, 450, 501, 554, 613, 650, 703, 726], "__copy__": [68, 304, 380, 451, 502, 555, 614, 950], "__deepcopy__": [69, 305, 381, 452, 503, 556, 615, 951], "__delete__": 1036, "__eq__": [4, 21, 35, 55, 70, 151, 162, 175, 188, 199, 234, 247, 276, 294, 306, 323, 341, 359, 382, 437, 453, 504, 557, 616, 651, 704, 727, 762, 773, 784, 795, 806, 817, 828, 839, 852, 882, 952, 1037, 1057, 1069, 1080], "__ge__": [5, 22, 36, 56, 71, 152, 163, 176, 189, 200, 235, 248, 277, 295, 307, 324, 342, 360, 383, 438, 454, 505, 558, 617, 652, 705, 728, 763, 774, 785, 796, 807, 818, 829, 840, 853, 883, 953, 1038, 1058, 1070, 1081], "__get__": 1039, "__getitem__": [23, 72, 384, 455, 506, 559, 618, 653, 706, 729, 884, 954], "__getstate__": [6, 24, 37, 57, 73, 153, 164, 177, 190, 201, 236, 249, 278, 296, 308, 325, 343, 361, 385, 439, 456, 507, 560, 619, 654, 707, 730, 764, 775, 786, 797, 808, 819, 830, 841, 854, 885, 955, 1040, 1059, 1071, 1082], "__gt__": [7, 25, 38, 58, 74, 154, 165, 178, 191, 202, 237, 250, 279, 297, 309, 326, 344, 362, 386, 440, 457, 508, 561, 620, 655, 708, 731, 765, 776, 787, 798, 809, 820, 831, 842, 855, 886, 956, 1041, 1060, 1072, 1083], "__hash__": [8, 26, 39, 59, 155, 166, 179, 192, 203, 238, 251, 766, 777, 788, 799, 810, 821, 832, 843, 856, 957, 1042, 1061, 1073, 1084], "__iter__": [75, 387, 458, 509, 562, 621, 887, 958], "__le__": [9, 27, 40, 60, 76, 156, 167, 180, 193, 204, 239, 252, 280, 298, 310, 327, 345, 363, 388, 441, 459, 510, 563, 622, 656, 709, 732, 767, 778, 789, 800, 811, 822, 833, 844, 857, 888, 959, 1043, 1062, 1074, 1085], "__len__": [77, 389, 460, 511, 564, 623, 960], "__lt__": [10, 28, 41, 61, 78, 157, 168, 181, 194, 205, 240, 253, 281, 299, 311, 328, 346, 364, 390, 442, 461, 512, 565, 624, 657, 710, 733, 768, 779, 790, 801, 812, 823, 834, 845, 858, 889, 961, 1044, 1063, 1075, 1086], "__ne__": [11, 29, 42, 62, 79, 158, 169, 182, 195, 206, 241, 254, 282, 300, 312, 329, 347, 365, 391, 443, 462, 513, 566, 625, 658, 711, 734, 769, 780, 791, 802, 813, 824, 835, 846, 859, 890, 962, 1045, 1064, 1076, 1087], "__reversed__": [80, 392, 463, 514, 567, 626], "__set__": 1046, "__set_name__": 1047, "__setstate__": [30, 63], "__str__": [12, 31, 43, 64, 81, 159, 170, 183, 196, 207, 242, 255, 283, 301, 313, 330, 348, 366, 393, 444, 464, 515, 568, 627, 659, 712, 735, 770, 781, 792, 803, 814, 825, 836, 847, 860, 891, 963, 1048, 1065, 1077, 1088], "ac": 107, "accumulate_to_ancestor": 964, "ad": 225, "add": 314, "add_format": 256, "add_group_metadata": 892, "add_metadata": 893, "advanc": 225, "algorithm": 0, "align": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 217, 227, 230], "align_to": 894, "align_to_datafram": 895, "align_tre": 896, "alignmentstructur": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "alignpath": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "alpha": [1, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], "alpha_divers": 141, "alr": 681, "alr_inv": 682, "analys": 760, "analysi": 850, "ancestor": 965, "ancom": 683, "anosim": 751, "append": [82, 966], "applic": 225, "argument": 232, "ascii_art": 967, "assert_data_frame_almost_equ": 1032, "assert_ordination_results_equ": 1033, "assign_id": 968, "assign_support": 969, "averagegradientanova": [761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771], "base": 701, "basic": 225, "befor": [219, 222], "berger_parker_d": 108, "beta": [1, 142, 143, 144], "beta_divers": 145, "between": [660, 713, 736], "bifurc": 970, "binari": 213, "binary_dm": 213, "bio": [232, 1089, 1090], "bioenv": 752, "biolog": [2, 1092], "biom": [214, 1094], "blast": [215, 216], "blast6": 215, "blast7": 216, "block_beta_divers": 146, "brillouin_d": 109, "by_nam": 661, "byte": [160, 171, 184, 197, 208], "ca": 864, "cache_attr": 971, "calcul": 1092, "can": 1090, "canon": 850, "cardinal_to_ordin": 1034, "categor": 701, "categoricalmetadatacolumn": [275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292], "categoryresult": [772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782], "caveat": 225, "cca": 865, "central": 684, "chao1": 110, "chao1_ci": 111, "charact": 229, "class": [232, 701, 760, 1097], "classproperti": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "closur": 685, "clr": 686, "clr_inv": 687, "clustal": 217, "collaps": 897, "column": [215, 216, 229, 1091], "comment": [225, 229], "commun": 1, "compare_rfd": 972, "compare_subset": 973, "compare_tip_dist": 974, "comparison": 701, "complement": [394, 569], "composit": [680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 1093], "concat": [315, 395, 465, 516, 570, 628, 898], "condensed_form": 737, "confidence_bound": 876, "consensu": 83, "conserv": 84, "construct": 1097, "continu": 701, "cophylogenet": 758, "copi": [662, 714, 738, 899, 975], "corr": 866, "correspond": 850, "count": [1, 396, 466, 517, 571, 629, 976], "creat": 232, "create_cach": 977, "create_format": [257, 267], "custom": 1090, "data": [0, 220, 701, 900, 1093, 1094], "decor": 1097, "deepcopi": 978, "definit": [397, 467, 518, 572], "degap": [398, 468, 519, 573], "degener": [399, 469, 520, 574], "del_metadata": 901, "delet": 1049, "delimited_self": 902, "deprec": 0, "descending_branch_length": 979, "descriptive_equ": 903, "dev": 1089, "develop": [1090, 1096], "dirmult_ttest": 688, "dissimilar": 213, "dissimilaritymatrix": [702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724], "distanc": [400, 470, 521, 575, 630, 677, 678, 679, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 980, 1092, 1093], "distancematrix": [725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750], "divers": [1, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], "divis": 231, "dmp": 231, "dna": [377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435], "document": 1089, "domin": 112, "doubl": 113, "drop": [302, 316], "drop_missing_valu": [284, 331, 349], "e_matrix": 867, "efficiencywarn": 1030, "emb": 218, "embed": [2, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 218], "embed_vec_to_datafram": 209, "embed_vec_to_dist": 210, "embed_vec_to_numpi": 211, "embed_vec_to_ordin": 212, "embl": 219, "empir": 875, "empti": 229, "enspi": 114, "estim": 875, "esty_ci": 115, "evolutionari": 758, "evolv": [758, 759], "exampl": [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 701, 760, 850, 875, 1094], "example_t": 948, "except": [232, 701, 1090, 1095], "exist": 904, "expand_degener": [401, 471, 522, 576], "explan": 225, "extend": [85, 981], "f_matrix": 868, "faith_pd": 116, "fasta": 220, "fastq": 221, "featur": [219, 222], "fh": 219, "file": [219, 220, 222, 1090], "filter": [663, 715, 739, 905], "filter_column": 367, "filter_id": [285, 332, 350, 368], "find": 982, "find_al": 983, "find_by_func": 984, "find_by_id": 985, "find_dupl": 1052, "find_motif": [402, 472, 523, 577], "find_with_regex": [403, 473, 524, 578, 631], "firstdifferencegradientanova": [783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793], "fisher_alpha": 117, "footer": 230, "formal": 225, "format": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 1090], "frequenc": [404, 474, 525, 579, 632], "from": 1090, "from_adjac": 906, "from_bit": [13, 44], "from_cigar": 45, "from_coordin": [14, 46], "from_dict": [86, 664], "from_hdf5": 907, "from_indic": [15, 47], "from_iter": [665, 716, 740], "from_json": 908, "from_linkage_matrix": 986, "from_ncbi": 445, "from_path_seq": 87, "from_tabular": [16, 48], "from_taxdump": 987, "from_taxonomi": 988, "from_tsv": 909, "ft": 219, "function": [0, 106, 142, 232, 271, 677, 680, 701, 758, 850, 875, 1096], "g": 230, "gap": [405, 475, 526, 580], "gap_frequ": 88, "gc": 230, "gc_content": [406, 581], "gc_frequenc": [407, 582], "genbank": 222, "gencod": 231, "gener": [219, 220, 228], "geneticcod": [436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447], "get_alpha_diversity_metr": 147, "get_beta_diversity_metr": 148, "get_column": 369, "get_data_path": 1053, "get_id": [286, 333, 351, 370], "get_max_dist": 989, "get_miss": [287, 334, 352], "get_nam": 666, "get_read": 258, "get_sniff": 259, "get_table_dens": 910, "get_trajectori": [771, 793, 804, 837, 848], "get_valu": [288, 335, 353], "get_value_by_id": 911, "get_writ": 260, "getter": 1050, "gf": 230, "gff3": 223, "gini_index": 118, "global_pairwise_align": 98, "global_pairwise_align_nucleotid": 99, "global_pairwise_align_protein": 100, "goods_coverag": 119, "gr": 230, "gradient": [760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848], "gradientanova": [794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804], "gradientanovaresult": [805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815], "grammar": 225, "grammaredsequ": [448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498], "group_metadata": 912, "groupresult": [816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826], "ham": 678, "has_children": 990, "has_definit": [408, 476, 527, 583], "has_degener": [409, 477, 528, 584], "has_gap": [410, 478, 529, 585], "has_interval_metadata": [411, 479, 530, 586, 633], "has_metadata": [89, 412, 480, 531, 587, 634], "has_missing_valu": [289, 336, 354], "has_nondegener": [413, 481, 532, 588], "has_positional_metadata": [90, 414, 482, 533, 589, 635], "has_stop": 534, "head": 913, "header": [219, 220, 227, 230], "heip_": 120, "hommola_cospeci": 759, "i": [232, 271], "id": 914, "ident": 667, "identifi": 229, "ilr": 689, "ilr_inv": 690, "index": [415, 483, 535, 590, 636, 668, 717, 741, 915], "index_tre": 991, "inform": 225, "initialize_st": 1066, "inlin": 225, "inner": 691, "input": [1, 1090], "interv": [293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 1091], "intervalmetadata": [303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321], "introduct": 1, "invalidate_cach": 992, "io": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 1090], "ioregistri": [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "is_empti": 916, "is_reverse_compl": [416, 591], "is_root": 993, "is_tip": 994, "is_zero_bas": 32, "isubsampl": 849, "iter": 917, "iter_contigu": [417, 484, 536, 592, 637], "iter_data": 918, "iter_km": [418, 485, 537, 593, 638], "iter_pairwis": 919, "iter_posit": 91, "join": 92, "kempton_taylor_q": 121, "keyword": 232, "kind": 1090, "kmer_dist": 679, "kmer_frequ": [419, 486, 538, 594, 639], "label": [224, 225], "lca": 995, "lead": 229, "length": [225, 920], "level": 219, "levelord": 996, "list_read_format": 261, "list_write_format": 262, "lladser_ci": 122, "lladser_p": 123, "load": 371, "local_pairwise_align": 101, "local_pairwise_align_nucleotid": 102, "local_pairwise_align_protein": 103, "local_pairwise_align_ssw": 104, "locat": 222, "lowercas": [420, 487, 539, 595, 640], "lowest_common_ancestor": 997, "lsmat": 224, "majority_rul": 1028, "make_identity_substitution_matrix": 105, "mantel": 753, "margalef": 124, "match": [422, 489, 541, 597, 642], "match_frequ": [421, 488, 540, 596, 641], "matrix": [213, 224, 701, 1093], "max": 921, "mcintosh_": 126, "mcintosh_d": 125, "mean_and_std": 869, "measur": [106, 142], "menhinick": 127, "merg": [317, 372, 922], "metadata": [229, 230, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 923, 1091], "metadata_to_datafram": 924, "metadatacolumn": [322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "method": [758, 850, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1093], "metric": [1, 677], "michaelis_menten_fit": 128, "min": 925, "miscellan": 1096, "mismatch": [424, 491, 543, 599, 644], "mismatch_frequ": [423, 490, 542, 598, 643], "monkey_patch": 263, "multi_replac": 692, "multidimension": 850, "multipl": [227, 230], "multiplicative_replac": 693, "multivari": 1093, "name": 231, "neighbor": 998, "new": 232, "newick": 225, "nj": 1029, "node": [225, 231], "non_tip": 999, "nondegener": [425, 492, 544, 600], "nonzero": 926, "nonzero_count": 927, "norm": 928, "number": 229, "numericmetadatacolumn": [340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357], "o": [232, 271], "observed_featur": 129, "observed_node_count": 1000, "observed_otu": 130, "onli": 228, "open": 272, "open_fil": [273, 274], "oper": 1095, "optim": 0, "ordin": [226, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 1093], "ordinationresult": [851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863], "origin": 222, "osd": 131, "other": 1093, "output": 1090, "pa": 929, "pairalignpath": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "paired_subsampl": 877, "pairwise_vlr": 694, "paramet": [215, 217, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231], "partial_beta_divers": 149, "partit": 930, "pcoa": 870, "pcoa_biplot": 871, "permanova": 754, "permdisp": 755, "permut": 742, "perturb": 695, "perturb_inv": 696, "phydiv": 132, "phylip": 227, "phylogenet": 1095, "pielou_": 133, "plot": [669, 718, 743, 861], "pop": 1001, "postord": 1002, "power": [697, 875, 876, 877, 878, 879], "pre_and_postord": 1003, "preorder": 1004, "product": 219, "protein": [499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551], "proteinembed": [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], "proteinvector": [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186], "prune": 1005, "pwmantel": 756, "qseq": 228, "qual": 220, "qualiti": 221, "queri": 318, "randdm": 757, "rankdata": 931, "rda": 872, "read": [93, 172, 185, 219, 220, 222, 264, 268, 319, 373, 426, 493, 545, 601, 645, 670, 719, 744, 862, 932, 1006, 1090], "reader": [220, 222, 223, 243], "reassign_index": 94, "recommend": 229, "reconstruct": 1095, "reduc": 933, "redundant_form": [671, 720, 745], "refer": [213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 227, 228, 230, 231, 680, 701, 850], "registri": [232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270], "remov": 1007, "remove_delet": 1008, "remove_empti": 934, "replac": [427, 494, 546, 602, 646], "representationwarn": 1031, "requir": [229, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088], "reserv": 232, "result": [226, 850], "reverse_compl": [428, 603], "reverse_transcrib": 604, "rna": [552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610], "robbin": 134, "root": 1009, "root_at": 1010, "root_at_midpoint": 1011, "row": 229, "rule": 225, "safe_md5": 1054, "sampl": 1091, "samplemetadata": [358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "save": [290, 337, 355, 374], "sbp_basi": 698, "scale": [850, 873], "scikit": [232, 1089, 1090], "score": 221, "section": [217, 219, 222, 227], "sequenc": [0, 220, 227, 230, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 1092], "sequenceembed": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197], "sequencevector": [198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "set_zero_bas": 33, "setter": 1051, "shannon": 135, "shear": 1012, "shuffl": 1013, "sibl": 1014, "simpl": 213, "simpson": 136, "simpson_": 137, "singl": 138, "skbio": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097], "slow": 0, "sniff": [265, 269], "sniffer": 244, "sob": 139, "sort": [95, 320, 935], "sort_ord": 936, "specif": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231], "specifi": 1, "sq": 219, "squar": 224, "stat": [680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 1093], "statist": [680, 701, 758, 1093], "stockholm": 230, "stop": 547, "string": 222, "stripedsmithwaterman": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], "strong": 140, "structur": [0, 701, 1095], "subsampl": [937, 1093], "subsample_count": 880, "subsample_paired_pow": 878, "subsample_pow": 879, "subset": [1015, 1016], "substitutionmatrix": [649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676], "subtre": 1017, "sum": 938, "support": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 1090], "svd_rank": 874, "symbol": 225, "tabl": [881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 1094], "tabularmsa": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 220], "taxdump": 231, "test": 1096, "tip": 1019, "tip_tip_dist": 1018, "to_anndata": 939, "to_arrai": 1020, "to_bit": [17, 49], "to_cigar": 50, "to_coordin": [18, 51], "to_data_fram": [672, 721, 746], "to_datafram": [291, 338, 356, 375, 940], "to_definit": [429, 495, 548, 605], "to_dict": [96, 673], "to_fil": [782, 815, 826], "to_hdf5": 941, "to_indic": [19, 52, 430, 496, 549, 606, 647], "to_json": 942, "to_regex": [431, 497, 550, 607], "to_seri": [292, 339, 357, 747], "to_taxonomi": 1021, "to_tsv": 943, "trail": 229, "trajectorygradientanova": [827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837], "transcrib": 432, "transform": 944, "translat": [433, 446, 608], "translate_six_fram": [434, 447, 609], "transpos": [674, 722, 748, 945], "travers": 1022, "tree": [949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1095], "tree_basi": 699, "treenod": [949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027], "tutori": [0, 1, 1090, 1092, 1095, 1097], "type": [2, 215, 216, 229, 1092], "unpack": 1023, "unpack_by_func": 1024, "unrooted_copi": 1025, "unrooted_deepcopi": 1026, "unweighted_unifrac": 143, "update_id": 946, "us": [0, 219, 1090], "util": [2, 271, 272, 273, 274, 850, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1092, 1095, 1096], "valid": [1, 229], "variabl": 701, "variant": 221, "vector": [1, 2], "vlr": 700, "warn": [1090, 1096], "weighted_unifrac": 144, "what": 1090, "whitespac": [225, 229], "windowdifferencegradientanova": [838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848], "within": [675, 723, 749], "workflow": [1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1097], "write": [97, 173, 186, 220, 222, 266, 270, 321, 376, 435, 498, 551, 610, 648, 676, 724, 750, 863, 947, 1027, 1090], "writer": [220, 223, 245]}})