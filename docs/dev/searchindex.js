Search.setIndex({"docnames": ["alignment", "diversity", "generated/skbio.alignment.AlignmentStructure", "generated/skbio.alignment.AlignmentStructure.__eq__", "generated/skbio.alignment.AlignmentStructure.__ge__", "generated/skbio.alignment.AlignmentStructure.__getitem__", "generated/skbio.alignment.AlignmentStructure.__getstate__", "generated/skbio.alignment.AlignmentStructure.__gt__", "generated/skbio.alignment.AlignmentStructure.__hash__", "generated/skbio.alignment.AlignmentStructure.__le__", "generated/skbio.alignment.AlignmentStructure.__lt__", "generated/skbio.alignment.AlignmentStructure.__ne__", "generated/skbio.alignment.AlignmentStructure.__setstate__", "generated/skbio.alignment.AlignmentStructure.__str__", "generated/skbio.alignment.AlignmentStructure.is_zero_based", "generated/skbio.alignment.AlignmentStructure.set_zero_based", "generated/skbio.alignment.StripedSmithWaterman", "generated/skbio.alignment.StripedSmithWaterman.__call__", "generated/skbio.alignment.StripedSmithWaterman.__eq__", "generated/skbio.alignment.StripedSmithWaterman.__ge__", "generated/skbio.alignment.StripedSmithWaterman.__getstate__", "generated/skbio.alignment.StripedSmithWaterman.__gt__", "generated/skbio.alignment.StripedSmithWaterman.__hash__", "generated/skbio.alignment.StripedSmithWaterman.__le__", "generated/skbio.alignment.StripedSmithWaterman.__lt__", "generated/skbio.alignment.StripedSmithWaterman.__ne__", "generated/skbio.alignment.StripedSmithWaterman.__setstate__", "generated/skbio.alignment.StripedSmithWaterman.__str__", "generated/skbio.alignment.TabularMSA", "generated/skbio.alignment.TabularMSA.__bool__", "generated/skbio.alignment.TabularMSA.__contains__", "generated/skbio.alignment.TabularMSA.__copy__", "generated/skbio.alignment.TabularMSA.__deepcopy__", "generated/skbio.alignment.TabularMSA.__eq__", "generated/skbio.alignment.TabularMSA.__ge__", "generated/skbio.alignment.TabularMSA.__getitem__", "generated/skbio.alignment.TabularMSA.__getstate__", "generated/skbio.alignment.TabularMSA.__gt__", "generated/skbio.alignment.TabularMSA.__iter__", "generated/skbio.alignment.TabularMSA.__le__", "generated/skbio.alignment.TabularMSA.__len__", "generated/skbio.alignment.TabularMSA.__lt__", "generated/skbio.alignment.TabularMSA.__ne__", "generated/skbio.alignment.TabularMSA.__reversed__", "generated/skbio.alignment.TabularMSA.__str__", "generated/skbio.alignment.TabularMSA.append", "generated/skbio.alignment.TabularMSA.consensus", "generated/skbio.alignment.TabularMSA.conservation", "generated/skbio.alignment.TabularMSA.extend", "generated/skbio.alignment.TabularMSA.from_dict", "generated/skbio.alignment.TabularMSA.gap_frequencies", "generated/skbio.alignment.TabularMSA.has_metadata", "generated/skbio.alignment.TabularMSA.has_positional_metadata", "generated/skbio.alignment.TabularMSA.iter_positions", "generated/skbio.alignment.TabularMSA.join", "generated/skbio.alignment.TabularMSA.read", "generated/skbio.alignment.TabularMSA.reassign_index", "generated/skbio.alignment.TabularMSA.sort", "generated/skbio.alignment.TabularMSA.to_dict", "generated/skbio.alignment.TabularMSA.write", "generated/skbio.alignment.global_pairwise_align", "generated/skbio.alignment.global_pairwise_align_nucleotide", "generated/skbio.alignment.global_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align", "generated/skbio.alignment.local_pairwise_align_nucleotide", "generated/skbio.alignment.local_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align_ssw", "generated/skbio.alignment.make_identity_substitution_matrix", "generated/skbio.diversity.alpha", "generated/skbio.diversity.alpha.ace", "generated/skbio.diversity.alpha.berger_parker_d", "generated/skbio.diversity.alpha.brillouin_d", "generated/skbio.diversity.alpha.chao1", "generated/skbio.diversity.alpha.chao1_ci", "generated/skbio.diversity.alpha.dominance", "generated/skbio.diversity.alpha.doubles", "generated/skbio.diversity.alpha.enspie", "generated/skbio.diversity.alpha.esty_ci", "generated/skbio.diversity.alpha.faith_pd", "generated/skbio.diversity.alpha.fisher_alpha", "generated/skbio.diversity.alpha.gini_index", "generated/skbio.diversity.alpha.goods_coverage", "generated/skbio.diversity.alpha.heip_e", "generated/skbio.diversity.alpha.kempton_taylor_q", "generated/skbio.diversity.alpha.lladser_ci", "generated/skbio.diversity.alpha.lladser_pe", "generated/skbio.diversity.alpha.margalef", "generated/skbio.diversity.alpha.mcintosh_d", "generated/skbio.diversity.alpha.mcintosh_e", "generated/skbio.diversity.alpha.menhinick", "generated/skbio.diversity.alpha.michaelis_menten_fit", "generated/skbio.diversity.alpha.observed_features", "generated/skbio.diversity.alpha.observed_otus", "generated/skbio.diversity.alpha.osd", "generated/skbio.diversity.alpha.phydiv", "generated/skbio.diversity.alpha.pielou_e", "generated/skbio.diversity.alpha.robbins", "generated/skbio.diversity.alpha.shannon", "generated/skbio.diversity.alpha.simpson", "generated/skbio.diversity.alpha.simpson_e", "generated/skbio.diversity.alpha.singles", "generated/skbio.diversity.alpha.sobs", "generated/skbio.diversity.alpha.strong", "generated/skbio.diversity.alpha_diversity", "generated/skbio.diversity.beta", "generated/skbio.diversity.beta.unweighted_unifrac", "generated/skbio.diversity.beta.weighted_unifrac", "generated/skbio.diversity.beta_diversity", "generated/skbio.diversity.block_beta_diversity", "generated/skbio.diversity.get_alpha_diversity_metrics", "generated/skbio.diversity.get_beta_diversity_metrics", "generated/skbio.diversity.partial_beta_diversity", "generated/skbio.io.ArgumentOverrideWarning", "generated/skbio.io.BLAST7FormatError", "generated/skbio.io.ClustalFormatError", "generated/skbio.io.EMBLFormatError", "generated/skbio.io.FASTAFormatError", "generated/skbio.io.FASTQFormatError", "generated/skbio.io.FileFormatError", "generated/skbio.io.FormatIdentificationWarning", "generated/skbio.io.GFF3FormatError", "generated/skbio.io.GenBankFormatError", "generated/skbio.io.IOSourceError", "generated/skbio.io.LSMatFormatError", "generated/skbio.io.NewickFormatError", "generated/skbio.io.OrdinationFormatError", "generated/skbio.io.PhylipFormatError", "generated/skbio.io.QSeqFormatError", "generated/skbio.io.QUALFormatError", "generated/skbio.io.StockholmFormatError", "generated/skbio.io.UnrecognizedFormatError", "generated/skbio.io.format.binary_dm", "generated/skbio.io.format.blast6", "generated/skbio.io.format.blast7", "generated/skbio.io.format.clustal", "generated/skbio.io.format.embl", "generated/skbio.io.format.fasta", "generated/skbio.io.format.fastq", "generated/skbio.io.format.genbank", "generated/skbio.io.format.gff3", "generated/skbio.io.format.lsmat", "generated/skbio.io.format.newick", "generated/skbio.io.format.ordination", "generated/skbio.io.format.phylip", "generated/skbio.io.format.qseq", "generated/skbio.io.format.sample_metadata", "generated/skbio.io.format.stockholm", "generated/skbio.io.format.taxdump", "generated/skbio.io.registry", "generated/skbio.io.registry.DuplicateRegistrationError", "generated/skbio.io.registry.Format", "generated/skbio.io.registry.Format.__eq__", "generated/skbio.io.registry.Format.__ge__", "generated/skbio.io.registry.Format.__getstate__", "generated/skbio.io.registry.Format.__gt__", "generated/skbio.io.registry.Format.__hash__", "generated/skbio.io.registry.Format.__le__", "generated/skbio.io.registry.Format.__lt__", "generated/skbio.io.registry.Format.__ne__", "generated/skbio.io.registry.Format.__str__", "generated/skbio.io.registry.Format.reader", "generated/skbio.io.registry.Format.sniffer", "generated/skbio.io.registry.Format.writer", "generated/skbio.io.registry.IORegistry", "generated/skbio.io.registry.IORegistry.__eq__", "generated/skbio.io.registry.IORegistry.__ge__", "generated/skbio.io.registry.IORegistry.__getstate__", "generated/skbio.io.registry.IORegistry.__gt__", "generated/skbio.io.registry.IORegistry.__hash__", "generated/skbio.io.registry.IORegistry.__le__", "generated/skbio.io.registry.IORegistry.__lt__", "generated/skbio.io.registry.IORegistry.__ne__", "generated/skbio.io.registry.IORegistry.__str__", "generated/skbio.io.registry.IORegistry.add_format", "generated/skbio.io.registry.IORegistry.create_format", "generated/skbio.io.registry.IORegistry.get_reader", "generated/skbio.io.registry.IORegistry.get_sniffer", "generated/skbio.io.registry.IORegistry.get_writer", "generated/skbio.io.registry.IORegistry.list_read_formats", "generated/skbio.io.registry.IORegistry.list_write_formats", "generated/skbio.io.registry.IORegistry.monkey_patch", "generated/skbio.io.registry.IORegistry.read", "generated/skbio.io.registry.IORegistry.sniff", "generated/skbio.io.registry.IORegistry.write", "generated/skbio.io.registry.InvalidRegistrationError", "generated/skbio.io.registry.create_format", "generated/skbio.io.registry.read", "generated/skbio.io.registry.sniff", "generated/skbio.io.registry.write", "generated/skbio.io.util", "generated/skbio.io.util.open", "generated/skbio.io.util.open_file", "generated/skbio.io.util.open_files", "generated/skbio.metadata.Interval", "generated/skbio.metadata.Interval.__eq__", "generated/skbio.metadata.Interval.__ge__", "generated/skbio.metadata.Interval.__getstate__", "generated/skbio.metadata.Interval.__gt__", "generated/skbio.metadata.Interval.__le__", "generated/skbio.metadata.Interval.__lt__", "generated/skbio.metadata.Interval.__ne__", "generated/skbio.metadata.Interval.__str__", "generated/skbio.metadata.Interval.drop", "generated/skbio.metadata.IntervalMetadata", "generated/skbio.metadata.IntervalMetadata.__copy__", "generated/skbio.metadata.IntervalMetadata.__deepcopy__", "generated/skbio.metadata.IntervalMetadata.__eq__", "generated/skbio.metadata.IntervalMetadata.__ge__", "generated/skbio.metadata.IntervalMetadata.__getstate__", "generated/skbio.metadata.IntervalMetadata.__gt__", "generated/skbio.metadata.IntervalMetadata.__le__", "generated/skbio.metadata.IntervalMetadata.__lt__", "generated/skbio.metadata.IntervalMetadata.__ne__", "generated/skbio.metadata.IntervalMetadata.__str__", "generated/skbio.metadata.IntervalMetadata.add", "generated/skbio.metadata.IntervalMetadata.concat", "generated/skbio.metadata.IntervalMetadata.drop", "generated/skbio.metadata.IntervalMetadata.merge", "generated/skbio.metadata.IntervalMetadata.query", "generated/skbio.metadata.IntervalMetadata.read", "generated/skbio.metadata.IntervalMetadata.sort", "generated/skbio.metadata.IntervalMetadata.write", "generated/skbio.sequence.DNA", "generated/skbio.sequence.DNA.__bool__", "generated/skbio.sequence.DNA.__contains__", "generated/skbio.sequence.DNA.__copy__", "generated/skbio.sequence.DNA.__deepcopy__", "generated/skbio.sequence.DNA.__eq__", "generated/skbio.sequence.DNA.__ge__", "generated/skbio.sequence.DNA.__getitem__", "generated/skbio.sequence.DNA.__getstate__", "generated/skbio.sequence.DNA.__gt__", "generated/skbio.sequence.DNA.__iter__", "generated/skbio.sequence.DNA.__le__", "generated/skbio.sequence.DNA.__len__", "generated/skbio.sequence.DNA.__lt__", "generated/skbio.sequence.DNA.__ne__", "generated/skbio.sequence.DNA.__reversed__", "generated/skbio.sequence.DNA.__str__", "generated/skbio.sequence.DNA.complement", "generated/skbio.sequence.DNA.concat", "generated/skbio.sequence.DNA.count", "generated/skbio.sequence.DNA.definites", "generated/skbio.sequence.DNA.degap", "generated/skbio.sequence.DNA.degenerates", "generated/skbio.sequence.DNA.distance", "generated/skbio.sequence.DNA.expand_degenerates", "generated/skbio.sequence.DNA.find_motifs", "generated/skbio.sequence.DNA.find_with_regex", "generated/skbio.sequence.DNA.frequencies", "generated/skbio.sequence.DNA.gaps", "generated/skbio.sequence.DNA.gc_content", "generated/skbio.sequence.DNA.gc_frequency", "generated/skbio.sequence.DNA.has_definites", "generated/skbio.sequence.DNA.has_degenerates", "generated/skbio.sequence.DNA.has_gaps", "generated/skbio.sequence.DNA.has_interval_metadata", "generated/skbio.sequence.DNA.has_metadata", "generated/skbio.sequence.DNA.has_nondegenerates", "generated/skbio.sequence.DNA.has_positional_metadata", "generated/skbio.sequence.DNA.index", "generated/skbio.sequence.DNA.is_reverse_complement", "generated/skbio.sequence.DNA.iter_contiguous", "generated/skbio.sequence.DNA.iter_kmers", "generated/skbio.sequence.DNA.kmer_frequencies", "generated/skbio.sequence.DNA.lowercase", "generated/skbio.sequence.DNA.match_frequency", "generated/skbio.sequence.DNA.matches", "generated/skbio.sequence.DNA.mismatch_frequency", "generated/skbio.sequence.DNA.mismatches", "generated/skbio.sequence.DNA.nondegenerates", "generated/skbio.sequence.DNA.read", "generated/skbio.sequence.DNA.replace", "generated/skbio.sequence.DNA.reverse_complement", "generated/skbio.sequence.DNA.to_definites", "generated/skbio.sequence.DNA.to_indices", "generated/skbio.sequence.DNA.to_regex", "generated/skbio.sequence.DNA.transcribe", "generated/skbio.sequence.DNA.translate", "generated/skbio.sequence.DNA.translate_six_frames", "generated/skbio.sequence.DNA.write", "generated/skbio.sequence.GeneticCode", "generated/skbio.sequence.GeneticCode.__eq__", "generated/skbio.sequence.GeneticCode.__ge__", "generated/skbio.sequence.GeneticCode.__getstate__", "generated/skbio.sequence.GeneticCode.__gt__", "generated/skbio.sequence.GeneticCode.__le__", "generated/skbio.sequence.GeneticCode.__lt__", "generated/skbio.sequence.GeneticCode.__ne__", "generated/skbio.sequence.GeneticCode.__str__", "generated/skbio.sequence.GeneticCode.from_ncbi", "generated/skbio.sequence.GeneticCode.translate", "generated/skbio.sequence.GeneticCode.translate_six_frames", "generated/skbio.sequence.GrammaredSequence", "generated/skbio.sequence.GrammaredSequence.__bool__", "generated/skbio.sequence.GrammaredSequence.__contains__", "generated/skbio.sequence.GrammaredSequence.__copy__", "generated/skbio.sequence.GrammaredSequence.__deepcopy__", "generated/skbio.sequence.GrammaredSequence.__eq__", "generated/skbio.sequence.GrammaredSequence.__ge__", "generated/skbio.sequence.GrammaredSequence.__getitem__", "generated/skbio.sequence.GrammaredSequence.__getstate__", "generated/skbio.sequence.GrammaredSequence.__gt__", "generated/skbio.sequence.GrammaredSequence.__iter__", "generated/skbio.sequence.GrammaredSequence.__le__", "generated/skbio.sequence.GrammaredSequence.__len__", "generated/skbio.sequence.GrammaredSequence.__lt__", "generated/skbio.sequence.GrammaredSequence.__ne__", "generated/skbio.sequence.GrammaredSequence.__reversed__", "generated/skbio.sequence.GrammaredSequence.__str__", "generated/skbio.sequence.GrammaredSequence.concat", "generated/skbio.sequence.GrammaredSequence.count", "generated/skbio.sequence.GrammaredSequence.definites", "generated/skbio.sequence.GrammaredSequence.degap", "generated/skbio.sequence.GrammaredSequence.degenerates", "generated/skbio.sequence.GrammaredSequence.distance", "generated/skbio.sequence.GrammaredSequence.expand_degenerates", "generated/skbio.sequence.GrammaredSequence.find_motifs", "generated/skbio.sequence.GrammaredSequence.find_with_regex", "generated/skbio.sequence.GrammaredSequence.frequencies", "generated/skbio.sequence.GrammaredSequence.gaps", "generated/skbio.sequence.GrammaredSequence.has_definites", "generated/skbio.sequence.GrammaredSequence.has_degenerates", "generated/skbio.sequence.GrammaredSequence.has_gaps", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata", "generated/skbio.sequence.GrammaredSequence.has_metadata", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata", "generated/skbio.sequence.GrammaredSequence.index", "generated/skbio.sequence.GrammaredSequence.iter_contiguous", "generated/skbio.sequence.GrammaredSequence.iter_kmers", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies", "generated/skbio.sequence.GrammaredSequence.lowercase", "generated/skbio.sequence.GrammaredSequence.match_frequency", "generated/skbio.sequence.GrammaredSequence.matches", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency", "generated/skbio.sequence.GrammaredSequence.mismatches", "generated/skbio.sequence.GrammaredSequence.nondegenerates", "generated/skbio.sequence.GrammaredSequence.read", "generated/skbio.sequence.GrammaredSequence.replace", "generated/skbio.sequence.GrammaredSequence.to_definites", "generated/skbio.sequence.GrammaredSequence.to_indices", "generated/skbio.sequence.GrammaredSequence.to_regex", "generated/skbio.sequence.GrammaredSequence.write", "generated/skbio.sequence.Protein", "generated/skbio.sequence.Protein.__bool__", "generated/skbio.sequence.Protein.__contains__", "generated/skbio.sequence.Protein.__copy__", "generated/skbio.sequence.Protein.__deepcopy__", "generated/skbio.sequence.Protein.__eq__", "generated/skbio.sequence.Protein.__ge__", "generated/skbio.sequence.Protein.__getitem__", "generated/skbio.sequence.Protein.__getstate__", "generated/skbio.sequence.Protein.__gt__", "generated/skbio.sequence.Protein.__iter__", "generated/skbio.sequence.Protein.__le__", "generated/skbio.sequence.Protein.__len__", "generated/skbio.sequence.Protein.__lt__", "generated/skbio.sequence.Protein.__ne__", "generated/skbio.sequence.Protein.__reversed__", "generated/skbio.sequence.Protein.__str__", "generated/skbio.sequence.Protein.concat", "generated/skbio.sequence.Protein.count", "generated/skbio.sequence.Protein.definites", "generated/skbio.sequence.Protein.degap", "generated/skbio.sequence.Protein.degenerates", "generated/skbio.sequence.Protein.distance", "generated/skbio.sequence.Protein.expand_degenerates", "generated/skbio.sequence.Protein.find_motifs", "generated/skbio.sequence.Protein.find_with_regex", "generated/skbio.sequence.Protein.frequencies", "generated/skbio.sequence.Protein.gaps", "generated/skbio.sequence.Protein.has_definites", "generated/skbio.sequence.Protein.has_degenerates", "generated/skbio.sequence.Protein.has_gaps", "generated/skbio.sequence.Protein.has_interval_metadata", "generated/skbio.sequence.Protein.has_metadata", "generated/skbio.sequence.Protein.has_nondegenerates", "generated/skbio.sequence.Protein.has_positional_metadata", "generated/skbio.sequence.Protein.has_stops", "generated/skbio.sequence.Protein.index", "generated/skbio.sequence.Protein.iter_contiguous", "generated/skbio.sequence.Protein.iter_kmers", "generated/skbio.sequence.Protein.kmer_frequencies", "generated/skbio.sequence.Protein.lowercase", "generated/skbio.sequence.Protein.match_frequency", "generated/skbio.sequence.Protein.matches", "generated/skbio.sequence.Protein.mismatch_frequency", "generated/skbio.sequence.Protein.mismatches", "generated/skbio.sequence.Protein.nondegenerates", "generated/skbio.sequence.Protein.read", "generated/skbio.sequence.Protein.replace", "generated/skbio.sequence.Protein.stops", "generated/skbio.sequence.Protein.to_definites", "generated/skbio.sequence.Protein.to_indices", "generated/skbio.sequence.Protein.to_regex", "generated/skbio.sequence.Protein.write", "generated/skbio.sequence.RNA", "generated/skbio.sequence.RNA.__bool__", "generated/skbio.sequence.RNA.__contains__", "generated/skbio.sequence.RNA.__copy__", "generated/skbio.sequence.RNA.__deepcopy__", "generated/skbio.sequence.RNA.__eq__", "generated/skbio.sequence.RNA.__ge__", "generated/skbio.sequence.RNA.__getitem__", "generated/skbio.sequence.RNA.__getstate__", "generated/skbio.sequence.RNA.__gt__", "generated/skbio.sequence.RNA.__iter__", "generated/skbio.sequence.RNA.__le__", "generated/skbio.sequence.RNA.__len__", "generated/skbio.sequence.RNA.__lt__", "generated/skbio.sequence.RNA.__ne__", "generated/skbio.sequence.RNA.__reversed__", "generated/skbio.sequence.RNA.__str__", "generated/skbio.sequence.RNA.complement", "generated/skbio.sequence.RNA.concat", "generated/skbio.sequence.RNA.count", "generated/skbio.sequence.RNA.definites", "generated/skbio.sequence.RNA.degap", "generated/skbio.sequence.RNA.degenerates", "generated/skbio.sequence.RNA.distance", "generated/skbio.sequence.RNA.expand_degenerates", "generated/skbio.sequence.RNA.find_motifs", "generated/skbio.sequence.RNA.find_with_regex", "generated/skbio.sequence.RNA.frequencies", "generated/skbio.sequence.RNA.gaps", "generated/skbio.sequence.RNA.gc_content", "generated/skbio.sequence.RNA.gc_frequency", "generated/skbio.sequence.RNA.has_definites", "generated/skbio.sequence.RNA.has_degenerates", "generated/skbio.sequence.RNA.has_gaps", "generated/skbio.sequence.RNA.has_interval_metadata", "generated/skbio.sequence.RNA.has_metadata", "generated/skbio.sequence.RNA.has_nondegenerates", "generated/skbio.sequence.RNA.has_positional_metadata", "generated/skbio.sequence.RNA.index", "generated/skbio.sequence.RNA.is_reverse_complement", "generated/skbio.sequence.RNA.iter_contiguous", "generated/skbio.sequence.RNA.iter_kmers", "generated/skbio.sequence.RNA.kmer_frequencies", "generated/skbio.sequence.RNA.lowercase", "generated/skbio.sequence.RNA.match_frequency", "generated/skbio.sequence.RNA.matches", "generated/skbio.sequence.RNA.mismatch_frequency", "generated/skbio.sequence.RNA.mismatches", "generated/skbio.sequence.RNA.nondegenerates", "generated/skbio.sequence.RNA.read", "generated/skbio.sequence.RNA.replace", "generated/skbio.sequence.RNA.reverse_complement", "generated/skbio.sequence.RNA.reverse_transcribe", "generated/skbio.sequence.RNA.to_definites", "generated/skbio.sequence.RNA.to_indices", "generated/skbio.sequence.RNA.to_regex", "generated/skbio.sequence.RNA.translate", "generated/skbio.sequence.RNA.translate_six_frames", "generated/skbio.sequence.RNA.write", "generated/skbio.sequence.Sequence", "generated/skbio.sequence.Sequence.__bool__", "generated/skbio.sequence.Sequence.__contains__", "generated/skbio.sequence.Sequence.__copy__", "generated/skbio.sequence.Sequence.__deepcopy__", "generated/skbio.sequence.Sequence.__eq__", "generated/skbio.sequence.Sequence.__ge__", "generated/skbio.sequence.Sequence.__getitem__", "generated/skbio.sequence.Sequence.__getstate__", "generated/skbio.sequence.Sequence.__gt__", "generated/skbio.sequence.Sequence.__iter__", "generated/skbio.sequence.Sequence.__le__", "generated/skbio.sequence.Sequence.__len__", "generated/skbio.sequence.Sequence.__lt__", "generated/skbio.sequence.Sequence.__ne__", "generated/skbio.sequence.Sequence.__reversed__", "generated/skbio.sequence.Sequence.__str__", "generated/skbio.sequence.Sequence.concat", "generated/skbio.sequence.Sequence.count", "generated/skbio.sequence.Sequence.distance", "generated/skbio.sequence.Sequence.find_with_regex", "generated/skbio.sequence.Sequence.frequencies", "generated/skbio.sequence.Sequence.has_interval_metadata", "generated/skbio.sequence.Sequence.has_metadata", "generated/skbio.sequence.Sequence.has_positional_metadata", "generated/skbio.sequence.Sequence.index", "generated/skbio.sequence.Sequence.iter_contiguous", "generated/skbio.sequence.Sequence.iter_kmers", "generated/skbio.sequence.Sequence.kmer_frequencies", "generated/skbio.sequence.Sequence.lowercase", "generated/skbio.sequence.Sequence.match_frequency", "generated/skbio.sequence.Sequence.matches", "generated/skbio.sequence.Sequence.mismatch_frequency", "generated/skbio.sequence.Sequence.mismatches", "generated/skbio.sequence.Sequence.read", "generated/skbio.sequence.Sequence.replace", "generated/skbio.sequence.Sequence.to_indices", "generated/skbio.sequence.Sequence.write", "generated/skbio.sequence.SubstitutionMatrix", "generated/skbio.sequence.SubstitutionMatrix.__contains__", "generated/skbio.sequence.SubstitutionMatrix.__eq__", "generated/skbio.sequence.SubstitutionMatrix.__ge__", "generated/skbio.sequence.SubstitutionMatrix.__getitem__", "generated/skbio.sequence.SubstitutionMatrix.__getstate__", "generated/skbio.sequence.SubstitutionMatrix.__gt__", "generated/skbio.sequence.SubstitutionMatrix.__le__", "generated/skbio.sequence.SubstitutionMatrix.__lt__", "generated/skbio.sequence.SubstitutionMatrix.__ne__", "generated/skbio.sequence.SubstitutionMatrix.__str__", "generated/skbio.sequence.SubstitutionMatrix.between", "generated/skbio.sequence.SubstitutionMatrix.by_name", "generated/skbio.sequence.SubstitutionMatrix.copy", "generated/skbio.sequence.SubstitutionMatrix.filter", "generated/skbio.sequence.SubstitutionMatrix.from_dict", "generated/skbio.sequence.SubstitutionMatrix.from_iterable", "generated/skbio.sequence.SubstitutionMatrix.get_names", "generated/skbio.sequence.SubstitutionMatrix.identity", "generated/skbio.sequence.SubstitutionMatrix.index", "generated/skbio.sequence.SubstitutionMatrix.plot", "generated/skbio.sequence.SubstitutionMatrix.read", "generated/skbio.sequence.SubstitutionMatrix.redundant_form", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame", "generated/skbio.sequence.SubstitutionMatrix.to_dict", "generated/skbio.sequence.SubstitutionMatrix.transpose", "generated/skbio.sequence.SubstitutionMatrix.within", "generated/skbio.sequence.SubstitutionMatrix.write", "generated/skbio.sequence.distance", "generated/skbio.sequence.distance.hamming", "generated/skbio.sequence.distance.kmer_distance", "generated/skbio.stats.composition", "generated/skbio.stats.composition.alr", "generated/skbio.stats.composition.alr_inv", "generated/skbio.stats.composition.ancom", "generated/skbio.stats.composition.centralize", "generated/skbio.stats.composition.closure", "generated/skbio.stats.composition.clr", "generated/skbio.stats.composition.clr_inv", "generated/skbio.stats.composition.dirmult_ttest", "generated/skbio.stats.composition.ilr", "generated/skbio.stats.composition.ilr_inv", "generated/skbio.stats.composition.inner", "generated/skbio.stats.composition.multi_replace", "generated/skbio.stats.composition.multiplicative_replacement", "generated/skbio.stats.composition.pairwise_vlr", "generated/skbio.stats.composition.perturb", "generated/skbio.stats.composition.perturb_inv", "generated/skbio.stats.composition.power", "generated/skbio.stats.composition.sbp_basis", "generated/skbio.stats.composition.tree_basis", "generated/skbio.stats.composition.vlr", "generated/skbio.stats.distance", "generated/skbio.stats.distance.DissimilarityMatrix", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__", "generated/skbio.stats.distance.DissimilarityMatrix.__le__", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__", "generated/skbio.stats.distance.DissimilarityMatrix.__str__", "generated/skbio.stats.distance.DissimilarityMatrix.between", "generated/skbio.stats.distance.DissimilarityMatrix.copy", "generated/skbio.stats.distance.DissimilarityMatrix.filter", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable", "generated/skbio.stats.distance.DissimilarityMatrix.index", "generated/skbio.stats.distance.DissimilarityMatrix.plot", "generated/skbio.stats.distance.DissimilarityMatrix.read", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame", "generated/skbio.stats.distance.DissimilarityMatrix.transpose", "generated/skbio.stats.distance.DissimilarityMatrix.within", "generated/skbio.stats.distance.DissimilarityMatrix.write", "generated/skbio.stats.distance.DissimilarityMatrixError", "generated/skbio.stats.distance.DistanceMatrix", "generated/skbio.stats.distance.DistanceMatrix.__contains__", "generated/skbio.stats.distance.DistanceMatrix.__eq__", "generated/skbio.stats.distance.DistanceMatrix.__ge__", "generated/skbio.stats.distance.DistanceMatrix.__getitem__", "generated/skbio.stats.distance.DistanceMatrix.__getstate__", "generated/skbio.stats.distance.DistanceMatrix.__gt__", "generated/skbio.stats.distance.DistanceMatrix.__le__", "generated/skbio.stats.distance.DistanceMatrix.__lt__", "generated/skbio.stats.distance.DistanceMatrix.__ne__", "generated/skbio.stats.distance.DistanceMatrix.__str__", "generated/skbio.stats.distance.DistanceMatrix.between", "generated/skbio.stats.distance.DistanceMatrix.condensed_form", "generated/skbio.stats.distance.DistanceMatrix.copy", "generated/skbio.stats.distance.DistanceMatrix.filter", "generated/skbio.stats.distance.DistanceMatrix.from_iterable", "generated/skbio.stats.distance.DistanceMatrix.index", "generated/skbio.stats.distance.DistanceMatrix.permute", "generated/skbio.stats.distance.DistanceMatrix.plot", "generated/skbio.stats.distance.DistanceMatrix.read", "generated/skbio.stats.distance.DistanceMatrix.redundant_form", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame", "generated/skbio.stats.distance.DistanceMatrix.to_series", "generated/skbio.stats.distance.DistanceMatrix.transpose", "generated/skbio.stats.distance.DistanceMatrix.within", "generated/skbio.stats.distance.DistanceMatrix.write", "generated/skbio.stats.distance.DistanceMatrixError", "generated/skbio.stats.distance.MissingIDError", "generated/skbio.stats.distance.anosim", "generated/skbio.stats.distance.bioenv", "generated/skbio.stats.distance.mantel", "generated/skbio.stats.distance.permanova", "generated/skbio.stats.distance.permdisp", "generated/skbio.stats.distance.pwmantel", "generated/skbio.stats.distance.randdm", "generated/skbio.stats.evolve", "generated/skbio.stats.evolve.hommola_cospeciation", "generated/skbio.stats.gradient", "generated/skbio.stats.gradient.AverageGradientANOVA", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.CategoryResults", "generated/skbio.stats.gradient.CategoryResults.__eq__", "generated/skbio.stats.gradient.CategoryResults.__ge__", "generated/skbio.stats.gradient.CategoryResults.__getstate__", "generated/skbio.stats.gradient.CategoryResults.__gt__", "generated/skbio.stats.gradient.CategoryResults.__hash__", "generated/skbio.stats.gradient.CategoryResults.__le__", "generated/skbio.stats.gradient.CategoryResults.__lt__", "generated/skbio.stats.gradient.CategoryResults.__ne__", "generated/skbio.stats.gradient.CategoryResults.__str__", "generated/skbio.stats.gradient.CategoryResults.to_files", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVA", "generated/skbio.stats.gradient.GradientANOVA.__eq__", "generated/skbio.stats.gradient.GradientANOVA.__ge__", "generated/skbio.stats.gradient.GradientANOVA.__getstate__", "generated/skbio.stats.gradient.GradientANOVA.__gt__", "generated/skbio.stats.gradient.GradientANOVA.__hash__", "generated/skbio.stats.gradient.GradientANOVA.__le__", "generated/skbio.stats.gradient.GradientANOVA.__lt__", "generated/skbio.stats.gradient.GradientANOVA.__ne__", "generated/skbio.stats.gradient.GradientANOVA.__str__", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVAResults", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__", "generated/skbio.stats.gradient.GradientANOVAResults.__le__", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__", "generated/skbio.stats.gradient.GradientANOVAResults.__str__", "generated/skbio.stats.gradient.GradientANOVAResults.to_files", "generated/skbio.stats.gradient.GroupResults", "generated/skbio.stats.gradient.GroupResults.__eq__", "generated/skbio.stats.gradient.GroupResults.__ge__", "generated/skbio.stats.gradient.GroupResults.__getstate__", "generated/skbio.stats.gradient.GroupResults.__gt__", "generated/skbio.stats.gradient.GroupResults.__hash__", "generated/skbio.stats.gradient.GroupResults.__le__", "generated/skbio.stats.gradient.GroupResults.__lt__", "generated/skbio.stats.gradient.GroupResults.__ne__", "generated/skbio.stats.gradient.GroupResults.__str__", "generated/skbio.stats.gradient.GroupResults.to_files", "generated/skbio.stats.gradient.TrajectoryGradientANOVA", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.isubsample", "generated/skbio.stats.ordination", "generated/skbio.stats.ordination.OrdinationResults", "generated/skbio.stats.ordination.OrdinationResults.__eq__", "generated/skbio.stats.ordination.OrdinationResults.__ge__", "generated/skbio.stats.ordination.OrdinationResults.__getstate__", "generated/skbio.stats.ordination.OrdinationResults.__gt__", "generated/skbio.stats.ordination.OrdinationResults.__hash__", "generated/skbio.stats.ordination.OrdinationResults.__le__", "generated/skbio.stats.ordination.OrdinationResults.__lt__", "generated/skbio.stats.ordination.OrdinationResults.__ne__", "generated/skbio.stats.ordination.OrdinationResults.__str__", "generated/skbio.stats.ordination.OrdinationResults.plot", "generated/skbio.stats.ordination.OrdinationResults.read", "generated/skbio.stats.ordination.OrdinationResults.write", "generated/skbio.stats.ordination.ca", "generated/skbio.stats.ordination.cca", "generated/skbio.stats.ordination.corr", "generated/skbio.stats.ordination.e_matrix", "generated/skbio.stats.ordination.f_matrix", "generated/skbio.stats.ordination.mean_and_std", "generated/skbio.stats.ordination.pcoa", "generated/skbio.stats.ordination.pcoa_biplot", "generated/skbio.stats.ordination.rda", "generated/skbio.stats.ordination.scale", "generated/skbio.stats.ordination.svd_rank", "generated/skbio.stats.power", "generated/skbio.stats.power.confidence_bound", "generated/skbio.stats.power.paired_subsamples", "generated/skbio.stats.power.subsample_paired_power", "generated/skbio.stats.power.subsample_power", "generated/skbio.stats.subsample_counts", "generated/skbio.tree.DuplicateNodeError", "generated/skbio.tree.MissingNodeError", "generated/skbio.tree.NoLengthError", "generated/skbio.tree.NoParentError", "generated/skbio.tree.TreeError", "generated/skbio.tree.TreeNode", "generated/skbio.tree.TreeNode.__copy__", "generated/skbio.tree.TreeNode.__deepcopy__", "generated/skbio.tree.TreeNode.__eq__", "generated/skbio.tree.TreeNode.__ge__", "generated/skbio.tree.TreeNode.__getitem__", "generated/skbio.tree.TreeNode.__getstate__", "generated/skbio.tree.TreeNode.__gt__", "generated/skbio.tree.TreeNode.__hash__", "generated/skbio.tree.TreeNode.__iter__", "generated/skbio.tree.TreeNode.__le__", "generated/skbio.tree.TreeNode.__len__", "generated/skbio.tree.TreeNode.__lt__", "generated/skbio.tree.TreeNode.__ne__", "generated/skbio.tree.TreeNode.__str__", "generated/skbio.tree.TreeNode.accumulate_to_ancestor", "generated/skbio.tree.TreeNode.ancestors", "generated/skbio.tree.TreeNode.append", "generated/skbio.tree.TreeNode.ascii_art", "generated/skbio.tree.TreeNode.assign_ids", "generated/skbio.tree.TreeNode.assign_supports", "generated/skbio.tree.TreeNode.bifurcate", "generated/skbio.tree.TreeNode.cache_attr", "generated/skbio.tree.TreeNode.compare_rfd", "generated/skbio.tree.TreeNode.compare_subsets", "generated/skbio.tree.TreeNode.compare_tip_distances", "generated/skbio.tree.TreeNode.copy", "generated/skbio.tree.TreeNode.count", "generated/skbio.tree.TreeNode.create_caches", "generated/skbio.tree.TreeNode.deepcopy", "generated/skbio.tree.TreeNode.descending_branch_length", "generated/skbio.tree.TreeNode.distance", "generated/skbio.tree.TreeNode.extend", "generated/skbio.tree.TreeNode.find", "generated/skbio.tree.TreeNode.find_all", "generated/skbio.tree.TreeNode.find_by_func", "generated/skbio.tree.TreeNode.find_by_id", "generated/skbio.tree.TreeNode.from_linkage_matrix", "generated/skbio.tree.TreeNode.from_taxdump", "generated/skbio.tree.TreeNode.from_taxonomy", "generated/skbio.tree.TreeNode.get_max_distance", "generated/skbio.tree.TreeNode.has_children", "generated/skbio.tree.TreeNode.index_tree", "generated/skbio.tree.TreeNode.invalidate_caches", "generated/skbio.tree.TreeNode.is_root", "generated/skbio.tree.TreeNode.is_tip", "generated/skbio.tree.TreeNode.lca", "generated/skbio.tree.TreeNode.levelorder", "generated/skbio.tree.TreeNode.lowest_common_ancestor", "generated/skbio.tree.TreeNode.neighbors", "generated/skbio.tree.TreeNode.non_tips", "generated/skbio.tree.TreeNode.observed_node_counts", "generated/skbio.tree.TreeNode.pop", "generated/skbio.tree.TreeNode.postorder", "generated/skbio.tree.TreeNode.pre_and_postorder", "generated/skbio.tree.TreeNode.preorder", "generated/skbio.tree.TreeNode.prune", "generated/skbio.tree.TreeNode.read", "generated/skbio.tree.TreeNode.remove", "generated/skbio.tree.TreeNode.remove_deleted", "generated/skbio.tree.TreeNode.root", "generated/skbio.tree.TreeNode.root_at", "generated/skbio.tree.TreeNode.root_at_midpoint", "generated/skbio.tree.TreeNode.shear", "generated/skbio.tree.TreeNode.shuffle", "generated/skbio.tree.TreeNode.siblings", "generated/skbio.tree.TreeNode.subset", "generated/skbio.tree.TreeNode.subsets", "generated/skbio.tree.TreeNode.subtree", "generated/skbio.tree.TreeNode.tip_tip_distances", "generated/skbio.tree.TreeNode.tips", "generated/skbio.tree.TreeNode.to_array", "generated/skbio.tree.TreeNode.to_taxonomy", "generated/skbio.tree.TreeNode.traverse", "generated/skbio.tree.TreeNode.unpack", "generated/skbio.tree.TreeNode.unpack_by_func", "generated/skbio.tree.TreeNode.unrooted_copy", "generated/skbio.tree.TreeNode.unrooted_deepcopy", "generated/skbio.tree.TreeNode.write", "generated/skbio.tree.majority_rule", "generated/skbio.tree.nj", "generated/skbio.util.EfficiencyWarning", "generated/skbio.util.RepresentationWarning", "generated/skbio.util.assert_data_frame_almost_equal", "generated/skbio.util.assert_ordination_results_equal", "generated/skbio.util.cardinal_to_ordinal", "generated/skbio.util.classproperty", "generated/skbio.util.classproperty.__delete__", "generated/skbio.util.classproperty.__eq__", "generated/skbio.util.classproperty.__ge__", "generated/skbio.util.classproperty.__get__", "generated/skbio.util.classproperty.__getstate__", "generated/skbio.util.classproperty.__gt__", "generated/skbio.util.classproperty.__hash__", "generated/skbio.util.classproperty.__le__", "generated/skbio.util.classproperty.__lt__", "generated/skbio.util.classproperty.__ne__", "generated/skbio.util.classproperty.__set__", "generated/skbio.util.classproperty.__set_name__", "generated/skbio.util.classproperty.__str__", "generated/skbio.util.classproperty.deleter", "generated/skbio.util.classproperty.getter", "generated/skbio.util.classproperty.setter", "generated/skbio.util.find_duplicates", "generated/skbio.util.get_data_path", "generated/skbio.util.safe_md5", "generated/skbio.workflow.Workflow", "generated/skbio.workflow.Workflow.__call__", "generated/skbio.workflow.Workflow.__eq__", "generated/skbio.workflow.Workflow.__ge__", "generated/skbio.workflow.Workflow.__getstate__", "generated/skbio.workflow.Workflow.__gt__", "generated/skbio.workflow.Workflow.__hash__", "generated/skbio.workflow.Workflow.__le__", "generated/skbio.workflow.Workflow.__lt__", "generated/skbio.workflow.Workflow.__ne__", "generated/skbio.workflow.Workflow.__str__", "generated/skbio.workflow.Workflow.initialize_state", "generated/skbio.workflow.method", "generated/skbio.workflow.method.__call__", "generated/skbio.workflow.method.__eq__", "generated/skbio.workflow.method.__ge__", "generated/skbio.workflow.method.__getstate__", "generated/skbio.workflow.method.__gt__", "generated/skbio.workflow.method.__hash__", "generated/skbio.workflow.method.__le__", "generated/skbio.workflow.method.__lt__", "generated/skbio.workflow.method.__ne__", "generated/skbio.workflow.method.__str__", "generated/skbio.workflow.requires", "generated/skbio.workflow.requires.__call__", "generated/skbio.workflow.requires.__eq__", "generated/skbio.workflow.requires.__ge__", "generated/skbio.workflow.requires.__getstate__", "generated/skbio.workflow.requires.__gt__", "generated/skbio.workflow.requires.__hash__", "generated/skbio.workflow.requires.__le__", "generated/skbio.workflow.requires.__lt__", "generated/skbio.workflow.requires.__ne__", "generated/skbio.workflow.requires.__str__", "index", "io", "metadata", "sequence", "stats", "tree", "util", "workflow"], "filenames": ["alignment.rst", "diversity.rst", "generated/skbio.alignment.AlignmentStructure.rst", "generated/skbio.alignment.AlignmentStructure.__eq__.rst", "generated/skbio.alignment.AlignmentStructure.__ge__.rst", "generated/skbio.alignment.AlignmentStructure.__getitem__.rst", "generated/skbio.alignment.AlignmentStructure.__getstate__.rst", "generated/skbio.alignment.AlignmentStructure.__gt__.rst", "generated/skbio.alignment.AlignmentStructure.__hash__.rst", "generated/skbio.alignment.AlignmentStructure.__le__.rst", "generated/skbio.alignment.AlignmentStructure.__lt__.rst", "generated/skbio.alignment.AlignmentStructure.__ne__.rst", "generated/skbio.alignment.AlignmentStructure.__setstate__.rst", "generated/skbio.alignment.AlignmentStructure.__str__.rst", "generated/skbio.alignment.AlignmentStructure.is_zero_based.rst", "generated/skbio.alignment.AlignmentStructure.set_zero_based.rst", "generated/skbio.alignment.StripedSmithWaterman.rst", "generated/skbio.alignment.StripedSmithWaterman.__call__.rst", "generated/skbio.alignment.StripedSmithWaterman.__eq__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ge__.rst", "generated/skbio.alignment.StripedSmithWaterman.__getstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__gt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__hash__.rst", "generated/skbio.alignment.StripedSmithWaterman.__le__.rst", "generated/skbio.alignment.StripedSmithWaterman.__lt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ne__.rst", "generated/skbio.alignment.StripedSmithWaterman.__setstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__str__.rst", "generated/skbio.alignment.TabularMSA.rst", "generated/skbio.alignment.TabularMSA.__bool__.rst", "generated/skbio.alignment.TabularMSA.__contains__.rst", "generated/skbio.alignment.TabularMSA.__copy__.rst", "generated/skbio.alignment.TabularMSA.__deepcopy__.rst", "generated/skbio.alignment.TabularMSA.__eq__.rst", "generated/skbio.alignment.TabularMSA.__ge__.rst", "generated/skbio.alignment.TabularMSA.__getitem__.rst", "generated/skbio.alignment.TabularMSA.__getstate__.rst", "generated/skbio.alignment.TabularMSA.__gt__.rst", "generated/skbio.alignment.TabularMSA.__iter__.rst", "generated/skbio.alignment.TabularMSA.__le__.rst", "generated/skbio.alignment.TabularMSA.__len__.rst", "generated/skbio.alignment.TabularMSA.__lt__.rst", "generated/skbio.alignment.TabularMSA.__ne__.rst", "generated/skbio.alignment.TabularMSA.__reversed__.rst", "generated/skbio.alignment.TabularMSA.__str__.rst", "generated/skbio.alignment.TabularMSA.append.rst", "generated/skbio.alignment.TabularMSA.consensus.rst", "generated/skbio.alignment.TabularMSA.conservation.rst", "generated/skbio.alignment.TabularMSA.extend.rst", "generated/skbio.alignment.TabularMSA.from_dict.rst", "generated/skbio.alignment.TabularMSA.gap_frequencies.rst", "generated/skbio.alignment.TabularMSA.has_metadata.rst", "generated/skbio.alignment.TabularMSA.has_positional_metadata.rst", "generated/skbio.alignment.TabularMSA.iter_positions.rst", "generated/skbio.alignment.TabularMSA.join.rst", "generated/skbio.alignment.TabularMSA.read.rst", "generated/skbio.alignment.TabularMSA.reassign_index.rst", "generated/skbio.alignment.TabularMSA.sort.rst", "generated/skbio.alignment.TabularMSA.to_dict.rst", "generated/skbio.alignment.TabularMSA.write.rst", "generated/skbio.alignment.global_pairwise_align.rst", "generated/skbio.alignment.global_pairwise_align_nucleotide.rst", "generated/skbio.alignment.global_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align.rst", "generated/skbio.alignment.local_pairwise_align_nucleotide.rst", "generated/skbio.alignment.local_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align_ssw.rst", "generated/skbio.alignment.make_identity_substitution_matrix.rst", "generated/skbio.diversity.alpha.rst", "generated/skbio.diversity.alpha.ace.rst", "generated/skbio.diversity.alpha.berger_parker_d.rst", "generated/skbio.diversity.alpha.brillouin_d.rst", "generated/skbio.diversity.alpha.chao1.rst", "generated/skbio.diversity.alpha.chao1_ci.rst", "generated/skbio.diversity.alpha.dominance.rst", "generated/skbio.diversity.alpha.doubles.rst", "generated/skbio.diversity.alpha.enspie.rst", "generated/skbio.diversity.alpha.esty_ci.rst", "generated/skbio.diversity.alpha.faith_pd.rst", "generated/skbio.diversity.alpha.fisher_alpha.rst", "generated/skbio.diversity.alpha.gini_index.rst", "generated/skbio.diversity.alpha.goods_coverage.rst", "generated/skbio.diversity.alpha.heip_e.rst", "generated/skbio.diversity.alpha.kempton_taylor_q.rst", "generated/skbio.diversity.alpha.lladser_ci.rst", "generated/skbio.diversity.alpha.lladser_pe.rst", "generated/skbio.diversity.alpha.margalef.rst", "generated/skbio.diversity.alpha.mcintosh_d.rst", "generated/skbio.diversity.alpha.mcintosh_e.rst", "generated/skbio.diversity.alpha.menhinick.rst", "generated/skbio.diversity.alpha.michaelis_menten_fit.rst", "generated/skbio.diversity.alpha.observed_features.rst", "generated/skbio.diversity.alpha.observed_otus.rst", "generated/skbio.diversity.alpha.osd.rst", "generated/skbio.diversity.alpha.phydiv.rst", "generated/skbio.diversity.alpha.pielou_e.rst", "generated/skbio.diversity.alpha.robbins.rst", "generated/skbio.diversity.alpha.shannon.rst", "generated/skbio.diversity.alpha.simpson.rst", "generated/skbio.diversity.alpha.simpson_e.rst", "generated/skbio.diversity.alpha.singles.rst", "generated/skbio.diversity.alpha.sobs.rst", "generated/skbio.diversity.alpha.strong.rst", "generated/skbio.diversity.alpha_diversity.rst", "generated/skbio.diversity.beta.rst", "generated/skbio.diversity.beta.unweighted_unifrac.rst", "generated/skbio.diversity.beta.weighted_unifrac.rst", "generated/skbio.diversity.beta_diversity.rst", "generated/skbio.diversity.block_beta_diversity.rst", "generated/skbio.diversity.get_alpha_diversity_metrics.rst", "generated/skbio.diversity.get_beta_diversity_metrics.rst", "generated/skbio.diversity.partial_beta_diversity.rst", "generated/skbio.io.ArgumentOverrideWarning.rst", "generated/skbio.io.BLAST7FormatError.rst", "generated/skbio.io.ClustalFormatError.rst", "generated/skbio.io.EMBLFormatError.rst", "generated/skbio.io.FASTAFormatError.rst", "generated/skbio.io.FASTQFormatError.rst", "generated/skbio.io.FileFormatError.rst", "generated/skbio.io.FormatIdentificationWarning.rst", "generated/skbio.io.GFF3FormatError.rst", "generated/skbio.io.GenBankFormatError.rst", "generated/skbio.io.IOSourceError.rst", "generated/skbio.io.LSMatFormatError.rst", "generated/skbio.io.NewickFormatError.rst", "generated/skbio.io.OrdinationFormatError.rst", "generated/skbio.io.PhylipFormatError.rst", "generated/skbio.io.QSeqFormatError.rst", "generated/skbio.io.QUALFormatError.rst", "generated/skbio.io.StockholmFormatError.rst", "generated/skbio.io.UnrecognizedFormatError.rst", "generated/skbio.io.format.binary_dm.rst", "generated/skbio.io.format.blast6.rst", "generated/skbio.io.format.blast7.rst", "generated/skbio.io.format.clustal.rst", "generated/skbio.io.format.embl.rst", "generated/skbio.io.format.fasta.rst", "generated/skbio.io.format.fastq.rst", "generated/skbio.io.format.genbank.rst", "generated/skbio.io.format.gff3.rst", "generated/skbio.io.format.lsmat.rst", "generated/skbio.io.format.newick.rst", "generated/skbio.io.format.ordination.rst", "generated/skbio.io.format.phylip.rst", "generated/skbio.io.format.qseq.rst", "generated/skbio.io.format.sample_metadata.rst", "generated/skbio.io.format.stockholm.rst", "generated/skbio.io.format.taxdump.rst", "generated/skbio.io.registry.rst", "generated/skbio.io.registry.DuplicateRegistrationError.rst", "generated/skbio.io.registry.Format.rst", "generated/skbio.io.registry.Format.__eq__.rst", "generated/skbio.io.registry.Format.__ge__.rst", "generated/skbio.io.registry.Format.__getstate__.rst", "generated/skbio.io.registry.Format.__gt__.rst", "generated/skbio.io.registry.Format.__hash__.rst", "generated/skbio.io.registry.Format.__le__.rst", "generated/skbio.io.registry.Format.__lt__.rst", "generated/skbio.io.registry.Format.__ne__.rst", "generated/skbio.io.registry.Format.__str__.rst", "generated/skbio.io.registry.Format.reader.rst", "generated/skbio.io.registry.Format.sniffer.rst", "generated/skbio.io.registry.Format.writer.rst", "generated/skbio.io.registry.IORegistry.rst", "generated/skbio.io.registry.IORegistry.__eq__.rst", "generated/skbio.io.registry.IORegistry.__ge__.rst", "generated/skbio.io.registry.IORegistry.__getstate__.rst", "generated/skbio.io.registry.IORegistry.__gt__.rst", "generated/skbio.io.registry.IORegistry.__hash__.rst", "generated/skbio.io.registry.IORegistry.__le__.rst", "generated/skbio.io.registry.IORegistry.__lt__.rst", "generated/skbio.io.registry.IORegistry.__ne__.rst", "generated/skbio.io.registry.IORegistry.__str__.rst", "generated/skbio.io.registry.IORegistry.add_format.rst", "generated/skbio.io.registry.IORegistry.create_format.rst", "generated/skbio.io.registry.IORegistry.get_reader.rst", "generated/skbio.io.registry.IORegistry.get_sniffer.rst", "generated/skbio.io.registry.IORegistry.get_writer.rst", "generated/skbio.io.registry.IORegistry.list_read_formats.rst", "generated/skbio.io.registry.IORegistry.list_write_formats.rst", "generated/skbio.io.registry.IORegistry.monkey_patch.rst", "generated/skbio.io.registry.IORegistry.read.rst", "generated/skbio.io.registry.IORegistry.sniff.rst", "generated/skbio.io.registry.IORegistry.write.rst", "generated/skbio.io.registry.InvalidRegistrationError.rst", "generated/skbio.io.registry.create_format.rst", "generated/skbio.io.registry.read.rst", "generated/skbio.io.registry.sniff.rst", "generated/skbio.io.registry.write.rst", "generated/skbio.io.util.rst", "generated/skbio.io.util.open.rst", "generated/skbio.io.util.open_file.rst", "generated/skbio.io.util.open_files.rst", "generated/skbio.metadata.Interval.rst", "generated/skbio.metadata.Interval.__eq__.rst", "generated/skbio.metadata.Interval.__ge__.rst", "generated/skbio.metadata.Interval.__getstate__.rst", "generated/skbio.metadata.Interval.__gt__.rst", "generated/skbio.metadata.Interval.__le__.rst", "generated/skbio.metadata.Interval.__lt__.rst", "generated/skbio.metadata.Interval.__ne__.rst", "generated/skbio.metadata.Interval.__str__.rst", "generated/skbio.metadata.Interval.drop.rst", "generated/skbio.metadata.IntervalMetadata.rst", "generated/skbio.metadata.IntervalMetadata.__copy__.rst", "generated/skbio.metadata.IntervalMetadata.__deepcopy__.rst", "generated/skbio.metadata.IntervalMetadata.__eq__.rst", "generated/skbio.metadata.IntervalMetadata.__ge__.rst", "generated/skbio.metadata.IntervalMetadata.__getstate__.rst", "generated/skbio.metadata.IntervalMetadata.__gt__.rst", "generated/skbio.metadata.IntervalMetadata.__le__.rst", "generated/skbio.metadata.IntervalMetadata.__lt__.rst", "generated/skbio.metadata.IntervalMetadata.__ne__.rst", "generated/skbio.metadata.IntervalMetadata.__str__.rst", "generated/skbio.metadata.IntervalMetadata.add.rst", "generated/skbio.metadata.IntervalMetadata.concat.rst", "generated/skbio.metadata.IntervalMetadata.drop.rst", "generated/skbio.metadata.IntervalMetadata.merge.rst", "generated/skbio.metadata.IntervalMetadata.query.rst", "generated/skbio.metadata.IntervalMetadata.read.rst", "generated/skbio.metadata.IntervalMetadata.sort.rst", "generated/skbio.metadata.IntervalMetadata.write.rst", "generated/skbio.sequence.DNA.rst", "generated/skbio.sequence.DNA.__bool__.rst", "generated/skbio.sequence.DNA.__contains__.rst", "generated/skbio.sequence.DNA.__copy__.rst", "generated/skbio.sequence.DNA.__deepcopy__.rst", "generated/skbio.sequence.DNA.__eq__.rst", "generated/skbio.sequence.DNA.__ge__.rst", "generated/skbio.sequence.DNA.__getitem__.rst", "generated/skbio.sequence.DNA.__getstate__.rst", "generated/skbio.sequence.DNA.__gt__.rst", "generated/skbio.sequence.DNA.__iter__.rst", "generated/skbio.sequence.DNA.__le__.rst", "generated/skbio.sequence.DNA.__len__.rst", "generated/skbio.sequence.DNA.__lt__.rst", "generated/skbio.sequence.DNA.__ne__.rst", "generated/skbio.sequence.DNA.__reversed__.rst", "generated/skbio.sequence.DNA.__str__.rst", "generated/skbio.sequence.DNA.complement.rst", "generated/skbio.sequence.DNA.concat.rst", "generated/skbio.sequence.DNA.count.rst", "generated/skbio.sequence.DNA.definites.rst", "generated/skbio.sequence.DNA.degap.rst", "generated/skbio.sequence.DNA.degenerates.rst", "generated/skbio.sequence.DNA.distance.rst", "generated/skbio.sequence.DNA.expand_degenerates.rst", "generated/skbio.sequence.DNA.find_motifs.rst", "generated/skbio.sequence.DNA.find_with_regex.rst", "generated/skbio.sequence.DNA.frequencies.rst", "generated/skbio.sequence.DNA.gaps.rst", "generated/skbio.sequence.DNA.gc_content.rst", "generated/skbio.sequence.DNA.gc_frequency.rst", "generated/skbio.sequence.DNA.has_definites.rst", "generated/skbio.sequence.DNA.has_degenerates.rst", "generated/skbio.sequence.DNA.has_gaps.rst", "generated/skbio.sequence.DNA.has_interval_metadata.rst", "generated/skbio.sequence.DNA.has_metadata.rst", "generated/skbio.sequence.DNA.has_nondegenerates.rst", "generated/skbio.sequence.DNA.has_positional_metadata.rst", "generated/skbio.sequence.DNA.index.rst", "generated/skbio.sequence.DNA.is_reverse_complement.rst", "generated/skbio.sequence.DNA.iter_contiguous.rst", "generated/skbio.sequence.DNA.iter_kmers.rst", "generated/skbio.sequence.DNA.kmer_frequencies.rst", "generated/skbio.sequence.DNA.lowercase.rst", "generated/skbio.sequence.DNA.match_frequency.rst", "generated/skbio.sequence.DNA.matches.rst", "generated/skbio.sequence.DNA.mismatch_frequency.rst", "generated/skbio.sequence.DNA.mismatches.rst", "generated/skbio.sequence.DNA.nondegenerates.rst", "generated/skbio.sequence.DNA.read.rst", "generated/skbio.sequence.DNA.replace.rst", "generated/skbio.sequence.DNA.reverse_complement.rst", "generated/skbio.sequence.DNA.to_definites.rst", "generated/skbio.sequence.DNA.to_indices.rst", "generated/skbio.sequence.DNA.to_regex.rst", "generated/skbio.sequence.DNA.transcribe.rst", "generated/skbio.sequence.DNA.translate.rst", "generated/skbio.sequence.DNA.translate_six_frames.rst", "generated/skbio.sequence.DNA.write.rst", "generated/skbio.sequence.GeneticCode.rst", "generated/skbio.sequence.GeneticCode.__eq__.rst", "generated/skbio.sequence.GeneticCode.__ge__.rst", "generated/skbio.sequence.GeneticCode.__getstate__.rst", "generated/skbio.sequence.GeneticCode.__gt__.rst", "generated/skbio.sequence.GeneticCode.__le__.rst", "generated/skbio.sequence.GeneticCode.__lt__.rst", "generated/skbio.sequence.GeneticCode.__ne__.rst", "generated/skbio.sequence.GeneticCode.__str__.rst", "generated/skbio.sequence.GeneticCode.from_ncbi.rst", "generated/skbio.sequence.GeneticCode.translate.rst", "generated/skbio.sequence.GeneticCode.translate_six_frames.rst", "generated/skbio.sequence.GrammaredSequence.rst", "generated/skbio.sequence.GrammaredSequence.__bool__.rst", "generated/skbio.sequence.GrammaredSequence.__contains__.rst", "generated/skbio.sequence.GrammaredSequence.__copy__.rst", "generated/skbio.sequence.GrammaredSequence.__deepcopy__.rst", "generated/skbio.sequence.GrammaredSequence.__eq__.rst", "generated/skbio.sequence.GrammaredSequence.__ge__.rst", "generated/skbio.sequence.GrammaredSequence.__getitem__.rst", "generated/skbio.sequence.GrammaredSequence.__getstate__.rst", "generated/skbio.sequence.GrammaredSequence.__gt__.rst", "generated/skbio.sequence.GrammaredSequence.__iter__.rst", "generated/skbio.sequence.GrammaredSequence.__le__.rst", "generated/skbio.sequence.GrammaredSequence.__len__.rst", "generated/skbio.sequence.GrammaredSequence.__lt__.rst", "generated/skbio.sequence.GrammaredSequence.__ne__.rst", "generated/skbio.sequence.GrammaredSequence.__reversed__.rst", "generated/skbio.sequence.GrammaredSequence.__str__.rst", "generated/skbio.sequence.GrammaredSequence.concat.rst", "generated/skbio.sequence.GrammaredSequence.count.rst", "generated/skbio.sequence.GrammaredSequence.definites.rst", "generated/skbio.sequence.GrammaredSequence.degap.rst", "generated/skbio.sequence.GrammaredSequence.degenerates.rst", "generated/skbio.sequence.GrammaredSequence.distance.rst", "generated/skbio.sequence.GrammaredSequence.expand_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.find_motifs.rst", "generated/skbio.sequence.GrammaredSequence.find_with_regex.rst", "generated/skbio.sequence.GrammaredSequence.frequencies.rst", "generated/skbio.sequence.GrammaredSequence.gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_definites.rst", "generated/skbio.sequence.GrammaredSequence.has_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata.rst", "generated/skbio.sequence.GrammaredSequence.index.rst", "generated/skbio.sequence.GrammaredSequence.iter_contiguous.rst", "generated/skbio.sequence.GrammaredSequence.iter_kmers.rst", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies.rst", "generated/skbio.sequence.GrammaredSequence.lowercase.rst", "generated/skbio.sequence.GrammaredSequence.match_frequency.rst", "generated/skbio.sequence.GrammaredSequence.matches.rst", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency.rst", "generated/skbio.sequence.GrammaredSequence.mismatches.rst", "generated/skbio.sequence.GrammaredSequence.nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.read.rst", "generated/skbio.sequence.GrammaredSequence.replace.rst", "generated/skbio.sequence.GrammaredSequence.to_definites.rst", "generated/skbio.sequence.GrammaredSequence.to_indices.rst", "generated/skbio.sequence.GrammaredSequence.to_regex.rst", "generated/skbio.sequence.GrammaredSequence.write.rst", "generated/skbio.sequence.Protein.rst", "generated/skbio.sequence.Protein.__bool__.rst", "generated/skbio.sequence.Protein.__contains__.rst", "generated/skbio.sequence.Protein.__copy__.rst", "generated/skbio.sequence.Protein.__deepcopy__.rst", "generated/skbio.sequence.Protein.__eq__.rst", "generated/skbio.sequence.Protein.__ge__.rst", "generated/skbio.sequence.Protein.__getitem__.rst", "generated/skbio.sequence.Protein.__getstate__.rst", "generated/skbio.sequence.Protein.__gt__.rst", "generated/skbio.sequence.Protein.__iter__.rst", "generated/skbio.sequence.Protein.__le__.rst", "generated/skbio.sequence.Protein.__len__.rst", "generated/skbio.sequence.Protein.__lt__.rst", "generated/skbio.sequence.Protein.__ne__.rst", "generated/skbio.sequence.Protein.__reversed__.rst", "generated/skbio.sequence.Protein.__str__.rst", "generated/skbio.sequence.Protein.concat.rst", "generated/skbio.sequence.Protein.count.rst", "generated/skbio.sequence.Protein.definites.rst", "generated/skbio.sequence.Protein.degap.rst", "generated/skbio.sequence.Protein.degenerates.rst", "generated/skbio.sequence.Protein.distance.rst", "generated/skbio.sequence.Protein.expand_degenerates.rst", "generated/skbio.sequence.Protein.find_motifs.rst", "generated/skbio.sequence.Protein.find_with_regex.rst", "generated/skbio.sequence.Protein.frequencies.rst", "generated/skbio.sequence.Protein.gaps.rst", "generated/skbio.sequence.Protein.has_definites.rst", "generated/skbio.sequence.Protein.has_degenerates.rst", "generated/skbio.sequence.Protein.has_gaps.rst", "generated/skbio.sequence.Protein.has_interval_metadata.rst", "generated/skbio.sequence.Protein.has_metadata.rst", "generated/skbio.sequence.Protein.has_nondegenerates.rst", "generated/skbio.sequence.Protein.has_positional_metadata.rst", "generated/skbio.sequence.Protein.has_stops.rst", "generated/skbio.sequence.Protein.index.rst", "generated/skbio.sequence.Protein.iter_contiguous.rst", "generated/skbio.sequence.Protein.iter_kmers.rst", "generated/skbio.sequence.Protein.kmer_frequencies.rst", "generated/skbio.sequence.Protein.lowercase.rst", "generated/skbio.sequence.Protein.match_frequency.rst", "generated/skbio.sequence.Protein.matches.rst", "generated/skbio.sequence.Protein.mismatch_frequency.rst", "generated/skbio.sequence.Protein.mismatches.rst", "generated/skbio.sequence.Protein.nondegenerates.rst", "generated/skbio.sequence.Protein.read.rst", "generated/skbio.sequence.Protein.replace.rst", "generated/skbio.sequence.Protein.stops.rst", "generated/skbio.sequence.Protein.to_definites.rst", "generated/skbio.sequence.Protein.to_indices.rst", "generated/skbio.sequence.Protein.to_regex.rst", "generated/skbio.sequence.Protein.write.rst", "generated/skbio.sequence.RNA.rst", "generated/skbio.sequence.RNA.__bool__.rst", "generated/skbio.sequence.RNA.__contains__.rst", "generated/skbio.sequence.RNA.__copy__.rst", "generated/skbio.sequence.RNA.__deepcopy__.rst", "generated/skbio.sequence.RNA.__eq__.rst", "generated/skbio.sequence.RNA.__ge__.rst", "generated/skbio.sequence.RNA.__getitem__.rst", "generated/skbio.sequence.RNA.__getstate__.rst", "generated/skbio.sequence.RNA.__gt__.rst", "generated/skbio.sequence.RNA.__iter__.rst", "generated/skbio.sequence.RNA.__le__.rst", "generated/skbio.sequence.RNA.__len__.rst", "generated/skbio.sequence.RNA.__lt__.rst", "generated/skbio.sequence.RNA.__ne__.rst", "generated/skbio.sequence.RNA.__reversed__.rst", "generated/skbio.sequence.RNA.__str__.rst", "generated/skbio.sequence.RNA.complement.rst", "generated/skbio.sequence.RNA.concat.rst", "generated/skbio.sequence.RNA.count.rst", "generated/skbio.sequence.RNA.definites.rst", "generated/skbio.sequence.RNA.degap.rst", "generated/skbio.sequence.RNA.degenerates.rst", "generated/skbio.sequence.RNA.distance.rst", "generated/skbio.sequence.RNA.expand_degenerates.rst", "generated/skbio.sequence.RNA.find_motifs.rst", "generated/skbio.sequence.RNA.find_with_regex.rst", "generated/skbio.sequence.RNA.frequencies.rst", "generated/skbio.sequence.RNA.gaps.rst", "generated/skbio.sequence.RNA.gc_content.rst", "generated/skbio.sequence.RNA.gc_frequency.rst", "generated/skbio.sequence.RNA.has_definites.rst", "generated/skbio.sequence.RNA.has_degenerates.rst", "generated/skbio.sequence.RNA.has_gaps.rst", "generated/skbio.sequence.RNA.has_interval_metadata.rst", "generated/skbio.sequence.RNA.has_metadata.rst", "generated/skbio.sequence.RNA.has_nondegenerates.rst", "generated/skbio.sequence.RNA.has_positional_metadata.rst", "generated/skbio.sequence.RNA.index.rst", "generated/skbio.sequence.RNA.is_reverse_complement.rst", "generated/skbio.sequence.RNA.iter_contiguous.rst", "generated/skbio.sequence.RNA.iter_kmers.rst", "generated/skbio.sequence.RNA.kmer_frequencies.rst", "generated/skbio.sequence.RNA.lowercase.rst", "generated/skbio.sequence.RNA.match_frequency.rst", "generated/skbio.sequence.RNA.matches.rst", "generated/skbio.sequence.RNA.mismatch_frequency.rst", "generated/skbio.sequence.RNA.mismatches.rst", "generated/skbio.sequence.RNA.nondegenerates.rst", "generated/skbio.sequence.RNA.read.rst", "generated/skbio.sequence.RNA.replace.rst", "generated/skbio.sequence.RNA.reverse_complement.rst", "generated/skbio.sequence.RNA.reverse_transcribe.rst", "generated/skbio.sequence.RNA.to_definites.rst", "generated/skbio.sequence.RNA.to_indices.rst", "generated/skbio.sequence.RNA.to_regex.rst", "generated/skbio.sequence.RNA.translate.rst", "generated/skbio.sequence.RNA.translate_six_frames.rst", "generated/skbio.sequence.RNA.write.rst", "generated/skbio.sequence.Sequence.rst", "generated/skbio.sequence.Sequence.__bool__.rst", "generated/skbio.sequence.Sequence.__contains__.rst", "generated/skbio.sequence.Sequence.__copy__.rst", "generated/skbio.sequence.Sequence.__deepcopy__.rst", "generated/skbio.sequence.Sequence.__eq__.rst", "generated/skbio.sequence.Sequence.__ge__.rst", "generated/skbio.sequence.Sequence.__getitem__.rst", "generated/skbio.sequence.Sequence.__getstate__.rst", "generated/skbio.sequence.Sequence.__gt__.rst", "generated/skbio.sequence.Sequence.__iter__.rst", "generated/skbio.sequence.Sequence.__le__.rst", "generated/skbio.sequence.Sequence.__len__.rst", "generated/skbio.sequence.Sequence.__lt__.rst", "generated/skbio.sequence.Sequence.__ne__.rst", "generated/skbio.sequence.Sequence.__reversed__.rst", "generated/skbio.sequence.Sequence.__str__.rst", "generated/skbio.sequence.Sequence.concat.rst", "generated/skbio.sequence.Sequence.count.rst", "generated/skbio.sequence.Sequence.distance.rst", "generated/skbio.sequence.Sequence.find_with_regex.rst", "generated/skbio.sequence.Sequence.frequencies.rst", "generated/skbio.sequence.Sequence.has_interval_metadata.rst", "generated/skbio.sequence.Sequence.has_metadata.rst", "generated/skbio.sequence.Sequence.has_positional_metadata.rst", "generated/skbio.sequence.Sequence.index.rst", "generated/skbio.sequence.Sequence.iter_contiguous.rst", "generated/skbio.sequence.Sequence.iter_kmers.rst", "generated/skbio.sequence.Sequence.kmer_frequencies.rst", "generated/skbio.sequence.Sequence.lowercase.rst", "generated/skbio.sequence.Sequence.match_frequency.rst", "generated/skbio.sequence.Sequence.matches.rst", "generated/skbio.sequence.Sequence.mismatch_frequency.rst", "generated/skbio.sequence.Sequence.mismatches.rst", "generated/skbio.sequence.Sequence.read.rst", "generated/skbio.sequence.Sequence.replace.rst", "generated/skbio.sequence.Sequence.to_indices.rst", "generated/skbio.sequence.Sequence.write.rst", "generated/skbio.sequence.SubstitutionMatrix.rst", "generated/skbio.sequence.SubstitutionMatrix.__contains__.rst", "generated/skbio.sequence.SubstitutionMatrix.__eq__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ge__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getitem__.rst", "generated/skbio.sequence.SubstitutionMatrix.__getstate__.rst", "generated/skbio.sequence.SubstitutionMatrix.__gt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__le__.rst", "generated/skbio.sequence.SubstitutionMatrix.__lt__.rst", "generated/skbio.sequence.SubstitutionMatrix.__ne__.rst", "generated/skbio.sequence.SubstitutionMatrix.__str__.rst", "generated/skbio.sequence.SubstitutionMatrix.between.rst", "generated/skbio.sequence.SubstitutionMatrix.by_name.rst", "generated/skbio.sequence.SubstitutionMatrix.copy.rst", "generated/skbio.sequence.SubstitutionMatrix.filter.rst", "generated/skbio.sequence.SubstitutionMatrix.from_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.from_iterable.rst", "generated/skbio.sequence.SubstitutionMatrix.get_names.rst", "generated/skbio.sequence.SubstitutionMatrix.identity.rst", "generated/skbio.sequence.SubstitutionMatrix.index.rst", "generated/skbio.sequence.SubstitutionMatrix.plot.rst", "generated/skbio.sequence.SubstitutionMatrix.read.rst", "generated/skbio.sequence.SubstitutionMatrix.redundant_form.rst", "generated/skbio.sequence.SubstitutionMatrix.to_data_frame.rst", "generated/skbio.sequence.SubstitutionMatrix.to_dict.rst", "generated/skbio.sequence.SubstitutionMatrix.transpose.rst", "generated/skbio.sequence.SubstitutionMatrix.within.rst", "generated/skbio.sequence.SubstitutionMatrix.write.rst", "generated/skbio.sequence.distance.rst", "generated/skbio.sequence.distance.hamming.rst", "generated/skbio.sequence.distance.kmer_distance.rst", "generated/skbio.stats.composition.rst", "generated/skbio.stats.composition.alr.rst", "generated/skbio.stats.composition.alr_inv.rst", "generated/skbio.stats.composition.ancom.rst", "generated/skbio.stats.composition.centralize.rst", "generated/skbio.stats.composition.closure.rst", "generated/skbio.stats.composition.clr.rst", "generated/skbio.stats.composition.clr_inv.rst", "generated/skbio.stats.composition.dirmult_ttest.rst", "generated/skbio.stats.composition.ilr.rst", "generated/skbio.stats.composition.ilr_inv.rst", "generated/skbio.stats.composition.inner.rst", "generated/skbio.stats.composition.multi_replace.rst", "generated/skbio.stats.composition.multiplicative_replacement.rst", "generated/skbio.stats.composition.pairwise_vlr.rst", "generated/skbio.stats.composition.perturb.rst", "generated/skbio.stats.composition.perturb_inv.rst", "generated/skbio.stats.composition.power.rst", "generated/skbio.stats.composition.sbp_basis.rst", "generated/skbio.stats.composition.tree_basis.rst", "generated/skbio.stats.composition.vlr.rst", "generated/skbio.stats.distance.rst", "generated/skbio.stats.distance.DissimilarityMatrix.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getstate__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__le__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__str__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.between.rst", "generated/skbio.stats.distance.DissimilarityMatrix.copy.rst", "generated/skbio.stats.distance.DissimilarityMatrix.filter.rst", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable.rst", "generated/skbio.stats.distance.DissimilarityMatrix.index.rst", "generated/skbio.stats.distance.DissimilarityMatrix.plot.rst", "generated/skbio.stats.distance.DissimilarityMatrix.read.rst", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form.rst", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DissimilarityMatrix.transpose.rst", "generated/skbio.stats.distance.DissimilarityMatrix.within.rst", "generated/skbio.stats.distance.DissimilarityMatrix.write.rst", "generated/skbio.stats.distance.DissimilarityMatrixError.rst", "generated/skbio.stats.distance.DistanceMatrix.rst", "generated/skbio.stats.distance.DistanceMatrix.__contains__.rst", "generated/skbio.stats.distance.DistanceMatrix.__eq__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ge__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getitem__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getstate__.rst", "generated/skbio.stats.distance.DistanceMatrix.__gt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__le__.rst", "generated/skbio.stats.distance.DistanceMatrix.__lt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ne__.rst", "generated/skbio.stats.distance.DistanceMatrix.__str__.rst", "generated/skbio.stats.distance.DistanceMatrix.between.rst", "generated/skbio.stats.distance.DistanceMatrix.condensed_form.rst", "generated/skbio.stats.distance.DistanceMatrix.copy.rst", "generated/skbio.stats.distance.DistanceMatrix.filter.rst", "generated/skbio.stats.distance.DistanceMatrix.from_iterable.rst", "generated/skbio.stats.distance.DistanceMatrix.index.rst", "generated/skbio.stats.distance.DistanceMatrix.permute.rst", "generated/skbio.stats.distance.DistanceMatrix.plot.rst", "generated/skbio.stats.distance.DistanceMatrix.read.rst", "generated/skbio.stats.distance.DistanceMatrix.redundant_form.rst", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DistanceMatrix.to_series.rst", "generated/skbio.stats.distance.DistanceMatrix.transpose.rst", "generated/skbio.stats.distance.DistanceMatrix.within.rst", "generated/skbio.stats.distance.DistanceMatrix.write.rst", "generated/skbio.stats.distance.DistanceMatrixError.rst", "generated/skbio.stats.distance.MissingIDError.rst", "generated/skbio.stats.distance.anosim.rst", "generated/skbio.stats.distance.bioenv.rst", "generated/skbio.stats.distance.mantel.rst", "generated/skbio.stats.distance.permanova.rst", "generated/skbio.stats.distance.permdisp.rst", "generated/skbio.stats.distance.pwmantel.rst", "generated/skbio.stats.distance.randdm.rst", "generated/skbio.stats.evolve.rst", "generated/skbio.stats.evolve.hommola_cospeciation.rst", "generated/skbio.stats.gradient.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.CategoryResults.rst", "generated/skbio.stats.gradient.CategoryResults.__eq__.rst", "generated/skbio.stats.gradient.CategoryResults.__ge__.rst", "generated/skbio.stats.gradient.CategoryResults.__getstate__.rst", "generated/skbio.stats.gradient.CategoryResults.__gt__.rst", "generated/skbio.stats.gradient.CategoryResults.__hash__.rst", "generated/skbio.stats.gradient.CategoryResults.__le__.rst", "generated/skbio.stats.gradient.CategoryResults.__lt__.rst", "generated/skbio.stats.gradient.CategoryResults.__ne__.rst", "generated/skbio.stats.gradient.CategoryResults.__str__.rst", "generated/skbio.stats.gradient.CategoryResults.to_files.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVA.rst", "generated/skbio.stats.gradient.GradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVA.__le__.rst", "generated/skbio.stats.gradient.GradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVA.__str__.rst", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVAResults.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__getstate__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__le__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__str__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.to_files.rst", "generated/skbio.stats.gradient.GroupResults.rst", "generated/skbio.stats.gradient.GroupResults.__eq__.rst", "generated/skbio.stats.gradient.GroupResults.__ge__.rst", "generated/skbio.stats.gradient.GroupResults.__getstate__.rst", "generated/skbio.stats.gradient.GroupResults.__gt__.rst", "generated/skbio.stats.gradient.GroupResults.__hash__.rst", "generated/skbio.stats.gradient.GroupResults.__le__.rst", "generated/skbio.stats.gradient.GroupResults.__lt__.rst", "generated/skbio.stats.gradient.GroupResults.__ne__.rst", "generated/skbio.stats.gradient.GroupResults.__str__.rst", "generated/skbio.stats.gradient.GroupResults.to_files.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.isubsample.rst", "generated/skbio.stats.ordination.rst", "generated/skbio.stats.ordination.OrdinationResults.rst", "generated/skbio.stats.ordination.OrdinationResults.__eq__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ge__.rst", "generated/skbio.stats.ordination.OrdinationResults.__getstate__.rst", "generated/skbio.stats.ordination.OrdinationResults.__gt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__hash__.rst", "generated/skbio.stats.ordination.OrdinationResults.__le__.rst", "generated/skbio.stats.ordination.OrdinationResults.__lt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ne__.rst", "generated/skbio.stats.ordination.OrdinationResults.__str__.rst", "generated/skbio.stats.ordination.OrdinationResults.plot.rst", "generated/skbio.stats.ordination.OrdinationResults.read.rst", "generated/skbio.stats.ordination.OrdinationResults.write.rst", "generated/skbio.stats.ordination.ca.rst", "generated/skbio.stats.ordination.cca.rst", "generated/skbio.stats.ordination.corr.rst", "generated/skbio.stats.ordination.e_matrix.rst", "generated/skbio.stats.ordination.f_matrix.rst", "generated/skbio.stats.ordination.mean_and_std.rst", "generated/skbio.stats.ordination.pcoa.rst", "generated/skbio.stats.ordination.pcoa_biplot.rst", "generated/skbio.stats.ordination.rda.rst", "generated/skbio.stats.ordination.scale.rst", "generated/skbio.stats.ordination.svd_rank.rst", "generated/skbio.stats.power.rst", "generated/skbio.stats.power.confidence_bound.rst", "generated/skbio.stats.power.paired_subsamples.rst", "generated/skbio.stats.power.subsample_paired_power.rst", "generated/skbio.stats.power.subsample_power.rst", "generated/skbio.stats.subsample_counts.rst", "generated/skbio.tree.DuplicateNodeError.rst", "generated/skbio.tree.MissingNodeError.rst", "generated/skbio.tree.NoLengthError.rst", "generated/skbio.tree.NoParentError.rst", "generated/skbio.tree.TreeError.rst", "generated/skbio.tree.TreeNode.rst", "generated/skbio.tree.TreeNode.__copy__.rst", "generated/skbio.tree.TreeNode.__deepcopy__.rst", "generated/skbio.tree.TreeNode.__eq__.rst", "generated/skbio.tree.TreeNode.__ge__.rst", "generated/skbio.tree.TreeNode.__getitem__.rst", "generated/skbio.tree.TreeNode.__getstate__.rst", "generated/skbio.tree.TreeNode.__gt__.rst", "generated/skbio.tree.TreeNode.__hash__.rst", "generated/skbio.tree.TreeNode.__iter__.rst", "generated/skbio.tree.TreeNode.__le__.rst", "generated/skbio.tree.TreeNode.__len__.rst", "generated/skbio.tree.TreeNode.__lt__.rst", "generated/skbio.tree.TreeNode.__ne__.rst", "generated/skbio.tree.TreeNode.__str__.rst", "generated/skbio.tree.TreeNode.accumulate_to_ancestor.rst", "generated/skbio.tree.TreeNode.ancestors.rst", "generated/skbio.tree.TreeNode.append.rst", "generated/skbio.tree.TreeNode.ascii_art.rst", "generated/skbio.tree.TreeNode.assign_ids.rst", "generated/skbio.tree.TreeNode.assign_supports.rst", "generated/skbio.tree.TreeNode.bifurcate.rst", "generated/skbio.tree.TreeNode.cache_attr.rst", "generated/skbio.tree.TreeNode.compare_rfd.rst", "generated/skbio.tree.TreeNode.compare_subsets.rst", "generated/skbio.tree.TreeNode.compare_tip_distances.rst", "generated/skbio.tree.TreeNode.copy.rst", "generated/skbio.tree.TreeNode.count.rst", "generated/skbio.tree.TreeNode.create_caches.rst", "generated/skbio.tree.TreeNode.deepcopy.rst", "generated/skbio.tree.TreeNode.descending_branch_length.rst", "generated/skbio.tree.TreeNode.distance.rst", "generated/skbio.tree.TreeNode.extend.rst", "generated/skbio.tree.TreeNode.find.rst", "generated/skbio.tree.TreeNode.find_all.rst", "generated/skbio.tree.TreeNode.find_by_func.rst", "generated/skbio.tree.TreeNode.find_by_id.rst", "generated/skbio.tree.TreeNode.from_linkage_matrix.rst", "generated/skbio.tree.TreeNode.from_taxdump.rst", "generated/skbio.tree.TreeNode.from_taxonomy.rst", "generated/skbio.tree.TreeNode.get_max_distance.rst", "generated/skbio.tree.TreeNode.has_children.rst", "generated/skbio.tree.TreeNode.index_tree.rst", "generated/skbio.tree.TreeNode.invalidate_caches.rst", "generated/skbio.tree.TreeNode.is_root.rst", "generated/skbio.tree.TreeNode.is_tip.rst", "generated/skbio.tree.TreeNode.lca.rst", "generated/skbio.tree.TreeNode.levelorder.rst", "generated/skbio.tree.TreeNode.lowest_common_ancestor.rst", "generated/skbio.tree.TreeNode.neighbors.rst", "generated/skbio.tree.TreeNode.non_tips.rst", "generated/skbio.tree.TreeNode.observed_node_counts.rst", "generated/skbio.tree.TreeNode.pop.rst", "generated/skbio.tree.TreeNode.postorder.rst", "generated/skbio.tree.TreeNode.pre_and_postorder.rst", "generated/skbio.tree.TreeNode.preorder.rst", "generated/skbio.tree.TreeNode.prune.rst", "generated/skbio.tree.TreeNode.read.rst", "generated/skbio.tree.TreeNode.remove.rst", "generated/skbio.tree.TreeNode.remove_deleted.rst", "generated/skbio.tree.TreeNode.root.rst", "generated/skbio.tree.TreeNode.root_at.rst", "generated/skbio.tree.TreeNode.root_at_midpoint.rst", "generated/skbio.tree.TreeNode.shear.rst", "generated/skbio.tree.TreeNode.shuffle.rst", "generated/skbio.tree.TreeNode.siblings.rst", "generated/skbio.tree.TreeNode.subset.rst", "generated/skbio.tree.TreeNode.subsets.rst", "generated/skbio.tree.TreeNode.subtree.rst", "generated/skbio.tree.TreeNode.tip_tip_distances.rst", "generated/skbio.tree.TreeNode.tips.rst", "generated/skbio.tree.TreeNode.to_array.rst", "generated/skbio.tree.TreeNode.to_taxonomy.rst", "generated/skbio.tree.TreeNode.traverse.rst", "generated/skbio.tree.TreeNode.unpack.rst", "generated/skbio.tree.TreeNode.unpack_by_func.rst", "generated/skbio.tree.TreeNode.unrooted_copy.rst", "generated/skbio.tree.TreeNode.unrooted_deepcopy.rst", "generated/skbio.tree.TreeNode.write.rst", "generated/skbio.tree.majority_rule.rst", "generated/skbio.tree.nj.rst", "generated/skbio.util.EfficiencyWarning.rst", "generated/skbio.util.RepresentationWarning.rst", "generated/skbio.util.assert_data_frame_almost_equal.rst", "generated/skbio.util.assert_ordination_results_equal.rst", "generated/skbio.util.cardinal_to_ordinal.rst", "generated/skbio.util.classproperty.rst", "generated/skbio.util.classproperty.__delete__.rst", "generated/skbio.util.classproperty.__eq__.rst", "generated/skbio.util.classproperty.__ge__.rst", "generated/skbio.util.classproperty.__get__.rst", "generated/skbio.util.classproperty.__getstate__.rst", "generated/skbio.util.classproperty.__gt__.rst", "generated/skbio.util.classproperty.__hash__.rst", "generated/skbio.util.classproperty.__le__.rst", "generated/skbio.util.classproperty.__lt__.rst", "generated/skbio.util.classproperty.__ne__.rst", "generated/skbio.util.classproperty.__set__.rst", "generated/skbio.util.classproperty.__set_name__.rst", "generated/skbio.util.classproperty.__str__.rst", "generated/skbio.util.classproperty.deleter.rst", "generated/skbio.util.classproperty.getter.rst", "generated/skbio.util.classproperty.setter.rst", "generated/skbio.util.find_duplicates.rst", "generated/skbio.util.get_data_path.rst", "generated/skbio.util.safe_md5.rst", "generated/skbio.workflow.Workflow.rst", "generated/skbio.workflow.Workflow.__call__.rst", "generated/skbio.workflow.Workflow.__eq__.rst", "generated/skbio.workflow.Workflow.__ge__.rst", "generated/skbio.workflow.Workflow.__getstate__.rst", "generated/skbio.workflow.Workflow.__gt__.rst", "generated/skbio.workflow.Workflow.__hash__.rst", "generated/skbio.workflow.Workflow.__le__.rst", "generated/skbio.workflow.Workflow.__lt__.rst", "generated/skbio.workflow.Workflow.__ne__.rst", "generated/skbio.workflow.Workflow.__str__.rst", "generated/skbio.workflow.Workflow.initialize_state.rst", "generated/skbio.workflow.method.rst", "generated/skbio.workflow.method.__call__.rst", "generated/skbio.workflow.method.__eq__.rst", "generated/skbio.workflow.method.__ge__.rst", "generated/skbio.workflow.method.__getstate__.rst", "generated/skbio.workflow.method.__gt__.rst", "generated/skbio.workflow.method.__hash__.rst", "generated/skbio.workflow.method.__le__.rst", "generated/skbio.workflow.method.__lt__.rst", "generated/skbio.workflow.method.__ne__.rst", "generated/skbio.workflow.method.__str__.rst", "generated/skbio.workflow.requires.rst", "generated/skbio.workflow.requires.__call__.rst", "generated/skbio.workflow.requires.__eq__.rst", "generated/skbio.workflow.requires.__ge__.rst", "generated/skbio.workflow.requires.__getstate__.rst", "generated/skbio.workflow.requires.__gt__.rst", "generated/skbio.workflow.requires.__hash__.rst", "generated/skbio.workflow.requires.__le__.rst", "generated/skbio.workflow.requires.__lt__.rst", "generated/skbio.workflow.requires.__ne__.rst", "generated/skbio.workflow.requires.__str__.rst", "index.rst", "io.rst", "metadata.rst", "sequence.rst", "stats.rst", "tree.rst", "util.rst", "workflow.rst"], "titles": ["Alignments (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.alignment</span></code>)", "Diversity calculations (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity</span></code>)", "skbio.alignment.AlignmentStructure", "skbio.alignment.AlignmentStructure.__eq__", "skbio.alignment.AlignmentStructure.__ge__", "skbio.alignment.AlignmentStructure.__getitem__", "skbio.alignment.AlignmentStructure.__getstate__", "skbio.alignment.AlignmentStructure.__gt__", "skbio.alignment.AlignmentStructure.__hash__", "skbio.alignment.AlignmentStructure.__le__", "skbio.alignment.AlignmentStructure.__lt__", "skbio.alignment.AlignmentStructure.__ne__", "skbio.alignment.AlignmentStructure.__setstate__", "skbio.alignment.AlignmentStructure.__str__", "skbio.alignment.AlignmentStructure.is_zero_based", "skbio.alignment.AlignmentStructure.set_zero_based", "skbio.alignment.StripedSmithWaterman", "skbio.alignment.StripedSmithWaterman.__call__", "skbio.alignment.StripedSmithWaterman.__eq__", "skbio.alignment.StripedSmithWaterman.__ge__", "skbio.alignment.StripedSmithWaterman.__getstate__", "skbio.alignment.StripedSmithWaterman.__gt__", "skbio.alignment.StripedSmithWaterman.__hash__", "skbio.alignment.StripedSmithWaterman.__le__", "skbio.alignment.StripedSmithWaterman.__lt__", "skbio.alignment.StripedSmithWaterman.__ne__", "skbio.alignment.StripedSmithWaterman.__setstate__", "skbio.alignment.StripedSmithWaterman.__str__", "skbio.alignment.TabularMSA", "skbio.alignment.TabularMSA.__bool__", "skbio.alignment.TabularMSA.__contains__", "skbio.alignment.TabularMSA.__copy__", "skbio.alignment.TabularMSA.__deepcopy__", "skbio.alignment.TabularMSA.__eq__", "skbio.alignment.TabularMSA.__ge__", "skbio.alignment.TabularMSA.__getitem__", "skbio.alignment.TabularMSA.__getstate__", "skbio.alignment.TabularMSA.__gt__", "skbio.alignment.TabularMSA.__iter__", "skbio.alignment.TabularMSA.__le__", "skbio.alignment.TabularMSA.__len__", "skbio.alignment.TabularMSA.__lt__", "skbio.alignment.TabularMSA.__ne__", "skbio.alignment.TabularMSA.__reversed__", "skbio.alignment.TabularMSA.__str__", "skbio.alignment.TabularMSA.append", "skbio.alignment.TabularMSA.consensus", "skbio.alignment.TabularMSA.conservation", "skbio.alignment.TabularMSA.extend", "skbio.alignment.TabularMSA.from_dict", "skbio.alignment.TabularMSA.gap_frequencies", "skbio.alignment.TabularMSA.has_metadata", "skbio.alignment.TabularMSA.has_positional_metadata", "skbio.alignment.TabularMSA.iter_positions", "skbio.alignment.TabularMSA.join", "skbio.alignment.TabularMSA.read", "skbio.alignment.TabularMSA.reassign_index", "skbio.alignment.TabularMSA.sort", "skbio.alignment.TabularMSA.to_dict", "skbio.alignment.TabularMSA.write", "skbio.alignment.global_pairwise_align", "skbio.alignment.global_pairwise_align_nucleotide", "skbio.alignment.global_pairwise_align_protein", "skbio.alignment.local_pairwise_align", "skbio.alignment.local_pairwise_align_nucleotide", "skbio.alignment.local_pairwise_align_protein", "skbio.alignment.local_pairwise_align_ssw", "skbio.alignment.make_identity_substitution_matrix", "Alpha diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.alpha</span></code>)", "skbio.diversity.alpha.ace", "skbio.diversity.alpha.berger_parker_d", "skbio.diversity.alpha.brillouin_d", "skbio.diversity.alpha.chao1", "skbio.diversity.alpha.chao1_ci", "skbio.diversity.alpha.dominance", "skbio.diversity.alpha.doubles", "skbio.diversity.alpha.enspie", "skbio.diversity.alpha.esty_ci", "skbio.diversity.alpha.faith_pd", "skbio.diversity.alpha.fisher_alpha", "skbio.diversity.alpha.gini_index", "skbio.diversity.alpha.goods_coverage", "skbio.diversity.alpha.heip_e", "skbio.diversity.alpha.kempton_taylor_q", "skbio.diversity.alpha.lladser_ci", "skbio.diversity.alpha.lladser_pe", "skbio.diversity.alpha.margalef", "skbio.diversity.alpha.mcintosh_d", "skbio.diversity.alpha.mcintosh_e", "skbio.diversity.alpha.menhinick", "skbio.diversity.alpha.michaelis_menten_fit", "skbio.diversity.alpha.observed_features", "skbio.diversity.alpha.observed_otus", "skbio.diversity.alpha.osd", "skbio.diversity.alpha.phydiv", "skbio.diversity.alpha.pielou_e", "skbio.diversity.alpha.robbins", "skbio.diversity.alpha.shannon", "skbio.diversity.alpha.simpson", "skbio.diversity.alpha.simpson_e", "skbio.diversity.alpha.singles", "skbio.diversity.alpha.sobs", "skbio.diversity.alpha.strong", "skbio.diversity.alpha_diversity", "Beta diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.beta</span></code>)", "skbio.diversity.beta.unweighted_unifrac", "skbio.diversity.beta.weighted_unifrac", "skbio.diversity.beta_diversity", "skbio.diversity.block_beta_diversity", "skbio.diversity.get_alpha_diversity_metrics", "skbio.diversity.get_beta_diversity_metrics", "skbio.diversity.partial_beta_diversity", "skbio.io.ArgumentOverrideWarning", "skbio.io.BLAST7FormatError", "skbio.io.ClustalFormatError", "skbio.io.EMBLFormatError", "skbio.io.FASTAFormatError", "skbio.io.FASTQFormatError", "skbio.io.FileFormatError", "skbio.io.FormatIdentificationWarning", "skbio.io.GFF3FormatError", "skbio.io.GenBankFormatError", "skbio.io.IOSourceError", "skbio.io.LSMatFormatError", "skbio.io.NewickFormatError", "skbio.io.OrdinationFormatError", "skbio.io.PhylipFormatError", "skbio.io.QSeqFormatError", "skbio.io.QUALFormatError", "skbio.io.StockholmFormatError", "skbio.io.UnrecognizedFormatError", "Simple binary dissimilarity matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.binary_dm</span></code>)", "BLAST+6 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast6</span></code>)", "BLAST+7 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast7</span></code>)", "Clustal format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.clustal</span></code>)", "EMBL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embl</span></code>)", "FASTA/QUAL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fasta</span></code>)", "FASTQ format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fastq</span></code>)", "GenBank format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.genbank</span></code>)", "GFF3 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.gff3</span></code>)", "Labeled square matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.lsmat</span></code>)", "Newick format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.newick</span></code>)", "Ordination results format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.ordination</span></code>)", "PHYLIP multiple sequence alignment format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.phylip</span></code>)", "QSeq format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.qseq</span></code>)", "Format Support", "Stockholm format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.stockholm</span></code>)", "Taxdump format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.taxdump</span></code>)", "I/O Registry (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.registry</span></code>)", "skbio.io.registry.DuplicateRegistrationError", "skbio.io.registry.Format", "skbio.io.registry.Format.__eq__", "skbio.io.registry.Format.__ge__", "skbio.io.registry.Format.__getstate__", "skbio.io.registry.Format.__gt__", "skbio.io.registry.Format.__hash__", "skbio.io.registry.Format.__le__", "skbio.io.registry.Format.__lt__", "skbio.io.registry.Format.__ne__", "skbio.io.registry.Format.__str__", "skbio.io.registry.Format.reader", "skbio.io.registry.Format.sniffer", "skbio.io.registry.Format.writer", "skbio.io.registry.IORegistry", "skbio.io.registry.IORegistry.__eq__", "skbio.io.registry.IORegistry.__ge__", "skbio.io.registry.IORegistry.__getstate__", "skbio.io.registry.IORegistry.__gt__", "skbio.io.registry.IORegistry.__hash__", "skbio.io.registry.IORegistry.__le__", "skbio.io.registry.IORegistry.__lt__", "skbio.io.registry.IORegistry.__ne__", "skbio.io.registry.IORegistry.__str__", "skbio.io.registry.IORegistry.add_format", "skbio.io.registry.IORegistry.create_format", "skbio.io.registry.IORegistry.get_reader", "skbio.io.registry.IORegistry.get_sniffer", "skbio.io.registry.IORegistry.get_writer", "skbio.io.registry.IORegistry.list_read_formats", "skbio.io.registry.IORegistry.list_write_formats", "skbio.io.registry.IORegistry.monkey_patch", "skbio.io.registry.IORegistry.read", "skbio.io.registry.IORegistry.sniff", "skbio.io.registry.IORegistry.write", "skbio.io.registry.InvalidRegistrationError", "skbio.io.registry.create_format", "skbio.io.registry.read", "skbio.io.registry.sniff", "skbio.io.registry.write", "I/O utils (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.util</span></code>)", "skbio.io.util.open", "skbio.io.util.open_file", "skbio.io.util.open_files", "skbio.metadata.Interval", "skbio.metadata.Interval.__eq__", "skbio.metadata.Interval.__ge__", "skbio.metadata.Interval.__getstate__", "skbio.metadata.Interval.__gt__", "skbio.metadata.Interval.__le__", "skbio.metadata.Interval.__lt__", "skbio.metadata.Interval.__ne__", "skbio.metadata.Interval.__str__", "skbio.metadata.Interval.drop", "skbio.metadata.IntervalMetadata", "skbio.metadata.IntervalMetadata.__copy__", "skbio.metadata.IntervalMetadata.__deepcopy__", "skbio.metadata.IntervalMetadata.__eq__", "skbio.metadata.IntervalMetadata.__ge__", "skbio.metadata.IntervalMetadata.__getstate__", "skbio.metadata.IntervalMetadata.__gt__", "skbio.metadata.IntervalMetadata.__le__", "skbio.metadata.IntervalMetadata.__lt__", "skbio.metadata.IntervalMetadata.__ne__", "skbio.metadata.IntervalMetadata.__str__", "skbio.metadata.IntervalMetadata.add", "skbio.metadata.IntervalMetadata.concat", "skbio.metadata.IntervalMetadata.drop", "skbio.metadata.IntervalMetadata.merge", "skbio.metadata.IntervalMetadata.query", "skbio.metadata.IntervalMetadata.read", "skbio.metadata.IntervalMetadata.sort", "skbio.metadata.IntervalMetadata.write", "skbio.sequence.DNA", "skbio.sequence.DNA.__bool__", "skbio.sequence.DNA.__contains__", "skbio.sequence.DNA.__copy__", "skbio.sequence.DNA.__deepcopy__", "skbio.sequence.DNA.__eq__", "skbio.sequence.DNA.__ge__", "skbio.sequence.DNA.__getitem__", "skbio.sequence.DNA.__getstate__", "skbio.sequence.DNA.__gt__", "skbio.sequence.DNA.__iter__", "skbio.sequence.DNA.__le__", "skbio.sequence.DNA.__len__", "skbio.sequence.DNA.__lt__", "skbio.sequence.DNA.__ne__", "skbio.sequence.DNA.__reversed__", "skbio.sequence.DNA.__str__", "skbio.sequence.DNA.complement", "skbio.sequence.DNA.concat", "skbio.sequence.DNA.count", "skbio.sequence.DNA.definites", "skbio.sequence.DNA.degap", "skbio.sequence.DNA.degenerates", "skbio.sequence.DNA.distance", "skbio.sequence.DNA.expand_degenerates", "skbio.sequence.DNA.find_motifs", "skbio.sequence.DNA.find_with_regex", "skbio.sequence.DNA.frequencies", "skbio.sequence.DNA.gaps", "skbio.sequence.DNA.gc_content", "skbio.sequence.DNA.gc_frequency", "skbio.sequence.DNA.has_definites", "skbio.sequence.DNA.has_degenerates", "skbio.sequence.DNA.has_gaps", "skbio.sequence.DNA.has_interval_metadata", "skbio.sequence.DNA.has_metadata", "skbio.sequence.DNA.has_nondegenerates", "skbio.sequence.DNA.has_positional_metadata", "skbio.sequence.DNA.index", "skbio.sequence.DNA.is_reverse_complement", "skbio.sequence.DNA.iter_contiguous", "skbio.sequence.DNA.iter_kmers", "skbio.sequence.DNA.kmer_frequencies", "skbio.sequence.DNA.lowercase", "skbio.sequence.DNA.match_frequency", "skbio.sequence.DNA.matches", "skbio.sequence.DNA.mismatch_frequency", "skbio.sequence.DNA.mismatches", "skbio.sequence.DNA.nondegenerates", "skbio.sequence.DNA.read", "skbio.sequence.DNA.replace", "skbio.sequence.DNA.reverse_complement", "skbio.sequence.DNA.to_definites", "skbio.sequence.DNA.to_indices", "skbio.sequence.DNA.to_regex", "skbio.sequence.DNA.transcribe", "skbio.sequence.DNA.translate", "skbio.sequence.DNA.translate_six_frames", "skbio.sequence.DNA.write", "skbio.sequence.GeneticCode", "skbio.sequence.GeneticCode.__eq__", "skbio.sequence.GeneticCode.__ge__", "skbio.sequence.GeneticCode.__getstate__", "skbio.sequence.GeneticCode.__gt__", "skbio.sequence.GeneticCode.__le__", "skbio.sequence.GeneticCode.__lt__", "skbio.sequence.GeneticCode.__ne__", "skbio.sequence.GeneticCode.__str__", "skbio.sequence.GeneticCode.from_ncbi", "skbio.sequence.GeneticCode.translate", "skbio.sequence.GeneticCode.translate_six_frames", "skbio.sequence.GrammaredSequence", "skbio.sequence.GrammaredSequence.__bool__", "skbio.sequence.GrammaredSequence.__contains__", "skbio.sequence.GrammaredSequence.__copy__", "skbio.sequence.GrammaredSequence.__deepcopy__", "skbio.sequence.GrammaredSequence.__eq__", "skbio.sequence.GrammaredSequence.__ge__", "skbio.sequence.GrammaredSequence.__getitem__", "skbio.sequence.GrammaredSequence.__getstate__", "skbio.sequence.GrammaredSequence.__gt__", "skbio.sequence.GrammaredSequence.__iter__", "skbio.sequence.GrammaredSequence.__le__", "skbio.sequence.GrammaredSequence.__len__", "skbio.sequence.GrammaredSequence.__lt__", "skbio.sequence.GrammaredSequence.__ne__", "skbio.sequence.GrammaredSequence.__reversed__", "skbio.sequence.GrammaredSequence.__str__", "skbio.sequence.GrammaredSequence.concat", "skbio.sequence.GrammaredSequence.count", "skbio.sequence.GrammaredSequence.definites", "skbio.sequence.GrammaredSequence.degap", "skbio.sequence.GrammaredSequence.degenerates", "skbio.sequence.GrammaredSequence.distance", "skbio.sequence.GrammaredSequence.expand_degenerates", "skbio.sequence.GrammaredSequence.find_motifs", "skbio.sequence.GrammaredSequence.find_with_regex", "skbio.sequence.GrammaredSequence.frequencies", "skbio.sequence.GrammaredSequence.gaps", "skbio.sequence.GrammaredSequence.has_definites", "skbio.sequence.GrammaredSequence.has_degenerates", "skbio.sequence.GrammaredSequence.has_gaps", "skbio.sequence.GrammaredSequence.has_interval_metadata", "skbio.sequence.GrammaredSequence.has_metadata", "skbio.sequence.GrammaredSequence.has_nondegenerates", "skbio.sequence.GrammaredSequence.has_positional_metadata", "skbio.sequence.GrammaredSequence.index", "skbio.sequence.GrammaredSequence.iter_contiguous", "skbio.sequence.GrammaredSequence.iter_kmers", "skbio.sequence.GrammaredSequence.kmer_frequencies", "skbio.sequence.GrammaredSequence.lowercase", "skbio.sequence.GrammaredSequence.match_frequency", "skbio.sequence.GrammaredSequence.matches", "skbio.sequence.GrammaredSequence.mismatch_frequency", "skbio.sequence.GrammaredSequence.mismatches", "skbio.sequence.GrammaredSequence.nondegenerates", "skbio.sequence.GrammaredSequence.read", "skbio.sequence.GrammaredSequence.replace", "skbio.sequence.GrammaredSequence.to_definites", "skbio.sequence.GrammaredSequence.to_indices", "skbio.sequence.GrammaredSequence.to_regex", "skbio.sequence.GrammaredSequence.write", "skbio.sequence.Protein", "skbio.sequence.Protein.__bool__", "skbio.sequence.Protein.__contains__", "skbio.sequence.Protein.__copy__", "skbio.sequence.Protein.__deepcopy__", "skbio.sequence.Protein.__eq__", "skbio.sequence.Protein.__ge__", "skbio.sequence.Protein.__getitem__", "skbio.sequence.Protein.__getstate__", "skbio.sequence.Protein.__gt__", "skbio.sequence.Protein.__iter__", "skbio.sequence.Protein.__le__", "skbio.sequence.Protein.__len__", "skbio.sequence.Protein.__lt__", "skbio.sequence.Protein.__ne__", "skbio.sequence.Protein.__reversed__", "skbio.sequence.Protein.__str__", "skbio.sequence.Protein.concat", "skbio.sequence.Protein.count", "skbio.sequence.Protein.definites", "skbio.sequence.Protein.degap", "skbio.sequence.Protein.degenerates", "skbio.sequence.Protein.distance", "skbio.sequence.Protein.expand_degenerates", "skbio.sequence.Protein.find_motifs", "skbio.sequence.Protein.find_with_regex", "skbio.sequence.Protein.frequencies", "skbio.sequence.Protein.gaps", "skbio.sequence.Protein.has_definites", "skbio.sequence.Protein.has_degenerates", "skbio.sequence.Protein.has_gaps", "skbio.sequence.Protein.has_interval_metadata", "skbio.sequence.Protein.has_metadata", "skbio.sequence.Protein.has_nondegenerates", "skbio.sequence.Protein.has_positional_metadata", "skbio.sequence.Protein.has_stops", "skbio.sequence.Protein.index", "skbio.sequence.Protein.iter_contiguous", "skbio.sequence.Protein.iter_kmers", "skbio.sequence.Protein.kmer_frequencies", "skbio.sequence.Protein.lowercase", "skbio.sequence.Protein.match_frequency", "skbio.sequence.Protein.matches", "skbio.sequence.Protein.mismatch_frequency", "skbio.sequence.Protein.mismatches", "skbio.sequence.Protein.nondegenerates", "skbio.sequence.Protein.read", "skbio.sequence.Protein.replace", "skbio.sequence.Protein.stops", "skbio.sequence.Protein.to_definites", "skbio.sequence.Protein.to_indices", "skbio.sequence.Protein.to_regex", "skbio.sequence.Protein.write", "skbio.sequence.RNA", "skbio.sequence.RNA.__bool__", "skbio.sequence.RNA.__contains__", "skbio.sequence.RNA.__copy__", "skbio.sequence.RNA.__deepcopy__", "skbio.sequence.RNA.__eq__", "skbio.sequence.RNA.__ge__", "skbio.sequence.RNA.__getitem__", "skbio.sequence.RNA.__getstate__", "skbio.sequence.RNA.__gt__", "skbio.sequence.RNA.__iter__", "skbio.sequence.RNA.__le__", "skbio.sequence.RNA.__len__", "skbio.sequence.RNA.__lt__", "skbio.sequence.RNA.__ne__", "skbio.sequence.RNA.__reversed__", "skbio.sequence.RNA.__str__", "skbio.sequence.RNA.complement", "skbio.sequence.RNA.concat", "skbio.sequence.RNA.count", "skbio.sequence.RNA.definites", "skbio.sequence.RNA.degap", "skbio.sequence.RNA.degenerates", "skbio.sequence.RNA.distance", "skbio.sequence.RNA.expand_degenerates", "skbio.sequence.RNA.find_motifs", "skbio.sequence.RNA.find_with_regex", "skbio.sequence.RNA.frequencies", "skbio.sequence.RNA.gaps", "skbio.sequence.RNA.gc_content", "skbio.sequence.RNA.gc_frequency", "skbio.sequence.RNA.has_definites", "skbio.sequence.RNA.has_degenerates", "skbio.sequence.RNA.has_gaps", "skbio.sequence.RNA.has_interval_metadata", "skbio.sequence.RNA.has_metadata", "skbio.sequence.RNA.has_nondegenerates", "skbio.sequence.RNA.has_positional_metadata", "skbio.sequence.RNA.index", "skbio.sequence.RNA.is_reverse_complement", "skbio.sequence.RNA.iter_contiguous", "skbio.sequence.RNA.iter_kmers", "skbio.sequence.RNA.kmer_frequencies", "skbio.sequence.RNA.lowercase", "skbio.sequence.RNA.match_frequency", "skbio.sequence.RNA.matches", "skbio.sequence.RNA.mismatch_frequency", "skbio.sequence.RNA.mismatches", "skbio.sequence.RNA.nondegenerates", "skbio.sequence.RNA.read", "skbio.sequence.RNA.replace", "skbio.sequence.RNA.reverse_complement", "skbio.sequence.RNA.reverse_transcribe", "skbio.sequence.RNA.to_definites", "skbio.sequence.RNA.to_indices", "skbio.sequence.RNA.to_regex", "skbio.sequence.RNA.translate", "skbio.sequence.RNA.translate_six_frames", "skbio.sequence.RNA.write", "skbio.sequence.Sequence", "skbio.sequence.Sequence.__bool__", "skbio.sequence.Sequence.__contains__", "skbio.sequence.Sequence.__copy__", "skbio.sequence.Sequence.__deepcopy__", "skbio.sequence.Sequence.__eq__", "skbio.sequence.Sequence.__ge__", "skbio.sequence.Sequence.__getitem__", "skbio.sequence.Sequence.__getstate__", "skbio.sequence.Sequence.__gt__", "skbio.sequence.Sequence.__iter__", "skbio.sequence.Sequence.__le__", "skbio.sequence.Sequence.__len__", "skbio.sequence.Sequence.__lt__", "skbio.sequence.Sequence.__ne__", "skbio.sequence.Sequence.__reversed__", "skbio.sequence.Sequence.__str__", "skbio.sequence.Sequence.concat", "skbio.sequence.Sequence.count", "skbio.sequence.Sequence.distance", "skbio.sequence.Sequence.find_with_regex", "skbio.sequence.Sequence.frequencies", "skbio.sequence.Sequence.has_interval_metadata", "skbio.sequence.Sequence.has_metadata", "skbio.sequence.Sequence.has_positional_metadata", "skbio.sequence.Sequence.index", "skbio.sequence.Sequence.iter_contiguous", "skbio.sequence.Sequence.iter_kmers", "skbio.sequence.Sequence.kmer_frequencies", "skbio.sequence.Sequence.lowercase", "skbio.sequence.Sequence.match_frequency", "skbio.sequence.Sequence.matches", "skbio.sequence.Sequence.mismatch_frequency", "skbio.sequence.Sequence.mismatches", "skbio.sequence.Sequence.read", "skbio.sequence.Sequence.replace", "skbio.sequence.Sequence.to_indices", "skbio.sequence.Sequence.write", "skbio.sequence.SubstitutionMatrix", "skbio.sequence.SubstitutionMatrix.__contains__", "skbio.sequence.SubstitutionMatrix.__eq__", "skbio.sequence.SubstitutionMatrix.__ge__", "skbio.sequence.SubstitutionMatrix.__getitem__", "skbio.sequence.SubstitutionMatrix.__getstate__", "skbio.sequence.SubstitutionMatrix.__gt__", "skbio.sequence.SubstitutionMatrix.__le__", "skbio.sequence.SubstitutionMatrix.__lt__", "skbio.sequence.SubstitutionMatrix.__ne__", "skbio.sequence.SubstitutionMatrix.__str__", "skbio.sequence.SubstitutionMatrix.between", "skbio.sequence.SubstitutionMatrix.by_name", "skbio.sequence.SubstitutionMatrix.copy", "skbio.sequence.SubstitutionMatrix.filter", "skbio.sequence.SubstitutionMatrix.from_dict", "skbio.sequence.SubstitutionMatrix.from_iterable", "skbio.sequence.SubstitutionMatrix.get_names", "skbio.sequence.SubstitutionMatrix.identity", "skbio.sequence.SubstitutionMatrix.index", "skbio.sequence.SubstitutionMatrix.plot", "skbio.sequence.SubstitutionMatrix.read", "skbio.sequence.SubstitutionMatrix.redundant_form", "skbio.sequence.SubstitutionMatrix.to_data_frame", "skbio.sequence.SubstitutionMatrix.to_dict", "skbio.sequence.SubstitutionMatrix.transpose", "skbio.sequence.SubstitutionMatrix.within", "skbio.sequence.SubstitutionMatrix.write", "Sequence distance metrics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence.distance</span></code>)", "skbio.sequence.distance.hamming", "skbio.sequence.distance.kmer_distance", "Composition Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.composition</span></code>)", "skbio.stats.composition.alr", "skbio.stats.composition.alr_inv", "skbio.stats.composition.ancom", "skbio.stats.composition.centralize", "skbio.stats.composition.closure", "skbio.stats.composition.clr", "skbio.stats.composition.clr_inv", "skbio.stats.composition.dirmult_ttest", "skbio.stats.composition.ilr", "skbio.stats.composition.ilr_inv", "skbio.stats.composition.inner", "skbio.stats.composition.multi_replace", "skbio.stats.composition.multiplicative_replacement", "skbio.stats.composition.pairwise_vlr", "skbio.stats.composition.perturb", "skbio.stats.composition.perturb_inv", "skbio.stats.composition.power", "skbio.stats.composition.sbp_basis", "skbio.stats.composition.tree_basis", "skbio.stats.composition.vlr", "Distance matrices and distance-based statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.distance</span></code>)", "skbio.stats.distance.DissimilarityMatrix", "skbio.stats.distance.DissimilarityMatrix.__contains__", "skbio.stats.distance.DissimilarityMatrix.__eq__", "skbio.stats.distance.DissimilarityMatrix.__ge__", "skbio.stats.distance.DissimilarityMatrix.__getitem__", "skbio.stats.distance.DissimilarityMatrix.__getstate__", "skbio.stats.distance.DissimilarityMatrix.__gt__", "skbio.stats.distance.DissimilarityMatrix.__le__", "skbio.stats.distance.DissimilarityMatrix.__lt__", "skbio.stats.distance.DissimilarityMatrix.__ne__", "skbio.stats.distance.DissimilarityMatrix.__str__", "skbio.stats.distance.DissimilarityMatrix.between", "skbio.stats.distance.DissimilarityMatrix.copy", "skbio.stats.distance.DissimilarityMatrix.filter", "skbio.stats.distance.DissimilarityMatrix.from_iterable", "skbio.stats.distance.DissimilarityMatrix.index", "skbio.stats.distance.DissimilarityMatrix.plot", "skbio.stats.distance.DissimilarityMatrix.read", "skbio.stats.distance.DissimilarityMatrix.redundant_form", "skbio.stats.distance.DissimilarityMatrix.to_data_frame", "skbio.stats.distance.DissimilarityMatrix.transpose", "skbio.stats.distance.DissimilarityMatrix.within", "skbio.stats.distance.DissimilarityMatrix.write", "skbio.stats.distance.DissimilarityMatrixError", "skbio.stats.distance.DistanceMatrix", "skbio.stats.distance.DistanceMatrix.__contains__", "skbio.stats.distance.DistanceMatrix.__eq__", "skbio.stats.distance.DistanceMatrix.__ge__", "skbio.stats.distance.DistanceMatrix.__getitem__", "skbio.stats.distance.DistanceMatrix.__getstate__", "skbio.stats.distance.DistanceMatrix.__gt__", "skbio.stats.distance.DistanceMatrix.__le__", "skbio.stats.distance.DistanceMatrix.__lt__", "skbio.stats.distance.DistanceMatrix.__ne__", "skbio.stats.distance.DistanceMatrix.__str__", "skbio.stats.distance.DistanceMatrix.between", "skbio.stats.distance.DistanceMatrix.condensed_form", "skbio.stats.distance.DistanceMatrix.copy", "skbio.stats.distance.DistanceMatrix.filter", "skbio.stats.distance.DistanceMatrix.from_iterable", "skbio.stats.distance.DistanceMatrix.index", "skbio.stats.distance.DistanceMatrix.permute", "skbio.stats.distance.DistanceMatrix.plot", "skbio.stats.distance.DistanceMatrix.read", "skbio.stats.distance.DistanceMatrix.redundant_form", "skbio.stats.distance.DistanceMatrix.to_data_frame", "skbio.stats.distance.DistanceMatrix.to_series", "skbio.stats.distance.DistanceMatrix.transpose", "skbio.stats.distance.DistanceMatrix.within", "skbio.stats.distance.DistanceMatrix.write", "skbio.stats.distance.DistanceMatrixError", "skbio.stats.distance.MissingIDError", "skbio.stats.distance.anosim", "skbio.stats.distance.bioenv", "skbio.stats.distance.mantel", "skbio.stats.distance.permanova", "skbio.stats.distance.permdisp", "skbio.stats.distance.pwmantel", "skbio.stats.distance.randdm", "Evolutionary statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.evolve</span></code>)", "skbio.stats.evolve.hommola_cospeciation", "Gradient analyses (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.gradient</span></code>)", "skbio.stats.gradient.AverageGradientANOVA", "skbio.stats.gradient.AverageGradientANOVA.__eq__", "skbio.stats.gradient.AverageGradientANOVA.__ge__", "skbio.stats.gradient.AverageGradientANOVA.__getstate__", "skbio.stats.gradient.AverageGradientANOVA.__gt__", "skbio.stats.gradient.AverageGradientANOVA.__hash__", "skbio.stats.gradient.AverageGradientANOVA.__le__", "skbio.stats.gradient.AverageGradientANOVA.__lt__", "skbio.stats.gradient.AverageGradientANOVA.__ne__", "skbio.stats.gradient.AverageGradientANOVA.__str__", "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "skbio.stats.gradient.CategoryResults", "skbio.stats.gradient.CategoryResults.__eq__", "skbio.stats.gradient.CategoryResults.__ge__", "skbio.stats.gradient.CategoryResults.__getstate__", "skbio.stats.gradient.CategoryResults.__gt__", "skbio.stats.gradient.CategoryResults.__hash__", "skbio.stats.gradient.CategoryResults.__le__", "skbio.stats.gradient.CategoryResults.__lt__", "skbio.stats.gradient.CategoryResults.__ne__", "skbio.stats.gradient.CategoryResults.__str__", "skbio.stats.gradient.CategoryResults.to_files", "skbio.stats.gradient.FirstDifferenceGradientANOVA", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVA", "skbio.stats.gradient.GradientANOVA.__eq__", "skbio.stats.gradient.GradientANOVA.__ge__", "skbio.stats.gradient.GradientANOVA.__getstate__", "skbio.stats.gradient.GradientANOVA.__gt__", "skbio.stats.gradient.GradientANOVA.__hash__", "skbio.stats.gradient.GradientANOVA.__le__", "skbio.stats.gradient.GradientANOVA.__lt__", "skbio.stats.gradient.GradientANOVA.__ne__", "skbio.stats.gradient.GradientANOVA.__str__", "skbio.stats.gradient.GradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVAResults", "skbio.stats.gradient.GradientANOVAResults.__eq__", "skbio.stats.gradient.GradientANOVAResults.__ge__", "skbio.stats.gradient.GradientANOVAResults.__getstate__", "skbio.stats.gradient.GradientANOVAResults.__gt__", "skbio.stats.gradient.GradientANOVAResults.__hash__", "skbio.stats.gradient.GradientANOVAResults.__le__", "skbio.stats.gradient.GradientANOVAResults.__lt__", "skbio.stats.gradient.GradientANOVAResults.__ne__", "skbio.stats.gradient.GradientANOVAResults.__str__", "skbio.stats.gradient.GradientANOVAResults.to_files", "skbio.stats.gradient.GroupResults", "skbio.stats.gradient.GroupResults.__eq__", "skbio.stats.gradient.GroupResults.__ge__", "skbio.stats.gradient.GroupResults.__getstate__", "skbio.stats.gradient.GroupResults.__gt__", "skbio.stats.gradient.GroupResults.__hash__", "skbio.stats.gradient.GroupResults.__le__", "skbio.stats.gradient.GroupResults.__lt__", "skbio.stats.gradient.GroupResults.__ne__", "skbio.stats.gradient.GroupResults.__str__", "skbio.stats.gradient.GroupResults.to_files", "skbio.stats.gradient.TrajectoryGradientANOVA", "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__", "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "skbio.stats.gradient.WindowDifferenceGradientANOVA", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "skbio.stats.isubsample", "Ordination methods (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.ordination</span></code>)", "skbio.stats.ordination.OrdinationResults", "skbio.stats.ordination.OrdinationResults.__eq__", "skbio.stats.ordination.OrdinationResults.__ge__", "skbio.stats.ordination.OrdinationResults.__getstate__", "skbio.stats.ordination.OrdinationResults.__gt__", "skbio.stats.ordination.OrdinationResults.__hash__", "skbio.stats.ordination.OrdinationResults.__le__", "skbio.stats.ordination.OrdinationResults.__lt__", "skbio.stats.ordination.OrdinationResults.__ne__", "skbio.stats.ordination.OrdinationResults.__str__", "skbio.stats.ordination.OrdinationResults.plot", "skbio.stats.ordination.OrdinationResults.read", "skbio.stats.ordination.OrdinationResults.write", "skbio.stats.ordination.ca", "skbio.stats.ordination.cca", "skbio.stats.ordination.corr", "skbio.stats.ordination.e_matrix", "skbio.stats.ordination.f_matrix", "skbio.stats.ordination.mean_and_std", "skbio.stats.ordination.pcoa", "skbio.stats.ordination.pcoa_biplot", "skbio.stats.ordination.rda", "skbio.stats.ordination.scale", "skbio.stats.ordination.svd_rank", "Empirical Power Estimation (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.power</span></code>)", "skbio.stats.power.confidence_bound", "skbio.stats.power.paired_subsamples", "skbio.stats.power.subsample_paired_power", "skbio.stats.power.subsample_power", "skbio.stats.subsample_counts", "skbio.tree.DuplicateNodeError", "skbio.tree.MissingNodeError", "skbio.tree.NoLengthError", "skbio.tree.NoParentError", "skbio.tree.TreeError", "skbio.tree.TreeNode", "skbio.tree.TreeNode.__copy__", "skbio.tree.TreeNode.__deepcopy__", "skbio.tree.TreeNode.__eq__", "skbio.tree.TreeNode.__ge__", "skbio.tree.TreeNode.__getitem__", "skbio.tree.TreeNode.__getstate__", "skbio.tree.TreeNode.__gt__", "skbio.tree.TreeNode.__hash__", "skbio.tree.TreeNode.__iter__", "skbio.tree.TreeNode.__le__", "skbio.tree.TreeNode.__len__", "skbio.tree.TreeNode.__lt__", "skbio.tree.TreeNode.__ne__", "skbio.tree.TreeNode.__str__", "skbio.tree.TreeNode.accumulate_to_ancestor", "skbio.tree.TreeNode.ancestors", "skbio.tree.TreeNode.append", "skbio.tree.TreeNode.ascii_art", "skbio.tree.TreeNode.assign_ids", "skbio.tree.TreeNode.assign_supports", "skbio.tree.TreeNode.bifurcate", "skbio.tree.TreeNode.cache_attr", "skbio.tree.TreeNode.compare_rfd", "skbio.tree.TreeNode.compare_subsets", "skbio.tree.TreeNode.compare_tip_distances", "skbio.tree.TreeNode.copy", "skbio.tree.TreeNode.count", "skbio.tree.TreeNode.create_caches", "skbio.tree.TreeNode.deepcopy", "skbio.tree.TreeNode.descending_branch_length", "skbio.tree.TreeNode.distance", "skbio.tree.TreeNode.extend", "skbio.tree.TreeNode.find", "skbio.tree.TreeNode.find_all", "skbio.tree.TreeNode.find_by_func", "skbio.tree.TreeNode.find_by_id", "skbio.tree.TreeNode.from_linkage_matrix", "skbio.tree.TreeNode.from_taxdump", "skbio.tree.TreeNode.from_taxonomy", "skbio.tree.TreeNode.get_max_distance", "skbio.tree.TreeNode.has_children", "skbio.tree.TreeNode.index_tree", "skbio.tree.TreeNode.invalidate_caches", "skbio.tree.TreeNode.is_root", "skbio.tree.TreeNode.is_tip", "skbio.tree.TreeNode.lca", "skbio.tree.TreeNode.levelorder", "skbio.tree.TreeNode.lowest_common_ancestor", "skbio.tree.TreeNode.neighbors", "skbio.tree.TreeNode.non_tips", "skbio.tree.TreeNode.observed_node_counts", "skbio.tree.TreeNode.pop", "skbio.tree.TreeNode.postorder", "skbio.tree.TreeNode.pre_and_postorder", "skbio.tree.TreeNode.preorder", "skbio.tree.TreeNode.prune", "skbio.tree.TreeNode.read", "skbio.tree.TreeNode.remove", "skbio.tree.TreeNode.remove_deleted", "skbio.tree.TreeNode.root", "skbio.tree.TreeNode.root_at", "skbio.tree.TreeNode.root_at_midpoint", "skbio.tree.TreeNode.shear", "skbio.tree.TreeNode.shuffle", "skbio.tree.TreeNode.siblings", "skbio.tree.TreeNode.subset", "skbio.tree.TreeNode.subsets", "skbio.tree.TreeNode.subtree", "skbio.tree.TreeNode.tip_tip_distances", "skbio.tree.TreeNode.tips", "skbio.tree.TreeNode.to_array", "skbio.tree.TreeNode.to_taxonomy", "skbio.tree.TreeNode.traverse", "skbio.tree.TreeNode.unpack", "skbio.tree.TreeNode.unpack_by_func", "skbio.tree.TreeNode.unrooted_copy", "skbio.tree.TreeNode.unrooted_deepcopy", "skbio.tree.TreeNode.write", "skbio.tree.majority_rule", "skbio.tree.nj", "skbio.util.EfficiencyWarning", "skbio.util.RepresentationWarning", "skbio.util.assert_data_frame_almost_equal", "skbio.util.assert_ordination_results_equal", "skbio.util.cardinal_to_ordinal", "skbio.util.classproperty", "skbio.util.classproperty.__delete__", "skbio.util.classproperty.__eq__", "skbio.util.classproperty.__ge__", "skbio.util.classproperty.__get__", "skbio.util.classproperty.__getstate__", "skbio.util.classproperty.__gt__", "skbio.util.classproperty.__hash__", "skbio.util.classproperty.__le__", "skbio.util.classproperty.__lt__", "skbio.util.classproperty.__ne__", "skbio.util.classproperty.__set__", "skbio.util.classproperty.__set_name__", "skbio.util.classproperty.__str__", "skbio.util.classproperty.deleter", "skbio.util.classproperty.getter", "skbio.util.classproperty.setter", "skbio.util.find_duplicates", "skbio.util.get_data_path", "skbio.util.safe_md5", "skbio.workflow.Workflow", "skbio.workflow.Workflow.__call__", "skbio.workflow.Workflow.__eq__", "skbio.workflow.Workflow.__ge__", "skbio.workflow.Workflow.__getstate__", "skbio.workflow.Workflow.__gt__", "skbio.workflow.Workflow.__hash__", "skbio.workflow.Workflow.__le__", "skbio.workflow.Workflow.__lt__", "skbio.workflow.Workflow.__ne__", "skbio.workflow.Workflow.__str__", "skbio.workflow.Workflow.initialize_state", "skbio.workflow.method", "skbio.workflow.method.__call__", "skbio.workflow.method.__eq__", "skbio.workflow.method.__ge__", "skbio.workflow.method.__getstate__", "skbio.workflow.method.__gt__", "skbio.workflow.method.__hash__", "skbio.workflow.method.__le__", "skbio.workflow.method.__lt__", "skbio.workflow.method.__ne__", "skbio.workflow.method.__str__", "skbio.workflow.requires", "skbio.workflow.requires.__call__", "skbio.workflow.requires.__eq__", "skbio.workflow.requires.__ge__", "skbio.workflow.requires.__getstate__", "skbio.workflow.requires.__gt__", "skbio.workflow.requires.__hash__", "skbio.workflow.requires.__le__", "skbio.workflow.requires.__lt__", "skbio.workflow.requires.__ne__", "skbio.workflow.requires.__str__", "Home", "File I/O (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io</span></code>)", "Metadata (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.metadata</span></code>)", "Sequences (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence</span></code>)", "Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats</span></code>)", "Tree representations (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.tree</span></code>)", "Utility functionality (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.util</span></code>)", "Constructing workflows (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.workflow</span></code>)"], "terms": {"thi": [0, 1, 16, 30, 31, 32, 33, 35, 40, 42, 44, 45, 46, 47, 48, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 78, 79, 80, 83, 84, 85, 90, 93, 94, 103, 104, 105, 106, 107, 108, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 160, 161, 162, 174, 182, 185, 187, 189, 190, 191, 193, 194, 200, 202, 203, 204, 205, 206, 212, 214, 215, 216, 217, 218, 219, 221, 224, 225, 226, 227, 229, 232, 234, 236, 237, 240, 241, 245, 249, 251, 252, 260, 261, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 275, 276, 279, 280, 281, 290, 291, 292, 293, 295, 296, 297, 298, 300, 303, 305, 307, 308, 310, 311, 315, 319, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 341, 342, 343, 346, 347, 348, 349, 351, 354, 356, 358, 359, 361, 362, 366, 370, 380, 381, 382, 383, 385, 386, 387, 388, 390, 391, 394, 395, 396, 399, 400, 401, 402, 404, 407, 409, 411, 412, 415, 416, 420, 424, 426, 427, 435, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447, 448, 451, 452, 454, 455, 456, 458, 459, 460, 461, 463, 466, 468, 470, 471, 473, 474, 475, 477, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 515, 516, 517, 521, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 546, 549, 551, 564, 565, 566, 569, 571, 573, 575, 588, 590, 591, 592, 593, 596, 599, 600, 601, 603, 605, 606, 607, 608, 697, 698, 709, 710, 711, 713, 718, 719, 720, 723, 725, 726, 727, 734, 750, 752, 754, 756, 758, 759, 762, 764, 765, 767, 769, 770, 772, 776, 783, 787, 790, 791, 793, 795, 796, 798, 799, 800, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 838, 839, 840, 841, 851, 863, 875, 876, 877, 878, 879, 880, 881], "modul": [0, 1, 146, 148, 189, 522, 525, 608, 698, 723, 838, 839, 876, 877, 879, 881], "provid": [0, 1, 16, 28, 45, 47, 48, 55, 56, 61, 64, 66, 68, 78, 83, 94, 103, 104, 105, 106, 107, 112, 132, 136, 137, 141, 143, 145, 146, 147, 148, 160, 162, 181, 182, 186, 187, 189, 191, 219, 227, 249, 262, 265, 271, 275, 298, 319, 329, 332, 338, 341, 349, 370, 381, 384, 390, 394, 397, 402, 424, 437, 440, 446, 451, 456, 461, 477, 482, 485, 490, 492, 494, 510, 515, 520, 525, 533, 546, 547, 561, 564, 568, 586, 590, 595, 599, 600, 601, 602, 603, 605, 608, 642, 697, 699, 709, 710, 714, 723, 725, 726, 756, 764, 772, 785, 791, 795, 798, 805, 813, 814, 841, 875, 876, 877, 879, 880, 881], "comput": [0, 1, 46, 47, 50, 69, 72, 78, 85, 96, 102, 103, 104, 105, 106, 107, 108, 111, 203, 245, 249, 315, 319, 366, 370, 420, 424, 475, 477, 510, 522, 523, 524, 528, 533, 539, 543, 544, 545, 546, 561, 586, 599, 600, 601, 602, 603, 604, 607, 608, 609, 619, 641, 642, 652, 653, 664, 675, 685, 686, 696, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 765, 801, 803, 813, 839, 877, 879], "manipul": [0, 51, 52, 145, 257, 259, 325, 327, 376, 378, 432, 434, 456, 479, 480, 525, 546], "sequenc": [0, 1, 2, 16, 28, 29, 31, 32, 33, 38, 40, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 132, 133, 134, 135, 137, 138, 139, 144, 147, 193, 203, 215, 533, 547, 605, 697, 727, 874, 875, 881], "dna": [0, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 48, 49, 50, 52, 53, 54, 56, 57, 58, 61, 64, 66, 134, 135, 136, 137, 138, 139, 143, 144, 146, 281, 293, 310, 312, 313, 314, 316, 317, 320, 321, 322, 323, 326, 327, 329, 337, 341, 342, 361, 363, 364, 365, 367, 368, 371, 372, 373, 374, 377, 378, 381, 389, 394, 395, 397, 414, 415, 417, 418, 419, 421, 422, 425, 426, 427, 428, 429, 430, 433, 434, 436, 437, 445, 448, 449, 451, 452, 456, 473, 480, 482, 492, 547, 875, 877], "rna": [0, 28, 33, 61, 64, 66, 134, 135, 136, 137, 138, 143, 144, 146, 222, 240, 277, 278, 279, 281, 291, 292, 293, 310, 361, 456, 473, 533, 877], "protein": [0, 16, 28, 47, 60, 62, 65, 66, 132, 134, 135, 136, 137, 138, 143, 144, 146, 262, 275, 278, 279, 281, 291, 292, 293, 329, 341, 437, 451, 453, 454, 456, 482, 492, 506, 726, 877], "can": [0, 1, 16, 28, 53, 56, 60, 61, 62, 66, 67, 74, 78, 79, 94, 103, 105, 106, 107, 109, 110, 111, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 150, 190, 193, 202, 203, 218, 240, 245, 247, 262, 272, 310, 315, 317, 329, 339, 361, 366, 368, 381, 391, 415, 420, 422, 437, 447, 456, 473, 475, 482, 491, 494, 498, 506, 522, 525, 528, 533, 543, 546, 547, 551, 571, 575, 599, 600, 601, 603, 604, 605, 608, 698, 709, 712, 717, 718, 719, 720, 723, 725, 726, 727, 734, 755, 757, 765, 795, 798, 805, 813, 814, 815, 819, 820, 840, 863, 877, 879, 881], "well": [0, 137, 145, 148, 456, 533, 546, 547, 600, 602, 603, 607, 699, 713, 813, 875, 879, 880], "custom": [0, 1, 147, 222, 245, 281, 282, 293, 315, 344, 366, 397, 420, 475, 709], "alphabet": [0, 57, 67, 109, 110, 132, 136, 222, 275, 281, 293, 341, 344, 394, 397, 451, 456, 492, 494, 506, 509, 512, 523, 877], "load": [0, 136, 137, 142, 144, 145, 506, 528, 546, 547, 599, 600, 603, 604, 838, 839, 875], "two": [0, 1, 60, 61, 62, 63, 64, 65, 66, 69, 74, 94, 105, 106, 132, 133, 136, 137, 138, 139, 141, 143, 144, 147, 193, 194, 200, 206, 212, 215, 220, 222, 227, 240, 245, 262, 266, 268, 298, 310, 315, 329, 333, 335, 344, 349, 361, 366, 381, 385, 387, 397, 402, 415, 420, 437, 441, 443, 461, 473, 475, 482, 486, 488, 494, 496, 498, 503, 505, 510, 516, 523, 524, 525, 528, 530, 533, 540, 543, 544, 546, 547, 549, 551, 556, 558, 561, 565, 571, 573, 575, 580, 582, 586, 591, 599, 600, 601, 602, 603, 604, 605, 607, 713, 718, 723, 726, 727, 758, 759, 765, 774, 796, 798, 813, 818, 875, 877, 879], "have": [0, 1, 16, 46, 49, 50, 53, 54, 66, 68, 78, 83, 95, 99, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 180, 190, 193, 203, 204, 205, 227, 240, 246, 262, 291, 298, 310, 316, 329, 349, 361, 367, 381, 402, 415, 421, 437, 461, 473, 482, 496, 512, 528, 544, 546, 549, 573, 601, 607, 608, 630, 642, 663, 674, 697, 709, 712, 713, 714, 717, 718, 720, 721, 723, 725, 726, 727, 728, 734, 753, 754, 755, 764, 766, 767, 790, 796, 803, 805, 806, 815, 817, 877, 879, 881], "been": [0, 60, 61, 62, 67, 111, 136, 137, 138, 143, 180, 182, 187, 190, 258, 262, 270, 326, 329, 337, 377, 381, 389, 433, 437, 445, 456, 482, 528, 601, 607, 728, 790], "previous": [0, 265, 272, 332, 339, 384, 391, 440, 447, 485, 491, 881], "tabularmsa": [0, 60, 61, 62, 63, 64, 65, 66, 126, 134, 137, 143, 146, 203, 875], "object": [0, 1, 16, 28, 31, 32, 33, 42, 45, 48, 49, 51, 52, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 108, 111, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 181, 183, 186, 188, 193, 194, 200, 202, 203, 204, 205, 206, 212, 214, 215, 216, 217, 218, 222, 224, 227, 229, 240, 241, 245, 248, 249, 256, 257, 259, 260, 261, 266, 267, 268, 269, 276, 293, 295, 298, 300, 310, 311, 315, 318, 319, 324, 325, 327, 328, 333, 334, 335, 336, 342, 344, 346, 349, 351, 361, 362, 366, 369, 370, 375, 376, 378, 380, 385, 386, 387, 388, 395, 397, 399, 402, 404, 415, 416, 420, 423, 424, 431, 432, 434, 435, 436, 441, 442, 443, 444, 452, 456, 458, 461, 463, 473, 474, 475, 476, 477, 478, 479, 480, 481, 486, 487, 488, 489, 494, 498, 508, 510, 514, 522, 523, 528, 546, 547, 551, 560, 561, 563, 571, 575, 585, 586, 589, 599, 600, 602, 603, 604, 605, 630, 663, 674, 712, 713, 718, 719, 720, 734, 751, 759, 766, 798, 803, 805, 814, 817, 818, 839, 840, 863, 875, 877, 879, 881], "us": [0, 1, 2, 16, 28, 35, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 60, 61, 62, 72, 73, 74, 78, 79, 82, 83, 90, 93, 94, 97, 103, 105, 106, 107, 108, 111, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 150, 160, 161, 162, 178, 179, 182, 187, 190, 203, 215, 222, 240, 245, 257, 259, 262, 265, 272, 275, 278, 279, 281, 289, 290, 291, 292, 293, 310, 315, 325, 327, 329, 332, 339, 341, 344, 361, 366, 376, 378, 381, 384, 391, 394, 397, 415, 420, 432, 434, 437, 440, 447, 451, 453, 454, 456, 473, 475, 479, 480, 482, 485, 491, 492, 494, 498, 510, 522, 523, 525, 526, 527, 528, 533, 534, 535, 537, 538, 544, 546, 547, 551, 561, 571, 575, 586, 593, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 631, 642, 653, 675, 686, 698, 709, 712, 718, 722, 723, 724, 725, 726, 727, 734, 735, 736, 752, 754, 755, 756, 759, 760, 763, 765, 771, 772, 790, 795, 796, 803, 805, 810, 811, 813, 815, 816, 817, 818, 819, 840, 863, 877, 879, 880, 881], "id": [0, 1, 28, 33, 51, 56, 57, 78, 94, 103, 105, 106, 107, 108, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 227, 236, 238, 257, 278, 279, 281, 290, 291, 292, 298, 307, 309, 325, 349, 358, 360, 376, 402, 411, 413, 432, 453, 454, 456, 461, 470, 472, 479, 494, 495, 496, 498, 504, 505, 508, 510, 513, 517, 520, 539, 546, 547, 548, 549, 551, 557, 558, 560, 561, 562, 566, 568, 571, 572, 573, 575, 581, 582, 585, 586, 587, 588, 592, 593, 595, 598, 599, 600, 601, 602, 603, 604, 605, 642, 686, 699, 708, 709, 725, 726, 727, 735, 736, 753, 760, 763, 770, 772, 773, 776, 803, 805, 814, 877], "msa": [0, 28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 48, 49, 50, 53, 54, 56, 57, 58, 134, 136, 137, 143, 146], "": [0, 1, 2, 16, 28, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 61, 62, 65, 69, 71, 74, 76, 77, 78, 79, 81, 82, 86, 88, 89, 90, 94, 95, 97, 98, 99, 101, 102, 103, 105, 106, 108, 109, 110, 130, 132, 133, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 193, 203, 215, 222, 224, 227, 229, 232, 234, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 275, 277, 278, 279, 281, 282, 288, 291, 292, 293, 295, 298, 300, 303, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 344, 346, 349, 351, 354, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 394, 397, 399, 402, 404, 407, 409, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 451, 453, 454, 456, 458, 461, 463, 466, 468, 470, 471, 472, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 498, 505, 506, 508, 520, 523, 526, 527, 528, 531, 532, 534, 535, 539, 543, 545, 547, 551, 558, 560, 568, 575, 582, 585, 595, 599, 600, 601, 602, 603, 630, 663, 674, 697, 709, 712, 713, 714, 718, 720, 722, 723, 725, 726, 727, 756, 764, 776, 792, 813, 863, 875, 877, 879, 881], "index": [0, 1, 2, 28, 30, 33, 35, 42, 45, 48, 49, 52, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 71, 74, 80, 82, 83, 86, 87, 89, 95, 97, 98, 99, 102, 103, 134, 136, 143, 144, 146, 229, 259, 300, 327, 351, 378, 404, 434, 463, 480, 495, 498, 517, 526, 527, 528, 533, 546, 548, 551, 566, 572, 575, 592, 593, 599, 600, 601, 602, 603, 608, 642, 686, 699, 709, 725, 773, 776, 786, 787, 805, 813, 817], "from": [0, 1, 16, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 74, 78, 83, 94, 101, 102, 105, 106, 112, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 160, 161, 162, 181, 186, 193, 202, 203, 215, 216, 219, 222, 223, 224, 227, 229, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 291, 292, 293, 294, 295, 298, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 346, 349, 351, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 397, 398, 399, 402, 404, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 456, 457, 458, 461, 463, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 498, 505, 506, 509, 510, 512, 514, 515, 517, 518, 520, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 558, 561, 563, 564, 566, 568, 575, 582, 586, 589, 590, 592, 593, 595, 599, 600, 601, 603, 604, 605, 607, 608, 609, 697, 698, 709, 710, 712, 713, 715, 716, 718, 723, 725, 726, 727, 728, 735, 736, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 819, 839, 841, 877, 879, 881], "import": [0, 1, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 74, 78, 94, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 160, 161, 162, 193, 203, 215, 222, 223, 224, 227, 229, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 281, 291, 292, 293, 294, 295, 298, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 342, 344, 345, 346, 349, 351, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 394, 395, 397, 398, 399, 402, 404, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 451, 452, 453, 454, 456, 457, 458, 461, 463, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 505, 506, 509, 512, 514, 517, 520, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 558, 563, 566, 568, 582, 589, 592, 593, 595, 599, 600, 601, 603, 604, 607, 608, 697, 698, 709, 723, 725, 726, 727, 728, 735, 736, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 819, 839, 875, 877, 879, 881], "seq": [0, 28, 38, 43, 49, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 132, 133, 134, 136, 137, 139, 143, 144, 225, 226, 239, 246, 249, 257, 259, 272, 273, 275, 276, 279, 292, 293, 296, 297, 316, 319, 325, 327, 339, 341, 342, 347, 348, 367, 370, 376, 378, 391, 394, 395, 400, 401, 414, 421, 424, 432, 434, 447, 448, 451, 452, 454, 456, 459, 460, 477, 479, 480, 491, 492, 533, 697, 881], "acc": [0, 133, 877], "g": [0, 1, 16, 33, 47, 48, 54, 62, 65, 80, 83, 90, 94, 108, 111, 126, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 147, 148, 193, 222, 229, 232, 237, 240, 241, 248, 249, 250, 251, 252, 262, 300, 303, 308, 310, 311, 318, 319, 320, 329, 344, 351, 354, 359, 361, 362, 369, 370, 371, 381, 397, 404, 407, 412, 415, 416, 423, 424, 425, 426, 427, 437, 456, 463, 466, 471, 473, 474, 476, 477, 482, 494, 498, 506, 512, 523, 528, 543, 546, 547, 551, 571, 575, 593, 599, 600, 602, 603, 709, 726, 727, 734, 755, 756, 761, 764, 768, 795, 796, 797, 799, 800, 806, 809, 810, 811, 813, 840, 875, 877, 879, 881], "ggta": 0, "metadata": [0, 1, 28, 33, 42, 45, 46, 48, 51, 52, 53, 54, 56, 57, 134, 135, 136, 137, 138, 139, 143, 144, 222, 227, 229, 236, 238, 239, 240, 243, 246, 256, 257, 259, 265, 272, 273, 277, 278, 279, 281, 291, 292, 293, 298, 300, 307, 309, 310, 313, 316, 324, 325, 327, 332, 339, 344, 349, 351, 358, 360, 361, 364, 367, 375, 376, 378, 384, 391, 397, 402, 404, 411, 413, 414, 415, 418, 421, 431, 432, 434, 440, 447, 448, 449, 453, 454, 456, 461, 463, 470, 472, 473, 478, 479, 480, 485, 491, 510, 561, 586, 600, 608, 620, 642, 653, 664, 686, 709, 720, 723, 725, 726, 727, 874, 877], "seq1": [0, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 134, 136, 137, 143, 146, 523, 524], "tcc": 0, "ggca": 0, "seq2": [0, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 136, 137, 146, 523, 524], "minter": [0, 28, 33, 45, 48, 56, 57, 134, 143], "stat": [0, 1, 28, 45, 46, 48, 53, 54, 57, 90, 96, 131, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 222, 229, 239, 240, 243, 246, 273, 277, 278, 279, 281, 291, 292, 293, 300, 310, 313, 316, 344, 351, 361, 364, 367, 397, 404, 414, 415, 418, 421, 448, 449, 453, 454, 456, 463, 473, 505, 514, 520, 522, 874, 877], "count": [0, 28, 45, 48, 50, 54, 57, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 134, 136, 137, 143, 146, 249, 251, 252, 264, 266, 268, 319, 331, 333, 335, 370, 383, 385, 387, 424, 426, 427, 439, 441, 443, 477, 484, 486, 488, 524, 525, 528, 533, 607, 713, 719, 726, 727, 728, 758, 759, 785, 813, 874, 875], "2": [0, 1, 16, 28, 33, 40, 45, 46, 47, 49, 50, 53, 54, 56, 60, 61, 62, 63, 64, 65, 69, 72, 74, 76, 78, 80, 83, 84, 85, 87, 88, 90, 94, 97, 98, 99, 105, 106, 107, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 161, 203, 215, 218, 220, 222, 239, 240, 241, 247, 248, 249, 252, 260, 262, 264, 273, 275, 279, 282, 291, 292, 310, 311, 317, 318, 319, 328, 329, 331, 341, 361, 362, 368, 369, 370, 380, 381, 383, 394, 414, 415, 416, 422, 423, 424, 427, 435, 437, 439, 448, 451, 454, 456, 473, 474, 476, 477, 481, 482, 484, 492, 494, 505, 506, 512, 514, 517, 520, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 558, 563, 566, 568, 571, 582, 589, 592, 593, 595, 599, 600, 601, 602, 603, 604, 605, 607, 608, 697, 698, 709, 712, 713, 715, 718, 720, 723, 725, 726, 727, 728, 749, 754, 755, 757, 759, 764, 765, 770, 772, 773, 774, 797, 798, 803, 805, 806, 808, 809, 813, 814, 819, 875, 877, 879, 881], "posit": [0, 16, 28, 29, 33, 42, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 60, 61, 62, 63, 64, 65, 66, 67, 132, 133, 134, 136, 137, 138, 141, 143, 144, 145, 146, 222, 227, 229, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 259, 260, 262, 265, 266, 267, 268, 269, 270, 272, 273, 277, 278, 279, 291, 292, 298, 300, 303, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 320, 327, 328, 329, 332, 333, 334, 335, 336, 337, 339, 344, 349, 351, 354, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 371, 378, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 397, 402, 404, 407, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 425, 434, 435, 437, 440, 441, 442, 443, 444, 445, 447, 448, 449, 453, 454, 456, 461, 463, 466, 470, 471, 472, 473, 474, 476, 480, 481, 482, 485, 486, 487, 488, 489, 491, 526, 527, 528, 537, 601, 607, 686, 699, 723, 724, 726, 727, 786, 877], "13": [0, 73, 95, 99, 133, 136, 142, 144, 222, 293, 344, 397, 456, 528, 533, 698], "dtype": [0, 1, 28, 33, 45, 46, 47, 48, 50, 53, 54, 56, 57, 134, 136, 137, 143, 144, 146, 239, 240, 242, 243, 244, 250, 267, 269, 270, 273, 275, 310, 312, 313, 314, 320, 334, 336, 337, 341, 361, 363, 364, 365, 371, 386, 388, 389, 392, 394, 414, 415, 417, 418, 419, 425, 442, 444, 445, 448, 451, 456, 473, 487, 489, 492, 494, 528, 547, 571, 593, 599, 603, 698, 805, 877], "conveni": [0, 16, 55, 59, 93, 183, 188, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 710, 711, 791, 812, 880], "local_pairwise_align_ssw": [0, 60, 61, 62, 63, 64, 65], "score": [0, 2, 16, 47, 60, 61, 62, 63, 64, 65, 66, 67, 73, 132, 133, 136, 138, 139, 144, 456, 494, 509, 512, 699, 720], "start_end_posit": 0, "actaaggctctctacccctctcagaga": 0, "actaaggctcctaacccccttttctcaga": 0, "30": [0, 133, 138, 139, 142, 144, 726, 727, 787], "actaaggctctct": 0, "acccc": 0, "tctcaga": 0, "actaaggctc": 0, "ctaacccccttttctcaga": 0, "27": [0, 78, 97, 105, 106, 133, 344, 539, 601], "0": [0, 1, 14, 15, 16, 28, 40, 45, 46, 48, 50, 53, 54, 56, 66, 67, 69, 74, 78, 79, 80, 83, 84, 92, 94, 95, 105, 106, 111, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 190, 215, 222, 223, 227, 229, 239, 240, 241, 243, 245, 246, 247, 249, 251, 252, 258, 264, 266, 268, 270, 273, 275, 276, 277, 278, 279, 281, 291, 292, 293, 294, 298, 300, 310, 311, 313, 315, 316, 317, 319, 326, 331, 333, 335, 337, 341, 342, 344, 345, 349, 351, 361, 362, 364, 366, 367, 368, 370, 377, 383, 385, 387, 389, 394, 395, 397, 398, 402, 404, 414, 415, 416, 418, 420, 421, 422, 424, 426, 427, 433, 439, 441, 443, 445, 448, 449, 451, 452, 453, 454, 456, 457, 461, 463, 473, 474, 475, 477, 484, 486, 488, 492, 494, 505, 506, 509, 514, 517, 520, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 563, 566, 568, 582, 589, 592, 593, 595, 599, 600, 601, 603, 604, 605, 607, 608, 642, 697, 698, 709, 713, 717, 718, 721, 723, 724, 726, 727, 728, 735, 736, 749, 754, 757, 758, 759, 760, 763, 764, 765, 768, 774, 786, 792, 796, 797, 798, 803, 805, 808, 809, 813, 814, 819, 852, 875, 877, 879, 881], "24": [0, 133, 142, 506, 726], "28": [0, 94, 142, 723], "stripedsmithwaterman": [0, 66], "queri": [0, 2, 16, 66, 132, 133, 203, 456], "aaaaaactctctaaactcactaaggctctctacccctcttcagagaagtcga": 0, "print": [0, 1, 53, 78, 105, 106, 134, 136, 137, 138, 139, 141, 143, 144, 146, 246, 262, 275, 279, 292, 316, 329, 341, 367, 381, 394, 421, 437, 451, 454, 456, 482, 492, 546, 601, 607, 608, 697, 723, 727, 735, 736, 751, 752, 755, 756, 759, 760, 761, 763, 764, 766, 767, 768, 770, 772, 773, 775, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 790, 793, 795, 796, 797, 798, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 877, 879, 881], "49": [0, 139, 142], "length": [0, 1, 16, 28, 45, 46, 48, 53, 60, 61, 62, 78, 94, 105, 106, 131, 132, 133, 135, 136, 137, 138, 139, 140, 143, 144, 146, 203, 215, 222, 223, 229, 234, 239, 240, 241, 243, 246, 249, 251, 252, 262, 263, 264, 266, 267, 268, 269, 273, 274, 275, 277, 278, 279, 281, 291, 292, 293, 294, 300, 305, 310, 311, 313, 316, 319, 329, 330, 331, 333, 334, 335, 336, 340, 341, 344, 345, 351, 356, 361, 362, 364, 367, 370, 381, 382, 383, 385, 386, 387, 388, 393, 394, 397, 398, 404, 409, 414, 415, 416, 418, 421, 424, 426, 427, 437, 438, 439, 441, 442, 443, 444, 448, 449, 450, 451, 453, 454, 456, 457, 463, 468, 473, 474, 477, 482, 483, 484, 486, 487, 488, 489, 492, 510, 523, 524, 528, 533, 561, 586, 599, 602, 603, 607, 717, 718, 726, 727, 731, 734, 749, 755, 764, 765, 774, 796, 803, 805, 808, 809, 814, 877, 879, 881], "multipl": [0, 28, 53, 78, 105, 106, 134, 135, 136, 137, 138, 139, 141, 147, 193, 215, 456, 494, 525, 528, 533, 537, 607, 720, 726, 806, 813, 875, 879], "target": [0, 1, 2, 16, 66, 77, 139, 505, 520, 558, 568, 582, 595], "an": [0, 1, 2, 16, 28, 30, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 66, 78, 79, 81, 87, 91, 92, 103, 105, 106, 107, 111, 125, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 160, 161, 162, 175, 177, 178, 179, 181, 186, 190, 191, 193, 203, 214, 215, 217, 218, 220, 221, 222, 229, 240, 247, 256, 257, 259, 266, 268, 272, 275, 280, 281, 291, 293, 300, 310, 317, 324, 325, 327, 333, 335, 339, 341, 343, 344, 351, 361, 368, 375, 376, 378, 385, 387, 391, 394, 396, 397, 404, 415, 422, 431, 432, 434, 441, 443, 447, 451, 455, 456, 463, 473, 478, 479, 480, 486, 488, 491, 492, 493, 494, 498, 505, 508, 510, 512, 516, 520, 521, 528, 531, 532, 534, 535, 538, 540, 543, 544, 546, 551, 558, 560, 561, 565, 568, 569, 575, 582, 583, 585, 586, 591, 595, 596, 599, 601, 602, 603, 607, 619, 641, 652, 664, 685, 696, 697, 698, 708, 711, 717, 718, 723, 725, 726, 727, 728, 735, 736, 749, 751, 752, 754, 756, 760, 762, 763, 767, 770, 771, 773, 780, 782, 785, 795, 798, 803, 805, 808, 810, 811, 812, 813, 814, 815, 820, 821, 824, 831, 837, 838, 839, 841, 863, 875, 877, 879, 881], "effici": [0, 140, 588], "wai": [0, 1, 136, 137, 141, 143, 146, 148, 193, 274, 340, 393, 450, 494, 528, 601, 718, 723, 875, 879], "find": [0, 79, 242, 244, 247, 250, 260, 262, 267, 269, 270, 312, 314, 317, 320, 328, 329, 334, 336, 337, 363, 365, 368, 371, 380, 381, 386, 388, 389, 392, 417, 419, 422, 425, 435, 437, 442, 444, 445, 481, 482, 487, 489, 600, 603, 607, 713, 727, 749, 750, 762, 764, 765, 768, 769, 770, 775, 777, 778, 779, 780, 782, 783, 790, 794, 799, 808, 810, 811, 837], "represent": [0, 1, 131, 136, 141, 145, 203, 265, 289, 332, 384, 440, 485, 504, 544, 557, 581, 606, 699, 708, 734, 748, 805, 806, 874, 875], "target_sequ": [0, 2, 16, 17], "gctaactaggctcccttctacccctctcagaga": 0, "gcccagtagcttcccaatatgagagcatcaattgtagatcgggcc": 0, "tctataagattccgcatgcgttacttataagatgtctcaacgg": 0, "tagagattaattgccactgccaaaattctg": 0, "query_sequ": [0, 2, 16, 17], "append": [0, 48, 143, 148, 456, 766], "act": [0, 54, 160, 161, 162], "aggctc": 0, "38": [0, 132, 137, 142, 723], "aligned_query_sequ": [0, 2], "tctacccctctcagaga": 0, "aligned_target_sequ": [0, 2], "aggctcccttctacccctctcagaga": 0, "scikit": [0, 1, 51, 52, 55, 59, 60, 63, 66, 67, 78, 105, 106, 107, 108, 109, 110, 111, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 146, 147, 219, 221, 257, 259, 271, 278, 279, 280, 281, 291, 292, 325, 327, 338, 343, 376, 378, 390, 396, 432, 434, 446, 453, 454, 455, 479, 480, 490, 493, 515, 521, 522, 564, 569, 590, 596, 710, 711, 791, 812, 815, 877, 880], "bio": [0, 1, 51, 52, 55, 59, 60, 63, 66, 67, 78, 105, 106, 107, 108, 109, 110, 111, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 146, 147, 219, 221, 257, 259, 271, 278, 279, 280, 281, 291, 292, 325, 327, 338, 343, 376, 378, 390, 396, 432, 434, 446, 453, 454, 455, 479, 480, 490, 493, 515, 521, 522, 564, 569, 590, 596, 600, 710, 711, 791, 812, 815, 877, 880], "also": [0, 1, 46, 47, 74, 78, 98, 104, 105, 106, 107, 126, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 150, 203, 252, 262, 272, 275, 291, 329, 339, 341, 381, 391, 394, 427, 437, 447, 451, 456, 482, 491, 492, 494, 528, 543, 544, 546, 599, 600, 601, 603, 607, 713, 720, 723, 726, 727, 817, 863, 875, 877, 881], "pure": [0, 815], "python": [0, 1, 2, 456, 546, 571, 601, 815, 820, 874, 875, 877], "implement": [0, 1, 60, 63, 68, 69, 73, 78, 83, 88, 99, 104, 105, 106, 109, 110, 137, 141, 145, 148, 160, 161, 162, 163, 190, 543, 712, 713, 718, 719, 757, 813, 815], "smith": [0, 16, 63, 64, 65, 66, 607], "waterman": [0, 16, 63, 64, 65, 66], "needleman": [0, 60, 61, 62], "wunsch": [0, 60, 61, 62], "These": [0, 1, 46, 51, 52, 68, 78, 105, 106, 138, 141, 145, 146, 147, 257, 259, 325, 327, 376, 378, 432, 434, 479, 480, 522, 604, 606, 699, 719, 725], "ar": [0, 1, 16, 28, 29, 33, 38, 42, 43, 46, 47, 50, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 74, 78, 79, 84, 85, 94, 103, 105, 106, 107, 108, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 160, 161, 162, 174, 181, 185, 186, 190, 193, 194, 200, 206, 212, 215, 217, 219, 220, 221, 222, 227, 229, 236, 239, 240, 246, 249, 253, 254, 255, 258, 266, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 288, 290, 291, 292, 293, 298, 300, 307, 310, 316, 319, 321, 322, 323, 326, 333, 334, 335, 336, 338, 339, 341, 343, 344, 349, 351, 358, 361, 367, 370, 372, 373, 374, 377, 379, 385, 386, 387, 388, 390, 391, 394, 396, 397, 402, 404, 411, 414, 415, 421, 424, 428, 429, 430, 433, 441, 442, 443, 444, 446, 447, 449, 451, 453, 454, 455, 456, 461, 463, 470, 473, 477, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 503, 506, 509, 510, 515, 516, 520, 521, 523, 524, 525, 526, 528, 530, 533, 534, 535, 537, 538, 540, 541, 542, 543, 546, 547, 549, 551, 556, 561, 564, 565, 568, 569, 571, 573, 575, 580, 586, 588, 590, 591, 593, 595, 596, 599, 600, 601, 602, 603, 604, 605, 607, 620, 642, 686, 697, 699, 708, 709, 710, 711, 712, 713, 716, 717, 718, 720, 721, 723, 725, 726, 727, 734, 754, 757, 762, 772, 783, 785, 786, 790, 791, 798, 799, 803, 805, 806, 807, 812, 813, 815, 817, 818, 820, 837, 840, 841, 852, 863, 875, 877, 879, 881], "much": [0, 1, 78, 105, 106, 141, 875], "slower": [0, 815], "than": [0, 1, 16, 46, 47, 69, 78, 83, 85, 101, 105, 106, 136, 141, 143, 146, 182, 187, 203, 222, 223, 224, 227, 241, 245, 249, 260, 261, 262, 263, 264, 266, 267, 268, 269, 279, 292, 294, 295, 298, 311, 315, 319, 328, 329, 330, 331, 333, 334, 335, 336, 344, 345, 346, 349, 362, 366, 370, 380, 381, 382, 383, 385, 386, 387, 388, 397, 398, 399, 402, 416, 420, 424, 435, 436, 437, 438, 439, 441, 442, 443, 444, 454, 457, 458, 461, 474, 475, 477, 481, 482, 483, 484, 486, 487, 488, 489, 494, 524, 525, 528, 530, 533, 546, 588, 599, 601, 602, 603, 607, 697, 712, 713, 726, 727, 728, 755, 772, 785, 814, 819, 875, 879], "method": [0, 1, 2, 16, 28, 35, 47, 54, 55, 59, 60, 80, 103, 105, 107, 108, 111, 142, 145, 150, 160, 162, 163, 180, 193, 203, 214, 219, 221, 222, 225, 226, 240, 249, 271, 273, 279, 280, 281, 290, 292, 293, 296, 297, 310, 319, 338, 343, 344, 347, 348, 361, 370, 390, 396, 397, 400, 401, 415, 424, 446, 448, 454, 455, 456, 459, 460, 473, 477, 490, 493, 494, 515, 521, 525, 528, 533, 537, 543, 546, 547, 564, 569, 571, 588, 590, 596, 599, 600, 601, 602, 603, 604, 609, 620, 630, 631, 642, 653, 663, 664, 674, 675, 686, 697, 699, 709, 710, 711, 712, 713, 718, 734, 735, 736, 752, 754, 755, 756, 759, 760, 762, 763, 764, 765, 767, 769, 770, 790, 791, 796, 798, 810, 811, 812, 813, 814, 820, 832, 839, 840, 841, 851, 863, 877, 878, 879, 881], "describ": [0, 1, 47, 60, 63, 70, 71, 74, 77, 78, 81, 82, 84, 85, 86, 87, 94, 95, 98, 105, 106, 111, 135, 136, 137, 138, 139, 142, 143, 145, 146, 262, 265, 329, 332, 381, 384, 437, 440, 456, 482, 485, 516, 539, 545, 546, 565, 583, 591, 601, 607, 719, 776, 814, 877, 879], "abov": [0, 1, 54, 136, 138, 142, 143, 144, 145, 146, 148, 160, 162, 222, 344, 397, 456, 546, 599, 601, 603, 607, 877], "serv": [0, 147, 709], "thei": [0, 1, 38, 43, 47, 53, 69, 103, 107, 132, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 220, 222, 227, 236, 239, 262, 282, 298, 307, 329, 349, 358, 381, 397, 402, 411, 414, 437, 461, 470, 482, 496, 508, 525, 549, 560, 573, 585, 599, 600, 601, 602, 603, 604, 608, 708, 709, 712, 718, 723, 759, 766, 815, 817, 881], "re": [0, 1, 45, 48, 54, 78, 103, 105, 106, 107, 134, 136, 137, 143, 146, 222, 248, 276, 293, 318, 342, 344, 369, 395, 397, 423, 452, 456, 476, 604, 712, 720, 722, 723, 727, 805, 879, 881], "simpler": 0, "experi": [0, 135, 138, 145, 528, 533, 726], "local": [0, 63, 64, 65, 132, 133, 138], "global": [0, 60, 61, 62], "nucleotid": [0, 16, 61, 64, 133, 135, 136, 137, 138, 222, 239, 261, 273, 275, 341, 394, 397, 414, 436, 448, 451, 492, 494, 506, 881], "The": [0, 1, 16, 17, 45, 46, 47, 48, 49, 51, 52, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 78, 79, 80, 81, 83, 88, 90, 94, 95, 96, 97, 99, 102, 103, 105, 106, 107, 108, 109, 110, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 160, 161, 162, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 193, 194, 203, 204, 205, 214, 215, 216, 217, 218, 219, 221, 224, 227, 229, 234, 239, 240, 241, 243, 245, 249, 257, 259, 260, 262, 263, 264, 271, 273, 275, 279, 280, 281, 290, 291, 292, 295, 298, 300, 305, 310, 311, 313, 315, 319, 325, 327, 328, 329, 330, 331, 338, 341, 343, 346, 349, 351, 356, 361, 362, 364, 366, 370, 376, 378, 380, 381, 382, 383, 390, 394, 396, 397, 399, 402, 404, 409, 414, 415, 416, 418, 420, 424, 432, 434, 435, 437, 438, 439, 446, 448, 451, 454, 455, 456, 458, 461, 463, 468, 473, 474, 475, 477, 479, 480, 481, 482, 483, 484, 490, 492, 493, 494, 498, 505, 510, 515, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 547, 551, 558, 561, 564, 568, 569, 571, 575, 582, 583, 586, 588, 590, 593, 595, 596, 599, 600, 601, 602, 603, 605, 607, 608, 620, 642, 653, 664, 686, 697, 699, 710, 711, 712, 713, 717, 718, 719, 720, 723, 724, 725, 726, 727, 749, 750, 755, 756, 757, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 772, 773, 774, 776, 780, 782, 783, 786, 791, 792, 794, 795, 797, 798, 799, 800, 803, 805, 812, 813, 814, 817, 820, 838, 840, 841, 875, 877, 879, 881], "differ": [0, 1, 33, 46, 47, 49, 60, 61, 62, 73, 78, 83, 95, 99, 105, 106, 112, 133, 136, 137, 143, 146, 147, 148, 224, 227, 236, 240, 241, 245, 260, 261, 266, 267, 268, 269, 272, 278, 281, 288, 295, 298, 307, 310, 311, 315, 328, 333, 334, 335, 336, 339, 346, 349, 358, 361, 362, 366, 380, 385, 386, 387, 388, 391, 399, 402, 411, 415, 416, 420, 435, 436, 441, 442, 443, 444, 447, 453, 458, 461, 470, 473, 474, 475, 481, 486, 487, 488, 489, 491, 498, 523, 528, 533, 546, 551, 575, 599, 602, 603, 607, 631, 686, 698, 712, 713, 718, 726, 727, 757, 758, 817, 818, 834, 835, 836, 877, 879], "underli": [0, 190, 222, 227, 291, 293, 298, 344, 349, 397, 402, 456, 461, 523, 723, 877], "appli": [0, 1, 16, 28, 47, 51, 52, 103, 106, 107, 108, 111, 135, 136, 141, 145, 147, 203, 222, 257, 259, 293, 325, 327, 344, 376, 378, 397, 432, 434, 456, 479, 480, 494, 510, 525, 561, 586, 588, 601, 604, 608, 712, 726, 814, 841, 881], "while": [0, 1, 131, 135, 136, 137, 138, 143, 193, 281, 456, 528, 603, 642, 686, 709, 725, 734, 762, 840, 877, 881], "default": [0, 1, 16, 28, 45, 46, 48, 54, 56, 59, 60, 61, 62, 64, 65, 69, 73, 83, 90, 94, 97, 103, 107, 132, 136, 138, 139, 140, 141, 143, 144, 145, 148, 150, 160, 162, 175, 177, 218, 221, 245, 262, 274, 275, 278, 279, 280, 281, 291, 292, 315, 329, 340, 341, 343, 366, 381, 393, 394, 396, 420, 437, 450, 451, 453, 454, 455, 475, 482, 492, 493, 505, 510, 514, 521, 526, 527, 528, 533, 534, 535, 537, 538, 547, 558, 561, 563, 569, 582, 586, 589, 596, 600, 601, 603, 604, 605, 642, 697, 709, 711, 717, 718, 720, 721, 728, 759, 784, 803, 812, 813, 814, 817, 818, 838, 841, 863, 875, 877, 879, 881], "match": [0, 16, 45, 48, 54, 61, 64, 67, 132, 136, 137, 145, 190, 191, 227, 247, 248, 266, 268, 269, 276, 291, 298, 317, 318, 333, 335, 336, 342, 349, 368, 369, 385, 387, 388, 395, 402, 422, 423, 441, 443, 444, 452, 461, 476, 486, 488, 489, 512, 547, 599, 601, 603, 604, 723, 725, 726, 727, 758, 759, 768, 770, 877, 881], "mismatch": [0, 16, 61, 64, 67, 132, 133, 266, 267, 268, 333, 334, 335, 385, 386, 387, 441, 442, 443, 486, 487, 488, 512, 601, 758], "gap": [0, 16, 46, 47, 50, 54, 60, 61, 62, 63, 64, 65, 132, 133, 134, 135, 136, 137, 138, 139, 143, 222, 239, 240, 243, 246, 247, 251, 252, 255, 262, 273, 274, 275, 277, 278, 279, 281, 291, 292, 293, 310, 313, 316, 317, 323, 329, 340, 341, 344, 361, 364, 367, 368, 374, 381, 393, 394, 397, 414, 415, 418, 421, 422, 426, 427, 430, 437, 448, 449, 450, 451, 453, 454, 456, 473, 482, 492, 523, 806, 877, 881], "here": [0, 1, 47, 69, 73, 78, 83, 88, 90, 96, 97, 99, 103, 104, 105, 106, 107, 108, 109, 110, 135, 138, 143, 148, 160, 162, 191, 262, 329, 381, 437, 482, 528, 533, 607, 718, 720, 807, 814, 879], "we": [0, 1, 16, 45, 47, 48, 78, 83, 90, 94, 105, 106, 108, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 191, 193, 203, 249, 262, 272, 291, 319, 329, 339, 370, 381, 391, 424, 437, 447, 456, 477, 482, 491, 528, 533, 539, 545, 546, 599, 600, 601, 603, 604, 607, 608, 698, 709, 712, 720, 722, 723, 725, 726, 727, 759, 813, 875, 879, 881], "pair": [0, 1, 51, 60, 61, 62, 64, 67, 105, 106, 107, 111, 135, 137, 138, 139, 141, 146, 214, 218, 257, 325, 376, 432, 479, 494, 498, 505, 520, 524, 528, 551, 558, 568, 575, 582, 586, 593, 595, 604, 723, 774, 803, 877], "open": [0, 55, 59, 60, 61, 62, 63, 64, 65, 108, 132, 133, 137, 148, 160, 162, 181, 182, 183, 186, 187, 188, 191, 192, 193, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 710, 711, 791, 812, 839, 874, 875], "penalti": [0, 16, 60, 61, 62, 63, 64, 65], "11": [0, 16, 62, 65, 66, 72, 77, 78, 132, 135, 142, 144, 222, 248, 318, 369, 397, 423, 476, 528, 533, 539, 545, 608, 698, 713, 720, 723, 814], "extend": [0, 16, 45, 54, 60, 61, 62, 63, 64, 65, 78, 726, 751, 764, 813, 875], "1": [0, 1, 2, 15, 16, 28, 33, 45, 46, 47, 48, 50, 53, 54, 56, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 108, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 160, 161, 193, 203, 215, 218, 220, 222, 227, 229, 239, 240, 241, 247, 249, 262, 263, 264, 268, 273, 274, 275, 278, 279, 281, 282, 289, 290, 291, 292, 293, 298, 300, 310, 311, 317, 319, 329, 330, 331, 335, 340, 341, 344, 349, 351, 361, 362, 368, 370, 381, 382, 383, 387, 393, 394, 397, 402, 404, 414, 415, 416, 422, 424, 437, 438, 439, 443, 448, 450, 451, 453, 454, 456, 461, 463, 473, 474, 477, 482, 483, 484, 488, 492, 494, 505, 506, 509, 512, 514, 516, 517, 520, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 558, 563, 565, 566, 568, 571, 582, 583, 589, 591, 592, 593, 595, 599, 600, 601, 602, 603, 604, 605, 607, 642, 664, 686, 697, 698, 709, 712, 713, 717, 720, 721, 723, 725, 726, 727, 728, 749, 754, 757, 759, 764, 765, 768, 772, 773, 774, 786, 796, 797, 798, 803, 805, 806, 808, 809, 813, 814, 819, 877, 879, 881], "other": [0, 1, 16, 33, 42, 51, 52, 54, 78, 93, 108, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 190, 194, 200, 206, 212, 217, 222, 227, 236, 245, 251, 252, 257, 259, 261, 266, 267, 268, 269, 272, 282, 288, 298, 307, 315, 325, 327, 333, 334, 335, 336, 339, 344, 349, 358, 366, 376, 378, 385, 386, 387, 388, 391, 397, 402, 411, 420, 426, 427, 432, 434, 436, 441, 442, 443, 444, 447, 456, 461, 470, 475, 479, 480, 486, 487, 488, 489, 491, 494, 496, 503, 522, 528, 533, 546, 549, 556, 571, 573, 580, 603, 709, 712, 713, 718, 725, 727, 734, 757, 758, 759, 765, 767, 768, 817, 840, 851, 875, 877, 879, 881], "word": [0, 135, 136, 138, 141, 146, 218, 264, 331, 383, 439, 484], "more": [0, 1, 46, 47, 48, 55, 59, 60, 66, 69, 80, 103, 110, 133, 135, 136, 137, 141, 142, 143, 144, 145, 146, 182, 187, 219, 221, 253, 254, 255, 258, 271, 280, 321, 322, 323, 326, 338, 343, 344, 372, 373, 374, 377, 379, 390, 396, 428, 429, 430, 433, 446, 455, 490, 493, 498, 515, 521, 525, 528, 530, 533, 546, 551, 564, 569, 575, 588, 590, 596, 599, 600, 601, 602, 603, 604, 607, 619, 641, 652, 685, 696, 697, 709, 710, 711, 712, 713, 720, 726, 727, 755, 772, 791, 812, 813, 875, 879, 880], "costli": 0, "new": [0, 45, 48, 55, 56, 57, 71, 82, 84, 85, 105, 147, 160, 161, 162, 174, 185, 203, 219, 222, 229, 240, 243, 271, 272, 293, 300, 310, 313, 338, 339, 344, 351, 361, 364, 390, 391, 397, 404, 415, 418, 446, 447, 456, 463, 473, 490, 491, 515, 564, 588, 590, 601, 602, 604, 710, 713, 721, 735, 736, 760, 763, 790, 791, 795, 796, 810, 811, 814, 877, 879, 881], "exist": [0, 56, 69, 74, 141, 148, 160, 161, 162, 178, 179, 291, 494, 506, 510, 546, 561, 586, 598, 601, 604, 709, 734, 751, 759, 764, 766, 797, 838, 863, 877], "one": [0, 1, 45, 46, 47, 48, 51, 52, 54, 60, 61, 62, 78, 79, 80, 83, 88, 94, 103, 105, 106, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 161, 182, 187, 215, 218, 220, 232, 237, 240, 253, 254, 255, 256, 257, 258, 259, 291, 303, 308, 310, 321, 322, 323, 324, 325, 326, 327, 344, 354, 359, 361, 372, 373, 374, 375, 376, 377, 378, 379, 407, 412, 415, 428, 429, 430, 431, 432, 433, 434, 466, 471, 473, 478, 479, 480, 494, 498, 510, 528, 547, 551, 561, 575, 586, 593, 600, 601, 603, 604, 607, 608, 609, 698, 714, 717, 718, 725, 726, 727, 749, 751, 752, 758, 772, 785, 790, 798, 875, 879, 881], "local_pairwise_align_protein": [0, 60, 61, 62, 63, 64], "s1": [0, 1, 76, 222, 224, 240, 241, 245, 260, 261, 266, 267, 268, 269, 295, 310, 311, 315, 328, 333, 334, 335, 336, 344, 346, 361, 362, 366, 380, 385, 386, 387, 388, 397, 399, 415, 416, 420, 435, 436, 441, 442, 443, 444, 456, 458, 473, 474, 475, 481, 486, 487, 488, 489, 528, 533, 599, 603], "heagawghe": 0, "s2": [0, 1, 240, 245, 310, 315, 361, 366, 415, 420, 473, 475, 528, 533, 599, 603], "pawhea": 0, "return": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 37, 39, 40, 41, 42, 44, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 132, 139, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 190, 194, 195, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 219, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 282, 283, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 601, 602, 603, 604, 605, 607, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 624, 625, 626, 627, 628, 629, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 646, 647, 648, 649, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 662, 665, 666, 668, 669, 670, 671, 672, 673, 676, 677, 679, 680, 681, 682, 683, 684, 685, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 735, 736, 737, 738, 741, 742, 744, 746, 747, 748, 749, 750, 752, 756, 757, 758, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 782, 783, 784, 785, 786, 791, 792, 794, 795, 796, 797, 799, 800, 801, 803, 805, 806, 807, 809, 810, 811, 813, 814, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 833, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 869, 870, 871, 872, 873, 875, 877, 881], "start": [0, 14, 15, 16, 28, 45, 48, 56, 60, 61, 62, 63, 64, 65, 66, 132, 133, 135, 138, 139, 140, 141, 143, 146, 147, 193, 214, 220, 241, 260, 281, 282, 288, 291, 292, 311, 328, 362, 380, 416, 435, 474, 481, 547, 604, 605, 723, 726, 727, 881], "end": [0, 2, 16, 60, 61, 62, 63, 64, 65, 66, 132, 133, 135, 136, 137, 138, 139, 146, 147, 193, 203, 214, 220, 241, 260, 291, 311, 328, 362, 380, 416, 435, 474, 481, 796], "each": [0, 1, 16, 28, 38, 43, 46, 47, 50, 53, 56, 60, 61, 62, 63, 64, 65, 66, 78, 90, 103, 105, 106, 107, 108, 111, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 193, 204, 205, 214, 222, 232, 237, 240, 246, 249, 262, 264, 279, 292, 303, 308, 310, 316, 319, 329, 331, 344, 354, 359, 361, 367, 370, 381, 383, 407, 412, 415, 421, 424, 437, 439, 454, 456, 466, 471, 473, 477, 482, 484, 494, 498, 508, 510, 523, 528, 530, 533, 537, 538, 540, 541, 542, 543, 546, 551, 560, 561, 575, 585, 586, 599, 600, 601, 602, 603, 604, 607, 608, 609, 619, 620, 631, 641, 642, 652, 653, 675, 685, 686, 696, 697, 699, 709, 713, 714, 716, 717, 718, 720, 723, 726, 727, 807, 813, 875, 877, 881], "5": [0, 1, 16, 46, 54, 61, 64, 66, 73, 78, 80, 94, 105, 106, 108, 111, 133, 135, 136, 137, 138, 141, 143, 146, 147, 193, 227, 229, 239, 240, 241, 247, 249, 251, 252, 258, 264, 270, 273, 275, 291, 298, 300, 310, 311, 317, 319, 326, 331, 337, 341, 349, 351, 361, 362, 368, 370, 377, 383, 389, 394, 402, 404, 414, 415, 416, 422, 424, 426, 427, 433, 439, 445, 448, 451, 461, 463, 473, 474, 477, 484, 492, 505, 506, 520, 523, 528, 533, 537, 540, 546, 558, 568, 582, 593, 595, 599, 600, 603, 604, 607, 698, 713, 723, 726, 727, 728, 749, 754, 758, 759, 761, 764, 765, 772, 773, 774, 796, 797, 798, 803, 805, 806, 813, 814, 817, 879], "awgh": 0, "aw": [0, 94], "he": 0, "25": [0, 1, 50, 63, 78, 83, 94, 105, 106, 108, 135, 141, 142, 245, 249, 251, 264, 268, 277, 281, 315, 319, 331, 335, 366, 370, 383, 387, 420, 424, 426, 439, 443, 449, 475, 477, 484, 488, 528, 540, 599, 600, 603, 608, 723, 726, 727, 877], "4": [0, 1, 28, 45, 48, 49, 52, 54, 67, 69, 78, 81, 94, 105, 106, 135, 136, 138, 141, 142, 143, 145, 146, 147, 193, 203, 215, 220, 222, 229, 234, 239, 240, 249, 259, 263, 273, 275, 278, 279, 281, 292, 300, 305, 310, 319, 327, 330, 341, 351, 356, 361, 370, 378, 382, 394, 404, 409, 414, 415, 424, 434, 438, 448, 451, 453, 454, 456, 463, 468, 473, 477, 480, 483, 492, 494, 505, 506, 514, 520, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 541, 542, 543, 545, 558, 563, 568, 582, 589, 593, 595, 599, 601, 607, 698, 712, 713, 720, 723, 728, 749, 759, 764, 765, 772, 773, 774, 803, 805, 806, 808, 809, 813, 814, 877, 879], "8": [0, 1, 66, 132, 133, 137, 138, 143, 146, 147, 161, 220, 240, 249, 272, 277, 293, 310, 319, 339, 361, 370, 391, 415, 424, 447, 449, 473, 477, 491, 520, 539, 545, 568, 595, 600, 607, 698, 723, 727, 728, 764, 773, 806, 814, 877, 879], "similarli": [0, 1, 136, 877], "perform": [0, 1, 16, 53, 54, 66, 78, 90, 103, 105, 106, 107, 108, 136, 137, 145, 194, 222, 279, 292, 344, 397, 454, 456, 496, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 544, 545, 547, 549, 571, 573, 583, 586, 603, 604, 607, 608, 609, 631, 675, 686, 698, 718, 720, 721, 727, 728, 735, 736, 760, 763, 770, 781, 787, 788, 789, 798, 810, 811, 817, 875], "global_pairwise_align_nucleotid": 0, "gcgtgcctaaggtatgcaag": 0, "acgtgcctaggtacgcaag": 0, "20": [0, 142, 344, 528, 533, 709, 715, 723, 726, 727], "acgtgccta": 0, "ggtacgcaag": 0, "packag": [1, 16, 66, 68, 104, 134, 136, 141, 143, 533, 543, 546, 599, 600, 601, 602, 603, 606, 712, 713, 720, 723, 875, 878, 879, 880], "analyz": [1, 525, 713, 726], "biolog": [1, 53, 60, 61, 62, 89, 94, 95, 99, 101, 136, 137, 139, 141, 144, 193, 242, 243, 244, 246, 247, 250, 253, 254, 255, 258, 270, 312, 313, 314, 316, 317, 320, 321, 322, 323, 326, 337, 363, 364, 365, 367, 368, 371, 372, 373, 374, 377, 389, 417, 418, 419, 421, 422, 425, 428, 429, 430, 433, 445, 456, 494, 726, 814, 874], "It": [1, 16, 67, 74, 78, 79, 81, 94, 101, 132, 134, 136, 137, 138, 139, 141, 143, 145, 147, 161, 193, 203, 206, 214, 215, 217, 218, 220, 222, 258, 270, 326, 337, 344, 377, 389, 397, 433, 445, 449, 528, 531, 533, 537, 546, 588, 601, 602, 607, 630, 631, 663, 674, 686, 712, 713, 717, 720, 723, 726, 727, 734, 735, 736, 760, 763, 817, 839, 863, 877], "alpha": [1, 103, 109, 528, 723, 724, 728], "beta": [1, 107, 108, 110, 135], "intend": [1, 84, 85, 145, 222, 293, 344, 697, 709, 817, 818], "primari": [1, 148, 877], "interfac": [1, 51, 52, 104, 145, 257, 259, 325, 327, 376, 378, 432, 434, 479, 480, 494, 599, 600, 601, 602, 813, 875], "addition": [1, 141, 190, 203, 877, 879], "support": [1, 47, 55, 59, 80, 190, 219, 221, 222, 271, 280, 338, 343, 344, 390, 396, 397, 446, 455, 490, 493, 494, 506, 515, 521, 564, 569, 590, 596, 601, 699, 710, 711, 718, 723, 734, 754, 791, 809, 812, 813, 820, 840, 863, 874, 879, 880, 881], "discoveri": 1, "avail": [1, 107, 132, 136, 137, 138, 142, 145, 147, 178, 179, 275, 281, 290, 341, 394, 451, 492, 506, 571, 599, 600, 601, 602, 603, 642, 723, 727, 815, 875, 881], "document": [1, 35, 110, 136, 138, 143, 144, 180, 528, 709, 734, 875], "high": [1, 78, 105, 106, 136, 137, 533, 709, 712, 718], "level": [1, 57, 84, 141, 190, 528, 725, 726, 772, 820, 877], "discuss": [1, 94, 105, 106, 145, 881], "how": [1, 43, 53, 54, 90, 136, 138, 145, 190, 240, 262, 274, 291, 292, 310, 329, 340, 361, 381, 393, 415, 437, 450, 473, 482, 539, 545, 601, 718, 723, 725, 726, 727, 875, 881], "work": [1, 16, 108, 136, 143, 145, 148, 222, 344, 397, 546, 601, 713, 727, 874, 876, 877, 879], "should": [1, 16, 47, 67, 74, 78, 79, 90, 94, 101, 103, 104, 105, 106, 107, 132, 138, 142, 145, 147, 148, 160, 161, 162, 203, 222, 245, 262, 263, 264, 274, 281, 315, 329, 330, 331, 340, 344, 366, 381, 382, 383, 393, 397, 420, 437, 438, 439, 450, 475, 482, 483, 484, 524, 526, 527, 528, 539, 545, 583, 601, 603, 607, 697, 712, 713, 718, 719, 720, 723, 726, 727, 772, 793], "first": [1, 16, 28, 60, 61, 62, 63, 64, 65, 66, 69, 78, 105, 106, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 162, 215, 220, 260, 262, 278, 279, 291, 328, 329, 380, 381, 435, 437, 453, 456, 481, 482, 498, 526, 527, 528, 533, 540, 551, 575, 599, 601, 631, 686, 698, 714, 723, 726, 754, 758, 767, 768, 773, 776, 806, 807, 851, 875, 879, 881], "you": [1, 16, 60, 61, 62, 78, 103, 105, 106, 107, 108, 132, 134, 136, 137, 139, 143, 145, 146, 148, 202, 203, 215, 217, 218, 222, 344, 397, 456, 494, 586, 599, 603, 720, 723, 725, 726, 727, 756, 758, 759, 875, 877, 879, 881], "read": [1, 16, 59, 78, 105, 106, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 146, 147, 160, 161, 178, 180, 182, 187, 190, 191, 221, 222, 279, 280, 281, 291, 292, 343, 344, 396, 397, 454, 455, 456, 493, 521, 544, 546, 569, 596, 604, 711, 735, 736, 748, 749, 750, 752, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 772, 774, 775, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 820, 879], "befor": [1, 47, 136, 140, 145, 146, 251, 252, 291, 426, 427, 540, 600, 601, 727, 788, 807, 879, 881], "alpha_divers": [1, 78, 94, 107, 109], "beta_divers": [1, 103, 105, 106, 108, 110, 111], "design": [1, 108, 131, 135, 145, 546, 725], "sampl": [1, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 131, 145, 525, 528, 533, 547, 599, 600, 602, 603, 609, 642, 675, 686, 697, 699, 708, 709, 712, 713, 718, 719, 720, 723, 725, 726, 727, 759, 818], "accept": [1, 28, 56, 108, 272, 278, 279, 339, 391, 447, 453, 454, 491, 506, 522, 528, 601, 605, 607, 723, 726, 727, 769, 798, 806, 809, 863], "matrix": [1, 16, 67, 103, 107, 108, 111, 275, 341, 394, 451, 492, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 518, 519, 520, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 549, 551, 556, 557, 558, 559, 560, 561, 562, 563, 567, 568, 570, 571, 572, 573, 575, 580, 581, 582, 584, 585, 586, 587, 588, 589, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 698, 709, 712, 714, 715, 716, 718, 719, 720, 722, 724, 771, 803, 814, 878], "contain": [1, 16, 28, 46, 48, 54, 60, 61, 62, 63, 64, 65, 66, 69, 103, 104, 107, 108, 111, 131, 132, 134, 135, 136, 137, 139, 140, 142, 143, 145, 146, 147, 148, 180, 222, 224, 229, 242, 244, 249, 250, 253, 254, 255, 258, 262, 263, 264, 270, 272, 275, 281, 293, 295, 300, 312, 314, 319, 320, 321, 322, 323, 326, 329, 330, 331, 337, 339, 341, 344, 346, 351, 363, 365, 370, 371, 372, 373, 374, 377, 379, 381, 382, 383, 389, 391, 392, 394, 397, 399, 404, 417, 419, 424, 425, 428, 429, 430, 433, 437, 438, 439, 445, 447, 451, 456, 458, 463, 477, 482, 483, 484, 491, 492, 494, 508, 510, 514, 522, 523, 528, 543, 544, 546, 547, 560, 561, 563, 571, 585, 586, 589, 593, 599, 600, 601, 602, 603, 604, 606, 608, 698, 709, 713, 752, 756, 764, 794, 813, 814, 838, 841, 863, 877, 878, 879], "frequenc": [1, 47, 50, 69, 81, 251, 252, 264, 266, 268, 331, 333, 335, 383, 385, 387, 426, 427, 439, 441, 443, 484, 486, 488, 723, 725, 727, 734, 754], "taxa": [1, 69, 70, 71, 75, 76, 77, 78, 79, 81, 82, 83, 86, 88, 89, 90, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 145, 147, 528, 713, 727, 759, 814], "within": [1, 47, 94, 102, 108, 131, 133, 136, 137, 141, 143, 145, 146, 222, 344, 397, 456, 505, 533, 558, 582, 603, 604, 664, 699, 709, 725, 726, 734, 776, 817, 820, 863, 879, 881], "term": [1, 47, 74, 92, 94, 138, 607, 814], "taxon": [1, 69, 70, 71, 74, 76, 78, 87, 88, 94, 97, 98, 102, 105, 106, 135, 138, 772, 879], "plural": [1, 192], "group": [1, 101, 145, 276, 342, 395, 452, 505, 528, 533, 543, 558, 582, 599, 602, 603, 608, 609, 619, 620, 641, 652, 664, 674, 675, 685, 696, 725, 726, 727, 840, 879], "relat": [1, 78, 79, 87, 94, 105, 106, 108, 135, 136, 140, 146, 546, 593, 712, 713, 720], "organ": [1, 135, 138, 147], "constitut": [1, 494, 512], "unit": [1, 105, 138, 148, 494, 718, 720, 721, 817, 818, 880], "commun": [1, 69, 74, 78, 94, 97, 102, 105, 106, 533, 546, 599, 600, 602, 603, 709, 713, 720, 727], "usual": [1, 101, 135, 138, 145, 147, 494, 754], "defin": [1, 28, 54, 56, 62, 65, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 111, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 150, 193, 203, 217, 222, 227, 245, 263, 264, 274, 275, 281, 282, 289, 290, 293, 298, 315, 330, 331, 340, 341, 344, 349, 366, 382, 383, 393, 394, 397, 402, 420, 438, 439, 450, 451, 461, 475, 483, 484, 492, 494, 506, 511, 514, 524, 526, 527, 531, 532, 534, 535, 536, 540, 541, 542, 547, 563, 589, 601, 604, 709, 723, 810, 811, 814, 817, 851, 875, 877, 879, 881], "uniform": [1, 605], "taxonom": [1, 105], "rank": [1, 102, 147, 528, 599, 600, 601, 722, 772], "speci": [1, 69, 78, 81, 83, 88, 94, 101, 102, 142, 147, 533, 540, 698, 713, 718, 720, 734], "genu": [1, 147], "famili": 1, "In": [1, 16, 47, 78, 94, 105, 106, 108, 136, 137, 138, 139, 141, 143, 147, 222, 252, 291, 344, 397, 427, 494, 525, 528, 533, 546, 600, 601, 607, 697, 712, 713, 718, 723, 727, 734, 754, 767, 813, 875, 877, 879, 881], "ecologi": [1, 76, 78, 79, 86, 87, 102, 528, 599, 600, 601, 602, 698, 712, 713, 718, 719, 720], "i": [1, 2, 16, 28, 29, 30, 31, 32, 33, 35, 40, 42, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 111, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 160, 161, 162, 174, 175, 177, 181, 182, 183, 185, 186, 187, 188, 190, 193, 194, 200, 202, 203, 206, 212, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 229, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 288, 291, 292, 293, 294, 295, 296, 297, 298, 300, 307, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 358, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 463, 470, 473, 474, 475, 477, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 503, 505, 508, 513, 514, 515, 516, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 556, 558, 560, 562, 563, 564, 565, 567, 568, 569, 571, 572, 573, 575, 580, 582, 583, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 599, 600, 601, 602, 603, 605, 607, 630, 642, 663, 674, 675, 686, 697, 698, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 734, 735, 736, 739, 749, 752, 754, 756, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 772, 773, 774, 776, 778, 779, 780, 782, 784, 785, 787, 790, 791, 795, 798, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 824, 837, 838, 839, 840, 841, 851, 852, 863, 874, 877, 879, 880, 881], "refer": [1, 16, 35, 47, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 105, 106, 108, 193, 222, 281, 289, 290, 293, 344, 397, 456, 494, 506, 516, 526, 527, 528, 533, 537, 539, 543, 545, 547, 565, 571, 583, 591, 599, 600, 601, 602, 603, 607, 709, 712, 713, 720, 757, 786, 813, 814], "singular": [1, 722, 790, 863], "its": [1, 28, 45, 46, 48, 49, 51, 52, 53, 54, 60, 61, 62, 92, 135, 136, 137, 138, 141, 142, 146, 148, 162, 184, 190, 193, 203, 249, 256, 257, 259, 264, 319, 324, 325, 327, 331, 370, 375, 376, 378, 383, 424, 431, 432, 434, 439, 456, 477, 478, 479, 480, 484, 498, 506, 529, 551, 575, 600, 708, 712, 714, 717, 722, 734, 756, 786, 787, 796, 801, 806, 807, 813, 814, 838, 875, 879], "definit": [1, 46, 74, 135, 136, 137, 138, 139, 147, 222, 239, 240, 243, 244, 246, 253, 254, 258, 270, 273, 276, 277, 278, 279, 281, 291, 292, 293, 310, 313, 314, 316, 321, 322, 326, 337, 342, 344, 361, 364, 365, 367, 372, 373, 377, 389, 395, 397, 414, 415, 418, 419, 421, 428, 429, 433, 445, 448, 449, 452, 453, 454, 473, 506, 814, 877, 880, 881], "limit": [1, 77, 132, 141, 142, 143, 725, 726, 814], "synonym": [1, 147], "mani": [1, 69, 93, 110, 141, 145, 494, 525, 528, 607, 712, 718, 726, 727, 881], "situat": [1, 709, 725], "veri": [1, 60, 61, 62, 83, 136, 141, 148, 540, 759], "loos": [1, 607], "practic": [1, 54, 94, 136, 137, 144, 697, 762, 767], "repres": [1, 46, 74, 76, 78, 81, 90, 97, 98, 105, 106, 108, 131, 132, 133, 135, 136, 140, 141, 143, 145, 146, 147, 193, 214, 222, 275, 341, 344, 394, 397, 451, 456, 492, 494, 498, 505, 510, 520, 534, 535, 543, 544, 551, 558, 561, 568, 575, 582, 586, 595, 607, 698, 709, 723, 734, 801, 806, 813, 814, 877, 879], "featur": [1, 80, 91, 136, 139, 145, 146, 193, 203, 206, 215, 217, 218, 220, 222, 293, 344, 397, 456, 525, 528, 533, 543, 699, 708, 712, 713, 719, 720, 818, 877], "type": [1, 16, 28, 33, 45, 46, 48, 84, 95, 99, 107, 111, 131, 134, 136, 137, 138, 139, 140, 143, 146, 147, 160, 162, 175, 177, 178, 179, 181, 186, 190, 224, 227, 236, 239, 240, 241, 243, 245, 246, 247, 260, 261, 266, 267, 268, 269, 272, 273, 282, 288, 295, 298, 307, 310, 311, 313, 315, 316, 317, 328, 333, 334, 335, 336, 339, 346, 349, 358, 361, 362, 364, 366, 367, 368, 380, 385, 386, 387, 388, 391, 399, 402, 411, 414, 415, 416, 418, 420, 421, 422, 435, 436, 441, 442, 443, 444, 447, 448, 456, 458, 461, 470, 473, 474, 475, 481, 486, 487, 488, 489, 491, 494, 498, 507, 519, 523, 524, 546, 547, 551, 559, 567, 571, 575, 584, 594, 600, 603, 605, 698, 712, 713, 720, 723, 725, 735, 736, 756, 760, 763, 805, 813, 817, 824, 875, 877], "includ": [1, 47, 53, 55, 59, 67, 68, 78, 94, 105, 106, 110, 111, 134, 135, 136, 137, 140, 141, 142, 143, 145, 146, 219, 221, 229, 238, 243, 251, 252, 262, 271, 275, 277, 278, 279, 280, 291, 292, 300, 309, 313, 329, 338, 341, 343, 351, 360, 364, 381, 390, 394, 396, 397, 404, 413, 418, 426, 427, 437, 446, 449, 451, 453, 454, 455, 463, 472, 482, 490, 492, 493, 494, 504, 506, 515, 521, 528, 546, 557, 564, 569, 581, 586, 590, 593, 596, 599, 600, 602, 603, 604, 608, 698, 708, 709, 710, 711, 713, 718, 719, 723, 727, 749, 750, 752, 781, 783, 784, 787, 788, 789, 791, 804, 806, 807, 812, 875, 877, 878, 879, 880], "gene": [1, 139, 193, 203, 215, 218, 222, 456, 533, 539, 545], "metabolit": [1, 727], "purpos": [1, 66, 69, 145, 147, 281, 723, 874, 881], "singl": [1, 28, 45, 48, 56, 78, 84, 85, 93, 105, 106, 108, 135, 136, 137, 138, 141, 143, 144, 145, 146, 193, 203, 215, 229, 232, 237, 249, 262, 276, 300, 303, 308, 319, 329, 342, 351, 354, 359, 370, 381, 395, 404, 407, 412, 424, 437, 452, 463, 466, 471, 477, 482, 494, 528, 543, 607, 724, 755, 863, 875, 879, 881], "what": [1, 78, 94, 103, 105, 106, 107, 141, 145, 148, 150, 178, 179, 183, 188, 218, 262, 329, 381, 437, 482, 607, 697, 726, 879, 881], "vari": [1, 603, 723, 725, 726], "wide": [1, 54, 94, 240, 310, 361, 415, 473], "For": [1, 28, 47, 55, 59, 66, 94, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 203, 218, 219, 220, 221, 222, 271, 280, 338, 343, 344, 390, 396, 397, 446, 455, 456, 490, 493, 506, 515, 521, 528, 533, 564, 569, 590, 596, 599, 600, 601, 602, 603, 605, 607, 609, 675, 709, 710, 711, 712, 713, 723, 725, 726, 727, 754, 791, 812, 813, 815, 816, 875, 877, 879], "microbiom": [1, 94, 108, 528, 533, 718], "survei": 1, "could": [1, 28, 85, 136, 137, 144, 148, 181, 183, 186, 188, 528, 533, 547, 599, 601, 602, 603, 604, 607, 709, 725, 780, 782, 815, 816, 875], "all": [1, 16, 28, 29, 46, 47, 51, 52, 54, 60, 61, 62, 67, 69, 78, 79, 80, 90, 94, 95, 99, 102, 103, 105, 106, 107, 108, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 150, 174, 185, 193, 203, 206, 215, 217, 218, 222, 240, 243, 246, 249, 257, 259, 262, 272, 276, 291, 310, 313, 316, 319, 325, 327, 329, 339, 342, 344, 361, 364, 367, 370, 376, 378, 381, 391, 395, 397, 415, 418, 421, 424, 432, 434, 437, 447, 452, 456, 473, 477, 479, 480, 482, 491, 494, 505, 506, 510, 512, 520, 528, 530, 533, 537, 538, 540, 541, 542, 543, 546, 558, 561, 568, 582, 586, 593, 595, 599, 600, 601, 602, 603, 604, 631, 642, 686, 697, 698, 709, 717, 718, 726, 727, 728, 734, 750, 753, 754, 755, 764, 767, 768, 769, 780, 782, 783, 786, 793, 798, 799, 801, 803, 813, 840, 841, 879], "16": [1, 76, 94, 134, 136, 137, 138, 142, 143, 239, 248, 273, 318, 369, 414, 423, 448, 476, 533, 709, 723, 727, 774, 803], "rrna": [1, 533], "oral": 1, "swab": 1, "compar": [1, 88, 105, 111, 132, 133, 220, 261, 266, 267, 268, 269, 272, 333, 334, 335, 336, 339, 385, 386, 387, 388, 391, 436, 441, 442, 443, 444, 447, 486, 487, 488, 489, 491, 496, 503, 528, 546, 549, 556, 573, 580, 601, 607, 725, 726, 727, 757, 758, 759, 787, 817, 818, 877, 879], "genom": [1, 203], "studi": [1, 78, 145, 525, 528, 712, 720, 727], "hand": [1, 718], "individu": [1, 69, 70, 71, 74, 77, 78, 79, 81, 86, 87, 88, 89, 90, 95, 99, 102, 105, 106, 131, 136, 494, 528, 725, 881], "previou": [1, 60, 61, 62, 63, 64, 65, 227, 298, 349, 402, 461, 599, 601, 603], "version": [1, 72, 73, 78, 94, 103, 105, 106, 107, 131, 132, 134, 135, 138, 139, 143, 161, 246, 274, 276, 316, 340, 342, 367, 393, 395, 421, 450, 452, 528, 543, 748, 752, 815, 819, 877], "oper": [1, 45, 48, 54, 105, 132, 136, 141, 216, 222, 251, 252, 344, 397, 426, 427, 456, 525, 527, 540, 541, 542, 546, 547, 583, 601, 602, 718, 772, 796, 813, 841, 875, 877], "otu": [1, 92, 145], "histor": [1, 92, 281, 754], "research": [1, 147, 601, 718], "howev": [1, 78, 79, 94, 103, 105, 106, 107, 136, 140, 141, 145, 147, 222, 344, 397, 456, 525, 533, 603, 607, 718, 765, 820], "field": [1, 133, 137, 144, 281], "advanc": 1, "diverg": 1, "e": [1, 16, 29, 40, 47, 50, 51, 57, 74, 79, 80, 81, 82, 83, 88, 89, 94, 95, 96, 97, 98, 99, 101, 105, 106, 107, 108, 111, 126, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 193, 216, 240, 248, 249, 257, 291, 310, 318, 319, 325, 344, 361, 369, 370, 376, 379, 392, 415, 423, 424, 432, 449, 456, 473, 476, 477, 479, 494, 498, 505, 514, 520, 523, 528, 533, 543, 544, 546, 547, 551, 558, 563, 568, 571, 575, 582, 589, 593, 595, 599, 600, 601, 602, 603, 709, 715, 716, 725, 726, 728, 734, 735, 736, 749, 750, 752, 754, 755, 756, 760, 761, 763, 764, 765, 767, 768, 769, 770, 774, 778, 780, 781, 782, 783, 784, 790, 794, 795, 796, 799, 800, 801, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 818, 837, 840, 874, 875, 877, 879, 881], "amplicon": 1, "variant": [1, 78, 94, 144, 147, 494], "asv": 1, "gener": [1, 45, 48, 60, 66, 67, 68, 86, 94, 108, 137, 138, 139, 141, 146, 147, 160, 162, 175, 177, 181, 186, 189, 248, 262, 263, 318, 329, 330, 369, 381, 382, 423, 437, 438, 456, 476, 482, 483, 494, 533, 546, 570, 597, 599, 600, 601, 605, 697, 699, 709, 712, 723, 726, 727, 733, 874, 875, 877, 880], "becom": [1, 79, 136, 137, 141, 145, 203], "appropri": [1, 131, 140, 190, 240, 310, 361, 415, 473, 528, 875, 879], "therefor": [1, 45, 48, 54, 74, 78, 94, 98, 105, 106, 111, 145, 494, 528], "wa": [1, 60, 63, 69, 70, 71, 74, 77, 78, 80, 81, 82, 86, 87, 94, 95, 97, 98, 103, 105, 106, 107, 108, 134, 136, 137, 141, 143, 190, 262, 291, 329, 381, 437, 456, 482, 528, 539, 543, 545, 601, 653, 717, 725, 727, 750, 792, 813, 814, 875, 879, 881], "replac": [1, 67, 90, 136, 222, 274, 277, 340, 344, 393, 397, 449, 450, 494, 525, 528, 537, 538, 697, 721, 728, 805], "6": [1, 48, 72, 73, 78, 92, 94, 105, 106, 133, 135, 136, 137, 138, 145, 146, 147, 239, 240, 248, 249, 272, 273, 275, 293, 310, 318, 319, 339, 341, 361, 369, 370, 391, 394, 414, 415, 423, 424, 447, 448, 451, 473, 476, 477, 491, 492, 520, 528, 530, 535, 538, 539, 541, 568, 593, 595, 601, 603, 604, 607, 698, 723, 749, 754, 764, 765, 773, 774, 803, 805, 806, 813, 877], "given": [1, 55, 59, 69, 80, 83, 88, 90, 99, 103, 107, 108, 111, 136, 137, 141, 142, 145, 160, 162, 178, 179, 181, 182, 186, 187, 216, 219, 221, 271, 275, 280, 338, 341, 343, 390, 394, 396, 446, 451, 455, 490, 492, 493, 510, 515, 521, 543, 561, 564, 569, 586, 590, 596, 600, 601, 604, 710, 711, 713, 717, 722, 724, 726, 734, 769, 791, 812, 839, 840, 852, 881], "number": [1, 28, 40, 45, 48, 69, 70, 71, 72, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 105, 106, 107, 131, 132, 134, 135, 136, 138, 141, 143, 144, 146, 147, 190, 193, 203, 214, 234, 241, 249, 266, 268, 305, 311, 319, 333, 335, 356, 362, 370, 385, 387, 409, 416, 424, 441, 443, 468, 474, 477, 486, 488, 494, 509, 527, 528, 533, 537, 538, 540, 541, 542, 543, 547, 571, 599, 600, 601, 602, 603, 604, 605, 607, 642, 686, 697, 713, 717, 718, 720, 721, 723, 724, 726, 727, 728, 754, 761, 798, 817, 818], "observ": [1, 78, 81, 90, 93, 101, 105, 106, 111, 222, 249, 275, 293, 319, 341, 344, 370, 394, 397, 424, 451, 456, 477, 492, 528, 607, 698, 723, 726, 727, 785, 813, 881], "particular": [1, 734, 816, 881], "associ": [1, 35, 69, 94, 137, 145, 146, 147, 150, 175, 176, 177, 193, 214, 216, 218, 222, 344, 397, 456, 600, 607, 697, 717, 721, 724, 725, 726, 764, 770, 803, 875], "throughout": [1, 140, 281, 290, 726, 880], "array_lik": [1, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 111, 229, 247, 248, 262, 272, 300, 317, 318, 329, 339, 351, 368, 369, 381, 391, 404, 422, 423, 437, 447, 463, 476, 482, 491, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 599, 601, 602, 603, 604, 607, 714, 717, 721, 724, 727, 728], "anyth": [1, 136, 137, 144, 148, 456, 840, 851, 863, 881], "convert": [1, 132, 134, 135, 136, 138, 141, 143, 146, 190, 222, 245, 274, 275, 315, 340, 341, 344, 366, 393, 394, 397, 420, 450, 451, 456, 475, 492, 547, 588, 600, 728, 754, 819], "d": [1, 16, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 132, 133, 138, 141, 142, 222, 344, 397, 505, 509, 514, 520, 525, 526, 527, 528, 531, 532, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 558, 563, 568, 582, 589, 593, 595, 599, 600, 601, 602, 603, 607, 642, 664, 686, 699, 709, 717, 726, 727, 728, 735, 736, 749, 750, 752, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 767, 768, 769, 770, 774, 780, 781, 782, 783, 784, 790, 794, 795, 796, 798, 799, 800, 801, 803, 804, 805, 808, 809, 810, 811, 813, 814, 875, 877, 879, 881], "numpi": [1, 107, 498, 516, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 551, 565, 575, 583, 591, 599, 603, 605, 607, 608, 642, 664, 686, 697, 698, 723, 725, 726, 727, 728, 759, 798, 877], "arrai": [1, 16, 47, 50, 78, 94, 105, 106, 136, 142, 222, 239, 242, 244, 250, 267, 269, 270, 273, 275, 293, 312, 314, 320, 334, 336, 337, 341, 344, 363, 365, 371, 386, 388, 389, 392, 394, 397, 414, 417, 419, 425, 442, 444, 445, 448, 451, 456, 487, 489, 492, 494, 496, 504, 509, 512, 516, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 546, 547, 549, 557, 565, 571, 573, 581, 583, 591, 607, 608, 642, 664, 686, 698, 717, 721, 723, 724, 725, 726, 727, 728, 776, 805, 813, 877], "nativ": [1, 516, 565, 591, 718], "list": [1, 66, 78, 94, 105, 106, 109, 110, 132, 135, 137, 138, 139, 142, 145, 146, 147, 148, 160, 162, 178, 179, 190, 203, 272, 339, 391, 447, 456, 491, 504, 508, 511, 544, 546, 557, 560, 581, 585, 601, 603, 604, 620, 642, 653, 675, 708, 723, 725, 726, 727, 734, 750, 756, 764, 766, 768, 771, 780, 782, 783, 798, 799, 803, 805, 806, 813, 814, 875, 881], "result": [1, 2, 16, 17, 47, 49, 54, 60, 61, 62, 78, 79, 83, 103, 105, 106, 107, 111, 132, 133, 136, 145, 148, 190, 215, 222, 239, 240, 243, 273, 275, 310, 313, 341, 344, 361, 364, 394, 397, 414, 415, 418, 448, 451, 473, 492, 528, 533, 536, 537, 540, 586, 599, 601, 602, 603, 604, 605, 608, 619, 620, 630, 631, 641, 652, 653, 663, 664, 674, 675, 685, 696, 697, 698, 699, 708, 709, 712, 713, 718, 720, 723, 728, 767, 783, 797, 805, 806, 813, 814, 818, 875, 877, 881], "ident": [1, 132, 133, 141, 145, 498, 551, 571, 575, 607, 729, 759, 792, 879], "As": [1, 135, 138, 141, 145, 456, 516, 565, 591, 601, 603, 713, 767, 875, 881], "mention": [1, 141], "which": [1, 2, 28, 60, 61, 62, 69, 74, 78, 88, 94, 98, 101, 105, 106, 108, 132, 134, 136, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 160, 161, 162, 163, 175, 177, 178, 179, 180, 181, 186, 222, 240, 241, 252, 260, 262, 265, 275, 291, 293, 310, 311, 328, 329, 332, 341, 344, 361, 362, 380, 381, 384, 394, 397, 415, 416, 427, 435, 437, 440, 451, 456, 473, 474, 481, 482, 485, 492, 505, 525, 526, 527, 528, 533, 547, 558, 582, 599, 602, 603, 607, 713, 717, 718, 723, 724, 725, 726, 727, 759, 762, 793, 794, 805, 806, 811, 813, 814, 824, 841, 863, 875, 877, 879, 881], "row": [1, 28, 103, 107, 108, 111, 131, 143, 193, 494, 498, 513, 527, 528, 530, 533, 534, 535, 537, 538, 540, 541, 542, 543, 546, 547, 551, 562, 575, 587, 588, 593, 599, 600, 601, 602, 603, 604, 605, 607, 699, 712, 713, 716, 720, 726, 727, 817], "so": [1, 2, 47, 60, 61, 62, 63, 64, 65, 67, 78, 103, 105, 106, 107, 136, 141, 145, 148, 190, 191, 203, 206, 251, 252, 426, 427, 601, 675, 698, 712, 713, 714, 718, 720, 723, 725, 726, 727, 813, 875, 879, 881], "column": [1, 16, 28, 52, 53, 54, 107, 131, 136, 138, 139, 142, 143, 146, 147, 240, 259, 265, 310, 327, 332, 361, 378, 384, 415, 434, 440, 456, 473, 480, 485, 494, 498, 513, 517, 526, 527, 528, 533, 534, 535, 546, 551, 562, 566, 575, 587, 588, 592, 599, 600, 601, 602, 603, 604, 605, 607, 642, 686, 698, 709, 712, 713, 714, 716, 720, 721, 725, 726, 772, 776, 817, 818], "some": [1, 16, 68, 78, 80, 90, 94, 136, 138, 141, 144, 145, 160, 161, 162, 193, 217, 222, 344, 397, 527, 540, 541, 542, 713, 723, 726, 840, 879, 881], "incorpor": [1, 94, 524], "relationship": [1, 94, 141, 712, 713, 720, 723, 727, 814], "between": [1, 16, 61, 64, 74, 79, 80, 84, 95, 102, 105, 106, 107, 111, 131, 136, 137, 138, 140, 143, 146, 147, 206, 220, 240, 245, 266, 267, 268, 269, 310, 315, 333, 334, 335, 336, 361, 366, 385, 386, 387, 388, 415, 420, 441, 442, 443, 444, 473, 475, 486, 487, 488, 489, 494, 498, 510, 522, 523, 524, 528, 533, 543, 546, 547, 551, 561, 571, 575, 586, 599, 600, 601, 602, 603, 604, 606, 607, 642, 712, 713, 714, 720, 723, 726, 727, 734, 749, 757, 758, 759, 765, 774, 784, 803, 804, 814, 877, 879], "through": [1, 35, 60, 61, 62, 145, 174, 180, 185, 498, 551, 575, 718, 767, 881], "phylogenet": [1, 78, 94, 105, 106, 141, 143, 546, 607, 734, 757, 767, 814, 874, 877], "tree": [1, 78, 94, 105, 106, 141, 146, 147, 203, 544, 874, 875], "take": [1, 107, 143, 148, 160, 161, 162, 245, 272, 315, 339, 366, 391, 420, 447, 475, 491, 510, 528, 561, 571, 586, 600, 601, 675, 712, 720, 723, 724, 814, 840, 879, 881], "treenod": [1, 78, 94, 105, 106, 141, 544, 813, 814, 875, 879], "map": [1, 49, 56, 108, 150, 163, 222, 293, 344, 397, 601, 604, 607, 608, 642, 686, 709, 725, 727, 773, 776, 877], "valu": [1, 3, 4, 7, 9, 10, 11, 18, 19, 21, 23, 24, 25, 34, 37, 39, 41, 47, 51, 60, 61, 62, 63, 64, 65, 67, 69, 80, 90, 102, 103, 106, 131, 132, 133, 135, 136, 137, 138, 139, 140, 145, 146, 151, 152, 154, 156, 157, 158, 164, 165, 167, 169, 170, 171, 190, 193, 195, 197, 198, 199, 202, 207, 209, 210, 211, 214, 218, 222, 223, 228, 231, 233, 235, 239, 240, 257, 265, 272, 273, 283, 285, 286, 287, 293, 294, 299, 302, 304, 306, 310, 325, 332, 339, 344, 345, 350, 353, 355, 357, 361, 376, 384, 391, 397, 398, 403, 406, 408, 410, 414, 415, 432, 440, 447, 448, 456, 457, 462, 465, 467, 469, 473, 479, 485, 491, 497, 500, 501, 502, 505, 520, 525, 528, 530, 533, 537, 538, 539, 540, 541, 542, 545, 550, 553, 554, 555, 558, 568, 574, 577, 578, 579, 582, 595, 599, 600, 601, 602, 603, 604, 605, 607, 610, 611, 613, 615, 616, 617, 621, 622, 624, 626, 627, 628, 630, 632, 633, 635, 637, 638, 639, 642, 643, 644, 646, 648, 649, 650, 654, 655, 657, 659, 660, 661, 663, 665, 666, 668, 670, 671, 672, 674, 676, 677, 679, 681, 682, 683, 687, 688, 690, 692, 693, 694, 697, 700, 701, 703, 705, 706, 707, 709, 712, 713, 717, 718, 720, 722, 723, 724, 725, 726, 727, 734, 737, 738, 741, 744, 746, 747, 754, 756, 759, 798, 805, 816, 817, 818, 822, 823, 826, 828, 829, 830, 831, 840, 842, 843, 845, 847, 848, 849, 852, 854, 855, 857, 859, 860, 861, 863, 865, 866, 868, 870, 871, 872, 881], "tip": [1, 78, 94, 105, 106, 734, 752, 754, 756, 757, 758, 759, 761, 762, 764, 765, 767, 774, 779, 780, 781, 782, 784, 785, 787, 788, 789, 795, 796, 797, 798, 800, 801, 803, 806, 807, 808, 813, 875, 879], "optim": [1, 2, 16, 79, 103, 105, 106, 107, 603, 765, 815, 874], "time": [1, 16, 45, 48, 78, 90, 99, 105, 106, 108, 136, 137, 145, 494, 534, 535, 543, 583, 599, 600, 601, 602, 604, 608, 631, 686, 720, 723, 726, 727, 734, 798, 881], "often": [1, 78, 103, 107, 135, 136, 138, 546, 607, 713, 718, 723, 838], "faster": [1, 78, 105, 106, 108, 249, 279, 292, 319, 370, 424, 454, 477, 603, 718, 787], "repeat": [1, 137, 723, 837], "call": [1, 54, 78, 79, 84, 85, 105, 106, 134, 136, 143, 146, 148, 190, 193, 240, 248, 251, 272, 291, 310, 318, 339, 361, 369, 391, 415, 423, 426, 447, 456, 473, 476, 491, 588, 600, 601, 697, 713, 723, 750, 752, 753, 756, 767, 768, 770, 783, 784, 790, 799, 804, 811, 838, 840, 841, 851, 875, 881], "reason": [1, 79, 90, 135, 141, 726, 754], "matric": [1, 62, 65, 131, 140, 344, 494, 496, 503, 506, 511, 547, 549, 556, 573, 580, 600, 601, 604, 606, 607, 714, 718, 759], "rather": [1, 83, 141, 494, 525, 607, 814], "thu": [1, 136, 137, 141, 145, 249, 319, 370, 424, 456, 477, 498, 551, 571, 575, 599, 601, 603, 607, 718], "slow": [1, 78, 103, 105, 106, 107, 874], "possibl": [1, 16, 35, 95, 99, 136, 137, 145, 146, 217, 246, 279, 281, 292, 316, 367, 421, 454, 600, 604, 726, 759, 807, 813], "disabl": [1, 78, 103, 105, 106, 107, 881], "step": [1, 28, 45, 48, 56, 78, 103, 105, 106, 107, 143, 148, 716, 723], "pass": [1, 28, 35, 48, 55, 56, 59, 66, 103, 107, 108, 109, 110, 132, 134, 136, 138, 143, 144, 146, 160, 161, 162, 174, 180, 181, 182, 183, 185, 186, 187, 188, 190, 219, 221, 222, 245, 247, 249, 271, 272, 280, 291, 315, 317, 319, 338, 339, 343, 344, 366, 368, 370, 390, 391, 396, 397, 420, 422, 424, 446, 447, 455, 456, 475, 477, 490, 491, 493, 498, 515, 521, 551, 564, 569, 575, 586, 588, 590, 596, 601, 604, 642, 710, 711, 726, 780, 782, 791, 812, 814, 863, 879, 881], "fals": [1, 14, 15, 16, 29, 30, 31, 32, 33, 45, 46, 48, 50, 51, 52, 53, 57, 60, 61, 62, 72, 73, 78, 94, 103, 105, 106, 107, 132, 135, 136, 137, 138, 139, 141, 144, 160, 161, 162, 190, 191, 193, 203, 215, 216, 222, 223, 224, 225, 227, 229, 236, 239, 240, 242, 243, 244, 246, 249, 250, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 291, 292, 293, 294, 295, 296, 298, 300, 307, 310, 312, 313, 314, 316, 319, 320, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 349, 351, 358, 361, 363, 364, 365, 367, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 397, 398, 399, 400, 402, 404, 411, 414, 415, 417, 418, 419, 421, 424, 425, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 461, 463, 470, 473, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 495, 496, 503, 505, 528, 533, 539, 545, 548, 549, 556, 558, 572, 573, 580, 582, 586, 588, 601, 604, 607, 608, 609, 631, 642, 675, 718, 720, 723, 725, 726, 728, 752, 757, 758, 761, 769, 775, 778, 779, 784, 792, 804, 806, 807, 809, 818, 840, 863, 877, 879, 881], "danger": 1, "If": [1, 16, 28, 45, 47, 48, 50, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 66, 69, 72, 73, 78, 79, 80, 84, 90, 94, 103, 105, 106, 107, 108, 111, 132, 136, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 160, 161, 162, 175, 177, 181, 182, 186, 187, 190, 193, 202, 206, 219, 220, 222, 224, 229, 239, 240, 241, 243, 245, 247, 249, 252, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 275, 276, 291, 293, 295, 300, 310, 311, 313, 315, 317, 319, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 341, 342, 344, 346, 351, 361, 362, 364, 366, 368, 370, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 394, 395, 397, 399, 404, 414, 415, 416, 418, 420, 422, 424, 427, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 451, 452, 453, 454, 456, 458, 463, 473, 474, 475, 477, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 498, 505, 506, 508, 509, 510, 513, 514, 515, 520, 523, 524, 528, 530, 533, 534, 535, 537, 538, 544, 547, 551, 558, 560, 561, 562, 563, 564, 568, 575, 582, 585, 586, 587, 588, 589, 590, 595, 599, 600, 601, 602, 603, 604, 605, 607, 642, 653, 686, 697, 708, 709, 710, 712, 713, 714, 717, 718, 721, 723, 724, 725, 726, 727, 728, 754, 756, 757, 761, 764, 767, 768, 772, 777, 780, 782, 785, 791, 796, 797, 798, 803, 805, 806, 807, 813, 814, 817, 818, 819, 820], "invalid": [1, 50, 54, 78, 94, 103, 105, 106, 107, 136, 222, 344, 397, 600, 601, 709, 751, 756, 766, 777, 786, 790], "encount": [1, 145, 765, 767, 774], "when": [1, 16, 45, 47, 48, 54, 57, 60, 61, 62, 69, 79, 94, 95, 99, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 160, 161, 162, 181, 182, 183, 186, 187, 188, 190, 203, 215, 222, 240, 247, 248, 251, 252, 265, 293, 310, 317, 318, 332, 344, 361, 368, 369, 384, 397, 415, 422, 423, 426, 427, 440, 456, 473, 476, 485, 523, 528, 546, 599, 601, 602, 603, 605, 607, 630, 663, 674, 712, 720, 723, 724, 725, 726, 727, 728, 731, 759, 793, 810, 811, 814, 818, 819, 840, 875, 879, 881], "difficult": 1, "interpret": [1, 47, 74, 78, 103, 105, 106, 107, 131, 141, 145, 525, 712, 713, 720], "error": [1, 47, 78, 90, 94, 103, 105, 106, 107, 136, 137, 143, 145, 148, 190, 217, 275, 341, 394, 451, 492, 570, 597, 598, 599, 601, 603, 723, 727, 733, 819, 875], "messag": [1, 78, 103, 105, 106, 107, 620, 664, 819, 875], "incorrect": 1, "recommend": [1, 83, 94, 143, 146, 222, 293, 344, 397, 456, 528, 546, 709, 712, 720, 726], "user": [1, 47, 104, 112, 132, 145, 147, 148, 150, 160, 161, 162, 181, 183, 186, 188, 274, 340, 393, 450, 528, 533, 713, 718, 815, 874, 877], "care": [1, 47, 136, 138, 603], "ensur": [1, 16, 47, 78, 105, 106, 148, 222, 344, 397, 496, 530, 533, 537, 549, 571, 573, 755, 817], "data": [1, 28, 54, 78, 80, 90, 94, 103, 105, 106, 107, 108, 111, 132, 135, 137, 139, 140, 142, 144, 145, 146, 147, 190, 222, 293, 344, 397, 456, 494, 496, 498, 516, 525, 526, 527, 528, 529, 532, 533, 535, 537, 539, 543, 545, 547, 549, 551, 565, 571, 573, 575, 591, 600, 607, 608, 630, 663, 674, 697, 709, 712, 713, 717, 723, 725, 726, 727, 772, 803, 807, 814, 838, 841, 874, 875, 877, 881], "condit": [1, 84, 85, 726], "follow": [1, 51, 52, 54, 66, 73, 78, 79, 94, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 193, 222, 229, 257, 259, 300, 325, 327, 344, 351, 376, 378, 397, 404, 432, 434, 456, 463, 479, 480, 498, 506, 526, 527, 528, 531, 532, 534, 535, 536, 540, 542, 543, 546, 551, 575, 599, 600, 601, 603, 604, 608, 709, 712, 727, 753, 790, 841, 879, 881], "confid": [1, 68, 73, 77, 84, 533, 723, 724, 734, 754], "met": [1, 344, 863], "safe": [1, 78, 103, 105, 106, 107, 145, 718, 728, 752], "cast": [1, 141, 240, 310, 361, 415, 473, 546, 547, 605, 709], "integ": [1, 16, 103, 107, 131, 132, 136, 137, 140, 141, 142, 143, 144, 229, 300, 351, 404, 463, 528, 533, 546, 547, 599, 602, 603, 604, 605, 686, 728], "neg": [1, 16, 61, 64, 67, 80, 145, 291, 530, 537, 538, 571, 712, 713, 718, 723, 727, 814], "dimension": [1, 516, 527, 540, 541, 542, 547, 565, 583, 591, 712, 719, 720, 726, 727], "equal": [1, 33, 42, 47, 67, 69, 101, 105, 106, 107, 136, 194, 200, 206, 212, 227, 236, 282, 288, 298, 307, 349, 358, 402, 411, 456, 461, 470, 494, 496, 503, 523, 540, 549, 556, 573, 580, 599, 601, 602, 603, 605, 607, 697, 712, 717, 718, 721, 726, 727, 728, 757, 813, 817, 818], "being": [1, 16, 45, 47, 48, 60, 61, 62, 78, 103, 107, 136, 137, 143, 147, 543, 603, 607, 697, 726, 735, 736, 756, 760, 763, 796, 875, 877], "confirm": [1, 119, 599, 603, 727], "uniqu": [1, 54, 58, 132, 136, 140, 141, 145, 146, 147, 275, 341, 394, 451, 492, 524, 546, 603, 709, 753, 762, 767], "root": [1, 78, 89, 94, 105, 106, 141, 147, 544, 735, 736, 749, 750, 751, 752, 754, 755, 756, 760, 763, 764, 765, 766, 769, 770, 772, 774, 778, 780, 782, 783, 790, 795, 796, 799, 801, 803, 805, 806, 808, 810, 811, 813, 814, 879], "ha": [1, 16, 28, 46, 51, 52, 60, 61, 62, 67, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 182, 187, 190, 222, 239, 240, 243, 246, 256, 257, 258, 259, 270, 273, 277, 278, 279, 281, 291, 292, 293, 310, 313, 316, 324, 325, 326, 327, 337, 344, 361, 364, 367, 375, 376, 377, 378, 389, 397, 414, 415, 418, 421, 431, 432, 433, 434, 445, 448, 449, 453, 454, 456, 473, 478, 479, 480, 528, 530, 546, 697, 712, 714, 725, 726, 727, 755, 775, 778, 779, 793, 797, 813, 840, 877, 879], "node": [1, 78, 105, 106, 544, 729, 730, 734, 735, 736, 739, 743, 749, 750, 751, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 795, 796, 799, 800, 803, 804, 805, 806, 807, 808, 809, 813, 875, 879], "except": [1, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 141, 142, 143, 145, 149, 161, 184, 291, 508, 560, 570, 585, 597, 598, 602, 713, 729, 730, 731, 732, 733, 762, 813, 815, 816, 851, 874, 880], "branch": [1, 78, 94, 106, 544, 734, 754, 755, 764, 805, 808, 814, 879], "name": [1, 55, 59, 78, 94, 105, 106, 132, 133, 137, 138, 139, 141, 142, 144, 145, 146, 148, 150, 175, 176, 177, 182, 187, 193, 219, 221, 265, 271, 280, 281, 282, 288, 290, 332, 338, 343, 384, 390, 396, 440, 446, 455, 485, 490, 493, 494, 506, 511, 515, 521, 528, 533, 539, 544, 564, 569, 590, 596, 599, 600, 602, 603, 608, 620, 664, 699, 709, 710, 711, 729, 734, 748, 750, 751, 752, 754, 756, 757, 758, 759, 762, 766, 767, 768, 769, 770, 772, 774, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 793, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 812, 813, 832, 838, 875, 879], "correspond": [1, 53, 78, 94, 105, 106, 136, 137, 139, 144, 146, 182, 187, 252, 265, 281, 291, 332, 384, 427, 440, 453, 454, 485, 498, 528, 543, 551, 575, 698, 699, 712, 713, 716, 727, 734, 767, 772, 776, 785, 806, 813], "There": [1, 54, 79, 90, 133, 138, 141, 144, 246, 316, 367, 421, 571, 718, 726, 727, 875, 879, 881], "ecolog": [1, 76, 713, 718], "literatur": [1, 74, 727], "softwar": [1, 136, 137, 145, 874], "measur": [1, 74, 76, 82, 84, 85, 88, 89, 93, 94, 95, 97, 98, 99, 105, 106, 494, 528, 539, 545, 546, 712, 725, 726, 734, 754], "alwai": [1, 16, 135, 138, 141, 143, 145, 161, 190, 193, 214, 291, 764, 820, 881], "assum": [1, 69, 78, 80, 86, 89, 105, 106, 134, 136, 137, 140, 142, 160, 162, 229, 277, 278, 279, 300, 351, 404, 463, 498, 533, 546, 547, 551, 575, 586, 607, 608, 713, 717, 723, 724, 726, 727], "abund": [1, 69, 70, 78, 80, 83, 90, 94, 102, 103, 105, 106, 107, 108, 111, 528, 533, 698, 712, 713, 719, 720, 727], "where": [1, 2, 67, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 102, 107, 108, 111, 131, 136, 140, 141, 142, 145, 146, 148, 242, 244, 248, 250, 260, 262, 267, 269, 270, 272, 312, 314, 318, 320, 328, 329, 334, 336, 337, 339, 363, 365, 369, 371, 380, 381, 386, 388, 389, 391, 392, 417, 419, 423, 425, 435, 437, 442, 444, 445, 447, 476, 481, 482, 487, 489, 491, 494, 498, 526, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 542, 543, 551, 575, 601, 607, 697, 709, 717, 719, 720, 721, 723, 727, 728, 734, 758, 759, 769, 773, 806, 809, 838, 879, 881], "three": [1, 28, 93, 143, 147, 540, 546, 571, 604, 698, 709, 726, 727, 759, 881], "were": [1, 62, 65, 78, 83, 103, 105, 106, 107, 141, 143, 144, 227, 262, 298, 329, 349, 381, 402, 437, 461, 482, 599, 601, 603, 709, 726, 727, 780, 782, 816, 881], "onli": [1, 16, 54, 81, 84, 94, 111, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 190, 203, 218, 222, 240, 247, 281, 310, 317, 344, 361, 368, 397, 415, 422, 456, 473, 494, 508, 525, 528, 540, 560, 571, 585, 586, 588, 593, 599, 603, 604, 697, 713, 718, 720, 725, 726, 727, 755, 758, 759, 761, 764, 767, 790, 798, 803, 807, 820, 863, 874, 879, 881], "second": [1, 16, 28, 60, 61, 62, 63, 64, 65, 66, 137, 143, 148, 162, 193, 215, 282, 498, 528, 551, 575, 727, 773, 776, 806, 875, 881], "form": [1, 28, 60, 192, 498, 547, 551, 571, 575, 593, 805], "among": [1, 74, 94, 138, 520, 568, 595, 609, 713, 720], "expect": [1, 108, 132, 148, 177, 184, 222, 344, 397, 533, 534, 535, 546, 607, 712, 713, 720, 730, 731, 805, 881], "3": [1, 16, 28, 33, 45, 46, 48, 50, 53, 54, 56, 57, 60, 64, 69, 77, 78, 81, 86, 94, 97, 102, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 193, 203, 215, 220, 227, 229, 239, 240, 241, 246, 247, 263, 264, 266, 272, 273, 275, 278, 279, 291, 292, 298, 300, 310, 311, 316, 317, 330, 331, 333, 339, 341, 344, 349, 351, 361, 362, 367, 368, 382, 383, 385, 391, 394, 402, 404, 414, 415, 416, 421, 422, 438, 439, 441, 447, 448, 451, 453, 454, 456, 461, 463, 473, 474, 483, 484, 486, 491, 492, 505, 514, 517, 520, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 539, 540, 541, 542, 545, 547, 558, 563, 566, 568, 582, 589, 592, 593, 595, 599, 600, 601, 603, 604, 605, 607, 608, 609, 631, 642, 675, 698, 699, 709, 712, 713, 718, 723, 725, 726, 727, 728, 749, 759, 764, 765, 772, 773, 774, 797, 801, 803, 805, 806, 808, 809, 814, 819, 874, 877, 879, 881], "indic": [1, 15, 29, 30, 33, 42, 51, 52, 69, 72, 73, 88, 94, 111, 131, 136, 137, 145, 148, 193, 194, 200, 203, 206, 212, 224, 227, 229, 236, 242, 244, 247, 248, 250, 253, 254, 255, 256, 257, 258, 259, 262, 267, 269, 270, 272, 275, 281, 282, 288, 295, 298, 300, 307, 312, 314, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 334, 336, 337, 339, 341, 346, 349, 351, 358, 363, 365, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 386, 388, 389, 391, 392, 394, 399, 402, 404, 411, 417, 419, 422, 423, 425, 428, 429, 430, 431, 432, 433, 434, 437, 442, 444, 445, 447, 451, 458, 461, 463, 470, 476, 478, 479, 480, 482, 487, 489, 491, 492, 494, 528, 533, 544, 599, 601, 602, 603, 607, 697, 708, 709, 725, 769, 771, 809, 852, 863, 879, 881], "singleton": [1, 69, 72, 73, 77, 79, 81, 93, 96, 100, 148], "tripleton": 1, "do": [1, 45, 48, 90, 131, 136, 143, 145, 148, 190, 222, 227, 269, 298, 336, 344, 349, 388, 397, 402, 444, 456, 461, 489, 523, 528, 601, 604, 642, 720, 754, 767, 797, 798, 879, 881], "ani": [1, 16, 46, 47, 54, 56, 66, 67, 70, 101, 102, 136, 138, 140, 141, 145, 146, 160, 161, 162, 182, 187, 190, 193, 203, 217, 218, 222, 344, 397, 456, 494, 523, 528, 530, 601, 604, 608, 642, 664, 712, 717, 723, 725, 726, 751, 754, 755, 756, 766, 774, 803, 805, 813, 840, 841, 851, 863, 879, 881], "ton": 1, "doubleton": [1, 72, 73, 75, 77, 93], "paramet": [1, 2, 16, 17, 28, 30, 33, 42, 45, 47, 48, 49, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 148, 150, 160, 161, 162, 173, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 190, 193, 194, 200, 203, 206, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 227, 229, 236, 239, 240, 241, 245, 247, 248, 249, 252, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 288, 290, 291, 292, 295, 298, 300, 307, 310, 311, 315, 317, 318, 319, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 346, 349, 351, 358, 361, 362, 366, 368, 369, 370, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 393, 394, 395, 396, 397, 399, 402, 404, 411, 414, 415, 416, 420, 422, 423, 424, 427, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 450, 451, 452, 453, 454, 455, 456, 458, 461, 463, 470, 473, 474, 475, 476, 477, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 503, 505, 506, 508, 509, 510, 512, 513, 514, 515, 520, 521, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 551, 556, 558, 560, 561, 562, 563, 564, 568, 569, 572, 573, 575, 580, 582, 585, 586, 587, 588, 589, 590, 595, 596, 599, 600, 601, 602, 603, 604, 605, 607, 630, 642, 663, 674, 686, 697, 709, 710, 711, 712, 713, 714, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 734, 749, 751, 752, 755, 756, 757, 758, 759, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 797, 798, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 837, 838, 839, 840, 841, 851, 852, 863, 881], "either": [1, 28, 35, 54, 56, 60, 61, 62, 94, 132, 145, 146, 160, 161, 162, 252, 262, 293, 329, 381, 427, 437, 482, 524, 601, 603, 697, 709, 712, 717, 725, 727, 813], "string": [1, 2, 16, 44, 103, 107, 108, 111, 131, 134, 136, 137, 141, 143, 145, 146, 238, 248, 249, 265, 272, 275, 276, 281, 289, 309, 318, 319, 332, 339, 341, 342, 360, 369, 370, 384, 391, 394, 395, 413, 423, 424, 440, 447, 451, 452, 472, 476, 477, 485, 491, 492, 494, 498, 504, 510, 528, 533, 546, 547, 551, 557, 561, 575, 581, 586, 599, 602, 603, 605, 708, 709, 748, 752, 806, 814, 819, 879], "faith_pd": [1, 94], "ten": 1, "faith": [1, 78, 94, 546], "pd": [1, 28, 48, 52, 57, 78, 94, 103, 132, 133, 147, 222, 259, 293, 327, 344, 378, 397, 434, 456, 480, 505, 517, 520, 528, 533, 546, 558, 566, 568, 582, 592, 593, 595, 599, 600, 603, 608, 698, 699, 709, 712, 720, 725, 726, 772, 817], "about": [1, 55, 59, 90, 134, 136, 137, 141, 145, 146, 148, 203, 219, 221, 222, 271, 280, 293, 338, 343, 344, 390, 396, 397, 446, 455, 456, 490, 493, 515, 521, 523, 564, 569, 590, 596, 698, 710, 711, 720, 726, 727, 791, 812, 815, 816, 877], "100": [1, 132, 133, 136, 139, 218, 528, 533, 727, 881], "unweighted_unifrac": [1, 106], "hundr": [1, 108], "unweight": [1, 94, 105, 106, 721], "unifrac": [1, 78, 94, 105, 106, 108, 111, 718], "latter": [1, 494], "mai": [1, 2, 16, 47, 56, 78, 85, 126, 133, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 161, 178, 179, 190, 193, 217, 222, 249, 293, 319, 344, 370, 397, 424, 456, 477, 494, 498, 508, 523, 528, 546, 551, 560, 575, 585, 601, 603, 607, 697, 712, 723, 725, 726, 727, 728, 772, 815, 838, 840, 875, 877], "case": [1, 47, 60, 61, 62, 70, 108, 136, 141, 143, 145, 147, 150, 222, 252, 265, 275, 332, 341, 384, 394, 397, 427, 440, 451, 485, 492, 506, 528, 533, 547, 601, 607, 712, 717, 719, 727, 754, 787, 813, 840, 841, 875, 879], "run": [1, 78, 103, 105, 106, 107, 137, 144, 145, 247, 317, 368, 422, 528, 599, 600, 601, 603, 604, 607, 619, 641, 652, 685, 696, 709, 877, 881], "like": [1, 60, 61, 62, 108, 136, 138, 139, 140, 142, 145, 148, 265, 332, 384, 440, 485, 494, 546, 607, 630, 642, 663, 664, 674, 686, 718, 720, 726, 727, 839, 875, 881], "small": [1, 140, 146, 525, 537, 538, 720], "neglig": 1, "know": [1, 16, 78, 105, 106, 134, 136, 143, 146, 148, 528, 723, 815, 875], "might": [1, 80, 140, 142, 600, 725, 726, 727, 759, 875], "ve": [1, 136, 137, 727, 879], "develop": [1, 2, 108, 111, 135, 145, 160, 161, 162, 528, 814, 874, 875, 881], "To": [1, 35, 78, 105, 106, 136, 137, 138, 141, 144, 145, 148, 190, 222, 344, 397, 528, 533, 571, 593, 599, 601, 603, 607, 723, 754, 875, 881], "discov": [1, 762], "get_alpha_diversity_metr": [1, 103, 110], "get_beta_diversity_metr": [1, 107, 109, 111], "respect": [1, 28, 72, 136, 139, 142, 145, 147, 160, 161, 162, 180, 181, 183, 186, 188, 190, 249, 319, 370, 424, 456, 477, 505, 510, 512, 520, 528, 543, 558, 561, 568, 582, 586, 593, 595, 607, 699], "addit": [1, 66, 67, 78, 104, 105, 106, 110, 135, 136, 137, 138, 139, 143, 144, 145, 222, 344, 397, 494, 525, 526, 527, 528, 546, 571, 734, 755, 767, 768, 813, 840], "won": [1, 78, 103, 105, 106, 107, 137, 194, 713], "t": [1, 16, 28, 45, 47, 48, 49, 53, 54, 58, 66, 78, 80, 94, 103, 105, 106, 107, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 160, 162, 184, 191, 193, 194, 222, 227, 236, 241, 245, 249, 251, 252, 253, 254, 255, 258, 266, 267, 268, 269, 277, 291, 298, 307, 311, 315, 319, 321, 322, 323, 326, 333, 334, 335, 336, 344, 349, 358, 362, 366, 370, 372, 373, 374, 377, 385, 386, 387, 388, 397, 402, 411, 416, 420, 424, 426, 427, 428, 429, 430, 433, 441, 442, 443, 444, 449, 456, 461, 470, 474, 475, 477, 486, 487, 488, 489, 494, 512, 526, 528, 533, 534, 535, 539, 540, 544, 547, 571, 598, 604, 712, 713, 718, 720, 722, 723, 725, 727, 728, 758, 759, 796, 797, 805, 813, 814, 815, 877, 880, 881], "those": [1, 104, 145, 607, 697, 712, 727, 764, 798, 803, 814, 840, 877], "scipi": [1, 79, 104, 107, 110, 516, 523, 528, 533, 544, 547, 565, 571, 583, 591, 593, 600, 601, 603, 607, 718, 723, 726, 727, 771], "spatial": [1, 104, 107, 110, 516, 523, 547, 565, 571, 583, 591, 593, 603], "distanc": [1, 16, 94, 104, 105, 106, 107, 108, 110, 111, 131, 140, 141, 266, 268, 333, 335, 385, 387, 441, 443, 486, 488, 505, 508, 514, 516, 520, 526, 539, 606, 607, 709, 712, 713, 715, 718, 720, 734, 748, 749, 757, 759, 774, 796, 803, 814, 877, 878, 879], "pdist": [1, 104, 107, 110, 607], "creat": [1, 16, 28, 45, 48, 49, 53, 55, 56, 57, 58, 135, 136, 139, 141, 143, 145, 163, 174, 185, 190, 191, 193, 203, 214, 215, 219, 222, 271, 272, 293, 338, 339, 344, 390, 391, 397, 446, 447, 456, 490, 491, 509, 510, 512, 514, 515, 517, 518, 528, 537, 538, 546, 561, 563, 564, 566, 586, 589, 590, 592, 593, 605, 607, 642, 698, 709, 710, 755, 756, 777, 791, 814, 877, 879, 881], "7": [1, 63, 73, 94, 108, 136, 137, 138, 146, 147, 193, 203, 215, 220, 222, 229, 240, 291, 300, 310, 351, 361, 397, 404, 415, 463, 473, 520, 533, 568, 595, 600, 601, 603, 604, 607, 698, 723, 759, 773, 797, 805, 806, 814, 818, 877], "23": [1, 142, 145, 146, 290, 528, 814, 877], "64": [1, 108, 137, 145, 281, 282, 809], "14": [1, 73, 83, 94, 135, 137, 142, 243, 247, 313, 317, 364, 368, 418, 422, 528, 533, 608, 727, 765, 803], "35": [1, 135, 137, 138, 144, 525, 727], "42": [1, 54, 79, 136, 142, 143, 145, 222, 245, 315, 366, 397, 420, 475, 600, 603], "12": [1, 135, 142, 456, 528, 533, 539, 723, 877], "40": [1, 81, 136, 145, 147, 543, 725, 727], "44": [1, 95, 603, 813], "9": [1, 132, 133, 134, 136, 139, 142, 145, 146, 190, 193, 203, 222, 243, 247, 293, 313, 317, 344, 364, 368, 397, 418, 422, 456, 528, 533, 607, 608, 698, 712, 713, 715, 716, 718, 719, 720, 723, 761, 764, 773, 803, 806, 813, 814, 877], "45": [1, 142, 145, 727], "19": [1, 135, 142, 723], "abcdef": 1, "ll": [1, 78, 105, 106, 600, 601, 604, 698, 723, 726, 727, 879, 881], "s_": [1, 69, 71, 72, 90, 101], "ob": [1, 72, 101], "adiv_sob": 1, "sob": [1, 91, 92, 93], "A": [1, 16, 28, 49, 50, 53, 54, 55, 58, 60, 62, 65, 69, 72, 77, 78, 79, 80, 82, 83, 89, 94, 97, 105, 106, 108, 131, 132, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 174, 178, 179, 185, 192, 193, 214, 218, 219, 222, 243, 249, 255, 271, 275, 282, 288, 293, 313, 319, 323, 338, 341, 344, 364, 370, 374, 390, 394, 397, 418, 424, 430, 446, 451, 456, 477, 490, 492, 494, 505, 506, 510, 512, 514, 515, 519, 520, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 558, 561, 563, 564, 567, 568, 571, 582, 586, 589, 590, 594, 595, 600, 601, 602, 603, 605, 607, 620, 642, 664, 708, 709, 710, 712, 713, 718, 720, 725, 726, 727, 734, 735, 736, 749, 754, 757, 759, 760, 763, 764, 765, 766, 769, 770, 771, 773, 774, 776, 783, 791, 793, 795, 796, 801, 803, 810, 811, 813, 863, 875, 879, 881], "b": [1, 16, 49, 54, 56, 57, 58, 78, 79, 80, 90, 94, 111, 137, 140, 141, 145, 191, 222, 344, 397, 456, 498, 505, 506, 509, 514, 517, 520, 544, 546, 551, 558, 563, 566, 568, 575, 582, 589, 592, 593, 595, 600, 601, 697, 709, 725, 726, 735, 736, 748, 749, 750, 752, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 774, 775, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 805, 807, 808, 809, 810, 811, 813, 814, 839, 875, 877, 879], "c": [1, 2, 16, 28, 46, 53, 54, 56, 57, 66, 69, 78, 79, 80, 81, 82, 94, 95, 97, 99, 105, 106, 111, 135, 136, 137, 141, 143, 145, 146, 147, 162, 222, 232, 237, 243, 249, 251, 252, 303, 308, 313, 319, 344, 354, 359, 364, 370, 397, 407, 412, 418, 424, 426, 427, 456, 466, 471, 477, 494, 505, 509, 512, 514, 517, 520, 525, 527, 532, 539, 540, 541, 542, 544, 545, 546, 558, 563, 566, 568, 582, 589, 592, 593, 595, 600, 601, 709, 719, 725, 726, 735, 736, 748, 749, 750, 752, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 774, 775, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 805, 807, 808, 809, 810, 811, 813, 814, 877, 879], "f": [1, 16, 54, 70, 84, 94, 108, 132, 133, 137, 141, 144, 146, 147, 191, 344, 601, 602, 603, 713, 716, 723, 726, 735, 736, 749, 750, 752, 754, 755, 756, 760, 761, 763, 764, 765, 767, 768, 769, 770, 774, 780, 781, 782, 783, 784, 790, 794, 795, 796, 799, 800, 801, 803, 804, 808, 809, 810, 811, 813, 879], "int64": [1, 28, 46, 54, 239, 243, 273, 313, 364, 414, 418, 448, 456, 528, 877], "next": [1, 78, 84, 85, 105, 106, 135, 141, 148, 456, 528, 686, 712, 813, 879, 881], "same": [1, 28, 46, 47, 48, 50, 54, 56, 74, 78, 83, 94, 95, 99, 105, 106, 136, 137, 138, 139, 141, 144, 146, 148, 206, 220, 227, 229, 236, 239, 240, 243, 245, 246, 262, 266, 267, 268, 269, 273, 274, 278, 281, 282, 291, 298, 300, 307, 310, 313, 315, 316, 329, 333, 334, 335, 336, 340, 349, 351, 358, 361, 364, 366, 367, 381, 385, 386, 387, 388, 393, 402, 404, 411, 414, 415, 418, 420, 421, 437, 441, 442, 443, 444, 448, 450, 453, 456, 461, 463, 470, 473, 475, 482, 486, 487, 488, 489, 496, 498, 506, 507, 508, 510, 519, 523, 524, 528, 533, 549, 551, 559, 560, 561, 567, 573, 575, 584, 585, 586, 588, 594, 599, 600, 601, 602, 603, 604, 607, 697, 712, 713, 717, 718, 720, 726, 727, 728, 768, 798, 813, 817, 877, 879], "sinc": [1, 28, 45, 48, 57, 80, 135, 136, 138, 143, 145, 147, 194, 249, 291, 319, 370, 424, 456, 477, 528, 601, 723, 727, 807, 820, 881], "order": [1, 16, 38, 43, 49, 53, 54, 57, 103, 107, 131, 132, 136, 140, 141, 142, 143, 146, 215, 222, 237, 246, 249, 275, 279, 281, 292, 308, 316, 319, 341, 344, 359, 367, 370, 394, 397, 412, 421, 424, 451, 454, 471, 477, 492, 496, 498, 505, 508, 520, 528, 533, 544, 549, 551, 558, 560, 568, 573, 575, 582, 585, 588, 593, 595, 599, 600, 601, 602, 603, 604, 607, 712, 721, 725, 726, 784, 803, 804, 805, 813, 815, 817, 879, 881], "io": [1, 55, 59, 78, 105, 106, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 546, 564, 569, 590, 596, 709, 710, 711, 772, 791, 812, 813, 839, 874, 879], "stringio": [1, 78, 105, 106, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 190, 546, 813, 814, 875, 879], "u1": [1, 78, 105, 106], "u2": [1, 78, 105, 106], "u3": [1, 78, 105, 106], "u4": [1, 78, 105, 106], "75": [1, 50, 78, 83, 105, 106, 266, 333, 385, 441, 486, 528, 546, 600, 603, 809], "u5": [1, 78, 105, 106], "u6": [1, 78, 105, 106], "u7": [1, 78, 105, 106], "adiv_faith_pd": 1, "00": [1, 132, 133, 136, 139, 142, 240, 277, 310, 361, 415, 449, 473, 814, 877], "50": [1, 62, 65, 136, 139, 142, 240, 310, 361, 415, 473, 528, 533, 608, 709, 726, 727, 877], "float64": [1, 54, 131, 240, 310, 361, 415, 473, 528, 593, 603, 698], "now": [1, 83, 135, 136, 138, 143, 456, 525, 528, 600, 697, 698, 723, 726, 727, 879, 881], "brai": 1, "curti": 1, "notic": [1, 136, 141, 143, 727, 881], "bc_dm": 1, "braycurti": 1, "6x6": [1, 603], "78787879": 1, "86666667": 1, "30927835": 1, "85714286": 1, "81521739": 1, "78142077": 1, "86813187": 1, "1627907": 1, "87709497": 1, "09392265": 1, "71597633": 1, "87777778": 1, "89285714": 1, "68235294": 1, "weight": [1, 78, 94, 105, 106, 141, 608, 609, 631, 642, 653, 675, 717, 721, 813], "becaus": [1, 47, 53, 54, 78, 105, 106, 132, 136, 137, 138, 141, 143, 144, 145, 148, 227, 262, 291, 298, 329, 349, 381, 402, 437, 456, 461, 482, 528, 601, 713, 718, 720, 722, 725, 754, 759, 762, 806], "need": [1, 45, 48, 53, 78, 105, 106, 108, 131, 139, 141, 148, 160, 162, 190, 203, 218, 293, 528, 533, 534, 535, 544, 599, 600, 602, 603, 604, 697, 698, 713, 720, 723, 726, 727, 756, 759, 817, 818, 840, 881], "again": [1, 136, 137, 543, 814], "wu_dm": 1, "weighted_unifrac": [1, 105], "77549923": 1, "82857143": 1, "42512039": 1, "8547619": 1, "10937312": 1, "26433692": 1, "98435423": 1, "24270353": 1, "46774194": 1, "95224719": 1, "16025641": 1, "86111111": 1, "98796148": 1, "30870431": 1, "82967033": 1, "determin": [1, 30, 33, 42, 51, 52, 78, 94, 103, 105, 106, 107, 140, 148, 178, 179, 190, 224, 227, 236, 253, 254, 255, 256, 257, 258, 259, 261, 282, 288, 295, 298, 307, 321, 322, 323, 324, 325, 326, 327, 346, 349, 358, 372, 373, 374, 375, 376, 377, 378, 379, 399, 402, 411, 428, 429, 430, 431, 432, 433, 434, 436, 458, 461, 470, 478, 479, 480, 503, 528, 556, 580, 603, 607, 697, 718, 723, 725, 726, 813, 881], "significantli": [1, 53, 528, 599, 602, 603], "correl": [1, 539, 545, 546, 600, 601, 604, 606, 607, 699, 713, 714, 720, 723, 727, 759, 879], "mantel": [1, 546, 604, 607], "them": [1, 80, 138, 143, 145, 194, 206, 215, 216, 274, 340, 393, 450, 456, 601, 642, 717, 718, 720, 841], "Then": [1, 528, 540, 608, 698], "p": [1, 16, 66, 78, 87, 88, 94, 344, 528, 533, 543, 546, 599, 601, 602, 603, 604, 607, 698, 712, 713, 714, 720, 723, 726, 727], "signific": [1, 145, 528, 533, 599, 601, 602, 603, 604, 607, 726, 727], "base": [1, 54, 61, 64, 69, 72, 73, 77, 78, 82, 83, 88, 89, 90, 94, 97, 99, 105, 106, 132, 136, 138, 142, 144, 145, 193, 214, 222, 262, 293, 329, 344, 381, 397, 437, 456, 482, 498, 547, 551, 575, 599, 601, 602, 603, 607, 642, 712, 713, 720, 723, 725, 726, 727, 757, 769, 770, 813, 839, 877, 878, 879, 881], "05": [1, 142, 528, 533, 607, 723, 724, 726, 727, 817], "r": [1, 16, 78, 79, 83, 84, 85, 86, 87, 94, 105, 106, 137, 138, 147, 190, 222, 344, 397, 506, 525, 526, 527, 531, 532, 533, 534, 535, 543, 599, 600, 601, 602, 603, 607, 709, 712, 713, 720, 756, 797], "p_valu": [1, 601, 607], "n": [1, 16, 70, 71, 77, 79, 80, 81, 86, 87, 88, 89, 90, 94, 96, 102, 131, 132, 133, 134, 136, 137, 138, 142, 143, 144, 146, 147, 148, 160, 161, 162, 190, 191, 222, 262, 275, 329, 341, 344, 368, 381, 394, 397, 437, 451, 482, 492, 537, 538, 546, 601, 604, 607, 697, 712, 713, 714, 717, 719, 720, 721, 723, 727, 728, 735, 736, 748, 756, 760, 763, 769, 774, 776, 783, 798, 799, 806, 813, 814, 819, 877], "922404392093": 1, "true": [1, 14, 15, 16, 29, 30, 31, 32, 33, 45, 46, 48, 49, 50, 51, 52, 53, 57, 58, 60, 61, 62, 72, 73, 78, 79, 94, 101, 103, 105, 106, 107, 108, 111, 132, 135, 136, 137, 138, 139, 141, 144, 150, 160, 161, 162, 181, 186, 190, 191, 193, 203, 215, 220, 222, 223, 224, 226, 227, 229, 236, 239, 240, 242, 243, 244, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 291, 292, 293, 294, 295, 297, 298, 300, 307, 310, 312, 313, 314, 316, 319, 320, 321, 322, 323, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 348, 349, 351, 358, 361, 363, 364, 365, 367, 370, 371, 372, 373, 374, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 397, 398, 399, 401, 402, 404, 411, 414, 415, 417, 418, 419, 421, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 463, 470, 473, 477, 479, 480, 483, 484, 485, 486, 487, 488, 489, 491, 492, 495, 496, 503, 505, 508, 524, 528, 533, 534, 535, 539, 546, 547, 548, 549, 556, 558, 560, 571, 572, 573, 580, 582, 585, 586, 588, 599, 601, 603, 604, 607, 642, 653, 717, 718, 720, 721, 725, 726, 728, 752, 754, 756, 761, 769, 775, 777, 778, 779, 781, 784, 787, 788, 789, 792, 793, 794, 795, 804, 806, 807, 809, 813, 814, 840, 841, 851, 863, 877, 879, 881], "princip": [1, 603, 698, 709, 712, 718, 719], "coordin": [1, 138, 144, 193, 203, 206, 214, 215, 220, 533, 544, 603, 608, 642, 675, 686, 698, 699, 709, 712, 718, 719, 720], "analysi": [1, 78, 90, 105, 106, 136, 143, 525, 526, 528, 533, 543, 599, 602, 603, 608, 609, 630, 631, 663, 674, 675, 686, 698, 709, 712, 713, 718, 719, 720, 723, 726, 727], "pcoa": [1, 142, 603, 699, 709, 719], "our": [1, 80, 137, 145, 148, 161, 191, 262, 329, 381, 437, 482, 698, 723, 726, 727, 728, 877, 881], "ordin": [1, 125, 603, 818, 819, 878], "wu_pc": 1, "plot": [1, 699], "realli": 1, "interest": [1, 145, 456, 528, 546, 607, 712, 720, 726, 780, 782, 881], "context": [1, 16, 191, 192, 523, 709, 814], "let": [1, 136, 137, 139, 143, 144, 146, 193, 203, 272, 339, 391, 447, 456, 491, 528, 601, 697, 722, 723, 726, 727, 815, 877, 879, 881], "visual": [1, 709], "panda": [1, 28, 52, 57, 107, 132, 133, 147, 222, 259, 327, 344, 378, 397, 434, 480, 517, 528, 533, 566, 592, 593, 599, 600, 602, 603, 604, 608, 642, 686, 698, 709, 725, 726, 772, 817, 877], "sample_md": 1, "datafram": [1, 28, 52, 107, 132, 133, 147, 222, 259, 293, 327, 344, 378, 397, 434, 456, 480, 505, 517, 520, 528, 533, 558, 566, 568, 582, 592, 595, 599, 600, 602, 603, 604, 608, 642, 686, 698, 699, 709, 712, 713, 719, 720, 725, 726, 772, 817, 877], "gut": [1, 145, 709], "skin": [1, 709], "tongu": 1, "body_sit": [1, 709], "subject": [1, 132, 133, 145, 881], "color": [1, 84, 85, 514, 563, 589, 709], "taken": [1, 132, 133, 136, 143, 146, 147, 528, 607, 839], "fig": [1, 514, 563, 589, 709], "axis_label": [1, 709], "pc": [1, 608, 709], "titl": [1, 132, 133, 138, 146, 514, 563, 589, 709], "cmap": [1, 514, 563, 589, 709], "jet": 1, "don": [1, 16, 54, 136, 145, 251, 252, 426, 427, 526, 528, 604, 720, 723, 727, 758, 759, 796, 814], "see": [1, 53, 54, 55, 59, 66, 78, 94, 103, 105, 106, 107, 108, 110, 111, 133, 135, 136, 137, 141, 143, 144, 145, 147, 148, 219, 221, 245, 271, 280, 281, 292, 315, 338, 343, 366, 390, 396, 420, 446, 455, 456, 475, 490, 493, 498, 515, 521, 534, 535, 551, 564, 569, 575, 590, 596, 599, 600, 601, 602, 603, 604, 607, 698, 709, 710, 711, 718, 720, 722, 723, 727, 791, 812, 875, 881], "cluster": [1, 601, 603, 771, 877], "instead": [1, 50, 97, 135, 136, 138, 145, 148, 150, 160, 161, 162, 216, 249, 262, 264, 266, 268, 275, 319, 329, 331, 333, 335, 341, 370, 381, 383, 385, 387, 394, 424, 437, 439, 441, 443, 451, 477, 482, 484, 486, 488, 492, 547, 599, 601, 603, 717, 726, 727, 759, 814, 815, 875], "bodi": [1, 709], "site": [1, 138, 142, 262, 329, 381, 437, 482, 698, 699, 709, 718], "appear": [1, 69, 132, 143, 145, 146, 508, 560, 585, 600, 712, 713, 718, 723], "closer": [1, 881], "anoth": [1, 33, 42, 45, 54, 78, 105, 106, 138, 140, 141, 194, 200, 203, 206, 212, 217, 220, 227, 236, 245, 267, 269, 282, 288, 298, 307, 315, 334, 336, 349, 358, 366, 386, 388, 402, 411, 420, 442, 444, 456, 461, 470, 475, 487, 489, 494, 496, 549, 573, 607], "space": [1, 136, 141, 143, 145, 146, 203, 206, 215, 525, 526, 527, 531, 532, 534, 535, 642, 699, 709, 712, 719], "techniqu": [1, 79, 525, 712, 713, 878], "exploratori": 1, "quantifi": 1, "strength": 1, "statist": [1, 69, 72, 77, 83, 90, 526, 528, 533, 599, 601, 602, 603, 604, 607, 712, 713, 717, 723, 726, 727, 874], "accomplish": [1, 525, 875], "anosim": [1, 602, 603], "test": [1, 33, 42, 94, 148, 194, 200, 206, 212, 227, 236, 282, 288, 298, 307, 349, 358, 402, 411, 461, 470, 525, 528, 533, 546, 599, 601, 602, 603, 604, 606, 607, 619, 641, 652, 685, 696, 723, 726, 727, 817, 818, 838, 874], "permut": [1, 194, 599, 601, 602, 603, 604, 607], "999": [1, 456, 599, 601, 602, 603, 604, 607], "33333333333333331": 1, "anti": [1, 599], "insignific": 1, "strong": [1, 222, 599, 601, 607], "separ": [1, 132, 133, 136, 137, 139, 140, 141, 142, 143, 145, 603, 713], "explor": [1, 104, 698], "add": [1, 61, 64, 145, 146, 148, 173, 193, 203, 215, 217, 227, 298, 349, 402, 456, 461, 530, 537, 538, 540, 541, 542, 751, 764, 766], "rich": [1, 68, 72, 78, 86, 89, 94, 101], "straight": 1, "forward": [1, 279, 291, 292, 454], "seri": [1, 57, 103, 139, 528, 533, 593, 599, 600, 602, 603, 608, 699, 723], "investig": 1, "categori": [1, 145, 146, 608, 609, 619, 620, 630, 641, 642, 652, 653, 664, 674, 675, 685, 686, 696, 709, 723, 725, 726], "boxplot": 1, "show": [1, 203, 723, 879], "spearman": [1, 600, 601, 604], "numer": [1, 79, 83, 132, 140, 145, 147, 543, 600, 601, 642, 698, 709, 712, 713, 719, 720, 727, 818], "relev": [1, 16, 138, 533, 726, 814, 877], "give": [1, 141, 712, 713, 720, 759], "u": [1, 62, 65, 78, 84, 87, 105, 106, 135, 136, 138, 147, 227, 232, 236, 237, 277, 298, 303, 307, 308, 344, 349, 354, 358, 359, 397, 402, 407, 411, 412, 449, 461, 466, 470, 471, 528, 531, 532, 544, 601, 722, 727, 877, 881], "symmetr": [1, 494, 498, 546, 547, 551, 571, 575, 586, 601, 605, 607, 712, 757], "2x2": [1, 140], "corr": 1, "numeric_onli": 1, "000000": [1, 814], "939336": 1, "class": [2, 16, 28, 51, 52, 67, 69, 72, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 160, 162, 163, 175, 177, 178, 179, 180, 193, 203, 222, 240, 257, 259, 281, 293, 310, 325, 327, 344, 361, 376, 378, 397, 415, 432, 434, 456, 473, 479, 480, 494, 528, 547, 571, 609, 620, 631, 642, 653, 664, 675, 686, 699, 734, 756, 813, 820, 840, 852, 863, 874, 875], "wrap": [2, 143, 146, 864], "struct": [2, 138], "access": [2, 51, 52, 131, 135, 136, 138, 147, 257, 259, 282, 288, 325, 327, 376, 378, 432, 434, 479, 480, 546, 814, 820], "note": [2, 16, 28, 35, 40, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 105, 106, 108, 110, 135, 136, 137, 138, 139, 141, 143, 144, 145, 193, 203, 204, 205, 217, 222, 225, 226, 229, 240, 243, 246, 249, 251, 262, 273, 275, 277, 278, 279, 281, 282, 289, 290, 291, 292, 293, 296, 297, 300, 310, 313, 316, 319, 329, 341, 344, 347, 348, 351, 361, 364, 367, 370, 381, 394, 397, 400, 401, 404, 415, 418, 421, 424, 426, 437, 448, 449, 451, 453, 454, 456, 459, 460, 463, 473, 477, 482, 492, 494, 498, 505, 506, 516, 519, 520, 523, 524, 528, 533, 534, 535, 537, 539, 543, 544, 545, 547, 551, 558, 565, 567, 568, 571, 575, 582, 583, 588, 591, 594, 595, 599, 600, 601, 602, 603, 604, 607, 697, 709, 712, 713, 718, 720, 721, 726, 727, 728, 752, 754, 755, 756, 757, 759, 764, 770, 772, 798, 803, 805, 806, 807, 808, 813, 814, 817, 819, 838, 839, 877, 879, 881], "cigar": [2, 16], "empti": [2, 29, 51, 79, 133, 136, 139, 143, 178, 179, 249, 257, 319, 325, 370, 376, 424, 432, 477, 479, 508, 528, 560, 585, 725, 756, 806, 817, 875], "depend": [2, 73, 76, 77, 78, 94, 103, 105, 106, 107, 136, 137, 146, 160, 161, 162, 190, 252, 427, 498, 551, 575, 601, 603, 605, 664, 718, 735, 736, 759, 760, 763, 807, 813, 840, 851, 875, 879, 881], "target_begin": 2, "query_begin": 2, "read_sequ": 2, "alia": [2, 78, 91, 92, 94, 105, 106, 139, 516, 528, 538, 565, 591, 780, 782], "ssw": [2, 16, 66], "reference_sequ": 2, "attribut": [2, 28, 56, 131, 135, 136, 138, 139, 142, 144, 145, 146, 150, 193, 202, 203, 218, 222, 227, 275, 281, 293, 298, 341, 344, 349, 394, 397, 402, 451, 456, 461, 492, 494, 505, 520, 547, 558, 568, 571, 582, 595, 620, 653, 664, 699, 708, 719, 726, 734, 735, 736, 749, 753, 756, 760, 763, 777, 805, 813, 818, 820, 821, 824, 831, 852, 877], "format": [2, 55, 59, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 163, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 193, 219, 221, 271, 276, 280, 281, 289, 338, 342, 343, 390, 395, 396, 446, 452, 455, 490, 493, 494, 515, 516, 521, 547, 564, 565, 569, 571, 583, 588, 590, 591, 596, 630, 663, 674, 710, 711, 752, 772, 791, 812, 814, 874, 879], "optimal_alignment_scor": 2, "charact": [2, 16, 33, 46, 47, 50, 54, 67, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 146, 147, 148, 222, 227, 229, 232, 234, 236, 237, 238, 242, 243, 244, 247, 249, 250, 251, 252, 253, 254, 255, 258, 265, 270, 272, 274, 275, 281, 291, 293, 298, 300, 303, 305, 307, 308, 309, 312, 313, 314, 317, 319, 320, 321, 322, 323, 326, 332, 337, 339, 340, 341, 344, 349, 351, 354, 356, 358, 359, 360, 363, 364, 365, 368, 370, 371, 372, 373, 374, 377, 379, 384, 389, 391, 392, 393, 394, 397, 402, 404, 407, 409, 411, 412, 413, 417, 418, 419, 422, 424, 425, 426, 427, 428, 429, 430, 433, 440, 445, 447, 450, 451, 456, 461, 463, 466, 468, 470, 471, 472, 477, 485, 491, 492, 494, 509, 512, 523, 877], "begin": [2, 16, 135, 136, 137, 138, 142, 145, 146, 161, 193, 291, 727], "query_end": 2, "suboptimal_alignment_scor": 2, "suboptim": [2, 16], "target_end_optim": 2, "target_end_suboptim": 2, "built": [2, 16, 28, 150, 163, 193, 203, 222, 281, 293, 344, 397, 456, 494, 547, 571, 609, 620, 631, 642, 653, 664, 675, 686, 699, 734, 759, 798, 820, 840, 852, 863, 875], "ins": [2, 16, 28, 150, 163, 193, 203, 222, 281, 293, 344, 397, 456, 494, 547, 571, 609, 620, 631, 642, 653, 664, 675, 686, 699, 734, 820, 840, 852, 863], "self": [3, 4, 5, 7, 8, 9, 10, 11, 13, 18, 19, 21, 22, 23, 24, 25, 27, 34, 37, 39, 41, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 185, 186, 187, 188, 195, 197, 198, 199, 201, 203, 207, 209, 210, 211, 213, 217, 228, 229, 231, 233, 235, 273, 283, 285, 286, 287, 299, 300, 302, 304, 306, 350, 351, 353, 355, 357, 403, 404, 406, 408, 410, 448, 462, 463, 465, 467, 469, 496, 497, 500, 501, 502, 503, 505, 507, 519, 520, 549, 550, 553, 554, 555, 556, 558, 559, 567, 568, 573, 574, 577, 578, 579, 580, 582, 584, 594, 595, 610, 611, 613, 614, 615, 616, 617, 618, 621, 622, 624, 625, 626, 627, 628, 629, 632, 633, 635, 636, 637, 638, 639, 640, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 657, 658, 659, 660, 661, 662, 665, 666, 668, 669, 670, 671, 672, 673, 676, 677, 679, 680, 681, 682, 683, 684, 687, 688, 690, 691, 692, 693, 694, 695, 700, 701, 703, 704, 705, 706, 707, 735, 736, 737, 738, 741, 742, 744, 746, 747, 748, 749, 750, 751, 753, 754, 757, 758, 759, 760, 763, 764, 765, 766, 783, 784, 785, 786, 792, 793, 794, 799, 800, 801, 804, 805, 806, 807, 808, 810, 811, 822, 823, 826, 827, 828, 829, 830, 833, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 858, 859, 860, 861, 862, 865, 866, 868, 869, 870, 871, 872, 873, 879, 881], "kei": [5, 28, 45, 48, 49, 51, 56, 67, 135, 136, 138, 146, 214, 218, 222, 246, 257, 265, 272, 316, 325, 332, 339, 344, 367, 376, 384, 391, 397, 421, 432, 440, 447, 456, 479, 485, 491, 510, 561, 586, 785, 805, 813, 881], "helper": [6, 20, 36, 153, 166, 196, 208, 230, 284, 301, 352, 405, 464, 499, 552, 576, 612, 623, 634, 645, 656, 667, 678, 689, 702, 740, 817, 818, 825, 844, 856, 867, 879], "pickl": [6, 20, 36, 153, 166, 196, 208, 230, 284, 301, 352, 405, 464, 499, 552, 576, 612, 623, 634, 645, 656, 667, 678, 689, 702, 740, 825, 844, 856, 867], "hash": [8, 22, 155, 168, 614, 625, 636, 647, 658, 669, 680, 691, 704, 742, 827, 846, 858, 869], "str": [13, 17, 27, 33, 38, 43, 55, 59, 67, 103, 107, 108, 109, 110, 111, 132, 138, 139, 146, 150, 159, 172, 175, 176, 177, 181, 182, 183, 186, 187, 188, 190, 201, 213, 219, 221, 222, 224, 232, 237, 238, 241, 245, 246, 247, 248, 249, 260, 261, 263, 265, 266, 267, 268, 269, 271, 272, 274, 275, 280, 281, 289, 295, 303, 308, 309, 311, 315, 316, 317, 318, 319, 328, 330, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 346, 354, 359, 360, 362, 366, 367, 368, 369, 370, 380, 382, 384, 385, 386, 387, 388, 390, 391, 393, 394, 396, 397, 399, 407, 412, 413, 416, 420, 421, 422, 423, 424, 435, 436, 438, 440, 441, 442, 443, 444, 446, 447, 450, 451, 455, 456, 458, 466, 471, 472, 474, 475, 476, 477, 481, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 498, 504, 505, 506, 508, 511, 513, 514, 515, 520, 521, 528, 533, 539, 544, 547, 548, 551, 557, 558, 560, 562, 563, 564, 568, 569, 572, 575, 581, 582, 585, 587, 589, 590, 595, 596, 599, 600, 602, 603, 604, 605, 618, 620, 629, 640, 642, 651, 653, 662, 664, 673, 684, 695, 699, 708, 709, 710, 711, 718, 725, 726, 734, 748, 752, 756, 767, 768, 780, 782, 791, 795, 797, 801, 803, 812, 813, 814, 819, 833, 838, 850, 862, 873], "inidic": [14, 16], "els": [14, 15, 141, 148, 161, 181, 186, 223, 276, 294, 342, 345, 395, 398, 452, 456, 457, 714, 756], "bool": [14, 16, 29, 30, 33, 42, 45, 48, 50, 51, 52, 53, 57, 60, 61, 62, 72, 73, 78, 94, 103, 105, 106, 107, 108, 111, 160, 161, 162, 181, 186, 193, 194, 200, 206, 212, 214, 216, 220, 222, 223, 224, 227, 229, 236, 239, 240, 242, 244, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 274, 275, 276, 282, 288, 294, 295, 298, 300, 307, 310, 312, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 349, 351, 358, 361, 363, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 397, 398, 399, 402, 404, 411, 414, 415, 417, 419, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 447, 450, 451, 452, 456, 457, 458, 461, 463, 470, 473, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 488, 489, 491, 492, 495, 496, 503, 505, 508, 524, 528, 534, 535, 539, 545, 547, 548, 549, 556, 558, 560, 572, 573, 580, 582, 585, 588, 601, 604, 607, 642, 653, 717, 718, 720, 721, 725, 726, 728, 752, 757, 758, 761, 775, 777, 778, 779, 781, 784, 787, 788, 789, 792, 804, 806, 807, 814, 818, 840], "whether": [14, 29, 30, 33, 42, 51, 52, 72, 73, 94, 139, 148, 160, 162, 190, 224, 227, 236, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 282, 288, 295, 298, 307, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 346, 349, 358, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 399, 402, 411, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 458, 461, 470, 478, 479, 480, 482, 483, 484, 494, 503, 524, 528, 539, 545, 556, 580, 599, 601, 602, 603, 708, 720, 721], "is_zero_bas": 15, "set": [15, 16, 46, 49, 53, 54, 78, 94, 105, 106, 111, 136, 138, 140, 143, 150, 190, 203, 216, 222, 240, 249, 262, 265, 275, 293, 310, 319, 329, 332, 341, 344, 361, 370, 381, 384, 394, 397, 415, 424, 437, 440, 451, 456, 473, 477, 482, 485, 492, 506, 514, 520, 525, 537, 563, 568, 589, 595, 607, 697, 718, 720, 723, 725, 726, 727, 735, 736, 751, 753, 756, 760, 763, 764, 766, 786, 800, 801, 813, 820, 831, 832, 837, 877, 881], "alig": 15, "stripe": [16, 66], "band": 16, "must": [16, 28, 45, 48, 54, 55, 59, 78, 80, 94, 105, 106, 107, 108, 111, 132, 134, 136, 137, 140, 141, 142, 143, 145, 146, 161, 218, 219, 221, 222, 240, 245, 265, 271, 278, 280, 310, 315, 332, 338, 343, 344, 361, 366, 384, 390, 396, 397, 415, 420, 440, 446, 453, 455, 456, 473, 475, 485, 490, 493, 508, 515, 521, 528, 533, 544, 547, 560, 564, 569, 585, 590, 596, 599, 600, 601, 602, 603, 605, 607, 630, 663, 674, 697, 709, 710, 711, 712, 717, 726, 727, 728, 756, 791, 798, 806, 812, 813, 814, 817, 819, 839, 840, 863, 881], "instanti": [16, 135, 148, 293, 881], "callabl": [16, 28, 45, 48, 56, 103, 107, 108, 111, 510, 528, 561, 586], "reus": [16, 722], "larg": [16, 79, 83, 105, 106, 131, 136, 143, 537, 538, 600, 720, 726, 752, 759], "collect": [16, 95, 99, 101, 190, 505, 543, 558, 582, 697], "upper": [16, 83, 84, 136, 143, 193, 203, 215, 217, 586, 593, 601], "lowercas": [16, 135, 136, 137, 138, 144, 222, 240, 293, 310, 344, 361, 397, 415, 456, 473], "q": [16, 83, 133, 344, 713, 714], "h": [16, 69, 70, 74, 82, 94, 95, 96, 97, 98, 99, 136, 143, 146, 191, 222, 344, 397, 755, 756, 761, 764, 795, 796, 797, 800, 801, 810, 811, 813, 879], "l": [16, 70, 71, 78, 83, 84, 94, 102, 135, 137, 147, 291, 344, 543, 601, 698, 712, 713, 720, 806], "k": [16, 69, 74, 94, 95, 97, 98, 99, 108, 222, 249, 263, 264, 319, 330, 331, 344, 370, 382, 383, 397, 424, 438, 439, 477, 483, 484, 494, 506, 524, 543, 600, 607, 764, 798, 805, 813], "m": [16, 63, 69, 78, 94, 105, 106, 132, 133, 135, 137, 143, 147, 222, 281, 282, 291, 344, 397, 506, 600, 603, 607, 709, 712, 713, 719, 720, 722, 725, 797, 814], "w": [16, 47, 69, 70, 77, 90, 94, 102, 132, 133, 134, 190, 222, 344, 397, 528, 543], "y": [16, 69, 80, 137, 144, 222, 344, 397, 536, 540, 541, 545, 601, 604, 607, 698, 709, 713, 714, 719, 720, 725, 759, 805], "v": [16, 105, 106, 222, 227, 236, 298, 307, 344, 349, 358, 397, 402, 411, 461, 470, 525, 539, 543, 545, 725, 726, 805], "z": [16, 54, 77, 145, 344, 604, 709, 759, 805], "x": [16, 80, 96, 137, 144, 275, 293, 341, 344, 394, 451, 492, 525, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 540, 541, 542, 543, 545, 601, 604, 607, 698, 699, 709, 712, 713, 714, 720, 723, 726, 727, 759, 769, 790, 793, 805, 809, 814, 839, 881], "gap_open_penalti": [16, 60, 61, 62, 63, 64, 65], "int": [16, 40, 50, 57, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 111, 132, 138, 139, 144, 161, 190, 193, 203, 214, 218, 229, 234, 241, 247, 248, 252, 260, 262, 263, 264, 266, 268, 272, 290, 300, 305, 311, 317, 318, 328, 329, 330, 331, 333, 335, 339, 351, 356, 362, 368, 369, 380, 381, 382, 383, 385, 387, 391, 404, 409, 416, 422, 423, 427, 435, 437, 438, 439, 441, 443, 447, 453, 454, 463, 468, 474, 476, 481, 482, 483, 484, 486, 488, 491, 512, 513, 524, 526, 527, 533, 539, 545, 562, 587, 599, 601, 602, 603, 604, 605, 607, 642, 686, 697, 709, 713, 717, 718, 720, 721, 724, 726, 727, 728, 734, 755, 759, 761, 770, 776, 785, 786, 798, 813, 818, 819, 839, 852], "option": [16, 28, 45, 47, 48, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 69, 72, 73, 78, 83, 84, 85, 90, 94, 97, 103, 105, 106, 107, 108, 111, 134, 136, 137, 142, 143, 145, 146, 147, 150, 160, 161, 162, 181, 182, 183, 186, 187, 188, 190, 193, 203, 214, 218, 219, 220, 221, 222, 227, 239, 240, 241, 245, 247, 248, 249, 252, 260, 262, 263, 264, 266, 268, 271, 274, 275, 280, 281, 290, 291, 292, 298, 310, 311, 315, 317, 318, 319, 328, 329, 330, 331, 333, 335, 338, 340, 341, 343, 344, 349, 361, 362, 366, 368, 369, 370, 380, 381, 382, 383, 385, 387, 390, 393, 394, 396, 397, 402, 414, 415, 416, 420, 422, 423, 424, 427, 435, 437, 438, 439, 441, 443, 446, 450, 451, 453, 454, 455, 456, 461, 473, 474, 475, 476, 477, 481, 482, 483, 484, 486, 488, 490, 492, 493, 505, 508, 510, 514, 515, 521, 524, 528, 533, 534, 535, 537, 538, 547, 558, 560, 561, 563, 564, 569, 582, 585, 586, 588, 589, 590, 596, 599, 600, 601, 602, 603, 604, 605, 607, 642, 697, 709, 710, 711, 713, 714, 717, 718, 720, 721, 724, 725, 726, 727, 728, 734, 755, 772, 777, 791, 798, 805, 806, 812, 813, 814, 817, 818, 839, 840, 841, 863, 877, 881], "cannot": [16, 28, 45, 48, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 136, 137, 140, 141, 145, 181, 182, 186, 187, 190, 240, 293, 310, 361, 415, 473, 528, 599, 600, 601, 602, 603, 697, 709, 725, 727, 728, 767, 770, 798, 875], "gap_extend_penalti": [16, 60, 61, 62, 63, 64, 65], "score_s": 16, "your": [16, 54, 78, 103, 105, 106, 107, 137, 145, 148, 203, 603, 723, 726, 875, 879, 881], "estim": [16, 69, 72, 73, 77, 79, 81, 83, 84, 85, 90, 96, 533, 717, 725, 726, 727], "best": [16, 60, 61, 62, 63, 64, 65, 84, 85, 525, 600, 712, 816], "255": [16, 713], "mask_length": 16, "suggest": [16, 161, 181, 182, 186, 187, 726], "len": [16, 28, 40, 234, 305, 356, 409, 468, 506, 605, 727, 735, 736, 760, 763, 801, 813, 881], "special": [16, 140, 148], "concern": [16, 140], "detail": [16, 53, 54, 66, 67, 94, 108, 110, 111, 135, 136, 137, 138, 139, 143, 144, 146, 147, 148, 292, 456, 498, 551, 575, 600, 604, 709, 712, 713, 720, 814, 875], "descript": [16, 69, 78, 83, 88, 89, 99, 103, 105, 106, 107, 131, 132, 136, 137, 138, 139, 141, 143, 145, 147, 498, 551, 575, 757, 813, 877, 879], "after": [16, 45, 48, 60, 61, 62, 136, 137, 145, 146, 147, 148, 206, 217, 533, 539, 540, 600, 601, 604, 607, 712, 727, 788, 790, 807], "locat": [16, 55, 59, 135, 141, 146, 175, 176, 177, 193, 219, 221, 247, 248, 271, 280, 317, 318, 338, 343, 368, 369, 390, 396, 422, 423, 446, 455, 476, 490, 493, 515, 521, 564, 569, 590, 596, 710, 711, 791, 795, 812, 817, 880], "heurist": [16, 603, 718], "found": [16, 101, 133, 135, 136, 137, 138, 141, 143, 146, 181, 183, 186, 188, 275, 341, 394, 451, 492, 508, 560, 585, 600, 601, 603, 727, 757, 767, 768, 769, 770, 780, 782, 798, 813], "check": [16, 137, 161, 181, 186, 194, 203, 206, 217, 495, 496, 534, 535, 546, 547, 548, 549, 571, 572, 573, 608, 712, 713, 726, 817, 818, 838, 881], "largest": [16, 102], "maxim": [16, 94, 600, 713], "sw": [16, 725], "avoid": [16, 145, 146, 148, 217, 698, 721, 810, 811], "pick": [16, 726], "belong": [16, 70, 74, 139, 528, 533, 599, 602, 603], "share": [16, 51, 52, 54, 69, 240, 257, 259, 310, 325, 327, 361, 376, 378, 415, 432, 434, 456, 473, 479, 480, 879], "partial": [16, 94, 217], "librari": [16, 66, 105, 106, 136, 874, 875], "mask": [16, 275, 341, 394, 451, 492, 539, 545], "loci": 16, "nearbi": 16, "unmask": 16, "element": [16, 140, 190, 494, 498, 510, 530, 534, 535, 547, 551, 561, 571, 575, 586, 686, 709, 712, 716, 717, 721, 724, 726, 727, 728, 837], "15": [16, 62, 65, 83, 133, 142, 145, 608, 723, 726, 727, 803], "mask_auto": 16, "automat": [16, 45, 48, 54, 55, 59, 140, 144, 145, 174, 185, 193, 219, 221, 265, 271, 280, 332, 338, 343, 384, 390, 396, 440, 446, 455, 485, 490, 493, 515, 521, 546, 564, 569, 590, 596, 699, 710, 711, 759, 791, 812, 875], "max": [16, 69, 70, 90, 726, 727, 774], "score_onli": 16, "prevent": 16, "babp": 16, "overrid": [16, 61, 64, 94, 150, 160, 161, 162, 181, 186, 790, 881], "score_filt": 16, "distance_filt": 16, "override_skip_babp": 16, "highest": [16, 141], "preced": [16, 134, 141, 143], "less": [16, 69, 78, 85, 105, 106, 108, 143, 145, 263, 264, 330, 331, 382, 383, 438, 439, 483, 484, 524, 601, 604, 697, 712, 728, 785, 819], "save": [16, 203, 547, 630, 663, 674, 787], "computation": 16, "filter": [16, 47, 66, 144, 243, 313, 364, 418, 604, 806, 881], "overridden": [16, 28, 138, 814], "regardless": [16, 46, 53, 54, 146, 291, 512, 605], "argument": [16, 28, 55, 56, 59, 66, 140, 160, 161, 162, 174, 181, 182, 183, 185, 186, 187, 188, 219, 221, 265, 271, 278, 279, 280, 332, 338, 343, 384, 390, 396, 440, 446, 453, 454, 455, 485, 490, 493, 494, 510, 515, 521, 526, 561, 564, 569, 586, 590, 596, 605, 710, 711, 791, 812, 840, 863], "caus": [16, 145, 190, 291], "calcul": [16, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 108, 111, 131, 251, 252, 426, 427, 528, 533, 536, 544, 545, 599, 600, 601, 602, 603, 607, 631, 642, 686, 717, 721, 724, 726, 727, 757, 764, 803, 874, 877], "none": [16, 28, 45, 47, 48, 55, 56, 57, 61, 62, 64, 65, 66, 78, 90, 94, 103, 105, 106, 107, 108, 132, 136, 140, 148, 150, 160, 162, 175, 176, 177, 181, 186, 190, 193, 203, 214, 216, 218, 219, 222, 241, 245, 247, 248, 249, 260, 271, 275, 276, 293, 311, 315, 317, 318, 319, 328, 338, 341, 342, 344, 362, 366, 368, 369, 370, 380, 390, 394, 395, 397, 416, 420, 422, 423, 424, 435, 446, 451, 452, 456, 474, 475, 476, 477, 481, 490, 492, 510, 514, 515, 528, 533, 534, 535, 537, 538, 539, 547, 561, 563, 564, 571, 586, 589, 590, 599, 600, 601, 602, 603, 604, 605, 609, 631, 642, 675, 697, 699, 709, 710, 714, 717, 718, 721, 722, 724, 725, 726, 727, 734, 754, 755, 759, 762, 764, 772, 781, 783, 786, 787, 788, 789, 791, 798, 802, 803, 805, 806, 807, 810, 811, 813, 814, 840, 841, 863, 877, 879, 881], "effect": [16, 66, 76, 105, 106, 145, 190, 275, 341, 394, 451, 492, 505, 558, 582, 723, 725, 726, 727], "unless": [16, 28, 53, 72, 144, 841], "substitution_matrix": [16, 60, 61, 62, 63, 64, 65], "suppli": [16, 132, 136, 144, 181, 186, 245, 315, 366, 420, 475, 522, 727, 764], "match_scor": [16, 61, 64, 67], "ad": [16, 60, 61, 62, 63, 64, 65, 136, 146, 214, 456, 528, 533, 713, 716, 840, 879], "occur": [16, 133, 136, 137, 140, 141, 182, 187, 190, 260, 328, 380, 435, 456, 481, 727, 758, 767], "ignor": [16, 47, 69, 78, 105, 106, 133, 134, 135, 136, 137, 140, 141, 145, 148, 247, 248, 291, 292, 317, 318, 368, 369, 422, 423, 476, 508, 560, 585, 599, 600, 601, 602, 603, 718, 725, 726, 764, 783, 818, 840, 841, 877, 879, 881], "mismatch_scor": [16, 61, 64, 67], "subtract": [16, 686], "2d": [16, 60, 61, 62, 63, 64, 65, 103, 107, 108, 111, 494, 509, 518, 536, 605, 714, 721], "dict": [16, 28, 49, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 135, 138, 161, 181, 182, 183, 186, 187, 188, 193, 214, 218, 219, 221, 222, 249, 264, 271, 278, 279, 280, 293, 319, 331, 338, 343, 344, 370, 383, 390, 396, 397, 424, 439, 446, 453, 454, 455, 456, 477, 484, 490, 493, 494, 509, 515, 518, 521, 564, 569, 590, 596, 601, 604, 664, 710, 711, 772, 776, 785, 791, 805, 812, 840, 877, 881], "substitut": [16, 60, 61, 62, 63, 64, 65, 67, 140, 275, 341, 344, 394, 451, 492, 494, 506, 509, 511, 512, 518, 525, 816], "entir": [16, 28, 74, 222, 293, 344, 397, 456], "combin": [16, 28, 45, 48, 138, 533, 600, 699, 713], "enumer": 16, "requir": [16, 78, 84, 85, 94, 105, 106, 131, 133, 134, 136, 139, 143, 146, 147, 218, 278, 291, 292, 453, 544, 546, 571, 601, 607, 697, 717, 725, 756, 762, 796, 816, 840, 875, 877, 881], "suppress_sequ": [16, 66], "zero_index": [16, 66], "wrapper": [16, 66, 84, 85, 817], "otherwis": [16, 29, 45, 48, 57, 72, 73, 136, 138, 141, 144, 145, 190, 275, 341, 394, 451, 492, 495, 496, 498, 503, 508, 548, 549, 551, 556, 560, 572, 573, 575, 580, 585, 588, 604, 792, 877], "inform": [16, 47, 55, 59, 71, 86, 94, 132, 133, 134, 135, 136, 137, 138, 144, 145, 147, 193, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 620, 664, 698, 710, 711, 720, 726, 727, 791, 812, 840, 877, 881], "NOT": [16, 88, 190], "meaning": [16, 45, 48, 54, 718, 877], "zhao": [16, 66], "mengyao": [16, 66], "wan": [16, 66], "ping": [16, 66], "lee": [16, 66, 69], "erik": [16, 66], "garrison": [16, 66], "gabor": [16, 66], "marth": [16, 66], "simd": [16, 66], "applic": [16, 47, 60, 66, 759, 881], "plo": [16, 66, 84, 85, 539, 545], "ONE": [16, 66], "2013": [16, 66, 76, 94, 543, 709], "web": [16, 60, 63, 66, 134, 147, 599, 600, 601, 602, 603], "juli": [16, 66], "2014": [16, 66, 132, 143, 533, 543], "http": [16, 47, 60, 61, 62, 63, 64, 65, 66, 69, 73, 83, 108, 131, 132, 133, 134, 135, 136, 137, 138, 141, 143, 144, 145, 146, 147, 281, 289, 290, 516, 539, 543, 545, 547, 565, 571, 583, 591, 599, 600, 601, 602, 603, 709, 813, 814, 839], "www": [16, 60, 63, 66, 83, 108, 131, 132, 133, 134, 135, 136, 137, 138, 143, 147, 281, 289, 290, 600], "ploson": [16, 66], "org": [16, 66, 108, 131, 136, 137, 138, 143, 145, 146, 516, 539, 543, 545, 547, 565, 571, 583, 591, 599, 600, 601, 602, 603, 709, 814], "articl": [16, 66, 134], "info": [16, 66, 203, 222, 293, 344, 397, 456, 608, 664], "doi": [16, 66, 135, 137, 539, 545, 814], "10": [16, 47, 66, 69, 84, 85, 133, 135, 136, 137, 138, 139, 141, 142, 143, 193, 203, 218, 222, 247, 293, 317, 344, 368, 397, 422, 456, 528, 533, 539, 545, 603, 698, 723, 726, 727, 814, 881], "1371": [16, 66, 539, 545], "journal": [16, 66, 69, 72, 79, 94, 95, 97, 99, 138, 539, 545, 599], "pone": [16, 66], "0082138": [16, 66], "alignmentstructur": 17, "positional_metadata": [28, 33, 46, 52, 53, 54, 136, 146, 222, 227, 239, 240, 243, 259, 265, 272, 273, 293, 298, 310, 313, 327, 332, 339, 344, 349, 361, 364, 378, 384, 391, 397, 402, 414, 415, 418, 434, 440, 447, 448, 456, 461, 473, 480, 485, 491, 877], "sourc": [28, 29, 30, 31, 32, 33, 35, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 138, 139, 149, 150, 160, 161, 162, 163, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 200, 202, 203, 204, 205, 206, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 609, 619, 620, 630, 631, 641, 642, 652, 653, 663, 664, 674, 675, 685, 686, 696, 697, 699, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 743, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 824, 831, 837, 838, 839, 840, 841, 851, 852, 853, 863, 864, 874], "store": [28, 38, 43, 51, 52, 53, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 193, 203, 222, 257, 259, 293, 325, 327, 344, 376, 378, 397, 432, 434, 456, 479, 480, 516, 546, 547, 565, 571, 591, 604, 620, 653, 664, 699, 712, 713, 718, 720, 734, 876, 877], "tabular": [28, 132, 133, 145, 147], "iter": [28, 38, 43, 48, 53, 60, 61, 62, 63, 64, 65, 66, 67, 103, 107, 108, 111, 144, 193, 214, 215, 216, 218, 229, 232, 237, 240, 248, 262, 272, 275, 300, 303, 308, 310, 318, 329, 339, 341, 351, 354, 359, 361, 369, 381, 391, 394, 404, 407, 412, 415, 423, 437, 447, 451, 463, 466, 471, 473, 476, 482, 491, 492, 494, 505, 508, 510, 512, 520, 528, 558, 560, 561, 568, 582, 585, 586, 595, 600, 603, 604, 697, 709, 726, 727, 735, 736, 743, 760, 763, 764, 773, 781, 784, 787, 788, 789, 797, 798, 804, 807, 837, 839, 841, 863, 879, 881], "grammaredsequ": [28, 38, 43, 45, 48, 49, 60, 63, 134, 136, 143, 146, 222, 243, 246, 274, 344, 364, 367, 393, 397, 418, 421, 450], "exampl": [28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 78, 105, 106, 107, 140, 145, 148, 160, 161, 162, 191, 193, 203, 215, 220, 222, 223, 224, 227, 229, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 281, 282, 290, 291, 292, 293, 294, 295, 298, 300, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 342, 344, 345, 346, 349, 351, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 394, 395, 397, 398, 399, 402, 404, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 451, 452, 453, 454, 456, 457, 458, 461, 463, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 505, 506, 509, 512, 514, 517, 520, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 558, 563, 566, 568, 582, 589, 592, 593, 595, 599, 600, 601, 602, 603, 604, 605, 606, 607, 697, 709, 718, 725, 726, 727, 728, 735, 736, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 819, 839, 874, 875], "arbitrari": [28, 46, 49, 140, 145, 146, 222, 344, 397, 456, 697, 840, 877], "shallow": [28, 31, 203, 204, 225, 296, 347, 400, 456, 459], "copi": [28, 31, 32, 136, 143, 146, 203, 204, 205, 225, 226, 272, 296, 297, 339, 347, 348, 391, 400, 401, 447, 456, 459, 460, 491, 516, 519, 547, 565, 567, 591, 594, 721, 728, 735, 736, 763, 795, 796, 802, 810, 811, 834, 835, 836], "made": [28, 90, 456, 528, 547, 571, 697, 750, 767, 768, 790, 816], "consum": [28, 48, 162, 222, 281, 344, 397, 456], "abl": [28, 48, 108, 222, 344, 397, 456, 528, 726, 764], "directli": [28, 45, 48, 145, 222, 281, 344, 397, 456, 522, 528, 607, 840, 881], "constructor": [28, 45, 48, 56, 134, 136, 137, 138, 143, 144, 146, 161, 174, 185, 222, 265, 281, 332, 344, 384, 397, 440, 456, 485, 494, 605], "label": [28, 30, 33, 35, 45, 48, 49, 54, 56, 57, 58, 134, 136, 138, 143, 145, 146, 514, 543, 546, 563, 589, 599, 600, 602, 603, 604, 699, 709, 754, 818], "content": [28, 46, 135, 136, 137, 138, 139, 141, 145, 148, 160, 161, 162, 222, 239, 240, 243, 246, 273, 277, 310, 313, 316, 361, 364, 367, 397, 414, 415, 418, 421, 448, 449, 473, 877], "hashabl": [28, 30, 697, 863], "rais": [28, 45, 47, 48, 50, 54, 56, 58, 69, 78, 79, 80, 94, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 143, 148, 149, 160, 161, 162, 181, 182, 183, 184, 186, 187, 188, 217, 224, 240, 241, 245, 247, 249, 260, 261, 263, 264, 266, 267, 268, 269, 275, 291, 293, 295, 310, 311, 315, 317, 319, 328, 330, 331, 333, 334, 335, 336, 341, 346, 361, 362, 366, 368, 370, 380, 382, 383, 385, 386, 387, 388, 394, 399, 415, 416, 420, 422, 424, 435, 436, 438, 439, 441, 442, 443, 444, 451, 458, 473, 474, 475, 477, 481, 483, 484, 486, 487, 488, 489, 492, 498, 505, 506, 508, 509, 510, 513, 520, 523, 524, 530, 537, 538, 544, 551, 558, 560, 561, 562, 568, 575, 582, 585, 586, 587, 595, 599, 600, 601, 603, 604, 642, 686, 697, 709, 712, 713, 718, 726, 727, 728, 749, 756, 757, 759, 762, 764, 765, 767, 768, 770, 772, 774, 780, 782, 785, 795, 796, 797, 798, 803, 808, 817, 818, 819, 820], "valueerror": [28, 45, 47, 48, 50, 54, 56, 58, 69, 78, 80, 94, 103, 105, 106, 107, 111, 181, 186, 240, 241, 247, 249, 260, 263, 264, 266, 267, 268, 269, 275, 291, 293, 310, 311, 317, 319, 328, 330, 331, 333, 334, 335, 336, 341, 361, 362, 368, 370, 380, 382, 383, 385, 386, 387, 388, 394, 415, 416, 422, 424, 435, 438, 439, 441, 442, 443, 444, 451, 456, 473, 474, 477, 481, 483, 484, 486, 487, 488, 489, 492, 506, 509, 510, 523, 524, 530, 537, 538, 544, 561, 586, 600, 601, 603, 604, 642, 686, 697, 709, 712, 713, 726, 727, 728, 757, 759, 764, 772, 780, 782, 785, 797, 798, 803, 808, 819], "both": [28, 46, 54, 56, 67, 72, 73, 74, 78, 94, 131, 132, 133, 136, 137, 143, 145, 147, 181, 186, 218, 291, 510, 531, 532, 534, 535, 546, 561, 586, 588, 593, 600, 601, 602, 603, 718, 758, 759, 798, 807, 875, 877], "typeerror": [28, 45, 48, 54, 103, 181, 182, 186, 187, 224, 240, 241, 245, 249, 260, 261, 266, 267, 268, 269, 295, 310, 311, 315, 319, 328, 333, 334, 335, 336, 346, 361, 362, 366, 370, 380, 385, 386, 387, 388, 399, 415, 416, 420, 424, 435, 436, 441, 442, 443, 444, 458, 473, 474, 475, 477, 481, 486, 487, 488, 489, 523, 524, 600, 601, 603, 726, 727, 728, 756], "isn": [28, 45, 48, 54, 80, 145, 146, 160, 162, 191, 193, 534, 535, 728], "doe": [28, 45, 46, 48, 54, 57, 66, 78, 94, 132, 134, 136, 137, 139, 141, 143, 146, 190, 240, 281, 282, 288, 291, 310, 361, 415, 473, 506, 516, 523, 546, 565, 588, 591, 599, 601, 603, 642, 718, 726, 727, 750, 759, 770, 783, 796, 803, 806, 813, 817, 875], "exactli": [28, 45, 48, 53, 63, 64, 65, 136, 137, 143, 148, 227, 236, 282, 298, 307, 349, 358, 402, 411, 461, 470, 544, 709, 752], "reassign_index": [28, 45, 48, 57, 58, 143], "neither": [28, 56, 191, 798, 807], "nor": [28, 45, 48, 56, 140, 143, 547, 798], "rangeindex": [28, 45, 48, 56, 143], "stop": [28, 45, 48, 56, 69, 143, 241, 260, 278, 279, 281, 291, 292, 311, 328, 344, 362, 379, 380, 416, 435, 453, 454, 474, 481, 754, 841, 877], "four": [28, 137, 146, 222, 344, 397, 528, 709], "acgt": [28, 45, 48, 49, 51, 52, 58, 223, 227, 236, 240, 251, 252, 257, 259, 261, 265, 294, 298, 307, 310, 325, 327, 332, 345, 349, 358, 361, 376, 378, 384, 398, 402, 411, 415, 426, 427, 432, 434, 436, 440, 456, 457, 461, 470, 473, 479, 480, 485, 494, 512], "ag": [28, 45, 48, 50, 546, 725, 726], "wasn": [28, 137], "non": [28, 72, 80, 132, 134, 135, 139, 145, 193, 222, 258, 270, 274, 293, 326, 337, 340, 344, 377, 389, 393, 397, 433, 445, 450, 494, 525, 526, 527, 528, 530, 533, 537, 538, 540, 541, 542, 571, 599, 602, 603, 607, 712, 718, 723, 758, 759, 764], "seq3": [28, 48, 136, 143], "prob": [28, 33, 46, 53], "iloc": [28, 35], "slice": [28, 35, 229, 247, 248, 262, 272, 300, 317, 318, 329, 339, 351, 368, 369, 381, 391, 404, 422, 423, 437, 447, 463, 476, 482, 491, 498, 546, 551, 575, 739, 877], "axi": [28, 35, 50, 80, 96, 140, 222, 293, 344, 397, 456, 494, 642, 686, 699, 709, 717, 724, 727, 818], "along": [28, 140, 222, 293, 344, 397, 456, 709, 717, 718], "loc": [28, 35, 456, 528, 726], "shape": [28, 40, 49, 131, 142, 494, 496, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 549, 571, 573, 601, 714, 717, 728], "boolean": [29, 106, 136, 139, 144, 193, 222, 229, 242, 244, 247, 250, 262, 265, 267, 269, 270, 272, 300, 312, 314, 317, 320, 329, 332, 334, 336, 337, 339, 344, 351, 363, 365, 368, 371, 381, 384, 386, 388, 389, 391, 392, 397, 404, 417, 419, 422, 425, 437, 440, 442, 444, 445, 447, 456, 463, 482, 485, 487, 489, 491, 586], "OR": 29, "acg": [29, 30, 31, 32, 33, 38, 40, 43, 50, 53, 54, 56, 57, 144, 146, 260, 263, 328, 330, 380, 382, 435, 438, 481, 483], "ac": [29, 30, 31, 32, 33, 38, 40, 43, 46, 48, 50, 54, 56, 57, 60, 63, 135, 137, 138, 146, 193, 250, 320, 371, 425, 877], "No": [29, 73, 132, 133, 135, 144, 147, 203, 238, 309, 360, 413, 472, 601], "search": [30, 60, 132, 133, 136, 218, 247, 260, 317, 328, 368, 380, 422, 435, 481, 495, 548, 572, 713, 762, 767, 768, 769, 770, 837, 877], "l1": 30, "l2": 30, "l3": 30, "__deepcopy__": [31, 204], "msa_copi": [31, 32], "memo": [32, 205, 226, 297, 348, 401, 460], "deep": [32, 70, 205, 225, 226, 296, 297, 347, 348, 400, 401, 456, 459, 460, 507, 519, 559, 567, 584, 594], "__copy__": [32, 205], "deepcopi": [32, 735, 736, 760, 810, 811], "against": [33, 42, 60, 63, 137, 194, 200, 206, 212, 227, 236, 282, 288, 298, 307, 349, 358, 402, 411, 461, 470, 528, 607, 757], "pleas": [35, 55, 59, 136, 144, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 710, 711, 791, 812], "restrict": [35, 78, 105, 106, 143, 877], "over": [38, 43, 53, 108, 136, 137, 144, 145, 146, 232, 237, 303, 308, 354, 359, 407, 412, 466, 471, 494, 533, 605, 619, 641, 652, 685, 696, 723, 724, 743, 781, 784, 787, 788, 789, 801, 804, 807, 879], "yield": [38, 43, 53, 136, 218, 232, 237, 246, 247, 248, 262, 263, 279, 292, 303, 308, 316, 317, 318, 329, 330, 354, 359, 367, 368, 369, 381, 382, 407, 412, 421, 422, 423, 437, 438, 454, 466, 471, 476, 482, 483, 603, 769, 781, 784, 787, 788, 789, 798, 804, 806, 807, 841, 875, 881], "size": [40, 76, 494, 533, 547, 571, 599, 600, 601, 603, 686, 697, 709, 717, 723, 725, 726, 727, 839], "1st": [40, 675, 819], "dimens": [40, 142, 143, 494, 504, 526, 530, 534, 535, 547, 557, 571, 581, 603, 699, 708, 709, 718, 719], "equival": [40, 76, 78, 94, 137, 145, 225, 226, 249, 251, 272, 273, 279, 292, 296, 297, 319, 339, 347, 348, 370, 391, 400, 401, 424, 426, 447, 448, 454, 459, 460, 477, 491, 505, 520, 523, 528, 558, 568, 582, 595, 601, 877], "inequ": [42, 200, 212, 236, 288, 307, 358, 411, 470, 571, 718], "__eq__": [42, 212, 503, 556, 580], "revers": [43, 53, 57, 148, 237, 239, 261, 273, 279, 291, 292, 308, 359, 412, 414, 436, 448, 449, 454, 471, 599, 603, 798, 877, 881], "summari": [44, 504, 528, 557, 581], "reset_index": [45, 48], "without": [45, 48, 54, 56, 90, 106, 133, 141, 143, 145, 146, 456, 525, 697, 709, 727, 728, 765, 774, 806, 839, 840, 875], "recomput": [45, 48, 54], "treat": [45, 46, 47, 48, 136, 140, 145, 222, 265, 274, 332, 340, 344, 384, 393, 397, 440, 450, 456, 485, 523, 726], "reset": [45, 48, 56], "choic": [45, 48, 140, 718], "necessarili": [45, 48, 54, 142, 249, 319, 370, 424, 456, 477, 728], "own": [45, 48, 54, 131, 136, 142, 146, 148, 723], "via": [45, 48, 56, 69, 84, 85, 136, 143, 245, 281, 282, 288, 315, 366, 420, 475, 599, 601, 602], "acga": [45, 48, 227, 236, 298, 307, 349, 358, 402, 411, 461, 470], "major": [46, 525, 593, 813], "most": [46, 70, 79, 94, 131, 134, 136, 137, 140, 141, 143, 145, 147, 291, 456, 601, 697, 720, 723, 774, 776, 813, 879], "common": [46, 51, 52, 63, 78, 94, 132, 136, 137, 138, 145, 146, 147, 257, 259, 325, 327, 376, 378, 432, 434, 479, 480, 526, 547, 642, 734, 759, 767, 780, 782, 805, 806, 814, 877, 879, 880], "ti": [46, 70, 813], "broken": [46, 813], "manner": [46, 136, 143, 229, 243, 300, 313, 351, 364, 404, 418, 463, 601, 718], "present": [46, 47, 78, 105, 106, 132, 136, 142, 145, 146, 204, 205, 222, 239, 242, 243, 244, 249, 250, 260, 270, 273, 291, 312, 313, 314, 319, 320, 328, 337, 344, 363, 364, 365, 370, 371, 380, 389, 392, 397, 414, 417, 418, 419, 424, 425, 435, 445, 448, 477, 481, 508, 528, 560, 585, 599, 600, 602, 603, 642, 708, 718, 727, 728, 758, 813, 814, 816, 879], "default_gap_char": [46, 47, 54, 222, 293, 344, 397], "distinct": [46, 91, 92, 101, 523, 546], "contribut": [46, 94, 607, 712, 717], "AT": [46, 136, 137, 143], "tt": [46, 262, 329, 381, 437, 482], "cg": [46, 272, 339, 391, 447, 456, 491], "degener": [46, 47, 135, 136, 137, 138, 139, 222, 239, 240, 242, 243, 246, 251, 252, 253, 254, 258, 270, 273, 274, 276, 277, 278, 279, 281, 291, 292, 293, 310, 312, 313, 316, 321, 322, 326, 337, 340, 342, 344, 361, 363, 364, 367, 372, 373, 377, 389, 393, 395, 397, 414, 415, 417, 418, 421, 426, 427, 428, 429, 433, 445, 448, 449, 450, 452, 453, 454, 473, 506, 877], "gc": [46, 135, 136, 137, 138, 139, 147, 222, 239, 240, 243, 246, 252, 273, 277, 282, 292, 310, 313, 316, 361, 364, 367, 397, 414, 415, 418, 421, 427, 448, 449, 473, 877], "33": [46, 78, 105, 106, 137, 246, 316, 367, 421, 533, 600, 603, 723, 726, 877], "last": [46, 135, 143, 262, 291, 329, 381, 437, 456, 482, 601, 698, 881], "metric": [47, 69, 74, 78, 79, 94, 103, 104, 105, 106, 107, 108, 109, 110, 111, 137, 245, 315, 366, 420, 475, 510, 524, 561, 571, 586, 734, 874, 877], "inverse_shannon_uncertainti": 47, "degenerate_mod": 47, "gap_mod": 47, "nan": [47, 50, 54, 85, 132, 145, 240, 249, 310, 319, 361, 370, 415, 424, 473, 477, 523, 524, 599, 600, 601, 602, 603, 604, 607, 709, 725, 726, 805, 817], "larger": [47, 726], "mode": [47, 148, 190, 291, 727, 840], "handl": [47, 54, 136, 137, 144, 146, 147, 148, 150, 160, 162, 190, 291, 292, 528, 601, 603, 604, 723, 807, 814, 839, 881], "assign": [47, 56, 67, 103, 107, 143, 145, 194, 272, 339, 391, 447, 456, 491, 512, 528, 533, 599, 602, 603, 697, 727, 753, 754, 755], "np": [47, 50, 78, 85, 94, 105, 106, 132, 222, 224, 241, 242, 244, 245, 249, 250, 260, 261, 266, 267, 268, 269, 270, 275, 295, 311, 312, 314, 315, 319, 320, 328, 333, 334, 335, 336, 337, 341, 344, 346, 362, 363, 365, 366, 370, 371, 380, 385, 386, 387, 388, 389, 392, 394, 397, 399, 416, 417, 419, 420, 424, 425, 435, 436, 441, 442, 443, 444, 445, 451, 456, 458, 474, 475, 477, 481, 486, 487, 488, 489, 492, 494, 523, 524, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 599, 601, 602, 603, 604, 607, 608, 697, 698, 709, 722, 723, 725, 726, 727, 728, 776, 798, 813, 817], "remov": [47, 66, 78, 94, 105, 106, 136, 140, 143, 216, 243, 274, 313, 340, 364, 393, 418, 450, 751, 766, 786, 790, 793, 797, 808, 877], "up": [47, 67, 134, 143, 145, 146, 190, 203, 215, 453, 454, 498, 530, 537, 538, 540, 541, 542, 551, 575, 601, 697, 727, 751, 756, 759, 790, 796, 863, 879], "float": [47, 50, 60, 61, 62, 63, 64, 65, 66, 67, 78, 83, 84, 94, 103, 105, 106, 107, 108, 111, 131, 132, 138, 140, 141, 145, 245, 251, 252, 266, 268, 315, 333, 335, 366, 385, 387, 420, 426, 427, 441, 443, 475, 486, 488, 510, 512, 523, 524, 528, 533, 537, 538, 542, 545, 546, 547, 561, 586, 601, 603, 605, 607, 620, 664, 709, 724, 726, 727, 734, 749, 757, 758, 759, 764, 765, 774, 805, 813, 817], "unknown": [47, 84, 85, 130, 138, 193, 247, 317, 368, 422, 697], "mislead": [47, 111], "point": [47, 80, 83, 85, 131, 134, 145, 148, 161, 193, 265, 272, 275, 332, 339, 341, 384, 391, 394, 440, 447, 451, 485, 491, 492, 506, 603, 609, 631, 686, 709, 726, 727, 796, 817, 838], "out": [47, 144, 145, 148, 709, 758, 759, 881], "compos": [47, 137, 144], "90": [47, 139, 533, 881], "tryptophan": [47, 344], "would": [47, 78, 80, 83, 105, 106, 134, 136, 139, 141, 143, 145, 146, 148, 240, 262, 310, 329, 361, 381, 415, 437, 473, 482, 505, 540, 543, 558, 582, 607, 725, 726, 756, 806, 807, 813, 875], "highli": 47, "alanin": [47, 344], "glycin": [47, 344], "recod": 47, "awar": [47, 94, 145, 456], "consid": [47, 69, 78, 83, 94, 105, 106, 136, 141, 227, 262, 298, 329, 349, 381, 402, 437, 461, 482, 523, 525, 540, 603, 604, 697, 725, 726, 727, 817, 840], "simpli": [47, 54, 101, 148, 281, 516, 565, 591, 718, 723, 767, 881], "minu": [47, 138, 146, 675], "shannon": [47, 82, 95], "uncertainti": [47, 533, 607], "invers": [47, 527, 532, 535, 541], "impli": [47, 190, 607], "higher": [47, 494, 528, 533, 852], "entropi": [47, 82, 97], "make": [47, 54, 136, 141, 145, 148, 282, 498, 523, 551, 575, 599, 603, 727, 802, 805, 806, 814, 820, 840, 881], "symbol": [47, 136], "done": [47, 528, 603, 630, 663, 674], "prefer": [47, 103, 107, 137, 712, 713], "valdar": 47, "residu": [47, 720], "2002": [47, 78, 94, 102, 133, 136], "schneider": 47, "pitfal": 47, "theori": [47, 71, 86, 97, 539, 545], "websit": 47, "ca": [47, 142, 699, 713, 720], "2015": [47, 525, 528, 539, 545], "ncifcrf": 47, "gov": [47, 61, 62, 64, 65, 132, 133, 136, 138, 144, 147, 281, 289, 290], "glossari": 47, "html": [47, 83, 132, 134, 136, 138, 141, 143, 146, 193, 516, 547, 565, 571, 583, 591, 599, 600, 601, 602, 603, 709, 813], "shannon_entropi": 47, "classmethod": [49, 55, 215, 219, 240, 271, 290, 310, 338, 361, 390, 415, 446, 473, 490, 506, 509, 510, 511, 512, 515, 561, 564, 586, 590, 710, 771, 772, 773, 791], "dictionari": [49, 51, 56, 58, 67, 146, 147, 150, 193, 204, 205, 214, 218, 257, 325, 376, 432, 456, 479, 509, 518, 601, 772], "construct": [49, 58, 138, 147, 193, 194, 222, 293, 344, 397, 494, 509, 512, 518, 539, 546, 698, 762, 772, 773, 814, 874, 875, 879], "to_dict": 49, "sort": [49, 54, 109, 110, 194, 203, 206, 246, 249, 275, 316, 319, 341, 367, 370, 394, 421, 424, 451, 477, 492, 642, 675, 697, 800, 805, 806, 813, 877, 881], "rel": [50, 94, 135, 138, 249, 251, 252, 264, 266, 268, 319, 331, 333, 335, 370, 383, 385, 387, 424, 426, 427, 439, 441, 443, 477, 484, 486, 488, 539, 545, 583, 799, 817, 852, 877], "across": [50, 94, 136, 137, 143, 203, 528, 533, 601, 726, 813], "1d": [50, 103, 222, 224, 229, 241, 242, 244, 245, 247, 248, 250, 260, 261, 262, 266, 267, 268, 269, 270, 272, 275, 295, 300, 311, 312, 314, 315, 317, 318, 320, 328, 329, 333, 334, 335, 336, 337, 339, 341, 344, 346, 351, 362, 363, 365, 366, 368, 369, 371, 380, 381, 385, 386, 387, 388, 389, 391, 392, 394, 397, 399, 404, 416, 417, 419, 420, 422, 423, 425, 435, 436, 437, 441, 442, 443, 444, 445, 447, 451, 456, 458, 463, 474, 475, 476, 481, 482, 486, 487, 488, 489, 491, 492], "ndarrai": [50, 107, 222, 224, 241, 242, 244, 245, 250, 260, 261, 266, 267, 268, 269, 270, 275, 295, 311, 312, 314, 315, 320, 328, 333, 334, 335, 336, 337, 341, 344, 346, 362, 363, 365, 366, 371, 380, 385, 386, 387, 388, 389, 392, 394, 397, 399, 416, 417, 419, 420, 425, 435, 436, 441, 442, 443, 444, 445, 451, 456, 458, 474, 475, 481, 486, 487, 488, 489, 492, 498, 516, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 540, 541, 542, 543, 547, 551, 565, 575, 583, 588, 591, 605, 607, 721, 728, 771], "vector": [50, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 140, 242, 244, 247, 250, 262, 265, 267, 269, 270, 272, 275, 281, 312, 314, 317, 320, 329, 332, 334, 336, 337, 339, 341, 363, 365, 368, 371, 381, 384, 386, 388, 389, 391, 392, 394, 417, 419, 422, 425, 437, 440, 442, 444, 445, 447, 451, 482, 485, 487, 489, 491, 492, 498, 526, 527, 528, 533, 534, 535, 540, 541, 542, 545, 546, 547, 551, 571, 575, 599, 602, 603, 653, 713, 727, 728, 805, 874], "specifi": [50, 54, 94, 111, 132, 134, 136, 137, 138, 139, 140, 143, 146, 147, 148, 180, 190, 193, 203, 216, 218, 222, 229, 247, 249, 265, 278, 290, 291, 293, 300, 317, 319, 332, 344, 351, 368, 370, 384, 397, 404, 422, 424, 440, 453, 456, 463, 477, 485, 495, 498, 505, 508, 513, 514, 520, 526, 527, 528, 533, 534, 535, 537, 538, 544, 548, 551, 558, 560, 562, 563, 568, 572, 575, 582, 585, 587, 589, 595, 599, 600, 601, 602, 603, 607, 686, 709, 717, 718, 724, 756, 764, 795, 798, 800, 803, 806, 813, 840, 852, 853, 863, 874, 881], "Will": [50, 180, 183, 188, 190, 507, 519, 559, 567, 584, 594, 699, 728], "least": [51, 52, 90, 141, 145, 247, 256, 257, 259, 317, 324, 325, 327, 368, 375, 376, 378, 422, 431, 432, 434, 478, 479, 480, 528, 601, 709, 726, 727, 816, 881], "demonstr": [51, 52, 148, 257, 259, 325, 327, 376, 378, 432, 434, 479, 480], "behavior": [51, 52, 54, 60, 61, 62, 136, 137, 138, 145, 190, 257, 259, 275, 291, 325, 327, 341, 376, 378, 394, 432, 434, 451, 456, 479, 480, 492, 599, 601, 603, 758, 881], "rang": [52, 74, 83, 95, 106, 137, 138, 145, 239, 243, 249, 259, 262, 273, 313, 319, 327, 329, 364, 370, 378, 381, 414, 418, 424, 434, 437, 448, 477, 480, 482, 599, 600, 709, 727, 776, 881], "qualiti": [52, 136, 144, 222, 227, 239, 243, 259, 273, 298, 313, 327, 344, 349, 364, 378, 397, 402, 414, 418, 434, 448, 456, 461, 480, 709, 877], "ignore_metadata": 53, "improv": [53, 141, 143, 222, 344, 397, 586], "__iter__": 53, "__reversed__": 53, "concat": [53, 54], "artifact": [53, 60, 61, 62], "real": [53, 136, 137, 144, 525, 526, 527, 531, 532, 534, 535, 540, 541, 542], "concaten": [53, 146, 215, 240, 310, 361, 415, 473], "outer": [53, 54, 240, 310, 361, 415, 473, 509], "join": [53, 132, 133, 137, 144, 146, 147, 240, 310, 361, 415, 473, 806, 813, 814], "aa": [53, 136, 138, 143, 281], "gt": 53, "strict": [54, 143, 240, 310, 361, 415, 473, 508, 560, 585, 601, 604, 607], "horizont": 54, "control": [54, 136, 599, 601, 602, 608, 720, 723, 725, 726, 727], "dure": [54, 136, 194, 240, 310, 361, 415, 473, 603, 838], "section": [54, 136, 137, 142, 145, 146, 281, 456, 600, 601, 712, 713], "inner": [54, 141, 240, 310, 361, 415, 473, 509], "left": [54, 69, 97, 141, 526, 527, 531, 536, 540, 541, 542, 543, 754, 776, 817, 818, 879], "right": [54, 69, 97, 141, 525, 526, 527, 531, 536, 540, 541, 542, 543, 776, 817, 818, 881], "unshar": 54, "pad": [54, 143, 240, 310, 361, 415, 473], "guarante": [54, 85, 145, 222, 246, 316, 344, 367, 397, 421, 547, 605, 764], "duplic": [54, 111, 137, 145, 146, 217, 275, 341, 394, 451, 492, 508, 560, 585, 729, 837], "doesn": [54, 136, 145, 184, 291, 540, 544, 598, 712, 718, 722, 796, 815, 880], "subclass": [54, 134, 136, 143, 146, 148, 240, 310, 361, 415, 456, 473, 494, 546, 547, 605, 813, 840], "togeth": [54, 135, 136, 138, 146, 528, 840], "likewis": [54, 94, 146], "per": [54, 132, 133, 144, 146, 222, 344, 397, 456, 533, 604, 607, 697, 720, 726, 727, 752, 839], "retain": [54, 240, 272, 310, 339, 361, 391, 415, 447, 473, 491, 508, 560, 585, 697], "output": [54, 132, 133, 141, 143, 144, 146, 265, 332, 384, 440, 485, 533, 599, 603, 604, 642, 713, 806, 814, 881], "reproduc": [54, 78, 105, 106], "necessari": [54, 132, 143, 203, 456, 547, 599, 600, 601, 630, 663, 674, 759, 838, 875], "msa1": 54, "msa2": 54, "unnecessari": 54, "By": [54, 83, 94, 103, 107, 136, 138, 145, 528, 603, 717, 718, 721, 803, 814, 841], "col1": [54, 145], "43": [54, 90, 142, 813], "col2": [54, 145], "col3": [54, 145], "o": [54, 55, 59, 94, 135, 136, 137, 144, 146, 219, 221, 271, 280, 338, 343, 344, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 710, 711, 791, 812, 814, 874, 880], "file": [55, 59, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 161, 174, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 514, 515, 521, 528, 546, 563, 564, 569, 589, 590, 596, 630, 663, 674, 709, 710, 711, 725, 754, 791, 812, 838, 839, 874, 879], "kwarg": [55, 59, 66, 103, 107, 108, 111, 112, 160, 162, 174, 181, 182, 183, 185, 186, 187, 188, 191, 192, 219, 221, 271, 278, 279, 280, 338, 343, 390, 396, 446, 453, 454, 455, 490, 493, 494, 515, 521, 564, 569, 590, 596, 686, 710, 711, 791, 812, 840, 875], "instanc": [55, 59, 148, 162, 175, 177, 178, 179, 181, 186, 203, 218, 219, 221, 240, 271, 280, 310, 338, 343, 361, 390, 396, 415, 446, 455, 473, 490, 493, 496, 506, 515, 521, 523, 524, 533, 547, 549, 564, 569, 571, 573, 588, 590, 596, 601, 603, 604, 605, 619, 641, 652, 685, 696, 709, 710, 711, 727, 734, 750, 791, 812, 813, 820, 821, 824, 831, 879, 881], "registri": [55, 59, 136, 137, 144, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 710, 711, 791, 812, 875], "system": [55, 59, 86, 97, 145, 147, 148, 203, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 710, 711, 726, 791, 812], "clustal": [55, 59, 114, 875], "fasta": [55, 59, 116, 137, 139, 144, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 875], "fastq": [55, 59, 117, 144, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 875], "phylip": [55, 59, 126, 136, 141, 813, 875, 879], "stockholm": [55, 59, 129], "filepath": [55, 59, 181, 182, 183, 186, 187, 188, 190, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 604, 710, 711, 791, 812], "url": [55, 59, 181, 182, 183, 186, 187, 188, 190, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 710, 711, 791, 812], "filehandl": [55, 59, 148, 160, 161, 162, 181, 182, 183, 186, 187, 188, 190, 191, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 710, 711, 791, 812], "etc": [55, 59, 80, 136, 137, 145, 181, 182, 183, 186, 187, 188, 193, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 494, 515, 521, 564, 569, 590, 596, 710, 711, 718, 720, 734, 791, 812, 877], "someth": [55, 59, 148, 161, 181, 182, 183, 186, 187, 188, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 605, 710, 711, 791, 812, 881], "understood": [55, 59, 141, 181, 182, 183, 186, 187, 188, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 710, 711, 791, 812], "util": [55, 59, 147, 160, 162, 219, 221, 271, 280, 281, 289, 290, 293, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 710, 711, 791, 812, 874, 875], "close": [55, 59, 79, 136, 137, 141, 143, 146, 190, 191, 219, 221, 271, 280, 291, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 528, 564, 569, 590, 596, 630, 663, 674, 710, 711, 791, 812, 839], "respons": [55, 59, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 630, 663, 674, 698, 710, 711, 713, 720, 791, 812], "caller": [55, 59, 219, 221, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493, 515, 521, 564, 569, 590, 596, 630, 663, 674, 710, 711, 791, 812], "reader": [55, 131, 132, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 161, 175, 180, 181, 182, 186, 187, 219, 271, 338, 390, 446, 490, 515, 564, 590, 710, 791], "attempt": [55, 136, 145, 190, 219, 271, 338, 390, 446, 490, 515, 564, 590, 710, 754, 767, 791], "guess": [55, 90, 112, 136, 181, 186, 219, 271, 338, 390, 446, 490, 515, 564, 590, 710, 791, 816], "keyword": [55, 59, 66, 135, 138, 140, 161, 181, 182, 183, 186, 187, 188, 218, 219, 221, 265, 271, 278, 279, 280, 332, 338, 343, 384, 390, 396, 440, 446, 453, 454, 455, 485, 490, 493, 515, 521, 564, 569, 590, 596, 710, 711, 791, 812], "write": [55, 134, 135, 137, 139, 140, 141, 143, 146, 148, 162, 179, 180, 190, 219, 271, 338, 390, 446, 490, 515, 546, 564, 590, 630, 663, 674, 710, 748, 791, 819], "reassign": [56, 143, 601], "remain": [56, 136], "ccg": 56, "altern": [56, 147, 148, 274, 291, 340, 393, 450, 510, 525, 539, 545, 561, 586, 601, 603, 604, 607, 718, 723, 772, 798], "ascend": [57, 220], "place": [57, 141, 146, 291, 697, 718, 721, 751, 776, 808, 818], "multiindex": [57, 593], "noth": [57, 190, 276, 342, 395, 452, 840], "descend": [57, 94, 220, 734, 764, 776, 784, 793, 800, 801, 804, 807, 879], "sort_index": 57, "passthrough": 57, "intern": [57, 138, 141, 544, 752, 754, 756, 762, 764, 767, 776, 785, 790, 796, 806, 808, 809, 875, 879], "identifi": [57, 103, 107, 108, 111, 131, 134, 136, 137, 138, 139, 140, 143, 146, 147, 218, 247, 368, 422, 546, 604, 723, 727, 875], "modifi": [57, 136, 138, 146, 180, 222, 344, 397, 456, 588, 686, 719, 798], "from_dict": [58, 599, 603, 608, 709, 725, 726], "regist": [59, 148, 149, 150, 160, 161, 162, 174, 180, 182, 185, 187, 221, 280, 343, 396, 455, 493, 521, 569, 596, 711, 812], "writer": [59, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 177, 180, 183, 188, 190, 221, 280, 343, 396, 455, 493, 521, 569, 596, 711, 812], "penalize_terminal_gap": [60, 61, 62], "unalign": [60, 61, 62, 63, 64, 65, 66, 877], "substract": [60, 61, 62, 63, 64, 65, 716], "typic": [60, 61, 62, 63, 64, 65, 67, 136, 137, 144, 145, 146, 193, 203, 718, 754], "similar": [60, 61, 62, 63, 64, 65, 104, 133, 135, 136, 137, 140, 143, 145, 148, 456, 494, 599, 600, 601, 602, 603, 713, 718, 720, 726, 727, 877, 879], "lookup": [60, 61, 62, 63, 64, 65, 175, 176, 177, 498, 551, 575, 598, 601, 604, 751, 762, 766, 776, 777, 786, 790, 805, 840], "continu": [60, 61, 62, 698], "penal": [60, 61, 62], "even": [60, 61, 62, 68, 82, 88, 95, 99, 136, 141, 291, 599, 603, 727, 807], "irrelev": [60, 61, 62], "want": [60, 61, 62, 135, 138, 203, 723, 725, 726, 727, 758, 759, 875], "nearli": [60, 61, 62], "tupl": [60, 61, 62, 63, 64, 65, 66, 73, 77, 84, 90, 93, 111, 139, 161, 193, 214, 218, 278, 279, 453, 454, 494, 498, 547, 551, 571, 575, 773, 774, 805, 806], "input": [60, 61, 62, 63, 64, 65, 66, 78, 94, 103, 105, 106, 107, 147, 160, 162, 190, 191, 203, 215, 245, 272, 291, 292, 315, 339, 366, 391, 420, 447, 475, 491, 522, 528, 533, 544, 547, 600, 601, 697, 709, 712, 713, 715, 719, 728, 808, 813, 814, 874, 875, 877], "item": [60, 61, 62, 63, 64, 65, 66, 146, 249, 272, 319, 339, 370, 391, 424, 447, 456, 477, 491, 505, 520, 558, 568, 582, 595, 697, 728, 756, 798, 805, 806, 840, 841, 851, 881], "local_pairwise_align": [60, 61, 62, 64, 65], "local_pairwise_align_nucleotid": [60, 61, 62, 63, 65], "global_pairwise_align_protein": [60, 61, 63, 64, 65], "global_pairwise_align_nucelotid": [60, 62, 63, 64, 65], "algorithm": [60, 63, 138, 599, 600, 601, 603, 608, 609, 620, 631, 642, 653, 664, 675, 686, 712, 713, 720, 757, 814, 815, 874], "slightli": [60, 83, 603], "basic": [60, 80, 132, 133, 607, 699, 709], "origin": [60, 62, 63, 65, 70, 71, 74, 77, 78, 81, 82, 86, 87, 94, 95, 97, 98, 105, 106, 108, 134, 136, 141, 143, 144, 240, 310, 361, 415, 456, 473, 599, 600, 601, 602, 603, 607, 712, 720, 728, 757, 813, 814, 879, 881], "valid": [60, 63, 78, 94, 103, 105, 106, 107, 108, 111, 136, 137, 141, 143, 222, 275, 293, 341, 344, 394, 397, 451, 492, 539, 545, 547, 570, 571, 586, 597, 874, 877, 881], "emboss": [60, 63], "needl": 60, "server": [60, 61, 62, 63, 64, 65, 147], "function": [60, 61, 62, 78, 79, 84, 85, 90, 93, 105, 106, 107, 108, 111, 136, 137, 144, 149, 150, 160, 161, 162, 175, 176, 177, 180, 184, 193, 203, 215, 222, 245, 281, 315, 344, 366, 397, 420, 475, 494, 510, 523, 526, 527, 528, 531, 532, 534, 535, 538, 543, 561, 586, 600, 601, 602, 603, 604, 605, 608, 697, 713, 722, 725, 726, 727, 752, 756, 759, 764, 769, 793, 798, 806, 808, 809, 814, 815, 817, 818, 819, 820, 838, 840, 852, 853, 863, 864, 874], "amino": [60, 62, 65, 135, 136, 140, 222, 275, 281, 291, 341, 344, 394, 451, 492, 494, 506], "acid": [60, 62, 65, 135, 136, 137, 140, 143, 147, 222, 275, 281, 291, 293, 341, 344, 394, 397, 451, 456, 492, 494, 506], "sb": 60, "cd": [60, 135, 138, 291], "j": [60, 62, 63, 65, 78, 81, 82, 90, 94, 95, 105, 106, 131, 132, 133, 136, 137, 138, 146, 147, 344, 505, 506, 520, 525, 534, 535, 536, 537, 539, 543, 545, 558, 568, 582, 595, 601, 602, 603, 713, 764, 813], "mol": [60, 63, 132, 133, 135, 138], "biol": [60, 63, 78, 82, 94, 132, 133, 135, 138, 539, 545], "1970": [60, 70], "mar": [60, 63, 82], "48": [60, 87], "443": 60, "53": [60, 142, 757], "ebi": [60, 63, 135, 138, 193], "uk": [60, 63, 82, 135, 138, 193, 525], "tool": [60, 63, 132, 133, 136, 143, 145, 147, 709, 713], "psa": [60, 63], "emboss_needl": 60, "global_pairwise_align": [61, 62, 63, 64, 65], "deriv": [61, 62, 64, 65, 135, 262, 329, 381, 437, 456, 482, 534, 535, 543, 726, 814], "ncbi": [61, 62, 64, 65, 132, 133, 136, 138, 147, 278, 279, 281, 282, 289, 290, 291, 292, 453, 454, 772, 877], "blast": [61, 62, 64, 65, 136], "nlm": [61, 62, 64, 65, 132, 133, 136, 138, 147, 281, 289, 290], "nih": [61, 62, 64, 65, 132, 133, 136, 138, 144, 147, 281, 289, 290], "cgi": [61, 62, 64, 65, 281, 289, 290], "blosum": [62, 65, 344, 494, 506], "block": [62, 65, 108, 506, 839], "henikoff": [62, 65, 506], "proc": [62, 65], "natl": [62, 65], "acad": [62, 65], "sci": [62, 65, 133, 543], "nov": [62, 65, 135, 709], "1992": [62, 65, 69, 78, 94, 506, 546], "89": [62, 65, 138, 506], "22": [62, 65, 142, 147, 506, 528, 723, 877], "10915": [62, 65, 506], "10919": [62, 65, 506], "water": 63, "identif": 63, "molecular": [63, 607, 754, 814], "subsequ": [63, 134, 136, 145, 224, 232, 237, 241, 260, 262, 295, 303, 308, 311, 328, 329, 346, 354, 359, 362, 380, 381, 399, 407, 412, 416, 435, 437, 456, 458, 466, 471, 474, 481, 482, 840, 877], "tf": 63, "1981": [63, 757, 813], "147": 63, "195": 63, "emboss_wat": 63, "sequence1": 66, "sequence2": 66, "deprec": [66, 67, 78, 92, 94, 105, 106, 111, 258, 270, 326, 337, 377, 389, 433, 445, 528, 538], "favor": [66, 538], "1814": 66, "complet": [66, 84, 85, 137, 138, 141, 723, 816, 875], "meet": [66, 145, 184, 218, 809], "acgtu": 67, "look": [67, 140, 142, 143, 148, 218, 272, 339, 391, 447, 453, 454, 491, 498, 528, 551, 575, 709, 725, 726, 727, 756, 863, 879, 881], "get": [67, 145, 190, 191, 202, 203, 281, 290, 494, 546, 547, 571, 601, 697, 713, 761, 800], "substitutionmatrix": [67, 275, 341, 394, 451, 492], "1913": 67, "domin": [68, 70, 76, 87, 98, 99, 102], "interv": [68, 73, 77, 84, 135, 138, 139, 203, 204, 205, 206, 212, 214, 215, 216, 217, 218, 220, 222, 227, 239, 256, 277, 293, 298, 324, 344, 349, 375, 397, 402, 414, 431, 456, 461, 478, 533, 724], "ci": [68, 84, 533], "suffix": 68, "_ci": 68, "rare_threshold": 69, "coverag": [69, 77, 81, 85, 132, 133], "frac": [69, 70, 71, 72, 76, 77, 79, 80, 81, 82, 86, 87, 88, 89, 90, 95, 96, 99, 102, 526, 527, 531, 536, 537, 538, 540, 541, 542, 543, 601, 720], "rare": [69, 727], "c_": 69, "f_1": [69, 72, 77, 81, 96], "gamma": 69, "2_": 69, "pool": 69, "coeffici": [69, 600, 601, 607, 699, 720, 723, 759], "variat": [69, 601, 713], "sum": [69, 71, 74, 78, 87, 88, 90, 94, 98, 215, 249, 319, 370, 424, 477, 527, 531, 532, 536, 727, 728, 749, 805, 839], "_": [69, 134, 136, 137, 141, 146, 215, 227, 298, 349, 402, 461, 546, 601], "f_i": 69, "n_": [69, 70], "threshold": [69, 817], "fewer": [69, 143, 726, 727], "doubl": [69, 70, 71, 72, 74, 76, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 102, 181, 186, 712, 718], "everi": [69, 145, 147, 527, 540, 541, 542, 543, 544, 604, 755, 770, 776], "introduc": [69, 80, 134, 136, 525], "manual": [69, 73, 83, 88, 145, 813], "zero": [69, 79, 111, 131, 193, 214, 249, 319, 370, 424, 477, 525, 528, 530, 533, 537, 538, 539, 540, 541, 542, 545, 547, 599, 600, 601, 602, 603, 604, 607, 712, 718, 721, 726, 728, 814, 881], "known": [69, 141, 181, 186, 543, 544, 713, 718, 877], "environ": [69, 105, 106, 540, 713], "did": [69, 136, 144, 181, 186, 191, 881], "chao": [69, 72, 94], "american": 69, "87": [69, 142], "210": 69, "217": 69, "ma": [69, 275, 341, 394, 451, 492], "yang": 69, "1993": [69, 599, 600], "rule": [69, 136, 143, 145, 146, 813], "recaptur": 69, "debug": [69, 840, 851, 881], "unequ": [69, 282, 494], "failur": [69, 570, 597, 841, 881], "rate": [69, 494, 723], "biometrika": [69, 81], "80": [69, 136, 698, 726, 727, 754, 809, 881], "193": 69, "201": [69, 533], "viceroi": [69, 73], "eeb": [69, 73], "uconn": [69, 73], "edu": [69, 73, 134, 136, 141, 143, 813], "hwang": 69, "chen": [69, 94], "kuo": 69, "2000": [69, 727, 814], "statistica": [69, 80], "sinica": 69, "227": [69, 136], "246": [69, 102, 146], "berger": 70, "parker": 70, "fraction": [70, 524, 727, 758, 879], "total": [70, 71, 77, 78, 79, 81, 86, 87, 88, 89, 90, 102, 131, 132, 145, 203, 249, 319, 370, 424, 477, 494, 547, 571, 600, 764], "plankton": 70, "foraminifera": 70, "sea": 70, "sediment": 70, "scienc": [70, 71, 78, 134, 136, 506, 713], "168": [70, 726], "3937": 70, "1345": 70, "1347": 70, "brillouin": 71, "h_b": 71, "ln": [71, 79, 86, 95, 526, 528, 531, 536, 543], "n_i": [71, 87, 88], "text": [71, 87, 88, 102, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 160, 161, 162, 190, 546, 630, 663, 674], "th": [71, 87, 88, 102, 543], "1956": 71, "academ": 71, "press": 71, "york": 71, "bias_correct": [72, 73], "bia": [72, 73, 533], "correct": [72, 73, 80, 136, 528, 533, 790, 796, 875], "equat": [72, 73, 79, 90, 601], "uncorrect": [72, 73], "bias": [72, 73, 533], "chao1_ci": 72, "2f_2": 72, "f_2": [72, 77], "1984": [72, 222, 293, 344, 397, 456], "parametr": [72, 525, 528, 599, 602], "popul": [72, 79, 81, 101, 144, 146, 265, 332, 384, 440, 485, 540, 605, 723, 727], "scandinavian": 72, "265": 72, "270": 72, "zscore": 73, "96": [73, 139], "chao1": 73, "scalar": [73, 97, 275, 341, 394, 451, 492, 494, 498, 536, 542, 546, 551, 575, 709], "95": [73, 77, 78, 84, 137, 142, 754], "lower_bound": [73, 77, 84, 203], "upper_bound": [73, 77, 84, 203, 215], "emploi": 73, "varianc": [73, 539, 545, 600, 602, 603, 698, 714, 717, 721, 726], "presenc": [73, 94, 282, 291, 727], "absenc": [73, 727], "specif": [73, 78, 83, 103, 105, 106, 107, 108, 111, 148, 218, 456, 607, 619, 641, 642, 652, 685, 696, 726, 727, 798, 875, 880, 881], "simpson": [74, 99], "degre": [74, 94, 134, 533, 539, 545, 717, 724, 726], "concentr": [74, 727], "composit": [74, 78, 94, 190, 713], "p_i": [74, 76, 97, 98], "proport": [74, 76, 80, 81, 90, 94, 97, 98, 142, 252, 427, 523, 525, 526, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 599, 601, 602, 608, 642, 686, 699, 712, 718, 720, 757], "probabl": [74, 84, 85, 96, 533, 608, 620, 697, 712, 723, 727, 734], "randomli": [74, 588, 599, 601, 602, 605, 697, 728, 759, 798], "select": [74, 94, 145, 533, 603, 725, 726, 798], "sometim": [74, 136, 138, 145, 713, 875], "distinguish": [74, 94], "reciproc": [74, 727], "discrep": 74, "denot": [74, 94, 98, 101, 102, 136, 528, 533, 599, 602, 603], "accord": [74, 78, 222, 344, 397, 717, 721], "mathemat": [74, 97, 105, 525, 754, 757, 813], "1949": [74, 98, 99], "natur": [74, 83, 98, 99], "163": [74, 98, 99], "4148": [74, 98, 99], "688": [74, 98, 99], "occurr": [75, 100, 241, 253, 254, 255, 258, 311, 321, 322, 323, 326, 362, 372, 373, 374, 377, 379, 416, 428, 429, 430, 433, 474], "ens_pi": 76, "ens_": 76, "pie": 76, "sum_": [76, 78, 80, 94, 97, 525, 527, 540, 541, 542, 601], "chase": 76, "knight": [76, 78, 105, 106, 709], "scale": [76, 600, 698, 712, 713, 714, 720], "driver": [76, 874], "biodivers": [76, 78, 94], "why": 76, "standardis": 76, "enough": [76, 136, 141, 727], "letter": [76, 78, 136, 138, 344], "volum": [76, 814], "issu": [76, 135, 136, 137, 145, 161, 814, 875], "supplement": 76, "pg": 76, "17": [76, 78, 105, 106, 135, 142, 222, 397, 698, 726], "26": [76, 133, 141, 528, 602, 607, 709], "esti": 77, "good": [77, 81, 718], "pm": 77, "sqrt": [77, 87, 88, 89, 543, 720], "constant": [77, 525, 528, 583, 601, 725], "normal": [77, 106, 137, 138, 599, 603, 718, 719, 720, 723, 724, 726, 727, 756], "distribut": [77, 135, 533, 540, 605, 718, 723, 724, 726, 727], "2nf_2": 77, "hardcod": 77, "1983": 77, "law": 77, "nonparametr": [77, 525, 537], "random": [77, 79, 90, 131, 533, 599, 603, 605, 697, 713, 723, 725, 726, 727, 759, 798], "ann": [77, 96], "905": 77, "912": 77, "otu_id": [78, 94, 105, 106], "sqcup": [78, 94], "minimum": [78, 94, 99, 147, 252, 262, 329, 381, 427, 437, 482, 528, 603, 697, 726, 727], "connect": [78, 80, 94, 141, 734, 783, 790], "lowest": [78, 94, 780, 782], "ancestor": [78, 94, 240, 310, 361, 415, 473, 749, 780, 782], "lca": [78, 94, 754, 782], "superset": [78, 94, 105, 106, 599, 603], "subset": [78, 94, 105, 106, 111, 131, 135, 600, 758, 764, 879], "elsewher": [78, 103, 105, 106, 107], "lead": [78, 103, 105, 106, 107, 136, 137, 140], "hard": [78, 103, 105, 106, 107], "bypass": [78, 103, 105, 106, 107], "certain": [78, 87, 103, 105, 106, 107, 222, 344, 397, 523, 809], "entail": [78, 103, 105, 106, 107], "backward": [78, 94, 105, 106, 145, 528], "compat": [78, 94, 105, 106, 145, 147, 281, 528], "futur": [78, 94, 105, 106, 136], "releas": [78, 94, 105, 106, 135, 147], "missingnodeerror": [78, 94, 103, 105, 106, 107, 767, 768, 770, 785, 798], "duplicatenodeerror": [78, 94, 103, 105, 106, 107, 762], "fail": [78, 79, 94, 103, 105, 106, 107, 217, 603, 723, 840, 841, 881], "exact": [78, 94, 103, 105, 106, 107, 145, 193, 240, 310, 361, 415, 473, 603, 718, 875], "phydiv": 78, "span": [78, 94, 108, 136, 138, 141, 193, 218], "clarifi": 78, "ancestr": 78, "life": 78, "One": [78, 143, 148, 533, 583, 814], "choos": [78, 145, 713, 723], "scope": [78, 881], "unroot": [78, 94, 105, 106, 141, 771, 795, 810, 811, 814], "sever": [78, 141, 143, 698, 723], "evolutionari": [78, 494, 506, 734, 814], "histori": [78, 727], "eh": 78, "fd": [78, 839], "pycog": [78, 105, 106, 813], "qiim": [78, 105, 106, 145], "impos": [78, 105, 106], "few": [78, 105, 106, 108, 875, 879, 881], "had": [78, 105, 106, 599, 603, 727], "trifurc": [78, 105, 106, 141], "newick": [78, 105, 106, 124, 748, 754, 791, 812, 814, 875, 879], "convent": [78, 105, 106, 132, 135, 138], "silent": [78, 105, 106], "conserv": [78, 83, 84, 94, 134, 240, 310, 361, 415, 473, 528, 546], "evalu": [78, 94, 132, 133, 229, 300, 351, 404, 463, 546, 600, 697, 723, 756, 793, 796, 879, 881], "baker": 78, "2006": [78, 603, 814], "bioinformat": [78, 94, 137, 143, 145, 754], "challeng": 78, "117693430600200007": 78, "nee": 78, "1997": [78, 146, 814], "extinct": 78, "loss": [78, 607], "278": 78, "5338": 78, "692": 78, "694": 78, "petchei": 78, "ol": 78, "gaston": 78, "kj": 78, "402": 78, "hamadi": [78, 105, 106], "lozupon": [78, 105, 106], "fast": [78, 105, 106, 608, 718], "facilit": [78, 105, 106, 108, 131, 571, 723, 762, 814], "throughput": [78, 105, 106, 136, 137, 533, 709, 726], "analys": [78, 105, 106, 599], "microbi": [78, 84, 85, 94, 105, 106, 528, 599, 600, 602, 603, 709], "pyrosequenc": [78, 105, 106], "phylochip": [78, 105, 106], "ism": [78, 105, 106], "2010": [78, 105, 106, 137], "u_count": [78, 105, 106], "u8": [78, 105, 106], "62": [78, 105, 106, 134, 137, 603, 877], "round": [78, 83, 90, 105, 106, 601, 723, 726, 727, 764], "fisher": 79, "solv": [79, 723], "runtimeerror": 79, "analyt": 79, "solut": 79, "obtain": [79, 229, 300, 351, 404, 456, 463, 505, 506, 520, 528, 546, 558, 568, 582, 593, 595, 599, 601, 603, 834, 835, 836], "minimize_scalar": 79, "determinist": [79, 599, 603], "inf": [79, 145, 798], "corbet": 79, "william": 79, "1943": 79, "anim": 79, "pp": [79, 89, 96, 713], "58": [79, 142, 723], "rectangl": 80, "gini": [80, 98], "area": 80, "lorenz": 80, "curv": [80, 83, 90, 713, 723, 726, 727], "under": [80, 107, 136, 222, 344, 397, 456, 528, 642, 726, 874], "simplifi": 80, "2b": 80, "entri": [80, 131, 135, 147, 697], "trapezoid": 80, "line": [80, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 190, 726, 752], "parallel": [80, 108], "opinion": 80, "though": [80, 136, 137, 143, 144, 145, 528, 583, 599, 603, 814, 881], "desir": [80, 84, 132, 140, 718, 797, 881], "circumst": [80, 344, 726], "linear": [80, 135, 138, 699, 713], "segment": 80, "accur": [80, 84, 85], "fall": [80, 83, 94, 106, 697], "gradient": [80, 712, 713, 718, 720], "formula": [80, 603], "dx": 80, "h_i": 80, "h_0": 80, "h_n": 80, "1912": 80, "variabl": [80, 131, 272, 339, 391, 447, 456, 491, 528, 600, 603, 698, 699, 709, 713, 718, 719, 720, 723, 725, 726, 840, 863, 881], "mutabl": [80, 456, 820, 877], "cuppini": 80, "bologna": 80, "156": 80, "page": [80, 528, 814, 879], "reprint": 80, "memori": [80, 134, 136, 137, 138, 143, 144, 146, 546, 604, 697, 718, 839, 875], "di": [80, 877], "metodologica": 80, "ed": 80, "pizetti": 80, "salvemini": 80, "rome": 80, "libreria": 80, "eredi": 80, "virgilio": 80, "veschi": 80, "1955": 80, "onc": [81, 136, 148, 807], "1953": 81, "237": [81, 102], "264": 81, "heip": [82, 88], "wiener": [82, 97], "logarithm": [82, 97, 528], "pielou_": 82, "1974": [82, 88], "ass": 82, "54": [82, 106], "555": 82, "557": 82, "lower_quantil": 83, "upper_quantil": 83, "kempton": 83, "taylor": 83, "slope": 83, "cumul": [83, 102, 134], "interquantil": 83, "lower": [83, 84, 136, 143, 193, 203, 528, 533, 586, 593, 601, 697, 727], "quartil": 83, "inward": 83, "bound": [83, 84, 138, 139, 148, 150, 193, 194, 202, 203, 206, 214, 215, 217, 218, 456, 528, 533, 724, 727], "sdr": [83, 88], "iv": [83, 88, 94], "onlin": [83, 88, 137], "magurran": [83, 89], "1998": [83, 698, 712, 713, 715, 716, 718, 720], "half": [83, 540], "uq": 83, "lq": 83, "justif": 83, "unclear": 83, "just": [83, 84, 85, 90, 148, 797, 875, 879, 881], "overlap": [83, 218, 263, 264, 330, 331, 382, 383, 438, 439, 483, 484, 505, 524, 533, 558, 582, 758], "quantil": [83, 533], "consider": [83, 94, 726], "off": [83, 96, 222, 344, 397, 540, 726, 757, 813, 817, 881], "leav": [83, 135, 274, 340, 393, 450], "chang": [83, 136, 202, 203, 291, 456, 506, 528, 533, 599, 697, 756, 790, 881], "1976": 83, "model": [83, 84, 85, 90, 506, 525, 533, 546, 727], "262": 83, "818": 83, "820": 83, "pisc": 83, "com": [83, 132, 133, 134, 600, 839], "sdrhelp": 83, "ci_typ": 84, "ulcl": 84, "uncov": [84, 85], "predict": [84, 85, 146, 726], "ratio": [84, 95, 99, 525, 526, 527, 528, 531, 532, 534, 535, 539, 545, 727], "ulcu": 84, "fix": [84, 140, 143], "lladser_p": 84, "around": [84, 85, 108, 136, 143, 146, 494, 529, 601, 724, 879], "full": [84, 85, 134, 528, 770, 796, 838], "theorem": [84, 85], "iii": 84, "lladser": [84, 85, 105, 106], "gouet": [84, 85], "reeder": [84, 85], "extrapol": [84, 85, 723], "urn": [84, 85], "poisson": [84, 85], "2011": [84, 85, 94, 105, 106], "lladser_ci": 85, "too": [85, 718, 749], "low": [85, 718, 726], "log": [86, 525, 526, 527, 528, 531, 532, 533, 534, 535, 539, 545], "accumul": [86, 89, 749], "1958": 86, "36": [86, 96, 142, 145, 539, 545, 723], "71": [86, 105, 142, 146], "mcintosh": [87, 88], "mcintosh_": 87, "1967": [87, 601], "concept": [87, 543], "1115": 87, "1126": 87, "mcintosh_d": 88, "wrong": 88, "engel": 88, "560": 88, "d_": [89, 99], "mn": 89, "squar": [89, 90, 107, 141, 494, 547, 571, 715], "2004": 89, "blackwel": 89, "76": [89, 94, 142], "77": [89, 603], "num_repeat": 90, "params_guess": 90, "micha": 90, "menten": 90, "fit": [90, 533, 697, 699, 720, 880], "rarefact": 90, "ns_": 90, "datapoint": 90, "subsampl": [90, 697, 723, 726, 727, 728, 759], "initi": [90, 136, 726, 781, 784, 787, 788, 789, 804, 807, 814, 851], "s_max": 90, "subsample_count": [90, 697], "controversi": 90, "ml": 90, "assumpt": [90, 141, 523, 528, 533, 767, 768, 816], "roughli": 90, "magnitud": [90, 533, 601, 603, 718, 815], "enzym": 90, "kinet": 90, "nonlinear": 90, "raaijmak": 90, "1987": [90, 814], "biometr": [90, 603], "793": 90, "803": 90, "due": [92, 141, 217, 537, 538, 600, 603, 713, 726], "usag": [92, 602], "reli": [93, 145, 222, 344, 397], "explicitli": [94, 143, 145, 275, 341, 394, 451, 492, 698], "fulli": [94, 138, 875], "adopt": [94, 275, 341, 394, 451, 492], "author": [94, 138, 146, 456, 528], "upd": 94, "contrast": [94, 543], "rpd": 94, "advantag": [94, 571, 840], "framework": [94, 525], "rbwpd_": 94, "analog": 94, "pd_": 94, "multipli": 94, "bwpd_": 94, "delta": [94, 537, 538, 717], "npd": 94, "min": [94, 99, 727], "lesser": 94, "side": [94, 601, 604, 607], "balanc": [94, 543], "adjust": 94, "factor": [94, 105, 106, 599, 602, 607, 713, 727], "theta": [94, 528], "back": [94, 136, 139, 183, 188, 750, 879], "public": [94, 137, 709], "although": [94, 607, 726], "involv": [94, 526], "report": [94, 145, 161, 533, 607, 720], "perspect": 94, "rpd_": 94, "upd_": 94, "pardi": 94, "goldman": 94, "2007": [94, 105, 106], "resourc": [94, 145, 147, 190], "systemat": 94, "biologi": [94, 95, 99, 291, 607, 754, 767, 813, 814], "56": [94, 243, 313, 364, 418], "431": 94, "444": 94, "chiu": 94, "jost": 94, "2016": [94, 539, 545], "decomposit": [94, 108], "hill": 94, "141": [94, 757], "72": 94, "mccoi": 94, "matsen": 94, "state": [94, 134, 143, 145, 190, 840, 841, 851, 863, 881], "robust": [94, 145, 539, 545, 603, 607], "depth": [94, 698, 723, 726, 727, 807, 879], "peerj": 94, "e157": 94, "vellend": 94, "cornwel": 94, "magnuson": 94, "ford": 94, "mooer": 94, "\u00f8": 94, "frontier": 94, "assess": [94, 102, 599, 601, 602, 603, 607], "194": 94, "207": 94, "barker": 94, "quantit": [94, 105, 106, 712, 727], "prioriti": [94, 852, 853, 881], "achiev": [94, 877], "linnean": 94, "societi": 94, "165": 94, "bitting": 94, "charlson": 94, "hoffmann": 94, "lewi": 94, "wu": [94, 106], "li": 94, "2012": [94, 138, 147, 601], "environment": [94, 600, 698, 713, 718, 719], "covari": [94, 714], "2106": 94, "2113": 94, "pielou": [95, 99], "equit": [95, 99], "e_h": 95, "That": [95, 99, 141, 265, 332, 384, 440, 485], "actual": [95, 99, 145, 148, 180, 601], "versu": [95, 99, 105, 106], "maximum": [95, 102, 136, 137, 528, 533, 600, 642, 697, 713, 717, 721, 726, 727, 759], "heip_": 95, "1966": [95, 99], "theoret": [95, 99], "131": [95, 99, 757], "unobserv": 96, "outcom": [96, 726], "1968": 96, "vol": 96, "256": [96, 723], "257": 96, "bit": [97, 132, 133, 145], "log_2": 97, "propos": [97, 814], "1948": 97, "bell": 97, "technic": [97, 141], "379": 97, "423": 97, "impur": 98, "e_d": 99, "enspi": 99, "144": 99, "discret": 101, "entiti": [101, 193], "smaller": [101, 262, 329, 381, 437, 482, 604], "observed_featur": 101, "d_w": 102, "max_i": 102, "b_i": [102, 543], "sequenti": [102, 136, 137, 143, 543, 544, 709, 808], "smallest": [102, 143, 726, 727], "express": [102, 248, 276, 318, 342, 369, 395, 423, 452, 476, 533, 539, 545, 726, 877], "bracket": [102, 141], "uneven": 102, "plant": [102, 135, 543], "tabl": [103, 107, 137, 138, 145, 147, 278, 279, 281, 290, 291, 292, 453, 454, 528, 533, 698, 712, 713, 719, 720, 840, 877], "dissimilar": [104, 107, 140, 494, 495, 496, 498, 503, 504, 505, 507, 508, 510, 513, 514, 516, 519, 520, 539, 546, 547, 548, 549, 551, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 570, 571, 572, 573, 575, 580, 581, 582, 584, 585, 587, 589, 591, 594, 595, 598], "v_count": [105, 106], "qualit": [105, 106, 709], "deeper": [105, 106], "advis": [105, 106, 111], "appl": [105, 106], "microbiol": [105, 106], "8228": 105, "8235": 105, "2005": [105, 135], "kellei": [105, 106], "insight": [105, 106], "structur": [105, 106, 133, 138, 141, 147, 506, 547, 599, 600, 607, 796, 840, 874], "73": [105, 106], "1576": [105, 106], "1585": [105, 106], "stombaugh": [105, 106], "comparison": [105, 106, 528, 533, 607, 725, 757, 817, 879], "169": [105, 106], "172": [105, 106], "biocor": [105, 106, 709], "uu": 105, "37": [105, 146], "quantiti": 106, "mathemt": 106, "pairwise_func": 107, "pairwis": [107, 108, 111, 510, 528, 539, 561, 586, 604, 607, 765, 803, 879], "doc": [107, 134, 135, 136, 143, 145, 193, 516, 547, 565, 571, 583, 591, 813], "link": [107, 202, 600, 607, 734], "hollow": [107, 131, 547, 586, 588, 605], "sklearn": 107, "pairwise_dist": 107, "distancematrix": [107, 108, 111, 131, 140, 517, 522, 539, 547, 566, 599, 600, 601, 602, 603, 604, 605, 607, 709, 718, 803, 814], "itypeerror": 107, "reduce_f": 108, "map_f": 108, "resolv": [108, 111, 122, 145, 607], "reduc": [108, 603, 697, 718], "partialdistancematrix": 108, "signatur": [108, 191], "_block_comput": 108, "ipyparallel": 108, "map_async": 108, "blocksiz": 108, "partial_beta_divers": 108, "process": [108, 136, 146, 217, 533, 720, 816, 841, 881], "motiv": 108, "earth": 108, "project": [108, 137, 526, 543, 599, 600, 601, 602, 603, 719], "dataset": [108, 131, 525, 533, 603, 698, 713, 718], "000": 108, "million": 108, "earthmicrobiom": 108, "id_pair": 111, "caution": 111, "unresolv": 111, "unstabl": 111, "warn": [112, 119, 137, 145, 718, 756, 810, 815, 816, 874], "blast7": 113, "pars": [113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 136, 137, 138, 140, 148, 875], "embl": [115, 138, 147, 193, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493], "sniffer": [119, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 176, 181, 182, 186, 187, 875], "gff3": [120, 138, 219, 221, 271, 280, 338, 343, 490, 493], "genbank": [121, 135, 139, 147, 271, 280, 338, 343, 390, 396, 446, 455, 490, 493], "lsmat": [123, 515, 521, 564, 569, 590, 596], "written": [126, 134, 136, 137, 141, 143, 813, 875, 879], "qseq": [127, 132, 133, 271, 338, 390, 446, 490], "qual": [128, 137], "ambigu": [130, 182, 187], "unidentifi": 130, "encod": [131, 136, 137, 144, 148, 150, 190, 543, 698], "rapid": [131, 136, 776], "ye": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "dissimilaritymatrix": [131, 140, 494, 496, 498, 503, 505, 507, 508, 510, 514, 515, 517, 519, 520, 521, 539, 571, 573, 575, 580, 582, 584, 585, 589, 592, 594, 595, 605], "hdf5": 131, "datatyp": [131, 697, 728], "unicod": [131, 145, 190], "diagon": [131, 586, 593], "dm": [131, 498, 505, 514, 517, 520, 546, 551, 558, 563, 566, 568, 575, 582, 589, 592, 593, 595, 599, 600, 603, 604, 709, 814], "current": [131, 132, 135, 136, 137, 138, 143, 145, 146, 147, 203, 217, 279, 292, 454, 506, 528, 601, 686, 712, 718, 756, 769, 778, 779, 784, 874], "float32": [131, 603], "human": [131, 136, 137, 140, 141, 142, 819], "readabl": [131, 136, 137, 140, 141, 142, 143, 190, 819], "especi": [131, 136, 145, 607, 720], "hdfgroup": 131, "databas": [132, 133, 135, 138, 145, 147, 193, 772], "simpl": [132, 133, 136, 137, 141, 145, 146, 148, 174, 185, 540, 600, 607, 875, 879], "header": [132, 133, 134, 137, 138, 140, 142, 145], "tab": [132, 133, 139, 140, 141, 142, 144, 145, 147], "moac": 132, "gi": [132, 133, 138], "15800534": 132, "ref": [132, 751], "np_286546": 132, "161": 132, "3e": [132, 133, 723], "114": 132, "330": 132, "170768970": 132, "zp_02903423": 132, "99": [132, 133, 135, 142, 599, 603, 607], "9e": 132, "329": 132, "produc": [132, 133, 143, 144, 160, 262, 329, 381, 437, 482, 712, 720], "outfmt": [132, 133], "legaci": [132, 133, 136], "With": [132, 525, 537], "qseqid": [132, 133], "sseqid": [132, 133], "bitscor": [132, 133], "qstart": [132, 133], "sstart": [132, 133], "qgi": [132, 133], "qacc": [132, 133], "acces": 132, "qaccver": [132, 133], "qlen": [132, 133], "sallseqid": [132, 133], "sgi": [132, 133], "sallgi": [132, 133], "sacc": [132, 133], "saccver": [132, 133], "sallacc": [132, 133], "slen": [132, 133], "align": [132, 133, 136, 137, 193, 203, 456, 494, 874, 875, 877], "qend": [132, 133], "send": [132, 133], "part": [132, 136, 138, 141, 144, 522, 526, 543, 697, 784, 840, 879], "sseq": [132, 133], "raw": [132, 630, 663], "pident": [132, 133], "percent": [132, 877], "nident": [132, 133], "gapopen": [132, 133], "ppo": [132, 133], "percentag": [132, 525], "frame": [132, 133, 279, 281, 291, 292, 454, 533, 600, 772], "qframe": [132, 133], "sframe": [132, 133], "btop": [132, 133], "traceback": [132, 143, 291, 456, 601], "staxid": [132, 133], "taxonomi": [132, 141, 145, 147, 281, 289, 290, 772, 773, 806], "sscinam": [132, 133], "scientif": [132, 145, 571], "scomnam": [132, 133], "sblastnam": [132, 133], "sskingdom": [132, 133], "super": [132, 133], "kingdom": [132, 133, 147], "stitl": [132, 133], "sstrand": [132, 133], "strand": [132, 133, 138, 139, 146, 193, 277, 278, 279, 449], "salltitl": [132, 133], "qcov": [132, 133], "qcovhsp": [132, 133], "hsp": [132, 133], "miss": [132, 136, 145, 146, 240, 310, 361, 415, 473, 525, 537, 600, 709, 725, 726, 731, 732, 881], "allow": [132, 136, 137, 141, 143, 144, 145, 148, 160, 162, 190, 203, 222, 240, 249, 310, 319, 344, 361, 370, 397, 415, 424, 473, 477, 498, 505, 525, 551, 558, 575, 582, 599, 600, 602, 603, 604, 608, 718, 764, 806, 841, 881], "default_column": 132, "suppos": [132, 133, 135, 136, 137, 138, 141, 144, 146, 540, 723, 727], "tgi": 132, "t100": [132, 133], "t161": 132, "t0": [132, 133, 139, 142, 144, 546], "t1": [132, 133, 142, 144, 147, 546], "t3e": [132, 133], "t330": 132, "t99": 132, "t9e": 132, "t329": 132, "fh": [132, 133, 134, 136, 137, 138, 139, 143, 144, 146, 147, 148, 160, 161, 162], "df": [132, 133, 147, 517, 533, 566, 592, 599, 600, 603, 709, 724], "000000e": [132, 133], "altschul": [132, 133], "gish": [132, 133], "miller": [132, 133], "myer": [132, 133], "lipman": [132, 133, 136], "1990": [132, 133, 135], "215": [132, 133], "403": [132, 133], "410": [132, 133], "blastedbio": 132, "blogspot": 132, "csv": [132, 140, 875], "book": [132, 133, 136], "nbk279675": 132, "blastn": 133, "18": [133, 142, 146, 599, 723, 877], "1786181": 133, "gb": [133, 138], "ae000111": 133, "ecoli": 133, "hit": 133, "10596": 133, "ae000174": 133, "8e": 133, "5565": 133, "5671": 133, "6928": 133, "6821": 133, "ae000394": 133, "1e": [133, 141, 817], "5587": 133, "135": [133, 539, 545], "219": [133, 135, 600], "ae000425": 133, "6e": 133, "8552": 133, "8468": 133, "ae000171": 133, "2214": 133, "2130": 133, "minor": 133, "blastp": 133, "31": 133, "query1": 133, "subject2": 133, "sbjctframe": 133, "ver": 133, "record": [133, 135, 136, 137, 138, 139, 144], "subject1": 133, "other_vertebr": 133, "af178033": 133, "emorg": 133, "811": 133, "1566": 133, "af031394": 133, "63": [133, 142], "909": 133, "1542": [133, 754], "consist": [133, 136, 137, 139, 142, 143, 145, 146, 147, 275, 341, 394, 451, 456, 492, 494, 726, 784, 804], "blast6": 133, "sbjct": 133, "tax": 133, "tae000111": 133, "t10596": 133, "tae000174": 133, "t8e": 133, "t5565": 133, "t5671": 133, "t6928": 133, "t6821": 133, "tae000171": 133, "t5587": 133, "t2214": 133, "t2130": 133, "tae000425": 133, "t6e": 133, "t8552": 133, "t8468": 133, "temorg": 133, "t811": 133, "t1566": 133, "af178032": 133, "t94": 133, "57": [133, 142, 713], "t44": 133, "t1217": 133, "af178031": 133, "82": [133, 134, 146], "t42": 133, "t1233": 133, "94": [133, 142], "nbk279682": 133, "plain": [134, 136, 137, 138, 141, 143, 144], "divid": [134, 543, 715, 717, 721], "60": [134, 135, 139, 608, 726], "long": [134, 136, 143, 145, 247, 317, 368, 422, 526, 600, 686, 712], "below": [134, 136, 137, 141, 143, 145, 146, 147, 281, 293, 456, 600, 601, 709, 726, 734], "properti": [134, 143, 147, 282, 288, 293, 494, 510, 561, 571, 586, 723, 754, 790, 820, 832, 834, 835, 836], "abc": [134, 227, 293, 298, 349, 402, 461], "gcaugcaucugcauacguacguacgcaugcauca": 134, "def": [134, 148, 160, 161, 162, 245, 293, 315, 366, 420, 475, 727, 881], "xyz": 134, "gucgauacauacguacgucguacguacgu": 134, "cgac": 134, "cgcgaugcaugcau": 134, "cgau": 134, "caugcaucguacguacgcaugac": 134, "code": [134, 136, 137, 138, 147, 218, 222, 275, 277, 278, 279, 281, 282, 288, 289, 290, 291, 292, 341, 344, 394, 397, 449, 451, 453, 454, 492, 607, 728, 757, 813, 815, 877], "clustal_f": 134, "gcaugcaucugcauacguacguacgcaugca": 134, "gucgauacauacguacgucgguacgu": 134, "cgugcaugcau": 134, "cauucguacguacgcaugac": 134, "gcaugcaucugcauacguacguacgcaugcagucgauacauacguacgucgguacgu": 134, "accgttgta": [134, 143], "gtagct": [134, 143], "gtcgaa": [134, 143], "gtacct": [134, 143], "agagttgaaggtatct": [134, 143], "getvalu": [134, 136, 137, 138, 139, 143, 146, 546], "sciencedirect": 134, "pii": 134, "0378111988903307": 134, "mit": 134, "meme_v4": 134, "clustalw": 134, "annot": [135, 138, 139, 145, 203], "mark": [135, 138, 146, 881], "termin": [135, 278, 291, 453, 807], "comment": [135, 136, 138, 139, 140, 146, 147], "txt": [135, 145, 147], "extens": [135, 145], "seen": [135, 138, 727], "submit": [135, 136, 727], "ena": [135, 138], "assembl": 135, "flatfil": 135, "parent": [135, 139, 141, 147, 456, 543, 732, 734, 751, 754, 766, 769, 778, 786, 790, 799, 805, 808, 810, 811, 879], "metatdata": 135, "moment": [135, 601, 881], "track": 135, "1499": 135, "rn": [135, 146], "download": [135, 138, 147], "molecul": [135, 136, 138, 456, 494, 877], "thymin": [135, 138, 222, 277, 449], "uracil": [135, 138, 277, 397, 449], "embl_str": 135, "x56734": 135, "sv": 135, "mrna": 135, "std": [135, 717, 721, 726], "pln": [135, 147], "1859": 135, "bp": [135, 138], "xx": 135, "s46826": 135, "dt": 135, "sep": 135, "1991": 135, "29": [135, 137, 138], "85": [135, 142, 727, 809], "updat": [135, 136, 147, 203, 217, 456], "de": [135, 146], "trifolium": 135, "repen": 135, "cyanogen": 135, "glucosidas": 135, "kw": 135, "white": 135, "clover": 135, "oc": 135, "eukaryota": 135, "viridiplanta": 135, "streptophyta": 135, "embryophyta": 135, "tracheophyta": 135, "spermatophyta": 135, "magnoliophyta": 135, "eudicotyledon": 135, "gunnerida": 135, "pentapetala": 135, "rosid": 135, "fabid": 135, "fabal": 135, "fabacea": 135, "papilionoidea": 135, "trifoliea": 135, "rp": 135, "rx": 135, "1007": [135, 539, 545], "bf00039495": 135, "pubm": [135, 138, 456], "1907511": 135, "ra": [135, 146], "oxtobi": 135, "dunn": 135, "pancoro": 135, "hugh": 135, "rt": [135, 146], "linamaras": 135, "rl": [135, 146], "209": [135, 138, 601], "insdc": [135, 138, 193], "univers": [135, 136, 143, 145, 150], "newcastl": 135, "upon": 135, "tyne": 135, "medic": 135, "school": 135, "ne2": 135, "4hh": 135, "dr": 135, "md5": [135, 839], "1e51ca3a5450c43524b9185c236cc5cc": 135, "qualifi": [135, 138], "mol_typ": [135, 138], "clone_lib": 135, "lambda": [135, 697, 723, 726, 727, 756, 769, 790, 793, 798, 809, 813, 814, 881], "gt10": 135, "clone": 135, "tre361": 135, "tissue_typ": 135, "db_xref": [135, 138], "3899": 135, "experiment": [135, 603], "evid": [135, 141], "1495": 135, "ec_numb": 135, "21": [135, 142, 528, 539, 545, 716, 727], "goa": 135, "p26204": 135, "interpro": 135, "ipr001360": 135, "ipr013781": 135, "ipr017853": 135, "ipr033132": 135, "uniprotkb": 135, "swiss": 135, "prot": 135, "protein_id": 135, "caa40058": 135, "translat": [135, 138, 141, 147, 190, 277, 279, 281, 292, 344, 449, 454, 877], "mdfivaifalfvissftitstnaveastlldignlsr": 135, "sfprgfifgagssayqfegavneggrgpsiwdtfthkypekirdgsnaditv": 135, "dqyhrykedvgimkdqnmdsyrfsiswprilpkgklsgginhegikyynnli": 135, "nellangiqpfvtlfhwdlpqvledeyggflnsgvindfrdytdlcfkefgd": 135, "rvrywstlnepwvfsnsgyalgtnapgrcsasnvakpgdsgtgpyivthnqi": 135, "lahaeavhvyktkyqayqkgkigitlvsnwlmplddnsipdikaaersldfq": 135, "fglfmeqlttgdysksmrrivknrlpkfskfesslvngsfdfiginyysssi": 135, "isnapshgnakpsystnpmtnisfekhgiplgpraasiwiyvypymfiqedf": 135, "eifcyilkinitilqfsitengmnefndatlpveeallntyridyyyrhlyi": 135, "irsairagsnvkgfyawsfldcnewfagftvrfglnfvd": 135, "609": 135, "314": 135, "355": [135, 608], "581": 135, "aaacaaacca": 135, "aatatggatt": 135, "ttattgtagc": 135, "catatttgct": 135, "ctgtttgtta": 135, "ttagctcatt": 135, "cacaattact": 135, "tccacaaatg": 135, "cagttgaagc": 135, "ttctactctt": 135, "cttgacatag": 135, "gtaacctgag": 135, "tcggagcagt": 135, "tttcctcgtg": 135, "gcttcatctt": 135, "tggtgctgga": 135, "tcttcagcat": 135, "accaatttga": 135, "aggtgcagta": 135, "aacgaaggcg": 135, "gtagaggacc": 135, "aagtatttgg": 135, "gataccttca": 135, "cccataaata": 135, "tccagaaaaa": 135, "ataagggatg": 135, "gaagcaatgc": 135, "agacatcacg": 135, "gttgaccaat": 135, "atcaccgcta": 135, "caaggaagat": 135, "gttgggatta": 135, "tgaaggatca": 135, "aaatatggat": 135, "tcgtatagat": 135, "tctcaatctc": 135, "ttggccaaga": 135, "atactcccaa": 135, "agggaaagtt": 135, "gagcggaggc": 135, "ataaatcacg": 135, "aaggaatcaa": 135, "atattacaac": 135, "aaccttatca": 135, "acgaactatt": 135, "ggctaacggt": 135, "atacaaccat": 135, "ttgtaactct": 135, "ttttcattgg": 135, "gatcttcccc": 135, "aagtcttaga": 135, "agatgagtat": 135, "ggtggtttct": 135, "taaactccgg": 135, "tgtaataaat": 135, "gattttcgag": 135, "actatacgga": 135, "tctttgcttc": 135, "aaggaatttg": 135, "gagatagagt": 135, "gaggtattgg": 135, "agtactctaa": 135, "atgagccatg": 135, "ggtgtttagc": 135, "aattctggat": 135, "atgcactagg": 135, "aacaaatgca": 135, "ccaggtcgat": 135, "gttcggcctc": 135, "caacgtggcc": 135, "aagcctggtg": 135, "attctggaac": 135, "aggaccttat": 135, "atagttacac": 135, "acaatcaaat": 135, "tcttgctcat": 135, "gcagaagctg": 135, "tacatgtgta": 135, "taagactaaa": 135, "taccaggcat": 135, "atcaaaaggg": 135, "aaagataggc": 135, "ataacgttgg": 135, "tatctaactg": 135, "gttaatgcca": 135, "cttgatgata": 135, "atagcatacc": 135, "agatataaag": 135, "gctgccgaga": 135, "gatcacttga": 135, "cttccaattt": 135, "ggattgttta": 135, "tggaacaatt": 135, "aacaacagga": 135, "gattattcta": 135, "agagcatgcg": 135, "gcgtatagtt": 135, "aaaaaccgat": 135, "tacctaagtt": 135, "ctcaaaattc": 135, "gaatcaagcc": 135, "tagtgaatgg": 135, "ttcatttgat": 135, "tttattggta": 135, "taaactatta": 135, "ctcttctagt": 135, "tatattagca": 135, "atgccccttc": 135, "acatggcaat": 135, "gccaaaccca": 135, "gttactcaac": 135, "aaatcctatg": 135, "accaatattt": 135, "catttgaaaa": 135, "acatgggata": 135, "cccttaggtc": 135, "caagggctgc": 135, "ttcaatttgg": 135, "atatatgttt": 135, "atccatatat": 135, "gtttatccaa": 135, "gaggacttcg": 135, "agatcttttg": 135, "ttacatatta": 135, "aaaataaata": 135, "taacaatcct": 135, "gcaattttca": 135, "atcactgaaa": 135, "atggtatgaa": 135, "tgaattcaac": 135, "gatgcaacac": 135, "ttccagtaga": 135, "agaagctctt": 135, "ttgaatactt": 135, "acagaattga": 135, "ttactattac": 135, "cgtcacttat": 135, "actacattcg": 135, "ttctgcaatc": 135, "agggctggct": 135, "caaatgtgaa": 135, "gggtttttac": 135, "gcatggtcat": 135, "ttttggactg": 135, "taatgaatgg": 135, "tttgcaggct": 135, "ttactgttcg": 135, "ttttggatta": 135, "aactttgtag": 135, "attagaaaga": 135, "tggattaaaa": 135, "aggtacccta": 135, "agctttctgc": 135, "ccaatggtac": 135, "aagaactttc": 135, "tcaaaagaaa": 135, "ctagctagta": 135, "ttattaaaag": 135, "tagattacag": 135, "tacatcgttt": 135, "gaagttgagt": 135, "tggtgcacct": 135, "aattaaataa": 135, "aagaggttac": 135, "tcttaacata": 135, "tttttaggcc": 135, "attcgttgtg": 135, "aagttgttag": 135, "gctgttattt": 135, "ctattatact": 135, "atgttgtagt": 135, "aataagtgca": 135, "ttgttgtacc": 135, "agaagctatg": 135, "atcataacta": 135, "taggttgatc": 135, "cttcatgtat": 135, "cagtttgatg": 135, "ttgagaatac": 135, "tttgaattaa": 135, "aagtcttttt": 135, "ttattttttt": 135, "aaaaaaaaaa": 135, "aaaaaaaaa": 135, "dna_seq": [135, 136, 138], "cross_refer": 135, "date": 135, "dbsourc": 135, "locu": [135, 138, 147], "1740": 135, "1800": 135, "rna_seq": [135, 138], "aauauggauu": 135, "uuauuguagc": 135, "cauauuugcu": 135, "cuguuuguua": 135, "uuagcucauu": 135, "cacaauuacu": 135, "uccacaaaug": 135, "caguugaagc": 135, "uucuacucuu": 135, "cuugacauag": 135, "guaaccugag": 135, "agaagcuaug": 135, "aucauaacua": 135, "uagguugauc": 135, "cuucauguau": 135, "caguuugaug": 135, "uugagaauac": 135, "uuugaauuaa": 135, "aagucuuuuu": 135, "uuauuuuuuu": 135, "trascrib": 135, "verifi": [135, 148, 181, 186], "transcrib": [135, 138, 278, 279, 449, 877], "soppos": 135, "deal": [135, 189, 525, 537, 718, 875], "embl_gen": 135, "ftp": [135, 147, 193], "pub": [135, 147, 193], "usrman": 135, "view": 135, "displai": [135, 249, 272, 281, 319, 339, 370, 391, 424, 447, 477, 491, 604, 699], "brows": 135, "easi": [136, 137, 145], "db": 136, "149855": 136, "cgatgtcgatcgatcgatcgatcag": 136, "34989": 136, "catcgatcgatcgatgcatgcatgcatg": 136, "accompani": [136, 547, 816], "particuarli": 136, "instrument": 136, "phred": [136, 137], "nonneg": 136, "deflin": 136, "split": [136, 137, 143, 146], "blank": [136, 137, 141, 142, 143, 145, 514, 563, 589], "whitespac": [136, 137, 140, 142, 146], "trail": [136, 137, 140], "semicolon": [136, 139], "resembl": 136, "request": [136, 505, 520, 558, 568, 582, 595, 764, 838, 875], "tracker": [136, 161], "pull": 136, "welcom": 136, "greater": [136, 203, 223, 294, 345, 398, 457, 533, 599, 601, 602, 603, 604, 607, 726, 727, 728], "immedi": [136, 143, 776], "repect": 136, "strictli": [136, 528, 533, 544, 755], "enforc": [136, 456], "itself": [136, 143, 147, 191, 193, 222, 281, 344, 397, 456, 494, 607, 699, 734, 877], "standard": [136, 137, 139, 141, 145, 275, 278, 279, 281, 291, 292, 341, 394, 451, 453, 454, 492, 498, 525, 528, 551, 575, 600, 601, 714, 717, 720, 721, 875, 877], "remaind": 136, "iupac": [136, 137, 143, 144, 222, 252, 281, 291, 344, 397, 427, 456, 877], "lexicon": [136, 137, 143], "sciki": 136, "newlin": [136, 141, 143, 148, 150, 181, 182, 186, 187, 190], "additon": 136, "maintain": [136, 141, 148, 588, 712, 713, 723, 726], "path": [136, 137, 144, 190, 750, 838], "seq_num": [136, 137, 138, 139, 144], "50th": [136, 528], "id_whitespace_replac": [136, 137], "disk": [136, 547], "potenti": [136, 262, 329, 381, 437, 482, 697, 793, 815, 881], "description_newline_replac": [136, 137], "max_width": 136, "width": [136, 140, 143], "longer": [136, 143, 525, 727], "caveat": [136, 525], "never": [136, 146], "exce": [136, 143], "12345": [136, 456], "better": [136, 712, 713, 875], "runtim": [136, 222, 344, 397, 840, 881], "affect": [136, 141, 281, 282, 288, 456, 599, 603], "five": [136, 147, 514, 528, 563, 589, 814], "turkei": [136, 143], "aagctngggcatttcagggtgagcccgggcaatacagggtat": 136, "salmo": [136, 143], "gair": 136, "aagccttggcagtgcagggtgagccgtgg": 136, "ccgggcacggtat": 136, "sapien": 136, "accggttggccgttcagggtacaggttggccgttcagggtaa": 136, "seq4": 136, "chimp": [136, 143], "aaacccttgccg": 136, "ttacgcttaaac": 136, "cgaggccgggac": 136, "actcat": 136, "seq5": 136, "gorilla": [136, 143], "aaacccttgccggtacgcttaaaccattgccggtacgcttaa": 136, "copyright": [136, 143], "1986": [136, 141, 143, 713], "2008": [136, 143], "washington": [136, 141, 143, 813], "joseph": [136, 143, 879], "felsenstein": [136, 143, 879], "permiss": [136, 141, 143], "grant": [136, 143], "fee": [136, 143], "charg": [136, 143], "fl": 136, "presum": 136, "aagccttggcagtgcagggtgagccgtggccgggcacggtat": 136, "aaacccttgccgttacgcttaaaccgaggccgggacactcat": 136, "didn": [136, 881], "detect": [136, 138, 145, 182, 187, 528, 601, 727], "infeas": 136, "stream": [136, 139, 875], "loop": [136, 810, 811], "aagctngggc": [136, 143], "atttcagggt": [136, 143], "gagcccgggc": [136, 143], "aatacagggt": [136, 143], "aagccttggc": 136, "agtgcagggt": [136, 143], "gagccgtggc": [136, 143], "cgggcacggt": [136, 143], "accggttggc": 136, "cgttcagggt": [136, 143], "acaggttggc": [136, 143], "aaacccttgc": [136, 143], "cgttacgctt": [136, 143], "aaaccgaggc": [136, 143], "cgggacactc": [136, 143], "cggtacgctt": [136, 143], "aaaccattgc": [136, 143], "fifth": 136, "api": [136, 184, 522], "standalon": 136, "cgatgtc": 136, "catcgtc": 136, "39": [136, 142, 543], "79": [136, 139, 142], "fasta_fl": 136, "qual_fl": 136, "uint8": [136, 137, 144, 222, 224, 241, 245, 260, 261, 266, 267, 268, 269, 275, 295, 311, 315, 328, 333, 334, 335, 336, 341, 344, 346, 362, 366, 380, 385, 386, 387, 388, 394, 397, 399, 416, 420, 435, 436, 441, 442, 443, 444, 451, 456, 458, 474, 475, 481, 486, 487, 488, 489, 492], "new_fasta_fh": 136, "new_qual_fh": 136, "dj": 136, "pearson": [136, 601, 604, 607, 759], "wr": [136, 607], "1985": [136, 222, 293, 344, 397, 456], "sensit": [136, 145, 265, 332, 384, 440, 485], "4693": 136, "1435": 136, "41": [136, 142], "en": [136, 137, 146, 814], "wikipedia": [136, 137, 146, 814, 879], "wiki": [136, 137, 143, 146, 814], "fasta_format": 136, "blastcgihelp": 136, "shtml": 136, "broadinstitut": 136, "crd": 136, "php": 136, "madden": 136, "oct": [136, 138], "2003": [136, 525], "aug": 136, "mcentyr": 136, "ostel": 136, "editor": 136, "handbook": 136, "internet": [136, 147], "bethesda": 136, "md": 136, "nation": [136, 147, 506], "center": [136, 147, 529, 600, 712, 714, 718, 721], "biotechnologi": [136, 147], "chapter": [136, 719], "nbk21097": 136, "evolut": [136, 141, 143, 606, 607, 754, 813, 814], "genet": [136, 141, 143, 147, 278, 279, 281, 282, 288, 289, 290, 291, 292, 453, 454, 606, 813, 877], "invent": 137, "jim": 137, "mullikin": 137, "wellcom": 137, "trust": 137, "sanger": 137, "institut": 137, "formal": [137, 147, 525], "conceptu": [137, 602], "aacaccaaacttctccaccacgtgagctacaaaag": 137, "cabcacc": 137, "lb": 137, "ccyt": 137, "wf": [137, 881], "tatgtatatataacatatacatatatacatacata": 137, "kz": 137, "py": [137, 148], "yy": 137, "bt": 137, "aT": 137, "bbb": 137, "printabl": [137, 144], "ascii": [137, 144, 145, 148, 275, 341, 394, 451, 492, 494, 752, 879], "decod": [137, 190], "excel": [137, 145], "supplementari": [137, 528], "solexa": 137, "unfortun": [137, 726], "notabl": 137, "illumina": [137, 144], "highlight": 137, "foundat": 137, "obf": 137, "biopython": 137, "bioperl": [137, 143], "offset": [137, 138], "126": 137, "93": 137, "illumina1": [137, 144], "later": [137, 725], "59": 137, "Not": [137, 222, 275, 341, 394, 451, 492, 603], "truncat": [137, 504, 557, 581, 708, 814, 881], "outsid": [137, 193, 217, 249, 319, 370, 424, 477], "phred_offset": [137, 144], "convers": [137, 190, 583], "explicit": 137, "whenev": [137, 718], "aacaccaaacttctccacc": 137, "acgtgagctacaaaag": 137, "reload": 137, "tatgtatata": 137, "taacatatac": 137, "atatatacat": 137, "acata": 137, "new_fh": 137, "ffffx": 137, "ab": [137, 293], "bbf": 137, "ka": 137, "bbx": 137, "jyzox": 137, "zxx": 137, "fff": 137, "fasffbf": 137, "sffaaa": 137, "peter": 137, "cock": 137, "christoph": 137, "naohisa": 137, "goto": 137, "michael": 137, "heuer": 137, "rice": 137, "nucl": 137, "1767": 137, "1771": 137, "publish": [137, 146], "decemb": 137, "2009": [137, 138, 607], "1093": [137, 814], "nar": 137, "gkp1137": 137, "oxfordjourn": 137, "fastq_format": 137, "flat": [138, 262, 329, 381, 437, 482], "gbk": 138, "renam": [138, 258, 270, 326, 337, 377, 389, 433, 445, 528], "genpept": 138, "essenti": 138, "collabor": 138, "joint": 138, "effort": 138, "ddbj": 138, "organis": 138, "layout": 138, "webpag": 138, "interval_metadata": [138, 139, 193, 203, 215, 218, 222, 227, 229, 256, 293, 298, 300, 324, 344, 349, 351, 375, 397, 402, 404, 431, 456, 461, 463, 478], "sub": [138, 139, 193, 728], "keep": [138, 145, 216, 229, 300, 351, 404, 463, 697, 796, 797], "vocabulari": [138, 139], "infer": [138, 145, 181, 186, 838, 875], "whose": [138, 144, 145, 513, 562, 587, 600, 601, 721], "stranded": 138, "codon_start": 138, "phase": [138, 139], "codon": [138, 147, 278, 281, 291, 292, 344, 453, 494], "dbxref": [138, 139], "cross": 138, "descriptor": [138, 719, 834, 835, 836], "explain": [138, 139, 142, 608, 642, 686, 698, 699, 712, 718, 720], "67": [138, 142, 239, 246, 273, 316, 367, 414, 421, 448, 599, 603, 713, 723, 877], "66": [138, 142, 246, 316, 367, 421, 603, 877], "neighbor": [138, 799, 814], "68": [138, 608, 726], "insid": [138, 141], "remot": 138, "j00123": 138, "discard": [138, 601], "200": [138, 533], "kept": 138, "199": 138, "__locat": 138, "__": 138, "privat": [138, 752], "gb_str": 138, "3k1v_a": 138, "34": [138, 144, 754], "syn": 138, "chain": 138, "Of": 138, "mutant": 138, "preq1": 138, "260656459": 138, "synthet": 138, "artifici": [138, 698], "klein": 138, "edward": 138, "ferr": 138, "amar": 138, "cocryst": 138, "riboswitch": [138, 193], "nat": 138, "343": 138, "344": 138, "19234468": 138, "seqr": 138, "32630": 138, "misc_bind": 138, "bound_moieti": 138, "agaggttcta": 138, "gcacatccct": 138, "ctataaaaaa": 138, "ctaa": 138, "agagguucua": 138, "gcacaucccu": 138, "cuauaaaaaa": 138, "cuaa": 138, "sitemap": 138, "samplerecord": 138, "feature_t": 138, "webfeat": 138, "nuccor": 138, "delimit": [139, 140, 142, 144, 147, 546], "intervalmetadata": [139, 193, 202, 222, 293, 344, 397, 456], "seq_id": 139, "seqid": 139, "attr": [139, 777, 805], "tag": [139, 146, 246, 276, 316, 342, 367, 395, 421, 452, 543], "comma": [139, 140, 141], "predefin": [139, 245, 315, 366, 420, 475], "mean": [139, 141, 148, 190, 203, 218, 222, 251, 252, 426, 427, 505, 520, 525, 528, 531, 533, 543, 558, 568, 582, 595, 664, 686, 712, 716, 717, 718, 721, 723, 724, 726, 727, 875, 879], "derives_from": 139, "ontology_term": 139, "is_circular": 139, "And": [139, 222, 344, 540, 877], "parser": [139, 141], "skip_subregion": 139, "contigu": [139, 193, 262, 329, 381, 437, 482], "region": [139, 193, 203, 262, 329, 381, 437, 482], "exon": [139, 193, 265, 332, 384, 397, 440, 456, 485], "gff_str": 139, "gff": 139, "seq_1": 139, "tgene": 139, "t10": [139, 142], "t90": 139, "tid": 139, "gen1": 139, "texon": 139, "t30": [139, 144], "tparent": 139, "t50": 139, "seq_2": 139, "t80": 139, "t96": 139, "gen2": 139, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 139, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 139, "im": [139, 203, 215], "4604421736": 139, "fuzzi": [139, 193, 194, 202, 203, 214, 215, 456], "foo": [139, 145, 203, 456, 839, 881], "gen": [139, 881], "4603377592": 139, "4603378712": 139, "atgcatgcat": 139, "gcatgcatgc": 139, "120": [139, 533], "ontologi": 139, "tsv": [140, 145], "varieti": 140, "serial": [140, 546, 699, 875], "del": [140, 274, 340, 393, 450, 698], "anywher": [140, 141, 145, 528], "easili": [140, 877], "program": [140, 141, 145, 147], "spreadsheet": [140, 145], "edg": [141, 607, 712, 752, 805], "minim": 141, "june": 141, "english": [141, 601], "subtre": [141, 147, 769, 879], "node_info": 141, "children": [141, 544, 734, 739, 743, 751, 755, 766, 768, 775, 779, 786, 790, 792, 799], "null": [141, 528, 533, 607, 723], "comment_char": 141, "all_char": 141, "safe_char": 141, "decim": [141, 145, 818], "vice": [141, 607], "versa": [141, 607], "escap": 141, "nest": [141, 546, 601, 801, 879], "semi": 141, "colon": 141, "recal": 141, "alon": [141, 600], "imagin": 141, "parenthesi": 141, "insert": [141, 214, 755], "abil": 141, "child": [141, 203, 240, 310, 361, 415, 473, 543, 734, 755, 786, 790, 808, 879], "bifurc": [141, 544, 771], "alreadi": [141, 146, 148, 149, 160, 161, 162, 456, 547, 601], "who": [141, 727], "sibl": [141, 240, 310, 361, 415, 473], "multifurc": [141, 879], "notat": [141, 145, 344], "recurs": [141, 752, 810, 811], "infinitum": 141, "clariti": 141, "estrang": 141, "omit": [141, 546, 772, 806, 808, 813, 875], "still": [141, 142, 190, 202, 528, 533, 537, 601, 603], "happen": [141, 262, 329, 381, 437, 482, 813, 881], "expon": [141, 542], "disallow": [141, 146, 601], "stricter": [141, 817], "obviou": 141, "yet": [141, 147, 148], "underscor": [141, 143], "liter": 141, "regular": [141, 248, 276, 318, 342, 369, 395, 423, 452, 476, 877], "quot": 141, "surround": [141, 533], "a_1": 141, "_1": 141, "commonli": [141, 145, 494, 603, 720, 879], "unpair": 141, "worri": 141, "properli": [141, 190], "un": 141, "permit": [141, 161], "isomorph": [141, 531, 532, 534, 535], "convert_underscor": 141, "unescap": 141, "extern": 141, "ascii_art": [141, 755, 772, 773, 814, 879], "complex": [141, 881], "b_b": 141, "d_d": 141, "becam": 141, "preserv": [141, 712, 713, 718, 796], "newick_doc": 141, "newicktre": 141, "variou": [142, 546, 699, 723, 878, 880], "rda": [142, 699, 712, 713], "cca": [142, 698, 699, 712, 720], "ordinationresult": [142, 603, 712, 713, 718, 719, 720, 818], "six": [142, 279, 281, 292, 454, 528], "eigval": [142, 699], "biplot": [142, 712, 720], "constraint": [142, 699, 713, 720], "07": 142, "08": [142, 145, 723, 726], "46": [142, 602, 727], "species0": 142, "species1": 142, "species2": 142, "01": [142, 723], "09": 142, "species3": 142, "03": [142, 603], "species4": 142, "species5": 142, "species6": 142, "species7": 142, "species8": 142, "70": 142, "69": 142, "site0": 142, "site1": [142, 698], "site2": [142, 698], "site3": [142, 698], "site4": [142, 698], "97": [142, 533], "06": 142, "61": [142, 603, 727], "site5": [142, 698], "04": [142, 723], "site6": [142, 698], "site7": [142, 698], "52": 142, "site8": [142, 698], "47": [142, 723], "site9": [142, 698], "74": 142, "32": [142, 602], "78": [142, 809], "55": [142, 243, 313, 364, 418, 603, 608, 723, 814], "02": [142, 147, 528], "declar": [142, 145], "or_f": 142, "t4": 142, "t9": 142, "t2": [142, 144], "ord_r": 142, "joe": 143, "raxml": 143, "gairaagccttggc": 143, "sapiensaccggttggc": 143, "relax": 143, "interleav": [143, 146], "1x1": 143, "reach": 143, "11th": 143, "reserv": [143, 145], "nucleic": [143, 147, 222, 293, 344, 397, 456], "older": 143, "chunk": 143, "2a": 143, "agagttgaag": 143, "gtatct": 143, "surpass": 143, "recent": [143, 291, 456, 601], "_except": 143, "phylipformaterror": 143, "shorter": 143, "post": [143, 723, 727], "phylogeni": [143, 606, 607], "phylo": 143, "obsolet": 143, "phylip_multiple_alignment_format": 143, "machin": 144, "lane": 144, "tile": 144, "casava": 144, "ommit": 144, "clear": 144, "exclud": [144, 543, 586, 593, 799], "acgtac": 144, "rubbbbrbcefgh": 144, "cgggcattgca": 144, "cgggcasdgca": 144, "acgta": 144, "aataaac": 144, "getaaafhwqaaf": 144, "catttagga": 144, "tgca": 144, "tjflkafnkkghvm": 144, "t3": 144, "t34": 144, "tacg": 144, "trubbbbrbcefgh": 144, "tcgggcattgca": 144, "tcgggcasdgca": 144, "t35": 144, "tacgta": 144, "tgetaaafhwqaaf": 144, "tcatttagga": 144, "ttjflkafnkkghvm": 144, "illumina_1": 144, "lane_numb": 144, "machine_nam": 144, "read_numb": 144, "run_numb": 144, "tile_numb": 144, "tac": 144, "aata": 144, "aac": 144, "biowulf": 144, "app": 144, "casava_ug_15011196b": 144, "pdf": 144, "port": 145, "qiime2": 145, "sample_metadata": 145, "2024": 145, "tutori": [145, 148], "q2": 145, "categor": [145, 599, 602, 698, 709], "id1": 145, "id2": 145, "bar": [145, 839, 881], "id3": 145, "skbio": [145, 874], "samplemetadata": 145, "matter": [145, 194, 215, 498, 551, 575], "edit": [145, 601, 719], "export": 145, "straightforward": [145, 877], "doubt": 145, "microsoft": 145, "googl": 145, "sheet": 145, "adher": 145, "understand": [145, 528], "meta": [145, 725, 726], "keemei": 145, "ons": 145, "anytim": 145, "cumbersom": 145, "cell": [145, 726], "pound": 145, "sign": [145, 528, 818], "inlin": 145, "sole": 145, "mix": 145, "insensit": [145, 506, 528, 533], "sampleid": 145, "fetureid": 145, "mostli": [145, 146], "biom": 145, "qiita": 145, "otuid": 145, "sample_nam": 145, "notstart": 145, "At": [145, 148], "goal": [145, 875], "plugin": 145, "anyon": 145, "prepar": 145, "help": [145, 147], "announc": 145, "forum": 145, "problemat": [145, 805], "tend": 145, "command": [145, 147, 291], "alphanumer": 145, "period": 145, "dash": 145, "rememb": [145, 193], "collaps": [145, 755], "plan": 145, "problem": [145, 528, 718], "cual": 145, "assist": [145, 881], "paper": 145, "na": 145, "recogn": 145, "direct": [145, 147, 713, 734], "transpar": [145, 190], "q2cli": 145, "sk": 145, "wish": [145, 879], "123": [145, 697], "0123": 145, "000123": 145, "1e9": 145, "23e": 145, "2e": 145, "5e": 145, "digit": 145, "stai": 145, "exceed": 145, "unsupport": [145, 344], "undefin": [145, 725, 726, 759], "infin": 145, "upsk": 146, "se": 146, "infern": 146, "ss": 146, "pmid": [146, 601, 814], "9223489": 146, "rm": [146, 609, 675], "role": [146, 494, 726], "pseudoknot": 146, "turnip": 146, "yellow": 146, "mosaic": 146, "viru": 146, "synthesi": 146, "viral": 146, "polymeras": 146, "deiman": 146, "ba": 146, "kortlev": 146, "pleij": 146, "cw": 146, "virol": 146, "5990": 146, "5996": 146, "af035635": 146, "619": 146, "641": 146, "ugaguucucgaucucuaaaaucg": 146, "m24804": 146, "104": [146, 533], "ugaguucucuaucucuaaaaucg": 146, "j04373": 146, "6212": 146, "6234": 146, "uaaguucucgaucuuuaaaaucg": 146, "m24803": 146, "uaaguucucgaucucuaaaaucg": 146, "ss_con": 146, "aaa": [146, 262, 329, 381, 437, 482], "ggt": [146, 272, 339, 391, 447, 491], "accgttcg": 146, "pfam": 146, "rfam": 146, "whole": [146, 716, 724], "come": [146, 607, 801], "cb": [146, 725], "domain": [146, 344, 772, 806], "nh": 146, "tn": 146, "unlik": [146, 697], "nhx": 146, "rc": [146, 239, 414, 514, 563, 589, 709], "kestrel": 146, "gorlick": 146, "medlin": 146, "o83071": 146, "259": 146, "312": 146, "083071": 146, "o31698": 146, "ccchhhhhhhhhhhhhhh": 146, "eeeeeeee": 146, "eeeeeeeehhh": 146, "ccccchhhhhhhhhhhhh": 146, "eeeeeeeeeeh": 146, "final": [146, 607, 881], "cc": [146, 272, 281, 339, 391, 447, 491], "intracellular": 146, "192": 146, "88": [146, 603, 726], "139": 146, "bacillu": 146, "subtili": 146, "mtcraqliavprassla": 146, "aiacaqkm": 146, "rvsrv": 146, "sa": 146, "999887756453524252": 146, "55152525": 146, "36463": 146, "mqhvsapvfvfectrlai": 146, "vqhklrah": 146, "srava": 146, "mieadkvahvqvgnnleh": 146, "allvltkt": 146, "gytai": 146, "evmltdiprlhindpimk": 146, "gfgmvinn": 146, "gfv": 146, "o31699": 146, "AS": 146, "________________": 146, "____________________": 146, "IN": 146, "____________1______________2_________": 146, "eeeee": 146, "stockholm_format": 146, "sonnhamm": 146, "sbc": 146, "su": 146, "dump": [147, 879, 881], "classif": [147, 709], "pipe": 147, "host": [147, 607], "portal": 147, "daili": 147, "archiv": [147, 839], "month": 147, "pattern": [147, 248, 276, 318, 342, 369, 395, 423, 452, 476, 877, 881], "taxid": 147, "citat": 147, "hierarch": [147, 543], "tax_id": [147, 772], "superkingdom": 147, "prefix": 147, "inherit": [147, 293, 456], "div": 147, "flag": [147, 879], "mitochondri": [147, 278, 290, 453], "mgc": 147, "hidden": 147, "suppress": [147, 599, 603, 604], "lineag": [147, 726, 773, 806], "free": [147, 840, 881], "2018": 147, "new_taxdump": 147, "classic": 147, "plu": [147, 222, 344, 397], "extra": [147, 148, 599, 600, 602, 603, 664], "aforement": 147, "plastid": 147, "pgc": 147, "hydrogenosom": 147, "hgc": 147, "name_txt": 147, "cde": 147, "bct": 147, "vrt": 147, "mam": 147, "pri": 147, "abbrevi": [147, 699], "scheme": [147, 190, 514, 563, 589], "nodes_new": 147, "nodes_slim": 147, "parent_tax_id": [147, 772], "leftmost": 147, "till": 147, "crop": 147, "tno": 147, "t131567": 147, "tsuperkingdom": 147, "t335928": 147, "tgenu": 147, "131567": 147, "335928": 147, "federhen": 147, "d1": [147, 877], "d136": 147, "d143": 147, "schoch": 147, "ciufo": 147, "domrachev": 147, "hotton": 147, "kannan": 147, "khovanskaya": 147, "karsch": 147, "mizrachi": 147, "2020": 147, "comprehens": 147, "curat": 147, "kan": 147, "2022": 147, "entrez": 147, "unix": 147, "taxdump_readm": 147, "ncbiinsight": 147, "ioregistri": [148, 160, 162], "io_registri": 148, "focu": 148, "submodul": 148, "myformat": [148, 160, 161, 162], "create_format": [148, 160, 161, 162], "factori": [148, 160, 161, 162, 174, 185], "ideal": 148, "evaul": 148, "binari": [148, 150, 160, 161, 162, 190, 543, 544, 607, 712, 720, 807, 839], "readi": [148, 874], "decor": [148, 160, 161, 162, 203, 293, 756, 813, 820, 840, 852, 853, 863, 874], "onto": [148, 180, 719, 813], "_myformat_sniff": 148, "membership": 148, "futher": 148, "someskbioclass": [148, 875], "_myformat_to_some_skbio_class": 148, "kwarg1": 148, "filesentinel": [148, 160, 162], "auxilari": 148, "_some_skbio_class_to_myformat": 148, "obj": [148, 162, 183, 188, 831, 881], "whatev": 148, "receiv": [148, 150, 161, 249, 319, 370, 424, 477, 813], "further": [148, 726, 879], "fileformaterror": 148, "satisfi": [148, 218, 725, 863], "__init__": [148, 160, 162], "execut": [148, 620, 664, 841, 863, 881], "import_modul": 148, "boilerpl": 148, "busi": 148, "logic": [148, 840], "arg": [148, 174, 185, 278, 279, 344, 453, 454], "compress": [148, 190], "compresslevel": [148, 190], "auth": 148, "password": 148, "buffer": [148, 190, 697], "buffer_s": 148, "closefd": 148, "exclus": [148, 193, 203, 214, 241, 260, 311, 328, 362, 380, 416, 435, 474, 481, 528], "handler": [150, 181, 183, 186, 188, 190], "bufferedread": [150, 160, 161, 190], "bufferedwrit": [150, 162, 190], "textiobas": [150, 160, 161, 162, 190], "unabl": 150, "is_binary_format": 150, "monkey_patched_read": 150, "monkei": [150, 180], "patch": [150, 180], "monkey_patched_writ": 150, "sniffer_funct": 150, "cl": [160, 162, 175, 177, 178, 179, 293, 824], "monkey_patch": [160, 162], "transform": [160, 162, 262, 329, 381, 437, 482, 525, 526, 527, 531, 532, 534, 535, 539, 544, 712, 718, 720], "attach": [160, 162, 754], "overriden": [160, 161, 162], "duplicateregistrationerror": [160, 161, 162], "add_format": [160, 162], "myobject": [160, 162], "myformat_read": [160, 162], "readlin": [160, 190], "myformat2": [160, 161, 162], "thrown": [161, 774], "ask": 161, "myformat_sniff": 161, "default_write_format": 162, "format_object": 173, "regsistri": [174, 185], "format_nam": [175, 176, 177], "useabl": 180, "unrecognizedformaterror": [181, 182, 183, 186, 187, 188], "formatidentificationwarn": [181, 186], "agre": [181, 186], "member": [181, 186, 840, 863, 881], "argumentoverridewarn": [181, 186], "claim": [182, 187], "registr": 184, "auto": [190, 275, 341, 394, 451, 492], "bytesio": [190, 191, 839], "textiowrapp": 190, "bufferedrandom": 190, "tempfil": 190, "temporaryfil": 190, "namedtemporaryfil": 190, "writabl": 190, "unwrit": 190, "unread": 190, "byte": [190, 272, 339, 391, 447, 491], "gzip": 190, "bz2": 190, "decompress": 190, "legal": 190, "inclus": [190, 193, 203, 214, 241, 260, 311, 328, 362, 380, 416, 435, 474, 481, 600], "manag": [190, 191, 192], "closeabl": 190, "garbag": 190, "reflect": [190, 607, 790, 795], "flush": 190, "clean": [190, 751, 790], "bzh91ai": 191, "sy": 191, "x03": 191, "x89": 191, "x0c": 191, "xa6": 191, "x00": 191, "x01": 191, "xc1": 191, "x108": 191, "x9ah3m": 191, "x1c": 191, "xb7": 191, "x8b": 191, "xb9": 191, "x9c": 191, "xc4": 191, "x86": 191, "nb": 191, "nc": 191, "transcript": 193, "operon": 193, "accommod": 193, "gene_nam": 193, "product": [193, 536, 601, 874], "easier": [193, 494], "ft_current": 193, "hypothet": 193, "sai": [193, 203, 727], "gena": 193, "nt": 193, "shown": [193, 528, 712], "diagram": 193, "tggattctgc": 193, "0123456789": 193, "drop": [193, 203, 229, 300, 351, 404, 463, 604, 698, 713, 793, 813], "setter": 202, "copy_from": 203, "storag": 203, "modif": [203, 607], "cover": [203, 506, 879], "coupl": 203, "unbound": [203, 217], "speed": [203, 718], "build": [203, 543], "defer": 203, "until": [203, 543, 797], "fetch": [203, 879], "_interval_tre": 203, "_rebuild_tre": 203, "stale": 203, "delet": [203, 777, 793, 821], "_is_stale_tre": 203, "sagb": [203, 215], "sagc": 203, "saga": [203, 215, 456], "intvl": 203, "num_interval_featur": 203, "interablemetadata": 215, "shift": 215, "im1": 215, "im2": 215, "negat": 216, "middl": 217, "live": 217, "reca": 218, "900": 218, "1000": [218, 697], "criteria": [218, 725, 809], "front": [220, 543], "uppercas": [222, 344, 397, 456], "turn": [222, 344, 397, 720, 817, 881], "behav": [222, 344, 397, 601], "compliant": [222, 344, 397], "canon": [222, 274, 293, 340, 344, 393, 397, 450, 494, 698, 713, 720, 874], "nucleobas": [222, 397], "adenin": [222, 397], "cytosin": [222, 397], "guanin": [222, 397], "purin": [222, 247, 317, 368, 422, 877], "pyrimidin": [222, 247, 422], "weak": 222, "keto": 222, "inosin": 222, "break": [222, 344, 397], "nomenclatur": [222, 293, 344, 397, 456], "incomplet": [222, 293, 344, 397, 456], "3021": [222, 293, 344, 397, 456], "3030": [222, 293, 344, 397, 456], "cornish": [222, 293, 344, 397, 456], "bowden": [222, 293, 344, 397, 456], "accgaat": 222, "86": [222, 397], "complement_map": [222, 239, 397, 414], "complement": [222, 261, 273, 291, 397, 436, 448, 877], "definite_char": [222, 293, 344, 397], "degenerate_char": [222, 293, 344, 397], "degenerate_map": [222, 246, 293, 316, 344, 367, 397, 421, 877], "gap_char": [222, 243, 293, 313, 344, 364, 397, 418], "noncanonical_char": [222, 293, 344, 397], "nondegenerate_char": [222, 293, 344, 397], "observed_char": [222, 249, 293, 319, 344, 370, 397, 424, 456, 477], "wildcard_char": [222, 275, 293, 341, 344, 394, 397, 451, 492], "wildcard": [222, 274, 275, 293, 340, 341, 344, 393, 394, 397, 450, 451, 492], "truth": [223, 294, 345, 398, 457], "truthi": [223, 294, 345, 398, 457], "put": [224, 295, 346, 399, 458], "ggucgugaagga": [224, 229, 295, 300, 346, 351, 399, 404, 456, 458, 463], "ggu": [224, 295, 346, 399, 458], "ccc": [224, 295, 346, 399, 458], "aagga": [229, 300, 351, 404, 463], "cgagc": [229, 300, 351, 404, 463], "ggucg": [229, 241, 300, 311, 351, 362, 404, 416, 463, 474], "guc": [229, 300, 351, 404, 463], "gguc": [232, 234, 237, 245, 266, 267, 268, 269, 303, 305, 308, 315, 333, 334, 335, 336, 354, 356, 359, 366, 385, 386, 387, 388, 407, 409, 412, 420, 441, 442, 443, 444, 466, 468, 471, 475, 486, 487, 488, 489], "ggucguaaagga": [238, 309, 360, 413, 472], "hello": [238, 309, 360, 413, 472], "nucleotidemixin": [239, 273, 414, 448], "reverse_compl": [239, 261, 414, 436, 877], "ttcatt": [239, 261, 273, 414, 436, 448], "aagtaa": [239, 414], "aatgaa": [239, 261, 273, 414, 436, 448], "intersect": [240, 310, 361, 415, 473, 735, 736, 760, 763], "ggaa": [240, 310, 361, 415, 473], "acgtggaa": [240, 310, 361, 415, 473], "coercion": [240, 310, 361, 415, 473], "gg": [241, 247, 311, 317, 362, 368, 416, 422, 474], "has_definit": [242, 244, 254, 258, 270, 312, 314, 322, 326, 337, 363, 365, 373, 377, 389, 417, 419, 429, 433, 445], "acwgn": [242, 244, 270, 312, 314, 337, 363, 365, 389, 417, 419, 445], "ggtc": [243, 313, 364, 418], "att": [243, 313, 364, 418], "ggtccattc": [243, 313, 364, 418], "has_degener": [244, 253, 258, 314, 321, 326, 365, 372, 377, 419, 428, 433], "ham": [245, 315, 366, 420, 475, 546, 877], "fraction_diff": [245, 315, 366, 420, 475], "fraction_sam": [245, 315, 366, 420, 475], "aguc": [245, 266, 268, 315, 333, 335, 366, 385, 387, 420, 441, 443, 475, 486, 488], "custom_metr": [245, 315, 366, 420, 475], "trg": [246, 276, 316, 342, 367, 395, 421, 452], "seq_gener": [246, 316, 367, 421], "tgg": [246, 276, 316, 342, 367, 395, 421, 452], "motif_typ": [247, 317, 368, 422], "min_length": [247, 262, 317, 329, 368, 381, 422, 437, 482, 877], "motif": [247, 317, 368, 422, 877], "acggggaggcggag": [247, 317, 368, 422], "motif_slic": [247, 317, 368, 422], "ggggagg": [247, 317, 368, 422], "ggag": [247, 317, 368, 422], "disrupt": [247, 317, 368, 422, 877], "regex": [248, 276, 318, 342, 369, 395, 423, 452, 476], "compil": [248, 276, 318, 342, 369, 395, 423, 452, 476, 728], "pre": [248, 276, 318, 342, 369, 395, 423, 452, 476, 494, 506, 511, 727], "aatataccggttataa": [248, 318, 369, 423, 476], "tata": [248, 318, 369, 423, 476], "tataa": [248, 318, 369, 423, 476], "char": [249, 276, 319, 342, 370, 395, 424, 452, 477], "kmer_frequ": [249, 319, 370, 424, 477], "iter_km": [249, 319, 370, 424, 477], "agaagacc": [249, 319, 370, 424, 477], "freq": [249, 264, 319, 331, 370, 383, 424, 439, 477, 484], "has_gap": [250, 320, 371, 425], "gc_frequenc": [251, 426], "degap": [251, 252, 426, 427, 877], "acgtacgt": [251, 426], "acttagtt": [251, 426], "asst": [251, 252, 426, 427], "rykmbdhvn": [251, 252, 426, 427], "stand": [252, 427, 601], "ie": [252, 427], "gc_content": [252, 427], "nwnnnnnn": [253, 258, 321, 326, 372, 377, 428, 433], "ancacwwgacgtt": [253, 254, 258, 321, 322, 326, 372, 373, 377, 428, 429, 433], "acac": [254, 263, 322, 330, 373, 382, 429, 438, 483], "gacgtt": [254, 255, 322, 323, 373, 374, 429, 430], "acacgacgtt": [255, 260, 263, 323, 328, 330, 374, 380, 382, 430, 435, 438, 481, 483], "cac": [255, 263, 323, 330, 374, 382, 430, 438, 483], "aatgtt": [261, 436], "invert": [262, 329, 381, 437, 482], "skip": [262, 329, 381, 437, 482, 599, 601, 602, 603, 607], "adjac": [262, 329, 381, 437, 482], "ungap": [262, 329, 381, 437, 482], "cccc": [262, 329, 381, 437, 482], "no_gap": [262, 329, 381, 437, 482], "ungapped_subsequ": [262, 329, 381, 437, 482], "find_motif": [262, 329, 381, 437, 482, 877], "find_with_regex": [262, 329, 381, 437, 482, 877], "acdfnasanftacgnpnrtesl": [262, 329, 381, 437, 482], "subseq": [262, 329, 381, 437, 456, 482], "glycosyl": [262, 329, 368, 381, 437, 482, 877], "nasanfta": [262, 329, 381, 437, 482], "nrte": [262, 329, 381, 437, 482], "kmer": [263, 264, 330, 331, 382, 383, 438, 439, 483, 484, 524], "gacg": [263, 330, 382, 438, 483], "aca": [263, 264, 330, 331, 382, 383, 438, 439, 483, 484], "cga": [263, 330, 382, 438, 483], "gac": [263, 330, 382, 438, 483], "cgt": [263, 330, 382, 438, 483], "gtt": [263, 330, 382, 438, 483], "acacatttatta": [264, 331, 383, 439, 484], "cat": [264, 331, 383, 439, 484, 725, 726], "tta": [264, 331, 383, 439, 484], "intron": [265, 332, 384, 397, 440, 485], "mismatch_frequ": [266, 333, 385, 441, 486, 877], "gauu": [267, 269, 334, 336, 386, 388, 442, 444, 487, 489], "match_frequ": [268, 335, 387, 443, 488, 877], "chosen": [272, 339, 391, 447, 491, 537, 600, 709, 720, 728], "ggtaccaacg": [272, 339, 391, 447, 491], "is_reverse_compl": [273, 448], "wild": [274, 340, 393, 450], "noncanon": [274, 340, 393, 450], "mask_gap": [275, 341, 394, 451, 492], "return_cod": [275, 341, 394, 451, 492], "gap_charact": [275, 341, 394, 451, 492], "subsitut": [275, 341, 394, 451, 492], "absent": [275, 341, 394, 451, 492, 718], "meepqsdpsv": [275, 341, 394, 451, 492], "idx": [275, 341, 394, 451, 492], "uniq": [275, 341, 394, 451, 492], "dempqsv": [275, 341, 394, 451, 492], "ctcaaaagtc": [275, 341, 394, 451, 492], "tcga": [275, 341, 394, 451, 492], "sm": [275, 341, 394, 451, 492], "by_nam": [275, 341, 394, 451, 492, 494, 511], "nuc": [275, 341, 394, 451, 492, 494, 506], "gag": [275, 341, 394, 451, 492], "ctc": [275, 341, 394, 451, 492], "acgtn": [275, 341, 394, 451, 492], "gagrctc": [275, 341, 394, 451, 492], "within_captur": [276, 342, 395, 452], "account": [276, 342, 395, 452, 642, 712, 720, 727, 879], "captur": [276, 342, 395, 452], "tcg": [276, 342, 395, 452], "translate_six_fram": [277, 278, 291, 449, 453], "taacgtta": [277, 449], "uaacguua": [277, 449], "reverse_transcrib": 278, "atgccactttaa": [278, 279], "mpl": [278, 279, 281, 291, 292, 453, 454], "yeast": [278, 453], "mpt": [278, 453], "independ": [279, 292, 454, 607, 619, 620, 641, 652, 685, 696, 807], "reading_fram": [279, 281, 291, 292, 454], "rf": [279, 292, 454], "geneticcod": [279, 453, 454, 877], "chf": [279, 292, 454], "atl": [279, 292, 454], "lkwh": [279, 292, 454], "sg": [279, 292, 454], "kva": [279, 292, 454], "amino_acid": [281, 282, 288], "from_ncbi": [281, 282, 291, 292, 453, 454], "uuuuuuuuuuuuuuuuccccccccccccccccaaaaaaaaaaaaaaaagggggggggggggggg": 281, "uuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggg": 281, "ucagucagucagucagucagucagucagucagucagucagucagucagucagucagucagucag": 281, "wprintgc": [281, 289, 290], "ffllssssyi": 281, "wllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 281, "base1": 281, "base2": 281, "base3": 281, "candid": [281, 727], "divis": [281, 543, 721], "sr1": 281, "gracilibacteria": 281, "ccgwllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 281, "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm": 281, "augccacuuuaa": [281, 292, 453, 454], "named_gc": 282, "table_id": 290, "thraustochytrium": 290, "tmgc": 290, "prior": [291, 601, 604, 772, 841, 851, 881], "methionin": [291, 344], "fmet": 291, "aguauucugccacuguaagaa": 291, "sgc": [291, 292], "silpl": 291, "cug": 291, "trim": 291, "fact": 291, "conform": 293, "abstract": 293, "grammar": [293, 456], "static": 293, "classproperti": 293, "customsequ": 293, "ababacac": 293, "xxxxxx": 293, "ala": 344, "cy": 344, "cystein": 344, "asp": 344, "aspart": 344, "glu": 344, "glutam": 344, "phe": 344, "phenylalanin": 344, "gly": 344, "hi": 344, "histidin": 344, "il": 344, "isoleucin": 344, "ly": 344, "lysin": 344, "leu": 344, "leucin": 344, "asn": 344, "asparagin": 344, "pro": 344, "prolin": 344, "gln": 344, "glutamin": 344, "arginin": 344, "ser": 344, "serin": 344, "thr": 344, "threonin": 344, "val": 344, "valin": 344, "trp": 344, "tyr": 344, "tyrosin": 344, "asx": 344, "glx": 344, "xle": 344, "xaa": 344, "ter": [344, 713], "sec": 344, "selenocystein": 344, "pyl": 344, "pyrrolysin": 344, "pam": [344, 494, 506], "paw": [344, 379, 392], "stop_char": 344, "has_stop": 392, "accgaau": 397, "genetic_cod": [453, 454], "immut": [456, 877], "metdata": 456, "ncrna": 456, "ggucgugaag": 456, "ga": [456, 877], "alic": 456, "desc": 456, "retriev": [456, 571], "attributeerror": [456, 820], "destin": 456, "Be": 456, "illustr": [456, 599, 603], "hasn": [456, 728], "bob": 456, "propag": 456, "carol": 456, "chemic": [494, 727], "mutat": [494, 506, 734], "likelihood": 494, "homolog": 494, "chanc": [494, 607], "complic": [494, 875], "asymmetr": [494, 498, 551, 575], "former": 494, "mat": [494, 506, 509, 512, 526, 527, 529, 530, 531, 532, 534, 535, 537, 538, 539, 803], "blosum62": [494, 506], "transpos": [494, 547, 571], "is_ascii": 494, "png": [494, 547, 571, 699], "figur": [494, 514, 547, 563, 571, 589, 709], "svg": [494, 547, 571, 699], "lookup_id": [495, 513, 548, 562, 572, 587], "extract": [498, 533, 546, 547, 551, 575, 599, 603, 713, 754, 877], "missingiderror": [498, 505, 508, 513, 520, 551, 558, 560, 562, 568, 575, 582, 585, 587, 595], "quick": [498, 551, 575, 583, 709, 712], "from_": [505, 558, 582], "to_": [505, 558, 582], "allow_overlap": [505, 558, 582], "stabl": [505, 520, 558, 568, 582, 595, 753], "get_nam": 506, "dnaful": 506, "pam30": 506, "pam70": 506, "pam250": 506, "blosum45": 506, "blosum50": 506, "blosum80": 506, "blosum90": 506, "dayhoff": 506, "schwartz": 506, "orcutt": 506, "1978": 506, "atla": 506, "345": 506, "352": 506, "proceed": 506, "academi": 506, "inconsist": 509, "heatmap": [514, 563, 589], "matplotlib": [514, 563, 589, 699, 709], "colormap": [514, 563, 589, 709], "colorbar": [514, 563, 589, 709], "red": [514, 563, 589], "binary_dm": [515, 521, 564, 569, 590, 596], "redund": [516, 547, 565, 571, 591, 698, 720], "gather": [520, 568, 595, 879], "from_iter": 522, "agggta": 523, "cgttta": 523, "atcggcgat": 524, "gcagatgtg": 524, "9230769230": 524, "omic": 525, "inher": [525, 607], "absolut": [525, 533, 601, 838], "x_": [525, 526, 543, 723, 727], "leq": 525, "compon": [525, 527, 537, 538, 539, 540, 541, 542, 675, 699, 712, 718, 881], "aitchison": [525, 526, 527, 531, 532, 534, 535, 543], "geometri": [525, 527, 531, 532, 535], "euclidean": [525, 546, 600, 712, 718, 720], "perturb": [525, 541], "power": [525, 533, 875], "style": [525, 810, 811], "simul": [525, 723, 726, 727], "strategi": [525, 537, 814], "centr": [525, 531, 532, 716], "clr": [525, 532, 533, 544], "isometr": [525, 526, 527, 534, 535], "ilr": [525, 535, 544], "hypothesi": [525, 528, 533, 601, 604, 607, 723], "regress": [525, 601, 720, 727], "pseudocount": [525, 528, 533], "distort": 525, "pawlowski": [525, 539, 545], "glahn": [525, 539, 545], "egozcu": [525, 534, 535, 539, 543, 545], "tolosana": [525, 543], "delgado": [525, 543], "wilei": 525, "chichest": 525, "logratio": 525, "geologi": 525, "martin": [525, 537], "fernandez": [525, 537], "imput": [525, 537], "denominator_idx": [526, 527], "simplex": [526, 534, 535, 543], "denominator_col": 526, "denomin": [526, 543], "amen": 526, "multivari": [526, 599, 600, 602, 603, 712, 713], "rightarrow": [526, 527, 531, 532, 534, 535], "mathbb": [526, 527, 528, 531, 532, 534, 535], "x_1": [526, 527, 531, 532, 540, 541, 542], "x_d": [526, 527, 531, 532, 540, 541, 542], "ldot": [526, 527, 531, 532, 534, 535, 540, 541, 542], "n_composit": [526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542], "n_compon": [526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545], "09861229": 526, "38629436": 526, "69314718": 526, "alr": 527, "exp": [527, 532, 539, 545], "y_1": [527, 540, 541], "y_2": 527, "y_": [527, 727], "closur": [527, 540, 541, 542], "x_i": [527, 531, 536, 540, 541, 542, 543], "tau": 528, "p_adjust": [528, 533], "holm": [528, 533], "significance_test": 528, "f_onewai": 528, "percentil": 528, "multiple_comparisons_correct": 528, "bonferroni": [528, 533], "differenti": [528, 533], "treatment": [528, 533, 608, 726], "h_": 528, "0i": 528, "u_i": 528, "cutoff": [528, 813], "boniferroni": [528, 533], "benjamini": [528, 533], "hochberg": [528, 533], "bh": [528, 533], "fdr_bh": [528, 533], "concis": 528, "anova": [528, 602, 619, 620, 641, 652, 685, 696], "25th": 528, "median": [528, 603], "75th": 528, "reject": [528, 533, 723], "multi": 528, "multi_replac": [528, 538], "ttest_ind": [528, 533], "wilcoxon": 528, "kruskal": [528, 726, 727], "top": [528, 772], "mann": 528, "whitnei": 528, "mannwhitneyu": 528, "ttest_rel": 528, "walli": [528, 726, 727], "friedman": 528, "friedmanchisquar": 528, "unsolv": 528, "promis": 528, "001": [528, 723], "address": [528, 875], "mandal": 528, "et": [528, 533, 607], "al": [528, 533, 607], "novel": 528, "health": [528, 725, 726], "diseas": [528, 601], "seven": 528, "bacteri": 528, "s3": [528, 533, 599, 603], "s4": [528, 533, 599, 603], "s5": [528, 533, 599, 603], "s6": [528, 533, 603], "b1": [528, 533], "b2": [528, 533], "b3": [528, 533], "b4": [528, 533], "b5": [528, 533], "b6": [528, 533], "b7": [528, 533], "placebo": [528, 533], "ancom_df": 528, "percentile_df": 528, "scenario": 528, "summar": 528, "conclud": 528, "tell": 528, "geometr": [529, 531, 533, 543, 603], "averag": [529, 533, 608, 609, 717, 721, 787, 813], "17445763": 529, "30216948": 529, "34891526": 529, "32495488": 529, "18761279": 529, "16247744": 529, "isometri": [531, 532, 534, 535], "limits_": [531, 532, 535, 536, 543], "foral": [531, 532], "g_m": 531, "prod": [531, 543], "79451346": 531, "30409883": 531, "5917809": 531, "10136628": 531, "21383822": 532, "26118259": 532, "28865141": 532, "23632778": 532, "draw": [533, 723, 725, 726, 727, 752, 795], "128": 533, "seed": [533, 599, 603, 697, 723, 726, 727], "dirichlet": 533, "multinomi": 533, "compound": 533, "fold": 533, "posterior": [533, 734], "drawn": [533, 605, 723, 726, 727], "credibl": 533, "mirror": 533, "approach": [533, 601, 726, 735, 736, 760, 763], "aldex2": 533, "conting": [533, 720], "dirichilet": 533, "freedom": [533, 539, 545, 717, 724], "log2": 533, "fc": 533, "pvalu": 533, "qvalu": 533, "mininum": 533, "violat": 533, "reliabl": 533, "benefit": 533, "increas": [533, 546, 547, 604, 605, 607, 697, 723, 726], "regard": 533, "shrink": 533, "fernand": 533, "unifi": 533, "character": 533, "growth": [533, 726], "110": 533, "101": 533, "103": 533, "102": 533, "202": 533, "203": 533, "lfc_result": 533, "991987": 533, "884498": 533, "293463": 533, "020131": 533, "533729": 533, "594590": 533, "462339": 533, "007446": 533, "627677": 533, "048219": 533, "750792": 533, "068310": 533, "707221": 533, "467481": 533, "164998": 533, "065613": 533, "528243": 533, "036910": 533, "978387": 533, "182343": 533, "702656": 533, "556061": 533, "480232": 533, "601277": 533, "043888": 533, "basi": [534, 535, 543, 544], "langl": [534, 536], "e_1": [534, 535], "rangle_a": [534, 536], "e_": [534, 535], "orthonorm": [534, 535, 543, 544], "orthornorm": 534, "gram": [534, 535], "schmidt": [534, 535], "orthogon": [534, 535, 543], "spars": [534, 535, 544, 712, 720], "7768362": 534, "68339802": 534, "11704769": 534, "bigoplu": 535, "odot": [535, 542], "e_i": 535, "34180297": 535, "29672718": 535, "22054469": 535, "14092516": 535, "aitchson": 536, "x_j": 536, "y_i": 536, "y_j": 536, "2107852473": 536, "1875": 537, "375": 537, "0625": 537, "4375": 537, "ddof": [539, 545, 717, 721], "cost": [539, 545], "lovel": [539, 545], "jj": [539, 545], "marguerat": [539, 545], "b\u00e4hler": [539, 545], "proportion": [539, 545], "e1004075": [539, 545], "pcbi": [539, 545], "1004075": [539, 545], "erb": [539, 545], "notredam": [539, 545], "biosci": [539, 545], "s12064": [539, 545], "015": [539, 545], "0220": [539, 545], "dism": 539, "redundant_form": 539, "oplu": 540, "y_d": [540, 541], "evenli": [540, 709], "antibiot": [540, 725], "kill": 540, "harm": 540, "third": [540, 546, 776, 881], "ominu": 541, "14285714": 541, "42857143": 541, "28571429": 541, "23059566": 542, "25737316": 542, "26488486": 542, "24714631": 542, "sbp": 543, "partit": [543, 544], "r_i": 543, "s_i": 543, "n_partit": 543, "n_featur": 543, "gsi": 543, "buildilrbas": 543, "\u00e9": 543, "rozan": 543, "hernand": 543, "lapoint": 543, "h\u00e9bert": 543, "gentil": 543, "naess": 543, "marchand": 543, "lafond": 543, "matto": 543, "barlow": 543, "natal": 543, "ionom": 543, "revisit": 543, "nutrient": 543, "van": 543, "den": 543, "boogaart": 543, "gerald": 543, "raimon": 543, "bren": 543, "matevz": 543, "cran": [543, 599, 600, 601, 602, 603], "54772256": 543, "36514837": 543, "70710678": [543, 544], "81649658": [543, 544], "40824829": [543, 544], "coo_matrix": 544, "ilr_inv": 544, "toarrai": 544, "subpackag": [546, 874], "deseri": [546, 699], "gender": [546, 725, 726], "gain": [546, 718], "symmetri": [546, 547, 571, 586, 588], "ta": [546, 877], "tb": 546, "tc": 546, "dm_fh": 546, "3x3": [546, 601, 604, 605], "out_fh": 546, "dm_from_np": 546, "monoton": [546, 547, 604, 605], "divers": [546, 728, 874], "asarrai": 547, "squareform": [547, 593], "col": 547, "routin": 571, "condens": [571, 583, 588, 593], "condensed_form": [571, 588, 593], "hold": [571, 619, 641, 652, 685, 696, 697, 718, 725, 762, 863], "indiscern": 571, "triangl": [571, 586, 593, 601, 718], "planetmath": 571, "metricspac": 571, "sure": [586, 727, 881], "to_data_fram": 593, "missing_id": 598, "distance_matrix": [599, 600, 602, 603, 715, 718], "statis": [599, 602], "unpermut": [599, 601, 602], "permanova": [599, 603], "vegan": [599, 600, 601, 602, 603, 712, 713, 720], "clark": [599, 600], "kr": 599, "australian": 599, "117": 599, "143": 599, "4x4": [599, 600, 803], "group1": 599, "group2": 599, "group3": 599, "data_fram": 600, "ph": 600, "rho": 600, "spearmanr": [600, 601], "env": 600, "primer": 600, "deviat": [600, 717, 720, 721, 724], "ainsworth": 600, "marin": 600, "progress": 600, "92": 600, "205": 600, "htm": 600, "elev": 600, "400": 600, "530": 600, "450": 600, "810": 600, "var": 600, "771517": 600, "714286": 600, "triangular": 601, "portion": 601, "r_m": 601, "d_x": 601, "d_y": 601, "ij": 601, "extrem": 601, "reorder": [601, 604, 755, 759], "kendalltau": 601, "nonmatch": [601, 604], "corr_coeff": [601, 607], "pearsonr": [601, 607, 723], "pwmantel": 601, "legendr": [601, 698, 712, 713, 715, 716, 718, 719, 720], "3rd": [601, 675, 719, 819, 881], "elsevi": [601, 698, 712, 713, 720], "cancer": 601, "220": 601, "6018555": 601, "coeff": 601, "7559": 601, "moder": 601, "rerun": 601, "notifi": 601, "redefin": [601, 820], "henc": 601, "notion": 601, "pseudo": [602, 723], "adoni": 602, "anderson": [602, 603], "marti": [602, 603], "austral": 602, "2001": 602, "eigh": [603, 718], "number_of_dimens": [603, 718], "homogen": [603, 712, 720], "disperison": 603, "analogu": 603, "leven": 603, "dispers": 603, "centroid": 603, "spaitial": 603, "eigendecomposit": [603, 718], "eigenvector": [603, 713, 718], "eigenvalu": [603, 699, 712, 718, 720], "fsvd": [603, 718], "lose": [603, 718], "accuraci": [603, 718], "lost": [603, 718], "keyerror": 603, "permdisp2": 603, "procedur": [603, 875], "betadisp": 603, "245": 603, "253": 603, "g1": 603, "g2": 603, "calucul": 603, "thought": 603, "yeild": 603, "s7": 603, "conjunct": 603, "collat": 604, "amount": [604, 734, 881], "consumpt": [604, 718], "oppos": [604, 881], "dm1": 604, "dm2": 604, "755929": 604, "142857": 604, "num_object": 605, "random_fn": 605, "rand": 605, "pertain": 606, "host_dist": 607, "par_dist": 607, "interact": 607, "hommola": 607, "parasit": 607, "cospeci": 607, "expand": [607, 806], "symbiont": 607, "somewhat": [607, 787], "weaker": 607, "incid": 607, "speciat": 607, "recapitul": 607, "co": 607, "cladogenesi": 607, "explanatori": [607, 698, 699, 713, 720], "poorli": [607, 718], "perm_stat": 607, "je": 607, "qiu": 607, "gilk": 607, "1457": 607, "1468": 607, "hdist": 607, "3f": 607, "832": 607, "fairli": 607, "inde": 607, "mainli": 608, "volatil": 608, "averagegradientanova": 608, "coord_data": 608, "354": 608, "2761": 608, "0341": 608, "0633": 608, "1004": 608, "2364": 608, "2186": 608, "0301": 608, "0225": 608, "356": 608, "2208": 608, "0874": 608, "3519": 608, "0031": 608, "607": 608, "1055": 608, "4140": 608, "116": 608, "634": 608, "3716": 608, "1154": 608, "0721": 608, "0898": 608, "coord": [608, 609, 631, 642, 675, 686], "orient": [608, 709, 725, 795, 875], "metadata_map": [608, 609, 631, 642, 675, 686], "65": 608, "prop_expl": [608, 609, 631, 642, 675, 686], "6216": 608, "7715": 608, "1215": 608, "6913": 608, "8304": 608, "trajectori": [608, 609, 619, 620, 630, 631, 641, 642, 652, 653, 663, 664, 674, 675, 685, 686, 696], "av": 608, "trajectory_categori": [608, 609, 631, 642, 675], "sort_categori": [608, 609, 631, 642, 675], "trajectory_result": 608, "get_trajectori": 608, "avg": 608, "0118478282382": 608, "52199973": 608, "29597001": 608, "20309816": 608, "007022633956606": 608, "ax": [609, 631, 642, 675, 698, 709, 712, 713], "norm": [609, 631, 675, 686], "gradientanova": [609, 631, 675, 686], "gradientanovaresult": [619, 641, 652, 685, 696], "groupresult": 620, "out_f": [630, 663, 674], "raw_f": [630, 663, 674], "categoryresult": 653, "2nd": [675, 819], "window_s": 686, "window": 686, "buf_siz": 697, "bin_f": 697, "bin": 697, "unsign": [697, 785], "resid": 697, "prng": 697, "wherea": 697, "decreas": 697, "overhead": 697, "demultiplex": 697, "samplea": 697, "aattgg": 697, "sampleb": 697, "atatatat": 697, "samplec": 697, "atggcc": 697, "atggct": 697, "atggcg": 697, "atggca": 697, "bin_": 697, "fish": 698, "transect": 698, "substrate_cor": 698, "substrate_sand": 698, "substrate_oth": 698, "site10": 698, "specie1": 698, "specie2": 698, "specie3": 698, "specie4": 698, "specie5": 698, "specie6": 698, "specie7": 698, "specie8": 698, "specie9": 698, "substrat": 698, "hot": 698, "perfect": [698, 713], "collinear": [698, 713], "ordination_result": 698, "proportion_explain": [698, 699], "cca1": 698, "466911": 698, "cca2": 698, "238327": 698, "cca3": 698, "100548": 698, "cca4": 698, "104937": 698, "cca5": 698, "044805": 698, "cca6": 698, "029747": 698, "cca7": 698, "012631": 698, "cca8": 698, "001562": 698, "cca9": 698, "000532": 698, "amsterdam": [698, 712, 713, 720], "short_method_nam": [699, 818], "long_method_nam": [699, 818], "biplot_scor": [699, 818], "sample_constraint": 699, "scatterplot": [699, 709], "ipython": 699, "notebook": 699, "constrain": [699, 713], "legend": 709, "set1": 709, "grei": 709, "axes3d": 709, "scatter": 709, "jupyt": 709, "lab": [709, 726], "emperor": 709, "colormaps_refer": 709, "vazquez": 709, "baeza": 709, "pirrung": 709, "gonzalez": 709, "gigasci": 709, "github": 709, "21712454": 709, "5007512": 709, "91769271": 709, "45995501": 709, "80332382": 709, "65463348": 709, "pcoa_result": 709, "chi": [712, 713], "pca": [712, 718, 720], "lot": 712, "steep": 712, "kind": 712, "explan": [712, 713], "ecologist": 712, "456": 712, "far": 712, "exhibit": 712, "multimod": 712, "notimplementederror": [712, 713], "suit": 713, "nich": 713, "unimod": [713, 718], "habitat": 713, "unconstrain": 713, "deem": 713, "ones": [713, 726], "shouldn": 713, "confus": 713, "ccora": 713, "sens": [713, 727, 806, 814], "cajo": 713, "braak": 713, "1167": 713, "1179": 713, "piet": 713, "verdonschot": 713, "aquat": 713, "1995": 713, "289": 713, "columnwis": 714, "elementwis": 715, "eq": [715, 716], "e_matrix": 716, "with_mean": [717, 721], "with_std": [717, 721], "flatten": 717, "likelyhood": [717, 721], "inplac": [718, 798], "euclidian": 718, "On": 718, "semimetr": 718, "decid": [718, 881], "heterogen": 719, "physic": [719, 727], "scale_i": 720, "Its": 720, "geq": 720, "focus": 720, "approxim": [720, 723], "stimat": 721, "wherev": 721, "m_shape": 722, "tol": 722, "linalg": 722, "matrix_rank": 722, "rational": 722, "toler": [722, 817], "precomput": 722, "svd": 722, "hoc": 723, "principl": 723, "mont": 723, "carlo": 723, "k_": 723, "mu": 723, "mu_": 723, "neq": 723, "approx": 723, "commit": 723, "ii": 723, "repeatedli": 723, "underpow": 723, "statsmodel": 723, "ind": [723, 727], "dep": 723, "randint": 723, "randn": [723, 726, 727], "617": 723, "533": 723, "788": 723, "602": 723, "229": 723, "779": 723, "838": 723, "032": 723, "157": 723, "051": 723, "601": 723, "664": 723, "783": 723, "646e": 723, "subsample_pow": 723, "draw_mod": [723, 727], "critic": [723, 724, 726, 727, 754], "pwr_100": 723, "counts_100": 723, "max_count": [723, 726, 727], "min_count": [723, 726, 727], "counts_interv": [723, 726, 727], "alpha_pwr": [723, 726, 727], "num_it": [723, 726, 727], "pwr_010": 723, "counts_010": 723, "pwr_001": 723, "counts_001": 723, "484": 723, "844": 723, "932": 723, "984": 723, "044": 723, "224": 723, "572": 723, "836": 723, "928": 723, "996": [723, 727], "016": 723, "108": 723, "332": 723, "848": 723, "956": 723, "vec": 724, "control_cat": [725, 726], "strict_match": [725, 726], "sex": [725, 726], "educ": [725, 874], "diet": 725, "exercis": 725, "statu": [725, 726], "healthi": [725, 726, 727], "hous": 725, "abx": 725, "bb": 725, "hstack": [725, 726], "500": [726, 727], "num_run": [726, 727], "sample_count": [726, 727], "cytokin": 726, "transloc": 726, "myeloid": 726, "cultur": 726, "macrophag": 726, "bone": 726, "marrow": 726, "phagocyt": 726, "periton": 726, "media": 726, "acquir": 726, "compani": 726, "labor": 726, "intens": 726, "assai": 726, "preliminari": 726, "cell_lin": 726, "binomi": [726, 727], "incub": 726, "untreat": 726, "treatment_stat": 726, "groupbi": 726, "00193863362662502": 726, "seem": 726, "receptor": 726, "temperatur": 726, "co2": 726, "idea": 726, "encourag": 726, "pwr": 726, "cnt": 726, "528": 726, "088": 726, "127": 726, "adequ": 726, "sublist": 727, "bacteria": [727, 772, 773, 806], "gardnerella": 727, "vaginali": 727, "vagin": 727, "menopaus": 727, "woman": 727, "experienc": 727, "urinari": 727, "tract": 727, "infect": 727, "uti": 727, "women": 727, "enrol": 727, "eight": 727, "week": 727, "particip": 727, "fecal": 727, "clinic": 727, "symptom": 727, "endpoint": [727, 803], "premenopaus": 727, "postmenopaus": 727, "pcr": 727, "pre_rat": 727, "pos_rat": 727, "chisquar": 727, "003": 727, "try": [727, 728], "risk": 727, "reproduct": 727, "bmi": 727, "tobacco": 727, "subsample_paired_pow": 727, "linkag": [727, 771], "pwr_est": 727, "nanmean": 727, "056": 727, "074": 727, "226": 727, "806": 727, "952": 727, "stool": 727, "secondari": 727, "met_po": 727, "2500": 727, "met_neg": 727, "metabolite_test": 727, "005": 727, "go": [727, 879, 881], "twice": 727, "pwr_est2": 727, "counts2": 727, "272": 727, "426": 727, "646": 727, "824": 727, "efficiencywarn": 728, "acceler": 728, "isubsampl": 728, "frequent": [734, 756], "grand": 734, "ellaps": 734, "bootstrap": 734, "assur": [735, 736, 760, 763], "unrooted_deepcopi": [735, 736, 760, 763, 795, 796, 810], "unrooted_copi": [735, 736, 760, 763, 796, 811], "tree_copi": [735, 736, 760, 763], "tree_nod": [735, 736, 760, 763], "travers": [735, 736, 756, 760, 763, 767, 770, 781, 784, 787, 788, 789, 804, 810, 811, 879], "tree_copy_nod": [735, 736, 760, 763], "deleg": 739, "noparenterror": 749, "nolengtherror": [749, 765, 774], "lack": 749, "toward": 750, "cach": [751, 756, 762, 766, 767, 768, 770, 777, 786, 790], "child1": [751, 766], "child2": [751, 766], "show_intern": 752, "compact": 752, "topolog": 753, "incom": 754, "species_a": 754, "successfulli": 754, "strip": [754, 758, 759], "czech": 754, "luca": 754, "jaim": 754, "huerta": 754, "cepa": 754, "alexandro": 754, "stamataki": 754, "review": 754, "viewer": 754, "toolkit": 754, "2017": 754, "1535": 754, "speciesa": 754, "insert_length": 755, "intermedi": 755, "prune": [755, 797, 808, 809], "func": [756, 769, 793, 798, 809, 820, 853, 864], "cache_attrnam": 756, "cache_typ": 756, "frozenset": [756, 800, 801], "particularli": 756, "topologi": [756, 790, 879], "invalidate_cach": [756, 762], "is_tip": [756, 775, 778, 879], "tip_nam": 756, "include_self": [756, 781, 784, 787, 788, 789, 804, 807, 879], "robinson": 757, "fould": 757, "compare_subset": [757, 759, 800, 801, 879], "compare_tip_dist": [757, 758, 765, 774, 803, 879], "julia": 757, "goodrich": 757, "bioscienc": 757, "tree1": [757, 758, 759, 879], "tree2": [757, 758, 759, 879], "exclude_absent_taxa": 758, "compare_rfd": [758, 759], "dist_f": 759, "distance_from_r": 759, "shuffle_f": [759, 798], "shuffl": 759, "mtrand": [759, 798], "randomst": [759, 798], "m1": 759, "m2": 759, "distance_from_r_squar": 759, "dist": [759, 774], "9f": 759, "000133446": 759, "conflict": 762, "cache_attr": [762, 777], "tip_subset": 764, "replic": 764, "cogent": 764, "totaldescendingbranch": 764, "postord": [764, 767, 781, 784, 788, 789, 804, 807, 879], "tr": 764, "tdbl": 764, "sdbl": 764, "tip_tip_dist": [765, 774], "accumulate_to_ancestor": 765, "get_max_dist": 765, "tip_a": [765, 794], "tip_d": 765, "find_al": [767, 769, 770], "find_by_id": [767, 768, 769], "find_by_func": [767, 768, 770], "node_id": [770, 776, 805], "linkage_matrix": 771, "id_list": 771, "hierarchi": [771, 772, 879], "from_taxonomi": [772, 806], "taxdump": 772, "dmp": 772, "phylum": 772, "set_index": 772, "archaea": [772, 773, 806], "firmicut": [772, 773, 806], "bacteroidet": [772, 773, 806], "lineage_map": 773, "from_taxdump": 773, "clostridia": [773, 806], "bacilli": [773, 806], "sphingobacteria": [773, 806], "euryarchaeota": [773, 806], "thermoplasmata": [773, 806], "halobacteria": [773, 806], "cytophagia": [773, 806], "distant": 774, "is_root": [775, 779, 879], "_leaf_index": 776, "create_cach": 777, "has_children": [778, 779], "tipnam": [780, 782], "lowest_common_ancestor": 780, "convienc": [780, 782], "preorder": [781, 784, 787, 788, 804, 807, 879], "pre_and_postord": [781, 784, 787, 789, 804, 807], "non_tip": [781, 787, 788, 789, 804, 807, 813, 879], "node_c": 783, "nontip": 784, "levelord": [784, 787, 788, 789, 804, 807], "tip_count": 785, "remove_delet": [786, 790, 792, 797], "ineleg": 787, "stack": 787, "3x": 787, "worst": 787, "comb": 787, "visit": 788, "reconstruct": [790, 814, 874, 877], "shear": 790, "pop": [790, 792, 793, 797], "to_delet": 790, "clade": [793, 800, 813, 879], "knowledg": [795, 875], "treeerror": [795, 796], "root_at_midpoint": [795, 814], "midpoint": [796, 814], "farthest": 796, "apart": 796, "lengtherror": 796, "indirectli": 796, "mid": 796, "root_at": [796, 810, 811], "infinit": [798, 810, 811], "rev": 798, "shuffler": 798, "shuffled_tre": 798, "tip_": 799, "tip_list": 802, "representationwarn": 803, "nan_length_valu": 805, "attribute_nam": 805, "aris": [805, 813], "id_index": 805, "child_index": 805, "left_child_id": 805, "right_child_id": 805, "attr_1": 805, "attr_n": 805, "allow_empti": 806, "filter_f": 806, "self_befor": 807, "self_aft": 807, "inord": 807, "unpack_by_func": 808, "elong": 808, "graft": 808, "unpack": 809, "assign_support": 809, "walk": [810, 811, 879, 881], "_not_": 810, "new_tre": [810, 811], "support_attr": 813, "tree_node_class": 813, "_tree": 813, "consensu": 813, "arbitrarili": [813, 881], "usefulli": 813, "disjoint": 813, "adapt": 813, "matthew": 813, "wakefield": 813, "margush": 813, "mcmorri": 813, "fr": 813, "bulletin": 813, "239": 813, "consens": 813, "support_valu": 813, "consensus_tre": 813, "disallow_negative_branch_length": 814, "result_constructor": 814, "saitou": 814, "nei": 814, "gascuel": 814, "steel": 814, "overview": 814, "3447015": 814, "neighbour_join": 814, "reveal": 814, "novemb": 814, "molbev": 814, "msl072": 814, "abcd": 814, "render": 814, "newick_str": 814, "accident": 815, "ineffici": 815, "instal": 815, "success": [816, 841, 881], "alter": 816, "task": [816, 875], "deleteri": 816, "rtol": 817, "assertionerror": [817, 818], "almost": 817, "assert_frame_equ": 817, "ignore_method_nam": 818, "ignore_axis_label": 818, "ignore_direction": 818, "assert": 818, "direction": 818, "cardin": 819, "0th": 819, "fdel": 820, "fget": 820, "fset": 820, "owner": 824, "fn": 838, "subfold": 838, "filenam": 838, "folder": 838, "open_fil": 839, "block_siz": 839, "1048576": 839, "checksum": 839, "hashlib": 839, "answer": 839, "stackoverflow": 839, "1131255": 839, "379593": 839, "baz": 839, "hexdigest": 839, "ab07acbb1e496801937adfa772424bf7": 839, "short_circuit": 840, "offer": 840, "mechan": [840, 881], "prealloc": 840, "enabl": [840, 881], "interrog": 840, "handi": [840, 881], "contextu": 840, "iter_": 841, "success_callback": [841, 881], "fail_callback": [841, 881], "engin": 841, "callback": [841, 881], "short_cicruit": 841, "examin": [841, 881], "aspect": 841, "_setup_debug_trac": 851, "not_non": [863, 881], "pronounc": 874, "sigh": 874, "kit": 874, "bui": 874, "oh": 874, "bsd": 874, "licens": 874, "activ": 874, "introduct": 874, "workflow": 874, "miscellan": 874, "writeabl": 875, "snif": 875, "my_obj": 875, "someformat": 875, "oo": 875, "open_filehandl": 875, "unnam": 875, "twofold": 875, "nonbiolog": 877, "accgggta": 877, "my": 877, "gfp": 877, "ggg": 877, "d2": 877, "d3": 877, "tacccggt": 877, "r1": 877, "gacccgcuuu": 877, "r2": 877, "gccccccuuu": 877, "r3": 877, "accguuaguc": 877, "r4": 877, "acgggu": 877, "uc": 877, "r5": 877, "agg": 877, "ggacugaa": 877, "gga": 877, "gaa": 877, "themselv": 877, "agggga": 877, "ut": 877, "atgtgtatttga": 877, "auguguauuu": 877, "protein_from_dna": 877, "mci": 877, "protein_from_rna": 877, "parenthes": 879, "traver": 879, "tree3": 879, "6666666666666667": 879, "120492524415": 879, "short": 881, "circuit": 881, "processor": 881, "nuc_pattern": 881, "aattg": 881, "has_nuc_pattern": 881, "sequenceprocessor": 881, "initialize_st": 881, "setup": 881, "check_length": 881, "indicatd": 881, "specfi": 881, "aaaaaaattttttt": 881, "atagacc": 881, "aattgccggac": 881, "atatgaacaaa": 881, "fun": 881, "excit": 881, "success_f": 881, "fail_f": 881, "ccggac": 881, "thing": 881, "ahead": 881, "tttttttaaaaaaa": 881, "debug_trac": 881, "earlier": 881, "caggcc": 881, "anticip": 881, "rapidli": 881, "debug_pre_st": 881, "debug_post_st": 881, "awesom": 881, "piec": 881, "debug_runtim": 881, "diagnos": 881, "aggreg": 881, "cprofil": 881, "quit": 881, "ex": 881, "do_someth": 881, "do_something_els": 881, "foobar": 881, "do_something_awesom": 881}, "objects": {"skbio": [[0, 0, 0, "-", "alignment"], [1, 0, 0, "-", "diversity"], [875, 0, 0, "-", "io"], [876, 0, 0, "-", "metadata"], [877, 0, 0, "-", "sequence"], [878, 0, 0, "-", "stats"], [879, 0, 0, "-", "tree"], [880, 0, 0, "-", "util"], [881, 0, 0, "-", "workflow"]], "skbio.alignment": [[2, 1, 1, "", "AlignmentStructure"], [16, 1, 1, "", "StripedSmithWaterman"], [28, 1, 1, "", "TabularMSA"], [60, 3, 1, "", "global_pairwise_align"], [61, 3, 1, "", "global_pairwise_align_nucleotide"], [62, 3, 1, "", "global_pairwise_align_protein"], [63, 3, 1, "", "local_pairwise_align"], [64, 3, 1, "", "local_pairwise_align_nucleotide"], [65, 3, 1, "", "local_pairwise_align_protein"], [66, 3, 1, "", "local_pairwise_align_ssw"], [67, 3, 1, "", "make_identity_substitution_matrix"]], "skbio.alignment.AlignmentStructure": [[3, 2, 1, "", "__eq__"], [4, 2, 1, "", "__ge__"], [5, 2, 1, "", "__getitem__"], [6, 2, 1, "", "__getstate__"], [7, 2, 1, "", "__gt__"], [8, 2, 1, "", "__hash__"], [9, 2, 1, "", "__le__"], [10, 2, 1, "", "__lt__"], [11, 2, 1, "", "__ne__"], [12, 2, 1, "", "__setstate__"], [13, 2, 1, "", "__str__"], [14, 2, 1, "", "is_zero_based"], [15, 2, 1, "", "set_zero_based"]], "skbio.alignment.StripedSmithWaterman": [[17, 2, 1, "", "__call__"], [18, 2, 1, "", "__eq__"], [19, 2, 1, "", "__ge__"], [20, 2, 1, "", "__getstate__"], [21, 2, 1, "", "__gt__"], [22, 2, 1, "", "__hash__"], [23, 2, 1, "", "__le__"], [24, 2, 1, "", "__lt__"], [25, 2, 1, "", "__ne__"], [26, 2, 1, "", "__setstate__"], [27, 2, 1, "", "__str__"]], "skbio.alignment.TabularMSA": [[29, 2, 1, "", "__bool__"], [30, 2, 1, "", "__contains__"], [31, 2, 1, "", "__copy__"], [32, 2, 1, "", "__deepcopy__"], [33, 2, 1, "", "__eq__"], [34, 2, 1, "", "__ge__"], [35, 2, 1, "", "__getitem__"], [36, 2, 1, "", "__getstate__"], [37, 2, 1, "", "__gt__"], [38, 2, 1, "", "__iter__"], [39, 2, 1, "", "__le__"], [40, 2, 1, "", "__len__"], [41, 2, 1, "", "__lt__"], [42, 2, 1, "", "__ne__"], [43, 2, 1, "", "__reversed__"], [44, 2, 1, "", "__str__"], [45, 2, 1, "", "append"], [46, 2, 1, "", "consensus"], [47, 2, 1, "", "conservation"], [48, 2, 1, "", "extend"], [49, 2, 1, "", "from_dict"], [50, 2, 1, "", "gap_frequencies"], [51, 2, 1, "", "has_metadata"], [52, 2, 1, "", "has_positional_metadata"], [53, 2, 1, "", "iter_positions"], [54, 2, 1, "", "join"], [55, 2, 1, "", "read"], [56, 2, 1, "", "reassign_index"], [57, 2, 1, "", "sort"], [58, 2, 1, "", "to_dict"], [59, 2, 1, "", "write"]], "skbio.diversity": [[68, 0, 0, "-", "alpha"], [103, 3, 1, "", "alpha_diversity"], [104, 0, 0, "-", "beta"], [107, 3, 1, "", "beta_diversity"], [108, 3, 1, "", "block_beta_diversity"], [109, 3, 1, "", "get_alpha_diversity_metrics"], [110, 3, 1, "", "get_beta_diversity_metrics"], [111, 3, 1, "", "partial_beta_diversity"]], "skbio.diversity.alpha": [[69, 3, 1, "", "ace"], [70, 3, 1, "", "berger_parker_d"], [71, 3, 1, "", "brillouin_d"], [72, 3, 1, "", "chao1"], [73, 3, 1, "", "chao1_ci"], [74, 3, 1, "", "dominance"], [75, 3, 1, "", "doubles"], [76, 3, 1, "", "enspie"], [77, 3, 1, "", "esty_ci"], [78, 3, 1, "", "faith_pd"], [79, 3, 1, "", "fisher_alpha"], [80, 3, 1, "", "gini_index"], [81, 3, 1, "", "goods_coverage"], [82, 3, 1, "", "heip_e"], [83, 3, 1, "", "kempton_taylor_q"], [84, 3, 1, "", "lladser_ci"], [85, 3, 1, "", "lladser_pe"], [86, 3, 1, "", "margalef"], [87, 3, 1, "", "mcintosh_d"], [88, 3, 1, "", "mcintosh_e"], [89, 3, 1, "", "menhinick"], [90, 3, 1, "", "michaelis_menten_fit"], [91, 3, 1, "", "observed_features"], [92, 3, 1, "", "observed_otus"], [93, 3, 1, "", "osd"], [94, 3, 1, "", "phydiv"], [95, 3, 1, "", "pielou_e"], [96, 3, 1, "", "robbins"], [97, 3, 1, "", "shannon"], [98, 3, 1, "", "simpson"], [99, 3, 1, "", "simpson_e"], [100, 3, 1, "", "singles"], [101, 3, 1, "", "sobs"], [102, 3, 1, "", "strong"]], "skbio.diversity.beta": [[105, 3, 1, "", "unweighted_unifrac"], [106, 3, 1, "", "weighted_unifrac"]], "skbio.io": [[112, 4, 1, "", "ArgumentOverrideWarning"], [113, 4, 1, "", "BLAST7FormatError"], [114, 4, 1, "", "ClustalFormatError"], [115, 4, 1, "", "EMBLFormatError"], [116, 4, 1, "", "FASTAFormatError"], [117, 4, 1, "", "FASTQFormatError"], [118, 4, 1, "", "FileFormatError"], [119, 4, 1, "", "FormatIdentificationWarning"], [120, 4, 1, "", "GFF3FormatError"], [121, 4, 1, "", "GenBankFormatError"], [122, 4, 1, "", "IOSourceError"], [123, 4, 1, "", "LSMatFormatError"], [124, 4, 1, "", "NewickFormatError"], [125, 4, 1, "", "OrdinationFormatError"], [126, 4, 1, "", "PhylipFormatError"], [127, 4, 1, "", "QSeqFormatError"], [128, 4, 1, "", "QUALFormatError"], [129, 4, 1, "", "StockholmFormatError"], [130, 4, 1, "", "UnrecognizedFormatError"], [148, 0, 0, "-", "registry"], [189, 0, 0, "-", "util"]], "skbio.io.format": [[131, 0, 0, "-", "binary_dm"], [132, 0, 0, "-", "blast6"], [133, 0, 0, "-", "blast7"], [134, 0, 0, "-", "clustal"], [135, 0, 0, "-", "embl"], [136, 0, 0, "-", "fasta"], [137, 0, 0, "-", "fastq"], [138, 0, 0, "-", "genbank"], [139, 0, 0, "-", "gff3"], [140, 0, 0, "-", "lsmat"], [141, 0, 0, "-", "newick"], [142, 0, 0, "-", "ordination"], [143, 0, 0, "-", "phylip"], [144, 0, 0, "-", "qseq"], [145, 0, 0, "-", "sample_metadata"], [146, 0, 0, "-", "stockholm"], [147, 0, 0, "-", "taxdump"]], "skbio.io.registry": [[149, 4, 1, "", "DuplicateRegistrationError"], [150, 1, 1, "", "Format"], [163, 1, 1, "", "IORegistry"], [184, 4, 1, "", "InvalidRegistrationError"], [185, 3, 1, "", "create_format"], [186, 3, 1, "", "read"], [187, 3, 1, "", "sniff"], [188, 3, 1, "", "write"]], "skbio.io.registry.Format": [[151, 2, 1, "", "__eq__"], [152, 2, 1, "", "__ge__"], [153, 2, 1, "", "__getstate__"], [154, 2, 1, "", "__gt__"], [155, 2, 1, "", "__hash__"], [156, 2, 1, "", "__le__"], [157, 2, 1, "", "__lt__"], [158, 2, 1, "", "__ne__"], [159, 2, 1, "", "__str__"], [160, 2, 1, "", "reader"], [161, 2, 1, "", "sniffer"], [162, 2, 1, "", "writer"]], "skbio.io.registry.IORegistry": [[164, 2, 1, "", "__eq__"], [165, 2, 1, "", "__ge__"], [166, 2, 1, "", "__getstate__"], [167, 2, 1, "", "__gt__"], [168, 2, 1, "", "__hash__"], [169, 2, 1, "", "__le__"], [170, 2, 1, "", "__lt__"], [171, 2, 1, "", "__ne__"], [172, 2, 1, "", "__str__"], [173, 2, 1, "", "add_format"], [174, 2, 1, "", "create_format"], [175, 2, 1, "", "get_reader"], [176, 2, 1, "", "get_sniffer"], [177, 2, 1, "", "get_writer"], [178, 2, 1, "", "list_read_formats"], [179, 2, 1, "", "list_write_formats"], [180, 2, 1, "", "monkey_patch"], [181, 2, 1, "", "read"], [182, 2, 1, "", "sniff"], [183, 2, 1, "", "write"]], "skbio.io.util": [[190, 3, 1, "", "open"], [191, 3, 1, "", "open_file"], [192, 3, 1, "", "open_files"]], "skbio.metadata": [[193, 1, 1, "", "Interval"], [203, 1, 1, "", "IntervalMetadata"]], "skbio.metadata.Interval": [[194, 2, 1, "", "__eq__"], [195, 2, 1, "", "__ge__"], [196, 2, 1, "", "__getstate__"], [197, 2, 1, "", "__gt__"], [198, 2, 1, "", "__le__"], [199, 2, 1, "", "__lt__"], [200, 2, 1, "", "__ne__"], [201, 2, 1, "", "__str__"], [202, 2, 1, "", "drop"]], "skbio.metadata.IntervalMetadata": [[204, 2, 1, "", "__copy__"], [205, 2, 1, "", "__deepcopy__"], [206, 2, 1, "", "__eq__"], [207, 2, 1, "", "__ge__"], [208, 2, 1, "", "__getstate__"], [209, 2, 1, "", "__gt__"], [210, 2, 1, "", "__le__"], [211, 2, 1, "", "__lt__"], [212, 2, 1, "", "__ne__"], [213, 2, 1, "", "__str__"], [214, 2, 1, "", "add"], [215, 2, 1, "", "concat"], [216, 2, 1, "", "drop"], [217, 2, 1, "", "merge"], [218, 2, 1, "", "query"], [219, 2, 1, "", "read"], [220, 2, 1, "", "sort"], [221, 2, 1, "", "write"]], "skbio.sequence": [[222, 1, 1, "", "DNA"], [281, 1, 1, "", "GeneticCode"], [293, 1, 1, "", "GrammaredSequence"], [344, 1, 1, "", "Protein"], [397, 1, 1, "", "RNA"], [456, 1, 1, "", "Sequence"], [494, 1, 1, "", "SubstitutionMatrix"], [522, 0, 0, "-", "distance"]], "skbio.sequence.DNA": [[223, 2, 1, "", "__bool__"], [224, 2, 1, "", "__contains__"], [225, 2, 1, "", "__copy__"], [226, 2, 1, "", "__deepcopy__"], [227, 2, 1, "", "__eq__"], [228, 2, 1, "", "__ge__"], [229, 2, 1, "", "__getitem__"], [230, 2, 1, "", "__getstate__"], [231, 2, 1, "", "__gt__"], [232, 2, 1, "", "__iter__"], [233, 2, 1, "", "__le__"], [234, 2, 1, "", "__len__"], [235, 2, 1, "", "__lt__"], [236, 2, 1, "", "__ne__"], [237, 2, 1, "", "__reversed__"], [238, 2, 1, "", "__str__"], [239, 2, 1, "", "complement"], [240, 2, 1, "", "concat"], [241, 2, 1, "", "count"], [242, 2, 1, "", "definites"], [243, 2, 1, "", "degap"], [244, 2, 1, "", "degenerates"], [245, 2, 1, "", "distance"], [246, 2, 1, "", "expand_degenerates"], [247, 2, 1, "", "find_motifs"], [248, 2, 1, "", "find_with_regex"], [249, 2, 1, "", "frequencies"], [250, 2, 1, "", "gaps"], [251, 2, 1, "", "gc_content"], [252, 2, 1, "", "gc_frequency"], [253, 2, 1, "", "has_definites"], [254, 2, 1, "", "has_degenerates"], [255, 2, 1, "", "has_gaps"], [256, 2, 1, "", "has_interval_metadata"], [257, 2, 1, "", "has_metadata"], [258, 2, 1, "", "has_nondegenerates"], [259, 2, 1, "", "has_positional_metadata"], [260, 2, 1, "", "index"], [261, 2, 1, "", "is_reverse_complement"], [262, 2, 1, "", "iter_contiguous"], [263, 2, 1, "", "iter_kmers"], [264, 2, 1, "", "kmer_frequencies"], [265, 2, 1, "", "lowercase"], [266, 2, 1, "", "match_frequency"], [267, 2, 1, "", "matches"], [268, 2, 1, "", "mismatch_frequency"], [269, 2, 1, "", "mismatches"], [270, 2, 1, "", "nondegenerates"], [271, 2, 1, "", "read"], [272, 2, 1, "", "replace"], [273, 2, 1, "", "reverse_complement"], [274, 2, 1, "", "to_definites"], [275, 2, 1, "", "to_indices"], [276, 2, 1, "", "to_regex"], [277, 2, 1, "", "transcribe"], [278, 2, 1, "", "translate"], [279, 2, 1, "", "translate_six_frames"], [280, 2, 1, "", "write"]], "skbio.sequence.GeneticCode": [[282, 2, 1, "", "__eq__"], [283, 2, 1, "", "__ge__"], [284, 2, 1, "", "__getstate__"], [285, 2, 1, "", "__gt__"], [286, 2, 1, "", "__le__"], [287, 2, 1, "", "__lt__"], [288, 2, 1, "", "__ne__"], [289, 2, 1, "", "__str__"], [290, 2, 1, "", "from_ncbi"], [291, 2, 1, "", "translate"], [292, 2, 1, "", "translate_six_frames"]], "skbio.sequence.GrammaredSequence": [[294, 2, 1, "", "__bool__"], [295, 2, 1, "", "__contains__"], [296, 2, 1, "", "__copy__"], [297, 2, 1, "", "__deepcopy__"], [298, 2, 1, "", "__eq__"], [299, 2, 1, "", "__ge__"], [300, 2, 1, "", "__getitem__"], [301, 2, 1, "", "__getstate__"], [302, 2, 1, "", "__gt__"], [303, 2, 1, "", "__iter__"], [304, 2, 1, "", "__le__"], [305, 2, 1, "", "__len__"], [306, 2, 1, "", "__lt__"], [307, 2, 1, "", "__ne__"], [308, 2, 1, "", "__reversed__"], [309, 2, 1, "", "__str__"], [310, 2, 1, "", "concat"], [311, 2, 1, "", "count"], [312, 2, 1, "", "definites"], [313, 2, 1, "", "degap"], [314, 2, 1, "", "degenerates"], [315, 2, 1, "", "distance"], [316, 2, 1, "", "expand_degenerates"], [317, 2, 1, "", "find_motifs"], [318, 2, 1, "", "find_with_regex"], [319, 2, 1, "", "frequencies"], [320, 2, 1, "", "gaps"], [321, 2, 1, "", "has_definites"], [322, 2, 1, "", "has_degenerates"], [323, 2, 1, "", "has_gaps"], [324, 2, 1, "", "has_interval_metadata"], [325, 2, 1, "", "has_metadata"], [326, 2, 1, "", "has_nondegenerates"], [327, 2, 1, "", "has_positional_metadata"], [328, 2, 1, "", "index"], [329, 2, 1, "", "iter_contiguous"], [330, 2, 1, "", "iter_kmers"], [331, 2, 1, "", "kmer_frequencies"], [332, 2, 1, "", "lowercase"], [333, 2, 1, "", "match_frequency"], [334, 2, 1, "", "matches"], [335, 2, 1, "", "mismatch_frequency"], [336, 2, 1, "", "mismatches"], [337, 2, 1, "", "nondegenerates"], [338, 2, 1, "", "read"], [339, 2, 1, "", "replace"], [340, 2, 1, "", "to_definites"], [341, 2, 1, "", "to_indices"], [342, 2, 1, "", "to_regex"], [343, 2, 1, "", "write"]], "skbio.sequence.Protein": [[345, 2, 1, "", "__bool__"], [346, 2, 1, "", "__contains__"], [347, 2, 1, "", "__copy__"], [348, 2, 1, "", "__deepcopy__"], [349, 2, 1, "", "__eq__"], [350, 2, 1, "", "__ge__"], [351, 2, 1, "", "__getitem__"], [352, 2, 1, "", "__getstate__"], [353, 2, 1, "", "__gt__"], [354, 2, 1, "", "__iter__"], [355, 2, 1, "", "__le__"], [356, 2, 1, "", "__len__"], [357, 2, 1, "", "__lt__"], [358, 2, 1, "", "__ne__"], [359, 2, 1, "", "__reversed__"], [360, 2, 1, "", "__str__"], [361, 2, 1, "", "concat"], [362, 2, 1, "", "count"], [363, 2, 1, "", "definites"], [364, 2, 1, "", "degap"], [365, 2, 1, "", "degenerates"], [366, 2, 1, "", "distance"], [367, 2, 1, "", "expand_degenerates"], [368, 2, 1, "", "find_motifs"], [369, 2, 1, "", "find_with_regex"], [370, 2, 1, "", "frequencies"], [371, 2, 1, "", "gaps"], [372, 2, 1, "", "has_definites"], [373, 2, 1, "", "has_degenerates"], [374, 2, 1, "", "has_gaps"], [375, 2, 1, "", "has_interval_metadata"], [376, 2, 1, "", "has_metadata"], [377, 2, 1, "", "has_nondegenerates"], [378, 2, 1, "", "has_positional_metadata"], [379, 2, 1, "", "has_stops"], [380, 2, 1, "", "index"], [381, 2, 1, "", "iter_contiguous"], [382, 2, 1, "", "iter_kmers"], [383, 2, 1, "", "kmer_frequencies"], [384, 2, 1, "", "lowercase"], [385, 2, 1, "", "match_frequency"], [386, 2, 1, "", "matches"], [387, 2, 1, "", "mismatch_frequency"], [388, 2, 1, "", "mismatches"], [389, 2, 1, "", "nondegenerates"], [390, 2, 1, "", "read"], [391, 2, 1, "", "replace"], [392, 2, 1, "", "stops"], [393, 2, 1, "", "to_definites"], [394, 2, 1, "", "to_indices"], [395, 2, 1, "", "to_regex"], [396, 2, 1, "", "write"]], "skbio.sequence.RNA": [[398, 2, 1, "", "__bool__"], [399, 2, 1, "", "__contains__"], [400, 2, 1, "", "__copy__"], [401, 2, 1, "", "__deepcopy__"], [402, 2, 1, "", "__eq__"], [403, 2, 1, "", "__ge__"], [404, 2, 1, "", "__getitem__"], [405, 2, 1, "", "__getstate__"], [406, 2, 1, "", "__gt__"], [407, 2, 1, "", "__iter__"], [408, 2, 1, "", "__le__"], [409, 2, 1, "", "__len__"], [410, 2, 1, "", "__lt__"], [411, 2, 1, "", "__ne__"], [412, 2, 1, "", "__reversed__"], [413, 2, 1, "", "__str__"], [414, 2, 1, "", "complement"], [415, 2, 1, "", "concat"], [416, 2, 1, "", "count"], [417, 2, 1, "", "definites"], [418, 2, 1, "", "degap"], [419, 2, 1, "", "degenerates"], [420, 2, 1, "", "distance"], [421, 2, 1, "", "expand_degenerates"], [422, 2, 1, "", "find_motifs"], [423, 2, 1, "", "find_with_regex"], [424, 2, 1, "", "frequencies"], [425, 2, 1, "", "gaps"], [426, 2, 1, "", "gc_content"], [427, 2, 1, "", "gc_frequency"], [428, 2, 1, "", "has_definites"], [429, 2, 1, "", "has_degenerates"], [430, 2, 1, "", "has_gaps"], [431, 2, 1, "", "has_interval_metadata"], [432, 2, 1, "", "has_metadata"], [433, 2, 1, "", "has_nondegenerates"], [434, 2, 1, "", "has_positional_metadata"], [435, 2, 1, "", "index"], [436, 2, 1, "", "is_reverse_complement"], [437, 2, 1, "", "iter_contiguous"], [438, 2, 1, "", "iter_kmers"], [439, 2, 1, "", "kmer_frequencies"], [440, 2, 1, "", "lowercase"], [441, 2, 1, "", "match_frequency"], [442, 2, 1, "", "matches"], [443, 2, 1, "", "mismatch_frequency"], [444, 2, 1, "", "mismatches"], [445, 2, 1, "", "nondegenerates"], [446, 2, 1, "", "read"], [447, 2, 1, "", "replace"], [448, 2, 1, "", "reverse_complement"], [449, 2, 1, "", "reverse_transcribe"], [450, 2, 1, "", "to_definites"], [451, 2, 1, "", "to_indices"], [452, 2, 1, "", "to_regex"], [453, 2, 1, "", "translate"], [454, 2, 1, "", "translate_six_frames"], [455, 2, 1, "", "write"]], "skbio.sequence.Sequence": [[457, 2, 1, "", "__bool__"], [458, 2, 1, "", "__contains__"], [459, 2, 1, "", "__copy__"], [460, 2, 1, "", "__deepcopy__"], [461, 2, 1, "", "__eq__"], [462, 2, 1, "", "__ge__"], [463, 2, 1, "", "__getitem__"], [464, 2, 1, "", "__getstate__"], [465, 2, 1, "", "__gt__"], [466, 2, 1, "", "__iter__"], [467, 2, 1, "", "__le__"], [468, 2, 1, "", "__len__"], [469, 2, 1, "", "__lt__"], [470, 2, 1, "", "__ne__"], [471, 2, 1, "", "__reversed__"], [472, 2, 1, "", "__str__"], [473, 2, 1, "", "concat"], [474, 2, 1, "", "count"], [475, 2, 1, "", "distance"], [476, 2, 1, "", "find_with_regex"], [477, 2, 1, "", "frequencies"], [478, 2, 1, "", "has_interval_metadata"], [479, 2, 1, "", "has_metadata"], [480, 2, 1, "", "has_positional_metadata"], [481, 2, 1, "", "index"], [482, 2, 1, "", "iter_contiguous"], [483, 2, 1, "", "iter_kmers"], [484, 2, 1, "", "kmer_frequencies"], [485, 2, 1, "", "lowercase"], [486, 2, 1, "", "match_frequency"], [487, 2, 1, "", "matches"], [488, 2, 1, "", "mismatch_frequency"], [489, 2, 1, "", "mismatches"], [490, 2, 1, "", "read"], [491, 2, 1, "", "replace"], [492, 2, 1, "", "to_indices"], [493, 2, 1, "", "write"]], "skbio.sequence.SubstitutionMatrix": [[495, 2, 1, "", "__contains__"], [496, 2, 1, "", "__eq__"], [497, 2, 1, "", "__ge__"], [498, 2, 1, "", "__getitem__"], [499, 2, 1, "", "__getstate__"], [500, 2, 1, "", "__gt__"], [501, 2, 1, "", "__le__"], [502, 2, 1, "", "__lt__"], [503, 2, 1, "", "__ne__"], [504, 2, 1, "", "__str__"], [505, 2, 1, "", "between"], [506, 2, 1, "", "by_name"], [507, 2, 1, "", "copy"], [508, 2, 1, "", "filter"], [509, 2, 1, "", "from_dict"], [510, 2, 1, "", "from_iterable"], [511, 2, 1, "", "get_names"], [512, 2, 1, "", "identity"], [513, 2, 1, "", "index"], [514, 2, 1, "", "plot"], [515, 2, 1, "", "read"], [516, 2, 1, "", "redundant_form"], [517, 2, 1, "", "to_data_frame"], [518, 2, 1, "", "to_dict"], [519, 2, 1, "", "transpose"], [520, 2, 1, "", "within"], [521, 2, 1, "", "write"]], "skbio.sequence.distance": [[523, 3, 1, "", "hamming"], [524, 3, 1, "", "kmer_distance"]], "skbio.stats": [[525, 0, 0, "-", "composition"], [546, 0, 0, "-", "distance"], [606, 0, 0, "-", "evolve"], [608, 0, 0, "-", "gradient"], [697, 3, 1, "", "isubsample"], [698, 0, 0, "-", "ordination"], [723, 0, 0, "-", "power"], [728, 3, 1, "", "subsample_counts"]], "skbio.stats.composition": [[526, 3, 1, "", "alr"], [527, 3, 1, "", "alr_inv"], [528, 3, 1, "", "ancom"], [529, 3, 1, "", "centralize"], [530, 3, 1, "", "closure"], [531, 3, 1, "", "clr"], [532, 3, 1, "", "clr_inv"], [533, 3, 1, "", "dirmult_ttest"], [534, 3, 1, "", "ilr"], [535, 3, 1, "", "ilr_inv"], [536, 3, 1, "", "inner"], [537, 3, 1, "", "multi_replace"], [538, 3, 1, "", "multiplicative_replacement"], [539, 3, 1, "", "pairwise_vlr"], [540, 3, 1, "", "perturb"], [541, 3, 1, "", "perturb_inv"], [542, 3, 1, "", "power"], [543, 3, 1, "", "sbp_basis"], [544, 3, 1, "", "tree_basis"], [545, 3, 1, "", "vlr"]], "skbio.stats.distance": [[547, 1, 1, "", "DissimilarityMatrix"], [570, 4, 1, "", "DissimilarityMatrixError"], [571, 1, 1, "", "DistanceMatrix"], [597, 4, 1, "", "DistanceMatrixError"], [598, 4, 1, "", "MissingIDError"], [599, 3, 1, "", "anosim"], [600, 3, 1, "", "bioenv"], [601, 3, 1, "", "mantel"], [602, 3, 1, "", "permanova"], [603, 3, 1, "", "permdisp"], [604, 3, 1, "", "pwmantel"], [605, 3, 1, "", "randdm"]], "skbio.stats.distance.DissimilarityMatrix": [[548, 2, 1, "", "__contains__"], [549, 2, 1, "", "__eq__"], [550, 2, 1, "", "__ge__"], [551, 2, 1, "", "__getitem__"], [552, 2, 1, "", "__getstate__"], [553, 2, 1, "", "__gt__"], [554, 2, 1, "", "__le__"], [555, 2, 1, "", "__lt__"], [556, 2, 1, "", "__ne__"], [557, 2, 1, "", "__str__"], [558, 2, 1, "", "between"], [559, 2, 1, "", "copy"], [560, 2, 1, "", "filter"], [561, 2, 1, "", "from_iterable"], [562, 2, 1, "", "index"], [563, 2, 1, "", "plot"], [564, 2, 1, "", "read"], [565, 2, 1, "", "redundant_form"], [566, 2, 1, "", "to_data_frame"], [567, 2, 1, "", "transpose"], [568, 2, 1, "", "within"], [569, 2, 1, "", "write"]], "skbio.stats.distance.DistanceMatrix": [[572, 2, 1, "", "__contains__"], [573, 2, 1, "", "__eq__"], [574, 2, 1, "", "__ge__"], [575, 2, 1, "", "__getitem__"], [576, 2, 1, "", "__getstate__"], [577, 2, 1, "", "__gt__"], [578, 2, 1, "", "__le__"], [579, 2, 1, "", "__lt__"], [580, 2, 1, "", "__ne__"], [581, 2, 1, "", "__str__"], [582, 2, 1, "", "between"], [583, 2, 1, "", "condensed_form"], [584, 2, 1, "", "copy"], [585, 2, 1, "", "filter"], [586, 2, 1, "", "from_iterable"], [587, 2, 1, "", "index"], [588, 2, 1, "", "permute"], [589, 2, 1, "", "plot"], [590, 2, 1, "", "read"], [591, 2, 1, "", "redundant_form"], [592, 2, 1, "", "to_data_frame"], [593, 2, 1, "", "to_series"], [594, 2, 1, "", "transpose"], [595, 2, 1, "", "within"], [596, 2, 1, "", "write"]], "skbio.stats.evolve": [[607, 3, 1, "", "hommola_cospeciation"]], "skbio.stats.gradient": [[609, 1, 1, "", "AverageGradientANOVA"], [620, 1, 1, "", "CategoryResults"], [631, 1, 1, "", "FirstDifferenceGradientANOVA"], [642, 1, 1, "", "GradientANOVA"], [653, 1, 1, "", "GradientANOVAResults"], [664, 1, 1, "", "GroupResults"], [675, 1, 1, "", "TrajectoryGradientANOVA"], [686, 1, 1, "", "WindowDifferenceGradientANOVA"]], "skbio.stats.gradient.AverageGradientANOVA": [[610, 2, 1, "", "__eq__"], [611, 2, 1, "", "__ge__"], [612, 2, 1, "", "__getstate__"], [613, 2, 1, "", "__gt__"], [614, 2, 1, "", "__hash__"], [615, 2, 1, "", "__le__"], [616, 2, 1, "", "__lt__"], [617, 2, 1, "", "__ne__"], [618, 2, 1, "", "__str__"], [619, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.CategoryResults": [[621, 2, 1, "", "__eq__"], [622, 2, 1, "", "__ge__"], [623, 2, 1, "", "__getstate__"], [624, 2, 1, "", "__gt__"], [625, 2, 1, "", "__hash__"], [626, 2, 1, "", "__le__"], [627, 2, 1, "", "__lt__"], [628, 2, 1, "", "__ne__"], [629, 2, 1, "", "__str__"], [630, 2, 1, "", "to_files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[632, 2, 1, "", "__eq__"], [633, 2, 1, "", "__ge__"], [634, 2, 1, "", "__getstate__"], [635, 2, 1, "", "__gt__"], [636, 2, 1, "", "__hash__"], [637, 2, 1, "", "__le__"], [638, 2, 1, "", "__lt__"], [639, 2, 1, "", "__ne__"], [640, 2, 1, "", "__str__"], [641, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVA": [[643, 2, 1, "", "__eq__"], [644, 2, 1, "", "__ge__"], [645, 2, 1, "", "__getstate__"], [646, 2, 1, "", "__gt__"], [647, 2, 1, "", "__hash__"], [648, 2, 1, "", "__le__"], [649, 2, 1, "", "__lt__"], [650, 2, 1, "", "__ne__"], [651, 2, 1, "", "__str__"], [652, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[654, 2, 1, "", "__eq__"], [655, 2, 1, "", "__ge__"], [656, 2, 1, "", "__getstate__"], [657, 2, 1, "", "__gt__"], [658, 2, 1, "", "__hash__"], [659, 2, 1, "", "__le__"], [660, 2, 1, "", "__lt__"], [661, 2, 1, "", "__ne__"], [662, 2, 1, "", "__str__"], [663, 2, 1, "", "to_files"]], "skbio.stats.gradient.GroupResults": [[665, 2, 1, "", "__eq__"], [666, 2, 1, "", "__ge__"], [667, 2, 1, "", "__getstate__"], [668, 2, 1, "", "__gt__"], [669, 2, 1, "", "__hash__"], [670, 2, 1, "", "__le__"], [671, 2, 1, "", "__lt__"], [672, 2, 1, "", "__ne__"], [673, 2, 1, "", "__str__"], [674, 2, 1, "", "to_files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[676, 2, 1, "", "__eq__"], [677, 2, 1, "", "__ge__"], [678, 2, 1, "", "__getstate__"], [679, 2, 1, "", "__gt__"], [680, 2, 1, "", "__hash__"], [681, 2, 1, "", "__le__"], [682, 2, 1, "", "__lt__"], [683, 2, 1, "", "__ne__"], [684, 2, 1, "", "__str__"], [685, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[687, 2, 1, "", "__eq__"], [688, 2, 1, "", "__ge__"], [689, 2, 1, "", "__getstate__"], [690, 2, 1, "", "__gt__"], [691, 2, 1, "", "__hash__"], [692, 2, 1, "", "__le__"], [693, 2, 1, "", "__lt__"], [694, 2, 1, "", "__ne__"], [695, 2, 1, "", "__str__"], [696, 2, 1, "", "get_trajectories"]], "skbio.stats.ordination": [[699, 1, 1, "", "OrdinationResults"], [712, 3, 1, "", "ca"], [713, 3, 1, "", "cca"], [714, 3, 1, "", "corr"], [715, 3, 1, "", "e_matrix"], [716, 3, 1, "", "f_matrix"], [717, 3, 1, "", "mean_and_std"], [718, 3, 1, "", "pcoa"], [719, 3, 1, "", "pcoa_biplot"], [720, 3, 1, "", "rda"], [721, 3, 1, "", "scale"], [722, 3, 1, "", "svd_rank"]], "skbio.stats.ordination.OrdinationResults": [[700, 2, 1, "", "__eq__"], [701, 2, 1, "", "__ge__"], [702, 2, 1, "", "__getstate__"], [703, 2, 1, "", "__gt__"], [704, 2, 1, "", "__hash__"], [705, 2, 1, "", "__le__"], [706, 2, 1, "", "__lt__"], [707, 2, 1, "", "__ne__"], [708, 2, 1, "", "__str__"], [709, 2, 1, "", "plot"], [710, 2, 1, "", "read"], [711, 2, 1, "", "write"]], "skbio.stats.power": [[724, 3, 1, "", "confidence_bound"], [725, 3, 1, "", "paired_subsamples"], [726, 3, 1, "", "subsample_paired_power"], [727, 3, 1, "", "subsample_power"]], "skbio.tree": [[729, 4, 1, "", "DuplicateNodeError"], [730, 4, 1, "", "MissingNodeError"], [731, 4, 1, "", "NoLengthError"], [732, 4, 1, "", "NoParentError"], [733, 4, 1, "", "TreeError"], [734, 1, 1, "", "TreeNode"], [813, 3, 1, "", "majority_rule"], [814, 3, 1, "", "nj"]], "skbio.tree.TreeNode": [[735, 2, 1, "", "__copy__"], [736, 2, 1, "", "__deepcopy__"], [737, 2, 1, "", "__eq__"], [738, 2, 1, "", "__ge__"], [739, 2, 1, "", "__getitem__"], [740, 2, 1, "", "__getstate__"], [741, 2, 1, "", "__gt__"], [742, 2, 1, "", "__hash__"], [743, 2, 1, "", "__iter__"], [744, 2, 1, "", "__le__"], [745, 2, 1, "", "__len__"], [746, 2, 1, "", "__lt__"], [747, 2, 1, "", "__ne__"], [748, 2, 1, "", "__str__"], [749, 2, 1, "", "accumulate_to_ancestor"], [750, 2, 1, "", "ancestors"], [751, 2, 1, "", "append"], [752, 2, 1, "", "ascii_art"], [753, 2, 1, "", "assign_ids"], [754, 2, 1, "", "assign_supports"], [755, 2, 1, "", "bifurcate"], [756, 2, 1, "", "cache_attr"], [757, 2, 1, "", "compare_rfd"], [758, 2, 1, "", "compare_subsets"], [759, 2, 1, "", "compare_tip_distances"], [760, 2, 1, "", "copy"], [761, 2, 1, "", "count"], [762, 2, 1, "", "create_caches"], [763, 2, 1, "", "deepcopy"], [764, 2, 1, "", "descending_branch_length"], [765, 2, 1, "", "distance"], [766, 2, 1, "", "extend"], [767, 2, 1, "", "find"], [768, 2, 1, "", "find_all"], [769, 2, 1, "", "find_by_func"], [770, 2, 1, "", "find_by_id"], [771, 2, 1, "", "from_linkage_matrix"], [772, 2, 1, "", "from_taxdump"], [773, 2, 1, "", "from_taxonomy"], [774, 2, 1, "", "get_max_distance"], [775, 2, 1, "", "has_children"], [776, 2, 1, "", "index_tree"], [777, 2, 1, "", "invalidate_caches"], [778, 2, 1, "", "is_root"], [779, 2, 1, "", "is_tip"], [780, 2, 1, "", "lca"], [781, 2, 1, "", "levelorder"], [782, 2, 1, "", "lowest_common_ancestor"], [783, 2, 1, "", "neighbors"], [784, 2, 1, "", "non_tips"], [785, 2, 1, "", "observed_node_counts"], [786, 2, 1, "", "pop"], [787, 2, 1, "", "postorder"], [788, 2, 1, "", "pre_and_postorder"], [789, 2, 1, "", "preorder"], [790, 2, 1, "", "prune"], [791, 2, 1, "", "read"], [792, 2, 1, "", "remove"], [793, 2, 1, "", "remove_deleted"], [794, 2, 1, "", "root"], [795, 2, 1, "", "root_at"], [796, 2, 1, "", "root_at_midpoint"], [797, 2, 1, "", "shear"], [798, 2, 1, "", "shuffle"], [799, 2, 1, "", "siblings"], [800, 2, 1, "", "subset"], [801, 2, 1, "", "subsets"], [802, 2, 1, "", "subtree"], [803, 2, 1, "", "tip_tip_distances"], [804, 2, 1, "", "tips"], [805, 2, 1, "", "to_array"], [806, 2, 1, "", "to_taxonomy"], [807, 2, 1, "", "traverse"], [808, 2, 1, "", "unpack"], [809, 2, 1, "", "unpack_by_func"], [810, 2, 1, "", "unrooted_copy"], [811, 2, 1, "", "unrooted_deepcopy"], [812, 2, 1, "", "write"]], "skbio.util": [[815, 4, 1, "", "EfficiencyWarning"], [816, 4, 1, "", "RepresentationWarning"], [817, 3, 1, "", "assert_data_frame_almost_equal"], [818, 3, 1, "", "assert_ordination_results_equal"], [819, 3, 1, "", "cardinal_to_ordinal"], [820, 1, 1, "", "classproperty"], [837, 3, 1, "", "find_duplicates"], [838, 3, 1, "", "get_data_path"], [839, 3, 1, "", "safe_md5"]], "skbio.util.classproperty": [[821, 2, 1, "", "__delete__"], [822, 2, 1, "", "__eq__"], [823, 2, 1, "", "__ge__"], [824, 2, 1, "", "__get__"], [825, 2, 1, "", "__getstate__"], [826, 2, 1, "", "__gt__"], [827, 2, 1, "", "__hash__"], [828, 2, 1, "", "__le__"], [829, 2, 1, "", "__lt__"], [830, 2, 1, "", "__ne__"], [831, 2, 1, "", "__set__"], [832, 2, 1, "", "__set_name__"], [833, 2, 1, "", "__str__"], [834, 2, 1, "", "deleter"], [835, 2, 1, "", "getter"], [836, 2, 1, "", "setter"]], "skbio.workflow": [[840, 1, 1, "", "Workflow"], [852, 1, 1, "", "method"], [863, 1, 1, "", "requires"]], "skbio.workflow.Workflow": [[841, 2, 1, "", "__call__"], [842, 2, 1, "", "__eq__"], [843, 2, 1, "", "__ge__"], [844, 2, 1, "", "__getstate__"], [845, 2, 1, "", "__gt__"], [846, 2, 1, "", "__hash__"], [847, 2, 1, "", "__le__"], [848, 2, 1, "", "__lt__"], [849, 2, 1, "", "__ne__"], [850, 2, 1, "", "__str__"], [851, 2, 1, "", "initialize_state"]], "skbio.workflow.method": [[853, 2, 1, "", "__call__"], [854, 2, 1, "", "__eq__"], [855, 2, 1, "", "__ge__"], [856, 2, 1, "", "__getstate__"], [857, 2, 1, "", "__gt__"], [858, 2, 1, "", "__hash__"], [859, 2, 1, "", "__le__"], [860, 2, 1, "", "__lt__"], [861, 2, 1, "", "__ne__"], [862, 2, 1, "", "__str__"]], "skbio.workflow.requires": [[864, 2, 1, "", "__call__"], [865, 2, 1, "", "__eq__"], [866, 2, 1, "", "__ge__"], [867, 2, 1, "", "__getstate__"], [868, 2, 1, "", "__gt__"], [869, 2, 1, "", "__hash__"], [870, 2, 1, "", "__le__"], [871, 2, 1, "", "__lt__"], [872, 2, 1, "", "__ne__"], [873, 2, 1, "", "__str__"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"]}, "titleterms": {"align": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 134, 143, 146], "skbio": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881], "data": [0, 136, 546], "structur": [0, 546], "optim": 0, "i": [0, 148, 189, 875], "e": 0, "product": [0, 135], "readi": 0, "algorithm": 0, "slow": 0, "educ": 0, "purpos": 0, "onli": [0, 144], "gener": [0, 135, 136, 144], "function": [0, 1, 68, 104, 148, 189, 522, 525, 546, 606, 698, 723, 875, 878, 879, 880], "exampl": [0, 1, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 546, 608, 698, 723, 877, 879, 881], "divers": [1, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], "calcul": 1, "driver": 1, "input": 1, "valid": [1, 145], "count": [1, 241, 311, 362, 416, 474, 761], "vector": 1, "specifi": 1, "metric": [1, 522], "subpackag": [1, 875, 877, 878], "alignmentstructur": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "__eq__": [3, 18, 33, 151, 164, 194, 206, 227, 282, 298, 349, 402, 461, 496, 549, 573, 610, 621, 632, 643, 654, 665, 676, 687, 700, 737, 822, 842, 854, 865], "__ge__": [4, 19, 34, 152, 165, 195, 207, 228, 283, 299, 350, 403, 462, 497, 550, 574, 611, 622, 633, 644, 655, 666, 677, 688, 701, 738, 823, 843, 855, 866], "__getitem__": [5, 35, 229, 300, 351, 404, 463, 498, 551, 575, 739], "__getstate__": [6, 20, 36, 153, 166, 196, 208, 230, 284, 301, 352, 405, 464, 499, 552, 576, 612, 623, 634, 645, 656, 667, 678, 689, 702, 740, 825, 844, 856, 867], "__gt__": [7, 21, 37, 154, 167, 197, 209, 231, 285, 302, 353, 406, 465, 500, 553, 577, 613, 624, 635, 646, 657, 668, 679, 690, 703, 741, 826, 845, 857, 868], "__hash__": [8, 22, 155, 168, 614, 625, 636, 647, 658, 669, 680, 691, 704, 742, 827, 846, 858, 869], "__le__": [9, 23, 39, 156, 169, 198, 210, 233, 286, 304, 355, 408, 467, 501, 554, 578, 615, 626, 637, 648, 659, 670, 681, 692, 705, 744, 828, 847, 859, 870], "__lt__": [10, 24, 41, 157, 170, 199, 211, 235, 287, 306, 357, 410, 469, 502, 555, 579, 616, 627, 638, 649, 660, 671, 682, 693, 706, 746, 829, 848, 860, 871], "__ne__": [11, 25, 42, 158, 171, 200, 212, 236, 288, 307, 358, 411, 470, 503, 556, 580, 617, 628, 639, 650, 661, 672, 683, 694, 707, 747, 830, 849, 861, 872], "__setstate__": [12, 26], "__str__": [13, 27, 44, 159, 172, 201, 213, 238, 289, 309, 360, 413, 472, 504, 557, 581, 618, 629, 640, 651, 662, 673, 684, 695, 708, 748, 833, 850, 862, 873], "is_zero_bas": 14, "set_zero_bas": 15, "stripedsmithwaterman": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "__call__": [17, 841, 853, 864], "tabularmsa": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 136], "__bool__": [29, 223, 294, 345, 398, 457], "__contains__": [30, 224, 295, 346, 399, 458, 495, 548, 572], "__copy__": [31, 204, 225, 296, 347, 400, 459, 735], "__deepcopy__": [32, 205, 226, 297, 348, 401, 460, 736], "__iter__": [38, 232, 303, 354, 407, 466, 743], "__len__": [40, 234, 305, 356, 409, 468, 745], "__reversed__": [43, 237, 308, 359, 412, 471], "append": [45, 751], "consensu": 46, "conserv": 47, "extend": [48, 766], "from_dict": [49, 509], "gap_frequ": 50, "has_metadata": [51, 257, 325, 376, 432, 479], "has_positional_metadata": [52, 259, 327, 378, 434, 480], "iter_posit": 53, "join": 54, "read": [55, 135, 136, 138, 181, 186, 219, 271, 338, 390, 446, 490, 515, 564, 590, 710, 791, 875], "reassign_index": 56, "sort": [57, 220], "to_dict": [58, 518], "write": [59, 136, 138, 183, 188, 221, 280, 343, 396, 455, 493, 521, 569, 596, 711, 812, 875], "global_pairwise_align": 60, "global_pairwise_align_nucleotid": 61, "global_pairwise_align_protein": 62, "local_pairwise_align": 63, "local_pairwise_align_nucleotid": 64, "local_pairwise_align_protein": 65, "local_pairwise_align_ssw": 66, "make_identity_substitution_matrix": 67, "alpha": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "measur": [68, 104], "ac": 69, "berger_parker_d": 70, "brillouin_d": 71, "chao1": 72, "chao1_ci": 73, "domin": 74, "doubl": 75, "enspi": 76, "esty_ci": 77, "faith_pd": 78, "fisher_alpha": 79, "gini_index": 80, "goods_coverag": 81, "heip_": 82, "kempton_taylor_q": 83, "lladser_ci": 84, "lladser_p": 85, "margalef": 86, "mcintosh_d": 87, "mcintosh_": 88, "menhinick": 89, "michaelis_menten_fit": 90, "observed_featur": 91, "observed_otu": 92, "osd": 93, "phydiv": 94, "pielou_": 95, "robbin": 96, "shannon": 97, "simpson": 98, "simpson_": 99, "singl": 100, "sob": 101, "strong": 102, "alpha_divers": 103, "beta": [104, 105, 106], "unweighted_unifrac": 105, "weighted_unifrac": 106, "beta_divers": 107, "block_beta_divers": 108, "get_alpha_diversity_metr": 109, "get_beta_diversity_metr": 110, "partial_beta_divers": 111, "io": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 875], "argumentoverridewarn": 112, "blast7formaterror": 113, "clustalformaterror": 114, "emblformaterror": 115, "fastaformaterror": 116, "fastqformaterror": 117, "fileformaterror": 118, "formatidentificationwarn": 119, "gff3formaterror": 120, "genbankformaterror": 121, "iosourceerror": 122, "lsmatformaterror": 123, "newickformaterror": 124, "ordinationformaterror": 125, "phylipformaterror": 126, "qseqformaterror": 127, "qualformaterror": 128, "stockholmformaterror": 129, "unrecognizedformaterror": 130, "simpl": 131, "binari": 131, "dissimilar": 131, "matrix": [131, 140, 546], "format": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 875], "binary_dm": 131, "support": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 875], "specif": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "refer": [131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 147, 525, 546, 698, 874], "blast": [132, 133], "6": [132, 874], "blast6": 132, "column": [132, 133, 145], "type": [132, 133, 145], "paramet": [132, 134, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147], "7": 133, "blast7": 133, "clustal": 134, "section": [134, 135, 138, 143], "embl": 135, "featur": [135, 138], "level": 135, "befor": [135, 138], "fh": 135, "header": [135, 136, 143, 146], "ft": 135, "sq": 135, "file": [135, 136, 138, 875], "us": [135, 875], "fasta": 136, "qual": 136, "sequenc": [136, 143, 146, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 877], "reader": [136, 138, 139, 160], "writer": [136, 139, 162], "fastq": 137, "qualiti": 137, "score": 137, "variant": 137, "genbank": 138, "locat": 138, "string": 138, "origin": 138, "gff3": 139, "label": [140, 141], "squar": 140, "lsmat": 140, "newick": 141, "formal": 141, "grammar": 141, "explan": 141, "basic": 141, "symbol": 141, "applic": 141, "rule": 141, "ad": 141, "node": [141, 147], "inform": 141, "advanc": 141, "length": 141, "inlin": 141, "comment": [141, 145], "whitespac": [141, 145], "caveat": 141, "ordin": [142, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722], "result": 142, "phylip": 143, "multipl": [143, 146], "qseq": 144, "metadata": [145, 146, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 876], "requir": [145, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873], "lead": 145, "trail": 145, "charact": 145, "empti": 145, "row": 145, "identifi": 145, "recommend": 145, "number": 145, "stockholm": 146, "gf": 146, "g": 146, "gr": 146, "gc": 146, "footer": 146, "taxdump": 147, "dmp": 147, "name": 147, "divis": 147, "gencod": 147, "o": [148, 189, 875], "registri": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], "class": [148, 546, 608, 698, 876, 877, 879, 881], "except": [148, 546, 875, 879], "creat": 148, "new": 148, "scikit": [148, 874, 875], "bio": [148, 874, 875], "reserv": 148, "keyword": 148, "argument": 148, "duplicateregistrationerror": 149, "sniffer": 161, "ioregistri": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183], "add_format": 173, "create_format": [174, 185], "get_read": 175, "get_sniff": 176, "get_writ": 177, "list_read_format": 178, "list_write_format": 179, "monkey_patch": 180, "sniff": [182, 187], "invalidregistrationerror": 184, "util": [189, 190, 191, 192, 698, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 879, 880], "open": 190, "open_fil": [191, 192], "interv": [193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "drop": [202, 216], "intervalmetadata": [203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "add": 214, "concat": [215, 240, 310, 361, 415, 473], "merg": 217, "queri": 218, "dna": [222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280], "complement": [239, 414], "definit": [242, 312, 363, 417], "degap": [243, 313, 364, 418], "degener": [244, 314, 365, 419], "distanc": [245, 315, 366, 420, 475, 522, 523, 524, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 765], "expand_degener": [246, 316, 367, 421], "find_motif": [247, 317, 368, 422], "find_with_regex": [248, 318, 369, 423, 476], "frequenc": [249, 319, 370, 424, 477], "gap": [250, 320, 371, 425], "gc_content": [251, 426], "gc_frequenc": [252, 427], "has_definit": [253, 321, 372, 428], "has_degener": [254, 322, 373, 429], "has_gap": [255, 323, 374, 430], "has_interval_metadata": [256, 324, 375, 431, 478], "has_nondegener": [258, 326, 377, 433], "index": [260, 328, 380, 435, 481, 513, 562, 587], "is_reverse_compl": [261, 436], "iter_contigu": [262, 329, 381, 437, 482], "iter_km": [263, 330, 382, 438, 483], "kmer_frequ": [264, 331, 383, 439, 484], "lowercas": [265, 332, 384, 440, 485], "match_frequ": [266, 333, 385, 441, 486], "match": [267, 334, 386, 442, 487], "mismatch_frequ": [268, 335, 387, 443, 488], "mismatch": [269, 336, 388, 444, 489], "nondegener": [270, 337, 389, 445], "replac": [272, 339, 391, 447, 491], "reverse_compl": [273, 448], "to_definit": [274, 340, 393, 450], "to_indic": [275, 341, 394, 451, 492], "to_regex": [276, 342, 395, 452], "transcrib": 277, "translat": [278, 291, 453], "translate_six_fram": [279, 292, 454], "geneticcod": [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292], "from_ncbi": 290, "grammaredsequ": [293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "protein": [344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396], "has_stop": 379, "stop": 392, "rna": [397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455], "reverse_transcrib": 449, "substitutionmatrix": [494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521], "between": [505, 558, 582], "by_nam": 506, "copi": [507, 559, 584, 760], "filter": [508, 560, 585], "from_iter": [510, 561, 586], "get_nam": 511, "ident": 512, "plot": [514, 563, 589, 709], "redundant_form": [516, 565, 591], "to_data_fram": [517, 566, 592], "transpos": [519, 567, 594], "within": [520, 568, 595], "ham": 523, "kmer_dist": 524, "composit": [525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545], "statist": [525, 546, 606, 878], "stat": [525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 878], "alr": 526, "alr_inv": 527, "ancom": 528, "central": 529, "closur": 530, "clr": 531, "clr_inv": 532, "dirmult_ttest": 533, "ilr": 534, "ilr_inv": 535, "inner": 536, "multi_replac": 537, "multiplicative_replac": 538, "pairwise_vlr": 539, "perturb": 540, "perturb_inv": 541, "power": [542, 723, 724, 725, 726, 727], "sbp_basi": 543, "tree_basi": 544, "vlr": 545, "matric": 546, "base": 546, "dissimilaritymatrix": [546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569], "distancematrix": [546, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596], "categor": 546, "variabl": 546, "continu": 546, "comparison": 546, "dissimilaritymatrixerror": 570, "condensed_form": 583, "permut": 588, "to_seri": 593, "distancematrixerror": 597, "missingiderror": 598, "anosim": 599, "bioenv": 600, "mantel": 601, "permanova": 602, "permdisp": 603, "pwmantel": 604, "randdm": 605, "evolutionari": 606, "evolv": [606, 607], "cophylogenet": 606, "method": [606, 698, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862], "hommola_cospeci": 607, "gradient": [608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696], "analys": 608, "averagegradientanova": [609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619], "get_trajectori": [619, 641, 652, 685, 696], "categoryresult": [620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630], "to_fil": [630, 663, 674], "firstdifferencegradientanova": [631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641], "gradientanova": [642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652], "gradientanovaresult": [653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663], "groupresult": [664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674], "trajectorygradientanova": [675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685], "windowdifferencegradientanova": [686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696], "isubsampl": 697, "ordinationresult": [699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711], "ca": 712, "cca": 713, "corr": 714, "e_matrix": 715, "f_matrix": 716, "mean_and_std": 717, "pcoa": 718, "pcoa_biplot": 719, "rda": 720, "scale": 721, "svd_rank": 722, "empir": 723, "estim": 723, "confidence_bound": 724, "paired_subsampl": 725, "subsample_paired_pow": 726, "subsample_pow": 727, "subsample_count": 728, "tree": [729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 879], "duplicatenodeerror": 729, "missingnodeerror": 730, "nolengtherror": 731, "noparenterror": 732, "treeerror": 733, "treenod": [734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "accumulate_to_ancestor": 749, "ancestor": 750, "ascii_art": 752, "assign_id": 753, "assign_support": 754, "bifurc": 755, "cache_attr": 756, "compare_rfd": 757, "compare_subset": 758, "compare_tip_dist": 759, "create_cach": 762, "deepcopi": 763, "descending_branch_length": 764, "find": 767, "find_al": 768, "find_by_func": 769, "find_by_id": 770, "from_linkage_matrix": 771, "from_taxdump": 772, "from_taxonomi": 773, "get_max_dist": 774, "has_children": 775, "index_tre": 776, "invalidate_cach": 777, "is_root": 778, "is_tip": 779, "lca": 780, "levelord": 781, "lowest_common_ancestor": 782, "neighbor": 783, "non_tip": 784, "observed_node_count": 785, "pop": 786, "postord": 787, "pre_and_postord": 788, "preorder": 789, "prune": 790, "remov": 792, "remove_delet": 793, "root": 794, "root_at": 795, "root_at_midpoint": 796, "shear": 797, "shuffl": 798, "sibl": 799, "subset": [800, 801], "subtre": 802, "tip_tip_dist": 803, "tip": 804, "to_arrai": 805, "to_taxonomi": 806, "travers": 807, "unpack": 808, "unpack_by_func": 809, "unrooted_copi": 810, "unrooted_deepcopi": 811, "majority_rul": 813, "nj": 814, "efficiencywarn": 815, "representationwarn": 816, "assert_data_frame_almost_equ": 817, "assert_ordination_results_equ": 818, "cardinal_to_ordin": 819, "classproperti": [820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836], "__delete__": 821, "__get__": 824, "__set__": 831, "__set_name__": 832, "delet": 834, "getter": 835, "setter": 836, "find_dupl": 837, "get_data_path": 838, "safe_md5": 839, "workflow": [840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 881], "initialize_st": 851, "0": 874, "dev": 874, "api": 874, "user": 875, "warn": [875, 880], "introduct": 875, "what": 875, "kind": 875, "can": 875, "from": 875, "represent": 879, "phylogenet": 879, "reconstruct": 879, "test": 880, "miscellan": 880, "construct": 881, "decor": 881}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Alignments (skbio.alignment)": [[0, "alignments-skbio-alignment"]], "Data Structures": [[0, "data-structures"]], "Optimized (i.e., production-ready) Alignment Algorithms": [[0, "optimized-i-e-production-ready-alignment-algorithms"]], "Slow (i.e., educational-purposes only) Alignment Algorithms": [[0, "slow-i-e-educational-purposes-only-alignment-algorithms"]], "General functionality": [[0, "general-functionality"]], "Data Structure Examples": [[0, "data-structure-examples"]], "Alignment Algorithm Examples": [[0, "alignment-algorithm-examples"]], "Optimized Alignment Algorithm Examples": [[0, "optimized-alignment-algorithm-examples"]], "Slow Alignment Algorithm Examples": [[0, "slow-alignment-algorithm-examples"]], "Diversity calculations (skbio.diversity)": [[1, "diversity-calculations-skbio-diversity"]], "Driver functions": [[1, "driver-functions"]], "Input validation": [[1, "input-validation"]], "Count vectors": [[1, "count-vectors"]], "Specifying a diversity metric": [[1, "specifying-a-diversity-metric"]], "Subpackages": [[1, "subpackages"], [875, "subpackages"], [877, "subpackages"], [878, "subpackages"]], "Functions": [[1, "functions"], [68, "functions"], [104, "functions"], [148, "functions"], [189, "functions"], [522, "functions"], [525, "functions"], [546, "functions"], [606, "functions"], [723, "functions"], [878, "functions"]], "Examples": [[1, "examples"], [132, "examples"], [133, "examples"], [134, "examples"], [135, "examples"], [136, "examples"], [137, "examples"], [138, "examples"], [139, "examples"], [141, "examples"], [142, "examples"], [143, "examples"], [144, "examples"], [146, "examples"], [147, "examples"], [546, "examples"], [608, "examples"], [698, "examples"], [723, "examples"], [877, "examples"], [879, "examples"], [881, "examples"]], "skbio.alignment.AlignmentStructure": [[2, "skbio-alignment-alignmentstructure"]], "skbio.alignment.AlignmentStructure.__eq__": [[3, "skbio-alignment-alignmentstructure-eq"]], "skbio.alignment.AlignmentStructure.__ge__": [[4, "skbio-alignment-alignmentstructure-ge"]], "skbio.alignment.AlignmentStructure.__getitem__": [[5, "skbio-alignment-alignmentstructure-getitem"]], "skbio.alignment.AlignmentStructure.__getstate__": [[6, "skbio-alignment-alignmentstructure-getstate"]], "skbio.alignment.AlignmentStructure.__gt__": [[7, "skbio-alignment-alignmentstructure-gt"]], "skbio.alignment.AlignmentStructure.__hash__": [[8, "skbio-alignment-alignmentstructure-hash"]], "skbio.alignment.AlignmentStructure.__le__": [[9, "skbio-alignment-alignmentstructure-le"]], "skbio.alignment.AlignmentStructure.__lt__": [[10, "skbio-alignment-alignmentstructure-lt"]], "skbio.alignment.AlignmentStructure.__ne__": [[11, "skbio-alignment-alignmentstructure-ne"]], "skbio.alignment.AlignmentStructure.__setstate__": [[12, "skbio-alignment-alignmentstructure-setstate"]], "skbio.alignment.AlignmentStructure.__str__": [[13, "skbio-alignment-alignmentstructure-str"]], "skbio.alignment.AlignmentStructure.is_zero_based": [[14, "skbio-alignment-alignmentstructure-is-zero-based"]], "skbio.alignment.AlignmentStructure.set_zero_based": [[15, "skbio-alignment-alignmentstructure-set-zero-based"]], "skbio.alignment.StripedSmithWaterman": [[16, "skbio-alignment-stripedsmithwaterman"]], "skbio.alignment.StripedSmithWaterman.__call__": [[17, "skbio-alignment-stripedsmithwaterman-call"]], "skbio.alignment.StripedSmithWaterman.__eq__": [[18, "skbio-alignment-stripedsmithwaterman-eq"]], "skbio.alignment.StripedSmithWaterman.__ge__": [[19, "skbio-alignment-stripedsmithwaterman-ge"]], "skbio.alignment.StripedSmithWaterman.__getstate__": [[20, "skbio-alignment-stripedsmithwaterman-getstate"]], "skbio.alignment.StripedSmithWaterman.__gt__": [[21, "skbio-alignment-stripedsmithwaterman-gt"]], "skbio.alignment.StripedSmithWaterman.__hash__": [[22, "skbio-alignment-stripedsmithwaterman-hash"]], "skbio.alignment.StripedSmithWaterman.__le__": [[23, "skbio-alignment-stripedsmithwaterman-le"]], "skbio.alignment.StripedSmithWaterman.__lt__": [[24, "skbio-alignment-stripedsmithwaterman-lt"]], "skbio.alignment.StripedSmithWaterman.__ne__": [[25, "skbio-alignment-stripedsmithwaterman-ne"]], "skbio.alignment.StripedSmithWaterman.__setstate__": [[26, "skbio-alignment-stripedsmithwaterman-setstate"]], "skbio.alignment.StripedSmithWaterman.__str__": [[27, "skbio-alignment-stripedsmithwaterman-str"]], "skbio.alignment.TabularMSA": [[28, "skbio-alignment-tabularmsa"]], "skbio.alignment.TabularMSA.__bool__": [[29, "skbio-alignment-tabularmsa-bool"]], "skbio.alignment.TabularMSA.__contains__": [[30, "skbio-alignment-tabularmsa-contains"]], "skbio.alignment.TabularMSA.__copy__": [[31, "skbio-alignment-tabularmsa-copy"]], "skbio.alignment.TabularMSA.__deepcopy__": [[32, "skbio-alignment-tabularmsa-deepcopy"]], "skbio.alignment.TabularMSA.__eq__": [[33, "skbio-alignment-tabularmsa-eq"]], "skbio.alignment.TabularMSA.__ge__": [[34, "skbio-alignment-tabularmsa-ge"]], "skbio.alignment.TabularMSA.__getitem__": [[35, "skbio-alignment-tabularmsa-getitem"]], "skbio.alignment.TabularMSA.__getstate__": [[36, "skbio-alignment-tabularmsa-getstate"]], "skbio.alignment.TabularMSA.__gt__": [[37, "skbio-alignment-tabularmsa-gt"]], "skbio.alignment.TabularMSA.__iter__": [[38, "skbio-alignment-tabularmsa-iter"]], "skbio.alignment.TabularMSA.__le__": [[39, "skbio-alignment-tabularmsa-le"]], "skbio.alignment.TabularMSA.__len__": [[40, "skbio-alignment-tabularmsa-len"]], "skbio.alignment.TabularMSA.__lt__": [[41, "skbio-alignment-tabularmsa-lt"]], "skbio.alignment.TabularMSA.__ne__": [[42, "skbio-alignment-tabularmsa-ne"]], "skbio.alignment.TabularMSA.__reversed__": [[43, "skbio-alignment-tabularmsa-reversed"]], "skbio.alignment.TabularMSA.__str__": [[44, "skbio-alignment-tabularmsa-str"]], "skbio.alignment.TabularMSA.append": [[45, "skbio-alignment-tabularmsa-append"]], "skbio.alignment.TabularMSA.consensus": [[46, "skbio-alignment-tabularmsa-consensus"]], "skbio.alignment.TabularMSA.conservation": [[47, "skbio-alignment-tabularmsa-conservation"]], "skbio.alignment.TabularMSA.extend": [[48, "skbio-alignment-tabularmsa-extend"]], "skbio.alignment.TabularMSA.from_dict": [[49, "skbio-alignment-tabularmsa-from-dict"]], "skbio.alignment.TabularMSA.gap_frequencies": [[50, "skbio-alignment-tabularmsa-gap-frequencies"]], "skbio.alignment.TabularMSA.has_metadata": [[51, "skbio-alignment-tabularmsa-has-metadata"]], "skbio.alignment.TabularMSA.has_positional_metadata": [[52, "skbio-alignment-tabularmsa-has-positional-metadata"]], "skbio.alignment.TabularMSA.iter_positions": [[53, "skbio-alignment-tabularmsa-iter-positions"]], "skbio.alignment.TabularMSA.join": [[54, "skbio-alignment-tabularmsa-join"]], "skbio.alignment.TabularMSA.read": [[55, "skbio-alignment-tabularmsa-read"]], "skbio.alignment.TabularMSA.reassign_index": [[56, "skbio-alignment-tabularmsa-reassign-index"]], "skbio.alignment.TabularMSA.sort": [[57, "skbio-alignment-tabularmsa-sort"]], "skbio.alignment.TabularMSA.to_dict": [[58, "skbio-alignment-tabularmsa-to-dict"]], "skbio.alignment.TabularMSA.write": [[59, "skbio-alignment-tabularmsa-write"]], "skbio.alignment.global_pairwise_align": [[60, "skbio-alignment-global-pairwise-align"]], "skbio.alignment.global_pairwise_align_nucleotide": [[61, "skbio-alignment-global-pairwise-align-nucleotide"]], "skbio.alignment.global_pairwise_align_protein": [[62, "skbio-alignment-global-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align": [[63, "skbio-alignment-local-pairwise-align"]], "skbio.alignment.local_pairwise_align_nucleotide": [[64, "skbio-alignment-local-pairwise-align-nucleotide"]], "skbio.alignment.local_pairwise_align_protein": [[65, "skbio-alignment-local-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align_ssw": [[66, "skbio-alignment-local-pairwise-align-ssw"]], "skbio.alignment.make_identity_substitution_matrix": [[67, "skbio-alignment-make-identity-substitution-matrix"]], "Alpha diversity measures (skbio.diversity.alpha)": [[68, "alpha-diversity-measures-skbio-diversity-alpha"]], "skbio.diversity.alpha.ace": [[69, "skbio-diversity-alpha-ace"]], "skbio.diversity.alpha.berger_parker_d": [[70, "skbio-diversity-alpha-berger-parker-d"]], "skbio.diversity.alpha.brillouin_d": [[71, "skbio-diversity-alpha-brillouin-d"]], "skbio.diversity.alpha.chao1": [[72, "skbio-diversity-alpha-chao1"]], "skbio.diversity.alpha.chao1_ci": [[73, "skbio-diversity-alpha-chao1-ci"]], "skbio.diversity.alpha.dominance": [[74, "skbio-diversity-alpha-dominance"]], "skbio.diversity.alpha.doubles": [[75, "skbio-diversity-alpha-doubles"]], "skbio.diversity.alpha.enspie": [[76, "skbio-diversity-alpha-enspie"]], "skbio.diversity.alpha.esty_ci": [[77, "skbio-diversity-alpha-esty-ci"]], "skbio.diversity.alpha.faith_pd": [[78, "skbio-diversity-alpha-faith-pd"]], "skbio.diversity.alpha.fisher_alpha": [[79, "skbio-diversity-alpha-fisher-alpha"]], "skbio.diversity.alpha.gini_index": [[80, "skbio-diversity-alpha-gini-index"]], "skbio.diversity.alpha.goods_coverage": [[81, "skbio-diversity-alpha-goods-coverage"]], "skbio.diversity.alpha.heip_e": [[82, "skbio-diversity-alpha-heip-e"]], "skbio.diversity.alpha.kempton_taylor_q": [[83, "skbio-diversity-alpha-kempton-taylor-q"]], "skbio.diversity.alpha.lladser_ci": [[84, "skbio-diversity-alpha-lladser-ci"]], "skbio.diversity.alpha.lladser_pe": [[85, "skbio-diversity-alpha-lladser-pe"]], "skbio.diversity.alpha.margalef": [[86, "skbio-diversity-alpha-margalef"]], "skbio.diversity.alpha.mcintosh_d": [[87, "skbio-diversity-alpha-mcintosh-d"]], "skbio.diversity.alpha.mcintosh_e": [[88, "skbio-diversity-alpha-mcintosh-e"]], "skbio.diversity.alpha.menhinick": [[89, "skbio-diversity-alpha-menhinick"]], "skbio.diversity.alpha.michaelis_menten_fit": [[90, "skbio-diversity-alpha-michaelis-menten-fit"]], "skbio.diversity.alpha.observed_features": [[91, "skbio-diversity-alpha-observed-features"]], "skbio.diversity.alpha.observed_otus": [[92, "skbio-diversity-alpha-observed-otus"]], "skbio.diversity.alpha.osd": [[93, "skbio-diversity-alpha-osd"]], "skbio.diversity.alpha.phydiv": [[94, "skbio-diversity-alpha-phydiv"]], "skbio.diversity.alpha.pielou_e": [[95, "skbio-diversity-alpha-pielou-e"]], "skbio.diversity.alpha.robbins": [[96, "skbio-diversity-alpha-robbins"]], "skbio.diversity.alpha.shannon": [[97, "skbio-diversity-alpha-shannon"]], "skbio.diversity.alpha.simpson": [[98, "skbio-diversity-alpha-simpson"]], "skbio.diversity.alpha.simpson_e": [[99, "skbio-diversity-alpha-simpson-e"]], "skbio.diversity.alpha.singles": [[100, "skbio-diversity-alpha-singles"]], "skbio.diversity.alpha.sobs": [[101, "skbio-diversity-alpha-sobs"]], "skbio.diversity.alpha.strong": [[102, "skbio-diversity-alpha-strong"]], "skbio.diversity.alpha_diversity": [[103, "skbio-diversity-alpha-diversity"]], "Beta diversity measures (skbio.diversity.beta)": [[104, "beta-diversity-measures-skbio-diversity-beta"]], "skbio.diversity.beta.unweighted_unifrac": [[105, "skbio-diversity-beta-unweighted-unifrac"]], "skbio.diversity.beta.weighted_unifrac": [[106, "skbio-diversity-beta-weighted-unifrac"]], "skbio.diversity.beta_diversity": [[107, "skbio-diversity-beta-diversity"]], "skbio.diversity.block_beta_diversity": [[108, "skbio-diversity-block-beta-diversity"]], "skbio.diversity.get_alpha_diversity_metrics": [[109, "skbio-diversity-get-alpha-diversity-metrics"]], "skbio.diversity.get_beta_diversity_metrics": [[110, "skbio-diversity-get-beta-diversity-metrics"]], "skbio.diversity.partial_beta_diversity": [[111, "skbio-diversity-partial-beta-diversity"]], "skbio.io.ArgumentOverrideWarning": [[112, "skbio-io-argumentoverridewarning"]], "skbio.io.BLAST7FormatError": [[113, "skbio-io-blast7formaterror"]], "skbio.io.ClustalFormatError": [[114, "skbio-io-clustalformaterror"]], "skbio.io.EMBLFormatError": [[115, "skbio-io-emblformaterror"]], "skbio.io.FASTAFormatError": [[116, "skbio-io-fastaformaterror"]], "skbio.io.FASTQFormatError": [[117, "skbio-io-fastqformaterror"]], "skbio.io.FileFormatError": [[118, "skbio-io-fileformaterror"]], "skbio.io.FormatIdentificationWarning": [[119, "skbio-io-formatidentificationwarning"]], "skbio.io.GFF3FormatError": [[120, "skbio-io-gff3formaterror"]], "skbio.io.GenBankFormatError": [[121, "skbio-io-genbankformaterror"]], "skbio.io.IOSourceError": [[122, "skbio-io-iosourceerror"]], "skbio.io.LSMatFormatError": [[123, "skbio-io-lsmatformaterror"]], "skbio.io.NewickFormatError": [[124, "skbio-io-newickformaterror"]], "skbio.io.OrdinationFormatError": [[125, "skbio-io-ordinationformaterror"]], "skbio.io.PhylipFormatError": [[126, "skbio-io-phylipformaterror"]], "skbio.io.QSeqFormatError": [[127, "skbio-io-qseqformaterror"]], "skbio.io.QUALFormatError": [[128, "skbio-io-qualformaterror"]], "skbio.io.StockholmFormatError": [[129, "skbio-io-stockholmformaterror"]], "skbio.io.UnrecognizedFormatError": [[130, "skbio-io-unrecognizedformaterror"]], "Simple binary dissimilarity matrix format (skbio.io.format.binary_dm)": [[131, "simple-binary-dissimilarity-matrix-format-skbio-io-format-binary-dm"]], "Format Support": [[131, "format-support"], [132, "format-support"], [133, "format-support"], [134, "format-support"], [135, "format-support"], [136, "format-support"], [137, "format-support"], [138, "format-support"], [139, "format-support"], [140, "format-support"], [141, "format-support"], [142, "format-support"], [143, "format-support"], [144, "format-support"], [145, "format-support"], [146, "format-support"], [147, "format-support"]], "Format Specification": [[131, "format-specification"], [132, "format-specification"], [133, "format-specification"], [134, "format-specification"], [135, "format-specification"], [136, "format-specification"], [137, "format-specification"], [138, "format-specification"], [139, "format-specification"], [140, "format-specification"], [141, "format-specification"], [142, "format-specification"], [143, "format-specification"], [144, "format-specification"], [145, "format-specification"], [146, "format-specification"], [147, "format-specification"]], "References": [[131, "references"], [132, "references"], [133, "references"], [134, "references"], [135, "references"], [136, "references"], [137, "references"], [138, "references"], [139, "references"], [141, "references"], [143, "references"], [144, "references"], [146, "references"], [147, "references"], [525, "references"], [546, "references"], [698, "references"]], "BLAST+6 format (skbio.io.format.blast6)": [[132, "blast-6-format-skbio-io-format-blast6"]], "BLAST Column Types": [[132, "blast-column-types"], [133, "blast-column-types"]], "Format Parameters": [[132, "format-parameters"], [134, "format-parameters"], [136, "format-parameters"], [137, "format-parameters"], [138, "format-parameters"], [139, "format-parameters"], [140, "format-parameters"], [141, "format-parameters"], [143, "format-parameters"], [144, "format-parameters"], [146, "format-parameters"], [147, "format-parameters"]], "BLAST+7 format (skbio.io.format.blast7)": [[133, "blast-7-format-skbio-io-format-blast7"]], "Clustal format (skbio.io.format.clustal)": [[134, "clustal-format-skbio-io-format-clustal"]], "Alignment Section": [[134, "alignment-section"], [143, "alignment-section"]], "EMBL format (skbio.io.format.embl)": [[135, "embl-format-skbio-io-format-embl"]], "Feature Level Products": [[135, "feature-level-products"]], "Sections before FH (Feature Header)": [[135, "sections-before-fh-feature-header"]], "FT section": [[135, "ft-section"]], "SQ section": [[135, "sq-section"]], "Reading EMBL Files": [[135, "reading-embl-files"]], "Reading EMBL Files using generators": [[135, "reading-embl-files-using-generators"]], "FASTA/QUAL format (skbio.io.format.fasta)": [[136, "fasta-qual-format-skbio-io-format-fasta"]], "FASTA Format": [[136, "fasta-format"]], "Sequence Header": [[136, "sequence-header"]], "Sequence Data": [[136, "sequence-data"]], "QUAL Format": [[136, "qual-format"]], "QUAL File Parameter (Readers and Writers)": [[136, "qual-file-parameter-readers-and-writers"]], "Reader-specific Parameters": [[136, "reader-specific-parameters"], [138, "reader-specific-parameters"], [139, "reader-specific-parameters"]], "Generator and TabularMSA Reader Parameters": [[136, "generator-and-tabularmsa-reader-parameters"]], "Sequence Reader Parameters": [[136, "sequence-reader-parameters"]], "Writer-specific Parameters": [[136, "writer-specific-parameters"], [139, "writer-specific-parameters"]], "Reading and Writing FASTA Files": [[136, "reading-and-writing-fasta-files"]], "Reading and Writing FASTA/QUAL Files": [[136, "reading-and-writing-fasta-qual-files"]], "FASTQ format (skbio.io.format.fastq)": [[137, "fastq-format-skbio-io-format-fastq"]], "Quality Score Variants": [[137, "quality-score-variants"]], "GenBank format (skbio.io.format.genbank)": [[138, "genbank-format-skbio-io-format-genbank"]], "Sections before FEATURES": [[138, "sections-before-features"]], "FEATURES section": [[138, "features-section"]], "Location string": [[138, "location-string"]], "ORIGIN section": [[138, "origin-section"]], "Reading and Writing GenBank Files": [[138, "reading-and-writing-genbank-files"]], "GFF3 format (skbio.io.format.gff3)": [[139, "gff3-format-skbio-io-format-gff3"]], "Labeled square matrix format (skbio.io.format.lsmat)": [[140, "labeled-square-matrix-format-skbio-io-format-lsmat"]], "Newick format (skbio.io.format.newick)": [[141, "newick-format-skbio-io-format-newick"]], "Formal Grammar": [[141, "formal-grammar"]], "Explanation": [[141, "explanation"]], "Basic Symbols": [[141, "basic-symbols"]], "Application of Rules": [[141, "application-of-rules"]], "Adding Node Information": [[141, "adding-node-information"]], "Advanced Label and Length Rules": [[141, "advanced-label-and-length-rules"]], "Inline Comments": [[141, "inline-comments"]], "Whitespace": [[141, "whitespace"]], "Caveats": [[141, "caveats"]], "Ordination results format (skbio.io.format.ordination)": [[142, "ordination-results-format-skbio-io-format-ordination"]], "PHYLIP multiple sequence alignment format (skbio.io.format.phylip)": [[143, "phylip-multiple-sequence-alignment-format-skbio-io-format-phylip"]], "Header Section": [[143, "header-section"]], "QSeq format (skbio.io.format.qseq)": [[144, "qseq-format-skbio-io-format-qseq"]], "Generators Only": [[144, "generators-only"]], "Metadata Formatting Requirements": [[145, "metadata-formatting-requirements"]], "Metadata Validation": [[145, "metadata-validation"]], "Leading and trailing whitespace characters": [[145, "leading-and-trailing-whitespace-characters"]], "Comments and Empty Rows": [[145, "comments-and-empty-rows"]], "Identifier Column": [[145, "identifier-column"]], "Recommendations for Identifiers": [[145, "recommendations-for-identifiers"]], "Metadata Columns": [[145, "metadata-columns"]], "Column Types": [[145, "column-types"]], "Number Formatting": [[145, "number-formatting"]], "Stockholm format (skbio.io.format.stockholm)": [[146, "stockholm-format-skbio-io-format-stockholm"]], "Header": [[146, "header"]], "Multiple Sequence Alignment": [[146, "multiple-sequence-alignment"]], "Metadata": [[146, "metadata"]], "GF metadata": [[146, "gf-metadata"]], "GS metadata": [[146, "gs-metadata"]], "GR metadata": [[146, "gr-metadata"]], "GC metadata": [[146, "gc-metadata"]], "Footer": [[146, "footer"]], "Taxdump format (skbio.io.format.taxdump)": [[147, "taxdump-format-skbio-io-format-taxdump"]], "nodes.dmp": [[147, "nodes-dmp"]], "names.dmp": [[147, "names-dmp"]], "division.dmp": [[147, "division-dmp"]], "gencode.dmp": [[147, "gencode-dmp"]], "I/O Registry (skbio.io.registry)": [[148, "i-o-registry-skbio-io-registry"]], "Classes": [[148, "classes"], [546, "classes"], [608, "classes"], [698, "classes"], [876, "classes"], [877, "classes"], [879, "classes"], [881, "classes"]], "Exceptions": [[148, "exceptions"], [546, "exceptions"], [879, "exceptions"]], "Creating a new format for scikit-bio": [[148, "creating-a-new-format-for-scikit-bio"]], "Reserved Keyword Arguments": [[148, "reserved-keyword-arguments"]], "skbio.io.registry.DuplicateRegistrationError": [[149, "skbio-io-registry-duplicateregistrationerror"]], "skbio.io.registry.Format": [[150, "skbio-io-registry-format"]], "skbio.io.registry.Format.__eq__": [[151, "skbio-io-registry-format-eq"]], "skbio.io.registry.Format.__ge__": [[152, "skbio-io-registry-format-ge"]], "skbio.io.registry.Format.__getstate__": [[153, "skbio-io-registry-format-getstate"]], "skbio.io.registry.Format.__gt__": [[154, "skbio-io-registry-format-gt"]], "skbio.io.registry.Format.__hash__": [[155, "skbio-io-registry-format-hash"]], "skbio.io.registry.Format.__le__": [[156, "skbio-io-registry-format-le"]], "skbio.io.registry.Format.__lt__": [[157, "skbio-io-registry-format-lt"]], "skbio.io.registry.Format.__ne__": [[158, "skbio-io-registry-format-ne"]], "skbio.io.registry.Format.__str__": [[159, "skbio-io-registry-format-str"]], "skbio.io.registry.Format.reader": [[160, "skbio-io-registry-format-reader"]], "skbio.io.registry.Format.sniffer": [[161, "skbio-io-registry-format-sniffer"]], "skbio.io.registry.Format.writer": [[162, "skbio-io-registry-format-writer"]], "skbio.io.registry.IORegistry": [[163, "skbio-io-registry-ioregistry"]], "skbio.io.registry.IORegistry.__eq__": [[164, "skbio-io-registry-ioregistry-eq"]], "skbio.io.registry.IORegistry.__ge__": [[165, "skbio-io-registry-ioregistry-ge"]], "skbio.io.registry.IORegistry.__getstate__": [[166, "skbio-io-registry-ioregistry-getstate"]], "skbio.io.registry.IORegistry.__gt__": [[167, "skbio-io-registry-ioregistry-gt"]], "skbio.io.registry.IORegistry.__hash__": [[168, "skbio-io-registry-ioregistry-hash"]], "skbio.io.registry.IORegistry.__le__": [[169, "skbio-io-registry-ioregistry-le"]], "skbio.io.registry.IORegistry.__lt__": [[170, "skbio-io-registry-ioregistry-lt"]], "skbio.io.registry.IORegistry.__ne__": [[171, "skbio-io-registry-ioregistry-ne"]], "skbio.io.registry.IORegistry.__str__": [[172, "skbio-io-registry-ioregistry-str"]], "skbio.io.registry.IORegistry.add_format": [[173, "skbio-io-registry-ioregistry-add-format"]], "skbio.io.registry.IORegistry.create_format": [[174, "skbio-io-registry-ioregistry-create-format"]], "skbio.io.registry.IORegistry.get_reader": [[175, "skbio-io-registry-ioregistry-get-reader"]], "skbio.io.registry.IORegistry.get_sniffer": [[176, "skbio-io-registry-ioregistry-get-sniffer"]], "skbio.io.registry.IORegistry.get_writer": [[177, "skbio-io-registry-ioregistry-get-writer"]], "skbio.io.registry.IORegistry.list_read_formats": [[178, "skbio-io-registry-ioregistry-list-read-formats"]], "skbio.io.registry.IORegistry.list_write_formats": [[179, "skbio-io-registry-ioregistry-list-write-formats"]], "skbio.io.registry.IORegistry.monkey_patch": [[180, "skbio-io-registry-ioregistry-monkey-patch"]], "skbio.io.registry.IORegistry.read": [[181, "skbio-io-registry-ioregistry-read"]], "skbio.io.registry.IORegistry.sniff": [[182, "skbio-io-registry-ioregistry-sniff"]], "skbio.io.registry.IORegistry.write": [[183, "skbio-io-registry-ioregistry-write"]], "skbio.io.registry.InvalidRegistrationError": [[184, "skbio-io-registry-invalidregistrationerror"]], "skbio.io.registry.create_format": [[185, "skbio-io-registry-create-format"]], "skbio.io.registry.read": [[186, "skbio-io-registry-read"]], "skbio.io.registry.sniff": [[187, "skbio-io-registry-sniff"]], "skbio.io.registry.write": [[188, "skbio-io-registry-write"]], "I/O utils (skbio.io.util)": [[189, "i-o-utils-skbio-io-util"]], "skbio.io.util.open": [[190, "skbio-io-util-open"]], "skbio.io.util.open_file": [[191, "skbio-io-util-open-file"]], "skbio.io.util.open_files": [[192, "skbio-io-util-open-files"]], "skbio.metadata.Interval": [[193, "skbio-metadata-interval"]], "skbio.metadata.Interval.__eq__": [[194, "skbio-metadata-interval-eq"]], "skbio.metadata.Interval.__ge__": [[195, "skbio-metadata-interval-ge"]], "skbio.metadata.Interval.__getstate__": [[196, "skbio-metadata-interval-getstate"]], "skbio.metadata.Interval.__gt__": [[197, "skbio-metadata-interval-gt"]], "skbio.metadata.Interval.__le__": [[198, "skbio-metadata-interval-le"]], "skbio.metadata.Interval.__lt__": [[199, "skbio-metadata-interval-lt"]], "skbio.metadata.Interval.__ne__": [[200, "skbio-metadata-interval-ne"]], "skbio.metadata.Interval.__str__": [[201, "skbio-metadata-interval-str"]], "skbio.metadata.Interval.drop": [[202, "skbio-metadata-interval-drop"]], "skbio.metadata.IntervalMetadata": [[203, "skbio-metadata-intervalmetadata"]], "skbio.metadata.IntervalMetadata.__copy__": [[204, "skbio-metadata-intervalmetadata-copy"]], "skbio.metadata.IntervalMetadata.__deepcopy__": [[205, "skbio-metadata-intervalmetadata-deepcopy"]], "skbio.metadata.IntervalMetadata.__eq__": [[206, "skbio-metadata-intervalmetadata-eq"]], "skbio.metadata.IntervalMetadata.__ge__": [[207, "skbio-metadata-intervalmetadata-ge"]], "skbio.metadata.IntervalMetadata.__getstate__": [[208, "skbio-metadata-intervalmetadata-getstate"]], "skbio.metadata.IntervalMetadata.__gt__": [[209, "skbio-metadata-intervalmetadata-gt"]], "skbio.metadata.IntervalMetadata.__le__": [[210, "skbio-metadata-intervalmetadata-le"]], "skbio.metadata.IntervalMetadata.__lt__": [[211, "skbio-metadata-intervalmetadata-lt"]], "skbio.metadata.IntervalMetadata.__ne__": [[212, "skbio-metadata-intervalmetadata-ne"]], "skbio.metadata.IntervalMetadata.__str__": [[213, "skbio-metadata-intervalmetadata-str"]], "skbio.metadata.IntervalMetadata.add": [[214, "skbio-metadata-intervalmetadata-add"]], "skbio.metadata.IntervalMetadata.concat": [[215, "skbio-metadata-intervalmetadata-concat"]], "skbio.metadata.IntervalMetadata.drop": [[216, "skbio-metadata-intervalmetadata-drop"]], "skbio.metadata.IntervalMetadata.merge": [[217, "skbio-metadata-intervalmetadata-merge"]], "skbio.metadata.IntervalMetadata.query": [[218, "skbio-metadata-intervalmetadata-query"]], "skbio.metadata.IntervalMetadata.read": [[219, "skbio-metadata-intervalmetadata-read"]], "skbio.metadata.IntervalMetadata.sort": [[220, "skbio-metadata-intervalmetadata-sort"]], "skbio.metadata.IntervalMetadata.write": [[221, "skbio-metadata-intervalmetadata-write"]], "skbio.sequence.DNA": [[222, "skbio-sequence-dna"]], "skbio.sequence.DNA.__bool__": [[223, "skbio-sequence-dna-bool"]], "skbio.sequence.DNA.__contains__": [[224, "skbio-sequence-dna-contains"]], "skbio.sequence.DNA.__copy__": [[225, "skbio-sequence-dna-copy"]], "skbio.sequence.DNA.__deepcopy__": [[226, "skbio-sequence-dna-deepcopy"]], "skbio.sequence.DNA.__eq__": [[227, "skbio-sequence-dna-eq"]], "skbio.sequence.DNA.__ge__": [[228, "skbio-sequence-dna-ge"]], "skbio.sequence.DNA.__getitem__": [[229, "skbio-sequence-dna-getitem"]], "skbio.sequence.DNA.__getstate__": [[230, "skbio-sequence-dna-getstate"]], "skbio.sequence.DNA.__gt__": [[231, "skbio-sequence-dna-gt"]], "skbio.sequence.DNA.__iter__": [[232, "skbio-sequence-dna-iter"]], "skbio.sequence.DNA.__le__": [[233, "skbio-sequence-dna-le"]], "skbio.sequence.DNA.__len__": [[234, "skbio-sequence-dna-len"]], "skbio.sequence.DNA.__lt__": [[235, "skbio-sequence-dna-lt"]], "skbio.sequence.DNA.__ne__": [[236, "skbio-sequence-dna-ne"]], "skbio.sequence.DNA.__reversed__": [[237, "skbio-sequence-dna-reversed"]], "skbio.sequence.DNA.__str__": [[238, "skbio-sequence-dna-str"]], "skbio.sequence.DNA.complement": [[239, "skbio-sequence-dna-complement"]], "skbio.sequence.DNA.concat": [[240, "skbio-sequence-dna-concat"]], "skbio.sequence.DNA.count": [[241, "skbio-sequence-dna-count"]], "skbio.sequence.DNA.definites": [[242, "skbio-sequence-dna-definites"]], "skbio.sequence.DNA.degap": [[243, "skbio-sequence-dna-degap"]], "skbio.sequence.DNA.degenerates": [[244, "skbio-sequence-dna-degenerates"]], "skbio.sequence.DNA.distance": [[245, "skbio-sequence-dna-distance"]], "skbio.sequence.DNA.expand_degenerates": [[246, "skbio-sequence-dna-expand-degenerates"]], "skbio.sequence.DNA.find_motifs": [[247, "skbio-sequence-dna-find-motifs"]], "skbio.sequence.DNA.find_with_regex": [[248, "skbio-sequence-dna-find-with-regex"]], "skbio.sequence.DNA.frequencies": [[249, "skbio-sequence-dna-frequencies"]], "skbio.sequence.DNA.gaps": [[250, "skbio-sequence-dna-gaps"]], "skbio.sequence.DNA.gc_content": [[251, "skbio-sequence-dna-gc-content"]], "skbio.sequence.DNA.gc_frequency": [[252, "skbio-sequence-dna-gc-frequency"]], "skbio.sequence.DNA.has_definites": [[253, "skbio-sequence-dna-has-definites"]], "skbio.sequence.DNA.has_degenerates": [[254, "skbio-sequence-dna-has-degenerates"]], "skbio.sequence.DNA.has_gaps": [[255, "skbio-sequence-dna-has-gaps"]], "skbio.sequence.DNA.has_interval_metadata": [[256, "skbio-sequence-dna-has-interval-metadata"]], "skbio.sequence.DNA.has_metadata": [[257, "skbio-sequence-dna-has-metadata"]], "skbio.sequence.DNA.has_nondegenerates": [[258, "skbio-sequence-dna-has-nondegenerates"]], "skbio.sequence.DNA.has_positional_metadata": [[259, "skbio-sequence-dna-has-positional-metadata"]], "skbio.sequence.DNA.index": [[260, "skbio-sequence-dna-index"]], "skbio.sequence.DNA.is_reverse_complement": [[261, "skbio-sequence-dna-is-reverse-complement"]], "skbio.sequence.DNA.iter_contiguous": [[262, "skbio-sequence-dna-iter-contiguous"]], "skbio.sequence.DNA.iter_kmers": [[263, "skbio-sequence-dna-iter-kmers"]], "skbio.sequence.DNA.kmer_frequencies": [[264, "skbio-sequence-dna-kmer-frequencies"]], "skbio.sequence.DNA.lowercase": [[265, "skbio-sequence-dna-lowercase"]], "skbio.sequence.DNA.match_frequency": [[266, "skbio-sequence-dna-match-frequency"]], "skbio.sequence.DNA.matches": [[267, "skbio-sequence-dna-matches"]], "skbio.sequence.DNA.mismatch_frequency": [[268, "skbio-sequence-dna-mismatch-frequency"]], "skbio.sequence.DNA.mismatches": [[269, "skbio-sequence-dna-mismatches"]], "skbio.sequence.DNA.nondegenerates": [[270, "skbio-sequence-dna-nondegenerates"]], "skbio.sequence.DNA.read": [[271, "skbio-sequence-dna-read"]], "skbio.sequence.DNA.replace": [[272, "skbio-sequence-dna-replace"]], "skbio.sequence.DNA.reverse_complement": [[273, "skbio-sequence-dna-reverse-complement"]], "skbio.sequence.DNA.to_definites": [[274, "skbio-sequence-dna-to-definites"]], "skbio.sequence.DNA.to_indices": [[275, "skbio-sequence-dna-to-indices"]], "skbio.sequence.DNA.to_regex": [[276, "skbio-sequence-dna-to-regex"]], "skbio.sequence.DNA.transcribe": [[277, "skbio-sequence-dna-transcribe"]], "skbio.sequence.DNA.translate": [[278, "skbio-sequence-dna-translate"]], "skbio.sequence.DNA.translate_six_frames": [[279, "skbio-sequence-dna-translate-six-frames"]], "skbio.sequence.DNA.write": [[280, "skbio-sequence-dna-write"]], "skbio.sequence.GeneticCode": [[281, "skbio-sequence-geneticcode"]], "skbio.sequence.GeneticCode.__eq__": [[282, "skbio-sequence-geneticcode-eq"]], "skbio.sequence.GeneticCode.__ge__": [[283, "skbio-sequence-geneticcode-ge"]], "skbio.sequence.GeneticCode.__getstate__": [[284, "skbio-sequence-geneticcode-getstate"]], "skbio.sequence.GeneticCode.__gt__": [[285, "skbio-sequence-geneticcode-gt"]], "skbio.sequence.GeneticCode.__le__": [[286, "skbio-sequence-geneticcode-le"]], "skbio.sequence.GeneticCode.__lt__": [[287, "skbio-sequence-geneticcode-lt"]], "skbio.sequence.GeneticCode.__ne__": [[288, "skbio-sequence-geneticcode-ne"]], "skbio.sequence.GeneticCode.__str__": [[289, "skbio-sequence-geneticcode-str"]], "skbio.sequence.GeneticCode.from_ncbi": [[290, "skbio-sequence-geneticcode-from-ncbi"]], "skbio.sequence.GeneticCode.translate": [[291, "skbio-sequence-geneticcode-translate"]], "skbio.sequence.GeneticCode.translate_six_frames": [[292, "skbio-sequence-geneticcode-translate-six-frames"]], "skbio.sequence.GrammaredSequence": [[293, "skbio-sequence-grammaredsequence"]], "skbio.sequence.GrammaredSequence.__bool__": [[294, "skbio-sequence-grammaredsequence-bool"]], "skbio.sequence.GrammaredSequence.__contains__": [[295, "skbio-sequence-grammaredsequence-contains"]], "skbio.sequence.GrammaredSequence.__copy__": [[296, "skbio-sequence-grammaredsequence-copy"]], "skbio.sequence.GrammaredSequence.__deepcopy__": [[297, "skbio-sequence-grammaredsequence-deepcopy"]], "skbio.sequence.GrammaredSequence.__eq__": [[298, "skbio-sequence-grammaredsequence-eq"]], "skbio.sequence.GrammaredSequence.__ge__": [[299, "skbio-sequence-grammaredsequence-ge"]], "skbio.sequence.GrammaredSequence.__getitem__": [[300, "skbio-sequence-grammaredsequence-getitem"]], "skbio.sequence.GrammaredSequence.__getstate__": [[301, "skbio-sequence-grammaredsequence-getstate"]], "skbio.sequence.GrammaredSequence.__gt__": [[302, "skbio-sequence-grammaredsequence-gt"]], "skbio.sequence.GrammaredSequence.__iter__": [[303, "skbio-sequence-grammaredsequence-iter"]], "skbio.sequence.GrammaredSequence.__le__": [[304, "skbio-sequence-grammaredsequence-le"]], "skbio.sequence.GrammaredSequence.__len__": [[305, "skbio-sequence-grammaredsequence-len"]], "skbio.sequence.GrammaredSequence.__lt__": [[306, "skbio-sequence-grammaredsequence-lt"]], "skbio.sequence.GrammaredSequence.__ne__": [[307, "skbio-sequence-grammaredsequence-ne"]], "skbio.sequence.GrammaredSequence.__reversed__": [[308, "skbio-sequence-grammaredsequence-reversed"]], "skbio.sequence.GrammaredSequence.__str__": [[309, "skbio-sequence-grammaredsequence-str"]], "skbio.sequence.GrammaredSequence.concat": [[310, "skbio-sequence-grammaredsequence-concat"]], "skbio.sequence.GrammaredSequence.count": [[311, "skbio-sequence-grammaredsequence-count"]], "skbio.sequence.GrammaredSequence.definites": [[312, "skbio-sequence-grammaredsequence-definites"]], "skbio.sequence.GrammaredSequence.degap": [[313, "skbio-sequence-grammaredsequence-degap"]], "skbio.sequence.GrammaredSequence.degenerates": [[314, "skbio-sequence-grammaredsequence-degenerates"]], "skbio.sequence.GrammaredSequence.distance": [[315, "skbio-sequence-grammaredsequence-distance"]], "skbio.sequence.GrammaredSequence.expand_degenerates": [[316, "skbio-sequence-grammaredsequence-expand-degenerates"]], "skbio.sequence.GrammaredSequence.find_motifs": [[317, "skbio-sequence-grammaredsequence-find-motifs"]], "skbio.sequence.GrammaredSequence.find_with_regex": [[318, "skbio-sequence-grammaredsequence-find-with-regex"]], "skbio.sequence.GrammaredSequence.frequencies": [[319, "skbio-sequence-grammaredsequence-frequencies"]], "skbio.sequence.GrammaredSequence.gaps": [[320, "skbio-sequence-grammaredsequence-gaps"]], "skbio.sequence.GrammaredSequence.has_definites": [[321, "skbio-sequence-grammaredsequence-has-definites"]], "skbio.sequence.GrammaredSequence.has_degenerates": [[322, "skbio-sequence-grammaredsequence-has-degenerates"]], "skbio.sequence.GrammaredSequence.has_gaps": [[323, "skbio-sequence-grammaredsequence-has-gaps"]], "skbio.sequence.GrammaredSequence.has_interval_metadata": [[324, "skbio-sequence-grammaredsequence-has-interval-metadata"]], "skbio.sequence.GrammaredSequence.has_metadata": [[325, "skbio-sequence-grammaredsequence-has-metadata"]], "skbio.sequence.GrammaredSequence.has_nondegenerates": [[326, "skbio-sequence-grammaredsequence-has-nondegenerates"]], "skbio.sequence.GrammaredSequence.has_positional_metadata": [[327, "skbio-sequence-grammaredsequence-has-positional-metadata"]], "skbio.sequence.GrammaredSequence.index": [[328, "skbio-sequence-grammaredsequence-index"]], "skbio.sequence.GrammaredSequence.iter_contiguous": [[329, "skbio-sequence-grammaredsequence-iter-contiguous"]], "skbio.sequence.GrammaredSequence.iter_kmers": [[330, "skbio-sequence-grammaredsequence-iter-kmers"]], "skbio.sequence.GrammaredSequence.kmer_frequencies": [[331, "skbio-sequence-grammaredsequence-kmer-frequencies"]], "skbio.sequence.GrammaredSequence.lowercase": [[332, "skbio-sequence-grammaredsequence-lowercase"]], "skbio.sequence.GrammaredSequence.match_frequency": [[333, "skbio-sequence-grammaredsequence-match-frequency"]], "skbio.sequence.GrammaredSequence.matches": [[334, "skbio-sequence-grammaredsequence-matches"]], "skbio.sequence.GrammaredSequence.mismatch_frequency": [[335, "skbio-sequence-grammaredsequence-mismatch-frequency"]], "skbio.sequence.GrammaredSequence.mismatches": [[336, "skbio-sequence-grammaredsequence-mismatches"]], "skbio.sequence.GrammaredSequence.nondegenerates": [[337, "skbio-sequence-grammaredsequence-nondegenerates"]], "skbio.sequence.GrammaredSequence.read": [[338, "skbio-sequence-grammaredsequence-read"]], "skbio.sequence.GrammaredSequence.replace": [[339, "skbio-sequence-grammaredsequence-replace"]], "skbio.sequence.GrammaredSequence.to_definites": [[340, "skbio-sequence-grammaredsequence-to-definites"]], "skbio.sequence.GrammaredSequence.to_indices": [[341, "skbio-sequence-grammaredsequence-to-indices"]], "skbio.sequence.GrammaredSequence.to_regex": [[342, "skbio-sequence-grammaredsequence-to-regex"]], "skbio.sequence.GrammaredSequence.write": [[343, "skbio-sequence-grammaredsequence-write"]], "skbio.sequence.Protein": [[344, "skbio-sequence-protein"]], "skbio.sequence.Protein.__bool__": [[345, "skbio-sequence-protein-bool"]], "skbio.sequence.Protein.__contains__": [[346, "skbio-sequence-protein-contains"]], "skbio.sequence.Protein.__copy__": [[347, "skbio-sequence-protein-copy"]], "skbio.sequence.Protein.__deepcopy__": [[348, "skbio-sequence-protein-deepcopy"]], "skbio.sequence.Protein.__eq__": [[349, "skbio-sequence-protein-eq"]], "skbio.sequence.Protein.__ge__": [[350, "skbio-sequence-protein-ge"]], "skbio.sequence.Protein.__getitem__": [[351, "skbio-sequence-protein-getitem"]], "skbio.sequence.Protein.__getstate__": [[352, "skbio-sequence-protein-getstate"]], "skbio.sequence.Protein.__gt__": [[353, "skbio-sequence-protein-gt"]], "skbio.sequence.Protein.__iter__": [[354, "skbio-sequence-protein-iter"]], "skbio.sequence.Protein.__le__": [[355, "skbio-sequence-protein-le"]], "skbio.sequence.Protein.__len__": [[356, "skbio-sequence-protein-len"]], "skbio.sequence.Protein.__lt__": [[357, "skbio-sequence-protein-lt"]], "skbio.sequence.Protein.__ne__": [[358, "skbio-sequence-protein-ne"]], "skbio.sequence.Protein.__reversed__": [[359, "skbio-sequence-protein-reversed"]], "skbio.sequence.Protein.__str__": [[360, "skbio-sequence-protein-str"]], "skbio.sequence.Protein.concat": [[361, "skbio-sequence-protein-concat"]], "skbio.sequence.Protein.count": [[362, "skbio-sequence-protein-count"]], "skbio.sequence.Protein.definites": [[363, "skbio-sequence-protein-definites"]], "skbio.sequence.Protein.degap": [[364, "skbio-sequence-protein-degap"]], "skbio.sequence.Protein.degenerates": [[365, "skbio-sequence-protein-degenerates"]], "skbio.sequence.Protein.distance": [[366, "skbio-sequence-protein-distance"]], "skbio.sequence.Protein.expand_degenerates": [[367, "skbio-sequence-protein-expand-degenerates"]], "skbio.sequence.Protein.find_motifs": [[368, "skbio-sequence-protein-find-motifs"]], "skbio.sequence.Protein.find_with_regex": [[369, "skbio-sequence-protein-find-with-regex"]], "skbio.sequence.Protein.frequencies": [[370, "skbio-sequence-protein-frequencies"]], "skbio.sequence.Protein.gaps": [[371, "skbio-sequence-protein-gaps"]], "skbio.sequence.Protein.has_definites": [[372, "skbio-sequence-protein-has-definites"]], "skbio.sequence.Protein.has_degenerates": [[373, "skbio-sequence-protein-has-degenerates"]], "skbio.sequence.Protein.has_gaps": [[374, "skbio-sequence-protein-has-gaps"]], "skbio.sequence.Protein.has_interval_metadata": [[375, "skbio-sequence-protein-has-interval-metadata"]], "skbio.sequence.Protein.has_metadata": [[376, "skbio-sequence-protein-has-metadata"]], "skbio.sequence.Protein.has_nondegenerates": [[377, "skbio-sequence-protein-has-nondegenerates"]], "skbio.sequence.Protein.has_positional_metadata": [[378, "skbio-sequence-protein-has-positional-metadata"]], "skbio.sequence.Protein.has_stops": [[379, "skbio-sequence-protein-has-stops"]], "skbio.sequence.Protein.index": [[380, "skbio-sequence-protein-index"]], "skbio.sequence.Protein.iter_contiguous": [[381, "skbio-sequence-protein-iter-contiguous"]], "skbio.sequence.Protein.iter_kmers": [[382, "skbio-sequence-protein-iter-kmers"]], "skbio.sequence.Protein.kmer_frequencies": [[383, "skbio-sequence-protein-kmer-frequencies"]], "skbio.sequence.Protein.lowercase": [[384, "skbio-sequence-protein-lowercase"]], "skbio.sequence.Protein.match_frequency": [[385, "skbio-sequence-protein-match-frequency"]], "skbio.sequence.Protein.matches": [[386, "skbio-sequence-protein-matches"]], "skbio.sequence.Protein.mismatch_frequency": [[387, "skbio-sequence-protein-mismatch-frequency"]], "skbio.sequence.Protein.mismatches": [[388, "skbio-sequence-protein-mismatches"]], "skbio.sequence.Protein.nondegenerates": [[389, "skbio-sequence-protein-nondegenerates"]], "skbio.sequence.Protein.read": [[390, "skbio-sequence-protein-read"]], "skbio.sequence.Protein.replace": [[391, "skbio-sequence-protein-replace"]], "skbio.sequence.Protein.stops": [[392, "skbio-sequence-protein-stops"]], "skbio.sequence.Protein.to_definites": [[393, "skbio-sequence-protein-to-definites"]], "skbio.sequence.Protein.to_indices": [[394, "skbio-sequence-protein-to-indices"]], "skbio.sequence.Protein.to_regex": [[395, "skbio-sequence-protein-to-regex"]], "skbio.sequence.Protein.write": [[396, "skbio-sequence-protein-write"]], "skbio.sequence.RNA": [[397, "skbio-sequence-rna"]], "skbio.sequence.RNA.__bool__": [[398, "skbio-sequence-rna-bool"]], "skbio.sequence.RNA.__contains__": [[399, "skbio-sequence-rna-contains"]], "skbio.sequence.RNA.__copy__": [[400, "skbio-sequence-rna-copy"]], "skbio.sequence.RNA.__deepcopy__": [[401, "skbio-sequence-rna-deepcopy"]], "skbio.sequence.RNA.__eq__": [[402, "skbio-sequence-rna-eq"]], "skbio.sequence.RNA.__ge__": [[403, "skbio-sequence-rna-ge"]], "skbio.sequence.RNA.__getitem__": [[404, "skbio-sequence-rna-getitem"]], "skbio.sequence.RNA.__getstate__": [[405, "skbio-sequence-rna-getstate"]], "skbio.sequence.RNA.__gt__": [[406, "skbio-sequence-rna-gt"]], "skbio.sequence.RNA.__iter__": [[407, "skbio-sequence-rna-iter"]], "skbio.sequence.RNA.__le__": [[408, "skbio-sequence-rna-le"]], "skbio.sequence.RNA.__len__": [[409, "skbio-sequence-rna-len"]], "skbio.sequence.RNA.__lt__": [[410, "skbio-sequence-rna-lt"]], "skbio.sequence.RNA.__ne__": [[411, "skbio-sequence-rna-ne"]], "skbio.sequence.RNA.__reversed__": [[412, "skbio-sequence-rna-reversed"]], "skbio.sequence.RNA.__str__": [[413, "skbio-sequence-rna-str"]], "skbio.sequence.RNA.complement": [[414, "skbio-sequence-rna-complement"]], "skbio.sequence.RNA.concat": [[415, "skbio-sequence-rna-concat"]], "skbio.sequence.RNA.count": [[416, "skbio-sequence-rna-count"]], "skbio.sequence.RNA.definites": [[417, "skbio-sequence-rna-definites"]], "skbio.sequence.RNA.degap": [[418, "skbio-sequence-rna-degap"]], "skbio.sequence.RNA.degenerates": [[419, "skbio-sequence-rna-degenerates"]], "skbio.sequence.RNA.distance": [[420, "skbio-sequence-rna-distance"]], "skbio.sequence.RNA.expand_degenerates": [[421, "skbio-sequence-rna-expand-degenerates"]], "skbio.sequence.RNA.find_motifs": [[422, "skbio-sequence-rna-find-motifs"]], "skbio.sequence.RNA.find_with_regex": [[423, "skbio-sequence-rna-find-with-regex"]], "skbio.sequence.RNA.frequencies": [[424, "skbio-sequence-rna-frequencies"]], "skbio.sequence.RNA.gaps": [[425, "skbio-sequence-rna-gaps"]], "skbio.sequence.RNA.gc_content": [[426, "skbio-sequence-rna-gc-content"]], "skbio.sequence.RNA.gc_frequency": [[427, "skbio-sequence-rna-gc-frequency"]], "skbio.sequence.RNA.has_definites": [[428, "skbio-sequence-rna-has-definites"]], "skbio.sequence.RNA.has_degenerates": [[429, "skbio-sequence-rna-has-degenerates"]], "skbio.sequence.RNA.has_gaps": [[430, "skbio-sequence-rna-has-gaps"]], "skbio.sequence.RNA.has_interval_metadata": [[431, "skbio-sequence-rna-has-interval-metadata"]], "skbio.sequence.RNA.has_metadata": [[432, "skbio-sequence-rna-has-metadata"]], "skbio.sequence.RNA.has_nondegenerates": [[433, "skbio-sequence-rna-has-nondegenerates"]], "skbio.sequence.RNA.has_positional_metadata": [[434, "skbio-sequence-rna-has-positional-metadata"]], "skbio.sequence.RNA.index": [[435, "skbio-sequence-rna-index"]], "skbio.sequence.RNA.is_reverse_complement": [[436, "skbio-sequence-rna-is-reverse-complement"]], "skbio.sequence.RNA.iter_contiguous": [[437, "skbio-sequence-rna-iter-contiguous"]], "skbio.sequence.RNA.iter_kmers": [[438, "skbio-sequence-rna-iter-kmers"]], "skbio.sequence.RNA.kmer_frequencies": [[439, "skbio-sequence-rna-kmer-frequencies"]], "skbio.sequence.RNA.lowercase": [[440, "skbio-sequence-rna-lowercase"]], "skbio.sequence.RNA.match_frequency": [[441, "skbio-sequence-rna-match-frequency"]], "skbio.sequence.RNA.matches": [[442, "skbio-sequence-rna-matches"]], "skbio.sequence.RNA.mismatch_frequency": [[443, "skbio-sequence-rna-mismatch-frequency"]], "skbio.sequence.RNA.mismatches": [[444, "skbio-sequence-rna-mismatches"]], "skbio.sequence.RNA.nondegenerates": [[445, "skbio-sequence-rna-nondegenerates"]], "skbio.sequence.RNA.read": [[446, "skbio-sequence-rna-read"]], "skbio.sequence.RNA.replace": [[447, "skbio-sequence-rna-replace"]], "skbio.sequence.RNA.reverse_complement": [[448, "skbio-sequence-rna-reverse-complement"]], "skbio.sequence.RNA.reverse_transcribe": [[449, "skbio-sequence-rna-reverse-transcribe"]], "skbio.sequence.RNA.to_definites": [[450, "skbio-sequence-rna-to-definites"]], "skbio.sequence.RNA.to_indices": [[451, "skbio-sequence-rna-to-indices"]], "skbio.sequence.RNA.to_regex": [[452, "skbio-sequence-rna-to-regex"]], "skbio.sequence.RNA.translate": [[453, "skbio-sequence-rna-translate"]], "skbio.sequence.RNA.translate_six_frames": [[454, "skbio-sequence-rna-translate-six-frames"]], "skbio.sequence.RNA.write": [[455, "skbio-sequence-rna-write"]], "skbio.sequence.Sequence": [[456, "skbio-sequence-sequence"]], "skbio.sequence.Sequence.__bool__": [[457, "skbio-sequence-sequence-bool"]], "skbio.sequence.Sequence.__contains__": [[458, "skbio-sequence-sequence-contains"]], "skbio.sequence.Sequence.__copy__": [[459, "skbio-sequence-sequence-copy"]], "skbio.sequence.Sequence.__deepcopy__": [[460, "skbio-sequence-sequence-deepcopy"]], "skbio.sequence.Sequence.__eq__": [[461, "skbio-sequence-sequence-eq"]], "skbio.sequence.Sequence.__ge__": [[462, "skbio-sequence-sequence-ge"]], "skbio.sequence.Sequence.__getitem__": [[463, "skbio-sequence-sequence-getitem"]], "skbio.sequence.Sequence.__getstate__": [[464, "skbio-sequence-sequence-getstate"]], "skbio.sequence.Sequence.__gt__": [[465, "skbio-sequence-sequence-gt"]], "skbio.sequence.Sequence.__iter__": [[466, "skbio-sequence-sequence-iter"]], "skbio.sequence.Sequence.__le__": [[467, "skbio-sequence-sequence-le"]], "skbio.sequence.Sequence.__len__": [[468, "skbio-sequence-sequence-len"]], "skbio.sequence.Sequence.__lt__": [[469, "skbio-sequence-sequence-lt"]], "skbio.sequence.Sequence.__ne__": [[470, "skbio-sequence-sequence-ne"]], "skbio.sequence.Sequence.__reversed__": [[471, "skbio-sequence-sequence-reversed"]], "skbio.sequence.Sequence.__str__": [[472, "skbio-sequence-sequence-str"]], "skbio.sequence.Sequence.concat": [[473, "skbio-sequence-sequence-concat"]], "skbio.sequence.Sequence.count": [[474, "skbio-sequence-sequence-count"]], "skbio.sequence.Sequence.distance": [[475, "skbio-sequence-sequence-distance"]], "skbio.sequence.Sequence.find_with_regex": [[476, "skbio-sequence-sequence-find-with-regex"]], "skbio.sequence.Sequence.frequencies": [[477, "skbio-sequence-sequence-frequencies"]], "skbio.sequence.Sequence.has_interval_metadata": [[478, "skbio-sequence-sequence-has-interval-metadata"]], "skbio.sequence.Sequence.has_metadata": [[479, "skbio-sequence-sequence-has-metadata"]], "skbio.sequence.Sequence.has_positional_metadata": [[480, "skbio-sequence-sequence-has-positional-metadata"]], "skbio.sequence.Sequence.index": [[481, "skbio-sequence-sequence-index"]], "skbio.sequence.Sequence.iter_contiguous": [[482, "skbio-sequence-sequence-iter-contiguous"]], "skbio.sequence.Sequence.iter_kmers": [[483, "skbio-sequence-sequence-iter-kmers"]], "skbio.sequence.Sequence.kmer_frequencies": [[484, "skbio-sequence-sequence-kmer-frequencies"]], "skbio.sequence.Sequence.lowercase": [[485, "skbio-sequence-sequence-lowercase"]], "skbio.sequence.Sequence.match_frequency": [[486, "skbio-sequence-sequence-match-frequency"]], "skbio.sequence.Sequence.matches": [[487, "skbio-sequence-sequence-matches"]], "skbio.sequence.Sequence.mismatch_frequency": [[488, "skbio-sequence-sequence-mismatch-frequency"]], "skbio.sequence.Sequence.mismatches": [[489, "skbio-sequence-sequence-mismatches"]], "skbio.sequence.Sequence.read": [[490, "skbio-sequence-sequence-read"]], "skbio.sequence.Sequence.replace": [[491, "skbio-sequence-sequence-replace"]], "skbio.sequence.Sequence.to_indices": [[492, "skbio-sequence-sequence-to-indices"]], "skbio.sequence.Sequence.write": [[493, "skbio-sequence-sequence-write"]], "skbio.sequence.SubstitutionMatrix": [[494, "skbio-sequence-substitutionmatrix"]], "skbio.sequence.SubstitutionMatrix.__contains__": [[495, "skbio-sequence-substitutionmatrix-contains"]], "skbio.sequence.SubstitutionMatrix.__eq__": [[496, "skbio-sequence-substitutionmatrix-eq"]], "skbio.sequence.SubstitutionMatrix.__ge__": [[497, "skbio-sequence-substitutionmatrix-ge"]], "skbio.sequence.SubstitutionMatrix.__getitem__": [[498, "skbio-sequence-substitutionmatrix-getitem"]], "skbio.sequence.SubstitutionMatrix.__getstate__": [[499, "skbio-sequence-substitutionmatrix-getstate"]], "skbio.sequence.SubstitutionMatrix.__gt__": [[500, "skbio-sequence-substitutionmatrix-gt"]], "skbio.sequence.SubstitutionMatrix.__le__": [[501, "skbio-sequence-substitutionmatrix-le"]], "skbio.sequence.SubstitutionMatrix.__lt__": [[502, "skbio-sequence-substitutionmatrix-lt"]], "skbio.sequence.SubstitutionMatrix.__ne__": [[503, "skbio-sequence-substitutionmatrix-ne"]], "skbio.sequence.SubstitutionMatrix.__str__": [[504, "skbio-sequence-substitutionmatrix-str"]], "skbio.sequence.SubstitutionMatrix.between": [[505, "skbio-sequence-substitutionmatrix-between"]], "skbio.sequence.SubstitutionMatrix.by_name": [[506, "skbio-sequence-substitutionmatrix-by-name"]], "skbio.sequence.SubstitutionMatrix.copy": [[507, "skbio-sequence-substitutionmatrix-copy"]], "skbio.sequence.SubstitutionMatrix.filter": [[508, "skbio-sequence-substitutionmatrix-filter"]], "skbio.sequence.SubstitutionMatrix.from_dict": [[509, "skbio-sequence-substitutionmatrix-from-dict"]], "skbio.sequence.SubstitutionMatrix.from_iterable": [[510, "skbio-sequence-substitutionmatrix-from-iterable"]], "skbio.sequence.SubstitutionMatrix.get_names": [[511, "skbio-sequence-substitutionmatrix-get-names"]], "skbio.sequence.SubstitutionMatrix.identity": [[512, "skbio-sequence-substitutionmatrix-identity"]], "skbio.sequence.SubstitutionMatrix.index": [[513, "skbio-sequence-substitutionmatrix-index"]], "skbio.sequence.SubstitutionMatrix.plot": [[514, "skbio-sequence-substitutionmatrix-plot"]], "skbio.sequence.SubstitutionMatrix.read": [[515, "skbio-sequence-substitutionmatrix-read"]], "skbio.sequence.SubstitutionMatrix.redundant_form": [[516, "skbio-sequence-substitutionmatrix-redundant-form"]], "skbio.sequence.SubstitutionMatrix.to_data_frame": [[517, "skbio-sequence-substitutionmatrix-to-data-frame"]], "skbio.sequence.SubstitutionMatrix.to_dict": [[518, "skbio-sequence-substitutionmatrix-to-dict"]], "skbio.sequence.SubstitutionMatrix.transpose": [[519, "skbio-sequence-substitutionmatrix-transpose"]], "skbio.sequence.SubstitutionMatrix.within": [[520, "skbio-sequence-substitutionmatrix-within"]], "skbio.sequence.SubstitutionMatrix.write": [[521, "skbio-sequence-substitutionmatrix-write"]], "Sequence distance metrics (skbio.sequence.distance)": [[522, "sequence-distance-metrics-skbio-sequence-distance"]], "skbio.sequence.distance.hamming": [[523, "skbio-sequence-distance-hamming"]], "skbio.sequence.distance.kmer_distance": [[524, "skbio-sequence-distance-kmer-distance"]], "Composition Statistics (skbio.stats.composition)": [[525, "composition-statistics-skbio-stats-composition"]], "skbio.stats.composition.alr": [[526, "skbio-stats-composition-alr"]], "skbio.stats.composition.alr_inv": [[527, "skbio-stats-composition-alr-inv"]], "skbio.stats.composition.ancom": [[528, "skbio-stats-composition-ancom"]], "skbio.stats.composition.centralize": [[529, "skbio-stats-composition-centralize"]], "skbio.stats.composition.closure": [[530, "skbio-stats-composition-closure"]], "skbio.stats.composition.clr": [[531, "skbio-stats-composition-clr"]], "skbio.stats.composition.clr_inv": [[532, "skbio-stats-composition-clr-inv"]], "skbio.stats.composition.dirmult_ttest": [[533, "skbio-stats-composition-dirmult-ttest"]], "skbio.stats.composition.ilr": [[534, "skbio-stats-composition-ilr"]], "skbio.stats.composition.ilr_inv": [[535, "skbio-stats-composition-ilr-inv"]], "skbio.stats.composition.inner": [[536, "skbio-stats-composition-inner"]], "skbio.stats.composition.multi_replace": [[537, "skbio-stats-composition-multi-replace"]], "skbio.stats.composition.multiplicative_replacement": [[538, "skbio-stats-composition-multiplicative-replacement"]], "skbio.stats.composition.pairwise_vlr": [[539, "skbio-stats-composition-pairwise-vlr"]], "skbio.stats.composition.perturb": [[540, "skbio-stats-composition-perturb"]], "skbio.stats.composition.perturb_inv": [[541, "skbio-stats-composition-perturb-inv"]], "skbio.stats.composition.power": [[542, "skbio-stats-composition-power"]], "skbio.stats.composition.sbp_basis": [[543, "skbio-stats-composition-sbp-basis"]], "skbio.stats.composition.tree_basis": [[544, "skbio-stats-composition-tree-basis"]], "skbio.stats.composition.vlr": [[545, "skbio-stats-composition-vlr"]], "Distance matrices and distance-based statistics (skbio.stats.distance)": [[546, "distance-matrices-and-distance-based-statistics-skbio-stats-distance"]], "Data Structures: DissimilarityMatrix and DistanceMatrix": [[546, "data-structures-dissimilaritymatrix-and-distancematrix"]], "Distance-based statistics": [[546, "distance-based-statistics"]], "Categorical Variable Stats": [[546, "categorical-variable-stats"]], "Continuous Variable Stats": [[546, "continuous-variable-stats"]], "Distance Matrix Comparisons": [[546, "distance-matrix-comparisons"]], "skbio.stats.distance.DissimilarityMatrix": [[547, "skbio-stats-distance-dissimilaritymatrix"]], "skbio.stats.distance.DissimilarityMatrix.__contains__": [[548, "skbio-stats-distance-dissimilaritymatrix-contains"]], "skbio.stats.distance.DissimilarityMatrix.__eq__": [[549, "skbio-stats-distance-dissimilaritymatrix-eq"]], "skbio.stats.distance.DissimilarityMatrix.__ge__": [[550, "skbio-stats-distance-dissimilaritymatrix-ge"]], "skbio.stats.distance.DissimilarityMatrix.__getitem__": [[551, "skbio-stats-distance-dissimilaritymatrix-getitem"]], "skbio.stats.distance.DissimilarityMatrix.__getstate__": [[552, "skbio-stats-distance-dissimilaritymatrix-getstate"]], "skbio.stats.distance.DissimilarityMatrix.__gt__": [[553, "skbio-stats-distance-dissimilaritymatrix-gt"]], "skbio.stats.distance.DissimilarityMatrix.__le__": [[554, "skbio-stats-distance-dissimilaritymatrix-le"]], "skbio.stats.distance.DissimilarityMatrix.__lt__": [[555, "skbio-stats-distance-dissimilaritymatrix-lt"]], "skbio.stats.distance.DissimilarityMatrix.__ne__": [[556, "skbio-stats-distance-dissimilaritymatrix-ne"]], "skbio.stats.distance.DissimilarityMatrix.__str__": [[557, "skbio-stats-distance-dissimilaritymatrix-str"]], "skbio.stats.distance.DissimilarityMatrix.between": [[558, "skbio-stats-distance-dissimilaritymatrix-between"]], "skbio.stats.distance.DissimilarityMatrix.copy": [[559, "skbio-stats-distance-dissimilaritymatrix-copy"]], "skbio.stats.distance.DissimilarityMatrix.filter": [[560, "skbio-stats-distance-dissimilaritymatrix-filter"]], "skbio.stats.distance.DissimilarityMatrix.from_iterable": [[561, "skbio-stats-distance-dissimilaritymatrix-from-iterable"]], "skbio.stats.distance.DissimilarityMatrix.index": [[562, "skbio-stats-distance-dissimilaritymatrix-index"]], "skbio.stats.distance.DissimilarityMatrix.plot": [[563, "skbio-stats-distance-dissimilaritymatrix-plot"]], "skbio.stats.distance.DissimilarityMatrix.read": [[564, "skbio-stats-distance-dissimilaritymatrix-read"]], "skbio.stats.distance.DissimilarityMatrix.redundant_form": [[565, "skbio-stats-distance-dissimilaritymatrix-redundant-form"]], "skbio.stats.distance.DissimilarityMatrix.to_data_frame": [[566, "skbio-stats-distance-dissimilaritymatrix-to-data-frame"]], "skbio.stats.distance.DissimilarityMatrix.transpose": [[567, "skbio-stats-distance-dissimilaritymatrix-transpose"]], "skbio.stats.distance.DissimilarityMatrix.within": [[568, "skbio-stats-distance-dissimilaritymatrix-within"]], "skbio.stats.distance.DissimilarityMatrix.write": [[569, "skbio-stats-distance-dissimilaritymatrix-write"]], "skbio.stats.distance.DissimilarityMatrixError": [[570, "skbio-stats-distance-dissimilaritymatrixerror"]], "skbio.stats.distance.DistanceMatrix": [[571, "skbio-stats-distance-distancematrix"]], "skbio.stats.distance.DistanceMatrix.__contains__": [[572, "skbio-stats-distance-distancematrix-contains"]], "skbio.stats.distance.DistanceMatrix.__eq__": [[573, "skbio-stats-distance-distancematrix-eq"]], "skbio.stats.distance.DistanceMatrix.__ge__": [[574, "skbio-stats-distance-distancematrix-ge"]], "skbio.stats.distance.DistanceMatrix.__getitem__": [[575, "skbio-stats-distance-distancematrix-getitem"]], "skbio.stats.distance.DistanceMatrix.__getstate__": [[576, "skbio-stats-distance-distancematrix-getstate"]], "skbio.stats.distance.DistanceMatrix.__gt__": [[577, "skbio-stats-distance-distancematrix-gt"]], "skbio.stats.distance.DistanceMatrix.__le__": [[578, "skbio-stats-distance-distancematrix-le"]], "skbio.stats.distance.DistanceMatrix.__lt__": [[579, "skbio-stats-distance-distancematrix-lt"]], "skbio.stats.distance.DistanceMatrix.__ne__": [[580, "skbio-stats-distance-distancematrix-ne"]], "skbio.stats.distance.DistanceMatrix.__str__": [[581, "skbio-stats-distance-distancematrix-str"]], "skbio.stats.distance.DistanceMatrix.between": [[582, "skbio-stats-distance-distancematrix-between"]], "skbio.stats.distance.DistanceMatrix.condensed_form": [[583, "skbio-stats-distance-distancematrix-condensed-form"]], "skbio.stats.distance.DistanceMatrix.copy": [[584, "skbio-stats-distance-distancematrix-copy"]], "skbio.stats.distance.DistanceMatrix.filter": [[585, "skbio-stats-distance-distancematrix-filter"]], "skbio.stats.distance.DistanceMatrix.from_iterable": [[586, "skbio-stats-distance-distancematrix-from-iterable"]], "skbio.stats.distance.DistanceMatrix.index": [[587, "skbio-stats-distance-distancematrix-index"]], "skbio.stats.distance.DistanceMatrix.permute": [[588, "skbio-stats-distance-distancematrix-permute"]], "skbio.stats.distance.DistanceMatrix.plot": [[589, "skbio-stats-distance-distancematrix-plot"]], "skbio.stats.distance.DistanceMatrix.read": [[590, "skbio-stats-distance-distancematrix-read"]], "skbio.stats.distance.DistanceMatrix.redundant_form": [[591, "skbio-stats-distance-distancematrix-redundant-form"]], "skbio.stats.distance.DistanceMatrix.to_data_frame": [[592, "skbio-stats-distance-distancematrix-to-data-frame"]], "skbio.stats.distance.DistanceMatrix.to_series": [[593, "skbio-stats-distance-distancematrix-to-series"]], "skbio.stats.distance.DistanceMatrix.transpose": [[594, "skbio-stats-distance-distancematrix-transpose"]], "skbio.stats.distance.DistanceMatrix.within": [[595, "skbio-stats-distance-distancematrix-within"]], "skbio.stats.distance.DistanceMatrix.write": [[596, "skbio-stats-distance-distancematrix-write"]], "skbio.stats.distance.DistanceMatrixError": [[597, "skbio-stats-distance-distancematrixerror"]], "skbio.stats.distance.MissingIDError": [[598, "skbio-stats-distance-missingiderror"]], "skbio.stats.distance.anosim": [[599, "skbio-stats-distance-anosim"]], "skbio.stats.distance.bioenv": [[600, "skbio-stats-distance-bioenv"]], "skbio.stats.distance.mantel": [[601, "skbio-stats-distance-mantel"]], "skbio.stats.distance.permanova": [[602, "skbio-stats-distance-permanova"]], "skbio.stats.distance.permdisp": [[603, "skbio-stats-distance-permdisp"]], "skbio.stats.distance.pwmantel": [[604, "skbio-stats-distance-pwmantel"]], "skbio.stats.distance.randdm": [[605, "skbio-stats-distance-randdm"]], "Evolutionary statistics (skbio.stats.evolve)": [[606, "evolutionary-statistics-skbio-stats-evolve"]], "Cophylogenetic methods": [[606, "cophylogenetic-methods"]], "skbio.stats.evolve.hommola_cospeciation": [[607, "skbio-stats-evolve-hommola-cospeciation"]], "Gradient analyses (skbio.stats.gradient)": [[608, "gradient-analyses-skbio-stats-gradient"]], "skbio.stats.gradient.AverageGradientANOVA": [[609, "skbio-stats-gradient-averagegradientanova"]], "skbio.stats.gradient.AverageGradientANOVA.__eq__": [[610, "skbio-stats-gradient-averagegradientanova-eq"]], "skbio.stats.gradient.AverageGradientANOVA.__ge__": [[611, "skbio-stats-gradient-averagegradientanova-ge"]], "skbio.stats.gradient.AverageGradientANOVA.__getstate__": [[612, "skbio-stats-gradient-averagegradientanova-getstate"]], "skbio.stats.gradient.AverageGradientANOVA.__gt__": [[613, "skbio-stats-gradient-averagegradientanova-gt"]], "skbio.stats.gradient.AverageGradientANOVA.__hash__": [[614, "skbio-stats-gradient-averagegradientanova-hash"]], "skbio.stats.gradient.AverageGradientANOVA.__le__": [[615, "skbio-stats-gradient-averagegradientanova-le"]], "skbio.stats.gradient.AverageGradientANOVA.__lt__": [[616, "skbio-stats-gradient-averagegradientanova-lt"]], "skbio.stats.gradient.AverageGradientANOVA.__ne__": [[617, "skbio-stats-gradient-averagegradientanova-ne"]], "skbio.stats.gradient.AverageGradientANOVA.__str__": [[618, "skbio-stats-gradient-averagegradientanova-str"]], "skbio.stats.gradient.AverageGradientANOVA.get_trajectories": [[619, "skbio-stats-gradient-averagegradientanova-get-trajectories"]], "skbio.stats.gradient.CategoryResults": [[620, "skbio-stats-gradient-categoryresults"]], "skbio.stats.gradient.CategoryResults.__eq__": [[621, "skbio-stats-gradient-categoryresults-eq"]], "skbio.stats.gradient.CategoryResults.__ge__": [[622, "skbio-stats-gradient-categoryresults-ge"]], "skbio.stats.gradient.CategoryResults.__getstate__": [[623, "skbio-stats-gradient-categoryresults-getstate"]], "skbio.stats.gradient.CategoryResults.__gt__": [[624, "skbio-stats-gradient-categoryresults-gt"]], "skbio.stats.gradient.CategoryResults.__hash__": [[625, "skbio-stats-gradient-categoryresults-hash"]], "skbio.stats.gradient.CategoryResults.__le__": [[626, "skbio-stats-gradient-categoryresults-le"]], "skbio.stats.gradient.CategoryResults.__lt__": [[627, "skbio-stats-gradient-categoryresults-lt"]], "skbio.stats.gradient.CategoryResults.__ne__": [[628, "skbio-stats-gradient-categoryresults-ne"]], "skbio.stats.gradient.CategoryResults.__str__": [[629, "skbio-stats-gradient-categoryresults-str"]], "skbio.stats.gradient.CategoryResults.to_files": [[630, "skbio-stats-gradient-categoryresults-to-files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[631, "skbio-stats-gradient-firstdifferencegradientanova"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__": [[632, "skbio-stats-gradient-firstdifferencegradientanova-eq"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__": [[633, "skbio-stats-gradient-firstdifferencegradientanova-ge"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__": [[634, "skbio-stats-gradient-firstdifferencegradientanova-getstate"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__": [[635, "skbio-stats-gradient-firstdifferencegradientanova-gt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__": [[636, "skbio-stats-gradient-firstdifferencegradientanova-hash"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__": [[637, "skbio-stats-gradient-firstdifferencegradientanova-le"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__": [[638, "skbio-stats-gradient-firstdifferencegradientanova-lt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__": [[639, "skbio-stats-gradient-firstdifferencegradientanova-ne"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__": [[640, "skbio-stats-gradient-firstdifferencegradientanova-str"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories": [[641, "skbio-stats-gradient-firstdifferencegradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVA": [[642, "skbio-stats-gradient-gradientanova"]], "skbio.stats.gradient.GradientANOVA.__eq__": [[643, "skbio-stats-gradient-gradientanova-eq"]], "skbio.stats.gradient.GradientANOVA.__ge__": [[644, "skbio-stats-gradient-gradientanova-ge"]], "skbio.stats.gradient.GradientANOVA.__getstate__": [[645, "skbio-stats-gradient-gradientanova-getstate"]], "skbio.stats.gradient.GradientANOVA.__gt__": [[646, "skbio-stats-gradient-gradientanova-gt"]], "skbio.stats.gradient.GradientANOVA.__hash__": [[647, "skbio-stats-gradient-gradientanova-hash"]], "skbio.stats.gradient.GradientANOVA.__le__": [[648, "skbio-stats-gradient-gradientanova-le"]], "skbio.stats.gradient.GradientANOVA.__lt__": [[649, "skbio-stats-gradient-gradientanova-lt"]], "skbio.stats.gradient.GradientANOVA.__ne__": [[650, "skbio-stats-gradient-gradientanova-ne"]], "skbio.stats.gradient.GradientANOVA.__str__": [[651, "skbio-stats-gradient-gradientanova-str"]], "skbio.stats.gradient.GradientANOVA.get_trajectories": [[652, "skbio-stats-gradient-gradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[653, "skbio-stats-gradient-gradientanovaresults"]], "skbio.stats.gradient.GradientANOVAResults.__eq__": [[654, "skbio-stats-gradient-gradientanovaresults-eq"]], "skbio.stats.gradient.GradientANOVAResults.__ge__": [[655, "skbio-stats-gradient-gradientanovaresults-ge"]], "skbio.stats.gradient.GradientANOVAResults.__getstate__": [[656, "skbio-stats-gradient-gradientanovaresults-getstate"]], "skbio.stats.gradient.GradientANOVAResults.__gt__": [[657, "skbio-stats-gradient-gradientanovaresults-gt"]], "skbio.stats.gradient.GradientANOVAResults.__hash__": [[658, "skbio-stats-gradient-gradientanovaresults-hash"]], "skbio.stats.gradient.GradientANOVAResults.__le__": [[659, "skbio-stats-gradient-gradientanovaresults-le"]], "skbio.stats.gradient.GradientANOVAResults.__lt__": [[660, "skbio-stats-gradient-gradientanovaresults-lt"]], "skbio.stats.gradient.GradientANOVAResults.__ne__": [[661, "skbio-stats-gradient-gradientanovaresults-ne"]], "skbio.stats.gradient.GradientANOVAResults.__str__": [[662, "skbio-stats-gradient-gradientanovaresults-str"]], "skbio.stats.gradient.GradientANOVAResults.to_files": [[663, "skbio-stats-gradient-gradientanovaresults-to-files"]], "skbio.stats.gradient.GroupResults": [[664, "skbio-stats-gradient-groupresults"]], "skbio.stats.gradient.GroupResults.__eq__": [[665, "skbio-stats-gradient-groupresults-eq"]], "skbio.stats.gradient.GroupResults.__ge__": [[666, "skbio-stats-gradient-groupresults-ge"]], "skbio.stats.gradient.GroupResults.__getstate__": [[667, "skbio-stats-gradient-groupresults-getstate"]], "skbio.stats.gradient.GroupResults.__gt__": [[668, "skbio-stats-gradient-groupresults-gt"]], "skbio.stats.gradient.GroupResults.__hash__": [[669, "skbio-stats-gradient-groupresults-hash"]], "skbio.stats.gradient.GroupResults.__le__": [[670, "skbio-stats-gradient-groupresults-le"]], "skbio.stats.gradient.GroupResults.__lt__": [[671, "skbio-stats-gradient-groupresults-lt"]], "skbio.stats.gradient.GroupResults.__ne__": [[672, "skbio-stats-gradient-groupresults-ne"]], "skbio.stats.gradient.GroupResults.__str__": [[673, "skbio-stats-gradient-groupresults-str"]], "skbio.stats.gradient.GroupResults.to_files": [[674, "skbio-stats-gradient-groupresults-to-files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[675, "skbio-stats-gradient-trajectorygradientanova"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__": [[676, "skbio-stats-gradient-trajectorygradientanova-eq"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__": [[677, "skbio-stats-gradient-trajectorygradientanova-ge"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__": [[678, "skbio-stats-gradient-trajectorygradientanova-getstate"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__": [[679, "skbio-stats-gradient-trajectorygradientanova-gt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__": [[680, "skbio-stats-gradient-trajectorygradientanova-hash"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__le__": [[681, "skbio-stats-gradient-trajectorygradientanova-le"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__": [[682, "skbio-stats-gradient-trajectorygradientanova-lt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__": [[683, "skbio-stats-gradient-trajectorygradientanova-ne"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__str__": [[684, "skbio-stats-gradient-trajectorygradientanova-str"]], "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories": [[685, "skbio-stats-gradient-trajectorygradientanova-get-trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[686, "skbio-stats-gradient-windowdifferencegradientanova"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__": [[687, "skbio-stats-gradient-windowdifferencegradientanova-eq"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__": [[688, "skbio-stats-gradient-windowdifferencegradientanova-ge"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__": [[689, "skbio-stats-gradient-windowdifferencegradientanova-getstate"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__": [[690, "skbio-stats-gradient-windowdifferencegradientanova-gt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__": [[691, "skbio-stats-gradient-windowdifferencegradientanova-hash"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__": [[692, "skbio-stats-gradient-windowdifferencegradientanova-le"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__": [[693, "skbio-stats-gradient-windowdifferencegradientanova-lt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__": [[694, "skbio-stats-gradient-windowdifferencegradientanova-ne"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__": [[695, "skbio-stats-gradient-windowdifferencegradientanova-str"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories": [[696, "skbio-stats-gradient-windowdifferencegradientanova-get-trajectories"]], "skbio.stats.isubsample": [[697, "skbio-stats-isubsample"]], "Ordination methods (skbio.stats.ordination)": [[698, "ordination-methods-skbio-stats-ordination"]], "Ordination Functions": [[698, "ordination-functions"]], "Utility Functions": [[698, "utility-functions"], [879, "utility-functions"]], "skbio.stats.ordination.OrdinationResults": [[699, "skbio-stats-ordination-ordinationresults"]], "skbio.stats.ordination.OrdinationResults.__eq__": [[700, "skbio-stats-ordination-ordinationresults-eq"]], "skbio.stats.ordination.OrdinationResults.__ge__": [[701, "skbio-stats-ordination-ordinationresults-ge"]], "skbio.stats.ordination.OrdinationResults.__getstate__": [[702, "skbio-stats-ordination-ordinationresults-getstate"]], "skbio.stats.ordination.OrdinationResults.__gt__": [[703, "skbio-stats-ordination-ordinationresults-gt"]], "skbio.stats.ordination.OrdinationResults.__hash__": [[704, "skbio-stats-ordination-ordinationresults-hash"]], "skbio.stats.ordination.OrdinationResults.__le__": [[705, "skbio-stats-ordination-ordinationresults-le"]], "skbio.stats.ordination.OrdinationResults.__lt__": [[706, "skbio-stats-ordination-ordinationresults-lt"]], "skbio.stats.ordination.OrdinationResults.__ne__": [[707, "skbio-stats-ordination-ordinationresults-ne"]], "skbio.stats.ordination.OrdinationResults.__str__": [[708, "skbio-stats-ordination-ordinationresults-str"]], "skbio.stats.ordination.OrdinationResults.plot": [[709, "skbio-stats-ordination-ordinationresults-plot"]], "skbio.stats.ordination.OrdinationResults.read": [[710, "skbio-stats-ordination-ordinationresults-read"]], "skbio.stats.ordination.OrdinationResults.write": [[711, "skbio-stats-ordination-ordinationresults-write"]], "skbio.stats.ordination.ca": [[712, "skbio-stats-ordination-ca"]], "skbio.stats.ordination.cca": [[713, "skbio-stats-ordination-cca"]], "skbio.stats.ordination.corr": [[714, "skbio-stats-ordination-corr"]], "skbio.stats.ordination.e_matrix": [[715, "skbio-stats-ordination-e-matrix"]], "skbio.stats.ordination.f_matrix": [[716, "skbio-stats-ordination-f-matrix"]], "skbio.stats.ordination.mean_and_std": [[717, "skbio-stats-ordination-mean-and-std"]], "skbio.stats.ordination.pcoa": [[718, "skbio-stats-ordination-pcoa"]], "skbio.stats.ordination.pcoa_biplot": [[719, "skbio-stats-ordination-pcoa-biplot"]], "skbio.stats.ordination.rda": [[720, "skbio-stats-ordination-rda"]], "skbio.stats.ordination.scale": [[721, "skbio-stats-ordination-scale"]], "skbio.stats.ordination.svd_rank": [[722, "skbio-stats-ordination-svd-rank"]], "Empirical Power Estimation (skbio.stats.power)": [[723, "empirical-power-estimation-skbio-stats-power"]], "skbio.stats.power.confidence_bound": [[724, "skbio-stats-power-confidence-bound"]], "skbio.stats.power.paired_subsamples": [[725, "skbio-stats-power-paired-subsamples"]], "skbio.stats.power.subsample_paired_power": [[726, "skbio-stats-power-subsample-paired-power"]], "skbio.stats.power.subsample_power": [[727, "skbio-stats-power-subsample-power"]], "skbio.stats.subsample_counts": [[728, "skbio-stats-subsample-counts"]], "skbio.tree.DuplicateNodeError": [[729, "skbio-tree-duplicatenodeerror"]], "skbio.tree.MissingNodeError": [[730, "skbio-tree-missingnodeerror"]], "skbio.tree.NoLengthError": [[731, "skbio-tree-nolengtherror"]], "skbio.tree.NoParentError": [[732, "skbio-tree-noparenterror"]], "skbio.tree.TreeError": [[733, "skbio-tree-treeerror"]], "skbio.tree.TreeNode": [[734, "skbio-tree-treenode"]], "skbio.tree.TreeNode.__copy__": [[735, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.__deepcopy__": [[736, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.__eq__": [[737, "skbio-tree-treenode-eq"]], "skbio.tree.TreeNode.__ge__": [[738, "skbio-tree-treenode-ge"]], "skbio.tree.TreeNode.__getitem__": [[739, "skbio-tree-treenode-getitem"]], "skbio.tree.TreeNode.__getstate__": [[740, "skbio-tree-treenode-getstate"]], "skbio.tree.TreeNode.__gt__": [[741, "skbio-tree-treenode-gt"]], "skbio.tree.TreeNode.__hash__": [[742, "skbio-tree-treenode-hash"]], "skbio.tree.TreeNode.__iter__": [[743, "skbio-tree-treenode-iter"]], "skbio.tree.TreeNode.__le__": [[744, "skbio-tree-treenode-le"]], "skbio.tree.TreeNode.__len__": [[745, "skbio-tree-treenode-len"]], "skbio.tree.TreeNode.__lt__": [[746, "skbio-tree-treenode-lt"]], "skbio.tree.TreeNode.__ne__": [[747, "skbio-tree-treenode-ne"]], "skbio.tree.TreeNode.__str__": [[748, "skbio-tree-treenode-str"]], "skbio.tree.TreeNode.accumulate_to_ancestor": [[749, "skbio-tree-treenode-accumulate-to-ancestor"]], "skbio.tree.TreeNode.ancestors": [[750, "skbio-tree-treenode-ancestors"]], "skbio.tree.TreeNode.append": [[751, "skbio-tree-treenode-append"]], "skbio.tree.TreeNode.ascii_art": [[752, "skbio-tree-treenode-ascii-art"]], "skbio.tree.TreeNode.assign_ids": [[753, "skbio-tree-treenode-assign-ids"]], "skbio.tree.TreeNode.assign_supports": [[754, "skbio-tree-treenode-assign-supports"]], "skbio.tree.TreeNode.bifurcate": [[755, "skbio-tree-treenode-bifurcate"]], "skbio.tree.TreeNode.cache_attr": [[756, "skbio-tree-treenode-cache-attr"]], "skbio.tree.TreeNode.compare_rfd": [[757, "skbio-tree-treenode-compare-rfd"]], "skbio.tree.TreeNode.compare_subsets": [[758, "skbio-tree-treenode-compare-subsets"]], "skbio.tree.TreeNode.compare_tip_distances": [[759, "skbio-tree-treenode-compare-tip-distances"]], "skbio.tree.TreeNode.copy": [[760, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.count": [[761, "skbio-tree-treenode-count"]], "skbio.tree.TreeNode.create_caches": [[762, "skbio-tree-treenode-create-caches"]], "skbio.tree.TreeNode.deepcopy": [[763, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.descending_branch_length": [[764, "skbio-tree-treenode-descending-branch-length"]], "skbio.tree.TreeNode.distance": [[765, "skbio-tree-treenode-distance"]], "skbio.tree.TreeNode.extend": [[766, "skbio-tree-treenode-extend"]], "skbio.tree.TreeNode.find": [[767, "skbio-tree-treenode-find"]], "skbio.tree.TreeNode.find_all": [[768, "skbio-tree-treenode-find-all"]], "skbio.tree.TreeNode.find_by_func": [[769, "skbio-tree-treenode-find-by-func"]], "skbio.tree.TreeNode.find_by_id": [[770, "skbio-tree-treenode-find-by-id"]], "skbio.tree.TreeNode.from_linkage_matrix": [[771, "skbio-tree-treenode-from-linkage-matrix"]], "skbio.tree.TreeNode.from_taxdump": [[772, "skbio-tree-treenode-from-taxdump"]], "skbio.tree.TreeNode.from_taxonomy": [[773, "skbio-tree-treenode-from-taxonomy"]], "skbio.tree.TreeNode.get_max_distance": [[774, "skbio-tree-treenode-get-max-distance"]], "skbio.tree.TreeNode.has_children": [[775, "skbio-tree-treenode-has-children"]], "skbio.tree.TreeNode.index_tree": [[776, "skbio-tree-treenode-index-tree"]], "skbio.tree.TreeNode.invalidate_caches": [[777, "skbio-tree-treenode-invalidate-caches"]], "skbio.tree.TreeNode.is_root": [[778, "skbio-tree-treenode-is-root"]], "skbio.tree.TreeNode.is_tip": [[779, "skbio-tree-treenode-is-tip"]], "skbio.tree.TreeNode.lca": [[780, "skbio-tree-treenode-lca"]], "skbio.tree.TreeNode.levelorder": [[781, "skbio-tree-treenode-levelorder"]], "skbio.tree.TreeNode.lowest_common_ancestor": [[782, "skbio-tree-treenode-lowest-common-ancestor"]], "skbio.tree.TreeNode.neighbors": [[783, "skbio-tree-treenode-neighbors"]], "skbio.tree.TreeNode.non_tips": [[784, "skbio-tree-treenode-non-tips"]], "skbio.tree.TreeNode.observed_node_counts": [[785, "skbio-tree-treenode-observed-node-counts"]], "skbio.tree.TreeNode.pop": [[786, "skbio-tree-treenode-pop"]], "skbio.tree.TreeNode.postorder": [[787, "skbio-tree-treenode-postorder"]], "skbio.tree.TreeNode.pre_and_postorder": [[788, "skbio-tree-treenode-pre-and-postorder"]], "skbio.tree.TreeNode.preorder": [[789, "skbio-tree-treenode-preorder"]], "skbio.tree.TreeNode.prune": [[790, "skbio-tree-treenode-prune"]], "skbio.tree.TreeNode.read": [[791, "skbio-tree-treenode-read"]], "skbio.tree.TreeNode.remove": [[792, "skbio-tree-treenode-remove"]], "skbio.tree.TreeNode.remove_deleted": [[793, "skbio-tree-treenode-remove-deleted"]], "skbio.tree.TreeNode.root": [[794, "skbio-tree-treenode-root"]], "skbio.tree.TreeNode.root_at": [[795, "skbio-tree-treenode-root-at"]], "skbio.tree.TreeNode.root_at_midpoint": [[796, "skbio-tree-treenode-root-at-midpoint"]], "skbio.tree.TreeNode.shear": [[797, "skbio-tree-treenode-shear"]], "skbio.tree.TreeNode.shuffle": [[798, "skbio-tree-treenode-shuffle"]], "skbio.tree.TreeNode.siblings": [[799, "skbio-tree-treenode-siblings"]], "skbio.tree.TreeNode.subset": [[800, "skbio-tree-treenode-subset"]], "skbio.tree.TreeNode.subsets": [[801, "skbio-tree-treenode-subsets"]], "skbio.tree.TreeNode.subtree": [[802, "skbio-tree-treenode-subtree"]], "skbio.tree.TreeNode.tip_tip_distances": [[803, "skbio-tree-treenode-tip-tip-distances"]], "skbio.tree.TreeNode.tips": [[804, "skbio-tree-treenode-tips"]], "skbio.tree.TreeNode.to_array": [[805, "skbio-tree-treenode-to-array"]], "skbio.tree.TreeNode.to_taxonomy": [[806, "skbio-tree-treenode-to-taxonomy"]], "skbio.tree.TreeNode.traverse": [[807, "skbio-tree-treenode-traverse"]], "skbio.tree.TreeNode.unpack": [[808, "skbio-tree-treenode-unpack"]], "skbio.tree.TreeNode.unpack_by_func": [[809, "skbio-tree-treenode-unpack-by-func"]], "skbio.tree.TreeNode.unrooted_copy": [[810, "skbio-tree-treenode-unrooted-copy"]], "skbio.tree.TreeNode.unrooted_deepcopy": [[811, "skbio-tree-treenode-unrooted-deepcopy"]], "skbio.tree.TreeNode.write": [[812, "skbio-tree-treenode-write"]], "skbio.tree.majority_rule": [[813, "skbio-tree-majority-rule"]], "skbio.tree.nj": [[814, "skbio-tree-nj"]], "skbio.util.EfficiencyWarning": [[815, "skbio-util-efficiencywarning"]], "skbio.util.RepresentationWarning": [[816, "skbio-util-representationwarning"]], "skbio.util.assert_data_frame_almost_equal": [[817, "skbio-util-assert-data-frame-almost-equal"]], "skbio.util.assert_ordination_results_equal": [[818, "skbio-util-assert-ordination-results-equal"]], "skbio.util.cardinal_to_ordinal": [[819, "skbio-util-cardinal-to-ordinal"]], "skbio.util.classproperty": [[820, "skbio-util-classproperty"]], "skbio.util.classproperty.__delete__": [[821, "skbio-util-classproperty-delete"]], "skbio.util.classproperty.__eq__": [[822, "skbio-util-classproperty-eq"]], "skbio.util.classproperty.__ge__": [[823, "skbio-util-classproperty-ge"]], "skbio.util.classproperty.__get__": [[824, "skbio-util-classproperty-get"]], "skbio.util.classproperty.__getstate__": [[825, "skbio-util-classproperty-getstate"]], "skbio.util.classproperty.__gt__": [[826, "skbio-util-classproperty-gt"]], "skbio.util.classproperty.__hash__": [[827, "skbio-util-classproperty-hash"]], "skbio.util.classproperty.__le__": [[828, "skbio-util-classproperty-le"]], "skbio.util.classproperty.__lt__": [[829, "skbio-util-classproperty-lt"]], "skbio.util.classproperty.__ne__": [[830, "skbio-util-classproperty-ne"]], "skbio.util.classproperty.__set__": [[831, "skbio-util-classproperty-set"]], "skbio.util.classproperty.__set_name__": [[832, "skbio-util-classproperty-set-name"]], "skbio.util.classproperty.__str__": [[833, "skbio-util-classproperty-str"]], "skbio.util.classproperty.deleter": [[834, "skbio-util-classproperty-deleter"]], "skbio.util.classproperty.getter": [[835, "skbio-util-classproperty-getter"]], "skbio.util.classproperty.setter": [[836, "skbio-util-classproperty-setter"]], "skbio.util.find_duplicates": [[837, "skbio-util-find-duplicates"]], "skbio.util.get_data_path": [[838, "skbio-util-get-data-path"]], "skbio.util.safe_md5": [[839, "skbio-util-safe-md5"]], "skbio.workflow.Workflow": [[840, "skbio-workflow-workflow"]], "skbio.workflow.Workflow.__call__": [[841, "skbio-workflow-workflow-call"]], "skbio.workflow.Workflow.__eq__": [[842, "skbio-workflow-workflow-eq"]], "skbio.workflow.Workflow.__ge__": [[843, "skbio-workflow-workflow-ge"]], "skbio.workflow.Workflow.__getstate__": [[844, "skbio-workflow-workflow-getstate"]], "skbio.workflow.Workflow.__gt__": [[845, "skbio-workflow-workflow-gt"]], "skbio.workflow.Workflow.__hash__": [[846, "skbio-workflow-workflow-hash"]], "skbio.workflow.Workflow.__le__": [[847, "skbio-workflow-workflow-le"]], "skbio.workflow.Workflow.__lt__": [[848, "skbio-workflow-workflow-lt"]], "skbio.workflow.Workflow.__ne__": [[849, "skbio-workflow-workflow-ne"]], "skbio.workflow.Workflow.__str__": [[850, "skbio-workflow-workflow-str"]], "skbio.workflow.Workflow.initialize_state": [[851, "skbio-workflow-workflow-initialize-state"]], "skbio.workflow.method": [[852, "skbio-workflow-method"]], "skbio.workflow.method.__call__": [[853, "skbio-workflow-method-call"]], "skbio.workflow.method.__eq__": [[854, "skbio-workflow-method-eq"]], "skbio.workflow.method.__ge__": [[855, "skbio-workflow-method-ge"]], "skbio.workflow.method.__getstate__": [[856, "skbio-workflow-method-getstate"]], "skbio.workflow.method.__gt__": [[857, "skbio-workflow-method-gt"]], "skbio.workflow.method.__hash__": [[858, "skbio-workflow-method-hash"]], "skbio.workflow.method.__le__": [[859, "skbio-workflow-method-le"]], "skbio.workflow.method.__lt__": [[860, "skbio-workflow-method-lt"]], "skbio.workflow.method.__ne__": [[861, "skbio-workflow-method-ne"]], "skbio.workflow.method.__str__": [[862, "skbio-workflow-method-str"]], "skbio.workflow.requires": [[863, "skbio-workflow-requires"]], "skbio.workflow.requires.__call__": [[864, "skbio-workflow-requires-call"]], "skbio.workflow.requires.__eq__": [[865, "skbio-workflow-requires-eq"]], "skbio.workflow.requires.__ge__": [[866, "skbio-workflow-requires-ge"]], "skbio.workflow.requires.__getstate__": [[867, "skbio-workflow-requires-getstate"]], "skbio.workflow.requires.__gt__": [[868, "skbio-workflow-requires-gt"]], "skbio.workflow.requires.__hash__": [[869, "skbio-workflow-requires-hash"]], "skbio.workflow.requires.__le__": [[870, "skbio-workflow-requires-le"]], "skbio.workflow.requires.__lt__": [[871, "skbio-workflow-requires-lt"]], "skbio.workflow.requires.__ne__": [[872, "skbio-workflow-requires-ne"]], "skbio.workflow.requires.__str__": [[873, "skbio-workflow-requires-str"]], "scikit-bio 0.6.0-dev": [[874, "scikit-bio-version"]], "API Reference": [[874, "api-reference"]], "File I/O (skbio.io)": [[875, "file-i-o-skbio-io"]], "Supported file formats": [[875, "supported-file-formats"]], "User functions": [[875, "user-functions"]], "User exceptions and warnings": [[875, "user-exceptions-and-warnings"]], "Introduction to I/O": [[875, "introduction-to-i-o"]], "What kinds of files scikit-bio can use": [[875, "what-kinds-of-files-scikit-bio-can-use"]], "Reading files into scikit-bio": [[875, "reading-files-into-scikit-bio"]], "Writing files from scikit-bio": [[875, "writing-files-from-scikit-bio"]], "Metadata (skbio.metadata)": [[876, "metadata-skbio-metadata"]], "Sequences (skbio.sequence)": [[877, "sequences-skbio-sequence"]], "Statistics (skbio.stats)": [[878, "statistics-skbio-stats"]], "Tree representations (skbio.tree)": [[879, "tree-representations-skbio-tree"]], "Phylogenetic Reconstruction": [[879, "phylogenetic-reconstruction"]], "Utility functionality (skbio.util)": [[880, "utility-functionality-skbio-util"]], "Testing functionality": [[880, "testing-functionality"]], "Miscellaneous functionality": [[880, "miscellaneous-functionality"]], "Warnings": [[880, "warnings"]], "Constructing workflows (skbio.workflow)": [[881, "constructing-workflows-skbio-workflow"]], "Decorators": [[881, "decorators"]]}, "indexentries": {"module": [[0, "module-skbio.alignment"], [1, "module-skbio.diversity"], [68, "module-skbio.diversity.alpha"], [104, "module-skbio.diversity.beta"], [131, "module-skbio.io.format.binary_dm"], [132, "module-skbio.io.format.blast6"], [133, "module-skbio.io.format.blast7"], [134, "module-skbio.io.format.clustal"], [135, "module-skbio.io.format.embl"], [136, "module-skbio.io.format.fasta"], [137, "module-skbio.io.format.fastq"], [138, "module-skbio.io.format.genbank"], [139, "module-skbio.io.format.gff3"], [140, "module-skbio.io.format.lsmat"], [141, "module-skbio.io.format.newick"], [142, "module-skbio.io.format.ordination"], [143, "module-skbio.io.format.phylip"], [144, "module-skbio.io.format.qseq"], [145, "module-skbio.io.format.sample_metadata"], [146, "module-skbio.io.format.stockholm"], [147, "module-skbio.io.format.taxdump"], [148, "module-skbio.io.registry"], [189, "module-skbio.io.util"], [522, "module-skbio.sequence.distance"], [525, "module-skbio.stats.composition"], [546, "module-skbio.stats.distance"], [606, "module-skbio.stats.evolve"], [608, "module-skbio.stats.gradient"], [698, "module-skbio.stats.ordination"], [723, "module-skbio.stats.power"], [875, "module-skbio.io"], [876, "module-skbio.metadata"], [877, "module-skbio.sequence"], [878, "module-skbio.stats"], [879, "module-skbio.tree"], [880, "module-skbio.util"], [881, "module-skbio.workflow"]], "skbio.alignment": [[0, "module-skbio.alignment"]], "skbio.diversity": [[1, "module-skbio.diversity"]], "alignmentstructure (class in skbio.alignment)": [[2, "skbio.alignment.AlignmentStructure"]], "__eq__() (skbio.alignment.alignmentstructure method)": [[3, "skbio.alignment.AlignmentStructure.__eq__"]], "__ge__() (skbio.alignment.alignmentstructure method)": [[4, "skbio.alignment.AlignmentStructure.__ge__"]], "__getitem__() (skbio.alignment.alignmentstructure method)": [[5, "skbio.alignment.AlignmentStructure.__getitem__"]], "__getstate__() (skbio.alignment.alignmentstructure method)": [[6, "skbio.alignment.AlignmentStructure.__getstate__"]], "__gt__() (skbio.alignment.alignmentstructure method)": [[7, "skbio.alignment.AlignmentStructure.__gt__"]], "__hash__() (skbio.alignment.alignmentstructure method)": [[8, "skbio.alignment.AlignmentStructure.__hash__"]], "__le__() (skbio.alignment.alignmentstructure method)": [[9, "skbio.alignment.AlignmentStructure.__le__"]], "__lt__() (skbio.alignment.alignmentstructure method)": [[10, "skbio.alignment.AlignmentStructure.__lt__"]], "__ne__() (skbio.alignment.alignmentstructure method)": [[11, "skbio.alignment.AlignmentStructure.__ne__"]], "__setstate__() (skbio.alignment.alignmentstructure method)": [[12, "skbio.alignment.AlignmentStructure.__setstate__"]], "__str__() (skbio.alignment.alignmentstructure method)": [[13, "skbio.alignment.AlignmentStructure.__str__"]], "is_zero_based() (skbio.alignment.alignmentstructure method)": [[14, "skbio.alignment.AlignmentStructure.is_zero_based"]], "set_zero_based() (skbio.alignment.alignmentstructure method)": [[15, "skbio.alignment.AlignmentStructure.set_zero_based"]], "stripedsmithwaterman (class in skbio.alignment)": [[16, "skbio.alignment.StripedSmithWaterman"]], "__call__() (skbio.alignment.stripedsmithwaterman method)": [[17, "skbio.alignment.StripedSmithWaterman.__call__"]], "__eq__() (skbio.alignment.stripedsmithwaterman method)": [[18, "skbio.alignment.StripedSmithWaterman.__eq__"]], "__ge__() (skbio.alignment.stripedsmithwaterman method)": [[19, "skbio.alignment.StripedSmithWaterman.__ge__"]], "__getstate__() (skbio.alignment.stripedsmithwaterman method)": [[20, "skbio.alignment.StripedSmithWaterman.__getstate__"]], "__gt__() (skbio.alignment.stripedsmithwaterman method)": [[21, "skbio.alignment.StripedSmithWaterman.__gt__"]], "__hash__() (skbio.alignment.stripedsmithwaterman method)": [[22, "skbio.alignment.StripedSmithWaterman.__hash__"]], "__le__() (skbio.alignment.stripedsmithwaterman method)": [[23, "skbio.alignment.StripedSmithWaterman.__le__"]], "__lt__() (skbio.alignment.stripedsmithwaterman method)": [[24, "skbio.alignment.StripedSmithWaterman.__lt__"]], "__ne__() (skbio.alignment.stripedsmithwaterman method)": [[25, "skbio.alignment.StripedSmithWaterman.__ne__"]], "__setstate__() (skbio.alignment.stripedsmithwaterman method)": [[26, "skbio.alignment.StripedSmithWaterman.__setstate__"]], "__str__() (skbio.alignment.stripedsmithwaterman method)": [[27, "skbio.alignment.StripedSmithWaterman.__str__"]], "tabularmsa (class in skbio.alignment)": [[28, "skbio.alignment.TabularMSA"]], "__bool__() (skbio.alignment.tabularmsa method)": [[29, "skbio.alignment.TabularMSA.__bool__"]], "__contains__() (skbio.alignment.tabularmsa method)": [[30, "skbio.alignment.TabularMSA.__contains__"]], "__copy__() (skbio.alignment.tabularmsa method)": [[31, "skbio.alignment.TabularMSA.__copy__"]], "__deepcopy__() (skbio.alignment.tabularmsa method)": [[32, "skbio.alignment.TabularMSA.__deepcopy__"]], "__eq__() (skbio.alignment.tabularmsa method)": [[33, "skbio.alignment.TabularMSA.__eq__"]], "__ge__() (skbio.alignment.tabularmsa method)": [[34, "skbio.alignment.TabularMSA.__ge__"]], "__getitem__() (skbio.alignment.tabularmsa method)": [[35, "skbio.alignment.TabularMSA.__getitem__"]], "__getstate__() (skbio.alignment.tabularmsa method)": [[36, "skbio.alignment.TabularMSA.__getstate__"]], "__gt__() (skbio.alignment.tabularmsa method)": [[37, "skbio.alignment.TabularMSA.__gt__"]], "__iter__() (skbio.alignment.tabularmsa method)": [[38, "skbio.alignment.TabularMSA.__iter__"]], "__le__() (skbio.alignment.tabularmsa method)": [[39, "skbio.alignment.TabularMSA.__le__"]], "__len__() (skbio.alignment.tabularmsa method)": [[40, "skbio.alignment.TabularMSA.__len__"]], "__lt__() (skbio.alignment.tabularmsa method)": [[41, "skbio.alignment.TabularMSA.__lt__"]], "__ne__() (skbio.alignment.tabularmsa method)": [[42, "skbio.alignment.TabularMSA.__ne__"]], "__reversed__() (skbio.alignment.tabularmsa method)": [[43, "skbio.alignment.TabularMSA.__reversed__"]], "__str__() (skbio.alignment.tabularmsa method)": [[44, "skbio.alignment.TabularMSA.__str__"]], "append() (skbio.alignment.tabularmsa method)": [[45, "skbio.alignment.TabularMSA.append"]], "consensus() (skbio.alignment.tabularmsa method)": [[46, "skbio.alignment.TabularMSA.consensus"]], "conservation() (skbio.alignment.tabularmsa method)": [[47, "skbio.alignment.TabularMSA.conservation"]], "extend() (skbio.alignment.tabularmsa method)": [[48, "skbio.alignment.TabularMSA.extend"]], "from_dict() (skbio.alignment.tabularmsa class method)": [[49, "skbio.alignment.TabularMSA.from_dict"]], "gap_frequencies() (skbio.alignment.tabularmsa method)": [[50, "skbio.alignment.TabularMSA.gap_frequencies"]], "has_metadata() (skbio.alignment.tabularmsa method)": [[51, "skbio.alignment.TabularMSA.has_metadata"]], "has_positional_metadata() (skbio.alignment.tabularmsa method)": [[52, "skbio.alignment.TabularMSA.has_positional_metadata"]], "iter_positions() (skbio.alignment.tabularmsa method)": [[53, "skbio.alignment.TabularMSA.iter_positions"]], "join() (skbio.alignment.tabularmsa method)": [[54, "skbio.alignment.TabularMSA.join"]], "read() (skbio.alignment.tabularmsa class method)": [[55, "skbio.alignment.TabularMSA.read"]], "reassign_index() (skbio.alignment.tabularmsa method)": [[56, "skbio.alignment.TabularMSA.reassign_index"]], "sort() (skbio.alignment.tabularmsa method)": [[57, "skbio.alignment.TabularMSA.sort"]], "to_dict() (skbio.alignment.tabularmsa method)": [[58, "skbio.alignment.TabularMSA.to_dict"]], "write() (skbio.alignment.tabularmsa method)": [[59, "skbio.alignment.TabularMSA.write"]], "global_pairwise_align() (in module skbio.alignment)": [[60, "skbio.alignment.global_pairwise_align"]], "global_pairwise_align_nucleotide() (in module skbio.alignment)": [[61, "skbio.alignment.global_pairwise_align_nucleotide"]], "global_pairwise_align_protein() (in module skbio.alignment)": [[62, "skbio.alignment.global_pairwise_align_protein"]], "local_pairwise_align() (in module skbio.alignment)": [[63, "skbio.alignment.local_pairwise_align"]], "local_pairwise_align_nucleotide() (in module skbio.alignment)": [[64, "skbio.alignment.local_pairwise_align_nucleotide"]], "local_pairwise_align_protein() (in module skbio.alignment)": [[65, "skbio.alignment.local_pairwise_align_protein"]], "local_pairwise_align_ssw() (in module skbio.alignment)": [[66, "skbio.alignment.local_pairwise_align_ssw"]], "make_identity_substitution_matrix() (in module skbio.alignment)": [[67, "skbio.alignment.make_identity_substitution_matrix"]], "skbio.diversity.alpha": [[68, "module-skbio.diversity.alpha"]], "ace() (in module skbio.diversity.alpha)": [[69, "skbio.diversity.alpha.ace"]], "berger_parker_d() (in module skbio.diversity.alpha)": [[70, "skbio.diversity.alpha.berger_parker_d"]], "brillouin_d() (in module skbio.diversity.alpha)": [[71, "skbio.diversity.alpha.brillouin_d"]], "chao1() (in module skbio.diversity.alpha)": [[72, "skbio.diversity.alpha.chao1"]], "chao1_ci() (in module skbio.diversity.alpha)": [[73, "skbio.diversity.alpha.chao1_ci"]], "dominance() (in module skbio.diversity.alpha)": [[74, "skbio.diversity.alpha.dominance"]], "doubles() (in module skbio.diversity.alpha)": [[75, "skbio.diversity.alpha.doubles"]], "enspie() (in module skbio.diversity.alpha)": [[76, "skbio.diversity.alpha.enspie"]], "esty_ci() (in module skbio.diversity.alpha)": [[77, "skbio.diversity.alpha.esty_ci"]], "faith_pd() (in module skbio.diversity.alpha)": [[78, "skbio.diversity.alpha.faith_pd"]], "fisher_alpha() (in module skbio.diversity.alpha)": [[79, "skbio.diversity.alpha.fisher_alpha"]], "gini_index() (in module skbio.diversity.alpha)": [[80, "skbio.diversity.alpha.gini_index"]], "goods_coverage() (in module skbio.diversity.alpha)": [[81, "skbio.diversity.alpha.goods_coverage"]], "heip_e() (in module skbio.diversity.alpha)": [[82, "skbio.diversity.alpha.heip_e"]], "kempton_taylor_q() (in module skbio.diversity.alpha)": [[83, "skbio.diversity.alpha.kempton_taylor_q"]], "lladser_ci() (in module skbio.diversity.alpha)": [[84, "skbio.diversity.alpha.lladser_ci"]], "lladser_pe() (in module skbio.diversity.alpha)": [[85, "skbio.diversity.alpha.lladser_pe"]], "margalef() (in module skbio.diversity.alpha)": [[86, "skbio.diversity.alpha.margalef"]], "mcintosh_d() (in module skbio.diversity.alpha)": [[87, "skbio.diversity.alpha.mcintosh_d"]], "mcintosh_e() (in module skbio.diversity.alpha)": [[88, "skbio.diversity.alpha.mcintosh_e"]], "menhinick() (in module skbio.diversity.alpha)": [[89, "skbio.diversity.alpha.menhinick"]], "michaelis_menten_fit() (in module skbio.diversity.alpha)": [[90, "skbio.diversity.alpha.michaelis_menten_fit"]], "observed_features() (in module skbio.diversity.alpha)": [[91, "skbio.diversity.alpha.observed_features"]], "observed_otus() (in module skbio.diversity.alpha)": [[92, "skbio.diversity.alpha.observed_otus"]], "osd() (in module skbio.diversity.alpha)": [[93, "skbio.diversity.alpha.osd"]], "phydiv() (in module skbio.diversity.alpha)": [[94, "skbio.diversity.alpha.phydiv"]], "pielou_e() (in module skbio.diversity.alpha)": [[95, "skbio.diversity.alpha.pielou_e"]], "robbins() (in module skbio.diversity.alpha)": [[96, "skbio.diversity.alpha.robbins"]], "shannon() (in module skbio.diversity.alpha)": [[97, "skbio.diversity.alpha.shannon"]], "simpson() (in module skbio.diversity.alpha)": [[98, "skbio.diversity.alpha.simpson"]], "simpson_e() (in module skbio.diversity.alpha)": [[99, "skbio.diversity.alpha.simpson_e"]], "singles() (in module skbio.diversity.alpha)": [[100, "skbio.diversity.alpha.singles"]], "sobs() (in module skbio.diversity.alpha)": [[101, "skbio.diversity.alpha.sobs"]], "strong() (in module skbio.diversity.alpha)": [[102, "skbio.diversity.alpha.strong"]], "alpha_diversity() (in module skbio.diversity)": [[103, "skbio.diversity.alpha_diversity"]], "skbio.diversity.beta": [[104, "module-skbio.diversity.beta"]], "unweighted_unifrac() (in module skbio.diversity.beta)": [[105, "skbio.diversity.beta.unweighted_unifrac"]], "weighted_unifrac() (in module skbio.diversity.beta)": [[106, "skbio.diversity.beta.weighted_unifrac"]], "beta_diversity() (in module skbio.diversity)": [[107, "skbio.diversity.beta_diversity"]], "block_beta_diversity() (in module skbio.diversity)": [[108, "skbio.diversity.block_beta_diversity"]], "get_alpha_diversity_metrics() (in module skbio.diversity)": [[109, "skbio.diversity.get_alpha_diversity_metrics"]], "get_beta_diversity_metrics() (in module skbio.diversity)": [[110, "skbio.diversity.get_beta_diversity_metrics"]], "partial_beta_diversity() (in module skbio.diversity)": [[111, "skbio.diversity.partial_beta_diversity"]], "argumentoverridewarning": [[112, "skbio.io.ArgumentOverrideWarning"]], "blast7formaterror": [[113, "skbio.io.BLAST7FormatError"]], "clustalformaterror": [[114, "skbio.io.ClustalFormatError"]], "emblformaterror": [[115, "skbio.io.EMBLFormatError"]], "fastaformaterror": [[116, "skbio.io.FASTAFormatError"]], "fastqformaterror": [[117, "skbio.io.FASTQFormatError"]], "fileformaterror": [[118, "skbio.io.FileFormatError"]], "formatidentificationwarning": [[119, "skbio.io.FormatIdentificationWarning"]], "gff3formaterror": [[120, "skbio.io.GFF3FormatError"]], "genbankformaterror": [[121, "skbio.io.GenBankFormatError"]], "iosourceerror": [[122, "skbio.io.IOSourceError"]], "lsmatformaterror": [[123, "skbio.io.LSMatFormatError"]], "newickformaterror": [[124, "skbio.io.NewickFormatError"]], "ordinationformaterror": [[125, "skbio.io.OrdinationFormatError"]], "phylipformaterror": [[126, "skbio.io.PhylipFormatError"]], "qseqformaterror": [[127, "skbio.io.QSeqFormatError"]], "qualformaterror": [[128, "skbio.io.QUALFormatError"]], "stockholmformaterror": [[129, "skbio.io.StockholmFormatError"]], "unrecognizedformaterror": [[130, "skbio.io.UnrecognizedFormatError"]], "skbio.io.format.binary_dm": [[131, "module-skbio.io.format.binary_dm"]], "skbio.io.format.blast6": [[132, "module-skbio.io.format.blast6"]], "skbio.io.format.blast7": [[133, "module-skbio.io.format.blast7"]], "skbio.io.format.clustal": [[134, "module-skbio.io.format.clustal"]], "skbio.io.format.embl": [[135, "module-skbio.io.format.embl"]], "skbio.io.format.fasta": [[136, "module-skbio.io.format.fasta"]], "skbio.io.format.fastq": [[137, "module-skbio.io.format.fastq"]], "skbio.io.format.genbank": [[138, "module-skbio.io.format.genbank"]], "skbio.io.format.gff3": [[139, "module-skbio.io.format.gff3"]], "skbio.io.format.lsmat": [[140, "module-skbio.io.format.lsmat"]], "skbio.io.format.newick": [[141, "module-skbio.io.format.newick"]], "skbio.io.format.ordination": [[142, "module-skbio.io.format.ordination"]], "skbio.io.format.phylip": [[143, "module-skbio.io.format.phylip"]], "skbio.io.format.qseq": [[144, "module-skbio.io.format.qseq"]], "skbio.io.format.sample_metadata": [[145, "module-skbio.io.format.sample_metadata"]], "skbio.io.format.stockholm": [[146, "module-skbio.io.format.stockholm"]], "skbio.io.format.taxdump": [[147, "module-skbio.io.format.taxdump"]], "skbio.io.registry": [[148, "module-skbio.io.registry"]], "duplicateregistrationerror": [[149, "skbio.io.registry.DuplicateRegistrationError"]], "format (class in skbio.io.registry)": [[150, "skbio.io.registry.Format"]], "__eq__() (skbio.io.registry.format method)": [[151, "skbio.io.registry.Format.__eq__"]], "__ge__() (skbio.io.registry.format method)": [[152, "skbio.io.registry.Format.__ge__"]], "__getstate__() (skbio.io.registry.format method)": [[153, "skbio.io.registry.Format.__getstate__"]], "__gt__() (skbio.io.registry.format method)": [[154, "skbio.io.registry.Format.__gt__"]], "__hash__() (skbio.io.registry.format method)": [[155, "skbio.io.registry.Format.__hash__"]], "__le__() (skbio.io.registry.format method)": [[156, "skbio.io.registry.Format.__le__"]], "__lt__() (skbio.io.registry.format method)": [[157, "skbio.io.registry.Format.__lt__"]], "__ne__() (skbio.io.registry.format method)": [[158, "skbio.io.registry.Format.__ne__"]], "__str__() (skbio.io.registry.format method)": [[159, "skbio.io.registry.Format.__str__"]], "reader() (skbio.io.registry.format method)": [[160, "skbio.io.registry.Format.reader"]], "sniffer() (skbio.io.registry.format method)": [[161, "skbio.io.registry.Format.sniffer"]], "writer() (skbio.io.registry.format method)": [[162, "skbio.io.registry.Format.writer"]], "ioregistry (class in skbio.io.registry)": [[163, "skbio.io.registry.IORegistry"]], "__eq__() (skbio.io.registry.ioregistry method)": [[164, "skbio.io.registry.IORegistry.__eq__"]], "__ge__() (skbio.io.registry.ioregistry method)": [[165, "skbio.io.registry.IORegistry.__ge__"]], "__getstate__() (skbio.io.registry.ioregistry method)": [[166, "skbio.io.registry.IORegistry.__getstate__"]], "__gt__() (skbio.io.registry.ioregistry method)": [[167, "skbio.io.registry.IORegistry.__gt__"]], "__hash__() (skbio.io.registry.ioregistry method)": [[168, "skbio.io.registry.IORegistry.__hash__"]], "__le__() (skbio.io.registry.ioregistry method)": [[169, "skbio.io.registry.IORegistry.__le__"]], "__lt__() (skbio.io.registry.ioregistry method)": [[170, "skbio.io.registry.IORegistry.__lt__"]], "__ne__() (skbio.io.registry.ioregistry method)": [[171, "skbio.io.registry.IORegistry.__ne__"]], "__str__() (skbio.io.registry.ioregistry method)": [[172, "skbio.io.registry.IORegistry.__str__"]], "add_format() (skbio.io.registry.ioregistry method)": [[173, "skbio.io.registry.IORegistry.add_format"]], "create_format() (skbio.io.registry.ioregistry method)": [[174, "skbio.io.registry.IORegistry.create_format"]], "get_reader() (skbio.io.registry.ioregistry method)": [[175, "skbio.io.registry.IORegistry.get_reader"]], "get_sniffer() (skbio.io.registry.ioregistry method)": [[176, "skbio.io.registry.IORegistry.get_sniffer"]], "get_writer() (skbio.io.registry.ioregistry method)": [[177, "skbio.io.registry.IORegistry.get_writer"]], "list_read_formats() (skbio.io.registry.ioregistry method)": [[178, "skbio.io.registry.IORegistry.list_read_formats"]], "list_write_formats() (skbio.io.registry.ioregistry method)": [[179, "skbio.io.registry.IORegistry.list_write_formats"]], "monkey_patch() (skbio.io.registry.ioregistry method)": [[180, "skbio.io.registry.IORegistry.monkey_patch"]], "read() (skbio.io.registry.ioregistry method)": [[181, "skbio.io.registry.IORegistry.read"]], "sniff() (skbio.io.registry.ioregistry method)": [[182, "skbio.io.registry.IORegistry.sniff"]], "write() (skbio.io.registry.ioregistry method)": [[183, "skbio.io.registry.IORegistry.write"]], "invalidregistrationerror": [[184, "skbio.io.registry.InvalidRegistrationError"]], "create_format() (in module skbio.io.registry)": [[185, "skbio.io.registry.create_format"]], "read() (in module skbio.io.registry)": [[186, "skbio.io.registry.read"]], "sniff() (in module skbio.io.registry)": [[187, "skbio.io.registry.sniff"]], "write() (in module skbio.io.registry)": [[188, "skbio.io.registry.write"]], "skbio.io.util": [[189, "module-skbio.io.util"]], "open() (in module skbio.io.util)": [[190, "skbio.io.util.open"]], "open_file() (in module skbio.io.util)": [[191, "skbio.io.util.open_file"]], "open_files() (in module skbio.io.util)": [[192, "skbio.io.util.open_files"]], "interval (class in skbio.metadata)": [[193, "skbio.metadata.Interval"]], "__eq__() (skbio.metadata.interval method)": [[194, "skbio.metadata.Interval.__eq__"]], "__ge__() (skbio.metadata.interval method)": [[195, "skbio.metadata.Interval.__ge__"]], "__getstate__() (skbio.metadata.interval method)": [[196, "skbio.metadata.Interval.__getstate__"]], "__gt__() (skbio.metadata.interval method)": [[197, "skbio.metadata.Interval.__gt__"]], "__le__() (skbio.metadata.interval method)": [[198, "skbio.metadata.Interval.__le__"]], "__lt__() (skbio.metadata.interval method)": [[199, "skbio.metadata.Interval.__lt__"]], "__ne__() (skbio.metadata.interval method)": [[200, "skbio.metadata.Interval.__ne__"]], "__str__() (skbio.metadata.interval method)": [[201, "skbio.metadata.Interval.__str__"]], "drop() (skbio.metadata.interval method)": [[202, "skbio.metadata.Interval.drop"]], "intervalmetadata (class in skbio.metadata)": [[203, "skbio.metadata.IntervalMetadata"]], "__copy__() (skbio.metadata.intervalmetadata method)": [[204, "skbio.metadata.IntervalMetadata.__copy__"]], "__deepcopy__() (skbio.metadata.intervalmetadata method)": [[205, "skbio.metadata.IntervalMetadata.__deepcopy__"]], "__eq__() (skbio.metadata.intervalmetadata method)": [[206, "skbio.metadata.IntervalMetadata.__eq__"]], "__ge__() (skbio.metadata.intervalmetadata method)": [[207, "skbio.metadata.IntervalMetadata.__ge__"]], "__getstate__() (skbio.metadata.intervalmetadata method)": [[208, "skbio.metadata.IntervalMetadata.__getstate__"]], "__gt__() (skbio.metadata.intervalmetadata method)": [[209, "skbio.metadata.IntervalMetadata.__gt__"]], "__le__() (skbio.metadata.intervalmetadata method)": [[210, "skbio.metadata.IntervalMetadata.__le__"]], "__lt__() (skbio.metadata.intervalmetadata method)": [[211, "skbio.metadata.IntervalMetadata.__lt__"]], "__ne__() (skbio.metadata.intervalmetadata method)": [[212, "skbio.metadata.IntervalMetadata.__ne__"]], "__str__() (skbio.metadata.intervalmetadata method)": [[213, "skbio.metadata.IntervalMetadata.__str__"]], "add() (skbio.metadata.intervalmetadata method)": [[214, "skbio.metadata.IntervalMetadata.add"]], "concat() (skbio.metadata.intervalmetadata class method)": [[215, "skbio.metadata.IntervalMetadata.concat"]], "drop() (skbio.metadata.intervalmetadata method)": [[216, "skbio.metadata.IntervalMetadata.drop"]], "merge() (skbio.metadata.intervalmetadata method)": [[217, "skbio.metadata.IntervalMetadata.merge"]], "query() (skbio.metadata.intervalmetadata method)": [[218, "skbio.metadata.IntervalMetadata.query"]], "read() (skbio.metadata.intervalmetadata class method)": [[219, "skbio.metadata.IntervalMetadata.read"]], "sort() (skbio.metadata.intervalmetadata method)": [[220, "skbio.metadata.IntervalMetadata.sort"]], "write() (skbio.metadata.intervalmetadata method)": [[221, "skbio.metadata.IntervalMetadata.write"]], "dna (class in skbio.sequence)": [[222, "skbio.sequence.DNA"]], "__bool__() (skbio.sequence.dna method)": [[223, "skbio.sequence.DNA.__bool__"]], "__contains__() (skbio.sequence.dna method)": [[224, "skbio.sequence.DNA.__contains__"]], "__copy__() (skbio.sequence.dna method)": [[225, "skbio.sequence.DNA.__copy__"]], "__deepcopy__() (skbio.sequence.dna method)": [[226, "skbio.sequence.DNA.__deepcopy__"]], "__eq__() (skbio.sequence.dna method)": [[227, "skbio.sequence.DNA.__eq__"]], "__ge__() (skbio.sequence.dna method)": [[228, "skbio.sequence.DNA.__ge__"]], "__getitem__() (skbio.sequence.dna method)": [[229, "skbio.sequence.DNA.__getitem__"]], "__getstate__() (skbio.sequence.dna method)": [[230, "skbio.sequence.DNA.__getstate__"]], "__gt__() (skbio.sequence.dna method)": [[231, "skbio.sequence.DNA.__gt__"]], "__iter__() (skbio.sequence.dna method)": [[232, "skbio.sequence.DNA.__iter__"]], "__le__() (skbio.sequence.dna method)": [[233, "skbio.sequence.DNA.__le__"]], "__len__() (skbio.sequence.dna method)": [[234, "skbio.sequence.DNA.__len__"]], "__lt__() (skbio.sequence.dna method)": [[235, "skbio.sequence.DNA.__lt__"]], "__ne__() (skbio.sequence.dna method)": [[236, "skbio.sequence.DNA.__ne__"]], "__reversed__() (skbio.sequence.dna method)": [[237, "skbio.sequence.DNA.__reversed__"]], "__str__() (skbio.sequence.dna method)": [[238, "skbio.sequence.DNA.__str__"]], "complement() (skbio.sequence.dna method)": [[239, "skbio.sequence.DNA.complement"]], "concat() (skbio.sequence.dna class method)": [[240, "skbio.sequence.DNA.concat"]], "count() (skbio.sequence.dna method)": [[241, "skbio.sequence.DNA.count"]], "definites() (skbio.sequence.dna method)": [[242, "skbio.sequence.DNA.definites"]], "degap() (skbio.sequence.dna method)": [[243, "skbio.sequence.DNA.degap"]], "degenerates() (skbio.sequence.dna method)": [[244, "skbio.sequence.DNA.degenerates"]], "distance() (skbio.sequence.dna method)": [[245, "skbio.sequence.DNA.distance"]], "expand_degenerates() (skbio.sequence.dna method)": [[246, "skbio.sequence.DNA.expand_degenerates"]], "find_motifs() (skbio.sequence.dna method)": [[247, "skbio.sequence.DNA.find_motifs"]], "find_with_regex() (skbio.sequence.dna method)": [[248, "skbio.sequence.DNA.find_with_regex"]], "frequencies() (skbio.sequence.dna method)": [[249, "skbio.sequence.DNA.frequencies"]], "gaps() (skbio.sequence.dna method)": [[250, "skbio.sequence.DNA.gaps"]], "gc_content() (skbio.sequence.dna method)": [[251, "skbio.sequence.DNA.gc_content"]], "gc_frequency() (skbio.sequence.dna method)": [[252, "skbio.sequence.DNA.gc_frequency"]], "has_definites() (skbio.sequence.dna method)": [[253, "skbio.sequence.DNA.has_definites"]], "has_degenerates() (skbio.sequence.dna method)": [[254, "skbio.sequence.DNA.has_degenerates"]], "has_gaps() (skbio.sequence.dna method)": [[255, "skbio.sequence.DNA.has_gaps"]], "has_interval_metadata() (skbio.sequence.dna method)": [[256, "skbio.sequence.DNA.has_interval_metadata"]], "has_metadata() (skbio.sequence.dna method)": [[257, "skbio.sequence.DNA.has_metadata"]], "has_nondegenerates() (skbio.sequence.dna method)": [[258, "skbio.sequence.DNA.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.dna method)": [[259, "skbio.sequence.DNA.has_positional_metadata"]], "index() (skbio.sequence.dna method)": [[260, "skbio.sequence.DNA.index"]], "is_reverse_complement() (skbio.sequence.dna method)": [[261, "skbio.sequence.DNA.is_reverse_complement"]], "iter_contiguous() (skbio.sequence.dna method)": [[262, "skbio.sequence.DNA.iter_contiguous"]], "iter_kmers() (skbio.sequence.dna method)": [[263, "skbio.sequence.DNA.iter_kmers"]], "kmer_frequencies() (skbio.sequence.dna method)": [[264, "skbio.sequence.DNA.kmer_frequencies"]], "lowercase() (skbio.sequence.dna method)": [[265, "skbio.sequence.DNA.lowercase"]], "match_frequency() (skbio.sequence.dna method)": [[266, "skbio.sequence.DNA.match_frequency"]], "matches() (skbio.sequence.dna method)": [[267, "skbio.sequence.DNA.matches"]], "mismatch_frequency() (skbio.sequence.dna method)": [[268, "skbio.sequence.DNA.mismatch_frequency"]], "mismatches() (skbio.sequence.dna method)": [[269, "skbio.sequence.DNA.mismatches"]], "nondegenerates() (skbio.sequence.dna method)": [[270, "skbio.sequence.DNA.nondegenerates"]], "read() (skbio.sequence.dna class method)": [[271, "skbio.sequence.DNA.read"]], "replace() (skbio.sequence.dna method)": [[272, "skbio.sequence.DNA.replace"]], "reverse_complement() (skbio.sequence.dna method)": [[273, "skbio.sequence.DNA.reverse_complement"]], "to_definites() (skbio.sequence.dna method)": [[274, "skbio.sequence.DNA.to_definites"]], "to_indices() (skbio.sequence.dna method)": [[275, "skbio.sequence.DNA.to_indices"]], "to_regex() (skbio.sequence.dna method)": [[276, "skbio.sequence.DNA.to_regex"]], "transcribe() (skbio.sequence.dna method)": [[277, "skbio.sequence.DNA.transcribe"]], "translate() (skbio.sequence.dna method)": [[278, "skbio.sequence.DNA.translate"]], "translate_six_frames() (skbio.sequence.dna method)": [[279, "skbio.sequence.DNA.translate_six_frames"]], "write() (skbio.sequence.dna method)": [[280, "skbio.sequence.DNA.write"]], "geneticcode (class in skbio.sequence)": [[281, "skbio.sequence.GeneticCode"]], "__eq__() (skbio.sequence.geneticcode method)": [[282, "skbio.sequence.GeneticCode.__eq__"]], "__ge__() (skbio.sequence.geneticcode method)": [[283, "skbio.sequence.GeneticCode.__ge__"]], "__getstate__() (skbio.sequence.geneticcode method)": [[284, "skbio.sequence.GeneticCode.__getstate__"]], "__gt__() (skbio.sequence.geneticcode method)": [[285, "skbio.sequence.GeneticCode.__gt__"]], "__le__() (skbio.sequence.geneticcode method)": [[286, "skbio.sequence.GeneticCode.__le__"]], "__lt__() (skbio.sequence.geneticcode method)": [[287, "skbio.sequence.GeneticCode.__lt__"]], "__ne__() (skbio.sequence.geneticcode method)": [[288, "skbio.sequence.GeneticCode.__ne__"]], "__str__() (skbio.sequence.geneticcode method)": [[289, "skbio.sequence.GeneticCode.__str__"]], "from_ncbi() (skbio.sequence.geneticcode class method)": [[290, "skbio.sequence.GeneticCode.from_ncbi"]], "translate() (skbio.sequence.geneticcode method)": [[291, "skbio.sequence.GeneticCode.translate"]], "translate_six_frames() (skbio.sequence.geneticcode method)": [[292, "skbio.sequence.GeneticCode.translate_six_frames"]], "grammaredsequence (class in skbio.sequence)": [[293, "skbio.sequence.GrammaredSequence"]], "__bool__() (skbio.sequence.grammaredsequence method)": [[294, "skbio.sequence.GrammaredSequence.__bool__"]], "__contains__() (skbio.sequence.grammaredsequence method)": [[295, "skbio.sequence.GrammaredSequence.__contains__"]], "__copy__() (skbio.sequence.grammaredsequence method)": [[296, "skbio.sequence.GrammaredSequence.__copy__"]], "__deepcopy__() (skbio.sequence.grammaredsequence method)": [[297, "skbio.sequence.GrammaredSequence.__deepcopy__"]], "__eq__() (skbio.sequence.grammaredsequence method)": [[298, "skbio.sequence.GrammaredSequence.__eq__"]], "__ge__() (skbio.sequence.grammaredsequence method)": [[299, "skbio.sequence.GrammaredSequence.__ge__"]], "__getitem__() (skbio.sequence.grammaredsequence method)": [[300, "skbio.sequence.GrammaredSequence.__getitem__"]], "__getstate__() (skbio.sequence.grammaredsequence method)": [[301, "skbio.sequence.GrammaredSequence.__getstate__"]], "__gt__() (skbio.sequence.grammaredsequence method)": [[302, "skbio.sequence.GrammaredSequence.__gt__"]], "__iter__() (skbio.sequence.grammaredsequence method)": [[303, "skbio.sequence.GrammaredSequence.__iter__"]], "__le__() (skbio.sequence.grammaredsequence method)": [[304, "skbio.sequence.GrammaredSequence.__le__"]], "__len__() (skbio.sequence.grammaredsequence method)": [[305, "skbio.sequence.GrammaredSequence.__len__"]], "__lt__() (skbio.sequence.grammaredsequence method)": [[306, "skbio.sequence.GrammaredSequence.__lt__"]], "__ne__() (skbio.sequence.grammaredsequence method)": [[307, "skbio.sequence.GrammaredSequence.__ne__"]], "__reversed__() (skbio.sequence.grammaredsequence method)": [[308, "skbio.sequence.GrammaredSequence.__reversed__"]], "__str__() (skbio.sequence.grammaredsequence method)": [[309, "skbio.sequence.GrammaredSequence.__str__"]], "concat() (skbio.sequence.grammaredsequence class method)": [[310, "skbio.sequence.GrammaredSequence.concat"]], "count() (skbio.sequence.grammaredsequence method)": [[311, "skbio.sequence.GrammaredSequence.count"]], "definites() (skbio.sequence.grammaredsequence method)": [[312, "skbio.sequence.GrammaredSequence.definites"]], "degap() (skbio.sequence.grammaredsequence method)": [[313, "skbio.sequence.GrammaredSequence.degap"]], "degenerates() (skbio.sequence.grammaredsequence method)": [[314, "skbio.sequence.GrammaredSequence.degenerates"]], "distance() (skbio.sequence.grammaredsequence method)": [[315, "skbio.sequence.GrammaredSequence.distance"]], "expand_degenerates() (skbio.sequence.grammaredsequence method)": [[316, "skbio.sequence.GrammaredSequence.expand_degenerates"]], "find_motifs() (skbio.sequence.grammaredsequence method)": [[317, "skbio.sequence.GrammaredSequence.find_motifs"]], "find_with_regex() (skbio.sequence.grammaredsequence method)": [[318, "skbio.sequence.GrammaredSequence.find_with_regex"]], "frequencies() (skbio.sequence.grammaredsequence method)": [[319, "skbio.sequence.GrammaredSequence.frequencies"]], "gaps() (skbio.sequence.grammaredsequence method)": [[320, "skbio.sequence.GrammaredSequence.gaps"]], "has_definites() (skbio.sequence.grammaredsequence method)": [[321, "skbio.sequence.GrammaredSequence.has_definites"]], "has_degenerates() (skbio.sequence.grammaredsequence method)": [[322, "skbio.sequence.GrammaredSequence.has_degenerates"]], "has_gaps() (skbio.sequence.grammaredsequence method)": [[323, "skbio.sequence.GrammaredSequence.has_gaps"]], "has_interval_metadata() (skbio.sequence.grammaredsequence method)": [[324, "skbio.sequence.GrammaredSequence.has_interval_metadata"]], "has_metadata() (skbio.sequence.grammaredsequence method)": [[325, "skbio.sequence.GrammaredSequence.has_metadata"]], "has_nondegenerates() (skbio.sequence.grammaredsequence method)": [[326, "skbio.sequence.GrammaredSequence.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.grammaredsequence method)": [[327, "skbio.sequence.GrammaredSequence.has_positional_metadata"]], "index() (skbio.sequence.grammaredsequence method)": [[328, "skbio.sequence.GrammaredSequence.index"]], "iter_contiguous() (skbio.sequence.grammaredsequence method)": [[329, "skbio.sequence.GrammaredSequence.iter_contiguous"]], "iter_kmers() (skbio.sequence.grammaredsequence method)": [[330, "skbio.sequence.GrammaredSequence.iter_kmers"]], "kmer_frequencies() (skbio.sequence.grammaredsequence method)": [[331, "skbio.sequence.GrammaredSequence.kmer_frequencies"]], "lowercase() (skbio.sequence.grammaredsequence method)": [[332, "skbio.sequence.GrammaredSequence.lowercase"]], "match_frequency() (skbio.sequence.grammaredsequence method)": [[333, "skbio.sequence.GrammaredSequence.match_frequency"]], "matches() (skbio.sequence.grammaredsequence method)": [[334, "skbio.sequence.GrammaredSequence.matches"]], "mismatch_frequency() (skbio.sequence.grammaredsequence method)": [[335, "skbio.sequence.GrammaredSequence.mismatch_frequency"]], "mismatches() (skbio.sequence.grammaredsequence method)": [[336, "skbio.sequence.GrammaredSequence.mismatches"]], "nondegenerates() (skbio.sequence.grammaredsequence method)": [[337, "skbio.sequence.GrammaredSequence.nondegenerates"]], "read() (skbio.sequence.grammaredsequence class method)": [[338, "skbio.sequence.GrammaredSequence.read"]], "replace() (skbio.sequence.grammaredsequence method)": [[339, "skbio.sequence.GrammaredSequence.replace"]], "to_definites() (skbio.sequence.grammaredsequence method)": [[340, "skbio.sequence.GrammaredSequence.to_definites"]], "to_indices() (skbio.sequence.grammaredsequence method)": [[341, "skbio.sequence.GrammaredSequence.to_indices"]], "to_regex() (skbio.sequence.grammaredsequence method)": [[342, "skbio.sequence.GrammaredSequence.to_regex"]], "write() (skbio.sequence.grammaredsequence method)": [[343, "skbio.sequence.GrammaredSequence.write"]], "protein (class in skbio.sequence)": [[344, "skbio.sequence.Protein"]], "__bool__() (skbio.sequence.protein method)": [[345, "skbio.sequence.Protein.__bool__"]], "__contains__() (skbio.sequence.protein method)": [[346, "skbio.sequence.Protein.__contains__"]], "__copy__() (skbio.sequence.protein method)": [[347, "skbio.sequence.Protein.__copy__"]], "__deepcopy__() (skbio.sequence.protein method)": [[348, "skbio.sequence.Protein.__deepcopy__"]], "__eq__() (skbio.sequence.protein method)": [[349, "skbio.sequence.Protein.__eq__"]], "__ge__() (skbio.sequence.protein method)": [[350, "skbio.sequence.Protein.__ge__"]], "__getitem__() (skbio.sequence.protein method)": [[351, "skbio.sequence.Protein.__getitem__"]], "__getstate__() (skbio.sequence.protein method)": [[352, "skbio.sequence.Protein.__getstate__"]], "__gt__() (skbio.sequence.protein method)": [[353, "skbio.sequence.Protein.__gt__"]], "__iter__() (skbio.sequence.protein method)": [[354, "skbio.sequence.Protein.__iter__"]], "__le__() (skbio.sequence.protein method)": [[355, "skbio.sequence.Protein.__le__"]], "__len__() (skbio.sequence.protein method)": [[356, "skbio.sequence.Protein.__len__"]], "__lt__() (skbio.sequence.protein method)": [[357, "skbio.sequence.Protein.__lt__"]], "__ne__() (skbio.sequence.protein method)": [[358, "skbio.sequence.Protein.__ne__"]], "__reversed__() (skbio.sequence.protein method)": [[359, "skbio.sequence.Protein.__reversed__"]], "__str__() (skbio.sequence.protein method)": [[360, "skbio.sequence.Protein.__str__"]], "concat() (skbio.sequence.protein class method)": [[361, "skbio.sequence.Protein.concat"]], "count() (skbio.sequence.protein method)": [[362, "skbio.sequence.Protein.count"]], "definites() (skbio.sequence.protein method)": [[363, "skbio.sequence.Protein.definites"]], "degap() (skbio.sequence.protein method)": [[364, "skbio.sequence.Protein.degap"]], "degenerates() (skbio.sequence.protein method)": [[365, "skbio.sequence.Protein.degenerates"]], "distance() (skbio.sequence.protein method)": [[366, "skbio.sequence.Protein.distance"]], "expand_degenerates() (skbio.sequence.protein method)": [[367, "skbio.sequence.Protein.expand_degenerates"]], "find_motifs() (skbio.sequence.protein method)": [[368, "skbio.sequence.Protein.find_motifs"]], "find_with_regex() (skbio.sequence.protein method)": [[369, "skbio.sequence.Protein.find_with_regex"]], "frequencies() (skbio.sequence.protein method)": [[370, "skbio.sequence.Protein.frequencies"]], "gaps() (skbio.sequence.protein method)": [[371, "skbio.sequence.Protein.gaps"]], "has_definites() (skbio.sequence.protein method)": [[372, "skbio.sequence.Protein.has_definites"]], "has_degenerates() (skbio.sequence.protein method)": [[373, "skbio.sequence.Protein.has_degenerates"]], "has_gaps() (skbio.sequence.protein method)": [[374, "skbio.sequence.Protein.has_gaps"]], "has_interval_metadata() (skbio.sequence.protein method)": [[375, "skbio.sequence.Protein.has_interval_metadata"]], "has_metadata() (skbio.sequence.protein method)": [[376, "skbio.sequence.Protein.has_metadata"]], "has_nondegenerates() (skbio.sequence.protein method)": [[377, "skbio.sequence.Protein.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.protein method)": [[378, "skbio.sequence.Protein.has_positional_metadata"]], "has_stops() (skbio.sequence.protein method)": [[379, "skbio.sequence.Protein.has_stops"]], "index() (skbio.sequence.protein method)": [[380, "skbio.sequence.Protein.index"]], "iter_contiguous() (skbio.sequence.protein method)": [[381, "skbio.sequence.Protein.iter_contiguous"]], "iter_kmers() (skbio.sequence.protein method)": [[382, "skbio.sequence.Protein.iter_kmers"]], "kmer_frequencies() (skbio.sequence.protein method)": [[383, "skbio.sequence.Protein.kmer_frequencies"]], "lowercase() (skbio.sequence.protein method)": [[384, "skbio.sequence.Protein.lowercase"]], "match_frequency() (skbio.sequence.protein method)": [[385, "skbio.sequence.Protein.match_frequency"]], "matches() (skbio.sequence.protein method)": [[386, "skbio.sequence.Protein.matches"]], "mismatch_frequency() (skbio.sequence.protein method)": [[387, "skbio.sequence.Protein.mismatch_frequency"]], "mismatches() (skbio.sequence.protein method)": [[388, "skbio.sequence.Protein.mismatches"]], "nondegenerates() (skbio.sequence.protein method)": [[389, "skbio.sequence.Protein.nondegenerates"]], "read() (skbio.sequence.protein class method)": [[390, "skbio.sequence.Protein.read"]], "replace() (skbio.sequence.protein method)": [[391, "skbio.sequence.Protein.replace"]], "stops() (skbio.sequence.protein method)": [[392, "skbio.sequence.Protein.stops"]], "to_definites() (skbio.sequence.protein method)": [[393, "skbio.sequence.Protein.to_definites"]], "to_indices() (skbio.sequence.protein method)": [[394, "skbio.sequence.Protein.to_indices"]], "to_regex() (skbio.sequence.protein method)": [[395, "skbio.sequence.Protein.to_regex"]], "write() (skbio.sequence.protein method)": [[396, "skbio.sequence.Protein.write"]], "rna (class in skbio.sequence)": [[397, "skbio.sequence.RNA"]], "__bool__() (skbio.sequence.rna method)": [[398, "skbio.sequence.RNA.__bool__"]], "__contains__() (skbio.sequence.rna method)": [[399, "skbio.sequence.RNA.__contains__"]], "__copy__() (skbio.sequence.rna method)": [[400, "skbio.sequence.RNA.__copy__"]], "__deepcopy__() (skbio.sequence.rna method)": [[401, "skbio.sequence.RNA.__deepcopy__"]], "__eq__() (skbio.sequence.rna method)": [[402, "skbio.sequence.RNA.__eq__"]], "__ge__() (skbio.sequence.rna method)": [[403, "skbio.sequence.RNA.__ge__"]], "__getitem__() (skbio.sequence.rna method)": [[404, "skbio.sequence.RNA.__getitem__"]], "__getstate__() (skbio.sequence.rna method)": [[405, "skbio.sequence.RNA.__getstate__"]], "__gt__() (skbio.sequence.rna method)": [[406, "skbio.sequence.RNA.__gt__"]], "__iter__() (skbio.sequence.rna method)": [[407, "skbio.sequence.RNA.__iter__"]], "__le__() (skbio.sequence.rna method)": [[408, "skbio.sequence.RNA.__le__"]], "__len__() (skbio.sequence.rna method)": [[409, "skbio.sequence.RNA.__len__"]], "__lt__() (skbio.sequence.rna method)": [[410, "skbio.sequence.RNA.__lt__"]], "__ne__() (skbio.sequence.rna method)": [[411, "skbio.sequence.RNA.__ne__"]], "__reversed__() (skbio.sequence.rna method)": [[412, "skbio.sequence.RNA.__reversed__"]], "__str__() (skbio.sequence.rna method)": [[413, "skbio.sequence.RNA.__str__"]], "complement() (skbio.sequence.rna method)": [[414, "skbio.sequence.RNA.complement"]], "concat() (skbio.sequence.rna class method)": [[415, "skbio.sequence.RNA.concat"]], "count() (skbio.sequence.rna method)": [[416, "skbio.sequence.RNA.count"]], "definites() (skbio.sequence.rna method)": [[417, "skbio.sequence.RNA.definites"]], "degap() (skbio.sequence.rna method)": [[418, "skbio.sequence.RNA.degap"]], "degenerates() (skbio.sequence.rna method)": [[419, "skbio.sequence.RNA.degenerates"]], "distance() (skbio.sequence.rna method)": [[420, "skbio.sequence.RNA.distance"]], "expand_degenerates() (skbio.sequence.rna method)": [[421, "skbio.sequence.RNA.expand_degenerates"]], "find_motifs() (skbio.sequence.rna method)": [[422, "skbio.sequence.RNA.find_motifs"]], "find_with_regex() (skbio.sequence.rna method)": [[423, "skbio.sequence.RNA.find_with_regex"]], "frequencies() (skbio.sequence.rna method)": [[424, "skbio.sequence.RNA.frequencies"]], "gaps() (skbio.sequence.rna method)": [[425, "skbio.sequence.RNA.gaps"]], "gc_content() (skbio.sequence.rna method)": [[426, "skbio.sequence.RNA.gc_content"]], "gc_frequency() (skbio.sequence.rna method)": [[427, "skbio.sequence.RNA.gc_frequency"]], "has_definites() (skbio.sequence.rna method)": [[428, "skbio.sequence.RNA.has_definites"]], "has_degenerates() (skbio.sequence.rna method)": [[429, "skbio.sequence.RNA.has_degenerates"]], "has_gaps() (skbio.sequence.rna method)": [[430, "skbio.sequence.RNA.has_gaps"]], "has_interval_metadata() (skbio.sequence.rna method)": [[431, "skbio.sequence.RNA.has_interval_metadata"]], "has_metadata() (skbio.sequence.rna method)": [[432, "skbio.sequence.RNA.has_metadata"]], "has_nondegenerates() (skbio.sequence.rna method)": [[433, "skbio.sequence.RNA.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.rna method)": [[434, "skbio.sequence.RNA.has_positional_metadata"]], "index() (skbio.sequence.rna method)": [[435, "skbio.sequence.RNA.index"]], "is_reverse_complement() (skbio.sequence.rna method)": [[436, "skbio.sequence.RNA.is_reverse_complement"]], "iter_contiguous() (skbio.sequence.rna method)": [[437, "skbio.sequence.RNA.iter_contiguous"]], "iter_kmers() (skbio.sequence.rna method)": [[438, "skbio.sequence.RNA.iter_kmers"]], "kmer_frequencies() (skbio.sequence.rna method)": [[439, "skbio.sequence.RNA.kmer_frequencies"]], "lowercase() (skbio.sequence.rna method)": [[440, "skbio.sequence.RNA.lowercase"]], "match_frequency() (skbio.sequence.rna method)": [[441, "skbio.sequence.RNA.match_frequency"]], "matches() (skbio.sequence.rna method)": [[442, "skbio.sequence.RNA.matches"]], "mismatch_frequency() (skbio.sequence.rna method)": [[443, "skbio.sequence.RNA.mismatch_frequency"]], "mismatches() (skbio.sequence.rna method)": [[444, "skbio.sequence.RNA.mismatches"]], "nondegenerates() (skbio.sequence.rna method)": [[445, "skbio.sequence.RNA.nondegenerates"]], "read() (skbio.sequence.rna class method)": [[446, "skbio.sequence.RNA.read"]], "replace() (skbio.sequence.rna method)": [[447, "skbio.sequence.RNA.replace"]], "reverse_complement() (skbio.sequence.rna method)": [[448, "skbio.sequence.RNA.reverse_complement"]], "reverse_transcribe() (skbio.sequence.rna method)": [[449, "skbio.sequence.RNA.reverse_transcribe"]], "to_definites() (skbio.sequence.rna method)": [[450, "skbio.sequence.RNA.to_definites"]], "to_indices() (skbio.sequence.rna method)": [[451, "skbio.sequence.RNA.to_indices"]], "to_regex() (skbio.sequence.rna method)": [[452, "skbio.sequence.RNA.to_regex"]], "translate() (skbio.sequence.rna method)": [[453, "skbio.sequence.RNA.translate"]], "translate_six_frames() (skbio.sequence.rna method)": [[454, "skbio.sequence.RNA.translate_six_frames"]], "write() (skbio.sequence.rna method)": [[455, "skbio.sequence.RNA.write"]], "sequence (class in skbio.sequence)": [[456, "skbio.sequence.Sequence"]], "__bool__() (skbio.sequence.sequence method)": [[457, "skbio.sequence.Sequence.__bool__"]], "__contains__() (skbio.sequence.sequence method)": [[458, "skbio.sequence.Sequence.__contains__"]], "__copy__() (skbio.sequence.sequence method)": [[459, "skbio.sequence.Sequence.__copy__"]], "__deepcopy__() (skbio.sequence.sequence method)": [[460, "skbio.sequence.Sequence.__deepcopy__"]], "__eq__() (skbio.sequence.sequence method)": [[461, "skbio.sequence.Sequence.__eq__"]], "__ge__() (skbio.sequence.sequence method)": [[462, "skbio.sequence.Sequence.__ge__"]], "__getitem__() (skbio.sequence.sequence method)": [[463, "skbio.sequence.Sequence.__getitem__"]], "__getstate__() (skbio.sequence.sequence method)": [[464, "skbio.sequence.Sequence.__getstate__"]], "__gt__() (skbio.sequence.sequence method)": [[465, "skbio.sequence.Sequence.__gt__"]], "__iter__() (skbio.sequence.sequence method)": [[466, "skbio.sequence.Sequence.__iter__"]], "__le__() (skbio.sequence.sequence method)": [[467, "skbio.sequence.Sequence.__le__"]], "__len__() (skbio.sequence.sequence method)": [[468, "skbio.sequence.Sequence.__len__"]], "__lt__() (skbio.sequence.sequence method)": [[469, "skbio.sequence.Sequence.__lt__"]], "__ne__() (skbio.sequence.sequence method)": [[470, "skbio.sequence.Sequence.__ne__"]], "__reversed__() (skbio.sequence.sequence method)": [[471, "skbio.sequence.Sequence.__reversed__"]], "__str__() (skbio.sequence.sequence method)": [[472, "skbio.sequence.Sequence.__str__"]], "concat() (skbio.sequence.sequence class method)": [[473, "skbio.sequence.Sequence.concat"]], "count() (skbio.sequence.sequence method)": [[474, "skbio.sequence.Sequence.count"]], "distance() (skbio.sequence.sequence method)": [[475, "skbio.sequence.Sequence.distance"]], "find_with_regex() (skbio.sequence.sequence method)": [[476, "skbio.sequence.Sequence.find_with_regex"]], "frequencies() (skbio.sequence.sequence method)": [[477, "skbio.sequence.Sequence.frequencies"]], "has_interval_metadata() (skbio.sequence.sequence method)": [[478, "skbio.sequence.Sequence.has_interval_metadata"]], "has_metadata() (skbio.sequence.sequence method)": [[479, "skbio.sequence.Sequence.has_metadata"]], "has_positional_metadata() (skbio.sequence.sequence method)": [[480, "skbio.sequence.Sequence.has_positional_metadata"]], "index() (skbio.sequence.sequence method)": [[481, "skbio.sequence.Sequence.index"]], "iter_contiguous() (skbio.sequence.sequence method)": [[482, "skbio.sequence.Sequence.iter_contiguous"]], "iter_kmers() (skbio.sequence.sequence method)": [[483, "skbio.sequence.Sequence.iter_kmers"]], "kmer_frequencies() (skbio.sequence.sequence method)": [[484, "skbio.sequence.Sequence.kmer_frequencies"]], "lowercase() (skbio.sequence.sequence method)": [[485, "skbio.sequence.Sequence.lowercase"]], "match_frequency() (skbio.sequence.sequence method)": [[486, "skbio.sequence.Sequence.match_frequency"]], "matches() (skbio.sequence.sequence method)": [[487, "skbio.sequence.Sequence.matches"]], "mismatch_frequency() (skbio.sequence.sequence method)": [[488, "skbio.sequence.Sequence.mismatch_frequency"]], "mismatches() (skbio.sequence.sequence method)": [[489, "skbio.sequence.Sequence.mismatches"]], "read() (skbio.sequence.sequence class method)": [[490, "skbio.sequence.Sequence.read"]], "replace() (skbio.sequence.sequence method)": [[491, "skbio.sequence.Sequence.replace"]], "to_indices() (skbio.sequence.sequence method)": [[492, "skbio.sequence.Sequence.to_indices"]], "write() (skbio.sequence.sequence method)": [[493, "skbio.sequence.Sequence.write"]], "substitutionmatrix (class in skbio.sequence)": [[494, "skbio.sequence.SubstitutionMatrix"]], "__contains__() (skbio.sequence.substitutionmatrix method)": [[495, "skbio.sequence.SubstitutionMatrix.__contains__"]], "__eq__() (skbio.sequence.substitutionmatrix method)": [[496, "skbio.sequence.SubstitutionMatrix.__eq__"]], "__ge__() (skbio.sequence.substitutionmatrix method)": [[497, "skbio.sequence.SubstitutionMatrix.__ge__"]], "__getitem__() (skbio.sequence.substitutionmatrix method)": [[498, "skbio.sequence.SubstitutionMatrix.__getitem__"]], "__getstate__() (skbio.sequence.substitutionmatrix method)": [[499, "skbio.sequence.SubstitutionMatrix.__getstate__"]], "__gt__() (skbio.sequence.substitutionmatrix method)": [[500, "skbio.sequence.SubstitutionMatrix.__gt__"]], "__le__() (skbio.sequence.substitutionmatrix method)": [[501, "skbio.sequence.SubstitutionMatrix.__le__"]], "__lt__() (skbio.sequence.substitutionmatrix method)": [[502, "skbio.sequence.SubstitutionMatrix.__lt__"]], "__ne__() (skbio.sequence.substitutionmatrix method)": [[503, "skbio.sequence.SubstitutionMatrix.__ne__"]], "__str__() (skbio.sequence.substitutionmatrix method)": [[504, "skbio.sequence.SubstitutionMatrix.__str__"]], "between() (skbio.sequence.substitutionmatrix method)": [[505, "skbio.sequence.SubstitutionMatrix.between"]], "by_name() (skbio.sequence.substitutionmatrix class method)": [[506, "skbio.sequence.SubstitutionMatrix.by_name"]], "copy() (skbio.sequence.substitutionmatrix method)": [[507, "skbio.sequence.SubstitutionMatrix.copy"]], "filter() (skbio.sequence.substitutionmatrix method)": [[508, "skbio.sequence.SubstitutionMatrix.filter"]], "from_dict() (skbio.sequence.substitutionmatrix class method)": [[509, "skbio.sequence.SubstitutionMatrix.from_dict"]], "from_iterable() (skbio.sequence.substitutionmatrix class method)": [[510, "skbio.sequence.SubstitutionMatrix.from_iterable"]], "get_names() (skbio.sequence.substitutionmatrix class method)": [[511, "skbio.sequence.SubstitutionMatrix.get_names"]], "identity() (skbio.sequence.substitutionmatrix class method)": [[512, "skbio.sequence.SubstitutionMatrix.identity"]], "index() (skbio.sequence.substitutionmatrix method)": [[513, "skbio.sequence.SubstitutionMatrix.index"]], "plot() (skbio.sequence.substitutionmatrix method)": [[514, "skbio.sequence.SubstitutionMatrix.plot"]], "read() (skbio.sequence.substitutionmatrix class method)": [[515, "skbio.sequence.SubstitutionMatrix.read"]], "redundant_form() (skbio.sequence.substitutionmatrix method)": [[516, "skbio.sequence.SubstitutionMatrix.redundant_form"]], "to_data_frame() (skbio.sequence.substitutionmatrix method)": [[517, "skbio.sequence.SubstitutionMatrix.to_data_frame"]], "to_dict() (skbio.sequence.substitutionmatrix method)": [[518, "skbio.sequence.SubstitutionMatrix.to_dict"]], "transpose() (skbio.sequence.substitutionmatrix method)": [[519, "skbio.sequence.SubstitutionMatrix.transpose"]], "within() (skbio.sequence.substitutionmatrix method)": [[520, "skbio.sequence.SubstitutionMatrix.within"]], "write() (skbio.sequence.substitutionmatrix method)": [[521, "skbio.sequence.SubstitutionMatrix.write"]], "skbio.sequence.distance": [[522, "module-skbio.sequence.distance"]], "hamming() (in module skbio.sequence.distance)": [[523, "skbio.sequence.distance.hamming"]], "kmer_distance() (in module skbio.sequence.distance)": [[524, "skbio.sequence.distance.kmer_distance"]], "skbio.stats.composition": [[525, "module-skbio.stats.composition"]], "alr() (in module skbio.stats.composition)": [[526, "skbio.stats.composition.alr"]], "alr_inv() (in module skbio.stats.composition)": [[527, "skbio.stats.composition.alr_inv"]], "ancom() (in module skbio.stats.composition)": [[528, "skbio.stats.composition.ancom"]], "centralize() (in module skbio.stats.composition)": [[529, "skbio.stats.composition.centralize"]], "closure() (in module skbio.stats.composition)": [[530, "skbio.stats.composition.closure"]], "clr() (in module skbio.stats.composition)": [[531, "skbio.stats.composition.clr"]], "clr_inv() (in module skbio.stats.composition)": [[532, "skbio.stats.composition.clr_inv"]], "dirmult_ttest() (in module skbio.stats.composition)": [[533, "skbio.stats.composition.dirmult_ttest"]], "ilr() (in module skbio.stats.composition)": [[534, "skbio.stats.composition.ilr"]], "ilr_inv() (in module skbio.stats.composition)": [[535, "skbio.stats.composition.ilr_inv"]], "inner() (in module skbio.stats.composition)": [[536, "skbio.stats.composition.inner"]], "multi_replace() (in module skbio.stats.composition)": [[537, "skbio.stats.composition.multi_replace"]], "multiplicative_replacement() (in module skbio.stats.composition)": [[538, "skbio.stats.composition.multiplicative_replacement"]], "pairwise_vlr() (in module skbio.stats.composition)": [[539, "skbio.stats.composition.pairwise_vlr"]], "perturb() (in module skbio.stats.composition)": [[540, "skbio.stats.composition.perturb"]], "perturb_inv() (in module skbio.stats.composition)": [[541, "skbio.stats.composition.perturb_inv"]], "power() (in module skbio.stats.composition)": [[542, "skbio.stats.composition.power"]], "sbp_basis() (in module skbio.stats.composition)": [[543, "skbio.stats.composition.sbp_basis"]], "tree_basis() (in module skbio.stats.composition)": [[544, "skbio.stats.composition.tree_basis"]], "vlr() (in module skbio.stats.composition)": [[545, "skbio.stats.composition.vlr"]], "skbio.stats.distance": [[546, "module-skbio.stats.distance"]], "dissimilaritymatrix (class in skbio.stats.distance)": [[547, "skbio.stats.distance.DissimilarityMatrix"]], "__contains__() (skbio.stats.distance.dissimilaritymatrix method)": [[548, "skbio.stats.distance.DissimilarityMatrix.__contains__"]], "__eq__() (skbio.stats.distance.dissimilaritymatrix method)": [[549, "skbio.stats.distance.DissimilarityMatrix.__eq__"]], "__ge__() (skbio.stats.distance.dissimilaritymatrix method)": [[550, "skbio.stats.distance.DissimilarityMatrix.__ge__"]], "__getitem__() (skbio.stats.distance.dissimilaritymatrix method)": [[551, "skbio.stats.distance.DissimilarityMatrix.__getitem__"]], "__getstate__() (skbio.stats.distance.dissimilaritymatrix method)": [[552, "skbio.stats.distance.DissimilarityMatrix.__getstate__"]], "__gt__() (skbio.stats.distance.dissimilaritymatrix method)": [[553, "skbio.stats.distance.DissimilarityMatrix.__gt__"]], "__le__() (skbio.stats.distance.dissimilaritymatrix method)": [[554, "skbio.stats.distance.DissimilarityMatrix.__le__"]], "__lt__() (skbio.stats.distance.dissimilaritymatrix method)": [[555, "skbio.stats.distance.DissimilarityMatrix.__lt__"]], "__ne__() (skbio.stats.distance.dissimilaritymatrix method)": [[556, "skbio.stats.distance.DissimilarityMatrix.__ne__"]], "__str__() (skbio.stats.distance.dissimilaritymatrix method)": [[557, "skbio.stats.distance.DissimilarityMatrix.__str__"]], "between() (skbio.stats.distance.dissimilaritymatrix method)": [[558, "skbio.stats.distance.DissimilarityMatrix.between"]], "copy() (skbio.stats.distance.dissimilaritymatrix method)": [[559, "skbio.stats.distance.DissimilarityMatrix.copy"]], "filter() (skbio.stats.distance.dissimilaritymatrix method)": [[560, "skbio.stats.distance.DissimilarityMatrix.filter"]], "from_iterable() (skbio.stats.distance.dissimilaritymatrix class method)": [[561, "skbio.stats.distance.DissimilarityMatrix.from_iterable"]], "index() (skbio.stats.distance.dissimilaritymatrix method)": [[562, "skbio.stats.distance.DissimilarityMatrix.index"]], "plot() (skbio.stats.distance.dissimilaritymatrix method)": [[563, "skbio.stats.distance.DissimilarityMatrix.plot"]], "read() (skbio.stats.distance.dissimilaritymatrix class method)": [[564, "skbio.stats.distance.DissimilarityMatrix.read"]], "redundant_form() (skbio.stats.distance.dissimilaritymatrix method)": [[565, "skbio.stats.distance.DissimilarityMatrix.redundant_form"]], "to_data_frame() (skbio.stats.distance.dissimilaritymatrix method)": [[566, "skbio.stats.distance.DissimilarityMatrix.to_data_frame"]], "transpose() (skbio.stats.distance.dissimilaritymatrix method)": [[567, "skbio.stats.distance.DissimilarityMatrix.transpose"]], "within() (skbio.stats.distance.dissimilaritymatrix method)": [[568, "skbio.stats.distance.DissimilarityMatrix.within"]], "write() (skbio.stats.distance.dissimilaritymatrix method)": [[569, "skbio.stats.distance.DissimilarityMatrix.write"]], "dissimilaritymatrixerror": [[570, "skbio.stats.distance.DissimilarityMatrixError"]], "distancematrix (class in skbio.stats.distance)": [[571, "skbio.stats.distance.DistanceMatrix"]], "__contains__() (skbio.stats.distance.distancematrix method)": [[572, "skbio.stats.distance.DistanceMatrix.__contains__"]], "__eq__() (skbio.stats.distance.distancematrix method)": [[573, "skbio.stats.distance.DistanceMatrix.__eq__"]], "__ge__() (skbio.stats.distance.distancematrix method)": [[574, "skbio.stats.distance.DistanceMatrix.__ge__"]], "__getitem__() (skbio.stats.distance.distancematrix method)": [[575, "skbio.stats.distance.DistanceMatrix.__getitem__"]], "__getstate__() (skbio.stats.distance.distancematrix method)": [[576, "skbio.stats.distance.DistanceMatrix.__getstate__"]], "__gt__() (skbio.stats.distance.distancematrix method)": [[577, "skbio.stats.distance.DistanceMatrix.__gt__"]], "__le__() (skbio.stats.distance.distancematrix method)": [[578, "skbio.stats.distance.DistanceMatrix.__le__"]], "__lt__() (skbio.stats.distance.distancematrix method)": [[579, "skbio.stats.distance.DistanceMatrix.__lt__"]], "__ne__() (skbio.stats.distance.distancematrix method)": [[580, "skbio.stats.distance.DistanceMatrix.__ne__"]], "__str__() (skbio.stats.distance.distancematrix method)": [[581, "skbio.stats.distance.DistanceMatrix.__str__"]], "between() (skbio.stats.distance.distancematrix method)": [[582, "skbio.stats.distance.DistanceMatrix.between"]], "condensed_form() (skbio.stats.distance.distancematrix method)": [[583, "skbio.stats.distance.DistanceMatrix.condensed_form"]], "copy() (skbio.stats.distance.distancematrix method)": [[584, "skbio.stats.distance.DistanceMatrix.copy"]], "filter() (skbio.stats.distance.distancematrix method)": [[585, "skbio.stats.distance.DistanceMatrix.filter"]], "from_iterable() (skbio.stats.distance.distancematrix class method)": [[586, "skbio.stats.distance.DistanceMatrix.from_iterable"]], "index() (skbio.stats.distance.distancematrix method)": [[587, "skbio.stats.distance.DistanceMatrix.index"]], "permute() (skbio.stats.distance.distancematrix method)": [[588, "skbio.stats.distance.DistanceMatrix.permute"]], "plot() (skbio.stats.distance.distancematrix method)": [[589, "skbio.stats.distance.DistanceMatrix.plot"]], "read() (skbio.stats.distance.distancematrix class method)": [[590, "skbio.stats.distance.DistanceMatrix.read"]], "redundant_form() (skbio.stats.distance.distancematrix method)": [[591, "skbio.stats.distance.DistanceMatrix.redundant_form"]], "to_data_frame() (skbio.stats.distance.distancematrix method)": [[592, "skbio.stats.distance.DistanceMatrix.to_data_frame"]], "to_series() (skbio.stats.distance.distancematrix method)": [[593, "skbio.stats.distance.DistanceMatrix.to_series"]], "transpose() (skbio.stats.distance.distancematrix method)": [[594, "skbio.stats.distance.DistanceMatrix.transpose"]], "within() (skbio.stats.distance.distancematrix method)": [[595, "skbio.stats.distance.DistanceMatrix.within"]], "write() (skbio.stats.distance.distancematrix method)": [[596, "skbio.stats.distance.DistanceMatrix.write"]], "distancematrixerror": [[597, "skbio.stats.distance.DistanceMatrixError"]], "missingiderror": [[598, "skbio.stats.distance.MissingIDError"]], "anosim() (in module skbio.stats.distance)": [[599, "skbio.stats.distance.anosim"]], "bioenv() (in module skbio.stats.distance)": [[600, "skbio.stats.distance.bioenv"]], "mantel() (in module skbio.stats.distance)": [[601, "skbio.stats.distance.mantel"]], "permanova() (in module skbio.stats.distance)": [[602, "skbio.stats.distance.permanova"]], "permdisp() (in module skbio.stats.distance)": [[603, "skbio.stats.distance.permdisp"]], "pwmantel() (in module skbio.stats.distance)": [[604, "skbio.stats.distance.pwmantel"]], "randdm() (in module skbio.stats.distance)": [[605, "skbio.stats.distance.randdm"]], "skbio.stats.evolve": [[606, "module-skbio.stats.evolve"]], "hommola_cospeciation() (in module skbio.stats.evolve)": [[607, "skbio.stats.evolve.hommola_cospeciation"]], "skbio.stats.gradient": [[608, "module-skbio.stats.gradient"]], "averagegradientanova (class in skbio.stats.gradient)": [[609, "skbio.stats.gradient.AverageGradientANOVA"]], "__eq__() (skbio.stats.gradient.averagegradientanova method)": [[610, "skbio.stats.gradient.AverageGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.averagegradientanova method)": [[611, "skbio.stats.gradient.AverageGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.averagegradientanova method)": [[612, "skbio.stats.gradient.AverageGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.averagegradientanova method)": [[613, "skbio.stats.gradient.AverageGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.averagegradientanova method)": [[614, "skbio.stats.gradient.AverageGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.averagegradientanova method)": [[615, "skbio.stats.gradient.AverageGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.averagegradientanova method)": [[616, "skbio.stats.gradient.AverageGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.averagegradientanova method)": [[617, "skbio.stats.gradient.AverageGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.averagegradientanova method)": [[618, "skbio.stats.gradient.AverageGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.averagegradientanova method)": [[619, "skbio.stats.gradient.AverageGradientANOVA.get_trajectories"]], "categoryresults (class in skbio.stats.gradient)": [[620, "skbio.stats.gradient.CategoryResults"]], "__eq__() (skbio.stats.gradient.categoryresults method)": [[621, "skbio.stats.gradient.CategoryResults.__eq__"]], "__ge__() (skbio.stats.gradient.categoryresults method)": [[622, "skbio.stats.gradient.CategoryResults.__ge__"]], "__getstate__() (skbio.stats.gradient.categoryresults method)": [[623, "skbio.stats.gradient.CategoryResults.__getstate__"]], "__gt__() (skbio.stats.gradient.categoryresults method)": [[624, "skbio.stats.gradient.CategoryResults.__gt__"]], "__hash__() (skbio.stats.gradient.categoryresults method)": [[625, "skbio.stats.gradient.CategoryResults.__hash__"]], "__le__() (skbio.stats.gradient.categoryresults method)": [[626, "skbio.stats.gradient.CategoryResults.__le__"]], "__lt__() (skbio.stats.gradient.categoryresults method)": [[627, "skbio.stats.gradient.CategoryResults.__lt__"]], "__ne__() (skbio.stats.gradient.categoryresults method)": [[628, "skbio.stats.gradient.CategoryResults.__ne__"]], "__str__() (skbio.stats.gradient.categoryresults method)": [[629, "skbio.stats.gradient.CategoryResults.__str__"]], "to_files() (skbio.stats.gradient.categoryresults method)": [[630, "skbio.stats.gradient.CategoryResults.to_files"]], "firstdifferencegradientanova (class in skbio.stats.gradient)": [[631, "skbio.stats.gradient.FirstDifferenceGradientANOVA"]], "__eq__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[632, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[633, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[634, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[635, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[636, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[637, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[638, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[639, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[640, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.firstdifferencegradientanova method)": [[641, "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories"]], "gradientanova (class in skbio.stats.gradient)": [[642, "skbio.stats.gradient.GradientANOVA"]], "__eq__() (skbio.stats.gradient.gradientanova method)": [[643, "skbio.stats.gradient.GradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.gradientanova method)": [[644, "skbio.stats.gradient.GradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.gradientanova method)": [[645, "skbio.stats.gradient.GradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.gradientanova method)": [[646, "skbio.stats.gradient.GradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.gradientanova method)": [[647, "skbio.stats.gradient.GradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.gradientanova method)": [[648, "skbio.stats.gradient.GradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.gradientanova method)": [[649, "skbio.stats.gradient.GradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.gradientanova method)": [[650, "skbio.stats.gradient.GradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.gradientanova method)": [[651, "skbio.stats.gradient.GradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.gradientanova method)": [[652, "skbio.stats.gradient.GradientANOVA.get_trajectories"]], "gradientanovaresults (class in skbio.stats.gradient)": [[653, "skbio.stats.gradient.GradientANOVAResults"]], "__eq__() (skbio.stats.gradient.gradientanovaresults method)": [[654, "skbio.stats.gradient.GradientANOVAResults.__eq__"]], "__ge__() (skbio.stats.gradient.gradientanovaresults method)": [[655, "skbio.stats.gradient.GradientANOVAResults.__ge__"]], "__getstate__() (skbio.stats.gradient.gradientanovaresults method)": [[656, "skbio.stats.gradient.GradientANOVAResults.__getstate__"]], "__gt__() (skbio.stats.gradient.gradientanovaresults method)": [[657, "skbio.stats.gradient.GradientANOVAResults.__gt__"]], "__hash__() (skbio.stats.gradient.gradientanovaresults method)": [[658, "skbio.stats.gradient.GradientANOVAResults.__hash__"]], "__le__() (skbio.stats.gradient.gradientanovaresults method)": [[659, "skbio.stats.gradient.GradientANOVAResults.__le__"]], "__lt__() (skbio.stats.gradient.gradientanovaresults method)": [[660, "skbio.stats.gradient.GradientANOVAResults.__lt__"]], "__ne__() (skbio.stats.gradient.gradientanovaresults method)": [[661, "skbio.stats.gradient.GradientANOVAResults.__ne__"]], "__str__() (skbio.stats.gradient.gradientanovaresults method)": [[662, "skbio.stats.gradient.GradientANOVAResults.__str__"]], "to_files() (skbio.stats.gradient.gradientanovaresults method)": [[663, "skbio.stats.gradient.GradientANOVAResults.to_files"]], "groupresults (class in skbio.stats.gradient)": [[664, "skbio.stats.gradient.GroupResults"]], "__eq__() (skbio.stats.gradient.groupresults method)": [[665, "skbio.stats.gradient.GroupResults.__eq__"]], "__ge__() (skbio.stats.gradient.groupresults method)": [[666, "skbio.stats.gradient.GroupResults.__ge__"]], "__getstate__() (skbio.stats.gradient.groupresults method)": [[667, "skbio.stats.gradient.GroupResults.__getstate__"]], "__gt__() (skbio.stats.gradient.groupresults method)": [[668, "skbio.stats.gradient.GroupResults.__gt__"]], "__hash__() (skbio.stats.gradient.groupresults method)": [[669, "skbio.stats.gradient.GroupResults.__hash__"]], "__le__() (skbio.stats.gradient.groupresults method)": [[670, "skbio.stats.gradient.GroupResults.__le__"]], "__lt__() (skbio.stats.gradient.groupresults method)": [[671, "skbio.stats.gradient.GroupResults.__lt__"]], "__ne__() (skbio.stats.gradient.groupresults method)": [[672, "skbio.stats.gradient.GroupResults.__ne__"]], "__str__() (skbio.stats.gradient.groupresults method)": [[673, "skbio.stats.gradient.GroupResults.__str__"]], "to_files() (skbio.stats.gradient.groupresults method)": [[674, "skbio.stats.gradient.GroupResults.to_files"]], "trajectorygradientanova (class in skbio.stats.gradient)": [[675, "skbio.stats.gradient.TrajectoryGradientANOVA"]], "__eq__() (skbio.stats.gradient.trajectorygradientanova method)": [[676, "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.trajectorygradientanova method)": [[677, "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.trajectorygradientanova method)": [[678, "skbio.stats.gradient.TrajectoryGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.trajectorygradientanova method)": [[679, "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.trajectorygradientanova method)": [[680, "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.trajectorygradientanova method)": [[681, "skbio.stats.gradient.TrajectoryGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.trajectorygradientanova method)": [[682, "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.trajectorygradientanova method)": [[683, "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.trajectorygradientanova method)": [[684, "skbio.stats.gradient.TrajectoryGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.trajectorygradientanova method)": [[685, "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories"]], "windowdifferencegradientanova (class in skbio.stats.gradient)": [[686, "skbio.stats.gradient.WindowDifferenceGradientANOVA"]], "__eq__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[687, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[688, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__"]], "__getstate__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[689, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__getstate__"]], "__gt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[690, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[691, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[692, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[693, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[694, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[695, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.windowdifferencegradientanova method)": [[696, "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories"]], "isubsample() (in module skbio.stats)": [[697, "skbio.stats.isubsample"]], "skbio.stats.ordination": [[698, "module-skbio.stats.ordination"]], "ordinationresults (class in skbio.stats.ordination)": [[699, "skbio.stats.ordination.OrdinationResults"]], "__eq__() (skbio.stats.ordination.ordinationresults method)": [[700, "skbio.stats.ordination.OrdinationResults.__eq__"]], "__ge__() (skbio.stats.ordination.ordinationresults method)": [[701, "skbio.stats.ordination.OrdinationResults.__ge__"]], "__getstate__() (skbio.stats.ordination.ordinationresults method)": [[702, "skbio.stats.ordination.OrdinationResults.__getstate__"]], "__gt__() (skbio.stats.ordination.ordinationresults method)": [[703, "skbio.stats.ordination.OrdinationResults.__gt__"]], "__hash__() (skbio.stats.ordination.ordinationresults method)": [[704, "skbio.stats.ordination.OrdinationResults.__hash__"]], "__le__() (skbio.stats.ordination.ordinationresults method)": [[705, "skbio.stats.ordination.OrdinationResults.__le__"]], "__lt__() (skbio.stats.ordination.ordinationresults method)": [[706, "skbio.stats.ordination.OrdinationResults.__lt__"]], "__ne__() (skbio.stats.ordination.ordinationresults method)": [[707, "skbio.stats.ordination.OrdinationResults.__ne__"]], "__str__() (skbio.stats.ordination.ordinationresults method)": [[708, "skbio.stats.ordination.OrdinationResults.__str__"]], "plot() (skbio.stats.ordination.ordinationresults method)": [[709, "skbio.stats.ordination.OrdinationResults.plot"]], "read() (skbio.stats.ordination.ordinationresults class method)": [[710, "skbio.stats.ordination.OrdinationResults.read"]], "write() (skbio.stats.ordination.ordinationresults method)": [[711, "skbio.stats.ordination.OrdinationResults.write"]], "ca() (in module skbio.stats.ordination)": [[712, "skbio.stats.ordination.ca"]], "cca() (in module skbio.stats.ordination)": [[713, "skbio.stats.ordination.cca"]], "corr() (in module skbio.stats.ordination)": [[714, "skbio.stats.ordination.corr"]], "e_matrix() (in module skbio.stats.ordination)": [[715, "skbio.stats.ordination.e_matrix"]], "f_matrix() (in module skbio.stats.ordination)": [[716, "skbio.stats.ordination.f_matrix"]], "mean_and_std() (in module skbio.stats.ordination)": [[717, "skbio.stats.ordination.mean_and_std"]], "pcoa() (in module skbio.stats.ordination)": [[718, "skbio.stats.ordination.pcoa"]], "pcoa_biplot() (in module skbio.stats.ordination)": [[719, "skbio.stats.ordination.pcoa_biplot"]], "rda() (in module skbio.stats.ordination)": [[720, "skbio.stats.ordination.rda"]], "scale() (in module skbio.stats.ordination)": [[721, "skbio.stats.ordination.scale"]], "svd_rank() (in module skbio.stats.ordination)": [[722, "skbio.stats.ordination.svd_rank"]], "skbio.stats.power": [[723, "module-skbio.stats.power"]], "confidence_bound() (in module skbio.stats.power)": [[724, "skbio.stats.power.confidence_bound"]], "paired_subsamples() (in module skbio.stats.power)": [[725, "skbio.stats.power.paired_subsamples"]], "subsample_paired_power() (in module skbio.stats.power)": [[726, "skbio.stats.power.subsample_paired_power"]], "subsample_power() (in module skbio.stats.power)": [[727, "skbio.stats.power.subsample_power"]], "subsample_counts() (in module skbio.stats)": [[728, "skbio.stats.subsample_counts"]], "duplicatenodeerror": [[729, "skbio.tree.DuplicateNodeError"]], "missingnodeerror": [[730, "skbio.tree.MissingNodeError"]], "nolengtherror": [[731, "skbio.tree.NoLengthError"]], "noparenterror": [[732, "skbio.tree.NoParentError"]], "treeerror": [[733, "skbio.tree.TreeError"]], "treenode (class in skbio.tree)": [[734, "skbio.tree.TreeNode"]], "__copy__() (skbio.tree.treenode method)": [[735, "skbio.tree.TreeNode.__copy__"]], "__deepcopy__() (skbio.tree.treenode method)": [[736, "skbio.tree.TreeNode.__deepcopy__"]], "__eq__() (skbio.tree.treenode method)": [[737, "skbio.tree.TreeNode.__eq__"]], "__ge__() (skbio.tree.treenode method)": [[738, "skbio.tree.TreeNode.__ge__"]], "__getitem__() (skbio.tree.treenode method)": [[739, "skbio.tree.TreeNode.__getitem__"]], "__getstate__() (skbio.tree.treenode method)": [[740, "skbio.tree.TreeNode.__getstate__"]], "__gt__() (skbio.tree.treenode method)": [[741, "skbio.tree.TreeNode.__gt__"]], "__hash__() (skbio.tree.treenode method)": [[742, "skbio.tree.TreeNode.__hash__"]], "__iter__() (skbio.tree.treenode method)": [[743, "skbio.tree.TreeNode.__iter__"]], "__le__() (skbio.tree.treenode method)": [[744, "skbio.tree.TreeNode.__le__"]], "__len__() (skbio.tree.treenode method)": [[745, "skbio.tree.TreeNode.__len__"]], "__lt__() (skbio.tree.treenode method)": [[746, "skbio.tree.TreeNode.__lt__"]], "__ne__() (skbio.tree.treenode method)": [[747, "skbio.tree.TreeNode.__ne__"]], "__str__() (skbio.tree.treenode method)": [[748, "skbio.tree.TreeNode.__str__"]], "accumulate_to_ancestor() (skbio.tree.treenode method)": [[749, "skbio.tree.TreeNode.accumulate_to_ancestor"]], "ancestors() (skbio.tree.treenode method)": [[750, "skbio.tree.TreeNode.ancestors"]], "append() (skbio.tree.treenode method)": [[751, "skbio.tree.TreeNode.append"]], "ascii_art() (skbio.tree.treenode method)": [[752, "skbio.tree.TreeNode.ascii_art"]], "assign_ids() (skbio.tree.treenode method)": [[753, "skbio.tree.TreeNode.assign_ids"]], "assign_supports() (skbio.tree.treenode method)": [[754, "skbio.tree.TreeNode.assign_supports"]], "bifurcate() (skbio.tree.treenode method)": [[755, "skbio.tree.TreeNode.bifurcate"]], "cache_attr() (skbio.tree.treenode method)": [[756, "skbio.tree.TreeNode.cache_attr"]], "compare_rfd() (skbio.tree.treenode method)": [[757, "skbio.tree.TreeNode.compare_rfd"]], "compare_subsets() (skbio.tree.treenode method)": [[758, "skbio.tree.TreeNode.compare_subsets"]], "compare_tip_distances() (skbio.tree.treenode method)": [[759, "skbio.tree.TreeNode.compare_tip_distances"]], "copy() (skbio.tree.treenode method)": [[760, "skbio.tree.TreeNode.copy"]], "count() (skbio.tree.treenode method)": [[761, "skbio.tree.TreeNode.count"]], "create_caches() (skbio.tree.treenode method)": [[762, "skbio.tree.TreeNode.create_caches"]], "deepcopy() (skbio.tree.treenode method)": [[763, "skbio.tree.TreeNode.deepcopy"]], "descending_branch_length() (skbio.tree.treenode method)": [[764, "skbio.tree.TreeNode.descending_branch_length"]], "distance() (skbio.tree.treenode method)": [[765, "skbio.tree.TreeNode.distance"]], "extend() (skbio.tree.treenode method)": [[766, "skbio.tree.TreeNode.extend"]], "find() (skbio.tree.treenode method)": [[767, "skbio.tree.TreeNode.find"]], "find_all() (skbio.tree.treenode method)": [[768, "skbio.tree.TreeNode.find_all"]], "find_by_func() (skbio.tree.treenode method)": [[769, "skbio.tree.TreeNode.find_by_func"]], "find_by_id() (skbio.tree.treenode method)": [[770, "skbio.tree.TreeNode.find_by_id"]], "from_linkage_matrix() (skbio.tree.treenode class method)": [[771, "skbio.tree.TreeNode.from_linkage_matrix"]], "from_taxdump() (skbio.tree.treenode class method)": [[772, "skbio.tree.TreeNode.from_taxdump"]], "from_taxonomy() (skbio.tree.treenode class method)": [[773, "skbio.tree.TreeNode.from_taxonomy"]], "get_max_distance() (skbio.tree.treenode method)": [[774, "skbio.tree.TreeNode.get_max_distance"]], "has_children() (skbio.tree.treenode method)": [[775, "skbio.tree.TreeNode.has_children"]], "index_tree() (skbio.tree.treenode method)": [[776, "skbio.tree.TreeNode.index_tree"]], "invalidate_caches() (skbio.tree.treenode method)": [[777, "skbio.tree.TreeNode.invalidate_caches"]], "is_root() (skbio.tree.treenode method)": [[778, "skbio.tree.TreeNode.is_root"]], "is_tip() (skbio.tree.treenode method)": [[779, "skbio.tree.TreeNode.is_tip"]], "lca() (skbio.tree.treenode method)": [[780, "skbio.tree.TreeNode.lca"]], "levelorder() (skbio.tree.treenode method)": [[781, "skbio.tree.TreeNode.levelorder"]], "lowest_common_ancestor() (skbio.tree.treenode method)": [[782, "skbio.tree.TreeNode.lowest_common_ancestor"]], "neighbors() (skbio.tree.treenode method)": [[783, "skbio.tree.TreeNode.neighbors"]], "non_tips() (skbio.tree.treenode method)": [[784, "skbio.tree.TreeNode.non_tips"]], "observed_node_counts() (skbio.tree.treenode method)": [[785, "skbio.tree.TreeNode.observed_node_counts"]], "pop() (skbio.tree.treenode method)": [[786, "skbio.tree.TreeNode.pop"]], "postorder() (skbio.tree.treenode method)": [[787, "skbio.tree.TreeNode.postorder"]], "pre_and_postorder() (skbio.tree.treenode method)": [[788, "skbio.tree.TreeNode.pre_and_postorder"]], "preorder() (skbio.tree.treenode method)": [[789, "skbio.tree.TreeNode.preorder"]], "prune() (skbio.tree.treenode method)": [[790, "skbio.tree.TreeNode.prune"]], "read() (skbio.tree.treenode class method)": [[791, "skbio.tree.TreeNode.read"]], "remove() (skbio.tree.treenode method)": [[792, "skbio.tree.TreeNode.remove"]], "remove_deleted() (skbio.tree.treenode method)": [[793, "skbio.tree.TreeNode.remove_deleted"]], "root() (skbio.tree.treenode method)": [[794, "skbio.tree.TreeNode.root"]], "root_at() (skbio.tree.treenode method)": [[795, "skbio.tree.TreeNode.root_at"]], "root_at_midpoint() (skbio.tree.treenode method)": [[796, "skbio.tree.TreeNode.root_at_midpoint"]], "shear() (skbio.tree.treenode method)": [[797, "skbio.tree.TreeNode.shear"]], "shuffle() (skbio.tree.treenode method)": [[798, "skbio.tree.TreeNode.shuffle"]], "siblings() (skbio.tree.treenode method)": [[799, "skbio.tree.TreeNode.siblings"]], "subset() (skbio.tree.treenode method)": [[800, "skbio.tree.TreeNode.subset"]], "subsets() (skbio.tree.treenode method)": [[801, "skbio.tree.TreeNode.subsets"]], "subtree() (skbio.tree.treenode method)": [[802, "skbio.tree.TreeNode.subtree"]], "tip_tip_distances() (skbio.tree.treenode method)": [[803, "skbio.tree.TreeNode.tip_tip_distances"]], "tips() (skbio.tree.treenode method)": [[804, "skbio.tree.TreeNode.tips"]], "to_array() (skbio.tree.treenode method)": [[805, "skbio.tree.TreeNode.to_array"]], "to_taxonomy() (skbio.tree.treenode method)": [[806, "skbio.tree.TreeNode.to_taxonomy"]], "traverse() (skbio.tree.treenode method)": [[807, "skbio.tree.TreeNode.traverse"]], "unpack() (skbio.tree.treenode method)": [[808, "skbio.tree.TreeNode.unpack"]], "unpack_by_func() (skbio.tree.treenode method)": [[809, "skbio.tree.TreeNode.unpack_by_func"]], "unrooted_copy() (skbio.tree.treenode method)": [[810, "skbio.tree.TreeNode.unrooted_copy"]], "unrooted_deepcopy() (skbio.tree.treenode method)": [[811, "skbio.tree.TreeNode.unrooted_deepcopy"]], "write() (skbio.tree.treenode method)": [[812, "skbio.tree.TreeNode.write"]], "majority_rule() (in module skbio.tree)": [[813, "skbio.tree.majority_rule"]], "nj() (in module skbio.tree)": [[814, "skbio.tree.nj"]], "efficiencywarning": [[815, "skbio.util.EfficiencyWarning"]], "representationwarning": [[816, "skbio.util.RepresentationWarning"]], "assert_data_frame_almost_equal() (in module skbio.util)": [[817, "skbio.util.assert_data_frame_almost_equal"]], "assert_ordination_results_equal() (in module skbio.util)": [[818, "skbio.util.assert_ordination_results_equal"]], "cardinal_to_ordinal() (in module skbio.util)": [[819, "skbio.util.cardinal_to_ordinal"]], "classproperty (class in skbio.util)": [[820, "skbio.util.classproperty"]], "__delete__() (skbio.util.classproperty method)": [[821, "skbio.util.classproperty.__delete__"]], "__eq__() (skbio.util.classproperty method)": [[822, "skbio.util.classproperty.__eq__"]], "__ge__() (skbio.util.classproperty method)": [[823, "skbio.util.classproperty.__ge__"]], "__get__() (skbio.util.classproperty method)": [[824, "skbio.util.classproperty.__get__"]], "__getstate__() (skbio.util.classproperty method)": [[825, "skbio.util.classproperty.__getstate__"]], "__gt__() (skbio.util.classproperty method)": [[826, "skbio.util.classproperty.__gt__"]], "__hash__() (skbio.util.classproperty method)": [[827, "skbio.util.classproperty.__hash__"]], "__le__() (skbio.util.classproperty method)": [[828, "skbio.util.classproperty.__le__"]], "__lt__() (skbio.util.classproperty method)": [[829, "skbio.util.classproperty.__lt__"]], "__ne__() (skbio.util.classproperty method)": [[830, "skbio.util.classproperty.__ne__"]], "__set__() (skbio.util.classproperty method)": [[831, "skbio.util.classproperty.__set__"]], "__set_name__() (skbio.util.classproperty method)": [[832, "skbio.util.classproperty.__set_name__"]], "__str__() (skbio.util.classproperty method)": [[833, "skbio.util.classproperty.__str__"]], "deleter() (skbio.util.classproperty method)": [[834, "skbio.util.classproperty.deleter"]], "getter() (skbio.util.classproperty method)": [[835, "skbio.util.classproperty.getter"]], "setter() (skbio.util.classproperty method)": [[836, "skbio.util.classproperty.setter"]], "find_duplicates() (in module skbio.util)": [[837, "skbio.util.find_duplicates"]], "get_data_path() (in module skbio.util)": [[838, "skbio.util.get_data_path"]], "safe_md5() (in module skbio.util)": [[839, "skbio.util.safe_md5"]], "workflow (class in skbio.workflow)": [[840, "skbio.workflow.Workflow"]], "__call__() (skbio.workflow.workflow method)": [[841, "skbio.workflow.Workflow.__call__"]], "__eq__() (skbio.workflow.workflow method)": [[842, "skbio.workflow.Workflow.__eq__"]], "__ge__() (skbio.workflow.workflow method)": [[843, "skbio.workflow.Workflow.__ge__"]], "__getstate__() (skbio.workflow.workflow method)": [[844, "skbio.workflow.Workflow.__getstate__"]], "__gt__() (skbio.workflow.workflow method)": [[845, "skbio.workflow.Workflow.__gt__"]], "__hash__() (skbio.workflow.workflow method)": [[846, "skbio.workflow.Workflow.__hash__"]], "__le__() (skbio.workflow.workflow method)": [[847, "skbio.workflow.Workflow.__le__"]], "__lt__() (skbio.workflow.workflow method)": [[848, "skbio.workflow.Workflow.__lt__"]], "__ne__() (skbio.workflow.workflow method)": [[849, "skbio.workflow.Workflow.__ne__"]], "__str__() (skbio.workflow.workflow method)": [[850, "skbio.workflow.Workflow.__str__"]], "initialize_state() (skbio.workflow.workflow method)": [[851, "skbio.workflow.Workflow.initialize_state"]], "method (class in skbio.workflow)": [[852, "skbio.workflow.method"]], "__call__() (skbio.workflow.method method)": [[853, "skbio.workflow.method.__call__"]], "__eq__() (skbio.workflow.method method)": [[854, "skbio.workflow.method.__eq__"]], "__ge__() (skbio.workflow.method method)": [[855, "skbio.workflow.method.__ge__"]], "__getstate__() (skbio.workflow.method method)": [[856, "skbio.workflow.method.__getstate__"]], "__gt__() (skbio.workflow.method method)": [[857, "skbio.workflow.method.__gt__"]], "__hash__() (skbio.workflow.method method)": [[858, "skbio.workflow.method.__hash__"]], "__le__() (skbio.workflow.method method)": [[859, "skbio.workflow.method.__le__"]], "__lt__() (skbio.workflow.method method)": [[860, "skbio.workflow.method.__lt__"]], "__ne__() (skbio.workflow.method method)": [[861, "skbio.workflow.method.__ne__"]], "__str__() (skbio.workflow.method method)": [[862, "skbio.workflow.method.__str__"]], "requires (class in skbio.workflow)": [[863, "skbio.workflow.requires"]], "__call__() (skbio.workflow.requires method)": [[864, "skbio.workflow.requires.__call__"]], "__eq__() (skbio.workflow.requires method)": [[865, "skbio.workflow.requires.__eq__"]], "__ge__() (skbio.workflow.requires method)": [[866, "skbio.workflow.requires.__ge__"]], "__getstate__() (skbio.workflow.requires method)": [[867, "skbio.workflow.requires.__getstate__"]], "__gt__() (skbio.workflow.requires method)": [[868, "skbio.workflow.requires.__gt__"]], "__hash__() (skbio.workflow.requires method)": [[869, "skbio.workflow.requires.__hash__"]], "__le__() (skbio.workflow.requires method)": [[870, "skbio.workflow.requires.__le__"]], "__lt__() (skbio.workflow.requires method)": [[871, "skbio.workflow.requires.__lt__"]], "__ne__() (skbio.workflow.requires method)": [[872, "skbio.workflow.requires.__ne__"]], "__str__() (skbio.workflow.requires method)": [[873, "skbio.workflow.requires.__str__"]], "skbio.io": [[875, "module-skbio.io"]], "skbio.metadata": [[876, "module-skbio.metadata"]], "skbio.sequence": [[877, "module-skbio.sequence"]], "skbio.stats": [[878, "module-skbio.stats"]], "skbio.tree": [[879, "module-skbio.tree"]], "skbio.util": [[880, "module-skbio.util"]], "skbio.workflow": [[881, "module-skbio.workflow"]]}})